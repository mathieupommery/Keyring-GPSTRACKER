
projet vf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000197f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002520  08019988  08019988  00029988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bea8  0801bea8  00030308  2**0
                  CONTENTS
  4 .ARM          00000008  0801bea8  0801bea8  0002bea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801beb0  0801beb0  00030308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801beb0  0801beb0  0002beb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801beb4  0801beb4  0002beb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  0801beb8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020fc  20000308  0801c1c0  00030308  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002404  0801c1c0  00032404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b751  00000000  00000000  0003037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000061b1  00000000  00000000  0005bacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022b8  00000000  00000000  00061c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001aba  00000000  00000000  00063f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029faf  00000000  00000000  000659f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fb8b  00000000  00000000  0008f9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e898b  00000000  00000000  000bf52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ace8  00000000  00000000  001a7eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001b2ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000308 	.word	0x20000308
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019970 	.word	0x08019970

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000030c 	.word	0x2000030c
 80001cc:	08019970 	.word	0x08019970

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001006:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001008:	4a38      	ldr	r2, [pc, #224]	; (80010ec <MX_ADC1_Init+0xfc>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001012:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800101e:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001020:	2201      	movs	r2, #1
 8001022:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001024:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001026:	2204      	movs	r2, #4
 8001028:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800102c:	2200      	movs	r2, #0
 800102e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001032:	2201      	movs	r2, #1
 8001034:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001036:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001038:	2203      	movs	r2, #3
 800103a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001046:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800104e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800105e:	2200      	movs	r2, #0
 8001060:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106a:	481f      	ldr	r0, [pc, #124]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800106c:	f004 fd38 	bl	8005ae0 <HAL_ADC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001076:	f000 fcc2 	bl	80019fe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <MX_ADC1_Init+0x100>)
 800107c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800107e:	2306      	movs	r3, #6
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001082:	2307      	movs	r3, #7
 8001084:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001086:	237f      	movs	r3, #127	; 0x7f
 8001088:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800108a:	2304      	movs	r3, #4
 800108c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	4814      	ldr	r0, [pc, #80]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001098:	f005 f8ba 	bl	8006210 <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010a2:	f000 fcac 	bl	80019fe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_ADC1_Init+0x104>)
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010aa:	230c      	movs	r3, #12
 80010ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_ADC1_Init+0xf8>)
 80010b4:	f005 f8ac 	bl	8006210 <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80010be:	f000 fc9e 	bl	80019fe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <MX_ADC1_Init+0x108>)
 80010c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010c6:	2312      	movs	r3, #18
 80010c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_ADC1_Init+0xf8>)
 80010d0:	f005 f89e 	bl	8006210 <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80010da:	f000 fc90 	bl	80019fe <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000324 	.word	0x20000324
 80010ec:	50040000 	.word	0x50040000
 80010f0:	80000001 	.word	0x80000001
 80010f4:	c7520000 	.word	0xc7520000
 80010f8:	25b00200 	.word	0x25b00200

080010fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <HAL_ADC_MspInit+0xdc>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d157      	bne.n	80011ce <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800111e:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a2e      	ldr	r2, [pc, #184]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001124:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b29      	ldr	r3, [pc, #164]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a28      	ldr	r2, [pc, #160]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800114e:	2310      	movs	r3, #16
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001152:	230b      	movs	r3, #11
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f006 f916 	bl	8007394 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800116a:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <HAL_ADC_MspInit+0xe8>)
 800116c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800118c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001194:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001198:	2200      	movs	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011a2:	480f      	ldr	r0, [pc, #60]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 80011a4:	f005 fe74 	bl	8006e90 <HAL_DMA_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80011ae:	f000 fc26 	bl	80019fe <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 80011b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80011b8:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2012      	movs	r0, #18
 80011c4:	f005 fe2d 	bl	8006e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80011c8:	2012      	movs	r0, #18
 80011ca:	f005 fe46 	bl	8006e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	50040000 	.word	0x50040000
 80011dc:	40021000 	.word	0x40021000
 80011e0:	20000388 	.word	0x20000388
 80011e4:	40020008 	.word	0x40020008

080011e8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80011e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a54      	ldr	r2, [pc, #336]	; (8001348 <HAL_ADC_ConvCpltCallback+0x160>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	f040 8091 	bne.w	8001320 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 80011fe:	4b53      	ldr	r3, [pc, #332]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f98e 	bl	8000524 <__aeabi_i2d>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	a14a      	add	r1, pc, #296	; (adr r1, 8001338 <HAL_ADC_ConvCpltCallback+0x150>)
 800120e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001212:	f7ff fb1b 	bl	800084c <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fce3 	bl	8000be8 <__aeabi_d2f>
 8001222:	4603      	mov	r3, r0
 8001224:	4a4a      	ldr	r2, [pc, #296]	; (8001350 <HAL_ADC_ConvCpltCallback+0x168>)
 8001226:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001228:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <HAL_ADC_ConvCpltCallback+0x16c>)
 800122a:	ed93 7a00 	vldr	s14, [r3]
 800122e:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <HAL_ADC_ConvCpltCallback+0x170>)
 8001230:	edd3 7a00 	vldr	s15, [r3]
 8001234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001238:	ee17 0a90 	vmov	r0, s15
 800123c:	f7ff f984 	bl	8000548 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	f04f 0000 	mov.w	r0, #0
 8001248:	4944      	ldr	r1, [pc, #272]	; (800135c <HAL_ADC_ConvCpltCallback+0x174>)
 800124a:	f7ff faff 	bl	800084c <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4690      	mov	r8, r2
 8001254:	4699      	mov	r9, r3
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 8001258:	885b      	ldrh	r3, [r3, #2]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f962 	bl	8000524 <__aeabi_i2d>
 8001260:	4604      	mov	r4, r0
 8001262:	460d      	mov	r5, r1
 8001264:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <HAL_ADC_ConvCpltCallback+0x168>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f96d 	bl	8000548 <__aeabi_f2d>
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <HAL_ADC_ConvCpltCallback+0x178>)
 8001274:	f7ff faea 	bl	800084c <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4620      	mov	r0, r4
 800127e:	4629      	mov	r1, r5
 8001280:	f7ff f9ba 	bl	80005f8 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4614      	mov	r4, r2
 800128a:	461d      	mov	r5, r3
 800128c:	4b32      	ldr	r3, [pc, #200]	; (8001358 <HAL_ADC_ConvCpltCallback+0x170>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f959 	bl	8000548 <__aeabi_f2d>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4620      	mov	r0, r4
 800129c:	4629      	mov	r1, r5
 800129e:	f7fe fff3 	bl	8000288 <__aeabi_dsub>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4640      	mov	r0, r8
 80012a8:	4649      	mov	r1, r9
 80012aa:	f7ff f9a5 	bl	80005f8 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc97 	bl	8000be8 <__aeabi_d2f>
 80012ba:	ee07 0a10 	vmov	s14, r0
 80012be:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80012c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <HAL_ADC_ConvCpltCallback+0x17c>)
 80012c8:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 80012ce:	889b      	ldrh	r3, [r3, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f927 	bl	8000524 <__aeabi_i2d>
 80012d6:	a31a      	add	r3, pc, #104	; (adr r3, 8001340 <HAL_ADC_ConvCpltCallback+0x158>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff fab6 	bl	800084c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	f7fe ffce 	bl	800028c <__adddf3>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	461d      	mov	r5, r3
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_ADC_ConvCpltCallback+0x168>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f923 	bl	8000548 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4620      	mov	r0, r4
 8001308:	4629      	mov	r1, r5
 800130a:	f7ff f975 	bl	80005f8 <__aeabi_dmul>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fc67 	bl	8000be8 <__aeabi_d2f>
 800131a:	4603      	mov	r3, r0
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <HAL_ADC_ConvCpltCallback+0x180>)
 800131e:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001320:	2203      	movs	r2, #3
 8001322:	490a      	ldr	r1, [pc, #40]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 8001324:	4811      	ldr	r0, [pc, #68]	; (800136c <HAL_ADC_ConvCpltCallback+0x184>)
 8001326:	f004 fd1d 	bl	8005d64 <HAL_ADC_Start_DMA>



}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001334:	f3af 8000 	nop.w
 8001338:	d70a3d70 	.word	0xd70a3d70
 800133c:	40b36323 	.word	0x40b36323
 8001340:	00000000 	.word	0x00000000
 8001344:	40affe00 	.word	0x40affe00
 8001348:	50040000 	.word	0x50040000
 800134c:	20000730 	.word	0x20000730
 8001350:	2000073c 	.word	0x2000073c
 8001354:	20000000 	.word	0x20000000
 8001358:	20000004 	.word	0x20000004
 800135c:	40590000 	.word	0x40590000
 8001360:	40080000 	.word	0x40080000
 8001364:	20000738 	.word	0x20000738
 8001368:	20000740 	.word	0x20000740
 800136c:	20000324 	.word	0x20000324

08001370 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_DMA_Init+0x60>)
 8001378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137a:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <MX_DMA_Init+0x60>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6493      	str	r3, [r2, #72]	; 0x48
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MX_DMA_Init+0x60>)
 8001384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <MX_DMA_Init+0x60>)
 8001390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001392:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <MX_DMA_Init+0x60>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6493      	str	r3, [r2, #72]	; 0x48
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <MX_DMA_Init+0x60>)
 800139c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	200b      	movs	r0, #11
 80013ac:	f005 fd39 	bl	8006e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013b0:	200b      	movs	r0, #11
 80013b2:	f005 fd52 	bl	8006e5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2045      	movs	r0, #69	; 0x45
 80013bc:	f005 fd31 	bl	8006e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80013c0:	2045      	movs	r0, #69	; 0x45
 80013c2:	f005 fd4a 	bl	8006e5a <HAL_NVIC_EnableIRQ>

}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000

080013d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b38      	ldr	r3, [pc, #224]	; (80014cc <MX_GPIO_Init+0xf8>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4a37      	ldr	r2, [pc, #220]	; (80014cc <MX_GPIO_Init+0xf8>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4b35      	ldr	r3, [pc, #212]	; (80014cc <MX_GPIO_Init+0xf8>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	4b32      	ldr	r3, [pc, #200]	; (80014cc <MX_GPIO_Init+0xf8>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a31      	ldr	r2, [pc, #196]	; (80014cc <MX_GPIO_Init+0xf8>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <MX_GPIO_Init+0xf8>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	2102      	movs	r1, #2
 800141e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001422:	f006 f921 	bl	8007668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2101      	movs	r1, #1
 800142a:	4829      	ldr	r0, [pc, #164]	; (80014d0 <MX_GPIO_Init+0xfc>)
 800142c:	f006 f91c 	bl	8007668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001430:	2302      	movs	r3, #2
 8001432:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001434:	2301      	movs	r3, #1
 8001436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144a:	f005 ffa3 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 800144e:	2301      	movs	r3, #1
 8001450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4619      	mov	r1, r3
 8001464:	481a      	ldr	r0, [pc, #104]	; (80014d0 <MX_GPIO_Init+0xfc>)
 8001466:	f005 ff95 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800146a:	2302      	movs	r3, #2
 800146c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800146e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	4619      	mov	r1, r3
 800147e:	4814      	ldr	r0, [pc, #80]	; (80014d0 <MX_GPIO_Init+0xfc>)
 8001480:	f005 ff88 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001488:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800148a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800148e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149e:	f005 ff79 	bl	8007394 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2101      	movs	r1, #1
 80014a6:	2007      	movs	r0, #7
 80014a8:	f005 fcbb 	bl	8006e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014ac:	2007      	movs	r0, #7
 80014ae:	f005 fcd4 	bl	8006e5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2101      	movs	r1, #1
 80014b6:	2017      	movs	r0, #23
 80014b8:	f005 fcb3 	bl	8006e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014bc:	2017      	movs	r0, #23
 80014be:	f005 fccc 	bl	8006e5a <HAL_NVIC_EnableIRQ>

}
 80014c2:	bf00      	nop
 80014c4:	3720      	adds	r7, #32
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
 80014d0:	48000400 	.word	0x48000400

080014d4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <MX_I2C1_Init+0x74>)
 80014da:	4a1c      	ldr	r2, [pc, #112]	; (800154c <MX_I2C1_Init+0x78>)
 80014dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00202538;
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <MX_I2C1_Init+0x74>)
 80014e0:	4a1b      	ldr	r2, [pc, #108]	; (8001550 <MX_I2C1_Init+0x7c>)
 80014e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <MX_I2C1_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <MX_I2C1_Init+0x74>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f0:	4b15      	ldr	r3, [pc, #84]	; (8001548 <MX_I2C1_Init+0x74>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <MX_I2C1_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MX_I2C1_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_I2C1_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_I2C1_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800150e:	480e      	ldr	r0, [pc, #56]	; (8001548 <MX_I2C1_Init+0x74>)
 8001510:	f006 f8da 	bl	80076c8 <HAL_I2C_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800151a:	f000 fa70 	bl	80019fe <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800151e:	2100      	movs	r1, #0
 8001520:	4809      	ldr	r0, [pc, #36]	; (8001548 <MX_I2C1_Init+0x74>)
 8001522:	f006 fce5 	bl	8007ef0 <HAL_I2CEx_ConfigAnalogFilter>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800152c:	f000 fa67 	bl	80019fe <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001530:	2100      	movs	r1, #0
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_I2C1_Init+0x74>)
 8001534:	f006 fd27 	bl	8007f86 <HAL_I2CEx_ConfigDigitalFilter>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800153e:	f000 fa5e 	bl	80019fe <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200003d0 	.word	0x200003d0
 800154c:	40005400 	.word	0x40005400
 8001550:	00202538 	.word	0x00202538

08001554 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <MX_I2C3_Init+0x7c>)
 800155a:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <MX_I2C3_Init+0x80>)
 800155c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100618;
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <MX_I2C3_Init+0x7c>)
 8001560:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <MX_I2C3_Init+0x84>)
 8001562:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_I2C3_Init+0x7c>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <MX_I2C3_Init+0x7c>)
 800156c:	2201      	movs	r2, #1
 800156e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <MX_I2C3_Init+0x7c>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <MX_I2C3_Init+0x7c>)
 8001578:	2200      	movs	r2, #0
 800157a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_I2C3_Init+0x7c>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_I2C3_Init+0x7c>)
 8001584:	2200      	movs	r2, #0
 8001586:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_I2C3_Init+0x7c>)
 800158a:	2200      	movs	r2, #0
 800158c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800158e:	4810      	ldr	r0, [pc, #64]	; (80015d0 <MX_I2C3_Init+0x7c>)
 8001590:	f006 f89a 	bl	80076c8 <HAL_I2C_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800159a:	f000 fa30 	bl	80019fe <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800159e:	2100      	movs	r1, #0
 80015a0:	480b      	ldr	r0, [pc, #44]	; (80015d0 <MX_I2C3_Init+0x7c>)
 80015a2:	f006 fca5 	bl	8007ef0 <HAL_I2CEx_ConfigAnalogFilter>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80015ac:	f000 fa27 	bl	80019fe <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015b0:	2100      	movs	r1, #0
 80015b2:	4807      	ldr	r0, [pc, #28]	; (80015d0 <MX_I2C3_Init+0x7c>)
 80015b4:	f006 fce7 	bl	8007f86 <HAL_I2CEx_ConfigDigitalFilter>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80015be:	f000 fa1e 	bl	80019fe <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80015c2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80015c6:	f006 fd2b 	bl	8008020 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000424 	.word	0x20000424
 80015d4:	40005c00 	.word	0x40005c00
 80015d8:	00100618 	.word	0x00100618

080015dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0a2      	sub	sp, #136	; 0x88
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f4:	f107 0320 	add.w	r3, r7, #32
 80015f8:	2254      	movs	r2, #84	; 0x54
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f013 fec0 	bl	8015382 <memset>
  if(i2cHandle->Instance==I2C1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a50      	ldr	r2, [pc, #320]	; (8001748 <HAL_I2C_MspInit+0x16c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d13a      	bne.n	8001682 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800160c:	2340      	movs	r3, #64	; 0x40
 800160e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001610:	2300      	movs	r3, #0
 8001612:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001614:	f107 0320 	add.w	r3, r7, #32
 8001618:	4618      	mov	r0, r3
 800161a:	f009 f94b 	bl	800a8b4 <HAL_RCCEx_PeriphCLKConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001624:	f000 f9eb 	bl	80019fe <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b48      	ldr	r3, [pc, #288]	; (800174c <HAL_I2C_MspInit+0x170>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	4a47      	ldr	r2, [pc, #284]	; (800174c <HAL_I2C_MspInit+0x170>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001634:	4b45      	ldr	r3, [pc, #276]	; (800174c <HAL_I2C_MspInit+0x170>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001640:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001644:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001646:	2312      	movs	r3, #18
 8001648:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001654:	2304      	movs	r3, #4
 8001656:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800165e:	4619      	mov	r1, r3
 8001660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001664:	f005 fe96 	bl	8007394 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001668:	4b38      	ldr	r3, [pc, #224]	; (800174c <HAL_I2C_MspInit+0x170>)
 800166a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166c:	4a37      	ldr	r2, [pc, #220]	; (800174c <HAL_I2C_MspInit+0x170>)
 800166e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001672:	6593      	str	r3, [r2, #88]	; 0x58
 8001674:	4b35      	ldr	r3, [pc, #212]	; (800174c <HAL_I2C_MspInit+0x170>)
 8001676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001680:	e05d      	b.n	800173e <HAL_I2C_MspInit+0x162>
  else if(i2cHandle->Instance==I2C3)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a32      	ldr	r2, [pc, #200]	; (8001750 <HAL_I2C_MspInit+0x174>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d158      	bne.n	800173e <HAL_I2C_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800168c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001690:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8001692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001696:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001698:	f107 0320 	add.w	r3, r7, #32
 800169c:	4618      	mov	r0, r3
 800169e:	f009 f909 	bl	800a8b4 <HAL_RCCEx_PeriphCLKConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80016a8:	f000 f9a9 	bl	80019fe <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <HAL_I2C_MspInit+0x170>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	4a26      	ldr	r2, [pc, #152]	; (800174c <HAL_I2C_MspInit+0x170>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b8:	4b24      	ldr	r3, [pc, #144]	; (800174c <HAL_I2C_MspInit+0x170>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <HAL_I2C_MspInit+0x170>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	4a20      	ldr	r2, [pc, #128]	; (800174c <HAL_I2C_MspInit+0x170>)
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <HAL_I2C_MspInit+0x170>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e0:	2312      	movs	r3, #18
 80016e2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016ee:	2304      	movs	r3, #4
 80016f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fe:	f005 fe49 	bl	8007394 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001702:	2310      	movs	r3, #16
 8001704:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001706:	2312      	movs	r3, #18
 8001708:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001714:	2304      	movs	r3, #4
 8001716:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800171e:	4619      	mov	r1, r3
 8001720:	480c      	ldr	r0, [pc, #48]	; (8001754 <HAL_I2C_MspInit+0x178>)
 8001722:	f005 fe37 	bl	8007394 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_I2C_MspInit+0x170>)
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_I2C_MspInit+0x170>)
 800172c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001730:	6593      	str	r3, [r2, #88]	; 0x58
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_I2C_MspInit+0x170>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
}
 800173e:	bf00      	nop
 8001740:	3788      	adds	r7, #136	; 0x88
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40005400 	.word	0x40005400
 800174c:	40021000 	.word	0x40021000
 8001750:	40005c00 	.word	0x40005c00
 8001754:	48000400 	.word	0x48000400

08001758 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_8){
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001768:	d104      	bne.n	8001774 <HAL_GPIO_EXTI_Callback+0x1c>
//		ssd1306_SetCursor(33, 44);
//		ssd1306_WriteString("btna", Font_6x8, White);
//		ssd1306_UpdateScreen();
		BTN_A++;//sert à reconnaitre lorsque le bouto na est appuyer, cette variable est mise à 1 par un e interruption.
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_GPIO_EXTI_Callback+0x38>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	3301      	adds	r3, #1
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_GPIO_EXTI_Callback+0x38>)
 8001772:	6013      	str	r3, [r2, #0]


	}
	if(GPIO_Pin==GPIO_PIN_1){
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d104      	bne.n	8001784 <HAL_GPIO_EXTI_Callback+0x2c>
		//ssd1306_SetCursor(33, 44);
		//ssd1306_WriteString("btnb", Font_6x8, White);
		//ssd1306_UpdateScreen();
		BTN_B++;//de meme pour le bouton b
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_GPIO_EXTI_Callback+0x3c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001782:	6013      	str	r3, [r2, #0]

	}
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	20000708 	.word	0x20000708
 8001794:	2000070c 	.word	0x2000070c

08001798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800179e:	f003 ff2c 	bl	80055fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a2:	f000 f8ab 	bl	80018fc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80017a6:	f000 f8fc 	bl	80019a2 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017aa:	f7ff fe13 	bl	80013d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80017ae:	f7ff fddf 	bl	8001370 <MX_DMA_Init>
  MX_I2C3_Init();
 80017b2:	f7ff fecf 	bl	8001554 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 80017b6:	f003 fd5d 	bl	8005274 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80017ba:	f7ff fc19 	bl	8000ff0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80017be:	f003 fced 	bl	800519c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80017c2:	f011 f8b1 	bl	8012928 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80017c6:	f7ff fe85 	bl	80014d4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80017ca:	f003 fd7f 	bl	80052cc <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80017ce:	f000 fd6f 	bl	80022b0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



	ssd1306_Init();
 80017d2:	f000 ffe5 	bl	80027a0 <ssd1306_Init>

	HAL_Delay(100);
 80017d6:	2064      	movs	r0, #100	; 0x64
 80017d8:	f003 ff84 	bl	80056e4 <HAL_Delay>
	ssd1306_Fill(Black);
 80017dc:	2000      	movs	r0, #0
 80017de:	f001 f849 	bl	8002874 <ssd1306_Fill>

	ssd1306_DrawBitmap(32, 32, startimg, 64, 64, White);
 80017e2:	2301      	movs	r3, #1
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	2340      	movs	r3, #64	; 0x40
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2340      	movs	r3, #64	; 0x40
 80017ec:	4a31      	ldr	r2, [pc, #196]	; (80018b4 <main+0x11c>)
 80017ee:	2120      	movs	r1, #32
 80017f0:	2020      	movs	r0, #32
 80017f2:	f001 fb11 	bl	8002e18 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80017f6:	f001 f855 	bl	80028a4 <ssd1306_UpdateScreen>

	HAL_Delay(500);
 80017fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017fe:	f003 ff71 	bl	80056e4 <HAL_Delay>

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001802:	2203      	movs	r2, #3
 8001804:	492c      	ldr	r1, [pc, #176]	; (80018b8 <main+0x120>)
 8001806:	482d      	ldr	r0, [pc, #180]	; (80018bc <main+0x124>)
 8001808:	f004 faac 	bl	8005d64 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 800180c:	482c      	ldr	r0, [pc, #176]	; (80018c0 <main+0x128>)
 800180e:	f00a fabf 	bl	800bd90 <HAL_TIM_Base_Start>

	HAL_UART_Abort(&hlpuart1);
 8001812:	482c      	ldr	r0, [pc, #176]	; (80018c4 <main+0x12c>)
 8001814:	f00a fdd0 	bl	800c3b8 <HAL_UART_Abort>
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8001818:	2240      	movs	r2, #64	; 0x40
 800181a:	492b      	ldr	r1, [pc, #172]	; (80018c8 <main+0x130>)
 800181c:	4829      	ldr	r0, [pc, #164]	; (80018c4 <main+0x12c>)
 800181e:	f00a fd7f 	bl	800c320 <HAL_UART_Receive_DMA>

	memset(flashread,'1',256);
 8001822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001826:	2131      	movs	r1, #49	; 0x31
 8001828:	4828      	ldr	r0, [pc, #160]	; (80018cc <main+0x134>)
 800182a:	f013 fdaa 	bl	8015382 <memset>
	memset(flashwrite,'\0',256);
 800182e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001832:	2100      	movs	r1, #0
 8001834:	4826      	ldr	r0, [pc, #152]	; (80018d0 <main+0x138>)
 8001836:	f013 fda4 	bl	8015382 <memset>
	memset((uint8_t *)bufferscreen ,'\0',50);
 800183a:	2232      	movs	r2, #50	; 0x32
 800183c:	2100      	movs	r1, #0
 800183e:	4825      	ldr	r0, [pc, #148]	; (80018d4 <main+0x13c>)
 8001840:	f013 fd9f 	bl	8015382 <memset>

	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_0);
 8001844:	2301      	movs	r3, #1
 8001846:	4a24      	ldr	r2, [pc, #144]	; (80018d8 <main+0x140>)
 8001848:	4924      	ldr	r1, [pc, #144]	; (80018dc <main+0x144>)
 800184a:	4825      	ldr	r0, [pc, #148]	; (80018e0 <main+0x148>)
 800184c:	f010 ff09 	bl	8012662 <SPIF_Init>

	ssd1306_Fill(Black);
 8001850:	2000      	movs	r0, #0
 8001852:	f001 f80f 	bl	8002874 <ssd1306_Fill>

	getindex();
 8001856:	f000 fe6f 	bl	8002538 <getindex>

	snprintf((uint8_t*)str,20, "off=%d",pageoffset);
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <main+0x14c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a22      	ldr	r2, [pc, #136]	; (80018e8 <main+0x150>)
 8001860:	2114      	movs	r1, #20
 8001862:	4822      	ldr	r0, [pc, #136]	; (80018ec <main+0x154>)
 8001864:	f013 fcf6 	bl	8015254 <sniprintf>
	ssd1306_SetCursor(32,40);
 8001868:	2128      	movs	r1, #40	; 0x28
 800186a:	2020      	movs	r0, #32
 800186c:	f001 f944 	bl	8002af8 <ssd1306_SetCursor>
	ssd1306_WriteString((uint8_t*)str,Font_6x8,White);
 8001870:	4a1f      	ldr	r2, [pc, #124]	; (80018f0 <main+0x158>)
 8001872:	2301      	movs	r3, #1
 8001874:	ca06      	ldmia	r2, {r1, r2}
 8001876:	481d      	ldr	r0, [pc, #116]	; (80018ec <main+0x154>)
 8001878:	f001 f918 	bl	8002aac <ssd1306_WriteString>
	snprintf((uint8_t*)str,20, "page=%d",pagenumber);
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <main+0x15c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <main+0x160>)
 8001882:	2114      	movs	r1, #20
 8001884:	4819      	ldr	r0, [pc, #100]	; (80018ec <main+0x154>)
 8001886:	f013 fce5 	bl	8015254 <sniprintf>
	ssd1306_SetCursor(32,48);
 800188a:	2130      	movs	r1, #48	; 0x30
 800188c:	2020      	movs	r0, #32
 800188e:	f001 f933 	bl	8002af8 <ssd1306_SetCursor>
	ssd1306_WriteString((uint8_t*)str,Font_6x8,White);
 8001892:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <main+0x158>)
 8001894:	2301      	movs	r3, #1
 8001896:	ca06      	ldmia	r2, {r1, r2}
 8001898:	4814      	ldr	r0, [pc, #80]	; (80018ec <main+0x154>)
 800189a:	f001 f907 	bl	8002aac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800189e:	f001 f801 	bl	80028a4 <ssd1306_UpdateScreen>

	HAL_Delay(1000);
 80018a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018a6:	f003 ff1d 	bl	80056e4 <HAL_Delay>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		statemachine();
 80018aa:	f001 fd1d 	bl	80032e8 <statemachine>
		ssd1306_UpdateScreen();
 80018ae:	f000 fff9 	bl	80028a4 <ssd1306_UpdateScreen>
		statemachine();
 80018b2:	e7fa      	b.n	80018aa <main+0x112>
 80018b4:	08019c34 	.word	0x08019c34
 80018b8:	20000730 	.word	0x20000730
 80018bc:	20000324 	.word	0x20000324
 80018c0:	20000f18 	.word	0x20000f18
 80018c4:	20000f64 	.word	0x20000f64
 80018c8:	20000484 	.word	0x20000484
 80018cc:	20000858 	.word	0x20000858
 80018d0:	20000758 	.word	0x20000758
 80018d4:	2000097c 	.word	0x2000097c
 80018d8:	48000400 	.word	0x48000400
 80018dc:	20000aa8 	.word	0x20000aa8
 80018e0:	20000710 	.word	0x20000710
 80018e4:	20000958 	.word	0x20000958
 80018e8:	08019988 	.word	0x08019988
 80018ec:	20000744 	.word	0x20000744
 80018f0:	20000008 	.word	0x20000008
 80018f4:	2000095c 	.word	0x2000095c
 80018f8:	08019990 	.word	0x08019990

080018fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b096      	sub	sp, #88	; 0x58
 8001900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	2244      	movs	r2, #68	; 0x44
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f013 fd39 	bl	8015382 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001910:	463b      	mov	r3, r7
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800191e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001922:	f008 f929 	bl	8009b78 <HAL_PWREx_ControlVoltageScaling>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800192c:	f000 f867 	bl	80019fe <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001930:	2310      	movs	r3, #16
 8001932:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001934:	2301      	movs	r3, #1
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800193c:	2360      	movs	r3, #96	; 0x60
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001940:	2302      	movs	r3, #2
 8001942:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001944:	2301      	movs	r3, #1
 8001946:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001948:	2301      	movs	r3, #1
 800194a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800194c:	2314      	movs	r3, #20
 800194e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001950:	2307      	movs	r3, #7
 8001952:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001954:	2302      	movs	r3, #2
 8001956:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001958:	2302      	movs	r3, #2
 800195a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4618      	mov	r0, r3
 8001962:	f008 f96f 	bl	8009c44 <HAL_RCC_OscConfig>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800196c:	f000 f847 	bl	80019fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001970:	230f      	movs	r3, #15
 8001972:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001974:	2303      	movs	r3, #3
 8001976:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800197c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001980:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001986:	463b      	mov	r3, r7
 8001988:	2102      	movs	r1, #2
 800198a:	4618      	mov	r0, r3
 800198c:	f008 fd6e 	bl	800a46c <HAL_RCC_ClockConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001996:	f000 f832 	bl	80019fe <Error_Handler>
  }
}
 800199a:	bf00      	nop
 800199c:	3758      	adds	r7, #88	; 0x58
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b096      	sub	sp, #88	; 0x58
 80019a6:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	2254      	movs	r2, #84	; 0x54
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f013 fce7 	bl	8015382 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80019b4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80019b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019be:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80019c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019c4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80019c6:	2301      	movs	r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019ca:	2301      	movs	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80019ce:	2318      	movs	r3, #24
 80019d0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019d2:	2307      	movs	r3, #7
 80019d4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019d6:	2302      	movs	r3, #2
 80019d8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019da:	2302      	movs	r3, #2
 80019dc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80019de:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80019e2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	4618      	mov	r0, r3
 80019e8:	f008 ff64 	bl	800a8b4 <HAL_RCCEx_PeriphCLKConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80019f2:	f000 f804 	bl	80019fe <Error_Handler>
  }
}
 80019f6:	bf00      	nop
 80019f8:	3758      	adds	r7, #88	; 0x58
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a02:	b672      	cpsid	i
}
 8001a04:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a06:	e7fe      	b.n	8001a06 <Error_Handler+0x8>

08001a08 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7fe fc2d 	bl	8000270 <strlen>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d801      	bhi.n	8001a20 <gps_checksum+0x18>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e038      	b.n	8001a92 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7fe fc25 	bl	8000270 <strlen>
 8001a26:	4603      	mov	r3, r0
 8001a28:	3b04      	subs	r3, #4
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7fe fc1c 	bl	8000270 <strlen>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	3b03      	subs	r3, #3
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001a48:	2300      	movs	r3, #0
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	e00a      	b.n	8001a64 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	4053      	eors	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	3301      	adds	r3, #1
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7fe fc03 	bl	8000270 <strlen>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	1f5a      	subs	r2, r3, #5
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d8ec      	bhi.n	8001a4e <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	2210      	movs	r2, #16
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f012 fca7 	bl	80143d0 <strtol>
 8001a82:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d101      	bne.n	8001a90 <gps_checksum+0x88>
        return 1;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8001a90:	2300      	movs	r3, #0
    }
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b0b7      	sub	sp, #220	; 0xdc
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8001aac:	f107 0320 	add.w	r3, r7, #32
 8001ab0:	2264      	movs	r2, #100	; 0x64
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f013 fc64 	bl	8015382 <memset>
    char *marker = strtok(inputString, ",");
 8001aba:	49c2      	ldr	r1, [pc, #776]	; (8001dc4 <nmea_GPGGA+0x328>)
 8001abc:	6838      	ldr	r0, [r7, #0]
 8001abe:	f013 fc7b 	bl	80153b8 <strtok>
 8001ac2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001ac6:	e027      	b.n	8001b18 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001ac8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001acc:	f7fe fbd0 	bl	8000270 <strlen>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001ad8:	1c63      	adds	r3, r4, #1
 8001ada:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001ade:	4610      	mov	r0, r2
 8001ae0:	f011 fcbe 	bl	8013460 <malloc>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	00a3      	lsls	r3, r4, #2
 8001aea:	33d8      	adds	r3, #216	; 0xd8
 8001aec:	443b      	add	r3, r7
 8001aee:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001af2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001af6:	3b01      	subs	r3, #1
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	33d8      	adds	r3, #216	; 0xd8
 8001afc:	443b      	add	r3, r7
 8001afe:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001b02:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f013 fd4f 	bl	80155aa <strcpy>
        marker = strtok(NULL, ",");
 8001b0c:	49ad      	ldr	r1, [pc, #692]	; (8001dc4 <nmea_GPGGA+0x328>)
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f013 fc52 	bl	80153b8 <strtok>
 8001b14:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001b18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1d3      	bne.n	8001ac8 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8001b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8001b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	332c      	adds	r3, #44	; 0x2c
 8001b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f013 fd36 	bl	80155aa <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8001b3e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001b42:	2b53      	cmp	r3, #83	; 0x53
 8001b44:	d004      	beq.n	8001b50 <nmea_GPGGA+0xb4>
 8001b46:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001b4a:	2b4e      	cmp	r3, #78	; 0x4e
 8001b4c:	f040 8159 	bne.w	8001e02 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8001b50:	2300      	movs	r3, #0
 8001b52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b56:	e010      	b.n	8001b7a <nmea_GPGGA+0xde>
 8001b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b5e:	4413      	add	r3, r2
 8001b60:	7819      	ldrb	r1, [r3, #0]
 8001b62:	f107 021c 	add.w	r2, r7, #28
 8001b66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b6a:	4413      	add	r3, r2
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	701a      	strb	r2, [r3, #0]
 8001b70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b74:	3301      	adds	r3, #1
 8001b76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	ddea      	ble.n	8001b58 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b88:	e011      	b.n	8001bae <nmea_GPGGA+0x112>
 8001b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b90:	3302      	adds	r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	7819      	ldrb	r1, [r3, #0]
 8001b96:	f107 0214 	add.w	r2, r7, #20
 8001b9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b9e:	4413      	add	r3, r2
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	701a      	strb	r2, [r3, #0]
 8001ba4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ba8:	3301      	adds	r3, #1
 8001baa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001bae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bb2:	2b05      	cmp	r3, #5
 8001bb4:	dde9      	ble.n	8001b8a <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	220a      	movs	r2, #10
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f012 fc06 	bl	80143d0 <strtol>
 8001bc4:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f012 fb14 	bl	80141fc <strtof>
 8001bd4:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8001bd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be4:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001be8:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8001dc8 <nmea_GPGGA+0x32c>
 8001bec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf4:	ee17 0a90 	vmov	r0, s15
 8001bf8:	f7fe fca6 	bl	8000548 <__aeabi_f2d>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8001c04:	2300      	movs	r3, #0
 8001c06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c0a:	e010      	b.n	8001c2e <nmea_GPGGA+0x192>
 8001c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c12:	4413      	add	r3, r2
 8001c14:	7819      	ldrb	r1, [r3, #0]
 8001c16:	f107 0210 	add.w	r2, r7, #16
 8001c1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c1e:	4413      	add	r3, r2
 8001c20:	460a      	mov	r2, r1
 8001c22:	701a      	strb	r2, [r3, #0]
 8001c24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c28:	3301      	adds	r3, #1
 8001c2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	ddea      	ble.n	8001c0c <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8001c36:	2300      	movs	r3, #0
 8001c38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c3c:	e011      	b.n	8001c62 <nmea_GPGGA+0x1c6>
 8001c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c44:	3303      	adds	r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	7819      	ldrb	r1, [r3, #0]
 8001c4a:	f107 0208 	add.w	r2, r7, #8
 8001c4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c52:	4413      	add	r3, r2
 8001c54:	460a      	mov	r2, r1
 8001c56:	701a      	strb	r2, [r3, #0]
 8001c58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c66:	2b05      	cmp	r3, #5
 8001c68:	dde9      	ble.n	8001c3e <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8001c6a:	f107 0310 	add.w	r3, r7, #16
 8001c6e:	220a      	movs	r2, #10
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f012 fbac 	bl	80143d0 <strtol>
 8001c78:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8001c7c:	f107 0308 	add.w	r3, r7, #8
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f012 faba 	bl	80141fc <strtof>
 8001c88:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8001c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c98:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001c9c:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8001dc8 <nmea_GPGGA+0x32c>
 8001ca0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca8:	ee17 0a90 	vmov	r0, s15
 8001cac:	f7fe fc4c 	bl	8000548 <__aeabi_f2d>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001cc4:	f7fe ff00 	bl	8000ac8 <__aeabi_dcmpeq>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d176      	bne.n	8001dbc <nmea_GPGGA+0x320>
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001cda:	f7fe fef5 	bl	8000ac8 <__aeabi_dcmpeq>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d16b      	bne.n	8001dbc <nmea_GPGGA+0x320>
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <nmea_GPGGA+0x330>)
 8001cea:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001cee:	f7fe fef5 	bl	8000adc <__aeabi_dcmplt>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d061      	beq.n	8001dbc <nmea_GPGGA+0x320>
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	4b34      	ldr	r3, [pc, #208]	; (8001dd0 <nmea_GPGGA+0x334>)
 8001cfe:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001d02:	f7fe feeb 	bl	8000adc <__aeabi_dcmplt>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d057      	beq.n	8001dbc <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001d12:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8001d1c:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001d24:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8001d2e:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8001d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f012 fa61 	bl	80141fc <strtof>
 8001d3a:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8001d3e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4a:	d102      	bne.n	8001d52 <nmea_GPGGA+0x2b6>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	e001      	b.n	8001d56 <nmea_GPGGA+0x2ba>
 8001d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8001d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d5c:	220a      	movs	r2, #10
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f012 fb35 	bl	80143d0 <strtol>
 8001d66:	4602      	mov	r2, r0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8001d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d6e:	220a      	movs	r2, #10
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f012 fb2c 	bl	80143d0 <strtol>
 8001d78:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8001d7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bfcc      	ite	gt
 8001d84:	2301      	movgt	r3, #1
 8001d86:	2300      	movle	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8001d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f012 fa31 	bl	80141fc <strtof>
 8001d9a:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8001d9e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001da2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001daa:	d102      	bne.n	8001db2 <nmea_GPGGA+0x316>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	e001      	b.n	8001db6 <nmea_GPGGA+0x31a>
 8001db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001dba:	e022      	b.n	8001e02 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001dc2:	e016      	b.n	8001df2 <nmea_GPGGA+0x356>
 8001dc4:	08019998 	.word	0x08019998
 8001dc8:	42700000 	.word	0x42700000
 8001dcc:	40568000 	.word	0x40568000
 8001dd0:	40668000 	.word	0x40668000
 8001dd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	33d8      	adds	r3, #216	; 0xd8
 8001ddc:	443b      	add	r3, r7
 8001dde:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f011 fb44 	bl	8013470 <free>
 8001de8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dec:	3301      	adds	r3, #1
 8001dee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001df2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	dbea      	blt.n	8001dd4 <nmea_GPGGA+0x338>
            return 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e019      	b.n	8001e36 <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e08:	e00e      	b.n	8001e28 <nmea_GPGGA+0x38c>
 8001e0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	33d8      	adds	r3, #216	; 0xd8
 8001e12:	443b      	add	r3, r7
 8001e14:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f011 fb29 	bl	8013470 <free>
 8001e1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e22:	3301      	adds	r3, #1
 8001e24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e28:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001e2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e30:	429a      	cmp	r2, r3
 8001e32:	dbea      	blt.n	8001e0a <nmea_GPGGA+0x36e>
    return 1;
 8001e34:	2301      	movs	r3, #1
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	37dc      	adds	r7, #220	; 0xdc
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd90      	pop	{r4, r7, pc}
 8001e3e:	bf00      	nop

08001e40 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b0a3      	sub	sp, #140	; 0x8c
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	2264      	movs	r2, #100	; 0x64
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f013 fa92 	bl	8015382 <memset>
    char *marker = strtok(inputString, ",");
 8001e5e:	493b      	ldr	r1, [pc, #236]	; (8001f4c <nmea_GPGSA+0x10c>)
 8001e60:	6838      	ldr	r0, [r7, #0]
 8001e62:	f013 faa9 	bl	80153b8 <strtok>
 8001e66:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001e6a:	e027      	b.n	8001ebc <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001e6c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001e70:	f7fe f9fe 	bl	8000270 <strlen>
 8001e74:	4603      	mov	r3, r0
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8001e7c:	1c63      	adds	r3, r4, #1
 8001e7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e82:	4610      	mov	r0, r2
 8001e84:	f011 faec 	bl	8013460 <malloc>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	00a3      	lsls	r3, r4, #2
 8001e8e:	3388      	adds	r3, #136	; 0x88
 8001e90:	443b      	add	r3, r7
 8001e92:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8001e96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	3388      	adds	r3, #136	; 0x88
 8001ea0:	443b      	add	r3, r7
 8001ea2:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001ea6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f013 fb7d 	bl	80155aa <strcpy>
        marker = strtok(NULL, ",");
 8001eb0:	4926      	ldr	r1, [pc, #152]	; (8001f4c <nmea_GPGSA+0x10c>)
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f013 fa80 	bl	80153b8 <strtok>
 8001eb8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1d3      	bne.n	8001e6c <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	220a      	movs	r2, #10
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f012 fa80 	bl	80143d0 <strtol>
 8001ed0:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8001ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	bfcc      	ite	gt
 8001ed8:	2301      	movgt	r3, #1
 8001eda:	2300      	movle	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001ee8:	2303      	movs	r3, #3
 8001eea:	67bb      	str	r3, [r7, #120]	; 0x78
 8001eec:	e00e      	b.n	8001f0c <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8001eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	3388      	adds	r3, #136	; 0x88
 8001ef4:	443b      	add	r3, r7
 8001ef6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <nmea_GPGSA+0xc6>
            satelliteCount++;
 8001f00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f02:	3301      	adds	r3, #1
 8001f04:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f08:	3301      	adds	r3, #1
 8001f0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f0e:	2b0e      	cmp	r3, #14
 8001f10:	dded      	ble.n	8001eee <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8001f18:	2300      	movs	r3, #0
 8001f1a:	677b      	str	r3, [r7, #116]	; 0x74
 8001f1c:	e00b      	b.n	8001f36 <nmea_GPGSA+0xf6>
 8001f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	3388      	adds	r3, #136	; 0x88
 8001f24:	443b      	add	r3, r7
 8001f26:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f011 faa0 	bl	8013470 <free>
 8001f30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f32:	3301      	adds	r3, #1
 8001f34:	677b      	str	r3, [r7, #116]	; 0x74
 8001f36:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	dbee      	blt.n	8001f1e <nmea_GPGSA+0xde>
    return 1;
 8001f40:	2301      	movs	r3, #1
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	378c      	adds	r7, #140	; 0x8c
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd90      	pop	{r4, r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	08019998 	.word	0x08019998

08001f50 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b0a1      	sub	sp, #132	; 0x84
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	2264      	movs	r2, #100	; 0x64
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f013 fa0b 	bl	8015382 <memset>
    char *marker = strtok(inputString, ",");
 8001f6c:	4930      	ldr	r1, [pc, #192]	; (8002030 <nmea_GNRMC+0xe0>)
 8001f6e:	6838      	ldr	r0, [r7, #0]
 8001f70:	f013 fa22 	bl	80153b8 <strtok>
 8001f74:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001f76:	e021      	b.n	8001fbc <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001f78:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001f7a:	f7fe f979 	bl	8000270 <strlen>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8001f84:	1c63      	adds	r3, r4, #1
 8001f86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f88:	4610      	mov	r0, r2
 8001f8a:	f011 fa69 	bl	8013460 <malloc>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	461a      	mov	r2, r3
 8001f92:	00a3      	lsls	r3, r4, #2
 8001f94:	3380      	adds	r3, #128	; 0x80
 8001f96:	443b      	add	r3, r7
 8001f98:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8001f9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	3380      	adds	r3, #128	; 0x80
 8001fa4:	443b      	add	r3, r7
 8001fa6:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001faa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001fac:	4618      	mov	r0, r3
 8001fae:	f013 fafc 	bl	80155aa <strcpy>
        marker = strtok(NULL, ",");
 8001fb2:	491f      	ldr	r1, [pc, #124]	; (8002030 <nmea_GNRMC+0xe0>)
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f013 f9ff 	bl	80153b8 <strtok>
 8001fba:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1da      	bne.n	8001f78 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8001fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f012 f918 	bl	80141fc <strtof>
 8001fcc:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 8001fd0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001fd2:	f7fe fab9 	bl	8000548 <__aeabi_f2d>
 8001fd6:	a314      	add	r3, pc, #80	; (adr r3, 8002028 <nmea_GNRMC+0xd8>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	f7fe fc36 	bl	800084c <__aeabi_ddiv>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7fe fdfe 	bl	8000be8 <__aeabi_d2f>
 8001fec:	4602      	mov	r2, r0
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	677b      	str	r3, [r7, #116]	; 0x74
 8001ff6:	e00b      	b.n	8002010 <nmea_GNRMC+0xc0>
 8001ff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	3380      	adds	r3, #128	; 0x80
 8001ffe:	443b      	add	r3, r7
 8002000:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002004:	4618      	mov	r0, r3
 8002006:	f011 fa33 	bl	8013470 <free>
 800200a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800200c:	3301      	adds	r3, #1
 800200e:	677b      	str	r3, [r7, #116]	; 0x74
 8002010:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002012:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002014:	429a      	cmp	r2, r3
 8002016:	dbef      	blt.n	8001ff8 <nmea_GNRMC+0xa8>
    return 1;
 8002018:	2301      	movs	r3, #1
}
 800201a:	4618      	mov	r0, r3
 800201c:	3784      	adds	r7, #132	; 0x84
 800201e:	46bd      	mov	sp, r7
 8002020:	bd90      	pop	{r4, r7, pc}
 8002022:	bf00      	nop
 8002024:	f3af 8000 	nop.w
 8002028:	be76c8b4 	.word	0xbe76c8b4
 800202c:	3fff1a9f 	.word	0x3fff1a9f
 8002030:	08019998 	.word	0x08019998

08002034 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 800203e:	223c      	movs	r2, #60	; 0x3c
 8002040:	2100      	movs	r1, #0
 8002042:	484e      	ldr	r0, [pc, #312]	; (800217c <nmea_parse+0x148>)
 8002044:	f013 f99d 	bl	8015382 <memset>
    char * token = strtok(buffer, "$");
 8002048:	494d      	ldr	r1, [pc, #308]	; (8002180 <nmea_parse+0x14c>)
 800204a:	6838      	ldr	r0, [r7, #0]
 800204c:	f013 f9b4 	bl	80153b8 <strtok>
 8002050:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8002056:	e01d      	b.n	8002094 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8002058:	6978      	ldr	r0, [r7, #20]
 800205a:	f7fe f909 	bl	8000270 <strlen>
 800205e:	4603      	mov	r3, r0
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	693c      	ldr	r4, [r7, #16]
 8002064:	1c63      	adds	r3, r4, #1
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	4610      	mov	r0, r2
 800206a:	f011 f9f9 	bl	8013460 <malloc>
 800206e:	4603      	mov	r3, r0
 8002070:	461a      	mov	r2, r3
 8002072:	4b42      	ldr	r3, [pc, #264]	; (800217c <nmea_parse+0x148>)
 8002074:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	3b01      	subs	r3, #1
 800207c:	4a3f      	ldr	r2, [pc, #252]	; (800217c <nmea_parse+0x148>)
 800207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002082:	6979      	ldr	r1, [r7, #20]
 8002084:	4618      	mov	r0, r3
 8002086:	f013 fa90 	bl	80155aa <strcpy>
        token = strtok(NULL, "$");
 800208a:	493d      	ldr	r1, [pc, #244]	; (8002180 <nmea_parse+0x14c>)
 800208c:	2000      	movs	r0, #0
 800208e:	f013 f993 	bl	80153b8 <strtok>
 8002092:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1de      	bne.n	8002058 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	e052      	b.n	8002146 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 80020a0:	4a36      	ldr	r2, [pc, #216]	; (800217c <nmea_parse+0x148>)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a8:	4936      	ldr	r1, [pc, #216]	; (8002184 <nmea_parse+0x150>)
 80020aa:	4618      	mov	r0, r3
 80020ac:	f013 f9e0 	bl	8015470 <strstr>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d044      	beq.n	8002140 <nmea_parse+0x10c>
 80020b6:	4a31      	ldr	r2, [pc, #196]	; (800217c <nmea_parse+0x148>)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fca2 	bl	8001a08 <gps_checksum>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d03a      	beq.n	8002140 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 80020ca:	4a2c      	ldr	r2, [pc, #176]	; (800217c <nmea_parse+0x148>)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d2:	492d      	ldr	r1, [pc, #180]	; (8002188 <nmea_parse+0x154>)
 80020d4:	4618      	mov	r0, r3
 80020d6:	f013 f9cb 	bl	8015470 <strstr>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 80020e0:	4a26      	ldr	r2, [pc, #152]	; (800217c <nmea_parse+0x148>)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e8:	4619      	mov	r1, r3
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ff30 	bl	8001f50 <nmea_GNRMC>
 80020f0:	e026      	b.n	8002140 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 80020f2:	4a22      	ldr	r2, [pc, #136]	; (800217c <nmea_parse+0x148>)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fa:	4924      	ldr	r1, [pc, #144]	; (800218c <nmea_parse+0x158>)
 80020fc:	4618      	mov	r0, r3
 80020fe:	f013 f9b7 	bl	8015470 <strstr>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8002108:	4a1c      	ldr	r2, [pc, #112]	; (800217c <nmea_parse+0x148>)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002110:	4619      	mov	r1, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fe94 	bl	8001e40 <nmea_GPGSA>
 8002118:	e012      	b.n	8002140 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 800211a:	4a18      	ldr	r2, [pc, #96]	; (800217c <nmea_parse+0x148>)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002122:	491b      	ldr	r1, [pc, #108]	; (8002190 <nmea_parse+0x15c>)
 8002124:	4618      	mov	r0, r3
 8002126:	f013 f9a3 	bl	8015470 <strstr>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d007      	beq.n	8002140 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8002130:	4a12      	ldr	r2, [pc, #72]	; (800217c <nmea_parse+0x148>)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002138:	4619      	mov	r1, r3
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fcae 	bl	8001a9c <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3301      	adds	r3, #1
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	429a      	cmp	r2, r3
 800214c:	dba8      	blt.n	80020a0 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	e009      	b.n	8002168 <nmea_parse+0x134>
 8002154:	4a09      	ldr	r2, [pc, #36]	; (800217c <nmea_parse+0x148>)
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215c:	4618      	mov	r0, r3
 800215e:	f011 f987 	bl	8013470 <free>
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	3301      	adds	r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	429a      	cmp	r2, r3
 800216e:	dbf1      	blt.n	8002154 <nmea_parse+0x120>


}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	371c      	adds	r7, #28
 8002176:	46bd      	mov	sp, r7
 8002178:	bd90      	pop	{r4, r7, pc}
 800217a:	bf00      	nop
 800217c:	20000a38 	.word	0x20000a38
 8002180:	0801999c 	.word	0x0801999c
 8002184:	080199a0 	.word	0x080199a0
 8002188:	080199a4 	.word	0x080199a4
 800218c:	080199ac 	.word	0x080199ac
 8002190:	080199b4 	.word	0x080199b4
 8002194:	00000000 	.word	0x00000000

08002198 <distancecalc>:

}



double distancecalc(double lat1, double lat2, double long1, double long2){
 8002198:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800219c:	b08a      	sub	sp, #40	; 0x28
 800219e:	af00      	add	r7, sp, #0
 80021a0:	ed87 0b06 	vstr	d0, [r7, #24]
 80021a4:	ed87 1b04 	vstr	d1, [r7, #16]
 80021a8:	ed87 2b02 	vstr	d2, [r7, #8]
 80021ac:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1)*sinl(lat2)+cosl(lat1)*cosl(lat2)*cosl(long2-long1)));
 80021bc:	ed97 0b06 	vldr	d0, [r7, #24]
 80021c0:	f015 ff8d 	bl	80180de <sinl>
 80021c4:	ec55 4b10 	vmov	r4, r5, d0
 80021c8:	ed97 0b04 	vldr	d0, [r7, #16]
 80021cc:	f015 ff87 	bl	80180de <sinl>
 80021d0:	ec53 2b10 	vmov	r2, r3, d0
 80021d4:	4620      	mov	r0, r4
 80021d6:	4629      	mov	r1, r5
 80021d8:	f7fe fa0e 	bl	80005f8 <__aeabi_dmul>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4614      	mov	r4, r2
 80021e2:	461d      	mov	r5, r3
 80021e4:	ed97 0b06 	vldr	d0, [r7, #24]
 80021e8:	f015 ff77 	bl	80180da <cosl>
 80021ec:	ec59 8b10 	vmov	r8, r9, d0
 80021f0:	ed97 0b04 	vldr	d0, [r7, #16]
 80021f4:	f015 ff71 	bl	80180da <cosl>
 80021f8:	ec53 2b10 	vmov	r2, r3, d0
 80021fc:	4640      	mov	r0, r8
 80021fe:	4649      	mov	r1, r9
 8002200:	f7fe f9fa 	bl	80005f8 <__aeabi_dmul>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4690      	mov	r8, r2
 800220a:	4699      	mov	r9, r3
 800220c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002210:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002214:	f7fe f838 	bl	8000288 <__aeabi_dsub>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	ec43 2b17 	vmov	d7, r2, r3
 8002220:	eeb0 0a47 	vmov.f32	s0, s14
 8002224:	eef0 0a67 	vmov.f32	s1, s15
 8002228:	f015 ff57 	bl	80180da <cosl>
 800222c:	ec53 2b10 	vmov	r2, r3, d0
 8002230:	4640      	mov	r0, r8
 8002232:	4649      	mov	r1, r9
 8002234:	f7fe f9e0 	bl	80005f8 <__aeabi_dmul>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4620      	mov	r0, r4
 800223e:	4629      	mov	r1, r5
 8002240:	f7fe f824 	bl	800028c <__adddf3>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	ec43 2b17 	vmov	d7, r2, r3
 800224c:	eeb0 1a47 	vmov.f32	s2, s14
 8002250:	eef0 1a67 	vmov.f32	s3, s15
 8002254:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80022a0 <distancecalc+0x108>
 8002258:	f015 fee0 	bl	801801c <fmin>
 800225c:	eeb0 7a40 	vmov.f32	s14, s0
 8002260:	eef0 7a60 	vmov.f32	s15, s1
 8002264:	eeb0 0a47 	vmov.f32	s0, s14
 8002268:	eef0 0a67 	vmov.f32	s1, s15
 800226c:	f015 ff39 	bl	80180e2 <acosl>
 8002270:	ec51 0b10 	vmov	r0, r1, d0
 8002274:	a30c      	add	r3, pc, #48	; (adr r3, 80022a8 <distancecalc+0x110>)
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	f7fe f9bd 	bl	80005f8 <__aeabi_dmul>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 8002286:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800228a:	ec43 2b17 	vmov	d7, r2, r3
}
 800228e:	eeb0 0a47 	vmov.f32	s0, s14
 8002292:	eef0 0a67 	vmov.f32	s1, s15
 8002296:	3728      	adds	r7, #40	; 0x28
 8002298:	46bd      	mov	sp, r7
 800229a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800229e:	bf00      	nop
 80022a0:	00000000 	.word	0x00000000
 80022a4:	3ff00000 	.word	0x3ff00000
 80022a8:	00000000 	.word	0x00000000
 80022ac:	41584dae 	.word	0x41584dae

080022b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <MX_SPI1_Init+0x74>)
 80022b6:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <MX_SPI1_Init+0x78>)
 80022b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <MX_SPI1_Init+0x74>)
 80022bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <MX_SPI1_Init+0x74>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022c8:	4b16      	ldr	r3, [pc, #88]	; (8002324 <MX_SPI1_Init+0x74>)
 80022ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <MX_SPI1_Init+0x74>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <MX_SPI1_Init+0x74>)
 80022d8:	2200      	movs	r2, #0
 80022da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <MX_SPI1_Init+0x74>)
 80022de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <MX_SPI1_Init+0x74>)
 80022e6:	2210      	movs	r2, #16
 80022e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <MX_SPI1_Init+0x74>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <MX_SPI1_Init+0x74>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <MX_SPI1_Init+0x74>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <MX_SPI1_Init+0x74>)
 80022fe:	2207      	movs	r2, #7
 8002300:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <MX_SPI1_Init+0x74>)
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_SPI1_Init+0x74>)
 800230a:	2208      	movs	r2, #8
 800230c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_SPI1_Init+0x74>)
 8002310:	f008 fdb8 	bl	800ae84 <HAL_SPI_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800231a:	f7ff fb70 	bl	80019fe <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000aa8 	.word	0x20000aa8
 8002328:	40013000 	.word	0x40013000

0800232c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a25      	ldr	r2, [pc, #148]	; (80023e0 <HAL_SPI_MspInit+0xb4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d144      	bne.n	80023d8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800234e:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <HAL_SPI_MspInit+0xb8>)
 8002350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002352:	4a24      	ldr	r2, [pc, #144]	; (80023e4 <HAL_SPI_MspInit+0xb8>)
 8002354:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002358:	6613      	str	r3, [r2, #96]	; 0x60
 800235a:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_SPI_MspInit+0xb8>)
 800235c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800235e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002366:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <HAL_SPI_MspInit+0xb8>)
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	4a1e      	ldr	r2, [pc, #120]	; (80023e4 <HAL_SPI_MspInit+0xb8>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002372:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <HAL_SPI_MspInit+0xb8>)
 8002374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237e:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_SPI_MspInit+0xb8>)
 8002380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002382:	4a18      	ldr	r2, [pc, #96]	; (80023e4 <HAL_SPI_MspInit+0xb8>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800238a:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <HAL_SPI_MspInit+0xb8>)
 800238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002396:	2360      	movs	r3, #96	; 0x60
 8002398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a2:	2303      	movs	r3, #3
 80023a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023a6:	2305      	movs	r3, #5
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4619      	mov	r1, r3
 80023b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b4:	f004 ffee 	bl	8007394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80023b8:	2320      	movs	r3, #32
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023c8:	2305      	movs	r3, #5
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	4619      	mov	r1, r3
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <HAL_SPI_MspInit+0xbc>)
 80023d4:	f004 ffde 	bl	8007394 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80023d8:	bf00      	nop
 80023da:	3728      	adds	r7, #40	; 0x28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40013000 	.word	0x40013000
 80023e4:	40021000 	.word	0x40021000
 80023e8:	48000400 	.word	0x48000400
 80023ec:	00000000 	.word	0x00000000

080023f0 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 80023f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f4:	ed2d 8b02 	vpush	{d8}
 80023f8:	b09c      	sub	sp, #112	; 0x70
 80023fa:	af10      	add	r7, sp, #64	; 0x40
 80023fc:	6278      	str	r0, [r7, #36]	; 0x24
 80023fe:	ed87 0a08 	vstr	s0, [r7, #32]
 8002402:	edc7 0a07 	vstr	s1, [r7, #28]
 8002406:	61b9      	str	r1, [r7, #24]
 8002408:	617a      	str	r2, [r7, #20]
 800240a:	ed87 1a04 	vstr	s2, [r7, #16]
	int framesize=0;
 800240e:	2300      	movs	r3, #0
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
	framesize=snprintf((uint8_t*)buffer,256, "%0.2f,%0.2f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2);
 8002412:	6a38      	ldr	r0, [r7, #32]
 8002414:	f7fe f898 	bl	8000548 <__aeabi_f2d>
 8002418:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800241c:	69f8      	ldr	r0, [r7, #28]
 800241e:	f7fe f893 	bl	8000548 <__aeabi_f2d>
 8002422:	e9c7 0100 	strd	r0, r1, [r7]
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe f88c 	bl	8000548 <__aeabi_f2d>
 8002430:	a320      	add	r3, pc, #128	; (adr r3, 80024b4 <csvframe+0xc4>)
 8002432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002436:	f7fe f8df 	bl	80005f8 <__aeabi_dmul>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	ec43 2b18 	vmov	d8, r2, r3
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe f878 	bl	8000548 <__aeabi_f2d>
 8002458:	4604      	mov	r4, r0
 800245a:	460d      	mov	r5, r1
 800245c:	6938      	ldr	r0, [r7, #16]
 800245e:	f7fe f873 	bl	8000548 <__aeabi_f2d>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	930c      	str	r3, [sp, #48]	; 0x30
 800246e:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002472:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8002476:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800247a:	ed8d 8b04 	vstr	d8, [sp, #16]
 800247e:	ed97 7b00 	vldr	d7, [r7]
 8002482:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002486:	ed97 7b02 	vldr	d7, [r7, #8]
 800248a:	ed8d 7b00 	vstr	d7, [sp]
 800248e:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <csvframe+0xc0>)
 8002490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002496:	f012 fedd 	bl	8015254 <sniprintf>
 800249a:	62f8      	str	r0, [r7, #44]	; 0x2c
	return framesize;
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3730      	adds	r7, #48	; 0x30
 80024a2:	46bd      	mov	sp, r7
 80024a4:	ecbd 8b02 	vpop	{d8}
 80024a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ac:	f3af 8000 	nop.w
 80024b0:	080199bc 	.word	0x080199bc
 80024b4:	cccccccd 	.word	0xcccccccd
 80024b8:	400ccccc 	.word	0x400ccccc

080024bc <storeindex>:


void storeindex(void){
 80024bc:	b580      	push	{r7, lr}
 80024be:	b09c      	sub	sp, #112	; 0x70
 80024c0:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 80024c2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80024c6:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 80024c8:	463b      	mov	r3, r7
 80024ca:	2264      	movs	r2, #100	; 0x64
 80024cc:	2100      	movs	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f012 ff57 	bl	8015382 <memset>
	snprintf((uint8_t*)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 80024d4:	4b14      	ldr	r3, [pc, #80]	; (8002528 <storeindex+0x6c>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <storeindex+0x70>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4638      	mov	r0, r7
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	4a13      	ldr	r2, [pc, #76]	; (8002530 <storeindex+0x74>)
 80024e4:	2164      	movs	r1, #100	; 0x64
 80024e6:	f012 feb5 	bl	8015254 <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 80024ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	da00      	bge.n	80024f2 <storeindex+0x36>
 80024f0:	330f      	adds	r3, #15
 80024f2:	111b      	asrs	r3, r3, #4
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe f815 	bl	8000524 <__aeabi_i2d>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	f7fe fb29 	bl	8000b58 <__aeabi_d2iz>
 8002506:	4603      	mov	r3, r0
 8002508:	4619      	mov	r1, r3
 800250a:	480a      	ldr	r0, [pc, #40]	; (8002534 <storeindex+0x78>)
 800250c:	f010 f93f 	bl	801278e <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8002510:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002512:	463a      	mov	r2, r7
 8002514:	2300      	movs	r3, #0
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2364      	movs	r3, #100	; 0x64
 800251a:	4806      	ldr	r0, [pc, #24]	; (8002534 <storeindex+0x78>)
 800251c:	f010 f9ba 	bl	8012894 <SPIF_WritePage>

}
 8002520:	bf00      	nop
 8002522:	3768      	adds	r7, #104	; 0x68
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000958 	.word	0x20000958
 800252c:	2000095c 	.word	0x2000095c
 8002530:	080199ec 	.word	0x080199ec
 8002534:	20000710 	.word	0x20000710

08002538 <getindex>:

void getindex(void){
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 800253e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002542:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	2300      	movs	r3, #0
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2332      	movs	r3, #50	; 0x32
 800254c:	4a2b      	ldr	r2, [pc, #172]	; (80025fc <getindex+0xc4>)
 800254e:	482c      	ldr	r0, [pc, #176]	; (8002600 <getindex+0xc8>)
 8002550:	f010 f9be 	bl	80128d0 <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 8002554:	220a      	movs	r2, #10
 8002556:	2124      	movs	r1, #36	; 0x24
 8002558:	482a      	ldr	r0, [pc, #168]	; (8002604 <getindex+0xcc>)
 800255a:	f012 ff12 	bl	8015382 <memset>
	memset(numbuf2,'$',10);
 800255e:	220a      	movs	r2, #10
 8002560:	2124      	movs	r1, #36	; 0x24
 8002562:	4829      	ldr	r0, [pc, #164]	; (8002608 <getindex+0xd0>)
 8002564:	f012 ff0d 	bl	8015382 <memset>
	int cnt=0;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 800256c:	4b23      	ldr	r3, [pc, #140]	; (80025fc <getindex+0xc4>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	2b09      	cmp	r3, #9
 8002576:	dc3a      	bgt.n	80025ee <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 8002578:	e00b      	b.n	8002592 <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 800257a:	4a20      	ldr	r2, [pc, #128]	; (80025fc <getindex+0xc4>)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4413      	add	r3, r2
 8002580:	7819      	ldrb	r1, [r3, #0]
 8002582:	4a20      	ldr	r2, [pc, #128]	; (8002604 <getindex+0xcc>)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4413      	add	r3, r2
 8002588:	460a      	mov	r2, r1
 800258a:	701a      	strb	r2, [r3, #0]
			  cnt++;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	3301      	adds	r3, #1
 8002590:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 8002592:	4a1a      	ldr	r2, [pc, #104]	; (80025fc <getindex+0xc4>)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b24      	cmp	r3, #36	; 0x24
 800259c:	d1ed      	bne.n	800257a <getindex+0x42>
		  }
		  cnt++;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3301      	adds	r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 80025a8:	e00e      	b.n	80025c8 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 80025aa:	4a14      	ldr	r2, [pc, #80]	; (80025fc <getindex+0xc4>)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4413      	add	r3, r2
 80025b0:	7819      	ldrb	r1, [r3, #0]
 80025b2:	4a15      	ldr	r2, [pc, #84]	; (8002608 <getindex+0xd0>)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4413      	add	r3, r2
 80025b8:	460a      	mov	r2, r1
 80025ba:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	3301      	adds	r3, #1
 80025c0:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3301      	adds	r3, #1
 80025c6:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 80025c8:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <getindex+0xc4>)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4413      	add	r3, r2
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b24      	cmp	r3, #36	; 0x24
 80025d2:	d1ea      	bne.n	80025aa <getindex+0x72>
		  	  }

		 pageoffset=atoi((uint8_t*)numbuf1);
 80025d4:	480b      	ldr	r0, [pc, #44]	; (8002604 <getindex+0xcc>)
 80025d6:	f010 ff3f 	bl	8013458 <atoi>
 80025da:	4603      	mov	r3, r0
 80025dc:	4a0b      	ldr	r2, [pc, #44]	; (800260c <getindex+0xd4>)
 80025de:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((uint8_t*)numbuf2);
 80025e0:	4809      	ldr	r0, [pc, #36]	; (8002608 <getindex+0xd0>)
 80025e2:	f010 ff39 	bl	8013458 <atoi>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4a09      	ldr	r2, [pc, #36]	; (8002610 <getindex+0xd8>)
 80025ea:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 80025ec:	e001      	b.n	80025f2 <getindex+0xba>
		storeindex();
 80025ee:	f7ff ff65 	bl	80024bc <storeindex>
}
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000a74 	.word	0x20000a74
 8002600:	20000710 	.word	0x20000710
 8002604:	20000964 	.word	0x20000964
 8002608:	20000970 	.word	0x20000970
 800260c:	20000958 	.word	0x20000958
 8002610:	2000095c 	.word	0x2000095c

08002614 <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af02      	add	r7, sp, #8
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 800261e:	4b3f      	ldr	r3, [pc, #252]	; (800271c <writebuffertoflash+0x108>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	3301      	adds	r3, #1
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	2b00      	cmp	r3, #0
 800262a:	d11b      	bne.n	8002664 <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 800262c:	4b3c      	ldr	r3, [pc, #240]	; (8002720 <writebuffertoflash+0x10c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d117      	bne.n	8002664 <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8002634:	4b39      	ldr	r3, [pc, #228]	; (800271c <writebuffertoflash+0x108>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	da00      	bge.n	8002640 <writebuffertoflash+0x2c>
 800263e:	330f      	adds	r3, #15
 8002640:	111b      	asrs	r3, r3, #4
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd ff6e 	bl	8000524 <__aeabi_i2d>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4610      	mov	r0, r2
 800264e:	4619      	mov	r1, r3
 8002650:	f7fe fa82 	bl	8000b58 <__aeabi_d2iz>
 8002654:	4603      	mov	r3, r0
 8002656:	4619      	mov	r1, r3
 8002658:	4832      	ldr	r0, [pc, #200]	; (8002724 <writebuffertoflash+0x110>)
 800265a:	f010 f898 	bl	801278e <SPIF_EraseSector>
		sectoreraseen=1;
 800265e:	4b30      	ldr	r3, [pc, #192]	; (8002720 <writebuffertoflash+0x10c>)
 8002660:	2201      	movs	r2, #1
 8002662:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 8002664:	4b30      	ldr	r3, [pc, #192]	; (8002728 <writebuffertoflash+0x114>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4413      	add	r3, r2
 800266c:	2bff      	cmp	r3, #255	; 0xff
 800266e:	dc11      	bgt.n	8002694 <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8002670:	4b2a      	ldr	r3, [pc, #168]	; (800271c <writebuffertoflash+0x108>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	4a2b      	ldr	r2, [pc, #172]	; (8002728 <writebuffertoflash+0x114>)
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	9200      	str	r2, [sp, #0]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	4828      	ldr	r0, [pc, #160]	; (8002724 <writebuffertoflash+0x110>)
 8002682:	f010 f907 	bl	8012894 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 8002686:	4b28      	ldr	r3, [pc, #160]	; (8002728 <writebuffertoflash+0x114>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	4413      	add	r3, r2
 800268e:	4a26      	ldr	r2, [pc, #152]	; (8002728 <writebuffertoflash+0x114>)
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e03c      	b.n	800270e <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <writebuffertoflash+0x108>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4619      	mov	r1, r3
 800269a:	4b23      	ldr	r3, [pc, #140]	; (8002728 <writebuffertoflash+0x114>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b20      	ldr	r3, [pc, #128]	; (8002728 <writebuffertoflash+0x114>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	4613      	mov	r3, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	481d      	ldr	r0, [pc, #116]	; (8002724 <writebuffertoflash+0x110>)
 80026b0:	f010 f8f0 	bl	8012894 <SPIF_WritePage>
		HAL_Delay(100);
 80026b4:	2064      	movs	r0, #100	; 0x64
 80026b6:	f003 f815 	bl	80056e4 <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 80026ba:	4b18      	ldr	r3, [pc, #96]	; (800271c <writebuffertoflash+0x108>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3301      	adds	r3, #1
 80026c0:	4618      	mov	r0, r3
 80026c2:	4b19      	ldr	r3, [pc, #100]	; (8002728 <writebuffertoflash+0x114>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80026ca:	461a      	mov	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	1899      	adds	r1, r3, r2
 80026d0:	4b15      	ldr	r3, [pc, #84]	; (8002728 <writebuffertoflash+0x114>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	2300      	movs	r3, #0
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	4613      	mov	r3, r2
 80026e4:	460a      	mov	r2, r1
 80026e6:	4601      	mov	r1, r0
 80026e8:	480e      	ldr	r0, [pc, #56]	; (8002724 <writebuffertoflash+0x110>)
 80026ea:	f010 f8d3 	bl	8012894 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 80026ee:	4b0b      	ldr	r3, [pc, #44]	; (800271c <writebuffertoflash+0x108>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	3301      	adds	r3, #1
 80026f4:	4a09      	ldr	r2, [pc, #36]	; (800271c <writebuffertoflash+0x108>)
 80026f6:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <writebuffertoflash+0x10c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <writebuffertoflash+0x114>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	4a07      	ldr	r2, [pc, #28]	; (8002728 <writebuffertoflash+0x114>)
 800270c:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 800270e:	f7ff fed5 	bl	80024bc <storeindex>

}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	2000095c 	.word	0x2000095c
 8002720:	20000960 	.word	0x20000960
 8002724:	20000710 	.word	0x20000710
 8002728:	20000958 	.word	0x20000958

0800272c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern char str[20];

void ssd1306_Reset(void) {
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af04      	add	r7, sp, #16
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	9302      	str	r3, [sp, #8]
 800274c:	2301      	movs	r3, #1
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	1dfb      	adds	r3, r7, #7
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2301      	movs	r3, #1
 8002756:	2200      	movs	r2, #0
 8002758:	2178      	movs	r1, #120	; 0x78
 800275a:	4803      	ldr	r0, [pc, #12]	; (8002768 <ssd1306_WriteCommand+0x2c>)
 800275c:	f005 f850 	bl	8007800 <HAL_I2C_Mem_Write>
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000424 	.word	0x20000424

0800276c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af04      	add	r7, sp, #16
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	b29b      	uxth	r3, r3
 800277a:	f04f 32ff 	mov.w	r2, #4294967295
 800277e:	9202      	str	r2, [sp, #8]
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	2301      	movs	r3, #1
 8002788:	2240      	movs	r2, #64	; 0x40
 800278a:	2178      	movs	r1, #120	; 0x78
 800278c:	4803      	ldr	r0, [pc, #12]	; (800279c <ssd1306_WriteData+0x30>)
 800278e:	f005 f837 	bl	8007800 <HAL_I2C_Mem_Write>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000424 	.word	0x20000424

080027a0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80027a4:	f7ff ffc2 	bl	800272c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80027a8:	2064      	movs	r0, #100	; 0x64
 80027aa:	f002 ff9b 	bl	80056e4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80027ae:	2000      	movs	r0, #0
 80027b0:	f000 fba0 	bl	8002ef4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80027b4:	2020      	movs	r0, #32
 80027b6:	f7ff ffc1 	bl	800273c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7ff ffbe 	bl	800273c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80027c0:	20b0      	movs	r0, #176	; 0xb0
 80027c2:	f7ff ffbb 	bl	800273c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80027c6:	20c8      	movs	r0, #200	; 0xc8
 80027c8:	f7ff ffb8 	bl	800273c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80027cc:	2000      	movs	r0, #0
 80027ce:	f7ff ffb5 	bl	800273c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80027d2:	2010      	movs	r0, #16
 80027d4:	f7ff ffb2 	bl	800273c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80027d8:	2040      	movs	r0, #64	; 0x40
 80027da:	f7ff ffaf 	bl	800273c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80027de:	20ff      	movs	r0, #255	; 0xff
 80027e0:	f000 fb75 	bl	8002ece <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80027e4:	20a1      	movs	r0, #161	; 0xa1
 80027e6:	f7ff ffa9 	bl	800273c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80027ea:	20a6      	movs	r0, #166	; 0xa6
 80027ec:	f7ff ffa6 	bl	800273c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80027f0:	20a8      	movs	r0, #168	; 0xa8
 80027f2:	f7ff ffa3 	bl	800273c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80027f6:	203f      	movs	r0, #63	; 0x3f
 80027f8:	f7ff ffa0 	bl	800273c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80027fc:	20a4      	movs	r0, #164	; 0xa4
 80027fe:	f7ff ff9d 	bl	800273c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002802:	20d3      	movs	r0, #211	; 0xd3
 8002804:	f7ff ff9a 	bl	800273c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002808:	2000      	movs	r0, #0
 800280a:	f7ff ff97 	bl	800273c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800280e:	20d5      	movs	r0, #213	; 0xd5
 8002810:	f7ff ff94 	bl	800273c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002814:	20f0      	movs	r0, #240	; 0xf0
 8002816:	f7ff ff91 	bl	800273c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800281a:	20d9      	movs	r0, #217	; 0xd9
 800281c:	f7ff ff8e 	bl	800273c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002820:	2022      	movs	r0, #34	; 0x22
 8002822:	f7ff ff8b 	bl	800273c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002826:	20da      	movs	r0, #218	; 0xda
 8002828:	f7ff ff88 	bl	800273c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800282c:	2012      	movs	r0, #18
 800282e:	f7ff ff85 	bl	800273c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002832:	20db      	movs	r0, #219	; 0xdb
 8002834:	f7ff ff82 	bl	800273c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002838:	2020      	movs	r0, #32
 800283a:	f7ff ff7f 	bl	800273c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800283e:	208d      	movs	r0, #141	; 0x8d
 8002840:	f7ff ff7c 	bl	800273c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002844:	2014      	movs	r0, #20
 8002846:	f7ff ff79 	bl	800273c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800284a:	2001      	movs	r0, #1
 800284c:	f000 fb52 	bl	8002ef4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002850:	2000      	movs	r0, #0
 8002852:	f000 f80f 	bl	8002874 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002856:	f000 f825 	bl	80028a4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <ssd1306_Init+0xd0>)
 800285c:	2200      	movs	r2, #0
 800285e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <ssd1306_Init+0xd0>)
 8002862:	2200      	movs	r2, #0
 8002864:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002866:	4b02      	ldr	r3, [pc, #8]	; (8002870 <ssd1306_Init+0xd0>)
 8002868:	2201      	movs	r2, #1
 800286a:	711a      	strb	r2, [r3, #4]
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000f0c 	.word	0x20000f0c

08002874 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <ssd1306_Fill+0x14>
 8002884:	2300      	movs	r3, #0
 8002886:	e000      	b.n	800288a <ssd1306_Fill+0x16>
 8002888:	23ff      	movs	r3, #255	; 0xff
 800288a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800288e:	4619      	mov	r1, r3
 8002890:	4803      	ldr	r0, [pc, #12]	; (80028a0 <ssd1306_Fill+0x2c>)
 8002892:	f012 fd76 	bl	8015382 <memset>
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000b0c 	.word	0x20000b0c

080028a4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80028aa:	2300      	movs	r3, #0
 80028ac:	71fb      	strb	r3, [r7, #7]
 80028ae:	e016      	b.n	80028de <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	3b50      	subs	r3, #80	; 0x50
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff ff40 	bl	800273c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80028bc:	2000      	movs	r0, #0
 80028be:	f7ff ff3d 	bl	800273c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80028c2:	2010      	movs	r0, #16
 80028c4:	f7ff ff3a 	bl	800273c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	01db      	lsls	r3, r3, #7
 80028cc:	4a08      	ldr	r2, [pc, #32]	; (80028f0 <ssd1306_UpdateScreen+0x4c>)
 80028ce:	4413      	add	r3, r2
 80028d0:	2180      	movs	r1, #128	; 0x80
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ff4a 	bl	800276c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	3301      	adds	r3, #1
 80028dc:	71fb      	strb	r3, [r7, #7]
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	2b07      	cmp	r3, #7
 80028e2:	d9e5      	bls.n	80028b0 <ssd1306_UpdateScreen+0xc>
    }
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000b0c 	.word	0x20000b0c

080028f4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
 80028fe:	460b      	mov	r3, r1
 8002900:	71bb      	strb	r3, [r7, #6]
 8002902:	4613      	mov	r3, r2
 8002904:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	2b00      	cmp	r3, #0
 800290c:	db3d      	blt.n	800298a <ssd1306_DrawPixel+0x96>
 800290e:	79bb      	ldrb	r3, [r7, #6]
 8002910:	2b3f      	cmp	r3, #63	; 0x3f
 8002912:	d83a      	bhi.n	800298a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002914:	797b      	ldrb	r3, [r7, #5]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d11a      	bne.n	8002950 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800291a:	79fa      	ldrb	r2, [r7, #7]
 800291c:	79bb      	ldrb	r3, [r7, #6]
 800291e:	08db      	lsrs	r3, r3, #3
 8002920:	b2d8      	uxtb	r0, r3
 8002922:	4603      	mov	r3, r0
 8002924:	01db      	lsls	r3, r3, #7
 8002926:	4413      	add	r3, r2
 8002928:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <ssd1306_DrawPixel+0xa4>)
 800292a:	5cd3      	ldrb	r3, [r2, r3]
 800292c:	b25a      	sxtb	r2, r3
 800292e:	79bb      	ldrb	r3, [r7, #6]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	2101      	movs	r1, #1
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	b25b      	sxtb	r3, r3
 800293c:	4313      	orrs	r3, r2
 800293e:	b259      	sxtb	r1, r3
 8002940:	79fa      	ldrb	r2, [r7, #7]
 8002942:	4603      	mov	r3, r0
 8002944:	01db      	lsls	r3, r3, #7
 8002946:	4413      	add	r3, r2
 8002948:	b2c9      	uxtb	r1, r1
 800294a:	4a13      	ldr	r2, [pc, #76]	; (8002998 <ssd1306_DrawPixel+0xa4>)
 800294c:	54d1      	strb	r1, [r2, r3]
 800294e:	e01d      	b.n	800298c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002950:	79fa      	ldrb	r2, [r7, #7]
 8002952:	79bb      	ldrb	r3, [r7, #6]
 8002954:	08db      	lsrs	r3, r3, #3
 8002956:	b2d8      	uxtb	r0, r3
 8002958:	4603      	mov	r3, r0
 800295a:	01db      	lsls	r3, r3, #7
 800295c:	4413      	add	r3, r2
 800295e:	4a0e      	ldr	r2, [pc, #56]	; (8002998 <ssd1306_DrawPixel+0xa4>)
 8002960:	5cd3      	ldrb	r3, [r2, r3]
 8002962:	b25a      	sxtb	r2, r3
 8002964:	79bb      	ldrb	r3, [r7, #6]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	2101      	movs	r1, #1
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	b25b      	sxtb	r3, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	b25b      	sxtb	r3, r3
 8002976:	4013      	ands	r3, r2
 8002978:	b259      	sxtb	r1, r3
 800297a:	79fa      	ldrb	r2, [r7, #7]
 800297c:	4603      	mov	r3, r0
 800297e:	01db      	lsls	r3, r3, #7
 8002980:	4413      	add	r3, r2
 8002982:	b2c9      	uxtb	r1, r1
 8002984:	4a04      	ldr	r2, [pc, #16]	; (8002998 <ssd1306_DrawPixel+0xa4>)
 8002986:	54d1      	strb	r1, [r2, r3]
 8002988:	e000      	b.n	800298c <ssd1306_DrawPixel+0x98>
        return;
 800298a:	bf00      	nop
    }
}
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000b0c 	.word	0x20000b0c

0800299c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b089      	sub	sp, #36	; 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4604      	mov	r4, r0
 80029a4:	1d38      	adds	r0, r7, #4
 80029a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80029aa:	461a      	mov	r2, r3
 80029ac:	4623      	mov	r3, r4
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	4613      	mov	r3, r2
 80029b2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	2b1f      	cmp	r3, #31
 80029b8:	d902      	bls.n	80029c0 <ssd1306_WriteChar+0x24>
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	2b7e      	cmp	r3, #126	; 0x7e
 80029be:	d901      	bls.n	80029c4 <ssd1306_WriteChar+0x28>
        return 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	e06d      	b.n	8002aa0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80029c4:	4b38      	ldr	r3, [pc, #224]	; (8002aa8 <ssd1306_WriteChar+0x10c>)
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	461a      	mov	r2, r3
 80029ca:	793b      	ldrb	r3, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	2b80      	cmp	r3, #128	; 0x80
 80029d0:	dc06      	bgt.n	80029e0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80029d2:	4b35      	ldr	r3, [pc, #212]	; (8002aa8 <ssd1306_WriteChar+0x10c>)
 80029d4:	885b      	ldrh	r3, [r3, #2]
 80029d6:	461a      	mov	r2, r3
 80029d8:	797b      	ldrb	r3, [r7, #5]
 80029da:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80029dc:	2b40      	cmp	r3, #64	; 0x40
 80029de:	dd01      	ble.n	80029e4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	e05d      	b.n	8002aa0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80029e4:	2300      	movs	r3, #0
 80029e6:	61fb      	str	r3, [r7, #28]
 80029e8:	e04c      	b.n	8002a84 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	3b20      	subs	r3, #32
 80029f0:	7979      	ldrb	r1, [r7, #5]
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4619      	mov	r1, r3
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	440b      	add	r3, r1
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002a04:	2300      	movs	r3, #0
 8002a06:	61bb      	str	r3, [r7, #24]
 8002a08:	e034      	b.n	8002a74 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d012      	beq.n	8002a40 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002a1a:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <ssd1306_WriteChar+0x10c>)
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	b2d8      	uxtb	r0, r3
 8002a28:	4b1f      	ldr	r3, [pc, #124]	; (8002aa8 <ssd1306_WriteChar+0x10c>)
 8002a2a:	885b      	ldrh	r3, [r3, #2]
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	7bba      	ldrb	r2, [r7, #14]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f7ff ff5b 	bl	80028f4 <ssd1306_DrawPixel>
 8002a3e:	e016      	b.n	8002a6e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002a40:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <ssd1306_WriteChar+0x10c>)
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	b2d8      	uxtb	r0, r3
 8002a4e:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <ssd1306_WriteChar+0x10c>)
 8002a50:	885b      	ldrh	r3, [r3, #2]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	b2d9      	uxtb	r1, r3
 8002a5c:	7bbb      	ldrb	r3, [r7, #14]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bf0c      	ite	eq
 8002a62:	2301      	moveq	r3, #1
 8002a64:	2300      	movne	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f7ff ff43 	bl	80028f4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	3301      	adds	r3, #1
 8002a72:	61bb      	str	r3, [r7, #24]
 8002a74:	793b      	ldrb	r3, [r7, #4]
 8002a76:	461a      	mov	r2, r3
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d3c5      	bcc.n	8002a0a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3301      	adds	r3, #1
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	797b      	ldrb	r3, [r7, #5]
 8002a86:	461a      	mov	r2, r3
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d3ad      	bcc.n	80029ea <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <ssd1306_WriteChar+0x10c>)
 8002a90:	881a      	ldrh	r2, [r3, #0]
 8002a92:	793b      	ldrb	r3, [r7, #4]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <ssd1306_WriteChar+0x10c>)
 8002a9c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3724      	adds	r7, #36	; 0x24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd90      	pop	{r4, r7, pc}
 8002aa8:	20000f0c 	.word	0x20000f0c

08002aac <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	1d38      	adds	r0, r7, #4
 8002ab6:	e880 0006 	stmia.w	r0, {r1, r2}
 8002aba:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002abc:	e012      	b.n	8002ae4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	7818      	ldrb	r0, [r3, #0]
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	1d3a      	adds	r2, r7, #4
 8002ac6:	ca06      	ldmia	r2, {r1, r2}
 8002ac8:	f7ff ff68 	bl	800299c <ssd1306_WriteChar>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d002      	beq.n	8002ade <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	e008      	b.n	8002af0 <ssd1306_WriteString+0x44>
        }
        str++;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1e8      	bne.n	8002abe <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	781b      	ldrb	r3, [r3, #0]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	460a      	mov	r2, r1
 8002b02:	71fb      	strb	r3, [r7, #7]
 8002b04:	4613      	mov	r3, r2
 8002b06:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <ssd1306_SetCursor+0x2c>)
 8002b0e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002b10:	79bb      	ldrb	r3, [r7, #6]
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <ssd1306_SetCursor+0x2c>)
 8002b16:	805a      	strh	r2, [r3, #2]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	20000f0c 	.word	0x20000f0c

08002b28 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b089      	sub	sp, #36	; 0x24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4604      	mov	r4, r0
 8002b30:	4608      	mov	r0, r1
 8002b32:	4611      	mov	r1, r2
 8002b34:	461a      	mov	r2, r3
 8002b36:	4623      	mov	r3, r4
 8002b38:	71fb      	strb	r3, [r7, #7]
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	71bb      	strb	r3, [r7, #6]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	717b      	strb	r3, [r7, #5]
 8002b42:	4613      	mov	r3, r2
 8002b44:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8002b46:	797a      	ldrb	r2, [r7, #5]
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bfb8      	it	lt
 8002b50:	425b      	neglt	r3, r3
 8002b52:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002b54:	793a      	ldrb	r2, [r7, #4]
 8002b56:	79bb      	ldrb	r3, [r7, #6]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bfb8      	it	lt
 8002b5e:	425b      	neglt	r3, r3
 8002b60:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8002b62:	79fa      	ldrb	r2, [r7, #7]
 8002b64:	797b      	ldrb	r3, [r7, #5]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d201      	bcs.n	8002b6e <ssd1306_Line+0x46>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e001      	b.n	8002b72 <ssd1306_Line+0x4a>
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b72:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002b74:	79ba      	ldrb	r2, [r7, #6]
 8002b76:	793b      	ldrb	r3, [r7, #4]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d201      	bcs.n	8002b80 <ssd1306_Line+0x58>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e001      	b.n	8002b84 <ssd1306_Line+0x5c>
 8002b80:	f04f 33ff 	mov.w	r3, #4294967295
 8002b84:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8002b8e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002b92:	7939      	ldrb	r1, [r7, #4]
 8002b94:	797b      	ldrb	r3, [r7, #5]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff feac 	bl	80028f4 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002b9c:	e024      	b.n	8002be8 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002b9e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002ba2:	79b9      	ldrb	r1, [r7, #6]
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fea4 	bl	80028f4 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	425b      	negs	r3, r3
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	dd08      	ble.n	8002bce <ssd1306_Line+0xa6>
            error -= deltaY;
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	4413      	add	r3, r2
 8002bcc:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	da08      	bge.n	8002be8 <ssd1306_Line+0xc0>
            error += deltaX;
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	4413      	add	r3, r2
 8002bdc:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	79bb      	ldrb	r3, [r7, #6]
 8002be4:	4413      	add	r3, r2
 8002be6:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002be8:	79fa      	ldrb	r2, [r7, #7]
 8002bea:	797b      	ldrb	r3, [r7, #5]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d1d6      	bne.n	8002b9e <ssd1306_Line+0x76>
 8002bf0:	79ba      	ldrb	r2, [r7, #6]
 8002bf2:	793b      	ldrb	r3, [r7, #4]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d1d2      	bne.n	8002b9e <ssd1306_Line+0x76>
        }
    }
    return;
 8002bf8:	bf00      	nop
}
 8002bfa:	3724      	adds	r7, #36	; 0x24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd90      	pop	{r4, r7, pc}

08002c00 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4604      	mov	r4, r0
 8002c08:	4608      	mov	r0, r1
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4623      	mov	r3, r4
 8002c10:	71fb      	strb	r3, [r7, #7]
 8002c12:	4603      	mov	r3, r0
 8002c14:	71bb      	strb	r3, [r7, #6]
 8002c16:	460b      	mov	r3, r1
 8002c18:	717b      	strb	r3, [r7, #5]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8002c1e:	797b      	ldrb	r3, [r7, #5]
 8002c20:	425b      	negs	r3, r3
 8002c22:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8002c28:	797b      	ldrb	r3, [r7, #5]
 8002c2a:	f1c3 0301 	rsb	r3, r3, #1
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	db65      	blt.n	8002d06 <ssd1306_DrawCircle+0x106>
 8002c3a:	79bb      	ldrb	r3, [r7, #6]
 8002c3c:	2b3f      	cmp	r3, #63	; 0x3f
 8002c3e:	d862      	bhi.n	8002d06 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	79fa      	ldrb	r2, [r7, #7]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	b2d8      	uxtb	r0, r3
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	79bb      	ldrb	r3, [r7, #6]
 8002c50:	4413      	add	r3, r2
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	793a      	ldrb	r2, [r7, #4]
 8002c56:	4619      	mov	r1, r3
 8002c58:	f7ff fe4c 	bl	80028f4 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	4413      	add	r3, r2
 8002c64:	b2d8      	uxtb	r0, r3
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	79bb      	ldrb	r3, [r7, #6]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	793a      	ldrb	r2, [r7, #4]
 8002c72:	4619      	mov	r1, r3
 8002c74:	f7ff fe3e 	bl	80028f4 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	4413      	add	r3, r2
 8002c80:	b2d8      	uxtb	r0, r3
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	79ba      	ldrb	r2, [r7, #6]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	793a      	ldrb	r2, [r7, #4]
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f7ff fe30 	bl	80028f4 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	79fa      	ldrb	r2, [r7, #7]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	b2d8      	uxtb	r0, r3
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	79ba      	ldrb	r2, [r7, #6]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	793a      	ldrb	r2, [r7, #4]
 8002caa:	4619      	mov	r1, r3
 8002cac:	f7ff fe22 	bl	80028f4 <ssd1306_DrawPixel>
        e2 = err;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	dc13      	bgt.n	8002ce4 <ssd1306_DrawCircle+0xe4>
            y++;
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4413      	add	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	425b      	negs	r3, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d105      	bne.n	8002ce4 <ssd1306_DrawCircle+0xe4>
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	dc01      	bgt.n	8002ce4 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	dd08      	ble.n	8002cfe <ssd1306_DrawCircle+0xfe>
            x++;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	dd9d      	ble.n	8002c40 <ssd1306_DrawCircle+0x40>

    return;
 8002d04:	e000      	b.n	8002d08 <ssd1306_DrawCircle+0x108>
        return;
 8002d06:	bf00      	nop
}
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd90      	pop	{r4, r7, pc}

08002d0e <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002d0e:	b590      	push	{r4, r7, lr}
 8002d10:	b085      	sub	sp, #20
 8002d12:	af02      	add	r7, sp, #8
 8002d14:	4604      	mov	r4, r0
 8002d16:	4608      	mov	r0, r1
 8002d18:	4611      	mov	r1, r2
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4623      	mov	r3, r4
 8002d1e:	71fb      	strb	r3, [r7, #7]
 8002d20:	4603      	mov	r3, r0
 8002d22:	71bb      	strb	r3, [r7, #6]
 8002d24:	460b      	mov	r3, r1
 8002d26:	717b      	strb	r3, [r7, #5]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8002d2c:	79bc      	ldrb	r4, [r7, #6]
 8002d2e:	797a      	ldrb	r2, [r7, #5]
 8002d30:	79b9      	ldrb	r1, [r7, #6]
 8002d32:	79f8      	ldrb	r0, [r7, #7]
 8002d34:	7e3b      	ldrb	r3, [r7, #24]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	4623      	mov	r3, r4
 8002d3a:	f7ff fef5 	bl	8002b28 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8002d3e:	793c      	ldrb	r4, [r7, #4]
 8002d40:	797a      	ldrb	r2, [r7, #5]
 8002d42:	79b9      	ldrb	r1, [r7, #6]
 8002d44:	7978      	ldrb	r0, [r7, #5]
 8002d46:	7e3b      	ldrb	r3, [r7, #24]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	4623      	mov	r3, r4
 8002d4c:	f7ff feec 	bl	8002b28 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8002d50:	793c      	ldrb	r4, [r7, #4]
 8002d52:	79fa      	ldrb	r2, [r7, #7]
 8002d54:	7939      	ldrb	r1, [r7, #4]
 8002d56:	7978      	ldrb	r0, [r7, #5]
 8002d58:	7e3b      	ldrb	r3, [r7, #24]
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	4623      	mov	r3, r4
 8002d5e:	f7ff fee3 	bl	8002b28 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8002d62:	79bc      	ldrb	r4, [r7, #6]
 8002d64:	79fa      	ldrb	r2, [r7, #7]
 8002d66:	7939      	ldrb	r1, [r7, #4]
 8002d68:	79f8      	ldrb	r0, [r7, #7]
 8002d6a:	7e3b      	ldrb	r3, [r7, #24]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	4623      	mov	r3, r4
 8002d70:	f7ff feda 	bl	8002b28 <ssd1306_Line>

    return;
 8002d74:	bf00      	nop
}
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd90      	pop	{r4, r7, pc}

08002d7c <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4604      	mov	r4, r0
 8002d84:	4608      	mov	r0, r1
 8002d86:	4611      	mov	r1, r2
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	71fb      	strb	r3, [r7, #7]
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71bb      	strb	r3, [r7, #6]
 8002d92:	460b      	mov	r3, r1
 8002d94:	717b      	strb	r3, [r7, #5]
 8002d96:	4613      	mov	r3, r2
 8002d98:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002d9a:	79fa      	ldrb	r2, [r7, #7]
 8002d9c:	797b      	ldrb	r3, [r7, #5]
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	bf28      	it	cs
 8002da2:	4613      	movcs	r3, r2
 8002da4:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002da6:	797a      	ldrb	r2, [r7, #5]
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	4293      	cmp	r3, r2
 8002dac:	bf38      	it	cc
 8002dae:	4613      	movcc	r3, r2
 8002db0:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002db2:	79ba      	ldrb	r2, [r7, #6]
 8002db4:	793b      	ldrb	r3, [r7, #4]
 8002db6:	4293      	cmp	r3, r2
 8002db8:	bf28      	it	cs
 8002dba:	4613      	movcs	r3, r2
 8002dbc:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002dbe:	793a      	ldrb	r2, [r7, #4]
 8002dc0:	79bb      	ldrb	r3, [r7, #6]
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	bf38      	it	cc
 8002dc6:	4613      	movcc	r3, r2
 8002dc8:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002dca:	7afb      	ldrb	r3, [r7, #11]
 8002dcc:	73fb      	strb	r3, [r7, #15]
 8002dce:	e017      	b.n	8002e00 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002dd0:	7b7b      	ldrb	r3, [r7, #13]
 8002dd2:	73bb      	strb	r3, [r7, #14]
 8002dd4:	e009      	b.n	8002dea <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8002dd6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002dda:	7bf9      	ldrb	r1, [r7, #15]
 8002ddc:	7bbb      	ldrb	r3, [r7, #14]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fd88 	bl	80028f4 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002de4:	7bbb      	ldrb	r3, [r7, #14]
 8002de6:	3301      	adds	r3, #1
 8002de8:	73bb      	strb	r3, [r7, #14]
 8002dea:	7bba      	ldrb	r2, [r7, #14]
 8002dec:	7b3b      	ldrb	r3, [r7, #12]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d803      	bhi.n	8002dfa <ssd1306_FillRectangle+0x7e>
 8002df2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	daed      	bge.n	8002dd6 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	7bfa      	ldrb	r2, [r7, #15]
 8002e02:	7abb      	ldrb	r3, [r7, #10]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d803      	bhi.n	8002e10 <ssd1306_FillRectangle+0x94>
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	2b3f      	cmp	r3, #63	; 0x3f
 8002e0c:	d9e0      	bls.n	8002dd0 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8002e0e:	bf00      	nop
 8002e10:	bf00      	nop
}
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd90      	pop	{r4, r7, pc}

08002e18 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	603a      	str	r2, [r7, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	71fb      	strb	r3, [r7, #7]
 8002e26:	460b      	mov	r3, r1
 8002e28:	71bb      	strb	r3, [r7, #6]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002e2e:	797b      	ldrb	r3, [r7, #5]
 8002e30:	3307      	adds	r3, #7
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	da00      	bge.n	8002e38 <ssd1306_DrawBitmap+0x20>
 8002e36:	3307      	adds	r3, #7
 8002e38:	10db      	asrs	r3, r3, #3
 8002e3a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	db3e      	blt.n	8002ec6 <ssd1306_DrawBitmap+0xae>
 8002e48:	79bb      	ldrb	r3, [r7, #6]
 8002e4a:	2b3f      	cmp	r3, #63	; 0x3f
 8002e4c:	d83b      	bhi.n	8002ec6 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8002e4e:	2300      	movs	r3, #0
 8002e50:	73bb      	strb	r3, [r7, #14]
 8002e52:	e033      	b.n	8002ebc <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8002e54:	2300      	movs	r3, #0
 8002e56:	737b      	strb	r3, [r7, #13]
 8002e58:	e026      	b.n	8002ea8 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8002e5a:	7b7b      	ldrb	r3, [r7, #13]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	73fb      	strb	r3, [r7, #15]
 8002e6a:	e00d      	b.n	8002e88 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002e6c:	7bbb      	ldrb	r3, [r7, #14]
 8002e6e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	7b7a      	ldrb	r2, [r7, #13]
 8002e78:	08d2      	lsrs	r2, r2, #3
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	461a      	mov	r2, r3
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	4413      	add	r3, r2
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	da08      	bge.n	8002ea2 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8002e90:	79fa      	ldrb	r2, [r7, #7]
 8002e92:	7b7b      	ldrb	r3, [r7, #13]
 8002e94:	4413      	add	r3, r2
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	7f3a      	ldrb	r2, [r7, #28]
 8002e9a:	79b9      	ldrb	r1, [r7, #6]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fd29 	bl	80028f4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8002ea2:	7b7b      	ldrb	r3, [r7, #13]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	737b      	strb	r3, [r7, #13]
 8002ea8:	7b7a      	ldrb	r2, [r7, #13]
 8002eaa:	797b      	ldrb	r3, [r7, #5]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d3d4      	bcc.n	8002e5a <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002eb0:	7bbb      	ldrb	r3, [r7, #14]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	73bb      	strb	r3, [r7, #14]
 8002eb6:	79bb      	ldrb	r3, [r7, #6]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	71bb      	strb	r3, [r7, #6]
 8002ebc:	7bba      	ldrb	r2, [r7, #14]
 8002ebe:	7e3b      	ldrb	r3, [r7, #24]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d3c7      	bcc.n	8002e54 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8002ec4:	e000      	b.n	8002ec8 <ssd1306_DrawBitmap+0xb0>
        return;
 8002ec6:	bf00      	nop
}
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002ed8:	2381      	movs	r3, #129	; 0x81
 8002eda:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fc2c 	bl	800273c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fc28 	bl	800273c <ssd1306_WriteCommand>
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002f04:	23af      	movs	r3, #175	; 0xaf
 8002f06:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002f08:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <ssd1306_SetDisplayOn+0x38>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	715a      	strb	r2, [r3, #5]
 8002f0e:	e004      	b.n	8002f1a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002f10:	23ae      	movs	r3, #174	; 0xae
 8002f12:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <ssd1306_SetDisplayOn+0x38>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fc0d 	bl	800273c <ssd1306_WriteCommand>
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000f0c 	.word	0x20000f0c

08002f30 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	ed87 0a03 	vstr	s0, [r7, #12]
 8002f3a:	60b8      	str	r0, [r7, #8]
 8002f3c:	6079      	str	r1, [r7, #4]
 8002f3e:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	330f      	adds	r3, #15
 8002f46:	b2d8      	uxtb	r0, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	b2d9      	uxtb	r1, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	330f      	adds	r3, #15
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	3305      	adds	r3, #5
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2401      	movs	r4, #1
 8002f62:	9400      	str	r4, [sp, #0]
 8002f64:	f7ff fde0 	bl	8002b28 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	3310      	adds	r3, #16
 8002f6e:	b2d8      	uxtb	r0, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	3301      	adds	r3, #1
 8002f76:	b2d9      	uxtb	r1, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	3310      	adds	r3, #16
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	3305      	adds	r3, #5
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2401      	movs	r4, #1
 8002f8a:	9400      	str	r4, [sp, #0]
 8002f8c:	f7ff fdcc 	bl	8002b28 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	b2d8      	uxtb	r0, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	b2d9      	uxtb	r1, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	330e      	adds	r3, #14
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	3306      	adds	r3, #6
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2401      	movs	r4, #1
 8002faa:	9400      	str	r4, [sp, #0]
 8002fac:	f7ff feaf 	bl	8002d0e <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f7fd fac9 	bl	8000548 <__aeabi_f2d>
 8002fb6:	a396      	add	r3, pc, #600	; (adr r3, 8003210 <batterygauge+0x2e0>)
 8002fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbc:	f7fd fd98 	bl	8000af0 <__aeabi_dcmple>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d02a      	beq.n	800301c <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	3302      	adds	r3, #2
 8002fcc:	b2d8      	uxtb	r0, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	b2d9      	uxtb	r1, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	3303      	adds	r3, #3
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2401      	movs	r4, #1
 8002fe8:	9400      	str	r4, [sp, #0]
 8002fea:	f7ff fe90 	bl	8002d0e <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d113      	bne.n	800301c <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	b2d8      	uxtb	r0, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	3302      	adds	r3, #2
 8003002:	b2d9      	uxtb	r1, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	3303      	adds	r3, #3
 800300a:	b2da      	uxtb	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	b2db      	uxtb	r3, r3
 8003010:	3304      	adds	r3, #4
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2401      	movs	r4, #1
 8003016:	9400      	str	r4, [sp, #0]
 8003018:	f7ff fe79 	bl	8002d0e <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f7fd fa93 	bl	8000548 <__aeabi_f2d>
 8003022:	a37b      	add	r3, pc, #492	; (adr r3, 8003210 <batterygauge+0x2e0>)
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f7fd fd76 	bl	8000b18 <__aeabi_dcmpgt>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d035      	beq.n	800309e <batterygauge+0x16e>
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f7fd fa88 	bl	8000548 <__aeabi_f2d>
 8003038:	a377      	add	r3, pc, #476	; (adr r3, 8003218 <batterygauge+0x2e8>)
 800303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303e:	f7fd fd57 	bl	8000af0 <__aeabi_dcmple>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d02a      	beq.n	800309e <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	3302      	adds	r3, #2
 800304e:	b2d8      	uxtb	r0, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	3302      	adds	r3, #2
 8003056:	b2d9      	uxtb	r1, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	3303      	adds	r3, #3
 800305e:	b2da      	uxtb	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	3304      	adds	r3, #4
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2401      	movs	r4, #1
 800306a:	9400      	str	r4, [sp, #0]
 800306c:	f7ff fe4f 	bl	8002d0e <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d113      	bne.n	800309e <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	3305      	adds	r3, #5
 800307c:	b2d8      	uxtb	r0, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	3302      	adds	r3, #2
 8003084:	b2d9      	uxtb	r1, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	3306      	adds	r3, #6
 800308c:	b2da      	uxtb	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	3304      	adds	r3, #4
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2401      	movs	r4, #1
 8003098:	9400      	str	r4, [sp, #0]
 800309a:	f7ff fe38 	bl	8002d0e <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f7fd fa52 	bl	8000548 <__aeabi_f2d>
 80030a4:	a35c      	add	r3, pc, #368	; (adr r3, 8003218 <batterygauge+0x2e8>)
 80030a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030aa:	f7fd fd35 	bl	8000b18 <__aeabi_dcmpgt>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d049      	beq.n	8003148 <batterygauge+0x218>
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7fd fa47 	bl	8000548 <__aeabi_f2d>
 80030ba:	a359      	add	r3, pc, #356	; (adr r3, 8003220 <batterygauge+0x2f0>)
 80030bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c0:	f7fd fd16 	bl	8000af0 <__aeabi_dcmple>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d03e      	beq.n	8003148 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	3302      	adds	r3, #2
 80030d0:	b2d8      	uxtb	r0, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	3302      	adds	r3, #2
 80030d8:	b2d9      	uxtb	r1, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	3303      	adds	r3, #3
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	3304      	adds	r3, #4
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2401      	movs	r4, #1
 80030ec:	9400      	str	r4, [sp, #0]
 80030ee:	f7ff fe0e 	bl	8002d0e <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	3305      	adds	r3, #5
 80030f8:	b2d8      	uxtb	r0, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	3302      	adds	r3, #2
 8003100:	b2d9      	uxtb	r1, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	3306      	adds	r3, #6
 8003108:	b2da      	uxtb	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	3304      	adds	r3, #4
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2401      	movs	r4, #1
 8003114:	9400      	str	r4, [sp, #0]
 8003116:	f7ff fdfa 	bl	8002d0e <ssd1306_DrawRectangle>

		if(currentsquare==1){
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d113      	bne.n	8003148 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	3308      	adds	r3, #8
 8003126:	b2d8      	uxtb	r0, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	3302      	adds	r3, #2
 800312e:	b2d9      	uxtb	r1, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	3309      	adds	r3, #9
 8003136:	b2da      	uxtb	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	b2db      	uxtb	r3, r3
 800313c:	3304      	adds	r3, #4
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2401      	movs	r4, #1
 8003142:	9400      	str	r4, [sp, #0]
 8003144:	f7ff fde3 	bl	8002d0e <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f7fd f9fd 	bl	8000548 <__aeabi_f2d>
 800314e:	a334      	add	r3, pc, #208	; (adr r3, 8003220 <batterygauge+0x2f0>)
 8003150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003154:	f7fd fce0 	bl	8000b18 <__aeabi_dcmpgt>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d100      	bne.n	8003160 <batterygauge+0x230>
	}




}
 800315e:	e052      	b.n	8003206 <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	3302      	adds	r3, #2
 8003166:	b2d8      	uxtb	r0, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	3302      	adds	r3, #2
 800316e:	b2d9      	uxtb	r1, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	3303      	adds	r3, #3
 8003176:	b2da      	uxtb	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	3304      	adds	r3, #4
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2401      	movs	r4, #1
 8003182:	9400      	str	r4, [sp, #0]
 8003184:	f7ff fdc3 	bl	8002d0e <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	3305      	adds	r3, #5
 800318e:	b2d8      	uxtb	r0, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	3302      	adds	r3, #2
 8003196:	b2d9      	uxtb	r1, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	3306      	adds	r3, #6
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	3304      	adds	r3, #4
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2401      	movs	r4, #1
 80031aa:	9400      	str	r4, [sp, #0]
 80031ac:	f7ff fdaf 	bl	8002d0e <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	3308      	adds	r3, #8
 80031b6:	b2d8      	uxtb	r0, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	3302      	adds	r3, #2
 80031be:	b2d9      	uxtb	r1, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	3309      	adds	r3, #9
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	3304      	adds	r3, #4
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2401      	movs	r4, #1
 80031d2:	9400      	str	r4, [sp, #0]
 80031d4:	f7ff fd9b 	bl	8002d0e <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d113      	bne.n	8003206 <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	330b      	adds	r3, #11
 80031e4:	b2d8      	uxtb	r0, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	3302      	adds	r3, #2
 80031ec:	b2d9      	uxtb	r1, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	330c      	adds	r3, #12
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	3304      	adds	r3, #4
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2401      	movs	r4, #1
 8003200:	9400      	str	r4, [sp, #0]
 8003202:	f7ff fd84 	bl	8002d0e <ssd1306_DrawRectangle>
}
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bd90      	pop	{r4, r7, pc}
 800320e:	bf00      	nop
 8003210:	9999999a 	.word	0x9999999a
 8003214:	400d9999 	.word	0x400d9999
 8003218:	33333333 	.word	0x33333333
 800321c:	400f3333 	.word	0x400f3333
 8003220:	66666666 	.word	0x66666666
 8003224:	40106666 	.word	0x40106666

08003228 <percentage>:

void percentage(float percent){
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af02      	add	r7, sp, #8
 800322e:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 40, floor(0.64*percent+32), 56, White);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fd f988 	bl	8000548 <__aeabi_f2d>
 8003238:	a329      	add	r3, pc, #164	; (adr r3, 80032e0 <percentage+0xb8>)
 800323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323e:	f7fd f9db 	bl	80005f8 <__aeabi_dmul>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4610      	mov	r0, r2
 8003248:	4619      	mov	r1, r3
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <percentage+0xa8>)
 8003250:	f7fd f81c 	bl	800028c <__adddf3>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	ec43 2b17 	vmov	d7, r2, r3
 800325c:	eeb0 0a47 	vmov.f32	s0, s14
 8003260:	eef0 0a67 	vmov.f32	s1, s15
 8003264:	f014 ff40 	bl	80180e8 <floor>
 8003268:	ec53 2b10 	vmov	r2, r3, d0
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	f7fd fc9a 	bl	8000ba8 <__aeabi_d2uiz>
 8003274:	4603      	mov	r3, r0
 8003276:	b2da      	uxtb	r2, r3
 8003278:	2301      	movs	r3, #1
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	2338      	movs	r3, #56	; 0x38
 800327e:	2128      	movs	r1, #40	; 0x28
 8003280:	2020      	movs	r0, #32
 8003282:	f7ff fd7b 	bl	8002d7c <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 40, 95, 56, White);
 8003286:	2301      	movs	r3, #1
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	2338      	movs	r3, #56	; 0x38
 800328c:	225f      	movs	r2, #95	; 0x5f
 800328e:	2128      	movs	r1, #40	; 0x28
 8003290:	2020      	movs	r0, #32
 8003292:	f7ff fd3c 	bl	8002d0e <ssd1306_DrawRectangle>
	snprintf((uint8_t *)str,20,"%0.2f %%",(float) percent);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fd f956 	bl	8000548 <__aeabi_f2d>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	e9cd 2300 	strd	r2, r3, [sp]
 80032a4:	4a0b      	ldr	r2, [pc, #44]	; (80032d4 <percentage+0xac>)
 80032a6:	2114      	movs	r1, #20
 80032a8:	480b      	ldr	r0, [pc, #44]	; (80032d8 <percentage+0xb0>)
 80032aa:	f011 ffd3 	bl	8015254 <sniprintf>
	ssd1306_SetCursor(45,44);
 80032ae:	212c      	movs	r1, #44	; 0x2c
 80032b0:	202d      	movs	r0, #45	; 0x2d
 80032b2:	f7ff fc21 	bl	8002af8 <ssd1306_SetCursor>
	ssd1306_WriteString((uint8_t*)str,Font_6x8,White);
 80032b6:	4a09      	ldr	r2, [pc, #36]	; (80032dc <percentage+0xb4>)
 80032b8:	2301      	movs	r3, #1
 80032ba:	ca06      	ldmia	r2, {r1, r2}
 80032bc:	4806      	ldr	r0, [pc, #24]	; (80032d8 <percentage+0xb0>)
 80032be:	f7ff fbf5 	bl	8002aac <ssd1306_WriteString>


}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	f3af 8000 	nop.w
 80032d0:	40400000 	.word	0x40400000
 80032d4:	080199f4 	.word	0x080199f4
 80032d8:	20000744 	.word	0x20000744
 80032dc:	20000008 	.word	0x20000008
 80032e0:	47ae147b 	.word	0x47ae147b
 80032e4:	3fe47ae1 	.word	0x3fe47ae1

080032e8 <statemachine>:
extern double oldlat;
extern double oldlong;
extern int cptdoubledonnee;


void statemachine(void){
 80032e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ea:	ed2d 8b02 	vpush	{d8}
 80032ee:	b09f      	sub	sp, #124	; 0x7c
 80032f0:	af04      	add	r7, sp, #16
	switch(state){
 80032f2:	4b97      	ldr	r3, [pc, #604]	; (8003550 <statemachine+0x268>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	f201 85c0 	bhi.w	8004e7c <statemachine+0x1b94>
 80032fc:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <statemachine+0x1c>)
 80032fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003302:	bf00      	nop
 8003304:	08003321 	.word	0x08003321
 8003308:	080037b1 	.word	0x080037b1
 800330c:	08003cf9 	.word	0x08003cf9
 8003310:	08004363 	.word	0x08004363
 8003314:	0800451b 	.word	0x0800451b
 8003318:	080046db 	.word	0x080046db
 800331c:	08004a75 	.word	0x08004a75
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 8003320:	2000      	movs	r0, #0
 8003322:	f7ff faa7 	bl	8002874 <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 8003326:	2120      	movs	r1, #32
 8003328:	2020      	movs	r0, #32
 800332a:	f7ff fbe5 	bl	8002af8 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 800332e:	4989      	ldr	r1, [pc, #548]	; (8003554 <statemachine+0x26c>)
 8003330:	4889      	ldr	r0, [pc, #548]	; (8003558 <statemachine+0x270>)
 8003332:	f7fe fe7f 	bl	8002034 <nmea_parse>
				 if(myData.speed>=vitmax){
 8003336:	4b88      	ldr	r3, [pc, #544]	; (8003558 <statemachine+0x270>)
 8003338:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800333c:	4b87      	ldr	r3, [pc, #540]	; (800355c <statemachine+0x274>)
 800333e:	edd3 7a00 	vldr	s15, [r3]
 8003342:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334a:	db03      	blt.n	8003354 <statemachine+0x6c>
									 vitmax=myData.speed;
 800334c:	4b82      	ldr	r3, [pc, #520]	; (8003558 <statemachine+0x270>)
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	4a82      	ldr	r2, [pc, #520]	; (800355c <statemachine+0x274>)
 8003352:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	667b      	str	r3, [r7, #100]	; 0x64
								 float sec=0;
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	663b      	str	r3, [r7, #96]	; 0x60
								 if (myData.speed!=0){
 8003360:	4b7d      	ldr	r3, [pc, #500]	; (8003558 <statemachine+0x270>)
 8003362:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003366:	eef5 7a40 	vcmp.f32	s15, #0.0
 800336a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336e:	d032      	beq.n	80033d6 <statemachine+0xee>
									 pace=1000/(60*myData.speed);
 8003370:	4b79      	ldr	r3, [pc, #484]	; (8003558 <statemachine+0x270>)
 8003372:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003376:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003560 <statemachine+0x278>
 800337a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800337e:	eddf 6a79 	vldr	s13, [pc, #484]	; 8003564 <statemachine+0x27c>
 8003382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003386:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
									 sec=(pace-floor(pace))*60;
 800338a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800338c:	f7fd f8dc 	bl	8000548 <__aeabi_f2d>
 8003390:	4604      	mov	r4, r0
 8003392:	460d      	mov	r5, r1
 8003394:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003396:	f7fd f8d7 	bl	8000548 <__aeabi_f2d>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	ec43 2b10 	vmov	d0, r2, r3
 80033a2:	f014 fea1 	bl	80180e8 <floor>
 80033a6:	ec53 2b10 	vmov	r2, r3, d0
 80033aa:	4620      	mov	r0, r4
 80033ac:	4629      	mov	r1, r5
 80033ae:	f7fc ff6b 	bl	8000288 <__aeabi_dsub>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4610      	mov	r0, r2
 80033b8:	4619      	mov	r1, r3
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	4b6a      	ldr	r3, [pc, #424]	; (8003568 <statemachine+0x280>)
 80033c0:	f7fd f91a 	bl	80005f8 <__aeabi_dmul>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4610      	mov	r0, r2
 80033ca:	4619      	mov	r1, r3
 80033cc:	f7fd fc0c 	bl	8000be8 <__aeabi_d2f>
 80033d0:	4603      	mov	r3, r0
 80033d2:	663b      	str	r3, [r7, #96]	; 0x60
 80033d4:	e001      	b.n	80033da <statemachine+0xf2>
								 }
								 else {
									 pace=9999;
 80033d6:	4b65      	ldr	r3, [pc, #404]	; (800356c <statemachine+0x284>)
 80033d8:	667b      	str	r3, [r7, #100]	; 0x64
								 }


				  switch(spdstate){
 80033da:	4b65      	ldr	r3, [pc, #404]	; (8003570 <statemachine+0x288>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	f000 8160 	beq.w	80036a4 <statemachine+0x3bc>
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	f300 81d0 	bgt.w	800378a <statemachine+0x4a2>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <statemachine+0x10e>
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	f000 80d0 	beq.w	8003594 <statemachine+0x2ac>
 80033f4:	e1c9      	b.n	800378a <statemachine+0x4a2>


				 case STATE_SUMMARY:
					 if(myData.fix == 1){
 80033f6:	4b58      	ldr	r3, [pc, #352]	; (8003558 <statemachine+0x270>)
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d16f      	bne.n	80034de <statemachine+0x1f6>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 80033fe:	2014      	movs	r0, #20
 8003400:	f010 f82e 	bl	8013460 <malloc>
 8003404:	4603      	mov	r3, r0
 8003406:	603b      	str	r3, [r7, #0]
					 				 						snprintf(str,15, "MaxV=%.1f",vitmax*3.6);
 8003408:	4b54      	ldr	r3, [pc, #336]	; (800355c <statemachine+0x274>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7fd f89b 	bl	8000548 <__aeabi_f2d>
 8003412:	a34d      	add	r3, pc, #308	; (adr r3, 8003548 <statemachine+0x260>)
 8003414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003418:	f7fd f8ee 	bl	80005f8 <__aeabi_dmul>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	e9cd 2300 	strd	r2, r3, [sp]
 8003424:	4a53      	ldr	r2, [pc, #332]	; (8003574 <statemachine+0x28c>)
 8003426:	210f      	movs	r1, #15
 8003428:	6838      	ldr	r0, [r7, #0]
 800342a:	f011 ff13 	bl	8015254 <sniprintf>
					 				 						ssd1306_SetCursor(32, 32);
 800342e:	2120      	movs	r1, #32
 8003430:	2020      	movs	r0, #32
 8003432:	f7ff fb61 	bl	8002af8 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8003436:	4a50      	ldr	r2, [pc, #320]	; (8003578 <statemachine+0x290>)
 8003438:	2301      	movs	r3, #1
 800343a:	ca06      	ldmia	r2, {r1, r2}
 800343c:	6838      	ldr	r0, [r7, #0]
 800343e:	f7ff fb35 	bl	8002aac <ssd1306_WriteString>
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 8003442:	4b45      	ldr	r3, [pc, #276]	; (8003558 <statemachine+0x270>)
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd f87e 	bl	8000548 <__aeabi_f2d>
 800344c:	a33e      	add	r3, pc, #248	; (adr r3, 8003548 <statemachine+0x260>)
 800344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003452:	f7fd f8d1 	bl	80005f8 <__aeabi_dmul>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	e9cd 2300 	strd	r2, r3, [sp]
 800345e:	4a47      	ldr	r2, [pc, #284]	; (800357c <statemachine+0x294>)
 8003460:	210f      	movs	r1, #15
 8003462:	6838      	ldr	r0, [r7, #0]
 8003464:	f011 fef6 	bl	8015254 <sniprintf>
					 				 						ssd1306_SetCursor(32, 42);
 8003468:	212a      	movs	r1, #42	; 0x2a
 800346a:	2020      	movs	r0, #32
 800346c:	f7ff fb44 	bl	8002af8 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8003470:	4a41      	ldr	r2, [pc, #260]	; (8003578 <statemachine+0x290>)
 8003472:	2301      	movs	r3, #1
 8003474:	ca06      	ldmia	r2, {r1, r2}
 8003476:	6838      	ldr	r0, [r7, #0]
 8003478:	f7ff fb18 	bl	8002aac <ssd1306_WriteString>
					 				 						snprintf(str,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));
 800347c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800347e:	f7fd f863 	bl	8000548 <__aeabi_f2d>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	ec43 2b10 	vmov	d0, r2, r3
 800348a:	f014 fe2d 	bl	80180e8 <floor>
 800348e:	eeb0 8a40 	vmov.f32	s16, s0
 8003492:	eef0 8a60 	vmov.f32	s17, s1
 8003496:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003498:	f7fd f856 	bl	8000548 <__aeabi_f2d>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	ec43 2b10 	vmov	d0, r2, r3
 80034a4:	f014 fe20 	bl	80180e8 <floor>
 80034a8:	eeb0 7a40 	vmov.f32	s14, s0
 80034ac:	eef0 7a60 	vmov.f32	s15, s1
 80034b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80034b4:	ed8d 8b00 	vstr	d8, [sp]
 80034b8:	4a31      	ldr	r2, [pc, #196]	; (8003580 <statemachine+0x298>)
 80034ba:	210f      	movs	r1, #15
 80034bc:	6838      	ldr	r0, [r7, #0]
 80034be:	f011 fec9 	bl	8015254 <sniprintf>
					 				 						ssd1306_SetCursor(32, 52);
 80034c2:	2134      	movs	r1, #52	; 0x34
 80034c4:	2020      	movs	r0, #32
 80034c6:	f7ff fb17 	bl	8002af8 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 80034ca:	4a2b      	ldr	r2, [pc, #172]	; (8003578 <statemachine+0x290>)
 80034cc:	2301      	movs	r3, #1
 80034ce:	ca06      	ldmia	r2, {r1, r2}
 80034d0:	6838      	ldr	r0, [r7, #0]
 80034d2:	f7ff faeb 	bl	8002aac <ssd1306_WriteString>
					 				 						free(str);
 80034d6:	6838      	ldr	r0, [r7, #0]
 80034d8:	f00f ffca 	bl	8013470 <free>
 80034dc:	e025      	b.n	800352a <statemachine+0x242>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);
 80034de:	2014      	movs	r0, #20
 80034e0:	f00f ffbe 	bl	8013460 <malloc>
 80034e4:	4603      	mov	r3, r0
 80034e6:	607b      	str	r3, [r7, #4]
					 				 						ssd1306_SetCursor(32, 32);
 80034e8:	2120      	movs	r1, #32
 80034ea:	2020      	movs	r0, #32
 80034ec:	f7ff fb04 	bl	8002af8 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 1", Font_6x8, White);
 80034f0:	4a21      	ldr	r2, [pc, #132]	; (8003578 <statemachine+0x290>)
 80034f2:	2301      	movs	r3, #1
 80034f4:	ca06      	ldmia	r2, {r1, r2}
 80034f6:	4823      	ldr	r0, [pc, #140]	; (8003584 <statemachine+0x29c>)
 80034f8:	f7ff fad8 	bl	8002aac <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 80034fc:	212c      	movs	r1, #44	; 0x2c
 80034fe:	2020      	movs	r0, #32
 8003500:	f7ff fafa 	bl	8002af8 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003504:	4a1c      	ldr	r2, [pc, #112]	; (8003578 <statemachine+0x290>)
 8003506:	2301      	movs	r3, #1
 8003508:	ca06      	ldmia	r2, {r1, r2}
 800350a:	481f      	ldr	r0, [pc, #124]	; (8003588 <statemachine+0x2a0>)
 800350c:	f7ff face 	bl	8002aac <ssd1306_WriteString>
					 				 						batterygauge(vbat,35, 54,1);
 8003510:	4b1e      	ldr	r3, [pc, #120]	; (800358c <statemachine+0x2a4>)
 8003512:	edd3 7a00 	vldr	s15, [r3]
 8003516:	2201      	movs	r2, #1
 8003518:	2136      	movs	r1, #54	; 0x36
 800351a:	2023      	movs	r0, #35	; 0x23
 800351c:	eeb0 0a67 	vmov.f32	s0, s15
 8003520:	f7ff fd06 	bl	8002f30 <batterygauge>
					 				 						free(str);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f00f ffa3 	bl	8013470 <free>
					 				 					}
					 if(BTN_B>=1){
 800352a:	4b19      	ldr	r3, [pc, #100]	; (8003590 <statemachine+0x2a8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f340 8126 	ble.w	8003780 <statemachine+0x498>
					 					 				 					spdstate++;
 8003534:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <statemachine+0x288>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	3301      	adds	r3, #1
 800353a:	b2da      	uxtb	r2, r3
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <statemachine+0x288>)
 800353e:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8003540:	4b13      	ldr	r3, [pc, #76]	; (8003590 <statemachine+0x2a8>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
					 					 				  	}



					 break;
 8003546:	e11b      	b.n	8003780 <statemachine+0x498>
 8003548:	cccccccd 	.word	0xcccccccd
 800354c:	400ccccc 	.word	0x400ccccc
 8003550:	20000478 	.word	0x20000478
 8003554:	200004c4 	.word	0x200004c4
 8003558:	200006c8 	.word	0x200006c8
 800355c:	200009f0 	.word	0x200009f0
 8003560:	42700000 	.word	0x42700000
 8003564:	447a0000 	.word	0x447a0000
 8003568:	404e0000 	.word	0x404e0000
 800356c:	461c3c00 	.word	0x461c3c00
 8003570:	2000047a 	.word	0x2000047a
 8003574:	08019a00 	.word	0x08019a00
 8003578:	20000008 	.word	0x20000008
 800357c:	08019a0c 	.word	0x08019a0c
 8003580:	08019a14 	.word	0x08019a14
 8003584:	08019a28 	.word	0x08019a28
 8003588:	08019a30 	.word	0x08019a30
 800358c:	20000740 	.word	0x20000740
 8003590:	2000070c 	.word	0x2000070c
				 case STATE_COMPTEUR:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 8003594:	4b96      	ldr	r3, [pc, #600]	; (80037f0 <statemachine+0x508>)
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	2b01      	cmp	r3, #1
 800359a:	d159      	bne.n	8003650 <statemachine+0x368>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 800359c:	2014      	movs	r0, #20
 800359e:	f00f ff5f 	bl	8013460 <malloc>
 80035a2:	4603      	mov	r3, r0
 80035a4:	60bb      	str	r3, [r7, #8]
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 80035a6:	4b92      	ldr	r3, [pc, #584]	; (80037f0 <statemachine+0x508>)
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fc ffcc 	bl	8000548 <__aeabi_f2d>
 80035b0:	a38b      	add	r3, pc, #556	; (adr r3, 80037e0 <statemachine+0x4f8>)
 80035b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b6:	f7fd f81f 	bl	80005f8 <__aeabi_dmul>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	e9cd 2300 	strd	r2, r3, [sp]
 80035c2:	4a8c      	ldr	r2, [pc, #560]	; (80037f4 <statemachine+0x50c>)
 80035c4:	210f      	movs	r1, #15
 80035c6:	68b8      	ldr	r0, [r7, #8]
 80035c8:	f011 fe44 	bl	8015254 <sniprintf>
					 				 						ssd1306_SetCursor(32, 54);
 80035cc:	2136      	movs	r1, #54	; 0x36
 80035ce:	2020      	movs	r0, #32
 80035d0:	f7ff fa92 	bl	8002af8 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 80035d4:	4a88      	ldr	r2, [pc, #544]	; (80037f8 <statemachine+0x510>)
 80035d6:	2301      	movs	r3, #1
 80035d8:	ca06      	ldmia	r2, {r1, r2}
 80035da:	68b8      	ldr	r0, [r7, #8]
 80035dc:	f7ff fa66 	bl	8002aac <ssd1306_WriteString>
					 				 						ssd1306_DrawRectangle(32, 38, 95, 53, White);
 80035e0:	2301      	movs	r3, #1
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	2335      	movs	r3, #53	; 0x35
 80035e6:	225f      	movs	r2, #95	; 0x5f
 80035e8:	2126      	movs	r1, #38	; 0x26
 80035ea:	2020      	movs	r0, #32
 80035ec:	f7ff fb8f 	bl	8002d0e <ssd1306_DrawRectangle>
					 				 						ssd1306_FillRectangle(32, 38,(int) floor(32+(myData.speed*0.63)), 53, White);
 80035f0:	4b7f      	ldr	r3, [pc, #508]	; (80037f0 <statemachine+0x508>)
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fc ffa7 	bl	8000548 <__aeabi_f2d>
 80035fa:	a37b      	add	r3, pc, #492	; (adr r3, 80037e8 <statemachine+0x500>)
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	f7fc fffa 	bl	80005f8 <__aeabi_dmul>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4610      	mov	r0, r2
 800360a:	4619      	mov	r1, r3
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	4b7a      	ldr	r3, [pc, #488]	; (80037fc <statemachine+0x514>)
 8003612:	f7fc fe3b 	bl	800028c <__adddf3>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	ec43 2b17 	vmov	d7, r2, r3
 800361e:	eeb0 0a47 	vmov.f32	s0, s14
 8003622:	eef0 0a67 	vmov.f32	s1, s15
 8003626:	f014 fd5f 	bl	80180e8 <floor>
 800362a:	ec53 2b10 	vmov	r2, r3, d0
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	f7fd fa91 	bl	8000b58 <__aeabi_d2iz>
 8003636:	4603      	mov	r3, r0
 8003638:	b2da      	uxtb	r2, r3
 800363a:	2301      	movs	r3, #1
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	2335      	movs	r3, #53	; 0x35
 8003640:	2126      	movs	r1, #38	; 0x26
 8003642:	2020      	movs	r0, #32
 8003644:	f7ff fb9a 	bl	8002d7c <ssd1306_FillRectangle>

					 				 						free(str);
 8003648:	68b8      	ldr	r0, [r7, #8]
 800364a:	f00f ff11 	bl	8013470 <free>
 800364e:	e01b      	b.n	8003688 <statemachine+0x3a0>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8003650:	2014      	movs	r0, #20
 8003652:	f00f ff05 	bl	8013460 <malloc>
 8003656:	4603      	mov	r3, r0
 8003658:	60fb      	str	r3, [r7, #12]
					 				 						ssd1306_SetCursor(32, 32);
 800365a:	2120      	movs	r1, #32
 800365c:	2020      	movs	r0, #32
 800365e:	f7ff fa4b 	bl	8002af8 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 2", Font_6x8, White);
 8003662:	4a65      	ldr	r2, [pc, #404]	; (80037f8 <statemachine+0x510>)
 8003664:	2301      	movs	r3, #1
 8003666:	ca06      	ldmia	r2, {r1, r2}
 8003668:	4865      	ldr	r0, [pc, #404]	; (8003800 <statemachine+0x518>)
 800366a:	f7ff fa1f 	bl	8002aac <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 800366e:	212c      	movs	r1, #44	; 0x2c
 8003670:	2020      	movs	r0, #32
 8003672:	f7ff fa41 	bl	8002af8 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003676:	4a60      	ldr	r2, [pc, #384]	; (80037f8 <statemachine+0x510>)
 8003678:	2301      	movs	r3, #1
 800367a:	ca06      	ldmia	r2, {r1, r2}
 800367c:	4861      	ldr	r0, [pc, #388]	; (8003804 <statemachine+0x51c>)
 800367e:	f7ff fa15 	bl	8002aac <ssd1306_WriteString>
					 				 						free(str);
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f00f fef4 	bl	8013470 <free>
					 				 					}
					 if(BTN_B>=1){
 8003688:	4b5f      	ldr	r3, [pc, #380]	; (8003808 <statemachine+0x520>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	dd79      	ble.n	8003784 <statemachine+0x49c>
					 				 					spdstate++;
 8003690:	4b5e      	ldr	r3, [pc, #376]	; (800380c <statemachine+0x524>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	b2da      	uxtb	r2, r3
 8003698:	4b5c      	ldr	r3, [pc, #368]	; (800380c <statemachine+0x524>)
 800369a:	701a      	strb	r2, [r3, #0]
					 				 					BTN_B=0;
 800369c:	4b5a      	ldr	r3, [pc, #360]	; (8003808 <statemachine+0x520>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
					 				  	}
					 break;
 80036a2:	e06f      	b.n	8003784 <statemachine+0x49c>
				 case STATE_GRAPH:
					 if(myData.fix == 1){
 80036a4:	4b52      	ldr	r3, [pc, #328]	; (80037f0 <statemachine+0x508>)
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d12f      	bne.n	800370c <statemachine+0x424>
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 80036ac:	2014      	movs	r0, #20
 80036ae:	f00f fed7 	bl	8013460 <malloc>
 80036b2:	4603      	mov	r3, r0
 80036b4:	613b      	str	r3, [r7, #16]

					 				 						ssd1306_SetCursor(32, 32);
 80036b6:	2120      	movs	r1, #32
 80036b8:	2020      	movs	r0, #32
 80036ba:	f7ff fa1d 	bl	8002af8 <ssd1306_SetCursor>
					 				 						snprintf(str,15, "%0.1f",(myData.speed)*3.6);
 80036be:	4b4c      	ldr	r3, [pc, #304]	; (80037f0 <statemachine+0x508>)
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fc ff40 	bl	8000548 <__aeabi_f2d>
 80036c8:	a345      	add	r3, pc, #276	; (adr r3, 80037e0 <statemachine+0x4f8>)
 80036ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ce:	f7fc ff93 	bl	80005f8 <__aeabi_dmul>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	e9cd 2300 	strd	r2, r3, [sp]
 80036da:	4a4d      	ldr	r2, [pc, #308]	; (8003810 <statemachine+0x528>)
 80036dc:	210f      	movs	r1, #15
 80036de:	6938      	ldr	r0, [r7, #16]
 80036e0:	f011 fdb8 	bl	8015254 <sniprintf>
					 				 						ssd1306_WriteString(str, Font_11x18, White);
 80036e4:	4a4b      	ldr	r2, [pc, #300]	; (8003814 <statemachine+0x52c>)
 80036e6:	2301      	movs	r3, #1
 80036e8:	ca06      	ldmia	r2, {r1, r2}
 80036ea:	6938      	ldr	r0, [r7, #16]
 80036ec:	f7ff f9de 	bl	8002aac <ssd1306_WriteString>
					 				 						batterygauge(vbat,35, 54,1);
 80036f0:	4b49      	ldr	r3, [pc, #292]	; (8003818 <statemachine+0x530>)
 80036f2:	edd3 7a00 	vldr	s15, [r3]
 80036f6:	2201      	movs	r2, #1
 80036f8:	2136      	movs	r1, #54	; 0x36
 80036fa:	2023      	movs	r0, #35	; 0x23
 80036fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003700:	f7ff fc16 	bl	8002f30 <batterygauge>

					 				 						free(str);
 8003704:	6938      	ldr	r0, [r7, #16]
 8003706:	f00f feb3 	bl	8013470 <free>
 800370a:	e025      	b.n	8003758 <statemachine+0x470>
					 }
					 else{
						 char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 800370c:	2014      	movs	r0, #20
 800370e:	f00f fea7 	bl	8013460 <malloc>
 8003712:	4603      	mov	r3, r0
 8003714:	617b      	str	r3, [r7, #20]
						 ssd1306_SetCursor(32, 32);
 8003716:	2120      	movs	r1, #32
 8003718:	2020      	movs	r0, #32
 800371a:	f7ff f9ed 	bl	8002af8 <ssd1306_SetCursor>
						 ssd1306_WriteString("Speed 3", Font_6x8, White);
 800371e:	4a36      	ldr	r2, [pc, #216]	; (80037f8 <statemachine+0x510>)
 8003720:	2301      	movs	r3, #1
 8003722:	ca06      	ldmia	r2, {r1, r2}
 8003724:	483d      	ldr	r0, [pc, #244]	; (800381c <statemachine+0x534>)
 8003726:	f7ff f9c1 	bl	8002aac <ssd1306_WriteString>
						 ssd1306_SetCursor(32, 44);
 800372a:	212c      	movs	r1, #44	; 0x2c
 800372c:	2020      	movs	r0, #32
 800372e:	f7ff f9e3 	bl	8002af8 <ssd1306_SetCursor>
						 ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003732:	4a31      	ldr	r2, [pc, #196]	; (80037f8 <statemachine+0x510>)
 8003734:	2301      	movs	r3, #1
 8003736:	ca06      	ldmia	r2, {r1, r2}
 8003738:	4832      	ldr	r0, [pc, #200]	; (8003804 <statemachine+0x51c>)
 800373a:	f7ff f9b7 	bl	8002aac <ssd1306_WriteString>
						 batterygauge(vbat,35, 54,1);
 800373e:	4b36      	ldr	r3, [pc, #216]	; (8003818 <statemachine+0x530>)
 8003740:	edd3 7a00 	vldr	s15, [r3]
 8003744:	2201      	movs	r2, #1
 8003746:	2136      	movs	r1, #54	; 0x36
 8003748:	2023      	movs	r0, #35	; 0x23
 800374a:	eeb0 0a67 	vmov.f32	s0, s15
 800374e:	f7ff fbef 	bl	8002f30 <batterygauge>
						 free(str);
 8003752:	6978      	ldr	r0, [r7, #20]
 8003754:	f00f fe8c 	bl	8013470 <free>
					 }

					 if(BTN_B>=1){
 8003758:	4b2b      	ldr	r3, [pc, #172]	; (8003808 <statemachine+0x520>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	dd13      	ble.n	8003788 <statemachine+0x4a0>
					 					 				 					spdstate--;
 8003760:	4b2a      	ldr	r3, [pc, #168]	; (800380c <statemachine+0x524>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	3b01      	subs	r3, #1
 8003766:	b2da      	uxtb	r2, r3
 8003768:	4b28      	ldr	r3, [pc, #160]	; (800380c <statemachine+0x524>)
 800376a:	701a      	strb	r2, [r3, #0]
					 					 				 					spdstate--;
 800376c:	4b27      	ldr	r3, [pc, #156]	; (800380c <statemachine+0x524>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	3b01      	subs	r3, #1
 8003772:	b2da      	uxtb	r2, r3
 8003774:	4b25      	ldr	r3, [pc, #148]	; (800380c <statemachine+0x524>)
 8003776:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8003778:	4b23      	ldr	r3, [pc, #140]	; (8003808 <statemachine+0x520>)
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 800377e:	e003      	b.n	8003788 <statemachine+0x4a0>
					 break;
 8003780:	bf00      	nop
 8003782:	e002      	b.n	800378a <statemachine+0x4a2>
					 break;
 8003784:	bf00      	nop
 8003786:	e000      	b.n	800378a <statemachine+0x4a2>
					 break;
 8003788:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 800378a:	4b25      	ldr	r3, [pc, #148]	; (8003820 <statemachine+0x538>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	f341 8366 	ble.w	8004e60 <statemachine+0x1b78>
				 					state++;
 8003794:	4b23      	ldr	r3, [pc, #140]	; (8003824 <statemachine+0x53c>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	3301      	adds	r3, #1
 800379a:	b2da      	uxtb	r2, r3
 800379c:	4b21      	ldr	r3, [pc, #132]	; (8003824 <statemachine+0x53c>)
 800379e:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 80037a0:	4b1f      	ldr	r3, [pc, #124]	; (8003820 <statemachine+0x538>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
				 					BTN_B=0;
 80037a6:	4b18      	ldr	r3, [pc, #96]	; (8003808 <statemachine+0x520>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
				  	}
				  break;
 80037ac:	f001 bb58 	b.w	8004e60 <statemachine+0x1b78>


	case STATE_POS:
			  ssd1306_Fill(Black);
 80037b0:	2000      	movs	r0, #0
 80037b2:	f7ff f85f 	bl	8002874 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 80037b6:	491c      	ldr	r1, [pc, #112]	; (8003828 <statemachine+0x540>)
 80037b8:	480d      	ldr	r0, [pc, #52]	; (80037f0 <statemachine+0x508>)
 80037ba:	f7fe fc3b 	bl	8002034 <nmea_parse>
			  switch(posstate){
 80037be:	4b1b      	ldr	r3, [pc, #108]	; (800382c <statemachine+0x544>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	f200 8285 	bhi.w	8003cd2 <statemachine+0x9ea>
 80037c8:	a201      	add	r2, pc, #4	; (adr r2, 80037d0 <statemachine+0x4e8>)
 80037ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ce:	bf00      	nop
 80037d0:	08003831 	.word	0x08003831
 80037d4:	08003949 	.word	0x08003949
 80037d8:	08003a3f 	.word	0x08003a3f
 80037dc:	08003b6f 	.word	0x08003b6f
 80037e0:	cccccccd 	.word	0xcccccccd
 80037e4:	400ccccc 	.word	0x400ccccc
 80037e8:	c28f5c29 	.word	0xc28f5c29
 80037ec:	3fe428f5 	.word	0x3fe428f5
 80037f0:	200006c8 	.word	0x200006c8
 80037f4:	08019a0c 	.word	0x08019a0c
 80037f8:	20000008 	.word	0x20000008
 80037fc:	40400000 	.word	0x40400000
 8003800:	08019a3c 	.word	0x08019a3c
 8003804:	08019a30 	.word	0x08019a30
 8003808:	2000070c 	.word	0x2000070c
 800380c:	2000047a 	.word	0x2000047a
 8003810:	08019a44 	.word	0x08019a44
 8003814:	20000018 	.word	0x20000018
 8003818:	20000740 	.word	0x20000740
 800381c:	08019a4c 	.word	0x08019a4c
 8003820:	20000708 	.word	0x20000708
 8003824:	20000478 	.word	0x20000478
 8003828:	200004c4 	.word	0x200004c4
 800382c:	2000047b 	.word	0x2000047b

			  case STATE_SUMMARY1:
				  if(myData.fix == 1){
 8003830:	4bab      	ldr	r3, [pc, #684]	; (8003ae0 <statemachine+0x7f8>)
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	2b01      	cmp	r3, #1
 8003836:	d14e      	bne.n	80038d6 <statemachine+0x5ee>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003838:	2014      	movs	r0, #20
 800383a:	f00f fe11 	bl	8013460 <malloc>
 800383e:	4603      	mov	r3, r0
 8003840:	61bb      	str	r3, [r7, #24]
				  						ssd1306_SetCursor(32, 32);
 8003842:	2120      	movs	r1, #32
 8003844:	2020      	movs	r0, #32
 8003846:	f7ff f957 	bl	8002af8 <ssd1306_SetCursor>
				  						snprintf(str,15, "Latitude:");
 800384a:	4aa6      	ldr	r2, [pc, #664]	; (8003ae4 <statemachine+0x7fc>)
 800384c:	210f      	movs	r1, #15
 800384e:	69b8      	ldr	r0, [r7, #24]
 8003850:	f011 fd00 	bl	8015254 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003854:	4aa4      	ldr	r2, [pc, #656]	; (8003ae8 <statemachine+0x800>)
 8003856:	2301      	movs	r3, #1
 8003858:	ca06      	ldmia	r2, {r1, r2}
 800385a:	69b8      	ldr	r0, [r7, #24]
 800385c:	f7ff f926 	bl	8002aac <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003860:	4b9f      	ldr	r3, [pc, #636]	; (8003ae0 <statemachine+0x7f8>)
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	e9cd 2300 	strd	r2, r3, [sp]
 800386a:	4aa0      	ldr	r2, [pc, #640]	; (8003aec <statemachine+0x804>)
 800386c:	210f      	movs	r1, #15
 800386e:	69b8      	ldr	r0, [r7, #24]
 8003870:	f011 fcf0 	bl	8015254 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003874:	2128      	movs	r1, #40	; 0x28
 8003876:	2020      	movs	r0, #32
 8003878:	f7ff f93e 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800387c:	4a9a      	ldr	r2, [pc, #616]	; (8003ae8 <statemachine+0x800>)
 800387e:	2301      	movs	r3, #1
 8003880:	ca06      	ldmia	r2, {r1, r2}
 8003882:	69b8      	ldr	r0, [r7, #24]
 8003884:	f7ff f912 	bl	8002aac <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8003888:	4a99      	ldr	r2, [pc, #612]	; (8003af0 <statemachine+0x808>)
 800388a:	210f      	movs	r1, #15
 800388c:	69b8      	ldr	r0, [r7, #24]
 800388e:	f011 fce1 	bl	8015254 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8003892:	2130      	movs	r1, #48	; 0x30
 8003894:	2020      	movs	r0, #32
 8003896:	f7ff f92f 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800389a:	4a93      	ldr	r2, [pc, #588]	; (8003ae8 <statemachine+0x800>)
 800389c:	2301      	movs	r3, #1
 800389e:	ca06      	ldmia	r2, {r1, r2}
 80038a0:	69b8      	ldr	r0, [r7, #24]
 80038a2:	f7ff f903 	bl	8002aac <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 80038a6:	4b8e      	ldr	r3, [pc, #568]	; (8003ae0 <statemachine+0x7f8>)
 80038a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80038ac:	e9cd 2300 	strd	r2, r3, [sp]
 80038b0:	4a8e      	ldr	r2, [pc, #568]	; (8003aec <statemachine+0x804>)
 80038b2:	210f      	movs	r1, #15
 80038b4:	69b8      	ldr	r0, [r7, #24]
 80038b6:	f011 fccd 	bl	8015254 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80038ba:	2138      	movs	r1, #56	; 0x38
 80038bc:	2020      	movs	r0, #32
 80038be:	f7ff f91b 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80038c2:	4a89      	ldr	r2, [pc, #548]	; (8003ae8 <statemachine+0x800>)
 80038c4:	2301      	movs	r3, #1
 80038c6:	ca06      	ldmia	r2, {r1, r2}
 80038c8:	69b8      	ldr	r0, [r7, #24]
 80038ca:	f7ff f8ef 	bl	8002aac <ssd1306_WriteString>
				  						free(str);
 80038ce:	69b8      	ldr	r0, [r7, #24]
 80038d0:	f00f fdce 	bl	8013470 <free>
 80038d4:	e029      	b.n	800392a <statemachine+0x642>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 80038d6:	2014      	movs	r0, #20
 80038d8:	f00f fdc2 	bl	8013460 <malloc>
 80038dc:	4603      	mov	r3, r0
 80038de:	61fb      	str	r3, [r7, #28]
				  						ssd1306_SetCursor(32, 32);
 80038e0:	2120      	movs	r1, #32
 80038e2:	2020      	movs	r0, #32
 80038e4:	f7ff f908 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos1", Font_6x8, White);
 80038e8:	4a7f      	ldr	r2, [pc, #508]	; (8003ae8 <statemachine+0x800>)
 80038ea:	2301      	movs	r3, #1
 80038ec:	ca06      	ldmia	r2, {r1, r2}
 80038ee:	4881      	ldr	r0, [pc, #516]	; (8003af4 <statemachine+0x80c>)
 80038f0:	f7ff f8dc 	bl	8002aac <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 80038f4:	212c      	movs	r1, #44	; 0x2c
 80038f6:	2020      	movs	r0, #32
 80038f8:	f7ff f8fe 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80038fc:	4a7a      	ldr	r2, [pc, #488]	; (8003ae8 <statemachine+0x800>)
 80038fe:	2301      	movs	r3, #1
 8003900:	ca06      	ldmia	r2, {r1, r2}
 8003902:	487d      	ldr	r0, [pc, #500]	; (8003af8 <statemachine+0x810>)
 8003904:	f7ff f8d2 	bl	8002aac <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 54);
 8003908:	2136      	movs	r1, #54	; 0x36
 800390a:	2020      	movs	r0, #32
 800390c:	f7ff f8f4 	bl	8002af8 <ssd1306_SetCursor>
				  						batterygauge(vbat,35, 54,1);
 8003910:	4b7a      	ldr	r3, [pc, #488]	; (8003afc <statemachine+0x814>)
 8003912:	edd3 7a00 	vldr	s15, [r3]
 8003916:	2201      	movs	r2, #1
 8003918:	2136      	movs	r1, #54	; 0x36
 800391a:	2023      	movs	r0, #35	; 0x23
 800391c:	eeb0 0a67 	vmov.f32	s0, s15
 8003920:	f7ff fb06 	bl	8002f30 <batterygauge>
				  						free(str);
 8003924:	69f8      	ldr	r0, [r7, #28]
 8003926:	f00f fda3 	bl	8013470 <free>
				  					}
				  if(BTN_B>=1){
 800392a:	4b75      	ldr	r3, [pc, #468]	; (8003b00 <statemachine+0x818>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f340 81c8 	ble.w	8003cc4 <statemachine+0x9dc>
					  posstate++;
 8003934:	4b73      	ldr	r3, [pc, #460]	; (8003b04 <statemachine+0x81c>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	3301      	adds	r3, #1
 800393a:	b2da      	uxtb	r2, r3
 800393c:	4b71      	ldr	r3, [pc, #452]	; (8003b04 <statemachine+0x81c>)
 800393e:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 8003940:	4b6f      	ldr	r3, [pc, #444]	; (8003b00 <statemachine+0x818>)
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]





				  break;
 8003946:	e1bd      	b.n	8003cc4 <statemachine+0x9dc>
			  case STATE_LAT:
				  if(myData.fix == 1){
 8003948:	4b65      	ldr	r3, [pc, #404]	; (8003ae0 <statemachine+0x7f8>)
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	2b01      	cmp	r3, #1
 800394e:	d14b      	bne.n	80039e8 <statemachine+0x700>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003950:	2014      	movs	r0, #20
 8003952:	f00f fd85 	bl	8013460 <malloc>
 8003956:	4603      	mov	r3, r0
 8003958:	623b      	str	r3, [r7, #32]
				  						ssd1306_SetCursor(32, 32);
 800395a:	2120      	movs	r1, #32
 800395c:	2020      	movs	r0, #32
 800395e:	f7ff f8cb 	bl	8002af8 <ssd1306_SetCursor>
				  						snprintf(str,15, "LatSide:");
 8003962:	4a69      	ldr	r2, [pc, #420]	; (8003b08 <statemachine+0x820>)
 8003964:	210f      	movs	r1, #15
 8003966:	6a38      	ldr	r0, [r7, #32]
 8003968:	f011 fc74 	bl	8015254 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800396c:	4a5e      	ldr	r2, [pc, #376]	; (8003ae8 <statemachine+0x800>)
 800396e:	2301      	movs	r3, #1
 8003970:	ca06      	ldmia	r2, {r1, r2}
 8003972:	6a38      	ldr	r0, [r7, #32]
 8003974:	f7ff f89a 	bl	8002aac <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003978:	4b59      	ldr	r3, [pc, #356]	; (8003ae0 <statemachine+0x7f8>)
 800397a:	7a1b      	ldrb	r3, [r3, #8]
 800397c:	4a63      	ldr	r2, [pc, #396]	; (8003b0c <statemachine+0x824>)
 800397e:	210f      	movs	r1, #15
 8003980:	6a38      	ldr	r0, [r7, #32]
 8003982:	f011 fc67 	bl	8015254 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003986:	2128      	movs	r1, #40	; 0x28
 8003988:	2020      	movs	r0, #32
 800398a:	f7ff f8b5 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800398e:	4a56      	ldr	r2, [pc, #344]	; (8003ae8 <statemachine+0x800>)
 8003990:	2301      	movs	r3, #1
 8003992:	ca06      	ldmia	r2, {r1, r2}
 8003994:	6a38      	ldr	r0, [r7, #32]
 8003996:	f7ff f889 	bl	8002aac <ssd1306_WriteString>
				  						snprintf(str,15, "Latitude:");
 800399a:	4a52      	ldr	r2, [pc, #328]	; (8003ae4 <statemachine+0x7fc>)
 800399c:	210f      	movs	r1, #15
 800399e:	6a38      	ldr	r0, [r7, #32]
 80039a0:	f011 fc58 	bl	8015254 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 80039a4:	2130      	movs	r1, #48	; 0x30
 80039a6:	2020      	movs	r0, #32
 80039a8:	f7ff f8a6 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80039ac:	4a4e      	ldr	r2, [pc, #312]	; (8003ae8 <statemachine+0x800>)
 80039ae:	2301      	movs	r3, #1
 80039b0:	ca06      	ldmia	r2, {r1, r2}
 80039b2:	6a38      	ldr	r0, [r7, #32]
 80039b4:	f7ff f87a 	bl	8002aac <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);
 80039b8:	4b49      	ldr	r3, [pc, #292]	; (8003ae0 <statemachine+0x7f8>)
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	e9cd 2300 	strd	r2, r3, [sp]
 80039c2:	4a4a      	ldr	r2, [pc, #296]	; (8003aec <statemachine+0x804>)
 80039c4:	210f      	movs	r1, #15
 80039c6:	6a38      	ldr	r0, [r7, #32]
 80039c8:	f011 fc44 	bl	8015254 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80039cc:	2138      	movs	r1, #56	; 0x38
 80039ce:	2020      	movs	r0, #32
 80039d0:	f7ff f892 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80039d4:	4a44      	ldr	r2, [pc, #272]	; (8003ae8 <statemachine+0x800>)
 80039d6:	2301      	movs	r3, #1
 80039d8:	ca06      	ldmia	r2, {r1, r2}
 80039da:	6a38      	ldr	r0, [r7, #32]
 80039dc:	f7ff f866 	bl	8002aac <ssd1306_WriteString>
				  						free(str);
 80039e0:	6a38      	ldr	r0, [r7, #32]
 80039e2:	f00f fd45 	bl	8013470 <free>
 80039e6:	e01b      	b.n	8003a20 <statemachine+0x738>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 80039e8:	2014      	movs	r0, #20
 80039ea:	f00f fd39 	bl	8013460 <malloc>
 80039ee:	4603      	mov	r3, r0
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
				  						ssd1306_SetCursor(32, 32);
 80039f2:	2120      	movs	r1, #32
 80039f4:	2020      	movs	r0, #32
 80039f6:	f7ff f87f 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos2", Font_6x8, White);
 80039fa:	4a3b      	ldr	r2, [pc, #236]	; (8003ae8 <statemachine+0x800>)
 80039fc:	2301      	movs	r3, #1
 80039fe:	ca06      	ldmia	r2, {r1, r2}
 8003a00:	4843      	ldr	r0, [pc, #268]	; (8003b10 <statemachine+0x828>)
 8003a02:	f7ff f853 	bl	8002aac <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003a06:	212c      	movs	r1, #44	; 0x2c
 8003a08:	2020      	movs	r0, #32
 8003a0a:	f7ff f875 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003a0e:	4a36      	ldr	r2, [pc, #216]	; (8003ae8 <statemachine+0x800>)
 8003a10:	2301      	movs	r3, #1
 8003a12:	ca06      	ldmia	r2, {r1, r2}
 8003a14:	4838      	ldr	r0, [pc, #224]	; (8003af8 <statemachine+0x810>)
 8003a16:	f7ff f849 	bl	8002aac <ssd1306_WriteString>
				  						free(str);
 8003a1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a1c:	f00f fd28 	bl	8013470 <free>
				  					}
				  if(BTN_B>=1){
 8003a20:	4b37      	ldr	r3, [pc, #220]	; (8003b00 <statemachine+0x818>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f340 814f 	ble.w	8003cc8 <statemachine+0x9e0>
				  					  posstate++;
 8003a2a:	4b36      	ldr	r3, [pc, #216]	; (8003b04 <statemachine+0x81c>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4b34      	ldr	r3, [pc, #208]	; (8003b04 <statemachine+0x81c>)
 8003a34:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8003a36:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <statemachine+0x818>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
				  				  }



				  break;
 8003a3c:	e144      	b.n	8003cc8 <statemachine+0x9e0>
			  case STATE_LONG:
				  if(myData.fix == 1){
 8003a3e:	4b28      	ldr	r3, [pc, #160]	; (8003ae0 <statemachine+0x7f8>)
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d168      	bne.n	8003b18 <statemachine+0x830>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003a46:	2014      	movs	r0, #20
 8003a48:	f00f fd0a 	bl	8013460 <malloc>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
				  						ssd1306_SetCursor(32, 32);
 8003a50:	2120      	movs	r1, #32
 8003a52:	2020      	movs	r0, #32
 8003a54:	f7ff f850 	bl	8002af8 <ssd1306_SetCursor>
				  						snprintf(str,15, "LonSide:");
 8003a58:	4a2e      	ldr	r2, [pc, #184]	; (8003b14 <statemachine+0x82c>)
 8003a5a:	210f      	movs	r1, #15
 8003a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a5e:	f011 fbf9 	bl	8015254 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003a62:	4a21      	ldr	r2, [pc, #132]	; (8003ae8 <statemachine+0x800>)
 8003a64:	2301      	movs	r3, #1
 8003a66:	ca06      	ldmia	r2, {r1, r2}
 8003a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a6a:	f7ff f81f 	bl	8002aac <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003a6e:	4b1c      	ldr	r3, [pc, #112]	; (8003ae0 <statemachine+0x7f8>)
 8003a70:	7e1b      	ldrb	r3, [r3, #24]
 8003a72:	4a26      	ldr	r2, [pc, #152]	; (8003b0c <statemachine+0x824>)
 8003a74:	210f      	movs	r1, #15
 8003a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a78:	f011 fbec 	bl	8015254 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003a7c:	2128      	movs	r1, #40	; 0x28
 8003a7e:	2020      	movs	r0, #32
 8003a80:	f7ff f83a 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003a84:	4a18      	ldr	r2, [pc, #96]	; (8003ae8 <statemachine+0x800>)
 8003a86:	2301      	movs	r3, #1
 8003a88:	ca06      	ldmia	r2, {r1, r2}
 8003a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a8c:	f7ff f80e 	bl	8002aac <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8003a90:	4a17      	ldr	r2, [pc, #92]	; (8003af0 <statemachine+0x808>)
 8003a92:	210f      	movs	r1, #15
 8003a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a96:	f011 fbdd 	bl	8015254 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8003a9a:	2130      	movs	r1, #48	; 0x30
 8003a9c:	2020      	movs	r0, #32
 8003a9e:	f7ff f82b 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003aa2:	4a11      	ldr	r2, [pc, #68]	; (8003ae8 <statemachine+0x800>)
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	ca06      	ldmia	r2, {r1, r2}
 8003aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aaa:	f7fe ffff 	bl	8002aac <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8003aae:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <statemachine+0x7f8>)
 8003ab0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003ab4:	e9cd 2300 	strd	r2, r3, [sp]
 8003ab8:	4a0c      	ldr	r2, [pc, #48]	; (8003aec <statemachine+0x804>)
 8003aba:	210f      	movs	r1, #15
 8003abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003abe:	f011 fbc9 	bl	8015254 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003ac2:	2138      	movs	r1, #56	; 0x38
 8003ac4:	2020      	movs	r0, #32
 8003ac6:	f7ff f817 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003aca:	4a07      	ldr	r2, [pc, #28]	; (8003ae8 <statemachine+0x800>)
 8003acc:	2301      	movs	r3, #1
 8003ace:	ca06      	ldmia	r2, {r1, r2}
 8003ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ad2:	f7fe ffeb 	bl	8002aac <ssd1306_WriteString>
				  						free(str);
 8003ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ad8:	f00f fcca 	bl	8013470 <free>
 8003adc:	e038      	b.n	8003b50 <statemachine+0x868>
 8003ade:	bf00      	nop
 8003ae0:	200006c8 	.word	0x200006c8
 8003ae4:	08019a54 	.word	0x08019a54
 8003ae8:	20000008 	.word	0x20000008
 8003aec:	08019a60 	.word	0x08019a60
 8003af0:	08019a68 	.word	0x08019a68
 8003af4:	08019a74 	.word	0x08019a74
 8003af8:	08019a30 	.word	0x08019a30
 8003afc:	20000740 	.word	0x20000740
 8003b00:	2000070c 	.word	0x2000070c
 8003b04:	2000047b 	.word	0x2000047b
 8003b08:	08019a7c 	.word	0x08019a7c
 8003b0c:	08019a88 	.word	0x08019a88
 8003b10:	08019a8c 	.word	0x08019a8c
 8003b14:	08019a94 	.word	0x08019a94
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003b18:	2014      	movs	r0, #20
 8003b1a:	f00f fca1 	bl	8013460 <malloc>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
				  						ssd1306_SetCursor(32, 32);
 8003b22:	2120      	movs	r1, #32
 8003b24:	2020      	movs	r0, #32
 8003b26:	f7fe ffe7 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos3", Font_6x8, White);
 8003b2a:	4aa1      	ldr	r2, [pc, #644]	; (8003db0 <statemachine+0xac8>)
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	ca06      	ldmia	r2, {r1, r2}
 8003b30:	48a0      	ldr	r0, [pc, #640]	; (8003db4 <statemachine+0xacc>)
 8003b32:	f7fe ffbb 	bl	8002aac <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003b36:	212c      	movs	r1, #44	; 0x2c
 8003b38:	2020      	movs	r0, #32
 8003b3a:	f7fe ffdd 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003b3e:	4a9c      	ldr	r2, [pc, #624]	; (8003db0 <statemachine+0xac8>)
 8003b40:	2301      	movs	r3, #1
 8003b42:	ca06      	ldmia	r2, {r1, r2}
 8003b44:	489c      	ldr	r0, [pc, #624]	; (8003db8 <statemachine+0xad0>)
 8003b46:	f7fe ffb1 	bl	8002aac <ssd1306_WriteString>
				  						free(str);
 8003b4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b4c:	f00f fc90 	bl	8013470 <free>
				  					}
				  if(BTN_B>=1){
 8003b50:	4b9a      	ldr	r3, [pc, #616]	; (8003dbc <statemachine+0xad4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f340 80b9 	ble.w	8003ccc <statemachine+0x9e4>
				  					  posstate++;
 8003b5a:	4b99      	ldr	r3, [pc, #612]	; (8003dc0 <statemachine+0xad8>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	4b97      	ldr	r3, [pc, #604]	; (8003dc0 <statemachine+0xad8>)
 8003b64:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8003b66:	4b95      	ldr	r3, [pc, #596]	; (8003dbc <statemachine+0xad4>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
				  				  }


				  break;
 8003b6c:	e0ae      	b.n	8003ccc <statemachine+0x9e4>
			  case STATE_ALT:
				  if(myData.fix == 1){
 8003b6e:	4b95      	ldr	r3, [pc, #596]	; (8003dc4 <statemachine+0xadc>)
 8003b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d170      	bne.n	8003c58 <statemachine+0x970>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003b76:	2014      	movs	r0, #20
 8003b78:	f00f fc72 	bl	8013460 <malloc>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	633b      	str	r3, [r7, #48]	; 0x30
				  						ssd1306_SetCursor(32, 32);
 8003b80:	2120      	movs	r1, #32
 8003b82:	2020      	movs	r0, #32
 8003b84:	f7fe ffb8 	bl	8002af8 <ssd1306_SetCursor>
				  						snprintf(str,15, "altitude:");
 8003b88:	4a8f      	ldr	r2, [pc, #572]	; (8003dc8 <statemachine+0xae0>)
 8003b8a:	210f      	movs	r1, #15
 8003b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b8e:	f011 fb61 	bl	8015254 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003b92:	4a87      	ldr	r2, [pc, #540]	; (8003db0 <statemachine+0xac8>)
 8003b94:	2301      	movs	r3, #1
 8003b96:	ca06      	ldmia	r2, {r1, r2}
 8003b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b9a:	f7fe ff87 	bl	8002aac <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003b9e:	4b89      	ldr	r3, [pc, #548]	; (8003dc4 <statemachine+0xadc>)
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fc fcd0 	bl	8000548 <__aeabi_f2d>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	e9cd 2300 	strd	r2, r3, [sp]
 8003bb0:	4a86      	ldr	r2, [pc, #536]	; (8003dcc <statemachine+0xae4>)
 8003bb2:	210f      	movs	r1, #15
 8003bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bb6:	f011 fb4d 	bl	8015254 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003bba:	2128      	movs	r1, #40	; 0x28
 8003bbc:	2020      	movs	r0, #32
 8003bbe:	f7fe ff9b 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003bc2:	4a7b      	ldr	r2, [pc, #492]	; (8003db0 <statemachine+0xac8>)
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	ca06      	ldmia	r2, {r1, r2}
 8003bc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bca:	f7fe ff6f 	bl	8002aac <ssd1306_WriteString>
				  						snprintf(str,15, "Pressure:");
 8003bce:	4a80      	ldr	r2, [pc, #512]	; (8003dd0 <statemachine+0xae8>)
 8003bd0:	210f      	movs	r1, #15
 8003bd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bd4:	f011 fb3e 	bl	8015254 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8003bd8:	2130      	movs	r1, #48	; 0x30
 8003bda:	2020      	movs	r0, #32
 8003bdc:	f7fe ff8c 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003be0:	4a73      	ldr	r2, [pc, #460]	; (8003db0 <statemachine+0xac8>)
 8003be2:	2301      	movs	r3, #1
 8003be4:	ca06      	ldmia	r2, {r1, r2}
 8003be6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003be8:	f7fe ff60 	bl	8002aac <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 8003bec:	4b75      	ldr	r3, [pc, #468]	; (8003dc4 <statemachine+0xadc>)
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fc fca9 	bl	8000548 <__aeabi_f2d>
 8003bf6:	a36c      	add	r3, pc, #432	; (adr r3, 8003da8 <statemachine+0xac0>)
 8003bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfc:	f7fc fcfc 	bl	80005f8 <__aeabi_dmul>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4610      	mov	r0, r2
 8003c06:	4619      	mov	r1, r3
 8003c08:	f7fc ffee 	bl	8000be8 <__aeabi_d2f>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	ee00 3a10 	vmov	s0, r3
 8003c12:	f014 f9cd 	bl	8017fb0 <expf>
 8003c16:	eef0 7a40 	vmov.f32	s15, s0
 8003c1a:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8003dd4 <statemachine+0xaec>
 8003c1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c22:	ee17 0a90 	vmov	r0, s15
 8003c26:	f7fc fc8f 	bl	8000548 <__aeabi_f2d>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	e9cd 2300 	strd	r2, r3, [sp]
 8003c32:	4a69      	ldr	r2, [pc, #420]	; (8003dd8 <statemachine+0xaf0>)
 8003c34:	210f      	movs	r1, #15
 8003c36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c38:	f011 fb0c 	bl	8015254 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003c3c:	2138      	movs	r1, #56	; 0x38
 8003c3e:	2020      	movs	r0, #32
 8003c40:	f7fe ff5a 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003c44:	4a5a      	ldr	r2, [pc, #360]	; (8003db0 <statemachine+0xac8>)
 8003c46:	2301      	movs	r3, #1
 8003c48:	ca06      	ldmia	r2, {r1, r2}
 8003c4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c4c:	f7fe ff2e 	bl	8002aac <ssd1306_WriteString>
				  						free(str);
 8003c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c52:	f00f fc0d 	bl	8013470 <free>
 8003c56:	e01b      	b.n	8003c90 <statemachine+0x9a8>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003c58:	2014      	movs	r0, #20
 8003c5a:	f00f fc01 	bl	8013460 <malloc>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	637b      	str	r3, [r7, #52]	; 0x34
				  						ssd1306_SetCursor(32, 32);
 8003c62:	2120      	movs	r1, #32
 8003c64:	2020      	movs	r0, #32
 8003c66:	f7fe ff47 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos4", Font_6x8, White);
 8003c6a:	4a51      	ldr	r2, [pc, #324]	; (8003db0 <statemachine+0xac8>)
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	ca06      	ldmia	r2, {r1, r2}
 8003c70:	485a      	ldr	r0, [pc, #360]	; (8003ddc <statemachine+0xaf4>)
 8003c72:	f7fe ff1b 	bl	8002aac <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003c76:	212c      	movs	r1, #44	; 0x2c
 8003c78:	2020      	movs	r0, #32
 8003c7a:	f7fe ff3d 	bl	8002af8 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003c7e:	4a4c      	ldr	r2, [pc, #304]	; (8003db0 <statemachine+0xac8>)
 8003c80:	2301      	movs	r3, #1
 8003c82:	ca06      	ldmia	r2, {r1, r2}
 8003c84:	484c      	ldr	r0, [pc, #304]	; (8003db8 <statemachine+0xad0>)
 8003c86:	f7fe ff11 	bl	8002aac <ssd1306_WriteString>
				  						free(str);
 8003c8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c8c:	f00f fbf0 	bl	8013470 <free>
				  					}
				  if(BTN_B>=1){
 8003c90:	4b4a      	ldr	r3, [pc, #296]	; (8003dbc <statemachine+0xad4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	dd1b      	ble.n	8003cd0 <statemachine+0x9e8>
				  					posstate--;
 8003c98:	4b49      	ldr	r3, [pc, #292]	; (8003dc0 <statemachine+0xad8>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	4b47      	ldr	r3, [pc, #284]	; (8003dc0 <statemachine+0xad8>)
 8003ca2:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003ca4:	4b46      	ldr	r3, [pc, #280]	; (8003dc0 <statemachine+0xad8>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	4b44      	ldr	r3, [pc, #272]	; (8003dc0 <statemachine+0xad8>)
 8003cae:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003cb0:	4b43      	ldr	r3, [pc, #268]	; (8003dc0 <statemachine+0xad8>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	4b41      	ldr	r3, [pc, #260]	; (8003dc0 <statemachine+0xad8>)
 8003cba:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 8003cbc:	4b3f      	ldr	r3, [pc, #252]	; (8003dbc <statemachine+0xad4>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]
				  				  }
				  break;
 8003cc2:	e005      	b.n	8003cd0 <statemachine+0x9e8>
				  break;
 8003cc4:	bf00      	nop
 8003cc6:	e004      	b.n	8003cd2 <statemachine+0x9ea>
				  break;
 8003cc8:	bf00      	nop
 8003cca:	e002      	b.n	8003cd2 <statemachine+0x9ea>
				  break;
 8003ccc:	bf00      	nop
 8003cce:	e000      	b.n	8003cd2 <statemachine+0x9ea>
				  break;
 8003cd0:	bf00      	nop
			  }

					if(BTN_A>=1){
 8003cd2:	4b43      	ldr	r3, [pc, #268]	; (8003de0 <statemachine+0xaf8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f341 80c4 	ble.w	8004e64 <statemachine+0x1b7c>
							state++;
 8003cdc:	4b41      	ldr	r3, [pc, #260]	; (8003de4 <statemachine+0xafc>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	4b3f      	ldr	r3, [pc, #252]	; (8003de4 <statemachine+0xafc>)
 8003ce6:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8003ce8:	4b3d      	ldr	r3, [pc, #244]	; (8003de0 <statemachine+0xaf8>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8003cee:	4b33      	ldr	r3, [pc, #204]	; (8003dbc <statemachine+0xad4>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]


						}
			  break;
 8003cf4:	f001 b8b6 	b.w	8004e64 <statemachine+0x1b7c>

		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	f7fe fdbb 	bl	8002874 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8003cfe:	493a      	ldr	r1, [pc, #232]	; (8003de8 <statemachine+0xb00>)
 8003d00:	4830      	ldr	r0, [pc, #192]	; (8003dc4 <statemachine+0xadc>)
 8003d02:	f7fe f997 	bl	8002034 <nmea_parse>
			  int heure=0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	65fb      	str	r3, [r7, #92]	; 0x5c
			  heure=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8003d0a:	4b2e      	ldr	r3, [pc, #184]	; (8003dc4 <statemachine+0xadc>)
 8003d0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d10:	f003 020f 	and.w	r2, r3, #15
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4b29      	ldr	r3, [pc, #164]	; (8003dc4 <statemachine+0xadc>)
 8003d20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	4413      	add	r3, r2
 8003d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
			  if((heure+2)>=24){
 8003d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d2e:	2b15      	cmp	r3, #21
 8003d30:	dd03      	ble.n	8003d3a <statemachine+0xa52>
				  heure=heure-22;
 8003d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d34:	3b16      	subs	r3, #22
 8003d36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d38:	e002      	b.n	8003d40 <statemachine+0xa58>
			  }
			  else{
				  heure=heure+2;
 8003d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
			  }

			  if(myData.fix == 1){
 8003d40:	4b20      	ldr	r3, [pc, #128]	; (8003dc4 <statemachine+0xadc>)
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	f040 82e3 	bne.w	8004310 <statemachine+0x1028>

				  switch(hrstate){
 8003d4a:	4b28      	ldr	r3, [pc, #160]	; (8003dec <statemachine+0xb04>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <statemachine+0xa72>
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	f000 808f 	beq.w	8003e76 <statemachine+0xb8e>
 8003d58:	e2f0      	b.n	800433c <statemachine+0x1054>
				  case STATE_DIGIT:
					  char * str = (char*)malloc(sizeof(char)*20);
 8003d5a:	2014      	movs	r0, #20
 8003d5c:	f00f fb80 	bl	8013460 <malloc>
 8003d60:	4603      	mov	r3, r0
 8003d62:	63bb      	str	r3, [r7, #56]	; 0x38
					  ssd1306_SetCursor(32, 32);
 8003d64:	2120      	movs	r1, #32
 8003d66:	2020      	movs	r0, #32
 8003d68:	f7fe fec6 	bl	8002af8 <ssd1306_SetCursor>
					  ssd1306_WriteString("hr GMT+2:", Font_6x8, White);
 8003d6c:	4a10      	ldr	r2, [pc, #64]	; (8003db0 <statemachine+0xac8>)
 8003d6e:	2301      	movs	r3, #1
 8003d70:	ca06      	ldmia	r2, {r1, r2}
 8003d72:	481f      	ldr	r0, [pc, #124]	; (8003df0 <statemachine+0xb08>)
 8003d74:	f7fe fe9a 	bl	8002aac <ssd1306_WriteString>
					 ssd1306_SetCursor(34, 42);
 8003d78:	212a      	movs	r1, #42	; 0x2a
 8003d7a:	2022      	movs	r0, #34	; 0x22
 8003d7c:	f7fe febc 	bl	8002af8 <ssd1306_SetCursor>
					 if(heure>=10){
 8003d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d82:	2b09      	cmp	r3, #9
 8003d84:	dd38      	ble.n	8003df8 <statemachine+0xb10>
					snprintf(str,15, "%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 8003d86:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <statemachine+0xadc>)
 8003d88:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	; (8003dc4 <statemachine+0xadc>)
 8003d90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003d94:	9301      	str	r3, [sp, #4]
 8003d96:	9200      	str	r2, [sp, #0]
 8003d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d9a:	4a16      	ldr	r2, [pc, #88]	; (8003df4 <statemachine+0xb0c>)
 8003d9c:	210f      	movs	r1, #15
 8003d9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003da0:	f011 fa58 	bl	8015254 <sniprintf>
 8003da4:	e037      	b.n	8003e16 <statemachine+0xb2e>
 8003da6:	bf00      	nop
 8003da8:	fb798882 	.word	0xfb798882
 8003dac:	bf1e1818 	.word	0xbf1e1818
 8003db0:	20000008 	.word	0x20000008
 8003db4:	08019aa0 	.word	0x08019aa0
 8003db8:	08019a30 	.word	0x08019a30
 8003dbc:	2000070c 	.word	0x2000070c
 8003dc0:	2000047b 	.word	0x2000047b
 8003dc4:	200006c8 	.word	0x200006c8
 8003dc8:	08019aa8 	.word	0x08019aa8
 8003dcc:	08019ab4 	.word	0x08019ab4
 8003dd0:	08019abc 	.word	0x08019abc
 8003dd4:	447a0000 	.word	0x447a0000
 8003dd8:	08019ac8 	.word	0x08019ac8
 8003ddc:	08019ad4 	.word	0x08019ad4
 8003de0:	20000708 	.word	0x20000708
 8003de4:	20000478 	.word	0x20000478
 8003de8:	200004c4 	.word	0x200004c4
 8003dec:	20000479 	.word	0x20000479
 8003df0:	08019adc 	.word	0x08019adc
 8003df4:	08019ae8 	.word	0x08019ae8
					}
					else{
					 	snprintf(str,15, "0%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 8003df8:	4bb5      	ldr	r3, [pc, #724]	; (80040d0 <statemachine+0xde8>)
 8003dfa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4bb3      	ldr	r3, [pc, #716]	; (80040d0 <statemachine+0xde8>)
 8003e02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003e06:	9301      	str	r3, [sp, #4]
 8003e08:	9200      	str	r2, [sp, #0]
 8003e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e0c:	4ab1      	ldr	r2, [pc, #708]	; (80040d4 <statemachine+0xdec>)
 8003e0e:	210f      	movs	r1, #15
 8003e10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e12:	f011 fa1f 	bl	8015254 <sniprintf>
					}
					ssd1306_WriteString(str, Font_7x10, White);
 8003e16:	4ab0      	ldr	r2, [pc, #704]	; (80040d8 <statemachine+0xdf0>)
 8003e18:	2301      	movs	r3, #1
 8003e1a:	ca06      	ldmia	r2, {r1, r2}
 8003e1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e1e:	f7fe fe45 	bl	8002aac <ssd1306_WriteString>
					ssd1306_SetCursor(34, 52);
 8003e22:	2134      	movs	r1, #52	; 0x34
 8003e24:	2022      	movs	r0, #34	; 0x22
 8003e26:	f7fe fe67 	bl	8002af8 <ssd1306_SetCursor>
					snprintf(str,15, "%c%c sec",myData.lastMeasure[4],myData.lastMeasure[5]);
 8003e2a:	4ba9      	ldr	r3, [pc, #676]	; (80040d0 <statemachine+0xde8>)
 8003e2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e30:	461a      	mov	r2, r3
 8003e32:	4ba7      	ldr	r3, [pc, #668]	; (80040d0 <statemachine+0xde8>)
 8003e34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	4aa7      	ldr	r2, [pc, #668]	; (80040dc <statemachine+0xdf4>)
 8003e3e:	210f      	movs	r1, #15
 8003e40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e42:	f011 fa07 	bl	8015254 <sniprintf>
					ssd1306_WriteString(str, Font_6x8, White);
 8003e46:	4aa6      	ldr	r2, [pc, #664]	; (80040e0 <statemachine+0xdf8>)
 8003e48:	2301      	movs	r3, #1
 8003e4a:	ca06      	ldmia	r2, {r1, r2}
 8003e4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e4e:	f7fe fe2d 	bl	8002aac <ssd1306_WriteString>
					free(str);
 8003e52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e54:	f00f fb0c 	bl	8013470 <free>
					if(BTN_B>=1){
 8003e58:	4ba2      	ldr	r3, [pc, #648]	; (80040e4 <statemachine+0xdfc>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f340 826a 	ble.w	8004336 <statemachine+0x104e>
												hrstate++;
 8003e62:	4ba1      	ldr	r3, [pc, #644]	; (80040e8 <statemachine+0xe00>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	3301      	adds	r3, #1
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	4b9f      	ldr	r3, [pc, #636]	; (80040e8 <statemachine+0xe00>)
 8003e6c:	701a      	strb	r2, [r3, #0]
												BTN_B=0;
 8003e6e:	4b9d      	ldr	r3, [pc, #628]	; (80040e4 <statemachine+0xdfc>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
											}




					  break;
 8003e74:	e25f      	b.n	8004336 <statemachine+0x104e>
				  case STATE_OLD:
					  if(heure>12){
 8003e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e78:	2b0c      	cmp	r3, #12
 8003e7a:	dd02      	ble.n	8003e82 <statemachine+0xb9a>
						  heure=heure-12;
 8003e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e7e:	3b0c      	subs	r3, #12
 8003e80:	65fb      	str	r3, [r7, #92]	; 0x5c
					  }
					  int minute=0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	63fb      	str	r3, [r7, #60]	; 0x3c
					  minute=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8003e86:	4b92      	ldr	r3, [pc, #584]	; (80040d0 <statemachine+0xde8>)
 8003e88:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003e8c:	f003 020f 	and.w	r2, r3, #15
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4b8d      	ldr	r3, [pc, #564]	; (80040d0 <statemachine+0xde8>)
 8003e9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	4413      	add	r3, r2
 8003ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
					  ssd1306_DrawCircle(64, 48, 12, White);
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	220c      	movs	r2, #12
 8003eac:	2130      	movs	r1, #48	; 0x30
 8003eae:	2040      	movs	r0, #64	; 0x40
 8003eb0:	f7fe fea6 	bl	8002c00 <ssd1306_DrawCircle>
					  ssd1306_Line(64,48,64+floor(6*cos((3-heure)*M_PI/6)),48-floor(6*sin((3-heure)*M_PI/6)),White);
 8003eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eb6:	f1c3 0303 	rsb	r3, r3, #3
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fc fb32 	bl	8000524 <__aeabi_i2d>
 8003ec0:	a381      	add	r3, pc, #516	; (adr r3, 80040c8 <statemachine+0xde0>)
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	f7fc fb97 	bl	80005f8 <__aeabi_dmul>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4610      	mov	r0, r2
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	4b85      	ldr	r3, [pc, #532]	; (80040ec <statemachine+0xe04>)
 8003ed8:	f7fc fcb8 	bl	800084c <__aeabi_ddiv>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	ec43 2b17 	vmov	d7, r2, r3
 8003ee4:	eeb0 0a47 	vmov.f32	s0, s14
 8003ee8:	eef0 0a67 	vmov.f32	s1, s15
 8003eec:	f013 ffb4 	bl	8017e58 <cos>
 8003ef0:	ec51 0b10 	vmov	r0, r1, d0
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	4b7c      	ldr	r3, [pc, #496]	; (80040ec <statemachine+0xe04>)
 8003efa:	f7fc fb7d 	bl	80005f8 <__aeabi_dmul>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	ec43 2b17 	vmov	d7, r2, r3
 8003f06:	eeb0 0a47 	vmov.f32	s0, s14
 8003f0a:	eef0 0a67 	vmov.f32	s1, s15
 8003f0e:	f014 f8eb 	bl	80180e8 <floor>
 8003f12:	ec51 0b10 	vmov	r0, r1, d0
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	4b75      	ldr	r3, [pc, #468]	; (80040f0 <statemachine+0xe08>)
 8003f1c:	f7fc f9b6 	bl	800028c <__adddf3>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4610      	mov	r0, r2
 8003f26:	4619      	mov	r1, r3
 8003f28:	f7fc fe3e 	bl	8000ba8 <__aeabi_d2uiz>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	b2dc      	uxtb	r4, r3
 8003f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f32:	f1c3 0303 	rsb	r3, r3, #3
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fc faf4 	bl	8000524 <__aeabi_i2d>
 8003f3c:	a362      	add	r3, pc, #392	; (adr r3, 80040c8 <statemachine+0xde0>)
 8003f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f42:	f7fc fb59 	bl	80005f8 <__aeabi_dmul>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	4b66      	ldr	r3, [pc, #408]	; (80040ec <statemachine+0xe04>)
 8003f54:	f7fc fc7a 	bl	800084c <__aeabi_ddiv>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	ec43 2b17 	vmov	d7, r2, r3
 8003f60:	eeb0 0a47 	vmov.f32	s0, s14
 8003f64:	eef0 0a67 	vmov.f32	s1, s15
 8003f68:	f013 ffca 	bl	8017f00 <sin>
 8003f6c:	ec51 0b10 	vmov	r0, r1, d0
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	4b5d      	ldr	r3, [pc, #372]	; (80040ec <statemachine+0xe04>)
 8003f76:	f7fc fb3f 	bl	80005f8 <__aeabi_dmul>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	ec43 2b17 	vmov	d7, r2, r3
 8003f82:	eeb0 0a47 	vmov.f32	s0, s14
 8003f86:	eef0 0a67 	vmov.f32	s1, s15
 8003f8a:	f014 f8ad 	bl	80180e8 <floor>
 8003f8e:	ec53 2b10 	vmov	r2, r3, d0
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	4957      	ldr	r1, [pc, #348]	; (80040f4 <statemachine+0xe0c>)
 8003f98:	f7fc f976 	bl	8000288 <__aeabi_dsub>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	f7fc fe00 	bl	8000ba8 <__aeabi_d2uiz>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2201      	movs	r2, #1
 8003fae:	9200      	str	r2, [sp, #0]
 8003fb0:	4622      	mov	r2, r4
 8003fb2:	2130      	movs	r1, #48	; 0x30
 8003fb4:	2040      	movs	r0, #64	; 0x40
 8003fb6:	f7fe fdb7 	bl	8002b28 <ssd1306_Line>
					  ssd1306_Line(64,48,64+floor(12*cos((15-minute)*M_PI/30)),48-floor(12*sin((15-minute)*M_PI/30)),White);
 8003fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fbc:	f1c3 030f 	rsb	r3, r3, #15
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fc faaf 	bl	8000524 <__aeabi_i2d>
 8003fc6:	a340      	add	r3, pc, #256	; (adr r3, 80040c8 <statemachine+0xde0>)
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f7fc fb14 	bl	80005f8 <__aeabi_dmul>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	4b46      	ldr	r3, [pc, #280]	; (80040f8 <statemachine+0xe10>)
 8003fde:	f7fc fc35 	bl	800084c <__aeabi_ddiv>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	ec43 2b17 	vmov	d7, r2, r3
 8003fea:	eeb0 0a47 	vmov.f32	s0, s14
 8003fee:	eef0 0a67 	vmov.f32	s1, s15
 8003ff2:	f013 ff31 	bl	8017e58 <cos>
 8003ff6:	ec51 0b10 	vmov	r0, r1, d0
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	4b3f      	ldr	r3, [pc, #252]	; (80040fc <statemachine+0xe14>)
 8004000:	f7fc fafa 	bl	80005f8 <__aeabi_dmul>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	ec43 2b17 	vmov	d7, r2, r3
 800400c:	eeb0 0a47 	vmov.f32	s0, s14
 8004010:	eef0 0a67 	vmov.f32	s1, s15
 8004014:	f014 f868 	bl	80180e8 <floor>
 8004018:	ec51 0b10 	vmov	r0, r1, d0
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	4b33      	ldr	r3, [pc, #204]	; (80040f0 <statemachine+0xe08>)
 8004022:	f7fc f933 	bl	800028c <__adddf3>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4610      	mov	r0, r2
 800402c:	4619      	mov	r1, r3
 800402e:	f7fc fdbb 	bl	8000ba8 <__aeabi_d2uiz>
 8004032:	4603      	mov	r3, r0
 8004034:	b2dc      	uxtb	r4, r3
 8004036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004038:	f1c3 030f 	rsb	r3, r3, #15
 800403c:	4618      	mov	r0, r3
 800403e:	f7fc fa71 	bl	8000524 <__aeabi_i2d>
 8004042:	a321      	add	r3, pc, #132	; (adr r3, 80040c8 <statemachine+0xde0>)
 8004044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004048:	f7fc fad6 	bl	80005f8 <__aeabi_dmul>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4610      	mov	r0, r2
 8004052:	4619      	mov	r1, r3
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <statemachine+0xe10>)
 800405a:	f7fc fbf7 	bl	800084c <__aeabi_ddiv>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	ec43 2b17 	vmov	d7, r2, r3
 8004066:	eeb0 0a47 	vmov.f32	s0, s14
 800406a:	eef0 0a67 	vmov.f32	s1, s15
 800406e:	f013 ff47 	bl	8017f00 <sin>
 8004072:	ec51 0b10 	vmov	r0, r1, d0
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	4b20      	ldr	r3, [pc, #128]	; (80040fc <statemachine+0xe14>)
 800407c:	f7fc fabc 	bl	80005f8 <__aeabi_dmul>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	ec43 2b17 	vmov	d7, r2, r3
 8004088:	eeb0 0a47 	vmov.f32	s0, s14
 800408c:	eef0 0a67 	vmov.f32	s1, s15
 8004090:	f014 f82a 	bl	80180e8 <floor>
 8004094:	ec53 2b10 	vmov	r2, r3, d0
 8004098:	f04f 0000 	mov.w	r0, #0
 800409c:	4915      	ldr	r1, [pc, #84]	; (80040f4 <statemachine+0xe0c>)
 800409e:	f7fc f8f3 	bl	8000288 <__aeabi_dsub>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4610      	mov	r0, r2
 80040a8:	4619      	mov	r1, r3
 80040aa:	f7fc fd7d 	bl	8000ba8 <__aeabi_d2uiz>
 80040ae:	4603      	mov	r3, r0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2201      	movs	r2, #1
 80040b4:	9200      	str	r2, [sp, #0]
 80040b6:	4622      	mov	r2, r4
 80040b8:	2130      	movs	r1, #48	; 0x30
 80040ba:	2040      	movs	r0, #64	; 0x40
 80040bc:	f7fe fd34 	bl	8002b28 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 80040c0:	2300      	movs	r3, #0
 80040c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80040c4:	e112      	b.n	80042ec <statemachine+0x1004>
 80040c6:	bf00      	nop
 80040c8:	54442d18 	.word	0x54442d18
 80040cc:	400921fb 	.word	0x400921fb
 80040d0:	200006c8 	.word	0x200006c8
 80040d4:	08019af0 	.word	0x08019af0
 80040d8:	20000010 	.word	0x20000010
 80040dc:	08019afc 	.word	0x08019afc
 80040e0:	20000008 	.word	0x20000008
 80040e4:	2000070c 	.word	0x2000070c
 80040e8:	20000479 	.word	0x20000479
 80040ec:	40180000 	.word	0x40180000
 80040f0:	40500000 	.word	0x40500000
 80040f4:	40480000 	.word	0x40480000
 80040f8:	403e0000 	.word	0x403e0000
 80040fc:	40280000 	.word	0x40280000
						  ssd1306_Line(64+floor(10*cos((i)*M_PI/6)),48+floor(10*sin((i)*M_PI/6)),64+floor(12*cos((i)*M_PI/6)),48+floor(12*sin((i)*M_PI/6)),White);
 8004100:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004102:	f7fc fa0f 	bl	8000524 <__aeabi_i2d>
 8004106:	a3c6      	add	r3, pc, #792	; (adr r3, 8004420 <statemachine+0x1138>)
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f7fc fa74 	bl	80005f8 <__aeabi_dmul>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4610      	mov	r0, r2
 8004116:	4619      	mov	r1, r3
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	4bc2      	ldr	r3, [pc, #776]	; (8004428 <statemachine+0x1140>)
 800411e:	f7fc fb95 	bl	800084c <__aeabi_ddiv>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	ec43 2b17 	vmov	d7, r2, r3
 800412a:	eeb0 0a47 	vmov.f32	s0, s14
 800412e:	eef0 0a67 	vmov.f32	s1, s15
 8004132:	f013 fe91 	bl	8017e58 <cos>
 8004136:	ec51 0b10 	vmov	r0, r1, d0
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	4bbb      	ldr	r3, [pc, #748]	; (800442c <statemachine+0x1144>)
 8004140:	f7fc fa5a 	bl	80005f8 <__aeabi_dmul>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	ec43 2b17 	vmov	d7, r2, r3
 800414c:	eeb0 0a47 	vmov.f32	s0, s14
 8004150:	eef0 0a67 	vmov.f32	s1, s15
 8004154:	f013 ffc8 	bl	80180e8 <floor>
 8004158:	ec51 0b10 	vmov	r0, r1, d0
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	4bb3      	ldr	r3, [pc, #716]	; (8004430 <statemachine+0x1148>)
 8004162:	f7fc f893 	bl	800028c <__adddf3>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	f7fc fd1b 	bl	8000ba8 <__aeabi_d2uiz>
 8004172:	4603      	mov	r3, r0
 8004174:	b2dc      	uxtb	r4, r3
 8004176:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004178:	f7fc f9d4 	bl	8000524 <__aeabi_i2d>
 800417c:	a3a8      	add	r3, pc, #672	; (adr r3, 8004420 <statemachine+0x1138>)
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	f7fc fa39 	bl	80005f8 <__aeabi_dmul>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4610      	mov	r0, r2
 800418c:	4619      	mov	r1, r3
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	4ba5      	ldr	r3, [pc, #660]	; (8004428 <statemachine+0x1140>)
 8004194:	f7fc fb5a 	bl	800084c <__aeabi_ddiv>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	ec43 2b17 	vmov	d7, r2, r3
 80041a0:	eeb0 0a47 	vmov.f32	s0, s14
 80041a4:	eef0 0a67 	vmov.f32	s1, s15
 80041a8:	f013 feaa 	bl	8017f00 <sin>
 80041ac:	ec51 0b10 	vmov	r0, r1, d0
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	4b9d      	ldr	r3, [pc, #628]	; (800442c <statemachine+0x1144>)
 80041b6:	f7fc fa1f 	bl	80005f8 <__aeabi_dmul>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	ec43 2b17 	vmov	d7, r2, r3
 80041c2:	eeb0 0a47 	vmov.f32	s0, s14
 80041c6:	eef0 0a67 	vmov.f32	s1, s15
 80041ca:	f013 ff8d 	bl	80180e8 <floor>
 80041ce:	ec51 0b10 	vmov	r0, r1, d0
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	4b97      	ldr	r3, [pc, #604]	; (8004434 <statemachine+0x114c>)
 80041d8:	f7fc f858 	bl	800028c <__adddf3>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4610      	mov	r0, r2
 80041e2:	4619      	mov	r1, r3
 80041e4:	f7fc fce0 	bl	8000ba8 <__aeabi_d2uiz>
 80041e8:	4603      	mov	r3, r0
 80041ea:	b2dd      	uxtb	r5, r3
 80041ec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80041ee:	f7fc f999 	bl	8000524 <__aeabi_i2d>
 80041f2:	a38b      	add	r3, pc, #556	; (adr r3, 8004420 <statemachine+0x1138>)
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f7fc f9fe 	bl	80005f8 <__aeabi_dmul>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	4b87      	ldr	r3, [pc, #540]	; (8004428 <statemachine+0x1140>)
 800420a:	f7fc fb1f 	bl	800084c <__aeabi_ddiv>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	ec43 2b17 	vmov	d7, r2, r3
 8004216:	eeb0 0a47 	vmov.f32	s0, s14
 800421a:	eef0 0a67 	vmov.f32	s1, s15
 800421e:	f013 fe1b 	bl	8017e58 <cos>
 8004222:	ec51 0b10 	vmov	r0, r1, d0
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	4b83      	ldr	r3, [pc, #524]	; (8004438 <statemachine+0x1150>)
 800422c:	f7fc f9e4 	bl	80005f8 <__aeabi_dmul>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	ec43 2b17 	vmov	d7, r2, r3
 8004238:	eeb0 0a47 	vmov.f32	s0, s14
 800423c:	eef0 0a67 	vmov.f32	s1, s15
 8004240:	f013 ff52 	bl	80180e8 <floor>
 8004244:	ec51 0b10 	vmov	r0, r1, d0
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	4b78      	ldr	r3, [pc, #480]	; (8004430 <statemachine+0x1148>)
 800424e:	f7fc f81d 	bl	800028c <__adddf3>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4610      	mov	r0, r2
 8004258:	4619      	mov	r1, r3
 800425a:	f7fc fca5 	bl	8000ba8 <__aeabi_d2uiz>
 800425e:	4603      	mov	r3, r0
 8004260:	b2de      	uxtb	r6, r3
 8004262:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004264:	f7fc f95e 	bl	8000524 <__aeabi_i2d>
 8004268:	a36d      	add	r3, pc, #436	; (adr r3, 8004420 <statemachine+0x1138>)
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	f7fc f9c3 	bl	80005f8 <__aeabi_dmul>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4610      	mov	r0, r2
 8004278:	4619      	mov	r1, r3
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	4b6a      	ldr	r3, [pc, #424]	; (8004428 <statemachine+0x1140>)
 8004280:	f7fc fae4 	bl	800084c <__aeabi_ddiv>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	ec43 2b17 	vmov	d7, r2, r3
 800428c:	eeb0 0a47 	vmov.f32	s0, s14
 8004290:	eef0 0a67 	vmov.f32	s1, s15
 8004294:	f013 fe34 	bl	8017f00 <sin>
 8004298:	ec51 0b10 	vmov	r0, r1, d0
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	4b65      	ldr	r3, [pc, #404]	; (8004438 <statemachine+0x1150>)
 80042a2:	f7fc f9a9 	bl	80005f8 <__aeabi_dmul>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	ec43 2b17 	vmov	d7, r2, r3
 80042ae:	eeb0 0a47 	vmov.f32	s0, s14
 80042b2:	eef0 0a67 	vmov.f32	s1, s15
 80042b6:	f013 ff17 	bl	80180e8 <floor>
 80042ba:	ec51 0b10 	vmov	r0, r1, d0
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	4b5c      	ldr	r3, [pc, #368]	; (8004434 <statemachine+0x114c>)
 80042c4:	f7fb ffe2 	bl	800028c <__adddf3>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4610      	mov	r0, r2
 80042ce:	4619      	mov	r1, r3
 80042d0:	f7fc fc6a 	bl	8000ba8 <__aeabi_d2uiz>
 80042d4:	4603      	mov	r3, r0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2201      	movs	r2, #1
 80042da:	9200      	str	r2, [sp, #0]
 80042dc:	4632      	mov	r2, r6
 80042de:	4629      	mov	r1, r5
 80042e0:	4620      	mov	r0, r4
 80042e2:	f7fe fc21 	bl	8002b28 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 80042e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042e8:	3301      	adds	r3, #1
 80042ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80042ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042ee:	2b0c      	cmp	r3, #12
 80042f0:	f77f af06 	ble.w	8004100 <statemachine+0xe18>
					  }
					  if(BTN_B>=1){
 80042f4:	4b51      	ldr	r3, [pc, #324]	; (800443c <statemachine+0x1154>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	dd1e      	ble.n	800433a <statemachine+0x1052>
					  	hrstate--;
 80042fc:	4b50      	ldr	r3, [pc, #320]	; (8004440 <statemachine+0x1158>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	3b01      	subs	r3, #1
 8004302:	b2da      	uxtb	r2, r3
 8004304:	4b4e      	ldr	r3, [pc, #312]	; (8004440 <statemachine+0x1158>)
 8004306:	701a      	strb	r2, [r3, #0]
					  	BTN_B=0;
 8004308:	4b4c      	ldr	r3, [pc, #304]	; (800443c <statemachine+0x1154>)
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
					  }


					  break;
 800430e:	e014      	b.n	800433a <statemachine+0x1052>

				  }

			  			 					}
			  			 	else{ //if the GPS doesn't have a fix, print a message
			  			 						char *str = (char*)malloc(sizeof(char)*20);
 8004310:	2014      	movs	r0, #20
 8004312:	f00f f8a5 	bl	8013460 <malloc>
 8004316:	4603      	mov	r3, r0
 8004318:	643b      	str	r3, [r7, #64]	; 0x40
			  			 						ssd1306_SetCursor(32, 44);
 800431a:	212c      	movs	r1, #44	; 0x2c
 800431c:	2020      	movs	r0, #32
 800431e:	f7fe fbeb 	bl	8002af8 <ssd1306_SetCursor>
			  			 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8004322:	4a48      	ldr	r2, [pc, #288]	; (8004444 <statemachine+0x115c>)
 8004324:	2301      	movs	r3, #1
 8004326:	ca06      	ldmia	r2, {r1, r2}
 8004328:	4847      	ldr	r0, [pc, #284]	; (8004448 <statemachine+0x1160>)
 800432a:	f7fe fbbf 	bl	8002aac <ssd1306_WriteString>
			  			 						free(str);
 800432e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004330:	f00f f89e 	bl	8013470 <free>
 8004334:	e002      	b.n	800433c <statemachine+0x1054>
					  break;
 8004336:	bf00      	nop
 8004338:	e000      	b.n	800433c <statemachine+0x1054>
					  break;
 800433a:	bf00      	nop
			  			 	}
				  if(BTN_A>=1){
 800433c:	4b43      	ldr	r3, [pc, #268]	; (800444c <statemachine+0x1164>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	f340 8591 	ble.w	8004e68 <statemachine+0x1b80>
			  		state++;
 8004346:	4b42      	ldr	r3, [pc, #264]	; (8004450 <statemachine+0x1168>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	3301      	adds	r3, #1
 800434c:	b2da      	uxtb	r2, r3
 800434e:	4b40      	ldr	r3, [pc, #256]	; (8004450 <statemachine+0x1168>)
 8004350:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8004352:	4b3e      	ldr	r3, [pc, #248]	; (800444c <statemachine+0x1164>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8004358:	4b38      	ldr	r3, [pc, #224]	; (800443c <statemachine+0x1154>)
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 800435e:	f000 bd83 	b.w	8004e68 <statemachine+0x1b80>
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 8004362:	2000      	movs	r0, #0
 8004364:	f7fe fa86 	bl	8002874 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8004368:	493a      	ldr	r1, [pc, #232]	; (8004454 <statemachine+0x116c>)
 800436a:	483b      	ldr	r0, [pc, #236]	; (8004458 <statemachine+0x1170>)
 800436c:	f7fd fe62 	bl	8002034 <nmea_parse>
			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 8004370:	4b39      	ldr	r3, [pc, #228]	; (8004458 <statemachine+0x1170>)
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	2b01      	cmp	r3, #1
 8004376:	d17b      	bne.n	8004470 <statemachine+0x1188>
			 			 						char * str = (char*)malloc(sizeof(char)*20);
 8004378:	2014      	movs	r0, #20
 800437a:	f00f f871 	bl	8013460 <malloc>
 800437e:	4603      	mov	r3, r0
 8004380:	647b      	str	r3, [r7, #68]	; 0x44
			 			 						snprintf(str,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8004382:	4b35      	ldr	r3, [pc, #212]	; (8004458 <statemachine+0x1170>)
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fc f8de 	bl	8000548 <__aeabi_f2d>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	e9cd 2300 	strd	r2, r3, [sp]
 8004394:	4a31      	ldr	r2, [pc, #196]	; (800445c <statemachine+0x1174>)
 8004396:	210f      	movs	r1, #15
 8004398:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800439a:	f010 ff5b 	bl	8015254 <sniprintf>
			 			 						ssd1306_SetCursor(32, 32);
 800439e:	2120      	movs	r1, #32
 80043a0:	2020      	movs	r0, #32
 80043a2:	f7fe fba9 	bl	8002af8 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80043a6:	4a27      	ldr	r2, [pc, #156]	; (8004444 <statemachine+0x115c>)
 80043a8:	2301      	movs	r3, #1
 80043aa:	ca06      	ldmia	r2, {r1, r2}
 80043ac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80043ae:	f7fe fb7d 	bl	8002aac <ssd1306_WriteString>
			 			 						snprintf(str,20, "v=%0.2fV",vbat);
 80043b2:	4b2b      	ldr	r3, [pc, #172]	; (8004460 <statemachine+0x1178>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fc f8c6 	bl	8000548 <__aeabi_f2d>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	e9cd 2300 	strd	r2, r3, [sp]
 80043c4:	4a27      	ldr	r2, [pc, #156]	; (8004464 <statemachine+0x117c>)
 80043c6:	2114      	movs	r1, #20
 80043c8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80043ca:	f010 ff43 	bl	8015254 <sniprintf>
			 			 						ssd1306_SetCursor(32, 42);
 80043ce:	212a      	movs	r1, #42	; 0x2a
 80043d0:	2020      	movs	r0, #32
 80043d2:	f7fe fb91 	bl	8002af8 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80043d6:	4a1b      	ldr	r2, [pc, #108]	; (8004444 <statemachine+0x115c>)
 80043d8:	2301      	movs	r3, #1
 80043da:	ca06      	ldmia	r2, {r1, r2}
 80043dc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80043de:	f7fe fb65 	bl	8002aac <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 80043e2:	2132      	movs	r1, #50	; 0x32
 80043e4:	2020      	movs	r0, #32
 80043e6:	f7fe fb87 	bl	8002af8 <ssd1306_SetCursor>
			 			 						snprintf(str,15,  "T=%0.2fC",temp);
 80043ea:	4b1f      	ldr	r3, [pc, #124]	; (8004468 <statemachine+0x1180>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fc f8aa 	bl	8000548 <__aeabi_f2d>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	e9cd 2300 	strd	r2, r3, [sp]
 80043fc:	4a1b      	ldr	r2, [pc, #108]	; (800446c <statemachine+0x1184>)
 80043fe:	210f      	movs	r1, #15
 8004400:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004402:	f010 ff27 	bl	8015254 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004406:	4a0f      	ldr	r2, [pc, #60]	; (8004444 <statemachine+0x115c>)
 8004408:	2301      	movs	r3, #1
 800440a:	ca06      	ldmia	r2, {r1, r2}
 800440c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800440e:	f7fe fb4d 	bl	8002aac <ssd1306_WriteString>
			 			 						free(str);
 8004412:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004414:	f00f f82c 	bl	8013470 <free>
 8004418:	e06c      	b.n	80044f4 <statemachine+0x120c>
 800441a:	bf00      	nop
 800441c:	f3af 8000 	nop.w
 8004420:	54442d18 	.word	0x54442d18
 8004424:	400921fb 	.word	0x400921fb
 8004428:	40180000 	.word	0x40180000
 800442c:	40240000 	.word	0x40240000
 8004430:	40500000 	.word	0x40500000
 8004434:	40480000 	.word	0x40480000
 8004438:	40280000 	.word	0x40280000
 800443c:	2000070c 	.word	0x2000070c
 8004440:	20000479 	.word	0x20000479
 8004444:	20000008 	.word	0x20000008
 8004448:	08019a30 	.word	0x08019a30
 800444c:	20000708 	.word	0x20000708
 8004450:	20000478 	.word	0x20000478
 8004454:	200004c4 	.word	0x200004c4
 8004458:	200006c8 	.word	0x200006c8
 800445c:	08019b08 	.word	0x08019b08
 8004460:	20000740 	.word	0x20000740
 8004464:	08019b14 	.word	0x08019b14
 8004468:	20000738 	.word	0x20000738
 800446c:	08019b20 	.word	0x08019b20
			 			 					}
			 			 	else{ //if the GPS doesn't have a fix, print a message
			 			 						char *str = (char*)malloc(sizeof(char)*20);
 8004470:	2014      	movs	r0, #20
 8004472:	f00e fff5 	bl	8013460 <malloc>
 8004476:	4603      	mov	r3, r0
 8004478:	64bb      	str	r3, [r7, #72]	; 0x48
			 			 						ssd1306_SetCursor(32, 32);
 800447a:	2120      	movs	r1, #32
 800447c:	2020      	movs	r0, #32
 800447e:	f7fe fb3b 	bl	8002af8 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("INFO", Font_6x8, White);
 8004482:	4a9e      	ldr	r2, [pc, #632]	; (80046fc <statemachine+0x1414>)
 8004484:	2301      	movs	r3, #1
 8004486:	ca06      	ldmia	r2, {r1, r2}
 8004488:	489d      	ldr	r0, [pc, #628]	; (8004700 <statemachine+0x1418>)
 800448a:	f7fe fb0f 	bl	8002aac <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 41);
 800448e:	2129      	movs	r1, #41	; 0x29
 8004490:	2020      	movs	r0, #32
 8004492:	f7fe fb31 	bl	8002af8 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "vbat=%0.2fV",vbat);
 8004496:	4b9b      	ldr	r3, [pc, #620]	; (8004704 <statemachine+0x141c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7fc f854 	bl	8000548 <__aeabi_f2d>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	e9cd 2300 	strd	r2, r3, [sp]
 80044a8:	4a97      	ldr	r2, [pc, #604]	; (8004708 <statemachine+0x1420>)
 80044aa:	210f      	movs	r1, #15
 80044ac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80044ae:	f010 fed1 	bl	8015254 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80044b2:	4a92      	ldr	r2, [pc, #584]	; (80046fc <statemachine+0x1414>)
 80044b4:	2301      	movs	r3, #1
 80044b6:	ca06      	ldmia	r2, {r1, r2}
 80044b8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80044ba:	f7fe faf7 	bl	8002aac <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 80044be:	2132      	movs	r1, #50	; 0x32
 80044c0:	2020      	movs	r0, #32
 80044c2:	f7fe fb19 	bl	8002af8 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "T=%0.2fC",temp);
 80044c6:	4b91      	ldr	r3, [pc, #580]	; (800470c <statemachine+0x1424>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fc f83c 	bl	8000548 <__aeabi_f2d>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	e9cd 2300 	strd	r2, r3, [sp]
 80044d8:	4a8d      	ldr	r2, [pc, #564]	; (8004710 <statemachine+0x1428>)
 80044da:	210f      	movs	r1, #15
 80044dc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80044de:	f010 feb9 	bl	8015254 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80044e2:	4a86      	ldr	r2, [pc, #536]	; (80046fc <statemachine+0x1414>)
 80044e4:	2301      	movs	r3, #1
 80044e6:	ca06      	ldmia	r2, {r1, r2}
 80044e8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80044ea:	f7fe fadf 	bl	8002aac <ssd1306_WriteString>
			 			 						free(str);
 80044ee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80044f0:	f00e ffbe 	bl	8013470 <free>
			 			 					}
			  if(BTN_A>=1){
 80044f4:	4b87      	ldr	r3, [pc, #540]	; (8004714 <statemachine+0x142c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f340 84b7 	ble.w	8004e6c <statemachine+0x1b84>
			  		state++;
 80044fe:	4b86      	ldr	r3, [pc, #536]	; (8004718 <statemachine+0x1430>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	3301      	adds	r3, #1
 8004504:	b2da      	uxtb	r2, r3
 8004506:	4b84      	ldr	r3, [pc, #528]	; (8004718 <statemachine+0x1430>)
 8004508:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 800450a:	4b82      	ldr	r3, [pc, #520]	; (8004714 <statemachine+0x142c>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8004510:	4b82      	ldr	r3, [pc, #520]	; (800471c <statemachine+0x1434>)
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 8004516:	f000 bca9 	b.w	8004e6c <statemachine+0x1b84>

		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 800451a:	2000      	movs	r0, #0
 800451c:	f7fe f9aa 	bl	8002874 <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 8004520:	2120      	movs	r1, #32
 8004522:	2020      	movs	r0, #32
 8004524:	f7fe fae8 	bl	8002af8 <ssd1306_SetCursor>
			  char *str = (char*)malloc(sizeof(char)*20);
 8004528:	2014      	movs	r0, #20
 800452a:	f00e ff99 	bl	8013460 <malloc>
 800452e:	4603      	mov	r3, r0
 8004530:	64fb      	str	r3, [r7, #76]	; 0x4c
			  ssd1306_WriteString("chrono", Font_6x8, White);
 8004532:	4a72      	ldr	r2, [pc, #456]	; (80046fc <statemachine+0x1414>)
 8004534:	2301      	movs	r3, #1
 8004536:	ca06      	ldmia	r2, {r1, r2}
 8004538:	4879      	ldr	r0, [pc, #484]	; (8004720 <statemachine+0x1438>)
 800453a:	f7fe fab7 	bl	8002aac <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 40);
 800453e:	2128      	movs	r1, #40	; 0x28
 8004540:	2020      	movs	r0, #32
 8004542:	f7fe fad9 	bl	8002af8 <ssd1306_SetCursor>

			  switch(chronostate){
 8004546:	4b77      	ldr	r3, [pc, #476]	; (8004724 <statemachine+0x143c>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d038      	beq.n	80045c0 <statemachine+0x12d8>
 800454e:	2b02      	cmp	r3, #2
 8004550:	dc4f      	bgt.n	80045f2 <statemachine+0x130a>
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <statemachine+0x1274>
 8004556:	2b01      	cmp	r3, #1
 8004558:	d01d      	beq.n	8004596 <statemachine+0x12ae>
 800455a:	e04a      	b.n	80045f2 <statemachine+0x130a>
			  case STATE_RESET:
				  min=0;
 800455c:	4b72      	ldr	r3, [pc, #456]	; (8004728 <statemachine+0x1440>)
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8004564:	4b71      	ldr	r3, [pc, #452]	; (800472c <statemachine+0x1444>)
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
				  calctime=0;
 800456c:	4b70      	ldr	r3, [pc, #448]	; (8004730 <statemachine+0x1448>)
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
				  	 if(BTN_B>=1){
 8004572:	4b6a      	ldr	r3, [pc, #424]	; (800471c <statemachine+0x1434>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	dd36      	ble.n	80045e8 <statemachine+0x1300>
				  		chronostate++;
 800457a:	4b6a      	ldr	r3, [pc, #424]	; (8004724 <statemachine+0x143c>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	3301      	adds	r3, #1
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4b68      	ldr	r3, [pc, #416]	; (8004724 <statemachine+0x143c>)
 8004584:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8004586:	4b65      	ldr	r3, [pc, #404]	; (800471c <statemachine+0x1434>)
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 800458c:	4b69      	ldr	r3, [pc, #420]	; (8004734 <statemachine+0x144c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a69      	ldr	r2, [pc, #420]	; (8004738 <statemachine+0x1450>)
 8004592:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8004594:	e028      	b.n	80045e8 <statemachine+0x1300>
			  case STATE_RUN:
				  calctime=uwTick-starttime;
 8004596:	4b67      	ldr	r3, [pc, #412]	; (8004734 <statemachine+0x144c>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4b67      	ldr	r3, [pc, #412]	; (8004738 <statemachine+0x1450>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	4a63      	ldr	r2, [pc, #396]	; (8004730 <statemachine+0x1448>)
 80045a2:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 80045a4:	4b5d      	ldr	r3, [pc, #372]	; (800471c <statemachine+0x1434>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	dd1f      	ble.n	80045ec <statemachine+0x1304>
				  		chronostate++;
 80045ac:	4b5d      	ldr	r3, [pc, #372]	; (8004724 <statemachine+0x143c>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	3301      	adds	r3, #1
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	4b5b      	ldr	r3, [pc, #364]	; (8004724 <statemachine+0x143c>)
 80045b6:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 80045b8:	4b58      	ldr	r3, [pc, #352]	; (800471c <statemachine+0x1434>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
			  }


				  break;
 80045be:	e015      	b.n	80045ec <statemachine+0x1304>
			  case STATE_PAUSE:
				  if(BTN_B>=1){
 80045c0:	4b56      	ldr	r3, [pc, #344]	; (800471c <statemachine+0x1434>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	dd13      	ble.n	80045f0 <statemachine+0x1308>
				  			chronostate--;
 80045c8:	4b56      	ldr	r3, [pc, #344]	; (8004724 <statemachine+0x143c>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	4b54      	ldr	r3, [pc, #336]	; (8004724 <statemachine+0x143c>)
 80045d2:	701a      	strb	r2, [r3, #0]
				  			chronostate--;
 80045d4:	4b53      	ldr	r3, [pc, #332]	; (8004724 <statemachine+0x143c>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	3b01      	subs	r3, #1
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	4b51      	ldr	r3, [pc, #324]	; (8004724 <statemachine+0x143c>)
 80045de:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 80045e0:	4b4e      	ldr	r3, [pc, #312]	; (800471c <statemachine+0x1434>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]
			 }

				  break;
 80045e6:	e003      	b.n	80045f0 <statemachine+0x1308>
				  break;
 80045e8:	bf00      	nop
 80045ea:	e002      	b.n	80045f2 <statemachine+0x130a>
				  break;
 80045ec:	bf00      	nop
 80045ee:	e000      	b.n	80045f2 <statemachine+0x130a>
				  break;
 80045f0:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 80045f2:	4b4f      	ldr	r3, [pc, #316]	; (8004730 <statemachine+0x1448>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fe:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800473c <statemachine+0x1454>
 8004602:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004606:	ee16 0a90 	vmov	r0, s13
 800460a:	f7fb ff9d 	bl	8000548 <__aeabi_f2d>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	ec43 2b10 	vmov	d0, r2, r3
 8004616:	f013 fd67 	bl	80180e8 <floor>
 800461a:	ec53 2b10 	vmov	r2, r3, d0
 800461e:	4610      	mov	r0, r2
 8004620:	4619      	mov	r1, r3
 8004622:	f7fc fae1 	bl	8000be8 <__aeabi_d2f>
 8004626:	4603      	mov	r3, r0
 8004628:	4a3f      	ldr	r2, [pc, #252]	; (8004728 <statemachine+0x1440>)
 800462a:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 800462c:	4b40      	ldr	r3, [pc, #256]	; (8004730 <statemachine+0x1448>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	ee07 3a90 	vmov	s15, r3
 8004634:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004638:	4b3b      	ldr	r3, [pc, #236]	; (8004728 <statemachine+0x1440>)
 800463a:	edd3 7a00 	vldr	s15, [r3]
 800463e:	eddf 6a3f 	vldr	s13, [pc, #252]	; 800473c <statemachine+0x1454>
 8004642:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004646:	ee37 7a67 	vsub.f32	s14, s14, s15
 800464a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004740 <statemachine+0x1458>
 800464e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004652:	4b36      	ldr	r3, [pc, #216]	; (800472c <statemachine+0x1444>)
 8004654:	edc3 7a00 	vstr	s15, [r3]
			  snprintf(str,15, "%0.0fmin",min);
 8004658:	4b33      	ldr	r3, [pc, #204]	; (8004728 <statemachine+0x1440>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f7fb ff73 	bl	8000548 <__aeabi_f2d>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	e9cd 2300 	strd	r2, r3, [sp]
 800466a:	4a36      	ldr	r2, [pc, #216]	; (8004744 <statemachine+0x145c>)
 800466c:	210f      	movs	r1, #15
 800466e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004670:	f010 fdf0 	bl	8015254 <sniprintf>
			  ssd1306_WriteString(str, Font_7x10, White);
 8004674:	4a34      	ldr	r2, [pc, #208]	; (8004748 <statemachine+0x1460>)
 8004676:	2301      	movs	r3, #1
 8004678:	ca06      	ldmia	r2, {r1, r2}
 800467a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800467c:	f7fe fa16 	bl	8002aac <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8004680:	2132      	movs	r1, #50	; 0x32
 8004682:	2020      	movs	r0, #32
 8004684:	f7fe fa38 	bl	8002af8 <ssd1306_SetCursor>
			  snprintf(str,15, "%0.3fsec",seconde);
 8004688:	4b28      	ldr	r3, [pc, #160]	; (800472c <statemachine+0x1444>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f7fb ff5b 	bl	8000548 <__aeabi_f2d>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	e9cd 2300 	strd	r2, r3, [sp]
 800469a:	4a2c      	ldr	r2, [pc, #176]	; (800474c <statemachine+0x1464>)
 800469c:	210f      	movs	r1, #15
 800469e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80046a0:	f010 fdd8 	bl	8015254 <sniprintf>
			  ssd1306_WriteString(str, Font_6x8, White);
 80046a4:	4a15      	ldr	r2, [pc, #84]	; (80046fc <statemachine+0x1414>)
 80046a6:	2301      	movs	r3, #1
 80046a8:	ca06      	ldmia	r2, {r1, r2}
 80046aa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80046ac:	f7fe f9fe 	bl	8002aac <ssd1306_WriteString>
			  free(str);
 80046b0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80046b2:	f00e fedd 	bl	8013470 <free>


			  if(BTN_A>=1){
 80046b6:	4b17      	ldr	r3, [pc, #92]	; (8004714 <statemachine+0x142c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f340 83d8 	ble.w	8004e70 <statemachine+0x1b88>
			 	state++;
 80046c0:	4b15      	ldr	r3, [pc, #84]	; (8004718 <statemachine+0x1430>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	3301      	adds	r3, #1
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	4b13      	ldr	r3, [pc, #76]	; (8004718 <statemachine+0x1430>)
 80046ca:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 80046cc:	4b11      	ldr	r3, [pc, #68]	; (8004714 <statemachine+0x142c>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 80046d2:	4b12      	ldr	r3, [pc, #72]	; (800471c <statemachine+0x1434>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]


	}
			  break;
 80046d8:	e3ca      	b.n	8004e70 <statemachine+0x1b88>

			  case STATE_BALISE:
				  ssd1306_Fill(Black);
 80046da:	2000      	movs	r0, #0
 80046dc:	f7fe f8ca 	bl	8002874 <ssd1306_Fill>
				  switch(balisestate){
 80046e0:	4b1b      	ldr	r3, [pc, #108]	; (8004750 <statemachine+0x1468>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	f000 8185 	beq.w	80049f4 <statemachine+0x170c>
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	f300 83c2 	bgt.w	8004e74 <statemachine+0x1b8c>
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d02f      	beq.n	8004754 <statemachine+0x146c>
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d063      	beq.n	80047c0 <statemachine+0x14d8>


				  }


				  break;
 80046f8:	e3bc      	b.n	8004e74 <statemachine+0x1b8c>
 80046fa:	bf00      	nop
 80046fc:	20000008 	.word	0x20000008
 8004700:	08019b2c 	.word	0x08019b2c
 8004704:	20000740 	.word	0x20000740
 8004708:	08019b34 	.word	0x08019b34
 800470c:	20000738 	.word	0x20000738
 8004710:	08019b20 	.word	0x08019b20
 8004714:	20000708 	.word	0x20000708
 8004718:	20000478 	.word	0x20000478
 800471c:	2000070c 	.word	0x2000070c
 8004720:	08019b40 	.word	0x08019b40
 8004724:	2000047c 	.word	0x2000047c
 8004728:	200009f8 	.word	0x200009f8
 800472c:	200009f4 	.word	0x200009f4
 8004730:	20000a00 	.word	0x20000a00
 8004734:	200010bc 	.word	0x200010bc
 8004738:	200009fc 	.word	0x200009fc
 800473c:	476a6000 	.word	0x476a6000
 8004740:	447a0000 	.word	0x447a0000
 8004744:	08019b48 	.word	0x08019b48
 8004748:	20000010 	.word	0x20000010
 800474c:	08019b54 	.word	0x08019b54
 8004750:	2000047e 	.word	0x2000047e
					  ssd1306_SetCursor(32,32);
 8004754:	2120      	movs	r1, #32
 8004756:	2020      	movs	r0, #32
 8004758:	f7fe f9ce 	bl	8002af8 <ssd1306_SetCursor>
					  ssd1306_WriteString("balise",Font_6x8,White);
 800475c:	4a8c      	ldr	r2, [pc, #560]	; (8004990 <statemachine+0x16a8>)
 800475e:	2301      	movs	r3, #1
 8004760:	ca06      	ldmia	r2, {r1, r2}
 8004762:	488c      	ldr	r0, [pc, #560]	; (8004994 <statemachine+0x16ac>)
 8004764:	f7fe f9a2 	bl	8002aac <ssd1306_WriteString>
					  ssd1306_SetCursor(32,40);
 8004768:	2128      	movs	r1, #40	; 0x28
 800476a:	2020      	movs	r0, #32
 800476c:	f7fe f9c4 	bl	8002af8 <ssd1306_SetCursor>
					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8004770:	4a87      	ldr	r2, [pc, #540]	; (8004990 <statemachine+0x16a8>)
 8004772:	2301      	movs	r3, #1
 8004774:	ca06      	ldmia	r2, {r1, r2}
 8004776:	4888      	ldr	r0, [pc, #544]	; (8004998 <statemachine+0x16b0>)
 8004778:	f7fe f998 	bl	8002aac <ssd1306_WriteString>
					  if(BTN_B>=1){
 800477c:	4b87      	ldr	r3, [pc, #540]	; (800499c <statemachine+0x16b4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	dd0b      	ble.n	800479c <statemachine+0x14b4>
						  balisestate++;
 8004784:	4b86      	ldr	r3, [pc, #536]	; (80049a0 <statemachine+0x16b8>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	3301      	adds	r3, #1
 800478a:	b2da      	uxtb	r2, r3
 800478c:	4b84      	ldr	r3, [pc, #528]	; (80049a0 <statemachine+0x16b8>)
 800478e:	701a      	strb	r2, [r3, #0]
						  BTN_B=0;
 8004790:	4b82      	ldr	r3, [pc, #520]	; (800499c <statemachine+0x16b4>)
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]
						  BTN_A=0;
 8004796:	4b83      	ldr	r3, [pc, #524]	; (80049a4 <statemachine+0x16bc>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]
					  if(BTN_A>=1){
 800479c:	4b81      	ldr	r3, [pc, #516]	; (80049a4 <statemachine+0x16bc>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f340 8161 	ble.w	8004a68 <statemachine+0x1780>
					  				  			 	state++;
 80047a6:	4b80      	ldr	r3, [pc, #512]	; (80049a8 <statemachine+0x16c0>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	3301      	adds	r3, #1
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	4b7e      	ldr	r3, [pc, #504]	; (80049a8 <statemachine+0x16c0>)
 80047b0:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 80047b2:	4b7c      	ldr	r3, [pc, #496]	; (80049a4 <statemachine+0x16bc>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 80047b8:	4b78      	ldr	r3, [pc, #480]	; (800499c <statemachine+0x16b4>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
					  break;
 80047be:	e153      	b.n	8004a68 <statemachine+0x1780>
					  oldlat=myData.latitude;
 80047c0:	4b7a      	ldr	r3, [pc, #488]	; (80049ac <statemachine+0x16c4>)
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	497a      	ldr	r1, [pc, #488]	; (80049b0 <statemachine+0x16c8>)
 80047c8:	e9c1 2300 	strd	r2, r3, [r1]
					  oldlong=myData.longitude;
 80047cc:	4b77      	ldr	r3, [pc, #476]	; (80049ac <statemachine+0x16c4>)
 80047ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80047d2:	4978      	ldr	r1, [pc, #480]	; (80049b4 <statemachine+0x16cc>)
 80047d4:	e9c1 2300 	strd	r2, r3, [r1]
					  nmea_parse(&myData, DataBuffer);
 80047d8:	4977      	ldr	r1, [pc, #476]	; (80049b8 <statemachine+0x16d0>)
 80047da:	4874      	ldr	r0, [pc, #464]	; (80049ac <statemachine+0x16c4>)
 80047dc:	f7fd fc2a 	bl	8002034 <nmea_parse>
					  distanceparcouru=distanceparcouru+distancecalc(oldlat, myData.latitude, oldlong, myData.longitude);
 80047e0:	4b73      	ldr	r3, [pc, #460]	; (80049b0 <statemachine+0x16c8>)
 80047e2:	ed93 7b00 	vldr	d7, [r3]
 80047e6:	4b71      	ldr	r3, [pc, #452]	; (80049ac <statemachine+0x16c4>)
 80047e8:	ed93 6b00 	vldr	d6, [r3]
 80047ec:	4b71      	ldr	r3, [pc, #452]	; (80049b4 <statemachine+0x16cc>)
 80047ee:	ed93 5b00 	vldr	d5, [r3]
 80047f2:	4b6e      	ldr	r3, [pc, #440]	; (80049ac <statemachine+0x16c4>)
 80047f4:	ed93 4b04 	vldr	d4, [r3, #16]
 80047f8:	eeb0 3a44 	vmov.f32	s6, s8
 80047fc:	eef0 3a64 	vmov.f32	s7, s9
 8004800:	eeb0 2a45 	vmov.f32	s4, s10
 8004804:	eef0 2a65 	vmov.f32	s5, s11
 8004808:	eeb0 1a46 	vmov.f32	s2, s12
 800480c:	eef0 1a66 	vmov.f32	s3, s13
 8004810:	eeb0 0a47 	vmov.f32	s0, s14
 8004814:	eef0 0a67 	vmov.f32	s1, s15
 8004818:	f7fd fcbe 	bl	8002198 <distancecalc>
 800481c:	ec51 0b10 	vmov	r0, r1, d0
 8004820:	4b66      	ldr	r3, [pc, #408]	; (80049bc <statemachine+0x16d4>)
 8004822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004826:	f7fb fd31 	bl	800028c <__adddf3>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4963      	ldr	r1, [pc, #396]	; (80049bc <statemachine+0x16d4>)
 8004830:	e9c1 2300 	strd	r2, r3, [r1]
					  if(pagenumber+1<MAX_WRITE_PAGE){
 8004834:	4b62      	ldr	r3, [pc, #392]	; (80049c0 <statemachine+0x16d8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f246 32fd 	movw	r2, #25597	; 0x63fd
 800483c:	4293      	cmp	r3, r2
 800483e:	f300 80a3 	bgt.w	8004988 <statemachine+0x16a0>
					  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004842:	4b60      	ldr	r3, [pc, #384]	; (80049c4 <statemachine+0x16dc>)
 8004844:	edd3 7a00 	vldr	s15, [r3]
 8004848:	4b5f      	ldr	r3, [pc, #380]	; (80049c8 <statemachine+0x16e0>)
 800484a:	ed93 7a00 	vldr	s14, [r3]
 800484e:	4b57      	ldr	r3, [pc, #348]	; (80049ac <statemachine+0x16c4>)
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	4a56      	ldr	r2, [pc, #344]	; (80049ac <statemachine+0x16c4>)
 8004854:	edd2 6a08 	vldr	s13, [r2, #32]
 8004858:	eeb0 1a66 	vmov.f32	s2, s13
 800485c:	461a      	mov	r2, r3
 800485e:	4953      	ldr	r1, [pc, #332]	; (80049ac <statemachine+0x16c4>)
 8004860:	eef0 0a47 	vmov.f32	s1, s14
 8004864:	eeb0 0a67 	vmov.f32	s0, s15
 8004868:	4858      	ldr	r0, [pc, #352]	; (80049cc <statemachine+0x16e4>)
 800486a:	f7fd fdc1 	bl	80023f0 <csvframe>
 800486e:	4603      	mov	r3, r0
 8004870:	4a57      	ldr	r2, [pc, #348]	; (80049d0 <statemachine+0x16e8>)
 8004872:	6013      	str	r3, [r2, #0]
					  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8004874:	4b56      	ldr	r3, [pc, #344]	; (80049d0 <statemachine+0x16e8>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4619      	mov	r1, r3
 800487a:	4854      	ldr	r0, [pc, #336]	; (80049cc <statemachine+0x16e4>)
 800487c:	f7fd feca 	bl	8002614 <writebuffertoflash>
					  if(doubledonnee==0){
 8004880:	4b54      	ldr	r3, [pc, #336]	; (80049d4 <statemachine+0x16ec>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d111      	bne.n	80048ac <statemachine+0x15c4>
						  ssd1306_SetCursor(32,32);
 8004888:	2120      	movs	r1, #32
 800488a:	2020      	movs	r0, #32
 800488c:	f7fe f934 	bl	8002af8 <ssd1306_SetCursor>
						  snprintf((uint8_t *)bufferscreen,50,"p=%d",pagenumber);
 8004890:	4b4b      	ldr	r3, [pc, #300]	; (80049c0 <statemachine+0x16d8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a50      	ldr	r2, [pc, #320]	; (80049d8 <statemachine+0x16f0>)
 8004896:	2132      	movs	r1, #50	; 0x32
 8004898:	4850      	ldr	r0, [pc, #320]	; (80049dc <statemachine+0x16f4>)
 800489a:	f010 fcdb 	bl	8015254 <sniprintf>
						  ssd1306_WriteString((uint8_t*)bufferscreen,Font_7x10,White);
 800489e:	4a50      	ldr	r2, [pc, #320]	; (80049e0 <statemachine+0x16f8>)
 80048a0:	2301      	movs	r3, #1
 80048a2:	ca06      	ldmia	r2, {r1, r2}
 80048a4:	484d      	ldr	r0, [pc, #308]	; (80049dc <statemachine+0x16f4>)
 80048a6:	f7fe f901 	bl	8002aac <ssd1306_WriteString>
 80048aa:	e013      	b.n	80048d4 <statemachine+0x15ec>
						  ssd1306_SetCursor(32,32);
 80048ac:	2120      	movs	r1, #32
 80048ae:	2020      	movs	r0, #32
 80048b0:	f7fe f922 	bl	8002af8 <ssd1306_SetCursor>
						  snprintf((uint8_t *)bufferscreen,50,"d=%0.1lfKm",distanceparcouru);
 80048b4:	4b41      	ldr	r3, [pc, #260]	; (80049bc <statemachine+0x16d4>)
 80048b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ba:	e9cd 2300 	strd	r2, r3, [sp]
 80048be:	4a49      	ldr	r2, [pc, #292]	; (80049e4 <statemachine+0x16fc>)
 80048c0:	2132      	movs	r1, #50	; 0x32
 80048c2:	4846      	ldr	r0, [pc, #280]	; (80049dc <statemachine+0x16f4>)
 80048c4:	f010 fcc6 	bl	8015254 <sniprintf>
						  ssd1306_WriteString((uint8_t*)bufferscreen,Font_7x10,White);
 80048c8:	4a45      	ldr	r2, [pc, #276]	; (80049e0 <statemachine+0x16f8>)
 80048ca:	2301      	movs	r3, #1
 80048cc:	ca06      	ldmia	r2, {r1, r2}
 80048ce:	4843      	ldr	r0, [pc, #268]	; (80049dc <statemachine+0x16f4>)
 80048d0:	f7fe f8ec 	bl	8002aac <ssd1306_WriteString>
					  ssd1306_SetCursor(32,42);
 80048d4:	212a      	movs	r1, #42	; 0x2a
 80048d6:	2020      	movs	r0, #32
 80048d8:	f7fe f90e 	bl	8002af8 <ssd1306_SetCursor>
					  snprintf((uint8_t *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 80048dc:	4b33      	ldr	r3, [pc, #204]	; (80049ac <statemachine+0x16c4>)
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	4a41      	ldr	r2, [pc, #260]	; (80049e8 <statemachine+0x1700>)
 80048e2:	2132      	movs	r1, #50	; 0x32
 80048e4:	483d      	ldr	r0, [pc, #244]	; (80049dc <statemachine+0x16f4>)
 80048e6:	f010 fcb5 	bl	8015254 <sniprintf>
					  ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 80048ea:	4a29      	ldr	r2, [pc, #164]	; (8004990 <statemachine+0x16a8>)
 80048ec:	2301      	movs	r3, #1
 80048ee:	ca06      	ldmia	r2, {r1, r2}
 80048f0:	483a      	ldr	r0, [pc, #232]	; (80049dc <statemachine+0x16f4>)
 80048f2:	f7fe f8db 	bl	8002aac <ssd1306_WriteString>
					  batterygauge(vbat,34, 50,1);
 80048f6:	4b34      	ldr	r3, [pc, #208]	; (80049c8 <statemachine+0x16e0>)
 80048f8:	edd3 7a00 	vldr	s15, [r3]
 80048fc:	2201      	movs	r2, #1
 80048fe:	2132      	movs	r1, #50	; 0x32
 8004900:	2022      	movs	r0, #34	; 0x22
 8004902:	eeb0 0a67 	vmov.f32	s0, s15
 8004906:	f7fe fb13 	bl	8002f30 <batterygauge>
					  ssd1306_SetCursor(60,50);
 800490a:	2132      	movs	r1, #50	; 0x32
 800490c:	203c      	movs	r0, #60	; 0x3c
 800490e:	f7fe f8f3 	bl	8002af8 <ssd1306_SetCursor>
					  snprintf((uint8_t *)bufferscreen,50, "%0.2fV",vbat);
 8004912:	4b2d      	ldr	r3, [pc, #180]	; (80049c8 <statemachine+0x16e0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fb fe16 	bl	8000548 <__aeabi_f2d>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	e9cd 2300 	strd	r2, r3, [sp]
 8004924:	4a31      	ldr	r2, [pc, #196]	; (80049ec <statemachine+0x1704>)
 8004926:	2132      	movs	r1, #50	; 0x32
 8004928:	482c      	ldr	r0, [pc, #176]	; (80049dc <statemachine+0x16f4>)
 800492a:	f010 fc93 	bl	8015254 <sniprintf>
					  ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 800492e:	4a18      	ldr	r2, [pc, #96]	; (8004990 <statemachine+0x16a8>)
 8004930:	2301      	movs	r3, #1
 8004932:	ca06      	ldmia	r2, {r1, r2}
 8004934:	4829      	ldr	r0, [pc, #164]	; (80049dc <statemachine+0x16f4>)
 8004936:	f7fe f8b9 	bl	8002aac <ssd1306_WriteString>
					  if(cptdoubledonnee==3){
 800493a:	4b2d      	ldr	r3, [pc, #180]	; (80049f0 <statemachine+0x1708>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b03      	cmp	r3, #3
 8004940:	d108      	bne.n	8004954 <statemachine+0x166c>
						  doubledonnee=1-doubledonnee;
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <statemachine+0x16ec>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f1c3 0301 	rsb	r3, r3, #1
 800494a:	4a22      	ldr	r2, [pc, #136]	; (80049d4 <statemachine+0x16ec>)
 800494c:	6013      	str	r3, [r2, #0]
						  cptdoubledonnee=0;
 800494e:	4b28      	ldr	r3, [pc, #160]	; (80049f0 <statemachine+0x1708>)
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
					  cptdoubledonnee+=1;
 8004954:	4b26      	ldr	r3, [pc, #152]	; (80049f0 <statemachine+0x1708>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3301      	adds	r3, #1
 800495a:	4a25      	ldr	r2, [pc, #148]	; (80049f0 <statemachine+0x1708>)
 800495c:	6013      	str	r3, [r2, #0]
					  HAL_Delay(1000);
 800495e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004962:	f000 febf 	bl	80056e4 <HAL_Delay>
					  if(BTN_B>=1){
 8004966:	4b0d      	ldr	r3, [pc, #52]	; (800499c <statemachine+0x16b4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	dd7e      	ble.n	8004a6c <statemachine+0x1784>
					  						  balisestate--;
 800496e:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <statemachine+0x16b8>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	3b01      	subs	r3, #1
 8004974:	b2da      	uxtb	r2, r3
 8004976:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <statemachine+0x16b8>)
 8004978:	701a      	strb	r2, [r3, #0]
					  						  BTN_B=0;
 800497a:	4b08      	ldr	r3, [pc, #32]	; (800499c <statemachine+0x16b4>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]
					  						  BTN_A=0;
 8004980:	4b08      	ldr	r3, [pc, #32]	; (80049a4 <statemachine+0x16bc>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
					  break;
 8004986:	e071      	b.n	8004a6c <statemachine+0x1784>
					 						  balisestate=2;
 8004988:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <statemachine+0x16b8>)
 800498a:	2202      	movs	r2, #2
 800498c:	701a      	strb	r2, [r3, #0]
					  break;
 800498e:	e06d      	b.n	8004a6c <statemachine+0x1784>
 8004990:	20000008 	.word	0x20000008
 8004994:	08019b60 	.word	0x08019b60
 8004998:	08019b68 	.word	0x08019b68
 800499c:	2000070c 	.word	0x2000070c
 80049a0:	2000047e 	.word	0x2000047e
 80049a4:	20000708 	.word	0x20000708
 80049a8:	20000478 	.word	0x20000478
 80049ac:	200006c8 	.word	0x200006c8
 80049b0:	20000a28 	.word	0x20000a28
 80049b4:	20000a30 	.word	0x20000a30
 80049b8:	200004c4 	.word	0x200004c4
 80049bc:	20000a20 	.word	0x20000a20
 80049c0:	2000095c 	.word	0x2000095c
 80049c4:	20000738 	.word	0x20000738
 80049c8:	20000740 	.word	0x20000740
 80049cc:	20000758 	.word	0x20000758
 80049d0:	20000a04 	.word	0x20000a04
 80049d4:	20000a18 	.word	0x20000a18
 80049d8:	08019b74 	.word	0x08019b74
 80049dc:	2000097c 	.word	0x2000097c
 80049e0:	20000010 	.word	0x20000010
 80049e4:	08019b7c 	.word	0x08019b7c
 80049e8:	08019b88 	.word	0x08019b88
 80049ec:	08019b90 	.word	0x08019b90
 80049f0:	20000a1c 	.word	0x20000a1c
					  ssd1306_SetCursor(32,32);
 80049f4:	2120      	movs	r1, #32
 80049f6:	2020      	movs	r0, #32
 80049f8:	f7fe f87e 	bl	8002af8 <ssd1306_SetCursor>
					  ssd1306_WriteString("fin de",Font_6x8,White);
 80049fc:	4a97      	ldr	r2, [pc, #604]	; (8004c5c <statemachine+0x1974>)
 80049fe:	2301      	movs	r3, #1
 8004a00:	ca06      	ldmia	r2, {r1, r2}
 8004a02:	4897      	ldr	r0, [pc, #604]	; (8004c60 <statemachine+0x1978>)
 8004a04:	f7fe f852 	bl	8002aac <ssd1306_WriteString>
					  ssd1306_SetCursor(32,40);
 8004a08:	2128      	movs	r1, #40	; 0x28
 8004a0a:	2020      	movs	r0, #32
 8004a0c:	f7fe f874 	bl	8002af8 <ssd1306_SetCursor>
					  ssd1306_WriteString("memoire",Font_6x8,White);
 8004a10:	4a92      	ldr	r2, [pc, #584]	; (8004c5c <statemachine+0x1974>)
 8004a12:	2301      	movs	r3, #1
 8004a14:	ca06      	ldmia	r2, {r1, r2}
 8004a16:	4893      	ldr	r0, [pc, #588]	; (8004c64 <statemachine+0x197c>)
 8004a18:	f7fe f848 	bl	8002aac <ssd1306_WriteString>
					  ssd1306_SetCursor(32,48);
 8004a1c:	2130      	movs	r1, #48	; 0x30
 8004a1e:	2020      	movs	r0, #32
 8004a20:	f7fe f86a 	bl	8002af8 <ssd1306_SetCursor>
					  snprintf((uint8_t *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 8004a24:	4b90      	ldr	r3, [pc, #576]	; (8004c68 <statemachine+0x1980>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	4b90      	ldr	r3, [pc, #576]	; (8004c6c <statemachine+0x1984>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	4a8f      	ldr	r2, [pc, #572]	; (8004c70 <statemachine+0x1988>)
 8004a32:	2132      	movs	r1, #50	; 0x32
 8004a34:	488f      	ldr	r0, [pc, #572]	; (8004c74 <statemachine+0x198c>)
 8004a36:	f010 fc0d 	bl	8015254 <sniprintf>
					  ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 8004a3a:	4a88      	ldr	r2, [pc, #544]	; (8004c5c <statemachine+0x1974>)
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	ca06      	ldmia	r2, {r1, r2}
 8004a40:	488c      	ldr	r0, [pc, #560]	; (8004c74 <statemachine+0x198c>)
 8004a42:	f7fe f833 	bl	8002aac <ssd1306_WriteString>
					  if(BTN_A>=1){
 8004a46:	4b8c      	ldr	r3, [pc, #560]	; (8004c78 <statemachine+0x1990>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	dd10      	ble.n	8004a70 <statemachine+0x1788>
					  				  			 	state++;
 8004a4e:	4b8b      	ldr	r3, [pc, #556]	; (8004c7c <statemachine+0x1994>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	3301      	adds	r3, #1
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	4b89      	ldr	r3, [pc, #548]	; (8004c7c <statemachine+0x1994>)
 8004a58:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 8004a5a:	4b87      	ldr	r3, [pc, #540]	; (8004c78 <statemachine+0x1990>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 8004a60:	4b87      	ldr	r3, [pc, #540]	; (8004c80 <statemachine+0x1998>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
					  break;
 8004a66:	e003      	b.n	8004a70 <statemachine+0x1788>
					  break;
 8004a68:	bf00      	nop
 8004a6a:	e203      	b.n	8004e74 <statemachine+0x1b8c>
					  break;
 8004a6c:	bf00      	nop
 8004a6e:	e201      	b.n	8004e74 <statemachine+0x1b8c>
					  break;
 8004a70:	bf00      	nop
				  break;
 8004a72:	e1ff      	b.n	8004e74 <statemachine+0x1b8c>


			  case STATE_USB:
				  ssd1306_Fill(Black);
 8004a74:	2000      	movs	r0, #0
 8004a76:	f7fd fefd 	bl	8002874 <ssd1306_Fill>
				  ssd1306_SetCursor(32,32);
 8004a7a:	2120      	movs	r1, #32
 8004a7c:	2020      	movs	r0, #32
 8004a7e:	f7fe f83b 	bl	8002af8 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8004a82:	4a76      	ldr	r2, [pc, #472]	; (8004c5c <statemachine+0x1974>)
 8004a84:	2301      	movs	r3, #1
 8004a86:	ca06      	ldmia	r2, {r1, r2}
 8004a88:	487e      	ldr	r0, [pc, #504]	; (8004c84 <statemachine+0x199c>)
 8004a8a:	f7fe f80f 	bl	8002aac <ssd1306_WriteString>
				  switch(usbstate){
 8004a8e:	4b7e      	ldr	r3, [pc, #504]	; (8004c88 <statemachine+0x19a0>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	f000 80c7 	beq.w	8004c26 <statemachine+0x193e>
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	f300 81ed 	bgt.w	8004e78 <statemachine+0x1b90>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <statemachine+0x17c0>
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d04d      	beq.n	8004b42 <statemachine+0x185a>
				 									  			 	BTN_A=0;
				 									  			 	BTN_B=0;
				 									  	}
				 					 break;
				 				  }
				  break;
 8004aa6:	e1e7      	b.n	8004e78 <statemachine+0x1b90>
				 					  ssd1306_SetCursor(32,40);
 8004aa8:	2128      	movs	r1, #40	; 0x28
 8004aaa:	2020      	movs	r0, #32
 8004aac:	f7fe f824 	bl	8002af8 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8004ab0:	4a6a      	ldr	r2, [pc, #424]	; (8004c5c <statemachine+0x1974>)
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	ca06      	ldmia	r2, {r1, r2}
 8004ab6:	4875      	ldr	r0, [pc, #468]	; (8004c8c <statemachine+0x19a4>)
 8004ab8:	f7fd fff8 	bl	8002aac <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8004abc:	4b74      	ldr	r3, [pc, #464]	; (8004c90 <statemachine+0x19a8>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 8004ac2:	4b6f      	ldr	r3, [pc, #444]	; (8004c80 <statemachine+0x1998>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	dd0b      	ble.n	8004ae2 <statemachine+0x17fa>
				 						  usbstate++;
 8004aca:	4b6f      	ldr	r3, [pc, #444]	; (8004c88 <statemachine+0x19a0>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	4b6d      	ldr	r3, [pc, #436]	; (8004c88 <statemachine+0x19a0>)
 8004ad4:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 8004ad6:	4b6a      	ldr	r3, [pc, #424]	; (8004c80 <statemachine+0x1998>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 8004adc:	4b66      	ldr	r3, [pc, #408]	; (8004c78 <statemachine+0x1990>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8004ae2:	4b65      	ldr	r3, [pc, #404]	; (8004c78 <statemachine+0x1990>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f340 81b4 	ble.w	8004e54 <statemachine+0x1b6c>
				 									  			 	state--;
 8004aec:	4b63      	ldr	r3, [pc, #396]	; (8004c7c <statemachine+0x1994>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	4b61      	ldr	r3, [pc, #388]	; (8004c7c <statemachine+0x1994>)
 8004af6:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004af8:	4b60      	ldr	r3, [pc, #384]	; (8004c7c <statemachine+0x1994>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	4b5e      	ldr	r3, [pc, #376]	; (8004c7c <statemachine+0x1994>)
 8004b02:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004b04:	4b5d      	ldr	r3, [pc, #372]	; (8004c7c <statemachine+0x1994>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	4b5b      	ldr	r3, [pc, #364]	; (8004c7c <statemachine+0x1994>)
 8004b0e:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004b10:	4b5a      	ldr	r3, [pc, #360]	; (8004c7c <statemachine+0x1994>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	4b58      	ldr	r3, [pc, #352]	; (8004c7c <statemachine+0x1994>)
 8004b1a:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004b1c:	4b57      	ldr	r3, [pc, #348]	; (8004c7c <statemachine+0x1994>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	4b55      	ldr	r3, [pc, #340]	; (8004c7c <statemachine+0x1994>)
 8004b26:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004b28:	4b54      	ldr	r3, [pc, #336]	; (8004c7c <statemachine+0x1994>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	4b52      	ldr	r3, [pc, #328]	; (8004c7c <statemachine+0x1994>)
 8004b32:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8004b34:	4b50      	ldr	r3, [pc, #320]	; (8004c78 <statemachine+0x1990>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8004b3a:	4b51      	ldr	r3, [pc, #324]	; (8004c80 <statemachine+0x1998>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
				 					  break;
 8004b40:	e188      	b.n	8004e54 <statemachine+0x1b6c>
				 					 ssd1306_SetCursor(32,40);
 8004b42:	2128      	movs	r1, #40	; 0x28
 8004b44:	2020      	movs	r0, #32
 8004b46:	f7fd ffd7 	bl	8002af8 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8004b4a:	4a44      	ldr	r2, [pc, #272]	; (8004c5c <statemachine+0x1974>)
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	ca06      	ldmia	r2, {r1, r2}
 8004b50:	4850      	ldr	r0, [pc, #320]	; (8004c94 <statemachine+0x19ac>)
 8004b52:	f7fd ffab 	bl	8002aac <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,48);
 8004b56:	2130      	movs	r1, #48	; 0x30
 8004b58:	2020      	movs	r0, #32
 8004b5a:	f7fd ffcd 	bl	8002af8 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 8004b5e:	4a3f      	ldr	r2, [pc, #252]	; (8004c5c <statemachine+0x1974>)
 8004b60:	2301      	movs	r3, #1
 8004b62:	ca06      	ldmia	r2, {r1, r2}
 8004b64:	484c      	ldr	r0, [pc, #304]	; (8004c98 <statemachine+0x19b0>)
 8004b66:	f7fd ffa1 	bl	8002aac <ssd1306_WriteString>
				 					if(erasedisplay==1){
 8004b6a:	4b4c      	ldr	r3, [pc, #304]	; (8004c9c <statemachine+0x19b4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d120      	bne.n	8004bb4 <statemachine+0x18cc>
				 						snprintf((uint8_t *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 8004b72:	4b4b      	ldr	r3, [pc, #300]	; (8004ca0 <statemachine+0x19b8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b7e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8004ca4 <statemachine+0x19bc>
 8004b82:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004b86:	ee16 0a90 	vmov	r0, s13
 8004b8a:	f7fb fcdd 	bl	8000548 <__aeabi_f2d>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	e9cd 2300 	strd	r2, r3, [sp]
 8004b96:	4a44      	ldr	r2, [pc, #272]	; (8004ca8 <statemachine+0x19c0>)
 8004b98:	2132      	movs	r1, #50	; 0x32
 8004b9a:	4836      	ldr	r0, [pc, #216]	; (8004c74 <statemachine+0x198c>)
 8004b9c:	f010 fb5a 	bl	8015254 <sniprintf>
				 						ssd1306_SetCursor(32,56);
 8004ba0:	2138      	movs	r1, #56	; 0x38
 8004ba2:	2020      	movs	r0, #32
 8004ba4:	f7fd ffa8 	bl	8002af8 <ssd1306_SetCursor>
				 						ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 8004ba8:	4a2c      	ldr	r2, [pc, #176]	; (8004c5c <statemachine+0x1974>)
 8004baa:	2301      	movs	r3, #1
 8004bac:	ca06      	ldmia	r2, {r1, r2}
 8004bae:	4831      	ldr	r0, [pc, #196]	; (8004c74 <statemachine+0x198c>)
 8004bb0:	f7fd ff7c 	bl	8002aac <ssd1306_WriteString>
				 					if(BTN_A>=1){
 8004bb4:	4b30      	ldr	r3, [pc, #192]	; (8004c78 <statemachine+0x1990>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	dd22      	ble.n	8004c02 <statemachine+0x191a>
				 						erasetime=HAL_GetTick();
 8004bbc:	f000 fd86 	bl	80056cc <HAL_GetTick>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	4b36      	ldr	r3, [pc, #216]	; (8004ca0 <statemachine+0x19b8>)
 8004bc6:	601a      	str	r2, [r3, #0]
				 						SPIF_EraseChip(&hspif1);
 8004bc8:	4838      	ldr	r0, [pc, #224]	; (8004cac <statemachine+0x19c4>)
 8004bca:	f00d fd96 	bl	80126fa <SPIF_EraseChip>
				 						erasetime=HAL_GetTick()-erasetime;
 8004bce:	f000 fd7d 	bl	80056cc <HAL_GetTick>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4a32      	ldr	r2, [pc, #200]	; (8004ca0 <statemachine+0x19b8>)
 8004bd6:	6812      	ldr	r2, [r2, #0]
 8004bd8:	1a9b      	subs	r3, r3, r2
 8004bda:	461a      	mov	r2, r3
 8004bdc:	4b30      	ldr	r3, [pc, #192]	; (8004ca0 <statemachine+0x19b8>)
 8004bde:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 8004be0:	4b2e      	ldr	r3, [pc, #184]	; (8004c9c <statemachine+0x19b4>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 8004be6:	4b20      	ldr	r3, [pc, #128]	; (8004c68 <statemachine+0x1980>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 8004bec:	4b1f      	ldr	r3, [pc, #124]	; (8004c6c <statemachine+0x1984>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
				 						storeindex();
 8004bf2:	f7fd fc63 	bl	80024bc <storeindex>
				 						BTN_A=0;
 8004bf6:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <statemachine+0x1990>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 8004bfc:	4b20      	ldr	r3, [pc, #128]	; (8004c80 <statemachine+0x1998>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 8004c02:	4b1f      	ldr	r3, [pc, #124]	; (8004c80 <statemachine+0x1998>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f340 8126 	ble.w	8004e58 <statemachine+0x1b70>
					 						usbstate++;
 8004c0c:	4b1e      	ldr	r3, [pc, #120]	; (8004c88 <statemachine+0x19a0>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	3301      	adds	r3, #1
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	4b1c      	ldr	r3, [pc, #112]	; (8004c88 <statemachine+0x19a0>)
 8004c16:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 8004c18:	4b19      	ldr	r3, [pc, #100]	; (8004c80 <statemachine+0x1998>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 8004c1e:	4b16      	ldr	r3, [pc, #88]	; (8004c78 <statemachine+0x1990>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
				 			  break;
 8004c24:	e118      	b.n	8004e58 <statemachine+0x1b70>
				 					ssd1306_Fill(Black);
 8004c26:	2000      	movs	r0, #0
 8004c28:	f7fd fe24 	bl	8002874 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,40);
 8004c2c:	2128      	movs	r1, #40	; 0x28
 8004c2e:	2020      	movs	r0, #32
 8004c30:	f7fd ff62 	bl	8002af8 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 8004c34:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <statemachine+0x1974>)
 8004c36:	2301      	movs	r3, #1
 8004c38:	ca06      	ldmia	r2, {r1, r2}
 8004c3a:	481d      	ldr	r0, [pc, #116]	; (8004cb0 <statemachine+0x19c8>)
 8004c3c:	f7fd ff36 	bl	8002aac <ssd1306_WriteString>
				 					if(pagenumber>0){
 8004c40:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <statemachine+0x1984>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f340 80a9 	ble.w	8004d9c <statemachine+0x1ab4>
				 					int i=0;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	657b      	str	r3, [r7, #84]	; 0x54
				 					if(usbtransmiten==0){
 8004c4e:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <statemachine+0x19a8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f040 8090 	bne.w	8004d78 <statemachine+0x1a90>
				 						while(i<pagenumber){
 8004c58:	e063      	b.n	8004d22 <statemachine+0x1a3a>
 8004c5a:	bf00      	nop
 8004c5c:	20000008 	.word	0x20000008
 8004c60:	08019b98 	.word	0x08019b98
 8004c64:	08019ba0 	.word	0x08019ba0
 8004c68:	20000958 	.word	0x20000958
 8004c6c:	2000095c 	.word	0x2000095c
 8004c70:	08019ba8 	.word	0x08019ba8
 8004c74:	2000097c 	.word	0x2000097c
 8004c78:	20000708 	.word	0x20000708
 8004c7c:	20000478 	.word	0x20000478
 8004c80:	2000070c 	.word	0x2000070c
 8004c84:	08019bb0 	.word	0x08019bb0
 8004c88:	2000047d 	.word	0x2000047d
 8004c8c:	08019b68 	.word	0x08019b68
 8004c90:	20000a10 	.word	0x20000a10
 8004c94:	08019bb4 	.word	0x08019bb4
 8004c98:	08019bbc 	.word	0x08019bbc
 8004c9c:	20000a0c 	.word	0x20000a0c
 8004ca0:	20000a08 	.word	0x20000a08
 8004ca4:	447a0000 	.word	0x447a0000
 8004ca8:	08019bc8 	.word	0x08019bc8
 8004cac:	20000710 	.word	0x20000710
 8004cb0:	08019bd0 	.word	0x08019bd0
				 							ssd1306_Fill(Black);
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	f7fd fddd 	bl	8002874 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8004cba:	2120      	movs	r1, #32
 8004cbc:	2020      	movs	r0, #32
 8004cbe:	f7fd ff1b 	bl	8002af8 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8004cc2:	4a71      	ldr	r2, [pc, #452]	; (8004e88 <statemachine+0x1ba0>)
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	ca06      	ldmia	r2, {r1, r2}
 8004cc8:	4870      	ldr	r0, [pc, #448]	; (8004e8c <statemachine+0x1ba4>)
 8004cca:	f7fd feef 	bl	8002aac <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t *)flashread, 256, 0);
 8004cce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cd8:	4a6d      	ldr	r2, [pc, #436]	; (8004e90 <statemachine+0x1ba8>)
 8004cda:	486e      	ldr	r0, [pc, #440]	; (8004e94 <statemachine+0x1bac>)
 8004cdc:	f00d fdf8 	bl	80128d0 <SPIF_ReadPage>
				 							CDC_Transmit_FS((uint8_t * )flashread,256);
 8004ce0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ce4:	486a      	ldr	r0, [pc, #424]	; (8004e90 <statemachine+0x1ba8>)
 8004ce6:	f00d fedd 	bl	8012aa4 <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 8004cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cec:	2264      	movs	r2, #100	; 0x64
 8004cee:	fb02 f303 	mul.w	r3, r2, r3
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cfa:	4b67      	ldr	r3, [pc, #412]	; (8004e98 <statemachine+0x1bb0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d06:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d0a:	eeb0 0a66 	vmov.f32	s0, s13
 8004d0e:	f7fe fa8b 	bl	8003228 <percentage>
				 							ssd1306_UpdateScreen();
 8004d12:	f7fd fdc7 	bl	80028a4 <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 8004d16:	207d      	movs	r0, #125	; 0x7d
 8004d18:	f000 fce4 	bl	80056e4 <HAL_Delay>
				 							i++;
 8004d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d1e:	3301      	adds	r3, #1
 8004d20:	657b      	str	r3, [r7, #84]	; 0x54
				 						while(i<pagenumber){
 8004d22:	4b5d      	ldr	r3, [pc, #372]	; (8004e98 <statemachine+0x1bb0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	dbc3      	blt.n	8004cb4 <statemachine+0x19cc>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t *)flashread, pageoffset, 0);
 8004d2c:	4b5a      	ldr	r3, [pc, #360]	; (8004e98 <statemachine+0x1bb0>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4619      	mov	r1, r3
 8004d32:	4b5a      	ldr	r3, [pc, #360]	; (8004e9c <statemachine+0x1bb4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	2300      	movs	r3, #0
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	4a54      	ldr	r2, [pc, #336]	; (8004e90 <statemachine+0x1ba8>)
 8004d40:	4854      	ldr	r0, [pc, #336]	; (8004e94 <statemachine+0x1bac>)
 8004d42:	f00d fdc5 	bl	80128d0 <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t * )flashread,pageoffset);
 8004d46:	4b55      	ldr	r3, [pc, #340]	; (8004e9c <statemachine+0x1bb4>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4850      	ldr	r0, [pc, #320]	; (8004e90 <statemachine+0x1ba8>)
 8004d4e:	f00d fea9 	bl	8012aa4 <CDC_Transmit_FS>
				 						HAL_Delay(125);
 8004d52:	207d      	movs	r0, #125	; 0x7d
 8004d54:	f000 fcc6 	bl	80056e4 <HAL_Delay>
				 						int taillefin=0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	653b      	str	r3, [r7, #80]	; 0x50
										taillefin = snprintf((uint8_t *)usbbuffer,64,"kawakobeme\n\r");
 8004d5c:	4a50      	ldr	r2, [pc, #320]	; (8004ea0 <statemachine+0x1bb8>)
 8004d5e:	2140      	movs	r1, #64	; 0x40
 8004d60:	4850      	ldr	r0, [pc, #320]	; (8004ea4 <statemachine+0x1bbc>)
 8004d62:	f010 fa77 	bl	8015254 <sniprintf>
 8004d66:	6538      	str	r0, [r7, #80]	; 0x50
				 						CDC_Transmit_FS((uint8_t *)usbbuffer,taillefin);
 8004d68:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d6a:	484e      	ldr	r0, [pc, #312]	; (8004ea4 <statemachine+0x1bbc>)
 8004d6c:	f00d fe9a 	bl	8012aa4 <CDC_Transmit_FS>
				 						usbtransmiten=1;
 8004d70:	4b4d      	ldr	r3, [pc, #308]	; (8004ea8 <statemachine+0x1bc0>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	e003      	b.n	8004d80 <statemachine+0x1a98>
				 						usbpercent=1;
 8004d78:	4b4c      	ldr	r3, [pc, #304]	; (8004eac <statemachine+0x1bc4>)
 8004d7a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004d7e:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 8004d80:	2000      	movs	r0, #0
 8004d82:	f7fd fd77 	bl	8002874 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,45);
 8004d86:	212d      	movs	r1, #45	; 0x2d
 8004d88:	2020      	movs	r0, #32
 8004d8a:	f7fd feb5 	bl	8002af8 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 8004d8e:	4a48      	ldr	r2, [pc, #288]	; (8004eb0 <statemachine+0x1bc8>)
 8004d90:	2301      	movs	r3, #1
 8004d92:	ca06      	ldmia	r2, {r1, r2}
 8004d94:	4847      	ldr	r0, [pc, #284]	; (8004eb4 <statemachine+0x1bcc>)
 8004d96:	f7fd fe89 	bl	8002aac <ssd1306_WriteString>
 8004d9a:	e016      	b.n	8004dca <statemachine+0x1ae2>
				 							ssd1306_Fill(Black);
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	f7fd fd69 	bl	8002874 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,40);
 8004da2:	2128      	movs	r1, #40	; 0x28
 8004da4:	2020      	movs	r0, #32
 8004da6:	f7fd fea7 	bl	8002af8 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8004daa:	4a37      	ldr	r2, [pc, #220]	; (8004e88 <statemachine+0x1ba0>)
 8004dac:	2301      	movs	r3, #1
 8004dae:	ca06      	ldmia	r2, {r1, r2}
 8004db0:	4836      	ldr	r0, [pc, #216]	; (8004e8c <statemachine+0x1ba4>)
 8004db2:	f7fd fe7b 	bl	8002aac <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,48);
 8004db6:	2130      	movs	r1, #48	; 0x30
 8004db8:	2020      	movs	r0, #32
 8004dba:	f7fd fe9d 	bl	8002af8 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_6x8,White);
 8004dbe:	4a32      	ldr	r2, [pc, #200]	; (8004e88 <statemachine+0x1ba0>)
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	ca06      	ldmia	r2, {r1, r2}
 8004dc4:	483c      	ldr	r0, [pc, #240]	; (8004eb8 <statemachine+0x1bd0>)
 8004dc6:	f7fd fe71 	bl	8002aac <ssd1306_WriteString>
				 					if(BTN_B>=1){
 8004dca:	4b3c      	ldr	r3, [pc, #240]	; (8004ebc <statemachine+0x1bd4>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	dd11      	ble.n	8004df6 <statemachine+0x1b0e>
				 									 						usbstate--;
 8004dd2:	4b3b      	ldr	r3, [pc, #236]	; (8004ec0 <statemachine+0x1bd8>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	4b39      	ldr	r3, [pc, #228]	; (8004ec0 <statemachine+0x1bd8>)
 8004ddc:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 8004dde:	4b38      	ldr	r3, [pc, #224]	; (8004ec0 <statemachine+0x1bd8>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	4b36      	ldr	r3, [pc, #216]	; (8004ec0 <statemachine+0x1bd8>)
 8004de8:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 8004dea:	4b34      	ldr	r3, [pc, #208]	; (8004ebc <statemachine+0x1bd4>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 8004df0:	4b34      	ldr	r3, [pc, #208]	; (8004ec4 <statemachine+0x1bdc>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8004df6:	4b33      	ldr	r3, [pc, #204]	; (8004ec4 <statemachine+0x1bdc>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	dd2e      	ble.n	8004e5c <statemachine+0x1b74>
				 									  			 	state--;
 8004dfe:	4b32      	ldr	r3, [pc, #200]	; (8004ec8 <statemachine+0x1be0>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	4b30      	ldr	r3, [pc, #192]	; (8004ec8 <statemachine+0x1be0>)
 8004e08:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004e0a:	4b2f      	ldr	r3, [pc, #188]	; (8004ec8 <statemachine+0x1be0>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	4b2d      	ldr	r3, [pc, #180]	; (8004ec8 <statemachine+0x1be0>)
 8004e14:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004e16:	4b2c      	ldr	r3, [pc, #176]	; (8004ec8 <statemachine+0x1be0>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	4b2a      	ldr	r3, [pc, #168]	; (8004ec8 <statemachine+0x1be0>)
 8004e20:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004e22:	4b29      	ldr	r3, [pc, #164]	; (8004ec8 <statemachine+0x1be0>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	4b27      	ldr	r3, [pc, #156]	; (8004ec8 <statemachine+0x1be0>)
 8004e2c:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004e2e:	4b26      	ldr	r3, [pc, #152]	; (8004ec8 <statemachine+0x1be0>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	4b24      	ldr	r3, [pc, #144]	; (8004ec8 <statemachine+0x1be0>)
 8004e38:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004e3a:	4b23      	ldr	r3, [pc, #140]	; (8004ec8 <statemachine+0x1be0>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	4b21      	ldr	r3, [pc, #132]	; (8004ec8 <statemachine+0x1be0>)
 8004e44:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8004e46:	4b1f      	ldr	r3, [pc, #124]	; (8004ec4 <statemachine+0x1bdc>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8004e4c:	4b1b      	ldr	r3, [pc, #108]	; (8004ebc <statemachine+0x1bd4>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
				 					 break;
 8004e52:	e003      	b.n	8004e5c <statemachine+0x1b74>
				 					  break;
 8004e54:	bf00      	nop
 8004e56:	e00f      	b.n	8004e78 <statemachine+0x1b90>
				 			  break;
 8004e58:	bf00      	nop
 8004e5a:	e00d      	b.n	8004e78 <statemachine+0x1b90>
				 					 break;
 8004e5c:	bf00      	nop
				  break;
 8004e5e:	e00b      	b.n	8004e78 <statemachine+0x1b90>
				  break;
 8004e60:	bf00      	nop
 8004e62:	e00a      	b.n	8004e7a <statemachine+0x1b92>
			  break;
 8004e64:	bf00      	nop
 8004e66:	e008      	b.n	8004e7a <statemachine+0x1b92>
			  break;
 8004e68:	bf00      	nop
 8004e6a:	e006      	b.n	8004e7a <statemachine+0x1b92>
			  break;
 8004e6c:	bf00      	nop
 8004e6e:	e004      	b.n	8004e7a <statemachine+0x1b92>
			  break;
 8004e70:	bf00      	nop
 8004e72:	e002      	b.n	8004e7a <statemachine+0x1b92>
				  break;
 8004e74:	bf00      	nop
 8004e76:	e000      	b.n	8004e7a <statemachine+0x1b92>
				  break;
 8004e78:	bf00      	nop
	}
return ;
 8004e7a:	bf00      	nop
 8004e7c:	bf00      	nop
}
 8004e7e:	376c      	adds	r7, #108	; 0x6c
 8004e80:	46bd      	mov	sp, r7
 8004e82:	ecbd 8b02 	vpop	{d8}
 8004e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e88:	20000008 	.word	0x20000008
 8004e8c:	08019bd0 	.word	0x08019bd0
 8004e90:	20000858 	.word	0x20000858
 8004e94:	20000710 	.word	0x20000710
 8004e98:	2000095c 	.word	0x2000095c
 8004e9c:	20000958 	.word	0x20000958
 8004ea0:	08019bd8 	.word	0x08019bd8
 8004ea4:	200009b0 	.word	0x200009b0
 8004ea8:	20000a10 	.word	0x20000a10
 8004eac:	20000a14 	.word	0x20000a14
 8004eb0:	20000010 	.word	0x20000010
 8004eb4:	08019be8 	.word	0x08019be8
 8004eb8:	08019bf0 	.word	0x08019bf0
 8004ebc:	2000070c 	.word	0x2000070c
 8004ec0:	2000047d 	.word	0x2000047d
 8004ec4:	20000708 	.word	0x20000708
 8004ec8:	20000478 	.word	0x20000478

08004ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ed2:	4b0f      	ldr	r3, [pc, #60]	; (8004f10 <HAL_MspInit+0x44>)
 8004ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed6:	4a0e      	ldr	r2, [pc, #56]	; (8004f10 <HAL_MspInit+0x44>)
 8004ed8:	f043 0301 	orr.w	r3, r3, #1
 8004edc:	6613      	str	r3, [r2, #96]	; 0x60
 8004ede:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <HAL_MspInit+0x44>)
 8004ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	607b      	str	r3, [r7, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004eea:	4b09      	ldr	r3, [pc, #36]	; (8004f10 <HAL_MspInit+0x44>)
 8004eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eee:	4a08      	ldr	r2, [pc, #32]	; (8004f10 <HAL_MspInit+0x44>)
 8004ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8004ef6:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <HAL_MspInit+0x44>)
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40021000 	.word	0x40021000

08004f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004f18:	e7fe      	b.n	8004f18 <NMI_Handler+0x4>

08004f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f1e:	e7fe      	b.n	8004f1e <HardFault_Handler+0x4>

08004f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f24:	e7fe      	b.n	8004f24 <MemManage_Handler+0x4>

08004f26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f26:	b480      	push	{r7}
 8004f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f2a:	e7fe      	b.n	8004f2a <BusFault_Handler+0x4>

08004f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f30:	e7fe      	b.n	8004f30 <UsageFault_Handler+0x4>

08004f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f32:	b480      	push	{r7}
 8004f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f36:	bf00      	nop
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f44:	bf00      	nop
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f52:	bf00      	nop
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f60:	f000 fba0 	bl	80056a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f64:	bf00      	nop
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004f6c:	2002      	movs	r0, #2
 8004f6e:	f002 fb93 	bl	8007698 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004f72:	bf00      	nop
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f7c:	4802      	ldr	r0, [pc, #8]	; (8004f88 <DMA1_Channel1_IRQHandler+0x10>)
 8004f7e:	f002 f91e 	bl	80071be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004f82:	bf00      	nop
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000388 	.word	0x20000388

08004f8c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004f90:	4802      	ldr	r0, [pc, #8]	; (8004f9c <ADC1_IRQHandler+0x10>)
 8004f92:	f000 ff6b 	bl	8005e6c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004f96:	bf00      	nop
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000324 	.word	0x20000324

08004fa0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004fa4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004fa8:	f002 fb76 	bl	8007698 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004fac:	bf00      	nop
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004fb4:	4802      	ldr	r0, [pc, #8]	; (8004fc0 <USB_IRQHandler+0x10>)
 8004fb6:	f003 f97b 	bl	80082b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8004fba:	bf00      	nop
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20001da0 	.word	0x20001da0

08004fc4 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 8004fc8:	4802      	ldr	r0, [pc, #8]	; (8004fd4 <DMA2_Channel7_IRQHandler+0x10>)
 8004fca:	f002 f8f8 	bl	80071be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8004fce:	bf00      	nop
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20001074 	.word	0x20001074

08004fd8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004fdc:	4802      	ldr	r0, [pc, #8]	; (8004fe8 <LPUART1_IRQHandler+0x10>)
 8004fde:	f007 fae7 	bl	800c5b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8004fe2:	bf00      	nop
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000f64 	.word	0x20000f64

08004fec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  return 1;
 8004ff0:	2301      	movs	r3, #1
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <_kill>:

int _kill(int pid, int sig)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005006:	f010 faa3 	bl	8015550 <__errno>
 800500a:	4603      	mov	r3, r0
 800500c:	2216      	movs	r2, #22
 800500e:	601a      	str	r2, [r3, #0]
  return -1;
 8005010:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <_exit>:

void _exit (int status)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005024:	f04f 31ff 	mov.w	r1, #4294967295
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff ffe7 	bl	8004ffc <_kill>
  while (1) {}    /* Make sure we hang here */
 800502e:	e7fe      	b.n	800502e <_exit+0x12>

08005030 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	e00a      	b.n	8005058 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005042:	f3af 8000 	nop.w
 8005046:	4601      	mov	r1, r0
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	60ba      	str	r2, [r7, #8]
 800504e:	b2ca      	uxtb	r2, r1
 8005050:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	3301      	adds	r3, #1
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	429a      	cmp	r2, r3
 800505e:	dbf0      	blt.n	8005042 <_read+0x12>
  }

  return len;
 8005060:	687b      	ldr	r3, [r7, #4]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b086      	sub	sp, #24
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	e009      	b.n	8005090 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	60ba      	str	r2, [r7, #8]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	4618      	mov	r0, r3
 8005086:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	3301      	adds	r3, #1
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	429a      	cmp	r2, r3
 8005096:	dbf1      	blt.n	800507c <_write+0x12>
  }
  return len;
 8005098:	687b      	ldr	r3, [r7, #4]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <_close>:

int _close(int file)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80050aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050ca:	605a      	str	r2, [r3, #4]
  return 0;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <_isatty>:

int _isatty(int file)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80050e2:	2301      	movs	r3, #1
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005114:	4a14      	ldr	r2, [pc, #80]	; (8005168 <_sbrk+0x5c>)
 8005116:	4b15      	ldr	r3, [pc, #84]	; (800516c <_sbrk+0x60>)
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005120:	4b13      	ldr	r3, [pc, #76]	; (8005170 <_sbrk+0x64>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d102      	bne.n	800512e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005128:	4b11      	ldr	r3, [pc, #68]	; (8005170 <_sbrk+0x64>)
 800512a:	4a12      	ldr	r2, [pc, #72]	; (8005174 <_sbrk+0x68>)
 800512c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800512e:	4b10      	ldr	r3, [pc, #64]	; (8005170 <_sbrk+0x64>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4413      	add	r3, r2
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	429a      	cmp	r2, r3
 800513a:	d207      	bcs.n	800514c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800513c:	f010 fa08 	bl	8015550 <__errno>
 8005140:	4603      	mov	r3, r0
 8005142:	220c      	movs	r2, #12
 8005144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005146:	f04f 33ff 	mov.w	r3, #4294967295
 800514a:	e009      	b.n	8005160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800514c:	4b08      	ldr	r3, [pc, #32]	; (8005170 <_sbrk+0x64>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005152:	4b07      	ldr	r3, [pc, #28]	; (8005170 <_sbrk+0x64>)
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4413      	add	r3, r2
 800515a:	4a05      	ldr	r2, [pc, #20]	; (8005170 <_sbrk+0x64>)
 800515c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800515e:	68fb      	ldr	r3, [r7, #12]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20010000 	.word	0x20010000
 800516c:	00000400 	.word	0x00000400
 8005170:	20000f14 	.word	0x20000f14
 8005174:	20002408 	.word	0x20002408

08005178 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800517c:	4b06      	ldr	r3, [pc, #24]	; (8005198 <SystemInit+0x20>)
 800517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005182:	4a05      	ldr	r2, [pc, #20]	; (8005198 <SystemInit+0x20>)
 8005184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800518c:	bf00      	nop
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	e000ed00 	.word	0xe000ed00

0800519c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051a2:	f107 0310 	add.w	r3, r7, #16
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	605a      	str	r2, [r3, #4]
 80051ac:	609a      	str	r2, [r3, #8]
 80051ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051b0:	1d3b      	adds	r3, r7, #4
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	605a      	str	r2, [r3, #4]
 80051b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80051ba:	4b1e      	ldr	r3, [pc, #120]	; (8005234 <MX_TIM2_Init+0x98>)
 80051bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80051c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 80051c2:	4b1c      	ldr	r3, [pc, #112]	; (8005234 <MX_TIM2_Init+0x98>)
 80051c4:	f240 128f 	movw	r2, #399	; 0x18f
 80051c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051ca:	4b1a      	ldr	r3, [pc, #104]	; (8005234 <MX_TIM2_Init+0x98>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80051d0:	4b18      	ldr	r3, [pc, #96]	; (8005234 <MX_TIM2_Init+0x98>)
 80051d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80051d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051d8:	4b16      	ldr	r3, [pc, #88]	; (8005234 <MX_TIM2_Init+0x98>)
 80051da:	2200      	movs	r2, #0
 80051dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051de:	4b15      	ldr	r3, [pc, #84]	; (8005234 <MX_TIM2_Init+0x98>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80051e4:	4813      	ldr	r0, [pc, #76]	; (8005234 <MX_TIM2_Init+0x98>)
 80051e6:	f006 fd7b 	bl	800bce0 <HAL_TIM_Base_Init>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80051f0:	f7fc fc05 	bl	80019fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80051fa:	f107 0310 	add.w	r3, r7, #16
 80051fe:	4619      	mov	r1, r3
 8005200:	480c      	ldr	r0, [pc, #48]	; (8005234 <MX_TIM2_Init+0x98>)
 8005202:	f006 fe11 	bl	800be28 <HAL_TIM_ConfigClockSource>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800520c:	f7fc fbf7 	bl	80019fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005210:	2320      	movs	r3, #32
 8005212:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005218:	1d3b      	adds	r3, r7, #4
 800521a:	4619      	mov	r1, r3
 800521c:	4805      	ldr	r0, [pc, #20]	; (8005234 <MX_TIM2_Init+0x98>)
 800521e:	f006 ffcb 	bl	800c1b8 <HAL_TIMEx_MasterConfigSynchronization>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8005228:	f7fc fbe9 	bl	80019fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800522c:	bf00      	nop
 800522e:	3720      	adds	r7, #32
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	20000f18 	.word	0x20000f18

08005238 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005248:	d10b      	bne.n	8005262 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800524a:	4b09      	ldr	r3, [pc, #36]	; (8005270 <HAL_TIM_Base_MspInit+0x38>)
 800524c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524e:	4a08      	ldr	r2, [pc, #32]	; (8005270 <HAL_TIM_Base_MspInit+0x38>)
 8005250:	f043 0301 	orr.w	r3, r3, #1
 8005254:	6593      	str	r3, [r2, #88]	; 0x58
 8005256:	4b06      	ldr	r3, [pc, #24]	; (8005270 <HAL_TIM_Base_MspInit+0x38>)
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005262:	bf00      	nop
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000

08005274 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005278:	4b12      	ldr	r3, [pc, #72]	; (80052c4 <MX_LPUART1_UART_Init+0x50>)
 800527a:	4a13      	ldr	r2, [pc, #76]	; (80052c8 <MX_LPUART1_UART_Init+0x54>)
 800527c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800527e:	4b11      	ldr	r3, [pc, #68]	; (80052c4 <MX_LPUART1_UART_Init+0x50>)
 8005280:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005284:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005286:	4b0f      	ldr	r3, [pc, #60]	; (80052c4 <MX_LPUART1_UART_Init+0x50>)
 8005288:	2200      	movs	r2, #0
 800528a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800528c:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <MX_LPUART1_UART_Init+0x50>)
 800528e:	2200      	movs	r2, #0
 8005290:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005292:	4b0c      	ldr	r3, [pc, #48]	; (80052c4 <MX_LPUART1_UART_Init+0x50>)
 8005294:	2200      	movs	r2, #0
 8005296:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005298:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <MX_LPUART1_UART_Init+0x50>)
 800529a:	220c      	movs	r2, #12
 800529c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800529e:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <MX_LPUART1_UART_Init+0x50>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80052a4:	4b07      	ldr	r3, [pc, #28]	; (80052c4 <MX_LPUART1_UART_Init+0x50>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80052aa:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <MX_LPUART1_UART_Init+0x50>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80052b0:	4804      	ldr	r0, [pc, #16]	; (80052c4 <MX_LPUART1_UART_Init+0x50>)
 80052b2:	f006 ffe7 	bl	800c284 <HAL_UART_Init>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80052bc:	f7fc fb9f 	bl	80019fe <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80052c0:	bf00      	nop
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	20000f64 	.word	0x20000f64
 80052c8:	40008000 	.word	0x40008000

080052cc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80052d0:	4b14      	ldr	r3, [pc, #80]	; (8005324 <MX_USART1_UART_Init+0x58>)
 80052d2:	4a15      	ldr	r2, [pc, #84]	; (8005328 <MX_USART1_UART_Init+0x5c>)
 80052d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80052d6:	4b13      	ldr	r3, [pc, #76]	; (8005324 <MX_USART1_UART_Init+0x58>)
 80052d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80052de:	4b11      	ldr	r3, [pc, #68]	; (8005324 <MX_USART1_UART_Init+0x58>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80052e4:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <MX_USART1_UART_Init+0x58>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80052ea:	4b0e      	ldr	r3, [pc, #56]	; (8005324 <MX_USART1_UART_Init+0x58>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80052f0:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <MX_USART1_UART_Init+0x58>)
 80052f2:	220c      	movs	r2, #12
 80052f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052f6:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <MX_USART1_UART_Init+0x58>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80052fc:	4b09      	ldr	r3, [pc, #36]	; (8005324 <MX_USART1_UART_Init+0x58>)
 80052fe:	2200      	movs	r2, #0
 8005300:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005302:	4b08      	ldr	r3, [pc, #32]	; (8005324 <MX_USART1_UART_Init+0x58>)
 8005304:	2200      	movs	r2, #0
 8005306:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005308:	4b06      	ldr	r3, [pc, #24]	; (8005324 <MX_USART1_UART_Init+0x58>)
 800530a:	2200      	movs	r2, #0
 800530c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800530e:	4805      	ldr	r0, [pc, #20]	; (8005324 <MX_USART1_UART_Init+0x58>)
 8005310:	f006 ffb8 	bl	800c284 <HAL_UART_Init>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800531a:	f7fc fb70 	bl	80019fe <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800531e:	bf00      	nop
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20000fec 	.word	0x20000fec
 8005328:	40013800 	.word	0x40013800

0800532c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b0a0      	sub	sp, #128	; 0x80
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005334:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	605a      	str	r2, [r3, #4]
 800533e:	609a      	str	r2, [r3, #8]
 8005340:	60da      	str	r2, [r3, #12]
 8005342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005344:	f107 0318 	add.w	r3, r7, #24
 8005348:	2254      	movs	r2, #84	; 0x54
 800534a:	2100      	movs	r1, #0
 800534c:	4618      	mov	r0, r3
 800534e:	f010 f818 	bl	8015382 <memset>
  if(uartHandle->Instance==LPUART1)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a55      	ldr	r2, [pc, #340]	; (80054ac <HAL_UART_MspInit+0x180>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d168      	bne.n	800542e <HAL_UART_MspInit+0x102>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800535c:	2320      	movs	r3, #32
 800535e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8005360:	2300      	movs	r3, #0
 8005362:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005364:	f107 0318 	add.w	r3, r7, #24
 8005368:	4618      	mov	r0, r3
 800536a:	f005 faa3 	bl	800a8b4 <HAL_RCCEx_PeriphCLKConfig>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005374:	f7fc fb43 	bl	80019fe <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005378:	4b4d      	ldr	r3, [pc, #308]	; (80054b0 <HAL_UART_MspInit+0x184>)
 800537a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537c:	4a4c      	ldr	r2, [pc, #304]	; (80054b0 <HAL_UART_MspInit+0x184>)
 800537e:	f043 0301 	orr.w	r3, r3, #1
 8005382:	65d3      	str	r3, [r2, #92]	; 0x5c
 8005384:	4b4a      	ldr	r3, [pc, #296]	; (80054b0 <HAL_UART_MspInit+0x184>)
 8005386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005390:	4b47      	ldr	r3, [pc, #284]	; (80054b0 <HAL_UART_MspInit+0x184>)
 8005392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005394:	4a46      	ldr	r2, [pc, #280]	; (80054b0 <HAL_UART_MspInit+0x184>)
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800539c:	4b44      	ldr	r3, [pc, #272]	; (80054b0 <HAL_UART_MspInit+0x184>)
 800539e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80053a8:	230c      	movs	r3, #12
 80053aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ac:	2302      	movs	r3, #2
 80053ae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b0:	2300      	movs	r3, #0
 80053b2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053b4:	2303      	movs	r3, #3
 80053b6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80053b8:	2308      	movs	r3, #8
 80053ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80053c0:	4619      	mov	r1, r3
 80053c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053c6:	f001 ffe5 	bl	8007394 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 80053ca:	4b3a      	ldr	r3, [pc, #232]	; (80054b4 <HAL_UART_MspInit+0x188>)
 80053cc:	4a3a      	ldr	r2, [pc, #232]	; (80054b8 <HAL_UART_MspInit+0x18c>)
 80053ce:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 80053d0:	4b38      	ldr	r3, [pc, #224]	; (80054b4 <HAL_UART_MspInit+0x188>)
 80053d2:	2204      	movs	r2, #4
 80053d4:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053d6:	4b37      	ldr	r3, [pc, #220]	; (80054b4 <HAL_UART_MspInit+0x188>)
 80053d8:	2200      	movs	r2, #0
 80053da:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053dc:	4b35      	ldr	r3, [pc, #212]	; (80054b4 <HAL_UART_MspInit+0x188>)
 80053de:	2200      	movs	r2, #0
 80053e0:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053e2:	4b34      	ldr	r3, [pc, #208]	; (80054b4 <HAL_UART_MspInit+0x188>)
 80053e4:	2280      	movs	r2, #128	; 0x80
 80053e6:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053e8:	4b32      	ldr	r3, [pc, #200]	; (80054b4 <HAL_UART_MspInit+0x188>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053ee:	4b31      	ldr	r3, [pc, #196]	; (80054b4 <HAL_UART_MspInit+0x188>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_NORMAL;
 80053f4:	4b2f      	ldr	r3, [pc, #188]	; (80054b4 <HAL_UART_MspInit+0x188>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053fa:	4b2e      	ldr	r3, [pc, #184]	; (80054b4 <HAL_UART_MspInit+0x188>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 8005400:	482c      	ldr	r0, [pc, #176]	; (80054b4 <HAL_UART_MspInit+0x188>)
 8005402:	f001 fd45 	bl	8006e90 <HAL_DMA_Init>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800540c:	f7fc faf7 	bl	80019fe <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart_rx);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a28      	ldr	r2, [pc, #160]	; (80054b4 <HAL_UART_MspInit+0x188>)
 8005414:	675a      	str	r2, [r3, #116]	; 0x74
 8005416:	4a27      	ldr	r2, [pc, #156]	; (80054b4 <HAL_UART_MspInit+0x188>)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800541c:	2200      	movs	r2, #0
 800541e:	2100      	movs	r1, #0
 8005420:	2046      	movs	r0, #70	; 0x46
 8005422:	f001 fcfe 	bl	8006e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8005426:	2046      	movs	r0, #70	; 0x46
 8005428:	f001 fd17 	bl	8006e5a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800542c:	e03a      	b.n	80054a4 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART1)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a22      	ldr	r2, [pc, #136]	; (80054bc <HAL_UART_MspInit+0x190>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d135      	bne.n	80054a4 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005438:	2301      	movs	r3, #1
 800543a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800543c:	2300      	movs	r3, #0
 800543e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005440:	f107 0318 	add.w	r3, r7, #24
 8005444:	4618      	mov	r0, r3
 8005446:	f005 fa35 	bl	800a8b4 <HAL_RCCEx_PeriphCLKConfig>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <HAL_UART_MspInit+0x128>
      Error_Handler();
 8005450:	f7fc fad5 	bl	80019fe <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005454:	4b16      	ldr	r3, [pc, #88]	; (80054b0 <HAL_UART_MspInit+0x184>)
 8005456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005458:	4a15      	ldr	r2, [pc, #84]	; (80054b0 <HAL_UART_MspInit+0x184>)
 800545a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800545e:	6613      	str	r3, [r2, #96]	; 0x60
 8005460:	4b13      	ldr	r3, [pc, #76]	; (80054b0 <HAL_UART_MspInit+0x184>)
 8005462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800546c:	4b10      	ldr	r3, [pc, #64]	; (80054b0 <HAL_UART_MspInit+0x184>)
 800546e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005470:	4a0f      	ldr	r2, [pc, #60]	; (80054b0 <HAL_UART_MspInit+0x184>)
 8005472:	f043 0302 	orr.w	r3, r3, #2
 8005476:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005478:	4b0d      	ldr	r3, [pc, #52]	; (80054b0 <HAL_UART_MspInit+0x184>)
 800547a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005484:	23c0      	movs	r3, #192	; 0xc0
 8005486:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005488:	2302      	movs	r3, #2
 800548a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800548c:	2300      	movs	r3, #0
 800548e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005490:	2303      	movs	r3, #3
 8005492:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005494:	2307      	movs	r3, #7
 8005496:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005498:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800549c:	4619      	mov	r1, r3
 800549e:	4808      	ldr	r0, [pc, #32]	; (80054c0 <HAL_UART_MspInit+0x194>)
 80054a0:	f001 ff78 	bl	8007394 <HAL_GPIO_Init>
}
 80054a4:	bf00      	nop
 80054a6:	3780      	adds	r7, #128	; 0x80
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40008000 	.word	0x40008000
 80054b0:	40021000 	.word	0x40021000
 80054b4:	20001074 	.word	0x20001074
 80054b8:	40020480 	.word	0x40020480
 80054bc:	40013800 	.word	0x40013800
 80054c0:	48000400 	.word	0x48000400

080054c4 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80054c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 80054cc:	4b30      	ldr	r3, [pc, #192]	; (8005590 <HAL_UART_RxCpltCallback+0xcc>)
 80054ce:	881a      	ldrh	r2, [r3, #0]
 80054d0:	4b30      	ldr	r3, [pc, #192]	; (8005594 <HAL_UART_RxCpltCallback+0xd0>)
 80054d2:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 80054d4:	4b2f      	ldr	r3, [pc, #188]	; (8005594 <HAL_UART_RxCpltCallback+0xd0>)
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80054dc:	d922      	bls.n	8005524 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 80054de:	4b2d      	ldr	r3, [pc, #180]	; (8005594 <HAL_UART_RxCpltCallback+0xd0>)
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80054e6:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 80054e8:	4b2a      	ldr	r3, [pc, #168]	; (8005594 <HAL_UART_RxCpltCallback+0xd0>)
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	4b2a      	ldr	r3, [pc, #168]	; (8005598 <HAL_UART_RxCpltCallback+0xd4>)
 80054f0:	4413      	add	r3, r2
 80054f2:	89fa      	ldrh	r2, [r7, #14]
 80054f4:	4929      	ldr	r1, [pc, #164]	; (800559c <HAL_UART_RxCpltCallback+0xd8>)
 80054f6:	4618      	mov	r0, r3
 80054f8:	f010 f85f 	bl	80155ba <memcpy>

				oldPos = 0;  // point to the start of the buffer
 80054fc:	4b25      	ldr	r3, [pc, #148]	; (8005594 <HAL_UART_RxCpltCallback+0xd0>)
 80054fe:	2200      	movs	r2, #0
 8005500:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8005502:	89fb      	ldrh	r3, [r7, #14]
 8005504:	4a25      	ldr	r2, [pc, #148]	; (800559c <HAL_UART_RxCpltCallback+0xd8>)
 8005506:	1899      	adds	r1, r3, r2
 8005508:	89fb      	ldrh	r3, [r7, #14]
 800550a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800550e:	461a      	mov	r2, r3
 8005510:	4821      	ldr	r0, [pc, #132]	; (8005598 <HAL_UART_RxCpltCallback+0xd4>)
 8005512:	f010 f852 	bl	80155ba <memcpy>
				newPos = (64-datatocopy);  // update the position
 8005516:	89fb      	ldrh	r3, [r7, #14]
 8005518:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800551c:	b29a      	uxth	r2, r3
 800551e:	4b1c      	ldr	r3, [pc, #112]	; (8005590 <HAL_UART_RxCpltCallback+0xcc>)
 8005520:	801a      	strh	r2, [r3, #0]
 8005522:	e01e      	b.n	8005562 <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8005524:	4b1b      	ldr	r3, [pc, #108]	; (8005594 <HAL_UART_RxCpltCallback+0xd0>)
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	4b1b      	ldr	r3, [pc, #108]	; (8005598 <HAL_UART_RxCpltCallback+0xd4>)
 800552c:	441a      	add	r2, r3
 800552e:	4b1b      	ldr	r3, [pc, #108]	; (800559c <HAL_UART_RxCpltCallback+0xd8>)
 8005530:	4610      	mov	r0, r2
 8005532:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005536:	4602      	mov	r2, r0
 8005538:	4619      	mov	r1, r3
 800553a:	f8d1 c000 	ldr.w	ip, [r1]
 800553e:	684e      	ldr	r6, [r1, #4]
 8005540:	688d      	ldr	r5, [r1, #8]
 8005542:	68c9      	ldr	r1, [r1, #12]
 8005544:	f8c2 c000 	str.w	ip, [r2]
 8005548:	6056      	str	r6, [r2, #4]
 800554a:	6095      	str	r5, [r2, #8]
 800554c:	60d1      	str	r1, [r2, #12]
 800554e:	3310      	adds	r3, #16
 8005550:	3010      	adds	r0, #16
 8005552:	42a3      	cmp	r3, r4
 8005554:	d1ef      	bne.n	8005536 <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 8005556:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <HAL_UART_RxCpltCallback+0xd0>)
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	3340      	adds	r3, #64	; 0x40
 800555c:	b29a      	uxth	r2, r3
 800555e:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <HAL_UART_RxCpltCallback+0xcc>)
 8005560:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 8005562:	2240      	movs	r2, #64	; 0x40
 8005564:	490d      	ldr	r1, [pc, #52]	; (800559c <HAL_UART_RxCpltCallback+0xd8>)
 8005566:	480e      	ldr	r0, [pc, #56]	; (80055a0 <HAL_UART_RxCpltCallback+0xdc>)
 8005568:	f006 feda 	bl	800c320 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 800556c:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <HAL_UART_RxCpltCallback+0xe0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <HAL_UART_RxCpltCallback+0xe0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0204 	bic.w	r2, r2, #4
 800557a:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 800557c:	2240      	movs	r2, #64	; 0x40
 800557e:	4907      	ldr	r1, [pc, #28]	; (800559c <HAL_UART_RxCpltCallback+0xd8>)
 8005580:	4807      	ldr	r0, [pc, #28]	; (80055a0 <HAL_UART_RxCpltCallback+0xdc>)
 8005582:	f006 fecd 	bl	800c320 <HAL_UART_Receive_DMA>
}
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800558e:	bf00      	nop
 8005590:	20000482 	.word	0x20000482
 8005594:	20000480 	.word	0x20000480
 8005598:	200004c4 	.word	0x200004c4
 800559c:	20000484 	.word	0x20000484
 80055a0:	20000f64 	.word	0x20000f64
 80055a4:	20001074 	.word	0x20001074

080055a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80055a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80055ac:	f7ff fde4 	bl	8005178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055b0:	480c      	ldr	r0, [pc, #48]	; (80055e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80055b2:	490d      	ldr	r1, [pc, #52]	; (80055e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80055b4:	4a0d      	ldr	r2, [pc, #52]	; (80055ec <LoopForever+0xe>)
  movs r3, #0
 80055b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055b8:	e002      	b.n	80055c0 <LoopCopyDataInit>

080055ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055be:	3304      	adds	r3, #4

080055c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055c4:	d3f9      	bcc.n	80055ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055c6:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80055c8:	4c0a      	ldr	r4, [pc, #40]	; (80055f4 <LoopForever+0x16>)
  movs r3, #0
 80055ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055cc:	e001      	b.n	80055d2 <LoopFillZerobss>

080055ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055d0:	3204      	adds	r2, #4

080055d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055d4:	d3fb      	bcc.n	80055ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80055d6:	f00f ffc1 	bl	801555c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80055da:	f7fc f8dd 	bl	8001798 <main>

080055de <LoopForever>:

LoopForever:
    b LoopForever
 80055de:	e7fe      	b.n	80055de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80055e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80055e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055e8:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 80055ec:	0801beb8 	.word	0x0801beb8
  ldr r2, =_sbss
 80055f0:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 80055f4:	20002404 	.word	0x20002404

080055f8 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80055f8:	e7fe      	b.n	80055f8 <CAN1_RX0_IRQHandler>

080055fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b082      	sub	sp, #8
 80055fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005604:	2003      	movs	r0, #3
 8005606:	f001 fc01 	bl	8006e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800560a:	200f      	movs	r0, #15
 800560c:	f000 f80e 	bl	800562c <HAL_InitTick>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	71fb      	strb	r3, [r7, #7]
 800561a:	e001      	b.n	8005620 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800561c:	f7ff fc56 	bl	8004ecc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005620:	79fb      	ldrb	r3, [r7, #7]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005638:	4b17      	ldr	r3, [pc, #92]	; (8005698 <HAL_InitTick+0x6c>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d023      	beq.n	8005688 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005640:	4b16      	ldr	r3, [pc, #88]	; (800569c <HAL_InitTick+0x70>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	4b14      	ldr	r3, [pc, #80]	; (8005698 <HAL_InitTick+0x6c>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	4619      	mov	r1, r3
 800564a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800564e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005652:	fbb2 f3f3 	udiv	r3, r2, r3
 8005656:	4618      	mov	r0, r3
 8005658:	f001 fc0d 	bl	8006e76 <HAL_SYSTICK_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10f      	bne.n	8005682 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b0f      	cmp	r3, #15
 8005666:	d809      	bhi.n	800567c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005668:	2200      	movs	r2, #0
 800566a:	6879      	ldr	r1, [r7, #4]
 800566c:	f04f 30ff 	mov.w	r0, #4294967295
 8005670:	f001 fbd7 	bl	8006e22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005674:	4a0a      	ldr	r2, [pc, #40]	; (80056a0 <HAL_InitTick+0x74>)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	e007      	b.n	800568c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	73fb      	strb	r3, [r7, #15]
 8005680:	e004      	b.n	800568c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	73fb      	strb	r3, [r7, #15]
 8005686:	e001      	b.n	800568c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800568c:	7bfb      	ldrb	r3, [r7, #15]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20000028 	.word	0x20000028
 800569c:	20000020 	.word	0x20000020
 80056a0:	20000024 	.word	0x20000024

080056a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <HAL_IncTick+0x20>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <HAL_IncTick+0x24>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4413      	add	r3, r2
 80056b4:	4a04      	ldr	r2, [pc, #16]	; (80056c8 <HAL_IncTick+0x24>)
 80056b6:	6013      	str	r3, [r2, #0]
}
 80056b8:	bf00      	nop
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	20000028 	.word	0x20000028
 80056c8:	200010bc 	.word	0x200010bc

080056cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  return uwTick;
 80056d0:	4b03      	ldr	r3, [pc, #12]	; (80056e0 <HAL_GetTick+0x14>)
 80056d2:	681b      	ldr	r3, [r3, #0]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	200010bc 	.word	0x200010bc

080056e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056ec:	f7ff ffee 	bl	80056cc <HAL_GetTick>
 80056f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fc:	d005      	beq.n	800570a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80056fe:	4b0a      	ldr	r3, [pc, #40]	; (8005728 <HAL_Delay+0x44>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800570a:	bf00      	nop
 800570c:	f7ff ffde 	bl	80056cc <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	429a      	cmp	r2, r3
 800571a:	d8f7      	bhi.n	800570c <HAL_Delay+0x28>
  {
  }
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000028 	.word	0x20000028

0800572c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	609a      	str	r2, [r3, #8]
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	609a      	str	r2, [r3, #8]
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005788:	4618      	mov	r0, r3
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3360      	adds	r3, #96	; 0x60
 80057a6:	461a      	mov	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	4b08      	ldr	r3, [pc, #32]	; (80057d8 <LL_ADC_SetOffset+0x44>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80057cc:	bf00      	nop
 80057ce:	371c      	adds	r7, #28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	03fff000 	.word	0x03fff000

080057dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3360      	adds	r3, #96	; 0x60
 80057ea:	461a      	mov	r2, r3
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3360      	adds	r3, #96	; 0x60
 8005818:	461a      	mov	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	431a      	orrs	r2, r3
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3330      	adds	r3, #48	; 0x30
 8005874:	461a      	mov	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	0a1b      	lsrs	r3, r3, #8
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	f003 030c 	and.w	r3, r3, #12
 8005880:	4413      	add	r3, r2
 8005882:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f003 031f 	and.w	r3, r3, #31
 800588e:	211f      	movs	r1, #31
 8005890:	fa01 f303 	lsl.w	r3, r1, r3
 8005894:	43db      	mvns	r3, r3
 8005896:	401a      	ands	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	0e9b      	lsrs	r3, r3, #26
 800589c:	f003 011f 	and.w	r1, r3, #31
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f003 031f 	and.w	r3, r3, #31
 80058a6:	fa01 f303 	lsl.w	r3, r1, r3
 80058aa:	431a      	orrs	r2, r3
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80058b0:	bf00      	nop
 80058b2:	371c      	adds	r7, #28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b087      	sub	sp, #28
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	60f8      	str	r0, [r7, #12]
 80058ea:	60b9      	str	r1, [r7, #8]
 80058ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3314      	adds	r3, #20
 80058f2:	461a      	mov	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	0e5b      	lsrs	r3, r3, #25
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	4413      	add	r3, r2
 8005900:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	0d1b      	lsrs	r3, r3, #20
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	2107      	movs	r1, #7
 8005910:	fa01 f303 	lsl.w	r3, r1, r3
 8005914:	43db      	mvns	r3, r3
 8005916:	401a      	ands	r2, r3
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	0d1b      	lsrs	r3, r3, #20
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	6879      	ldr	r1, [r7, #4]
 8005922:	fa01 f303 	lsl.w	r3, r1, r3
 8005926:	431a      	orrs	r2, r3
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800592c:	bf00      	nop
 800592e:	371c      	adds	r7, #28
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005950:	43db      	mvns	r3, r3
 8005952:	401a      	ands	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f003 0318 	and.w	r3, r3, #24
 800595a:	4908      	ldr	r1, [pc, #32]	; (800597c <LL_ADC_SetChannelSingleDiff+0x44>)
 800595c:	40d9      	lsrs	r1, r3
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	400b      	ands	r3, r1
 8005962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005966:	431a      	orrs	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800596e:	bf00      	nop
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	0007ffff 	.word	0x0007ffff

08005980 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005990:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6093      	str	r3, [r2, #8]
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059b8:	d101      	bne.n	80059be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80059dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80059e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a08:	d101      	bne.n	8005a0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a30:	f043 0201 	orr.w	r2, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d101      	bne.n	8005a5c <LL_ADC_IsEnabled+0x18>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e000      	b.n	8005a5e <LL_ADC_IsEnabled+0x1a>
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a7e:	f043 0204 	orr.w	r2, r3, #4
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 0304 	and.w	r3, r3, #4
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d101      	bne.n	8005aaa <LL_ADC_REG_IsConversionOngoing+0x18>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 0308 	and.w	r3, r3, #8
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d101      	bne.n	8005ad0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
	...

08005ae0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e126      	b.n	8005d48 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d109      	bne.n	8005b1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f7fb faf7 	bl	80010fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff ff3f 	bl	80059a4 <LL_ADC_IsDeepPowerDownEnabled>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d004      	beq.n	8005b36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff ff25 	bl	8005980 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff ff5a 	bl	80059f4 <LL_ADC_IsInternalRegulatorEnabled>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d115      	bne.n	8005b72 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7ff ff3e 	bl	80059cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b50:	4b7f      	ldr	r3, [pc, #508]	; (8005d50 <HAL_ADC_Init+0x270>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	099b      	lsrs	r3, r3, #6
 8005b56:	4a7f      	ldr	r2, [pc, #508]	; (8005d54 <HAL_ADC_Init+0x274>)
 8005b58:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5c:	099b      	lsrs	r3, r3, #6
 8005b5e:	3301      	adds	r3, #1
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005b64:	e002      	b.n	8005b6c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1f9      	bne.n	8005b66 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff ff3c 	bl	80059f4 <LL_ADC_IsInternalRegulatorEnabled>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10d      	bne.n	8005b9e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b86:	f043 0210 	orr.w	r2, r3, #16
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b92:	f043 0201 	orr.w	r2, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff ff75 	bl	8005a92 <LL_ADC_REG_IsConversionOngoing>
 8005ba8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bae:	f003 0310 	and.w	r3, r3, #16
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f040 80bf 	bne.w	8005d36 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f040 80bb 	bne.w	8005d36 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005bc8:	f043 0202 	orr.w	r2, r3, #2
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff ff35 	bl	8005a44 <LL_ADC_IsEnabled>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10b      	bne.n	8005bf8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005be0:	485d      	ldr	r0, [pc, #372]	; (8005d58 <HAL_ADC_Init+0x278>)
 8005be2:	f7ff ff2f 	bl	8005a44 <LL_ADC_IsEnabled>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d105      	bne.n	8005bf8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	485a      	ldr	r0, [pc, #360]	; (8005d5c <HAL_ADC_Init+0x27c>)
 8005bf4:	f7ff fd9a 	bl	800572c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	7e5b      	ldrb	r3, [r3, #25]
 8005bfc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c02:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005c08:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005c0e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c16:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d106      	bne.n	8005c34 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	045b      	lsls	r3, r3, #17
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d009      	beq.n	8005c50 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	4b42      	ldr	r3, [pc, #264]	; (8005d60 <HAL_ADC_Init+0x280>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6812      	ldr	r2, [r2, #0]
 8005c5e:	69b9      	ldr	r1, [r7, #24]
 8005c60:	430b      	orrs	r3, r1
 8005c62:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff ff25 	bl	8005ab8 <LL_ADC_INJ_IsConversionOngoing>
 8005c6e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d13d      	bne.n	8005cf2 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d13a      	bne.n	8005cf2 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005c80:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c88:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c98:	f023 0302 	bic.w	r3, r3, #2
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	69b9      	ldr	r1, [r7, #24]
 8005ca2:	430b      	orrs	r3, r1
 8005ca4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d118      	bne.n	8005ce2 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005cba:	f023 0304 	bic.w	r3, r3, #4
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005cc6:	4311      	orrs	r1, r2
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005ccc:	4311      	orrs	r1, r2
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0201 	orr.w	r2, r2, #1
 8005cde:	611a      	str	r2, [r3, #16]
 8005ce0:	e007      	b.n	8005cf2 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0201 	bic.w	r2, r2, #1
 8005cf0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d10c      	bne.n	8005d14 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d00:	f023 010f 	bic.w	r1, r3, #15
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	1e5a      	subs	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	631a      	str	r2, [r3, #48]	; 0x30
 8005d12:	e007      	b.n	8005d24 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 020f 	bic.w	r2, r2, #15
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d28:	f023 0303 	bic.w	r3, r3, #3
 8005d2c:	f043 0201 	orr.w	r2, r3, #1
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	655a      	str	r2, [r3, #84]	; 0x54
 8005d34:	e007      	b.n	8005d46 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3a:	f043 0210 	orr.w	r2, r3, #16
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005d46:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3720      	adds	r7, #32
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20000020 	.word	0x20000020
 8005d54:	053e2d63 	.word	0x053e2d63
 8005d58:	50040000 	.word	0x50040000
 8005d5c:	50040300 	.word	0x50040300
 8005d60:	fff0c007 	.word	0xfff0c007

08005d64 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff fe8c 	bl	8005a92 <LL_ADC_REG_IsConversionOngoing>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d167      	bne.n	8005e50 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_ADC_Start_DMA+0x2a>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e063      	b.n	8005e56 <HAL_ADC_Start_DMA+0xf2>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 fe1c 	bl	80069d4 <ADC_Enable>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005da0:	7dfb      	ldrb	r3, [r7, #23]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d14f      	bne.n	8005e46 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005daa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005dae:	f023 0301 	bic.w	r3, r3, #1
 8005db2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d006      	beq.n	8005dd4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dca:	f023 0206 	bic.w	r2, r3, #6
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	659a      	str	r2, [r3, #88]	; 0x58
 8005dd2:	e002      	b.n	8005dda <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dde:	4a20      	ldr	r2, [pc, #128]	; (8005e60 <HAL_ADC_Start_DMA+0xfc>)
 8005de0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de6:	4a1f      	ldr	r2, [pc, #124]	; (8005e64 <HAL_ADC_Start_DMA+0x100>)
 8005de8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dee:	4a1e      	ldr	r2, [pc, #120]	; (8005e68 <HAL_ADC_Start_DMA+0x104>)
 8005df0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	221c      	movs	r2, #28
 8005df8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0210 	orr.w	r2, r2, #16
 8005e10:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68da      	ldr	r2, [r3, #12]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0201 	orr.w	r2, r2, #1
 8005e20:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3340      	adds	r3, #64	; 0x40
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f001 f8e5 	bl	8007000 <HAL_DMA_Start_IT>
 8005e36:	4603      	mov	r3, r0
 8005e38:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff fe13 	bl	8005a6a <LL_ADC_REG_StartConversion>
 8005e44:	e006      	b.n	8005e54 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005e4e:	e001      	b.n	8005e54 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005e50:	2302      	movs	r3, #2
 8005e52:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	08006ae1 	.word	0x08006ae1
 8005e64:	08006bb9 	.word	0x08006bb9
 8005e68:	08006bd5 	.word	0x08006bd5

08005e6c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005e74:	2300      	movs	r3, #0
 8005e76:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d017      	beq.n	8005ec2 <HAL_ADC_IRQHandler+0x56>
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d012      	beq.n	8005ec2 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea0:	f003 0310 	and.w	r3, r3, #16
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d105      	bne.n	8005eb4 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eac:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fecf 	bl	8006c58 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d004      	beq.n	8005ed6 <HAL_ADC_IRQHandler+0x6a>
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f003 0304 	and.w	r3, r3, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d109      	bne.n	8005eea <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d05e      	beq.n	8005f9e <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d059      	beq.n	8005f9e <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d105      	bne.n	8005f02 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff fc99 	bl	800583e <LL_ADC_REG_IsTriggerSourceSWStart>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d03e      	beq.n	8005f90 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d135      	bne.n	8005f90 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0308 	and.w	r3, r3, #8
 8005f2e:	2b08      	cmp	r3, #8
 8005f30:	d12e      	bne.n	8005f90 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff fdab 	bl	8005a92 <LL_ADC_REG_IsConversionOngoing>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d11a      	bne.n	8005f78 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 020c 	bic.w	r2, r2, #12
 8005f50:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d112      	bne.n	8005f90 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6e:	f043 0201 	orr.w	r2, r3, #1
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	655a      	str	r2, [r3, #84]	; 0x54
 8005f76:	e00b      	b.n	8005f90 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7c:	f043 0210 	orr.w	r2, r3, #16
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f88:	f043 0201 	orr.w	r2, r3, #1
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7fb f929 	bl	80011e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	220c      	movs	r2, #12
 8005f9c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <HAL_ADC_IRQHandler+0x146>
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d109      	bne.n	8005fc6 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d072      	beq.n	80060a2 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d06d      	beq.n	80060a2 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fca:	f003 0310 	and.w	r3, r3, #16
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d105      	bne.n	8005fde <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7ff fc6a 	bl	80058bc <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005fe8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7ff fc25 	bl	800583e <LL_ADC_REG_IsTriggerSourceSWStart>
 8005ff4:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d047      	beq.n	8006094 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <HAL_ADC_IRQHandler+0x1b2>
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d03f      	beq.n	8006094 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800601a:	2b00      	cmp	r3, #0
 800601c:	d13a      	bne.n	8006094 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b40      	cmp	r3, #64	; 0x40
 800602a:	d133      	bne.n	8006094 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d12e      	bne.n	8006094 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff fd3c 	bl	8005ab8 <LL_ADC_INJ_IsConversionOngoing>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d11a      	bne.n	800607c <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006054:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606a:	2b00      	cmp	r3, #0
 800606c:	d112      	bne.n	8006094 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006072:	f043 0201 	orr.w	r2, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	655a      	str	r2, [r3, #84]	; 0x54
 800607a:	e00b      	b.n	8006094 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006080:	f043 0210 	orr.w	r2, r3, #16
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608c:	f043 0201 	orr.w	r2, r3, #1
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fdb7 	bl	8006c08 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2260      	movs	r2, #96	; 0x60
 80060a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d011      	beq.n	80060d0 <HAL_ADC_IRQHandler+0x264>
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00c      	beq.n	80060d0 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f890 	bl	80061e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2280      	movs	r2, #128	; 0x80
 80060ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d012      	beq.n	8006100 <HAL_ADC_IRQHandler+0x294>
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00d      	beq.n	8006100 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fd9d 	bl	8006c30 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006106:	2b00      	cmp	r3, #0
 8006108:	d012      	beq.n	8006130 <HAL_ADC_IRQHandler+0x2c4>
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00d      	beq.n	8006130 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006118:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fd8f 	bl	8006c44 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800612e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	f003 0310 	and.w	r3, r3, #16
 8006136:	2b00      	cmp	r3, #0
 8006138:	d02a      	beq.n	8006190 <HAL_ADC_IRQHandler+0x324>
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f003 0310 	and.w	r3, r3, #16
 8006140:	2b00      	cmp	r3, #0
 8006142:	d025      	beq.n	8006190 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800614c:	2301      	movs	r3, #1
 800614e:	61fb      	str	r3, [r7, #28]
 8006150:	e008      	b.n	8006164 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8006160:	2301      	movs	r3, #1
 8006162:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d10e      	bne.n	8006188 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617a:	f043 0202 	orr.w	r2, r3, #2
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f83a 	bl	80061fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2210      	movs	r2, #16
 800618e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006196:	2b00      	cmp	r3, #0
 8006198:	d018      	beq.n	80061cc <HAL_ADC_IRQHandler+0x360>
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d013      	beq.n	80061cc <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b4:	f043 0208 	orr.w	r2, r3, #8
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061c4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fd28 	bl	8006c1c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80061cc:	bf00      	nop
 80061ce:	3720      	adds	r7, #32
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b0b6      	sub	sp, #216	; 0xd8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006220:	2300      	movs	r3, #0
 8006222:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800622a:	2b01      	cmp	r3, #1
 800622c:	d101      	bne.n	8006232 <HAL_ADC_ConfigChannel+0x22>
 800622e:	2302      	movs	r3, #2
 8006230:	e3bb      	b.n	80069aa <HAL_ADC_ConfigChannel+0x79a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff fc27 	bl	8005a92 <LL_ADC_REG_IsConversionOngoing>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	f040 83a0 	bne.w	800698c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	2b05      	cmp	r3, #5
 800625a:	d824      	bhi.n	80062a6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	3b02      	subs	r3, #2
 8006262:	2b03      	cmp	r3, #3
 8006264:	d81b      	bhi.n	800629e <HAL_ADC_ConfigChannel+0x8e>
 8006266:	a201      	add	r2, pc, #4	; (adr r2, 800626c <HAL_ADC_ConfigChannel+0x5c>)
 8006268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626c:	0800627d 	.word	0x0800627d
 8006270:	08006285 	.word	0x08006285
 8006274:	0800628d 	.word	0x0800628d
 8006278:	08006295 	.word	0x08006295
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800627c:	230c      	movs	r3, #12
 800627e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006282:	e010      	b.n	80062a6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8006284:	2312      	movs	r3, #18
 8006286:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800628a:	e00c      	b.n	80062a6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800628c:	2318      	movs	r3, #24
 800628e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006292:	e008      	b.n	80062a6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8006294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800629c:	e003      	b.n	80062a6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800629e:	2306      	movs	r3, #6
 80062a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80062a4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80062b4:	f7ff fad6 	bl	8005864 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4618      	mov	r0, r3
 80062be:	f7ff fbe8 	bl	8005a92 <LL_ADC_REG_IsConversionOngoing>
 80062c2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff fbf4 	bl	8005ab8 <LL_ADC_INJ_IsConversionOngoing>
 80062d0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80062d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f040 81a4 	bne.w	8006626 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80062de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f040 819f 	bne.w	8006626 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6818      	ldr	r0, [r3, #0]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	6819      	ldr	r1, [r3, #0]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	461a      	mov	r2, r3
 80062f6:	f7ff faf4 	bl	80058e2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	695a      	ldr	r2, [r3, #20]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	08db      	lsrs	r3, r3, #3
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	fa02 f303 	lsl.w	r3, r2, r3
 8006310:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	2b04      	cmp	r3, #4
 800631a:	d00a      	beq.n	8006332 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6818      	ldr	r0, [r3, #0]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	6919      	ldr	r1, [r3, #16]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800632c:	f7ff fa32 	bl	8005794 <LL_ADC_SetOffset>
 8006330:	e179      	b.n	8006626 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2100      	movs	r1, #0
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff fa4f 	bl	80057dc <LL_ADC_GetOffsetChannel>
 800633e:	4603      	mov	r3, r0
 8006340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10a      	bne.n	800635e <HAL_ADC_ConfigChannel+0x14e>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2100      	movs	r1, #0
 800634e:	4618      	mov	r0, r3
 8006350:	f7ff fa44 	bl	80057dc <LL_ADC_GetOffsetChannel>
 8006354:	4603      	mov	r3, r0
 8006356:	0e9b      	lsrs	r3, r3, #26
 8006358:	f003 021f 	and.w	r2, r3, #31
 800635c:	e01e      	b.n	800639c <HAL_ADC_ConfigChannel+0x18c>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2100      	movs	r1, #0
 8006364:	4618      	mov	r0, r3
 8006366:	f7ff fa39 	bl	80057dc <LL_ADC_GetOffsetChannel>
 800636a:	4603      	mov	r3, r0
 800636c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006370:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006374:	fa93 f3a3 	rbit	r3, r3
 8006378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800637c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006380:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006384:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800638c:	2320      	movs	r3, #32
 800638e:	e004      	b.n	800639a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8006390:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006394:	fab3 f383 	clz	r3, r3
 8006398:	b2db      	uxtb	r3, r3
 800639a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d105      	bne.n	80063b4 <HAL_ADC_ConfigChannel+0x1a4>
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	0e9b      	lsrs	r3, r3, #26
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	e018      	b.n	80063e6 <HAL_ADC_ConfigChannel+0x1d6>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063c0:	fa93 f3a3 	rbit	r3, r3
 80063c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80063c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80063d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80063d8:	2320      	movs	r3, #32
 80063da:	e004      	b.n	80063e6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80063dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063e0:	fab3 f383 	clz	r3, r3
 80063e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d106      	bne.n	80063f8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2200      	movs	r2, #0
 80063f0:	2100      	movs	r1, #0
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff fa08 	bl	8005808 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2101      	movs	r1, #1
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff f9ec 	bl	80057dc <LL_ADC_GetOffsetChannel>
 8006404:	4603      	mov	r3, r0
 8006406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10a      	bne.n	8006424 <HAL_ADC_ConfigChannel+0x214>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2101      	movs	r1, #1
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff f9e1 	bl	80057dc <LL_ADC_GetOffsetChannel>
 800641a:	4603      	mov	r3, r0
 800641c:	0e9b      	lsrs	r3, r3, #26
 800641e:	f003 021f 	and.w	r2, r3, #31
 8006422:	e01e      	b.n	8006462 <HAL_ADC_ConfigChannel+0x252>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2101      	movs	r1, #1
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff f9d6 	bl	80057dc <LL_ADC_GetOffsetChannel>
 8006430:	4603      	mov	r3, r0
 8006432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800643a:	fa93 f3a3 	rbit	r3, r3
 800643e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8006442:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800644a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8006452:	2320      	movs	r3, #32
 8006454:	e004      	b.n	8006460 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8006456:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800645a:	fab3 f383 	clz	r3, r3
 800645e:	b2db      	uxtb	r3, r3
 8006460:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800646a:	2b00      	cmp	r3, #0
 800646c:	d105      	bne.n	800647a <HAL_ADC_ConfigChannel+0x26a>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	0e9b      	lsrs	r3, r3, #26
 8006474:	f003 031f 	and.w	r3, r3, #31
 8006478:	e018      	b.n	80064ac <HAL_ADC_ConfigChannel+0x29c>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006482:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006486:	fa93 f3a3 	rbit	r3, r3
 800648a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800648e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006492:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8006496:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800649e:	2320      	movs	r3, #32
 80064a0:	e004      	b.n	80064ac <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80064a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064a6:	fab3 f383 	clz	r3, r3
 80064aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d106      	bne.n	80064be <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2200      	movs	r2, #0
 80064b6:	2101      	movs	r1, #1
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff f9a5 	bl	8005808 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2102      	movs	r1, #2
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7ff f989 	bl	80057dc <LL_ADC_GetOffsetChannel>
 80064ca:	4603      	mov	r3, r0
 80064cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <HAL_ADC_ConfigChannel+0x2da>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2102      	movs	r1, #2
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff f97e 	bl	80057dc <LL_ADC_GetOffsetChannel>
 80064e0:	4603      	mov	r3, r0
 80064e2:	0e9b      	lsrs	r3, r3, #26
 80064e4:	f003 021f 	and.w	r2, r3, #31
 80064e8:	e01e      	b.n	8006528 <HAL_ADC_ConfigChannel+0x318>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2102      	movs	r1, #2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff f973 	bl	80057dc <LL_ADC_GetOffsetChannel>
 80064f6:	4603      	mov	r3, r0
 80064f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006500:	fa93 f3a3 	rbit	r3, r3
 8006504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8006508:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800650c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8006510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8006518:	2320      	movs	r3, #32
 800651a:	e004      	b.n	8006526 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800651c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006520:	fab3 f383 	clz	r3, r3
 8006524:	b2db      	uxtb	r3, r3
 8006526:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006530:	2b00      	cmp	r3, #0
 8006532:	d105      	bne.n	8006540 <HAL_ADC_ConfigChannel+0x330>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	0e9b      	lsrs	r3, r3, #26
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	e014      	b.n	800656a <HAL_ADC_ConfigChannel+0x35a>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006546:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006548:	fa93 f3a3 	rbit	r3, r3
 800654c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800654e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006550:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8006554:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800655c:	2320      	movs	r3, #32
 800655e:	e004      	b.n	800656a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8006560:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006564:	fab3 f383 	clz	r3, r3
 8006568:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800656a:	429a      	cmp	r2, r3
 800656c:	d106      	bne.n	800657c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2200      	movs	r2, #0
 8006574:	2102      	movs	r1, #2
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff f946 	bl	8005808 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2103      	movs	r1, #3
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff f92a 	bl	80057dc <LL_ADC_GetOffsetChannel>
 8006588:	4603      	mov	r3, r0
 800658a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10a      	bne.n	80065a8 <HAL_ADC_ConfigChannel+0x398>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2103      	movs	r1, #3
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff f91f 	bl	80057dc <LL_ADC_GetOffsetChannel>
 800659e:	4603      	mov	r3, r0
 80065a0:	0e9b      	lsrs	r3, r3, #26
 80065a2:	f003 021f 	and.w	r2, r3, #31
 80065a6:	e017      	b.n	80065d8 <HAL_ADC_ConfigChannel+0x3c8>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2103      	movs	r1, #3
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7ff f914 	bl	80057dc <LL_ADC_GetOffsetChannel>
 80065b4:	4603      	mov	r3, r0
 80065b6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065ba:	fa93 f3a3 	rbit	r3, r3
 80065be:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80065c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80065c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80065ca:	2320      	movs	r3, #32
 80065cc:	e003      	b.n	80065d6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80065ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065d0:	fab3 f383 	clz	r3, r3
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d105      	bne.n	80065f0 <HAL_ADC_ConfigChannel+0x3e0>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	0e9b      	lsrs	r3, r3, #26
 80065ea:	f003 031f 	and.w	r3, r3, #31
 80065ee:	e011      	b.n	8006614 <HAL_ADC_ConfigChannel+0x404>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065f8:	fa93 f3a3 	rbit	r3, r3
 80065fc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80065fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006600:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8006602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8006608:	2320      	movs	r3, #32
 800660a:	e003      	b.n	8006614 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800660c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800660e:	fab3 f383 	clz	r3, r3
 8006612:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006614:	429a      	cmp	r2, r3
 8006616:	d106      	bne.n	8006626 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2200      	movs	r2, #0
 800661e:	2103      	movs	r1, #3
 8006620:	4618      	mov	r0, r3
 8006622:	f7ff f8f1 	bl	8005808 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4618      	mov	r0, r3
 800662c:	f7ff fa0a 	bl	8005a44 <LL_ADC_IsEnabled>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	f040 8140 	bne.w	80068b8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6818      	ldr	r0, [r3, #0]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	6819      	ldr	r1, [r3, #0]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	461a      	mov	r2, r3
 8006646:	f7ff f977 	bl	8005938 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	4a8f      	ldr	r2, [pc, #572]	; (800688c <HAL_ADC_ConfigChannel+0x67c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	f040 8131 	bne.w	80068b8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10b      	bne.n	800667e <HAL_ADC_ConfigChannel+0x46e>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	0e9b      	lsrs	r3, r3, #26
 800666c:	3301      	adds	r3, #1
 800666e:	f003 031f 	and.w	r3, r3, #31
 8006672:	2b09      	cmp	r3, #9
 8006674:	bf94      	ite	ls
 8006676:	2301      	movls	r3, #1
 8006678:	2300      	movhi	r3, #0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	e019      	b.n	80066b2 <HAL_ADC_ConfigChannel+0x4a2>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006684:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006686:	fa93 f3a3 	rbit	r3, r3
 800668a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800668c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800668e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8006696:	2320      	movs	r3, #32
 8006698:	e003      	b.n	80066a2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800669a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800669c:	fab3 f383 	clz	r3, r3
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	3301      	adds	r3, #1
 80066a4:	f003 031f 	and.w	r3, r3, #31
 80066a8:	2b09      	cmp	r3, #9
 80066aa:	bf94      	ite	ls
 80066ac:	2301      	movls	r3, #1
 80066ae:	2300      	movhi	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d079      	beq.n	80067aa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d107      	bne.n	80066d2 <HAL_ADC_ConfigChannel+0x4c2>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	0e9b      	lsrs	r3, r3, #26
 80066c8:	3301      	adds	r3, #1
 80066ca:	069b      	lsls	r3, r3, #26
 80066cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066d0:	e015      	b.n	80066fe <HAL_ADC_ConfigChannel+0x4ee>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066da:	fa93 f3a3 	rbit	r3, r3
 80066de:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80066e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80066e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80066ea:	2320      	movs	r3, #32
 80066ec:	e003      	b.n	80066f6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80066ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f0:	fab3 f383 	clz	r3, r3
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	3301      	adds	r3, #1
 80066f8:	069b      	lsls	r3, r3, #26
 80066fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <HAL_ADC_ConfigChannel+0x50e>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	0e9b      	lsrs	r3, r3, #26
 8006710:	3301      	adds	r3, #1
 8006712:	f003 031f 	and.w	r3, r3, #31
 8006716:	2101      	movs	r1, #1
 8006718:	fa01 f303 	lsl.w	r3, r1, r3
 800671c:	e017      	b.n	800674e <HAL_ADC_ConfigChannel+0x53e>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006726:	fa93 f3a3 	rbit	r3, r3
 800672a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800672c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8006736:	2320      	movs	r3, #32
 8006738:	e003      	b.n	8006742 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800673a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800673c:	fab3 f383 	clz	r3, r3
 8006740:	b2db      	uxtb	r3, r3
 8006742:	3301      	adds	r3, #1
 8006744:	f003 031f 	and.w	r3, r3, #31
 8006748:	2101      	movs	r1, #1
 800674a:	fa01 f303 	lsl.w	r3, r1, r3
 800674e:	ea42 0103 	orr.w	r1, r2, r3
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <HAL_ADC_ConfigChannel+0x564>
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	0e9b      	lsrs	r3, r3, #26
 8006764:	3301      	adds	r3, #1
 8006766:	f003 021f 	and.w	r2, r3, #31
 800676a:	4613      	mov	r3, r2
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	4413      	add	r3, r2
 8006770:	051b      	lsls	r3, r3, #20
 8006772:	e018      	b.n	80067a6 <HAL_ADC_ConfigChannel+0x596>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800677a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677c:	fa93 f3a3 	rbit	r3, r3
 8006780:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800678c:	2320      	movs	r3, #32
 800678e:	e003      	b.n	8006798 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8006790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006792:	fab3 f383 	clz	r3, r3
 8006796:	b2db      	uxtb	r3, r3
 8006798:	3301      	adds	r3, #1
 800679a:	f003 021f 	and.w	r2, r3, #31
 800679e:	4613      	mov	r3, r2
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	4413      	add	r3, r2
 80067a4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067a6:	430b      	orrs	r3, r1
 80067a8:	e081      	b.n	80068ae <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d107      	bne.n	80067c6 <HAL_ADC_ConfigChannel+0x5b6>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	0e9b      	lsrs	r3, r3, #26
 80067bc:	3301      	adds	r3, #1
 80067be:	069b      	lsls	r3, r3, #26
 80067c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80067c4:	e015      	b.n	80067f2 <HAL_ADC_ConfigChannel+0x5e2>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ce:	fa93 f3a3 	rbit	r3, r3
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80067de:	2320      	movs	r3, #32
 80067e0:	e003      	b.n	80067ea <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e4:	fab3 f383 	clz	r3, r3
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	3301      	adds	r3, #1
 80067ec:	069b      	lsls	r3, r3, #26
 80067ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d109      	bne.n	8006812 <HAL_ADC_ConfigChannel+0x602>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	0e9b      	lsrs	r3, r3, #26
 8006804:	3301      	adds	r3, #1
 8006806:	f003 031f 	and.w	r3, r3, #31
 800680a:	2101      	movs	r1, #1
 800680c:	fa01 f303 	lsl.w	r3, r1, r3
 8006810:	e017      	b.n	8006842 <HAL_ADC_ConfigChannel+0x632>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	fa93 f3a3 	rbit	r3, r3
 800681e:	61bb      	str	r3, [r7, #24]
  return result;
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d101      	bne.n	800682e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800682a:	2320      	movs	r3, #32
 800682c:	e003      	b.n	8006836 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	fab3 f383 	clz	r3, r3
 8006834:	b2db      	uxtb	r3, r3
 8006836:	3301      	adds	r3, #1
 8006838:	f003 031f 	and.w	r3, r3, #31
 800683c:	2101      	movs	r1, #1
 800683e:	fa01 f303 	lsl.w	r3, r1, r3
 8006842:	ea42 0103 	orr.w	r1, r2, r3
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10d      	bne.n	800686e <HAL_ADC_ConfigChannel+0x65e>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	0e9b      	lsrs	r3, r3, #26
 8006858:	3301      	adds	r3, #1
 800685a:	f003 021f 	and.w	r2, r3, #31
 800685e:	4613      	mov	r3, r2
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	4413      	add	r3, r2
 8006864:	3b1e      	subs	r3, #30
 8006866:	051b      	lsls	r3, r3, #20
 8006868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800686c:	e01e      	b.n	80068ac <HAL_ADC_ConfigChannel+0x69c>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	fa93 f3a3 	rbit	r3, r3
 800687a:	60fb      	str	r3, [r7, #12]
  return result;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d104      	bne.n	8006890 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8006886:	2320      	movs	r3, #32
 8006888:	e006      	b.n	8006898 <HAL_ADC_ConfigChannel+0x688>
 800688a:	bf00      	nop
 800688c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	fab3 f383 	clz	r3, r3
 8006896:	b2db      	uxtb	r3, r3
 8006898:	3301      	adds	r3, #1
 800689a:	f003 021f 	and.w	r2, r3, #31
 800689e:	4613      	mov	r3, r2
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	4413      	add	r3, r2
 80068a4:	3b1e      	subs	r3, #30
 80068a6:	051b      	lsls	r3, r3, #20
 80068a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068b2:	4619      	mov	r1, r3
 80068b4:	f7ff f815 	bl	80058e2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	4b3d      	ldr	r3, [pc, #244]	; (80069b4 <HAL_ADC_ConfigChannel+0x7a4>)
 80068be:	4013      	ands	r3, r2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d06c      	beq.n	800699e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068c4:	483c      	ldr	r0, [pc, #240]	; (80069b8 <HAL_ADC_ConfigChannel+0x7a8>)
 80068c6:	f7fe ff57 	bl	8005778 <LL_ADC_GetCommonPathInternalCh>
 80068ca:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a3a      	ldr	r2, [pc, #232]	; (80069bc <HAL_ADC_ConfigChannel+0x7ac>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d127      	bne.n	8006928 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80068d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d121      	bne.n	8006928 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a35      	ldr	r2, [pc, #212]	; (80069c0 <HAL_ADC_ConfigChannel+0x7b0>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d157      	bne.n	800699e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80068f6:	4619      	mov	r1, r3
 80068f8:	482f      	ldr	r0, [pc, #188]	; (80069b8 <HAL_ADC_ConfigChannel+0x7a8>)
 80068fa:	f7fe ff2a 	bl	8005752 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80068fe:	4b31      	ldr	r3, [pc, #196]	; (80069c4 <HAL_ADC_ConfigChannel+0x7b4>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	099b      	lsrs	r3, r3, #6
 8006904:	4a30      	ldr	r2, [pc, #192]	; (80069c8 <HAL_ADC_ConfigChannel+0x7b8>)
 8006906:	fba2 2303 	umull	r2, r3, r2, r3
 800690a:	099b      	lsrs	r3, r3, #6
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	4613      	mov	r3, r2
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	4413      	add	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006918:	e002      	b.n	8006920 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	3b01      	subs	r3, #1
 800691e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1f9      	bne.n	800691a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006926:	e03a      	b.n	800699e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a27      	ldr	r2, [pc, #156]	; (80069cc <HAL_ADC_ConfigChannel+0x7bc>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d113      	bne.n	800695a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006932:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10d      	bne.n	800695a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1f      	ldr	r2, [pc, #124]	; (80069c0 <HAL_ADC_ConfigChannel+0x7b0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d12a      	bne.n	800699e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006948:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800694c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006950:	4619      	mov	r1, r3
 8006952:	4819      	ldr	r0, [pc, #100]	; (80069b8 <HAL_ADC_ConfigChannel+0x7a8>)
 8006954:	f7fe fefd 	bl	8005752 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006958:	e021      	b.n	800699e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a1c      	ldr	r2, [pc, #112]	; (80069d0 <HAL_ADC_ConfigChannel+0x7c0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d11c      	bne.n	800699e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d116      	bne.n	800699e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a12      	ldr	r2, [pc, #72]	; (80069c0 <HAL_ADC_ConfigChannel+0x7b0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d111      	bne.n	800699e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800697a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800697e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006982:	4619      	mov	r1, r3
 8006984:	480c      	ldr	r0, [pc, #48]	; (80069b8 <HAL_ADC_ConfigChannel+0x7a8>)
 8006986:	f7fe fee4 	bl	8005752 <LL_ADC_SetCommonPathInternalCh>
 800698a:	e008      	b.n	800699e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006990:	f043 0220 	orr.w	r2, r3, #32
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80069a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	37d8      	adds	r7, #216	; 0xd8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	80080000 	.word	0x80080000
 80069b8:	50040300 	.word	0x50040300
 80069bc:	c7520000 	.word	0xc7520000
 80069c0:	50040000 	.word	0x50040000
 80069c4:	20000020 	.word	0x20000020
 80069c8:	053e2d63 	.word	0x053e2d63
 80069cc:	cb840000 	.word	0xcb840000
 80069d0:	80000001 	.word	0x80000001

080069d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80069dc:	2300      	movs	r3, #0
 80069de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7ff f82d 	bl	8005a44 <LL_ADC_IsEnabled>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d169      	bne.n	8006ac4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689a      	ldr	r2, [r3, #8]
 80069f6:	4b36      	ldr	r3, [pc, #216]	; (8006ad0 <ADC_Enable+0xfc>)
 80069f8:	4013      	ands	r3, r2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00d      	beq.n	8006a1a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a02:	f043 0210 	orr.w	r2, r3, #16
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0e:	f043 0201 	orr.w	r2, r3, #1
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e055      	b.n	8006ac6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe fffc 	bl	8005a1c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006a24:	482b      	ldr	r0, [pc, #172]	; (8006ad4 <ADC_Enable+0x100>)
 8006a26:	f7fe fea7 	bl	8005778 <LL_ADC_GetCommonPathInternalCh>
 8006a2a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006a2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d013      	beq.n	8006a5c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006a34:	4b28      	ldr	r3, [pc, #160]	; (8006ad8 <ADC_Enable+0x104>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	099b      	lsrs	r3, r3, #6
 8006a3a:	4a28      	ldr	r2, [pc, #160]	; (8006adc <ADC_Enable+0x108>)
 8006a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a40:	099b      	lsrs	r3, r3, #6
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	4613      	mov	r3, r2
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	4413      	add	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006a4e:	e002      	b.n	8006a56 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1f9      	bne.n	8006a50 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006a5c:	f7fe fe36 	bl	80056cc <HAL_GetTick>
 8006a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a62:	e028      	b.n	8006ab6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fe ffeb 	bl	8005a44 <LL_ADC_IsEnabled>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d104      	bne.n	8006a7e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fe ffcf 	bl	8005a1c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006a7e:	f7fe fe25 	bl	80056cc <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d914      	bls.n	8006ab6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d00d      	beq.n	8006ab6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9e:	f043 0210 	orr.w	r2, r3, #16
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aaa:	f043 0201 	orr.w	r2, r3, #1
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e007      	b.n	8006ac6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d1cf      	bne.n	8006a64 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	8000003f 	.word	0x8000003f
 8006ad4:	50040300 	.word	0x50040300
 8006ad8:	20000020 	.word	0x20000020
 8006adc:	053e2d63 	.word	0x053e2d63

08006ae0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d14b      	bne.n	8006b92 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0308 	and.w	r3, r3, #8
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d021      	beq.n	8006b58 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fe fe90 	bl	800583e <LL_ADC_REG_IsTriggerSourceSWStart>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d032      	beq.n	8006b8a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d12b      	bne.n	8006b8a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d11f      	bne.n	8006b8a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4e:	f043 0201 	orr.w	r2, r3, #1
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	655a      	str	r2, [r3, #84]	; 0x54
 8006b56:	e018      	b.n	8006b8a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d111      	bne.n	8006b8a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d105      	bne.n	8006b8a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b82:	f043 0201 	orr.w	r2, r3, #1
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7fa fb2c 	bl	80011e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006b90:	e00e      	b.n	8006bb0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b96:	f003 0310 	and.w	r3, r3, #16
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f7ff fb2c 	bl	80061fc <HAL_ADC_ErrorCallback>
}
 8006ba4:	e004      	b.n	8006bb0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	4798      	blx	r3
}
 8006bb0:	bf00      	nop
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f7ff fb04 	bl	80061d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006bcc:	bf00      	nop
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf2:	f043 0204 	orr.w	r2, r3, #4
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f7ff fafe 	bl	80061fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c00:	bf00      	nop
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c7c:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006c88:	4013      	ands	r3, r2
 8006c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c9e:	4a04      	ldr	r2, [pc, #16]	; (8006cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	60d3      	str	r3, [r2, #12]
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	e000ed00 	.word	0xe000ed00

08006cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cb8:	4b04      	ldr	r3, [pc, #16]	; (8006ccc <__NVIC_GetPriorityGrouping+0x18>)
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	0a1b      	lsrs	r3, r3, #8
 8006cbe:	f003 0307 	and.w	r3, r3, #7
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	e000ed00 	.word	0xe000ed00

08006cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	db0b      	blt.n	8006cfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ce2:	79fb      	ldrb	r3, [r7, #7]
 8006ce4:	f003 021f 	and.w	r2, r3, #31
 8006ce8:	4907      	ldr	r1, [pc, #28]	; (8006d08 <__NVIC_EnableIRQ+0x38>)
 8006cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cee:	095b      	lsrs	r3, r3, #5
 8006cf0:	2001      	movs	r0, #1
 8006cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8006cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	e000e100 	.word	0xe000e100

08006d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	4603      	mov	r3, r0
 8006d14:	6039      	str	r1, [r7, #0]
 8006d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	db0a      	blt.n	8006d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	490c      	ldr	r1, [pc, #48]	; (8006d58 <__NVIC_SetPriority+0x4c>)
 8006d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d2a:	0112      	lsls	r2, r2, #4
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	440b      	add	r3, r1
 8006d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d34:	e00a      	b.n	8006d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	4908      	ldr	r1, [pc, #32]	; (8006d5c <__NVIC_SetPriority+0x50>)
 8006d3c:	79fb      	ldrb	r3, [r7, #7]
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	3b04      	subs	r3, #4
 8006d44:	0112      	lsls	r2, r2, #4
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	440b      	add	r3, r1
 8006d4a:	761a      	strb	r2, [r3, #24]
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	e000e100 	.word	0xe000e100
 8006d5c:	e000ed00 	.word	0xe000ed00

08006d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b089      	sub	sp, #36	; 0x24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	f1c3 0307 	rsb	r3, r3, #7
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	bf28      	it	cs
 8006d7e:	2304      	movcs	r3, #4
 8006d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	3304      	adds	r3, #4
 8006d86:	2b06      	cmp	r3, #6
 8006d88:	d902      	bls.n	8006d90 <NVIC_EncodePriority+0x30>
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	3b03      	subs	r3, #3
 8006d8e:	e000      	b.n	8006d92 <NVIC_EncodePriority+0x32>
 8006d90:	2300      	movs	r3, #0
 8006d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d94:	f04f 32ff 	mov.w	r2, #4294967295
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9e:	43da      	mvns	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	401a      	ands	r2, r3
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006da8:	f04f 31ff 	mov.w	r1, #4294967295
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	fa01 f303 	lsl.w	r3, r1, r3
 8006db2:	43d9      	mvns	r1, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006db8:	4313      	orrs	r3, r2
         );
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3724      	adds	r7, #36	; 0x24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
	...

08006dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006dd8:	d301      	bcc.n	8006dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e00f      	b.n	8006dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006dde:	4a0a      	ldr	r2, [pc, #40]	; (8006e08 <SysTick_Config+0x40>)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006de6:	210f      	movs	r1, #15
 8006de8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dec:	f7ff ff8e 	bl	8006d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006df0:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <SysTick_Config+0x40>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006df6:	4b04      	ldr	r3, [pc, #16]	; (8006e08 <SysTick_Config+0x40>)
 8006df8:	2207      	movs	r2, #7
 8006dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	e000e010 	.word	0xe000e010

08006e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7ff ff29 	bl	8006c6c <__NVIC_SetPriorityGrouping>
}
 8006e1a:	bf00      	nop
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b086      	sub	sp, #24
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	4603      	mov	r3, r0
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	607a      	str	r2, [r7, #4]
 8006e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006e30:	2300      	movs	r3, #0
 8006e32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006e34:	f7ff ff3e 	bl	8006cb4 <__NVIC_GetPriorityGrouping>
 8006e38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	68b9      	ldr	r1, [r7, #8]
 8006e3e:	6978      	ldr	r0, [r7, #20]
 8006e40:	f7ff ff8e 	bl	8006d60 <NVIC_EncodePriority>
 8006e44:	4602      	mov	r2, r0
 8006e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7ff ff5d 	bl	8006d0c <__NVIC_SetPriority>
}
 8006e52:	bf00      	nop
 8006e54:	3718      	adds	r7, #24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b082      	sub	sp, #8
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	4603      	mov	r3, r0
 8006e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff ff31 	bl	8006cd0 <__NVIC_EnableIRQ>
}
 8006e6e:	bf00      	nop
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff ffa2 	bl	8006dc8 <SysTick_Config>
 8006e84:	4603      	mov	r3, r0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
	...

08006e90 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e098      	b.n	8006fd4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	4b4d      	ldr	r3, [pc, #308]	; (8006fe0 <HAL_DMA_Init+0x150>)
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d80f      	bhi.n	8006ece <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	4b4b      	ldr	r3, [pc, #300]	; (8006fe4 <HAL_DMA_Init+0x154>)
 8006eb6:	4413      	add	r3, r2
 8006eb8:	4a4b      	ldr	r2, [pc, #300]	; (8006fe8 <HAL_DMA_Init+0x158>)
 8006eba:	fba2 2303 	umull	r2, r3, r2, r3
 8006ebe:	091b      	lsrs	r3, r3, #4
 8006ec0:	009a      	lsls	r2, r3, #2
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a48      	ldr	r2, [pc, #288]	; (8006fec <HAL_DMA_Init+0x15c>)
 8006eca:	641a      	str	r2, [r3, #64]	; 0x40
 8006ecc:	e00e      	b.n	8006eec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	4b46      	ldr	r3, [pc, #280]	; (8006ff0 <HAL_DMA_Init+0x160>)
 8006ed6:	4413      	add	r3, r2
 8006ed8:	4a43      	ldr	r2, [pc, #268]	; (8006fe8 <HAL_DMA_Init+0x158>)
 8006eda:	fba2 2303 	umull	r2, r3, r2, r3
 8006ede:	091b      	lsrs	r3, r3, #4
 8006ee0:	009a      	lsls	r2, r3, #2
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a42      	ldr	r2, [pc, #264]	; (8006ff4 <HAL_DMA_Init+0x164>)
 8006eea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f46:	d039      	beq.n	8006fbc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	4a27      	ldr	r2, [pc, #156]	; (8006fec <HAL_DMA_Init+0x15c>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d11a      	bne.n	8006f88 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006f52:	4b29      	ldr	r3, [pc, #164]	; (8006ff8 <HAL_DMA_Init+0x168>)
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5a:	f003 031c 	and.w	r3, r3, #28
 8006f5e:	210f      	movs	r1, #15
 8006f60:	fa01 f303 	lsl.w	r3, r1, r3
 8006f64:	43db      	mvns	r3, r3
 8006f66:	4924      	ldr	r1, [pc, #144]	; (8006ff8 <HAL_DMA_Init+0x168>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006f6c:	4b22      	ldr	r3, [pc, #136]	; (8006ff8 <HAL_DMA_Init+0x168>)
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6859      	ldr	r1, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f78:	f003 031c 	and.w	r3, r3, #28
 8006f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f80:	491d      	ldr	r1, [pc, #116]	; (8006ff8 <HAL_DMA_Init+0x168>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	600b      	str	r3, [r1, #0]
 8006f86:	e019      	b.n	8006fbc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006f88:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <HAL_DMA_Init+0x16c>)
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f90:	f003 031c 	and.w	r3, r3, #28
 8006f94:	210f      	movs	r1, #15
 8006f96:	fa01 f303 	lsl.w	r3, r1, r3
 8006f9a:	43db      	mvns	r3, r3
 8006f9c:	4917      	ldr	r1, [pc, #92]	; (8006ffc <HAL_DMA_Init+0x16c>)
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006fa2:	4b16      	ldr	r3, [pc, #88]	; (8006ffc <HAL_DMA_Init+0x16c>)
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6859      	ldr	r1, [r3, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fae:	f003 031c 	and.w	r3, r3, #28
 8006fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb6:	4911      	ldr	r1, [pc, #68]	; (8006ffc <HAL_DMA_Init+0x16c>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	40020407 	.word	0x40020407
 8006fe4:	bffdfff8 	.word	0xbffdfff8
 8006fe8:	cccccccd 	.word	0xcccccccd
 8006fec:	40020000 	.word	0x40020000
 8006ff0:	bffdfbf8 	.word	0xbffdfbf8
 8006ff4:	40020400 	.word	0x40020400
 8006ff8:	400200a8 	.word	0x400200a8
 8006ffc:	400204a8 	.word	0x400204a8

08007000 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007018:	2b01      	cmp	r3, #1
 800701a:	d101      	bne.n	8007020 <HAL_DMA_Start_IT+0x20>
 800701c:	2302      	movs	r3, #2
 800701e:	e04b      	b.n	80070b8 <HAL_DMA_Start_IT+0xb8>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b01      	cmp	r3, #1
 8007032:	d13a      	bne.n	80070aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0201 	bic.w	r2, r2, #1
 8007050:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 f96b 	bl	8007334 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007062:	2b00      	cmp	r3, #0
 8007064:	d008      	beq.n	8007078 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f042 020e 	orr.w	r2, r2, #14
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	e00f      	b.n	8007098 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0204 	bic.w	r2, r2, #4
 8007086:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 020a 	orr.w	r2, r2, #10
 8007096:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0201 	orr.w	r2, r2, #1
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	e005      	b.n	80070b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80070b2:	2302      	movs	r3, #2
 80070b4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80070b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d008      	beq.n	80070ea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2204      	movs	r2, #4
 80070dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e022      	b.n	8007130 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 020e 	bic.w	r2, r2, #14
 80070f8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0201 	bic.w	r2, r2, #1
 8007108:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710e:	f003 021c 	and.w	r2, r3, #28
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	2101      	movs	r1, #1
 8007118:	fa01 f202 	lsl.w	r2, r1, r2
 800711c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800712e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007130:	4618      	mov	r0, r3
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007144:	2300      	movs	r3, #0
 8007146:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b02      	cmp	r3, #2
 8007152:	d005      	beq.n	8007160 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2204      	movs	r2, #4
 8007158:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	73fb      	strb	r3, [r7, #15]
 800715e:	e029      	b.n	80071b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 020e 	bic.w	r2, r2, #14
 800716e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0201 	bic.w	r2, r2, #1
 800717e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007184:	f003 021c 	and.w	r2, r3, #28
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718c:	2101      	movs	r1, #1
 800718e:	fa01 f202 	lsl.w	r2, r1, r2
 8007192:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	4798      	blx	r3
    }
  }
  return status;
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071da:	f003 031c 	and.w	r3, r3, #28
 80071de:	2204      	movs	r2, #4
 80071e0:	409a      	lsls	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	4013      	ands	r3, r2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d026      	beq.n	8007238 <HAL_DMA_IRQHandler+0x7a>
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f003 0304 	and.w	r3, r3, #4
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d021      	beq.n	8007238 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d107      	bne.n	8007212 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0204 	bic.w	r2, r2, #4
 8007210:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007216:	f003 021c 	and.w	r2, r3, #28
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	2104      	movs	r1, #4
 8007220:	fa01 f202 	lsl.w	r2, r1, r2
 8007224:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722a:	2b00      	cmp	r3, #0
 800722c:	d071      	beq.n	8007312 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007236:	e06c      	b.n	8007312 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723c:	f003 031c 	and.w	r3, r3, #28
 8007240:	2202      	movs	r2, #2
 8007242:	409a      	lsls	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4013      	ands	r3, r2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d02e      	beq.n	80072aa <HAL_DMA_IRQHandler+0xec>
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d029      	beq.n	80072aa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0320 	and.w	r3, r3, #32
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10b      	bne.n	800727c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 020a 	bic.w	r2, r2, #10
 8007272:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007280:	f003 021c 	and.w	r2, r3, #28
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007288:	2102      	movs	r1, #2
 800728a:	fa01 f202 	lsl.w	r2, r1, r2
 800728e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	2b00      	cmp	r3, #0
 800729e:	d038      	beq.n	8007312 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80072a8:	e033      	b.n	8007312 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ae:	f003 031c 	and.w	r3, r3, #28
 80072b2:	2208      	movs	r2, #8
 80072b4:	409a      	lsls	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4013      	ands	r3, r2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d02a      	beq.n	8007314 <HAL_DMA_IRQHandler+0x156>
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f003 0308 	and.w	r3, r3, #8
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d025      	beq.n	8007314 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 020e 	bic.w	r2, r2, #14
 80072d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072dc:	f003 021c 	and.w	r2, r3, #28
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e4:	2101      	movs	r1, #1
 80072e6:	fa01 f202 	lsl.w	r2, r1, r2
 80072ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007306:	2b00      	cmp	r3, #0
 8007308:	d004      	beq.n	8007314 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007312:	bf00      	nop
 8007314:	bf00      	nop
}
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8007328:	4618      	mov	r0, r3
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007346:	f003 021c 	and.w	r2, r3, #28
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	2101      	movs	r1, #1
 8007350:	fa01 f202 	lsl.w	r2, r1, r2
 8007354:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	2b10      	cmp	r3, #16
 8007364:	d108      	bne.n	8007378 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007376:	e007      	b.n	8007388 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	60da      	str	r2, [r3, #12]
}
 8007388:	bf00      	nop
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800739e:	2300      	movs	r3, #0
 80073a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80073a2:	e148      	b.n	8007636 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	2101      	movs	r1, #1
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	fa01 f303 	lsl.w	r3, r1, r3
 80073b0:	4013      	ands	r3, r2
 80073b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 813a 	beq.w	8007630 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f003 0303 	and.w	r3, r3, #3
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d005      	beq.n	80073d4 <HAL_GPIO_Init+0x40>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f003 0303 	and.w	r3, r3, #3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d130      	bne.n	8007436 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	2203      	movs	r2, #3
 80073e0:	fa02 f303 	lsl.w	r3, r2, r3
 80073e4:	43db      	mvns	r3, r3
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	4013      	ands	r3, r2
 80073ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	fa02 f303 	lsl.w	r3, r2, r3
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800740a:	2201      	movs	r2, #1
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	43db      	mvns	r3, r3
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4013      	ands	r3, r2
 8007418:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	091b      	lsrs	r3, r3, #4
 8007420:	f003 0201 	and.w	r2, r3, #1
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	fa02 f303 	lsl.w	r3, r2, r3
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f003 0303 	and.w	r3, r3, #3
 800743e:	2b03      	cmp	r3, #3
 8007440:	d017      	beq.n	8007472 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	005b      	lsls	r3, r3, #1
 800744c:	2203      	movs	r2, #3
 800744e:	fa02 f303 	lsl.w	r3, r2, r3
 8007452:	43db      	mvns	r3, r3
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	4013      	ands	r3, r2
 8007458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	fa02 f303 	lsl.w	r3, r2, r3
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	4313      	orrs	r3, r2
 800746a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	2b02      	cmp	r3, #2
 800747c:	d123      	bne.n	80074c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	08da      	lsrs	r2, r3, #3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3208      	adds	r2, #8
 8007486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f003 0307 	and.w	r3, r3, #7
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	220f      	movs	r2, #15
 8007496:	fa02 f303 	lsl.w	r3, r2, r3
 800749a:	43db      	mvns	r3, r3
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	4013      	ands	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	691a      	ldr	r2, [r3, #16]
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	fa02 f303 	lsl.w	r3, r2, r3
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	08da      	lsrs	r2, r3, #3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3208      	adds	r2, #8
 80074c0:	6939      	ldr	r1, [r7, #16]
 80074c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	005b      	lsls	r3, r3, #1
 80074d0:	2203      	movs	r2, #3
 80074d2:	fa02 f303 	lsl.w	r3, r2, r3
 80074d6:	43db      	mvns	r3, r3
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	4013      	ands	r3, r2
 80074dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f003 0203 	and.w	r2, r3, #3
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	fa02 f303 	lsl.w	r3, r2, r3
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 8094 	beq.w	8007630 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007508:	4b52      	ldr	r3, [pc, #328]	; (8007654 <HAL_GPIO_Init+0x2c0>)
 800750a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800750c:	4a51      	ldr	r2, [pc, #324]	; (8007654 <HAL_GPIO_Init+0x2c0>)
 800750e:	f043 0301 	orr.w	r3, r3, #1
 8007512:	6613      	str	r3, [r2, #96]	; 0x60
 8007514:	4b4f      	ldr	r3, [pc, #316]	; (8007654 <HAL_GPIO_Init+0x2c0>)
 8007516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	60bb      	str	r3, [r7, #8]
 800751e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007520:	4a4d      	ldr	r2, [pc, #308]	; (8007658 <HAL_GPIO_Init+0x2c4>)
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	089b      	lsrs	r3, r3, #2
 8007526:	3302      	adds	r3, #2
 8007528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800752c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f003 0303 	and.w	r3, r3, #3
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	220f      	movs	r2, #15
 8007538:	fa02 f303 	lsl.w	r3, r2, r3
 800753c:	43db      	mvns	r3, r3
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	4013      	ands	r3, r2
 8007542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800754a:	d00d      	beq.n	8007568 <HAL_GPIO_Init+0x1d4>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a43      	ldr	r2, [pc, #268]	; (800765c <HAL_GPIO_Init+0x2c8>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d007      	beq.n	8007564 <HAL_GPIO_Init+0x1d0>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a42      	ldr	r2, [pc, #264]	; (8007660 <HAL_GPIO_Init+0x2cc>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d101      	bne.n	8007560 <HAL_GPIO_Init+0x1cc>
 800755c:	2302      	movs	r3, #2
 800755e:	e004      	b.n	800756a <HAL_GPIO_Init+0x1d6>
 8007560:	2307      	movs	r3, #7
 8007562:	e002      	b.n	800756a <HAL_GPIO_Init+0x1d6>
 8007564:	2301      	movs	r3, #1
 8007566:	e000      	b.n	800756a <HAL_GPIO_Init+0x1d6>
 8007568:	2300      	movs	r3, #0
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	f002 0203 	and.w	r2, r2, #3
 8007570:	0092      	lsls	r2, r2, #2
 8007572:	4093      	lsls	r3, r2
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	4313      	orrs	r3, r2
 8007578:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800757a:	4937      	ldr	r1, [pc, #220]	; (8007658 <HAL_GPIO_Init+0x2c4>)
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	089b      	lsrs	r3, r3, #2
 8007580:	3302      	adds	r3, #2
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007588:	4b36      	ldr	r3, [pc, #216]	; (8007664 <HAL_GPIO_Init+0x2d0>)
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	43db      	mvns	r3, r3
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	4013      	ands	r3, r2
 8007596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80075ac:	4a2d      	ldr	r2, [pc, #180]	; (8007664 <HAL_GPIO_Init+0x2d0>)
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80075b2:	4b2c      	ldr	r3, [pc, #176]	; (8007664 <HAL_GPIO_Init+0x2d0>)
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	43db      	mvns	r3, r3
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	4013      	ands	r3, r2
 80075c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80075d6:	4a23      	ldr	r2, [pc, #140]	; (8007664 <HAL_GPIO_Init+0x2d0>)
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80075dc:	4b21      	ldr	r3, [pc, #132]	; (8007664 <HAL_GPIO_Init+0x2d0>)
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	43db      	mvns	r3, r3
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	4013      	ands	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007600:	4a18      	ldr	r2, [pc, #96]	; (8007664 <HAL_GPIO_Init+0x2d0>)
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007606:	4b17      	ldr	r3, [pc, #92]	; (8007664 <HAL_GPIO_Init+0x2d0>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	43db      	mvns	r3, r3
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	4013      	ands	r3, r2
 8007614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4313      	orrs	r3, r2
 8007628:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800762a:	4a0e      	ldr	r2, [pc, #56]	; (8007664 <HAL_GPIO_Init+0x2d0>)
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	3301      	adds	r3, #1
 8007634:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	fa22 f303 	lsr.w	r3, r2, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	f47f aeaf 	bne.w	80073a4 <HAL_GPIO_Init+0x10>
  }
}
 8007646:	bf00      	nop
 8007648:	bf00      	nop
 800764a:	371c      	adds	r7, #28
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	40021000 	.word	0x40021000
 8007658:	40010000 	.word	0x40010000
 800765c:	48000400 	.word	0x48000400
 8007660:	48000800 	.word	0x48000800
 8007664:	40010400 	.word	0x40010400

08007668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	807b      	strh	r3, [r7, #2]
 8007674:	4613      	mov	r3, r2
 8007676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007678:	787b      	ldrb	r3, [r7, #1]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800767e:	887a      	ldrh	r2, [r7, #2]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007684:	e002      	b.n	800768c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007686:	887a      	ldrh	r2, [r7, #2]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80076a2:	4b08      	ldr	r3, [pc, #32]	; (80076c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80076a4:	695a      	ldr	r2, [r3, #20]
 80076a6:	88fb      	ldrh	r3, [r7, #6]
 80076a8:	4013      	ands	r3, r2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d006      	beq.n	80076bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80076ae:	4a05      	ldr	r2, [pc, #20]	; (80076c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80076b0:	88fb      	ldrh	r3, [r7, #6]
 80076b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80076b4:	88fb      	ldrh	r3, [r7, #6]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fa f84e 	bl	8001758 <HAL_GPIO_EXTI_Callback>
  }
}
 80076bc:	bf00      	nop
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	40010400 	.word	0x40010400

080076c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e08d      	b.n	80077f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d106      	bne.n	80076f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7f9 ff74 	bl	80015dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2224      	movs	r2, #36	; 0x24
 80076f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 0201 	bic.w	r2, r2, #1
 800770a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007718:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007728:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d107      	bne.n	8007742 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	689a      	ldr	r2, [r3, #8]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800773e:	609a      	str	r2, [r3, #8]
 8007740:	e006      	b.n	8007750 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689a      	ldr	r2, [r3, #8]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800774e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	2b02      	cmp	r3, #2
 8007756:	d108      	bne.n	800776a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007766:	605a      	str	r2, [r3, #4]
 8007768:	e007      	b.n	800777a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007778:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	6812      	ldr	r2, [r2, #0]
 8007784:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800778c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800779c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691a      	ldr	r2, [r3, #16]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	69d9      	ldr	r1, [r3, #28]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a1a      	ldr	r2, [r3, #32]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	430a      	orrs	r2, r1
 80077c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0201 	orr.w	r2, r2, #1
 80077d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af02      	add	r7, sp, #8
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	4608      	mov	r0, r1
 800780a:	4611      	mov	r1, r2
 800780c:	461a      	mov	r2, r3
 800780e:	4603      	mov	r3, r0
 8007810:	817b      	strh	r3, [r7, #10]
 8007812:	460b      	mov	r3, r1
 8007814:	813b      	strh	r3, [r7, #8]
 8007816:	4613      	mov	r3, r2
 8007818:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b20      	cmp	r3, #32
 8007824:	f040 80f9 	bne.w	8007a1a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <HAL_I2C_Mem_Write+0x34>
 800782e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007830:	2b00      	cmp	r3, #0
 8007832:	d105      	bne.n	8007840 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800783a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e0ed      	b.n	8007a1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007846:	2b01      	cmp	r3, #1
 8007848:	d101      	bne.n	800784e <HAL_I2C_Mem_Write+0x4e>
 800784a:	2302      	movs	r3, #2
 800784c:	e0e6      	b.n	8007a1c <HAL_I2C_Mem_Write+0x21c>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007856:	f7fd ff39 	bl	80056cc <HAL_GetTick>
 800785a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	2319      	movs	r3, #25
 8007862:	2201      	movs	r2, #1
 8007864:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f000 f955 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d001      	beq.n	8007878 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e0d1      	b.n	8007a1c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2221      	movs	r2, #33	; 0x21
 800787c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2240      	movs	r2, #64	; 0x40
 8007884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6a3a      	ldr	r2, [r7, #32]
 8007892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007898:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078a0:	88f8      	ldrh	r0, [r7, #6]
 80078a2:	893a      	ldrh	r2, [r7, #8]
 80078a4:	8979      	ldrh	r1, [r7, #10]
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	9301      	str	r3, [sp, #4]
 80078aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	4603      	mov	r3, r0
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 f8b9 	bl	8007a28 <I2C_RequestMemoryWrite>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d005      	beq.n	80078c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e0a9      	b.n	8007a1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	2bff      	cmp	r3, #255	; 0xff
 80078d0:	d90e      	bls.n	80078f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	22ff      	movs	r2, #255	; 0xff
 80078d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	8979      	ldrh	r1, [r7, #10]
 80078e0:	2300      	movs	r3, #0
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 facf 	bl	8007e8c <I2C_TransferConfig>
 80078ee:	e00f      	b.n	8007910 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	8979      	ldrh	r1, [r7, #10]
 8007902:	2300      	movs	r3, #0
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 fabe 	bl	8007e8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 f94e 	bl	8007bb6 <I2C_WaitOnTXISFlagUntilTimeout>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e07b      	b.n	8007a1c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	781a      	ldrb	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800794c:	3b01      	subs	r3, #1
 800794e:	b29a      	uxth	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007958:	b29b      	uxth	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d034      	beq.n	80079c8 <HAL_I2C_Mem_Write+0x1c8>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007962:	2b00      	cmp	r3, #0
 8007964:	d130      	bne.n	80079c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796c:	2200      	movs	r2, #0
 800796e:	2180      	movs	r1, #128	; 0x80
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 f8d1 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e04d      	b.n	8007a1c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007984:	b29b      	uxth	r3, r3
 8007986:	2bff      	cmp	r3, #255	; 0xff
 8007988:	d90e      	bls.n	80079a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	22ff      	movs	r2, #255	; 0xff
 800798e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007994:	b2da      	uxtb	r2, r3
 8007996:	8979      	ldrh	r1, [r7, #10]
 8007998:	2300      	movs	r3, #0
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f000 fa73 	bl	8007e8c <I2C_TransferConfig>
 80079a6:	e00f      	b.n	80079c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	8979      	ldrh	r1, [r7, #10]
 80079ba:	2300      	movs	r3, #0
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 fa62 	bl	8007e8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d19e      	bne.n	8007910 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 f934 	bl	8007c44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e01a      	b.n	8007a1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2220      	movs	r2, #32
 80079ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	6859      	ldr	r1, [r3, #4]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	4b0a      	ldr	r3, [pc, #40]	; (8007a24 <HAL_I2C_Mem_Write+0x224>)
 80079fa:	400b      	ands	r3, r1
 80079fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	e000      	b.n	8007a1c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007a1a:	2302      	movs	r3, #2
  }
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	fe00e800 	.word	0xfe00e800

08007a28 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af02      	add	r7, sp, #8
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	4608      	mov	r0, r1
 8007a32:	4611      	mov	r1, r2
 8007a34:	461a      	mov	r2, r3
 8007a36:	4603      	mov	r3, r0
 8007a38:	817b      	strh	r3, [r7, #10]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	813b      	strh	r3, [r7, #8]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007a42:	88fb      	ldrh	r3, [r7, #6]
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	8979      	ldrh	r1, [r7, #10]
 8007a48:	4b20      	ldr	r3, [pc, #128]	; (8007acc <I2C_RequestMemoryWrite+0xa4>)
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 fa1b 	bl	8007e8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a56:	69fa      	ldr	r2, [r7, #28]
 8007a58:	69b9      	ldr	r1, [r7, #24]
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 f8ab 	bl	8007bb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e02c      	b.n	8007ac4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a6a:	88fb      	ldrh	r3, [r7, #6]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d105      	bne.n	8007a7c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a70:	893b      	ldrh	r3, [r7, #8]
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	629a      	str	r2, [r3, #40]	; 0x28
 8007a7a:	e015      	b.n	8007aa8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a7c:	893b      	ldrh	r3, [r7, #8]
 8007a7e:	0a1b      	lsrs	r3, r3, #8
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	69b9      	ldr	r1, [r7, #24]
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 f891 	bl	8007bb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e012      	b.n	8007ac4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a9e:	893b      	ldrh	r3, [r7, #8]
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2180      	movs	r1, #128	; 0x80
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 f830 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e000      	b.n	8007ac4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	80002000 	.word	0x80002000

08007ad0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d103      	bne.n	8007aee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2200      	movs	r2, #0
 8007aec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d007      	beq.n	8007b0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	699a      	ldr	r2, [r3, #24]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0201 	orr.w	r2, r2, #1
 8007b0a:	619a      	str	r2, [r3, #24]
  }
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	603b      	str	r3, [r7, #0]
 8007b24:	4613      	mov	r3, r2
 8007b26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b28:	e031      	b.n	8007b8e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b30:	d02d      	beq.n	8007b8e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b32:	f7fd fdcb 	bl	80056cc <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d302      	bcc.n	8007b48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d122      	bne.n	8007b8e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699a      	ldr	r2, [r3, #24]
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	4013      	ands	r3, r2
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	bf0c      	ite	eq
 8007b58:	2301      	moveq	r3, #1
 8007b5a:	2300      	movne	r3, #0
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	461a      	mov	r2, r3
 8007b60:	79fb      	ldrb	r3, [r7, #7]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d113      	bne.n	8007b8e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b6a:	f043 0220 	orr.w	r2, r3, #32
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2220      	movs	r2, #32
 8007b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e00f      	b.n	8007bae <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	699a      	ldr	r2, [r3, #24]
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	4013      	ands	r3, r2
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	bf0c      	ite	eq
 8007b9e:	2301      	moveq	r3, #1
 8007ba0:	2300      	movne	r3, #0
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	79fb      	ldrb	r3, [r7, #7]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d0be      	beq.n	8007b2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b084      	sub	sp, #16
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	60f8      	str	r0, [r7, #12]
 8007bbe:	60b9      	str	r1, [r7, #8]
 8007bc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007bc2:	e033      	b.n	8007c2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	68b9      	ldr	r1, [r7, #8]
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 f87f 	bl	8007ccc <I2C_IsErrorOccurred>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e031      	b.n	8007c3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bde:	d025      	beq.n	8007c2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007be0:	f7fd fd74 	bl	80056cc <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d302      	bcc.n	8007bf6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d11a      	bne.n	8007c2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	f003 0302 	and.w	r3, r3, #2
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d013      	beq.n	8007c2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c08:	f043 0220 	orr.w	r2, r3, #32
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e007      	b.n	8007c3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d1c4      	bne.n	8007bc4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c50:	e02f      	b.n	8007cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	68b9      	ldr	r1, [r7, #8]
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f000 f838 	bl	8007ccc <I2C_IsErrorOccurred>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d001      	beq.n	8007c66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e02d      	b.n	8007cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c66:	f7fd fd31 	bl	80056cc <HAL_GetTick>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d302      	bcc.n	8007c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d11a      	bne.n	8007cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	f003 0320 	and.w	r3, r3, #32
 8007c86:	2b20      	cmp	r3, #32
 8007c88:	d013      	beq.n	8007cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8e:	f043 0220 	orr.w	r2, r3, #32
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e007      	b.n	8007cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	f003 0320 	and.w	r3, r3, #32
 8007cbc:	2b20      	cmp	r3, #32
 8007cbe:	d1c8      	bne.n	8007c52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08a      	sub	sp, #40	; 0x28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	f003 0310 	and.w	r3, r3, #16
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d068      	beq.n	8007dca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2210      	movs	r2, #16
 8007cfe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d00:	e049      	b.n	8007d96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d08:	d045      	beq.n	8007d96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d0a:	f7fd fcdf 	bl	80056cc <HAL_GetTick>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d302      	bcc.n	8007d20 <I2C_IsErrorOccurred+0x54>
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d13a      	bne.n	8007d96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d42:	d121      	bne.n	8007d88 <I2C_IsErrorOccurred+0xbc>
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d4a:	d01d      	beq.n	8007d88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007d4c:	7cfb      	ldrb	r3, [r7, #19]
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	d01a      	beq.n	8007d88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007d62:	f7fd fcb3 	bl	80056cc <HAL_GetTick>
 8007d66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d68:	e00e      	b.n	8007d88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007d6a:	f7fd fcaf 	bl	80056cc <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	2b19      	cmp	r3, #25
 8007d76:	d907      	bls.n	8007d88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007d78:	6a3b      	ldr	r3, [r7, #32]
 8007d7a:	f043 0320 	orr.w	r3, r3, #32
 8007d7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007d86:	e006      	b.n	8007d96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b20      	cmp	r3, #32
 8007d94:	d1e9      	bne.n	8007d6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	f003 0320 	and.w	r3, r3, #32
 8007da0:	2b20      	cmp	r3, #32
 8007da2:	d003      	beq.n	8007dac <I2C_IsErrorOccurred+0xe0>
 8007da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d0aa      	beq.n	8007d02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d103      	bne.n	8007dbc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2220      	movs	r2, #32
 8007dba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	f043 0304 	orr.w	r3, r3, #4
 8007dc2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00b      	beq.n	8007df4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	f043 0301 	orr.w	r3, r3, #1
 8007de2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00b      	beq.n	8007e16 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	f043 0308 	orr.w	r3, r3, #8
 8007e04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00b      	beq.n	8007e38 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007e20:	6a3b      	ldr	r3, [r7, #32]
 8007e22:	f043 0302 	orr.w	r3, r3, #2
 8007e26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01c      	beq.n	8007e7a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f7ff fe45 	bl	8007ad0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	6859      	ldr	r1, [r3, #4]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	4b0d      	ldr	r3, [pc, #52]	; (8007e88 <I2C_IsErrorOccurred+0x1bc>)
 8007e52:	400b      	ands	r3, r1
 8007e54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	431a      	orrs	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2220      	movs	r2, #32
 8007e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3728      	adds	r7, #40	; 0x28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	fe00e800 	.word	0xfe00e800

08007e8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	607b      	str	r3, [r7, #4]
 8007e96:	460b      	mov	r3, r1
 8007e98:	817b      	strh	r3, [r7, #10]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e9e:	897b      	ldrh	r3, [r7, #10]
 8007ea0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ea4:	7a7b      	ldrb	r3, [r7, #9]
 8007ea6:	041b      	lsls	r3, r3, #16
 8007ea8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007eac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007eba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	0d5b      	lsrs	r3, r3, #21
 8007ec6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007eca:	4b08      	ldr	r3, [pc, #32]	; (8007eec <I2C_TransferConfig+0x60>)
 8007ecc:	430b      	orrs	r3, r1
 8007ece:	43db      	mvns	r3, r3
 8007ed0:	ea02 0103 	and.w	r1, r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007ede:	bf00      	nop
 8007ee0:	371c      	adds	r7, #28
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	03ff63ff 	.word	0x03ff63ff

08007ef0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	d138      	bne.n	8007f78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d101      	bne.n	8007f14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007f10:	2302      	movs	r3, #2
 8007f12:	e032      	b.n	8007f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2224      	movs	r2, #36	; 0x24
 8007f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f022 0201 	bic.w	r2, r2, #1
 8007f32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6819      	ldr	r1, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f042 0201 	orr.w	r2, r2, #1
 8007f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2220      	movs	r2, #32
 8007f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	e000      	b.n	8007f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f78:	2302      	movs	r3, #2
  }
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b085      	sub	sp, #20
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	d139      	bne.n	8008010 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d101      	bne.n	8007faa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	e033      	b.n	8008012 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2224      	movs	r2, #36	; 0x24
 8007fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 0201 	bic.w	r2, r2, #1
 8007fc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007fd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	021b      	lsls	r3, r3, #8
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f042 0201 	orr.w	r2, r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	e000      	b.n	8008012 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008010:	2302      	movs	r3, #2
  }
}
 8008012:	4618      	mov	r0, r3
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
	...

08008020 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008028:	4b0b      	ldr	r3, [pc, #44]	; (8008058 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800802a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800802c:	4a0a      	ldr	r2, [pc, #40]	; (8008058 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800802e:	f043 0301 	orr.w	r3, r3, #1
 8008032:	6613      	str	r3, [r2, #96]	; 0x60
 8008034:	4b08      	ldr	r3, [pc, #32]	; (8008058 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008038:	f003 0301 	and.w	r3, r3, #1
 800803c:	60fb      	str	r3, [r7, #12]
 800803e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8008040:	4b06      	ldr	r3, [pc, #24]	; (800805c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	4905      	ldr	r1, [pc, #20]	; (800805c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4313      	orrs	r3, r2
 800804a:	604b      	str	r3, [r1, #4]
}
 800804c:	bf00      	nop
 800804e:	3714      	adds	r7, #20
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	40021000 	.word	0x40021000
 800805c:	40010000 	.word	0x40010000

08008060 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008062:	b08b      	sub	sp, #44	; 0x2c
 8008064:	af06      	add	r7, sp, #24
 8008066:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e0f8      	b.n	8008264 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b00      	cmp	r3, #0
 800807c:	d106      	bne.n	800808c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f00a fe66 	bl	8012d58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2203      	movs	r2, #3
 8008090:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4618      	mov	r0, r3
 800809a:	f005 fc0b 	bl	800d8b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	603b      	str	r3, [r7, #0]
 80080a4:	687e      	ldr	r6, [r7, #4]
 80080a6:	466d      	mov	r5, sp
 80080a8:	f106 0410 	add.w	r4, r6, #16
 80080ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	602b      	str	r3, [r5, #0]
 80080b4:	1d33      	adds	r3, r6, #4
 80080b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080b8:	6838      	ldr	r0, [r7, #0]
 80080ba:	f005 fbd3 	bl	800d864 <USB_CoreInit>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d005      	beq.n	80080d0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2202      	movs	r2, #2
 80080c8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e0c9      	b.n	8008264 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2100      	movs	r1, #0
 80080d6:	4618      	mov	r0, r3
 80080d8:	f005 fc07 	bl	800d8ea <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080dc:	2300      	movs	r3, #0
 80080de:	73fb      	strb	r3, [r7, #15]
 80080e0:	e040      	b.n	8008164 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	4613      	mov	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	00db      	lsls	r3, r3, #3
 80080f0:	440b      	add	r3, r1
 80080f2:	3301      	adds	r3, #1
 80080f4:	2201      	movs	r2, #1
 80080f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	1c5a      	adds	r2, r3, #1
 80080fe:	4613      	mov	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	00db      	lsls	r3, r3, #3
 8008106:	440b      	add	r3, r1
 8008108:	7bfa      	ldrb	r2, [r7, #15]
 800810a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	1c5a      	adds	r2, r3, #1
 8008112:	4613      	mov	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	00db      	lsls	r3, r3, #3
 800811a:	440b      	add	r3, r1
 800811c:	3303      	adds	r3, #3
 800811e:	2200      	movs	r2, #0
 8008120:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008122:	7bfa      	ldrb	r2, [r7, #15]
 8008124:	6879      	ldr	r1, [r7, #4]
 8008126:	4613      	mov	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	00db      	lsls	r3, r3, #3
 800812e:	440b      	add	r3, r1
 8008130:	3338      	adds	r3, #56	; 0x38
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008136:	7bfa      	ldrb	r2, [r7, #15]
 8008138:	6879      	ldr	r1, [r7, #4]
 800813a:	4613      	mov	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	00db      	lsls	r3, r3, #3
 8008142:	440b      	add	r3, r1
 8008144:	333c      	adds	r3, #60	; 0x3c
 8008146:	2200      	movs	r2, #0
 8008148:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800814a:	7bfa      	ldrb	r2, [r7, #15]
 800814c:	6879      	ldr	r1, [r7, #4]
 800814e:	4613      	mov	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	00db      	lsls	r3, r3, #3
 8008156:	440b      	add	r3, r1
 8008158:	3340      	adds	r3, #64	; 0x40
 800815a:	2200      	movs	r2, #0
 800815c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	3301      	adds	r3, #1
 8008162:	73fb      	strb	r3, [r7, #15]
 8008164:	7bfa      	ldrb	r2, [r7, #15]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	429a      	cmp	r2, r3
 800816c:	d3b9      	bcc.n	80080e2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]
 8008172:	e044      	b.n	80081fe <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008174:	7bfa      	ldrb	r2, [r7, #15]
 8008176:	6879      	ldr	r1, [r7, #4]
 8008178:	4613      	mov	r3, r2
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	4413      	add	r3, r2
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	440b      	add	r3, r1
 8008182:	f203 1369 	addw	r3, r3, #361	; 0x169
 8008186:	2200      	movs	r2, #0
 8008188:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800818a:	7bfa      	ldrb	r2, [r7, #15]
 800818c:	6879      	ldr	r1, [r7, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	440b      	add	r3, r1
 8008198:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800819c:	7bfa      	ldrb	r2, [r7, #15]
 800819e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80081a0:	7bfa      	ldrb	r2, [r7, #15]
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	4613      	mov	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	00db      	lsls	r3, r3, #3
 80081ac:	440b      	add	r3, r1
 80081ae:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80081b2:	2200      	movs	r2, #0
 80081b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80081b6:	7bfa      	ldrb	r2, [r7, #15]
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	4613      	mov	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	00db      	lsls	r3, r3, #3
 80081c2:	440b      	add	r3, r1
 80081c4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80081cc:	7bfa      	ldrb	r2, [r7, #15]
 80081ce:	6879      	ldr	r1, [r7, #4]
 80081d0:	4613      	mov	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	440b      	add	r3, r1
 80081da:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80081de:	2200      	movs	r2, #0
 80081e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80081e2:	7bfa      	ldrb	r2, [r7, #15]
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	4613      	mov	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4413      	add	r3, r2
 80081ec:	00db      	lsls	r3, r3, #3
 80081ee:	440b      	add	r3, r1
 80081f0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80081f4:	2200      	movs	r2, #0
 80081f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
 80081fa:	3301      	adds	r3, #1
 80081fc:	73fb      	strb	r3, [r7, #15]
 80081fe:	7bfa      	ldrb	r2, [r7, #15]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	429a      	cmp	r2, r3
 8008206:	d3b5      	bcc.n	8008174 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	603b      	str	r3, [r7, #0]
 800820e:	687e      	ldr	r6, [r7, #4]
 8008210:	466d      	mov	r5, sp
 8008212:	f106 0410 	add.w	r4, r6, #16
 8008216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	602b      	str	r3, [r5, #0]
 800821e:	1d33      	adds	r3, r6, #4
 8008220:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008222:	6838      	ldr	r0, [r7, #0]
 8008224:	f005 fb6e 	bl	800d904 <USB_DevInit>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d005      	beq.n	800823a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2202      	movs	r2, #2
 8008232:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e014      	b.n	8008264 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d102      	bne.n	8008258 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f001 fc58 	bl	8009b08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4618      	mov	r0, r3
 800825e:	f007 fdff 	bl	800fe60 <USB_DevDisconnect>

  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800826c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800827a:	2b01      	cmp	r3, #1
 800827c:	d101      	bne.n	8008282 <HAL_PCD_Start+0x16>
 800827e:	2302      	movs	r3, #2
 8008280:	e012      	b.n	80082a8 <HAL_PCD_Start+0x3c>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4618      	mov	r0, r3
 8008290:	f005 faf9 	bl	800d886 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4618      	mov	r0, r3
 800829a:	f007 fdca 	bl	800fe32 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4618      	mov	r0, r3
 80082be:	f007 fde4 	bl	800fe8a <USB_ReadInterrupts>
 80082c2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fb13 	bl	80088fa <PCD_EP_ISR_Handler>

    return;
 80082d4:	e110      	b.n	80084f8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d013      	beq.n	8008308 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082f2:	b292      	uxth	r2, r2
 80082f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f00a fda8 	bl	8012e4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80082fe:	2100      	movs	r1, #0
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f8fc 	bl	80084fe <HAL_PCD_SetAddress>

    return;
 8008306:	e0f7      	b.n	80084f8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00c      	beq.n	800832c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800831a:	b29a      	uxth	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008324:	b292      	uxth	r2, r2
 8008326:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800832a:	e0e5      	b.n	80084f8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00c      	beq.n	8008350 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800833e:	b29a      	uxth	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008348:	b292      	uxth	r2, r2
 800834a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800834e:	e0d3      	b.n	80084f8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008356:	2b00      	cmp	r3, #0
 8008358:	d034      	beq.n	80083c4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008362:	b29a      	uxth	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f022 0204 	bic.w	r2, r2, #4
 800836c:	b292      	uxth	r2, r2
 800836e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800837a:	b29a      	uxth	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 0208 	bic.w	r2, r2, #8
 8008384:	b292      	uxth	r2, r2
 8008386:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8008390:	2b01      	cmp	r3, #1
 8008392:	d107      	bne.n	80083a4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800839c:	2100      	movs	r1, #0
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f00b f806 	bl	80133b0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f00a fd8b 	bl	8012ec0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80083bc:	b292      	uxth	r2, r2
 80083be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80083c2:	e099      	b.n	80084f8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d027      	beq.n	800841e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f042 0208 	orr.w	r2, r2, #8
 80083e0:	b292      	uxth	r2, r2
 80083e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083f8:	b292      	uxth	r2, r2
 80083fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008406:	b29a      	uxth	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f042 0204 	orr.w	r2, r2, #4
 8008410:	b292      	uxth	r2, r2
 8008412:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f00a fd38 	bl	8012e8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800841c:	e06c      	b.n	80084f8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008424:	2b00      	cmp	r3, #0
 8008426:	d040      	beq.n	80084aa <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008430:	b29a      	uxth	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800843a:	b292      	uxth	r2, r2
 800843c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d12b      	bne.n	80084a2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008452:	b29a      	uxth	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f042 0204 	orr.w	r2, r2, #4
 800845c:	b292      	uxth	r2, r2
 800845e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800846a:	b29a      	uxth	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f042 0208 	orr.w	r2, r2, #8
 8008474:	b292      	uxth	r2, r2
 8008476:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800848a:	b29b      	uxth	r3, r3
 800848c:	089b      	lsrs	r3, r3, #2
 800848e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008498:	2101      	movs	r1, #1
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f00a ff88 	bl	80133b0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80084a0:	e02a      	b.n	80084f8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f00a fcf2 	bl	8012e8c <HAL_PCD_SuspendCallback>
    return;
 80084a8:	e026      	b.n	80084f8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00f      	beq.n	80084d4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80084bc:	b29a      	uxth	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80084c6:	b292      	uxth	r2, r2
 80084c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f00a fcb0 	bl	8012e32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80084d2:	e011      	b.n	80084f8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00c      	beq.n	80084f8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084f0:	b292      	uxth	r2, r2
 80084f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80084f6:	bf00      	nop
  }
}
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	460b      	mov	r3, r1
 8008508:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008510:	2b01      	cmp	r3, #1
 8008512:	d101      	bne.n	8008518 <HAL_PCD_SetAddress+0x1a>
 8008514:	2302      	movs	r3, #2
 8008516:	e013      	b.n	8008540 <HAL_PCD_SetAddress+0x42>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	78fa      	ldrb	r2, [r7, #3]
 8008524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	78fa      	ldrb	r2, [r7, #3]
 800852e:	4611      	mov	r1, r2
 8008530:	4618      	mov	r0, r3
 8008532:	f007 fc6a 	bl	800fe0a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	4608      	mov	r0, r1
 8008552:	4611      	mov	r1, r2
 8008554:	461a      	mov	r2, r3
 8008556:	4603      	mov	r3, r0
 8008558:	70fb      	strb	r3, [r7, #3]
 800855a:	460b      	mov	r3, r1
 800855c:	803b      	strh	r3, [r7, #0]
 800855e:	4613      	mov	r3, r2
 8008560:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008566:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800856a:	2b00      	cmp	r3, #0
 800856c:	da0e      	bge.n	800858c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800856e:	78fb      	ldrb	r3, [r7, #3]
 8008570:	f003 0307 	and.w	r3, r3, #7
 8008574:	1c5a      	adds	r2, r3, #1
 8008576:	4613      	mov	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	00db      	lsls	r3, r3, #3
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	4413      	add	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2201      	movs	r2, #1
 8008588:	705a      	strb	r2, [r3, #1]
 800858a:	e00e      	b.n	80085aa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800858c:	78fb      	ldrb	r3, [r7, #3]
 800858e:	f003 0207 	and.w	r2, r3, #7
 8008592:	4613      	mov	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	00db      	lsls	r3, r3, #3
 800859a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	4413      	add	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80085aa:	78fb      	ldrb	r3, [r7, #3]
 80085ac:	f003 0307 	and.w	r3, r3, #7
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80085b6:	883a      	ldrh	r2, [r7, #0]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	78ba      	ldrb	r2, [r7, #2]
 80085c0:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80085c2:	78bb      	ldrb	r3, [r7, #2]
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d102      	bne.n	80085ce <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d101      	bne.n	80085dc <HAL_PCD_EP_Open+0x94>
 80085d8:	2302      	movs	r3, #2
 80085da:	e00e      	b.n	80085fa <HAL_PCD_EP_Open+0xb2>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68f9      	ldr	r1, [r7, #12]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f005 f9ac 	bl	800d948 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80085f8:	7afb      	ldrb	r3, [r7, #11]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b084      	sub	sp, #16
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	460b      	mov	r3, r1
 800860c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800860e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008612:	2b00      	cmp	r3, #0
 8008614:	da0e      	bge.n	8008634 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008616:	78fb      	ldrb	r3, [r7, #3]
 8008618:	f003 0307 	and.w	r3, r3, #7
 800861c:	1c5a      	adds	r2, r3, #1
 800861e:	4613      	mov	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	00db      	lsls	r3, r3, #3
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	4413      	add	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2201      	movs	r2, #1
 8008630:	705a      	strb	r2, [r3, #1]
 8008632:	e00e      	b.n	8008652 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	f003 0207 	and.w	r2, r3, #7
 800863a:	4613      	mov	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	4413      	add	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	f003 0307 	and.w	r3, r3, #7
 8008658:	b2da      	uxtb	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008664:	2b01      	cmp	r3, #1
 8008666:	d101      	bne.n	800866c <HAL_PCD_EP_Close+0x6a>
 8008668:	2302      	movs	r3, #2
 800866a:	e00e      	b.n	800868a <HAL_PCD_EP_Close+0x88>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68f9      	ldr	r1, [r7, #12]
 800867a:	4618      	mov	r0, r3
 800867c:	f005 fd28 	bl	800e0d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b086      	sub	sp, #24
 8008696:	af00      	add	r7, sp, #0
 8008698:	60f8      	str	r0, [r7, #12]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
 800869e:	460b      	mov	r3, r1
 80086a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086a2:	7afb      	ldrb	r3, [r7, #11]
 80086a4:	f003 0207 	and.w	r2, r3, #7
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	00db      	lsls	r3, r3, #3
 80086b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	4413      	add	r3, r2
 80086b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2200      	movs	r2, #0
 80086ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	2200      	movs	r2, #0
 80086d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80086d2:	7afb      	ldrb	r3, [r7, #11]
 80086d4:	f003 0307 	and.w	r3, r3, #7
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	6979      	ldr	r1, [r7, #20]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f005 fee0 	bl	800e4aa <USB_EPStartXfer>

  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3718      	adds	r7, #24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	f003 0207 	and.w	r2, r3, #7
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	4613      	mov	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	440b      	add	r3, r1
 8008712:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8008716:	681b      	ldr	r3, [r3, #0]
}
 8008718:	4618      	mov	r0, r3
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	607a      	str	r2, [r7, #4]
 800872e:	603b      	str	r3, [r7, #0]
 8008730:	460b      	mov	r3, r1
 8008732:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008734:	7afb      	ldrb	r3, [r7, #11]
 8008736:	f003 0307 	and.w	r3, r3, #7
 800873a:	1c5a      	adds	r2, r3, #1
 800873c:	4613      	mov	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	00db      	lsls	r3, r3, #3
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	4413      	add	r3, r2
 8008748:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2200      	movs	r2, #0
 8008768:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	2201      	movs	r2, #1
 800876e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008770:	7afb      	ldrb	r3, [r7, #11]
 8008772:	f003 0307 	and.w	r3, r3, #7
 8008776:	b2da      	uxtb	r2, r3
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6979      	ldr	r1, [r7, #20]
 8008782:	4618      	mov	r0, r3
 8008784:	f005 fe91 	bl	800e4aa <USB_EPStartXfer>

  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3718      	adds	r7, #24
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b084      	sub	sp, #16
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	460b      	mov	r3, r1
 800879c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800879e:	78fb      	ldrb	r3, [r7, #3]
 80087a0:	f003 0207 	and.w	r2, r3, #7
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d901      	bls.n	80087b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e04c      	b.n	800884a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80087b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	da0e      	bge.n	80087d6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	1c5a      	adds	r2, r3, #1
 80087c0:	4613      	mov	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	4413      	add	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2201      	movs	r2, #1
 80087d2:	705a      	strb	r2, [r3, #1]
 80087d4:	e00c      	b.n	80087f0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80087d6:	78fa      	ldrb	r2, [r7, #3]
 80087d8:	4613      	mov	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	00db      	lsls	r3, r3, #3
 80087e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	4413      	add	r3, r2
 80087e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2201      	movs	r2, #1
 80087f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80087f6:	78fb      	ldrb	r3, [r7, #3]
 80087f8:	f003 0307 	and.w	r3, r3, #7
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008808:	2b01      	cmp	r3, #1
 800880a:	d101      	bne.n	8008810 <HAL_PCD_EP_SetStall+0x7e>
 800880c:	2302      	movs	r3, #2
 800880e:	e01c      	b.n	800884a <HAL_PCD_EP_SetStall+0xb8>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68f9      	ldr	r1, [r7, #12]
 800881e:	4618      	mov	r0, r3
 8008820:	f007 f9f4 	bl	800fc0c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008824:	78fb      	ldrb	r3, [r7, #3]
 8008826:	f003 0307 	and.w	r3, r3, #7
 800882a:	2b00      	cmp	r3, #0
 800882c:	d108      	bne.n	8008840 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008838:	4619      	mov	r1, r3
 800883a:	4610      	mov	r0, r2
 800883c:	f007 fb35 	bl	800feaa <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	460b      	mov	r3, r1
 800885c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	f003 020f 	and.w	r2, r3, #15
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	429a      	cmp	r2, r3
 800886a:	d901      	bls.n	8008870 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e040      	b.n	80088f2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008874:	2b00      	cmp	r3, #0
 8008876:	da0e      	bge.n	8008896 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008878:	78fb      	ldrb	r3, [r7, #3]
 800887a:	f003 0307 	and.w	r3, r3, #7
 800887e:	1c5a      	adds	r2, r3, #1
 8008880:	4613      	mov	r3, r2
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4413      	add	r3, r2
 8008886:	00db      	lsls	r3, r3, #3
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	4413      	add	r3, r2
 800888c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2201      	movs	r2, #1
 8008892:	705a      	strb	r2, [r3, #1]
 8008894:	e00e      	b.n	80088b4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008896:	78fb      	ldrb	r3, [r7, #3]
 8008898:	f003 0207 	and.w	r2, r3, #7
 800889c:	4613      	mov	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	4413      	add	r3, r2
 80088a2:	00db      	lsls	r3, r3, #3
 80088a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	4413      	add	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80088ba:	78fb      	ldrb	r3, [r7, #3]
 80088bc:	f003 0307 	and.w	r3, r3, #7
 80088c0:	b2da      	uxtb	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d101      	bne.n	80088d4 <HAL_PCD_EP_ClrStall+0x82>
 80088d0:	2302      	movs	r3, #2
 80088d2:	e00e      	b.n	80088f2 <HAL_PCD_EP_ClrStall+0xa0>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68f9      	ldr	r1, [r7, #12]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f007 f9e3 	bl	800fcae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b096      	sub	sp, #88	; 0x58
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008902:	e3b1      	b.n	8009068 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800890c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8008910:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008914:	b2db      	uxtb	r3, r3
 8008916:	f003 030f 	and.w	r3, r3, #15
 800891a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800891e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008922:	2b00      	cmp	r3, #0
 8008924:	f040 8173 	bne.w	8008c0e <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008928:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800892c:	f003 0310 	and.w	r3, r3, #16
 8008930:	2b00      	cmp	r3, #0
 8008932:	d150      	bne.n	80089d6 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	b29b      	uxth	r3, r3
 800893c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8008940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008944:	81fb      	strh	r3, [r7, #14]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	89fb      	ldrh	r3, [r7, #14]
 800894c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008954:	b29b      	uxth	r3, r3
 8008956:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3328      	adds	r3, #40	; 0x28
 800895c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008966:	b29b      	uxth	r3, r3
 8008968:	461a      	mov	r2, r3
 800896a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	00db      	lsls	r3, r3, #3
 8008970:	4413      	add	r3, r2
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	6812      	ldr	r2, [r2, #0]
 8008976:	4413      	add	r3, r2
 8008978:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008984:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8008986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008988:	695a      	ldr	r2, [r3, #20]
 800898a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800898c:	69db      	ldr	r3, [r3, #28]
 800898e:	441a      	add	r2, r3
 8008990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008992:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008994:	2100      	movs	r1, #0
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f00a fa31 	bl	8012dfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 835f 	beq.w	8009068 <PCD_EP_ISR_Handler+0x76e>
 80089aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f040 835a 	bne.w	8009068 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	b292      	uxth	r2, r2
 80089c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80089d4:	e348      	b.n	8009068 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80089dc:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	881b      	ldrh	r3, [r3, #0]
 80089e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80089e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80089ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d032      	beq.n	8008a5a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	461a      	mov	r2, r3
 8008a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	00db      	lsls	r3, r3, #3
 8008a06:	4413      	add	r3, r2
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	6812      	ldr	r2, [r2, #0]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a1a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6818      	ldr	r0, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8008a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a28:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a2c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	f007 fa89 	bl	800ff46 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008a40:	4013      	ands	r3, r2
 8008a42:	823b      	strh	r3, [r7, #16]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	8a3a      	ldrh	r2, [r7, #16]
 8008a4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a4e:	b292      	uxth	r2, r2
 8008a50:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f00a f9a6 	bl	8012da4 <HAL_PCD_SetupStageCallback>
 8008a58:	e306      	b.n	8009068 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008a5a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f280 8302 	bge.w	8009068 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008a70:	4013      	ands	r3, r2
 8008a72:	83fb      	strh	r3, [r7, #30]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	8bfa      	ldrh	r2, [r7, #30]
 8008a7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a7e:	b292      	uxth	r2, r2
 8008a80:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	00db      	lsls	r3, r3, #3
 8008a94:	4413      	add	r3, r2
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	6812      	ldr	r2, [r2, #0]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aa8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d019      	beq.n	8008ae6 <PCD_EP_ISR_Handler+0x1ec>
 8008ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d015      	beq.n	8008ae6 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6818      	ldr	r0, [r3, #0]
 8008abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ac0:	6959      	ldr	r1, [r3, #20]
 8008ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ac4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8008ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ac8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	f007 fa3b 	bl	800ff46 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8008ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ad2:	695a      	ldr	r2, [r3, #20]
 8008ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ad6:	69db      	ldr	r3, [r3, #28]
 8008ad8:	441a      	add	r2, r3
 8008ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008adc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008ade:	2100      	movs	r1, #0
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f00a f971 	bl	8012dc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8008af0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f040 82b5 	bne.w	8009068 <PCD_EP_ISR_Handler+0x76e>
 8008afe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008b02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008b06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b0a:	f000 82ad 	beq.w	8009068 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	61bb      	str	r3, [r7, #24]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	461a      	mov	r2, r3
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	4413      	add	r3, r2
 8008b24:	61bb      	str	r3, [r7, #24]
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b2c:	617b      	str	r3, [r7, #20]
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	881b      	ldrh	r3, [r3, #0]
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	801a      	strh	r2, [r3, #0]
 8008b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	2b3e      	cmp	r3, #62	; 0x3e
 8008b44:	d91d      	bls.n	8008b82 <PCD_EP_ISR_Handler+0x288>
 8008b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	095b      	lsrs	r3, r3, #5
 8008b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8008b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	f003 031f 	and.w	r3, r3, #31
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d102      	bne.n	8008b60 <PCD_EP_ISR_Handler+0x266>
 8008b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	881b      	ldrh	r3, [r3, #0]
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	029b      	lsls	r3, r3, #10
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	801a      	strh	r2, [r3, #0]
 8008b80:	e026      	b.n	8008bd0 <PCD_EP_ISR_Handler+0x2d6>
 8008b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10a      	bne.n	8008ba0 <PCD_EP_ISR_Handler+0x2a6>
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	801a      	strh	r2, [r3, #0]
 8008b9e:	e017      	b.n	8008bd0 <PCD_EP_ISR_Handler+0x2d6>
 8008ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	085b      	lsrs	r3, r3, #1
 8008ba6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <PCD_EP_ISR_Handler+0x2c0>
 8008bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	647b      	str	r3, [r7, #68]	; 0x44
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	029b      	lsls	r3, r3, #10
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	881b      	ldrh	r3, [r3, #0]
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be0:	827b      	strh	r3, [r7, #18]
 8008be2:	8a7b      	ldrh	r3, [r7, #18]
 8008be4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008be8:	827b      	strh	r3, [r7, #18]
 8008bea:	8a7b      	ldrh	r3, [r7, #18]
 8008bec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008bf0:	827b      	strh	r3, [r7, #18]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	8a7b      	ldrh	r3, [r7, #18]
 8008bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	8013      	strh	r3, [r2, #0]
 8008c0c:	e22c      	b.n	8009068 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	461a      	mov	r2, r3
 8008c14:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008c22:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f280 80f6 	bge.w	8008e18 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	461a      	mov	r2, r3
 8008c32:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008c42:	4013      	ands	r3, r2
 8008c44:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8008c5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c5e:	b292      	uxth	r2, r2
 8008c60:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8008c62:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8008c66:	4613      	mov	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	00db      	lsls	r3, r3, #3
 8008c6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	4413      	add	r3, r2
 8008c76:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8008c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c7a:	7b1b      	ldrb	r3, [r3, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d123      	bne.n	8008cc8 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	4413      	add	r3, r2
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	6812      	ldr	r2, [r2, #0]
 8008c98:	4413      	add	r3, r2
 8008c9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ca4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8008ca8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f000 808e 	beq.w	8008dce <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6818      	ldr	r0, [r3, #0]
 8008cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cb8:	6959      	ldr	r1, [r3, #20]
 8008cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cbc:	88da      	ldrh	r2, [r3, #6]
 8008cbe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008cc2:	f007 f940 	bl	800ff46 <USB_ReadPMA>
 8008cc6:	e082      	b.n	8008dce <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8008cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cca:	78db      	ldrb	r3, [r3, #3]
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d10a      	bne.n	8008ce6 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8008cd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f9d3 	bl	8009084 <HAL_PCD_EP_DB_Receive>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8008ce4:	e073      	b.n	8008dce <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	461a      	mov	r2, r3
 8008cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	4413      	add	r3, r2
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d00:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	441a      	add	r2, r3
 8008d12:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d022      	beq.n	8008d8a <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	461a      	mov	r2, r3
 8008d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	00db      	lsls	r3, r3, #3
 8008d56:	4413      	add	r3, r2
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	6812      	ldr	r2, [r2, #0]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d68:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8008d6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d02c      	beq.n	8008dce <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6818      	ldr	r0, [r3, #0]
 8008d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d7a:	6959      	ldr	r1, [r3, #20]
 8008d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d7e:	891a      	ldrh	r2, [r3, #8]
 8008d80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008d84:	f007 f8df 	bl	800ff46 <USB_ReadPMA>
 8008d88:	e021      	b.n	8008dce <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	461a      	mov	r2, r3
 8008d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	00db      	lsls	r3, r3, #3
 8008d9c:	4413      	add	r3, r2
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6812      	ldr	r2, [r2, #0]
 8008da2:	4413      	add	r3, r2
 8008da4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008da8:	881b      	ldrh	r3, [r3, #0]
 8008daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dae:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8008db2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d009      	beq.n	8008dce <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6818      	ldr	r0, [r3, #0]
 8008dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dc0:	6959      	ldr	r1, [r3, #20]
 8008dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dc4:	895a      	ldrh	r2, [r3, #10]
 8008dc6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008dca:	f007 f8bc 	bl	800ff46 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dd0:	69da      	ldr	r2, [r3, #28]
 8008dd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008dd6:	441a      	add	r2, r3
 8008dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dda:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8008ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dde:	695a      	ldr	r2, [r3, #20]
 8008de0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008de4:	441a      	add	r2, r3
 8008de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008de8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d005      	beq.n	8008dfe <PCD_EP_ISR_Handler+0x504>
 8008df2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8008df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d206      	bcs.n	8008e0c <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f009 ffdf 	bl	8012dc8 <HAL_PCD_DataOutStageCallback>
 8008e0a:	e005      	b.n	8008e18 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e12:	4618      	mov	r0, r3
 8008e14:	f005 fb49 	bl	800e4aa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8008e18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 8121 	beq.w	8009068 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8008e26:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	00db      	lsls	r3, r3, #3
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	4413      	add	r3, r2
 8008e38:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	881b      	ldrh	r3, [r3, #0]
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8008e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	441a      	add	r2, r3
 8008e66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8008e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e78:	78db      	ldrb	r3, [r3, #3]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	f040 80a2 	bne.w	8008fc4 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8008e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e82:	2200      	movs	r2, #0
 8008e84:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e88:	7b1b      	ldrb	r3, [r3, #12]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f000 8093 	beq.w	8008fb6 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008e90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d046      	beq.n	8008f2a <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e9e:	785b      	ldrb	r3, [r3, #1]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d126      	bne.n	8008ef2 <PCD_EP_ISR_Handler+0x5f8>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	4413      	add	r3, r2
 8008eba:	627b      	str	r3, [r7, #36]	; 0x24
 8008ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	00da      	lsls	r2, r3, #3
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	4413      	add	r3, r2
 8008ec6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008eca:	623b      	str	r3, [r7, #32]
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	801a      	strh	r2, [r3, #0]
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	881b      	ldrh	r3, [r3, #0]
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	801a      	strh	r2, [r3, #0]
 8008ef0:	e061      	b.n	8008fb6 <PCD_EP_ISR_Handler+0x6bc>
 8008ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ef4:	785b      	ldrb	r3, [r3, #1]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d15d      	bne.n	8008fb6 <PCD_EP_ISR_Handler+0x6bc>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0e:	4413      	add	r3, r2
 8008f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	00da      	lsls	r2, r3, #3
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f24:	2200      	movs	r2, #0
 8008f26:	801a      	strh	r2, [r3, #0]
 8008f28:	e045      	b.n	8008fb6 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f32:	785b      	ldrb	r3, [r3, #1]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d126      	bne.n	8008f86 <PCD_EP_ISR_Handler+0x68c>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	461a      	mov	r2, r3
 8008f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4c:	4413      	add	r3, r2
 8008f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	00da      	lsls	r2, r3, #3
 8008f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f58:	4413      	add	r3, r2
 8008f5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f5e:	633b      	str	r3, [r7, #48]	; 0x30
 8008f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f62:	881b      	ldrh	r3, [r3, #0]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6e:	801a      	strh	r2, [r3, #0]
 8008f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	801a      	strh	r2, [r3, #0]
 8008f84:	e017      	b.n	8008fb6 <PCD_EP_ISR_Handler+0x6bc>
 8008f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f88:	785b      	ldrb	r3, [r3, #1]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d113      	bne.n	8008fb6 <PCD_EP_ISR_Handler+0x6bc>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	461a      	mov	r2, r3
 8008f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f9c:	4413      	add	r3, r2
 8008f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	00da      	lsls	r2, r3, #3
 8008fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa8:	4413      	add	r3, r2
 8008faa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008fae:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f009 ff1e 	bl	8012dfe <HAL_PCD_DataInStageCallback>
 8008fc2:	e051      	b.n	8009068 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008fc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d144      	bne.n	800905a <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	461a      	mov	r2, r3
 8008fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	00db      	lsls	r3, r3, #3
 8008fe2:	4413      	add	r3, r2
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	6812      	ldr	r2, [r2, #0]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ff4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8008ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ffa:	699a      	ldr	r2, [r3, #24]
 8008ffc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009000:	429a      	cmp	r2, r3
 8009002:	d907      	bls.n	8009014 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8009004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009006:	699a      	ldr	r2, [r3, #24]
 8009008:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800900c:	1ad2      	subs	r2, r2, r3
 800900e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009010:	619a      	str	r2, [r3, #24]
 8009012:	e002      	b.n	800901a <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8009014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009016:	2200      	movs	r2, #0
 8009018:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800901a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d106      	bne.n	8009030 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f009 fee8 	bl	8012dfe <HAL_PCD_DataInStageCallback>
 800902e:	e01b      	b.n	8009068 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009032:	695a      	ldr	r2, [r3, #20]
 8009034:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009038:	441a      	add	r2, r3
 800903a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800903c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800903e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009040:	69da      	ldr	r2, [r3, #28]
 8009042:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009046:	441a      	add	r2, r3
 8009048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800904a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009052:	4618      	mov	r0, r3
 8009054:	f005 fa29 	bl	800e4aa <USB_EPStartXfer>
 8009058:	e006      	b.n	8009068 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800905a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800905e:	461a      	mov	r2, r3
 8009060:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f917 	bl	8009296 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009070:	b29b      	uxth	r3, r3
 8009072:	b21b      	sxth	r3, r3
 8009074:	2b00      	cmp	r3, #0
 8009076:	f6ff ac45 	blt.w	8008904 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3758      	adds	r7, #88	; 0x58
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	4613      	mov	r3, r2
 8009090:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009092:	88fb      	ldrh	r3, [r7, #6]
 8009094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d07c      	beq.n	8009196 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	461a      	mov	r2, r3
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	00db      	lsls	r3, r3, #3
 80090ae:	4413      	add	r3, r2
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	6812      	ldr	r2, [r2, #0]
 80090b4:	4413      	add	r3, r2
 80090b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80090ba:	881b      	ldrh	r3, [r3, #0]
 80090bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	699a      	ldr	r2, [r3, #24]
 80090c6:	8b7b      	ldrh	r3, [r7, #26]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d306      	bcc.n	80090da <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	699a      	ldr	r2, [r3, #24]
 80090d0:	8b7b      	ldrh	r3, [r7, #26]
 80090d2:	1ad2      	subs	r2, r2, r3
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	619a      	str	r2, [r3, #24]
 80090d8:	e002      	b.n	80090e0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	2200      	movs	r2, #0
 80090de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d123      	bne.n	8009130 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	461a      	mov	r2, r3
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	881b      	ldrh	r3, [r3, #0]
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009102:	833b      	strh	r3, [r7, #24]
 8009104:	8b3b      	ldrh	r3, [r7, #24]
 8009106:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800910a:	833b      	strh	r3, [r7, #24]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	461a      	mov	r2, r3
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	441a      	add	r2, r3
 800911a:	8b3b      	ldrh	r3, [r7, #24]
 800911c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800912c:	b29b      	uxth	r3, r3
 800912e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009130:	88fb      	ldrh	r3, [r7, #6]
 8009132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009136:	2b00      	cmp	r3, #0
 8009138:	d01f      	beq.n	800917a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	b29b      	uxth	r3, r3
 800914c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009154:	82fb      	strh	r3, [r7, #22]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	441a      	add	r2, r3
 8009164:	8afb      	ldrh	r3, [r7, #22]
 8009166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800916a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800916e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009172:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009176:	b29b      	uxth	r3, r3
 8009178:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800917a:	8b7b      	ldrh	r3, [r7, #26]
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 8085 	beq.w	800928c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6818      	ldr	r0, [r3, #0]
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	6959      	ldr	r1, [r3, #20]
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	891a      	ldrh	r2, [r3, #8]
 800918e:	8b7b      	ldrh	r3, [r7, #26]
 8009190:	f006 fed9 	bl	800ff46 <USB_ReadPMA>
 8009194:	e07a      	b.n	800928c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800919e:	b29b      	uxth	r3, r3
 80091a0:	461a      	mov	r2, r3
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	00db      	lsls	r3, r3, #3
 80091a8:	4413      	add	r3, r2
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	6812      	ldr	r2, [r2, #0]
 80091ae:	4413      	add	r3, r2
 80091b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80091b4:	881b      	ldrh	r3, [r3, #0]
 80091b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091ba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	699a      	ldr	r2, [r3, #24]
 80091c0:	8b7b      	ldrh	r3, [r7, #26]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d306      	bcc.n	80091d4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	699a      	ldr	r2, [r3, #24]
 80091ca:	8b7b      	ldrh	r3, [r7, #26]
 80091cc:	1ad2      	subs	r2, r2, r3
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	619a      	str	r2, [r3, #24]
 80091d2:	e002      	b.n	80091da <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	2200      	movs	r2, #0
 80091d8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d123      	bne.n	800922a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4413      	add	r3, r2
 80091f0:	881b      	ldrh	r3, [r3, #0]
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091fc:	83fb      	strh	r3, [r7, #30]
 80091fe:	8bfb      	ldrh	r3, [r7, #30]
 8009200:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009204:	83fb      	strh	r3, [r7, #30]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	441a      	add	r2, r3
 8009214:	8bfb      	ldrh	r3, [r7, #30]
 8009216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800921a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800921e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009226:	b29b      	uxth	r3, r3
 8009228:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800922a:	88fb      	ldrh	r3, [r7, #6]
 800922c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009230:	2b00      	cmp	r3, #0
 8009232:	d11f      	bne.n	8009274 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	461a      	mov	r2, r3
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	4413      	add	r3, r2
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	b29b      	uxth	r3, r3
 8009246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800924a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800924e:	83bb      	strh	r3, [r7, #28]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	461a      	mov	r2, r3
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	441a      	add	r2, r3
 800925e:	8bbb      	ldrh	r3, [r7, #28]
 8009260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800926c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009270:	b29b      	uxth	r3, r3
 8009272:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009274:	8b7b      	ldrh	r3, [r7, #26]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d008      	beq.n	800928c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6818      	ldr	r0, [r3, #0]
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	6959      	ldr	r1, [r3, #20]
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	895a      	ldrh	r2, [r3, #10]
 8009286:	8b7b      	ldrh	r3, [r7, #26]
 8009288:	f006 fe5d 	bl	800ff46 <USB_ReadPMA>
    }
  }

  return count;
 800928c:	8b7b      	ldrh	r3, [r7, #26]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3720      	adds	r7, #32
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b0a4      	sub	sp, #144	; 0x90
 800929a:	af00      	add	r7, sp, #0
 800929c:	60f8      	str	r0, [r7, #12]
 800929e:	60b9      	str	r1, [r7, #8]
 80092a0:	4613      	mov	r3, r2
 80092a2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80092a4:	88fb      	ldrh	r3, [r7, #6]
 80092a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 81db 	beq.w	8009666 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	461a      	mov	r2, r3
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	00db      	lsls	r3, r3, #3
 80092c2:	4413      	add	r3, r2
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	6812      	ldr	r2, [r2, #0]
 80092c8:	4413      	add	r3, r2
 80092ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80092ce:	881b      	ldrh	r3, [r3, #0]
 80092d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092d4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	699a      	ldr	r2, [r3, #24]
 80092dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d907      	bls.n	80092f4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	699a      	ldr	r2, [r3, #24]
 80092e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80092ec:	1ad2      	subs	r2, r2, r3
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	619a      	str	r2, [r3, #24]
 80092f2:	e002      	b.n	80092fa <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2200      	movs	r2, #0
 80092f8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f040 80b9 	bne.w	8009476 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d126      	bne.n	800935a <HAL_PCD_EP_DB_Transmit+0xc4>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800931a:	b29b      	uxth	r3, r3
 800931c:	461a      	mov	r2, r3
 800931e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009320:	4413      	add	r3, r2
 8009322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	00da      	lsls	r2, r3, #3
 800932a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932c:	4413      	add	r3, r2
 800932e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009332:	62bb      	str	r3, [r7, #40]	; 0x28
 8009334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	b29b      	uxth	r3, r3
 800933a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800933e:	b29a      	uxth	r2, r3
 8009340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009342:	801a      	strh	r2, [r3, #0]
 8009344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009346:	881b      	ldrh	r3, [r3, #0]
 8009348:	b29b      	uxth	r3, r3
 800934a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800934e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009352:	b29a      	uxth	r2, r3
 8009354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009356:	801a      	strh	r2, [r3, #0]
 8009358:	e01a      	b.n	8009390 <HAL_PCD_EP_DB_Transmit+0xfa>
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	785b      	ldrb	r3, [r3, #1]
 800935e:	2b01      	cmp	r3, #1
 8009360:	d116      	bne.n	8009390 <HAL_PCD_EP_DB_Transmit+0xfa>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	637b      	str	r3, [r7, #52]	; 0x34
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009370:	b29b      	uxth	r3, r3
 8009372:	461a      	mov	r2, r3
 8009374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009376:	4413      	add	r3, r2
 8009378:	637b      	str	r3, [r7, #52]	; 0x34
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	00da      	lsls	r2, r3, #3
 8009380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009382:	4413      	add	r3, r2
 8009384:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009388:	633b      	str	r3, [r7, #48]	; 0x30
 800938a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938c:	2200      	movs	r2, #0
 800938e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	627b      	str	r3, [r7, #36]	; 0x24
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	785b      	ldrb	r3, [r3, #1]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d126      	bne.n	80093ec <HAL_PCD_EP_DB_Transmit+0x156>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	61fb      	str	r3, [r7, #28]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	461a      	mov	r2, r3
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	4413      	add	r3, r2
 80093b4:	61fb      	str	r3, [r7, #28]
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	00da      	lsls	r2, r3, #3
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	4413      	add	r3, r2
 80093c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093c4:	61bb      	str	r3, [r7, #24]
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	881b      	ldrh	r3, [r3, #0]
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	801a      	strh	r2, [r3, #0]
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	881b      	ldrh	r3, [r3, #0]
 80093da:	b29b      	uxth	r3, r3
 80093dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	801a      	strh	r2, [r3, #0]
 80093ea:	e017      	b.n	800941c <HAL_PCD_EP_DB_Transmit+0x186>
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	785b      	ldrb	r3, [r3, #1]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d113      	bne.n	800941c <HAL_PCD_EP_DB_Transmit+0x186>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	461a      	mov	r2, r3
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	4413      	add	r3, r2
 8009404:	627b      	str	r3, [r7, #36]	; 0x24
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	00da      	lsls	r2, r3, #3
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940e:	4413      	add	r3, r2
 8009410:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009414:	623b      	str	r3, [r7, #32]
 8009416:	6a3b      	ldr	r3, [r7, #32]
 8009418:	2200      	movs	r2, #0
 800941a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	4619      	mov	r1, r3
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f009 fceb 	bl	8012dfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009428:	88fb      	ldrh	r3, [r7, #6]
 800942a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800942e:	2b00      	cmp	r3, #0
 8009430:	f000 82fa 	beq.w	8009a28 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	461a      	mov	r2, r3
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4413      	add	r3, r2
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	b29b      	uxth	r3, r3
 8009446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800944a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800944e:	82fb      	strh	r3, [r7, #22]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	461a      	mov	r2, r3
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	441a      	add	r2, r3
 800945e:	8afb      	ldrh	r3, [r7, #22]
 8009460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800946c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009470:	b29b      	uxth	r3, r3
 8009472:	8013      	strh	r3, [r2, #0]
 8009474:	e2d8      	b.n	8009a28 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009476:	88fb      	ldrh	r3, [r7, #6]
 8009478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d021      	beq.n	80094c4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	461a      	mov	r2, r3
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	881b      	ldrh	r3, [r3, #0]
 8009490:	b29b      	uxth	r3, r3
 8009492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800949a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	461a      	mov	r2, r3
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	441a      	add	r2, r3
 80094ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80094b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	f040 82ac 	bne.w	8009a28 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	695a      	ldr	r2, [r3, #20]
 80094d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80094d8:	441a      	add	r2, r3
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	69da      	ldr	r2, [r3, #28]
 80094e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80094e6:	441a      	add	r2, r3
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	6a1a      	ldr	r2, [r3, #32]
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d30b      	bcc.n	8009510 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	6a1a      	ldr	r2, [r3, #32]
 8009504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009508:	1ad2      	subs	r2, r2, r3
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	621a      	str	r2, [r3, #32]
 800950e:	e017      	b.n	8009540 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	6a1b      	ldr	r3, [r3, #32]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d108      	bne.n	800952a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8009518:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800951c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009528:	e00a      	b.n	8009540 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	2200      	movs	r2, #0
 800953e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	785b      	ldrb	r3, [r3, #1]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d165      	bne.n	8009614 <HAL_PCD_EP_DB_Transmit+0x37e>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009556:	b29b      	uxth	r3, r3
 8009558:	461a      	mov	r2, r3
 800955a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800955c:	4413      	add	r3, r2
 800955e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	00da      	lsls	r2, r3, #3
 8009566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009568:	4413      	add	r3, r2
 800956a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800956e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	b29b      	uxth	r3, r3
 8009576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800957a:	b29a      	uxth	r2, r3
 800957c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957e:	801a      	strh	r2, [r3, #0]
 8009580:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009584:	2b3e      	cmp	r3, #62	; 0x3e
 8009586:	d91d      	bls.n	80095c4 <HAL_PCD_EP_DB_Transmit+0x32e>
 8009588:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800958c:	095b      	lsrs	r3, r3, #5
 800958e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009590:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009594:	f003 031f 	and.w	r3, r3, #31
 8009598:	2b00      	cmp	r3, #0
 800959a:	d102      	bne.n	80095a2 <HAL_PCD_EP_DB_Transmit+0x30c>
 800959c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800959e:	3b01      	subs	r3, #1
 80095a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80095a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	029b      	lsls	r3, r3, #10
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	4313      	orrs	r3, r2
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095bc:	b29a      	uxth	r2, r3
 80095be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c0:	801a      	strh	r2, [r3, #0]
 80095c2:	e044      	b.n	800964e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80095c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10a      	bne.n	80095e2 <HAL_PCD_EP_DB_Transmit+0x34c>
 80095cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ce:	881b      	ldrh	r3, [r3, #0]
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095da:	b29a      	uxth	r2, r3
 80095dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095de:	801a      	strh	r2, [r3, #0]
 80095e0:	e035      	b.n	800964e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80095e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095e6:	085b      	lsrs	r3, r3, #1
 80095e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80095ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d002      	beq.n	80095fc <HAL_PCD_EP_DB_Transmit+0x366>
 80095f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095f8:	3301      	adds	r3, #1
 80095fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80095fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fe:	881b      	ldrh	r3, [r3, #0]
 8009600:	b29a      	uxth	r2, r3
 8009602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009604:	b29b      	uxth	r3, r3
 8009606:	029b      	lsls	r3, r3, #10
 8009608:	b29b      	uxth	r3, r3
 800960a:	4313      	orrs	r3, r2
 800960c:	b29a      	uxth	r2, r3
 800960e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009610:	801a      	strh	r2, [r3, #0]
 8009612:	e01c      	b.n	800964e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	785b      	ldrb	r3, [r3, #1]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d118      	bne.n	800964e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	647b      	str	r3, [r7, #68]	; 0x44
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800962a:	b29b      	uxth	r3, r3
 800962c:	461a      	mov	r2, r3
 800962e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009630:	4413      	add	r3, r2
 8009632:	647b      	str	r3, [r7, #68]	; 0x44
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	00da      	lsls	r2, r3, #3
 800963a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800963c:	4413      	add	r3, r2
 800963e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009642:	643b      	str	r3, [r7, #64]	; 0x40
 8009644:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009648:	b29a      	uxth	r2, r3
 800964a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800964c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6818      	ldr	r0, [r3, #0]
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	6959      	ldr	r1, [r3, #20]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	891a      	ldrh	r2, [r3, #8]
 800965a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800965e:	b29b      	uxth	r3, r3
 8009660:	f006 fc2f 	bl	800fec2 <USB_WritePMA>
 8009664:	e1e0      	b.n	8009a28 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800966e:	b29b      	uxth	r3, r3
 8009670:	461a      	mov	r2, r3
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	00db      	lsls	r3, r3, #3
 8009678:	4413      	add	r3, r2
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	6812      	ldr	r2, [r2, #0]
 800967e:	4413      	add	r3, r2
 8009680:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009684:	881b      	ldrh	r3, [r3, #0]
 8009686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800968a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	699a      	ldr	r2, [r3, #24]
 8009692:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009696:	429a      	cmp	r2, r3
 8009698:	d307      	bcc.n	80096aa <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	699a      	ldr	r2, [r3, #24]
 800969e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80096a2:	1ad2      	subs	r2, r2, r3
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	619a      	str	r2, [r3, #24]
 80096a8:	e002      	b.n	80096b0 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	2200      	movs	r2, #0
 80096ae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f040 80c0 	bne.w	800983a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	785b      	ldrb	r3, [r3, #1]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d126      	bne.n	8009710 <HAL_PCD_EP_DB_Transmit+0x47a>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	461a      	mov	r2, r3
 80096d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096d6:	4413      	add	r3, r2
 80096d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	00da      	lsls	r2, r3, #3
 80096e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096e2:	4413      	add	r3, r2
 80096e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80096e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80096ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096f8:	801a      	strh	r2, [r3, #0]
 80096fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096fc:	881b      	ldrh	r3, [r3, #0]
 80096fe:	b29b      	uxth	r3, r3
 8009700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009708:	b29a      	uxth	r2, r3
 800970a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800970c:	801a      	strh	r2, [r3, #0]
 800970e:	e01a      	b.n	8009746 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	785b      	ldrb	r3, [r3, #1]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d116      	bne.n	8009746 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	667b      	str	r3, [r7, #100]	; 0x64
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009726:	b29b      	uxth	r3, r3
 8009728:	461a      	mov	r2, r3
 800972a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800972c:	4413      	add	r3, r2
 800972e:	667b      	str	r3, [r7, #100]	; 0x64
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	00da      	lsls	r2, r3, #3
 8009736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009738:	4413      	add	r3, r2
 800973a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800973e:	663b      	str	r3, [r7, #96]	; 0x60
 8009740:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009742:	2200      	movs	r2, #0
 8009744:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	677b      	str	r3, [r7, #116]	; 0x74
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	785b      	ldrb	r3, [r3, #1]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d12b      	bne.n	80097ac <HAL_PCD_EP_DB_Transmit+0x516>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	66fb      	str	r3, [r7, #108]	; 0x6c
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009762:	b29b      	uxth	r3, r3
 8009764:	461a      	mov	r2, r3
 8009766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009768:	4413      	add	r3, r2
 800976a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	00da      	lsls	r2, r3, #3
 8009772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009774:	4413      	add	r3, r2
 8009776:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800977a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800977e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009782:	881b      	ldrh	r3, [r3, #0]
 8009784:	b29b      	uxth	r3, r3
 8009786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800978a:	b29a      	uxth	r2, r3
 800978c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009790:	801a      	strh	r2, [r3, #0]
 8009792:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009796:	881b      	ldrh	r3, [r3, #0]
 8009798:	b29b      	uxth	r3, r3
 800979a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800979e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80097a8:	801a      	strh	r2, [r3, #0]
 80097aa:	e017      	b.n	80097dc <HAL_PCD_EP_DB_Transmit+0x546>
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	785b      	ldrb	r3, [r3, #1]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d113      	bne.n	80097dc <HAL_PCD_EP_DB_Transmit+0x546>
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097bc:	b29b      	uxth	r3, r3
 80097be:	461a      	mov	r2, r3
 80097c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097c2:	4413      	add	r3, r2
 80097c4:	677b      	str	r3, [r7, #116]	; 0x74
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	00da      	lsls	r2, r3, #3
 80097cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097ce:	4413      	add	r3, r2
 80097d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80097d4:	673b      	str	r3, [r7, #112]	; 0x70
 80097d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097d8:	2200      	movs	r2, #0
 80097da:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	4619      	mov	r1, r3
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f009 fb0b 	bl	8012dfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80097e8:	88fb      	ldrh	r3, [r7, #6]
 80097ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f040 811a 	bne.w	8009a28 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	461a      	mov	r2, r3
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	b29b      	uxth	r3, r3
 8009806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800980a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800980e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	441a      	add	r2, r3
 8009820:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8009824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800982c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009834:	b29b      	uxth	r3, r3
 8009836:	8013      	strh	r3, [r2, #0]
 8009838:	e0f6      	b.n	8009a28 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800983a:	88fb      	ldrh	r3, [r7, #6]
 800983c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009840:	2b00      	cmp	r3, #0
 8009842:	d121      	bne.n	8009888 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	461a      	mov	r2, r3
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	881b      	ldrh	r3, [r3, #0]
 8009854:	b29b      	uxth	r3, r3
 8009856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800985a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800985e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	461a      	mov	r2, r3
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	441a      	add	r2, r3
 8009870:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800987c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009884:	b29b      	uxth	r3, r3
 8009886:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800988e:	2b01      	cmp	r3, #1
 8009890:	f040 80ca 	bne.w	8009a28 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	695a      	ldr	r2, [r3, #20]
 8009898:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800989c:	441a      	add	r2, r3
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	69da      	ldr	r2, [r3, #28]
 80098a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80098aa:	441a      	add	r2, r3
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	6a1a      	ldr	r2, [r3, #32]
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d30b      	bcc.n	80098d4 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	6a1a      	ldr	r2, [r3, #32]
 80098c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098cc:	1ad2      	subs	r2, r2, r3
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	621a      	str	r2, [r3, #32]
 80098d2:	e017      	b.n	8009904 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	6a1b      	ldr	r3, [r3, #32]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d108      	bne.n	80098ee <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80098dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80098e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80098ec:	e00a      	b.n	8009904 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	6a1b      	ldr	r3, [r3, #32]
 80098f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	2200      	movs	r2, #0
 80098fa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	657b      	str	r3, [r7, #84]	; 0x54
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	785b      	ldrb	r3, [r3, #1]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d165      	bne.n	80099de <HAL_PCD_EP_DB_Transmit+0x748>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009920:	b29b      	uxth	r3, r3
 8009922:	461a      	mov	r2, r3
 8009924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009926:	4413      	add	r3, r2
 8009928:	65fb      	str	r3, [r7, #92]	; 0x5c
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	00da      	lsls	r2, r3, #3
 8009930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009932:	4413      	add	r3, r2
 8009934:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009938:	65bb      	str	r3, [r7, #88]	; 0x58
 800993a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800993c:	881b      	ldrh	r3, [r3, #0]
 800993e:	b29b      	uxth	r3, r3
 8009940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009944:	b29a      	uxth	r2, r3
 8009946:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009948:	801a      	strh	r2, [r3, #0]
 800994a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800994e:	2b3e      	cmp	r3, #62	; 0x3e
 8009950:	d91d      	bls.n	800998e <HAL_PCD_EP_DB_Transmit+0x6f8>
 8009952:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009956:	095b      	lsrs	r3, r3, #5
 8009958:	66bb      	str	r3, [r7, #104]	; 0x68
 800995a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800995e:	f003 031f 	and.w	r3, r3, #31
 8009962:	2b00      	cmp	r3, #0
 8009964:	d102      	bne.n	800996c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8009966:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009968:	3b01      	subs	r3, #1
 800996a:	66bb      	str	r3, [r7, #104]	; 0x68
 800996c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800996e:	881b      	ldrh	r3, [r3, #0]
 8009970:	b29a      	uxth	r2, r3
 8009972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009974:	b29b      	uxth	r3, r3
 8009976:	029b      	lsls	r3, r3, #10
 8009978:	b29b      	uxth	r3, r3
 800997a:	4313      	orrs	r3, r2
 800997c:	b29b      	uxth	r3, r3
 800997e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009986:	b29a      	uxth	r2, r3
 8009988:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800998a:	801a      	strh	r2, [r3, #0]
 800998c:	e041      	b.n	8009a12 <HAL_PCD_EP_DB_Transmit+0x77c>
 800998e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10a      	bne.n	80099ac <HAL_PCD_EP_DB_Transmit+0x716>
 8009996:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009998:	881b      	ldrh	r3, [r3, #0]
 800999a:	b29b      	uxth	r3, r3
 800999c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099a8:	801a      	strh	r2, [r3, #0]
 80099aa:	e032      	b.n	8009a12 <HAL_PCD_EP_DB_Transmit+0x77c>
 80099ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099b0:	085b      	lsrs	r3, r3, #1
 80099b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80099b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099b8:	f003 0301 	and.w	r3, r3, #1
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d002      	beq.n	80099c6 <HAL_PCD_EP_DB_Transmit+0x730>
 80099c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099c2:	3301      	adds	r3, #1
 80099c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80099c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099c8:	881b      	ldrh	r3, [r3, #0]
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	029b      	lsls	r3, r3, #10
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	4313      	orrs	r3, r2
 80099d6:	b29a      	uxth	r2, r3
 80099d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099da:	801a      	strh	r2, [r3, #0]
 80099dc:	e019      	b.n	8009a12 <HAL_PCD_EP_DB_Transmit+0x77c>
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	785b      	ldrb	r3, [r3, #1]
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d115      	bne.n	8009a12 <HAL_PCD_EP_DB_Transmit+0x77c>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	461a      	mov	r2, r3
 80099f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099f4:	4413      	add	r3, r2
 80099f6:	657b      	str	r3, [r7, #84]	; 0x54
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	00da      	lsls	r2, r3, #3
 80099fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a00:	4413      	add	r3, r2
 8009a02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a06:	653b      	str	r3, [r7, #80]	; 0x50
 8009a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a10:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6818      	ldr	r0, [r3, #0]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	6959      	ldr	r1, [r3, #20]
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	895a      	ldrh	r2, [r3, #10]
 8009a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	f006 fa4d 	bl	800fec2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	4413      	add	r3, r2
 8009a36:	881b      	ldrh	r3, [r3, #0]
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a42:	82bb      	strh	r3, [r7, #20]
 8009a44:	8abb      	ldrh	r3, [r7, #20]
 8009a46:	f083 0310 	eor.w	r3, r3, #16
 8009a4a:	82bb      	strh	r3, [r7, #20]
 8009a4c:	8abb      	ldrh	r3, [r7, #20]
 8009a4e:	f083 0320 	eor.w	r3, r3, #32
 8009a52:	82bb      	strh	r3, [r7, #20]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	461a      	mov	r2, r3
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	441a      	add	r2, r3
 8009a62:	8abb      	ldrh	r3, [r7, #20]
 8009a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3790      	adds	r7, #144	; 0x90
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b087      	sub	sp, #28
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	60f8      	str	r0, [r7, #12]
 8009a8a:	607b      	str	r3, [r7, #4]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	817b      	strh	r3, [r7, #10]
 8009a90:	4613      	mov	r3, r2
 8009a92:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8009a94:	897b      	ldrh	r3, [r7, #10]
 8009a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d00b      	beq.n	8009ab8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009aa0:	897b      	ldrh	r3, [r7, #10]
 8009aa2:	f003 0307 	and.w	r3, r3, #7
 8009aa6:	1c5a      	adds	r2, r3, #1
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	00db      	lsls	r3, r3, #3
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	617b      	str	r3, [r7, #20]
 8009ab6:	e009      	b.n	8009acc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009ab8:	897a      	ldrh	r2, [r7, #10]
 8009aba:	4613      	mov	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4413      	add	r3, r2
 8009ac0:	00db      	lsls	r3, r3, #3
 8009ac2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	4413      	add	r3, r2
 8009aca:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8009acc:	893b      	ldrh	r3, [r7, #8]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d107      	bne.n	8009ae2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	b29a      	uxth	r2, r3
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	80da      	strh	r2, [r3, #6]
 8009ae0:	e00b      	b.n	8009afa <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	0c1b      	lsrs	r3, r3, #16
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	371c      	adds	r7, #28
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	f043 0301 	orr.w	r3, r3, #1
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	f043 0302 	orr.w	r3, r3, #2
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009b60:	4b04      	ldr	r3, [pc, #16]	; (8009b74 <HAL_PWREx_GetVoltageRange+0x18>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	40007000 	.word	0x40007000

08009b78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b86:	d130      	bne.n	8009bea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009b88:	4b23      	ldr	r3, [pc, #140]	; (8009c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b94:	d038      	beq.n	8009c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009b96:	4b20      	ldr	r3, [pc, #128]	; (8009c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009b9e:	4a1e      	ldr	r2, [pc, #120]	; (8009c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009ba0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ba4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009ba6:	4b1d      	ldr	r3, [pc, #116]	; (8009c1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2232      	movs	r2, #50	; 0x32
 8009bac:	fb02 f303 	mul.w	r3, r2, r3
 8009bb0:	4a1b      	ldr	r2, [pc, #108]	; (8009c20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb6:	0c9b      	lsrs	r3, r3, #18
 8009bb8:	3301      	adds	r3, #1
 8009bba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009bbc:	e002      	b.n	8009bc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009bc4:	4b14      	ldr	r3, [pc, #80]	; (8009c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009bc6:	695b      	ldr	r3, [r3, #20]
 8009bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bd0:	d102      	bne.n	8009bd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1f2      	bne.n	8009bbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009bd8:	4b0f      	ldr	r3, [pc, #60]	; (8009c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009bda:	695b      	ldr	r3, [r3, #20]
 8009bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009be4:	d110      	bne.n	8009c08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e00f      	b.n	8009c0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009bea:	4b0b      	ldr	r3, [pc, #44]	; (8009c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bf6:	d007      	beq.n	8009c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009bf8:	4b07      	ldr	r3, [pc, #28]	; (8009c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009c00:	4a05      	ldr	r2, [pc, #20]	; (8009c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	40007000 	.word	0x40007000
 8009c1c:	20000020 	.word	0x20000020
 8009c20:	431bde83 	.word	0x431bde83

08009c24 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009c24:	b480      	push	{r7}
 8009c26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009c28:	4b05      	ldr	r3, [pc, #20]	; (8009c40 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	4a04      	ldr	r2, [pc, #16]	; (8009c40 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c32:	6053      	str	r3, [r2, #4]
}
 8009c34:	bf00      	nop
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	40007000 	.word	0x40007000

08009c44 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b088      	sub	sp, #32
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d102      	bne.n	8009c58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	f000 bc02 	b.w	800a45c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c58:	4b96      	ldr	r3, [pc, #600]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	f003 030c 	and.w	r3, r3, #12
 8009c60:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009c62:	4b94      	ldr	r3, [pc, #592]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	f003 0303 	and.w	r3, r3, #3
 8009c6a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f003 0310 	and.w	r3, r3, #16
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f000 80e4 	beq.w	8009e42 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d007      	beq.n	8009c90 <HAL_RCC_OscConfig+0x4c>
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	2b0c      	cmp	r3, #12
 8009c84:	f040 808b 	bne.w	8009d9e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	f040 8087 	bne.w	8009d9e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009c90:	4b88      	ldr	r3, [pc, #544]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f003 0302 	and.w	r3, r3, #2
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d005      	beq.n	8009ca8 <HAL_RCC_OscConfig+0x64>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d101      	bne.n	8009ca8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e3d9      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a1a      	ldr	r2, [r3, #32]
 8009cac:	4b81      	ldr	r3, [pc, #516]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 0308 	and.w	r3, r3, #8
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d004      	beq.n	8009cc2 <HAL_RCC_OscConfig+0x7e>
 8009cb8:	4b7e      	ldr	r3, [pc, #504]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cc0:	e005      	b.n	8009cce <HAL_RCC_OscConfig+0x8a>
 8009cc2:	4b7c      	ldr	r3, [pc, #496]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cc8:	091b      	lsrs	r3, r3, #4
 8009cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d223      	bcs.n	8009d1a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6a1b      	ldr	r3, [r3, #32]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 fd8c 	bl	800a7f4 <RCC_SetFlashLatencyFromMSIRange>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e3ba      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009ce6:	4b73      	ldr	r3, [pc, #460]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a72      	ldr	r2, [pc, #456]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009cec:	f043 0308 	orr.w	r3, r3, #8
 8009cf0:	6013      	str	r3, [r2, #0]
 8009cf2:	4b70      	ldr	r3, [pc, #448]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	496d      	ldr	r1, [pc, #436]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009d00:	4313      	orrs	r3, r2
 8009d02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009d04:	4b6b      	ldr	r3, [pc, #428]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	69db      	ldr	r3, [r3, #28]
 8009d10:	021b      	lsls	r3, r3, #8
 8009d12:	4968      	ldr	r1, [pc, #416]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009d14:	4313      	orrs	r3, r2
 8009d16:	604b      	str	r3, [r1, #4]
 8009d18:	e025      	b.n	8009d66 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d1a:	4b66      	ldr	r3, [pc, #408]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a65      	ldr	r2, [pc, #404]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009d20:	f043 0308 	orr.w	r3, r3, #8
 8009d24:	6013      	str	r3, [r2, #0]
 8009d26:	4b63      	ldr	r3, [pc, #396]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	4960      	ldr	r1, [pc, #384]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009d34:	4313      	orrs	r3, r2
 8009d36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009d38:	4b5e      	ldr	r3, [pc, #376]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	69db      	ldr	r3, [r3, #28]
 8009d44:	021b      	lsls	r3, r3, #8
 8009d46:	495b      	ldr	r1, [pc, #364]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d109      	bne.n	8009d66 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 fd4c 	bl	800a7f4 <RCC_SetFlashLatencyFromMSIRange>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e37a      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009d66:	f000 fc81 	bl	800a66c <HAL_RCC_GetSysClockFreq>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	4b51      	ldr	r3, [pc, #324]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	091b      	lsrs	r3, r3, #4
 8009d72:	f003 030f 	and.w	r3, r3, #15
 8009d76:	4950      	ldr	r1, [pc, #320]	; (8009eb8 <HAL_RCC_OscConfig+0x274>)
 8009d78:	5ccb      	ldrb	r3, [r1, r3]
 8009d7a:	f003 031f 	and.w	r3, r3, #31
 8009d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d82:	4a4e      	ldr	r2, [pc, #312]	; (8009ebc <HAL_RCC_OscConfig+0x278>)
 8009d84:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009d86:	4b4e      	ldr	r3, [pc, #312]	; (8009ec0 <HAL_RCC_OscConfig+0x27c>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7fb fc4e 	bl	800562c <HAL_InitTick>
 8009d90:	4603      	mov	r3, r0
 8009d92:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009d94:	7bfb      	ldrb	r3, [r7, #15]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d052      	beq.n	8009e40 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	e35e      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	699b      	ldr	r3, [r3, #24]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d032      	beq.n	8009e0c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009da6:	4b43      	ldr	r3, [pc, #268]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a42      	ldr	r2, [pc, #264]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009dac:	f043 0301 	orr.w	r3, r3, #1
 8009db0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009db2:	f7fb fc8b 	bl	80056cc <HAL_GetTick>
 8009db6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009db8:	e008      	b.n	8009dcc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009dba:	f7fb fc87 	bl	80056cc <HAL_GetTick>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	d901      	bls.n	8009dcc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	e347      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009dcc:	4b39      	ldr	r3, [pc, #228]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f003 0302 	and.w	r3, r3, #2
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d0f0      	beq.n	8009dba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009dd8:	4b36      	ldr	r3, [pc, #216]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a35      	ldr	r2, [pc, #212]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009dde:	f043 0308 	orr.w	r3, r3, #8
 8009de2:	6013      	str	r3, [r2, #0]
 8009de4:	4b33      	ldr	r3, [pc, #204]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a1b      	ldr	r3, [r3, #32]
 8009df0:	4930      	ldr	r1, [pc, #192]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009df2:	4313      	orrs	r3, r2
 8009df4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009df6:	4b2f      	ldr	r3, [pc, #188]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	69db      	ldr	r3, [r3, #28]
 8009e02:	021b      	lsls	r3, r3, #8
 8009e04:	492b      	ldr	r1, [pc, #172]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009e06:	4313      	orrs	r3, r2
 8009e08:	604b      	str	r3, [r1, #4]
 8009e0a:	e01a      	b.n	8009e42 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009e0c:	4b29      	ldr	r3, [pc, #164]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a28      	ldr	r2, [pc, #160]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009e12:	f023 0301 	bic.w	r3, r3, #1
 8009e16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009e18:	f7fb fc58 	bl	80056cc <HAL_GetTick>
 8009e1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009e1e:	e008      	b.n	8009e32 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009e20:	f7fb fc54 	bl	80056cc <HAL_GetTick>
 8009e24:	4602      	mov	r2, r0
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d901      	bls.n	8009e32 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	e314      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009e32:	4b20      	ldr	r3, [pc, #128]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 0302 	and.w	r3, r3, #2
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1f0      	bne.n	8009e20 <HAL_RCC_OscConfig+0x1dc>
 8009e3e:	e000      	b.n	8009e42 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009e40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 0301 	and.w	r3, r3, #1
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d073      	beq.n	8009f36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	2b08      	cmp	r3, #8
 8009e52:	d005      	beq.n	8009e60 <HAL_RCC_OscConfig+0x21c>
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	2b0c      	cmp	r3, #12
 8009e58:	d10e      	bne.n	8009e78 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	2b03      	cmp	r3, #3
 8009e5e:	d10b      	bne.n	8009e78 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e60:	4b14      	ldr	r3, [pc, #80]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d063      	beq.n	8009f34 <HAL_RCC_OscConfig+0x2f0>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d15f      	bne.n	8009f34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e2f1      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e80:	d106      	bne.n	8009e90 <HAL_RCC_OscConfig+0x24c>
 8009e82:	4b0c      	ldr	r3, [pc, #48]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a0b      	ldr	r2, [pc, #44]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e8c:	6013      	str	r3, [r2, #0]
 8009e8e:	e025      	b.n	8009edc <HAL_RCC_OscConfig+0x298>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e98:	d114      	bne.n	8009ec4 <HAL_RCC_OscConfig+0x280>
 8009e9a:	4b06      	ldr	r3, [pc, #24]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a05      	ldr	r2, [pc, #20]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ea4:	6013      	str	r3, [r2, #0]
 8009ea6:	4b03      	ldr	r3, [pc, #12]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a02      	ldr	r2, [pc, #8]	; (8009eb4 <HAL_RCC_OscConfig+0x270>)
 8009eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009eb0:	6013      	str	r3, [r2, #0]
 8009eb2:	e013      	b.n	8009edc <HAL_RCC_OscConfig+0x298>
 8009eb4:	40021000 	.word	0x40021000
 8009eb8:	0801b7ec 	.word	0x0801b7ec
 8009ebc:	20000020 	.word	0x20000020
 8009ec0:	20000024 	.word	0x20000024
 8009ec4:	4ba0      	ldr	r3, [pc, #640]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a9f      	ldr	r2, [pc, #636]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 8009eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ece:	6013      	str	r3, [r2, #0]
 8009ed0:	4b9d      	ldr	r3, [pc, #628]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a9c      	ldr	r2, [pc, #624]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 8009ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d013      	beq.n	8009f0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ee4:	f7fb fbf2 	bl	80056cc <HAL_GetTick>
 8009ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009eea:	e008      	b.n	8009efe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009eec:	f7fb fbee 	bl	80056cc <HAL_GetTick>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	2b64      	cmp	r3, #100	; 0x64
 8009ef8:	d901      	bls.n	8009efe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009efa:	2303      	movs	r3, #3
 8009efc:	e2ae      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009efe:	4b92      	ldr	r3, [pc, #584]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d0f0      	beq.n	8009eec <HAL_RCC_OscConfig+0x2a8>
 8009f0a:	e014      	b.n	8009f36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f0c:	f7fb fbde 	bl	80056cc <HAL_GetTick>
 8009f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009f12:	e008      	b.n	8009f26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f14:	f7fb fbda 	bl	80056cc <HAL_GetTick>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	1ad3      	subs	r3, r2, r3
 8009f1e:	2b64      	cmp	r3, #100	; 0x64
 8009f20:	d901      	bls.n	8009f26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009f22:	2303      	movs	r3, #3
 8009f24:	e29a      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009f26:	4b88      	ldr	r3, [pc, #544]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d1f0      	bne.n	8009f14 <HAL_RCC_OscConfig+0x2d0>
 8009f32:	e000      	b.n	8009f36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 0302 	and.w	r3, r3, #2
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d060      	beq.n	800a004 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	2b04      	cmp	r3, #4
 8009f46:	d005      	beq.n	8009f54 <HAL_RCC_OscConfig+0x310>
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	2b0c      	cmp	r3, #12
 8009f4c:	d119      	bne.n	8009f82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	2b02      	cmp	r3, #2
 8009f52:	d116      	bne.n	8009f82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f54:	4b7c      	ldr	r3, [pc, #496]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d005      	beq.n	8009f6c <HAL_RCC_OscConfig+0x328>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d101      	bne.n	8009f6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e277      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f6c:	4b76      	ldr	r3, [pc, #472]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	061b      	lsls	r3, r3, #24
 8009f7a:	4973      	ldr	r1, [pc, #460]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f80:	e040      	b.n	800a004 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d023      	beq.n	8009fd2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f8a:	4b6f      	ldr	r3, [pc, #444]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a6e      	ldr	r2, [pc, #440]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 8009f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f96:	f7fb fb99 	bl	80056cc <HAL_GetTick>
 8009f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f9c:	e008      	b.n	8009fb0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f9e:	f7fb fb95 	bl	80056cc <HAL_GetTick>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d901      	bls.n	8009fb0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e255      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009fb0:	4b65      	ldr	r3, [pc, #404]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d0f0      	beq.n	8009f9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fbc:	4b62      	ldr	r3, [pc, #392]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	061b      	lsls	r3, r3, #24
 8009fca:	495f      	ldr	r1, [pc, #380]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	604b      	str	r3, [r1, #4]
 8009fd0:	e018      	b.n	800a004 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fd2:	4b5d      	ldr	r3, [pc, #372]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a5c      	ldr	r2, [pc, #368]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 8009fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fde:	f7fb fb75 	bl	80056cc <HAL_GetTick>
 8009fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009fe4:	e008      	b.n	8009ff8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009fe6:	f7fb fb71 	bl	80056cc <HAL_GetTick>
 8009fea:	4602      	mov	r2, r0
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d901      	bls.n	8009ff8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	e231      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ff8:	4b53      	ldr	r3, [pc, #332]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1f0      	bne.n	8009fe6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 0308 	and.w	r3, r3, #8
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d03c      	beq.n	800a08a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	695b      	ldr	r3, [r3, #20]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d01c      	beq.n	800a052 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a018:	4b4b      	ldr	r3, [pc, #300]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 800a01a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a01e:	4a4a      	ldr	r2, [pc, #296]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 800a020:	f043 0301 	orr.w	r3, r3, #1
 800a024:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a028:	f7fb fb50 	bl	80056cc <HAL_GetTick>
 800a02c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a02e:	e008      	b.n	800a042 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a030:	f7fb fb4c 	bl	80056cc <HAL_GetTick>
 800a034:	4602      	mov	r2, r0
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d901      	bls.n	800a042 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e20c      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a042:	4b41      	ldr	r3, [pc, #260]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 800a044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a048:	f003 0302 	and.w	r3, r3, #2
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d0ef      	beq.n	800a030 <HAL_RCC_OscConfig+0x3ec>
 800a050:	e01b      	b.n	800a08a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a052:	4b3d      	ldr	r3, [pc, #244]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 800a054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a058:	4a3b      	ldr	r2, [pc, #236]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 800a05a:	f023 0301 	bic.w	r3, r3, #1
 800a05e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a062:	f7fb fb33 	bl	80056cc <HAL_GetTick>
 800a066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a068:	e008      	b.n	800a07c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a06a:	f7fb fb2f 	bl	80056cc <HAL_GetTick>
 800a06e:	4602      	mov	r2, r0
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	2b02      	cmp	r3, #2
 800a076:	d901      	bls.n	800a07c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a078:	2303      	movs	r3, #3
 800a07a:	e1ef      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a07c:	4b32      	ldr	r3, [pc, #200]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 800a07e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a082:	f003 0302 	and.w	r3, r3, #2
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1ef      	bne.n	800a06a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f003 0304 	and.w	r3, r3, #4
 800a092:	2b00      	cmp	r3, #0
 800a094:	f000 80a6 	beq.w	800a1e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a098:	2300      	movs	r3, #0
 800a09a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a09c:	4b2a      	ldr	r3, [pc, #168]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 800a09e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d10d      	bne.n	800a0c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a0a8:	4b27      	ldr	r3, [pc, #156]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 800a0aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ac:	4a26      	ldr	r2, [pc, #152]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 800a0ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0b2:	6593      	str	r3, [r2, #88]	; 0x58
 800a0b4:	4b24      	ldr	r3, [pc, #144]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 800a0b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0bc:	60bb      	str	r3, [r7, #8]
 800a0be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0c4:	4b21      	ldr	r3, [pc, #132]	; (800a14c <HAL_RCC_OscConfig+0x508>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d118      	bne.n	800a102 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0d0:	4b1e      	ldr	r3, [pc, #120]	; (800a14c <HAL_RCC_OscConfig+0x508>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a1d      	ldr	r2, [pc, #116]	; (800a14c <HAL_RCC_OscConfig+0x508>)
 800a0d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a0dc:	f7fb faf6 	bl	80056cc <HAL_GetTick>
 800a0e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0e2:	e008      	b.n	800a0f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0e4:	f7fb faf2 	bl	80056cc <HAL_GetTick>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d901      	bls.n	800a0f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a0f2:	2303      	movs	r3, #3
 800a0f4:	e1b2      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0f6:	4b15      	ldr	r3, [pc, #84]	; (800a14c <HAL_RCC_OscConfig+0x508>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d0f0      	beq.n	800a0e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	2b01      	cmp	r3, #1
 800a108:	d108      	bne.n	800a11c <HAL_RCC_OscConfig+0x4d8>
 800a10a:	4b0f      	ldr	r3, [pc, #60]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 800a10c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a110:	4a0d      	ldr	r2, [pc, #52]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 800a112:	f043 0301 	orr.w	r3, r3, #1
 800a116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a11a:	e029      	b.n	800a170 <HAL_RCC_OscConfig+0x52c>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	2b05      	cmp	r3, #5
 800a122:	d115      	bne.n	800a150 <HAL_RCC_OscConfig+0x50c>
 800a124:	4b08      	ldr	r3, [pc, #32]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 800a126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a12a:	4a07      	ldr	r2, [pc, #28]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 800a12c:	f043 0304 	orr.w	r3, r3, #4
 800a130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a134:	4b04      	ldr	r3, [pc, #16]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 800a136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a13a:	4a03      	ldr	r2, [pc, #12]	; (800a148 <HAL_RCC_OscConfig+0x504>)
 800a13c:	f043 0301 	orr.w	r3, r3, #1
 800a140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a144:	e014      	b.n	800a170 <HAL_RCC_OscConfig+0x52c>
 800a146:	bf00      	nop
 800a148:	40021000 	.word	0x40021000
 800a14c:	40007000 	.word	0x40007000
 800a150:	4b9a      	ldr	r3, [pc, #616]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a156:	4a99      	ldr	r2, [pc, #612]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a158:	f023 0301 	bic.w	r3, r3, #1
 800a15c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a160:	4b96      	ldr	r3, [pc, #600]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a166:	4a95      	ldr	r2, [pc, #596]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a168:	f023 0304 	bic.w	r3, r3, #4
 800a16c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d016      	beq.n	800a1a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a178:	f7fb faa8 	bl	80056cc <HAL_GetTick>
 800a17c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a17e:	e00a      	b.n	800a196 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a180:	f7fb faa4 	bl	80056cc <HAL_GetTick>
 800a184:	4602      	mov	r2, r0
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a18e:	4293      	cmp	r3, r2
 800a190:	d901      	bls.n	800a196 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	e162      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a196:	4b89      	ldr	r3, [pc, #548]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a19c:	f003 0302 	and.w	r3, r3, #2
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d0ed      	beq.n	800a180 <HAL_RCC_OscConfig+0x53c>
 800a1a4:	e015      	b.n	800a1d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1a6:	f7fb fa91 	bl	80056cc <HAL_GetTick>
 800a1aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a1ac:	e00a      	b.n	800a1c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1ae:	f7fb fa8d 	bl	80056cc <HAL_GetTick>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d901      	bls.n	800a1c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a1c0:	2303      	movs	r3, #3
 800a1c2:	e14b      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a1c4:	4b7d      	ldr	r3, [pc, #500]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a1c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1ca:	f003 0302 	and.w	r3, r3, #2
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1ed      	bne.n	800a1ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a1d2:	7ffb      	ldrb	r3, [r7, #31]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d105      	bne.n	800a1e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a1d8:	4b78      	ldr	r3, [pc, #480]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a1da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1dc:	4a77      	ldr	r2, [pc, #476]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a1de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 0320 	and.w	r3, r3, #32
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d03c      	beq.n	800a26a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d01c      	beq.n	800a232 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a1f8:	4b70      	ldr	r3, [pc, #448]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a1fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a1fe:	4a6f      	ldr	r2, [pc, #444]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a200:	f043 0301 	orr.w	r3, r3, #1
 800a204:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a208:	f7fb fa60 	bl	80056cc <HAL_GetTick>
 800a20c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a20e:	e008      	b.n	800a222 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a210:	f7fb fa5c 	bl	80056cc <HAL_GetTick>
 800a214:	4602      	mov	r2, r0
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d901      	bls.n	800a222 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a21e:	2303      	movs	r3, #3
 800a220:	e11c      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a222:	4b66      	ldr	r3, [pc, #408]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a224:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a228:	f003 0302 	and.w	r3, r3, #2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d0ef      	beq.n	800a210 <HAL_RCC_OscConfig+0x5cc>
 800a230:	e01b      	b.n	800a26a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a232:	4b62      	ldr	r3, [pc, #392]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a234:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a238:	4a60      	ldr	r2, [pc, #384]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a23a:	f023 0301 	bic.w	r3, r3, #1
 800a23e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a242:	f7fb fa43 	bl	80056cc <HAL_GetTick>
 800a246:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a248:	e008      	b.n	800a25c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a24a:	f7fb fa3f 	bl	80056cc <HAL_GetTick>
 800a24e:	4602      	mov	r2, r0
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	2b02      	cmp	r3, #2
 800a256:	d901      	bls.n	800a25c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a258:	2303      	movs	r3, #3
 800a25a:	e0ff      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a25c:	4b57      	ldr	r3, [pc, #348]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a25e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a262:	f003 0302 	and.w	r3, r3, #2
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1ef      	bne.n	800a24a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f000 80f3 	beq.w	800a45a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a278:	2b02      	cmp	r3, #2
 800a27a:	f040 80c9 	bne.w	800a410 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a27e:	4b4f      	ldr	r3, [pc, #316]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	f003 0203 	and.w	r2, r3, #3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28e:	429a      	cmp	r2, r3
 800a290:	d12c      	bne.n	800a2ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a29c:	3b01      	subs	r3, #1
 800a29e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d123      	bne.n	800a2ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d11b      	bne.n	800a2ec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2be:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d113      	bne.n	800a2ec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ce:	085b      	lsrs	r3, r3, #1
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d109      	bne.n	800a2ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e2:	085b      	lsrs	r3, r3, #1
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d06b      	beq.n	800a3c4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	2b0c      	cmp	r3, #12
 800a2f0:	d062      	beq.n	800a3b8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a2f2:	4b32      	ldr	r3, [pc, #200]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e0ac      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a302:	4b2e      	ldr	r3, [pc, #184]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a2d      	ldr	r2, [pc, #180]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a308:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a30c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a30e:	f7fb f9dd 	bl	80056cc <HAL_GetTick>
 800a312:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a314:	e008      	b.n	800a328 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a316:	f7fb f9d9 	bl	80056cc <HAL_GetTick>
 800a31a:	4602      	mov	r2, r0
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	1ad3      	subs	r3, r2, r3
 800a320:	2b02      	cmp	r3, #2
 800a322:	d901      	bls.n	800a328 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800a324:	2303      	movs	r3, #3
 800a326:	e099      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a328:	4b24      	ldr	r3, [pc, #144]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1f0      	bne.n	800a316 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a334:	4b21      	ldr	r3, [pc, #132]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a336:	68da      	ldr	r2, [r3, #12]
 800a338:	4b21      	ldr	r3, [pc, #132]	; (800a3c0 <HAL_RCC_OscConfig+0x77c>)
 800a33a:	4013      	ands	r3, r2
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a344:	3a01      	subs	r2, #1
 800a346:	0112      	lsls	r2, r2, #4
 800a348:	4311      	orrs	r1, r2
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a34e:	0212      	lsls	r2, r2, #8
 800a350:	4311      	orrs	r1, r2
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a356:	0852      	lsrs	r2, r2, #1
 800a358:	3a01      	subs	r2, #1
 800a35a:	0552      	lsls	r2, r2, #21
 800a35c:	4311      	orrs	r1, r2
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a362:	0852      	lsrs	r2, r2, #1
 800a364:	3a01      	subs	r2, #1
 800a366:	0652      	lsls	r2, r2, #25
 800a368:	4311      	orrs	r1, r2
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a36e:	06d2      	lsls	r2, r2, #27
 800a370:	430a      	orrs	r2, r1
 800a372:	4912      	ldr	r1, [pc, #72]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a374:	4313      	orrs	r3, r2
 800a376:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a378:	4b10      	ldr	r3, [pc, #64]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a0f      	ldr	r2, [pc, #60]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a37e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a382:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a384:	4b0d      	ldr	r3, [pc, #52]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	4a0c      	ldr	r2, [pc, #48]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a38a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a38e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a390:	f7fb f99c 	bl	80056cc <HAL_GetTick>
 800a394:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a396:	e008      	b.n	800a3aa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a398:	f7fb f998 	bl	80056cc <HAL_GetTick>
 800a39c:	4602      	mov	r2, r0
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d901      	bls.n	800a3aa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	e058      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a3aa:	4b04      	ldr	r3, [pc, #16]	; (800a3bc <HAL_RCC_OscConfig+0x778>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d0f0      	beq.n	800a398 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a3b6:	e050      	b.n	800a45a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e04f      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
 800a3bc:	40021000 	.word	0x40021000
 800a3c0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a3c4:	4b27      	ldr	r3, [pc, #156]	; (800a464 <HAL_RCC_OscConfig+0x820>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d144      	bne.n	800a45a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a3d0:	4b24      	ldr	r3, [pc, #144]	; (800a464 <HAL_RCC_OscConfig+0x820>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a23      	ldr	r2, [pc, #140]	; (800a464 <HAL_RCC_OscConfig+0x820>)
 800a3d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a3dc:	4b21      	ldr	r3, [pc, #132]	; (800a464 <HAL_RCC_OscConfig+0x820>)
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	4a20      	ldr	r2, [pc, #128]	; (800a464 <HAL_RCC_OscConfig+0x820>)
 800a3e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a3e8:	f7fb f970 	bl	80056cc <HAL_GetTick>
 800a3ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a3ee:	e008      	b.n	800a402 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3f0:	f7fb f96c 	bl	80056cc <HAL_GetTick>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d901      	bls.n	800a402 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800a3fe:	2303      	movs	r3, #3
 800a400:	e02c      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a402:	4b18      	ldr	r3, [pc, #96]	; (800a464 <HAL_RCC_OscConfig+0x820>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d0f0      	beq.n	800a3f0 <HAL_RCC_OscConfig+0x7ac>
 800a40e:	e024      	b.n	800a45a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	2b0c      	cmp	r3, #12
 800a414:	d01f      	beq.n	800a456 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a416:	4b13      	ldr	r3, [pc, #76]	; (800a464 <HAL_RCC_OscConfig+0x820>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a12      	ldr	r2, [pc, #72]	; (800a464 <HAL_RCC_OscConfig+0x820>)
 800a41c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a422:	f7fb f953 	bl	80056cc <HAL_GetTick>
 800a426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a428:	e008      	b.n	800a43c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a42a:	f7fb f94f 	bl	80056cc <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	2b02      	cmp	r3, #2
 800a436:	d901      	bls.n	800a43c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800a438:	2303      	movs	r3, #3
 800a43a:	e00f      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a43c:	4b09      	ldr	r3, [pc, #36]	; (800a464 <HAL_RCC_OscConfig+0x820>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1f0      	bne.n	800a42a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800a448:	4b06      	ldr	r3, [pc, #24]	; (800a464 <HAL_RCC_OscConfig+0x820>)
 800a44a:	68da      	ldr	r2, [r3, #12]
 800a44c:	4905      	ldr	r1, [pc, #20]	; (800a464 <HAL_RCC_OscConfig+0x820>)
 800a44e:	4b06      	ldr	r3, [pc, #24]	; (800a468 <HAL_RCC_OscConfig+0x824>)
 800a450:	4013      	ands	r3, r2
 800a452:	60cb      	str	r3, [r1, #12]
 800a454:	e001      	b.n	800a45a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	e000      	b.n	800a45c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3720      	adds	r7, #32
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	40021000 	.word	0x40021000
 800a468:	feeefffc 	.word	0xfeeefffc

0800a46c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	e0e7      	b.n	800a650 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a480:	4b75      	ldr	r3, [pc, #468]	; (800a658 <HAL_RCC_ClockConfig+0x1ec>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f003 0307 	and.w	r3, r3, #7
 800a488:	683a      	ldr	r2, [r7, #0]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d910      	bls.n	800a4b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a48e:	4b72      	ldr	r3, [pc, #456]	; (800a658 <HAL_RCC_ClockConfig+0x1ec>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f023 0207 	bic.w	r2, r3, #7
 800a496:	4970      	ldr	r1, [pc, #448]	; (800a658 <HAL_RCC_ClockConfig+0x1ec>)
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a49e:	4b6e      	ldr	r3, [pc, #440]	; (800a658 <HAL_RCC_ClockConfig+0x1ec>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 0307 	and.w	r3, r3, #7
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d001      	beq.n	800a4b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e0cf      	b.n	800a650 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 0302 	and.w	r3, r3, #2
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d010      	beq.n	800a4de <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	689a      	ldr	r2, [r3, #8]
 800a4c0:	4b66      	ldr	r3, [pc, #408]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d908      	bls.n	800a4de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4cc:	4b63      	ldr	r3, [pc, #396]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	4960      	ldr	r1, [pc, #384]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f003 0301 	and.w	r3, r3, #1
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d04c      	beq.n	800a584 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	d107      	bne.n	800a502 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a4f2:	4b5a      	ldr	r3, [pc, #360]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d121      	bne.n	800a542 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e0a6      	b.n	800a650 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	2b02      	cmp	r3, #2
 800a508:	d107      	bne.n	800a51a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a50a:	4b54      	ldr	r3, [pc, #336]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a512:	2b00      	cmp	r3, #0
 800a514:	d115      	bne.n	800a542 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	e09a      	b.n	800a650 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d107      	bne.n	800a532 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a522:	4b4e      	ldr	r3, [pc, #312]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 0302 	and.w	r3, r3, #2
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d109      	bne.n	800a542 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	e08e      	b.n	800a650 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a532:	4b4a      	ldr	r3, [pc, #296]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d101      	bne.n	800a542 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	e086      	b.n	800a650 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a542:	4b46      	ldr	r3, [pc, #280]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	f023 0203 	bic.w	r2, r3, #3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	4943      	ldr	r1, [pc, #268]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a550:	4313      	orrs	r3, r2
 800a552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a554:	f7fb f8ba 	bl	80056cc <HAL_GetTick>
 800a558:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a55a:	e00a      	b.n	800a572 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a55c:	f7fb f8b6 	bl	80056cc <HAL_GetTick>
 800a560:	4602      	mov	r2, r0
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	1ad3      	subs	r3, r2, r3
 800a566:	f241 3288 	movw	r2, #5000	; 0x1388
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d901      	bls.n	800a572 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800a56e:	2303      	movs	r3, #3
 800a570:	e06e      	b.n	800a650 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a572:	4b3a      	ldr	r3, [pc, #232]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	f003 020c 	and.w	r2, r3, #12
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	429a      	cmp	r2, r3
 800a582:	d1eb      	bne.n	800a55c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 0302 	and.w	r3, r3, #2
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d010      	beq.n	800a5b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	689a      	ldr	r2, [r3, #8]
 800a594:	4b31      	ldr	r3, [pc, #196]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d208      	bcs.n	800a5b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5a0:	4b2e      	ldr	r3, [pc, #184]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	492b      	ldr	r1, [pc, #172]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a5b2:	4b29      	ldr	r3, [pc, #164]	; (800a658 <HAL_RCC_ClockConfig+0x1ec>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f003 0307 	and.w	r3, r3, #7
 800a5ba:	683a      	ldr	r2, [r7, #0]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d210      	bcs.n	800a5e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5c0:	4b25      	ldr	r3, [pc, #148]	; (800a658 <HAL_RCC_ClockConfig+0x1ec>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f023 0207 	bic.w	r2, r3, #7
 800a5c8:	4923      	ldr	r1, [pc, #140]	; (800a658 <HAL_RCC_ClockConfig+0x1ec>)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5d0:	4b21      	ldr	r3, [pc, #132]	; (800a658 <HAL_RCC_ClockConfig+0x1ec>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f003 0307 	and.w	r3, r3, #7
 800a5d8:	683a      	ldr	r2, [r7, #0]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d001      	beq.n	800a5e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e036      	b.n	800a650 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 0304 	and.w	r3, r3, #4
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d008      	beq.n	800a600 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a5ee:	4b1b      	ldr	r3, [pc, #108]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	4918      	ldr	r1, [pc, #96]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 0308 	and.w	r3, r3, #8
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d009      	beq.n	800a620 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a60c:	4b13      	ldr	r3, [pc, #76]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	00db      	lsls	r3, r3, #3
 800a61a:	4910      	ldr	r1, [pc, #64]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a61c:	4313      	orrs	r3, r2
 800a61e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a620:	f000 f824 	bl	800a66c <HAL_RCC_GetSysClockFreq>
 800a624:	4602      	mov	r2, r0
 800a626:	4b0d      	ldr	r3, [pc, #52]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	091b      	lsrs	r3, r3, #4
 800a62c:	f003 030f 	and.w	r3, r3, #15
 800a630:	490b      	ldr	r1, [pc, #44]	; (800a660 <HAL_RCC_ClockConfig+0x1f4>)
 800a632:	5ccb      	ldrb	r3, [r1, r3]
 800a634:	f003 031f 	and.w	r3, r3, #31
 800a638:	fa22 f303 	lsr.w	r3, r2, r3
 800a63c:	4a09      	ldr	r2, [pc, #36]	; (800a664 <HAL_RCC_ClockConfig+0x1f8>)
 800a63e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a640:	4b09      	ldr	r3, [pc, #36]	; (800a668 <HAL_RCC_ClockConfig+0x1fc>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4618      	mov	r0, r3
 800a646:	f7fa fff1 	bl	800562c <HAL_InitTick>
 800a64a:	4603      	mov	r3, r0
 800a64c:	72fb      	strb	r3, [r7, #11]

  return status;
 800a64e:	7afb      	ldrb	r3, [r7, #11]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	40022000 	.word	0x40022000
 800a65c:	40021000 	.word	0x40021000
 800a660:	0801b7ec 	.word	0x0801b7ec
 800a664:	20000020 	.word	0x20000020
 800a668:	20000024 	.word	0x20000024

0800a66c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b089      	sub	sp, #36	; 0x24
 800a670:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a672:	2300      	movs	r3, #0
 800a674:	61fb      	str	r3, [r7, #28]
 800a676:	2300      	movs	r3, #0
 800a678:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a67a:	4b3e      	ldr	r3, [pc, #248]	; (800a774 <HAL_RCC_GetSysClockFreq+0x108>)
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	f003 030c 	and.w	r3, r3, #12
 800a682:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a684:	4b3b      	ldr	r3, [pc, #236]	; (800a774 <HAL_RCC_GetSysClockFreq+0x108>)
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	f003 0303 	and.w	r3, r3, #3
 800a68c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d005      	beq.n	800a6a0 <HAL_RCC_GetSysClockFreq+0x34>
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	2b0c      	cmp	r3, #12
 800a698:	d121      	bne.n	800a6de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d11e      	bne.n	800a6de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a6a0:	4b34      	ldr	r3, [pc, #208]	; (800a774 <HAL_RCC_GetSysClockFreq+0x108>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 0308 	and.w	r3, r3, #8
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d107      	bne.n	800a6bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a6ac:	4b31      	ldr	r3, [pc, #196]	; (800a774 <HAL_RCC_GetSysClockFreq+0x108>)
 800a6ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6b2:	0a1b      	lsrs	r3, r3, #8
 800a6b4:	f003 030f 	and.w	r3, r3, #15
 800a6b8:	61fb      	str	r3, [r7, #28]
 800a6ba:	e005      	b.n	800a6c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a6bc:	4b2d      	ldr	r3, [pc, #180]	; (800a774 <HAL_RCC_GetSysClockFreq+0x108>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	091b      	lsrs	r3, r3, #4
 800a6c2:	f003 030f 	and.w	r3, r3, #15
 800a6c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a6c8:	4a2b      	ldr	r2, [pc, #172]	; (800a778 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10d      	bne.n	800a6f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a6dc:	e00a      	b.n	800a6f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	2b04      	cmp	r3, #4
 800a6e2:	d102      	bne.n	800a6ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a6e4:	4b25      	ldr	r3, [pc, #148]	; (800a77c <HAL_RCC_GetSysClockFreq+0x110>)
 800a6e6:	61bb      	str	r3, [r7, #24]
 800a6e8:	e004      	b.n	800a6f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	2b08      	cmp	r3, #8
 800a6ee:	d101      	bne.n	800a6f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a6f0:	4b23      	ldr	r3, [pc, #140]	; (800a780 <HAL_RCC_GetSysClockFreq+0x114>)
 800a6f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	2b0c      	cmp	r3, #12
 800a6f8:	d134      	bne.n	800a764 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a6fa:	4b1e      	ldr	r3, [pc, #120]	; (800a774 <HAL_RCC_GetSysClockFreq+0x108>)
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	f003 0303 	and.w	r3, r3, #3
 800a702:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	2b02      	cmp	r3, #2
 800a708:	d003      	beq.n	800a712 <HAL_RCC_GetSysClockFreq+0xa6>
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	2b03      	cmp	r3, #3
 800a70e:	d003      	beq.n	800a718 <HAL_RCC_GetSysClockFreq+0xac>
 800a710:	e005      	b.n	800a71e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a712:	4b1a      	ldr	r3, [pc, #104]	; (800a77c <HAL_RCC_GetSysClockFreq+0x110>)
 800a714:	617b      	str	r3, [r7, #20]
      break;
 800a716:	e005      	b.n	800a724 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a718:	4b19      	ldr	r3, [pc, #100]	; (800a780 <HAL_RCC_GetSysClockFreq+0x114>)
 800a71a:	617b      	str	r3, [r7, #20]
      break;
 800a71c:	e002      	b.n	800a724 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	617b      	str	r3, [r7, #20]
      break;
 800a722:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a724:	4b13      	ldr	r3, [pc, #76]	; (800a774 <HAL_RCC_GetSysClockFreq+0x108>)
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	091b      	lsrs	r3, r3, #4
 800a72a:	f003 0307 	and.w	r3, r3, #7
 800a72e:	3301      	adds	r3, #1
 800a730:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a732:	4b10      	ldr	r3, [pc, #64]	; (800a774 <HAL_RCC_GetSysClockFreq+0x108>)
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	0a1b      	lsrs	r3, r3, #8
 800a738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	fb03 f202 	mul.w	r2, r3, r2
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	fbb2 f3f3 	udiv	r3, r2, r3
 800a748:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a74a:	4b0a      	ldr	r3, [pc, #40]	; (800a774 <HAL_RCC_GetSysClockFreq+0x108>)
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	0e5b      	lsrs	r3, r3, #25
 800a750:	f003 0303 	and.w	r3, r3, #3
 800a754:	3301      	adds	r3, #1
 800a756:	005b      	lsls	r3, r3, #1
 800a758:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a75a:	697a      	ldr	r2, [r7, #20]
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a762:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a764:	69bb      	ldr	r3, [r7, #24]
}
 800a766:	4618      	mov	r0, r3
 800a768:	3724      	adds	r7, #36	; 0x24
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	40021000 	.word	0x40021000
 800a778:	0801b804 	.word	0x0801b804
 800a77c:	00f42400 	.word	0x00f42400
 800a780:	007a1200 	.word	0x007a1200

0800a784 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a784:	b480      	push	{r7}
 800a786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a788:	4b03      	ldr	r3, [pc, #12]	; (800a798 <HAL_RCC_GetHCLKFreq+0x14>)
 800a78a:	681b      	ldr	r3, [r3, #0]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	20000020 	.word	0x20000020

0800a79c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a7a0:	f7ff fff0 	bl	800a784 <HAL_RCC_GetHCLKFreq>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	0a1b      	lsrs	r3, r3, #8
 800a7ac:	f003 0307 	and.w	r3, r3, #7
 800a7b0:	4904      	ldr	r1, [pc, #16]	; (800a7c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a7b2:	5ccb      	ldrb	r3, [r1, r3]
 800a7b4:	f003 031f 	and.w	r3, r3, #31
 800a7b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	40021000 	.word	0x40021000
 800a7c4:	0801b7fc 	.word	0x0801b7fc

0800a7c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a7cc:	f7ff ffda 	bl	800a784 <HAL_RCC_GetHCLKFreq>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	4b06      	ldr	r3, [pc, #24]	; (800a7ec <HAL_RCC_GetPCLK2Freq+0x24>)
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	0adb      	lsrs	r3, r3, #11
 800a7d8:	f003 0307 	and.w	r3, r3, #7
 800a7dc:	4904      	ldr	r1, [pc, #16]	; (800a7f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a7de:	5ccb      	ldrb	r3, [r1, r3]
 800a7e0:	f003 031f 	and.w	r3, r3, #31
 800a7e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	40021000 	.word	0x40021000
 800a7f0:	0801b7fc 	.word	0x0801b7fc

0800a7f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a800:	4b2a      	ldr	r3, [pc, #168]	; (800a8ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d003      	beq.n	800a814 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a80c:	f7ff f9a6 	bl	8009b5c <HAL_PWREx_GetVoltageRange>
 800a810:	6178      	str	r0, [r7, #20]
 800a812:	e014      	b.n	800a83e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a814:	4b25      	ldr	r3, [pc, #148]	; (800a8ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a818:	4a24      	ldr	r2, [pc, #144]	; (800a8ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a81a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a81e:	6593      	str	r3, [r2, #88]	; 0x58
 800a820:	4b22      	ldr	r3, [pc, #136]	; (800a8ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a828:	60fb      	str	r3, [r7, #12]
 800a82a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a82c:	f7ff f996 	bl	8009b5c <HAL_PWREx_GetVoltageRange>
 800a830:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a832:	4b1e      	ldr	r3, [pc, #120]	; (800a8ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a836:	4a1d      	ldr	r2, [pc, #116]	; (800a8ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a83c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a844:	d10b      	bne.n	800a85e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2b80      	cmp	r3, #128	; 0x80
 800a84a:	d919      	bls.n	800a880 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2ba0      	cmp	r3, #160	; 0xa0
 800a850:	d902      	bls.n	800a858 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a852:	2302      	movs	r3, #2
 800a854:	613b      	str	r3, [r7, #16]
 800a856:	e013      	b.n	800a880 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a858:	2301      	movs	r3, #1
 800a85a:	613b      	str	r3, [r7, #16]
 800a85c:	e010      	b.n	800a880 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2b80      	cmp	r3, #128	; 0x80
 800a862:	d902      	bls.n	800a86a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a864:	2303      	movs	r3, #3
 800a866:	613b      	str	r3, [r7, #16]
 800a868:	e00a      	b.n	800a880 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2b80      	cmp	r3, #128	; 0x80
 800a86e:	d102      	bne.n	800a876 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a870:	2302      	movs	r3, #2
 800a872:	613b      	str	r3, [r7, #16]
 800a874:	e004      	b.n	800a880 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2b70      	cmp	r3, #112	; 0x70
 800a87a:	d101      	bne.n	800a880 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a87c:	2301      	movs	r3, #1
 800a87e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a880:	4b0b      	ldr	r3, [pc, #44]	; (800a8b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f023 0207 	bic.w	r2, r3, #7
 800a888:	4909      	ldr	r1, [pc, #36]	; (800a8b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a890:	4b07      	ldr	r3, [pc, #28]	; (800a8b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 0307 	and.w	r3, r3, #7
 800a898:	693a      	ldr	r2, [r7, #16]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d001      	beq.n	800a8a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e000      	b.n	800a8a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3718      	adds	r7, #24
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	40021000 	.word	0x40021000
 800a8b0:	40022000 	.word	0x40022000

0800a8b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b086      	sub	sp, #24
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a8bc:	2300      	movs	r3, #0
 800a8be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d031      	beq.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a8d8:	d01a      	beq.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800a8da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a8de:	d814      	bhi.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d009      	beq.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a8e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8e8:	d10f      	bne.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800a8ea:	4b5d      	ldr	r3, [pc, #372]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	4a5c      	ldr	r2, [pc, #368]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a8f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a8f6:	e00c      	b.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	3304      	adds	r3, #4
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	4618      	mov	r0, r3
 800a900:	f000 f9ce 	bl	800aca0 <RCCEx_PLLSAI1_Config>
 800a904:	4603      	mov	r3, r0
 800a906:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a908:	e003      	b.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	74fb      	strb	r3, [r7, #19]
      break;
 800a90e:	e000      	b.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800a910:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a912:	7cfb      	ldrb	r3, [r7, #19]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d10b      	bne.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a918:	4b51      	ldr	r3, [pc, #324]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a91a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a91e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a926:	494e      	ldr	r1, [pc, #312]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a928:	4313      	orrs	r3, r2
 800a92a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a92e:	e001      	b.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a930:	7cfb      	ldrb	r3, [r7, #19]
 800a932:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f000 809e 	beq.w	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a942:	2300      	movs	r3, #0
 800a944:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a946:	4b46      	ldr	r3, [pc, #280]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a94a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d101      	bne.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800a952:	2301      	movs	r3, #1
 800a954:	e000      	b.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800a956:	2300      	movs	r3, #0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00d      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a95c:	4b40      	ldr	r3, [pc, #256]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a95e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a960:	4a3f      	ldr	r2, [pc, #252]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a966:	6593      	str	r3, [r2, #88]	; 0x58
 800a968:	4b3d      	ldr	r3, [pc, #244]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a96a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a96c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a970:	60bb      	str	r3, [r7, #8]
 800a972:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a974:	2301      	movs	r3, #1
 800a976:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a978:	4b3a      	ldr	r3, [pc, #232]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a39      	ldr	r2, [pc, #228]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a97e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a982:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a984:	f7fa fea2 	bl	80056cc <HAL_GetTick>
 800a988:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a98a:	e009      	b.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a98c:	f7fa fe9e 	bl	80056cc <HAL_GetTick>
 800a990:	4602      	mov	r2, r0
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	2b02      	cmp	r3, #2
 800a998:	d902      	bls.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800a99a:	2303      	movs	r3, #3
 800a99c:	74fb      	strb	r3, [r7, #19]
        break;
 800a99e:	e005      	b.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a9a0:	4b30      	ldr	r3, [pc, #192]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d0ef      	beq.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800a9ac:	7cfb      	ldrb	r3, [r7, #19]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d15a      	bne.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a9b2:	4b2b      	ldr	r3, [pc, #172]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d01e      	beq.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c8:	697a      	ldr	r2, [r7, #20]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d019      	beq.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a9ce:	4b24      	ldr	r3, [pc, #144]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a9da:	4b21      	ldr	r3, [pc, #132]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9e0:	4a1f      	ldr	r2, [pc, #124]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a9ea:	4b1d      	ldr	r3, [pc, #116]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9f0:	4a1b      	ldr	r2, [pc, #108]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a9fa:	4a19      	ldr	r2, [pc, #100]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	f003 0301 	and.w	r3, r3, #1
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d016      	beq.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa0c:	f7fa fe5e 	bl	80056cc <HAL_GetTick>
 800aa10:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa12:	e00b      	b.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa14:	f7fa fe5a 	bl	80056cc <HAL_GetTick>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d902      	bls.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800aa26:	2303      	movs	r3, #3
 800aa28:	74fb      	strb	r3, [r7, #19]
            break;
 800aa2a:	e006      	b.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa2c:	4b0c      	ldr	r3, [pc, #48]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa32:	f003 0302 	and.w	r3, r3, #2
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d0ec      	beq.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800aa3a:	7cfb      	ldrb	r3, [r7, #19]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10b      	bne.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa40:	4b07      	ldr	r3, [pc, #28]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa4e:	4904      	ldr	r1, [pc, #16]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa50:	4313      	orrs	r3, r2
 800aa52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800aa56:	e009      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aa58:	7cfb      	ldrb	r3, [r7, #19]
 800aa5a:	74bb      	strb	r3, [r7, #18]
 800aa5c:	e006      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800aa5e:	bf00      	nop
 800aa60:	40021000 	.word	0x40021000
 800aa64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa68:	7cfb      	ldrb	r3, [r7, #19]
 800aa6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aa6c:	7c7b      	ldrb	r3, [r7, #17]
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d105      	bne.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa72:	4b8a      	ldr	r3, [pc, #552]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aa74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa76:	4a89      	ldr	r2, [pc, #548]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aa78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa7c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f003 0301 	and.w	r3, r3, #1
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00a      	beq.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aa8a:	4b84      	ldr	r3, [pc, #528]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aa8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa90:	f023 0203 	bic.w	r2, r3, #3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6a1b      	ldr	r3, [r3, #32]
 800aa98:	4980      	ldr	r1, [pc, #512]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 0302 	and.w	r3, r3, #2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00a      	beq.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800aaac:	4b7b      	ldr	r3, [pc, #492]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aaae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aab2:	f023 020c 	bic.w	r2, r3, #12
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaba:	4978      	ldr	r1, [pc, #480]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aabc:	4313      	orrs	r3, r2
 800aabe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 0320 	and.w	r3, r3, #32
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00a      	beq.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aace:	4b73      	ldr	r3, [pc, #460]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aad4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aadc:	496f      	ldr	r1, [pc, #444]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aade:	4313      	orrs	r3, r2
 800aae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00a      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aaf0:	4b6a      	ldr	r3, [pc, #424]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aaf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaf6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aafe:	4967      	ldr	r1, [pc, #412]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab00:	4313      	orrs	r3, r2
 800ab02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d00a      	beq.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ab12:	4b62      	ldr	r3, [pc, #392]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab20:	495e      	ldr	r1, [pc, #376]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab22:	4313      	orrs	r3, r2
 800ab24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d00a      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ab34:	4b59      	ldr	r3, [pc, #356]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab42:	4956      	ldr	r1, [pc, #344]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab44:	4313      	orrs	r3, r2
 800ab46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00a      	beq.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ab56:	4b51      	ldr	r3, [pc, #324]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab64:	494d      	ldr	r1, [pc, #308]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab66:	4313      	orrs	r3, r2
 800ab68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d028      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ab78:	4b48      	ldr	r3, [pc, #288]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab86:	4945      	ldr	r1, [pc, #276]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab96:	d106      	bne.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ab98:	4b40      	ldr	r3, [pc, #256]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	4a3f      	ldr	r2, [pc, #252]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aba2:	60d3      	str	r3, [r2, #12]
 800aba4:	e011      	b.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800abae:	d10c      	bne.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	3304      	adds	r3, #4
 800abb4:	2101      	movs	r1, #1
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 f872 	bl	800aca0 <RCCEx_PLLSAI1_Config>
 800abbc:	4603      	mov	r3, r0
 800abbe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800abc0:	7cfb      	ldrb	r3, [r7, #19]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d001      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800abc6:	7cfb      	ldrb	r3, [r7, #19]
 800abc8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d028      	beq.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800abd6:	4b31      	ldr	r3, [pc, #196]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800abd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abdc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe4:	492d      	ldr	r1, [pc, #180]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800abe6:	4313      	orrs	r3, r2
 800abe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abf4:	d106      	bne.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800abf6:	4b29      	ldr	r3, [pc, #164]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	4a28      	ldr	r2, [pc, #160]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800abfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac00:	60d3      	str	r3, [r2, #12]
 800ac02:	e011      	b.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac0c:	d10c      	bne.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	3304      	adds	r3, #4
 800ac12:	2101      	movs	r1, #1
 800ac14:	4618      	mov	r0, r3
 800ac16:	f000 f843 	bl	800aca0 <RCCEx_PLLSAI1_Config>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ac1e:	7cfb      	ldrb	r3, [r7, #19]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d001      	beq.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800ac24:	7cfb      	ldrb	r3, [r7, #19]
 800ac26:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d01c      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ac34:	4b19      	ldr	r3, [pc, #100]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ac36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac42:	4916      	ldr	r1, [pc, #88]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ac44:	4313      	orrs	r3, r2
 800ac46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac52:	d10c      	bne.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	3304      	adds	r3, #4
 800ac58:	2102      	movs	r1, #2
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 f820 	bl	800aca0 <RCCEx_PLLSAI1_Config>
 800ac60:	4603      	mov	r3, r0
 800ac62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ac64:	7cfb      	ldrb	r3, [r7, #19]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d001      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800ac6a:	7cfb      	ldrb	r3, [r7, #19]
 800ac6c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00a      	beq.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ac7a:	4b08      	ldr	r3, [pc, #32]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ac7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac80:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac88:	4904      	ldr	r1, [pc, #16]	; (800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800ac90:	7cbb      	ldrb	r3, [r7, #18]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3718      	adds	r7, #24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	40021000 	.word	0x40021000

0800aca0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800acae:	4b74      	ldr	r3, [pc, #464]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	f003 0303 	and.w	r3, r3, #3
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d018      	beq.n	800acec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800acba:	4b71      	ldr	r3, [pc, #452]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	f003 0203 	and.w	r2, r3, #3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d10d      	bne.n	800ace6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
       ||
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d009      	beq.n	800ace6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800acd2:	4b6b      	ldr	r3, [pc, #428]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	091b      	lsrs	r3, r3, #4
 800acd8:	f003 0307 	and.w	r3, r3, #7
 800acdc:	1c5a      	adds	r2, r3, #1
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	685b      	ldr	r3, [r3, #4]
       ||
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d047      	beq.n	800ad76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	73fb      	strb	r3, [r7, #15]
 800acea:	e044      	b.n	800ad76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2b03      	cmp	r3, #3
 800acf2:	d018      	beq.n	800ad26 <RCCEx_PLLSAI1_Config+0x86>
 800acf4:	2b03      	cmp	r3, #3
 800acf6:	d825      	bhi.n	800ad44 <RCCEx_PLLSAI1_Config+0xa4>
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d002      	beq.n	800ad02 <RCCEx_PLLSAI1_Config+0x62>
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d009      	beq.n	800ad14 <RCCEx_PLLSAI1_Config+0x74>
 800ad00:	e020      	b.n	800ad44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ad02:	4b5f      	ldr	r3, [pc, #380]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f003 0302 	and.w	r3, r3, #2
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d11d      	bne.n	800ad4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ad12:	e01a      	b.n	800ad4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ad14:	4b5a      	ldr	r3, [pc, #360]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d116      	bne.n	800ad4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ad24:	e013      	b.n	800ad4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ad26:	4b56      	ldr	r3, [pc, #344]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d10f      	bne.n	800ad52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ad32:	4b53      	ldr	r3, [pc, #332]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d109      	bne.n	800ad52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ad42:	e006      	b.n	800ad52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	73fb      	strb	r3, [r7, #15]
      break;
 800ad48:	e004      	b.n	800ad54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ad4a:	bf00      	nop
 800ad4c:	e002      	b.n	800ad54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ad4e:	bf00      	nop
 800ad50:	e000      	b.n	800ad54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ad52:	bf00      	nop
    }

    if(status == HAL_OK)
 800ad54:	7bfb      	ldrb	r3, [r7, #15]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d10d      	bne.n	800ad76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ad5a:	4b49      	ldr	r3, [pc, #292]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6819      	ldr	r1, [r3, #0]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	3b01      	subs	r3, #1
 800ad6c:	011b      	lsls	r3, r3, #4
 800ad6e:	430b      	orrs	r3, r1
 800ad70:	4943      	ldr	r1, [pc, #268]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad72:	4313      	orrs	r3, r2
 800ad74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ad76:	7bfb      	ldrb	r3, [r7, #15]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d17c      	bne.n	800ae76 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ad7c:	4b40      	ldr	r3, [pc, #256]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a3f      	ldr	r2, [pc, #252]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ad86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad88:	f7fa fca0 	bl	80056cc <HAL_GetTick>
 800ad8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ad8e:	e009      	b.n	800ada4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ad90:	f7fa fc9c 	bl	80056cc <HAL_GetTick>
 800ad94:	4602      	mov	r2, r0
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d902      	bls.n	800ada4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	73fb      	strb	r3, [r7, #15]
        break;
 800ada2:	e005      	b.n	800adb0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ada4:	4b36      	ldr	r3, [pc, #216]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1ef      	bne.n	800ad90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d15f      	bne.n	800ae76 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d110      	bne.n	800adde <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800adbc:	4b30      	ldr	r3, [pc, #192]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800adc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	6892      	ldr	r2, [r2, #8]
 800adcc:	0211      	lsls	r1, r2, #8
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	68d2      	ldr	r2, [r2, #12]
 800add2:	06d2      	lsls	r2, r2, #27
 800add4:	430a      	orrs	r2, r1
 800add6:	492a      	ldr	r1, [pc, #168]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800add8:	4313      	orrs	r3, r2
 800adda:	610b      	str	r3, [r1, #16]
 800addc:	e027      	b.n	800ae2e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d112      	bne.n	800ae0a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ade4:	4b26      	ldr	r3, [pc, #152]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800adec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	6892      	ldr	r2, [r2, #8]
 800adf4:	0211      	lsls	r1, r2, #8
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	6912      	ldr	r2, [r2, #16]
 800adfa:	0852      	lsrs	r2, r2, #1
 800adfc:	3a01      	subs	r2, #1
 800adfe:	0552      	lsls	r2, r2, #21
 800ae00:	430a      	orrs	r2, r1
 800ae02:	491f      	ldr	r1, [pc, #124]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae04:	4313      	orrs	r3, r2
 800ae06:	610b      	str	r3, [r1, #16]
 800ae08:	e011      	b.n	800ae2e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ae0a:	4b1d      	ldr	r3, [pc, #116]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ae12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	6892      	ldr	r2, [r2, #8]
 800ae1a:	0211      	lsls	r1, r2, #8
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	6952      	ldr	r2, [r2, #20]
 800ae20:	0852      	lsrs	r2, r2, #1
 800ae22:	3a01      	subs	r2, #1
 800ae24:	0652      	lsls	r2, r2, #25
 800ae26:	430a      	orrs	r2, r1
 800ae28:	4915      	ldr	r1, [pc, #84]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800ae2e:	4b14      	ldr	r3, [pc, #80]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a13      	ldr	r2, [pc, #76]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ae38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae3a:	f7fa fc47 	bl	80056cc <HAL_GetTick>
 800ae3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ae40:	e009      	b.n	800ae56 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ae42:	f7fa fc43 	bl	80056cc <HAL_GetTick>
 800ae46:	4602      	mov	r2, r0
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	2b02      	cmp	r3, #2
 800ae4e:	d902      	bls.n	800ae56 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800ae50:	2303      	movs	r3, #3
 800ae52:	73fb      	strb	r3, [r7, #15]
          break;
 800ae54:	e005      	b.n	800ae62 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ae56:	4b0a      	ldr	r3, [pc, #40]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d0ef      	beq.n	800ae42 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d106      	bne.n	800ae76 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800ae68:	4b05      	ldr	r3, [pc, #20]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae6a:	691a      	ldr	r2, [r3, #16]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	699b      	ldr	r3, [r3, #24]
 800ae70:	4903      	ldr	r1, [pc, #12]	; (800ae80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae72:	4313      	orrs	r3, r2
 800ae74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800ae76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	40021000 	.word	0x40021000

0800ae84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d101      	bne.n	800ae96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	e095      	b.n	800afc2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d108      	bne.n	800aeb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aea6:	d009      	beq.n	800aebc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	61da      	str	r2, [r3, #28]
 800aeae:	e005      	b.n	800aebc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d106      	bne.n	800aedc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f7f7 fa28 	bl	800232c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2202      	movs	r2, #2
 800aee0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aef2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aefc:	d902      	bls.n	800af04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aefe:	2300      	movs	r3, #0
 800af00:	60fb      	str	r3, [r7, #12]
 800af02:	e002      	b.n	800af0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800af04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800af12:	d007      	beq.n	800af24 <HAL_SPI_Init+0xa0>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800af1c:	d002      	beq.n	800af24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800af34:	431a      	orrs	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	f003 0302 	and.w	r3, r3, #2
 800af3e:	431a      	orrs	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	695b      	ldr	r3, [r3, #20]
 800af44:	f003 0301 	and.w	r3, r3, #1
 800af48:	431a      	orrs	r2, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	699b      	ldr	r3, [r3, #24]
 800af4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af52:	431a      	orrs	r2, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	69db      	ldr	r3, [r3, #28]
 800af58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af5c:	431a      	orrs	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6a1b      	ldr	r3, [r3, #32]
 800af62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af66:	ea42 0103 	orr.w	r1, r2, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af6e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	430a      	orrs	r2, r1
 800af78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	699b      	ldr	r3, [r3, #24]
 800af7e:	0c1b      	lsrs	r3, r3, #16
 800af80:	f003 0204 	and.w	r2, r3, #4
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af88:	f003 0310 	and.w	r3, r3, #16
 800af8c:	431a      	orrs	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af92:	f003 0308 	and.w	r3, r3, #8
 800af96:	431a      	orrs	r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800afa0:	ea42 0103 	orr.w	r1, r2, r3
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	430a      	orrs	r2, r1
 800afb0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b088      	sub	sp, #32
 800afce:	af00      	add	r7, sp, #0
 800afd0:	60f8      	str	r0, [r7, #12]
 800afd2:	60b9      	str	r1, [r7, #8]
 800afd4:	603b      	str	r3, [r7, #0]
 800afd6:	4613      	mov	r3, r2
 800afd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800afda:	2300      	movs	r3, #0
 800afdc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d101      	bne.n	800afec <HAL_SPI_Transmit+0x22>
 800afe8:	2302      	movs	r3, #2
 800afea:	e15f      	b.n	800b2ac <HAL_SPI_Transmit+0x2e2>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aff4:	f7fa fb6a 	bl	80056cc <HAL_GetTick>
 800aff8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800affa:	88fb      	ldrh	r3, [r7, #6]
 800affc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b004:	b2db      	uxtb	r3, r3
 800b006:	2b01      	cmp	r3, #1
 800b008:	d002      	beq.n	800b010 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b00a:	2302      	movs	r3, #2
 800b00c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b00e:	e148      	b.n	800b2a2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d002      	beq.n	800b01c <HAL_SPI_Transmit+0x52>
 800b016:	88fb      	ldrh	r3, [r7, #6]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d102      	bne.n	800b022 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b020:	e13f      	b.n	800b2a2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2203      	movs	r2, #3
 800b026:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	68ba      	ldr	r2, [r7, #8]
 800b034:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	88fa      	ldrh	r2, [r7, #6]
 800b03a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	88fa      	ldrh	r2, [r7, #6]
 800b040:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2200      	movs	r2, #0
 800b046:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2200      	movs	r2, #0
 800b054:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2200      	movs	r2, #0
 800b05c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b06c:	d10f      	bne.n	800b08e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b07c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b08c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b098:	2b40      	cmp	r3, #64	; 0x40
 800b09a:	d007      	beq.n	800b0ac <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b0b4:	d94f      	bls.n	800b156 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d002      	beq.n	800b0c4 <HAL_SPI_Transmit+0xfa>
 800b0be:	8afb      	ldrh	r3, [r7, #22]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d142      	bne.n	800b14a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c8:	881a      	ldrh	r2, [r3, #0]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d4:	1c9a      	adds	r2, r3, #2
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	3b01      	subs	r3, #1
 800b0e2:	b29a      	uxth	r2, r3
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b0e8:	e02f      	b.n	800b14a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	f003 0302 	and.w	r3, r3, #2
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d112      	bne.n	800b11e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0fc:	881a      	ldrh	r2, [r3, #0]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b108:	1c9a      	adds	r2, r3, #2
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b112:	b29b      	uxth	r3, r3
 800b114:	3b01      	subs	r3, #1
 800b116:	b29a      	uxth	r2, r3
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b11c:	e015      	b.n	800b14a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b11e:	f7fa fad5 	bl	80056cc <HAL_GetTick>
 800b122:	4602      	mov	r2, r0
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	683a      	ldr	r2, [r7, #0]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d803      	bhi.n	800b136 <HAL_SPI_Transmit+0x16c>
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b134:	d102      	bne.n	800b13c <HAL_SPI_Transmit+0x172>
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d106      	bne.n	800b14a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800b13c:	2303      	movs	r3, #3
 800b13e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2201      	movs	r2, #1
 800b144:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b148:	e0ab      	b.n	800b2a2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b14e:	b29b      	uxth	r3, r3
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1ca      	bne.n	800b0ea <HAL_SPI_Transmit+0x120>
 800b154:	e080      	b.n	800b258 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d002      	beq.n	800b164 <HAL_SPI_Transmit+0x19a>
 800b15e:	8afb      	ldrh	r3, [r7, #22]
 800b160:	2b01      	cmp	r3, #1
 800b162:	d174      	bne.n	800b24e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b168:	b29b      	uxth	r3, r3
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d912      	bls.n	800b194 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b172:	881a      	ldrh	r2, [r3, #0]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b17e:	1c9a      	adds	r2, r3, #2
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b188:	b29b      	uxth	r3, r3
 800b18a:	3b02      	subs	r3, #2
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b192:	e05c      	b.n	800b24e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	330c      	adds	r3, #12
 800b19e:	7812      	ldrb	r2, [r2, #0]
 800b1a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a6:	1c5a      	adds	r2, r3, #1
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b1ba:	e048      	b.n	800b24e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	f003 0302 	and.w	r3, r3, #2
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	d12b      	bne.n	800b222 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d912      	bls.n	800b1fa <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d8:	881a      	ldrh	r2, [r3, #0]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e4:	1c9a      	adds	r2, r3, #2
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	3b02      	subs	r3, #2
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b1f8:	e029      	b.n	800b24e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	330c      	adds	r3, #12
 800b204:	7812      	ldrb	r2, [r2, #0]
 800b206:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20c:	1c5a      	adds	r2, r3, #1
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b216:	b29b      	uxth	r3, r3
 800b218:	3b01      	subs	r3, #1
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b220:	e015      	b.n	800b24e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b222:	f7fa fa53 	bl	80056cc <HAL_GetTick>
 800b226:	4602      	mov	r2, r0
 800b228:	69bb      	ldr	r3, [r7, #24]
 800b22a:	1ad3      	subs	r3, r2, r3
 800b22c:	683a      	ldr	r2, [r7, #0]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d803      	bhi.n	800b23a <HAL_SPI_Transmit+0x270>
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b238:	d102      	bne.n	800b240 <HAL_SPI_Transmit+0x276>
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d106      	bne.n	800b24e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800b240:	2303      	movs	r3, #3
 800b242:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b24c:	e029      	b.n	800b2a2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b252:	b29b      	uxth	r3, r3
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1b1      	bne.n	800b1bc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b258:	69ba      	ldr	r2, [r7, #24]
 800b25a:	6839      	ldr	r1, [r7, #0]
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	f000 fcf9 	bl	800bc54 <SPI_EndRxTxTransaction>
 800b262:	4603      	mov	r3, r0
 800b264:	2b00      	cmp	r3, #0
 800b266:	d002      	beq.n	800b26e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2220      	movs	r2, #32
 800b26c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d10a      	bne.n	800b28c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b276:	2300      	movs	r3, #0
 800b278:	613b      	str	r3, [r7, #16]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	613b      	str	r3, [r7, #16]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	613b      	str	r3, [r7, #16]
 800b28a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b290:	2b00      	cmp	r3, #0
 800b292:	d002      	beq.n	800b29a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	77fb      	strb	r3, [r7, #31]
 800b298:	e003      	b.n	800b2a2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2201      	movs	r2, #1
 800b29e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b2aa:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3720      	adds	r7, #32
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b088      	sub	sp, #32
 800b2b8:	af02      	add	r7, sp, #8
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	603b      	str	r3, [r7, #0]
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d002      	beq.n	800b2da <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b2d8:	e11a      	b.n	800b510 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b2e2:	d112      	bne.n	800b30a <HAL_SPI_Receive+0x56>
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10e      	bne.n	800b30a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2204      	movs	r2, #4
 800b2f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b2f4:	88fa      	ldrh	r2, [r7, #6]
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	68b9      	ldr	r1, [r7, #8]
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f000 f90e 	bl	800b522 <HAL_SPI_TransmitReceive>
 800b306:	4603      	mov	r3, r0
 800b308:	e107      	b.n	800b51a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b310:	2b01      	cmp	r3, #1
 800b312:	d101      	bne.n	800b318 <HAL_SPI_Receive+0x64>
 800b314:	2302      	movs	r3, #2
 800b316:	e100      	b.n	800b51a <HAL_SPI_Receive+0x266>
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2201      	movs	r2, #1
 800b31c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b320:	f7fa f9d4 	bl	80056cc <HAL_GetTick>
 800b324:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d002      	beq.n	800b332 <HAL_SPI_Receive+0x7e>
 800b32c:	88fb      	ldrh	r3, [r7, #6]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d102      	bne.n	800b338 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b336:	e0eb      	b.n	800b510 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2204      	movs	r2, #4
 800b33c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2200      	movs	r2, #0
 800b344:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	68ba      	ldr	r2, [r7, #8]
 800b34a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	88fa      	ldrh	r2, [r7, #6]
 800b350:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	88fa      	ldrh	r2, [r7, #6]
 800b358:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2200      	movs	r2, #0
 800b360:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2200      	movs	r2, #0
 800b36c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b382:	d908      	bls.n	800b396 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	685a      	ldr	r2, [r3, #4]
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b392:	605a      	str	r2, [r3, #4]
 800b394:	e007      	b.n	800b3a6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b3a4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3ae:	d10f      	bne.n	800b3d0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b3ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3da:	2b40      	cmp	r3, #64	; 0x40
 800b3dc:	d007      	beq.n	800b3ee <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b3f6:	d86f      	bhi.n	800b4d8 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b3f8:	e034      	b.n	800b464 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	f003 0301 	and.w	r3, r3, #1
 800b404:	2b01      	cmp	r3, #1
 800b406:	d117      	bne.n	800b438 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f103 020c 	add.w	r2, r3, #12
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b414:	7812      	ldrb	r2, [r2, #0]
 800b416:	b2d2      	uxtb	r2, r2
 800b418:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b41e:	1c5a      	adds	r2, r3, #1
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	3b01      	subs	r3, #1
 800b42e:	b29a      	uxth	r2, r3
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b436:	e015      	b.n	800b464 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b438:	f7fa f948 	bl	80056cc <HAL_GetTick>
 800b43c:	4602      	mov	r2, r0
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	1ad3      	subs	r3, r2, r3
 800b442:	683a      	ldr	r2, [r7, #0]
 800b444:	429a      	cmp	r2, r3
 800b446:	d803      	bhi.n	800b450 <HAL_SPI_Receive+0x19c>
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b44e:	d102      	bne.n	800b456 <HAL_SPI_Receive+0x1a2>
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d106      	bne.n	800b464 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800b456:	2303      	movs	r3, #3
 800b458:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b462:	e055      	b.n	800b510 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1c4      	bne.n	800b3fa <HAL_SPI_Receive+0x146>
 800b470:	e038      	b.n	800b4e4 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	f003 0301 	and.w	r3, r3, #1
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d115      	bne.n	800b4ac <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68da      	ldr	r2, [r3, #12]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b48a:	b292      	uxth	r2, r2
 800b48c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b492:	1c9a      	adds	r2, r3, #2
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	3b01      	subs	r3, #1
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b4aa:	e015      	b.n	800b4d8 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4ac:	f7fa f90e 	bl	80056cc <HAL_GetTick>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	1ad3      	subs	r3, r2, r3
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d803      	bhi.n	800b4c4 <HAL_SPI_Receive+0x210>
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c2:	d102      	bne.n	800b4ca <HAL_SPI_Receive+0x216>
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d106      	bne.n	800b4d8 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800b4ca:	2303      	movs	r3, #3
 800b4cc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b4d6:	e01b      	b.n	800b510 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1c6      	bne.n	800b472 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b4e4:	693a      	ldr	r2, [r7, #16]
 800b4e6:	6839      	ldr	r1, [r7, #0]
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f000 fb5b 	bl	800bba4 <SPI_EndRxTransaction>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d002      	beq.n	800b4fa <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2220      	movs	r2, #32
 800b4f8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d002      	beq.n	800b508 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800b502:	2301      	movs	r3, #1
 800b504:	75fb      	strb	r3, [r7, #23]
 800b506:	e003      	b.n	800b510 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2200      	movs	r2, #0
 800b514:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b518:	7dfb      	ldrb	r3, [r7, #23]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3718      	adds	r7, #24
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b08a      	sub	sp, #40	; 0x28
 800b526:	af00      	add	r7, sp, #0
 800b528:	60f8      	str	r0, [r7, #12]
 800b52a:	60b9      	str	r1, [r7, #8]
 800b52c:	607a      	str	r2, [r7, #4]
 800b52e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b530:	2301      	movs	r3, #1
 800b532:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b534:	2300      	movs	r3, #0
 800b536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b540:	2b01      	cmp	r3, #1
 800b542:	d101      	bne.n	800b548 <HAL_SPI_TransmitReceive+0x26>
 800b544:	2302      	movs	r3, #2
 800b546:	e20a      	b.n	800b95e <HAL_SPI_TransmitReceive+0x43c>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b550:	f7fa f8bc 	bl	80056cc <HAL_GetTick>
 800b554:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b55c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b564:	887b      	ldrh	r3, [r7, #2]
 800b566:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800b568:	887b      	ldrh	r3, [r7, #2]
 800b56a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b56c:	7efb      	ldrb	r3, [r7, #27]
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d00e      	beq.n	800b590 <HAL_SPI_TransmitReceive+0x6e>
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b578:	d106      	bne.n	800b588 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d102      	bne.n	800b588 <HAL_SPI_TransmitReceive+0x66>
 800b582:	7efb      	ldrb	r3, [r7, #27]
 800b584:	2b04      	cmp	r3, #4
 800b586:	d003      	beq.n	800b590 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800b588:	2302      	movs	r3, #2
 800b58a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b58e:	e1e0      	b.n	800b952 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d005      	beq.n	800b5a2 <HAL_SPI_TransmitReceive+0x80>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <HAL_SPI_TransmitReceive+0x80>
 800b59c:	887b      	ldrh	r3, [r7, #2]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d103      	bne.n	800b5aa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b5a8:	e1d3      	b.n	800b952 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	2b04      	cmp	r3, #4
 800b5b4:	d003      	beq.n	800b5be <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2205      	movs	r2, #5
 800b5ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	887a      	ldrh	r2, [r7, #2]
 800b5ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	887a      	ldrh	r2, [r7, #2]
 800b5d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	887a      	ldrh	r2, [r7, #2]
 800b5e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	887a      	ldrh	r2, [r7, #2]
 800b5ea:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b600:	d802      	bhi.n	800b608 <HAL_SPI_TransmitReceive+0xe6>
 800b602:	8a3b      	ldrh	r3, [r7, #16]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d908      	bls.n	800b61a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	685a      	ldr	r2, [r3, #4]
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b616:	605a      	str	r2, [r3, #4]
 800b618:	e007      	b.n	800b62a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	685a      	ldr	r2, [r3, #4]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b628:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b634:	2b40      	cmp	r3, #64	; 0x40
 800b636:	d007      	beq.n	800b648 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b646:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b650:	f240 8081 	bls.w	800b756 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d002      	beq.n	800b662 <HAL_SPI_TransmitReceive+0x140>
 800b65c:	8a7b      	ldrh	r3, [r7, #18]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d16d      	bne.n	800b73e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b666:	881a      	ldrh	r2, [r3, #0]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b672:	1c9a      	adds	r2, r3, #2
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	3b01      	subs	r3, #1
 800b680:	b29a      	uxth	r2, r3
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b686:	e05a      	b.n	800b73e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	f003 0302 	and.w	r3, r3, #2
 800b692:	2b02      	cmp	r3, #2
 800b694:	d11b      	bne.n	800b6ce <HAL_SPI_TransmitReceive+0x1ac>
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d016      	beq.n	800b6ce <HAL_SPI_TransmitReceive+0x1ac>
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d113      	bne.n	800b6ce <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6aa:	881a      	ldrh	r2, [r3, #0]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b6:	1c9a      	adds	r2, r3, #2
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	f003 0301 	and.w	r3, r3, #1
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d11c      	bne.n	800b716 <HAL_SPI_TransmitReceive+0x1f4>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d016      	beq.n	800b716 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	68da      	ldr	r2, [r3, #12]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f2:	b292      	uxth	r2, r2
 800b6f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6fa:	1c9a      	adds	r2, r3, #2
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b706:	b29b      	uxth	r3, r3
 800b708:	3b01      	subs	r3, #1
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b712:	2301      	movs	r3, #1
 800b714:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b716:	f7f9 ffd9 	bl	80056cc <HAL_GetTick>
 800b71a:	4602      	mov	r2, r0
 800b71c:	69fb      	ldr	r3, [r7, #28]
 800b71e:	1ad3      	subs	r3, r2, r3
 800b720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b722:	429a      	cmp	r2, r3
 800b724:	d80b      	bhi.n	800b73e <HAL_SPI_TransmitReceive+0x21c>
 800b726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b72c:	d007      	beq.n	800b73e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800b72e:	2303      	movs	r3, #3
 800b730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2201      	movs	r2, #1
 800b738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800b73c:	e109      	b.n	800b952 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b742:	b29b      	uxth	r3, r3
 800b744:	2b00      	cmp	r3, #0
 800b746:	d19f      	bne.n	800b688 <HAL_SPI_TransmitReceive+0x166>
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b74e:	b29b      	uxth	r3, r3
 800b750:	2b00      	cmp	r3, #0
 800b752:	d199      	bne.n	800b688 <HAL_SPI_TransmitReceive+0x166>
 800b754:	e0e3      	b.n	800b91e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d003      	beq.n	800b766 <HAL_SPI_TransmitReceive+0x244>
 800b75e:	8a7b      	ldrh	r3, [r7, #18]
 800b760:	2b01      	cmp	r3, #1
 800b762:	f040 80cf 	bne.w	800b904 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d912      	bls.n	800b796 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b774:	881a      	ldrh	r2, [r3, #0]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b780:	1c9a      	adds	r2, r3, #2
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	3b02      	subs	r3, #2
 800b78e:	b29a      	uxth	r2, r3
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b794:	e0b6      	b.n	800b904 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	330c      	adds	r3, #12
 800b7a0:	7812      	ldrb	r2, [r2, #0]
 800b7a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7a8:	1c5a      	adds	r2, r3, #1
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	b29a      	uxth	r2, r3
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7bc:	e0a2      	b.n	800b904 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	f003 0302 	and.w	r3, r3, #2
 800b7c8:	2b02      	cmp	r3, #2
 800b7ca:	d134      	bne.n	800b836 <HAL_SPI_TransmitReceive+0x314>
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d02f      	beq.n	800b836 <HAL_SPI_TransmitReceive+0x314>
 800b7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d12c      	bne.n	800b836 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d912      	bls.n	800b80c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ea:	881a      	ldrh	r2, [r3, #0]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f6:	1c9a      	adds	r2, r3, #2
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b800:	b29b      	uxth	r3, r3
 800b802:	3b02      	subs	r3, #2
 800b804:	b29a      	uxth	r2, r3
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b80a:	e012      	b.n	800b832 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	330c      	adds	r3, #12
 800b816:	7812      	ldrb	r2, [r2, #0]
 800b818:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b81e:	1c5a      	adds	r2, r3, #1
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b828:	b29b      	uxth	r3, r3
 800b82a:	3b01      	subs	r3, #1
 800b82c:	b29a      	uxth	r2, r3
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b832:	2300      	movs	r3, #0
 800b834:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	f003 0301 	and.w	r3, r3, #1
 800b840:	2b01      	cmp	r3, #1
 800b842:	d148      	bne.n	800b8d6 <HAL_SPI_TransmitReceive+0x3b4>
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d042      	beq.n	800b8d6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b856:	b29b      	uxth	r3, r3
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d923      	bls.n	800b8a4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68da      	ldr	r2, [r3, #12]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b866:	b292      	uxth	r2, r2
 800b868:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b86e:	1c9a      	adds	r2, r3, #2
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	3b02      	subs	r3, #2
 800b87e:	b29a      	uxth	r2, r3
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d81f      	bhi.n	800b8d2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	685a      	ldr	r2, [r3, #4]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b8a0:	605a      	str	r2, [r3, #4]
 800b8a2:	e016      	b.n	800b8d2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f103 020c 	add.w	r2, r3, #12
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b0:	7812      	ldrb	r2, [r2, #0]
 800b8b2:	b2d2      	uxtb	r2, r2
 800b8b4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ba:	1c5a      	adds	r2, r3, #1
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b8d6:	f7f9 fef9 	bl	80056cc <HAL_GetTick>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	69fb      	ldr	r3, [r7, #28]
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d803      	bhi.n	800b8ee <HAL_SPI_TransmitReceive+0x3cc>
 800b8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ec:	d102      	bne.n	800b8f4 <HAL_SPI_TransmitReceive+0x3d2>
 800b8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d107      	bne.n	800b904 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800b8f4:	2303      	movs	r3, #3
 800b8f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800b902:	e026      	b.n	800b952 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b908:	b29b      	uxth	r3, r3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f47f af57 	bne.w	800b7be <HAL_SPI_TransmitReceive+0x29c>
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b916:	b29b      	uxth	r3, r3
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f47f af50 	bne.w	800b7be <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b91e:	69fa      	ldr	r2, [r7, #28]
 800b920:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	f000 f996 	bl	800bc54 <SPI_EndRxTxTransaction>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d005      	beq.n	800b93a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2220      	movs	r2, #32
 800b938:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d003      	beq.n	800b94a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b948:	e003      	b.n	800b952 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2201      	movs	r2, #1
 800b94e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b95a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3728      	adds	r7, #40	; 0x28
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
	...

0800b968 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b088      	sub	sp, #32
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	603b      	str	r3, [r7, #0]
 800b974:	4613      	mov	r3, r2
 800b976:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b978:	f7f9 fea8 	bl	80056cc <HAL_GetTick>
 800b97c:	4602      	mov	r2, r0
 800b97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b980:	1a9b      	subs	r3, r3, r2
 800b982:	683a      	ldr	r2, [r7, #0]
 800b984:	4413      	add	r3, r2
 800b986:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b988:	f7f9 fea0 	bl	80056cc <HAL_GetTick>
 800b98c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b98e:	4b39      	ldr	r3, [pc, #228]	; (800ba74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	015b      	lsls	r3, r3, #5
 800b994:	0d1b      	lsrs	r3, r3, #20
 800b996:	69fa      	ldr	r2, [r7, #28]
 800b998:	fb02 f303 	mul.w	r3, r2, r3
 800b99c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b99e:	e054      	b.n	800ba4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a6:	d050      	beq.n	800ba4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b9a8:	f7f9 fe90 	bl	80056cc <HAL_GetTick>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	1ad3      	subs	r3, r2, r3
 800b9b2:	69fa      	ldr	r2, [r7, #28]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d902      	bls.n	800b9be <SPI_WaitFlagStateUntilTimeout+0x56>
 800b9b8:	69fb      	ldr	r3, [r7, #28]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d13d      	bne.n	800ba3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	685a      	ldr	r2, [r3, #4]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b9cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9d6:	d111      	bne.n	800b9fc <SPI_WaitFlagStateUntilTimeout+0x94>
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9e0:	d004      	beq.n	800b9ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9ea:	d107      	bne.n	800b9fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b9fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba04:	d10f      	bne.n	800ba26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ba14:	601a      	str	r2, [r3, #0]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ba36:	2303      	movs	r3, #3
 800ba38:	e017      	b.n	800ba6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d101      	bne.n	800ba44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ba40:	2300      	movs	r3, #0
 800ba42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	3b01      	subs	r3, #1
 800ba48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	689a      	ldr	r2, [r3, #8]
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	4013      	ands	r3, r2
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	bf0c      	ite	eq
 800ba5a:	2301      	moveq	r3, #1
 800ba5c:	2300      	movne	r3, #0
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	461a      	mov	r2, r3
 800ba62:	79fb      	ldrb	r3, [r7, #7]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d19b      	bne.n	800b9a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3720      	adds	r7, #32
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	20000020 	.word	0x20000020

0800ba78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b08a      	sub	sp, #40	; 0x28
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
 800ba84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ba86:	2300      	movs	r3, #0
 800ba88:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ba8a:	f7f9 fe1f 	bl	80056cc <HAL_GetTick>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba92:	1a9b      	subs	r3, r3, r2
 800ba94:	683a      	ldr	r2, [r7, #0]
 800ba96:	4413      	add	r3, r2
 800ba98:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ba9a:	f7f9 fe17 	bl	80056cc <HAL_GetTick>
 800ba9e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	330c      	adds	r3, #12
 800baa6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800baa8:	4b3d      	ldr	r3, [pc, #244]	; (800bba0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	4613      	mov	r3, r2
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	4413      	add	r3, r2
 800bab2:	00da      	lsls	r2, r3, #3
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	0d1b      	lsrs	r3, r3, #20
 800bab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baba:	fb02 f303 	mul.w	r3, r2, r3
 800babe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800bac0:	e060      	b.n	800bb84 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bac8:	d107      	bne.n	800bada <SPI_WaitFifoStateUntilTimeout+0x62>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d104      	bne.n	800bada <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800bad8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae0:	d050      	beq.n	800bb84 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bae2:	f7f9 fdf3 	bl	80056cc <HAL_GetTick>
 800bae6:	4602      	mov	r2, r0
 800bae8:	6a3b      	ldr	r3, [r7, #32]
 800baea:	1ad3      	subs	r3, r2, r3
 800baec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baee:	429a      	cmp	r2, r3
 800baf0:	d902      	bls.n	800baf8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d13d      	bne.n	800bb74 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	685a      	ldr	r2, [r3, #4]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bb06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb10:	d111      	bne.n	800bb36 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb1a:	d004      	beq.n	800bb26 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb24:	d107      	bne.n	800bb36 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb3e:	d10f      	bne.n	800bb60 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bb4e:	601a      	str	r2, [r3, #0]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bb5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2201      	movs	r2, #1
 800bb64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bb70:	2303      	movs	r3, #3
 800bb72:	e010      	b.n	800bb96 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d101      	bne.n	800bb7e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	3b01      	subs	r3, #1
 800bb82:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	689a      	ldr	r2, [r3, #8]
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	4013      	ands	r3, r2
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d196      	bne.n	800bac2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3728      	adds	r7, #40	; 0x28
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	20000020 	.word	0x20000020

0800bba4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af02      	add	r7, sp, #8
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bbb8:	d111      	bne.n	800bbde <SPI_EndRxTransaction+0x3a>
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbc2:	d004      	beq.n	800bbce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbcc:	d107      	bne.n	800bbde <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbdc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	2180      	movs	r1, #128	; 0x80
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f7ff febd 	bl	800b968 <SPI_WaitFlagStateUntilTimeout>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d007      	beq.n	800bc04 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbf8:	f043 0220 	orr.w	r2, r3, #32
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bc00:	2303      	movs	r3, #3
 800bc02:	e023      	b.n	800bc4c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc0c:	d11d      	bne.n	800bc4a <SPI_EndRxTransaction+0xa6>
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc16:	d004      	beq.n	800bc22 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc20:	d113      	bne.n	800bc4a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f7ff ff22 	bl	800ba78 <SPI_WaitFifoStateUntilTimeout>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d007      	beq.n	800bc4a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc3e:	f043 0220 	orr.w	r2, r3, #32
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800bc46:	2303      	movs	r3, #3
 800bc48:	e000      	b.n	800bc4c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b086      	sub	sp, #24
 800bc58:	af02      	add	r7, sp, #8
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800bc6c:	68f8      	ldr	r0, [r7, #12]
 800bc6e:	f7ff ff03 	bl	800ba78 <SPI_WaitFifoStateUntilTimeout>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d007      	beq.n	800bc88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc7c:	f043 0220 	orr.w	r2, r3, #32
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bc84:	2303      	movs	r3, #3
 800bc86:	e027      	b.n	800bcd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	9300      	str	r3, [sp, #0]
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	2180      	movs	r1, #128	; 0x80
 800bc92:	68f8      	ldr	r0, [r7, #12]
 800bc94:	f7ff fe68 	bl	800b968 <SPI_WaitFlagStateUntilTimeout>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d007      	beq.n	800bcae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bca2:	f043 0220 	orr.w	r2, r3, #32
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bcaa:	2303      	movs	r3, #3
 800bcac:	e014      	b.n	800bcd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f7ff fedc 	bl	800ba78 <SPI_WaitFifoStateUntilTimeout>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d007      	beq.n	800bcd6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcca:	f043 0220 	orr.w	r2, r3, #32
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bcd2:	2303      	movs	r3, #3
 800bcd4:	e000      	b.n	800bcd8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800bcd6:	2300      	movs	r3, #0
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3710      	adds	r7, #16
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d101      	bne.n	800bcf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e049      	b.n	800bd86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d106      	bne.n	800bd0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f7f9 fa96 	bl	8005238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2202      	movs	r2, #2
 800bd10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	4610      	mov	r0, r2
 800bd20:	f000 f94c 	bl	800bfbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2201      	movs	r2, #1
 800bd28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2201      	movs	r2, #1
 800bd30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2201      	movs	r2, #1
 800bd38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2201      	movs	r2, #1
 800bd48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2201      	movs	r2, #1
 800bd50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2201      	movs	r2, #1
 800bd58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2201      	movs	r2, #1
 800bd68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2201      	movs	r2, #1
 800bd78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd84:	2300      	movs	r3, #0
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3708      	adds	r7, #8
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
	...

0800bd90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d001      	beq.n	800bda8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bda4:	2301      	movs	r3, #1
 800bda6:	e033      	b.n	800be10 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2202      	movs	r2, #2
 800bdac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a19      	ldr	r2, [pc, #100]	; (800be1c <HAL_TIM_Base_Start+0x8c>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d009      	beq.n	800bdce <HAL_TIM_Base_Start+0x3e>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdc2:	d004      	beq.n	800bdce <HAL_TIM_Base_Start+0x3e>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a15      	ldr	r2, [pc, #84]	; (800be20 <HAL_TIM_Base_Start+0x90>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d115      	bne.n	800bdfa <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	689a      	ldr	r2, [r3, #8]
 800bdd4:	4b13      	ldr	r3, [pc, #76]	; (800be24 <HAL_TIM_Base_Start+0x94>)
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2b06      	cmp	r3, #6
 800bdde:	d015      	beq.n	800be0c <HAL_TIM_Base_Start+0x7c>
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bde6:	d011      	beq.n	800be0c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f042 0201 	orr.w	r2, r2, #1
 800bdf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdf8:	e008      	b.n	800be0c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f042 0201 	orr.w	r2, r2, #1
 800be08:	601a      	str	r2, [r3, #0]
 800be0a:	e000      	b.n	800be0e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be0e:	2300      	movs	r3, #0
}
 800be10:	4618      	mov	r0, r3
 800be12:	3714      	adds	r7, #20
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr
 800be1c:	40012c00 	.word	0x40012c00
 800be20:	40014000 	.word	0x40014000
 800be24:	00010007 	.word	0x00010007

0800be28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be32:	2300      	movs	r3, #0
 800be34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d101      	bne.n	800be44 <HAL_TIM_ConfigClockSource+0x1c>
 800be40:	2302      	movs	r3, #2
 800be42:	e0b6      	b.n	800bfb2 <HAL_TIM_ConfigClockSource+0x18a>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2201      	movs	r2, #1
 800be48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2202      	movs	r2, #2
 800be50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800be66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	68ba      	ldr	r2, [r7, #8]
 800be76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be80:	d03e      	beq.n	800bf00 <HAL_TIM_ConfigClockSource+0xd8>
 800be82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be86:	f200 8087 	bhi.w	800bf98 <HAL_TIM_ConfigClockSource+0x170>
 800be8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be8e:	f000 8086 	beq.w	800bf9e <HAL_TIM_ConfigClockSource+0x176>
 800be92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be96:	d87f      	bhi.n	800bf98 <HAL_TIM_ConfigClockSource+0x170>
 800be98:	2b70      	cmp	r3, #112	; 0x70
 800be9a:	d01a      	beq.n	800bed2 <HAL_TIM_ConfigClockSource+0xaa>
 800be9c:	2b70      	cmp	r3, #112	; 0x70
 800be9e:	d87b      	bhi.n	800bf98 <HAL_TIM_ConfigClockSource+0x170>
 800bea0:	2b60      	cmp	r3, #96	; 0x60
 800bea2:	d050      	beq.n	800bf46 <HAL_TIM_ConfigClockSource+0x11e>
 800bea4:	2b60      	cmp	r3, #96	; 0x60
 800bea6:	d877      	bhi.n	800bf98 <HAL_TIM_ConfigClockSource+0x170>
 800bea8:	2b50      	cmp	r3, #80	; 0x50
 800beaa:	d03c      	beq.n	800bf26 <HAL_TIM_ConfigClockSource+0xfe>
 800beac:	2b50      	cmp	r3, #80	; 0x50
 800beae:	d873      	bhi.n	800bf98 <HAL_TIM_ConfigClockSource+0x170>
 800beb0:	2b40      	cmp	r3, #64	; 0x40
 800beb2:	d058      	beq.n	800bf66 <HAL_TIM_ConfigClockSource+0x13e>
 800beb4:	2b40      	cmp	r3, #64	; 0x40
 800beb6:	d86f      	bhi.n	800bf98 <HAL_TIM_ConfigClockSource+0x170>
 800beb8:	2b30      	cmp	r3, #48	; 0x30
 800beba:	d064      	beq.n	800bf86 <HAL_TIM_ConfigClockSource+0x15e>
 800bebc:	2b30      	cmp	r3, #48	; 0x30
 800bebe:	d86b      	bhi.n	800bf98 <HAL_TIM_ConfigClockSource+0x170>
 800bec0:	2b20      	cmp	r3, #32
 800bec2:	d060      	beq.n	800bf86 <HAL_TIM_ConfigClockSource+0x15e>
 800bec4:	2b20      	cmp	r3, #32
 800bec6:	d867      	bhi.n	800bf98 <HAL_TIM_ConfigClockSource+0x170>
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d05c      	beq.n	800bf86 <HAL_TIM_ConfigClockSource+0x15e>
 800becc:	2b10      	cmp	r3, #16
 800bece:	d05a      	beq.n	800bf86 <HAL_TIM_ConfigClockSource+0x15e>
 800bed0:	e062      	b.n	800bf98 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bee2:	f000 f949 	bl	800c178 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bef4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	609a      	str	r2, [r3, #8]
      break;
 800befe:	e04f      	b.n	800bfa0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf10:	f000 f932 	bl	800c178 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	689a      	ldr	r2, [r3, #8]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf22:	609a      	str	r2, [r3, #8]
      break;
 800bf24:	e03c      	b.n	800bfa0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf32:	461a      	mov	r2, r3
 800bf34:	f000 f8a6 	bl	800c084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2150      	movs	r1, #80	; 0x50
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f000 f8ff 	bl	800c142 <TIM_ITRx_SetConfig>
      break;
 800bf44:	e02c      	b.n	800bfa0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf52:	461a      	mov	r2, r3
 800bf54:	f000 f8c5 	bl	800c0e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2160      	movs	r1, #96	; 0x60
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f000 f8ef 	bl	800c142 <TIM_ITRx_SetConfig>
      break;
 800bf64:	e01c      	b.n	800bfa0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf72:	461a      	mov	r2, r3
 800bf74:	f000 f886 	bl	800c084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2140      	movs	r1, #64	; 0x40
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f000 f8df 	bl	800c142 <TIM_ITRx_SetConfig>
      break;
 800bf84:	e00c      	b.n	800bfa0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4619      	mov	r1, r3
 800bf90:	4610      	mov	r0, r2
 800bf92:	f000 f8d6 	bl	800c142 <TIM_ITRx_SetConfig>
      break;
 800bf96:	e003      	b.n	800bfa0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	73fb      	strb	r3, [r7, #15]
      break;
 800bf9c:	e000      	b.n	800bfa0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800bf9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bfb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
	...

0800bfbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4a2a      	ldr	r2, [pc, #168]	; (800c078 <TIM_Base_SetConfig+0xbc>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d003      	beq.n	800bfdc <TIM_Base_SetConfig+0x20>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfda:	d108      	bne.n	800bfee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	4313      	orrs	r3, r2
 800bfec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4a21      	ldr	r2, [pc, #132]	; (800c078 <TIM_Base_SetConfig+0xbc>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d00b      	beq.n	800c00e <TIM_Base_SetConfig+0x52>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bffc:	d007      	beq.n	800c00e <TIM_Base_SetConfig+0x52>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4a1e      	ldr	r2, [pc, #120]	; (800c07c <TIM_Base_SetConfig+0xc0>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d003      	beq.n	800c00e <TIM_Base_SetConfig+0x52>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4a1d      	ldr	r2, [pc, #116]	; (800c080 <TIM_Base_SetConfig+0xc4>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d108      	bne.n	800c020 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	68fa      	ldr	r2, [r7, #12]
 800c01c:	4313      	orrs	r3, r2
 800c01e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	695b      	ldr	r3, [r3, #20]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	68fa      	ldr	r2, [r7, #12]
 800c032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	689a      	ldr	r2, [r3, #8]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4a0c      	ldr	r2, [pc, #48]	; (800c078 <TIM_Base_SetConfig+0xbc>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d007      	beq.n	800c05c <TIM_Base_SetConfig+0xa0>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a0b      	ldr	r2, [pc, #44]	; (800c07c <TIM_Base_SetConfig+0xc0>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d003      	beq.n	800c05c <TIM_Base_SetConfig+0xa0>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	4a0a      	ldr	r2, [pc, #40]	; (800c080 <TIM_Base_SetConfig+0xc4>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d103      	bne.n	800c064 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	691a      	ldr	r2, [r3, #16]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2201      	movs	r2, #1
 800c068:	615a      	str	r2, [r3, #20]
}
 800c06a:	bf00      	nop
 800c06c:	3714      	adds	r7, #20
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr
 800c076:	bf00      	nop
 800c078:	40012c00 	.word	0x40012c00
 800c07c:	40014000 	.word	0x40014000
 800c080:	40014400 	.word	0x40014400

0800c084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c084:	b480      	push	{r7}
 800c086:	b087      	sub	sp, #28
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	6a1b      	ldr	r3, [r3, #32]
 800c094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6a1b      	ldr	r3, [r3, #32]
 800c09a:	f023 0201 	bic.w	r2, r3, #1
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	699b      	ldr	r3, [r3, #24]
 800c0a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c0ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	011b      	lsls	r3, r3, #4
 800c0b4:	693a      	ldr	r2, [r7, #16]
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	f023 030a 	bic.w	r3, r3, #10
 800c0c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c0c2:	697a      	ldr	r2, [r7, #20]
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	693a      	ldr	r2, [r7, #16]
 800c0ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	697a      	ldr	r2, [r7, #20]
 800c0d4:	621a      	str	r2, [r3, #32]
}
 800c0d6:	bf00      	nop
 800c0d8:	371c      	adds	r7, #28
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr

0800c0e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0e2:	b480      	push	{r7}
 800c0e4:	b087      	sub	sp, #28
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	60f8      	str	r0, [r7, #12]
 800c0ea:	60b9      	str	r1, [r7, #8]
 800c0ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6a1b      	ldr	r3, [r3, #32]
 800c0f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6a1b      	ldr	r3, [r3, #32]
 800c0f8:	f023 0210 	bic.w	r2, r3, #16
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c10c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	031b      	lsls	r3, r3, #12
 800c112:	693a      	ldr	r2, [r7, #16]
 800c114:	4313      	orrs	r3, r2
 800c116:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c11e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	011b      	lsls	r3, r3, #4
 800c124:	697a      	ldr	r2, [r7, #20]
 800c126:	4313      	orrs	r3, r2
 800c128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	693a      	ldr	r2, [r7, #16]
 800c12e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	697a      	ldr	r2, [r7, #20]
 800c134:	621a      	str	r2, [r3, #32]
}
 800c136:	bf00      	nop
 800c138:	371c      	adds	r7, #28
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr

0800c142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c142:	b480      	push	{r7}
 800c144:	b085      	sub	sp, #20
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
 800c14a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c15a:	683a      	ldr	r2, [r7, #0]
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	4313      	orrs	r3, r2
 800c160:	f043 0307 	orr.w	r3, r3, #7
 800c164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	609a      	str	r2, [r3, #8]
}
 800c16c:	bf00      	nop
 800c16e:	3714      	adds	r7, #20
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c178:	b480      	push	{r7}
 800c17a:	b087      	sub	sp, #28
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	607a      	str	r2, [r7, #4]
 800c184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	021a      	lsls	r2, r3, #8
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	431a      	orrs	r2, r3
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	697a      	ldr	r2, [r7, #20]
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	697a      	ldr	r2, [r7, #20]
 800c1aa:	609a      	str	r2, [r3, #8]
}
 800c1ac:	bf00      	nop
 800c1ae:	371c      	adds	r7, #28
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr

0800c1b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d101      	bne.n	800c1d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c1cc:	2302      	movs	r3, #2
 800c1ce:	e04f      	b.n	800c270 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2202      	movs	r2, #2
 800c1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	689b      	ldr	r3, [r3, #8]
 800c1ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a21      	ldr	r2, [pc, #132]	; (800c27c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d108      	bne.n	800c20c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c200:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	4313      	orrs	r3, r2
 800c20a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c212:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	4313      	orrs	r3, r2
 800c21c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68fa      	ldr	r2, [r7, #12]
 800c224:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4a14      	ldr	r2, [pc, #80]	; (800c27c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d009      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c238:	d004      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a10      	ldr	r2, [pc, #64]	; (800c280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d10c      	bne.n	800c25e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c24a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	68ba      	ldr	r2, [r7, #8]
 800c252:	4313      	orrs	r3, r2
 800c254:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	68ba      	ldr	r2, [r7, #8]
 800c25c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2201      	movs	r2, #1
 800c262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c26e:	2300      	movs	r3, #0
}
 800c270:	4618      	mov	r0, r3
 800c272:	3714      	adds	r7, #20
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr
 800c27c:	40012c00 	.word	0x40012c00
 800c280:	40014000 	.word	0x40014000

0800c284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d101      	bne.n	800c296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c292:	2301      	movs	r3, #1
 800c294:	e040      	b.n	800c318 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d106      	bne.n	800c2ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f7f9 f840 	bl	800532c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2224      	movs	r2, #36	; 0x24
 800c2b0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f022 0201 	bic.w	r2, r2, #1
 800c2c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d002      	beq.n	800c2d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 feb0 	bl	800d030 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fc81 	bl	800cbd8 <UART_SetConfig>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d101      	bne.n	800c2e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800c2dc:	2301      	movs	r3, #1
 800c2de:	e01b      	b.n	800c318 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	685a      	ldr	r2, [r3, #4]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c2ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	689a      	ldr	r2, [r3, #8]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c2fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f042 0201 	orr.w	r2, r2, #1
 800c30e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 ff2f 	bl	800d174 <UART_CheckIdleState>
 800c316:	4603      	mov	r3, r0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3708      	adds	r7, #8
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b08a      	sub	sp, #40	; 0x28
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	4613      	mov	r3, r2
 800c32c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c334:	2b20      	cmp	r3, #32
 800c336:	d137      	bne.n	800c3a8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d002      	beq.n	800c344 <HAL_UART_Receive_DMA+0x24>
 800c33e:	88fb      	ldrh	r3, [r7, #6]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d101      	bne.n	800c348 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	e030      	b.n	800c3aa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2200      	movs	r2, #0
 800c34c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a18      	ldr	r2, [pc, #96]	; (800c3b4 <HAL_UART_Receive_DMA+0x94>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d01f      	beq.n	800c398 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c362:	2b00      	cmp	r3, #0
 800c364:	d018      	beq.n	800c398 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	e853 3f00 	ldrex	r3, [r3]
 800c372:	613b      	str	r3, [r7, #16]
   return(result);
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c37a:	627b      	str	r3, [r7, #36]	; 0x24
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	461a      	mov	r2, r3
 800c382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c384:	623b      	str	r3, [r7, #32]
 800c386:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c388:	69f9      	ldr	r1, [r7, #28]
 800c38a:	6a3a      	ldr	r2, [r7, #32]
 800c38c:	e841 2300 	strex	r3, r2, [r1]
 800c390:	61bb      	str	r3, [r7, #24]
   return(result);
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d1e6      	bne.n	800c366 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c398:	88fb      	ldrh	r3, [r7, #6]
 800c39a:	461a      	mov	r2, r3
 800c39c:	68b9      	ldr	r1, [r7, #8]
 800c39e:	68f8      	ldr	r0, [r7, #12]
 800c3a0:	f000 fff8 	bl	800d394 <UART_Start_Receive_DMA>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	e000      	b.n	800c3aa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c3a8:	2302      	movs	r3, #2
  }
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3728      	adds	r7, #40	; 0x28
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	40008000 	.word	0x40008000

0800c3b8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b0a0      	sub	sp, #128	; 0x80
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3c8:	e853 3f00 	ldrex	r3, [r3]
 800c3cc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c3ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c3d0:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800c3d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3de:	66bb      	str	r3, [r7, #104]	; 0x68
 800c3e0:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c3e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c3e6:	e841 2300 	strex	r3, r2, [r1]
 800c3ea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c3ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d1e6      	bne.n	800c3c0 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	3308      	adds	r3, #8
 800c3f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3fc:	e853 3f00 	ldrex	r3, [r3]
 800c400:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c404:	f023 0301 	bic.w	r3, r3, #1
 800c408:	67bb      	str	r3, [r7, #120]	; 0x78
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	3308      	adds	r3, #8
 800c410:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c412:	657a      	str	r2, [r7, #84]	; 0x54
 800c414:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c416:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c418:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c41a:	e841 2300 	strex	r3, r2, [r1]
 800c41e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1e5      	bne.n	800c3f2 <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d118      	bne.n	800c460 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c436:	e853 3f00 	ldrex	r3, [r3]
 800c43a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43e:	f023 0310 	bic.w	r3, r3, #16
 800c442:	677b      	str	r3, [r7, #116]	; 0x74
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	461a      	mov	r2, r3
 800c44a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c44c:	643b      	str	r3, [r7, #64]	; 0x40
 800c44e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c450:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c452:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c454:	e841 2300 	strex	r3, r2, [r1]
 800c458:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d1e6      	bne.n	800c42e <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c46a:	2b80      	cmp	r3, #128	; 0x80
 800c46c:	d137      	bne.n	800c4de <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	3308      	adds	r3, #8
 800c474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c476:	6a3b      	ldr	r3, [r7, #32]
 800c478:	e853 3f00 	ldrex	r3, [r3]
 800c47c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c484:	673b      	str	r3, [r7, #112]	; 0x70
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	3308      	adds	r3, #8
 800c48c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c48e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c490:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c496:	e841 2300 	strex	r3, r2, [r1]
 800c49a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1e5      	bne.n	800c46e <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d019      	beq.n	800c4de <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7fa fe02 	bl	80070c0 <HAL_DMA_Abort>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00d      	beq.n	800c4de <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7fa ff28 	bl	800731c <HAL_DMA_GetError>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b20      	cmp	r3, #32
 800c4d0:	d105      	bne.n	800c4de <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2210      	movs	r2, #16
 800c4d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c4da:	2303      	movs	r3, #3
 800c4dc:	e063      	b.n	800c5a6 <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4e8:	2b40      	cmp	r3, #64	; 0x40
 800c4ea:	d137      	bne.n	800c55c <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	3308      	adds	r3, #8
 800c4f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	e853 3f00 	ldrex	r3, [r3]
 800c4fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c502:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	3308      	adds	r3, #8
 800c50a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c50c:	61ba      	str	r2, [r7, #24]
 800c50e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c510:	6979      	ldr	r1, [r7, #20]
 800c512:	69ba      	ldr	r2, [r7, #24]
 800c514:	e841 2300 	strex	r3, r2, [r1]
 800c518:	613b      	str	r3, [r7, #16]
   return(result);
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1e5      	bne.n	800c4ec <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c524:	2b00      	cmp	r3, #0
 800c526:	d019      	beq.n	800c55c <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c52c:	2200      	movs	r2, #0
 800c52e:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c534:	4618      	mov	r0, r3
 800c536:	f7fa fdc3 	bl	80070c0 <HAL_DMA_Abort>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00d      	beq.n	800c55c <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c544:	4618      	mov	r0, r3
 800c546:	f7fa fee9 	bl	800731c <HAL_DMA_GetError>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b20      	cmp	r3, #32
 800c54e:	d105      	bne.n	800c55c <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2210      	movs	r2, #16
 800c554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c558:	2303      	movs	r3, #3
 800c55a:	e024      	b.n	800c5a6 <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	220f      	movs	r2, #15
 800c572:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	8b1b      	ldrh	r3, [r3, #24]
 800c57a:	b29a      	uxth	r2, r3
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f042 0208 	orr.w	r2, r2, #8
 800c584:	b292      	uxth	r2, r2
 800c586:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2220      	movs	r2, #32
 800c58c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2220      	movs	r2, #32
 800c592:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2200      	movs	r2, #0
 800c59a:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3780      	adds	r7, #128	; 0x80
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
	...

0800c5b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b0ba      	sub	sp, #232	; 0xe8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	69db      	ldr	r3, [r3, #28]
 800c5be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	689b      	ldr	r3, [r3, #8]
 800c5d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c5d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c5da:	f640 030f 	movw	r3, #2063	; 0x80f
 800c5de:	4013      	ands	r3, r2
 800c5e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c5e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d115      	bne.n	800c618 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c5ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5f0:	f003 0320 	and.w	r3, r3, #32
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00f      	beq.n	800c618 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c5f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5fc:	f003 0320 	and.w	r3, r3, #32
 800c600:	2b00      	cmp	r3, #0
 800c602:	d009      	beq.n	800c618 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f000 82ae 	beq.w	800cb6a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	4798      	blx	r3
      }
      return;
 800c616:	e2a8      	b.n	800cb6a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f000 8117 	beq.w	800c850 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c626:	f003 0301 	and.w	r3, r3, #1
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d106      	bne.n	800c63c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c62e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c632:	4b85      	ldr	r3, [pc, #532]	; (800c848 <HAL_UART_IRQHandler+0x298>)
 800c634:	4013      	ands	r3, r2
 800c636:	2b00      	cmp	r3, #0
 800c638:	f000 810a 	beq.w	800c850 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c63c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c640:	f003 0301 	and.w	r3, r3, #1
 800c644:	2b00      	cmp	r3, #0
 800c646:	d011      	beq.n	800c66c <HAL_UART_IRQHandler+0xbc>
 800c648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c64c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00b      	beq.n	800c66c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2201      	movs	r2, #1
 800c65a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c662:	f043 0201 	orr.w	r2, r3, #1
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c66c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c670:	f003 0302 	and.w	r3, r3, #2
 800c674:	2b00      	cmp	r3, #0
 800c676:	d011      	beq.n	800c69c <HAL_UART_IRQHandler+0xec>
 800c678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c67c:	f003 0301 	and.w	r3, r3, #1
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00b      	beq.n	800c69c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2202      	movs	r2, #2
 800c68a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c692:	f043 0204 	orr.w	r2, r3, #4
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c69c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6a0:	f003 0304 	and.w	r3, r3, #4
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d011      	beq.n	800c6cc <HAL_UART_IRQHandler+0x11c>
 800c6a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6ac:	f003 0301 	and.w	r3, r3, #1
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00b      	beq.n	800c6cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2204      	movs	r2, #4
 800c6ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6c2:	f043 0202 	orr.w	r2, r3, #2
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c6cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6d0:	f003 0308 	and.w	r3, r3, #8
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d017      	beq.n	800c708 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c6d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6dc:	f003 0320 	and.w	r3, r3, #32
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d105      	bne.n	800c6f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c6e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d00b      	beq.n	800c708 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2208      	movs	r2, #8
 800c6f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6fe:	f043 0208 	orr.w	r2, r3, #8
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c70c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c710:	2b00      	cmp	r3, #0
 800c712:	d012      	beq.n	800c73a <HAL_UART_IRQHandler+0x18a>
 800c714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00c      	beq.n	800c73a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c728:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c730:	f043 0220 	orr.w	r2, r3, #32
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c740:	2b00      	cmp	r3, #0
 800c742:	f000 8214 	beq.w	800cb6e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c74a:	f003 0320 	and.w	r3, r3, #32
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00d      	beq.n	800c76e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c756:	f003 0320 	and.w	r3, r3, #32
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d007      	beq.n	800c76e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c762:	2b00      	cmp	r3, #0
 800c764:	d003      	beq.n	800c76e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c774:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c782:	2b40      	cmp	r3, #64	; 0x40
 800c784:	d005      	beq.n	800c792 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c78a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d04f      	beq.n	800c832 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 fec4 	bl	800d520 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7a2:	2b40      	cmp	r3, #64	; 0x40
 800c7a4:	d141      	bne.n	800c82a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	3308      	adds	r3, #8
 800c7ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c7b4:	e853 3f00 	ldrex	r3, [r3]
 800c7b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c7bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c7c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	3308      	adds	r3, #8
 800c7ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c7d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c7d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c7de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c7e2:	e841 2300 	strex	r3, r2, [r1]
 800c7e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c7ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d1d9      	bne.n	800c7a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d013      	beq.n	800c822 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7fe:	4a13      	ldr	r2, [pc, #76]	; (800c84c <HAL_UART_IRQHandler+0x29c>)
 800c800:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c806:	4618      	mov	r0, r3
 800c808:	f7fa fc98 	bl	800713c <HAL_DMA_Abort_IT>
 800c80c:	4603      	mov	r3, r0
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d017      	beq.n	800c842 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c81c:	4610      	mov	r0, r2
 800c81e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c820:	e00f      	b.n	800c842 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 f9c2 	bl	800cbac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c828:	e00b      	b.n	800c842 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 f9be 	bl	800cbac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c830:	e007      	b.n	800c842 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 f9ba 	bl	800cbac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2200      	movs	r2, #0
 800c83c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800c840:	e195      	b.n	800cb6e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c842:	bf00      	nop
    return;
 800c844:	e193      	b.n	800cb6e <HAL_UART_IRQHandler+0x5be>
 800c846:	bf00      	nop
 800c848:	04000120 	.word	0x04000120
 800c84c:	0800d7d1 	.word	0x0800d7d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c854:	2b01      	cmp	r3, #1
 800c856:	f040 814e 	bne.w	800caf6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c85a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c85e:	f003 0310 	and.w	r3, r3, #16
 800c862:	2b00      	cmp	r3, #0
 800c864:	f000 8147 	beq.w	800caf6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c86c:	f003 0310 	and.w	r3, r3, #16
 800c870:	2b00      	cmp	r3, #0
 800c872:	f000 8140 	beq.w	800caf6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2210      	movs	r2, #16
 800c87c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c888:	2b40      	cmp	r3, #64	; 0x40
 800c88a:	f040 80b8 	bne.w	800c9fe <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c89a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	f000 8167 	beq.w	800cb72 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c8aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	f080 815f 	bcs.w	800cb72 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c8ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f003 0320 	and.w	r3, r3, #32
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	f040 8086 	bne.w	800c9dc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c8dc:	e853 3f00 	ldrex	r3, [r3]
 800c8e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c8e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c8e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c8fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c902:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c906:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c90a:	e841 2300 	strex	r3, r2, [r1]
 800c90e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c912:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1da      	bne.n	800c8d0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	3308      	adds	r3, #8
 800c920:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c924:	e853 3f00 	ldrex	r3, [r3]
 800c928:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c92a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c92c:	f023 0301 	bic.w	r3, r3, #1
 800c930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	3308      	adds	r3, #8
 800c93a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c93e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c942:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c944:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c946:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c94a:	e841 2300 	strex	r3, r2, [r1]
 800c94e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1e1      	bne.n	800c91a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	3308      	adds	r3, #8
 800c95c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c95e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c960:	e853 3f00 	ldrex	r3, [r3]
 800c964:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c96c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	3308      	adds	r3, #8
 800c976:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c97a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c97c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c980:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c982:	e841 2300 	strex	r3, r2, [r1]
 800c986:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d1e3      	bne.n	800c956 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2220      	movs	r2, #32
 800c992:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9a4:	e853 3f00 	ldrex	r3, [r3]
 800c9a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c9aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ac:	f023 0310 	bic.w	r3, r3, #16
 800c9b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c9be:	65bb      	str	r3, [r7, #88]	; 0x58
 800c9c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c9c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c9c6:	e841 2300 	strex	r3, r2, [r1]
 800c9ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c9cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d1e4      	bne.n	800c99c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fa fb72 	bl	80070c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2202      	movs	r2, #2
 800c9e0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	1ad3      	subs	r3, r2, r3
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 f8e2 	bl	800cbc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c9fc:	e0b9      	b.n	800cb72 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	1ad3      	subs	r3, r2, r3
 800ca0e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	f000 80ab 	beq.w	800cb76 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800ca20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f000 80a6 	beq.w	800cb76 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca32:	e853 3f00 	ldrex	r3, [r3]
 800ca36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ca38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	461a      	mov	r2, r3
 800ca48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ca4c:	647b      	str	r3, [r7, #68]	; 0x44
 800ca4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ca52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca54:	e841 2300 	strex	r3, r2, [r1]
 800ca58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ca5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d1e4      	bne.n	800ca2a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	3308      	adds	r3, #8
 800ca66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6a:	e853 3f00 	ldrex	r3, [r3]
 800ca6e:	623b      	str	r3, [r7, #32]
   return(result);
 800ca70:	6a3b      	ldr	r3, [r7, #32]
 800ca72:	f023 0301 	bic.w	r3, r3, #1
 800ca76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	3308      	adds	r3, #8
 800ca80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ca84:	633a      	str	r2, [r7, #48]	; 0x30
 800ca86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca8c:	e841 2300 	strex	r3, r2, [r1]
 800ca90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d1e3      	bne.n	800ca60 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2220      	movs	r2, #32
 800ca9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2200      	movs	r2, #0
 800caa4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	e853 3f00 	ldrex	r3, [r3]
 800cab8:	60fb      	str	r3, [r7, #12]
   return(result);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	f023 0310 	bic.w	r3, r3, #16
 800cac0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	461a      	mov	r2, r3
 800caca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cace:	61fb      	str	r3, [r7, #28]
 800cad0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad2:	69b9      	ldr	r1, [r7, #24]
 800cad4:	69fa      	ldr	r2, [r7, #28]
 800cad6:	e841 2300 	strex	r3, r2, [r1]
 800cada:	617b      	str	r3, [r7, #20]
   return(result);
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d1e4      	bne.n	800caac <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2202      	movs	r2, #2
 800cae6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800caec:	4619      	mov	r1, r3
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 f866 	bl	800cbc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800caf4:	e03f      	b.n	800cb76 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800caf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cafa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00e      	beq.n	800cb20 <HAL_UART_IRQHandler+0x570>
 800cb02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d008      	beq.n	800cb20 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cb16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 fe99 	bl	800d850 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb1e:	e02d      	b.n	800cb7c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800cb20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d00e      	beq.n	800cb4a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800cb2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d008      	beq.n	800cb4a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d01c      	beq.n	800cb7a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	4798      	blx	r3
    }
    return;
 800cb48:	e017      	b.n	800cb7a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cb4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d012      	beq.n	800cb7c <HAL_UART_IRQHandler+0x5cc>
 800cb56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d00c      	beq.n	800cb7c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 fe4a 	bl	800d7fc <UART_EndTransmit_IT>
    return;
 800cb68:	e008      	b.n	800cb7c <HAL_UART_IRQHandler+0x5cc>
      return;
 800cb6a:	bf00      	nop
 800cb6c:	e006      	b.n	800cb7c <HAL_UART_IRQHandler+0x5cc>
    return;
 800cb6e:	bf00      	nop
 800cb70:	e004      	b.n	800cb7c <HAL_UART_IRQHandler+0x5cc>
      return;
 800cb72:	bf00      	nop
 800cb74:	e002      	b.n	800cb7c <HAL_UART_IRQHandler+0x5cc>
      return;
 800cb76:	bf00      	nop
 800cb78:	e000      	b.n	800cb7c <HAL_UART_IRQHandler+0x5cc>
    return;
 800cb7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800cb7c:	37e8      	adds	r7, #232	; 0xe8
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop

0800cb84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cb8c:	bf00      	nop
 800cb8e:	370c      	adds	r7, #12
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr

0800cb98 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cba0:	bf00      	nop
 800cba2:	370c      	adds	r7, #12
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cbb4:	bf00      	nop
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	460b      	mov	r3, r1
 800cbca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cbcc:	bf00      	nop
 800cbce:	370c      	adds	r7, #12
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr

0800cbd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cbd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cbdc:	b08a      	sub	sp, #40	; 0x28
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	689a      	ldr	r2, [r3, #8]
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	691b      	ldr	r3, [r3, #16]
 800cbf0:	431a      	orrs	r2, r3
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	695b      	ldr	r3, [r3, #20]
 800cbf6:	431a      	orrs	r2, r3
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	69db      	ldr	r3, [r3, #28]
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	4bb4      	ldr	r3, [pc, #720]	; (800ced8 <UART_SetConfig+0x300>)
 800cc08:	4013      	ands	r3, r2
 800cc0a:	68fa      	ldr	r2, [r7, #12]
 800cc0c:	6812      	ldr	r2, [r2, #0]
 800cc0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc10:	430b      	orrs	r3, r1
 800cc12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	68da      	ldr	r2, [r3, #12]
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	430a      	orrs	r2, r1
 800cc28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	699b      	ldr	r3, [r3, #24]
 800cc2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4aa9      	ldr	r2, [pc, #676]	; (800cedc <UART_SetConfig+0x304>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d004      	beq.n	800cc44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	6a1b      	ldr	r3, [r3, #32]
 800cc3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc40:	4313      	orrs	r3, r2
 800cc42:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc54:	430a      	orrs	r2, r1
 800cc56:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4aa0      	ldr	r2, [pc, #640]	; (800cee0 <UART_SetConfig+0x308>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d126      	bne.n	800ccb0 <UART_SetConfig+0xd8>
 800cc62:	4ba0      	ldr	r3, [pc, #640]	; (800cee4 <UART_SetConfig+0x30c>)
 800cc64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc68:	f003 0303 	and.w	r3, r3, #3
 800cc6c:	2b03      	cmp	r3, #3
 800cc6e:	d81b      	bhi.n	800cca8 <UART_SetConfig+0xd0>
 800cc70:	a201      	add	r2, pc, #4	; (adr r2, 800cc78 <UART_SetConfig+0xa0>)
 800cc72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc76:	bf00      	nop
 800cc78:	0800cc89 	.word	0x0800cc89
 800cc7c:	0800cc99 	.word	0x0800cc99
 800cc80:	0800cc91 	.word	0x0800cc91
 800cc84:	0800cca1 	.word	0x0800cca1
 800cc88:	2301      	movs	r3, #1
 800cc8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc8e:	e080      	b.n	800cd92 <UART_SetConfig+0x1ba>
 800cc90:	2302      	movs	r3, #2
 800cc92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc96:	e07c      	b.n	800cd92 <UART_SetConfig+0x1ba>
 800cc98:	2304      	movs	r3, #4
 800cc9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc9e:	e078      	b.n	800cd92 <UART_SetConfig+0x1ba>
 800cca0:	2308      	movs	r3, #8
 800cca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cca6:	e074      	b.n	800cd92 <UART_SetConfig+0x1ba>
 800cca8:	2310      	movs	r3, #16
 800ccaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ccae:	e070      	b.n	800cd92 <UART_SetConfig+0x1ba>
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a8c      	ldr	r2, [pc, #560]	; (800cee8 <UART_SetConfig+0x310>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d138      	bne.n	800cd2c <UART_SetConfig+0x154>
 800ccba:	4b8a      	ldr	r3, [pc, #552]	; (800cee4 <UART_SetConfig+0x30c>)
 800ccbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccc0:	f003 030c 	and.w	r3, r3, #12
 800ccc4:	2b0c      	cmp	r3, #12
 800ccc6:	d82d      	bhi.n	800cd24 <UART_SetConfig+0x14c>
 800ccc8:	a201      	add	r2, pc, #4	; (adr r2, 800ccd0 <UART_SetConfig+0xf8>)
 800ccca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccce:	bf00      	nop
 800ccd0:	0800cd05 	.word	0x0800cd05
 800ccd4:	0800cd25 	.word	0x0800cd25
 800ccd8:	0800cd25 	.word	0x0800cd25
 800ccdc:	0800cd25 	.word	0x0800cd25
 800cce0:	0800cd15 	.word	0x0800cd15
 800cce4:	0800cd25 	.word	0x0800cd25
 800cce8:	0800cd25 	.word	0x0800cd25
 800ccec:	0800cd25 	.word	0x0800cd25
 800ccf0:	0800cd0d 	.word	0x0800cd0d
 800ccf4:	0800cd25 	.word	0x0800cd25
 800ccf8:	0800cd25 	.word	0x0800cd25
 800ccfc:	0800cd25 	.word	0x0800cd25
 800cd00:	0800cd1d 	.word	0x0800cd1d
 800cd04:	2300      	movs	r3, #0
 800cd06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd0a:	e042      	b.n	800cd92 <UART_SetConfig+0x1ba>
 800cd0c:	2302      	movs	r3, #2
 800cd0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd12:	e03e      	b.n	800cd92 <UART_SetConfig+0x1ba>
 800cd14:	2304      	movs	r3, #4
 800cd16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd1a:	e03a      	b.n	800cd92 <UART_SetConfig+0x1ba>
 800cd1c:	2308      	movs	r3, #8
 800cd1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd22:	e036      	b.n	800cd92 <UART_SetConfig+0x1ba>
 800cd24:	2310      	movs	r3, #16
 800cd26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd2a:	e032      	b.n	800cd92 <UART_SetConfig+0x1ba>
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a6a      	ldr	r2, [pc, #424]	; (800cedc <UART_SetConfig+0x304>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d12a      	bne.n	800cd8c <UART_SetConfig+0x1b4>
 800cd36:	4b6b      	ldr	r3, [pc, #428]	; (800cee4 <UART_SetConfig+0x30c>)
 800cd38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cd40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cd44:	d01a      	beq.n	800cd7c <UART_SetConfig+0x1a4>
 800cd46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cd4a:	d81b      	bhi.n	800cd84 <UART_SetConfig+0x1ac>
 800cd4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd50:	d00c      	beq.n	800cd6c <UART_SetConfig+0x194>
 800cd52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd56:	d815      	bhi.n	800cd84 <UART_SetConfig+0x1ac>
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d003      	beq.n	800cd64 <UART_SetConfig+0x18c>
 800cd5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd60:	d008      	beq.n	800cd74 <UART_SetConfig+0x19c>
 800cd62:	e00f      	b.n	800cd84 <UART_SetConfig+0x1ac>
 800cd64:	2300      	movs	r3, #0
 800cd66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd6a:	e012      	b.n	800cd92 <UART_SetConfig+0x1ba>
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd72:	e00e      	b.n	800cd92 <UART_SetConfig+0x1ba>
 800cd74:	2304      	movs	r3, #4
 800cd76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd7a:	e00a      	b.n	800cd92 <UART_SetConfig+0x1ba>
 800cd7c:	2308      	movs	r3, #8
 800cd7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd82:	e006      	b.n	800cd92 <UART_SetConfig+0x1ba>
 800cd84:	2310      	movs	r3, #16
 800cd86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd8a:	e002      	b.n	800cd92 <UART_SetConfig+0x1ba>
 800cd8c:	2310      	movs	r3, #16
 800cd8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	4a51      	ldr	r2, [pc, #324]	; (800cedc <UART_SetConfig+0x304>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d17a      	bne.n	800ce92 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cd9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cda0:	2b08      	cmp	r3, #8
 800cda2:	d824      	bhi.n	800cdee <UART_SetConfig+0x216>
 800cda4:	a201      	add	r2, pc, #4	; (adr r2, 800cdac <UART_SetConfig+0x1d4>)
 800cda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdaa:	bf00      	nop
 800cdac:	0800cdd1 	.word	0x0800cdd1
 800cdb0:	0800cdef 	.word	0x0800cdef
 800cdb4:	0800cdd9 	.word	0x0800cdd9
 800cdb8:	0800cdef 	.word	0x0800cdef
 800cdbc:	0800cddf 	.word	0x0800cddf
 800cdc0:	0800cdef 	.word	0x0800cdef
 800cdc4:	0800cdef 	.word	0x0800cdef
 800cdc8:	0800cdef 	.word	0x0800cdef
 800cdcc:	0800cde7 	.word	0x0800cde7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cdd0:	f7fd fce4 	bl	800a79c <HAL_RCC_GetPCLK1Freq>
 800cdd4:	61f8      	str	r0, [r7, #28]
        break;
 800cdd6:	e010      	b.n	800cdfa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cdd8:	4b44      	ldr	r3, [pc, #272]	; (800ceec <UART_SetConfig+0x314>)
 800cdda:	61fb      	str	r3, [r7, #28]
        break;
 800cddc:	e00d      	b.n	800cdfa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cdde:	f7fd fc45 	bl	800a66c <HAL_RCC_GetSysClockFreq>
 800cde2:	61f8      	str	r0, [r7, #28]
        break;
 800cde4:	e009      	b.n	800cdfa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cde6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdea:	61fb      	str	r3, [r7, #28]
        break;
 800cdec:	e005      	b.n	800cdfa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cdf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cdfa:	69fb      	ldr	r3, [r7, #28]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	f000 8107 	beq.w	800d010 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	685a      	ldr	r2, [r3, #4]
 800ce06:	4613      	mov	r3, r2
 800ce08:	005b      	lsls	r3, r3, #1
 800ce0a:	4413      	add	r3, r2
 800ce0c:	69fa      	ldr	r2, [r7, #28]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d305      	bcc.n	800ce1e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ce18:	69fa      	ldr	r2, [r7, #28]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d903      	bls.n	800ce26 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ce24:	e0f4      	b.n	800d010 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ce26:	69fb      	ldr	r3, [r7, #28]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	461c      	mov	r4, r3
 800ce2c:	4615      	mov	r5, r2
 800ce2e:	f04f 0200 	mov.w	r2, #0
 800ce32:	f04f 0300 	mov.w	r3, #0
 800ce36:	022b      	lsls	r3, r5, #8
 800ce38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800ce3c:	0222      	lsls	r2, r4, #8
 800ce3e:	68f9      	ldr	r1, [r7, #12]
 800ce40:	6849      	ldr	r1, [r1, #4]
 800ce42:	0849      	lsrs	r1, r1, #1
 800ce44:	2000      	movs	r0, #0
 800ce46:	4688      	mov	r8, r1
 800ce48:	4681      	mov	r9, r0
 800ce4a:	eb12 0a08 	adds.w	sl, r2, r8
 800ce4e:	eb43 0b09 	adc.w	fp, r3, r9
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	603b      	str	r3, [r7, #0]
 800ce5a:	607a      	str	r2, [r7, #4]
 800ce5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce60:	4650      	mov	r0, sl
 800ce62:	4659      	mov	r1, fp
 800ce64:	f7f3 ff10 	bl	8000c88 <__aeabi_uldivmod>
 800ce68:	4602      	mov	r2, r0
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ce76:	d308      	bcc.n	800ce8a <UART_SetConfig+0x2b2>
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce7e:	d204      	bcs.n	800ce8a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	69ba      	ldr	r2, [r7, #24]
 800ce86:	60da      	str	r2, [r3, #12]
 800ce88:	e0c2      	b.n	800d010 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ce90:	e0be      	b.n	800d010 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	69db      	ldr	r3, [r3, #28]
 800ce96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce9a:	d16a      	bne.n	800cf72 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800ce9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cea0:	2b08      	cmp	r3, #8
 800cea2:	d834      	bhi.n	800cf0e <UART_SetConfig+0x336>
 800cea4:	a201      	add	r2, pc, #4	; (adr r2, 800ceac <UART_SetConfig+0x2d4>)
 800cea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceaa:	bf00      	nop
 800ceac:	0800ced1 	.word	0x0800ced1
 800ceb0:	0800cef1 	.word	0x0800cef1
 800ceb4:	0800cef9 	.word	0x0800cef9
 800ceb8:	0800cf0f 	.word	0x0800cf0f
 800cebc:	0800ceff 	.word	0x0800ceff
 800cec0:	0800cf0f 	.word	0x0800cf0f
 800cec4:	0800cf0f 	.word	0x0800cf0f
 800cec8:	0800cf0f 	.word	0x0800cf0f
 800cecc:	0800cf07 	.word	0x0800cf07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ced0:	f7fd fc64 	bl	800a79c <HAL_RCC_GetPCLK1Freq>
 800ced4:	61f8      	str	r0, [r7, #28]
        break;
 800ced6:	e020      	b.n	800cf1a <UART_SetConfig+0x342>
 800ced8:	efff69f3 	.word	0xefff69f3
 800cedc:	40008000 	.word	0x40008000
 800cee0:	40013800 	.word	0x40013800
 800cee4:	40021000 	.word	0x40021000
 800cee8:	40004400 	.word	0x40004400
 800ceec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cef0:	f7fd fc6a 	bl	800a7c8 <HAL_RCC_GetPCLK2Freq>
 800cef4:	61f8      	str	r0, [r7, #28]
        break;
 800cef6:	e010      	b.n	800cf1a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cef8:	4b4c      	ldr	r3, [pc, #304]	; (800d02c <UART_SetConfig+0x454>)
 800cefa:	61fb      	str	r3, [r7, #28]
        break;
 800cefc:	e00d      	b.n	800cf1a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cefe:	f7fd fbb5 	bl	800a66c <HAL_RCC_GetSysClockFreq>
 800cf02:	61f8      	str	r0, [r7, #28]
        break;
 800cf04:	e009      	b.n	800cf1a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf0a:	61fb      	str	r3, [r7, #28]
        break;
 800cf0c:	e005      	b.n	800cf1a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cf12:	2301      	movs	r3, #1
 800cf14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cf18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d077      	beq.n	800d010 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cf20:	69fb      	ldr	r3, [r7, #28]
 800cf22:	005a      	lsls	r2, r3, #1
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	085b      	lsrs	r3, r3, #1
 800cf2a:	441a      	add	r2, r3
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	685b      	ldr	r3, [r3, #4]
 800cf30:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf34:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	2b0f      	cmp	r3, #15
 800cf3a:	d916      	bls.n	800cf6a <UART_SetConfig+0x392>
 800cf3c:	69bb      	ldr	r3, [r7, #24]
 800cf3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf42:	d212      	bcs.n	800cf6a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cf44:	69bb      	ldr	r3, [r7, #24]
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	f023 030f 	bic.w	r3, r3, #15
 800cf4c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	085b      	lsrs	r3, r3, #1
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	f003 0307 	and.w	r3, r3, #7
 800cf58:	b29a      	uxth	r2, r3
 800cf5a:	8afb      	ldrh	r3, [r7, #22]
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	8afa      	ldrh	r2, [r7, #22]
 800cf66:	60da      	str	r2, [r3, #12]
 800cf68:	e052      	b.n	800d010 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cf70:	e04e      	b.n	800d010 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cf72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf76:	2b08      	cmp	r3, #8
 800cf78:	d827      	bhi.n	800cfca <UART_SetConfig+0x3f2>
 800cf7a:	a201      	add	r2, pc, #4	; (adr r2, 800cf80 <UART_SetConfig+0x3a8>)
 800cf7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf80:	0800cfa5 	.word	0x0800cfa5
 800cf84:	0800cfad 	.word	0x0800cfad
 800cf88:	0800cfb5 	.word	0x0800cfb5
 800cf8c:	0800cfcb 	.word	0x0800cfcb
 800cf90:	0800cfbb 	.word	0x0800cfbb
 800cf94:	0800cfcb 	.word	0x0800cfcb
 800cf98:	0800cfcb 	.word	0x0800cfcb
 800cf9c:	0800cfcb 	.word	0x0800cfcb
 800cfa0:	0800cfc3 	.word	0x0800cfc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cfa4:	f7fd fbfa 	bl	800a79c <HAL_RCC_GetPCLK1Freq>
 800cfa8:	61f8      	str	r0, [r7, #28]
        break;
 800cfaa:	e014      	b.n	800cfd6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cfac:	f7fd fc0c 	bl	800a7c8 <HAL_RCC_GetPCLK2Freq>
 800cfb0:	61f8      	str	r0, [r7, #28]
        break;
 800cfb2:	e010      	b.n	800cfd6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cfb4:	4b1d      	ldr	r3, [pc, #116]	; (800d02c <UART_SetConfig+0x454>)
 800cfb6:	61fb      	str	r3, [r7, #28]
        break;
 800cfb8:	e00d      	b.n	800cfd6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cfba:	f7fd fb57 	bl	800a66c <HAL_RCC_GetSysClockFreq>
 800cfbe:	61f8      	str	r0, [r7, #28]
        break;
 800cfc0:	e009      	b.n	800cfd6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfc6:	61fb      	str	r3, [r7, #28]
        break;
 800cfc8:	e005      	b.n	800cfd6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cfd4:	bf00      	nop
    }

    if (pclk != 0U)
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d019      	beq.n	800d010 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	085a      	lsrs	r2, r3, #1
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	441a      	add	r2, r3
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cff0:	69bb      	ldr	r3, [r7, #24]
 800cff2:	2b0f      	cmp	r3, #15
 800cff4:	d909      	bls.n	800d00a <UART_SetConfig+0x432>
 800cff6:	69bb      	ldr	r3, [r7, #24]
 800cff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cffc:	d205      	bcs.n	800d00a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cffe:	69bb      	ldr	r3, [r7, #24]
 800d000:	b29a      	uxth	r2, r3
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	60da      	str	r2, [r3, #12]
 800d008:	e002      	b.n	800d010 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800d00a:	2301      	movs	r3, #1
 800d00c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2200      	movs	r2, #0
 800d014:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2200      	movs	r2, #0
 800d01a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800d01c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800d020:	4618      	mov	r0, r3
 800d022:	3728      	adds	r7, #40	; 0x28
 800d024:	46bd      	mov	sp, r7
 800d026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d02a:	bf00      	nop
 800d02c:	00f42400 	.word	0x00f42400

0800d030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03c:	f003 0308 	and.w	r3, r3, #8
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00a      	beq.n	800d05a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	430a      	orrs	r2, r1
 800d058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d05e:	f003 0301 	and.w	r3, r3, #1
 800d062:	2b00      	cmp	r3, #0
 800d064:	d00a      	beq.n	800d07c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	430a      	orrs	r2, r1
 800d07a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d080:	f003 0302 	and.w	r3, r3, #2
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00a      	beq.n	800d09e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	430a      	orrs	r2, r1
 800d09c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a2:	f003 0304 	and.w	r3, r3, #4
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d00a      	beq.n	800d0c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	430a      	orrs	r2, r1
 800d0be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c4:	f003 0310 	and.w	r3, r3, #16
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d00a      	beq.n	800d0e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	430a      	orrs	r2, r1
 800d0e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e6:	f003 0320 	and.w	r3, r3, #32
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d00a      	beq.n	800d104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	430a      	orrs	r2, r1
 800d102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d01a      	beq.n	800d146 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	430a      	orrs	r2, r1
 800d124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d12a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d12e:	d10a      	bne.n	800d146 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	685b      	ldr	r3, [r3, #4]
 800d136:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	430a      	orrs	r2, r1
 800d144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d14a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d00a      	beq.n	800d168 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	685b      	ldr	r3, [r3, #4]
 800d158:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	430a      	orrs	r2, r1
 800d166:	605a      	str	r2, [r3, #4]
  }
}
 800d168:	bf00      	nop
 800d16a:	370c      	adds	r7, #12
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b098      	sub	sp, #96	; 0x60
 800d178:	af02      	add	r7, sp, #8
 800d17a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2200      	movs	r2, #0
 800d180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d184:	f7f8 faa2 	bl	80056cc <HAL_GetTick>
 800d188:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f003 0308 	and.w	r3, r3, #8
 800d194:	2b08      	cmp	r3, #8
 800d196:	d12e      	bne.n	800d1f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 f88c 	bl	800d2c4 <UART_WaitOnFlagUntilTimeout>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d021      	beq.n	800d1f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ba:	e853 3f00 	ldrex	r3, [r3]
 800d1be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1c6:	653b      	str	r3, [r7, #80]	; 0x50
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1d0:	647b      	str	r3, [r7, #68]	; 0x44
 800d1d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d1d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1d8:	e841 2300 	strex	r3, r2, [r1]
 800d1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d1de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d1e6      	bne.n	800d1b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2220      	movs	r2, #32
 800d1e8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d1f2:	2303      	movs	r3, #3
 800d1f4:	e062      	b.n	800d2bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f003 0304 	and.w	r3, r3, #4
 800d200:	2b04      	cmp	r3, #4
 800d202:	d149      	bne.n	800d298 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d204:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d208:	9300      	str	r3, [sp, #0]
 800d20a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d20c:	2200      	movs	r2, #0
 800d20e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 f856 	bl	800d2c4 <UART_WaitOnFlagUntilTimeout>
 800d218:	4603      	mov	r3, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d03c      	beq.n	800d298 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d226:	e853 3f00 	ldrex	r3, [r3]
 800d22a:	623b      	str	r3, [r7, #32]
   return(result);
 800d22c:	6a3b      	ldr	r3, [r7, #32]
 800d22e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d232:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	461a      	mov	r2, r3
 800d23a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d23c:	633b      	str	r3, [r7, #48]	; 0x30
 800d23e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d240:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d244:	e841 2300 	strex	r3, r2, [r1]
 800d248:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d1e6      	bne.n	800d21e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	3308      	adds	r3, #8
 800d256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	e853 3f00 	ldrex	r3, [r3]
 800d25e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f023 0301 	bic.w	r3, r3, #1
 800d266:	64bb      	str	r3, [r7, #72]	; 0x48
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	3308      	adds	r3, #8
 800d26e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d270:	61fa      	str	r2, [r7, #28]
 800d272:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d274:	69b9      	ldr	r1, [r7, #24]
 800d276:	69fa      	ldr	r2, [r7, #28]
 800d278:	e841 2300 	strex	r3, r2, [r1]
 800d27c:	617b      	str	r3, [r7, #20]
   return(result);
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d1e5      	bne.n	800d250 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2220      	movs	r2, #32
 800d288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2200      	movs	r2, #0
 800d290:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d294:	2303      	movs	r3, #3
 800d296:	e011      	b.n	800d2bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2220      	movs	r2, #32
 800d29c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2220      	movs	r2, #32
 800d2a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800d2ba:	2300      	movs	r3, #0
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3758      	adds	r7, #88	; 0x58
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	603b      	str	r3, [r7, #0]
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d2d4:	e049      	b.n	800d36a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d2d6:	69bb      	ldr	r3, [r7, #24]
 800d2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2dc:	d045      	beq.n	800d36a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2de:	f7f8 f9f5 	bl	80056cc <HAL_GetTick>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	1ad3      	subs	r3, r2, r3
 800d2e8:	69ba      	ldr	r2, [r7, #24]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d302      	bcc.n	800d2f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d101      	bne.n	800d2f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d2f4:	2303      	movs	r3, #3
 800d2f6:	e048      	b.n	800d38a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f003 0304 	and.w	r3, r3, #4
 800d302:	2b00      	cmp	r3, #0
 800d304:	d031      	beq.n	800d36a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	69db      	ldr	r3, [r3, #28]
 800d30c:	f003 0308 	and.w	r3, r3, #8
 800d310:	2b08      	cmp	r3, #8
 800d312:	d110      	bne.n	800d336 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2208      	movs	r2, #8
 800d31a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d31c:	68f8      	ldr	r0, [r7, #12]
 800d31e:	f000 f8ff 	bl	800d520 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2208      	movs	r2, #8
 800d326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2200      	movs	r2, #0
 800d32e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800d332:	2301      	movs	r3, #1
 800d334:	e029      	b.n	800d38a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	69db      	ldr	r3, [r3, #28]
 800d33c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d344:	d111      	bne.n	800d36a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d34e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d350:	68f8      	ldr	r0, [r7, #12]
 800d352:	f000 f8e5 	bl	800d520 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2220      	movs	r2, #32
 800d35a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2200      	movs	r2, #0
 800d362:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800d366:	2303      	movs	r3, #3
 800d368:	e00f      	b.n	800d38a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	69da      	ldr	r2, [r3, #28]
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	4013      	ands	r3, r2
 800d374:	68ba      	ldr	r2, [r7, #8]
 800d376:	429a      	cmp	r2, r3
 800d378:	bf0c      	ite	eq
 800d37a:	2301      	moveq	r3, #1
 800d37c:	2300      	movne	r3, #0
 800d37e:	b2db      	uxtb	r3, r3
 800d380:	461a      	mov	r2, r3
 800d382:	79fb      	ldrb	r3, [r7, #7]
 800d384:	429a      	cmp	r2, r3
 800d386:	d0a6      	beq.n	800d2d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d388:	2300      	movs	r3, #0
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3710      	adds	r7, #16
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
	...

0800d394 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b096      	sub	sp, #88	; 0x58
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	60b9      	str	r1, [r7, #8]
 800d39e:	4613      	mov	r3, r2
 800d3a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	68ba      	ldr	r2, [r7, #8]
 800d3a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	88fa      	ldrh	r2, [r7, #6]
 800d3ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2222      	movs	r2, #34	; 0x22
 800d3bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d028      	beq.n	800d41a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3cc:	4a3e      	ldr	r2, [pc, #248]	; (800d4c8 <UART_Start_Receive_DMA+0x134>)
 800d3ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3d4:	4a3d      	ldr	r2, [pc, #244]	; (800d4cc <UART_Start_Receive_DMA+0x138>)
 800d3d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3dc:	4a3c      	ldr	r2, [pc, #240]	; (800d4d0 <UART_Start_Receive_DMA+0x13c>)
 800d3de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	3324      	adds	r3, #36	; 0x24
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	88fb      	ldrh	r3, [r7, #6]
 800d3fc:	f7f9 fe00 	bl	8007000 <HAL_DMA_Start_IT>
 800d400:	4603      	mov	r3, r0
 800d402:	2b00      	cmp	r3, #0
 800d404:	d009      	beq.n	800d41a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2210      	movs	r2, #16
 800d40a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2220      	movs	r2, #32
 800d412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800d416:	2301      	movs	r3, #1
 800d418:	e051      	b.n	800d4be <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	691b      	ldr	r3, [r3, #16]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d018      	beq.n	800d454 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d42a:	e853 3f00 	ldrex	r3, [r3]
 800d42e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d436:	657b      	str	r3, [r7, #84]	; 0x54
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	461a      	mov	r2, r3
 800d43e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d440:	64bb      	str	r3, [r7, #72]	; 0x48
 800d442:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d444:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d448:	e841 2300 	strex	r3, r2, [r1]
 800d44c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d44e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1e6      	bne.n	800d422 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	3308      	adds	r3, #8
 800d45a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45e:	e853 3f00 	ldrex	r3, [r3]
 800d462:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d466:	f043 0301 	orr.w	r3, r3, #1
 800d46a:	653b      	str	r3, [r7, #80]	; 0x50
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	3308      	adds	r3, #8
 800d472:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d474:	637a      	str	r2, [r7, #52]	; 0x34
 800d476:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d478:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d47a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d47c:	e841 2300 	strex	r3, r2, [r1]
 800d480:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d484:	2b00      	cmp	r3, #0
 800d486:	d1e5      	bne.n	800d454 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	3308      	adds	r3, #8
 800d48e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	e853 3f00 	ldrex	r3, [r3]
 800d496:	613b      	str	r3, [r7, #16]
   return(result);
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d49e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	3308      	adds	r3, #8
 800d4a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d4a8:	623a      	str	r2, [r7, #32]
 800d4aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ac:	69f9      	ldr	r1, [r7, #28]
 800d4ae:	6a3a      	ldr	r2, [r7, #32]
 800d4b0:	e841 2300 	strex	r3, r2, [r1]
 800d4b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d1e5      	bne.n	800d488 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800d4bc:	2300      	movs	r3, #0
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3758      	adds	r7, #88	; 0x58
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	0800d5e9 	.word	0x0800d5e9
 800d4cc:	0800d715 	.word	0x0800d715
 800d4d0:	0800d753 	.word	0x0800d753

0800d4d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b089      	sub	sp, #36	; 0x24
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	e853 3f00 	ldrex	r3, [r3]
 800d4e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d4f0:	61fb      	str	r3, [r7, #28]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	61bb      	str	r3, [r7, #24]
 800d4fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4fe:	6979      	ldr	r1, [r7, #20]
 800d500:	69ba      	ldr	r2, [r7, #24]
 800d502:	e841 2300 	strex	r3, r2, [r1]
 800d506:	613b      	str	r3, [r7, #16]
   return(result);
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d1e6      	bne.n	800d4dc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2220      	movs	r2, #32
 800d512:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800d514:	bf00      	nop
 800d516:	3724      	adds	r7, #36	; 0x24
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr

0800d520 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d520:	b480      	push	{r7}
 800d522:	b095      	sub	sp, #84	; 0x54
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d530:	e853 3f00 	ldrex	r3, [r3]
 800d534:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d538:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d53c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	461a      	mov	r2, r3
 800d544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d546:	643b      	str	r3, [r7, #64]	; 0x40
 800d548:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d54a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d54c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d54e:	e841 2300 	strex	r3, r2, [r1]
 800d552:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1e6      	bne.n	800d528 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	3308      	adds	r3, #8
 800d560:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d562:	6a3b      	ldr	r3, [r7, #32]
 800d564:	e853 3f00 	ldrex	r3, [r3]
 800d568:	61fb      	str	r3, [r7, #28]
   return(result);
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	f023 0301 	bic.w	r3, r3, #1
 800d570:	64bb      	str	r3, [r7, #72]	; 0x48
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	3308      	adds	r3, #8
 800d578:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d57a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d57c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d57e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d582:	e841 2300 	strex	r3, r2, [r1]
 800d586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d1e5      	bne.n	800d55a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d592:	2b01      	cmp	r3, #1
 800d594:	d118      	bne.n	800d5c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	e853 3f00 	ldrex	r3, [r3]
 800d5a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	f023 0310 	bic.w	r3, r3, #16
 800d5aa:	647b      	str	r3, [r7, #68]	; 0x44
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5b4:	61bb      	str	r3, [r7, #24]
 800d5b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b8:	6979      	ldr	r1, [r7, #20]
 800d5ba:	69ba      	ldr	r2, [r7, #24]
 800d5bc:	e841 2300 	strex	r3, r2, [r1]
 800d5c0:	613b      	str	r3, [r7, #16]
   return(result);
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d1e6      	bne.n	800d596 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2220      	movs	r2, #32
 800d5cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	669a      	str	r2, [r3, #104]	; 0x68
}
 800d5dc:	bf00      	nop
 800d5de:	3754      	adds	r7, #84	; 0x54
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b09c      	sub	sp, #112	; 0x70
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5f4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f003 0320 	and.w	r3, r3, #32
 800d600:	2b00      	cmp	r3, #0
 800d602:	d171      	bne.n	800d6e8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d606:	2200      	movs	r2, #0
 800d608:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d60c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d614:	e853 3f00 	ldrex	r3, [r3]
 800d618:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d61a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d61c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d620:	66bb      	str	r3, [r7, #104]	; 0x68
 800d622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	461a      	mov	r2, r3
 800d628:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d62a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d62c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d62e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d630:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d632:	e841 2300 	strex	r3, r2, [r1]
 800d636:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d1e6      	bne.n	800d60c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d63e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	3308      	adds	r3, #8
 800d644:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d648:	e853 3f00 	ldrex	r3, [r3]
 800d64c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d650:	f023 0301 	bic.w	r3, r3, #1
 800d654:	667b      	str	r3, [r7, #100]	; 0x64
 800d656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	3308      	adds	r3, #8
 800d65c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d65e:	647a      	str	r2, [r7, #68]	; 0x44
 800d660:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d662:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d664:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d666:	e841 2300 	strex	r3, r2, [r1]
 800d66a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d66c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d1e5      	bne.n	800d63e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	3308      	adds	r3, #8
 800d678:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67c:	e853 3f00 	ldrex	r3, [r3]
 800d680:	623b      	str	r3, [r7, #32]
   return(result);
 800d682:	6a3b      	ldr	r3, [r7, #32]
 800d684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d688:	663b      	str	r3, [r7, #96]	; 0x60
 800d68a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	3308      	adds	r3, #8
 800d690:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d692:	633a      	str	r2, [r7, #48]	; 0x30
 800d694:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d696:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d69a:	e841 2300 	strex	r3, r2, [r1]
 800d69e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d1e5      	bne.n	800d672 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d6a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6a8:	2220      	movs	r2, #32
 800d6aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d118      	bne.n	800d6e8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	e853 3f00 	ldrex	r3, [r3]
 800d6c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f023 0310 	bic.w	r3, r3, #16
 800d6ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d6cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6d4:	61fb      	str	r3, [r7, #28]
 800d6d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d8:	69b9      	ldr	r1, [r7, #24]
 800d6da:	69fa      	ldr	r2, [r7, #28]
 800d6dc:	e841 2300 	strex	r3, r2, [r1]
 800d6e0:	617b      	str	r3, [r7, #20]
   return(result);
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d1e6      	bne.n	800d6b6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d6e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d107      	bne.n	800d706 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d6fc:	4619      	mov	r1, r3
 800d6fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d700:	f7ff fa5e 	bl	800cbc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d704:	e002      	b.n	800d70c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800d706:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d708:	f7f7 fedc 	bl	80054c4 <HAL_UART_RxCpltCallback>
}
 800d70c:	bf00      	nop
 800d70e:	3770      	adds	r7, #112	; 0x70
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d720:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2201      	movs	r2, #1
 800d726:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d109      	bne.n	800d744 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d736:	085b      	lsrs	r3, r3, #1
 800d738:	b29b      	uxth	r3, r3
 800d73a:	4619      	mov	r1, r3
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	f7ff fa3f 	bl	800cbc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d742:	e002      	b.n	800d74a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d744:	68f8      	ldr	r0, [r7, #12]
 800d746:	f7ff fa27 	bl	800cb98 <HAL_UART_RxHalfCpltCallback>
}
 800d74a:	bf00      	nop
 800d74c:	3710      	adds	r7, #16
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}

0800d752 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d752:	b580      	push	{r7, lr}
 800d754:	b086      	sub	sp, #24
 800d756:	af00      	add	r7, sp, #0
 800d758:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d75e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d764:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d76c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d778:	2b80      	cmp	r3, #128	; 0x80
 800d77a:	d109      	bne.n	800d790 <UART_DMAError+0x3e>
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	2b21      	cmp	r3, #33	; 0x21
 800d780:	d106      	bne.n	800d790 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	2200      	movs	r2, #0
 800d786:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800d78a:	6978      	ldr	r0, [r7, #20]
 800d78c:	f7ff fea2 	bl	800d4d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d79a:	2b40      	cmp	r3, #64	; 0x40
 800d79c:	d109      	bne.n	800d7b2 <UART_DMAError+0x60>
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2b22      	cmp	r3, #34	; 0x22
 800d7a2:	d106      	bne.n	800d7b2 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800d7ac:	6978      	ldr	r0, [r7, #20]
 800d7ae:	f7ff feb7 	bl	800d520 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7b8:	f043 0210 	orr.w	r2, r3, #16
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d7c2:	6978      	ldr	r0, [r7, #20]
 800d7c4:	f7ff f9f2 	bl	800cbac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7c8:	bf00      	nop
 800d7ca:	3718      	adds	r7, #24
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f7ff f9dc 	bl	800cbac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7f4:	bf00      	nop
 800d7f6:	3710      	adds	r7, #16
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b088      	sub	sp, #32
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	e853 3f00 	ldrex	r3, [r3]
 800d810:	60bb      	str	r3, [r7, #8]
   return(result);
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d818:	61fb      	str	r3, [r7, #28]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	461a      	mov	r2, r3
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	61bb      	str	r3, [r7, #24]
 800d824:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d826:	6979      	ldr	r1, [r7, #20]
 800d828:	69ba      	ldr	r2, [r7, #24]
 800d82a:	e841 2300 	strex	r3, r2, [r1]
 800d82e:	613b      	str	r3, [r7, #16]
   return(result);
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d1e6      	bne.n	800d804 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2220      	movs	r2, #32
 800d83a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2200      	movs	r2, #0
 800d840:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f7ff f99e 	bl	800cb84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d848:	bf00      	nop
 800d84a:	3720      	adds	r7, #32
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d850:	b480      	push	{r7}
 800d852:	b083      	sub	sp, #12
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d858:	bf00      	nop
 800d85a:	370c      	adds	r7, #12
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr

0800d864 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d864:	b084      	sub	sp, #16
 800d866:	b480      	push	{r7}
 800d868:	b083      	sub	sp, #12
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
 800d86e:	f107 0014 	add.w	r0, r7, #20
 800d872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800d876:	2300      	movs	r3, #0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	370c      	adds	r7, #12
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	b004      	add	sp, #16
 800d884:	4770      	bx	lr

0800d886 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800d886:	b480      	push	{r7}
 800d888:	b085      	sub	sp, #20
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2200      	movs	r2, #0
 800d892:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d896:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d89a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	b29a      	uxth	r2, r3
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d8a6:	2300      	movs	r3, #0
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3714      	adds	r7, #20
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b085      	sub	sp, #20
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d8bc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d8c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d8c8:	b29a      	uxth	r2, r3
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	43db      	mvns	r3, r3
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	4013      	ands	r3, r2
 800d8d4:	b29a      	uxth	r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d8dc:	2300      	movs	r3, #0
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3714      	adds	r7, #20
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr

0800d8ea <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800d8ea:	b480      	push	{r7}
 800d8ec:	b083      	sub	sp, #12
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6078      	str	r0, [r7, #4]
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800d8f6:	2300      	movs	r3, #0
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	370c      	adds	r7, #12
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d904:	b084      	sub	sp, #16
 800d906:	b480      	push	{r7}
 800d908:	b083      	sub	sp, #12
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
 800d90e:	f107 0014 	add.w	r0, r7, #20
 800d912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2201      	movs	r2, #1
 800d91a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2200      	movs	r2, #0
 800d922:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2200      	movs	r2, #0
 800d92a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2200      	movs	r2, #0
 800d932:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d936:	2300      	movs	r3, #0
}
 800d938:	4618      	mov	r0, r3
 800d93a:	370c      	adds	r7, #12
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	b004      	add	sp, #16
 800d944:	4770      	bx	lr
	...

0800d948 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d948:	b480      	push	{r7}
 800d94a:	b09d      	sub	sp, #116	; 0x74
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d952:	2300      	movs	r3, #0
 800d954:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	4413      	add	r3, r2
 800d962:	881b      	ldrh	r3, [r3, #0]
 800d964:	b29b      	uxth	r3, r3
 800d966:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800d96a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d96e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	78db      	ldrb	r3, [r3, #3]
 800d976:	2b03      	cmp	r3, #3
 800d978:	d81f      	bhi.n	800d9ba <USB_ActivateEndpoint+0x72>
 800d97a:	a201      	add	r2, pc, #4	; (adr r2, 800d980 <USB_ActivateEndpoint+0x38>)
 800d97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d980:	0800d991 	.word	0x0800d991
 800d984:	0800d9ad 	.word	0x0800d9ad
 800d988:	0800d9c3 	.word	0x0800d9c3
 800d98c:	0800d99f 	.word	0x0800d99f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d990:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d994:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d998:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d99c:	e012      	b.n	800d9c4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d99e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d9a2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800d9a6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d9aa:	e00b      	b.n	800d9c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d9ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d9b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d9b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d9b8:	e004      	b.n	800d9c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800d9c0:	e000      	b.n	800d9c4 <USB_ActivateEndpoint+0x7c>
      break;
 800d9c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d9c4:	687a      	ldr	r2, [r7, #4]
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	009b      	lsls	r3, r3, #2
 800d9cc:	441a      	add	r2, r3
 800d9ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d9d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d9d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d9da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	781b      	ldrb	r3, [r3, #0]
 800d9ec:	009b      	lsls	r3, r3, #2
 800d9ee:	4413      	add	r3, r2
 800d9f0:	881b      	ldrh	r3, [r3, #0]
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	b21b      	sxth	r3, r3
 800d9f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d9fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9fe:	b21a      	sxth	r2, r3
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	b21b      	sxth	r3, r3
 800da06:	4313      	orrs	r3, r2
 800da08:	b21b      	sxth	r3, r3
 800da0a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	009b      	lsls	r3, r3, #2
 800da16:	441a      	add	r2, r3
 800da18:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800da1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	7b1b      	ldrb	r3, [r3, #12]
 800da34:	2b00      	cmp	r3, #0
 800da36:	f040 8178 	bne.w	800dd2a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	785b      	ldrb	r3, [r3, #1]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	f000 8084 	beq.w	800db4c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	61bb      	str	r3, [r7, #24]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da4e:	b29b      	uxth	r3, r3
 800da50:	461a      	mov	r2, r3
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	4413      	add	r3, r2
 800da56:	61bb      	str	r3, [r7, #24]
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	00da      	lsls	r2, r3, #3
 800da5e:	69bb      	ldr	r3, [r7, #24]
 800da60:	4413      	add	r3, r2
 800da62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da66:	617b      	str	r3, [r7, #20]
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	88db      	ldrh	r3, [r3, #6]
 800da6c:	085b      	lsrs	r3, r3, #1
 800da6e:	b29b      	uxth	r3, r3
 800da70:	005b      	lsls	r3, r3, #1
 800da72:	b29a      	uxth	r2, r3
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800da78:	687a      	ldr	r2, [r7, #4]
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	009b      	lsls	r3, r3, #2
 800da80:	4413      	add	r3, r2
 800da82:	881b      	ldrh	r3, [r3, #0]
 800da84:	827b      	strh	r3, [r7, #18]
 800da86:	8a7b      	ldrh	r3, [r7, #18]
 800da88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d01b      	beq.n	800dac8 <USB_ActivateEndpoint+0x180>
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	009b      	lsls	r3, r3, #2
 800da98:	4413      	add	r3, r2
 800da9a:	881b      	ldrh	r3, [r3, #0]
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800daa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daa6:	823b      	strh	r3, [r7, #16]
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	009b      	lsls	r3, r3, #2
 800dab0:	441a      	add	r2, r3
 800dab2:	8a3b      	ldrh	r3, [r7, #16]
 800dab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dabc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dac0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dac4:	b29b      	uxth	r3, r3
 800dac6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	78db      	ldrb	r3, [r3, #3]
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d020      	beq.n	800db12 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	4413      	add	r3, r2
 800dada:	881b      	ldrh	r3, [r3, #0]
 800dadc:	b29b      	uxth	r3, r3
 800dade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dae6:	81bb      	strh	r3, [r7, #12]
 800dae8:	89bb      	ldrh	r3, [r7, #12]
 800daea:	f083 0320 	eor.w	r3, r3, #32
 800daee:	81bb      	strh	r3, [r7, #12]
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	441a      	add	r2, r3
 800dafa:	89bb      	ldrh	r3, [r7, #12]
 800dafc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	8013      	strh	r3, [r2, #0]
 800db10:	e2d5      	b.n	800e0be <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	009b      	lsls	r3, r3, #2
 800db1a:	4413      	add	r3, r2
 800db1c:	881b      	ldrh	r3, [r3, #0]
 800db1e:	b29b      	uxth	r3, r3
 800db20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db28:	81fb      	strh	r3, [r7, #14]
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	441a      	add	r2, r3
 800db34:	89fb      	ldrh	r3, [r7, #14]
 800db36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db46:	b29b      	uxth	r3, r3
 800db48:	8013      	strh	r3, [r2, #0]
 800db4a:	e2b8      	b.n	800e0be <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	633b      	str	r3, [r7, #48]	; 0x30
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800db56:	b29b      	uxth	r3, r3
 800db58:	461a      	mov	r2, r3
 800db5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5c:	4413      	add	r3, r2
 800db5e:	633b      	str	r3, [r7, #48]	; 0x30
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	00da      	lsls	r2, r3, #3
 800db66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db68:	4413      	add	r3, r2
 800db6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800db6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	88db      	ldrh	r3, [r3, #6]
 800db74:	085b      	lsrs	r3, r3, #1
 800db76:	b29b      	uxth	r3, r3
 800db78:	005b      	lsls	r3, r3, #1
 800db7a:	b29a      	uxth	r2, r3
 800db7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	62bb      	str	r3, [r7, #40]	; 0x28
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	461a      	mov	r2, r3
 800db8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db90:	4413      	add	r3, r2
 800db92:	62bb      	str	r3, [r7, #40]	; 0x28
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	00da      	lsls	r2, r3, #3
 800db9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db9c:	4413      	add	r3, r2
 800db9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800dba2:	627b      	str	r3, [r7, #36]	; 0x24
 800dba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba6:	881b      	ldrh	r3, [r3, #0]
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dbae:	b29a      	uxth	r2, r3
 800dbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb2:	801a      	strh	r2, [r3, #0]
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	691b      	ldr	r3, [r3, #16]
 800dbb8:	2b3e      	cmp	r3, #62	; 0x3e
 800dbba:	d91d      	bls.n	800dbf8 <USB_ActivateEndpoint+0x2b0>
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	691b      	ldr	r3, [r3, #16]
 800dbc0:	095b      	lsrs	r3, r3, #5
 800dbc2:	66bb      	str	r3, [r7, #104]	; 0x68
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	691b      	ldr	r3, [r3, #16]
 800dbc8:	f003 031f 	and.w	r3, r3, #31
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d102      	bne.n	800dbd6 <USB_ActivateEndpoint+0x28e>
 800dbd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbd2:	3b01      	subs	r3, #1
 800dbd4:	66bb      	str	r3, [r7, #104]	; 0x68
 800dbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd8:	881b      	ldrh	r3, [r3, #0]
 800dbda:	b29a      	uxth	r2, r3
 800dbdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	029b      	lsls	r3, r3, #10
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dbec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dbf0:	b29a      	uxth	r2, r3
 800dbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf4:	801a      	strh	r2, [r3, #0]
 800dbf6:	e026      	b.n	800dc46 <USB_ActivateEndpoint+0x2fe>
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	691b      	ldr	r3, [r3, #16]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d10a      	bne.n	800dc16 <USB_ActivateEndpoint+0x2ce>
 800dc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc02:	881b      	ldrh	r3, [r3, #0]
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc12:	801a      	strh	r2, [r3, #0]
 800dc14:	e017      	b.n	800dc46 <USB_ActivateEndpoint+0x2fe>
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	691b      	ldr	r3, [r3, #16]
 800dc1a:	085b      	lsrs	r3, r3, #1
 800dc1c:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	691b      	ldr	r3, [r3, #16]
 800dc22:	f003 0301 	and.w	r3, r3, #1
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d002      	beq.n	800dc30 <USB_ActivateEndpoint+0x2e8>
 800dc2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc32:	881b      	ldrh	r3, [r3, #0]
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	029b      	lsls	r3, r3, #10
 800dc3c:	b29b      	uxth	r3, r3
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	b29a      	uxth	r2, r3
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dc46:	687a      	ldr	r2, [r7, #4]
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	009b      	lsls	r3, r3, #2
 800dc4e:	4413      	add	r3, r2
 800dc50:	881b      	ldrh	r3, [r3, #0]
 800dc52:	847b      	strh	r3, [r7, #34]	; 0x22
 800dc54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d01b      	beq.n	800dc96 <USB_ActivateEndpoint+0x34e>
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	009b      	lsls	r3, r3, #2
 800dc66:	4413      	add	r3, r2
 800dc68:	881b      	ldrh	r3, [r3, #0]
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc74:	843b      	strh	r3, [r7, #32]
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	441a      	add	r2, r3
 800dc80:	8c3b      	ldrh	r3, [r7, #32]
 800dc82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dc8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d124      	bne.n	800dce8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	009b      	lsls	r3, r3, #2
 800dca6:	4413      	add	r3, r2
 800dca8:	881b      	ldrh	r3, [r3, #0]
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dcb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcb4:	83bb      	strh	r3, [r7, #28]
 800dcb6:	8bbb      	ldrh	r3, [r7, #28]
 800dcb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800dcbc:	83bb      	strh	r3, [r7, #28]
 800dcbe:	8bbb      	ldrh	r3, [r7, #28]
 800dcc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800dcc4:	83bb      	strh	r3, [r7, #28]
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	441a      	add	r2, r3
 800dcd0:	8bbb      	ldrh	r3, [r7, #28]
 800dcd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dcd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dcda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dcde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	8013      	strh	r3, [r2, #0]
 800dce6:	e1ea      	b.n	800e0be <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800dce8:	687a      	ldr	r2, [r7, #4]
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	009b      	lsls	r3, r3, #2
 800dcf0:	4413      	add	r3, r2
 800dcf2:	881b      	ldrh	r3, [r3, #0]
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dcfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcfe:	83fb      	strh	r3, [r7, #30]
 800dd00:	8bfb      	ldrh	r3, [r7, #30]
 800dd02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800dd06:	83fb      	strh	r3, [r7, #30]
 800dd08:	687a      	ldr	r2, [r7, #4]
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	441a      	add	r2, r3
 800dd12:	8bfb      	ldrh	r3, [r7, #30]
 800dd14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	8013      	strh	r3, [r2, #0]
 800dd28:	e1c9      	b.n	800e0be <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	78db      	ldrb	r3, [r3, #3]
 800dd2e:	2b02      	cmp	r3, #2
 800dd30:	d11e      	bne.n	800dd70 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	009b      	lsls	r3, r3, #2
 800dd3a:	4413      	add	r3, r2
 800dd3c:	881b      	ldrh	r3, [r3, #0]
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd48:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	441a      	add	r2, r3
 800dd56:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800dd5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd62:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800dd66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	8013      	strh	r3, [r2, #0]
 800dd6e:	e01d      	b.n	800ddac <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	4413      	add	r3, r2
 800dd7a:	881b      	ldrh	r3, [r3, #0]
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800dd82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd86:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	009b      	lsls	r3, r3, #2
 800dd92:	441a      	add	r2, r3
 800dd94:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800dd98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dda0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dda4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	461a      	mov	r2, r3
 800ddba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddbc:	4413      	add	r3, r2
 800ddbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	00da      	lsls	r2, r3, #3
 800ddc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddc8:	4413      	add	r3, r2
 800ddca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ddce:	65bb      	str	r3, [r7, #88]	; 0x58
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	891b      	ldrh	r3, [r3, #8]
 800ddd4:	085b      	lsrs	r3, r3, #1
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	005b      	lsls	r3, r3, #1
 800ddda:	b29a      	uxth	r2, r3
 800dddc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddde:	801a      	strh	r2, [r3, #0]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	657b      	str	r3, [r7, #84]	; 0x54
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	461a      	mov	r2, r3
 800ddee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddf0:	4413      	add	r3, r2
 800ddf2:	657b      	str	r3, [r7, #84]	; 0x54
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	00da      	lsls	r2, r3, #3
 800ddfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddfc:	4413      	add	r3, r2
 800ddfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800de02:	653b      	str	r3, [r7, #80]	; 0x50
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	895b      	ldrh	r3, [r3, #10]
 800de08:	085b      	lsrs	r3, r3, #1
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	005b      	lsls	r3, r3, #1
 800de0e:	b29a      	uxth	r2, r3
 800de10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de12:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	785b      	ldrb	r3, [r3, #1]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	f040 8093 	bne.w	800df44 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800de1e:	687a      	ldr	r2, [r7, #4]
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	4413      	add	r3, r2
 800de28:	881b      	ldrh	r3, [r3, #0]
 800de2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800de2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800de32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de36:	2b00      	cmp	r3, #0
 800de38:	d01b      	beq.n	800de72 <USB_ActivateEndpoint+0x52a>
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	4413      	add	r3, r2
 800de44:	881b      	ldrh	r3, [r3, #0]
 800de46:	b29b      	uxth	r3, r3
 800de48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de50:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	009b      	lsls	r3, r3, #2
 800de5a:	441a      	add	r2, r3
 800de5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800de5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800de6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de6e:	b29b      	uxth	r3, r3
 800de70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	009b      	lsls	r3, r3, #2
 800de7a:	4413      	add	r3, r2
 800de7c:	881b      	ldrh	r3, [r3, #0]
 800de7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800de80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800de82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de86:	2b00      	cmp	r3, #0
 800de88:	d01b      	beq.n	800dec2 <USB_ActivateEndpoint+0x57a>
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	4413      	add	r3, r2
 800de94:	881b      	ldrh	r3, [r3, #0]
 800de96:	b29b      	uxth	r3, r3
 800de98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dea0:	877b      	strh	r3, [r7, #58]	; 0x3a
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	781b      	ldrb	r3, [r3, #0]
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	441a      	add	r2, r3
 800deac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800deae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800deb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800deb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800deba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800debe:	b29b      	uxth	r3, r3
 800dec0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	4413      	add	r3, r2
 800decc:	881b      	ldrh	r3, [r3, #0]
 800dece:	b29b      	uxth	r3, r3
 800ded0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ded4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ded8:	873b      	strh	r3, [r7, #56]	; 0x38
 800deda:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dedc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800dee0:	873b      	strh	r3, [r7, #56]	; 0x38
 800dee2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dee4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800dee8:	873b      	strh	r3, [r7, #56]	; 0x38
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	441a      	add	r2, r3
 800def4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800def6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800defa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800defe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df06:	b29b      	uxth	r3, r3
 800df08:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	009b      	lsls	r3, r3, #2
 800df12:	4413      	add	r3, r2
 800df14:	881b      	ldrh	r3, [r3, #0]
 800df16:	b29b      	uxth	r3, r3
 800df18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df20:	86fb      	strh	r3, [r7, #54]	; 0x36
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	441a      	add	r2, r3
 800df2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800df2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df3e:	b29b      	uxth	r3, r3
 800df40:	8013      	strh	r3, [r2, #0]
 800df42:	e0bc      	b.n	800e0be <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800df44:	687a      	ldr	r2, [r7, #4]
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	009b      	lsls	r3, r3, #2
 800df4c:	4413      	add	r3, r2
 800df4e:	881b      	ldrh	r3, [r3, #0]
 800df50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800df54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800df58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d01d      	beq.n	800df9c <USB_ActivateEndpoint+0x654>
 800df60:	687a      	ldr	r2, [r7, #4]
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	009b      	lsls	r3, r3, #2
 800df68:	4413      	add	r3, r2
 800df6a:	881b      	ldrh	r3, [r3, #0]
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df76:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800df7a:	687a      	ldr	r2, [r7, #4]
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	009b      	lsls	r3, r3, #2
 800df82:	441a      	add	r2, r3
 800df84:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800df88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800df94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df98:	b29b      	uxth	r3, r3
 800df9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	009b      	lsls	r3, r3, #2
 800dfa4:	4413      	add	r3, r2
 800dfa6:	881b      	ldrh	r3, [r3, #0]
 800dfa8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800dfac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800dfb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d01d      	beq.n	800dff4 <USB_ActivateEndpoint+0x6ac>
 800dfb8:	687a      	ldr	r2, [r7, #4]
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	009b      	lsls	r3, r3, #2
 800dfc0:	4413      	add	r3, r2
 800dfc2:	881b      	ldrh	r3, [r3, #0]
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dfca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	441a      	add	r2, r3
 800dfdc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800dfe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dfe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dfe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dfec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	78db      	ldrb	r3, [r3, #3]
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d024      	beq.n	800e046 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	4413      	add	r3, r2
 800e006:	881b      	ldrh	r3, [r3, #0]
 800e008:	b29b      	uxth	r3, r3
 800e00a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e00e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e012:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800e016:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e01a:	f083 0320 	eor.w	r3, r3, #32
 800e01e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800e022:	687a      	ldr	r2, [r7, #4]
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	009b      	lsls	r3, r3, #2
 800e02a:	441a      	add	r2, r3
 800e02c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e03c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e040:	b29b      	uxth	r3, r3
 800e042:	8013      	strh	r3, [r2, #0]
 800e044:	e01d      	b.n	800e082 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	4413      	add	r3, r2
 800e050:	881b      	ldrh	r3, [r3, #0]
 800e052:	b29b      	uxth	r3, r3
 800e054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e05c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	441a      	add	r2, r3
 800e06a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e06e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e07a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e07e:	b29b      	uxth	r3, r3
 800e080:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	4413      	add	r3, r2
 800e08c:	881b      	ldrh	r3, [r3, #0]
 800e08e:	b29b      	uxth	r3, r3
 800e090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e098:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	441a      	add	r2, r3
 800e0a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e0aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e0ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e0b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e0b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800e0be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3774      	adds	r7, #116	; 0x74
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr
 800e0ce:	bf00      	nop

0800e0d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b08d      	sub	sp, #52	; 0x34
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	7b1b      	ldrb	r3, [r3, #12]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	f040 808e 	bne.w	800e200 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	785b      	ldrb	r3, [r3, #1]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d044      	beq.n	800e176 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	4413      	add	r3, r2
 800e0f6:	881b      	ldrh	r3, [r3, #0]
 800e0f8:	81bb      	strh	r3, [r7, #12]
 800e0fa:	89bb      	ldrh	r3, [r7, #12]
 800e0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e100:	2b00      	cmp	r3, #0
 800e102:	d01b      	beq.n	800e13c <USB_DeactivateEndpoint+0x6c>
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4413      	add	r3, r2
 800e10e:	881b      	ldrh	r3, [r3, #0]
 800e110:	b29b      	uxth	r3, r3
 800e112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e11a:	817b      	strh	r3, [r7, #10]
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	441a      	add	r2, r3
 800e126:	897b      	ldrh	r3, [r7, #10]
 800e128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e12c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e134:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e138:	b29b      	uxth	r3, r3
 800e13a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e13c:	687a      	ldr	r2, [r7, #4]
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	009b      	lsls	r3, r3, #2
 800e144:	4413      	add	r3, r2
 800e146:	881b      	ldrh	r3, [r3, #0]
 800e148:	b29b      	uxth	r3, r3
 800e14a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e14e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e152:	813b      	strh	r3, [r7, #8]
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	441a      	add	r2, r3
 800e15e:	893b      	ldrh	r3, [r7, #8]
 800e160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e170:	b29b      	uxth	r3, r3
 800e172:	8013      	strh	r3, [r2, #0]
 800e174:	e192      	b.n	800e49c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	4413      	add	r3, r2
 800e180:	881b      	ldrh	r3, [r3, #0]
 800e182:	827b      	strh	r3, [r7, #18]
 800e184:	8a7b      	ldrh	r3, [r7, #18]
 800e186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d01b      	beq.n	800e1c6 <USB_DeactivateEndpoint+0xf6>
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4413      	add	r3, r2
 800e198:	881b      	ldrh	r3, [r3, #0]
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e1a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1a4:	823b      	strh	r3, [r7, #16]
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	009b      	lsls	r3, r3, #2
 800e1ae:	441a      	add	r2, r3
 800e1b0:	8a3b      	ldrh	r3, [r7, #16]
 800e1b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e1b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e1ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e1be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1c2:	b29b      	uxth	r3, r3
 800e1c4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	009b      	lsls	r3, r3, #2
 800e1ce:	4413      	add	r3, r2
 800e1d0:	881b      	ldrh	r3, [r3, #0]
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e1d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1dc:	81fb      	strh	r3, [r7, #14]
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	009b      	lsls	r3, r3, #2
 800e1e6:	441a      	add	r2, r3
 800e1e8:	89fb      	ldrh	r3, [r7, #14]
 800e1ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e1ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e1f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e1f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	8013      	strh	r3, [r2, #0]
 800e1fe:	e14d      	b.n	800e49c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	785b      	ldrb	r3, [r3, #1]
 800e204:	2b00      	cmp	r3, #0
 800e206:	f040 80a5 	bne.w	800e354 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	4413      	add	r3, r2
 800e214:	881b      	ldrh	r3, [r3, #0]
 800e216:	843b      	strh	r3, [r7, #32]
 800e218:	8c3b      	ldrh	r3, [r7, #32]
 800e21a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d01b      	beq.n	800e25a <USB_DeactivateEndpoint+0x18a>
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	4413      	add	r3, r2
 800e22c:	881b      	ldrh	r3, [r3, #0]
 800e22e:	b29b      	uxth	r3, r3
 800e230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e238:	83fb      	strh	r3, [r7, #30]
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	009b      	lsls	r3, r3, #2
 800e242:	441a      	add	r2, r3
 800e244:	8bfb      	ldrh	r3, [r7, #30]
 800e246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e24a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e24e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e256:	b29b      	uxth	r3, r3
 800e258:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e25a:	687a      	ldr	r2, [r7, #4]
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	4413      	add	r3, r2
 800e264:	881b      	ldrh	r3, [r3, #0]
 800e266:	83bb      	strh	r3, [r7, #28]
 800e268:	8bbb      	ldrh	r3, [r7, #28]
 800e26a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d01b      	beq.n	800e2aa <USB_DeactivateEndpoint+0x1da>
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	4413      	add	r3, r2
 800e27c:	881b      	ldrh	r3, [r3, #0]
 800e27e:	b29b      	uxth	r3, r3
 800e280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e288:	837b      	strh	r3, [r7, #26]
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	441a      	add	r2, r3
 800e294:	8b7b      	ldrh	r3, [r7, #26]
 800e296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e29a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e29e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e2a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	4413      	add	r3, r2
 800e2b4:	881b      	ldrh	r3, [r3, #0]
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e2bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2c0:	833b      	strh	r3, [r7, #24]
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	009b      	lsls	r3, r3, #2
 800e2ca:	441a      	add	r2, r3
 800e2cc:	8b3b      	ldrh	r3, [r7, #24]
 800e2ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e2d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e2d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e2da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e2e2:	687a      	ldr	r2, [r7, #4]
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	4413      	add	r3, r2
 800e2ec:	881b      	ldrh	r3, [r3, #0]
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e2f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2f8:	82fb      	strh	r3, [r7, #22]
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	009b      	lsls	r3, r3, #2
 800e302:	441a      	add	r2, r3
 800e304:	8afb      	ldrh	r3, [r7, #22]
 800e306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e30a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e30e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e316:	b29b      	uxth	r3, r3
 800e318:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e31a:	687a      	ldr	r2, [r7, #4]
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	4413      	add	r3, r2
 800e324:	881b      	ldrh	r3, [r3, #0]
 800e326:	b29b      	uxth	r3, r3
 800e328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e32c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e330:	82bb      	strh	r3, [r7, #20]
 800e332:	687a      	ldr	r2, [r7, #4]
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	441a      	add	r2, r3
 800e33c:	8abb      	ldrh	r3, [r7, #20]
 800e33e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e34a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e34e:	b29b      	uxth	r3, r3
 800e350:	8013      	strh	r3, [r2, #0]
 800e352:	e0a3      	b.n	800e49c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	4413      	add	r3, r2
 800e35e:	881b      	ldrh	r3, [r3, #0]
 800e360:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e362:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d01b      	beq.n	800e3a4 <USB_DeactivateEndpoint+0x2d4>
 800e36c:	687a      	ldr	r2, [r7, #4]
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	009b      	lsls	r3, r3, #2
 800e374:	4413      	add	r3, r2
 800e376:	881b      	ldrh	r3, [r3, #0]
 800e378:	b29b      	uxth	r3, r3
 800e37a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e37e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e382:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	009b      	lsls	r3, r3, #2
 800e38c:	441a      	add	r2, r3
 800e38e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e398:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e39c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3a0:	b29b      	uxth	r3, r3
 800e3a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e3a4:	687a      	ldr	r2, [r7, #4]
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	009b      	lsls	r3, r3, #2
 800e3ac:	4413      	add	r3, r2
 800e3ae:	881b      	ldrh	r3, [r3, #0]
 800e3b0:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e3b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d01b      	beq.n	800e3f4 <USB_DeactivateEndpoint+0x324>
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	4413      	add	r3, r2
 800e3c6:	881b      	ldrh	r3, [r3, #0]
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e3ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e3d2:	853b      	strh	r3, [r7, #40]	; 0x28
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	441a      	add	r2, r3
 800e3de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e3e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e3e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e3ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e3f4:	687a      	ldr	r2, [r7, #4]
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	009b      	lsls	r3, r3, #2
 800e3fc:	4413      	add	r3, r2
 800e3fe:	881b      	ldrh	r3, [r3, #0]
 800e400:	b29b      	uxth	r3, r3
 800e402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e40a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	009b      	lsls	r3, r3, #2
 800e414:	441a      	add	r2, r3
 800e416:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e41c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e428:	b29b      	uxth	r3, r3
 800e42a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e42c:	687a      	ldr	r2, [r7, #4]
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	009b      	lsls	r3, r3, #2
 800e434:	4413      	add	r3, r2
 800e436:	881b      	ldrh	r3, [r3, #0]
 800e438:	b29b      	uxth	r3, r3
 800e43a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e43e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e442:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e444:	687a      	ldr	r2, [r7, #4]
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	009b      	lsls	r3, r3, #2
 800e44c:	441a      	add	r2, r3
 800e44e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e45c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e460:	b29b      	uxth	r3, r3
 800e462:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e464:	687a      	ldr	r2, [r7, #4]
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	009b      	lsls	r3, r3, #2
 800e46c:	4413      	add	r3, r2
 800e46e:	881b      	ldrh	r3, [r3, #0]
 800e470:	b29b      	uxth	r3, r3
 800e472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e47a:	847b      	strh	r3, [r7, #34]	; 0x22
 800e47c:	687a      	ldr	r2, [r7, #4]
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	441a      	add	r2, r3
 800e486:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e48c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e498:	b29b      	uxth	r3, r3
 800e49a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e49c:	2300      	movs	r3, #0
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3734      	adds	r7, #52	; 0x34
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr

0800e4aa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e4aa:	b580      	push	{r7, lr}
 800e4ac:	b0c2      	sub	sp, #264	; 0x108
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4b8:	6018      	str	r0, [r3, #0]
 800e4ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4c2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e4c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	785b      	ldrb	r3, [r3, #1]
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	f040 86b7 	bne.w	800f244 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e4d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	699a      	ldr	r2, [r3, #24]
 800e4e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	691b      	ldr	r3, [r3, #16]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d908      	bls.n	800e504 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800e4f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	691b      	ldr	r3, [r3, #16]
 800e4fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800e502:	e007      	b.n	800e514 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800e504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	699b      	ldr	r3, [r3, #24]
 800e510:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	7b1b      	ldrb	r3, [r3, #12]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d13a      	bne.n	800e59a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	6959      	ldr	r1, [r3, #20]
 800e530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	88da      	ldrh	r2, [r3, #6]
 800e53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e540:	b29b      	uxth	r3, r3
 800e542:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e546:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e54a:	6800      	ldr	r0, [r0, #0]
 800e54c:	f001 fcb9 	bl	800fec2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e554:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	613b      	str	r3, [r7, #16]
 800e55c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e560:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	461a      	mov	r2, r3
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	4413      	add	r3, r2
 800e572:	613b      	str	r3, [r7, #16]
 800e574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	00da      	lsls	r2, r3, #3
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	4413      	add	r3, r2
 800e586:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e58a:	60fb      	str	r3, [r7, #12]
 800e58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e590:	b29a      	uxth	r2, r3
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	801a      	strh	r2, [r3, #0]
 800e596:	f000 be1f 	b.w	800f1d8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e59a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e59e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	78db      	ldrb	r3, [r3, #3]
 800e5a6:	2b02      	cmp	r3, #2
 800e5a8:	f040 8462 	bne.w	800ee70 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e5ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	6a1a      	ldr	r2, [r3, #32]
 800e5b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	691b      	ldr	r3, [r3, #16]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	f240 83df 	bls.w	800ed88 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e5ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	009b      	lsls	r3, r3, #2
 800e5e2:	4413      	add	r3, r2
 800e5e4:	881b      	ldrh	r3, [r3, #0]
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e5ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800e5f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	009b      	lsls	r3, r3, #2
 800e60c:	441a      	add	r2, r3
 800e60e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e61a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800e61e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e622:	b29b      	uxth	r3, r3
 800e624:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e62a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	6a1a      	ldr	r2, [r3, #32]
 800e632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e636:	1ad2      	subs	r2, r2, r3
 800e638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e63c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e648:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	4413      	add	r3, r2
 800e65e:	881b      	ldrh	r3, [r3, #0]
 800e660:	b29b      	uxth	r3, r3
 800e662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e666:	2b00      	cmp	r3, #0
 800e668:	f000 81c7 	beq.w	800e9fa <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e670:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	633b      	str	r3, [r7, #48]	; 0x30
 800e678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e67c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	785b      	ldrb	r3, [r3, #1]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d177      	bne.n	800e778 <USB_EPStartXfer+0x2ce>
 800e688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e68c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	62bb      	str	r3, [r7, #40]	; 0x28
 800e694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e698:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a8:	4413      	add	r3, r2
 800e6aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800e6ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	00da      	lsls	r2, r3, #3
 800e6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6bc:	4413      	add	r3, r2
 800e6be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e6c2:	627b      	str	r3, [r7, #36]	; 0x24
 800e6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c6:	881b      	ldrh	r3, [r3, #0]
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d2:	801a      	strh	r2, [r3, #0]
 800e6d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6d8:	2b3e      	cmp	r3, #62	; 0x3e
 800e6da:	d921      	bls.n	800e720 <USB_EPStartXfer+0x276>
 800e6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6e0:	095b      	lsrs	r3, r3, #5
 800e6e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e6e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6ea:	f003 031f 	and.w	r3, r3, #31
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d104      	bne.n	800e6fc <USB_EPStartXfer+0x252>
 800e6f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e6f6:	3b01      	subs	r3, #1
 800e6f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fe:	881b      	ldrh	r3, [r3, #0]
 800e700:	b29a      	uxth	r2, r3
 800e702:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e706:	b29b      	uxth	r3, r3
 800e708:	029b      	lsls	r3, r3, #10
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	4313      	orrs	r3, r2
 800e70e:	b29b      	uxth	r3, r3
 800e710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e718:	b29a      	uxth	r2, r3
 800e71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71c:	801a      	strh	r2, [r3, #0]
 800e71e:	e050      	b.n	800e7c2 <USB_EPStartXfer+0x318>
 800e720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e724:	2b00      	cmp	r3, #0
 800e726:	d10a      	bne.n	800e73e <USB_EPStartXfer+0x294>
 800e728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72a:	881b      	ldrh	r3, [r3, #0]
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e736:	b29a      	uxth	r2, r3
 800e738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73a:	801a      	strh	r2, [r3, #0]
 800e73c:	e041      	b.n	800e7c2 <USB_EPStartXfer+0x318>
 800e73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e742:	085b      	lsrs	r3, r3, #1
 800e744:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e74c:	f003 0301 	and.w	r3, r3, #1
 800e750:	2b00      	cmp	r3, #0
 800e752:	d004      	beq.n	800e75e <USB_EPStartXfer+0x2b4>
 800e754:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e758:	3301      	adds	r3, #1
 800e75a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e760:	881b      	ldrh	r3, [r3, #0]
 800e762:	b29a      	uxth	r2, r3
 800e764:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e768:	b29b      	uxth	r3, r3
 800e76a:	029b      	lsls	r3, r3, #10
 800e76c:	b29b      	uxth	r3, r3
 800e76e:	4313      	orrs	r3, r2
 800e770:	b29a      	uxth	r2, r3
 800e772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e774:	801a      	strh	r2, [r3, #0]
 800e776:	e024      	b.n	800e7c2 <USB_EPStartXfer+0x318>
 800e778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e77c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	785b      	ldrb	r3, [r3, #1]
 800e784:	2b01      	cmp	r3, #1
 800e786:	d11c      	bne.n	800e7c2 <USB_EPStartXfer+0x318>
 800e788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e78c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e796:	b29b      	uxth	r3, r3
 800e798:	461a      	mov	r2, r3
 800e79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79c:	4413      	add	r3, r2
 800e79e:	633b      	str	r3, [r7, #48]	; 0x30
 800e7a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	00da      	lsls	r2, r3, #3
 800e7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b0:	4413      	add	r3, r2
 800e7b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7bc:	b29a      	uxth	r2, r3
 800e7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e7c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	895b      	ldrh	r3, [r3, #10]
 800e7ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e7d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	6959      	ldr	r1, [r3, #20]
 800e7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e7e8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e7ec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e7f0:	6800      	ldr	r0, [r0, #0]
 800e7f2:	f001 fb66 	bl	800fec2 <USB_WritePMA>
            ep->xfer_buff += len;
 800e7f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	695a      	ldr	r2, [r3, #20]
 800e802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e806:	441a      	add	r2, r3
 800e808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e80c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	6a1a      	ldr	r2, [r3, #32]
 800e820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	691b      	ldr	r3, [r3, #16]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d90f      	bls.n	800e850 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800e830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	6a1a      	ldr	r2, [r3, #32]
 800e83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e840:	1ad2      	subs	r2, r2, r3
 800e842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	621a      	str	r2, [r3, #32]
 800e84e:	e00e      	b.n	800e86e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800e850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	6a1b      	ldr	r3, [r3, #32]
 800e85c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	2200      	movs	r2, #0
 800e86c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e86e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	785b      	ldrb	r3, [r3, #1]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d177      	bne.n	800e96e <USB_EPStartXfer+0x4c4>
 800e87e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e882:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	61bb      	str	r3, [r7, #24]
 800e88a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e88e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e898:	b29b      	uxth	r3, r3
 800e89a:	461a      	mov	r2, r3
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	4413      	add	r3, r2
 800e8a0:	61bb      	str	r3, [r7, #24]
 800e8a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	00da      	lsls	r2, r3, #3
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	4413      	add	r3, r2
 800e8b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e8b8:	617b      	str	r3, [r7, #20]
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	881b      	ldrh	r3, [r3, #0]
 800e8be:	b29b      	uxth	r3, r3
 800e8c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e8c4:	b29a      	uxth	r2, r3
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	801a      	strh	r2, [r3, #0]
 800e8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e8ce:	2b3e      	cmp	r3, #62	; 0x3e
 800e8d0:	d921      	bls.n	800e916 <USB_EPStartXfer+0x46c>
 800e8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e8d6:	095b      	lsrs	r3, r3, #5
 800e8d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e8dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e8e0:	f003 031f 	and.w	r3, r3, #31
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d104      	bne.n	800e8f2 <USB_EPStartXfer+0x448>
 800e8e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e8ec:	3b01      	subs	r3, #1
 800e8ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	881b      	ldrh	r3, [r3, #0]
 800e8f6:	b29a      	uxth	r2, r3
 800e8f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	029b      	lsls	r3, r3, #10
 800e900:	b29b      	uxth	r3, r3
 800e902:	4313      	orrs	r3, r2
 800e904:	b29b      	uxth	r3, r3
 800e906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e90a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e90e:	b29a      	uxth	r2, r3
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	801a      	strh	r2, [r3, #0]
 800e914:	e056      	b.n	800e9c4 <USB_EPStartXfer+0x51a>
 800e916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d10a      	bne.n	800e934 <USB_EPStartXfer+0x48a>
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	881b      	ldrh	r3, [r3, #0]
 800e922:	b29b      	uxth	r3, r3
 800e924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e92c:	b29a      	uxth	r2, r3
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	801a      	strh	r2, [r3, #0]
 800e932:	e047      	b.n	800e9c4 <USB_EPStartXfer+0x51a>
 800e934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e938:	085b      	lsrs	r3, r3, #1
 800e93a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e93e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e942:	f003 0301 	and.w	r3, r3, #1
 800e946:	2b00      	cmp	r3, #0
 800e948:	d004      	beq.n	800e954 <USB_EPStartXfer+0x4aa>
 800e94a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e94e:	3301      	adds	r3, #1
 800e950:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	881b      	ldrh	r3, [r3, #0]
 800e958:	b29a      	uxth	r2, r3
 800e95a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e95e:	b29b      	uxth	r3, r3
 800e960:	029b      	lsls	r3, r3, #10
 800e962:	b29b      	uxth	r3, r3
 800e964:	4313      	orrs	r3, r2
 800e966:	b29a      	uxth	r2, r3
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	801a      	strh	r2, [r3, #0]
 800e96c:	e02a      	b.n	800e9c4 <USB_EPStartXfer+0x51a>
 800e96e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	785b      	ldrb	r3, [r3, #1]
 800e97a:	2b01      	cmp	r3, #1
 800e97c:	d122      	bne.n	800e9c4 <USB_EPStartXfer+0x51a>
 800e97e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e982:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	623b      	str	r3, [r7, #32]
 800e98a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e98e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e998:	b29b      	uxth	r3, r3
 800e99a:	461a      	mov	r2, r3
 800e99c:	6a3b      	ldr	r3, [r7, #32]
 800e99e:	4413      	add	r3, r2
 800e9a0:	623b      	str	r3, [r7, #32]
 800e9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	00da      	lsls	r2, r3, #3
 800e9b0:	6a3b      	ldr	r3, [r7, #32]
 800e9b2:	4413      	add	r3, r2
 800e9b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e9b8:	61fb      	str	r3, [r7, #28]
 800e9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9be:	b29a      	uxth	r2, r3
 800e9c0:	69fb      	ldr	r3, [r7, #28]
 800e9c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e9c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	891b      	ldrh	r3, [r3, #8]
 800e9d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e9d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	6959      	ldr	r1, [r3, #20]
 800e9e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9e4:	b29b      	uxth	r3, r3
 800e9e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e9ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e9ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e9f2:	6800      	ldr	r0, [r0, #0]
 800e9f4:	f001 fa65 	bl	800fec2 <USB_WritePMA>
 800e9f8:	e3ee      	b.n	800f1d8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e9fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	785b      	ldrb	r3, [r3, #1]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d177      	bne.n	800eafa <USB_EPStartXfer+0x650>
 800ea0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	461a      	mov	r2, r3
 800ea28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea2a:	4413      	add	r3, r2
 800ea2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	00da      	lsls	r2, r3, #3
 800ea3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea3e:	4413      	add	r3, r2
 800ea40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ea44:	647b      	str	r3, [r7, #68]	; 0x44
 800ea46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea48:	881b      	ldrh	r3, [r3, #0]
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ea50:	b29a      	uxth	r2, r3
 800ea52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea54:	801a      	strh	r2, [r3, #0]
 800ea56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea5a:	2b3e      	cmp	r3, #62	; 0x3e
 800ea5c:	d921      	bls.n	800eaa2 <USB_EPStartXfer+0x5f8>
 800ea5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea62:	095b      	lsrs	r3, r3, #5
 800ea64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ea68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea6c:	f003 031f 	and.w	r3, r3, #31
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d104      	bne.n	800ea7e <USB_EPStartXfer+0x5d4>
 800ea74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ea78:	3b01      	subs	r3, #1
 800ea7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ea7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea80:	881b      	ldrh	r3, [r3, #0]
 800ea82:	b29a      	uxth	r2, r3
 800ea84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	029b      	lsls	r3, r3, #10
 800ea8c:	b29b      	uxth	r3, r3
 800ea8e:	4313      	orrs	r3, r2
 800ea90:	b29b      	uxth	r3, r3
 800ea92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea9a:	b29a      	uxth	r2, r3
 800ea9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea9e:	801a      	strh	r2, [r3, #0]
 800eaa0:	e056      	b.n	800eb50 <USB_EPStartXfer+0x6a6>
 800eaa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d10a      	bne.n	800eac0 <USB_EPStartXfer+0x616>
 800eaaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaac:	881b      	ldrh	r3, [r3, #0]
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eab8:	b29a      	uxth	r2, r3
 800eaba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eabc:	801a      	strh	r2, [r3, #0]
 800eabe:	e047      	b.n	800eb50 <USB_EPStartXfer+0x6a6>
 800eac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eac4:	085b      	lsrs	r3, r3, #1
 800eac6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800eaca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eace:	f003 0301 	and.w	r3, r3, #1
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d004      	beq.n	800eae0 <USB_EPStartXfer+0x636>
 800ead6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800eada:	3301      	adds	r3, #1
 800eadc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800eae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eae2:	881b      	ldrh	r3, [r3, #0]
 800eae4:	b29a      	uxth	r2, r3
 800eae6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	029b      	lsls	r3, r3, #10
 800eaee:	b29b      	uxth	r3, r3
 800eaf0:	4313      	orrs	r3, r2
 800eaf2:	b29a      	uxth	r2, r3
 800eaf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaf6:	801a      	strh	r2, [r3, #0]
 800eaf8:	e02a      	b.n	800eb50 <USB_EPStartXfer+0x6a6>
 800eafa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eafe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	785b      	ldrb	r3, [r3, #1]
 800eb06:	2b01      	cmp	r3, #1
 800eb08:	d122      	bne.n	800eb50 <USB_EPStartXfer+0x6a6>
 800eb0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	653b      	str	r3, [r7, #80]	; 0x50
 800eb16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	461a      	mov	r2, r3
 800eb28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb2a:	4413      	add	r3, r2
 800eb2c:	653b      	str	r3, [r7, #80]	; 0x50
 800eb2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	00da      	lsls	r2, r3, #3
 800eb3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb3e:	4413      	add	r3, r2
 800eb40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800eb44:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb4a:	b29a      	uxth	r2, r3
 800eb4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb4e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800eb50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	891b      	ldrh	r3, [r3, #8]
 800eb5c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eb60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	6959      	ldr	r1, [r3, #20]
 800eb6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb70:	b29b      	uxth	r3, r3
 800eb72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800eb76:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800eb7a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800eb7e:	6800      	ldr	r0, [r0, #0]
 800eb80:	f001 f99f 	bl	800fec2 <USB_WritePMA>
            ep->xfer_buff += len;
 800eb84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	695a      	ldr	r2, [r3, #20]
 800eb90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb94:	441a      	add	r2, r3
 800eb96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800eba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	6a1a      	ldr	r2, [r3, #32]
 800ebae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	691b      	ldr	r3, [r3, #16]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d90f      	bls.n	800ebde <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800ebbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	6a1a      	ldr	r2, [r3, #32]
 800ebca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ebce:	1ad2      	subs	r2, r2, r3
 800ebd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	621a      	str	r2, [r3, #32]
 800ebdc:	e00e      	b.n	800ebfc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800ebde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	6a1b      	ldr	r3, [r3, #32]
 800ebea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ebee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ebfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	643b      	str	r3, [r7, #64]	; 0x40
 800ec08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	785b      	ldrb	r3, [r3, #1]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d177      	bne.n	800ed08 <USB_EPStartXfer+0x85e>
 800ec18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec32:	b29b      	uxth	r3, r3
 800ec34:	461a      	mov	r2, r3
 800ec36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec38:	4413      	add	r3, r2
 800ec3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	00da      	lsls	r2, r3, #3
 800ec4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec4c:	4413      	add	r3, r2
 800ec4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ec52:	637b      	str	r3, [r7, #52]	; 0x34
 800ec54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec56:	881b      	ldrh	r3, [r3, #0]
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ec5e:	b29a      	uxth	r2, r3
 800ec60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec62:	801a      	strh	r2, [r3, #0]
 800ec64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec68:	2b3e      	cmp	r3, #62	; 0x3e
 800ec6a:	d921      	bls.n	800ecb0 <USB_EPStartXfer+0x806>
 800ec6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec70:	095b      	lsrs	r3, r3, #5
 800ec72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ec76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec7a:	f003 031f 	and.w	r3, r3, #31
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d104      	bne.n	800ec8c <USB_EPStartXfer+0x7e2>
 800ec82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec86:	3b01      	subs	r3, #1
 800ec88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ec8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec8e:	881b      	ldrh	r3, [r3, #0]
 800ec90:	b29a      	uxth	r2, r3
 800ec92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	029b      	lsls	r3, r3, #10
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	4313      	orrs	r3, r2
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eca8:	b29a      	uxth	r2, r3
 800ecaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecac:	801a      	strh	r2, [r3, #0]
 800ecae:	e050      	b.n	800ed52 <USB_EPStartXfer+0x8a8>
 800ecb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d10a      	bne.n	800ecce <USB_EPStartXfer+0x824>
 800ecb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecba:	881b      	ldrh	r3, [r3, #0]
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ecc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ecc6:	b29a      	uxth	r2, r3
 800ecc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecca:	801a      	strh	r2, [r3, #0]
 800eccc:	e041      	b.n	800ed52 <USB_EPStartXfer+0x8a8>
 800ecce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ecd2:	085b      	lsrs	r3, r3, #1
 800ecd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ecd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ecdc:	f003 0301 	and.w	r3, r3, #1
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d004      	beq.n	800ecee <USB_EPStartXfer+0x844>
 800ece4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ece8:	3301      	adds	r3, #1
 800ecea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ecee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecf0:	881b      	ldrh	r3, [r3, #0]
 800ecf2:	b29a      	uxth	r2, r3
 800ecf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	029b      	lsls	r3, r3, #10
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	4313      	orrs	r3, r2
 800ed00:	b29a      	uxth	r2, r3
 800ed02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed04:	801a      	strh	r2, [r3, #0]
 800ed06:	e024      	b.n	800ed52 <USB_EPStartXfer+0x8a8>
 800ed08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	785b      	ldrb	r3, [r3, #1]
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d11c      	bne.n	800ed52 <USB_EPStartXfer+0x8a8>
 800ed18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	461a      	mov	r2, r3
 800ed2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed2c:	4413      	add	r3, r2
 800ed2e:	643b      	str	r3, [r7, #64]	; 0x40
 800ed30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	00da      	lsls	r2, r3, #3
 800ed3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed40:	4413      	add	r3, r2
 800ed42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ed46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed4c:	b29a      	uxth	r2, r3
 800ed4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ed52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	895b      	ldrh	r3, [r3, #10]
 800ed5e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ed62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	6959      	ldr	r1, [r3, #20]
 800ed6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed72:	b29b      	uxth	r3, r3
 800ed74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ed78:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ed7c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ed80:	6800      	ldr	r0, [r0, #0]
 800ed82:	f001 f89e 	bl	800fec2 <USB_WritePMA>
 800ed86:	e227      	b.n	800f1d8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ed88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	6a1b      	ldr	r3, [r3, #32]
 800ed94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ed98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eda0:	681a      	ldr	r2, [r3, #0]
 800eda2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eda6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	009b      	lsls	r3, r3, #2
 800edb0:	4413      	add	r3, r2
 800edb2:	881b      	ldrh	r3, [r3, #0]
 800edb4:	b29b      	uxth	r3, r3
 800edb6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800edba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edbe:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800edc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	009b      	lsls	r3, r3, #2
 800edda:	441a      	add	r2, r3
 800eddc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ede0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ede4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ede8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800edec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800edf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee0e:	b29b      	uxth	r3, r3
 800ee10:	461a      	mov	r2, r3
 800ee12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee14:	4413      	add	r3, r2
 800ee16:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	00da      	lsls	r2, r3, #3
 800ee26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee28:	4413      	add	r3, r2
 800ee2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ee2e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ee30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee34:	b29a      	uxth	r2, r3
 800ee36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ee3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	891b      	ldrh	r3, [r3, #8]
 800ee46:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ee4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	6959      	ldr	r1, [r3, #20]
 800ee56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee5a:	b29b      	uxth	r3, r3
 800ee5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ee60:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ee64:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ee68:	6800      	ldr	r0, [r0, #0]
 800ee6a:	f001 f82a 	bl	800fec2 <USB_WritePMA>
 800ee6e:	e1b3      	b.n	800f1d8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ee70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	6a1a      	ldr	r2, [r3, #32]
 800ee7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee80:	1ad2      	subs	r2, r2, r3
 800ee82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ee8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	009b      	lsls	r3, r3, #2
 800eea6:	4413      	add	r3, r2
 800eea8:	881b      	ldrh	r3, [r3, #0]
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	f000 80c6 	beq.w	800f042 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800eeb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eeba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	673b      	str	r3, [r7, #112]	; 0x70
 800eec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	785b      	ldrb	r3, [r3, #1]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d177      	bne.n	800efc2 <USB_EPStartXfer+0xb18>
 800eed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eed6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	66bb      	str	r3, [r7, #104]	; 0x68
 800eede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eee2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eeec:	b29b      	uxth	r3, r3
 800eeee:	461a      	mov	r2, r3
 800eef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eef2:	4413      	add	r3, r2
 800eef4:	66bb      	str	r3, [r7, #104]	; 0x68
 800eef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eefa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	00da      	lsls	r2, r3, #3
 800ef04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ef06:	4413      	add	r3, r2
 800ef08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ef0c:	667b      	str	r3, [r7, #100]	; 0x64
 800ef0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef10:	881b      	ldrh	r3, [r3, #0]
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ef18:	b29a      	uxth	r2, r3
 800ef1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef1c:	801a      	strh	r2, [r3, #0]
 800ef1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef22:	2b3e      	cmp	r3, #62	; 0x3e
 800ef24:	d921      	bls.n	800ef6a <USB_EPStartXfer+0xac0>
 800ef26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef2a:	095b      	lsrs	r3, r3, #5
 800ef2c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ef30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef34:	f003 031f 	and.w	r3, r3, #31
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d104      	bne.n	800ef46 <USB_EPStartXfer+0xa9c>
 800ef3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ef40:	3b01      	subs	r3, #1
 800ef42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ef46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef48:	881b      	ldrh	r3, [r3, #0]
 800ef4a:	b29a      	uxth	r2, r3
 800ef4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ef50:	b29b      	uxth	r3, r3
 800ef52:	029b      	lsls	r3, r3, #10
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	4313      	orrs	r3, r2
 800ef58:	b29b      	uxth	r3, r3
 800ef5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef62:	b29a      	uxth	r2, r3
 800ef64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef66:	801a      	strh	r2, [r3, #0]
 800ef68:	e050      	b.n	800f00c <USB_EPStartXfer+0xb62>
 800ef6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d10a      	bne.n	800ef88 <USB_EPStartXfer+0xade>
 800ef72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef74:	881b      	ldrh	r3, [r3, #0]
 800ef76:	b29b      	uxth	r3, r3
 800ef78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef80:	b29a      	uxth	r2, r3
 800ef82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef84:	801a      	strh	r2, [r3, #0]
 800ef86:	e041      	b.n	800f00c <USB_EPStartXfer+0xb62>
 800ef88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef8c:	085b      	lsrs	r3, r3, #1
 800ef8e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ef92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef96:	f003 0301 	and.w	r3, r3, #1
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d004      	beq.n	800efa8 <USB_EPStartXfer+0xafe>
 800ef9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800efa2:	3301      	adds	r3, #1
 800efa4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800efa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800efaa:	881b      	ldrh	r3, [r3, #0]
 800efac:	b29a      	uxth	r2, r3
 800efae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	029b      	lsls	r3, r3, #10
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	4313      	orrs	r3, r2
 800efba:	b29a      	uxth	r2, r3
 800efbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800efbe:	801a      	strh	r2, [r3, #0]
 800efc0:	e024      	b.n	800f00c <USB_EPStartXfer+0xb62>
 800efc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	785b      	ldrb	r3, [r3, #1]
 800efce:	2b01      	cmp	r3, #1
 800efd0:	d11c      	bne.n	800f00c <USB_EPStartXfer+0xb62>
 800efd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	461a      	mov	r2, r3
 800efe4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800efe6:	4413      	add	r3, r2
 800efe8:	673b      	str	r3, [r7, #112]	; 0x70
 800efea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	00da      	lsls	r2, r3, #3
 800eff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800effa:	4413      	add	r3, r2
 800effc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f000:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f006:	b29a      	uxth	r2, r3
 800f008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f00a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800f00c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	895b      	ldrh	r3, [r3, #10]
 800f018:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f01c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	6959      	ldr	r1, [r3, #20]
 800f028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f032:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f036:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f03a:	6800      	ldr	r0, [r0, #0]
 800f03c:	f000 ff41 	bl	800fec2 <USB_WritePMA>
 800f040:	e0ca      	b.n	800f1d8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	785b      	ldrb	r3, [r3, #1]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d177      	bne.n	800f142 <USB_EPStartXfer+0xc98>
 800f052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f056:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f05e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f062:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	461a      	mov	r2, r3
 800f070:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f072:	4413      	add	r3, r2
 800f074:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f07a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	00da      	lsls	r2, r3, #3
 800f084:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f086:	4413      	add	r3, r2
 800f088:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f08c:	67bb      	str	r3, [r7, #120]	; 0x78
 800f08e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f090:	881b      	ldrh	r3, [r3, #0]
 800f092:	b29b      	uxth	r3, r3
 800f094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f098:	b29a      	uxth	r2, r3
 800f09a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f09c:	801a      	strh	r2, [r3, #0]
 800f09e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0a2:	2b3e      	cmp	r3, #62	; 0x3e
 800f0a4:	d921      	bls.n	800f0ea <USB_EPStartXfer+0xc40>
 800f0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0aa:	095b      	lsrs	r3, r3, #5
 800f0ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0b4:	f003 031f 	and.w	r3, r3, #31
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d104      	bne.n	800f0c6 <USB_EPStartXfer+0xc1c>
 800f0bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f0c0:	3b01      	subs	r3, #1
 800f0c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f0c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f0c8:	881b      	ldrh	r3, [r3, #0]
 800f0ca:	b29a      	uxth	r2, r3
 800f0cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	029b      	lsls	r3, r3, #10
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	4313      	orrs	r3, r2
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f0de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f0e2:	b29a      	uxth	r2, r3
 800f0e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f0e6:	801a      	strh	r2, [r3, #0]
 800f0e8:	e05c      	b.n	800f1a4 <USB_EPStartXfer+0xcfa>
 800f0ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d10a      	bne.n	800f108 <USB_EPStartXfer+0xc5e>
 800f0f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f0f4:	881b      	ldrh	r3, [r3, #0]
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f0fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f100:	b29a      	uxth	r2, r3
 800f102:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f104:	801a      	strh	r2, [r3, #0]
 800f106:	e04d      	b.n	800f1a4 <USB_EPStartXfer+0xcfa>
 800f108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f10c:	085b      	lsrs	r3, r3, #1
 800f10e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f116:	f003 0301 	and.w	r3, r3, #1
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d004      	beq.n	800f128 <USB_EPStartXfer+0xc7e>
 800f11e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f122:	3301      	adds	r3, #1
 800f124:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f12a:	881b      	ldrh	r3, [r3, #0]
 800f12c:	b29a      	uxth	r2, r3
 800f12e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f132:	b29b      	uxth	r3, r3
 800f134:	029b      	lsls	r3, r3, #10
 800f136:	b29b      	uxth	r3, r3
 800f138:	4313      	orrs	r3, r2
 800f13a:	b29a      	uxth	r2, r3
 800f13c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f13e:	801a      	strh	r2, [r3, #0]
 800f140:	e030      	b.n	800f1a4 <USB_EPStartXfer+0xcfa>
 800f142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	785b      	ldrb	r3, [r3, #1]
 800f14e:	2b01      	cmp	r3, #1
 800f150:	d128      	bne.n	800f1a4 <USB_EPStartXfer+0xcfa>
 800f152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f156:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f164:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f16e:	b29b      	uxth	r3, r3
 800f170:	461a      	mov	r2, r3
 800f172:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f176:	4413      	add	r3, r2
 800f178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f17c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	00da      	lsls	r2, r3, #3
 800f18a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f18e:	4413      	add	r3, r2
 800f190:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f194:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f1a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f1a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	891b      	ldrh	r3, [r3, #8]
 800f1b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f1b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	6959      	ldr	r1, [r3, #20]
 800f1c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f1ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f1ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f1d2:	6800      	ldr	r0, [r0, #0]
 800f1d4:	f000 fe75 	bl	800fec2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800f1d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f1e0:	681a      	ldr	r2, [r3, #0]
 800f1e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	009b      	lsls	r3, r3, #2
 800f1f0:	4413      	add	r3, r2
 800f1f2:	881b      	ldrh	r3, [r3, #0]
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1fe:	817b      	strh	r3, [r7, #10]
 800f200:	897b      	ldrh	r3, [r7, #10]
 800f202:	f083 0310 	eor.w	r3, r3, #16
 800f206:	817b      	strh	r3, [r7, #10]
 800f208:	897b      	ldrh	r3, [r7, #10]
 800f20a:	f083 0320 	eor.w	r3, r3, #32
 800f20e:	817b      	strh	r3, [r7, #10]
 800f210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f214:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f21e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	009b      	lsls	r3, r3, #2
 800f228:	441a      	add	r2, r3
 800f22a:	897b      	ldrh	r3, [r7, #10]
 800f22c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	8013      	strh	r3, [r2, #0]
 800f240:	f000 bcde 	b.w	800fc00 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	7b1b      	ldrb	r3, [r3, #12]
 800f250:	2b00      	cmp	r3, #0
 800f252:	f040 80bb 	bne.w	800f3cc <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800f256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f25a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	699a      	ldr	r2, [r3, #24]
 800f262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	691b      	ldr	r3, [r3, #16]
 800f26e:	429a      	cmp	r2, r3
 800f270:	d917      	bls.n	800f2a2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800f272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	691b      	ldr	r3, [r3, #16]
 800f27e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800f282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	699a      	ldr	r2, [r3, #24]
 800f28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f292:	1ad2      	subs	r2, r2, r3
 800f294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	619a      	str	r2, [r3, #24]
 800f2a0:	e00e      	b.n	800f2c0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800f2a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	699b      	ldr	r3, [r3, #24]
 800f2ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800f2b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f2c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f2ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f2dc:	b29b      	uxth	r3, r3
 800f2de:	461a      	mov	r2, r3
 800f2e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f2e4:	4413      	add	r3, r2
 800f2e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f2ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	00da      	lsls	r2, r3, #3
 800f2f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f2fc:	4413      	add	r3, r2
 800f2fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f30a:	881b      	ldrh	r3, [r3, #0]
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f312:	b29a      	uxth	r2, r3
 800f314:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f318:	801a      	strh	r2, [r3, #0]
 800f31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f31e:	2b3e      	cmp	r3, #62	; 0x3e
 800f320:	d924      	bls.n	800f36c <USB_EPStartXfer+0xec2>
 800f322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f326:	095b      	lsrs	r3, r3, #5
 800f328:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f32c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f330:	f003 031f 	and.w	r3, r3, #31
 800f334:	2b00      	cmp	r3, #0
 800f336:	d104      	bne.n	800f342 <USB_EPStartXfer+0xe98>
 800f338:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f33c:	3b01      	subs	r3, #1
 800f33e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f346:	881b      	ldrh	r3, [r3, #0]
 800f348:	b29a      	uxth	r2, r3
 800f34a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f34e:	b29b      	uxth	r3, r3
 800f350:	029b      	lsls	r3, r3, #10
 800f352:	b29b      	uxth	r3, r3
 800f354:	4313      	orrs	r3, r2
 800f356:	b29b      	uxth	r3, r3
 800f358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f35c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f360:	b29a      	uxth	r2, r3
 800f362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f366:	801a      	strh	r2, [r3, #0]
 800f368:	f000 bc10 	b.w	800fb8c <USB_EPStartXfer+0x16e2>
 800f36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f370:	2b00      	cmp	r3, #0
 800f372:	d10c      	bne.n	800f38e <USB_EPStartXfer+0xee4>
 800f374:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f378:	881b      	ldrh	r3, [r3, #0]
 800f37a:	b29b      	uxth	r3, r3
 800f37c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f384:	b29a      	uxth	r2, r3
 800f386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f38a:	801a      	strh	r2, [r3, #0]
 800f38c:	e3fe      	b.n	800fb8c <USB_EPStartXfer+0x16e2>
 800f38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f392:	085b      	lsrs	r3, r3, #1
 800f394:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f39c:	f003 0301 	and.w	r3, r3, #1
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d004      	beq.n	800f3ae <USB_EPStartXfer+0xf04>
 800f3a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f3ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f3b2:	881b      	ldrh	r3, [r3, #0]
 800f3b4:	b29a      	uxth	r2, r3
 800f3b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f3ba:	b29b      	uxth	r3, r3
 800f3bc:	029b      	lsls	r3, r3, #10
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	4313      	orrs	r3, r2
 800f3c2:	b29a      	uxth	r2, r3
 800f3c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f3c8:	801a      	strh	r2, [r3, #0]
 800f3ca:	e3df      	b.n	800fb8c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f3cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	78db      	ldrb	r3, [r3, #3]
 800f3d8:	2b02      	cmp	r3, #2
 800f3da:	f040 8218 	bne.w	800f80e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f3de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	785b      	ldrb	r3, [r3, #1]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	f040 809d 	bne.w	800f52a <USB_EPStartXfer+0x1080>
 800f3f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f3fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f402:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	461a      	mov	r2, r3
 800f410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f414:	4413      	add	r3, r2
 800f416:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f41a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f41e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	00da      	lsls	r2, r3, #3
 800f428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f42c:	4413      	add	r3, r2
 800f42e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f432:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f436:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f43a:	881b      	ldrh	r3, [r3, #0]
 800f43c:	b29b      	uxth	r3, r3
 800f43e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f442:	b29a      	uxth	r2, r3
 800f444:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f448:	801a      	strh	r2, [r3, #0]
 800f44a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f44e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	691b      	ldr	r3, [r3, #16]
 800f456:	2b3e      	cmp	r3, #62	; 0x3e
 800f458:	d92b      	bls.n	800f4b2 <USB_EPStartXfer+0x1008>
 800f45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f45e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	691b      	ldr	r3, [r3, #16]
 800f466:	095b      	lsrs	r3, r3, #5
 800f468:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f46c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	691b      	ldr	r3, [r3, #16]
 800f478:	f003 031f 	and.w	r3, r3, #31
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d104      	bne.n	800f48a <USB_EPStartXfer+0xfe0>
 800f480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f484:	3b01      	subs	r3, #1
 800f486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f48a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f48e:	881b      	ldrh	r3, [r3, #0]
 800f490:	b29a      	uxth	r2, r3
 800f492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f496:	b29b      	uxth	r3, r3
 800f498:	029b      	lsls	r3, r3, #10
 800f49a:	b29b      	uxth	r3, r3
 800f49c:	4313      	orrs	r3, r2
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f4a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f4a8:	b29a      	uxth	r2, r3
 800f4aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f4ae:	801a      	strh	r2, [r3, #0]
 800f4b0:	e070      	b.n	800f594 <USB_EPStartXfer+0x10ea>
 800f4b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	691b      	ldr	r3, [r3, #16]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d10c      	bne.n	800f4dc <USB_EPStartXfer+0x1032>
 800f4c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f4c6:	881b      	ldrh	r3, [r3, #0]
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f4ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f4d2:	b29a      	uxth	r2, r3
 800f4d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f4d8:	801a      	strh	r2, [r3, #0]
 800f4da:	e05b      	b.n	800f594 <USB_EPStartXfer+0x10ea>
 800f4dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	691b      	ldr	r3, [r3, #16]
 800f4e8:	085b      	lsrs	r3, r3, #1
 800f4ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f4ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	691b      	ldr	r3, [r3, #16]
 800f4fa:	f003 0301 	and.w	r3, r3, #1
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d004      	beq.n	800f50c <USB_EPStartXfer+0x1062>
 800f502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f506:	3301      	adds	r3, #1
 800f508:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f50c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f510:	881b      	ldrh	r3, [r3, #0]
 800f512:	b29a      	uxth	r2, r3
 800f514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f518:	b29b      	uxth	r3, r3
 800f51a:	029b      	lsls	r3, r3, #10
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	4313      	orrs	r3, r2
 800f520:	b29a      	uxth	r2, r3
 800f522:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f526:	801a      	strh	r2, [r3, #0]
 800f528:	e034      	b.n	800f594 <USB_EPStartXfer+0x10ea>
 800f52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f52e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	785b      	ldrb	r3, [r3, #1]
 800f536:	2b01      	cmp	r3, #1
 800f538:	d12c      	bne.n	800f594 <USB_EPStartXfer+0x10ea>
 800f53a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f53e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f54c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f556:	b29b      	uxth	r3, r3
 800f558:	461a      	mov	r2, r3
 800f55a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f55e:	4413      	add	r3, r2
 800f560:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	00da      	lsls	r2, r3, #3
 800f572:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f576:	4413      	add	r3, r2
 800f578:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f57c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	691b      	ldr	r3, [r3, #16]
 800f58c:	b29a      	uxth	r2, r3
 800f58e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f592:	801a      	strh	r2, [r3, #0]
 800f594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f598:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f5a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	785b      	ldrb	r3, [r3, #1]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	f040 809d 	bne.w	800f6ee <USB_EPStartXfer+0x1244>
 800f5b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f5c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f5d0:	b29b      	uxth	r3, r3
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f5d8:	4413      	add	r3, r2
 800f5da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	00da      	lsls	r2, r3, #3
 800f5ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f5f0:	4413      	add	r3, r2
 800f5f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f5f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f5fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f5fe:	881b      	ldrh	r3, [r3, #0]
 800f600:	b29b      	uxth	r3, r3
 800f602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f606:	b29a      	uxth	r2, r3
 800f608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f60c:	801a      	strh	r2, [r3, #0]
 800f60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	691b      	ldr	r3, [r3, #16]
 800f61a:	2b3e      	cmp	r3, #62	; 0x3e
 800f61c:	d92b      	bls.n	800f676 <USB_EPStartXfer+0x11cc>
 800f61e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	691b      	ldr	r3, [r3, #16]
 800f62a:	095b      	lsrs	r3, r3, #5
 800f62c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	691b      	ldr	r3, [r3, #16]
 800f63c:	f003 031f 	and.w	r3, r3, #31
 800f640:	2b00      	cmp	r3, #0
 800f642:	d104      	bne.n	800f64e <USB_EPStartXfer+0x11a4>
 800f644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f648:	3b01      	subs	r3, #1
 800f64a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f64e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f652:	881b      	ldrh	r3, [r3, #0]
 800f654:	b29a      	uxth	r2, r3
 800f656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	029b      	lsls	r3, r3, #10
 800f65e:	b29b      	uxth	r3, r3
 800f660:	4313      	orrs	r3, r2
 800f662:	b29b      	uxth	r3, r3
 800f664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f66c:	b29a      	uxth	r2, r3
 800f66e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f672:	801a      	strh	r2, [r3, #0]
 800f674:	e069      	b.n	800f74a <USB_EPStartXfer+0x12a0>
 800f676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f67a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	691b      	ldr	r3, [r3, #16]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d10c      	bne.n	800f6a0 <USB_EPStartXfer+0x11f6>
 800f686:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f68a:	881b      	ldrh	r3, [r3, #0]
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f696:	b29a      	uxth	r2, r3
 800f698:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f69c:	801a      	strh	r2, [r3, #0]
 800f69e:	e054      	b.n	800f74a <USB_EPStartXfer+0x12a0>
 800f6a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	691b      	ldr	r3, [r3, #16]
 800f6ac:	085b      	lsrs	r3, r3, #1
 800f6ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f6b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	691b      	ldr	r3, [r3, #16]
 800f6be:	f003 0301 	and.w	r3, r3, #1
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d004      	beq.n	800f6d0 <USB_EPStartXfer+0x1226>
 800f6c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f6d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f6d4:	881b      	ldrh	r3, [r3, #0]
 800f6d6:	b29a      	uxth	r2, r3
 800f6d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	029b      	lsls	r3, r3, #10
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	4313      	orrs	r3, r2
 800f6e4:	b29a      	uxth	r2, r3
 800f6e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f6ea:	801a      	strh	r2, [r3, #0]
 800f6ec:	e02d      	b.n	800f74a <USB_EPStartXfer+0x12a0>
 800f6ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	785b      	ldrb	r3, [r3, #1]
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d125      	bne.n	800f74a <USB_EPStartXfer+0x12a0>
 800f6fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f70c:	b29b      	uxth	r3, r3
 800f70e:	461a      	mov	r2, r3
 800f710:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f714:	4413      	add	r3, r2
 800f716:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f71a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f71e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	00da      	lsls	r2, r3, #3
 800f728:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f72c:	4413      	add	r3, r2
 800f72e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f73a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	691b      	ldr	r3, [r3, #16]
 800f742:	b29a      	uxth	r2, r3
 800f744:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f748:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f74a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f74e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	69db      	ldr	r3, [r3, #28]
 800f756:	2b00      	cmp	r3, #0
 800f758:	f000 8218 	beq.w	800fb8c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800f75c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f760:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f764:	681a      	ldr	r2, [r3, #0]
 800f766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f76a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	009b      	lsls	r3, r3, #2
 800f774:	4413      	add	r3, r2
 800f776:	881b      	ldrh	r3, [r3, #0]
 800f778:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f77c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f784:	2b00      	cmp	r3, #0
 800f786:	d005      	beq.n	800f794 <USB_EPStartXfer+0x12ea>
 800f788:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f78c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f790:	2b00      	cmp	r3, #0
 800f792:	d10d      	bne.n	800f7b0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f794:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	f040 81f5 	bne.w	800fb8c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f7a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	f040 81ee 	bne.w	800fb8c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f7b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7b8:	681a      	ldr	r2, [r3, #0]
 800f7ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	4413      	add	r3, r2
 800f7ca:	881b      	ldrh	r3, [r3, #0]
 800f7cc:	b29b      	uxth	r3, r3
 800f7ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7d6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800f7da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	009b      	lsls	r3, r3, #2
 800f7f2:	441a      	add	r2, r3
 800f7f4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800f7f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f7fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f804:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f808:	b29b      	uxth	r3, r3
 800f80a:	8013      	strh	r3, [r2, #0]
 800f80c:	e1be      	b.n	800fb8c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f80e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	78db      	ldrb	r3, [r3, #3]
 800f81a:	2b01      	cmp	r3, #1
 800f81c:	f040 81b4 	bne.w	800fb88 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	699a      	ldr	r2, [r3, #24]
 800f82c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	691b      	ldr	r3, [r3, #16]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d917      	bls.n	800f86c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800f83c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	691b      	ldr	r3, [r3, #16]
 800f848:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800f84c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	699a      	ldr	r2, [r3, #24]
 800f858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f85c:	1ad2      	subs	r2, r2, r3
 800f85e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	619a      	str	r2, [r3, #24]
 800f86a:	e00e      	b.n	800f88a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800f86c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	699b      	ldr	r3, [r3, #24]
 800f878:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800f87c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	2200      	movs	r2, #0
 800f888:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f88a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f88e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	785b      	ldrb	r3, [r3, #1]
 800f896:	2b00      	cmp	r3, #0
 800f898:	f040 8085 	bne.w	800f9a6 <USB_EPStartXfer+0x14fc>
 800f89c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f8aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f8b8:	b29b      	uxth	r3, r3
 800f8ba:	461a      	mov	r2, r3
 800f8bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f8c0:	4413      	add	r3, r2
 800f8c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f8c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	00da      	lsls	r2, r3, #3
 800f8d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f8d8:	4413      	add	r3, r2
 800f8da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f8de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f8e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f8e6:	881b      	ldrh	r3, [r3, #0]
 800f8e8:	b29b      	uxth	r3, r3
 800f8ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f8ee:	b29a      	uxth	r2, r3
 800f8f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f8f4:	801a      	strh	r2, [r3, #0]
 800f8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8fa:	2b3e      	cmp	r3, #62	; 0x3e
 800f8fc:	d923      	bls.n	800f946 <USB_EPStartXfer+0x149c>
 800f8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f902:	095b      	lsrs	r3, r3, #5
 800f904:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f90c:	f003 031f 	and.w	r3, r3, #31
 800f910:	2b00      	cmp	r3, #0
 800f912:	d104      	bne.n	800f91e <USB_EPStartXfer+0x1474>
 800f914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f918:	3b01      	subs	r3, #1
 800f91a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f91e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f922:	881b      	ldrh	r3, [r3, #0]
 800f924:	b29a      	uxth	r2, r3
 800f926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f92a:	b29b      	uxth	r3, r3
 800f92c:	029b      	lsls	r3, r3, #10
 800f92e:	b29b      	uxth	r3, r3
 800f930:	4313      	orrs	r3, r2
 800f932:	b29b      	uxth	r3, r3
 800f934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f93c:	b29a      	uxth	r2, r3
 800f93e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f942:	801a      	strh	r2, [r3, #0]
 800f944:	e060      	b.n	800fa08 <USB_EPStartXfer+0x155e>
 800f946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d10c      	bne.n	800f968 <USB_EPStartXfer+0x14be>
 800f94e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f952:	881b      	ldrh	r3, [r3, #0]
 800f954:	b29b      	uxth	r3, r3
 800f956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f95a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f95e:	b29a      	uxth	r2, r3
 800f960:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f964:	801a      	strh	r2, [r3, #0]
 800f966:	e04f      	b.n	800fa08 <USB_EPStartXfer+0x155e>
 800f968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f96c:	085b      	lsrs	r3, r3, #1
 800f96e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f976:	f003 0301 	and.w	r3, r3, #1
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d004      	beq.n	800f988 <USB_EPStartXfer+0x14de>
 800f97e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f982:	3301      	adds	r3, #1
 800f984:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f988:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f98c:	881b      	ldrh	r3, [r3, #0]
 800f98e:	b29a      	uxth	r2, r3
 800f990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f994:	b29b      	uxth	r3, r3
 800f996:	029b      	lsls	r3, r3, #10
 800f998:	b29b      	uxth	r3, r3
 800f99a:	4313      	orrs	r3, r2
 800f99c:	b29a      	uxth	r2, r3
 800f99e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f9a2:	801a      	strh	r2, [r3, #0]
 800f9a4:	e030      	b.n	800fa08 <USB_EPStartXfer+0x155e>
 800f9a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	785b      	ldrb	r3, [r3, #1]
 800f9b2:	2b01      	cmp	r3, #1
 800f9b4:	d128      	bne.n	800fa08 <USB_EPStartXfer+0x155e>
 800f9b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f9c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f9d2:	b29b      	uxth	r3, r3
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f9da:	4413      	add	r3, r2
 800f9dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f9e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	00da      	lsls	r2, r3, #3
 800f9ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f9f2:	4413      	add	r3, r2
 800f9f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f9f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa00:	b29a      	uxth	r2, r3
 800fa02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800fa06:	801a      	strh	r2, [r3, #0]
 800fa08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fa16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	785b      	ldrb	r3, [r3, #1]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	f040 8085 	bne.w	800fb32 <USB_EPStartXfer+0x1688>
 800fa28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fa36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	461a      	mov	r2, r3
 800fa48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fa4c:	4413      	add	r3, r2
 800fa4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fa52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	00da      	lsls	r2, r3, #3
 800fa60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fa64:	4413      	add	r3, r2
 800fa66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fa6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fa6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fa72:	881b      	ldrh	r3, [r3, #0]
 800fa74:	b29b      	uxth	r3, r3
 800fa76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fa7a:	b29a      	uxth	r2, r3
 800fa7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fa80:	801a      	strh	r2, [r3, #0]
 800fa82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa86:	2b3e      	cmp	r3, #62	; 0x3e
 800fa88:	d923      	bls.n	800fad2 <USB_EPStartXfer+0x1628>
 800fa8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa8e:	095b      	lsrs	r3, r3, #5
 800fa90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800fa94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa98:	f003 031f 	and.w	r3, r3, #31
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d104      	bne.n	800faaa <USB_EPStartXfer+0x1600>
 800faa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800faa4:	3b01      	subs	r3, #1
 800faa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800faaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800faae:	881b      	ldrh	r3, [r3, #0]
 800fab0:	b29a      	uxth	r2, r3
 800fab2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	029b      	lsls	r3, r3, #10
 800faba:	b29b      	uxth	r3, r3
 800fabc:	4313      	orrs	r3, r2
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fac8:	b29a      	uxth	r2, r3
 800faca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800face:	801a      	strh	r2, [r3, #0]
 800fad0:	e05c      	b.n	800fb8c <USB_EPStartXfer+0x16e2>
 800fad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d10c      	bne.n	800faf4 <USB_EPStartXfer+0x164a>
 800fada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fade:	881b      	ldrh	r3, [r3, #0]
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800faea:	b29a      	uxth	r2, r3
 800faec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800faf0:	801a      	strh	r2, [r3, #0]
 800faf2:	e04b      	b.n	800fb8c <USB_EPStartXfer+0x16e2>
 800faf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800faf8:	085b      	lsrs	r3, r3, #1
 800fafa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800fafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb02:	f003 0301 	and.w	r3, r3, #1
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d004      	beq.n	800fb14 <USB_EPStartXfer+0x166a>
 800fb0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fb0e:	3301      	adds	r3, #1
 800fb10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800fb14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	b29a      	uxth	r2, r3
 800fb1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fb20:	b29b      	uxth	r3, r3
 800fb22:	029b      	lsls	r3, r3, #10
 800fb24:	b29b      	uxth	r3, r3
 800fb26:	4313      	orrs	r3, r2
 800fb28:	b29a      	uxth	r2, r3
 800fb2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fb2e:	801a      	strh	r2, [r3, #0]
 800fb30:	e02c      	b.n	800fb8c <USB_EPStartXfer+0x16e2>
 800fb32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	785b      	ldrb	r3, [r3, #1]
 800fb3e:	2b01      	cmp	r3, #1
 800fb40:	d124      	bne.n	800fb8c <USB_EPStartXfer+0x16e2>
 800fb42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	461a      	mov	r2, r3
 800fb54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800fb58:	4413      	add	r3, r2
 800fb5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fb5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	781b      	ldrb	r3, [r3, #0]
 800fb6a:	00da      	lsls	r2, r3, #3
 800fb6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800fb70:	4413      	add	r3, r2
 800fb72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fb76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fb7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb7e:	b29a      	uxth	r2, r3
 800fb80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fb84:	801a      	strh	r2, [r3, #0]
 800fb86:	e001      	b.n	800fb8c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800fb88:	2301      	movs	r3, #1
 800fb8a:	e03a      	b.n	800fc02 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fb8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb94:	681a      	ldr	r2, [r3, #0]
 800fb96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	009b      	lsls	r3, r3, #2
 800fba4:	4413      	add	r3, r2
 800fba6:	881b      	ldrh	r3, [r3, #0]
 800fba8:	b29b      	uxth	r3, r3
 800fbaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fbae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbb2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800fbb6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800fbba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fbbe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800fbc2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800fbc6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fbca:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800fbce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fbd6:	681a      	ldr	r2, [r3, #0]
 800fbd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	009b      	lsls	r3, r3, #2
 800fbe6:	441a      	add	r2, r3
 800fbe8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800fbec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fbf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fbf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fbf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbfc:	b29b      	uxth	r3, r3
 800fbfe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800fc00:	2300      	movs	r3, #0
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b085      	sub	sp, #20
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	785b      	ldrb	r3, [r3, #1]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d020      	beq.n	800fc60 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800fc1e:	687a      	ldr	r2, [r7, #4]
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	781b      	ldrb	r3, [r3, #0]
 800fc24:	009b      	lsls	r3, r3, #2
 800fc26:	4413      	add	r3, r2
 800fc28:	881b      	ldrh	r3, [r3, #0]
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc34:	81bb      	strh	r3, [r7, #12]
 800fc36:	89bb      	ldrh	r3, [r7, #12]
 800fc38:	f083 0310 	eor.w	r3, r3, #16
 800fc3c:	81bb      	strh	r3, [r7, #12]
 800fc3e:	687a      	ldr	r2, [r7, #4]
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	009b      	lsls	r3, r3, #2
 800fc46:	441a      	add	r2, r3
 800fc48:	89bb      	ldrh	r3, [r7, #12]
 800fc4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	8013      	strh	r3, [r2, #0]
 800fc5e:	e01f      	b.n	800fca0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	009b      	lsls	r3, r3, #2
 800fc68:	4413      	add	r3, r2
 800fc6a:	881b      	ldrh	r3, [r3, #0]
 800fc6c:	b29b      	uxth	r3, r3
 800fc6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fc72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc76:	81fb      	strh	r3, [r7, #14]
 800fc78:	89fb      	ldrh	r3, [r7, #14]
 800fc7a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fc7e:	81fb      	strh	r3, [r7, #14]
 800fc80:	687a      	ldr	r2, [r7, #4]
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	009b      	lsls	r3, r3, #2
 800fc88:	441a      	add	r2, r3
 800fc8a:	89fb      	ldrh	r3, [r7, #14]
 800fc8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc9c:	b29b      	uxth	r3, r3
 800fc9e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800fca0:	2300      	movs	r3, #0
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3714      	adds	r7, #20
 800fca6:	46bd      	mov	sp, r7
 800fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcac:	4770      	bx	lr

0800fcae <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fcae:	b480      	push	{r7}
 800fcb0:	b087      	sub	sp, #28
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	6078      	str	r0, [r7, #4]
 800fcb6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	7b1b      	ldrb	r3, [r3, #12]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	f040 809d 	bne.w	800fdfc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	785b      	ldrb	r3, [r3, #1]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d04c      	beq.n	800fd64 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fcca:	687a      	ldr	r2, [r7, #4]
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	4413      	add	r3, r2
 800fcd4:	881b      	ldrh	r3, [r3, #0]
 800fcd6:	823b      	strh	r3, [r7, #16]
 800fcd8:	8a3b      	ldrh	r3, [r7, #16]
 800fcda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d01b      	beq.n	800fd1a <USB_EPClearStall+0x6c>
 800fce2:	687a      	ldr	r2, [r7, #4]
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	009b      	lsls	r3, r3, #2
 800fcea:	4413      	add	r3, r2
 800fcec:	881b      	ldrh	r3, [r3, #0]
 800fcee:	b29b      	uxth	r3, r3
 800fcf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fcf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fcf8:	81fb      	strh	r3, [r7, #14]
 800fcfa:	687a      	ldr	r2, [r7, #4]
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	009b      	lsls	r3, r3, #2
 800fd02:	441a      	add	r2, r3
 800fd04:	89fb      	ldrh	r3, [r7, #14]
 800fd06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	78db      	ldrb	r3, [r3, #3]
 800fd1e:	2b01      	cmp	r3, #1
 800fd20:	d06c      	beq.n	800fdfc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fd22:	687a      	ldr	r2, [r7, #4]
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	009b      	lsls	r3, r3, #2
 800fd2a:	4413      	add	r3, r2
 800fd2c:	881b      	ldrh	r3, [r3, #0]
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd38:	81bb      	strh	r3, [r7, #12]
 800fd3a:	89bb      	ldrh	r3, [r7, #12]
 800fd3c:	f083 0320 	eor.w	r3, r3, #32
 800fd40:	81bb      	strh	r3, [r7, #12]
 800fd42:	687a      	ldr	r2, [r7, #4]
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	781b      	ldrb	r3, [r3, #0]
 800fd48:	009b      	lsls	r3, r3, #2
 800fd4a:	441a      	add	r2, r3
 800fd4c:	89bb      	ldrh	r3, [r7, #12]
 800fd4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd5e:	b29b      	uxth	r3, r3
 800fd60:	8013      	strh	r3, [r2, #0]
 800fd62:	e04b      	b.n	800fdfc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fd64:	687a      	ldr	r2, [r7, #4]
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	009b      	lsls	r3, r3, #2
 800fd6c:	4413      	add	r3, r2
 800fd6e:	881b      	ldrh	r3, [r3, #0]
 800fd70:	82fb      	strh	r3, [r7, #22]
 800fd72:	8afb      	ldrh	r3, [r7, #22]
 800fd74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d01b      	beq.n	800fdb4 <USB_EPClearStall+0x106>
 800fd7c:	687a      	ldr	r2, [r7, #4]
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	781b      	ldrb	r3, [r3, #0]
 800fd82:	009b      	lsls	r3, r3, #2
 800fd84:	4413      	add	r3, r2
 800fd86:	881b      	ldrh	r3, [r3, #0]
 800fd88:	b29b      	uxth	r3, r3
 800fd8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd92:	82bb      	strh	r3, [r7, #20]
 800fd94:	687a      	ldr	r2, [r7, #4]
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	781b      	ldrb	r3, [r3, #0]
 800fd9a:	009b      	lsls	r3, r3, #2
 800fd9c:	441a      	add	r2, r3
 800fd9e:	8abb      	ldrh	r3, [r7, #20]
 800fda0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fda4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fda8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fdac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdb0:	b29b      	uxth	r3, r3
 800fdb2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fdb4:	687a      	ldr	r2, [r7, #4]
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	781b      	ldrb	r3, [r3, #0]
 800fdba:	009b      	lsls	r3, r3, #2
 800fdbc:	4413      	add	r3, r2
 800fdbe:	881b      	ldrh	r3, [r3, #0]
 800fdc0:	b29b      	uxth	r3, r3
 800fdc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fdc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdca:	827b      	strh	r3, [r7, #18]
 800fdcc:	8a7b      	ldrh	r3, [r7, #18]
 800fdce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fdd2:	827b      	strh	r3, [r7, #18]
 800fdd4:	8a7b      	ldrh	r3, [r7, #18]
 800fdd6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fdda:	827b      	strh	r3, [r7, #18]
 800fddc:	687a      	ldr	r2, [r7, #4]
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	009b      	lsls	r3, r3, #2
 800fde4:	441a      	add	r2, r3
 800fde6:	8a7b      	ldrh	r3, [r7, #18]
 800fde8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fdec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fdf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fdf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800fdfc:	2300      	movs	r3, #0
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	371c      	adds	r7, #28
 800fe02:	46bd      	mov	sp, r7
 800fe04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe08:	4770      	bx	lr

0800fe0a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800fe0a:	b480      	push	{r7}
 800fe0c:	b083      	sub	sp, #12
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	6078      	str	r0, [r7, #4]
 800fe12:	460b      	mov	r3, r1
 800fe14:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800fe16:	78fb      	ldrb	r3, [r7, #3]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d103      	bne.n	800fe24 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2280      	movs	r2, #128	; 0x80
 800fe20:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800fe24:	2300      	movs	r3, #0
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	370c      	adds	r7, #12
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr

0800fe32 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800fe32:	b480      	push	{r7}
 800fe34:	b083      	sub	sp, #12
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fe40:	b29b      	uxth	r3, r3
 800fe42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe4a:	b29a      	uxth	r2, r3
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800fe52:	2300      	movs	r3, #0
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	370c      	adds	r7, #12
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5e:	4770      	bx	lr

0800fe60 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800fe60:	b480      	push	{r7}
 800fe62:	b083      	sub	sp, #12
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fe6e:	b29b      	uxth	r3, r3
 800fe70:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800fe74:	b29a      	uxth	r2, r3
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800fe7c:	2300      	movs	r3, #0
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	370c      	adds	r7, #12
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr

0800fe8a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800fe8a:	b480      	push	{r7}
 800fe8c:	b085      	sub	sp, #20
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800fe98:	b29b      	uxth	r3, r3
 800fe9a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3714      	adds	r7, #20
 800fea2:	46bd      	mov	sp, r7
 800fea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea8:	4770      	bx	lr

0800feaa <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800feaa:	b480      	push	{r7}
 800feac:	b083      	sub	sp, #12
 800feae:	af00      	add	r7, sp, #0
 800feb0:	6078      	str	r0, [r7, #4]
 800feb2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800feb4:	2300      	movs	r3, #0
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	370c      	adds	r7, #12
 800feba:	46bd      	mov	sp, r7
 800febc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec0:	4770      	bx	lr

0800fec2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fec2:	b480      	push	{r7}
 800fec4:	b08b      	sub	sp, #44	; 0x2c
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	60f8      	str	r0, [r7, #12]
 800feca:	60b9      	str	r1, [r7, #8]
 800fecc:	4611      	mov	r1, r2
 800fece:	461a      	mov	r2, r3
 800fed0:	460b      	mov	r3, r1
 800fed2:	80fb      	strh	r3, [r7, #6]
 800fed4:	4613      	mov	r3, r2
 800fed6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800fed8:	88bb      	ldrh	r3, [r7, #4]
 800feda:	3301      	adds	r3, #1
 800fedc:	085b      	lsrs	r3, r3, #1
 800fede:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800fee8:	88fa      	ldrh	r2, [r7, #6]
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	4413      	add	r3, r2
 800feee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fef2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800fef4:	69bb      	ldr	r3, [r7, #24]
 800fef6:	627b      	str	r3, [r7, #36]	; 0x24
 800fef8:	e01b      	b.n	800ff32 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800fefa:	69fb      	ldr	r3, [r7, #28]
 800fefc:	781b      	ldrb	r3, [r3, #0]
 800fefe:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ff00:	69fb      	ldr	r3, [r7, #28]
 800ff02:	3301      	adds	r3, #1
 800ff04:	781b      	ldrb	r3, [r3, #0]
 800ff06:	021b      	lsls	r3, r3, #8
 800ff08:	b21a      	sxth	r2, r3
 800ff0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ff0e:	4313      	orrs	r3, r2
 800ff10:	b21b      	sxth	r3, r3
 800ff12:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ff14:	6a3b      	ldr	r3, [r7, #32]
 800ff16:	8a7a      	ldrh	r2, [r7, #18]
 800ff18:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ff1a:	6a3b      	ldr	r3, [r7, #32]
 800ff1c:	3302      	adds	r3, #2
 800ff1e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ff20:	69fb      	ldr	r3, [r7, #28]
 800ff22:	3301      	adds	r3, #1
 800ff24:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ff26:	69fb      	ldr	r3, [r7, #28]
 800ff28:	3301      	adds	r3, #1
 800ff2a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ff2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2e:	3b01      	subs	r3, #1
 800ff30:	627b      	str	r3, [r7, #36]	; 0x24
 800ff32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d1e0      	bne.n	800fefa <USB_WritePMA+0x38>
  }
}
 800ff38:	bf00      	nop
 800ff3a:	bf00      	nop
 800ff3c:	372c      	adds	r7, #44	; 0x2c
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff44:	4770      	bx	lr

0800ff46 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ff46:	b480      	push	{r7}
 800ff48:	b08b      	sub	sp, #44	; 0x2c
 800ff4a:	af00      	add	r7, sp, #0
 800ff4c:	60f8      	str	r0, [r7, #12]
 800ff4e:	60b9      	str	r1, [r7, #8]
 800ff50:	4611      	mov	r1, r2
 800ff52:	461a      	mov	r2, r3
 800ff54:	460b      	mov	r3, r1
 800ff56:	80fb      	strh	r3, [r7, #6]
 800ff58:	4613      	mov	r3, r2
 800ff5a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ff5c:	88bb      	ldrh	r3, [r7, #4]
 800ff5e:	085b      	lsrs	r3, r3, #1
 800ff60:	b29b      	uxth	r3, r3
 800ff62:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ff6c:	88fa      	ldrh	r2, [r7, #6]
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	4413      	add	r3, r2
 800ff72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ff76:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ff78:	69bb      	ldr	r3, [r7, #24]
 800ff7a:	627b      	str	r3, [r7, #36]	; 0x24
 800ff7c:	e018      	b.n	800ffb0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ff7e:	6a3b      	ldr	r3, [r7, #32]
 800ff80:	881b      	ldrh	r3, [r3, #0]
 800ff82:	b29b      	uxth	r3, r3
 800ff84:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ff86:	6a3b      	ldr	r3, [r7, #32]
 800ff88:	3302      	adds	r3, #2
 800ff8a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	b2da      	uxtb	r2, r3
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ff94:	69fb      	ldr	r3, [r7, #28]
 800ff96:	3301      	adds	r3, #1
 800ff98:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	0a1b      	lsrs	r3, r3, #8
 800ff9e:	b2da      	uxtb	r2, r3
 800ffa0:	69fb      	ldr	r3, [r7, #28]
 800ffa2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ffa4:	69fb      	ldr	r3, [r7, #28]
 800ffa6:	3301      	adds	r3, #1
 800ffa8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ffaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffac:	3b01      	subs	r3, #1
 800ffae:	627b      	str	r3, [r7, #36]	; 0x24
 800ffb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d1e3      	bne.n	800ff7e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ffb6:	88bb      	ldrh	r3, [r7, #4]
 800ffb8:	f003 0301 	and.w	r3, r3, #1
 800ffbc:	b29b      	uxth	r3, r3
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d007      	beq.n	800ffd2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ffc2:	6a3b      	ldr	r3, [r7, #32]
 800ffc4:	881b      	ldrh	r3, [r3, #0]
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	b2da      	uxtb	r2, r3
 800ffce:	69fb      	ldr	r3, [r7, #28]
 800ffd0:	701a      	strb	r2, [r3, #0]
  }
}
 800ffd2:	bf00      	nop
 800ffd4:	372c      	adds	r7, #44	; 0x2c
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffdc:	4770      	bx	lr
	...

0800ffe0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b084      	sub	sp, #16
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	460b      	mov	r3, r1
 800ffea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ffec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800fff0:	f003 fa14 	bl	801341c <USBD_static_malloc>
 800fff4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d109      	bne.n	8010010 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	32b0      	adds	r2, #176	; 0xb0
 8010006:	2100      	movs	r1, #0
 8010008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801000c:	2302      	movs	r3, #2
 801000e:	e0d4      	b.n	80101ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010010:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8010014:	2100      	movs	r1, #0
 8010016:	68f8      	ldr	r0, [r7, #12]
 8010018:	f005 f9b3 	bl	8015382 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	32b0      	adds	r2, #176	; 0xb0
 8010026:	68f9      	ldr	r1, [r7, #12]
 8010028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	32b0      	adds	r2, #176	; 0xb0
 8010036:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	7c1b      	ldrb	r3, [r3, #16]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d138      	bne.n	80100ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010048:	4b5e      	ldr	r3, [pc, #376]	; (80101c4 <USBD_CDC_Init+0x1e4>)
 801004a:	7819      	ldrb	r1, [r3, #0]
 801004c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010050:	2202      	movs	r2, #2
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f002 ffe4 	bl	8013020 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010058:	4b5a      	ldr	r3, [pc, #360]	; (80101c4 <USBD_CDC_Init+0x1e4>)
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	f003 020f 	and.w	r2, r3, #15
 8010060:	6879      	ldr	r1, [r7, #4]
 8010062:	4613      	mov	r3, r2
 8010064:	009b      	lsls	r3, r3, #2
 8010066:	4413      	add	r3, r2
 8010068:	009b      	lsls	r3, r3, #2
 801006a:	440b      	add	r3, r1
 801006c:	3324      	adds	r3, #36	; 0x24
 801006e:	2201      	movs	r2, #1
 8010070:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010072:	4b55      	ldr	r3, [pc, #340]	; (80101c8 <USBD_CDC_Init+0x1e8>)
 8010074:	7819      	ldrb	r1, [r3, #0]
 8010076:	f44f 7300 	mov.w	r3, #512	; 0x200
 801007a:	2202      	movs	r2, #2
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f002 ffcf 	bl	8013020 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010082:	4b51      	ldr	r3, [pc, #324]	; (80101c8 <USBD_CDC_Init+0x1e8>)
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	f003 020f 	and.w	r2, r3, #15
 801008a:	6879      	ldr	r1, [r7, #4]
 801008c:	4613      	mov	r3, r2
 801008e:	009b      	lsls	r3, r3, #2
 8010090:	4413      	add	r3, r2
 8010092:	009b      	lsls	r3, r3, #2
 8010094:	440b      	add	r3, r1
 8010096:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801009a:	2201      	movs	r2, #1
 801009c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801009e:	4b4b      	ldr	r3, [pc, #300]	; (80101cc <USBD_CDC_Init+0x1ec>)
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	f003 020f 	and.w	r2, r3, #15
 80100a6:	6879      	ldr	r1, [r7, #4]
 80100a8:	4613      	mov	r3, r2
 80100aa:	009b      	lsls	r3, r3, #2
 80100ac:	4413      	add	r3, r2
 80100ae:	009b      	lsls	r3, r3, #2
 80100b0:	440b      	add	r3, r1
 80100b2:	3326      	adds	r3, #38	; 0x26
 80100b4:	2210      	movs	r2, #16
 80100b6:	801a      	strh	r2, [r3, #0]
 80100b8:	e035      	b.n	8010126 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80100ba:	4b42      	ldr	r3, [pc, #264]	; (80101c4 <USBD_CDC_Init+0x1e4>)
 80100bc:	7819      	ldrb	r1, [r3, #0]
 80100be:	2340      	movs	r3, #64	; 0x40
 80100c0:	2202      	movs	r2, #2
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f002 ffac 	bl	8013020 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80100c8:	4b3e      	ldr	r3, [pc, #248]	; (80101c4 <USBD_CDC_Init+0x1e4>)
 80100ca:	781b      	ldrb	r3, [r3, #0]
 80100cc:	f003 020f 	and.w	r2, r3, #15
 80100d0:	6879      	ldr	r1, [r7, #4]
 80100d2:	4613      	mov	r3, r2
 80100d4:	009b      	lsls	r3, r3, #2
 80100d6:	4413      	add	r3, r2
 80100d8:	009b      	lsls	r3, r3, #2
 80100da:	440b      	add	r3, r1
 80100dc:	3324      	adds	r3, #36	; 0x24
 80100de:	2201      	movs	r2, #1
 80100e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80100e2:	4b39      	ldr	r3, [pc, #228]	; (80101c8 <USBD_CDC_Init+0x1e8>)
 80100e4:	7819      	ldrb	r1, [r3, #0]
 80100e6:	2340      	movs	r3, #64	; 0x40
 80100e8:	2202      	movs	r2, #2
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f002 ff98 	bl	8013020 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80100f0:	4b35      	ldr	r3, [pc, #212]	; (80101c8 <USBD_CDC_Init+0x1e8>)
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	f003 020f 	and.w	r2, r3, #15
 80100f8:	6879      	ldr	r1, [r7, #4]
 80100fa:	4613      	mov	r3, r2
 80100fc:	009b      	lsls	r3, r3, #2
 80100fe:	4413      	add	r3, r2
 8010100:	009b      	lsls	r3, r3, #2
 8010102:	440b      	add	r3, r1
 8010104:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010108:	2201      	movs	r2, #1
 801010a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801010c:	4b2f      	ldr	r3, [pc, #188]	; (80101cc <USBD_CDC_Init+0x1ec>)
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	f003 020f 	and.w	r2, r3, #15
 8010114:	6879      	ldr	r1, [r7, #4]
 8010116:	4613      	mov	r3, r2
 8010118:	009b      	lsls	r3, r3, #2
 801011a:	4413      	add	r3, r2
 801011c:	009b      	lsls	r3, r3, #2
 801011e:	440b      	add	r3, r1
 8010120:	3326      	adds	r3, #38	; 0x26
 8010122:	2210      	movs	r2, #16
 8010124:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010126:	4b29      	ldr	r3, [pc, #164]	; (80101cc <USBD_CDC_Init+0x1ec>)
 8010128:	7819      	ldrb	r1, [r3, #0]
 801012a:	2308      	movs	r3, #8
 801012c:	2203      	movs	r2, #3
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f002 ff76 	bl	8013020 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010134:	4b25      	ldr	r3, [pc, #148]	; (80101cc <USBD_CDC_Init+0x1ec>)
 8010136:	781b      	ldrb	r3, [r3, #0]
 8010138:	f003 020f 	and.w	r2, r3, #15
 801013c:	6879      	ldr	r1, [r7, #4]
 801013e:	4613      	mov	r3, r2
 8010140:	009b      	lsls	r3, r3, #2
 8010142:	4413      	add	r3, r2
 8010144:	009b      	lsls	r3, r3, #2
 8010146:	440b      	add	r3, r1
 8010148:	3324      	adds	r3, #36	; 0x24
 801014a:	2201      	movs	r2, #1
 801014c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	2200      	movs	r2, #0
 8010152:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801015c:	687a      	ldr	r2, [r7, #4]
 801015e:	33b0      	adds	r3, #176	; 0xb0
 8010160:	009b      	lsls	r3, r3, #2
 8010162:	4413      	add	r3, r2
 8010164:	685b      	ldr	r3, [r3, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2200      	movs	r2, #0
 801016e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2200      	movs	r2, #0
 8010176:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8010180:	2b00      	cmp	r3, #0
 8010182:	d101      	bne.n	8010188 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8010184:	2302      	movs	r3, #2
 8010186:	e018      	b.n	80101ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	7c1b      	ldrb	r3, [r3, #16]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d10a      	bne.n	80101a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010190:	4b0d      	ldr	r3, [pc, #52]	; (80101c8 <USBD_CDC_Init+0x1e8>)
 8010192:	7819      	ldrb	r1, [r3, #0]
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801019a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f003 f8ba 	bl	8013318 <USBD_LL_PrepareReceive>
 80101a4:	e008      	b.n	80101b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80101a6:	4b08      	ldr	r3, [pc, #32]	; (80101c8 <USBD_CDC_Init+0x1e8>)
 80101a8:	7819      	ldrb	r1, [r3, #0]
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80101b0:	2340      	movs	r3, #64	; 0x40
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f003 f8b0 	bl	8013318 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80101b8:	2300      	movs	r3, #0
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3710      	adds	r7, #16
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
 80101c2:	bf00      	nop
 80101c4:	200000b3 	.word	0x200000b3
 80101c8:	200000b4 	.word	0x200000b4
 80101cc:	200000b5 	.word	0x200000b5

080101d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	460b      	mov	r3, r1
 80101da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80101dc:	4b3a      	ldr	r3, [pc, #232]	; (80102c8 <USBD_CDC_DeInit+0xf8>)
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	4619      	mov	r1, r3
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f002 ff5a 	bl	801309c <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80101e8:	4b37      	ldr	r3, [pc, #220]	; (80102c8 <USBD_CDC_DeInit+0xf8>)
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	f003 020f 	and.w	r2, r3, #15
 80101f0:	6879      	ldr	r1, [r7, #4]
 80101f2:	4613      	mov	r3, r2
 80101f4:	009b      	lsls	r3, r3, #2
 80101f6:	4413      	add	r3, r2
 80101f8:	009b      	lsls	r3, r3, #2
 80101fa:	440b      	add	r3, r1
 80101fc:	3324      	adds	r3, #36	; 0x24
 80101fe:	2200      	movs	r2, #0
 8010200:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010202:	4b32      	ldr	r3, [pc, #200]	; (80102cc <USBD_CDC_DeInit+0xfc>)
 8010204:	781b      	ldrb	r3, [r3, #0]
 8010206:	4619      	mov	r1, r3
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f002 ff47 	bl	801309c <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801020e:	4b2f      	ldr	r3, [pc, #188]	; (80102cc <USBD_CDC_DeInit+0xfc>)
 8010210:	781b      	ldrb	r3, [r3, #0]
 8010212:	f003 020f 	and.w	r2, r3, #15
 8010216:	6879      	ldr	r1, [r7, #4]
 8010218:	4613      	mov	r3, r2
 801021a:	009b      	lsls	r3, r3, #2
 801021c:	4413      	add	r3, r2
 801021e:	009b      	lsls	r3, r3, #2
 8010220:	440b      	add	r3, r1
 8010222:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010226:	2200      	movs	r2, #0
 8010228:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801022a:	4b29      	ldr	r3, [pc, #164]	; (80102d0 <USBD_CDC_DeInit+0x100>)
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	4619      	mov	r1, r3
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	f002 ff33 	bl	801309c <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010236:	4b26      	ldr	r3, [pc, #152]	; (80102d0 <USBD_CDC_DeInit+0x100>)
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	f003 020f 	and.w	r2, r3, #15
 801023e:	6879      	ldr	r1, [r7, #4]
 8010240:	4613      	mov	r3, r2
 8010242:	009b      	lsls	r3, r3, #2
 8010244:	4413      	add	r3, r2
 8010246:	009b      	lsls	r3, r3, #2
 8010248:	440b      	add	r3, r1
 801024a:	3324      	adds	r3, #36	; 0x24
 801024c:	2200      	movs	r2, #0
 801024e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010250:	4b1f      	ldr	r3, [pc, #124]	; (80102d0 <USBD_CDC_DeInit+0x100>)
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	f003 020f 	and.w	r2, r3, #15
 8010258:	6879      	ldr	r1, [r7, #4]
 801025a:	4613      	mov	r3, r2
 801025c:	009b      	lsls	r3, r3, #2
 801025e:	4413      	add	r3, r2
 8010260:	009b      	lsls	r3, r3, #2
 8010262:	440b      	add	r3, r1
 8010264:	3326      	adds	r3, #38	; 0x26
 8010266:	2200      	movs	r2, #0
 8010268:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	32b0      	adds	r2, #176	; 0xb0
 8010274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d01f      	beq.n	80102bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	33b0      	adds	r3, #176	; 0xb0
 8010286:	009b      	lsls	r3, r3, #2
 8010288:	4413      	add	r3, r2
 801028a:	685b      	ldr	r3, [r3, #4]
 801028c:	685b      	ldr	r3, [r3, #4]
 801028e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	32b0      	adds	r2, #176	; 0xb0
 801029a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801029e:	4618      	mov	r0, r3
 80102a0:	f003 f8ca 	bl	8013438 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	32b0      	adds	r2, #176	; 0xb0
 80102ae:	2100      	movs	r1, #0
 80102b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2200      	movs	r2, #0
 80102b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80102bc:	2300      	movs	r3, #0
}
 80102be:	4618      	mov	r0, r3
 80102c0:	3708      	adds	r7, #8
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}
 80102c6:	bf00      	nop
 80102c8:	200000b3 	.word	0x200000b3
 80102cc:	200000b4 	.word	0x200000b4
 80102d0:	200000b5 	.word	0x200000b5

080102d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b086      	sub	sp, #24
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	32b0      	adds	r2, #176	; 0xb0
 80102e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80102ee:	2300      	movs	r3, #0
 80102f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80102f2:	2300      	movs	r3, #0
 80102f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80102f6:	2300      	movs	r3, #0
 80102f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80102fa:	693b      	ldr	r3, [r7, #16]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d101      	bne.n	8010304 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010300:	2303      	movs	r3, #3
 8010302:	e0bf      	b.n	8010484 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801030c:	2b00      	cmp	r3, #0
 801030e:	d050      	beq.n	80103b2 <USBD_CDC_Setup+0xde>
 8010310:	2b20      	cmp	r3, #32
 8010312:	f040 80af 	bne.w	8010474 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	88db      	ldrh	r3, [r3, #6]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d03a      	beq.n	8010394 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	781b      	ldrb	r3, [r3, #0]
 8010322:	b25b      	sxtb	r3, r3
 8010324:	2b00      	cmp	r3, #0
 8010326:	da1b      	bge.n	8010360 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801032e:	687a      	ldr	r2, [r7, #4]
 8010330:	33b0      	adds	r3, #176	; 0xb0
 8010332:	009b      	lsls	r3, r3, #2
 8010334:	4413      	add	r3, r2
 8010336:	685b      	ldr	r3, [r3, #4]
 8010338:	689b      	ldr	r3, [r3, #8]
 801033a:	683a      	ldr	r2, [r7, #0]
 801033c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801033e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010340:	683a      	ldr	r2, [r7, #0]
 8010342:	88d2      	ldrh	r2, [r2, #6]
 8010344:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	88db      	ldrh	r3, [r3, #6]
 801034a:	2b07      	cmp	r3, #7
 801034c:	bf28      	it	cs
 801034e:	2307      	movcs	r3, #7
 8010350:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	89fa      	ldrh	r2, [r7, #14]
 8010356:	4619      	mov	r1, r3
 8010358:	6878      	ldr	r0, [r7, #4]
 801035a:	f001 fd21 	bl	8011da0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801035e:	e090      	b.n	8010482 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	785a      	ldrb	r2, [r3, #1]
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	88db      	ldrh	r3, [r3, #6]
 801036e:	2b3f      	cmp	r3, #63	; 0x3f
 8010370:	d803      	bhi.n	801037a <USBD_CDC_Setup+0xa6>
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	88db      	ldrh	r3, [r3, #6]
 8010376:	b2da      	uxtb	r2, r3
 8010378:	e000      	b.n	801037c <USBD_CDC_Setup+0xa8>
 801037a:	2240      	movs	r2, #64	; 0x40
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010382:	6939      	ldr	r1, [r7, #16]
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801038a:	461a      	mov	r2, r3
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f001 fd33 	bl	8011df8 <USBD_CtlPrepareRx>
      break;
 8010392:	e076      	b.n	8010482 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801039a:	687a      	ldr	r2, [r7, #4]
 801039c:	33b0      	adds	r3, #176	; 0xb0
 801039e:	009b      	lsls	r3, r3, #2
 80103a0:	4413      	add	r3, r2
 80103a2:	685b      	ldr	r3, [r3, #4]
 80103a4:	689b      	ldr	r3, [r3, #8]
 80103a6:	683a      	ldr	r2, [r7, #0]
 80103a8:	7850      	ldrb	r0, [r2, #1]
 80103aa:	2200      	movs	r2, #0
 80103ac:	6839      	ldr	r1, [r7, #0]
 80103ae:	4798      	blx	r3
      break;
 80103b0:	e067      	b.n	8010482 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	785b      	ldrb	r3, [r3, #1]
 80103b6:	2b0b      	cmp	r3, #11
 80103b8:	d851      	bhi.n	801045e <USBD_CDC_Setup+0x18a>
 80103ba:	a201      	add	r2, pc, #4	; (adr r2, 80103c0 <USBD_CDC_Setup+0xec>)
 80103bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103c0:	080103f1 	.word	0x080103f1
 80103c4:	0801046d 	.word	0x0801046d
 80103c8:	0801045f 	.word	0x0801045f
 80103cc:	0801045f 	.word	0x0801045f
 80103d0:	0801045f 	.word	0x0801045f
 80103d4:	0801045f 	.word	0x0801045f
 80103d8:	0801045f 	.word	0x0801045f
 80103dc:	0801045f 	.word	0x0801045f
 80103e0:	0801045f 	.word	0x0801045f
 80103e4:	0801045f 	.word	0x0801045f
 80103e8:	0801041b 	.word	0x0801041b
 80103ec:	08010445 	.word	0x08010445
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103f6:	b2db      	uxtb	r3, r3
 80103f8:	2b03      	cmp	r3, #3
 80103fa:	d107      	bne.n	801040c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80103fc:	f107 030a 	add.w	r3, r7, #10
 8010400:	2202      	movs	r2, #2
 8010402:	4619      	mov	r1, r3
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f001 fccb 	bl	8011da0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801040a:	e032      	b.n	8010472 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801040c:	6839      	ldr	r1, [r7, #0]
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f001 fc55 	bl	8011cbe <USBD_CtlError>
            ret = USBD_FAIL;
 8010414:	2303      	movs	r3, #3
 8010416:	75fb      	strb	r3, [r7, #23]
          break;
 8010418:	e02b      	b.n	8010472 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010420:	b2db      	uxtb	r3, r3
 8010422:	2b03      	cmp	r3, #3
 8010424:	d107      	bne.n	8010436 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010426:	f107 030d 	add.w	r3, r7, #13
 801042a:	2201      	movs	r2, #1
 801042c:	4619      	mov	r1, r3
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f001 fcb6 	bl	8011da0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010434:	e01d      	b.n	8010472 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010436:	6839      	ldr	r1, [r7, #0]
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f001 fc40 	bl	8011cbe <USBD_CtlError>
            ret = USBD_FAIL;
 801043e:	2303      	movs	r3, #3
 8010440:	75fb      	strb	r3, [r7, #23]
          break;
 8010442:	e016      	b.n	8010472 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801044a:	b2db      	uxtb	r3, r3
 801044c:	2b03      	cmp	r3, #3
 801044e:	d00f      	beq.n	8010470 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010450:	6839      	ldr	r1, [r7, #0]
 8010452:	6878      	ldr	r0, [r7, #4]
 8010454:	f001 fc33 	bl	8011cbe <USBD_CtlError>
            ret = USBD_FAIL;
 8010458:	2303      	movs	r3, #3
 801045a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801045c:	e008      	b.n	8010470 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801045e:	6839      	ldr	r1, [r7, #0]
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f001 fc2c 	bl	8011cbe <USBD_CtlError>
          ret = USBD_FAIL;
 8010466:	2303      	movs	r3, #3
 8010468:	75fb      	strb	r3, [r7, #23]
          break;
 801046a:	e002      	b.n	8010472 <USBD_CDC_Setup+0x19e>
          break;
 801046c:	bf00      	nop
 801046e:	e008      	b.n	8010482 <USBD_CDC_Setup+0x1ae>
          break;
 8010470:	bf00      	nop
      }
      break;
 8010472:	e006      	b.n	8010482 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010474:	6839      	ldr	r1, [r7, #0]
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f001 fc21 	bl	8011cbe <USBD_CtlError>
      ret = USBD_FAIL;
 801047c:	2303      	movs	r3, #3
 801047e:	75fb      	strb	r3, [r7, #23]
      break;
 8010480:	bf00      	nop
  }

  return (uint8_t)ret;
 8010482:	7dfb      	ldrb	r3, [r7, #23]
}
 8010484:	4618      	mov	r0, r3
 8010486:	3718      	adds	r7, #24
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b084      	sub	sp, #16
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	460b      	mov	r3, r1
 8010496:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801049e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	32b0      	adds	r2, #176	; 0xb0
 80104aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d101      	bne.n	80104b6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80104b2:	2303      	movs	r3, #3
 80104b4:	e065      	b.n	8010582 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	32b0      	adds	r2, #176	; 0xb0
 80104c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80104c6:	78fb      	ldrb	r3, [r7, #3]
 80104c8:	f003 020f 	and.w	r2, r3, #15
 80104cc:	6879      	ldr	r1, [r7, #4]
 80104ce:	4613      	mov	r3, r2
 80104d0:	009b      	lsls	r3, r3, #2
 80104d2:	4413      	add	r3, r2
 80104d4:	009b      	lsls	r3, r3, #2
 80104d6:	440b      	add	r3, r1
 80104d8:	3318      	adds	r3, #24
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d02f      	beq.n	8010540 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80104e0:	78fb      	ldrb	r3, [r7, #3]
 80104e2:	f003 020f 	and.w	r2, r3, #15
 80104e6:	6879      	ldr	r1, [r7, #4]
 80104e8:	4613      	mov	r3, r2
 80104ea:	009b      	lsls	r3, r3, #2
 80104ec:	4413      	add	r3, r2
 80104ee:	009b      	lsls	r3, r3, #2
 80104f0:	440b      	add	r3, r1
 80104f2:	3318      	adds	r3, #24
 80104f4:	681a      	ldr	r2, [r3, #0]
 80104f6:	78fb      	ldrb	r3, [r7, #3]
 80104f8:	f003 010f 	and.w	r1, r3, #15
 80104fc:	68f8      	ldr	r0, [r7, #12]
 80104fe:	460b      	mov	r3, r1
 8010500:	009b      	lsls	r3, r3, #2
 8010502:	440b      	add	r3, r1
 8010504:	00db      	lsls	r3, r3, #3
 8010506:	4403      	add	r3, r0
 8010508:	3338      	adds	r3, #56	; 0x38
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	fbb2 f1f3 	udiv	r1, r2, r3
 8010510:	fb01 f303 	mul.w	r3, r1, r3
 8010514:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010516:	2b00      	cmp	r3, #0
 8010518:	d112      	bne.n	8010540 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801051a:	78fb      	ldrb	r3, [r7, #3]
 801051c:	f003 020f 	and.w	r2, r3, #15
 8010520:	6879      	ldr	r1, [r7, #4]
 8010522:	4613      	mov	r3, r2
 8010524:	009b      	lsls	r3, r3, #2
 8010526:	4413      	add	r3, r2
 8010528:	009b      	lsls	r3, r3, #2
 801052a:	440b      	add	r3, r1
 801052c:	3318      	adds	r3, #24
 801052e:	2200      	movs	r2, #0
 8010530:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010532:	78f9      	ldrb	r1, [r7, #3]
 8010534:	2300      	movs	r3, #0
 8010536:	2200      	movs	r2, #0
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f002 feb5 	bl	80132a8 <USBD_LL_Transmit>
 801053e:	e01f      	b.n	8010580 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	2200      	movs	r2, #0
 8010544:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801054e:	687a      	ldr	r2, [r7, #4]
 8010550:	33b0      	adds	r3, #176	; 0xb0
 8010552:	009b      	lsls	r3, r3, #2
 8010554:	4413      	add	r3, r2
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	691b      	ldr	r3, [r3, #16]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d010      	beq.n	8010580 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010564:	687a      	ldr	r2, [r7, #4]
 8010566:	33b0      	adds	r3, #176	; 0xb0
 8010568:	009b      	lsls	r3, r3, #2
 801056a:	4413      	add	r3, r2
 801056c:	685b      	ldr	r3, [r3, #4]
 801056e:	691b      	ldr	r3, [r3, #16]
 8010570:	68ba      	ldr	r2, [r7, #8]
 8010572:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010576:	68ba      	ldr	r2, [r7, #8]
 8010578:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801057c:	78fa      	ldrb	r2, [r7, #3]
 801057e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010580:	2300      	movs	r3, #0
}
 8010582:	4618      	mov	r0, r3
 8010584:	3710      	adds	r7, #16
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}

0801058a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801058a:	b580      	push	{r7, lr}
 801058c:	b084      	sub	sp, #16
 801058e:	af00      	add	r7, sp, #0
 8010590:	6078      	str	r0, [r7, #4]
 8010592:	460b      	mov	r3, r1
 8010594:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	32b0      	adds	r2, #176	; 0xb0
 80105a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	32b0      	adds	r2, #176	; 0xb0
 80105b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d101      	bne.n	80105bc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80105b8:	2303      	movs	r3, #3
 80105ba:	e01a      	b.n	80105f2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80105bc:	78fb      	ldrb	r3, [r7, #3]
 80105be:	4619      	mov	r1, r3
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f002 fee1 	bl	8013388 <USBD_LL_GetRxDataSize>
 80105c6:	4602      	mov	r2, r0
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80105d4:	687a      	ldr	r2, [r7, #4]
 80105d6:	33b0      	adds	r3, #176	; 0xb0
 80105d8:	009b      	lsls	r3, r3, #2
 80105da:	4413      	add	r3, r2
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	68db      	ldr	r3, [r3, #12]
 80105e0:	68fa      	ldr	r2, [r7, #12]
 80105e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80105e6:	68fa      	ldr	r2, [r7, #12]
 80105e8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80105ec:	4611      	mov	r1, r2
 80105ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80105f0:	2300      	movs	r3, #0
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3710      	adds	r7, #16
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}

080105fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80105fa:	b580      	push	{r7, lr}
 80105fc:	b084      	sub	sp, #16
 80105fe:	af00      	add	r7, sp, #0
 8010600:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	32b0      	adds	r2, #176	; 0xb0
 801060c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010610:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d101      	bne.n	801061c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010618:	2303      	movs	r3, #3
 801061a:	e025      	b.n	8010668 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010622:	687a      	ldr	r2, [r7, #4]
 8010624:	33b0      	adds	r3, #176	; 0xb0
 8010626:	009b      	lsls	r3, r3, #2
 8010628:	4413      	add	r3, r2
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d01a      	beq.n	8010666 <USBD_CDC_EP0_RxReady+0x6c>
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010636:	2bff      	cmp	r3, #255	; 0xff
 8010638:	d015      	beq.n	8010666 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	33b0      	adds	r3, #176	; 0xb0
 8010644:	009b      	lsls	r3, r3, #2
 8010646:	4413      	add	r3, r2
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	689b      	ldr	r3, [r3, #8]
 801064c:	68fa      	ldr	r2, [r7, #12]
 801064e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8010652:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010654:	68fa      	ldr	r2, [r7, #12]
 8010656:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801065a:	b292      	uxth	r2, r2
 801065c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	22ff      	movs	r2, #255	; 0xff
 8010662:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010666:	2300      	movs	r3, #0
}
 8010668:	4618      	mov	r0, r3
 801066a:	3710      	adds	r7, #16
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}

08010670 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b086      	sub	sp, #24
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010678:	2182      	movs	r1, #130	; 0x82
 801067a:	4818      	ldr	r0, [pc, #96]	; (80106dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 801067c:	f000 fcbd 	bl	8010ffa <USBD_GetEpDesc>
 8010680:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010682:	2101      	movs	r1, #1
 8010684:	4815      	ldr	r0, [pc, #84]	; (80106dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010686:	f000 fcb8 	bl	8010ffa <USBD_GetEpDesc>
 801068a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801068c:	2181      	movs	r1, #129	; 0x81
 801068e:	4813      	ldr	r0, [pc, #76]	; (80106dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010690:	f000 fcb3 	bl	8010ffa <USBD_GetEpDesc>
 8010694:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d002      	beq.n	80106a2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801069c:	697b      	ldr	r3, [r7, #20]
 801069e:	2210      	movs	r2, #16
 80106a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80106a2:	693b      	ldr	r3, [r7, #16]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d006      	beq.n	80106b6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	2200      	movs	r2, #0
 80106ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80106b0:	711a      	strb	r2, [r3, #4]
 80106b2:	2200      	movs	r2, #0
 80106b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d006      	beq.n	80106ca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	2200      	movs	r2, #0
 80106c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80106c4:	711a      	strb	r2, [r3, #4]
 80106c6:	2200      	movs	r2, #0
 80106c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2243      	movs	r2, #67	; 0x43
 80106ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80106d0:	4b02      	ldr	r3, [pc, #8]	; (80106dc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3718      	adds	r7, #24
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
 80106da:	bf00      	nop
 80106dc:	20000070 	.word	0x20000070

080106e0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b086      	sub	sp, #24
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80106e8:	2182      	movs	r1, #130	; 0x82
 80106ea:	4818      	ldr	r0, [pc, #96]	; (801074c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80106ec:	f000 fc85 	bl	8010ffa <USBD_GetEpDesc>
 80106f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80106f2:	2101      	movs	r1, #1
 80106f4:	4815      	ldr	r0, [pc, #84]	; (801074c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80106f6:	f000 fc80 	bl	8010ffa <USBD_GetEpDesc>
 80106fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80106fc:	2181      	movs	r1, #129	; 0x81
 80106fe:	4813      	ldr	r0, [pc, #76]	; (801074c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010700:	f000 fc7b 	bl	8010ffa <USBD_GetEpDesc>
 8010704:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d002      	beq.n	8010712 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801070c:	697b      	ldr	r3, [r7, #20]
 801070e:	2210      	movs	r2, #16
 8010710:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d006      	beq.n	8010726 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010718:	693b      	ldr	r3, [r7, #16]
 801071a:	2200      	movs	r2, #0
 801071c:	711a      	strb	r2, [r3, #4]
 801071e:	2200      	movs	r2, #0
 8010720:	f042 0202 	orr.w	r2, r2, #2
 8010724:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d006      	beq.n	801073a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	2200      	movs	r2, #0
 8010730:	711a      	strb	r2, [r3, #4]
 8010732:	2200      	movs	r2, #0
 8010734:	f042 0202 	orr.w	r2, r2, #2
 8010738:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2243      	movs	r2, #67	; 0x43
 801073e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010740:	4b02      	ldr	r3, [pc, #8]	; (801074c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8010742:	4618      	mov	r0, r3
 8010744:	3718      	adds	r7, #24
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	20000070 	.word	0x20000070

08010750 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b086      	sub	sp, #24
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010758:	2182      	movs	r1, #130	; 0x82
 801075a:	4818      	ldr	r0, [pc, #96]	; (80107bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801075c:	f000 fc4d 	bl	8010ffa <USBD_GetEpDesc>
 8010760:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010762:	2101      	movs	r1, #1
 8010764:	4815      	ldr	r0, [pc, #84]	; (80107bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010766:	f000 fc48 	bl	8010ffa <USBD_GetEpDesc>
 801076a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801076c:	2181      	movs	r1, #129	; 0x81
 801076e:	4813      	ldr	r0, [pc, #76]	; (80107bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010770:	f000 fc43 	bl	8010ffa <USBD_GetEpDesc>
 8010774:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d002      	beq.n	8010782 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	2210      	movs	r2, #16
 8010780:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d006      	beq.n	8010796 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	2200      	movs	r2, #0
 801078c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010790:	711a      	strb	r2, [r3, #4]
 8010792:	2200      	movs	r2, #0
 8010794:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d006      	beq.n	80107aa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	2200      	movs	r2, #0
 80107a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80107a4:	711a      	strb	r2, [r3, #4]
 80107a6:	2200      	movs	r2, #0
 80107a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2243      	movs	r2, #67	; 0x43
 80107ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80107b0:	4b02      	ldr	r3, [pc, #8]	; (80107bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3718      	adds	r7, #24
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}
 80107ba:	bf00      	nop
 80107bc:	20000070 	.word	0x20000070

080107c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80107c0:	b480      	push	{r7}
 80107c2:	b083      	sub	sp, #12
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	220a      	movs	r2, #10
 80107cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80107ce:	4b03      	ldr	r3, [pc, #12]	; (80107dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80107d0:	4618      	mov	r0, r3
 80107d2:	370c      	adds	r7, #12
 80107d4:	46bd      	mov	sp, r7
 80107d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107da:	4770      	bx	lr
 80107dc:	2000002c 	.word	0x2000002c

080107e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80107e0:	b480      	push	{r7}
 80107e2:	b083      	sub	sp, #12
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d101      	bne.n	80107f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80107f0:	2303      	movs	r3, #3
 80107f2:	e009      	b.n	8010808 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80107fa:	687a      	ldr	r2, [r7, #4]
 80107fc:	33b0      	adds	r3, #176	; 0xb0
 80107fe:	009b      	lsls	r3, r3, #2
 8010800:	4413      	add	r3, r2
 8010802:	683a      	ldr	r2, [r7, #0]
 8010804:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010806:	2300      	movs	r3, #0
}
 8010808:	4618      	mov	r0, r3
 801080a:	370c      	adds	r7, #12
 801080c:	46bd      	mov	sp, r7
 801080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010812:	4770      	bx	lr

08010814 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010814:	b480      	push	{r7}
 8010816:	b087      	sub	sp, #28
 8010818:	af00      	add	r7, sp, #0
 801081a:	60f8      	str	r0, [r7, #12]
 801081c:	60b9      	str	r1, [r7, #8]
 801081e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	32b0      	adds	r2, #176	; 0xb0
 801082a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801082e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d101      	bne.n	801083a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010836:	2303      	movs	r3, #3
 8010838:	e008      	b.n	801084c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	68ba      	ldr	r2, [r7, #8]
 801083e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010842:	697b      	ldr	r3, [r7, #20]
 8010844:	687a      	ldr	r2, [r7, #4]
 8010846:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801084a:	2300      	movs	r3, #0
}
 801084c:	4618      	mov	r0, r3
 801084e:	371c      	adds	r7, #28
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr

08010858 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010858:	b480      	push	{r7}
 801085a:	b085      	sub	sp, #20
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
 8010860:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	32b0      	adds	r2, #176	; 0xb0
 801086c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010870:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d101      	bne.n	801087c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010878:	2303      	movs	r3, #3
 801087a:	e004      	b.n	8010886 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	683a      	ldr	r2, [r7, #0]
 8010880:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010884:	2300      	movs	r3, #0
}
 8010886:	4618      	mov	r0, r3
 8010888:	3714      	adds	r7, #20
 801088a:	46bd      	mov	sp, r7
 801088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010890:	4770      	bx	lr
	...

08010894 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b084      	sub	sp, #16
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	32b0      	adds	r2, #176	; 0xb0
 80108a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108aa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80108ac:	2301      	movs	r3, #1
 80108ae:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d101      	bne.n	80108ba <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80108b6:	2303      	movs	r3, #3
 80108b8:	e025      	b.n	8010906 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d11f      	bne.n	8010904 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	2201      	movs	r2, #1
 80108c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80108cc:	4b10      	ldr	r3, [pc, #64]	; (8010910 <USBD_CDC_TransmitPacket+0x7c>)
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	f003 020f 	and.w	r2, r3, #15
 80108d4:	68bb      	ldr	r3, [r7, #8]
 80108d6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	4613      	mov	r3, r2
 80108de:	009b      	lsls	r3, r3, #2
 80108e0:	4413      	add	r3, r2
 80108e2:	009b      	lsls	r3, r3, #2
 80108e4:	4403      	add	r3, r0
 80108e6:	3318      	adds	r3, #24
 80108e8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80108ea:	4b09      	ldr	r3, [pc, #36]	; (8010910 <USBD_CDC_TransmitPacket+0x7c>)
 80108ec:	7819      	ldrb	r1, [r3, #0]
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f002 fcd4 	bl	80132a8 <USBD_LL_Transmit>

    ret = USBD_OK;
 8010900:	2300      	movs	r3, #0
 8010902:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010904:	7bfb      	ldrb	r3, [r7, #15]
}
 8010906:	4618      	mov	r0, r3
 8010908:	3710      	adds	r7, #16
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	200000b3 	.word	0x200000b3

08010914 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b084      	sub	sp, #16
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	32b0      	adds	r2, #176	; 0xb0
 8010926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801092a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	32b0      	adds	r2, #176	; 0xb0
 8010936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d101      	bne.n	8010942 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801093e:	2303      	movs	r3, #3
 8010940:	e018      	b.n	8010974 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	7c1b      	ldrb	r3, [r3, #16]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d10a      	bne.n	8010960 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801094a:	4b0c      	ldr	r3, [pc, #48]	; (801097c <USBD_CDC_ReceivePacket+0x68>)
 801094c:	7819      	ldrb	r1, [r3, #0]
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010954:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f002 fcdd 	bl	8013318 <USBD_LL_PrepareReceive>
 801095e:	e008      	b.n	8010972 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010960:	4b06      	ldr	r3, [pc, #24]	; (801097c <USBD_CDC_ReceivePacket+0x68>)
 8010962:	7819      	ldrb	r1, [r3, #0]
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801096a:	2340      	movs	r3, #64	; 0x40
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f002 fcd3 	bl	8013318 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010972:	2300      	movs	r3, #0
}
 8010974:	4618      	mov	r0, r3
 8010976:	3710      	adds	r7, #16
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}
 801097c:	200000b4 	.word	0x200000b4

08010980 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b086      	sub	sp, #24
 8010984:	af00      	add	r7, sp, #0
 8010986:	60f8      	str	r0, [r7, #12]
 8010988:	60b9      	str	r1, [r7, #8]
 801098a:	4613      	mov	r3, r2
 801098c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d101      	bne.n	8010998 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010994:	2303      	movs	r3, #3
 8010996:	e01f      	b.n	80109d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2200      	movs	r2, #0
 801099c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	2200      	movs	r2, #0
 80109a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	2200      	movs	r2, #0
 80109ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d003      	beq.n	80109be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	68ba      	ldr	r2, [r7, #8]
 80109ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	2201      	movs	r2, #1
 80109c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	79fa      	ldrb	r2, [r7, #7]
 80109ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80109cc:	68f8      	ldr	r0, [r7, #12]
 80109ce:	f002 fa93 	bl	8012ef8 <USBD_LL_Init>
 80109d2:	4603      	mov	r3, r0
 80109d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80109d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3718      	adds	r7, #24
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b084      	sub	sp, #16
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80109ea:	2300      	movs	r3, #0
 80109ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d101      	bne.n	80109f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80109f4:	2303      	movs	r3, #3
 80109f6:	e025      	b.n	8010a44 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	683a      	ldr	r2, [r7, #0]
 80109fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	32ae      	adds	r2, #174	; 0xae
 8010a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d00f      	beq.n	8010a34 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	32ae      	adds	r2, #174	; 0xae
 8010a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a24:	f107 020e 	add.w	r2, r7, #14
 8010a28:	4610      	mov	r0, r2
 8010a2a:	4798      	blx	r3
 8010a2c:	4602      	mov	r2, r0
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8010a3a:	1c5a      	adds	r2, r3, #1
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8010a42:	2300      	movs	r3, #0
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3710      	adds	r7, #16
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}

08010a4c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b082      	sub	sp, #8
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f002 fab1 	bl	8012fbc <USBD_LL_Start>
 8010a5a:	4603      	mov	r3, r0
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3708      	adds	r7, #8
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}

08010a64 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010a64:	b480      	push	{r7}
 8010a66:	b083      	sub	sp, #12
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010a6c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	370c      	adds	r7, #12
 8010a72:	46bd      	mov	sp, r7
 8010a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a78:	4770      	bx	lr

08010a7a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a7a:	b580      	push	{r7, lr}
 8010a7c:	b084      	sub	sp, #16
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	6078      	str	r0, [r7, #4]
 8010a82:	460b      	mov	r3, r1
 8010a84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a86:	2300      	movs	r3, #0
 8010a88:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d009      	beq.n	8010aa8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	78fa      	ldrb	r2, [r7, #3]
 8010a9e:	4611      	mov	r1, r2
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	4798      	blx	r3
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3710      	adds	r7, #16
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}

08010ab2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010ab2:	b580      	push	{r7, lr}
 8010ab4:	b084      	sub	sp, #16
 8010ab6:	af00      	add	r7, sp, #0
 8010ab8:	6078      	str	r0, [r7, #4]
 8010aba:	460b      	mov	r3, r1
 8010abc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ac8:	685b      	ldr	r3, [r3, #4]
 8010aca:	78fa      	ldrb	r2, [r7, #3]
 8010acc:	4611      	mov	r1, r2
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	4798      	blx	r3
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d001      	beq.n	8010adc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010ad8:	2303      	movs	r3, #3
 8010ada:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3710      	adds	r7, #16
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}

08010ae6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010ae6:	b580      	push	{r7, lr}
 8010ae8:	b084      	sub	sp, #16
 8010aea:	af00      	add	r7, sp, #0
 8010aec:	6078      	str	r0, [r7, #4]
 8010aee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010af6:	6839      	ldr	r1, [r7, #0]
 8010af8:	4618      	mov	r0, r3
 8010afa:	f001 f8a6 	bl	8011c4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2201      	movs	r2, #1
 8010b02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010b0c:	461a      	mov	r2, r3
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010b1a:	f003 031f 	and.w	r3, r3, #31
 8010b1e:	2b02      	cmp	r3, #2
 8010b20:	d01a      	beq.n	8010b58 <USBD_LL_SetupStage+0x72>
 8010b22:	2b02      	cmp	r3, #2
 8010b24:	d822      	bhi.n	8010b6c <USBD_LL_SetupStage+0x86>
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d002      	beq.n	8010b30 <USBD_LL_SetupStage+0x4a>
 8010b2a:	2b01      	cmp	r3, #1
 8010b2c:	d00a      	beq.n	8010b44 <USBD_LL_SetupStage+0x5e>
 8010b2e:	e01d      	b.n	8010b6c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010b36:	4619      	mov	r1, r3
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	f000 fad3 	bl	80110e4 <USBD_StdDevReq>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	73fb      	strb	r3, [r7, #15]
      break;
 8010b42:	e020      	b.n	8010b86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010b4a:	4619      	mov	r1, r3
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f000 fb3b 	bl	80111c8 <USBD_StdItfReq>
 8010b52:	4603      	mov	r3, r0
 8010b54:	73fb      	strb	r3, [r7, #15]
      break;
 8010b56:	e016      	b.n	8010b86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010b5e:	4619      	mov	r1, r3
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f000 fb9d 	bl	80112a0 <USBD_StdEPReq>
 8010b66:	4603      	mov	r3, r0
 8010b68:	73fb      	strb	r3, [r7, #15]
      break;
 8010b6a:	e00c      	b.n	8010b86 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010b72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	4619      	mov	r1, r3
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f002 fac4 	bl	8013108 <USBD_LL_StallEP>
 8010b80:	4603      	mov	r3, r0
 8010b82:	73fb      	strb	r3, [r7, #15]
      break;
 8010b84:	bf00      	nop
  }

  return ret;
 8010b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3710      	adds	r7, #16
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}

08010b90 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b086      	sub	sp, #24
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	60f8      	str	r0, [r7, #12]
 8010b98:	460b      	mov	r3, r1
 8010b9a:	607a      	str	r2, [r7, #4]
 8010b9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8010ba2:	7afb      	ldrb	r3, [r7, #11]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d16e      	bne.n	8010c86 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010bae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010bb6:	2b03      	cmp	r3, #3
 8010bb8:	f040 8098 	bne.w	8010cec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010bbc:	693b      	ldr	r3, [r7, #16]
 8010bbe:	689a      	ldr	r2, [r3, #8]
 8010bc0:	693b      	ldr	r3, [r7, #16]
 8010bc2:	68db      	ldr	r3, [r3, #12]
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d913      	bls.n	8010bf0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010bc8:	693b      	ldr	r3, [r7, #16]
 8010bca:	689a      	ldr	r2, [r3, #8]
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	68db      	ldr	r3, [r3, #12]
 8010bd0:	1ad2      	subs	r2, r2, r3
 8010bd2:	693b      	ldr	r3, [r7, #16]
 8010bd4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010bd6:	693b      	ldr	r3, [r7, #16]
 8010bd8:	68da      	ldr	r2, [r3, #12]
 8010bda:	693b      	ldr	r3, [r7, #16]
 8010bdc:	689b      	ldr	r3, [r3, #8]
 8010bde:	4293      	cmp	r3, r2
 8010be0:	bf28      	it	cs
 8010be2:	4613      	movcs	r3, r2
 8010be4:	461a      	mov	r2, r3
 8010be6:	6879      	ldr	r1, [r7, #4]
 8010be8:	68f8      	ldr	r0, [r7, #12]
 8010bea:	f001 f922 	bl	8011e32 <USBD_CtlContinueRx>
 8010bee:	e07d      	b.n	8010cec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010bf6:	f003 031f 	and.w	r3, r3, #31
 8010bfa:	2b02      	cmp	r3, #2
 8010bfc:	d014      	beq.n	8010c28 <USBD_LL_DataOutStage+0x98>
 8010bfe:	2b02      	cmp	r3, #2
 8010c00:	d81d      	bhi.n	8010c3e <USBD_LL_DataOutStage+0xae>
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d002      	beq.n	8010c0c <USBD_LL_DataOutStage+0x7c>
 8010c06:	2b01      	cmp	r3, #1
 8010c08:	d003      	beq.n	8010c12 <USBD_LL_DataOutStage+0x82>
 8010c0a:	e018      	b.n	8010c3e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	75bb      	strb	r3, [r7, #22]
            break;
 8010c10:	e018      	b.n	8010c44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8010c18:	b2db      	uxtb	r3, r3
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	68f8      	ldr	r0, [r7, #12]
 8010c1e:	f000 f9d2 	bl	8010fc6 <USBD_CoreFindIF>
 8010c22:	4603      	mov	r3, r0
 8010c24:	75bb      	strb	r3, [r7, #22]
            break;
 8010c26:	e00d      	b.n	8010c44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8010c2e:	b2db      	uxtb	r3, r3
 8010c30:	4619      	mov	r1, r3
 8010c32:	68f8      	ldr	r0, [r7, #12]
 8010c34:	f000 f9d4 	bl	8010fe0 <USBD_CoreFindEP>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	75bb      	strb	r3, [r7, #22]
            break;
 8010c3c:	e002      	b.n	8010c44 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	75bb      	strb	r3, [r7, #22]
            break;
 8010c42:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010c44:	7dbb      	ldrb	r3, [r7, #22]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d119      	bne.n	8010c7e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c50:	b2db      	uxtb	r3, r3
 8010c52:	2b03      	cmp	r3, #3
 8010c54:	d113      	bne.n	8010c7e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010c56:	7dba      	ldrb	r2, [r7, #22]
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	32ae      	adds	r2, #174	; 0xae
 8010c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c60:	691b      	ldr	r3, [r3, #16]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d00b      	beq.n	8010c7e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010c66:	7dba      	ldrb	r2, [r7, #22]
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010c6e:	7dba      	ldrb	r2, [r7, #22]
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	32ae      	adds	r2, #174	; 0xae
 8010c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c78:	691b      	ldr	r3, [r3, #16]
 8010c7a:	68f8      	ldr	r0, [r7, #12]
 8010c7c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010c7e:	68f8      	ldr	r0, [r7, #12]
 8010c80:	f001 f8e8 	bl	8011e54 <USBD_CtlSendStatus>
 8010c84:	e032      	b.n	8010cec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010c86:	7afb      	ldrb	r3, [r7, #11]
 8010c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	4619      	mov	r1, r3
 8010c90:	68f8      	ldr	r0, [r7, #12]
 8010c92:	f000 f9a5 	bl	8010fe0 <USBD_CoreFindEP>
 8010c96:	4603      	mov	r3, r0
 8010c98:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010c9a:	7dbb      	ldrb	r3, [r7, #22]
 8010c9c:	2bff      	cmp	r3, #255	; 0xff
 8010c9e:	d025      	beq.n	8010cec <USBD_LL_DataOutStage+0x15c>
 8010ca0:	7dbb      	ldrb	r3, [r7, #22]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d122      	bne.n	8010cec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010cac:	b2db      	uxtb	r3, r3
 8010cae:	2b03      	cmp	r3, #3
 8010cb0:	d117      	bne.n	8010ce2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010cb2:	7dba      	ldrb	r2, [r7, #22]
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	32ae      	adds	r2, #174	; 0xae
 8010cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cbc:	699b      	ldr	r3, [r3, #24]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d00f      	beq.n	8010ce2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010cc2:	7dba      	ldrb	r2, [r7, #22]
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010cca:	7dba      	ldrb	r2, [r7, #22]
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	32ae      	adds	r2, #174	; 0xae
 8010cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cd4:	699b      	ldr	r3, [r3, #24]
 8010cd6:	7afa      	ldrb	r2, [r7, #11]
 8010cd8:	4611      	mov	r1, r2
 8010cda:	68f8      	ldr	r0, [r7, #12]
 8010cdc:	4798      	blx	r3
 8010cde:	4603      	mov	r3, r0
 8010ce0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010ce2:	7dfb      	ldrb	r3, [r7, #23]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d001      	beq.n	8010cec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010ce8:	7dfb      	ldrb	r3, [r7, #23]
 8010cea:	e000      	b.n	8010cee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010cec:	2300      	movs	r3, #0
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3718      	adds	r7, #24
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}

08010cf6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010cf6:	b580      	push	{r7, lr}
 8010cf8:	b086      	sub	sp, #24
 8010cfa:	af00      	add	r7, sp, #0
 8010cfc:	60f8      	str	r0, [r7, #12]
 8010cfe:	460b      	mov	r3, r1
 8010d00:	607a      	str	r2, [r7, #4]
 8010d02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010d04:	7afb      	ldrb	r3, [r7, #11]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d16f      	bne.n	8010dea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	3314      	adds	r3, #20
 8010d0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010d16:	2b02      	cmp	r3, #2
 8010d18:	d15a      	bne.n	8010dd0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	689a      	ldr	r2, [r3, #8]
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	68db      	ldr	r3, [r3, #12]
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d914      	bls.n	8010d50 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	689a      	ldr	r2, [r3, #8]
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	68db      	ldr	r3, [r3, #12]
 8010d2e:	1ad2      	subs	r2, r2, r3
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010d34:	693b      	ldr	r3, [r7, #16]
 8010d36:	689b      	ldr	r3, [r3, #8]
 8010d38:	461a      	mov	r2, r3
 8010d3a:	6879      	ldr	r1, [r7, #4]
 8010d3c:	68f8      	ldr	r0, [r7, #12]
 8010d3e:	f001 f84a 	bl	8011dd6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010d42:	2300      	movs	r3, #0
 8010d44:	2200      	movs	r2, #0
 8010d46:	2100      	movs	r1, #0
 8010d48:	68f8      	ldr	r0, [r7, #12]
 8010d4a:	f002 fae5 	bl	8013318 <USBD_LL_PrepareReceive>
 8010d4e:	e03f      	b.n	8010dd0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010d50:	693b      	ldr	r3, [r7, #16]
 8010d52:	68da      	ldr	r2, [r3, #12]
 8010d54:	693b      	ldr	r3, [r7, #16]
 8010d56:	689b      	ldr	r3, [r3, #8]
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d11c      	bne.n	8010d96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	685a      	ldr	r2, [r3, #4]
 8010d60:	693b      	ldr	r3, [r7, #16]
 8010d62:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d316      	bcc.n	8010d96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010d68:	693b      	ldr	r3, [r7, #16]
 8010d6a:	685a      	ldr	r2, [r3, #4]
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d20f      	bcs.n	8010d96 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010d76:	2200      	movs	r2, #0
 8010d78:	2100      	movs	r1, #0
 8010d7a:	68f8      	ldr	r0, [r7, #12]
 8010d7c:	f001 f82b 	bl	8011dd6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	2200      	movs	r2, #0
 8010d84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010d88:	2300      	movs	r3, #0
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	2100      	movs	r1, #0
 8010d8e:	68f8      	ldr	r0, [r7, #12]
 8010d90:	f002 fac2 	bl	8013318 <USBD_LL_PrepareReceive>
 8010d94:	e01c      	b.n	8010dd0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d9c:	b2db      	uxtb	r3, r3
 8010d9e:	2b03      	cmp	r3, #3
 8010da0:	d10f      	bne.n	8010dc2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010da8:	68db      	ldr	r3, [r3, #12]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d009      	beq.n	8010dc2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	2200      	movs	r2, #0
 8010db2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010dbc:	68db      	ldr	r3, [r3, #12]
 8010dbe:	68f8      	ldr	r0, [r7, #12]
 8010dc0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010dc2:	2180      	movs	r1, #128	; 0x80
 8010dc4:	68f8      	ldr	r0, [r7, #12]
 8010dc6:	f002 f99f 	bl	8013108 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010dca:	68f8      	ldr	r0, [r7, #12]
 8010dcc:	f001 f855 	bl	8011e7a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d03a      	beq.n	8010e50 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010dda:	68f8      	ldr	r0, [r7, #12]
 8010ddc:	f7ff fe42 	bl	8010a64 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	2200      	movs	r2, #0
 8010de4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010de8:	e032      	b.n	8010e50 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010dea:	7afb      	ldrb	r3, [r7, #11]
 8010dec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010df0:	b2db      	uxtb	r3, r3
 8010df2:	4619      	mov	r1, r3
 8010df4:	68f8      	ldr	r0, [r7, #12]
 8010df6:	f000 f8f3 	bl	8010fe0 <USBD_CoreFindEP>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010dfe:	7dfb      	ldrb	r3, [r7, #23]
 8010e00:	2bff      	cmp	r3, #255	; 0xff
 8010e02:	d025      	beq.n	8010e50 <USBD_LL_DataInStage+0x15a>
 8010e04:	7dfb      	ldrb	r3, [r7, #23]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d122      	bne.n	8010e50 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e10:	b2db      	uxtb	r3, r3
 8010e12:	2b03      	cmp	r3, #3
 8010e14:	d11c      	bne.n	8010e50 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010e16:	7dfa      	ldrb	r2, [r7, #23]
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	32ae      	adds	r2, #174	; 0xae
 8010e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e20:	695b      	ldr	r3, [r3, #20]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d014      	beq.n	8010e50 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8010e26:	7dfa      	ldrb	r2, [r7, #23]
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010e2e:	7dfa      	ldrb	r2, [r7, #23]
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	32ae      	adds	r2, #174	; 0xae
 8010e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e38:	695b      	ldr	r3, [r3, #20]
 8010e3a:	7afa      	ldrb	r2, [r7, #11]
 8010e3c:	4611      	mov	r1, r2
 8010e3e:	68f8      	ldr	r0, [r7, #12]
 8010e40:	4798      	blx	r3
 8010e42:	4603      	mov	r3, r0
 8010e44:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010e46:	7dbb      	ldrb	r3, [r7, #22]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d001      	beq.n	8010e50 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010e4c:	7dbb      	ldrb	r3, [r7, #22]
 8010e4e:	e000      	b.n	8010e52 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010e50:	2300      	movs	r3, #0
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3718      	adds	r7, #24
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}

08010e5a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010e5a:	b580      	push	{r7, lr}
 8010e5c:	b084      	sub	sp, #16
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010e62:	2300      	movs	r3, #0
 8010e64:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2201      	movs	r2, #1
 8010e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2200      	movs	r2, #0
 8010e72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	2200      	movs	r2, #0
 8010e7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2200      	movs	r2, #0
 8010e80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2200      	movs	r2, #0
 8010e88:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d014      	beq.n	8010ec0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e9c:	685b      	ldr	r3, [r3, #4]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d00e      	beq.n	8010ec0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ea8:	685b      	ldr	r3, [r3, #4]
 8010eaa:	687a      	ldr	r2, [r7, #4]
 8010eac:	6852      	ldr	r2, [r2, #4]
 8010eae:	b2d2      	uxtb	r2, r2
 8010eb0:	4611      	mov	r1, r2
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	4798      	blx	r3
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d001      	beq.n	8010ec0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010ebc:	2303      	movs	r3, #3
 8010ebe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010ec0:	2340      	movs	r3, #64	; 0x40
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	2100      	movs	r1, #0
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	f002 f8aa 	bl	8013020 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2201      	movs	r2, #1
 8010ed0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2240      	movs	r2, #64	; 0x40
 8010ed8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010edc:	2340      	movs	r3, #64	; 0x40
 8010ede:	2200      	movs	r2, #0
 8010ee0:	2180      	movs	r1, #128	; 0x80
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f002 f89c 	bl	8013020 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2201      	movs	r2, #1
 8010eec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2240      	movs	r2, #64	; 0x40
 8010ef2:	621a      	str	r2, [r3, #32]

  return ret;
 8010ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	3710      	adds	r7, #16
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}

08010efe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010efe:	b480      	push	{r7}
 8010f00:	b083      	sub	sp, #12
 8010f02:	af00      	add	r7, sp, #0
 8010f04:	6078      	str	r0, [r7, #4]
 8010f06:	460b      	mov	r3, r1
 8010f08:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	78fa      	ldrb	r2, [r7, #3]
 8010f0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010f10:	2300      	movs	r3, #0
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	370c      	adds	r7, #12
 8010f16:	46bd      	mov	sp, r7
 8010f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1c:	4770      	bx	lr

08010f1e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010f1e:	b480      	push	{r7}
 8010f20:	b083      	sub	sp, #12
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f2c:	b2db      	uxtb	r3, r3
 8010f2e:	2b04      	cmp	r3, #4
 8010f30:	d006      	beq.n	8010f40 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f38:	b2da      	uxtb	r2, r3
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2204      	movs	r2, #4
 8010f44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010f48:	2300      	movs	r3, #0
}
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	370c      	adds	r7, #12
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f54:	4770      	bx	lr

08010f56 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010f56:	b480      	push	{r7}
 8010f58:	b083      	sub	sp, #12
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f64:	b2db      	uxtb	r3, r3
 8010f66:	2b04      	cmp	r3, #4
 8010f68:	d106      	bne.n	8010f78 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010f70:	b2da      	uxtb	r2, r3
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010f78:	2300      	movs	r3, #0
}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	370c      	adds	r7, #12
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f84:	4770      	bx	lr

08010f86 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010f86:	b580      	push	{r7, lr}
 8010f88:	b082      	sub	sp, #8
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f94:	b2db      	uxtb	r3, r3
 8010f96:	2b03      	cmp	r3, #3
 8010f98:	d110      	bne.n	8010fbc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d00b      	beq.n	8010fbc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010faa:	69db      	ldr	r3, [r3, #28]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d005      	beq.n	8010fbc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fb6:	69db      	ldr	r3, [r3, #28]
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010fbc:	2300      	movs	r3, #0
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3708      	adds	r7, #8
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}

08010fc6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010fc6:	b480      	push	{r7}
 8010fc8:	b083      	sub	sp, #12
 8010fca:	af00      	add	r7, sp, #0
 8010fcc:	6078      	str	r0, [r7, #4]
 8010fce:	460b      	mov	r3, r1
 8010fd0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010fd2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	370c      	adds	r7, #12
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fde:	4770      	bx	lr

08010fe0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010fe0:	b480      	push	{r7}
 8010fe2:	b083      	sub	sp, #12
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
 8010fe8:	460b      	mov	r3, r1
 8010fea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010fec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	370c      	adds	r7, #12
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff8:	4770      	bx	lr

08010ffa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010ffa:	b580      	push	{r7, lr}
 8010ffc:	b086      	sub	sp, #24
 8010ffe:	af00      	add	r7, sp, #0
 8011000:	6078      	str	r0, [r7, #4]
 8011002:	460b      	mov	r3, r1
 8011004:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801100e:	2300      	movs	r3, #0
 8011010:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	885b      	ldrh	r3, [r3, #2]
 8011016:	b29a      	uxth	r2, r3
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	b29b      	uxth	r3, r3
 801101e:	429a      	cmp	r2, r3
 8011020:	d920      	bls.n	8011064 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	b29b      	uxth	r3, r3
 8011028:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801102a:	e013      	b.n	8011054 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801102c:	f107 030a 	add.w	r3, r7, #10
 8011030:	4619      	mov	r1, r3
 8011032:	6978      	ldr	r0, [r7, #20]
 8011034:	f000 f81b 	bl	801106e <USBD_GetNextDesc>
 8011038:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801103a:	697b      	ldr	r3, [r7, #20]
 801103c:	785b      	ldrb	r3, [r3, #1]
 801103e:	2b05      	cmp	r3, #5
 8011040:	d108      	bne.n	8011054 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	789b      	ldrb	r3, [r3, #2]
 801104a:	78fa      	ldrb	r2, [r7, #3]
 801104c:	429a      	cmp	r2, r3
 801104e:	d008      	beq.n	8011062 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011050:	2300      	movs	r3, #0
 8011052:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	885b      	ldrh	r3, [r3, #2]
 8011058:	b29a      	uxth	r2, r3
 801105a:	897b      	ldrh	r3, [r7, #10]
 801105c:	429a      	cmp	r2, r3
 801105e:	d8e5      	bhi.n	801102c <USBD_GetEpDesc+0x32>
 8011060:	e000      	b.n	8011064 <USBD_GetEpDesc+0x6a>
          break;
 8011062:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011064:	693b      	ldr	r3, [r7, #16]
}
 8011066:	4618      	mov	r0, r3
 8011068:	3718      	adds	r7, #24
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}

0801106e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801106e:	b480      	push	{r7}
 8011070:	b085      	sub	sp, #20
 8011072:	af00      	add	r7, sp, #0
 8011074:	6078      	str	r0, [r7, #4]
 8011076:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	881a      	ldrh	r2, [r3, #0]
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	b29b      	uxth	r3, r3
 8011086:	4413      	add	r3, r2
 8011088:	b29a      	uxth	r2, r3
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	461a      	mov	r2, r3
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	4413      	add	r3, r2
 8011098:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801109a:	68fb      	ldr	r3, [r7, #12]
}
 801109c:	4618      	mov	r0, r3
 801109e:	3714      	adds	r7, #20
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr

080110a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80110a8:	b480      	push	{r7}
 80110aa:	b087      	sub	sp, #28
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	3301      	adds	r3, #1
 80110be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	781b      	ldrb	r3, [r3, #0]
 80110c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80110c6:	8a3b      	ldrh	r3, [r7, #16]
 80110c8:	021b      	lsls	r3, r3, #8
 80110ca:	b21a      	sxth	r2, r3
 80110cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80110d0:	4313      	orrs	r3, r2
 80110d2:	b21b      	sxth	r3, r3
 80110d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80110d6:	89fb      	ldrh	r3, [r7, #14]
}
 80110d8:	4618      	mov	r0, r3
 80110da:	371c      	adds	r7, #28
 80110dc:	46bd      	mov	sp, r7
 80110de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e2:	4770      	bx	lr

080110e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b084      	sub	sp, #16
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80110ee:	2300      	movs	r3, #0
 80110f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80110fa:	2b40      	cmp	r3, #64	; 0x40
 80110fc:	d005      	beq.n	801110a <USBD_StdDevReq+0x26>
 80110fe:	2b40      	cmp	r3, #64	; 0x40
 8011100:	d857      	bhi.n	80111b2 <USBD_StdDevReq+0xce>
 8011102:	2b00      	cmp	r3, #0
 8011104:	d00f      	beq.n	8011126 <USBD_StdDevReq+0x42>
 8011106:	2b20      	cmp	r3, #32
 8011108:	d153      	bne.n	80111b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	32ae      	adds	r2, #174	; 0xae
 8011114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011118:	689b      	ldr	r3, [r3, #8]
 801111a:	6839      	ldr	r1, [r7, #0]
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	4798      	blx	r3
 8011120:	4603      	mov	r3, r0
 8011122:	73fb      	strb	r3, [r7, #15]
      break;
 8011124:	e04a      	b.n	80111bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	785b      	ldrb	r3, [r3, #1]
 801112a:	2b09      	cmp	r3, #9
 801112c:	d83b      	bhi.n	80111a6 <USBD_StdDevReq+0xc2>
 801112e:	a201      	add	r2, pc, #4	; (adr r2, 8011134 <USBD_StdDevReq+0x50>)
 8011130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011134:	08011189 	.word	0x08011189
 8011138:	0801119d 	.word	0x0801119d
 801113c:	080111a7 	.word	0x080111a7
 8011140:	08011193 	.word	0x08011193
 8011144:	080111a7 	.word	0x080111a7
 8011148:	08011167 	.word	0x08011167
 801114c:	0801115d 	.word	0x0801115d
 8011150:	080111a7 	.word	0x080111a7
 8011154:	0801117f 	.word	0x0801117f
 8011158:	08011171 	.word	0x08011171
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801115c:	6839      	ldr	r1, [r7, #0]
 801115e:	6878      	ldr	r0, [r7, #4]
 8011160:	f000 fa3c 	bl	80115dc <USBD_GetDescriptor>
          break;
 8011164:	e024      	b.n	80111b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011166:	6839      	ldr	r1, [r7, #0]
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	f000 fbcb 	bl	8011904 <USBD_SetAddress>
          break;
 801116e:	e01f      	b.n	80111b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011170:	6839      	ldr	r1, [r7, #0]
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f000 fc0a 	bl	801198c <USBD_SetConfig>
 8011178:	4603      	mov	r3, r0
 801117a:	73fb      	strb	r3, [r7, #15]
          break;
 801117c:	e018      	b.n	80111b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801117e:	6839      	ldr	r1, [r7, #0]
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f000 fcad 	bl	8011ae0 <USBD_GetConfig>
          break;
 8011186:	e013      	b.n	80111b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011188:	6839      	ldr	r1, [r7, #0]
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f000 fcde 	bl	8011b4c <USBD_GetStatus>
          break;
 8011190:	e00e      	b.n	80111b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011192:	6839      	ldr	r1, [r7, #0]
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f000 fd0d 	bl	8011bb4 <USBD_SetFeature>
          break;
 801119a:	e009      	b.n	80111b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801119c:	6839      	ldr	r1, [r7, #0]
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f000 fd31 	bl	8011c06 <USBD_ClrFeature>
          break;
 80111a4:	e004      	b.n	80111b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80111a6:	6839      	ldr	r1, [r7, #0]
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f000 fd88 	bl	8011cbe <USBD_CtlError>
          break;
 80111ae:	bf00      	nop
      }
      break;
 80111b0:	e004      	b.n	80111bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80111b2:	6839      	ldr	r1, [r7, #0]
 80111b4:	6878      	ldr	r0, [r7, #4]
 80111b6:	f000 fd82 	bl	8011cbe <USBD_CtlError>
      break;
 80111ba:	bf00      	nop
  }

  return ret;
 80111bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80111be:	4618      	mov	r0, r3
 80111c0:	3710      	adds	r7, #16
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	bf00      	nop

080111c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b084      	sub	sp, #16
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
 80111d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80111d2:	2300      	movs	r3, #0
 80111d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	781b      	ldrb	r3, [r3, #0]
 80111da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80111de:	2b40      	cmp	r3, #64	; 0x40
 80111e0:	d005      	beq.n	80111ee <USBD_StdItfReq+0x26>
 80111e2:	2b40      	cmp	r3, #64	; 0x40
 80111e4:	d852      	bhi.n	801128c <USBD_StdItfReq+0xc4>
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d001      	beq.n	80111ee <USBD_StdItfReq+0x26>
 80111ea:	2b20      	cmp	r3, #32
 80111ec:	d14e      	bne.n	801128c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111f4:	b2db      	uxtb	r3, r3
 80111f6:	3b01      	subs	r3, #1
 80111f8:	2b02      	cmp	r3, #2
 80111fa:	d840      	bhi.n	801127e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	889b      	ldrh	r3, [r3, #4]
 8011200:	b2db      	uxtb	r3, r3
 8011202:	2b01      	cmp	r3, #1
 8011204:	d836      	bhi.n	8011274 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	889b      	ldrh	r3, [r3, #4]
 801120a:	b2db      	uxtb	r3, r3
 801120c:	4619      	mov	r1, r3
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f7ff fed9 	bl	8010fc6 <USBD_CoreFindIF>
 8011214:	4603      	mov	r3, r0
 8011216:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011218:	7bbb      	ldrb	r3, [r7, #14]
 801121a:	2bff      	cmp	r3, #255	; 0xff
 801121c:	d01d      	beq.n	801125a <USBD_StdItfReq+0x92>
 801121e:	7bbb      	ldrb	r3, [r7, #14]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d11a      	bne.n	801125a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011224:	7bba      	ldrb	r2, [r7, #14]
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	32ae      	adds	r2, #174	; 0xae
 801122a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801122e:	689b      	ldr	r3, [r3, #8]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d00f      	beq.n	8011254 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011234:	7bba      	ldrb	r2, [r7, #14]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801123c:	7bba      	ldrb	r2, [r7, #14]
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	32ae      	adds	r2, #174	; 0xae
 8011242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011246:	689b      	ldr	r3, [r3, #8]
 8011248:	6839      	ldr	r1, [r7, #0]
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	4798      	blx	r3
 801124e:	4603      	mov	r3, r0
 8011250:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011252:	e004      	b.n	801125e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011254:	2303      	movs	r3, #3
 8011256:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011258:	e001      	b.n	801125e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801125a:	2303      	movs	r3, #3
 801125c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801125e:	683b      	ldr	r3, [r7, #0]
 8011260:	88db      	ldrh	r3, [r3, #6]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d110      	bne.n	8011288 <USBD_StdItfReq+0xc0>
 8011266:	7bfb      	ldrb	r3, [r7, #15]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d10d      	bne.n	8011288 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f000 fdf1 	bl	8011e54 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011272:	e009      	b.n	8011288 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011274:	6839      	ldr	r1, [r7, #0]
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f000 fd21 	bl	8011cbe <USBD_CtlError>
          break;
 801127c:	e004      	b.n	8011288 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801127e:	6839      	ldr	r1, [r7, #0]
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f000 fd1c 	bl	8011cbe <USBD_CtlError>
          break;
 8011286:	e000      	b.n	801128a <USBD_StdItfReq+0xc2>
          break;
 8011288:	bf00      	nop
      }
      break;
 801128a:	e004      	b.n	8011296 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801128c:	6839      	ldr	r1, [r7, #0]
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f000 fd15 	bl	8011cbe <USBD_CtlError>
      break;
 8011294:	bf00      	nop
  }

  return ret;
 8011296:	7bfb      	ldrb	r3, [r7, #15]
}
 8011298:	4618      	mov	r0, r3
 801129a:	3710      	adds	r7, #16
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}

080112a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b084      	sub	sp, #16
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80112aa:	2300      	movs	r3, #0
 80112ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	889b      	ldrh	r3, [r3, #4]
 80112b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	781b      	ldrb	r3, [r3, #0]
 80112b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80112bc:	2b40      	cmp	r3, #64	; 0x40
 80112be:	d007      	beq.n	80112d0 <USBD_StdEPReq+0x30>
 80112c0:	2b40      	cmp	r3, #64	; 0x40
 80112c2:	f200 817f 	bhi.w	80115c4 <USBD_StdEPReq+0x324>
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d02a      	beq.n	8011320 <USBD_StdEPReq+0x80>
 80112ca:	2b20      	cmp	r3, #32
 80112cc:	f040 817a 	bne.w	80115c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80112d0:	7bbb      	ldrb	r3, [r7, #14]
 80112d2:	4619      	mov	r1, r3
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f7ff fe83 	bl	8010fe0 <USBD_CoreFindEP>
 80112da:	4603      	mov	r3, r0
 80112dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80112de:	7b7b      	ldrb	r3, [r7, #13]
 80112e0:	2bff      	cmp	r3, #255	; 0xff
 80112e2:	f000 8174 	beq.w	80115ce <USBD_StdEPReq+0x32e>
 80112e6:	7b7b      	ldrb	r3, [r7, #13]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	f040 8170 	bne.w	80115ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80112ee:	7b7a      	ldrb	r2, [r7, #13]
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80112f6:	7b7a      	ldrb	r2, [r7, #13]
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	32ae      	adds	r2, #174	; 0xae
 80112fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011300:	689b      	ldr	r3, [r3, #8]
 8011302:	2b00      	cmp	r3, #0
 8011304:	f000 8163 	beq.w	80115ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011308:	7b7a      	ldrb	r2, [r7, #13]
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	32ae      	adds	r2, #174	; 0xae
 801130e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011312:	689b      	ldr	r3, [r3, #8]
 8011314:	6839      	ldr	r1, [r7, #0]
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	4798      	blx	r3
 801131a:	4603      	mov	r3, r0
 801131c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801131e:	e156      	b.n	80115ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	785b      	ldrb	r3, [r3, #1]
 8011324:	2b03      	cmp	r3, #3
 8011326:	d008      	beq.n	801133a <USBD_StdEPReq+0x9a>
 8011328:	2b03      	cmp	r3, #3
 801132a:	f300 8145 	bgt.w	80115b8 <USBD_StdEPReq+0x318>
 801132e:	2b00      	cmp	r3, #0
 8011330:	f000 809b 	beq.w	801146a <USBD_StdEPReq+0x1ca>
 8011334:	2b01      	cmp	r3, #1
 8011336:	d03c      	beq.n	80113b2 <USBD_StdEPReq+0x112>
 8011338:	e13e      	b.n	80115b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011340:	b2db      	uxtb	r3, r3
 8011342:	2b02      	cmp	r3, #2
 8011344:	d002      	beq.n	801134c <USBD_StdEPReq+0xac>
 8011346:	2b03      	cmp	r3, #3
 8011348:	d016      	beq.n	8011378 <USBD_StdEPReq+0xd8>
 801134a:	e02c      	b.n	80113a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801134c:	7bbb      	ldrb	r3, [r7, #14]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d00d      	beq.n	801136e <USBD_StdEPReq+0xce>
 8011352:	7bbb      	ldrb	r3, [r7, #14]
 8011354:	2b80      	cmp	r3, #128	; 0x80
 8011356:	d00a      	beq.n	801136e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011358:	7bbb      	ldrb	r3, [r7, #14]
 801135a:	4619      	mov	r1, r3
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f001 fed3 	bl	8013108 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011362:	2180      	movs	r1, #128	; 0x80
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f001 fecf 	bl	8013108 <USBD_LL_StallEP>
 801136a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801136c:	e020      	b.n	80113b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801136e:	6839      	ldr	r1, [r7, #0]
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f000 fca4 	bl	8011cbe <USBD_CtlError>
              break;
 8011376:	e01b      	b.n	80113b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	885b      	ldrh	r3, [r3, #2]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d10e      	bne.n	801139e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011380:	7bbb      	ldrb	r3, [r7, #14]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d00b      	beq.n	801139e <USBD_StdEPReq+0xfe>
 8011386:	7bbb      	ldrb	r3, [r7, #14]
 8011388:	2b80      	cmp	r3, #128	; 0x80
 801138a:	d008      	beq.n	801139e <USBD_StdEPReq+0xfe>
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	88db      	ldrh	r3, [r3, #6]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d104      	bne.n	801139e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011394:	7bbb      	ldrb	r3, [r7, #14]
 8011396:	4619      	mov	r1, r3
 8011398:	6878      	ldr	r0, [r7, #4]
 801139a:	f001 feb5 	bl	8013108 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f000 fd58 	bl	8011e54 <USBD_CtlSendStatus>

              break;
 80113a4:	e004      	b.n	80113b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80113a6:	6839      	ldr	r1, [r7, #0]
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f000 fc88 	bl	8011cbe <USBD_CtlError>
              break;
 80113ae:	bf00      	nop
          }
          break;
 80113b0:	e107      	b.n	80115c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80113b8:	b2db      	uxtb	r3, r3
 80113ba:	2b02      	cmp	r3, #2
 80113bc:	d002      	beq.n	80113c4 <USBD_StdEPReq+0x124>
 80113be:	2b03      	cmp	r3, #3
 80113c0:	d016      	beq.n	80113f0 <USBD_StdEPReq+0x150>
 80113c2:	e04b      	b.n	801145c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80113c4:	7bbb      	ldrb	r3, [r7, #14]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d00d      	beq.n	80113e6 <USBD_StdEPReq+0x146>
 80113ca:	7bbb      	ldrb	r3, [r7, #14]
 80113cc:	2b80      	cmp	r3, #128	; 0x80
 80113ce:	d00a      	beq.n	80113e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80113d0:	7bbb      	ldrb	r3, [r7, #14]
 80113d2:	4619      	mov	r1, r3
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f001 fe97 	bl	8013108 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80113da:	2180      	movs	r1, #128	; 0x80
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f001 fe93 	bl	8013108 <USBD_LL_StallEP>
 80113e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80113e4:	e040      	b.n	8011468 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80113e6:	6839      	ldr	r1, [r7, #0]
 80113e8:	6878      	ldr	r0, [r7, #4]
 80113ea:	f000 fc68 	bl	8011cbe <USBD_CtlError>
              break;
 80113ee:	e03b      	b.n	8011468 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	885b      	ldrh	r3, [r3, #2]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d136      	bne.n	8011466 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80113f8:	7bbb      	ldrb	r3, [r7, #14]
 80113fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d004      	beq.n	801140c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011402:	7bbb      	ldrb	r3, [r7, #14]
 8011404:	4619      	mov	r1, r3
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f001 feb4 	bl	8013174 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f000 fd21 	bl	8011e54 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011412:	7bbb      	ldrb	r3, [r7, #14]
 8011414:	4619      	mov	r1, r3
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f7ff fde2 	bl	8010fe0 <USBD_CoreFindEP>
 801141c:	4603      	mov	r3, r0
 801141e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011420:	7b7b      	ldrb	r3, [r7, #13]
 8011422:	2bff      	cmp	r3, #255	; 0xff
 8011424:	d01f      	beq.n	8011466 <USBD_StdEPReq+0x1c6>
 8011426:	7b7b      	ldrb	r3, [r7, #13]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d11c      	bne.n	8011466 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801142c:	7b7a      	ldrb	r2, [r7, #13]
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011434:	7b7a      	ldrb	r2, [r7, #13]
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	32ae      	adds	r2, #174	; 0xae
 801143a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801143e:	689b      	ldr	r3, [r3, #8]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d010      	beq.n	8011466 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011444:	7b7a      	ldrb	r2, [r7, #13]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	32ae      	adds	r2, #174	; 0xae
 801144a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801144e:	689b      	ldr	r3, [r3, #8]
 8011450:	6839      	ldr	r1, [r7, #0]
 8011452:	6878      	ldr	r0, [r7, #4]
 8011454:	4798      	blx	r3
 8011456:	4603      	mov	r3, r0
 8011458:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801145a:	e004      	b.n	8011466 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801145c:	6839      	ldr	r1, [r7, #0]
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f000 fc2d 	bl	8011cbe <USBD_CtlError>
              break;
 8011464:	e000      	b.n	8011468 <USBD_StdEPReq+0x1c8>
              break;
 8011466:	bf00      	nop
          }
          break;
 8011468:	e0ab      	b.n	80115c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011470:	b2db      	uxtb	r3, r3
 8011472:	2b02      	cmp	r3, #2
 8011474:	d002      	beq.n	801147c <USBD_StdEPReq+0x1dc>
 8011476:	2b03      	cmp	r3, #3
 8011478:	d032      	beq.n	80114e0 <USBD_StdEPReq+0x240>
 801147a:	e097      	b.n	80115ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801147c:	7bbb      	ldrb	r3, [r7, #14]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d007      	beq.n	8011492 <USBD_StdEPReq+0x1f2>
 8011482:	7bbb      	ldrb	r3, [r7, #14]
 8011484:	2b80      	cmp	r3, #128	; 0x80
 8011486:	d004      	beq.n	8011492 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011488:	6839      	ldr	r1, [r7, #0]
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f000 fc17 	bl	8011cbe <USBD_CtlError>
                break;
 8011490:	e091      	b.n	80115b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011492:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011496:	2b00      	cmp	r3, #0
 8011498:	da0b      	bge.n	80114b2 <USBD_StdEPReq+0x212>
 801149a:	7bbb      	ldrb	r3, [r7, #14]
 801149c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80114a0:	4613      	mov	r3, r2
 80114a2:	009b      	lsls	r3, r3, #2
 80114a4:	4413      	add	r3, r2
 80114a6:	009b      	lsls	r3, r3, #2
 80114a8:	3310      	adds	r3, #16
 80114aa:	687a      	ldr	r2, [r7, #4]
 80114ac:	4413      	add	r3, r2
 80114ae:	3304      	adds	r3, #4
 80114b0:	e00b      	b.n	80114ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80114b2:	7bbb      	ldrb	r3, [r7, #14]
 80114b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80114b8:	4613      	mov	r3, r2
 80114ba:	009b      	lsls	r3, r3, #2
 80114bc:	4413      	add	r3, r2
 80114be:	009b      	lsls	r3, r3, #2
 80114c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80114c4:	687a      	ldr	r2, [r7, #4]
 80114c6:	4413      	add	r3, r2
 80114c8:	3304      	adds	r3, #4
 80114ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	2200      	movs	r2, #0
 80114d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	2202      	movs	r2, #2
 80114d6:	4619      	mov	r1, r3
 80114d8:	6878      	ldr	r0, [r7, #4]
 80114da:	f000 fc61 	bl	8011da0 <USBD_CtlSendData>
              break;
 80114de:	e06a      	b.n	80115b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80114e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	da11      	bge.n	801150c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80114e8:	7bbb      	ldrb	r3, [r7, #14]
 80114ea:	f003 020f 	and.w	r2, r3, #15
 80114ee:	6879      	ldr	r1, [r7, #4]
 80114f0:	4613      	mov	r3, r2
 80114f2:	009b      	lsls	r3, r3, #2
 80114f4:	4413      	add	r3, r2
 80114f6:	009b      	lsls	r3, r3, #2
 80114f8:	440b      	add	r3, r1
 80114fa:	3324      	adds	r3, #36	; 0x24
 80114fc:	881b      	ldrh	r3, [r3, #0]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d117      	bne.n	8011532 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011502:	6839      	ldr	r1, [r7, #0]
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f000 fbda 	bl	8011cbe <USBD_CtlError>
                  break;
 801150a:	e054      	b.n	80115b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801150c:	7bbb      	ldrb	r3, [r7, #14]
 801150e:	f003 020f 	and.w	r2, r3, #15
 8011512:	6879      	ldr	r1, [r7, #4]
 8011514:	4613      	mov	r3, r2
 8011516:	009b      	lsls	r3, r3, #2
 8011518:	4413      	add	r3, r2
 801151a:	009b      	lsls	r3, r3, #2
 801151c:	440b      	add	r3, r1
 801151e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011522:	881b      	ldrh	r3, [r3, #0]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d104      	bne.n	8011532 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011528:	6839      	ldr	r1, [r7, #0]
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f000 fbc7 	bl	8011cbe <USBD_CtlError>
                  break;
 8011530:	e041      	b.n	80115b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011532:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011536:	2b00      	cmp	r3, #0
 8011538:	da0b      	bge.n	8011552 <USBD_StdEPReq+0x2b2>
 801153a:	7bbb      	ldrb	r3, [r7, #14]
 801153c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011540:	4613      	mov	r3, r2
 8011542:	009b      	lsls	r3, r3, #2
 8011544:	4413      	add	r3, r2
 8011546:	009b      	lsls	r3, r3, #2
 8011548:	3310      	adds	r3, #16
 801154a:	687a      	ldr	r2, [r7, #4]
 801154c:	4413      	add	r3, r2
 801154e:	3304      	adds	r3, #4
 8011550:	e00b      	b.n	801156a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011552:	7bbb      	ldrb	r3, [r7, #14]
 8011554:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011558:	4613      	mov	r3, r2
 801155a:	009b      	lsls	r3, r3, #2
 801155c:	4413      	add	r3, r2
 801155e:	009b      	lsls	r3, r3, #2
 8011560:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011564:	687a      	ldr	r2, [r7, #4]
 8011566:	4413      	add	r3, r2
 8011568:	3304      	adds	r3, #4
 801156a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801156c:	7bbb      	ldrb	r3, [r7, #14]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d002      	beq.n	8011578 <USBD_StdEPReq+0x2d8>
 8011572:	7bbb      	ldrb	r3, [r7, #14]
 8011574:	2b80      	cmp	r3, #128	; 0x80
 8011576:	d103      	bne.n	8011580 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	2200      	movs	r2, #0
 801157c:	601a      	str	r2, [r3, #0]
 801157e:	e00e      	b.n	801159e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011580:	7bbb      	ldrb	r3, [r7, #14]
 8011582:	4619      	mov	r1, r3
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f001 fe2b 	bl	80131e0 <USBD_LL_IsStallEP>
 801158a:	4603      	mov	r3, r0
 801158c:	2b00      	cmp	r3, #0
 801158e:	d003      	beq.n	8011598 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	2201      	movs	r2, #1
 8011594:	601a      	str	r2, [r3, #0]
 8011596:	e002      	b.n	801159e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	2200      	movs	r2, #0
 801159c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801159e:	68bb      	ldr	r3, [r7, #8]
 80115a0:	2202      	movs	r2, #2
 80115a2:	4619      	mov	r1, r3
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f000 fbfb 	bl	8011da0 <USBD_CtlSendData>
              break;
 80115aa:	e004      	b.n	80115b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80115ac:	6839      	ldr	r1, [r7, #0]
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f000 fb85 	bl	8011cbe <USBD_CtlError>
              break;
 80115b4:	bf00      	nop
          }
          break;
 80115b6:	e004      	b.n	80115c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80115b8:	6839      	ldr	r1, [r7, #0]
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f000 fb7f 	bl	8011cbe <USBD_CtlError>
          break;
 80115c0:	bf00      	nop
      }
      break;
 80115c2:	e005      	b.n	80115d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80115c4:	6839      	ldr	r1, [r7, #0]
 80115c6:	6878      	ldr	r0, [r7, #4]
 80115c8:	f000 fb79 	bl	8011cbe <USBD_CtlError>
      break;
 80115cc:	e000      	b.n	80115d0 <USBD_StdEPReq+0x330>
      break;
 80115ce:	bf00      	nop
  }

  return ret;
 80115d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80115d2:	4618      	mov	r0, r3
 80115d4:	3710      	adds	r7, #16
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}
	...

080115dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b084      	sub	sp, #16
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
 80115e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80115e6:	2300      	movs	r3, #0
 80115e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80115ea:	2300      	movs	r3, #0
 80115ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80115ee:	2300      	movs	r3, #0
 80115f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	885b      	ldrh	r3, [r3, #2]
 80115f6:	0a1b      	lsrs	r3, r3, #8
 80115f8:	b29b      	uxth	r3, r3
 80115fa:	3b01      	subs	r3, #1
 80115fc:	2b0e      	cmp	r3, #14
 80115fe:	f200 8152 	bhi.w	80118a6 <USBD_GetDescriptor+0x2ca>
 8011602:	a201      	add	r2, pc, #4	; (adr r2, 8011608 <USBD_GetDescriptor+0x2c>)
 8011604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011608:	08011679 	.word	0x08011679
 801160c:	08011691 	.word	0x08011691
 8011610:	080116d1 	.word	0x080116d1
 8011614:	080118a7 	.word	0x080118a7
 8011618:	080118a7 	.word	0x080118a7
 801161c:	08011847 	.word	0x08011847
 8011620:	08011873 	.word	0x08011873
 8011624:	080118a7 	.word	0x080118a7
 8011628:	080118a7 	.word	0x080118a7
 801162c:	080118a7 	.word	0x080118a7
 8011630:	080118a7 	.word	0x080118a7
 8011634:	080118a7 	.word	0x080118a7
 8011638:	080118a7 	.word	0x080118a7
 801163c:	080118a7 	.word	0x080118a7
 8011640:	08011645 	.word	0x08011645
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801164a:	69db      	ldr	r3, [r3, #28]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d00b      	beq.n	8011668 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011656:	69db      	ldr	r3, [r3, #28]
 8011658:	687a      	ldr	r2, [r7, #4]
 801165a:	7c12      	ldrb	r2, [r2, #16]
 801165c:	f107 0108 	add.w	r1, r7, #8
 8011660:	4610      	mov	r0, r2
 8011662:	4798      	blx	r3
 8011664:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011666:	e126      	b.n	80118b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011668:	6839      	ldr	r1, [r7, #0]
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	f000 fb27 	bl	8011cbe <USBD_CtlError>
        err++;
 8011670:	7afb      	ldrb	r3, [r7, #11]
 8011672:	3301      	adds	r3, #1
 8011674:	72fb      	strb	r3, [r7, #11]
      break;
 8011676:	e11e      	b.n	80118b6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	687a      	ldr	r2, [r7, #4]
 8011682:	7c12      	ldrb	r2, [r2, #16]
 8011684:	f107 0108 	add.w	r1, r7, #8
 8011688:	4610      	mov	r0, r2
 801168a:	4798      	blx	r3
 801168c:	60f8      	str	r0, [r7, #12]
      break;
 801168e:	e112      	b.n	80118b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	7c1b      	ldrb	r3, [r3, #16]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d10d      	bne.n	80116b4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116a0:	f107 0208 	add.w	r2, r7, #8
 80116a4:	4610      	mov	r0, r2
 80116a6:	4798      	blx	r3
 80116a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	3301      	adds	r3, #1
 80116ae:	2202      	movs	r2, #2
 80116b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80116b2:	e100      	b.n	80118b6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116bc:	f107 0208 	add.w	r2, r7, #8
 80116c0:	4610      	mov	r0, r2
 80116c2:	4798      	blx	r3
 80116c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	3301      	adds	r3, #1
 80116ca:	2202      	movs	r2, #2
 80116cc:	701a      	strb	r2, [r3, #0]
      break;
 80116ce:	e0f2      	b.n	80118b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	885b      	ldrh	r3, [r3, #2]
 80116d4:	b2db      	uxtb	r3, r3
 80116d6:	2b05      	cmp	r3, #5
 80116d8:	f200 80ac 	bhi.w	8011834 <USBD_GetDescriptor+0x258>
 80116dc:	a201      	add	r2, pc, #4	; (adr r2, 80116e4 <USBD_GetDescriptor+0x108>)
 80116de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116e2:	bf00      	nop
 80116e4:	080116fd 	.word	0x080116fd
 80116e8:	08011731 	.word	0x08011731
 80116ec:	08011765 	.word	0x08011765
 80116f0:	08011799 	.word	0x08011799
 80116f4:	080117cd 	.word	0x080117cd
 80116f8:	08011801 	.word	0x08011801
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011702:	685b      	ldr	r3, [r3, #4]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d00b      	beq.n	8011720 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801170e:	685b      	ldr	r3, [r3, #4]
 8011710:	687a      	ldr	r2, [r7, #4]
 8011712:	7c12      	ldrb	r2, [r2, #16]
 8011714:	f107 0108 	add.w	r1, r7, #8
 8011718:	4610      	mov	r0, r2
 801171a:	4798      	blx	r3
 801171c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801171e:	e091      	b.n	8011844 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011720:	6839      	ldr	r1, [r7, #0]
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	f000 facb 	bl	8011cbe <USBD_CtlError>
            err++;
 8011728:	7afb      	ldrb	r3, [r7, #11]
 801172a:	3301      	adds	r3, #1
 801172c:	72fb      	strb	r3, [r7, #11]
          break;
 801172e:	e089      	b.n	8011844 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011736:	689b      	ldr	r3, [r3, #8]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d00b      	beq.n	8011754 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011742:	689b      	ldr	r3, [r3, #8]
 8011744:	687a      	ldr	r2, [r7, #4]
 8011746:	7c12      	ldrb	r2, [r2, #16]
 8011748:	f107 0108 	add.w	r1, r7, #8
 801174c:	4610      	mov	r0, r2
 801174e:	4798      	blx	r3
 8011750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011752:	e077      	b.n	8011844 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011754:	6839      	ldr	r1, [r7, #0]
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f000 fab1 	bl	8011cbe <USBD_CtlError>
            err++;
 801175c:	7afb      	ldrb	r3, [r7, #11]
 801175e:	3301      	adds	r3, #1
 8011760:	72fb      	strb	r3, [r7, #11]
          break;
 8011762:	e06f      	b.n	8011844 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801176a:	68db      	ldr	r3, [r3, #12]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d00b      	beq.n	8011788 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011776:	68db      	ldr	r3, [r3, #12]
 8011778:	687a      	ldr	r2, [r7, #4]
 801177a:	7c12      	ldrb	r2, [r2, #16]
 801177c:	f107 0108 	add.w	r1, r7, #8
 8011780:	4610      	mov	r0, r2
 8011782:	4798      	blx	r3
 8011784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011786:	e05d      	b.n	8011844 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011788:	6839      	ldr	r1, [r7, #0]
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f000 fa97 	bl	8011cbe <USBD_CtlError>
            err++;
 8011790:	7afb      	ldrb	r3, [r7, #11]
 8011792:	3301      	adds	r3, #1
 8011794:	72fb      	strb	r3, [r7, #11]
          break;
 8011796:	e055      	b.n	8011844 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801179e:	691b      	ldr	r3, [r3, #16]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d00b      	beq.n	80117bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80117aa:	691b      	ldr	r3, [r3, #16]
 80117ac:	687a      	ldr	r2, [r7, #4]
 80117ae:	7c12      	ldrb	r2, [r2, #16]
 80117b0:	f107 0108 	add.w	r1, r7, #8
 80117b4:	4610      	mov	r0, r2
 80117b6:	4798      	blx	r3
 80117b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80117ba:	e043      	b.n	8011844 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80117bc:	6839      	ldr	r1, [r7, #0]
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f000 fa7d 	bl	8011cbe <USBD_CtlError>
            err++;
 80117c4:	7afb      	ldrb	r3, [r7, #11]
 80117c6:	3301      	adds	r3, #1
 80117c8:	72fb      	strb	r3, [r7, #11]
          break;
 80117ca:	e03b      	b.n	8011844 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80117d2:	695b      	ldr	r3, [r3, #20]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d00b      	beq.n	80117f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80117de:	695b      	ldr	r3, [r3, #20]
 80117e0:	687a      	ldr	r2, [r7, #4]
 80117e2:	7c12      	ldrb	r2, [r2, #16]
 80117e4:	f107 0108 	add.w	r1, r7, #8
 80117e8:	4610      	mov	r0, r2
 80117ea:	4798      	blx	r3
 80117ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80117ee:	e029      	b.n	8011844 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80117f0:	6839      	ldr	r1, [r7, #0]
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f000 fa63 	bl	8011cbe <USBD_CtlError>
            err++;
 80117f8:	7afb      	ldrb	r3, [r7, #11]
 80117fa:	3301      	adds	r3, #1
 80117fc:	72fb      	strb	r3, [r7, #11]
          break;
 80117fe:	e021      	b.n	8011844 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011806:	699b      	ldr	r3, [r3, #24]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d00b      	beq.n	8011824 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011812:	699b      	ldr	r3, [r3, #24]
 8011814:	687a      	ldr	r2, [r7, #4]
 8011816:	7c12      	ldrb	r2, [r2, #16]
 8011818:	f107 0108 	add.w	r1, r7, #8
 801181c:	4610      	mov	r0, r2
 801181e:	4798      	blx	r3
 8011820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011822:	e00f      	b.n	8011844 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011824:	6839      	ldr	r1, [r7, #0]
 8011826:	6878      	ldr	r0, [r7, #4]
 8011828:	f000 fa49 	bl	8011cbe <USBD_CtlError>
            err++;
 801182c:	7afb      	ldrb	r3, [r7, #11]
 801182e:	3301      	adds	r3, #1
 8011830:	72fb      	strb	r3, [r7, #11]
          break;
 8011832:	e007      	b.n	8011844 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011834:	6839      	ldr	r1, [r7, #0]
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f000 fa41 	bl	8011cbe <USBD_CtlError>
          err++;
 801183c:	7afb      	ldrb	r3, [r7, #11]
 801183e:	3301      	adds	r3, #1
 8011840:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011842:	bf00      	nop
      }
      break;
 8011844:	e037      	b.n	80118b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	7c1b      	ldrb	r3, [r3, #16]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d109      	bne.n	8011862 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011856:	f107 0208 	add.w	r2, r7, #8
 801185a:	4610      	mov	r0, r2
 801185c:	4798      	blx	r3
 801185e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011860:	e029      	b.n	80118b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011862:	6839      	ldr	r1, [r7, #0]
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f000 fa2a 	bl	8011cbe <USBD_CtlError>
        err++;
 801186a:	7afb      	ldrb	r3, [r7, #11]
 801186c:	3301      	adds	r3, #1
 801186e:	72fb      	strb	r3, [r7, #11]
      break;
 8011870:	e021      	b.n	80118b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	7c1b      	ldrb	r3, [r3, #16]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d10d      	bne.n	8011896 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011882:	f107 0208 	add.w	r2, r7, #8
 8011886:	4610      	mov	r0, r2
 8011888:	4798      	blx	r3
 801188a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	3301      	adds	r3, #1
 8011890:	2207      	movs	r2, #7
 8011892:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011894:	e00f      	b.n	80118b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011896:	6839      	ldr	r1, [r7, #0]
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f000 fa10 	bl	8011cbe <USBD_CtlError>
        err++;
 801189e:	7afb      	ldrb	r3, [r7, #11]
 80118a0:	3301      	adds	r3, #1
 80118a2:	72fb      	strb	r3, [r7, #11]
      break;
 80118a4:	e007      	b.n	80118b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80118a6:	6839      	ldr	r1, [r7, #0]
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f000 fa08 	bl	8011cbe <USBD_CtlError>
      err++;
 80118ae:	7afb      	ldrb	r3, [r7, #11]
 80118b0:	3301      	adds	r3, #1
 80118b2:	72fb      	strb	r3, [r7, #11]
      break;
 80118b4:	bf00      	nop
  }

  if (err != 0U)
 80118b6:	7afb      	ldrb	r3, [r7, #11]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d11e      	bne.n	80118fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	88db      	ldrh	r3, [r3, #6]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d016      	beq.n	80118f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80118c4:	893b      	ldrh	r3, [r7, #8]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d00e      	beq.n	80118e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80118ca:	683b      	ldr	r3, [r7, #0]
 80118cc:	88da      	ldrh	r2, [r3, #6]
 80118ce:	893b      	ldrh	r3, [r7, #8]
 80118d0:	4293      	cmp	r3, r2
 80118d2:	bf28      	it	cs
 80118d4:	4613      	movcs	r3, r2
 80118d6:	b29b      	uxth	r3, r3
 80118d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80118da:	893b      	ldrh	r3, [r7, #8]
 80118dc:	461a      	mov	r2, r3
 80118de:	68f9      	ldr	r1, [r7, #12]
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f000 fa5d 	bl	8011da0 <USBD_CtlSendData>
 80118e6:	e009      	b.n	80118fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80118e8:	6839      	ldr	r1, [r7, #0]
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f000 f9e7 	bl	8011cbe <USBD_CtlError>
 80118f0:	e004      	b.n	80118fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80118f2:	6878      	ldr	r0, [r7, #4]
 80118f4:	f000 faae 	bl	8011e54 <USBD_CtlSendStatus>
 80118f8:	e000      	b.n	80118fc <USBD_GetDescriptor+0x320>
    return;
 80118fa:	bf00      	nop
  }
}
 80118fc:	3710      	adds	r7, #16
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}
 8011902:	bf00      	nop

08011904 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b084      	sub	sp, #16
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
 801190c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	889b      	ldrh	r3, [r3, #4]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d131      	bne.n	801197a <USBD_SetAddress+0x76>
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	88db      	ldrh	r3, [r3, #6]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d12d      	bne.n	801197a <USBD_SetAddress+0x76>
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	885b      	ldrh	r3, [r3, #2]
 8011922:	2b7f      	cmp	r3, #127	; 0x7f
 8011924:	d829      	bhi.n	801197a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	885b      	ldrh	r3, [r3, #2]
 801192a:	b2db      	uxtb	r3, r3
 801192c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011930:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011938:	b2db      	uxtb	r3, r3
 801193a:	2b03      	cmp	r3, #3
 801193c:	d104      	bne.n	8011948 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801193e:	6839      	ldr	r1, [r7, #0]
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f000 f9bc 	bl	8011cbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011946:	e01d      	b.n	8011984 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	7bfa      	ldrb	r2, [r7, #15]
 801194c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011950:	7bfb      	ldrb	r3, [r7, #15]
 8011952:	4619      	mov	r1, r3
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f001 fc71 	bl	801323c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f000 fa7a 	bl	8011e54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011960:	7bfb      	ldrb	r3, [r7, #15]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d004      	beq.n	8011970 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	2202      	movs	r2, #2
 801196a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801196e:	e009      	b.n	8011984 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2201      	movs	r2, #1
 8011974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011978:	e004      	b.n	8011984 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801197a:	6839      	ldr	r1, [r7, #0]
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	f000 f99e 	bl	8011cbe <USBD_CtlError>
  }
}
 8011982:	bf00      	nop
 8011984:	bf00      	nop
 8011986:	3710      	adds	r7, #16
 8011988:	46bd      	mov	sp, r7
 801198a:	bd80      	pop	{r7, pc}

0801198c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b084      	sub	sp, #16
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011996:	2300      	movs	r3, #0
 8011998:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	885b      	ldrh	r3, [r3, #2]
 801199e:	b2da      	uxtb	r2, r3
 80119a0:	4b4e      	ldr	r3, [pc, #312]	; (8011adc <USBD_SetConfig+0x150>)
 80119a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80119a4:	4b4d      	ldr	r3, [pc, #308]	; (8011adc <USBD_SetConfig+0x150>)
 80119a6:	781b      	ldrb	r3, [r3, #0]
 80119a8:	2b01      	cmp	r3, #1
 80119aa:	d905      	bls.n	80119b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80119ac:	6839      	ldr	r1, [r7, #0]
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f000 f985 	bl	8011cbe <USBD_CtlError>
    return USBD_FAIL;
 80119b4:	2303      	movs	r3, #3
 80119b6:	e08c      	b.n	8011ad2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	2b02      	cmp	r3, #2
 80119c2:	d002      	beq.n	80119ca <USBD_SetConfig+0x3e>
 80119c4:	2b03      	cmp	r3, #3
 80119c6:	d029      	beq.n	8011a1c <USBD_SetConfig+0x90>
 80119c8:	e075      	b.n	8011ab6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80119ca:	4b44      	ldr	r3, [pc, #272]	; (8011adc <USBD_SetConfig+0x150>)
 80119cc:	781b      	ldrb	r3, [r3, #0]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d020      	beq.n	8011a14 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80119d2:	4b42      	ldr	r3, [pc, #264]	; (8011adc <USBD_SetConfig+0x150>)
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	461a      	mov	r2, r3
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80119dc:	4b3f      	ldr	r3, [pc, #252]	; (8011adc <USBD_SetConfig+0x150>)
 80119de:	781b      	ldrb	r3, [r3, #0]
 80119e0:	4619      	mov	r1, r3
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f7ff f849 	bl	8010a7a <USBD_SetClassConfig>
 80119e8:	4603      	mov	r3, r0
 80119ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80119ec:	7bfb      	ldrb	r3, [r7, #15]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d008      	beq.n	8011a04 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80119f2:	6839      	ldr	r1, [r7, #0]
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	f000 f962 	bl	8011cbe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	2202      	movs	r2, #2
 80119fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011a02:	e065      	b.n	8011ad0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f000 fa25 	bl	8011e54 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2203      	movs	r2, #3
 8011a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011a12:	e05d      	b.n	8011ad0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011a14:	6878      	ldr	r0, [r7, #4]
 8011a16:	f000 fa1d 	bl	8011e54 <USBD_CtlSendStatus>
      break;
 8011a1a:	e059      	b.n	8011ad0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011a1c:	4b2f      	ldr	r3, [pc, #188]	; (8011adc <USBD_SetConfig+0x150>)
 8011a1e:	781b      	ldrb	r3, [r3, #0]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d112      	bne.n	8011a4a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2202      	movs	r2, #2
 8011a28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011a2c:	4b2b      	ldr	r3, [pc, #172]	; (8011adc <USBD_SetConfig+0x150>)
 8011a2e:	781b      	ldrb	r3, [r3, #0]
 8011a30:	461a      	mov	r2, r3
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011a36:	4b29      	ldr	r3, [pc, #164]	; (8011adc <USBD_SetConfig+0x150>)
 8011a38:	781b      	ldrb	r3, [r3, #0]
 8011a3a:	4619      	mov	r1, r3
 8011a3c:	6878      	ldr	r0, [r7, #4]
 8011a3e:	f7ff f838 	bl	8010ab2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f000 fa06 	bl	8011e54 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011a48:	e042      	b.n	8011ad0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011a4a:	4b24      	ldr	r3, [pc, #144]	; (8011adc <USBD_SetConfig+0x150>)
 8011a4c:	781b      	ldrb	r3, [r3, #0]
 8011a4e:	461a      	mov	r2, r3
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	685b      	ldr	r3, [r3, #4]
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d02a      	beq.n	8011aae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	b2db      	uxtb	r3, r3
 8011a5e:	4619      	mov	r1, r3
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f7ff f826 	bl	8010ab2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011a66:	4b1d      	ldr	r3, [pc, #116]	; (8011adc <USBD_SetConfig+0x150>)
 8011a68:	781b      	ldrb	r3, [r3, #0]
 8011a6a:	461a      	mov	r2, r3
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011a70:	4b1a      	ldr	r3, [pc, #104]	; (8011adc <USBD_SetConfig+0x150>)
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	4619      	mov	r1, r3
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f7fe ffff 	bl	8010a7a <USBD_SetClassConfig>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011a80:	7bfb      	ldrb	r3, [r7, #15]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d00f      	beq.n	8011aa6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011a86:	6839      	ldr	r1, [r7, #0]
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f000 f918 	bl	8011cbe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	685b      	ldr	r3, [r3, #4]
 8011a92:	b2db      	uxtb	r3, r3
 8011a94:	4619      	mov	r1, r3
 8011a96:	6878      	ldr	r0, [r7, #4]
 8011a98:	f7ff f80b 	bl	8010ab2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2202      	movs	r2, #2
 8011aa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011aa4:	e014      	b.n	8011ad0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f000 f9d4 	bl	8011e54 <USBD_CtlSendStatus>
      break;
 8011aac:	e010      	b.n	8011ad0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011aae:	6878      	ldr	r0, [r7, #4]
 8011ab0:	f000 f9d0 	bl	8011e54 <USBD_CtlSendStatus>
      break;
 8011ab4:	e00c      	b.n	8011ad0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011ab6:	6839      	ldr	r1, [r7, #0]
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f000 f900 	bl	8011cbe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011abe:	4b07      	ldr	r3, [pc, #28]	; (8011adc <USBD_SetConfig+0x150>)
 8011ac0:	781b      	ldrb	r3, [r3, #0]
 8011ac2:	4619      	mov	r1, r3
 8011ac4:	6878      	ldr	r0, [r7, #4]
 8011ac6:	f7fe fff4 	bl	8010ab2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011aca:	2303      	movs	r3, #3
 8011acc:	73fb      	strb	r3, [r7, #15]
      break;
 8011ace:	bf00      	nop
  }

  return ret;
 8011ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3710      	adds	r7, #16
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}
 8011ada:	bf00      	nop
 8011adc:	200010c0 	.word	0x200010c0

08011ae0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b082      	sub	sp, #8
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	88db      	ldrh	r3, [r3, #6]
 8011aee:	2b01      	cmp	r3, #1
 8011af0:	d004      	beq.n	8011afc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011af2:	6839      	ldr	r1, [r7, #0]
 8011af4:	6878      	ldr	r0, [r7, #4]
 8011af6:	f000 f8e2 	bl	8011cbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011afa:	e023      	b.n	8011b44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b02:	b2db      	uxtb	r3, r3
 8011b04:	2b02      	cmp	r3, #2
 8011b06:	dc02      	bgt.n	8011b0e <USBD_GetConfig+0x2e>
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	dc03      	bgt.n	8011b14 <USBD_GetConfig+0x34>
 8011b0c:	e015      	b.n	8011b3a <USBD_GetConfig+0x5a>
 8011b0e:	2b03      	cmp	r3, #3
 8011b10:	d00b      	beq.n	8011b2a <USBD_GetConfig+0x4a>
 8011b12:	e012      	b.n	8011b3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2200      	movs	r2, #0
 8011b18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	3308      	adds	r3, #8
 8011b1e:	2201      	movs	r2, #1
 8011b20:	4619      	mov	r1, r3
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f000 f93c 	bl	8011da0 <USBD_CtlSendData>
        break;
 8011b28:	e00c      	b.n	8011b44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	3304      	adds	r3, #4
 8011b2e:	2201      	movs	r2, #1
 8011b30:	4619      	mov	r1, r3
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f000 f934 	bl	8011da0 <USBD_CtlSendData>
        break;
 8011b38:	e004      	b.n	8011b44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011b3a:	6839      	ldr	r1, [r7, #0]
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f000 f8be 	bl	8011cbe <USBD_CtlError>
        break;
 8011b42:	bf00      	nop
}
 8011b44:	bf00      	nop
 8011b46:	3708      	adds	r7, #8
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}

08011b4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b082      	sub	sp, #8
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
 8011b54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b5c:	b2db      	uxtb	r3, r3
 8011b5e:	3b01      	subs	r3, #1
 8011b60:	2b02      	cmp	r3, #2
 8011b62:	d81e      	bhi.n	8011ba2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	88db      	ldrh	r3, [r3, #6]
 8011b68:	2b02      	cmp	r3, #2
 8011b6a:	d004      	beq.n	8011b76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011b6c:	6839      	ldr	r1, [r7, #0]
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f000 f8a5 	bl	8011cbe <USBD_CtlError>
        break;
 8011b74:	e01a      	b.n	8011bac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2201      	movs	r2, #1
 8011b7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d005      	beq.n	8011b92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	68db      	ldr	r3, [r3, #12]
 8011b8a:	f043 0202 	orr.w	r2, r3, #2
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	330c      	adds	r3, #12
 8011b96:	2202      	movs	r2, #2
 8011b98:	4619      	mov	r1, r3
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f000 f900 	bl	8011da0 <USBD_CtlSendData>
      break;
 8011ba0:	e004      	b.n	8011bac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011ba2:	6839      	ldr	r1, [r7, #0]
 8011ba4:	6878      	ldr	r0, [r7, #4]
 8011ba6:	f000 f88a 	bl	8011cbe <USBD_CtlError>
      break;
 8011baa:	bf00      	nop
  }
}
 8011bac:	bf00      	nop
 8011bae:	3708      	adds	r7, #8
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}

08011bb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	885b      	ldrh	r3, [r3, #2]
 8011bc2:	2b01      	cmp	r3, #1
 8011bc4:	d107      	bne.n	8011bd6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2201      	movs	r2, #1
 8011bca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f000 f940 	bl	8011e54 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011bd4:	e013      	b.n	8011bfe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	885b      	ldrh	r3, [r3, #2]
 8011bda:	2b02      	cmp	r3, #2
 8011bdc:	d10b      	bne.n	8011bf6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	889b      	ldrh	r3, [r3, #4]
 8011be2:	0a1b      	lsrs	r3, r3, #8
 8011be4:	b29b      	uxth	r3, r3
 8011be6:	b2da      	uxtb	r2, r3
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	f000 f930 	bl	8011e54 <USBD_CtlSendStatus>
}
 8011bf4:	e003      	b.n	8011bfe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011bf6:	6839      	ldr	r1, [r7, #0]
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f000 f860 	bl	8011cbe <USBD_CtlError>
}
 8011bfe:	bf00      	nop
 8011c00:	3708      	adds	r7, #8
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}

08011c06 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c06:	b580      	push	{r7, lr}
 8011c08:	b082      	sub	sp, #8
 8011c0a:	af00      	add	r7, sp, #0
 8011c0c:	6078      	str	r0, [r7, #4]
 8011c0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c16:	b2db      	uxtb	r3, r3
 8011c18:	3b01      	subs	r3, #1
 8011c1a:	2b02      	cmp	r3, #2
 8011c1c:	d80b      	bhi.n	8011c36 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	885b      	ldrh	r3, [r3, #2]
 8011c22:	2b01      	cmp	r3, #1
 8011c24:	d10c      	bne.n	8011c40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	2200      	movs	r2, #0
 8011c2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011c2e:	6878      	ldr	r0, [r7, #4]
 8011c30:	f000 f910 	bl	8011e54 <USBD_CtlSendStatus>
      }
      break;
 8011c34:	e004      	b.n	8011c40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011c36:	6839      	ldr	r1, [r7, #0]
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f000 f840 	bl	8011cbe <USBD_CtlError>
      break;
 8011c3e:	e000      	b.n	8011c42 <USBD_ClrFeature+0x3c>
      break;
 8011c40:	bf00      	nop
  }
}
 8011c42:	bf00      	nop
 8011c44:	3708      	adds	r7, #8
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}

08011c4a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011c4a:	b580      	push	{r7, lr}
 8011c4c:	b084      	sub	sp, #16
 8011c4e:	af00      	add	r7, sp, #0
 8011c50:	6078      	str	r0, [r7, #4]
 8011c52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	781a      	ldrb	r2, [r3, #0]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	3301      	adds	r3, #1
 8011c64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	781a      	ldrb	r2, [r3, #0]
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	3301      	adds	r3, #1
 8011c72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011c74:	68f8      	ldr	r0, [r7, #12]
 8011c76:	f7ff fa17 	bl	80110a8 <SWAPBYTE>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	461a      	mov	r2, r3
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	3301      	adds	r3, #1
 8011c86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011c8e:	68f8      	ldr	r0, [r7, #12]
 8011c90:	f7ff fa0a 	bl	80110a8 <SWAPBYTE>
 8011c94:	4603      	mov	r3, r0
 8011c96:	461a      	mov	r2, r3
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	3301      	adds	r3, #1
 8011ca6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011ca8:	68f8      	ldr	r0, [r7, #12]
 8011caa:	f7ff f9fd 	bl	80110a8 <SWAPBYTE>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	461a      	mov	r2, r3
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	80da      	strh	r2, [r3, #6]
}
 8011cb6:	bf00      	nop
 8011cb8:	3710      	adds	r7, #16
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011cbe:	b580      	push	{r7, lr}
 8011cc0:	b082      	sub	sp, #8
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	6078      	str	r0, [r7, #4]
 8011cc6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011cc8:	2180      	movs	r1, #128	; 0x80
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f001 fa1c 	bl	8013108 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011cd0:	2100      	movs	r1, #0
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f001 fa18 	bl	8013108 <USBD_LL_StallEP>
}
 8011cd8:	bf00      	nop
 8011cda:	3708      	adds	r7, #8
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}

08011ce0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b086      	sub	sp, #24
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	60f8      	str	r0, [r7, #12]
 8011ce8:	60b9      	str	r1, [r7, #8]
 8011cea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011cec:	2300      	movs	r3, #0
 8011cee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d036      	beq.n	8011d64 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011cfa:	6938      	ldr	r0, [r7, #16]
 8011cfc:	f000 f836 	bl	8011d6c <USBD_GetLen>
 8011d00:	4603      	mov	r3, r0
 8011d02:	3301      	adds	r3, #1
 8011d04:	b29b      	uxth	r3, r3
 8011d06:	005b      	lsls	r3, r3, #1
 8011d08:	b29a      	uxth	r2, r3
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011d0e:	7dfb      	ldrb	r3, [r7, #23]
 8011d10:	68ba      	ldr	r2, [r7, #8]
 8011d12:	4413      	add	r3, r2
 8011d14:	687a      	ldr	r2, [r7, #4]
 8011d16:	7812      	ldrb	r2, [r2, #0]
 8011d18:	701a      	strb	r2, [r3, #0]
  idx++;
 8011d1a:	7dfb      	ldrb	r3, [r7, #23]
 8011d1c:	3301      	adds	r3, #1
 8011d1e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011d20:	7dfb      	ldrb	r3, [r7, #23]
 8011d22:	68ba      	ldr	r2, [r7, #8]
 8011d24:	4413      	add	r3, r2
 8011d26:	2203      	movs	r2, #3
 8011d28:	701a      	strb	r2, [r3, #0]
  idx++;
 8011d2a:	7dfb      	ldrb	r3, [r7, #23]
 8011d2c:	3301      	adds	r3, #1
 8011d2e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011d30:	e013      	b.n	8011d5a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011d32:	7dfb      	ldrb	r3, [r7, #23]
 8011d34:	68ba      	ldr	r2, [r7, #8]
 8011d36:	4413      	add	r3, r2
 8011d38:	693a      	ldr	r2, [r7, #16]
 8011d3a:	7812      	ldrb	r2, [r2, #0]
 8011d3c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	3301      	adds	r3, #1
 8011d42:	613b      	str	r3, [r7, #16]
    idx++;
 8011d44:	7dfb      	ldrb	r3, [r7, #23]
 8011d46:	3301      	adds	r3, #1
 8011d48:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011d4a:	7dfb      	ldrb	r3, [r7, #23]
 8011d4c:	68ba      	ldr	r2, [r7, #8]
 8011d4e:	4413      	add	r3, r2
 8011d50:	2200      	movs	r2, #0
 8011d52:	701a      	strb	r2, [r3, #0]
    idx++;
 8011d54:	7dfb      	ldrb	r3, [r7, #23]
 8011d56:	3301      	adds	r3, #1
 8011d58:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011d5a:	693b      	ldr	r3, [r7, #16]
 8011d5c:	781b      	ldrb	r3, [r3, #0]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d1e7      	bne.n	8011d32 <USBD_GetString+0x52>
 8011d62:	e000      	b.n	8011d66 <USBD_GetString+0x86>
    return;
 8011d64:	bf00      	nop
  }
}
 8011d66:	3718      	adds	r7, #24
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}

08011d6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011d6c:	b480      	push	{r7}
 8011d6e:	b085      	sub	sp, #20
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011d74:	2300      	movs	r3, #0
 8011d76:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011d7c:	e005      	b.n	8011d8a <USBD_GetLen+0x1e>
  {
    len++;
 8011d7e:	7bfb      	ldrb	r3, [r7, #15]
 8011d80:	3301      	adds	r3, #1
 8011d82:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	3301      	adds	r3, #1
 8011d88:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	781b      	ldrb	r3, [r3, #0]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d1f5      	bne.n	8011d7e <USBD_GetLen+0x12>
  }

  return len;
 8011d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	3714      	adds	r7, #20
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9e:	4770      	bx	lr

08011da0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b084      	sub	sp, #16
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	60f8      	str	r0, [r7, #12]
 8011da8:	60b9      	str	r1, [r7, #8]
 8011daa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	2202      	movs	r2, #2
 8011db0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	687a      	ldr	r2, [r7, #4]
 8011db8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	687a      	ldr	r2, [r7, #4]
 8011dbe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	68ba      	ldr	r2, [r7, #8]
 8011dc4:	2100      	movs	r1, #0
 8011dc6:	68f8      	ldr	r0, [r7, #12]
 8011dc8:	f001 fa6e 	bl	80132a8 <USBD_LL_Transmit>

  return USBD_OK;
 8011dcc:	2300      	movs	r3, #0
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	3710      	adds	r7, #16
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}

08011dd6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011dd6:	b580      	push	{r7, lr}
 8011dd8:	b084      	sub	sp, #16
 8011dda:	af00      	add	r7, sp, #0
 8011ddc:	60f8      	str	r0, [r7, #12]
 8011dde:	60b9      	str	r1, [r7, #8]
 8011de0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	68ba      	ldr	r2, [r7, #8]
 8011de6:	2100      	movs	r1, #0
 8011de8:	68f8      	ldr	r0, [r7, #12]
 8011dea:	f001 fa5d 	bl	80132a8 <USBD_LL_Transmit>

  return USBD_OK;
 8011dee:	2300      	movs	r3, #0
}
 8011df0:	4618      	mov	r0, r3
 8011df2:	3710      	adds	r7, #16
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}

08011df8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b084      	sub	sp, #16
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	60f8      	str	r0, [r7, #12]
 8011e00:	60b9      	str	r1, [r7, #8]
 8011e02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	2203      	movs	r2, #3
 8011e08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	687a      	ldr	r2, [r7, #4]
 8011e10:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	687a      	ldr	r2, [r7, #4]
 8011e18:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	68ba      	ldr	r2, [r7, #8]
 8011e20:	2100      	movs	r1, #0
 8011e22:	68f8      	ldr	r0, [r7, #12]
 8011e24:	f001 fa78 	bl	8013318 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011e28:	2300      	movs	r3, #0
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3710      	adds	r7, #16
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}

08011e32 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011e32:	b580      	push	{r7, lr}
 8011e34:	b084      	sub	sp, #16
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	60f8      	str	r0, [r7, #12]
 8011e3a:	60b9      	str	r1, [r7, #8]
 8011e3c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	68ba      	ldr	r2, [r7, #8]
 8011e42:	2100      	movs	r1, #0
 8011e44:	68f8      	ldr	r0, [r7, #12]
 8011e46:	f001 fa67 	bl	8013318 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011e4a:	2300      	movs	r3, #0
}
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	3710      	adds	r7, #16
 8011e50:	46bd      	mov	sp, r7
 8011e52:	bd80      	pop	{r7, pc}

08011e54 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b082      	sub	sp, #8
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2204      	movs	r2, #4
 8011e60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011e64:	2300      	movs	r3, #0
 8011e66:	2200      	movs	r2, #0
 8011e68:	2100      	movs	r1, #0
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f001 fa1c 	bl	80132a8 <USBD_LL_Transmit>

  return USBD_OK;
 8011e70:	2300      	movs	r3, #0
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3708      	adds	r7, #8
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}

08011e7a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011e7a:	b580      	push	{r7, lr}
 8011e7c:	b082      	sub	sp, #8
 8011e7e:	af00      	add	r7, sp, #0
 8011e80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2205      	movs	r2, #5
 8011e86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	2100      	movs	r1, #0
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f001 fa41 	bl	8013318 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011e96:	2300      	movs	r3, #0
}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	3708      	adds	r7, #8
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}

08011ea0 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b082      	sub	sp, #8
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f7f3 fc1b 	bl	80056e4 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8011eae:	bf00      	nop
 8011eb0:	3708      	adds	r7, #8
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd80      	pop	{r7, pc}

08011eb6 <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8011eb6:	b580      	push	{r7, lr}
 8011eb8:	b082      	sub	sp, #8
 8011eba:	af00      	add	r7, sp, #0
 8011ebc:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8011ebe:	e002      	b.n	8011ec6 <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8011ec0:	2001      	movs	r0, #1
 8011ec2:	f7ff ffed 	bl	8011ea0 <SPIF_Delay>
  while (Handle->Lock)
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	7b1b      	ldrb	r3, [r3, #12]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d1f8      	bne.n	8011ec0 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2201      	movs	r2, #1
 8011ed2:	731a      	strb	r2, [r3, #12]
}
 8011ed4:	bf00      	nop
 8011ed6:	3708      	adds	r7, #8
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}

08011edc <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8011edc:	b480      	push	{r7}
 8011ede:	b083      	sub	sp, #12
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	731a      	strb	r2, [r3, #12]
}
 8011eea:	bf00      	nop
 8011eec:	370c      	adds	r7, #12
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef4:	4770      	bx	lr

08011ef6 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8011ef6:	b580      	push	{r7, lr}
 8011ef8:	b084      	sub	sp, #16
 8011efa:	af00      	add	r7, sp, #0
 8011efc:	6078      	str	r0, [r7, #4]
 8011efe:	460b      	mov	r3, r1
 8011f00:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	6858      	ldr	r0, [r3, #4]
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	691b      	ldr	r3, [r3, #16]
 8011f0a:	b29b      	uxth	r3, r3
 8011f0c:	78fa      	ldrb	r2, [r7, #3]
 8011f0e:	4619      	mov	r1, r3
 8011f10:	f7f5 fbaa 	bl	8007668 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 8011f14:	2300      	movs	r3, #0
 8011f16:	60fb      	str	r3, [r7, #12]
 8011f18:	e002      	b.n	8011f20 <SPIF_CsPin+0x2a>
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	3301      	adds	r3, #1
 8011f1e:	60fb      	str	r3, [r7, #12]
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	2b09      	cmp	r3, #9
 8011f24:	ddf9      	ble.n	8011f1a <SPIF_CsPin+0x24>
}
 8011f26:	bf00      	nop
 8011f28:	bf00      	nop
 8011f2a:	3710      	adds	r7, #16
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bd80      	pop	{r7, pc}

08011f30 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b088      	sub	sp, #32
 8011f34:	af02      	add	r7, sp, #8
 8011f36:	60f8      	str	r0, [r7, #12]
 8011f38:	60b9      	str	r1, [r7, #8]
 8011f3a:	607a      	str	r2, [r7, #4]
 8011f3c:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	6818      	ldr	r0, [r3, #0]
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	b29a      	uxth	r2, r3
 8011f4a:	6a3b      	ldr	r3, [r7, #32]
 8011f4c:	9300      	str	r3, [sp, #0]
 8011f4e:	4613      	mov	r3, r2
 8011f50:	687a      	ldr	r2, [r7, #4]
 8011f52:	68b9      	ldr	r1, [r7, #8]
 8011f54:	f7f9 fae5 	bl	800b522 <HAL_SPI_TransmitReceive>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d101      	bne.n	8011f62 <SPIF_TransmitReceive+0x32>
  {
    retVal = true;
 8011f5e:	2301      	movs	r3, #1
 8011f60:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8011f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3718      	adds	r7, #24
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}

08011f6c <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b086      	sub	sp, #24
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	60f8      	str	r0, [r7, #12]
 8011f74:	60b9      	str	r1, [r7, #8]
 8011f76:	607a      	str	r2, [r7, #4]
 8011f78:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	6818      	ldr	r0, [r3, #0]
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	b29a      	uxth	r2, r3
 8011f86:	683b      	ldr	r3, [r7, #0]
 8011f88:	68b9      	ldr	r1, [r7, #8]
 8011f8a:	f7f9 f81e 	bl	800afca <HAL_SPI_Transmit>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d101      	bne.n	8011f98 <SPIF_Transmit+0x2c>
  {
    retVal = true;
 8011f94:	2301      	movs	r3, #1
 8011f96:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8011f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3718      	adds	r7, #24
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}

08011fa2 <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8011fa2:	b580      	push	{r7, lr}
 8011fa4:	b086      	sub	sp, #24
 8011fa6:	af00      	add	r7, sp, #0
 8011fa8:	60f8      	str	r0, [r7, #12]
 8011faa:	60b9      	str	r1, [r7, #8]
 8011fac:	607a      	str	r2, [r7, #4]
 8011fae:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Receive(Handle->HSpi, Rx, Size, Timeout) == HAL_OK)
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	6818      	ldr	r0, [r3, #0]
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	b29a      	uxth	r2, r3
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	68b9      	ldr	r1, [r7, #8]
 8011fc0:	f7f9 f978 	bl	800b2b4 <HAL_SPI_Receive>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d101      	bne.n	8011fce <SPIF_Receive+0x2c>
  {
    retVal = true;
 8011fca:	2301      	movs	r3, #1
 8011fcc:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8011fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3718      	adds	r7, #24
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd80      	pop	{r7, pc}

08011fd8 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b084      	sub	sp, #16
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8011fe0:	2301      	movs	r3, #1
 8011fe2:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 8011fe4:	2306      	movs	r3, #6
 8011fe6:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8011fe8:	2100      	movs	r1, #0
 8011fea:	6878      	ldr	r0, [r7, #4]
 8011fec:	f7ff ff83 	bl	8011ef6 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8011ff0:	f107 010c 	add.w	r1, r7, #12
 8011ff4:	2364      	movs	r3, #100	; 0x64
 8011ff6:	2201      	movs	r2, #1
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f7ff ffb7 	bl	8011f6c <SPIF_Transmit>
 8011ffe:	4603      	mov	r3, r0
 8012000:	f083 0301 	eor.w	r3, r3, #1
 8012004:	b2db      	uxtb	r3, r3
 8012006:	2b00      	cmp	r3, #0
 8012008:	d001      	beq.n	801200e <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 801200a:	2300      	movs	r3, #0
 801200c:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 801200e:	2101      	movs	r1, #1
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f7ff ff70 	bl	8011ef6 <SPIF_CsPin>
  return retVal;
 8012016:	7bfb      	ldrb	r3, [r7, #15]
}
 8012018:	4618      	mov	r0, r3
 801201a:	3710      	adds	r7, #16
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}

08012020 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b084      	sub	sp, #16
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8012028:	2301      	movs	r3, #1
 801202a:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 801202c:	2304      	movs	r3, #4
 801202e:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8012030:	2100      	movs	r1, #0
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f7ff ff5f 	bl	8011ef6 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8012038:	f107 010c 	add.w	r1, r7, #12
 801203c:	2364      	movs	r3, #100	; 0x64
 801203e:	2201      	movs	r2, #1
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f7ff ff93 	bl	8011f6c <SPIF_Transmit>
 8012046:	4603      	mov	r3, r0
 8012048:	f083 0301 	eor.w	r3, r3, #1
 801204c:	b2db      	uxtb	r3, r3
 801204e:	2b00      	cmp	r3, #0
 8012050:	d001      	beq.n	8012056 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 8012052:	2300      	movs	r3, #0
 8012054:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8012056:	2101      	movs	r1, #1
 8012058:	6878      	ldr	r0, [r7, #4]
 801205a:	f7ff ff4c 	bl	8011ef6 <SPIF_CsPin>
  return retVal;
 801205e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012060:	4618      	mov	r0, r3
 8012062:	3710      	adds	r7, #16
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}

08012068 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b086      	sub	sp, #24
 801206c:	af02      	add	r7, sp, #8
 801206e:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 8012070:	2300      	movs	r3, #0
 8012072:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 8012074:	f24a 5305 	movw	r3, #42245	; 0xa505
 8012078:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 801207a:	2100      	movs	r1, #0
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f7ff ff3a 	bl	8011ef6 <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 8012082:	f107 0208 	add.w	r2, r7, #8
 8012086:	f107 010c 	add.w	r1, r7, #12
 801208a:	2364      	movs	r3, #100	; 0x64
 801208c:	9300      	str	r3, [sp, #0]
 801208e:	2302      	movs	r3, #2
 8012090:	6878      	ldr	r0, [r7, #4]
 8012092:	f7ff ff4d 	bl	8011f30 <SPIF_TransmitReceive>
 8012096:	4603      	mov	r3, r0
 8012098:	2b00      	cmp	r3, #0
 801209a:	d001      	beq.n	80120a0 <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 801209c:	7a7b      	ldrb	r3, [r7, #9]
 801209e:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 80120a0:	2101      	movs	r1, #1
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f7ff ff27 	bl	8011ef6 <SPIF_CsPin>
  return retVal;
 80120a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3710      	adds	r7, #16
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}

080120b2 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 80120b2:	b580      	push	{r7, lr}
 80120b4:	b084      	sub	sp, #16
 80120b6:	af00      	add	r7, sp, #0
 80120b8:	6078      	str	r0, [r7, #4]
 80120ba:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 80120bc:	2300      	movs	r3, #0
 80120be:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 80120c0:	f7f3 fb04 	bl	80056cc <HAL_GetTick>
 80120c4:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 80120c6:	2001      	movs	r0, #1
 80120c8:	f7ff feea 	bl	8011ea0 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 80120cc:	f7f3 fafe 	bl	80056cc <HAL_GetTick>
 80120d0:	4602      	mov	r2, r0
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	1ad3      	subs	r3, r2, r3
 80120d6:	683a      	ldr	r2, [r7, #0]
 80120d8:	429a      	cmp	r2, r3
 80120da:	d90a      	bls.n	80120f2 <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f7ff ffc3 	bl	8012068 <SPIF_ReadReg1>
 80120e2:	4603      	mov	r3, r0
 80120e4:	f003 0301 	and.w	r3, r3, #1
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d1ec      	bne.n	80120c6 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 80120ec:	2301      	movs	r3, #1
 80120ee:	73fb      	strb	r3, [r7, #15]
      break;
 80120f0:	e000      	b.n	80120f4 <SPIF_WaitForWriting+0x42>
      break;
 80120f2:	bf00      	nop
    }
  }
  return retVal;
 80120f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	3710      	adds	r7, #16
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
	...

08012100 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b088      	sub	sp, #32
 8012104:	af02      	add	r7, sp, #8
 8012106:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8012108:	f06f 0360 	mvn.w	r3, #96	; 0x60
 801210c:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 801210e:	2300      	movs	r3, #0
 8012110:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 8012112:	2100      	movs	r1, #0
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f7ff feee 	bl	8011ef6 <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 801211a:	f107 020c 	add.w	r2, r7, #12
 801211e:	f107 0110 	add.w	r1, r7, #16
 8012122:	2364      	movs	r3, #100	; 0x64
 8012124:	9300      	str	r3, [sp, #0]
 8012126:	2304      	movs	r3, #4
 8012128:	6878      	ldr	r0, [r7, #4]
 801212a:	f7ff ff01 	bl	8011f30 <SPIF_TransmitReceive>
 801212e:	4603      	mov	r3, r0
 8012130:	f083 0301 	eor.w	r3, r3, #1
 8012134:	b2db      	uxtb	r3, r3
 8012136:	2b00      	cmp	r3, #0
 8012138:	d004      	beq.n	8012144 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 801213a:	2101      	movs	r1, #1
 801213c:	6878      	ldr	r0, [r7, #4]
 801213e:	f7ff feda 	bl	8011ef6 <SPIF_CsPin>
      break;
 8012142:	e16f      	b.n	8012424 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8012144:	2101      	movs	r1, #1
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f7ff fed5 	bl	8011ef6 <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 801214c:	7b7a      	ldrb	r2, [r7, #13]
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 8012152:	7bba      	ldrb	r2, [r7, #14]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8012158:	7bfa      	ldrb	r2, [r7, #15]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	7a1b      	ldrb	r3, [r3, #8]
 8012162:	2bef      	cmp	r3, #239	; 0xef
 8012164:	f000 80f0 	beq.w	8012348 <SPIF_FindChip+0x248>
 8012168:	2bef      	cmp	r3, #239	; 0xef
 801216a:	f300 80e9 	bgt.w	8012340 <SPIF_FindChip+0x240>
 801216e:	2bc8      	cmp	r3, #200	; 0xc8
 8012170:	f300 80e6 	bgt.w	8012340 <SPIF_FindChip+0x240>
 8012174:	2b85      	cmp	r3, #133	; 0x85
 8012176:	da0c      	bge.n	8012192 <SPIF_FindChip+0x92>
 8012178:	2b62      	cmp	r3, #98	; 0x62
 801217a:	f000 80e7 	beq.w	801234c <SPIF_FindChip+0x24c>
 801217e:	2b62      	cmp	r3, #98	; 0x62
 8012180:	f300 80de 	bgt.w	8012340 <SPIF_FindChip+0x240>
 8012184:	2b20      	cmp	r3, #32
 8012186:	f300 80d9 	bgt.w	801233c <SPIF_FindChip+0x23c>
 801218a:	2b00      	cmp	r3, #0
 801218c:	f300 8090 	bgt.w	80122b0 <SPIF_FindChip+0x1b0>
 8012190:	e0d6      	b.n	8012340 <SPIF_FindChip+0x240>
 8012192:	3b85      	subs	r3, #133	; 0x85
 8012194:	2b43      	cmp	r3, #67	; 0x43
 8012196:	f200 80d3 	bhi.w	8012340 <SPIF_FindChip+0x240>
 801219a:	a201      	add	r2, pc, #4	; (adr r2, 80121a0 <SPIF_FindChip+0xa0>)
 801219c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121a0:	08012351 	.word	0x08012351
 80121a4:	08012341 	.word	0x08012341
 80121a8:	08012341 	.word	0x08012341
 80121ac:	08012341 	.word	0x08012341
 80121b0:	08012351 	.word	0x08012351
 80121b4:	08012341 	.word	0x08012341
 80121b8:	08012341 	.word	0x08012341
 80121bc:	08012351 	.word	0x08012351
 80121c0:	08012341 	.word	0x08012341
 80121c4:	08012341 	.word	0x08012341
 80121c8:	08012341 	.word	0x08012341
 80121cc:	08012341 	.word	0x08012341
 80121d0:	08012341 	.word	0x08012341
 80121d4:	08012341 	.word	0x08012341
 80121d8:	08012341 	.word	0x08012341
 80121dc:	08012341 	.word	0x08012341
 80121e0:	08012341 	.word	0x08012341
 80121e4:	08012341 	.word	0x08012341
 80121e8:	08012341 	.word	0x08012341
 80121ec:	08012341 	.word	0x08012341
 80121f0:	08012341 	.word	0x08012341
 80121f4:	08012341 	.word	0x08012341
 80121f8:	08012341 	.word	0x08012341
 80121fc:	08012341 	.word	0x08012341
 8012200:	08012351 	.word	0x08012351
 8012204:	08012341 	.word	0x08012341
 8012208:	08012341 	.word	0x08012341
 801220c:	08012341 	.word	0x08012341
 8012210:	08012351 	.word	0x08012351
 8012214:	08012341 	.word	0x08012341
 8012218:	08012341 	.word	0x08012341
 801221c:	08012341 	.word	0x08012341
 8012220:	08012341 	.word	0x08012341
 8012224:	08012341 	.word	0x08012341
 8012228:	08012341 	.word	0x08012341
 801222c:	08012341 	.word	0x08012341
 8012230:	08012341 	.word	0x08012341
 8012234:	08012341 	.word	0x08012341
 8012238:	08012341 	.word	0x08012341
 801223c:	08012341 	.word	0x08012341
 8012240:	08012351 	.word	0x08012351
 8012244:	08012341 	.word	0x08012341
 8012248:	08012341 	.word	0x08012341
 801224c:	08012341 	.word	0x08012341
 8012250:	08012341 	.word	0x08012341
 8012254:	08012341 	.word	0x08012341
 8012258:	08012341 	.word	0x08012341
 801225c:	08012341 	.word	0x08012341
 8012260:	08012341 	.word	0x08012341
 8012264:	08012341 	.word	0x08012341
 8012268:	08012341 	.word	0x08012341
 801226c:	08012341 	.word	0x08012341
 8012270:	08012341 	.word	0x08012341
 8012274:	08012341 	.word	0x08012341
 8012278:	08012341 	.word	0x08012341
 801227c:	08012341 	.word	0x08012341
 8012280:	08012341 	.word	0x08012341
 8012284:	08012341 	.word	0x08012341
 8012288:	08012351 	.word	0x08012351
 801228c:	08012341 	.word	0x08012341
 8012290:	08012341 	.word	0x08012341
 8012294:	08012351 	.word	0x08012351
 8012298:	08012341 	.word	0x08012341
 801229c:	08012341 	.word	0x08012341
 80122a0:	08012341 	.word	0x08012341
 80122a4:	08012341 	.word	0x08012341
 80122a8:	08012341 	.word	0x08012341
 80122ac:	08012351 	.word	0x08012351
 80122b0:	3b01      	subs	r3, #1
 80122b2:	2b1f      	cmp	r3, #31
 80122b4:	d844      	bhi.n	8012340 <SPIF_FindChip+0x240>
 80122b6:	a201      	add	r2, pc, #4	; (adr r2, 80122bc <SPIF_FindChip+0x1bc>)
 80122b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122bc:	08012355 	.word	0x08012355
 80122c0:	08012341 	.word	0x08012341
 80122c4:	08012341 	.word	0x08012341
 80122c8:	08012355 	.word	0x08012355
 80122cc:	08012341 	.word	0x08012341
 80122d0:	08012341 	.word	0x08012341
 80122d4:	08012341 	.word	0x08012341
 80122d8:	08012341 	.word	0x08012341
 80122dc:	08012341 	.word	0x08012341
 80122e0:	08012341 	.word	0x08012341
 80122e4:	08012341 	.word	0x08012341
 80122e8:	08012341 	.word	0x08012341
 80122ec:	08012341 	.word	0x08012341
 80122f0:	08012341 	.word	0x08012341
 80122f4:	08012341 	.word	0x08012341
 80122f8:	08012341 	.word	0x08012341
 80122fc:	08012341 	.word	0x08012341
 8012300:	08012341 	.word	0x08012341
 8012304:	08012341 	.word	0x08012341
 8012308:	08012341 	.word	0x08012341
 801230c:	08012341 	.word	0x08012341
 8012310:	08012341 	.word	0x08012341
 8012314:	08012341 	.word	0x08012341
 8012318:	08012341 	.word	0x08012341
 801231c:	08012341 	.word	0x08012341
 8012320:	08012341 	.word	0x08012341
 8012324:	08012341 	.word	0x08012341
 8012328:	08012355 	.word	0x08012355
 801232c:	08012341 	.word	0x08012341
 8012330:	08012341 	.word	0x08012341
 8012334:	08012341 	.word	0x08012341
 8012338:	08012355 	.word	0x08012355
 801233c:	2b37      	cmp	r3, #55	; 0x37
 801233e:	d00b      	beq.n	8012358 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2200      	movs	r2, #0
 8012344:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 8012346:	e008      	b.n	801235a <SPIF_FindChip+0x25a>
      break;
 8012348:	bf00      	nop
 801234a:	e006      	b.n	801235a <SPIF_FindChip+0x25a>
      break;
 801234c:	bf00      	nop
 801234e:	e004      	b.n	801235a <SPIF_FindChip+0x25a>
      break;
 8012350:	bf00      	nop
 8012352:	e002      	b.n	801235a <SPIF_FindChip+0x25a>
      break;
 8012354:	bf00      	nop
 8012356:	e000      	b.n	801235a <SPIF_FindChip+0x25a>
      break;
 8012358:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	7a5b      	ldrb	r3, [r3, #9]
 801235e:	3b11      	subs	r3, #17
 8012360:	2b0f      	cmp	r3, #15
 8012362:	d84e      	bhi.n	8012402 <SPIF_FindChip+0x302>
 8012364:	a201      	add	r2, pc, #4	; (adr r2, 801236c <SPIF_FindChip+0x26c>)
 8012366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801236a:	bf00      	nop
 801236c:	080123ad 	.word	0x080123ad
 8012370:	080123b5 	.word	0x080123b5
 8012374:	080123bd 	.word	0x080123bd
 8012378:	080123c5 	.word	0x080123c5
 801237c:	080123cd 	.word	0x080123cd
 8012380:	080123d5 	.word	0x080123d5
 8012384:	080123dd 	.word	0x080123dd
 8012388:	080123e5 	.word	0x080123e5
 801238c:	080123ef 	.word	0x080123ef
 8012390:	08012403 	.word	0x08012403
 8012394:	08012403 	.word	0x08012403
 8012398:	08012403 	.word	0x08012403
 801239c:	08012403 	.word	0x08012403
 80123a0:	08012403 	.word	0x08012403
 80123a4:	08012403 	.word	0x08012403
 80123a8:	080123f9 	.word	0x080123f9
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2202      	movs	r2, #2
 80123b0:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 80123b2:	e02a      	b.n	801240a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2204      	movs	r2, #4
 80123b8:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 80123ba:	e026      	b.n	801240a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2208      	movs	r2, #8
 80123c0:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 80123c2:	e022      	b.n	801240a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2210      	movs	r2, #16
 80123c8:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 80123ca:	e01e      	b.n	801240a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	2220      	movs	r2, #32
 80123d0:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 80123d2:	e01a      	b.n	801240a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2240      	movs	r2, #64	; 0x40
 80123d8:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 80123da:	e016      	b.n	801240a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2280      	movs	r2, #128	; 0x80
 80123e0:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 80123e2:	e012      	b.n	801240a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80123ea:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 80123ec:	e00d      	b.n	801240a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80123f4:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 80123f6:	e008      	b.n	801240a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80123fe:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 8012400:	e003      	b.n	801240a <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	2200      	movs	r2, #0
 8012406:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 8012408:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	69db      	ldr	r3, [r3, #28]
 801240e:	011a      	lsls	r2, r3, #4
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	699b      	ldr	r3, [r3, #24]
 8012418:	031b      	lsls	r3, r3, #12
 801241a:	0a1a      	lsrs	r2, r3, #8
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 8012420:	2301      	movs	r3, #1
 8012422:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8012424:	7dfb      	ldrb	r3, [r7, #23]
}
 8012426:	4618      	mov	r0, r3
 8012428:	3718      	adds	r7, #24
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}
 801242e:	bf00      	nop

08012430 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b08a      	sub	sp, #40	; 0x28
 8012434:	af00      	add	r7, sp, #0
 8012436:	60f8      	str	r0, [r7, #12]
 8012438:	60b9      	str	r1, [r7, #8]
 801243a:	607a      	str	r2, [r7, #4]
 801243c:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801243e:	2300      	movs	r3, #0
 8012440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8012444:	2300      	movs	r3, #0
 8012446:	623b      	str	r3, [r7, #32]
 8012448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801244a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801244e:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	695b      	ldr	r3, [r3, #20]
 8012454:	68ba      	ldr	r2, [r7, #8]
 8012456:	429a      	cmp	r2, r3
 8012458:	f080 8084 	bcs.w	8012564 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 801245c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801245e:	2bff      	cmp	r3, #255	; 0xff
 8012460:	f200 8082 	bhi.w	8012568 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 8012464:	683a      	ldr	r2, [r7, #0]
 8012466:	69fb      	ldr	r3, [r7, #28]
 8012468:	429a      	cmp	r2, r3
 801246a:	d901      	bls.n	8012470 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	021b      	lsls	r3, r3, #8
 8012474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012476:	4413      	add	r3, r2
 8012478:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 801247a:	68f8      	ldr	r0, [r7, #12]
 801247c:	f7ff fdac 	bl	8011fd8 <SPIF_WriteEnable>
 8012480:	4603      	mov	r3, r0
 8012482:	f083 0301 	eor.w	r3, r3, #1
 8012486:	b2db      	uxtb	r3, r3
 8012488:	2b00      	cmp	r3, #0
 801248a:	d16f      	bne.n	801256c <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 801248c:	2100      	movs	r1, #0
 801248e:	68f8      	ldr	r0, [r7, #12]
 8012490:	f7ff fd31 	bl	8011ef6 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	69db      	ldr	r3, [r3, #28]
 8012498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801249c:	d322      	bcc.n	80124e4 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 801249e:	2312      	movs	r3, #18
 80124a0:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 80124a2:	6a3b      	ldr	r3, [r7, #32]
 80124a4:	0e1b      	lsrs	r3, r3, #24
 80124a6:	b2db      	uxtb	r3, r3
 80124a8:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 80124aa:	6a3b      	ldr	r3, [r7, #32]
 80124ac:	0c1b      	lsrs	r3, r3, #16
 80124ae:	b2db      	uxtb	r3, r3
 80124b0:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 80124b2:	6a3b      	ldr	r3, [r7, #32]
 80124b4:	0a1b      	lsrs	r3, r3, #8
 80124b6:	b2db      	uxtb	r3, r3
 80124b8:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 80124ba:	6a3b      	ldr	r3, [r7, #32]
 80124bc:	b2db      	uxtb	r3, r3
 80124be:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80124c0:	f107 0114 	add.w	r1, r7, #20
 80124c4:	2364      	movs	r3, #100	; 0x64
 80124c6:	2205      	movs	r2, #5
 80124c8:	68f8      	ldr	r0, [r7, #12]
 80124ca:	f7ff fd4f 	bl	8011f6c <SPIF_Transmit>
 80124ce:	4603      	mov	r3, r0
 80124d0:	f083 0301 	eor.w	r3, r3, #1
 80124d4:	b2db      	uxtb	r3, r3
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d023      	beq.n	8012522 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 80124da:	2101      	movs	r1, #1
 80124dc:	68f8      	ldr	r0, [r7, #12]
 80124de:	f7ff fd0a 	bl	8011ef6 <SPIF_CsPin>
        break;
 80124e2:	e044      	b.n	801256e <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 80124e4:	2302      	movs	r3, #2
 80124e6:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 80124e8:	6a3b      	ldr	r3, [r7, #32]
 80124ea:	0c1b      	lsrs	r3, r3, #16
 80124ec:	b2db      	uxtb	r3, r3
 80124ee:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 80124f0:	6a3b      	ldr	r3, [r7, #32]
 80124f2:	0a1b      	lsrs	r3, r3, #8
 80124f4:	b2db      	uxtb	r3, r3
 80124f6:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 80124f8:	6a3b      	ldr	r3, [r7, #32]
 80124fa:	b2db      	uxtb	r3, r3
 80124fc:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80124fe:	f107 0114 	add.w	r1, r7, #20
 8012502:	2364      	movs	r3, #100	; 0x64
 8012504:	2204      	movs	r2, #4
 8012506:	68f8      	ldr	r0, [r7, #12]
 8012508:	f7ff fd30 	bl	8011f6c <SPIF_Transmit>
 801250c:	4603      	mov	r3, r0
 801250e:	f083 0301 	eor.w	r3, r3, #1
 8012512:	b2db      	uxtb	r3, r3
 8012514:	2b00      	cmp	r3, #0
 8012516:	d004      	beq.n	8012522 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8012518:	2101      	movs	r1, #1
 801251a:	68f8      	ldr	r0, [r7, #12]
 801251c:	f7ff fceb 	bl	8011ef6 <SPIF_CsPin>
        break;
 8012520:	e025      	b.n	801256e <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 8012522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012526:	683a      	ldr	r2, [r7, #0]
 8012528:	6879      	ldr	r1, [r7, #4]
 801252a:	68f8      	ldr	r0, [r7, #12]
 801252c:	f7ff fd1e 	bl	8011f6c <SPIF_Transmit>
 8012530:	4603      	mov	r3, r0
 8012532:	f083 0301 	eor.w	r3, r3, #1
 8012536:	b2db      	uxtb	r3, r3
 8012538:	2b00      	cmp	r3, #0
 801253a:	d004      	beq.n	8012546 <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 801253c:	2101      	movs	r1, #1
 801253e:	68f8      	ldr	r0, [r7, #12]
 8012540:	f7ff fcd9 	bl	8011ef6 <SPIF_CsPin>
      break;
 8012544:	e013      	b.n	801256e <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 8012546:	2101      	movs	r1, #1
 8012548:	68f8      	ldr	r0, [r7, #12]
 801254a:	f7ff fcd4 	bl	8011ef6 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 801254e:	2164      	movs	r1, #100	; 0x64
 8012550:	68f8      	ldr	r0, [r7, #12]
 8012552:	f7ff fdae 	bl	80120b2 <SPIF_WaitForWriting>
 8012556:	4603      	mov	r3, r0
 8012558:	2b00      	cmp	r3, #0
 801255a:	d008      	beq.n	801256e <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 801255c:	2301      	movs	r3, #1
 801255e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012562:	e004      	b.n	801256e <SPIF_WriteFn+0x13e>
      break;
 8012564:	bf00      	nop
 8012566:	e002      	b.n	801256e <SPIF_WriteFn+0x13e>
      break;
 8012568:	bf00      	nop
 801256a:	e000      	b.n	801256e <SPIF_WriteFn+0x13e>
      break;
 801256c:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 801256e:	68f8      	ldr	r0, [r7, #12]
 8012570:	f7ff fd56 	bl	8012020 <SPIF_WriteDisable>
  return retVal;
 8012574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012578:	4618      	mov	r0, r3
 801257a:	3728      	adds	r7, #40	; 0x28
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}

08012580 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b086      	sub	sp, #24
 8012584:	af00      	add	r7, sp, #0
 8012586:	60f8      	str	r0, [r7, #12]
 8012588:	60b9      	str	r1, [r7, #8]
 801258a:	607a      	str	r2, [r7, #4]
 801258c:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801258e:	2300      	movs	r3, #0
 8012590:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 8012592:	2100      	movs	r1, #0
 8012594:	68f8      	ldr	r0, [r7, #12]
 8012596:	f7ff fcae 	bl	8011ef6 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	69db      	ldr	r3, [r3, #28]
 801259e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80125a2:	d322      	bcc.n	80125ea <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 80125a4:	2313      	movs	r3, #19
 80125a6:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 80125a8:	68bb      	ldr	r3, [r7, #8]
 80125aa:	0e1b      	lsrs	r3, r3, #24
 80125ac:	b2db      	uxtb	r3, r3
 80125ae:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	0c1b      	lsrs	r3, r3, #16
 80125b4:	b2db      	uxtb	r3, r3
 80125b6:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 80125b8:	68bb      	ldr	r3, [r7, #8]
 80125ba:	0a1b      	lsrs	r3, r3, #8
 80125bc:	b2db      	uxtb	r3, r3
 80125be:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	b2db      	uxtb	r3, r3
 80125c4:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80125c6:	f107 0110 	add.w	r1, r7, #16
 80125ca:	2364      	movs	r3, #100	; 0x64
 80125cc:	2205      	movs	r2, #5
 80125ce:	68f8      	ldr	r0, [r7, #12]
 80125d0:	f7ff fccc 	bl	8011f6c <SPIF_Transmit>
 80125d4:	4603      	mov	r3, r0
 80125d6:	f083 0301 	eor.w	r3, r3, #1
 80125da:	b2db      	uxtb	r3, r3
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d023      	beq.n	8012628 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 80125e0:	2101      	movs	r1, #1
 80125e2:	68f8      	ldr	r0, [r7, #12]
 80125e4:	f7ff fc87 	bl	8011ef6 <SPIF_CsPin>
        break;
 80125e8:	e036      	b.n	8012658 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 80125ea:	2303      	movs	r3, #3
 80125ec:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	0c1b      	lsrs	r3, r3, #16
 80125f2:	b2db      	uxtb	r3, r3
 80125f4:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	0a1b      	lsrs	r3, r3, #8
 80125fa:	b2db      	uxtb	r3, r3
 80125fc:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	b2db      	uxtb	r3, r3
 8012602:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8012604:	f107 0110 	add.w	r1, r7, #16
 8012608:	2364      	movs	r3, #100	; 0x64
 801260a:	2204      	movs	r2, #4
 801260c:	68f8      	ldr	r0, [r7, #12]
 801260e:	f7ff fcad 	bl	8011f6c <SPIF_Transmit>
 8012612:	4603      	mov	r3, r0
 8012614:	f083 0301 	eor.w	r3, r3, #1
 8012618:	b2db      	uxtb	r3, r3
 801261a:	2b00      	cmp	r3, #0
 801261c:	d004      	beq.n	8012628 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 801261e:	2101      	movs	r1, #1
 8012620:	68f8      	ldr	r0, [r7, #12]
 8012622:	f7ff fc68 	bl	8011ef6 <SPIF_CsPin>
        break;
 8012626:	e017      	b.n	8012658 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8012628:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801262c:	683a      	ldr	r2, [r7, #0]
 801262e:	6879      	ldr	r1, [r7, #4]
 8012630:	68f8      	ldr	r0, [r7, #12]
 8012632:	f7ff fcb6 	bl	8011fa2 <SPIF_Receive>
 8012636:	4603      	mov	r3, r0
 8012638:	f083 0301 	eor.w	r3, r3, #1
 801263c:	b2db      	uxtb	r3, r3
 801263e:	2b00      	cmp	r3, #0
 8012640:	d004      	beq.n	801264c <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 8012642:	2101      	movs	r1, #1
 8012644:	68f8      	ldr	r0, [r7, #12]
 8012646:	f7ff fc56 	bl	8011ef6 <SPIF_CsPin>
      break;
 801264a:	e005      	b.n	8012658 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 801264c:	2101      	movs	r1, #1
 801264e:	68f8      	ldr	r0, [r7, #12]
 8012650:	f7ff fc51 	bl	8011ef6 <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8012654:	2301      	movs	r3, #1
 8012656:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8012658:	7dfb      	ldrb	r3, [r7, #23]
}
 801265a:	4618      	mov	r0, r3
 801265c:	3718      	adds	r7, #24
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}

08012662 <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 8012662:	b580      	push	{r7, lr}
 8012664:	b086      	sub	sp, #24
 8012666:	af00      	add	r7, sp, #0
 8012668:	60f8      	str	r0, [r7, #12]
 801266a:	60b9      	str	r1, [r7, #8]
 801266c:	607a      	str	r2, [r7, #4]
 801266e:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 8012670:	2300      	movs	r3, #0
 8012672:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d03a      	beq.n	80126f0 <SPIF_Init+0x8e>
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d037      	beq.n	80126f0 <SPIF_Init+0x8e>
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d034      	beq.n	80126f0 <SPIF_Init+0x8e>
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	7a9b      	ldrb	r3, [r3, #10]
 801268a:	2b01      	cmp	r3, #1
 801268c:	d030      	beq.n	80126f0 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 801268e:	2220      	movs	r2, #32
 8012690:	2100      	movs	r1, #0
 8012692:	68f8      	ldr	r0, [r7, #12]
 8012694:	f002 fe75 	bl	8015382 <memset>
    Handle->HSpi = HSpi;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	68ba      	ldr	r2, [r7, #8]
 801269c:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	687a      	ldr	r2, [r7, #4]
 80126a2:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 80126a4:	887a      	ldrh	r2, [r7, #2]
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 80126aa:	2101      	movs	r1, #1
 80126ac:	68f8      	ldr	r0, [r7, #12]
 80126ae:	f7ff fc22 	bl	8011ef6 <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 80126b2:	e002      	b.n	80126ba <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 80126b4:	2001      	movs	r0, #1
 80126b6:	f7ff fbf3 	bl	8011ea0 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 80126ba:	f7f3 f807 	bl	80056cc <HAL_GetTick>
 80126be:	4603      	mov	r3, r0
 80126c0:	2b13      	cmp	r3, #19
 80126c2:	d9f7      	bls.n	80126b4 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 80126c4:	68f8      	ldr	r0, [r7, #12]
 80126c6:	f7ff fcab 	bl	8012020 <SPIF_WriteDisable>
 80126ca:	4603      	mov	r3, r0
 80126cc:	f083 0301 	eor.w	r3, r3, #1
 80126d0:	b2db      	uxtb	r3, r3
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d10b      	bne.n	80126ee <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 80126d6:	68f8      	ldr	r0, [r7, #12]
 80126d8:	f7ff fd12 	bl	8012100 <SPIF_FindChip>
 80126dc:	4603      	mov	r3, r0
 80126de:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 80126e0:	7dfb      	ldrb	r3, [r7, #23]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d004      	beq.n	80126f0 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	2201      	movs	r2, #1
 80126ea:	729a      	strb	r2, [r3, #10]
 80126ec:	e000      	b.n	80126f0 <SPIF_Init+0x8e>
      break;
 80126ee:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 80126f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	3718      	adds	r7, #24
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}

080126fa <SPIF_EraseChip>:
  * @param  *Handle: Pointer to SPIF_HandleTypeDef structure
  *
  * @retval bool: true or false
  */
bool SPIF_EraseChip(SPIF_HandleTypeDef *Handle)
{
 80126fa:	b580      	push	{r7, lr}
 80126fc:	b084      	sub	sp, #16
 80126fe:	af00      	add	r7, sp, #0
 8012700:	6078      	str	r0, [r7, #4]
  SPIF_Lock(Handle);
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f7ff fbd7 	bl	8011eb6 <SPIF_Lock>
  bool retVal = false;
 8012708:	2300      	movs	r3, #0
 801270a:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_CHIPERASE1};
 801270c:	2360      	movs	r3, #96	; 0x60
 801270e:	733b      	strb	r3, [r7, #12]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseChip() START\r\n");
    if (SPIF_WriteEnable(Handle) == false)
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f7ff fc61 	bl	8011fd8 <SPIF_WriteEnable>
 8012716:	4603      	mov	r3, r0
 8012718:	f083 0301 	eor.w	r3, r3, #1
 801271c:	b2db      	uxtb	r3, r3
 801271e:	2b00      	cmp	r3, #0
 8012720:	d129      	bne.n	8012776 <SPIF_EraseChip+0x7c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8012722:	2100      	movs	r1, #0
 8012724:	6878      	ldr	r0, [r7, #4]
 8012726:	f7ff fbe6 	bl	8011ef6 <SPIF_CsPin>
    if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 801272a:	f107 010c 	add.w	r1, r7, #12
 801272e:	2364      	movs	r3, #100	; 0x64
 8012730:	2201      	movs	r2, #1
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f7ff fc1a 	bl	8011f6c <SPIF_Transmit>
 8012738:	4603      	mov	r3, r0
 801273a:	f083 0301 	eor.w	r3, r3, #1
 801273e:	b2db      	uxtb	r3, r3
 8012740:	2b00      	cmp	r3, #0
 8012742:	d004      	beq.n	801274e <SPIF_EraseChip+0x54>
    {
      SPIF_CsPin(Handle, 1);
 8012744:	2101      	movs	r1, #1
 8012746:	6878      	ldr	r0, [r7, #4]
 8012748:	f7ff fbd5 	bl	8011ef6 <SPIF_CsPin>
      break;
 801274c:	e014      	b.n	8012778 <SPIF_EraseChip+0x7e>
    }
    SPIF_CsPin(Handle, 1);
 801274e:	2101      	movs	r1, #1
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f7ff fbd0 	bl	8011ef6 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, Handle->BlockCnt * 1000))
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	69db      	ldr	r3, [r3, #28]
 801275a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801275e:	fb02 f303 	mul.w	r3, r2, r3
 8012762:	4619      	mov	r1, r3
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f7ff fca4 	bl	80120b2 <SPIF_WaitForWriting>
 801276a:	4603      	mov	r3, r0
 801276c:	2b00      	cmp	r3, #0
 801276e:	d003      	beq.n	8012778 <SPIF_EraseChip+0x7e>
    {
      dprintf("SPIF_EraseChip() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 8012770:	2301      	movs	r3, #1
 8012772:	73fb      	strb	r3, [r7, #15]
 8012774:	e000      	b.n	8012778 <SPIF_EraseChip+0x7e>
      break;
 8012776:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8012778:	6878      	ldr	r0, [r7, #4]
 801277a:	f7ff fc51 	bl	8012020 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	f7ff fbac 	bl	8011edc <SPIF_UnLock>
  return retVal;
 8012784:	7bfb      	ldrb	r3, [r7, #15]
}
 8012786:	4618      	mov	r0, r3
 8012788:	3710      	adds	r7, #16
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}

0801278e <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 801278e:	b580      	push	{r7, lr}
 8012790:	b086      	sub	sp, #24
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
 8012796:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f7ff fb8c 	bl	8011eb6 <SPIF_Lock>
  bool retVal = false;
 801279e:	2300      	movs	r3, #0
 80127a0:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	031b      	lsls	r3, r3, #12
 80127a6:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	699b      	ldr	r3, [r3, #24]
 80127ac:	683a      	ldr	r2, [r7, #0]
 80127ae:	429a      	cmp	r2, r3
 80127b0:	d262      	bcs.n	8012878 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 80127b2:	6878      	ldr	r0, [r7, #4]
 80127b4:	f7ff fc10 	bl	8011fd8 <SPIF_WriteEnable>
 80127b8:	4603      	mov	r3, r0
 80127ba:	f083 0301 	eor.w	r3, r3, #1
 80127be:	b2db      	uxtb	r3, r3
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d15b      	bne.n	801287c <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80127c4:	2100      	movs	r1, #0
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f7ff fb95 	bl	8011ef6 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	69db      	ldr	r3, [r3, #28]
 80127d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127d4:	d322      	bcc.n	801281c <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 80127d6:	2321      	movs	r3, #33	; 0x21
 80127d8:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 80127da:	693b      	ldr	r3, [r7, #16]
 80127dc:	0e1b      	lsrs	r3, r3, #24
 80127de:	b2db      	uxtb	r3, r3
 80127e0:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 80127e2:	693b      	ldr	r3, [r7, #16]
 80127e4:	0c1b      	lsrs	r3, r3, #16
 80127e6:	b2db      	uxtb	r3, r3
 80127e8:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 80127ea:	693b      	ldr	r3, [r7, #16]
 80127ec:	0a1b      	lsrs	r3, r3, #8
 80127ee:	b2db      	uxtb	r3, r3
 80127f0:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 80127f2:	693b      	ldr	r3, [r7, #16]
 80127f4:	b2db      	uxtb	r3, r3
 80127f6:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80127f8:	f107 0108 	add.w	r1, r7, #8
 80127fc:	2364      	movs	r3, #100	; 0x64
 80127fe:	2205      	movs	r2, #5
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f7ff fbb3 	bl	8011f6c <SPIF_Transmit>
 8012806:	4603      	mov	r3, r0
 8012808:	f083 0301 	eor.w	r3, r3, #1
 801280c:	b2db      	uxtb	r3, r3
 801280e:	2b00      	cmp	r3, #0
 8012810:	d023      	beq.n	801285a <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8012812:	2101      	movs	r1, #1
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f7ff fb6e 	bl	8011ef6 <SPIF_CsPin>
        break;
 801281a:	e030      	b.n	801287e <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 801281c:	2320      	movs	r3, #32
 801281e:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 8012820:	693b      	ldr	r3, [r7, #16]
 8012822:	0c1b      	lsrs	r3, r3, #16
 8012824:	b2db      	uxtb	r3, r3
 8012826:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 8012828:	693b      	ldr	r3, [r7, #16]
 801282a:	0a1b      	lsrs	r3, r3, #8
 801282c:	b2db      	uxtb	r3, r3
 801282e:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 8012830:	693b      	ldr	r3, [r7, #16]
 8012832:	b2db      	uxtb	r3, r3
 8012834:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8012836:	f107 0108 	add.w	r1, r7, #8
 801283a:	2364      	movs	r3, #100	; 0x64
 801283c:	2204      	movs	r2, #4
 801283e:	6878      	ldr	r0, [r7, #4]
 8012840:	f7ff fb94 	bl	8011f6c <SPIF_Transmit>
 8012844:	4603      	mov	r3, r0
 8012846:	f083 0301 	eor.w	r3, r3, #1
 801284a:	b2db      	uxtb	r3, r3
 801284c:	2b00      	cmp	r3, #0
 801284e:	d004      	beq.n	801285a <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8012850:	2101      	movs	r1, #1
 8012852:	6878      	ldr	r0, [r7, #4]
 8012854:	f7ff fb4f 	bl	8011ef6 <SPIF_CsPin>
        break;
 8012858:	e011      	b.n	801287e <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 801285a:	2101      	movs	r1, #1
 801285c:	6878      	ldr	r0, [r7, #4]
 801285e:	f7ff fb4a 	bl	8011ef6 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 8012862:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	f7ff fc23 	bl	80120b2 <SPIF_WaitForWriting>
 801286c:	4603      	mov	r3, r0
 801286e:	2b00      	cmp	r3, #0
 8012870:	d005      	beq.n	801287e <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 8012872:	2301      	movs	r3, #1
 8012874:	75fb      	strb	r3, [r7, #23]
 8012876:	e002      	b.n	801287e <SPIF_EraseSector+0xf0>
      break;
 8012878:	bf00      	nop
 801287a:	e000      	b.n	801287e <SPIF_EraseSector+0xf0>
      break;
 801287c:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f7ff fbce 	bl	8012020 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8012884:	6878      	ldr	r0, [r7, #4]
 8012886:	f7ff fb29 	bl	8011edc <SPIF_UnLock>
  return retVal;
 801288a:	7dfb      	ldrb	r3, [r7, #23]
}
 801288c:	4618      	mov	r0, r3
 801288e:	3718      	adds	r7, #24
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}

08012894 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b088      	sub	sp, #32
 8012898:	af02      	add	r7, sp, #8
 801289a:	60f8      	str	r0, [r7, #12]
 801289c:	60b9      	str	r1, [r7, #8]
 801289e:	607a      	str	r2, [r7, #4]
 80128a0:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 80128a2:	68f8      	ldr	r0, [r7, #12]
 80128a4:	f7ff fb07 	bl	8011eb6 <SPIF_Lock>
  bool retVal = false;
 80128a8:	2300      	movs	r3, #0
 80128aa:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 80128ac:	6a3b      	ldr	r3, [r7, #32]
 80128ae:	9300      	str	r3, [sp, #0]
 80128b0:	683b      	ldr	r3, [r7, #0]
 80128b2:	687a      	ldr	r2, [r7, #4]
 80128b4:	68b9      	ldr	r1, [r7, #8]
 80128b6:	68f8      	ldr	r0, [r7, #12]
 80128b8:	f7ff fdba 	bl	8012430 <SPIF_WriteFn>
 80128bc:	4603      	mov	r3, r0
 80128be:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 80128c0:	68f8      	ldr	r0, [r7, #12]
 80128c2:	f7ff fb0b 	bl	8011edc <SPIF_UnLock>
  return retVal;
 80128c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	3718      	adds	r7, #24
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}

080128d0 <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b088      	sub	sp, #32
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	60f8      	str	r0, [r7, #12]
 80128d8:	60b9      	str	r1, [r7, #8]
 80128da:	607a      	str	r2, [r7, #4]
 80128dc:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 80128de:	68f8      	ldr	r0, [r7, #12]
 80128e0:	f7ff fae9 	bl	8011eb6 <SPIF_Lock>
  bool retVal = false;
 80128e4:	2300      	movs	r3, #0
 80128e6:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 80128e8:	68bb      	ldr	r3, [r7, #8]
 80128ea:	021b      	lsls	r3, r3, #8
 80128ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128ee:	4413      	add	r3, r2
 80128f0:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 80128f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128f4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80128f8:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 80128fa:	683a      	ldr	r2, [r7, #0]
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	429a      	cmp	r2, r3
 8012900:	d901      	bls.n	8012906 <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 8012902:	697b      	ldr	r3, [r7, #20]
 8012904:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	687a      	ldr	r2, [r7, #4]
 801290a:	69b9      	ldr	r1, [r7, #24]
 801290c:	68f8      	ldr	r0, [r7, #12]
 801290e:	f7ff fe37 	bl	8012580 <SPIF_ReadFn>
 8012912:	4603      	mov	r3, r0
 8012914:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 8012916:	68f8      	ldr	r0, [r7, #12]
 8012918:	f7ff fae0 	bl	8011edc <SPIF_UnLock>
  return retVal;
 801291c:	7ffb      	ldrb	r3, [r7, #31]
}
 801291e:	4618      	mov	r0, r3
 8012920:	3720      	adds	r7, #32
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}
	...

08012928 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801292c:	2200      	movs	r2, #0
 801292e:	4912      	ldr	r1, [pc, #72]	; (8012978 <MX_USB_DEVICE_Init+0x50>)
 8012930:	4812      	ldr	r0, [pc, #72]	; (801297c <MX_USB_DEVICE_Init+0x54>)
 8012932:	f7fe f825 	bl	8010980 <USBD_Init>
 8012936:	4603      	mov	r3, r0
 8012938:	2b00      	cmp	r3, #0
 801293a:	d001      	beq.n	8012940 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801293c:	f7ef f85f 	bl	80019fe <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012940:	490f      	ldr	r1, [pc, #60]	; (8012980 <MX_USB_DEVICE_Init+0x58>)
 8012942:	480e      	ldr	r0, [pc, #56]	; (801297c <MX_USB_DEVICE_Init+0x54>)
 8012944:	f7fe f84c 	bl	80109e0 <USBD_RegisterClass>
 8012948:	4603      	mov	r3, r0
 801294a:	2b00      	cmp	r3, #0
 801294c:	d001      	beq.n	8012952 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801294e:	f7ef f856 	bl	80019fe <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012952:	490c      	ldr	r1, [pc, #48]	; (8012984 <MX_USB_DEVICE_Init+0x5c>)
 8012954:	4809      	ldr	r0, [pc, #36]	; (801297c <MX_USB_DEVICE_Init+0x54>)
 8012956:	f7fd ff43 	bl	80107e0 <USBD_CDC_RegisterInterface>
 801295a:	4603      	mov	r3, r0
 801295c:	2b00      	cmp	r3, #0
 801295e:	d001      	beq.n	8012964 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012960:	f7ef f84d 	bl	80019fe <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012964:	4805      	ldr	r0, [pc, #20]	; (801297c <MX_USB_DEVICE_Init+0x54>)
 8012966:	f7fe f871 	bl	8010a4c <USBD_Start>
 801296a:	4603      	mov	r3, r0
 801296c:	2b00      	cmp	r3, #0
 801296e:	d001      	beq.n	8012974 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012970:	f7ef f845 	bl	80019fe <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012974:	bf00      	nop
 8012976:	bd80      	pop	{r7, pc}
 8012978:	200000cc 	.word	0x200000cc
 801297c:	200010c4 	.word	0x200010c4
 8012980:	20000038 	.word	0x20000038
 8012984:	200000b8 	.word	0x200000b8

08012988 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801298c:	2200      	movs	r2, #0
 801298e:	4905      	ldr	r1, [pc, #20]	; (80129a4 <CDC_Init_FS+0x1c>)
 8012990:	4805      	ldr	r0, [pc, #20]	; (80129a8 <CDC_Init_FS+0x20>)
 8012992:	f7fd ff3f 	bl	8010814 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012996:	4905      	ldr	r1, [pc, #20]	; (80129ac <CDC_Init_FS+0x24>)
 8012998:	4803      	ldr	r0, [pc, #12]	; (80129a8 <CDC_Init_FS+0x20>)
 801299a:	f7fd ff5d 	bl	8010858 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801299e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80129a0:	4618      	mov	r0, r3
 80129a2:	bd80      	pop	{r7, pc}
 80129a4:	200017a0 	.word	0x200017a0
 80129a8:	200010c4 	.word	0x200010c4
 80129ac:	200013a0 	.word	0x200013a0

080129b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80129b0:	b480      	push	{r7}
 80129b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80129b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	46bd      	mov	sp, r7
 80129ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129be:	4770      	bx	lr

080129c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80129c0:	b480      	push	{r7}
 80129c2:	b083      	sub	sp, #12
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	4603      	mov	r3, r0
 80129c8:	6039      	str	r1, [r7, #0]
 80129ca:	71fb      	strb	r3, [r7, #7]
 80129cc:	4613      	mov	r3, r2
 80129ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80129d0:	79fb      	ldrb	r3, [r7, #7]
 80129d2:	2b23      	cmp	r3, #35	; 0x23
 80129d4:	d84a      	bhi.n	8012a6c <CDC_Control_FS+0xac>
 80129d6:	a201      	add	r2, pc, #4	; (adr r2, 80129dc <CDC_Control_FS+0x1c>)
 80129d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129dc:	08012a6d 	.word	0x08012a6d
 80129e0:	08012a6d 	.word	0x08012a6d
 80129e4:	08012a6d 	.word	0x08012a6d
 80129e8:	08012a6d 	.word	0x08012a6d
 80129ec:	08012a6d 	.word	0x08012a6d
 80129f0:	08012a6d 	.word	0x08012a6d
 80129f4:	08012a6d 	.word	0x08012a6d
 80129f8:	08012a6d 	.word	0x08012a6d
 80129fc:	08012a6d 	.word	0x08012a6d
 8012a00:	08012a6d 	.word	0x08012a6d
 8012a04:	08012a6d 	.word	0x08012a6d
 8012a08:	08012a6d 	.word	0x08012a6d
 8012a0c:	08012a6d 	.word	0x08012a6d
 8012a10:	08012a6d 	.word	0x08012a6d
 8012a14:	08012a6d 	.word	0x08012a6d
 8012a18:	08012a6d 	.word	0x08012a6d
 8012a1c:	08012a6d 	.word	0x08012a6d
 8012a20:	08012a6d 	.word	0x08012a6d
 8012a24:	08012a6d 	.word	0x08012a6d
 8012a28:	08012a6d 	.word	0x08012a6d
 8012a2c:	08012a6d 	.word	0x08012a6d
 8012a30:	08012a6d 	.word	0x08012a6d
 8012a34:	08012a6d 	.word	0x08012a6d
 8012a38:	08012a6d 	.word	0x08012a6d
 8012a3c:	08012a6d 	.word	0x08012a6d
 8012a40:	08012a6d 	.word	0x08012a6d
 8012a44:	08012a6d 	.word	0x08012a6d
 8012a48:	08012a6d 	.word	0x08012a6d
 8012a4c:	08012a6d 	.word	0x08012a6d
 8012a50:	08012a6d 	.word	0x08012a6d
 8012a54:	08012a6d 	.word	0x08012a6d
 8012a58:	08012a6d 	.word	0x08012a6d
 8012a5c:	08012a6d 	.word	0x08012a6d
 8012a60:	08012a6d 	.word	0x08012a6d
 8012a64:	08012a6d 	.word	0x08012a6d
 8012a68:	08012a6d 	.word	0x08012a6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012a6c:	bf00      	nop
  }

  return (USBD_OK);
 8012a6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	370c      	adds	r7, #12
 8012a74:	46bd      	mov	sp, r7
 8012a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7a:	4770      	bx	lr

08012a7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b082      	sub	sp, #8
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]
 8012a84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012a86:	6879      	ldr	r1, [r7, #4]
 8012a88:	4805      	ldr	r0, [pc, #20]	; (8012aa0 <CDC_Receive_FS+0x24>)
 8012a8a:	f7fd fee5 	bl	8010858 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012a8e:	4804      	ldr	r0, [pc, #16]	; (8012aa0 <CDC_Receive_FS+0x24>)
 8012a90:	f7fd ff40 	bl	8010914 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012a94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012a96:	4618      	mov	r0, r3
 8012a98:	3708      	adds	r7, #8
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}
 8012a9e:	bf00      	nop
 8012aa0:	200010c4 	.word	0x200010c4

08012aa4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b084      	sub	sp, #16
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
 8012aac:	460b      	mov	r3, r1
 8012aae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012ab4:	4b0d      	ldr	r3, [pc, #52]	; (8012aec <CDC_Transmit_FS+0x48>)
 8012ab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012aba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d001      	beq.n	8012aca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012ac6:	2301      	movs	r3, #1
 8012ac8:	e00b      	b.n	8012ae2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012aca:	887b      	ldrh	r3, [r7, #2]
 8012acc:	461a      	mov	r2, r3
 8012ace:	6879      	ldr	r1, [r7, #4]
 8012ad0:	4806      	ldr	r0, [pc, #24]	; (8012aec <CDC_Transmit_FS+0x48>)
 8012ad2:	f7fd fe9f 	bl	8010814 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012ad6:	4805      	ldr	r0, [pc, #20]	; (8012aec <CDC_Transmit_FS+0x48>)
 8012ad8:	f7fd fedc 	bl	8010894 <USBD_CDC_TransmitPacket>
 8012adc:	4603      	mov	r3, r0
 8012ade:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	3710      	adds	r7, #16
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}
 8012aea:	bf00      	nop
 8012aec:	200010c4 	.word	0x200010c4

08012af0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012af0:	b480      	push	{r7}
 8012af2:	b087      	sub	sp, #28
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	60f8      	str	r0, [r7, #12]
 8012af8:	60b9      	str	r1, [r7, #8]
 8012afa:	4613      	mov	r3, r2
 8012afc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012afe:	2300      	movs	r3, #0
 8012b00:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012b02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b06:	4618      	mov	r0, r3
 8012b08:	371c      	adds	r7, #28
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b10:	4770      	bx	lr
	...

08012b14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b14:	b480      	push	{r7}
 8012b16:	b083      	sub	sp, #12
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	6039      	str	r1, [r7, #0]
 8012b1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	2212      	movs	r2, #18
 8012b24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012b26:	4b03      	ldr	r3, [pc, #12]	; (8012b34 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012b28:	4618      	mov	r0, r3
 8012b2a:	370c      	adds	r7, #12
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b32:	4770      	bx	lr
 8012b34:	200000ec 	.word	0x200000ec

08012b38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b38:	b480      	push	{r7}
 8012b3a:	b083      	sub	sp, #12
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	4603      	mov	r3, r0
 8012b40:	6039      	str	r1, [r7, #0]
 8012b42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	2204      	movs	r2, #4
 8012b48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012b4a:	4b03      	ldr	r3, [pc, #12]	; (8012b58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	370c      	adds	r7, #12
 8012b50:	46bd      	mov	sp, r7
 8012b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b56:	4770      	bx	lr
 8012b58:	2000010c 	.word	0x2000010c

08012b5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b082      	sub	sp, #8
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	4603      	mov	r3, r0
 8012b64:	6039      	str	r1, [r7, #0]
 8012b66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012b68:	79fb      	ldrb	r3, [r7, #7]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d105      	bne.n	8012b7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012b6e:	683a      	ldr	r2, [r7, #0]
 8012b70:	4907      	ldr	r1, [pc, #28]	; (8012b90 <USBD_FS_ProductStrDescriptor+0x34>)
 8012b72:	4808      	ldr	r0, [pc, #32]	; (8012b94 <USBD_FS_ProductStrDescriptor+0x38>)
 8012b74:	f7ff f8b4 	bl	8011ce0 <USBD_GetString>
 8012b78:	e004      	b.n	8012b84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012b7a:	683a      	ldr	r2, [r7, #0]
 8012b7c:	4904      	ldr	r1, [pc, #16]	; (8012b90 <USBD_FS_ProductStrDescriptor+0x34>)
 8012b7e:	4805      	ldr	r0, [pc, #20]	; (8012b94 <USBD_FS_ProductStrDescriptor+0x38>)
 8012b80:	f7ff f8ae 	bl	8011ce0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012b84:	4b02      	ldr	r3, [pc, #8]	; (8012b90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012b86:	4618      	mov	r0, r3
 8012b88:	3708      	adds	r7, #8
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	bd80      	pop	{r7, pc}
 8012b8e:	bf00      	nop
 8012b90:	20001ba0 	.word	0x20001ba0
 8012b94:	08019bf8 	.word	0x08019bf8

08012b98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b082      	sub	sp, #8
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	6039      	str	r1, [r7, #0]
 8012ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012ba4:	683a      	ldr	r2, [r7, #0]
 8012ba6:	4904      	ldr	r1, [pc, #16]	; (8012bb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012ba8:	4804      	ldr	r0, [pc, #16]	; (8012bbc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012baa:	f7ff f899 	bl	8011ce0 <USBD_GetString>
  return USBD_StrDesc;
 8012bae:	4b02      	ldr	r3, [pc, #8]	; (8012bb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3708      	adds	r7, #8
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}
 8012bb8:	20001ba0 	.word	0x20001ba0
 8012bbc:	08019c04 	.word	0x08019c04

08012bc0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b082      	sub	sp, #8
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	6039      	str	r1, [r7, #0]
 8012bca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	221a      	movs	r2, #26
 8012bd0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012bd2:	f000 f855 	bl	8012c80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012bd6:	4b02      	ldr	r3, [pc, #8]	; (8012be0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3708      	adds	r7, #8
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}
 8012be0:	20000110 	.word	0x20000110

08012be4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b082      	sub	sp, #8
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	4603      	mov	r3, r0
 8012bec:	6039      	str	r1, [r7, #0]
 8012bee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012bf0:	79fb      	ldrb	r3, [r7, #7]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d105      	bne.n	8012c02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012bf6:	683a      	ldr	r2, [r7, #0]
 8012bf8:	4907      	ldr	r1, [pc, #28]	; (8012c18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012bfa:	4808      	ldr	r0, [pc, #32]	; (8012c1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8012bfc:	f7ff f870 	bl	8011ce0 <USBD_GetString>
 8012c00:	e004      	b.n	8012c0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012c02:	683a      	ldr	r2, [r7, #0]
 8012c04:	4904      	ldr	r1, [pc, #16]	; (8012c18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012c06:	4805      	ldr	r0, [pc, #20]	; (8012c1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8012c08:	f7ff f86a 	bl	8011ce0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012c0c:	4b02      	ldr	r3, [pc, #8]	; (8012c18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012c0e:	4618      	mov	r0, r3
 8012c10:	3708      	adds	r7, #8
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bd80      	pop	{r7, pc}
 8012c16:	bf00      	nop
 8012c18:	20001ba0 	.word	0x20001ba0
 8012c1c:	08019c18 	.word	0x08019c18

08012c20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b082      	sub	sp, #8
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	4603      	mov	r3, r0
 8012c28:	6039      	str	r1, [r7, #0]
 8012c2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012c2c:	79fb      	ldrb	r3, [r7, #7]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d105      	bne.n	8012c3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012c32:	683a      	ldr	r2, [r7, #0]
 8012c34:	4907      	ldr	r1, [pc, #28]	; (8012c54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012c36:	4808      	ldr	r0, [pc, #32]	; (8012c58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012c38:	f7ff f852 	bl	8011ce0 <USBD_GetString>
 8012c3c:	e004      	b.n	8012c48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012c3e:	683a      	ldr	r2, [r7, #0]
 8012c40:	4904      	ldr	r1, [pc, #16]	; (8012c54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012c42:	4805      	ldr	r0, [pc, #20]	; (8012c58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012c44:	f7ff f84c 	bl	8011ce0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012c48:	4b02      	ldr	r3, [pc, #8]	; (8012c54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	3708      	adds	r7, #8
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}
 8012c52:	bf00      	nop
 8012c54:	20001ba0 	.word	0x20001ba0
 8012c58:	08019c24 	.word	0x08019c24

08012c5c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	b083      	sub	sp, #12
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	4603      	mov	r3, r0
 8012c64:	6039      	str	r1, [r7, #0]
 8012c66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	220c      	movs	r2, #12
 8012c6c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8012c6e:	4b03      	ldr	r3, [pc, #12]	; (8012c7c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8012c70:	4618      	mov	r0, r3
 8012c72:	370c      	adds	r7, #12
 8012c74:	46bd      	mov	sp, r7
 8012c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7a:	4770      	bx	lr
 8012c7c:	20000100 	.word	0x20000100

08012c80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b084      	sub	sp, #16
 8012c84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012c86:	4b0f      	ldr	r3, [pc, #60]	; (8012cc4 <Get_SerialNum+0x44>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012c8c:	4b0e      	ldr	r3, [pc, #56]	; (8012cc8 <Get_SerialNum+0x48>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012c92:	4b0e      	ldr	r3, [pc, #56]	; (8012ccc <Get_SerialNum+0x4c>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012c98:	68fa      	ldr	r2, [r7, #12]
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	4413      	add	r3, r2
 8012c9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d009      	beq.n	8012cba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012ca6:	2208      	movs	r2, #8
 8012ca8:	4909      	ldr	r1, [pc, #36]	; (8012cd0 <Get_SerialNum+0x50>)
 8012caa:	68f8      	ldr	r0, [r7, #12]
 8012cac:	f000 f814 	bl	8012cd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012cb0:	2204      	movs	r2, #4
 8012cb2:	4908      	ldr	r1, [pc, #32]	; (8012cd4 <Get_SerialNum+0x54>)
 8012cb4:	68b8      	ldr	r0, [r7, #8]
 8012cb6:	f000 f80f 	bl	8012cd8 <IntToUnicode>
  }
}
 8012cba:	bf00      	nop
 8012cbc:	3710      	adds	r7, #16
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	bd80      	pop	{r7, pc}
 8012cc2:	bf00      	nop
 8012cc4:	1fff7590 	.word	0x1fff7590
 8012cc8:	1fff7594 	.word	0x1fff7594
 8012ccc:	1fff7598 	.word	0x1fff7598
 8012cd0:	20000112 	.word	0x20000112
 8012cd4:	20000122 	.word	0x20000122

08012cd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012cd8:	b480      	push	{r7}
 8012cda:	b087      	sub	sp, #28
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	60f8      	str	r0, [r7, #12]
 8012ce0:	60b9      	str	r1, [r7, #8]
 8012ce2:	4613      	mov	r3, r2
 8012ce4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012cea:	2300      	movs	r3, #0
 8012cec:	75fb      	strb	r3, [r7, #23]
 8012cee:	e027      	b.n	8012d40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	0f1b      	lsrs	r3, r3, #28
 8012cf4:	2b09      	cmp	r3, #9
 8012cf6:	d80b      	bhi.n	8012d10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	0f1b      	lsrs	r3, r3, #28
 8012cfc:	b2da      	uxtb	r2, r3
 8012cfe:	7dfb      	ldrb	r3, [r7, #23]
 8012d00:	005b      	lsls	r3, r3, #1
 8012d02:	4619      	mov	r1, r3
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	440b      	add	r3, r1
 8012d08:	3230      	adds	r2, #48	; 0x30
 8012d0a:	b2d2      	uxtb	r2, r2
 8012d0c:	701a      	strb	r2, [r3, #0]
 8012d0e:	e00a      	b.n	8012d26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	0f1b      	lsrs	r3, r3, #28
 8012d14:	b2da      	uxtb	r2, r3
 8012d16:	7dfb      	ldrb	r3, [r7, #23]
 8012d18:	005b      	lsls	r3, r3, #1
 8012d1a:	4619      	mov	r1, r3
 8012d1c:	68bb      	ldr	r3, [r7, #8]
 8012d1e:	440b      	add	r3, r1
 8012d20:	3237      	adds	r2, #55	; 0x37
 8012d22:	b2d2      	uxtb	r2, r2
 8012d24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	011b      	lsls	r3, r3, #4
 8012d2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012d2c:	7dfb      	ldrb	r3, [r7, #23]
 8012d2e:	005b      	lsls	r3, r3, #1
 8012d30:	3301      	adds	r3, #1
 8012d32:	68ba      	ldr	r2, [r7, #8]
 8012d34:	4413      	add	r3, r2
 8012d36:	2200      	movs	r2, #0
 8012d38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012d3a:	7dfb      	ldrb	r3, [r7, #23]
 8012d3c:	3301      	adds	r3, #1
 8012d3e:	75fb      	strb	r3, [r7, #23]
 8012d40:	7dfa      	ldrb	r2, [r7, #23]
 8012d42:	79fb      	ldrb	r3, [r7, #7]
 8012d44:	429a      	cmp	r2, r3
 8012d46:	d3d3      	bcc.n	8012cf0 <IntToUnicode+0x18>
  }
}
 8012d48:	bf00      	nop
 8012d4a:	bf00      	nop
 8012d4c:	371c      	adds	r7, #28
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d54:	4770      	bx	lr
	...

08012d58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b084      	sub	sp, #16
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	4a0d      	ldr	r2, [pc, #52]	; (8012d9c <HAL_PCD_MspInit+0x44>)
 8012d66:	4293      	cmp	r3, r2
 8012d68:	d113      	bne.n	8012d92 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012d6a:	4b0d      	ldr	r3, [pc, #52]	; (8012da0 <HAL_PCD_MspInit+0x48>)
 8012d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d6e:	4a0c      	ldr	r2, [pc, #48]	; (8012da0 <HAL_PCD_MspInit+0x48>)
 8012d70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012d74:	6593      	str	r3, [r2, #88]	; 0x58
 8012d76:	4b0a      	ldr	r3, [pc, #40]	; (8012da0 <HAL_PCD_MspInit+0x48>)
 8012d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012d7e:	60fb      	str	r3, [r7, #12]
 8012d80:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8012d82:	2200      	movs	r2, #0
 8012d84:	2100      	movs	r1, #0
 8012d86:	2043      	movs	r0, #67	; 0x43
 8012d88:	f7f4 f84b 	bl	8006e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8012d8c:	2043      	movs	r0, #67	; 0x43
 8012d8e:	f7f4 f864 	bl	8006e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012d92:	bf00      	nop
 8012d94:	3710      	adds	r7, #16
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}
 8012d9a:	bf00      	nop
 8012d9c:	40006800 	.word	0x40006800
 8012da0:	40021000 	.word	0x40021000

08012da4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b082      	sub	sp, #8
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012db8:	4619      	mov	r1, r3
 8012dba:	4610      	mov	r0, r2
 8012dbc:	f7fd fe93 	bl	8010ae6 <USBD_LL_SetupStage>
}
 8012dc0:	bf00      	nop
 8012dc2:	3708      	adds	r7, #8
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}

08012dc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b082      	sub	sp, #8
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	460b      	mov	r3, r1
 8012dd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8012dda:	78fa      	ldrb	r2, [r7, #3]
 8012ddc:	6879      	ldr	r1, [r7, #4]
 8012dde:	4613      	mov	r3, r2
 8012de0:	009b      	lsls	r3, r3, #2
 8012de2:	4413      	add	r3, r2
 8012de4:	00db      	lsls	r3, r3, #3
 8012de6:	440b      	add	r3, r1
 8012de8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8012dec:	681a      	ldr	r2, [r3, #0]
 8012dee:	78fb      	ldrb	r3, [r7, #3]
 8012df0:	4619      	mov	r1, r3
 8012df2:	f7fd fecd 	bl	8010b90 <USBD_LL_DataOutStage>
}
 8012df6:	bf00      	nop
 8012df8:	3708      	adds	r7, #8
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}

08012dfe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012dfe:	b580      	push	{r7, lr}
 8012e00:	b082      	sub	sp, #8
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	6078      	str	r0, [r7, #4]
 8012e06:	460b      	mov	r3, r1
 8012e08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8012e10:	78fa      	ldrb	r2, [r7, #3]
 8012e12:	6879      	ldr	r1, [r7, #4]
 8012e14:	4613      	mov	r3, r2
 8012e16:	009b      	lsls	r3, r3, #2
 8012e18:	4413      	add	r3, r2
 8012e1a:	00db      	lsls	r3, r3, #3
 8012e1c:	440b      	add	r3, r1
 8012e1e:	333c      	adds	r3, #60	; 0x3c
 8012e20:	681a      	ldr	r2, [r3, #0]
 8012e22:	78fb      	ldrb	r3, [r7, #3]
 8012e24:	4619      	mov	r1, r3
 8012e26:	f7fd ff66 	bl	8010cf6 <USBD_LL_DataInStage>
}
 8012e2a:	bf00      	nop
 8012e2c:	3708      	adds	r7, #8
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd80      	pop	{r7, pc}

08012e32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e32:	b580      	push	{r7, lr}
 8012e34:	b082      	sub	sp, #8
 8012e36:	af00      	add	r7, sp, #0
 8012e38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8012e40:	4618      	mov	r0, r3
 8012e42:	f7fe f8a0 	bl	8010f86 <USBD_LL_SOF>
}
 8012e46:	bf00      	nop
 8012e48:	3708      	adds	r7, #8
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}

08012e4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e4e:	b580      	push	{r7, lr}
 8012e50:	b084      	sub	sp, #16
 8012e52:	af00      	add	r7, sp, #0
 8012e54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012e56:	2301      	movs	r3, #1
 8012e58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	689b      	ldr	r3, [r3, #8]
 8012e5e:	2b02      	cmp	r3, #2
 8012e60:	d001      	beq.n	8012e66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012e62:	f7ee fdcc 	bl	80019fe <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8012e6c:	7bfa      	ldrb	r2, [r7, #15]
 8012e6e:	4611      	mov	r1, r2
 8012e70:	4618      	mov	r0, r3
 8012e72:	f7fe f844 	bl	8010efe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7fd ffec 	bl	8010e5a <USBD_LL_Reset>
}
 8012e82:	bf00      	nop
 8012e84:	3710      	adds	r7, #16
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}
	...

08012e8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b082      	sub	sp, #8
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7fe f83f 	bl	8010f1e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	699b      	ldr	r3, [r3, #24]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d005      	beq.n	8012eb4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012ea8:	4b04      	ldr	r3, [pc, #16]	; (8012ebc <HAL_PCD_SuspendCallback+0x30>)
 8012eaa:	691b      	ldr	r3, [r3, #16]
 8012eac:	4a03      	ldr	r2, [pc, #12]	; (8012ebc <HAL_PCD_SuspendCallback+0x30>)
 8012eae:	f043 0306 	orr.w	r3, r3, #6
 8012eb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012eb4:	bf00      	nop
 8012eb6:	3708      	adds	r7, #8
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	e000ed00 	.word	0xe000ed00

08012ec0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b082      	sub	sp, #8
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	699b      	ldr	r3, [r3, #24]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d007      	beq.n	8012ee0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012ed0:	4b08      	ldr	r3, [pc, #32]	; (8012ef4 <HAL_PCD_ResumeCallback+0x34>)
 8012ed2:	691b      	ldr	r3, [r3, #16]
 8012ed4:	4a07      	ldr	r2, [pc, #28]	; (8012ef4 <HAL_PCD_ResumeCallback+0x34>)
 8012ed6:	f023 0306 	bic.w	r3, r3, #6
 8012eda:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012edc:	f000 fab6 	bl	801344c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	f7fe f835 	bl	8010f56 <USBD_LL_Resume>
}
 8012eec:	bf00      	nop
 8012eee:	3708      	adds	r7, #8
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}
 8012ef4:	e000ed00 	.word	0xe000ed00

08012ef8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b082      	sub	sp, #8
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8012f00:	f7f6 fe90 	bl	8009c24 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8012f04:	4a2b      	ldr	r2, [pc, #172]	; (8012fb4 <USBD_LL_Init+0xbc>)
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	4a29      	ldr	r2, [pc, #164]	; (8012fb4 <USBD_LL_Init+0xbc>)
 8012f10:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 8012f14:	4b27      	ldr	r3, [pc, #156]	; (8012fb4 <USBD_LL_Init+0xbc>)
 8012f16:	4a28      	ldr	r2, [pc, #160]	; (8012fb8 <USBD_LL_Init+0xc0>)
 8012f18:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012f1a:	4b26      	ldr	r3, [pc, #152]	; (8012fb4 <USBD_LL_Init+0xbc>)
 8012f1c:	2208      	movs	r2, #8
 8012f1e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012f20:	4b24      	ldr	r3, [pc, #144]	; (8012fb4 <USBD_LL_Init+0xbc>)
 8012f22:	2202      	movs	r2, #2
 8012f24:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012f26:	4b23      	ldr	r3, [pc, #140]	; (8012fb4 <USBD_LL_Init+0xbc>)
 8012f28:	2202      	movs	r2, #2
 8012f2a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8012f2c:	4b21      	ldr	r3, [pc, #132]	; (8012fb4 <USBD_LL_Init+0xbc>)
 8012f2e:	2200      	movs	r2, #0
 8012f30:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012f32:	4b20      	ldr	r3, [pc, #128]	; (8012fb4 <USBD_LL_Init+0xbc>)
 8012f34:	2200      	movs	r2, #0
 8012f36:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012f38:	4b1e      	ldr	r3, [pc, #120]	; (8012fb4 <USBD_LL_Init+0xbc>)
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8012f3e:	4b1d      	ldr	r3, [pc, #116]	; (8012fb4 <USBD_LL_Init+0xbc>)
 8012f40:	2200      	movs	r2, #0
 8012f42:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012f44:	481b      	ldr	r0, [pc, #108]	; (8012fb4 <USBD_LL_Init+0xbc>)
 8012f46:	f7f5 f88b 	bl	8008060 <HAL_PCD_Init>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d001      	beq.n	8012f54 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8012f50:	f7ee fd55 	bl	80019fe <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012f5a:	2318      	movs	r3, #24
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	2100      	movs	r1, #0
 8012f60:	f7f6 fd8f 	bl	8009a82 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012f6a:	2358      	movs	r3, #88	; 0x58
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	2180      	movs	r1, #128	; 0x80
 8012f70:	f7f6 fd87 	bl	8009a82 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012f7a:	23c0      	movs	r3, #192	; 0xc0
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	2181      	movs	r1, #129	; 0x81
 8012f80:	f7f6 fd7f 	bl	8009a82 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012f8a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012f8e:	2200      	movs	r2, #0
 8012f90:	2101      	movs	r1, #1
 8012f92:	f7f6 fd76 	bl	8009a82 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	2182      	movs	r1, #130	; 0x82
 8012fa4:	f7f6 fd6d 	bl	8009a82 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8012fa8:	2300      	movs	r3, #0
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3708      	adds	r7, #8
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}
 8012fb2:	bf00      	nop
 8012fb4:	20001da0 	.word	0x20001da0
 8012fb8:	40006800 	.word	0x40006800

08012fbc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b084      	sub	sp, #16
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7f5 f94a 	bl	800826c <HAL_PCD_Start>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012fdc:	7bbb      	ldrb	r3, [r7, #14]
 8012fde:	2b03      	cmp	r3, #3
 8012fe0:	d816      	bhi.n	8013010 <USBD_LL_Start+0x54>
 8012fe2:	a201      	add	r2, pc, #4	; (adr r2, 8012fe8 <USBD_LL_Start+0x2c>)
 8012fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fe8:	08012ff9 	.word	0x08012ff9
 8012fec:	08012fff 	.word	0x08012fff
 8012ff0:	08013005 	.word	0x08013005
 8012ff4:	0801300b 	.word	0x0801300b
    case HAL_OK :
      usb_status = USBD_OK;
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8012ffc:	e00b      	b.n	8013016 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012ffe:	2303      	movs	r3, #3
 8013000:	73fb      	strb	r3, [r7, #15]
    break;
 8013002:	e008      	b.n	8013016 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013004:	2301      	movs	r3, #1
 8013006:	73fb      	strb	r3, [r7, #15]
    break;
 8013008:	e005      	b.n	8013016 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801300a:	2303      	movs	r3, #3
 801300c:	73fb      	strb	r3, [r7, #15]
    break;
 801300e:	e002      	b.n	8013016 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8013010:	2303      	movs	r3, #3
 8013012:	73fb      	strb	r3, [r7, #15]
    break;
 8013014:	bf00      	nop
  }
  return usb_status;
 8013016:	7bfb      	ldrb	r3, [r7, #15]
}
 8013018:	4618      	mov	r0, r3
 801301a:	3710      	adds	r7, #16
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}

08013020 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b084      	sub	sp, #16
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
 8013028:	4608      	mov	r0, r1
 801302a:	4611      	mov	r1, r2
 801302c:	461a      	mov	r2, r3
 801302e:	4603      	mov	r3, r0
 8013030:	70fb      	strb	r3, [r7, #3]
 8013032:	460b      	mov	r3, r1
 8013034:	70bb      	strb	r3, [r7, #2]
 8013036:	4613      	mov	r3, r2
 8013038:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801303a:	2300      	movs	r3, #0
 801303c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801303e:	2300      	movs	r3, #0
 8013040:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013048:	78bb      	ldrb	r3, [r7, #2]
 801304a:	883a      	ldrh	r2, [r7, #0]
 801304c:	78f9      	ldrb	r1, [r7, #3]
 801304e:	f7f5 fa7b 	bl	8008548 <HAL_PCD_EP_Open>
 8013052:	4603      	mov	r3, r0
 8013054:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013056:	7bbb      	ldrb	r3, [r7, #14]
 8013058:	2b03      	cmp	r3, #3
 801305a:	d817      	bhi.n	801308c <USBD_LL_OpenEP+0x6c>
 801305c:	a201      	add	r2, pc, #4	; (adr r2, 8013064 <USBD_LL_OpenEP+0x44>)
 801305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013062:	bf00      	nop
 8013064:	08013075 	.word	0x08013075
 8013068:	0801307b 	.word	0x0801307b
 801306c:	08013081 	.word	0x08013081
 8013070:	08013087 	.word	0x08013087
    case HAL_OK :
      usb_status = USBD_OK;
 8013074:	2300      	movs	r3, #0
 8013076:	73fb      	strb	r3, [r7, #15]
    break;
 8013078:	e00b      	b.n	8013092 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801307a:	2303      	movs	r3, #3
 801307c:	73fb      	strb	r3, [r7, #15]
    break;
 801307e:	e008      	b.n	8013092 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013080:	2301      	movs	r3, #1
 8013082:	73fb      	strb	r3, [r7, #15]
    break;
 8013084:	e005      	b.n	8013092 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013086:	2303      	movs	r3, #3
 8013088:	73fb      	strb	r3, [r7, #15]
    break;
 801308a:	e002      	b.n	8013092 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 801308c:	2303      	movs	r3, #3
 801308e:	73fb      	strb	r3, [r7, #15]
    break;
 8013090:	bf00      	nop
  }
  return usb_status;
 8013092:	7bfb      	ldrb	r3, [r7, #15]
}
 8013094:	4618      	mov	r0, r3
 8013096:	3710      	adds	r7, #16
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}

0801309c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b084      	sub	sp, #16
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
 80130a4:	460b      	mov	r3, r1
 80130a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80130a8:	2300      	movs	r3, #0
 80130aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80130ac:	2300      	movs	r3, #0
 80130ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80130b6:	78fa      	ldrb	r2, [r7, #3]
 80130b8:	4611      	mov	r1, r2
 80130ba:	4618      	mov	r0, r3
 80130bc:	f7f5 faa1 	bl	8008602 <HAL_PCD_EP_Close>
 80130c0:	4603      	mov	r3, r0
 80130c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80130c4:	7bbb      	ldrb	r3, [r7, #14]
 80130c6:	2b03      	cmp	r3, #3
 80130c8:	d816      	bhi.n	80130f8 <USBD_LL_CloseEP+0x5c>
 80130ca:	a201      	add	r2, pc, #4	; (adr r2, 80130d0 <USBD_LL_CloseEP+0x34>)
 80130cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130d0:	080130e1 	.word	0x080130e1
 80130d4:	080130e7 	.word	0x080130e7
 80130d8:	080130ed 	.word	0x080130ed
 80130dc:	080130f3 	.word	0x080130f3
    case HAL_OK :
      usb_status = USBD_OK;
 80130e0:	2300      	movs	r3, #0
 80130e2:	73fb      	strb	r3, [r7, #15]
    break;
 80130e4:	e00b      	b.n	80130fe <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80130e6:	2303      	movs	r3, #3
 80130e8:	73fb      	strb	r3, [r7, #15]
    break;
 80130ea:	e008      	b.n	80130fe <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80130ec:	2301      	movs	r3, #1
 80130ee:	73fb      	strb	r3, [r7, #15]
    break;
 80130f0:	e005      	b.n	80130fe <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80130f2:	2303      	movs	r3, #3
 80130f4:	73fb      	strb	r3, [r7, #15]
    break;
 80130f6:	e002      	b.n	80130fe <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80130f8:	2303      	movs	r3, #3
 80130fa:	73fb      	strb	r3, [r7, #15]
    break;
 80130fc:	bf00      	nop
  }
  return usb_status;
 80130fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8013100:	4618      	mov	r0, r3
 8013102:	3710      	adds	r7, #16
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}

08013108 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b084      	sub	sp, #16
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
 8013110:	460b      	mov	r3, r1
 8013112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013114:	2300      	movs	r3, #0
 8013116:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013118:	2300      	movs	r3, #0
 801311a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013122:	78fa      	ldrb	r2, [r7, #3]
 8013124:	4611      	mov	r1, r2
 8013126:	4618      	mov	r0, r3
 8013128:	f7f5 fb33 	bl	8008792 <HAL_PCD_EP_SetStall>
 801312c:	4603      	mov	r3, r0
 801312e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013130:	7bbb      	ldrb	r3, [r7, #14]
 8013132:	2b03      	cmp	r3, #3
 8013134:	d816      	bhi.n	8013164 <USBD_LL_StallEP+0x5c>
 8013136:	a201      	add	r2, pc, #4	; (adr r2, 801313c <USBD_LL_StallEP+0x34>)
 8013138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801313c:	0801314d 	.word	0x0801314d
 8013140:	08013153 	.word	0x08013153
 8013144:	08013159 	.word	0x08013159
 8013148:	0801315f 	.word	0x0801315f
    case HAL_OK :
      usb_status = USBD_OK;
 801314c:	2300      	movs	r3, #0
 801314e:	73fb      	strb	r3, [r7, #15]
    break;
 8013150:	e00b      	b.n	801316a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013152:	2303      	movs	r3, #3
 8013154:	73fb      	strb	r3, [r7, #15]
    break;
 8013156:	e008      	b.n	801316a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013158:	2301      	movs	r3, #1
 801315a:	73fb      	strb	r3, [r7, #15]
    break;
 801315c:	e005      	b.n	801316a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801315e:	2303      	movs	r3, #3
 8013160:	73fb      	strb	r3, [r7, #15]
    break;
 8013162:	e002      	b.n	801316a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013164:	2303      	movs	r3, #3
 8013166:	73fb      	strb	r3, [r7, #15]
    break;
 8013168:	bf00      	nop
  }
  return usb_status;
 801316a:	7bfb      	ldrb	r3, [r7, #15]
}
 801316c:	4618      	mov	r0, r3
 801316e:	3710      	adds	r7, #16
 8013170:	46bd      	mov	sp, r7
 8013172:	bd80      	pop	{r7, pc}

08013174 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b084      	sub	sp, #16
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
 801317c:	460b      	mov	r3, r1
 801317e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013180:	2300      	movs	r3, #0
 8013182:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013184:	2300      	movs	r3, #0
 8013186:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801318e:	78fa      	ldrb	r2, [r7, #3]
 8013190:	4611      	mov	r1, r2
 8013192:	4618      	mov	r0, r3
 8013194:	f7f5 fb5d 	bl	8008852 <HAL_PCD_EP_ClrStall>
 8013198:	4603      	mov	r3, r0
 801319a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801319c:	7bbb      	ldrb	r3, [r7, #14]
 801319e:	2b03      	cmp	r3, #3
 80131a0:	d816      	bhi.n	80131d0 <USBD_LL_ClearStallEP+0x5c>
 80131a2:	a201      	add	r2, pc, #4	; (adr r2, 80131a8 <USBD_LL_ClearStallEP+0x34>)
 80131a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131a8:	080131b9 	.word	0x080131b9
 80131ac:	080131bf 	.word	0x080131bf
 80131b0:	080131c5 	.word	0x080131c5
 80131b4:	080131cb 	.word	0x080131cb
    case HAL_OK :
      usb_status = USBD_OK;
 80131b8:	2300      	movs	r3, #0
 80131ba:	73fb      	strb	r3, [r7, #15]
    break;
 80131bc:	e00b      	b.n	80131d6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80131be:	2303      	movs	r3, #3
 80131c0:	73fb      	strb	r3, [r7, #15]
    break;
 80131c2:	e008      	b.n	80131d6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80131c4:	2301      	movs	r3, #1
 80131c6:	73fb      	strb	r3, [r7, #15]
    break;
 80131c8:	e005      	b.n	80131d6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80131ca:	2303      	movs	r3, #3
 80131cc:	73fb      	strb	r3, [r7, #15]
    break;
 80131ce:	e002      	b.n	80131d6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80131d0:	2303      	movs	r3, #3
 80131d2:	73fb      	strb	r3, [r7, #15]
    break;
 80131d4:	bf00      	nop
  }
  return usb_status;
 80131d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80131d8:	4618      	mov	r0, r3
 80131da:	3710      	adds	r7, #16
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}

080131e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80131e0:	b480      	push	{r7}
 80131e2:	b085      	sub	sp, #20
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
 80131e8:	460b      	mov	r3, r1
 80131ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80131f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80131f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	da0c      	bge.n	8013216 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80131fc:	78fb      	ldrb	r3, [r7, #3]
 80131fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013202:	68f9      	ldr	r1, [r7, #12]
 8013204:	1c5a      	adds	r2, r3, #1
 8013206:	4613      	mov	r3, r2
 8013208:	009b      	lsls	r3, r3, #2
 801320a:	4413      	add	r3, r2
 801320c:	00db      	lsls	r3, r3, #3
 801320e:	440b      	add	r3, r1
 8013210:	3302      	adds	r3, #2
 8013212:	781b      	ldrb	r3, [r3, #0]
 8013214:	e00b      	b.n	801322e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013216:	78fb      	ldrb	r3, [r7, #3]
 8013218:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801321c:	68f9      	ldr	r1, [r7, #12]
 801321e:	4613      	mov	r3, r2
 8013220:	009b      	lsls	r3, r3, #2
 8013222:	4413      	add	r3, r2
 8013224:	00db      	lsls	r3, r3, #3
 8013226:	440b      	add	r3, r1
 8013228:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 801322c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801322e:	4618      	mov	r0, r3
 8013230:	3714      	adds	r7, #20
 8013232:	46bd      	mov	sp, r7
 8013234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013238:	4770      	bx	lr
	...

0801323c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b084      	sub	sp, #16
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
 8013244:	460b      	mov	r3, r1
 8013246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013248:	2300      	movs	r3, #0
 801324a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801324c:	2300      	movs	r3, #0
 801324e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013256:	78fa      	ldrb	r2, [r7, #3]
 8013258:	4611      	mov	r1, r2
 801325a:	4618      	mov	r0, r3
 801325c:	f7f5 f94f 	bl	80084fe <HAL_PCD_SetAddress>
 8013260:	4603      	mov	r3, r0
 8013262:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013264:	7bbb      	ldrb	r3, [r7, #14]
 8013266:	2b03      	cmp	r3, #3
 8013268:	d816      	bhi.n	8013298 <USBD_LL_SetUSBAddress+0x5c>
 801326a:	a201      	add	r2, pc, #4	; (adr r2, 8013270 <USBD_LL_SetUSBAddress+0x34>)
 801326c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013270:	08013281 	.word	0x08013281
 8013274:	08013287 	.word	0x08013287
 8013278:	0801328d 	.word	0x0801328d
 801327c:	08013293 	.word	0x08013293
    case HAL_OK :
      usb_status = USBD_OK;
 8013280:	2300      	movs	r3, #0
 8013282:	73fb      	strb	r3, [r7, #15]
    break;
 8013284:	e00b      	b.n	801329e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013286:	2303      	movs	r3, #3
 8013288:	73fb      	strb	r3, [r7, #15]
    break;
 801328a:	e008      	b.n	801329e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801328c:	2301      	movs	r3, #1
 801328e:	73fb      	strb	r3, [r7, #15]
    break;
 8013290:	e005      	b.n	801329e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013292:	2303      	movs	r3, #3
 8013294:	73fb      	strb	r3, [r7, #15]
    break;
 8013296:	e002      	b.n	801329e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8013298:	2303      	movs	r3, #3
 801329a:	73fb      	strb	r3, [r7, #15]
    break;
 801329c:	bf00      	nop
  }
  return usb_status;
 801329e:	7bfb      	ldrb	r3, [r7, #15]
}
 80132a0:	4618      	mov	r0, r3
 80132a2:	3710      	adds	r7, #16
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}

080132a8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b086      	sub	sp, #24
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	60f8      	str	r0, [r7, #12]
 80132b0:	607a      	str	r2, [r7, #4]
 80132b2:	603b      	str	r3, [r7, #0]
 80132b4:	460b      	mov	r3, r1
 80132b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132b8:	2300      	movs	r3, #0
 80132ba:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132bc:	2300      	movs	r3, #0
 80132be:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80132c6:	7af9      	ldrb	r1, [r7, #11]
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	687a      	ldr	r2, [r7, #4]
 80132cc:	f7f5 fa2a 	bl	8008724 <HAL_PCD_EP_Transmit>
 80132d0:	4603      	mov	r3, r0
 80132d2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80132d4:	7dbb      	ldrb	r3, [r7, #22]
 80132d6:	2b03      	cmp	r3, #3
 80132d8:	d816      	bhi.n	8013308 <USBD_LL_Transmit+0x60>
 80132da:	a201      	add	r2, pc, #4	; (adr r2, 80132e0 <USBD_LL_Transmit+0x38>)
 80132dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132e0:	080132f1 	.word	0x080132f1
 80132e4:	080132f7 	.word	0x080132f7
 80132e8:	080132fd 	.word	0x080132fd
 80132ec:	08013303 	.word	0x08013303
    case HAL_OK :
      usb_status = USBD_OK;
 80132f0:	2300      	movs	r3, #0
 80132f2:	75fb      	strb	r3, [r7, #23]
    break;
 80132f4:	e00b      	b.n	801330e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80132f6:	2303      	movs	r3, #3
 80132f8:	75fb      	strb	r3, [r7, #23]
    break;
 80132fa:	e008      	b.n	801330e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80132fc:	2301      	movs	r3, #1
 80132fe:	75fb      	strb	r3, [r7, #23]
    break;
 8013300:	e005      	b.n	801330e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013302:	2303      	movs	r3, #3
 8013304:	75fb      	strb	r3, [r7, #23]
    break;
 8013306:	e002      	b.n	801330e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8013308:	2303      	movs	r3, #3
 801330a:	75fb      	strb	r3, [r7, #23]
    break;
 801330c:	bf00      	nop
  }
  return usb_status;
 801330e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013310:	4618      	mov	r0, r3
 8013312:	3718      	adds	r7, #24
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}

08013318 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b086      	sub	sp, #24
 801331c:	af00      	add	r7, sp, #0
 801331e:	60f8      	str	r0, [r7, #12]
 8013320:	607a      	str	r2, [r7, #4]
 8013322:	603b      	str	r3, [r7, #0]
 8013324:	460b      	mov	r3, r1
 8013326:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013328:	2300      	movs	r3, #0
 801332a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801332c:	2300      	movs	r3, #0
 801332e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013336:	7af9      	ldrb	r1, [r7, #11]
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	687a      	ldr	r2, [r7, #4]
 801333c:	f7f5 f9a9 	bl	8008692 <HAL_PCD_EP_Receive>
 8013340:	4603      	mov	r3, r0
 8013342:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8013344:	7dbb      	ldrb	r3, [r7, #22]
 8013346:	2b03      	cmp	r3, #3
 8013348:	d816      	bhi.n	8013378 <USBD_LL_PrepareReceive+0x60>
 801334a:	a201      	add	r2, pc, #4	; (adr r2, 8013350 <USBD_LL_PrepareReceive+0x38>)
 801334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013350:	08013361 	.word	0x08013361
 8013354:	08013367 	.word	0x08013367
 8013358:	0801336d 	.word	0x0801336d
 801335c:	08013373 	.word	0x08013373
    case HAL_OK :
      usb_status = USBD_OK;
 8013360:	2300      	movs	r3, #0
 8013362:	75fb      	strb	r3, [r7, #23]
    break;
 8013364:	e00b      	b.n	801337e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013366:	2303      	movs	r3, #3
 8013368:	75fb      	strb	r3, [r7, #23]
    break;
 801336a:	e008      	b.n	801337e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801336c:	2301      	movs	r3, #1
 801336e:	75fb      	strb	r3, [r7, #23]
    break;
 8013370:	e005      	b.n	801337e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013372:	2303      	movs	r3, #3
 8013374:	75fb      	strb	r3, [r7, #23]
    break;
 8013376:	e002      	b.n	801337e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8013378:	2303      	movs	r3, #3
 801337a:	75fb      	strb	r3, [r7, #23]
    break;
 801337c:	bf00      	nop
  }
  return usb_status;
 801337e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013380:	4618      	mov	r0, r3
 8013382:	3718      	adds	r7, #24
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}

08013388 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b082      	sub	sp, #8
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
 8013390:	460b      	mov	r3, r1
 8013392:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801339a:	78fa      	ldrb	r2, [r7, #3]
 801339c:	4611      	mov	r1, r2
 801339e:	4618      	mov	r0, r3
 80133a0:	f7f5 f9a8 	bl	80086f4 <HAL_PCD_EP_GetRxCount>
 80133a4:	4603      	mov	r3, r0
}
 80133a6:	4618      	mov	r0, r3
 80133a8:	3708      	adds	r7, #8
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}
	...

080133b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b082      	sub	sp, #8
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
 80133b8:	460b      	mov	r3, r1
 80133ba:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80133bc:	78fb      	ldrb	r3, [r7, #3]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d002      	beq.n	80133c8 <HAL_PCDEx_LPM_Callback+0x18>
 80133c2:	2b01      	cmp	r3, #1
 80133c4:	d013      	beq.n	80133ee <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80133c6:	e023      	b.n	8013410 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	699b      	ldr	r3, [r3, #24]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d007      	beq.n	80133e0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80133d0:	f000 f83c 	bl	801344c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80133d4:	4b10      	ldr	r3, [pc, #64]	; (8013418 <HAL_PCDEx_LPM_Callback+0x68>)
 80133d6:	691b      	ldr	r3, [r3, #16]
 80133d8:	4a0f      	ldr	r2, [pc, #60]	; (8013418 <HAL_PCDEx_LPM_Callback+0x68>)
 80133da:	f023 0306 	bic.w	r3, r3, #6
 80133de:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80133e6:	4618      	mov	r0, r3
 80133e8:	f7fd fdb5 	bl	8010f56 <USBD_LL_Resume>
    break;
 80133ec:	e010      	b.n	8013410 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80133f4:	4618      	mov	r0, r3
 80133f6:	f7fd fd92 	bl	8010f1e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	699b      	ldr	r3, [r3, #24]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d005      	beq.n	801340e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013402:	4b05      	ldr	r3, [pc, #20]	; (8013418 <HAL_PCDEx_LPM_Callback+0x68>)
 8013404:	691b      	ldr	r3, [r3, #16]
 8013406:	4a04      	ldr	r2, [pc, #16]	; (8013418 <HAL_PCDEx_LPM_Callback+0x68>)
 8013408:	f043 0306 	orr.w	r3, r3, #6
 801340c:	6113      	str	r3, [r2, #16]
    break;
 801340e:	bf00      	nop
}
 8013410:	bf00      	nop
 8013412:	3708      	adds	r7, #8
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}
 8013418:	e000ed00 	.word	0xe000ed00

0801341c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801341c:	b480      	push	{r7}
 801341e:	b083      	sub	sp, #12
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013424:	4b03      	ldr	r3, [pc, #12]	; (8013434 <USBD_static_malloc+0x18>)
}
 8013426:	4618      	mov	r0, r3
 8013428:	370c      	adds	r7, #12
 801342a:	46bd      	mov	sp, r7
 801342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013430:	4770      	bx	lr
 8013432:	bf00      	nop
 8013434:	20002098 	.word	0x20002098

08013438 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013438:	b480      	push	{r7}
 801343a:	b083      	sub	sp, #12
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]

}
 8013440:	bf00      	nop
 8013442:	370c      	adds	r7, #12
 8013444:	46bd      	mov	sp, r7
 8013446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344a:	4770      	bx	lr

0801344c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013450:	f7ee fa54 	bl	80018fc <SystemClock_Config>
}
 8013454:	bf00      	nop
 8013456:	bd80      	pop	{r7, pc}

08013458 <atoi>:
 8013458:	220a      	movs	r2, #10
 801345a:	2100      	movs	r1, #0
 801345c:	f000 bfb8 	b.w	80143d0 <strtol>

08013460 <malloc>:
 8013460:	4b02      	ldr	r3, [pc, #8]	; (801346c <malloc+0xc>)
 8013462:	4601      	mov	r1, r0
 8013464:	6818      	ldr	r0, [r3, #0]
 8013466:	f000 b82b 	b.w	80134c0 <_malloc_r>
 801346a:	bf00      	nop
 801346c:	200002f0 	.word	0x200002f0

08013470 <free>:
 8013470:	4b02      	ldr	r3, [pc, #8]	; (801347c <free+0xc>)
 8013472:	4601      	mov	r1, r0
 8013474:	6818      	ldr	r0, [r3, #0]
 8013476:	f002 bf55 	b.w	8016324 <_free_r>
 801347a:	bf00      	nop
 801347c:	200002f0 	.word	0x200002f0

08013480 <sbrk_aligned>:
 8013480:	b570      	push	{r4, r5, r6, lr}
 8013482:	4e0e      	ldr	r6, [pc, #56]	; (80134bc <sbrk_aligned+0x3c>)
 8013484:	460c      	mov	r4, r1
 8013486:	6831      	ldr	r1, [r6, #0]
 8013488:	4605      	mov	r5, r0
 801348a:	b911      	cbnz	r1, 8013492 <sbrk_aligned+0x12>
 801348c:	f002 f83e 	bl	801550c <_sbrk_r>
 8013490:	6030      	str	r0, [r6, #0]
 8013492:	4621      	mov	r1, r4
 8013494:	4628      	mov	r0, r5
 8013496:	f002 f839 	bl	801550c <_sbrk_r>
 801349a:	1c43      	adds	r3, r0, #1
 801349c:	d00a      	beq.n	80134b4 <sbrk_aligned+0x34>
 801349e:	1cc4      	adds	r4, r0, #3
 80134a0:	f024 0403 	bic.w	r4, r4, #3
 80134a4:	42a0      	cmp	r0, r4
 80134a6:	d007      	beq.n	80134b8 <sbrk_aligned+0x38>
 80134a8:	1a21      	subs	r1, r4, r0
 80134aa:	4628      	mov	r0, r5
 80134ac:	f002 f82e 	bl	801550c <_sbrk_r>
 80134b0:	3001      	adds	r0, #1
 80134b2:	d101      	bne.n	80134b8 <sbrk_aligned+0x38>
 80134b4:	f04f 34ff 	mov.w	r4, #4294967295
 80134b8:	4620      	mov	r0, r4
 80134ba:	bd70      	pop	{r4, r5, r6, pc}
 80134bc:	200022bc 	.word	0x200022bc

080134c0 <_malloc_r>:
 80134c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134c4:	1ccd      	adds	r5, r1, #3
 80134c6:	f025 0503 	bic.w	r5, r5, #3
 80134ca:	3508      	adds	r5, #8
 80134cc:	2d0c      	cmp	r5, #12
 80134ce:	bf38      	it	cc
 80134d0:	250c      	movcc	r5, #12
 80134d2:	2d00      	cmp	r5, #0
 80134d4:	4607      	mov	r7, r0
 80134d6:	db01      	blt.n	80134dc <_malloc_r+0x1c>
 80134d8:	42a9      	cmp	r1, r5
 80134da:	d905      	bls.n	80134e8 <_malloc_r+0x28>
 80134dc:	230c      	movs	r3, #12
 80134de:	603b      	str	r3, [r7, #0]
 80134e0:	2600      	movs	r6, #0
 80134e2:	4630      	mov	r0, r6
 80134e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80135bc <_malloc_r+0xfc>
 80134ec:	f000 f868 	bl	80135c0 <__malloc_lock>
 80134f0:	f8d8 3000 	ldr.w	r3, [r8]
 80134f4:	461c      	mov	r4, r3
 80134f6:	bb5c      	cbnz	r4, 8013550 <_malloc_r+0x90>
 80134f8:	4629      	mov	r1, r5
 80134fa:	4638      	mov	r0, r7
 80134fc:	f7ff ffc0 	bl	8013480 <sbrk_aligned>
 8013500:	1c43      	adds	r3, r0, #1
 8013502:	4604      	mov	r4, r0
 8013504:	d155      	bne.n	80135b2 <_malloc_r+0xf2>
 8013506:	f8d8 4000 	ldr.w	r4, [r8]
 801350a:	4626      	mov	r6, r4
 801350c:	2e00      	cmp	r6, #0
 801350e:	d145      	bne.n	801359c <_malloc_r+0xdc>
 8013510:	2c00      	cmp	r4, #0
 8013512:	d048      	beq.n	80135a6 <_malloc_r+0xe6>
 8013514:	6823      	ldr	r3, [r4, #0]
 8013516:	4631      	mov	r1, r6
 8013518:	4638      	mov	r0, r7
 801351a:	eb04 0903 	add.w	r9, r4, r3
 801351e:	f001 fff5 	bl	801550c <_sbrk_r>
 8013522:	4581      	cmp	r9, r0
 8013524:	d13f      	bne.n	80135a6 <_malloc_r+0xe6>
 8013526:	6821      	ldr	r1, [r4, #0]
 8013528:	1a6d      	subs	r5, r5, r1
 801352a:	4629      	mov	r1, r5
 801352c:	4638      	mov	r0, r7
 801352e:	f7ff ffa7 	bl	8013480 <sbrk_aligned>
 8013532:	3001      	adds	r0, #1
 8013534:	d037      	beq.n	80135a6 <_malloc_r+0xe6>
 8013536:	6823      	ldr	r3, [r4, #0]
 8013538:	442b      	add	r3, r5
 801353a:	6023      	str	r3, [r4, #0]
 801353c:	f8d8 3000 	ldr.w	r3, [r8]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d038      	beq.n	80135b6 <_malloc_r+0xf6>
 8013544:	685a      	ldr	r2, [r3, #4]
 8013546:	42a2      	cmp	r2, r4
 8013548:	d12b      	bne.n	80135a2 <_malloc_r+0xe2>
 801354a:	2200      	movs	r2, #0
 801354c:	605a      	str	r2, [r3, #4]
 801354e:	e00f      	b.n	8013570 <_malloc_r+0xb0>
 8013550:	6822      	ldr	r2, [r4, #0]
 8013552:	1b52      	subs	r2, r2, r5
 8013554:	d41f      	bmi.n	8013596 <_malloc_r+0xd6>
 8013556:	2a0b      	cmp	r2, #11
 8013558:	d917      	bls.n	801358a <_malloc_r+0xca>
 801355a:	1961      	adds	r1, r4, r5
 801355c:	42a3      	cmp	r3, r4
 801355e:	6025      	str	r5, [r4, #0]
 8013560:	bf18      	it	ne
 8013562:	6059      	strne	r1, [r3, #4]
 8013564:	6863      	ldr	r3, [r4, #4]
 8013566:	bf08      	it	eq
 8013568:	f8c8 1000 	streq.w	r1, [r8]
 801356c:	5162      	str	r2, [r4, r5]
 801356e:	604b      	str	r3, [r1, #4]
 8013570:	4638      	mov	r0, r7
 8013572:	f104 060b 	add.w	r6, r4, #11
 8013576:	f000 f829 	bl	80135cc <__malloc_unlock>
 801357a:	f026 0607 	bic.w	r6, r6, #7
 801357e:	1d23      	adds	r3, r4, #4
 8013580:	1af2      	subs	r2, r6, r3
 8013582:	d0ae      	beq.n	80134e2 <_malloc_r+0x22>
 8013584:	1b9b      	subs	r3, r3, r6
 8013586:	50a3      	str	r3, [r4, r2]
 8013588:	e7ab      	b.n	80134e2 <_malloc_r+0x22>
 801358a:	42a3      	cmp	r3, r4
 801358c:	6862      	ldr	r2, [r4, #4]
 801358e:	d1dd      	bne.n	801354c <_malloc_r+0x8c>
 8013590:	f8c8 2000 	str.w	r2, [r8]
 8013594:	e7ec      	b.n	8013570 <_malloc_r+0xb0>
 8013596:	4623      	mov	r3, r4
 8013598:	6864      	ldr	r4, [r4, #4]
 801359a:	e7ac      	b.n	80134f6 <_malloc_r+0x36>
 801359c:	4634      	mov	r4, r6
 801359e:	6876      	ldr	r6, [r6, #4]
 80135a0:	e7b4      	b.n	801350c <_malloc_r+0x4c>
 80135a2:	4613      	mov	r3, r2
 80135a4:	e7cc      	b.n	8013540 <_malloc_r+0x80>
 80135a6:	230c      	movs	r3, #12
 80135a8:	603b      	str	r3, [r7, #0]
 80135aa:	4638      	mov	r0, r7
 80135ac:	f000 f80e 	bl	80135cc <__malloc_unlock>
 80135b0:	e797      	b.n	80134e2 <_malloc_r+0x22>
 80135b2:	6025      	str	r5, [r4, #0]
 80135b4:	e7dc      	b.n	8013570 <_malloc_r+0xb0>
 80135b6:	605b      	str	r3, [r3, #4]
 80135b8:	deff      	udf	#255	; 0xff
 80135ba:	bf00      	nop
 80135bc:	200022b8 	.word	0x200022b8

080135c0 <__malloc_lock>:
 80135c0:	4801      	ldr	r0, [pc, #4]	; (80135c8 <__malloc_lock+0x8>)
 80135c2:	f001 bff0 	b.w	80155a6 <__retarget_lock_acquire_recursive>
 80135c6:	bf00      	nop
 80135c8:	20002400 	.word	0x20002400

080135cc <__malloc_unlock>:
 80135cc:	4801      	ldr	r0, [pc, #4]	; (80135d4 <__malloc_unlock+0x8>)
 80135ce:	f001 bfeb 	b.w	80155a8 <__retarget_lock_release_recursive>
 80135d2:	bf00      	nop
 80135d4:	20002400 	.word	0x20002400

080135d8 <sulp>:
 80135d8:	b570      	push	{r4, r5, r6, lr}
 80135da:	4604      	mov	r4, r0
 80135dc:	460d      	mov	r5, r1
 80135de:	ec45 4b10 	vmov	d0, r4, r5
 80135e2:	4616      	mov	r6, r2
 80135e4:	f003 fdc0 	bl	8017168 <__ulp>
 80135e8:	ec51 0b10 	vmov	r0, r1, d0
 80135ec:	b17e      	cbz	r6, 801360e <sulp+0x36>
 80135ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80135f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	dd09      	ble.n	801360e <sulp+0x36>
 80135fa:	051b      	lsls	r3, r3, #20
 80135fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013600:	2400      	movs	r4, #0
 8013602:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013606:	4622      	mov	r2, r4
 8013608:	462b      	mov	r3, r5
 801360a:	f7ec fff5 	bl	80005f8 <__aeabi_dmul>
 801360e:	bd70      	pop	{r4, r5, r6, pc}

08013610 <_strtod_l>:
 8013610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013614:	ed2d 8b02 	vpush	{d8}
 8013618:	b09b      	sub	sp, #108	; 0x6c
 801361a:	4604      	mov	r4, r0
 801361c:	9213      	str	r2, [sp, #76]	; 0x4c
 801361e:	2200      	movs	r2, #0
 8013620:	9216      	str	r2, [sp, #88]	; 0x58
 8013622:	460d      	mov	r5, r1
 8013624:	f04f 0800 	mov.w	r8, #0
 8013628:	f04f 0900 	mov.w	r9, #0
 801362c:	460a      	mov	r2, r1
 801362e:	9215      	str	r2, [sp, #84]	; 0x54
 8013630:	7811      	ldrb	r1, [r2, #0]
 8013632:	292b      	cmp	r1, #43	; 0x2b
 8013634:	d04c      	beq.n	80136d0 <_strtod_l+0xc0>
 8013636:	d83a      	bhi.n	80136ae <_strtod_l+0x9e>
 8013638:	290d      	cmp	r1, #13
 801363a:	d834      	bhi.n	80136a6 <_strtod_l+0x96>
 801363c:	2908      	cmp	r1, #8
 801363e:	d834      	bhi.n	80136aa <_strtod_l+0x9a>
 8013640:	2900      	cmp	r1, #0
 8013642:	d03d      	beq.n	80136c0 <_strtod_l+0xb0>
 8013644:	2200      	movs	r2, #0
 8013646:	920a      	str	r2, [sp, #40]	; 0x28
 8013648:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801364a:	7832      	ldrb	r2, [r6, #0]
 801364c:	2a30      	cmp	r2, #48	; 0x30
 801364e:	f040 80b4 	bne.w	80137ba <_strtod_l+0x1aa>
 8013652:	7872      	ldrb	r2, [r6, #1]
 8013654:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013658:	2a58      	cmp	r2, #88	; 0x58
 801365a:	d170      	bne.n	801373e <_strtod_l+0x12e>
 801365c:	9302      	str	r3, [sp, #8]
 801365e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013660:	9301      	str	r3, [sp, #4]
 8013662:	ab16      	add	r3, sp, #88	; 0x58
 8013664:	9300      	str	r3, [sp, #0]
 8013666:	4a8e      	ldr	r2, [pc, #568]	; (80138a0 <_strtod_l+0x290>)
 8013668:	ab17      	add	r3, sp, #92	; 0x5c
 801366a:	a915      	add	r1, sp, #84	; 0x54
 801366c:	4620      	mov	r0, r4
 801366e:	f002 ff0d 	bl	801648c <__gethex>
 8013672:	f010 070f 	ands.w	r7, r0, #15
 8013676:	4605      	mov	r5, r0
 8013678:	d005      	beq.n	8013686 <_strtod_l+0x76>
 801367a:	2f06      	cmp	r7, #6
 801367c:	d12a      	bne.n	80136d4 <_strtod_l+0xc4>
 801367e:	3601      	adds	r6, #1
 8013680:	2300      	movs	r3, #0
 8013682:	9615      	str	r6, [sp, #84]	; 0x54
 8013684:	930a      	str	r3, [sp, #40]	; 0x28
 8013686:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013688:	2b00      	cmp	r3, #0
 801368a:	f040 857f 	bne.w	801418c <_strtod_l+0xb7c>
 801368e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013690:	b1db      	cbz	r3, 80136ca <_strtod_l+0xba>
 8013692:	4642      	mov	r2, r8
 8013694:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013698:	ec43 2b10 	vmov	d0, r2, r3
 801369c:	b01b      	add	sp, #108	; 0x6c
 801369e:	ecbd 8b02 	vpop	{d8}
 80136a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136a6:	2920      	cmp	r1, #32
 80136a8:	d1cc      	bne.n	8013644 <_strtod_l+0x34>
 80136aa:	3201      	adds	r2, #1
 80136ac:	e7bf      	b.n	801362e <_strtod_l+0x1e>
 80136ae:	292d      	cmp	r1, #45	; 0x2d
 80136b0:	d1c8      	bne.n	8013644 <_strtod_l+0x34>
 80136b2:	2101      	movs	r1, #1
 80136b4:	910a      	str	r1, [sp, #40]	; 0x28
 80136b6:	1c51      	adds	r1, r2, #1
 80136b8:	9115      	str	r1, [sp, #84]	; 0x54
 80136ba:	7852      	ldrb	r2, [r2, #1]
 80136bc:	2a00      	cmp	r2, #0
 80136be:	d1c3      	bne.n	8013648 <_strtod_l+0x38>
 80136c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80136c2:	9515      	str	r5, [sp, #84]	; 0x54
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	f040 855f 	bne.w	8014188 <_strtod_l+0xb78>
 80136ca:	4642      	mov	r2, r8
 80136cc:	464b      	mov	r3, r9
 80136ce:	e7e3      	b.n	8013698 <_strtod_l+0x88>
 80136d0:	2100      	movs	r1, #0
 80136d2:	e7ef      	b.n	80136b4 <_strtod_l+0xa4>
 80136d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80136d6:	b13a      	cbz	r2, 80136e8 <_strtod_l+0xd8>
 80136d8:	2135      	movs	r1, #53	; 0x35
 80136da:	a818      	add	r0, sp, #96	; 0x60
 80136dc:	f003 fe41 	bl	8017362 <__copybits>
 80136e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80136e2:	4620      	mov	r0, r4
 80136e4:	f003 fa14 	bl	8016b10 <_Bfree>
 80136e8:	3f01      	subs	r7, #1
 80136ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80136ec:	2f04      	cmp	r7, #4
 80136ee:	d806      	bhi.n	80136fe <_strtod_l+0xee>
 80136f0:	e8df f007 	tbb	[pc, r7]
 80136f4:	201d0314 	.word	0x201d0314
 80136f8:	14          	.byte	0x14
 80136f9:	00          	.byte	0x00
 80136fa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80136fe:	05e9      	lsls	r1, r5, #23
 8013700:	bf48      	it	mi
 8013702:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8013706:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801370a:	0d1b      	lsrs	r3, r3, #20
 801370c:	051b      	lsls	r3, r3, #20
 801370e:	2b00      	cmp	r3, #0
 8013710:	d1b9      	bne.n	8013686 <_strtod_l+0x76>
 8013712:	f001 ff1d 	bl	8015550 <__errno>
 8013716:	2322      	movs	r3, #34	; 0x22
 8013718:	6003      	str	r3, [r0, #0]
 801371a:	e7b4      	b.n	8013686 <_strtod_l+0x76>
 801371c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8013720:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013724:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013728:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801372c:	e7e7      	b.n	80136fe <_strtod_l+0xee>
 801372e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80138a8 <_strtod_l+0x298>
 8013732:	e7e4      	b.n	80136fe <_strtod_l+0xee>
 8013734:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8013738:	f04f 38ff 	mov.w	r8, #4294967295
 801373c:	e7df      	b.n	80136fe <_strtod_l+0xee>
 801373e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013740:	1c5a      	adds	r2, r3, #1
 8013742:	9215      	str	r2, [sp, #84]	; 0x54
 8013744:	785b      	ldrb	r3, [r3, #1]
 8013746:	2b30      	cmp	r3, #48	; 0x30
 8013748:	d0f9      	beq.n	801373e <_strtod_l+0x12e>
 801374a:	2b00      	cmp	r3, #0
 801374c:	d09b      	beq.n	8013686 <_strtod_l+0x76>
 801374e:	2301      	movs	r3, #1
 8013750:	f04f 0a00 	mov.w	sl, #0
 8013754:	9304      	str	r3, [sp, #16]
 8013756:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013758:	930b      	str	r3, [sp, #44]	; 0x2c
 801375a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801375e:	46d3      	mov	fp, sl
 8013760:	220a      	movs	r2, #10
 8013762:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013764:	7806      	ldrb	r6, [r0, #0]
 8013766:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801376a:	b2d9      	uxtb	r1, r3
 801376c:	2909      	cmp	r1, #9
 801376e:	d926      	bls.n	80137be <_strtod_l+0x1ae>
 8013770:	494c      	ldr	r1, [pc, #304]	; (80138a4 <_strtod_l+0x294>)
 8013772:	2201      	movs	r2, #1
 8013774:	f001 fe0d 	bl	8015392 <strncmp>
 8013778:	2800      	cmp	r0, #0
 801377a:	d030      	beq.n	80137de <_strtod_l+0x1ce>
 801377c:	2000      	movs	r0, #0
 801377e:	4632      	mov	r2, r6
 8013780:	9005      	str	r0, [sp, #20]
 8013782:	465e      	mov	r6, fp
 8013784:	4603      	mov	r3, r0
 8013786:	2a65      	cmp	r2, #101	; 0x65
 8013788:	d001      	beq.n	801378e <_strtod_l+0x17e>
 801378a:	2a45      	cmp	r2, #69	; 0x45
 801378c:	d113      	bne.n	80137b6 <_strtod_l+0x1a6>
 801378e:	b91e      	cbnz	r6, 8013798 <_strtod_l+0x188>
 8013790:	9a04      	ldr	r2, [sp, #16]
 8013792:	4302      	orrs	r2, r0
 8013794:	d094      	beq.n	80136c0 <_strtod_l+0xb0>
 8013796:	2600      	movs	r6, #0
 8013798:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801379a:	1c6a      	adds	r2, r5, #1
 801379c:	9215      	str	r2, [sp, #84]	; 0x54
 801379e:	786a      	ldrb	r2, [r5, #1]
 80137a0:	2a2b      	cmp	r2, #43	; 0x2b
 80137a2:	d074      	beq.n	801388e <_strtod_l+0x27e>
 80137a4:	2a2d      	cmp	r2, #45	; 0x2d
 80137a6:	d078      	beq.n	801389a <_strtod_l+0x28a>
 80137a8:	f04f 0c00 	mov.w	ip, #0
 80137ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80137b0:	2909      	cmp	r1, #9
 80137b2:	d97f      	bls.n	80138b4 <_strtod_l+0x2a4>
 80137b4:	9515      	str	r5, [sp, #84]	; 0x54
 80137b6:	2700      	movs	r7, #0
 80137b8:	e09e      	b.n	80138f8 <_strtod_l+0x2e8>
 80137ba:	2300      	movs	r3, #0
 80137bc:	e7c8      	b.n	8013750 <_strtod_l+0x140>
 80137be:	f1bb 0f08 	cmp.w	fp, #8
 80137c2:	bfd8      	it	le
 80137c4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80137c6:	f100 0001 	add.w	r0, r0, #1
 80137ca:	bfda      	itte	le
 80137cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80137d0:	9309      	strle	r3, [sp, #36]	; 0x24
 80137d2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80137d6:	f10b 0b01 	add.w	fp, fp, #1
 80137da:	9015      	str	r0, [sp, #84]	; 0x54
 80137dc:	e7c1      	b.n	8013762 <_strtod_l+0x152>
 80137de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137e0:	1c5a      	adds	r2, r3, #1
 80137e2:	9215      	str	r2, [sp, #84]	; 0x54
 80137e4:	785a      	ldrb	r2, [r3, #1]
 80137e6:	f1bb 0f00 	cmp.w	fp, #0
 80137ea:	d037      	beq.n	801385c <_strtod_l+0x24c>
 80137ec:	9005      	str	r0, [sp, #20]
 80137ee:	465e      	mov	r6, fp
 80137f0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80137f4:	2b09      	cmp	r3, #9
 80137f6:	d912      	bls.n	801381e <_strtod_l+0x20e>
 80137f8:	2301      	movs	r3, #1
 80137fa:	e7c4      	b.n	8013786 <_strtod_l+0x176>
 80137fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137fe:	1c5a      	adds	r2, r3, #1
 8013800:	9215      	str	r2, [sp, #84]	; 0x54
 8013802:	785a      	ldrb	r2, [r3, #1]
 8013804:	3001      	adds	r0, #1
 8013806:	2a30      	cmp	r2, #48	; 0x30
 8013808:	d0f8      	beq.n	80137fc <_strtod_l+0x1ec>
 801380a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801380e:	2b08      	cmp	r3, #8
 8013810:	f200 84c1 	bhi.w	8014196 <_strtod_l+0xb86>
 8013814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013816:	9005      	str	r0, [sp, #20]
 8013818:	2000      	movs	r0, #0
 801381a:	930b      	str	r3, [sp, #44]	; 0x2c
 801381c:	4606      	mov	r6, r0
 801381e:	3a30      	subs	r2, #48	; 0x30
 8013820:	f100 0301 	add.w	r3, r0, #1
 8013824:	d014      	beq.n	8013850 <_strtod_l+0x240>
 8013826:	9905      	ldr	r1, [sp, #20]
 8013828:	4419      	add	r1, r3
 801382a:	9105      	str	r1, [sp, #20]
 801382c:	4633      	mov	r3, r6
 801382e:	eb00 0c06 	add.w	ip, r0, r6
 8013832:	210a      	movs	r1, #10
 8013834:	4563      	cmp	r3, ip
 8013836:	d113      	bne.n	8013860 <_strtod_l+0x250>
 8013838:	1833      	adds	r3, r6, r0
 801383a:	2b08      	cmp	r3, #8
 801383c:	f106 0601 	add.w	r6, r6, #1
 8013840:	4406      	add	r6, r0
 8013842:	dc1a      	bgt.n	801387a <_strtod_l+0x26a>
 8013844:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013846:	230a      	movs	r3, #10
 8013848:	fb03 2301 	mla	r3, r3, r1, r2
 801384c:	9309      	str	r3, [sp, #36]	; 0x24
 801384e:	2300      	movs	r3, #0
 8013850:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013852:	1c51      	adds	r1, r2, #1
 8013854:	9115      	str	r1, [sp, #84]	; 0x54
 8013856:	7852      	ldrb	r2, [r2, #1]
 8013858:	4618      	mov	r0, r3
 801385a:	e7c9      	b.n	80137f0 <_strtod_l+0x1e0>
 801385c:	4658      	mov	r0, fp
 801385e:	e7d2      	b.n	8013806 <_strtod_l+0x1f6>
 8013860:	2b08      	cmp	r3, #8
 8013862:	f103 0301 	add.w	r3, r3, #1
 8013866:	dc03      	bgt.n	8013870 <_strtod_l+0x260>
 8013868:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801386a:	434f      	muls	r7, r1
 801386c:	9709      	str	r7, [sp, #36]	; 0x24
 801386e:	e7e1      	b.n	8013834 <_strtod_l+0x224>
 8013870:	2b10      	cmp	r3, #16
 8013872:	bfd8      	it	le
 8013874:	fb01 fa0a 	mulle.w	sl, r1, sl
 8013878:	e7dc      	b.n	8013834 <_strtod_l+0x224>
 801387a:	2e10      	cmp	r6, #16
 801387c:	bfdc      	itt	le
 801387e:	230a      	movle	r3, #10
 8013880:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8013884:	e7e3      	b.n	801384e <_strtod_l+0x23e>
 8013886:	2300      	movs	r3, #0
 8013888:	9305      	str	r3, [sp, #20]
 801388a:	2301      	movs	r3, #1
 801388c:	e780      	b.n	8013790 <_strtod_l+0x180>
 801388e:	f04f 0c00 	mov.w	ip, #0
 8013892:	1caa      	adds	r2, r5, #2
 8013894:	9215      	str	r2, [sp, #84]	; 0x54
 8013896:	78aa      	ldrb	r2, [r5, #2]
 8013898:	e788      	b.n	80137ac <_strtod_l+0x19c>
 801389a:	f04f 0c01 	mov.w	ip, #1
 801389e:	e7f8      	b.n	8013892 <_strtod_l+0x282>
 80138a0:	0801b838 	.word	0x0801b838
 80138a4:	0801b834 	.word	0x0801b834
 80138a8:	7ff00000 	.word	0x7ff00000
 80138ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80138ae:	1c51      	adds	r1, r2, #1
 80138b0:	9115      	str	r1, [sp, #84]	; 0x54
 80138b2:	7852      	ldrb	r2, [r2, #1]
 80138b4:	2a30      	cmp	r2, #48	; 0x30
 80138b6:	d0f9      	beq.n	80138ac <_strtod_l+0x29c>
 80138b8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80138bc:	2908      	cmp	r1, #8
 80138be:	f63f af7a 	bhi.w	80137b6 <_strtod_l+0x1a6>
 80138c2:	3a30      	subs	r2, #48	; 0x30
 80138c4:	9208      	str	r2, [sp, #32]
 80138c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80138c8:	920c      	str	r2, [sp, #48]	; 0x30
 80138ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80138cc:	1c57      	adds	r7, r2, #1
 80138ce:	9715      	str	r7, [sp, #84]	; 0x54
 80138d0:	7852      	ldrb	r2, [r2, #1]
 80138d2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80138d6:	f1be 0f09 	cmp.w	lr, #9
 80138da:	d938      	bls.n	801394e <_strtod_l+0x33e>
 80138dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80138de:	1a7f      	subs	r7, r7, r1
 80138e0:	2f08      	cmp	r7, #8
 80138e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80138e6:	dc03      	bgt.n	80138f0 <_strtod_l+0x2e0>
 80138e8:	9908      	ldr	r1, [sp, #32]
 80138ea:	428f      	cmp	r7, r1
 80138ec:	bfa8      	it	ge
 80138ee:	460f      	movge	r7, r1
 80138f0:	f1bc 0f00 	cmp.w	ip, #0
 80138f4:	d000      	beq.n	80138f8 <_strtod_l+0x2e8>
 80138f6:	427f      	negs	r7, r7
 80138f8:	2e00      	cmp	r6, #0
 80138fa:	d14f      	bne.n	801399c <_strtod_l+0x38c>
 80138fc:	9904      	ldr	r1, [sp, #16]
 80138fe:	4301      	orrs	r1, r0
 8013900:	f47f aec1 	bne.w	8013686 <_strtod_l+0x76>
 8013904:	2b00      	cmp	r3, #0
 8013906:	f47f aedb 	bne.w	80136c0 <_strtod_l+0xb0>
 801390a:	2a69      	cmp	r2, #105	; 0x69
 801390c:	d029      	beq.n	8013962 <_strtod_l+0x352>
 801390e:	dc26      	bgt.n	801395e <_strtod_l+0x34e>
 8013910:	2a49      	cmp	r2, #73	; 0x49
 8013912:	d026      	beq.n	8013962 <_strtod_l+0x352>
 8013914:	2a4e      	cmp	r2, #78	; 0x4e
 8013916:	f47f aed3 	bne.w	80136c0 <_strtod_l+0xb0>
 801391a:	499b      	ldr	r1, [pc, #620]	; (8013b88 <_strtod_l+0x578>)
 801391c:	a815      	add	r0, sp, #84	; 0x54
 801391e:	f002 fff5 	bl	801690c <__match>
 8013922:	2800      	cmp	r0, #0
 8013924:	f43f aecc 	beq.w	80136c0 <_strtod_l+0xb0>
 8013928:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801392a:	781b      	ldrb	r3, [r3, #0]
 801392c:	2b28      	cmp	r3, #40	; 0x28
 801392e:	d12f      	bne.n	8013990 <_strtod_l+0x380>
 8013930:	4996      	ldr	r1, [pc, #600]	; (8013b8c <_strtod_l+0x57c>)
 8013932:	aa18      	add	r2, sp, #96	; 0x60
 8013934:	a815      	add	r0, sp, #84	; 0x54
 8013936:	f002 fffd 	bl	8016934 <__hexnan>
 801393a:	2805      	cmp	r0, #5
 801393c:	d128      	bne.n	8013990 <_strtod_l+0x380>
 801393e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013940:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013944:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013948:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801394c:	e69b      	b.n	8013686 <_strtod_l+0x76>
 801394e:	9f08      	ldr	r7, [sp, #32]
 8013950:	210a      	movs	r1, #10
 8013952:	fb01 2107 	mla	r1, r1, r7, r2
 8013956:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801395a:	9208      	str	r2, [sp, #32]
 801395c:	e7b5      	b.n	80138ca <_strtod_l+0x2ba>
 801395e:	2a6e      	cmp	r2, #110	; 0x6e
 8013960:	e7d9      	b.n	8013916 <_strtod_l+0x306>
 8013962:	498b      	ldr	r1, [pc, #556]	; (8013b90 <_strtod_l+0x580>)
 8013964:	a815      	add	r0, sp, #84	; 0x54
 8013966:	f002 ffd1 	bl	801690c <__match>
 801396a:	2800      	cmp	r0, #0
 801396c:	f43f aea8 	beq.w	80136c0 <_strtod_l+0xb0>
 8013970:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013972:	4988      	ldr	r1, [pc, #544]	; (8013b94 <_strtod_l+0x584>)
 8013974:	3b01      	subs	r3, #1
 8013976:	a815      	add	r0, sp, #84	; 0x54
 8013978:	9315      	str	r3, [sp, #84]	; 0x54
 801397a:	f002 ffc7 	bl	801690c <__match>
 801397e:	b910      	cbnz	r0, 8013986 <_strtod_l+0x376>
 8013980:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013982:	3301      	adds	r3, #1
 8013984:	9315      	str	r3, [sp, #84]	; 0x54
 8013986:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8013ba4 <_strtod_l+0x594>
 801398a:	f04f 0800 	mov.w	r8, #0
 801398e:	e67a      	b.n	8013686 <_strtod_l+0x76>
 8013990:	4881      	ldr	r0, [pc, #516]	; (8013b98 <_strtod_l+0x588>)
 8013992:	f001 fe21 	bl	80155d8 <nan>
 8013996:	ec59 8b10 	vmov	r8, r9, d0
 801399a:	e674      	b.n	8013686 <_strtod_l+0x76>
 801399c:	9b05      	ldr	r3, [sp, #20]
 801399e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139a0:	1afb      	subs	r3, r7, r3
 80139a2:	f1bb 0f00 	cmp.w	fp, #0
 80139a6:	bf08      	it	eq
 80139a8:	46b3      	moveq	fp, r6
 80139aa:	2e10      	cmp	r6, #16
 80139ac:	9308      	str	r3, [sp, #32]
 80139ae:	4635      	mov	r5, r6
 80139b0:	bfa8      	it	ge
 80139b2:	2510      	movge	r5, #16
 80139b4:	f7ec fda6 	bl	8000504 <__aeabi_ui2d>
 80139b8:	2e09      	cmp	r6, #9
 80139ba:	4680      	mov	r8, r0
 80139bc:	4689      	mov	r9, r1
 80139be:	dd13      	ble.n	80139e8 <_strtod_l+0x3d8>
 80139c0:	4b76      	ldr	r3, [pc, #472]	; (8013b9c <_strtod_l+0x58c>)
 80139c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80139c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80139ca:	f7ec fe15 	bl	80005f8 <__aeabi_dmul>
 80139ce:	4680      	mov	r8, r0
 80139d0:	4650      	mov	r0, sl
 80139d2:	4689      	mov	r9, r1
 80139d4:	f7ec fd96 	bl	8000504 <__aeabi_ui2d>
 80139d8:	4602      	mov	r2, r0
 80139da:	460b      	mov	r3, r1
 80139dc:	4640      	mov	r0, r8
 80139de:	4649      	mov	r1, r9
 80139e0:	f7ec fc54 	bl	800028c <__adddf3>
 80139e4:	4680      	mov	r8, r0
 80139e6:	4689      	mov	r9, r1
 80139e8:	2e0f      	cmp	r6, #15
 80139ea:	dc38      	bgt.n	8013a5e <_strtod_l+0x44e>
 80139ec:	9b08      	ldr	r3, [sp, #32]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	f43f ae49 	beq.w	8013686 <_strtod_l+0x76>
 80139f4:	dd24      	ble.n	8013a40 <_strtod_l+0x430>
 80139f6:	2b16      	cmp	r3, #22
 80139f8:	dc0b      	bgt.n	8013a12 <_strtod_l+0x402>
 80139fa:	4968      	ldr	r1, [pc, #416]	; (8013b9c <_strtod_l+0x58c>)
 80139fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a04:	4642      	mov	r2, r8
 8013a06:	464b      	mov	r3, r9
 8013a08:	f7ec fdf6 	bl	80005f8 <__aeabi_dmul>
 8013a0c:	4680      	mov	r8, r0
 8013a0e:	4689      	mov	r9, r1
 8013a10:	e639      	b.n	8013686 <_strtod_l+0x76>
 8013a12:	9a08      	ldr	r2, [sp, #32]
 8013a14:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8013a18:	4293      	cmp	r3, r2
 8013a1a:	db20      	blt.n	8013a5e <_strtod_l+0x44e>
 8013a1c:	4c5f      	ldr	r4, [pc, #380]	; (8013b9c <_strtod_l+0x58c>)
 8013a1e:	f1c6 060f 	rsb	r6, r6, #15
 8013a22:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8013a26:	4642      	mov	r2, r8
 8013a28:	464b      	mov	r3, r9
 8013a2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a2e:	f7ec fde3 	bl	80005f8 <__aeabi_dmul>
 8013a32:	9b08      	ldr	r3, [sp, #32]
 8013a34:	1b9e      	subs	r6, r3, r6
 8013a36:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8013a3a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013a3e:	e7e3      	b.n	8013a08 <_strtod_l+0x3f8>
 8013a40:	9b08      	ldr	r3, [sp, #32]
 8013a42:	3316      	adds	r3, #22
 8013a44:	db0b      	blt.n	8013a5e <_strtod_l+0x44e>
 8013a46:	9b05      	ldr	r3, [sp, #20]
 8013a48:	1bdf      	subs	r7, r3, r7
 8013a4a:	4b54      	ldr	r3, [pc, #336]	; (8013b9c <_strtod_l+0x58c>)
 8013a4c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013a54:	4640      	mov	r0, r8
 8013a56:	4649      	mov	r1, r9
 8013a58:	f7ec fef8 	bl	800084c <__aeabi_ddiv>
 8013a5c:	e7d6      	b.n	8013a0c <_strtod_l+0x3fc>
 8013a5e:	9b08      	ldr	r3, [sp, #32]
 8013a60:	1b75      	subs	r5, r6, r5
 8013a62:	441d      	add	r5, r3
 8013a64:	2d00      	cmp	r5, #0
 8013a66:	dd70      	ble.n	8013b4a <_strtod_l+0x53a>
 8013a68:	f015 030f 	ands.w	r3, r5, #15
 8013a6c:	d00a      	beq.n	8013a84 <_strtod_l+0x474>
 8013a6e:	494b      	ldr	r1, [pc, #300]	; (8013b9c <_strtod_l+0x58c>)
 8013a70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013a74:	4642      	mov	r2, r8
 8013a76:	464b      	mov	r3, r9
 8013a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a7c:	f7ec fdbc 	bl	80005f8 <__aeabi_dmul>
 8013a80:	4680      	mov	r8, r0
 8013a82:	4689      	mov	r9, r1
 8013a84:	f035 050f 	bics.w	r5, r5, #15
 8013a88:	d04d      	beq.n	8013b26 <_strtod_l+0x516>
 8013a8a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8013a8e:	dd22      	ble.n	8013ad6 <_strtod_l+0x4c6>
 8013a90:	2500      	movs	r5, #0
 8013a92:	46ab      	mov	fp, r5
 8013a94:	9509      	str	r5, [sp, #36]	; 0x24
 8013a96:	9505      	str	r5, [sp, #20]
 8013a98:	2322      	movs	r3, #34	; 0x22
 8013a9a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013ba4 <_strtod_l+0x594>
 8013a9e:	6023      	str	r3, [r4, #0]
 8013aa0:	f04f 0800 	mov.w	r8, #0
 8013aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	f43f aded 	beq.w	8013686 <_strtod_l+0x76>
 8013aac:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013aae:	4620      	mov	r0, r4
 8013ab0:	f003 f82e 	bl	8016b10 <_Bfree>
 8013ab4:	9905      	ldr	r1, [sp, #20]
 8013ab6:	4620      	mov	r0, r4
 8013ab8:	f003 f82a 	bl	8016b10 <_Bfree>
 8013abc:	4659      	mov	r1, fp
 8013abe:	4620      	mov	r0, r4
 8013ac0:	f003 f826 	bl	8016b10 <_Bfree>
 8013ac4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	f003 f822 	bl	8016b10 <_Bfree>
 8013acc:	4629      	mov	r1, r5
 8013ace:	4620      	mov	r0, r4
 8013ad0:	f003 f81e 	bl	8016b10 <_Bfree>
 8013ad4:	e5d7      	b.n	8013686 <_strtod_l+0x76>
 8013ad6:	4b32      	ldr	r3, [pc, #200]	; (8013ba0 <_strtod_l+0x590>)
 8013ad8:	9304      	str	r3, [sp, #16]
 8013ada:	2300      	movs	r3, #0
 8013adc:	112d      	asrs	r5, r5, #4
 8013ade:	4640      	mov	r0, r8
 8013ae0:	4649      	mov	r1, r9
 8013ae2:	469a      	mov	sl, r3
 8013ae4:	2d01      	cmp	r5, #1
 8013ae6:	dc21      	bgt.n	8013b2c <_strtod_l+0x51c>
 8013ae8:	b10b      	cbz	r3, 8013aee <_strtod_l+0x4de>
 8013aea:	4680      	mov	r8, r0
 8013aec:	4689      	mov	r9, r1
 8013aee:	492c      	ldr	r1, [pc, #176]	; (8013ba0 <_strtod_l+0x590>)
 8013af0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8013af4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013af8:	4642      	mov	r2, r8
 8013afa:	464b      	mov	r3, r9
 8013afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b00:	f7ec fd7a 	bl	80005f8 <__aeabi_dmul>
 8013b04:	4b27      	ldr	r3, [pc, #156]	; (8013ba4 <_strtod_l+0x594>)
 8013b06:	460a      	mov	r2, r1
 8013b08:	400b      	ands	r3, r1
 8013b0a:	4927      	ldr	r1, [pc, #156]	; (8013ba8 <_strtod_l+0x598>)
 8013b0c:	428b      	cmp	r3, r1
 8013b0e:	4680      	mov	r8, r0
 8013b10:	d8be      	bhi.n	8013a90 <_strtod_l+0x480>
 8013b12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013b16:	428b      	cmp	r3, r1
 8013b18:	bf86      	itte	hi
 8013b1a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8013bac <_strtod_l+0x59c>
 8013b1e:	f04f 38ff 	movhi.w	r8, #4294967295
 8013b22:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8013b26:	2300      	movs	r3, #0
 8013b28:	9304      	str	r3, [sp, #16]
 8013b2a:	e07b      	b.n	8013c24 <_strtod_l+0x614>
 8013b2c:	07ea      	lsls	r2, r5, #31
 8013b2e:	d505      	bpl.n	8013b3c <_strtod_l+0x52c>
 8013b30:	9b04      	ldr	r3, [sp, #16]
 8013b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b36:	f7ec fd5f 	bl	80005f8 <__aeabi_dmul>
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	9a04      	ldr	r2, [sp, #16]
 8013b3e:	3208      	adds	r2, #8
 8013b40:	f10a 0a01 	add.w	sl, sl, #1
 8013b44:	106d      	asrs	r5, r5, #1
 8013b46:	9204      	str	r2, [sp, #16]
 8013b48:	e7cc      	b.n	8013ae4 <_strtod_l+0x4d4>
 8013b4a:	d0ec      	beq.n	8013b26 <_strtod_l+0x516>
 8013b4c:	426d      	negs	r5, r5
 8013b4e:	f015 020f 	ands.w	r2, r5, #15
 8013b52:	d00a      	beq.n	8013b6a <_strtod_l+0x55a>
 8013b54:	4b11      	ldr	r3, [pc, #68]	; (8013b9c <_strtod_l+0x58c>)
 8013b56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b5a:	4640      	mov	r0, r8
 8013b5c:	4649      	mov	r1, r9
 8013b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b62:	f7ec fe73 	bl	800084c <__aeabi_ddiv>
 8013b66:	4680      	mov	r8, r0
 8013b68:	4689      	mov	r9, r1
 8013b6a:	112d      	asrs	r5, r5, #4
 8013b6c:	d0db      	beq.n	8013b26 <_strtod_l+0x516>
 8013b6e:	2d1f      	cmp	r5, #31
 8013b70:	dd1e      	ble.n	8013bb0 <_strtod_l+0x5a0>
 8013b72:	2500      	movs	r5, #0
 8013b74:	46ab      	mov	fp, r5
 8013b76:	9509      	str	r5, [sp, #36]	; 0x24
 8013b78:	9505      	str	r5, [sp, #20]
 8013b7a:	2322      	movs	r3, #34	; 0x22
 8013b7c:	f04f 0800 	mov.w	r8, #0
 8013b80:	f04f 0900 	mov.w	r9, #0
 8013b84:	6023      	str	r3, [r4, #0]
 8013b86:	e78d      	b.n	8013aa4 <_strtod_l+0x494>
 8013b88:	0801b996 	.word	0x0801b996
 8013b8c:	0801b84c 	.word	0x0801b84c
 8013b90:	0801b98e 	.word	0x0801b98e
 8013b94:	0801ba7a 	.word	0x0801ba7a
 8013b98:	0801ba76 	.word	0x0801ba76
 8013b9c:	0801bbd0 	.word	0x0801bbd0
 8013ba0:	0801bba8 	.word	0x0801bba8
 8013ba4:	7ff00000 	.word	0x7ff00000
 8013ba8:	7ca00000 	.word	0x7ca00000
 8013bac:	7fefffff 	.word	0x7fefffff
 8013bb0:	f015 0310 	ands.w	r3, r5, #16
 8013bb4:	bf18      	it	ne
 8013bb6:	236a      	movne	r3, #106	; 0x6a
 8013bb8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8013f5c <_strtod_l+0x94c>
 8013bbc:	9304      	str	r3, [sp, #16]
 8013bbe:	4640      	mov	r0, r8
 8013bc0:	4649      	mov	r1, r9
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	07ea      	lsls	r2, r5, #31
 8013bc6:	d504      	bpl.n	8013bd2 <_strtod_l+0x5c2>
 8013bc8:	e9da 2300 	ldrd	r2, r3, [sl]
 8013bcc:	f7ec fd14 	bl	80005f8 <__aeabi_dmul>
 8013bd0:	2301      	movs	r3, #1
 8013bd2:	106d      	asrs	r5, r5, #1
 8013bd4:	f10a 0a08 	add.w	sl, sl, #8
 8013bd8:	d1f4      	bne.n	8013bc4 <_strtod_l+0x5b4>
 8013bda:	b10b      	cbz	r3, 8013be0 <_strtod_l+0x5d0>
 8013bdc:	4680      	mov	r8, r0
 8013bde:	4689      	mov	r9, r1
 8013be0:	9b04      	ldr	r3, [sp, #16]
 8013be2:	b1bb      	cbz	r3, 8013c14 <_strtod_l+0x604>
 8013be4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8013be8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	4649      	mov	r1, r9
 8013bf0:	dd10      	ble.n	8013c14 <_strtod_l+0x604>
 8013bf2:	2b1f      	cmp	r3, #31
 8013bf4:	f340 811e 	ble.w	8013e34 <_strtod_l+0x824>
 8013bf8:	2b34      	cmp	r3, #52	; 0x34
 8013bfa:	bfde      	ittt	le
 8013bfc:	f04f 33ff 	movle.w	r3, #4294967295
 8013c00:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013c04:	4093      	lslle	r3, r2
 8013c06:	f04f 0800 	mov.w	r8, #0
 8013c0a:	bfcc      	ite	gt
 8013c0c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013c10:	ea03 0901 	andle.w	r9, r3, r1
 8013c14:	2200      	movs	r2, #0
 8013c16:	2300      	movs	r3, #0
 8013c18:	4640      	mov	r0, r8
 8013c1a:	4649      	mov	r1, r9
 8013c1c:	f7ec ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 8013c20:	2800      	cmp	r0, #0
 8013c22:	d1a6      	bne.n	8013b72 <_strtod_l+0x562>
 8013c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c26:	9300      	str	r3, [sp, #0]
 8013c28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013c2a:	4633      	mov	r3, r6
 8013c2c:	465a      	mov	r2, fp
 8013c2e:	4620      	mov	r0, r4
 8013c30:	f002 ffd6 	bl	8016be0 <__s2b>
 8013c34:	9009      	str	r0, [sp, #36]	; 0x24
 8013c36:	2800      	cmp	r0, #0
 8013c38:	f43f af2a 	beq.w	8013a90 <_strtod_l+0x480>
 8013c3c:	9a08      	ldr	r2, [sp, #32]
 8013c3e:	9b05      	ldr	r3, [sp, #20]
 8013c40:	2a00      	cmp	r2, #0
 8013c42:	eba3 0307 	sub.w	r3, r3, r7
 8013c46:	bfa8      	it	ge
 8013c48:	2300      	movge	r3, #0
 8013c4a:	930c      	str	r3, [sp, #48]	; 0x30
 8013c4c:	2500      	movs	r5, #0
 8013c4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013c52:	9312      	str	r3, [sp, #72]	; 0x48
 8013c54:	46ab      	mov	fp, r5
 8013c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c58:	4620      	mov	r0, r4
 8013c5a:	6859      	ldr	r1, [r3, #4]
 8013c5c:	f002 ff18 	bl	8016a90 <_Balloc>
 8013c60:	9005      	str	r0, [sp, #20]
 8013c62:	2800      	cmp	r0, #0
 8013c64:	f43f af18 	beq.w	8013a98 <_strtod_l+0x488>
 8013c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c6a:	691a      	ldr	r2, [r3, #16]
 8013c6c:	3202      	adds	r2, #2
 8013c6e:	f103 010c 	add.w	r1, r3, #12
 8013c72:	0092      	lsls	r2, r2, #2
 8013c74:	300c      	adds	r0, #12
 8013c76:	f001 fca0 	bl	80155ba <memcpy>
 8013c7a:	ec49 8b10 	vmov	d0, r8, r9
 8013c7e:	aa18      	add	r2, sp, #96	; 0x60
 8013c80:	a917      	add	r1, sp, #92	; 0x5c
 8013c82:	4620      	mov	r0, r4
 8013c84:	f003 fae0 	bl	8017248 <__d2b>
 8013c88:	ec49 8b18 	vmov	d8, r8, r9
 8013c8c:	9016      	str	r0, [sp, #88]	; 0x58
 8013c8e:	2800      	cmp	r0, #0
 8013c90:	f43f af02 	beq.w	8013a98 <_strtod_l+0x488>
 8013c94:	2101      	movs	r1, #1
 8013c96:	4620      	mov	r0, r4
 8013c98:	f003 f83a 	bl	8016d10 <__i2b>
 8013c9c:	4683      	mov	fp, r0
 8013c9e:	2800      	cmp	r0, #0
 8013ca0:	f43f aefa 	beq.w	8013a98 <_strtod_l+0x488>
 8013ca4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013ca6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013ca8:	2e00      	cmp	r6, #0
 8013caa:	bfab      	itete	ge
 8013cac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8013cae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8013cb0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013cb2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8013cb6:	bfac      	ite	ge
 8013cb8:	eb06 0a03 	addge.w	sl, r6, r3
 8013cbc:	1b9f      	sublt	r7, r3, r6
 8013cbe:	9b04      	ldr	r3, [sp, #16]
 8013cc0:	1af6      	subs	r6, r6, r3
 8013cc2:	4416      	add	r6, r2
 8013cc4:	4ba0      	ldr	r3, [pc, #640]	; (8013f48 <_strtod_l+0x938>)
 8013cc6:	3e01      	subs	r6, #1
 8013cc8:	429e      	cmp	r6, r3
 8013cca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013cce:	f280 80c4 	bge.w	8013e5a <_strtod_l+0x84a>
 8013cd2:	1b9b      	subs	r3, r3, r6
 8013cd4:	2b1f      	cmp	r3, #31
 8013cd6:	eba2 0203 	sub.w	r2, r2, r3
 8013cda:	f04f 0101 	mov.w	r1, #1
 8013cde:	f300 80b0 	bgt.w	8013e42 <_strtod_l+0x832>
 8013ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8013ce6:	930e      	str	r3, [sp, #56]	; 0x38
 8013ce8:	2300      	movs	r3, #0
 8013cea:	930d      	str	r3, [sp, #52]	; 0x34
 8013cec:	eb0a 0602 	add.w	r6, sl, r2
 8013cf0:	9b04      	ldr	r3, [sp, #16]
 8013cf2:	45b2      	cmp	sl, r6
 8013cf4:	4417      	add	r7, r2
 8013cf6:	441f      	add	r7, r3
 8013cf8:	4653      	mov	r3, sl
 8013cfa:	bfa8      	it	ge
 8013cfc:	4633      	movge	r3, r6
 8013cfe:	42bb      	cmp	r3, r7
 8013d00:	bfa8      	it	ge
 8013d02:	463b      	movge	r3, r7
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	bfc2      	ittt	gt
 8013d08:	1af6      	subgt	r6, r6, r3
 8013d0a:	1aff      	subgt	r7, r7, r3
 8013d0c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8013d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	dd17      	ble.n	8013d46 <_strtod_l+0x736>
 8013d16:	4659      	mov	r1, fp
 8013d18:	461a      	mov	r2, r3
 8013d1a:	4620      	mov	r0, r4
 8013d1c:	f003 f8b8 	bl	8016e90 <__pow5mult>
 8013d20:	4683      	mov	fp, r0
 8013d22:	2800      	cmp	r0, #0
 8013d24:	f43f aeb8 	beq.w	8013a98 <_strtod_l+0x488>
 8013d28:	4601      	mov	r1, r0
 8013d2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013d2c:	4620      	mov	r0, r4
 8013d2e:	f003 f805 	bl	8016d3c <__multiply>
 8013d32:	900b      	str	r0, [sp, #44]	; 0x2c
 8013d34:	2800      	cmp	r0, #0
 8013d36:	f43f aeaf 	beq.w	8013a98 <_strtod_l+0x488>
 8013d3a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	f002 fee7 	bl	8016b10 <_Bfree>
 8013d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d44:	9316      	str	r3, [sp, #88]	; 0x58
 8013d46:	2e00      	cmp	r6, #0
 8013d48:	f300 808c 	bgt.w	8013e64 <_strtod_l+0x854>
 8013d4c:	9b08      	ldr	r3, [sp, #32]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	dd08      	ble.n	8013d64 <_strtod_l+0x754>
 8013d52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013d54:	9905      	ldr	r1, [sp, #20]
 8013d56:	4620      	mov	r0, r4
 8013d58:	f003 f89a 	bl	8016e90 <__pow5mult>
 8013d5c:	9005      	str	r0, [sp, #20]
 8013d5e:	2800      	cmp	r0, #0
 8013d60:	f43f ae9a 	beq.w	8013a98 <_strtod_l+0x488>
 8013d64:	2f00      	cmp	r7, #0
 8013d66:	dd08      	ble.n	8013d7a <_strtod_l+0x76a>
 8013d68:	9905      	ldr	r1, [sp, #20]
 8013d6a:	463a      	mov	r2, r7
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	f003 f8e9 	bl	8016f44 <__lshift>
 8013d72:	9005      	str	r0, [sp, #20]
 8013d74:	2800      	cmp	r0, #0
 8013d76:	f43f ae8f 	beq.w	8013a98 <_strtod_l+0x488>
 8013d7a:	f1ba 0f00 	cmp.w	sl, #0
 8013d7e:	dd08      	ble.n	8013d92 <_strtod_l+0x782>
 8013d80:	4659      	mov	r1, fp
 8013d82:	4652      	mov	r2, sl
 8013d84:	4620      	mov	r0, r4
 8013d86:	f003 f8dd 	bl	8016f44 <__lshift>
 8013d8a:	4683      	mov	fp, r0
 8013d8c:	2800      	cmp	r0, #0
 8013d8e:	f43f ae83 	beq.w	8013a98 <_strtod_l+0x488>
 8013d92:	9a05      	ldr	r2, [sp, #20]
 8013d94:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013d96:	4620      	mov	r0, r4
 8013d98:	f003 f95c 	bl	8017054 <__mdiff>
 8013d9c:	4605      	mov	r5, r0
 8013d9e:	2800      	cmp	r0, #0
 8013da0:	f43f ae7a 	beq.w	8013a98 <_strtod_l+0x488>
 8013da4:	68c3      	ldr	r3, [r0, #12]
 8013da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8013da8:	2300      	movs	r3, #0
 8013daa:	60c3      	str	r3, [r0, #12]
 8013dac:	4659      	mov	r1, fp
 8013dae:	f003 f935 	bl	801701c <__mcmp>
 8013db2:	2800      	cmp	r0, #0
 8013db4:	da60      	bge.n	8013e78 <_strtod_l+0x868>
 8013db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013db8:	ea53 0308 	orrs.w	r3, r3, r8
 8013dbc:	f040 8084 	bne.w	8013ec8 <_strtod_l+0x8b8>
 8013dc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d17f      	bne.n	8013ec8 <_strtod_l+0x8b8>
 8013dc8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013dcc:	0d1b      	lsrs	r3, r3, #20
 8013dce:	051b      	lsls	r3, r3, #20
 8013dd0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013dd4:	d978      	bls.n	8013ec8 <_strtod_l+0x8b8>
 8013dd6:	696b      	ldr	r3, [r5, #20]
 8013dd8:	b913      	cbnz	r3, 8013de0 <_strtod_l+0x7d0>
 8013dda:	692b      	ldr	r3, [r5, #16]
 8013ddc:	2b01      	cmp	r3, #1
 8013dde:	dd73      	ble.n	8013ec8 <_strtod_l+0x8b8>
 8013de0:	4629      	mov	r1, r5
 8013de2:	2201      	movs	r2, #1
 8013de4:	4620      	mov	r0, r4
 8013de6:	f003 f8ad 	bl	8016f44 <__lshift>
 8013dea:	4659      	mov	r1, fp
 8013dec:	4605      	mov	r5, r0
 8013dee:	f003 f915 	bl	801701c <__mcmp>
 8013df2:	2800      	cmp	r0, #0
 8013df4:	dd68      	ble.n	8013ec8 <_strtod_l+0x8b8>
 8013df6:	9904      	ldr	r1, [sp, #16]
 8013df8:	4a54      	ldr	r2, [pc, #336]	; (8013f4c <_strtod_l+0x93c>)
 8013dfa:	464b      	mov	r3, r9
 8013dfc:	2900      	cmp	r1, #0
 8013dfe:	f000 8084 	beq.w	8013f0a <_strtod_l+0x8fa>
 8013e02:	ea02 0109 	and.w	r1, r2, r9
 8013e06:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013e0a:	dc7e      	bgt.n	8013f0a <_strtod_l+0x8fa>
 8013e0c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013e10:	f77f aeb3 	ble.w	8013b7a <_strtod_l+0x56a>
 8013e14:	4b4e      	ldr	r3, [pc, #312]	; (8013f50 <_strtod_l+0x940>)
 8013e16:	4640      	mov	r0, r8
 8013e18:	4649      	mov	r1, r9
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	f7ec fbec 	bl	80005f8 <__aeabi_dmul>
 8013e20:	4b4a      	ldr	r3, [pc, #296]	; (8013f4c <_strtod_l+0x93c>)
 8013e22:	400b      	ands	r3, r1
 8013e24:	4680      	mov	r8, r0
 8013e26:	4689      	mov	r9, r1
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	f47f ae3f 	bne.w	8013aac <_strtod_l+0x49c>
 8013e2e:	2322      	movs	r3, #34	; 0x22
 8013e30:	6023      	str	r3, [r4, #0]
 8013e32:	e63b      	b.n	8013aac <_strtod_l+0x49c>
 8013e34:	f04f 32ff 	mov.w	r2, #4294967295
 8013e38:	fa02 f303 	lsl.w	r3, r2, r3
 8013e3c:	ea03 0808 	and.w	r8, r3, r8
 8013e40:	e6e8      	b.n	8013c14 <_strtod_l+0x604>
 8013e42:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013e46:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013e4a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013e4e:	36e2      	adds	r6, #226	; 0xe2
 8013e50:	fa01 f306 	lsl.w	r3, r1, r6
 8013e54:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8013e58:	e748      	b.n	8013cec <_strtod_l+0x6dc>
 8013e5a:	2100      	movs	r1, #0
 8013e5c:	2301      	movs	r3, #1
 8013e5e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8013e62:	e743      	b.n	8013cec <_strtod_l+0x6dc>
 8013e64:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013e66:	4632      	mov	r2, r6
 8013e68:	4620      	mov	r0, r4
 8013e6a:	f003 f86b 	bl	8016f44 <__lshift>
 8013e6e:	9016      	str	r0, [sp, #88]	; 0x58
 8013e70:	2800      	cmp	r0, #0
 8013e72:	f47f af6b 	bne.w	8013d4c <_strtod_l+0x73c>
 8013e76:	e60f      	b.n	8013a98 <_strtod_l+0x488>
 8013e78:	46ca      	mov	sl, r9
 8013e7a:	d171      	bne.n	8013f60 <_strtod_l+0x950>
 8013e7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013e7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013e82:	b352      	cbz	r2, 8013eda <_strtod_l+0x8ca>
 8013e84:	4a33      	ldr	r2, [pc, #204]	; (8013f54 <_strtod_l+0x944>)
 8013e86:	4293      	cmp	r3, r2
 8013e88:	d12a      	bne.n	8013ee0 <_strtod_l+0x8d0>
 8013e8a:	9b04      	ldr	r3, [sp, #16]
 8013e8c:	4641      	mov	r1, r8
 8013e8e:	b1fb      	cbz	r3, 8013ed0 <_strtod_l+0x8c0>
 8013e90:	4b2e      	ldr	r3, [pc, #184]	; (8013f4c <_strtod_l+0x93c>)
 8013e92:	ea09 0303 	and.w	r3, r9, r3
 8013e96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8013e9e:	d81a      	bhi.n	8013ed6 <_strtod_l+0x8c6>
 8013ea0:	0d1b      	lsrs	r3, r3, #20
 8013ea2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8013eaa:	4299      	cmp	r1, r3
 8013eac:	d118      	bne.n	8013ee0 <_strtod_l+0x8d0>
 8013eae:	4b2a      	ldr	r3, [pc, #168]	; (8013f58 <_strtod_l+0x948>)
 8013eb0:	459a      	cmp	sl, r3
 8013eb2:	d102      	bne.n	8013eba <_strtod_l+0x8aa>
 8013eb4:	3101      	adds	r1, #1
 8013eb6:	f43f adef 	beq.w	8013a98 <_strtod_l+0x488>
 8013eba:	4b24      	ldr	r3, [pc, #144]	; (8013f4c <_strtod_l+0x93c>)
 8013ebc:	ea0a 0303 	and.w	r3, sl, r3
 8013ec0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013ec4:	f04f 0800 	mov.w	r8, #0
 8013ec8:	9b04      	ldr	r3, [sp, #16]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d1a2      	bne.n	8013e14 <_strtod_l+0x804>
 8013ece:	e5ed      	b.n	8013aac <_strtod_l+0x49c>
 8013ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8013ed4:	e7e9      	b.n	8013eaa <_strtod_l+0x89a>
 8013ed6:	4613      	mov	r3, r2
 8013ed8:	e7e7      	b.n	8013eaa <_strtod_l+0x89a>
 8013eda:	ea53 0308 	orrs.w	r3, r3, r8
 8013ede:	d08a      	beq.n	8013df6 <_strtod_l+0x7e6>
 8013ee0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ee2:	b1e3      	cbz	r3, 8013f1e <_strtod_l+0x90e>
 8013ee4:	ea13 0f0a 	tst.w	r3, sl
 8013ee8:	d0ee      	beq.n	8013ec8 <_strtod_l+0x8b8>
 8013eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013eec:	9a04      	ldr	r2, [sp, #16]
 8013eee:	4640      	mov	r0, r8
 8013ef0:	4649      	mov	r1, r9
 8013ef2:	b1c3      	cbz	r3, 8013f26 <_strtod_l+0x916>
 8013ef4:	f7ff fb70 	bl	80135d8 <sulp>
 8013ef8:	4602      	mov	r2, r0
 8013efa:	460b      	mov	r3, r1
 8013efc:	ec51 0b18 	vmov	r0, r1, d8
 8013f00:	f7ec f9c4 	bl	800028c <__adddf3>
 8013f04:	4680      	mov	r8, r0
 8013f06:	4689      	mov	r9, r1
 8013f08:	e7de      	b.n	8013ec8 <_strtod_l+0x8b8>
 8013f0a:	4013      	ands	r3, r2
 8013f0c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013f10:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013f14:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013f18:	f04f 38ff 	mov.w	r8, #4294967295
 8013f1c:	e7d4      	b.n	8013ec8 <_strtod_l+0x8b8>
 8013f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f20:	ea13 0f08 	tst.w	r3, r8
 8013f24:	e7e0      	b.n	8013ee8 <_strtod_l+0x8d8>
 8013f26:	f7ff fb57 	bl	80135d8 <sulp>
 8013f2a:	4602      	mov	r2, r0
 8013f2c:	460b      	mov	r3, r1
 8013f2e:	ec51 0b18 	vmov	r0, r1, d8
 8013f32:	f7ec f9a9 	bl	8000288 <__aeabi_dsub>
 8013f36:	2200      	movs	r2, #0
 8013f38:	2300      	movs	r3, #0
 8013f3a:	4680      	mov	r8, r0
 8013f3c:	4689      	mov	r9, r1
 8013f3e:	f7ec fdc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8013f42:	2800      	cmp	r0, #0
 8013f44:	d0c0      	beq.n	8013ec8 <_strtod_l+0x8b8>
 8013f46:	e618      	b.n	8013b7a <_strtod_l+0x56a>
 8013f48:	fffffc02 	.word	0xfffffc02
 8013f4c:	7ff00000 	.word	0x7ff00000
 8013f50:	39500000 	.word	0x39500000
 8013f54:	000fffff 	.word	0x000fffff
 8013f58:	7fefffff 	.word	0x7fefffff
 8013f5c:	0801b860 	.word	0x0801b860
 8013f60:	4659      	mov	r1, fp
 8013f62:	4628      	mov	r0, r5
 8013f64:	f003 f9ca 	bl	80172fc <__ratio>
 8013f68:	ec57 6b10 	vmov	r6, r7, d0
 8013f6c:	ee10 0a10 	vmov	r0, s0
 8013f70:	2200      	movs	r2, #0
 8013f72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013f76:	4639      	mov	r1, r7
 8013f78:	f7ec fdba 	bl	8000af0 <__aeabi_dcmple>
 8013f7c:	2800      	cmp	r0, #0
 8013f7e:	d071      	beq.n	8014064 <_strtod_l+0xa54>
 8013f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d17c      	bne.n	8014080 <_strtod_l+0xa70>
 8013f86:	f1b8 0f00 	cmp.w	r8, #0
 8013f8a:	d15a      	bne.n	8014042 <_strtod_l+0xa32>
 8013f8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d15d      	bne.n	8014050 <_strtod_l+0xa40>
 8013f94:	4b90      	ldr	r3, [pc, #576]	; (80141d8 <_strtod_l+0xbc8>)
 8013f96:	2200      	movs	r2, #0
 8013f98:	4630      	mov	r0, r6
 8013f9a:	4639      	mov	r1, r7
 8013f9c:	f7ec fd9e 	bl	8000adc <__aeabi_dcmplt>
 8013fa0:	2800      	cmp	r0, #0
 8013fa2:	d15c      	bne.n	801405e <_strtod_l+0xa4e>
 8013fa4:	4630      	mov	r0, r6
 8013fa6:	4639      	mov	r1, r7
 8013fa8:	4b8c      	ldr	r3, [pc, #560]	; (80141dc <_strtod_l+0xbcc>)
 8013faa:	2200      	movs	r2, #0
 8013fac:	f7ec fb24 	bl	80005f8 <__aeabi_dmul>
 8013fb0:	4606      	mov	r6, r0
 8013fb2:	460f      	mov	r7, r1
 8013fb4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013fb8:	9606      	str	r6, [sp, #24]
 8013fba:	9307      	str	r3, [sp, #28]
 8013fbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013fc0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013fc4:	4b86      	ldr	r3, [pc, #536]	; (80141e0 <_strtod_l+0xbd0>)
 8013fc6:	ea0a 0303 	and.w	r3, sl, r3
 8013fca:	930d      	str	r3, [sp, #52]	; 0x34
 8013fcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013fce:	4b85      	ldr	r3, [pc, #532]	; (80141e4 <_strtod_l+0xbd4>)
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	f040 8090 	bne.w	80140f6 <_strtod_l+0xae6>
 8013fd6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8013fda:	ec49 8b10 	vmov	d0, r8, r9
 8013fde:	f003 f8c3 	bl	8017168 <__ulp>
 8013fe2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013fe6:	ec51 0b10 	vmov	r0, r1, d0
 8013fea:	f7ec fb05 	bl	80005f8 <__aeabi_dmul>
 8013fee:	4642      	mov	r2, r8
 8013ff0:	464b      	mov	r3, r9
 8013ff2:	f7ec f94b 	bl	800028c <__adddf3>
 8013ff6:	460b      	mov	r3, r1
 8013ff8:	4979      	ldr	r1, [pc, #484]	; (80141e0 <_strtod_l+0xbd0>)
 8013ffa:	4a7b      	ldr	r2, [pc, #492]	; (80141e8 <_strtod_l+0xbd8>)
 8013ffc:	4019      	ands	r1, r3
 8013ffe:	4291      	cmp	r1, r2
 8014000:	4680      	mov	r8, r0
 8014002:	d944      	bls.n	801408e <_strtod_l+0xa7e>
 8014004:	ee18 2a90 	vmov	r2, s17
 8014008:	4b78      	ldr	r3, [pc, #480]	; (80141ec <_strtod_l+0xbdc>)
 801400a:	429a      	cmp	r2, r3
 801400c:	d104      	bne.n	8014018 <_strtod_l+0xa08>
 801400e:	ee18 3a10 	vmov	r3, s16
 8014012:	3301      	adds	r3, #1
 8014014:	f43f ad40 	beq.w	8013a98 <_strtod_l+0x488>
 8014018:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80141ec <_strtod_l+0xbdc>
 801401c:	f04f 38ff 	mov.w	r8, #4294967295
 8014020:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014022:	4620      	mov	r0, r4
 8014024:	f002 fd74 	bl	8016b10 <_Bfree>
 8014028:	9905      	ldr	r1, [sp, #20]
 801402a:	4620      	mov	r0, r4
 801402c:	f002 fd70 	bl	8016b10 <_Bfree>
 8014030:	4659      	mov	r1, fp
 8014032:	4620      	mov	r0, r4
 8014034:	f002 fd6c 	bl	8016b10 <_Bfree>
 8014038:	4629      	mov	r1, r5
 801403a:	4620      	mov	r0, r4
 801403c:	f002 fd68 	bl	8016b10 <_Bfree>
 8014040:	e609      	b.n	8013c56 <_strtod_l+0x646>
 8014042:	f1b8 0f01 	cmp.w	r8, #1
 8014046:	d103      	bne.n	8014050 <_strtod_l+0xa40>
 8014048:	f1b9 0f00 	cmp.w	r9, #0
 801404c:	f43f ad95 	beq.w	8013b7a <_strtod_l+0x56a>
 8014050:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80141a8 <_strtod_l+0xb98>
 8014054:	4f60      	ldr	r7, [pc, #384]	; (80141d8 <_strtod_l+0xbc8>)
 8014056:	ed8d 7b06 	vstr	d7, [sp, #24]
 801405a:	2600      	movs	r6, #0
 801405c:	e7ae      	b.n	8013fbc <_strtod_l+0x9ac>
 801405e:	4f5f      	ldr	r7, [pc, #380]	; (80141dc <_strtod_l+0xbcc>)
 8014060:	2600      	movs	r6, #0
 8014062:	e7a7      	b.n	8013fb4 <_strtod_l+0x9a4>
 8014064:	4b5d      	ldr	r3, [pc, #372]	; (80141dc <_strtod_l+0xbcc>)
 8014066:	4630      	mov	r0, r6
 8014068:	4639      	mov	r1, r7
 801406a:	2200      	movs	r2, #0
 801406c:	f7ec fac4 	bl	80005f8 <__aeabi_dmul>
 8014070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014072:	4606      	mov	r6, r0
 8014074:	460f      	mov	r7, r1
 8014076:	2b00      	cmp	r3, #0
 8014078:	d09c      	beq.n	8013fb4 <_strtod_l+0x9a4>
 801407a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801407e:	e79d      	b.n	8013fbc <_strtod_l+0x9ac>
 8014080:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80141b0 <_strtod_l+0xba0>
 8014084:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014088:	ec57 6b17 	vmov	r6, r7, d7
 801408c:	e796      	b.n	8013fbc <_strtod_l+0x9ac>
 801408e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8014092:	9b04      	ldr	r3, [sp, #16]
 8014094:	46ca      	mov	sl, r9
 8014096:	2b00      	cmp	r3, #0
 8014098:	d1c2      	bne.n	8014020 <_strtod_l+0xa10>
 801409a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801409e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80140a0:	0d1b      	lsrs	r3, r3, #20
 80140a2:	051b      	lsls	r3, r3, #20
 80140a4:	429a      	cmp	r2, r3
 80140a6:	d1bb      	bne.n	8014020 <_strtod_l+0xa10>
 80140a8:	4630      	mov	r0, r6
 80140aa:	4639      	mov	r1, r7
 80140ac:	f7ec fe04 	bl	8000cb8 <__aeabi_d2lz>
 80140b0:	f7ec fa74 	bl	800059c <__aeabi_l2d>
 80140b4:	4602      	mov	r2, r0
 80140b6:	460b      	mov	r3, r1
 80140b8:	4630      	mov	r0, r6
 80140ba:	4639      	mov	r1, r7
 80140bc:	f7ec f8e4 	bl	8000288 <__aeabi_dsub>
 80140c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80140c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80140c6:	ea43 0308 	orr.w	r3, r3, r8
 80140ca:	4313      	orrs	r3, r2
 80140cc:	4606      	mov	r6, r0
 80140ce:	460f      	mov	r7, r1
 80140d0:	d054      	beq.n	801417c <_strtod_l+0xb6c>
 80140d2:	a339      	add	r3, pc, #228	; (adr r3, 80141b8 <_strtod_l+0xba8>)
 80140d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140d8:	f7ec fd00 	bl	8000adc <__aeabi_dcmplt>
 80140dc:	2800      	cmp	r0, #0
 80140de:	f47f ace5 	bne.w	8013aac <_strtod_l+0x49c>
 80140e2:	a337      	add	r3, pc, #220	; (adr r3, 80141c0 <_strtod_l+0xbb0>)
 80140e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140e8:	4630      	mov	r0, r6
 80140ea:	4639      	mov	r1, r7
 80140ec:	f7ec fd14 	bl	8000b18 <__aeabi_dcmpgt>
 80140f0:	2800      	cmp	r0, #0
 80140f2:	d095      	beq.n	8014020 <_strtod_l+0xa10>
 80140f4:	e4da      	b.n	8013aac <_strtod_l+0x49c>
 80140f6:	9b04      	ldr	r3, [sp, #16]
 80140f8:	b333      	cbz	r3, 8014148 <_strtod_l+0xb38>
 80140fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014100:	d822      	bhi.n	8014148 <_strtod_l+0xb38>
 8014102:	a331      	add	r3, pc, #196	; (adr r3, 80141c8 <_strtod_l+0xbb8>)
 8014104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014108:	4630      	mov	r0, r6
 801410a:	4639      	mov	r1, r7
 801410c:	f7ec fcf0 	bl	8000af0 <__aeabi_dcmple>
 8014110:	b1a0      	cbz	r0, 801413c <_strtod_l+0xb2c>
 8014112:	4639      	mov	r1, r7
 8014114:	4630      	mov	r0, r6
 8014116:	f7ec fd47 	bl	8000ba8 <__aeabi_d2uiz>
 801411a:	2801      	cmp	r0, #1
 801411c:	bf38      	it	cc
 801411e:	2001      	movcc	r0, #1
 8014120:	f7ec f9f0 	bl	8000504 <__aeabi_ui2d>
 8014124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014126:	4606      	mov	r6, r0
 8014128:	460f      	mov	r7, r1
 801412a:	bb23      	cbnz	r3, 8014176 <_strtod_l+0xb66>
 801412c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014130:	9010      	str	r0, [sp, #64]	; 0x40
 8014132:	9311      	str	r3, [sp, #68]	; 0x44
 8014134:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014138:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801413c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801413e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014140:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014144:	1a9b      	subs	r3, r3, r2
 8014146:	930f      	str	r3, [sp, #60]	; 0x3c
 8014148:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801414c:	eeb0 0a48 	vmov.f32	s0, s16
 8014150:	eef0 0a68 	vmov.f32	s1, s17
 8014154:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014158:	f003 f806 	bl	8017168 <__ulp>
 801415c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014160:	ec53 2b10 	vmov	r2, r3, d0
 8014164:	f7ec fa48 	bl	80005f8 <__aeabi_dmul>
 8014168:	ec53 2b18 	vmov	r2, r3, d8
 801416c:	f7ec f88e 	bl	800028c <__adddf3>
 8014170:	4680      	mov	r8, r0
 8014172:	4689      	mov	r9, r1
 8014174:	e78d      	b.n	8014092 <_strtod_l+0xa82>
 8014176:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801417a:	e7db      	b.n	8014134 <_strtod_l+0xb24>
 801417c:	a314      	add	r3, pc, #80	; (adr r3, 80141d0 <_strtod_l+0xbc0>)
 801417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014182:	f7ec fcab 	bl	8000adc <__aeabi_dcmplt>
 8014186:	e7b3      	b.n	80140f0 <_strtod_l+0xae0>
 8014188:	2300      	movs	r3, #0
 801418a:	930a      	str	r3, [sp, #40]	; 0x28
 801418c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801418e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014190:	6013      	str	r3, [r2, #0]
 8014192:	f7ff ba7c 	b.w	801368e <_strtod_l+0x7e>
 8014196:	2a65      	cmp	r2, #101	; 0x65
 8014198:	f43f ab75 	beq.w	8013886 <_strtod_l+0x276>
 801419c:	2a45      	cmp	r2, #69	; 0x45
 801419e:	f43f ab72 	beq.w	8013886 <_strtod_l+0x276>
 80141a2:	2301      	movs	r3, #1
 80141a4:	f7ff bbaa 	b.w	80138fc <_strtod_l+0x2ec>
 80141a8:	00000000 	.word	0x00000000
 80141ac:	bff00000 	.word	0xbff00000
 80141b0:	00000000 	.word	0x00000000
 80141b4:	3ff00000 	.word	0x3ff00000
 80141b8:	94a03595 	.word	0x94a03595
 80141bc:	3fdfffff 	.word	0x3fdfffff
 80141c0:	35afe535 	.word	0x35afe535
 80141c4:	3fe00000 	.word	0x3fe00000
 80141c8:	ffc00000 	.word	0xffc00000
 80141cc:	41dfffff 	.word	0x41dfffff
 80141d0:	94a03595 	.word	0x94a03595
 80141d4:	3fcfffff 	.word	0x3fcfffff
 80141d8:	3ff00000 	.word	0x3ff00000
 80141dc:	3fe00000 	.word	0x3fe00000
 80141e0:	7ff00000 	.word	0x7ff00000
 80141e4:	7fe00000 	.word	0x7fe00000
 80141e8:	7c9fffff 	.word	0x7c9fffff
 80141ec:	7fefffff 	.word	0x7fefffff

080141f0 <_strtod_r>:
 80141f0:	4b01      	ldr	r3, [pc, #4]	; (80141f8 <_strtod_r+0x8>)
 80141f2:	f7ff ba0d 	b.w	8013610 <_strtod_l>
 80141f6:	bf00      	nop
 80141f8:	20000138 	.word	0x20000138

080141fc <strtof>:
 80141fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014200:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80142c4 <strtof+0xc8>
 8014204:	4b2a      	ldr	r3, [pc, #168]	; (80142b0 <strtof+0xb4>)
 8014206:	460a      	mov	r2, r1
 8014208:	ed2d 8b02 	vpush	{d8}
 801420c:	4601      	mov	r1, r0
 801420e:	f8d8 0000 	ldr.w	r0, [r8]
 8014212:	f7ff f9fd 	bl	8013610 <_strtod_l>
 8014216:	ec55 4b10 	vmov	r4, r5, d0
 801421a:	ee10 2a10 	vmov	r2, s0
 801421e:	ee10 0a10 	vmov	r0, s0
 8014222:	462b      	mov	r3, r5
 8014224:	4629      	mov	r1, r5
 8014226:	f7ec fc81 	bl	8000b2c <__aeabi_dcmpun>
 801422a:	b190      	cbz	r0, 8014252 <strtof+0x56>
 801422c:	2d00      	cmp	r5, #0
 801422e:	4821      	ldr	r0, [pc, #132]	; (80142b4 <strtof+0xb8>)
 8014230:	da09      	bge.n	8014246 <strtof+0x4a>
 8014232:	f001 f9d9 	bl	80155e8 <nanf>
 8014236:	eeb1 8a40 	vneg.f32	s16, s0
 801423a:	eeb0 0a48 	vmov.f32	s0, s16
 801423e:	ecbd 8b02 	vpop	{d8}
 8014242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014246:	ecbd 8b02 	vpop	{d8}
 801424a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801424e:	f001 b9cb 	b.w	80155e8 <nanf>
 8014252:	4620      	mov	r0, r4
 8014254:	4629      	mov	r1, r5
 8014256:	f7ec fcc7 	bl	8000be8 <__aeabi_d2f>
 801425a:	ee08 0a10 	vmov	s16, r0
 801425e:	eddf 7a16 	vldr	s15, [pc, #88]	; 80142b8 <strtof+0xbc>
 8014262:	eeb0 7ac8 	vabs.f32	s14, s16
 8014266:	eeb4 7a67 	vcmp.f32	s14, s15
 801426a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801426e:	dd11      	ble.n	8014294 <strtof+0x98>
 8014270:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8014274:	4b11      	ldr	r3, [pc, #68]	; (80142bc <strtof+0xc0>)
 8014276:	f04f 32ff 	mov.w	r2, #4294967295
 801427a:	4620      	mov	r0, r4
 801427c:	4639      	mov	r1, r7
 801427e:	f7ec fc55 	bl	8000b2c <__aeabi_dcmpun>
 8014282:	b980      	cbnz	r0, 80142a6 <strtof+0xaa>
 8014284:	4b0d      	ldr	r3, [pc, #52]	; (80142bc <strtof+0xc0>)
 8014286:	f04f 32ff 	mov.w	r2, #4294967295
 801428a:	4620      	mov	r0, r4
 801428c:	4639      	mov	r1, r7
 801428e:	f7ec fc2f 	bl	8000af0 <__aeabi_dcmple>
 8014292:	b940      	cbnz	r0, 80142a6 <strtof+0xaa>
 8014294:	ee18 3a10 	vmov	r3, s16
 8014298:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801429c:	d1cd      	bne.n	801423a <strtof+0x3e>
 801429e:	4b08      	ldr	r3, [pc, #32]	; (80142c0 <strtof+0xc4>)
 80142a0:	402b      	ands	r3, r5
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d0c9      	beq.n	801423a <strtof+0x3e>
 80142a6:	f8d8 3000 	ldr.w	r3, [r8]
 80142aa:	2222      	movs	r2, #34	; 0x22
 80142ac:	601a      	str	r2, [r3, #0]
 80142ae:	e7c4      	b.n	801423a <strtof+0x3e>
 80142b0:	20000138 	.word	0x20000138
 80142b4:	0801ba76 	.word	0x0801ba76
 80142b8:	7f7fffff 	.word	0x7f7fffff
 80142bc:	7fefffff 	.word	0x7fefffff
 80142c0:	7ff00000 	.word	0x7ff00000
 80142c4:	200002f0 	.word	0x200002f0

080142c8 <_strtol_l.constprop.0>:
 80142c8:	2b01      	cmp	r3, #1
 80142ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142ce:	d001      	beq.n	80142d4 <_strtol_l.constprop.0+0xc>
 80142d0:	2b24      	cmp	r3, #36	; 0x24
 80142d2:	d906      	bls.n	80142e2 <_strtol_l.constprop.0+0x1a>
 80142d4:	f001 f93c 	bl	8015550 <__errno>
 80142d8:	2316      	movs	r3, #22
 80142da:	6003      	str	r3, [r0, #0]
 80142dc:	2000      	movs	r0, #0
 80142de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80143c8 <_strtol_l.constprop.0+0x100>
 80142e6:	460d      	mov	r5, r1
 80142e8:	462e      	mov	r6, r5
 80142ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80142ee:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80142f2:	f017 0708 	ands.w	r7, r7, #8
 80142f6:	d1f7      	bne.n	80142e8 <_strtol_l.constprop.0+0x20>
 80142f8:	2c2d      	cmp	r4, #45	; 0x2d
 80142fa:	d132      	bne.n	8014362 <_strtol_l.constprop.0+0x9a>
 80142fc:	782c      	ldrb	r4, [r5, #0]
 80142fe:	2701      	movs	r7, #1
 8014300:	1cb5      	adds	r5, r6, #2
 8014302:	2b00      	cmp	r3, #0
 8014304:	d05b      	beq.n	80143be <_strtol_l.constprop.0+0xf6>
 8014306:	2b10      	cmp	r3, #16
 8014308:	d109      	bne.n	801431e <_strtol_l.constprop.0+0x56>
 801430a:	2c30      	cmp	r4, #48	; 0x30
 801430c:	d107      	bne.n	801431e <_strtol_l.constprop.0+0x56>
 801430e:	782c      	ldrb	r4, [r5, #0]
 8014310:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014314:	2c58      	cmp	r4, #88	; 0x58
 8014316:	d14d      	bne.n	80143b4 <_strtol_l.constprop.0+0xec>
 8014318:	786c      	ldrb	r4, [r5, #1]
 801431a:	2310      	movs	r3, #16
 801431c:	3502      	adds	r5, #2
 801431e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014322:	f108 38ff 	add.w	r8, r8, #4294967295
 8014326:	f04f 0e00 	mov.w	lr, #0
 801432a:	fbb8 f9f3 	udiv	r9, r8, r3
 801432e:	4676      	mov	r6, lr
 8014330:	fb03 8a19 	mls	sl, r3, r9, r8
 8014334:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014338:	f1bc 0f09 	cmp.w	ip, #9
 801433c:	d816      	bhi.n	801436c <_strtol_l.constprop.0+0xa4>
 801433e:	4664      	mov	r4, ip
 8014340:	42a3      	cmp	r3, r4
 8014342:	dd24      	ble.n	801438e <_strtol_l.constprop.0+0xc6>
 8014344:	f1be 3fff 	cmp.w	lr, #4294967295
 8014348:	d008      	beq.n	801435c <_strtol_l.constprop.0+0x94>
 801434a:	45b1      	cmp	r9, r6
 801434c:	d31c      	bcc.n	8014388 <_strtol_l.constprop.0+0xc0>
 801434e:	d101      	bne.n	8014354 <_strtol_l.constprop.0+0x8c>
 8014350:	45a2      	cmp	sl, r4
 8014352:	db19      	blt.n	8014388 <_strtol_l.constprop.0+0xc0>
 8014354:	fb06 4603 	mla	r6, r6, r3, r4
 8014358:	f04f 0e01 	mov.w	lr, #1
 801435c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014360:	e7e8      	b.n	8014334 <_strtol_l.constprop.0+0x6c>
 8014362:	2c2b      	cmp	r4, #43	; 0x2b
 8014364:	bf04      	itt	eq
 8014366:	782c      	ldrbeq	r4, [r5, #0]
 8014368:	1cb5      	addeq	r5, r6, #2
 801436a:	e7ca      	b.n	8014302 <_strtol_l.constprop.0+0x3a>
 801436c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014370:	f1bc 0f19 	cmp.w	ip, #25
 8014374:	d801      	bhi.n	801437a <_strtol_l.constprop.0+0xb2>
 8014376:	3c37      	subs	r4, #55	; 0x37
 8014378:	e7e2      	b.n	8014340 <_strtol_l.constprop.0+0x78>
 801437a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801437e:	f1bc 0f19 	cmp.w	ip, #25
 8014382:	d804      	bhi.n	801438e <_strtol_l.constprop.0+0xc6>
 8014384:	3c57      	subs	r4, #87	; 0x57
 8014386:	e7db      	b.n	8014340 <_strtol_l.constprop.0+0x78>
 8014388:	f04f 3eff 	mov.w	lr, #4294967295
 801438c:	e7e6      	b.n	801435c <_strtol_l.constprop.0+0x94>
 801438e:	f1be 3fff 	cmp.w	lr, #4294967295
 8014392:	d105      	bne.n	80143a0 <_strtol_l.constprop.0+0xd8>
 8014394:	2322      	movs	r3, #34	; 0x22
 8014396:	6003      	str	r3, [r0, #0]
 8014398:	4646      	mov	r6, r8
 801439a:	b942      	cbnz	r2, 80143ae <_strtol_l.constprop.0+0xe6>
 801439c:	4630      	mov	r0, r6
 801439e:	e79e      	b.n	80142de <_strtol_l.constprop.0+0x16>
 80143a0:	b107      	cbz	r7, 80143a4 <_strtol_l.constprop.0+0xdc>
 80143a2:	4276      	negs	r6, r6
 80143a4:	2a00      	cmp	r2, #0
 80143a6:	d0f9      	beq.n	801439c <_strtol_l.constprop.0+0xd4>
 80143a8:	f1be 0f00 	cmp.w	lr, #0
 80143ac:	d000      	beq.n	80143b0 <_strtol_l.constprop.0+0xe8>
 80143ae:	1e69      	subs	r1, r5, #1
 80143b0:	6011      	str	r1, [r2, #0]
 80143b2:	e7f3      	b.n	801439c <_strtol_l.constprop.0+0xd4>
 80143b4:	2430      	movs	r4, #48	; 0x30
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d1b1      	bne.n	801431e <_strtol_l.constprop.0+0x56>
 80143ba:	2308      	movs	r3, #8
 80143bc:	e7af      	b.n	801431e <_strtol_l.constprop.0+0x56>
 80143be:	2c30      	cmp	r4, #48	; 0x30
 80143c0:	d0a5      	beq.n	801430e <_strtol_l.constprop.0+0x46>
 80143c2:	230a      	movs	r3, #10
 80143c4:	e7ab      	b.n	801431e <_strtol_l.constprop.0+0x56>
 80143c6:	bf00      	nop
 80143c8:	0801b889 	.word	0x0801b889

080143cc <_strtol_r>:
 80143cc:	f7ff bf7c 	b.w	80142c8 <_strtol_l.constprop.0>

080143d0 <strtol>:
 80143d0:	4613      	mov	r3, r2
 80143d2:	460a      	mov	r2, r1
 80143d4:	4601      	mov	r1, r0
 80143d6:	4802      	ldr	r0, [pc, #8]	; (80143e0 <strtol+0x10>)
 80143d8:	6800      	ldr	r0, [r0, #0]
 80143da:	f7ff bf75 	b.w	80142c8 <_strtol_l.constprop.0>
 80143de:	bf00      	nop
 80143e0:	200002f0 	.word	0x200002f0

080143e4 <__cvt>:
 80143e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80143e8:	ec55 4b10 	vmov	r4, r5, d0
 80143ec:	2d00      	cmp	r5, #0
 80143ee:	460e      	mov	r6, r1
 80143f0:	4619      	mov	r1, r3
 80143f2:	462b      	mov	r3, r5
 80143f4:	bfbb      	ittet	lt
 80143f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80143fa:	461d      	movlt	r5, r3
 80143fc:	2300      	movge	r3, #0
 80143fe:	232d      	movlt	r3, #45	; 0x2d
 8014400:	700b      	strb	r3, [r1, #0]
 8014402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014404:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014408:	4691      	mov	r9, r2
 801440a:	f023 0820 	bic.w	r8, r3, #32
 801440e:	bfbc      	itt	lt
 8014410:	4622      	movlt	r2, r4
 8014412:	4614      	movlt	r4, r2
 8014414:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014418:	d005      	beq.n	8014426 <__cvt+0x42>
 801441a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801441e:	d100      	bne.n	8014422 <__cvt+0x3e>
 8014420:	3601      	adds	r6, #1
 8014422:	2102      	movs	r1, #2
 8014424:	e000      	b.n	8014428 <__cvt+0x44>
 8014426:	2103      	movs	r1, #3
 8014428:	ab03      	add	r3, sp, #12
 801442a:	9301      	str	r3, [sp, #4]
 801442c:	ab02      	add	r3, sp, #8
 801442e:	9300      	str	r3, [sp, #0]
 8014430:	ec45 4b10 	vmov	d0, r4, r5
 8014434:	4653      	mov	r3, sl
 8014436:	4632      	mov	r2, r6
 8014438:	f001 f982 	bl	8015740 <_dtoa_r>
 801443c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014440:	4607      	mov	r7, r0
 8014442:	d102      	bne.n	801444a <__cvt+0x66>
 8014444:	f019 0f01 	tst.w	r9, #1
 8014448:	d022      	beq.n	8014490 <__cvt+0xac>
 801444a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801444e:	eb07 0906 	add.w	r9, r7, r6
 8014452:	d110      	bne.n	8014476 <__cvt+0x92>
 8014454:	783b      	ldrb	r3, [r7, #0]
 8014456:	2b30      	cmp	r3, #48	; 0x30
 8014458:	d10a      	bne.n	8014470 <__cvt+0x8c>
 801445a:	2200      	movs	r2, #0
 801445c:	2300      	movs	r3, #0
 801445e:	4620      	mov	r0, r4
 8014460:	4629      	mov	r1, r5
 8014462:	f7ec fb31 	bl	8000ac8 <__aeabi_dcmpeq>
 8014466:	b918      	cbnz	r0, 8014470 <__cvt+0x8c>
 8014468:	f1c6 0601 	rsb	r6, r6, #1
 801446c:	f8ca 6000 	str.w	r6, [sl]
 8014470:	f8da 3000 	ldr.w	r3, [sl]
 8014474:	4499      	add	r9, r3
 8014476:	2200      	movs	r2, #0
 8014478:	2300      	movs	r3, #0
 801447a:	4620      	mov	r0, r4
 801447c:	4629      	mov	r1, r5
 801447e:	f7ec fb23 	bl	8000ac8 <__aeabi_dcmpeq>
 8014482:	b108      	cbz	r0, 8014488 <__cvt+0xa4>
 8014484:	f8cd 900c 	str.w	r9, [sp, #12]
 8014488:	2230      	movs	r2, #48	; 0x30
 801448a:	9b03      	ldr	r3, [sp, #12]
 801448c:	454b      	cmp	r3, r9
 801448e:	d307      	bcc.n	80144a0 <__cvt+0xbc>
 8014490:	9b03      	ldr	r3, [sp, #12]
 8014492:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014494:	1bdb      	subs	r3, r3, r7
 8014496:	4638      	mov	r0, r7
 8014498:	6013      	str	r3, [r2, #0]
 801449a:	b004      	add	sp, #16
 801449c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144a0:	1c59      	adds	r1, r3, #1
 80144a2:	9103      	str	r1, [sp, #12]
 80144a4:	701a      	strb	r2, [r3, #0]
 80144a6:	e7f0      	b.n	801448a <__cvt+0xa6>

080144a8 <__exponent>:
 80144a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80144aa:	4603      	mov	r3, r0
 80144ac:	2900      	cmp	r1, #0
 80144ae:	bfb8      	it	lt
 80144b0:	4249      	neglt	r1, r1
 80144b2:	f803 2b02 	strb.w	r2, [r3], #2
 80144b6:	bfb4      	ite	lt
 80144b8:	222d      	movlt	r2, #45	; 0x2d
 80144ba:	222b      	movge	r2, #43	; 0x2b
 80144bc:	2909      	cmp	r1, #9
 80144be:	7042      	strb	r2, [r0, #1]
 80144c0:	dd2a      	ble.n	8014518 <__exponent+0x70>
 80144c2:	f10d 0207 	add.w	r2, sp, #7
 80144c6:	4617      	mov	r7, r2
 80144c8:	260a      	movs	r6, #10
 80144ca:	4694      	mov	ip, r2
 80144cc:	fb91 f5f6 	sdiv	r5, r1, r6
 80144d0:	fb06 1415 	mls	r4, r6, r5, r1
 80144d4:	3430      	adds	r4, #48	; 0x30
 80144d6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80144da:	460c      	mov	r4, r1
 80144dc:	2c63      	cmp	r4, #99	; 0x63
 80144de:	f102 32ff 	add.w	r2, r2, #4294967295
 80144e2:	4629      	mov	r1, r5
 80144e4:	dcf1      	bgt.n	80144ca <__exponent+0x22>
 80144e6:	3130      	adds	r1, #48	; 0x30
 80144e8:	f1ac 0402 	sub.w	r4, ip, #2
 80144ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 80144f0:	1c41      	adds	r1, r0, #1
 80144f2:	4622      	mov	r2, r4
 80144f4:	42ba      	cmp	r2, r7
 80144f6:	d30a      	bcc.n	801450e <__exponent+0x66>
 80144f8:	f10d 0209 	add.w	r2, sp, #9
 80144fc:	eba2 020c 	sub.w	r2, r2, ip
 8014500:	42bc      	cmp	r4, r7
 8014502:	bf88      	it	hi
 8014504:	2200      	movhi	r2, #0
 8014506:	4413      	add	r3, r2
 8014508:	1a18      	subs	r0, r3, r0
 801450a:	b003      	add	sp, #12
 801450c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801450e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014512:	f801 5f01 	strb.w	r5, [r1, #1]!
 8014516:	e7ed      	b.n	80144f4 <__exponent+0x4c>
 8014518:	2330      	movs	r3, #48	; 0x30
 801451a:	3130      	adds	r1, #48	; 0x30
 801451c:	7083      	strb	r3, [r0, #2]
 801451e:	70c1      	strb	r1, [r0, #3]
 8014520:	1d03      	adds	r3, r0, #4
 8014522:	e7f1      	b.n	8014508 <__exponent+0x60>

08014524 <_printf_float>:
 8014524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014528:	ed2d 8b02 	vpush	{d8}
 801452c:	b08d      	sub	sp, #52	; 0x34
 801452e:	460c      	mov	r4, r1
 8014530:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014534:	4616      	mov	r6, r2
 8014536:	461f      	mov	r7, r3
 8014538:	4605      	mov	r5, r0
 801453a:	f000 ffaf 	bl	801549c <_localeconv_r>
 801453e:	f8d0 a000 	ldr.w	sl, [r0]
 8014542:	4650      	mov	r0, sl
 8014544:	f7eb fe94 	bl	8000270 <strlen>
 8014548:	2300      	movs	r3, #0
 801454a:	930a      	str	r3, [sp, #40]	; 0x28
 801454c:	6823      	ldr	r3, [r4, #0]
 801454e:	9305      	str	r3, [sp, #20]
 8014550:	f8d8 3000 	ldr.w	r3, [r8]
 8014554:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014558:	3307      	adds	r3, #7
 801455a:	f023 0307 	bic.w	r3, r3, #7
 801455e:	f103 0208 	add.w	r2, r3, #8
 8014562:	f8c8 2000 	str.w	r2, [r8]
 8014566:	e9d3 8900 	ldrd	r8, r9, [r3]
 801456a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801456e:	9307      	str	r3, [sp, #28]
 8014570:	f8cd 8018 	str.w	r8, [sp, #24]
 8014574:	ee08 0a10 	vmov	s16, r0
 8014578:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801457c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014580:	4b9e      	ldr	r3, [pc, #632]	; (80147fc <_printf_float+0x2d8>)
 8014582:	f04f 32ff 	mov.w	r2, #4294967295
 8014586:	f7ec fad1 	bl	8000b2c <__aeabi_dcmpun>
 801458a:	bb88      	cbnz	r0, 80145f0 <_printf_float+0xcc>
 801458c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014590:	4b9a      	ldr	r3, [pc, #616]	; (80147fc <_printf_float+0x2d8>)
 8014592:	f04f 32ff 	mov.w	r2, #4294967295
 8014596:	f7ec faab 	bl	8000af0 <__aeabi_dcmple>
 801459a:	bb48      	cbnz	r0, 80145f0 <_printf_float+0xcc>
 801459c:	2200      	movs	r2, #0
 801459e:	2300      	movs	r3, #0
 80145a0:	4640      	mov	r0, r8
 80145a2:	4649      	mov	r1, r9
 80145a4:	f7ec fa9a 	bl	8000adc <__aeabi_dcmplt>
 80145a8:	b110      	cbz	r0, 80145b0 <_printf_float+0x8c>
 80145aa:	232d      	movs	r3, #45	; 0x2d
 80145ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80145b0:	4a93      	ldr	r2, [pc, #588]	; (8014800 <_printf_float+0x2dc>)
 80145b2:	4b94      	ldr	r3, [pc, #592]	; (8014804 <_printf_float+0x2e0>)
 80145b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80145b8:	bf94      	ite	ls
 80145ba:	4690      	movls	r8, r2
 80145bc:	4698      	movhi	r8, r3
 80145be:	2303      	movs	r3, #3
 80145c0:	6123      	str	r3, [r4, #16]
 80145c2:	9b05      	ldr	r3, [sp, #20]
 80145c4:	f023 0304 	bic.w	r3, r3, #4
 80145c8:	6023      	str	r3, [r4, #0]
 80145ca:	f04f 0900 	mov.w	r9, #0
 80145ce:	9700      	str	r7, [sp, #0]
 80145d0:	4633      	mov	r3, r6
 80145d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80145d4:	4621      	mov	r1, r4
 80145d6:	4628      	mov	r0, r5
 80145d8:	f000 f9da 	bl	8014990 <_printf_common>
 80145dc:	3001      	adds	r0, #1
 80145de:	f040 8090 	bne.w	8014702 <_printf_float+0x1de>
 80145e2:	f04f 30ff 	mov.w	r0, #4294967295
 80145e6:	b00d      	add	sp, #52	; 0x34
 80145e8:	ecbd 8b02 	vpop	{d8}
 80145ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145f0:	4642      	mov	r2, r8
 80145f2:	464b      	mov	r3, r9
 80145f4:	4640      	mov	r0, r8
 80145f6:	4649      	mov	r1, r9
 80145f8:	f7ec fa98 	bl	8000b2c <__aeabi_dcmpun>
 80145fc:	b140      	cbz	r0, 8014610 <_printf_float+0xec>
 80145fe:	464b      	mov	r3, r9
 8014600:	2b00      	cmp	r3, #0
 8014602:	bfbc      	itt	lt
 8014604:	232d      	movlt	r3, #45	; 0x2d
 8014606:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801460a:	4a7f      	ldr	r2, [pc, #508]	; (8014808 <_printf_float+0x2e4>)
 801460c:	4b7f      	ldr	r3, [pc, #508]	; (801480c <_printf_float+0x2e8>)
 801460e:	e7d1      	b.n	80145b4 <_printf_float+0x90>
 8014610:	6863      	ldr	r3, [r4, #4]
 8014612:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014616:	9206      	str	r2, [sp, #24]
 8014618:	1c5a      	adds	r2, r3, #1
 801461a:	d13f      	bne.n	801469c <_printf_float+0x178>
 801461c:	2306      	movs	r3, #6
 801461e:	6063      	str	r3, [r4, #4]
 8014620:	9b05      	ldr	r3, [sp, #20]
 8014622:	6861      	ldr	r1, [r4, #4]
 8014624:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014628:	2300      	movs	r3, #0
 801462a:	9303      	str	r3, [sp, #12]
 801462c:	ab0a      	add	r3, sp, #40	; 0x28
 801462e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014632:	ab09      	add	r3, sp, #36	; 0x24
 8014634:	ec49 8b10 	vmov	d0, r8, r9
 8014638:	9300      	str	r3, [sp, #0]
 801463a:	6022      	str	r2, [r4, #0]
 801463c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014640:	4628      	mov	r0, r5
 8014642:	f7ff fecf 	bl	80143e4 <__cvt>
 8014646:	9b06      	ldr	r3, [sp, #24]
 8014648:	9909      	ldr	r1, [sp, #36]	; 0x24
 801464a:	2b47      	cmp	r3, #71	; 0x47
 801464c:	4680      	mov	r8, r0
 801464e:	d108      	bne.n	8014662 <_printf_float+0x13e>
 8014650:	1cc8      	adds	r0, r1, #3
 8014652:	db02      	blt.n	801465a <_printf_float+0x136>
 8014654:	6863      	ldr	r3, [r4, #4]
 8014656:	4299      	cmp	r1, r3
 8014658:	dd41      	ble.n	80146de <_printf_float+0x1ba>
 801465a:	f1ab 0302 	sub.w	r3, fp, #2
 801465e:	fa5f fb83 	uxtb.w	fp, r3
 8014662:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014666:	d820      	bhi.n	80146aa <_printf_float+0x186>
 8014668:	3901      	subs	r1, #1
 801466a:	465a      	mov	r2, fp
 801466c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014670:	9109      	str	r1, [sp, #36]	; 0x24
 8014672:	f7ff ff19 	bl	80144a8 <__exponent>
 8014676:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014678:	1813      	adds	r3, r2, r0
 801467a:	2a01      	cmp	r2, #1
 801467c:	4681      	mov	r9, r0
 801467e:	6123      	str	r3, [r4, #16]
 8014680:	dc02      	bgt.n	8014688 <_printf_float+0x164>
 8014682:	6822      	ldr	r2, [r4, #0]
 8014684:	07d2      	lsls	r2, r2, #31
 8014686:	d501      	bpl.n	801468c <_printf_float+0x168>
 8014688:	3301      	adds	r3, #1
 801468a:	6123      	str	r3, [r4, #16]
 801468c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014690:	2b00      	cmp	r3, #0
 8014692:	d09c      	beq.n	80145ce <_printf_float+0xaa>
 8014694:	232d      	movs	r3, #45	; 0x2d
 8014696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801469a:	e798      	b.n	80145ce <_printf_float+0xaa>
 801469c:	9a06      	ldr	r2, [sp, #24]
 801469e:	2a47      	cmp	r2, #71	; 0x47
 80146a0:	d1be      	bne.n	8014620 <_printf_float+0xfc>
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d1bc      	bne.n	8014620 <_printf_float+0xfc>
 80146a6:	2301      	movs	r3, #1
 80146a8:	e7b9      	b.n	801461e <_printf_float+0xfa>
 80146aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80146ae:	d118      	bne.n	80146e2 <_printf_float+0x1be>
 80146b0:	2900      	cmp	r1, #0
 80146b2:	6863      	ldr	r3, [r4, #4]
 80146b4:	dd0b      	ble.n	80146ce <_printf_float+0x1aa>
 80146b6:	6121      	str	r1, [r4, #16]
 80146b8:	b913      	cbnz	r3, 80146c0 <_printf_float+0x19c>
 80146ba:	6822      	ldr	r2, [r4, #0]
 80146bc:	07d0      	lsls	r0, r2, #31
 80146be:	d502      	bpl.n	80146c6 <_printf_float+0x1a2>
 80146c0:	3301      	adds	r3, #1
 80146c2:	440b      	add	r3, r1
 80146c4:	6123      	str	r3, [r4, #16]
 80146c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80146c8:	f04f 0900 	mov.w	r9, #0
 80146cc:	e7de      	b.n	801468c <_printf_float+0x168>
 80146ce:	b913      	cbnz	r3, 80146d6 <_printf_float+0x1b2>
 80146d0:	6822      	ldr	r2, [r4, #0]
 80146d2:	07d2      	lsls	r2, r2, #31
 80146d4:	d501      	bpl.n	80146da <_printf_float+0x1b6>
 80146d6:	3302      	adds	r3, #2
 80146d8:	e7f4      	b.n	80146c4 <_printf_float+0x1a0>
 80146da:	2301      	movs	r3, #1
 80146dc:	e7f2      	b.n	80146c4 <_printf_float+0x1a0>
 80146de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80146e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146e4:	4299      	cmp	r1, r3
 80146e6:	db05      	blt.n	80146f4 <_printf_float+0x1d0>
 80146e8:	6823      	ldr	r3, [r4, #0]
 80146ea:	6121      	str	r1, [r4, #16]
 80146ec:	07d8      	lsls	r0, r3, #31
 80146ee:	d5ea      	bpl.n	80146c6 <_printf_float+0x1a2>
 80146f0:	1c4b      	adds	r3, r1, #1
 80146f2:	e7e7      	b.n	80146c4 <_printf_float+0x1a0>
 80146f4:	2900      	cmp	r1, #0
 80146f6:	bfd4      	ite	le
 80146f8:	f1c1 0202 	rsble	r2, r1, #2
 80146fc:	2201      	movgt	r2, #1
 80146fe:	4413      	add	r3, r2
 8014700:	e7e0      	b.n	80146c4 <_printf_float+0x1a0>
 8014702:	6823      	ldr	r3, [r4, #0]
 8014704:	055a      	lsls	r2, r3, #21
 8014706:	d407      	bmi.n	8014718 <_printf_float+0x1f4>
 8014708:	6923      	ldr	r3, [r4, #16]
 801470a:	4642      	mov	r2, r8
 801470c:	4631      	mov	r1, r6
 801470e:	4628      	mov	r0, r5
 8014710:	47b8      	blx	r7
 8014712:	3001      	adds	r0, #1
 8014714:	d12c      	bne.n	8014770 <_printf_float+0x24c>
 8014716:	e764      	b.n	80145e2 <_printf_float+0xbe>
 8014718:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801471c:	f240 80e0 	bls.w	80148e0 <_printf_float+0x3bc>
 8014720:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014724:	2200      	movs	r2, #0
 8014726:	2300      	movs	r3, #0
 8014728:	f7ec f9ce 	bl	8000ac8 <__aeabi_dcmpeq>
 801472c:	2800      	cmp	r0, #0
 801472e:	d034      	beq.n	801479a <_printf_float+0x276>
 8014730:	4a37      	ldr	r2, [pc, #220]	; (8014810 <_printf_float+0x2ec>)
 8014732:	2301      	movs	r3, #1
 8014734:	4631      	mov	r1, r6
 8014736:	4628      	mov	r0, r5
 8014738:	47b8      	blx	r7
 801473a:	3001      	adds	r0, #1
 801473c:	f43f af51 	beq.w	80145e2 <_printf_float+0xbe>
 8014740:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014744:	429a      	cmp	r2, r3
 8014746:	db02      	blt.n	801474e <_printf_float+0x22a>
 8014748:	6823      	ldr	r3, [r4, #0]
 801474a:	07d8      	lsls	r0, r3, #31
 801474c:	d510      	bpl.n	8014770 <_printf_float+0x24c>
 801474e:	ee18 3a10 	vmov	r3, s16
 8014752:	4652      	mov	r2, sl
 8014754:	4631      	mov	r1, r6
 8014756:	4628      	mov	r0, r5
 8014758:	47b8      	blx	r7
 801475a:	3001      	adds	r0, #1
 801475c:	f43f af41 	beq.w	80145e2 <_printf_float+0xbe>
 8014760:	f04f 0800 	mov.w	r8, #0
 8014764:	f104 091a 	add.w	r9, r4, #26
 8014768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801476a:	3b01      	subs	r3, #1
 801476c:	4543      	cmp	r3, r8
 801476e:	dc09      	bgt.n	8014784 <_printf_float+0x260>
 8014770:	6823      	ldr	r3, [r4, #0]
 8014772:	079b      	lsls	r3, r3, #30
 8014774:	f100 8107 	bmi.w	8014986 <_printf_float+0x462>
 8014778:	68e0      	ldr	r0, [r4, #12]
 801477a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801477c:	4298      	cmp	r0, r3
 801477e:	bfb8      	it	lt
 8014780:	4618      	movlt	r0, r3
 8014782:	e730      	b.n	80145e6 <_printf_float+0xc2>
 8014784:	2301      	movs	r3, #1
 8014786:	464a      	mov	r2, r9
 8014788:	4631      	mov	r1, r6
 801478a:	4628      	mov	r0, r5
 801478c:	47b8      	blx	r7
 801478e:	3001      	adds	r0, #1
 8014790:	f43f af27 	beq.w	80145e2 <_printf_float+0xbe>
 8014794:	f108 0801 	add.w	r8, r8, #1
 8014798:	e7e6      	b.n	8014768 <_printf_float+0x244>
 801479a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801479c:	2b00      	cmp	r3, #0
 801479e:	dc39      	bgt.n	8014814 <_printf_float+0x2f0>
 80147a0:	4a1b      	ldr	r2, [pc, #108]	; (8014810 <_printf_float+0x2ec>)
 80147a2:	2301      	movs	r3, #1
 80147a4:	4631      	mov	r1, r6
 80147a6:	4628      	mov	r0, r5
 80147a8:	47b8      	blx	r7
 80147aa:	3001      	adds	r0, #1
 80147ac:	f43f af19 	beq.w	80145e2 <_printf_float+0xbe>
 80147b0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80147b4:	4313      	orrs	r3, r2
 80147b6:	d102      	bne.n	80147be <_printf_float+0x29a>
 80147b8:	6823      	ldr	r3, [r4, #0]
 80147ba:	07d9      	lsls	r1, r3, #31
 80147bc:	d5d8      	bpl.n	8014770 <_printf_float+0x24c>
 80147be:	ee18 3a10 	vmov	r3, s16
 80147c2:	4652      	mov	r2, sl
 80147c4:	4631      	mov	r1, r6
 80147c6:	4628      	mov	r0, r5
 80147c8:	47b8      	blx	r7
 80147ca:	3001      	adds	r0, #1
 80147cc:	f43f af09 	beq.w	80145e2 <_printf_float+0xbe>
 80147d0:	f04f 0900 	mov.w	r9, #0
 80147d4:	f104 0a1a 	add.w	sl, r4, #26
 80147d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147da:	425b      	negs	r3, r3
 80147dc:	454b      	cmp	r3, r9
 80147de:	dc01      	bgt.n	80147e4 <_printf_float+0x2c0>
 80147e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147e2:	e792      	b.n	801470a <_printf_float+0x1e6>
 80147e4:	2301      	movs	r3, #1
 80147e6:	4652      	mov	r2, sl
 80147e8:	4631      	mov	r1, r6
 80147ea:	4628      	mov	r0, r5
 80147ec:	47b8      	blx	r7
 80147ee:	3001      	adds	r0, #1
 80147f0:	f43f aef7 	beq.w	80145e2 <_printf_float+0xbe>
 80147f4:	f109 0901 	add.w	r9, r9, #1
 80147f8:	e7ee      	b.n	80147d8 <_printf_float+0x2b4>
 80147fa:	bf00      	nop
 80147fc:	7fefffff 	.word	0x7fefffff
 8014800:	0801b989 	.word	0x0801b989
 8014804:	0801b98d 	.word	0x0801b98d
 8014808:	0801b991 	.word	0x0801b991
 801480c:	0801b995 	.word	0x0801b995
 8014810:	0801b999 	.word	0x0801b999
 8014814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014816:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014818:	429a      	cmp	r2, r3
 801481a:	bfa8      	it	ge
 801481c:	461a      	movge	r2, r3
 801481e:	2a00      	cmp	r2, #0
 8014820:	4691      	mov	r9, r2
 8014822:	dc37      	bgt.n	8014894 <_printf_float+0x370>
 8014824:	f04f 0b00 	mov.w	fp, #0
 8014828:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801482c:	f104 021a 	add.w	r2, r4, #26
 8014830:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014832:	9305      	str	r3, [sp, #20]
 8014834:	eba3 0309 	sub.w	r3, r3, r9
 8014838:	455b      	cmp	r3, fp
 801483a:	dc33      	bgt.n	80148a4 <_printf_float+0x380>
 801483c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014840:	429a      	cmp	r2, r3
 8014842:	db3b      	blt.n	80148bc <_printf_float+0x398>
 8014844:	6823      	ldr	r3, [r4, #0]
 8014846:	07da      	lsls	r2, r3, #31
 8014848:	d438      	bmi.n	80148bc <_printf_float+0x398>
 801484a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801484e:	eba2 0903 	sub.w	r9, r2, r3
 8014852:	9b05      	ldr	r3, [sp, #20]
 8014854:	1ad2      	subs	r2, r2, r3
 8014856:	4591      	cmp	r9, r2
 8014858:	bfa8      	it	ge
 801485a:	4691      	movge	r9, r2
 801485c:	f1b9 0f00 	cmp.w	r9, #0
 8014860:	dc35      	bgt.n	80148ce <_printf_float+0x3aa>
 8014862:	f04f 0800 	mov.w	r8, #0
 8014866:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801486a:	f104 0a1a 	add.w	sl, r4, #26
 801486e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014872:	1a9b      	subs	r3, r3, r2
 8014874:	eba3 0309 	sub.w	r3, r3, r9
 8014878:	4543      	cmp	r3, r8
 801487a:	f77f af79 	ble.w	8014770 <_printf_float+0x24c>
 801487e:	2301      	movs	r3, #1
 8014880:	4652      	mov	r2, sl
 8014882:	4631      	mov	r1, r6
 8014884:	4628      	mov	r0, r5
 8014886:	47b8      	blx	r7
 8014888:	3001      	adds	r0, #1
 801488a:	f43f aeaa 	beq.w	80145e2 <_printf_float+0xbe>
 801488e:	f108 0801 	add.w	r8, r8, #1
 8014892:	e7ec      	b.n	801486e <_printf_float+0x34a>
 8014894:	4613      	mov	r3, r2
 8014896:	4631      	mov	r1, r6
 8014898:	4642      	mov	r2, r8
 801489a:	4628      	mov	r0, r5
 801489c:	47b8      	blx	r7
 801489e:	3001      	adds	r0, #1
 80148a0:	d1c0      	bne.n	8014824 <_printf_float+0x300>
 80148a2:	e69e      	b.n	80145e2 <_printf_float+0xbe>
 80148a4:	2301      	movs	r3, #1
 80148a6:	4631      	mov	r1, r6
 80148a8:	4628      	mov	r0, r5
 80148aa:	9205      	str	r2, [sp, #20]
 80148ac:	47b8      	blx	r7
 80148ae:	3001      	adds	r0, #1
 80148b0:	f43f ae97 	beq.w	80145e2 <_printf_float+0xbe>
 80148b4:	9a05      	ldr	r2, [sp, #20]
 80148b6:	f10b 0b01 	add.w	fp, fp, #1
 80148ba:	e7b9      	b.n	8014830 <_printf_float+0x30c>
 80148bc:	ee18 3a10 	vmov	r3, s16
 80148c0:	4652      	mov	r2, sl
 80148c2:	4631      	mov	r1, r6
 80148c4:	4628      	mov	r0, r5
 80148c6:	47b8      	blx	r7
 80148c8:	3001      	adds	r0, #1
 80148ca:	d1be      	bne.n	801484a <_printf_float+0x326>
 80148cc:	e689      	b.n	80145e2 <_printf_float+0xbe>
 80148ce:	9a05      	ldr	r2, [sp, #20]
 80148d0:	464b      	mov	r3, r9
 80148d2:	4442      	add	r2, r8
 80148d4:	4631      	mov	r1, r6
 80148d6:	4628      	mov	r0, r5
 80148d8:	47b8      	blx	r7
 80148da:	3001      	adds	r0, #1
 80148dc:	d1c1      	bne.n	8014862 <_printf_float+0x33e>
 80148de:	e680      	b.n	80145e2 <_printf_float+0xbe>
 80148e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80148e2:	2a01      	cmp	r2, #1
 80148e4:	dc01      	bgt.n	80148ea <_printf_float+0x3c6>
 80148e6:	07db      	lsls	r3, r3, #31
 80148e8:	d53a      	bpl.n	8014960 <_printf_float+0x43c>
 80148ea:	2301      	movs	r3, #1
 80148ec:	4642      	mov	r2, r8
 80148ee:	4631      	mov	r1, r6
 80148f0:	4628      	mov	r0, r5
 80148f2:	47b8      	blx	r7
 80148f4:	3001      	adds	r0, #1
 80148f6:	f43f ae74 	beq.w	80145e2 <_printf_float+0xbe>
 80148fa:	ee18 3a10 	vmov	r3, s16
 80148fe:	4652      	mov	r2, sl
 8014900:	4631      	mov	r1, r6
 8014902:	4628      	mov	r0, r5
 8014904:	47b8      	blx	r7
 8014906:	3001      	adds	r0, #1
 8014908:	f43f ae6b 	beq.w	80145e2 <_printf_float+0xbe>
 801490c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014910:	2200      	movs	r2, #0
 8014912:	2300      	movs	r3, #0
 8014914:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8014918:	f7ec f8d6 	bl	8000ac8 <__aeabi_dcmpeq>
 801491c:	b9d8      	cbnz	r0, 8014956 <_printf_float+0x432>
 801491e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014922:	f108 0201 	add.w	r2, r8, #1
 8014926:	4631      	mov	r1, r6
 8014928:	4628      	mov	r0, r5
 801492a:	47b8      	blx	r7
 801492c:	3001      	adds	r0, #1
 801492e:	d10e      	bne.n	801494e <_printf_float+0x42a>
 8014930:	e657      	b.n	80145e2 <_printf_float+0xbe>
 8014932:	2301      	movs	r3, #1
 8014934:	4652      	mov	r2, sl
 8014936:	4631      	mov	r1, r6
 8014938:	4628      	mov	r0, r5
 801493a:	47b8      	blx	r7
 801493c:	3001      	adds	r0, #1
 801493e:	f43f ae50 	beq.w	80145e2 <_printf_float+0xbe>
 8014942:	f108 0801 	add.w	r8, r8, #1
 8014946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014948:	3b01      	subs	r3, #1
 801494a:	4543      	cmp	r3, r8
 801494c:	dcf1      	bgt.n	8014932 <_printf_float+0x40e>
 801494e:	464b      	mov	r3, r9
 8014950:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014954:	e6da      	b.n	801470c <_printf_float+0x1e8>
 8014956:	f04f 0800 	mov.w	r8, #0
 801495a:	f104 0a1a 	add.w	sl, r4, #26
 801495e:	e7f2      	b.n	8014946 <_printf_float+0x422>
 8014960:	2301      	movs	r3, #1
 8014962:	4642      	mov	r2, r8
 8014964:	e7df      	b.n	8014926 <_printf_float+0x402>
 8014966:	2301      	movs	r3, #1
 8014968:	464a      	mov	r2, r9
 801496a:	4631      	mov	r1, r6
 801496c:	4628      	mov	r0, r5
 801496e:	47b8      	blx	r7
 8014970:	3001      	adds	r0, #1
 8014972:	f43f ae36 	beq.w	80145e2 <_printf_float+0xbe>
 8014976:	f108 0801 	add.w	r8, r8, #1
 801497a:	68e3      	ldr	r3, [r4, #12]
 801497c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801497e:	1a5b      	subs	r3, r3, r1
 8014980:	4543      	cmp	r3, r8
 8014982:	dcf0      	bgt.n	8014966 <_printf_float+0x442>
 8014984:	e6f8      	b.n	8014778 <_printf_float+0x254>
 8014986:	f04f 0800 	mov.w	r8, #0
 801498a:	f104 0919 	add.w	r9, r4, #25
 801498e:	e7f4      	b.n	801497a <_printf_float+0x456>

08014990 <_printf_common>:
 8014990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014994:	4616      	mov	r6, r2
 8014996:	4699      	mov	r9, r3
 8014998:	688a      	ldr	r2, [r1, #8]
 801499a:	690b      	ldr	r3, [r1, #16]
 801499c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80149a0:	4293      	cmp	r3, r2
 80149a2:	bfb8      	it	lt
 80149a4:	4613      	movlt	r3, r2
 80149a6:	6033      	str	r3, [r6, #0]
 80149a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80149ac:	4607      	mov	r7, r0
 80149ae:	460c      	mov	r4, r1
 80149b0:	b10a      	cbz	r2, 80149b6 <_printf_common+0x26>
 80149b2:	3301      	adds	r3, #1
 80149b4:	6033      	str	r3, [r6, #0]
 80149b6:	6823      	ldr	r3, [r4, #0]
 80149b8:	0699      	lsls	r1, r3, #26
 80149ba:	bf42      	ittt	mi
 80149bc:	6833      	ldrmi	r3, [r6, #0]
 80149be:	3302      	addmi	r3, #2
 80149c0:	6033      	strmi	r3, [r6, #0]
 80149c2:	6825      	ldr	r5, [r4, #0]
 80149c4:	f015 0506 	ands.w	r5, r5, #6
 80149c8:	d106      	bne.n	80149d8 <_printf_common+0x48>
 80149ca:	f104 0a19 	add.w	sl, r4, #25
 80149ce:	68e3      	ldr	r3, [r4, #12]
 80149d0:	6832      	ldr	r2, [r6, #0]
 80149d2:	1a9b      	subs	r3, r3, r2
 80149d4:	42ab      	cmp	r3, r5
 80149d6:	dc26      	bgt.n	8014a26 <_printf_common+0x96>
 80149d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80149dc:	1e13      	subs	r3, r2, #0
 80149de:	6822      	ldr	r2, [r4, #0]
 80149e0:	bf18      	it	ne
 80149e2:	2301      	movne	r3, #1
 80149e4:	0692      	lsls	r2, r2, #26
 80149e6:	d42b      	bmi.n	8014a40 <_printf_common+0xb0>
 80149e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80149ec:	4649      	mov	r1, r9
 80149ee:	4638      	mov	r0, r7
 80149f0:	47c0      	blx	r8
 80149f2:	3001      	adds	r0, #1
 80149f4:	d01e      	beq.n	8014a34 <_printf_common+0xa4>
 80149f6:	6823      	ldr	r3, [r4, #0]
 80149f8:	6922      	ldr	r2, [r4, #16]
 80149fa:	f003 0306 	and.w	r3, r3, #6
 80149fe:	2b04      	cmp	r3, #4
 8014a00:	bf02      	ittt	eq
 8014a02:	68e5      	ldreq	r5, [r4, #12]
 8014a04:	6833      	ldreq	r3, [r6, #0]
 8014a06:	1aed      	subeq	r5, r5, r3
 8014a08:	68a3      	ldr	r3, [r4, #8]
 8014a0a:	bf0c      	ite	eq
 8014a0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014a10:	2500      	movne	r5, #0
 8014a12:	4293      	cmp	r3, r2
 8014a14:	bfc4      	itt	gt
 8014a16:	1a9b      	subgt	r3, r3, r2
 8014a18:	18ed      	addgt	r5, r5, r3
 8014a1a:	2600      	movs	r6, #0
 8014a1c:	341a      	adds	r4, #26
 8014a1e:	42b5      	cmp	r5, r6
 8014a20:	d11a      	bne.n	8014a58 <_printf_common+0xc8>
 8014a22:	2000      	movs	r0, #0
 8014a24:	e008      	b.n	8014a38 <_printf_common+0xa8>
 8014a26:	2301      	movs	r3, #1
 8014a28:	4652      	mov	r2, sl
 8014a2a:	4649      	mov	r1, r9
 8014a2c:	4638      	mov	r0, r7
 8014a2e:	47c0      	blx	r8
 8014a30:	3001      	adds	r0, #1
 8014a32:	d103      	bne.n	8014a3c <_printf_common+0xac>
 8014a34:	f04f 30ff 	mov.w	r0, #4294967295
 8014a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a3c:	3501      	adds	r5, #1
 8014a3e:	e7c6      	b.n	80149ce <_printf_common+0x3e>
 8014a40:	18e1      	adds	r1, r4, r3
 8014a42:	1c5a      	adds	r2, r3, #1
 8014a44:	2030      	movs	r0, #48	; 0x30
 8014a46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014a4a:	4422      	add	r2, r4
 8014a4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014a50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014a54:	3302      	adds	r3, #2
 8014a56:	e7c7      	b.n	80149e8 <_printf_common+0x58>
 8014a58:	2301      	movs	r3, #1
 8014a5a:	4622      	mov	r2, r4
 8014a5c:	4649      	mov	r1, r9
 8014a5e:	4638      	mov	r0, r7
 8014a60:	47c0      	blx	r8
 8014a62:	3001      	adds	r0, #1
 8014a64:	d0e6      	beq.n	8014a34 <_printf_common+0xa4>
 8014a66:	3601      	adds	r6, #1
 8014a68:	e7d9      	b.n	8014a1e <_printf_common+0x8e>
	...

08014a6c <_printf_i>:
 8014a6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014a70:	7e0f      	ldrb	r7, [r1, #24]
 8014a72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014a74:	2f78      	cmp	r7, #120	; 0x78
 8014a76:	4691      	mov	r9, r2
 8014a78:	4680      	mov	r8, r0
 8014a7a:	460c      	mov	r4, r1
 8014a7c:	469a      	mov	sl, r3
 8014a7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014a82:	d807      	bhi.n	8014a94 <_printf_i+0x28>
 8014a84:	2f62      	cmp	r7, #98	; 0x62
 8014a86:	d80a      	bhi.n	8014a9e <_printf_i+0x32>
 8014a88:	2f00      	cmp	r7, #0
 8014a8a:	f000 80d4 	beq.w	8014c36 <_printf_i+0x1ca>
 8014a8e:	2f58      	cmp	r7, #88	; 0x58
 8014a90:	f000 80c0 	beq.w	8014c14 <_printf_i+0x1a8>
 8014a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014a98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014a9c:	e03a      	b.n	8014b14 <_printf_i+0xa8>
 8014a9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014aa2:	2b15      	cmp	r3, #21
 8014aa4:	d8f6      	bhi.n	8014a94 <_printf_i+0x28>
 8014aa6:	a101      	add	r1, pc, #4	; (adr r1, 8014aac <_printf_i+0x40>)
 8014aa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014aac:	08014b05 	.word	0x08014b05
 8014ab0:	08014b19 	.word	0x08014b19
 8014ab4:	08014a95 	.word	0x08014a95
 8014ab8:	08014a95 	.word	0x08014a95
 8014abc:	08014a95 	.word	0x08014a95
 8014ac0:	08014a95 	.word	0x08014a95
 8014ac4:	08014b19 	.word	0x08014b19
 8014ac8:	08014a95 	.word	0x08014a95
 8014acc:	08014a95 	.word	0x08014a95
 8014ad0:	08014a95 	.word	0x08014a95
 8014ad4:	08014a95 	.word	0x08014a95
 8014ad8:	08014c1d 	.word	0x08014c1d
 8014adc:	08014b45 	.word	0x08014b45
 8014ae0:	08014bd7 	.word	0x08014bd7
 8014ae4:	08014a95 	.word	0x08014a95
 8014ae8:	08014a95 	.word	0x08014a95
 8014aec:	08014c3f 	.word	0x08014c3f
 8014af0:	08014a95 	.word	0x08014a95
 8014af4:	08014b45 	.word	0x08014b45
 8014af8:	08014a95 	.word	0x08014a95
 8014afc:	08014a95 	.word	0x08014a95
 8014b00:	08014bdf 	.word	0x08014bdf
 8014b04:	682b      	ldr	r3, [r5, #0]
 8014b06:	1d1a      	adds	r2, r3, #4
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	602a      	str	r2, [r5, #0]
 8014b0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014b10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014b14:	2301      	movs	r3, #1
 8014b16:	e09f      	b.n	8014c58 <_printf_i+0x1ec>
 8014b18:	6820      	ldr	r0, [r4, #0]
 8014b1a:	682b      	ldr	r3, [r5, #0]
 8014b1c:	0607      	lsls	r7, r0, #24
 8014b1e:	f103 0104 	add.w	r1, r3, #4
 8014b22:	6029      	str	r1, [r5, #0]
 8014b24:	d501      	bpl.n	8014b2a <_printf_i+0xbe>
 8014b26:	681e      	ldr	r6, [r3, #0]
 8014b28:	e003      	b.n	8014b32 <_printf_i+0xc6>
 8014b2a:	0646      	lsls	r6, r0, #25
 8014b2c:	d5fb      	bpl.n	8014b26 <_printf_i+0xba>
 8014b2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014b32:	2e00      	cmp	r6, #0
 8014b34:	da03      	bge.n	8014b3e <_printf_i+0xd2>
 8014b36:	232d      	movs	r3, #45	; 0x2d
 8014b38:	4276      	negs	r6, r6
 8014b3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b3e:	485a      	ldr	r0, [pc, #360]	; (8014ca8 <_printf_i+0x23c>)
 8014b40:	230a      	movs	r3, #10
 8014b42:	e012      	b.n	8014b6a <_printf_i+0xfe>
 8014b44:	682b      	ldr	r3, [r5, #0]
 8014b46:	6820      	ldr	r0, [r4, #0]
 8014b48:	1d19      	adds	r1, r3, #4
 8014b4a:	6029      	str	r1, [r5, #0]
 8014b4c:	0605      	lsls	r5, r0, #24
 8014b4e:	d501      	bpl.n	8014b54 <_printf_i+0xe8>
 8014b50:	681e      	ldr	r6, [r3, #0]
 8014b52:	e002      	b.n	8014b5a <_printf_i+0xee>
 8014b54:	0641      	lsls	r1, r0, #25
 8014b56:	d5fb      	bpl.n	8014b50 <_printf_i+0xe4>
 8014b58:	881e      	ldrh	r6, [r3, #0]
 8014b5a:	4853      	ldr	r0, [pc, #332]	; (8014ca8 <_printf_i+0x23c>)
 8014b5c:	2f6f      	cmp	r7, #111	; 0x6f
 8014b5e:	bf0c      	ite	eq
 8014b60:	2308      	moveq	r3, #8
 8014b62:	230a      	movne	r3, #10
 8014b64:	2100      	movs	r1, #0
 8014b66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014b6a:	6865      	ldr	r5, [r4, #4]
 8014b6c:	60a5      	str	r5, [r4, #8]
 8014b6e:	2d00      	cmp	r5, #0
 8014b70:	bfa2      	ittt	ge
 8014b72:	6821      	ldrge	r1, [r4, #0]
 8014b74:	f021 0104 	bicge.w	r1, r1, #4
 8014b78:	6021      	strge	r1, [r4, #0]
 8014b7a:	b90e      	cbnz	r6, 8014b80 <_printf_i+0x114>
 8014b7c:	2d00      	cmp	r5, #0
 8014b7e:	d04b      	beq.n	8014c18 <_printf_i+0x1ac>
 8014b80:	4615      	mov	r5, r2
 8014b82:	fbb6 f1f3 	udiv	r1, r6, r3
 8014b86:	fb03 6711 	mls	r7, r3, r1, r6
 8014b8a:	5dc7      	ldrb	r7, [r0, r7]
 8014b8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014b90:	4637      	mov	r7, r6
 8014b92:	42bb      	cmp	r3, r7
 8014b94:	460e      	mov	r6, r1
 8014b96:	d9f4      	bls.n	8014b82 <_printf_i+0x116>
 8014b98:	2b08      	cmp	r3, #8
 8014b9a:	d10b      	bne.n	8014bb4 <_printf_i+0x148>
 8014b9c:	6823      	ldr	r3, [r4, #0]
 8014b9e:	07de      	lsls	r6, r3, #31
 8014ba0:	d508      	bpl.n	8014bb4 <_printf_i+0x148>
 8014ba2:	6923      	ldr	r3, [r4, #16]
 8014ba4:	6861      	ldr	r1, [r4, #4]
 8014ba6:	4299      	cmp	r1, r3
 8014ba8:	bfde      	ittt	le
 8014baa:	2330      	movle	r3, #48	; 0x30
 8014bac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014bb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014bb4:	1b52      	subs	r2, r2, r5
 8014bb6:	6122      	str	r2, [r4, #16]
 8014bb8:	f8cd a000 	str.w	sl, [sp]
 8014bbc:	464b      	mov	r3, r9
 8014bbe:	aa03      	add	r2, sp, #12
 8014bc0:	4621      	mov	r1, r4
 8014bc2:	4640      	mov	r0, r8
 8014bc4:	f7ff fee4 	bl	8014990 <_printf_common>
 8014bc8:	3001      	adds	r0, #1
 8014bca:	d14a      	bne.n	8014c62 <_printf_i+0x1f6>
 8014bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8014bd0:	b004      	add	sp, #16
 8014bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bd6:	6823      	ldr	r3, [r4, #0]
 8014bd8:	f043 0320 	orr.w	r3, r3, #32
 8014bdc:	6023      	str	r3, [r4, #0]
 8014bde:	4833      	ldr	r0, [pc, #204]	; (8014cac <_printf_i+0x240>)
 8014be0:	2778      	movs	r7, #120	; 0x78
 8014be2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014be6:	6823      	ldr	r3, [r4, #0]
 8014be8:	6829      	ldr	r1, [r5, #0]
 8014bea:	061f      	lsls	r7, r3, #24
 8014bec:	f851 6b04 	ldr.w	r6, [r1], #4
 8014bf0:	d402      	bmi.n	8014bf8 <_printf_i+0x18c>
 8014bf2:	065f      	lsls	r7, r3, #25
 8014bf4:	bf48      	it	mi
 8014bf6:	b2b6      	uxthmi	r6, r6
 8014bf8:	07df      	lsls	r7, r3, #31
 8014bfa:	bf48      	it	mi
 8014bfc:	f043 0320 	orrmi.w	r3, r3, #32
 8014c00:	6029      	str	r1, [r5, #0]
 8014c02:	bf48      	it	mi
 8014c04:	6023      	strmi	r3, [r4, #0]
 8014c06:	b91e      	cbnz	r6, 8014c10 <_printf_i+0x1a4>
 8014c08:	6823      	ldr	r3, [r4, #0]
 8014c0a:	f023 0320 	bic.w	r3, r3, #32
 8014c0e:	6023      	str	r3, [r4, #0]
 8014c10:	2310      	movs	r3, #16
 8014c12:	e7a7      	b.n	8014b64 <_printf_i+0xf8>
 8014c14:	4824      	ldr	r0, [pc, #144]	; (8014ca8 <_printf_i+0x23c>)
 8014c16:	e7e4      	b.n	8014be2 <_printf_i+0x176>
 8014c18:	4615      	mov	r5, r2
 8014c1a:	e7bd      	b.n	8014b98 <_printf_i+0x12c>
 8014c1c:	682b      	ldr	r3, [r5, #0]
 8014c1e:	6826      	ldr	r6, [r4, #0]
 8014c20:	6961      	ldr	r1, [r4, #20]
 8014c22:	1d18      	adds	r0, r3, #4
 8014c24:	6028      	str	r0, [r5, #0]
 8014c26:	0635      	lsls	r5, r6, #24
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	d501      	bpl.n	8014c30 <_printf_i+0x1c4>
 8014c2c:	6019      	str	r1, [r3, #0]
 8014c2e:	e002      	b.n	8014c36 <_printf_i+0x1ca>
 8014c30:	0670      	lsls	r0, r6, #25
 8014c32:	d5fb      	bpl.n	8014c2c <_printf_i+0x1c0>
 8014c34:	8019      	strh	r1, [r3, #0]
 8014c36:	2300      	movs	r3, #0
 8014c38:	6123      	str	r3, [r4, #16]
 8014c3a:	4615      	mov	r5, r2
 8014c3c:	e7bc      	b.n	8014bb8 <_printf_i+0x14c>
 8014c3e:	682b      	ldr	r3, [r5, #0]
 8014c40:	1d1a      	adds	r2, r3, #4
 8014c42:	602a      	str	r2, [r5, #0]
 8014c44:	681d      	ldr	r5, [r3, #0]
 8014c46:	6862      	ldr	r2, [r4, #4]
 8014c48:	2100      	movs	r1, #0
 8014c4a:	4628      	mov	r0, r5
 8014c4c:	f7eb fac0 	bl	80001d0 <memchr>
 8014c50:	b108      	cbz	r0, 8014c56 <_printf_i+0x1ea>
 8014c52:	1b40      	subs	r0, r0, r5
 8014c54:	6060      	str	r0, [r4, #4]
 8014c56:	6863      	ldr	r3, [r4, #4]
 8014c58:	6123      	str	r3, [r4, #16]
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014c60:	e7aa      	b.n	8014bb8 <_printf_i+0x14c>
 8014c62:	6923      	ldr	r3, [r4, #16]
 8014c64:	462a      	mov	r2, r5
 8014c66:	4649      	mov	r1, r9
 8014c68:	4640      	mov	r0, r8
 8014c6a:	47d0      	blx	sl
 8014c6c:	3001      	adds	r0, #1
 8014c6e:	d0ad      	beq.n	8014bcc <_printf_i+0x160>
 8014c70:	6823      	ldr	r3, [r4, #0]
 8014c72:	079b      	lsls	r3, r3, #30
 8014c74:	d413      	bmi.n	8014c9e <_printf_i+0x232>
 8014c76:	68e0      	ldr	r0, [r4, #12]
 8014c78:	9b03      	ldr	r3, [sp, #12]
 8014c7a:	4298      	cmp	r0, r3
 8014c7c:	bfb8      	it	lt
 8014c7e:	4618      	movlt	r0, r3
 8014c80:	e7a6      	b.n	8014bd0 <_printf_i+0x164>
 8014c82:	2301      	movs	r3, #1
 8014c84:	4632      	mov	r2, r6
 8014c86:	4649      	mov	r1, r9
 8014c88:	4640      	mov	r0, r8
 8014c8a:	47d0      	blx	sl
 8014c8c:	3001      	adds	r0, #1
 8014c8e:	d09d      	beq.n	8014bcc <_printf_i+0x160>
 8014c90:	3501      	adds	r5, #1
 8014c92:	68e3      	ldr	r3, [r4, #12]
 8014c94:	9903      	ldr	r1, [sp, #12]
 8014c96:	1a5b      	subs	r3, r3, r1
 8014c98:	42ab      	cmp	r3, r5
 8014c9a:	dcf2      	bgt.n	8014c82 <_printf_i+0x216>
 8014c9c:	e7eb      	b.n	8014c76 <_printf_i+0x20a>
 8014c9e:	2500      	movs	r5, #0
 8014ca0:	f104 0619 	add.w	r6, r4, #25
 8014ca4:	e7f5      	b.n	8014c92 <_printf_i+0x226>
 8014ca6:	bf00      	nop
 8014ca8:	0801b99b 	.word	0x0801b99b
 8014cac:	0801b9ac 	.word	0x0801b9ac

08014cb0 <_scanf_float>:
 8014cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cb4:	b087      	sub	sp, #28
 8014cb6:	4617      	mov	r7, r2
 8014cb8:	9303      	str	r3, [sp, #12]
 8014cba:	688b      	ldr	r3, [r1, #8]
 8014cbc:	1e5a      	subs	r2, r3, #1
 8014cbe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014cc2:	bf83      	ittte	hi
 8014cc4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014cc8:	195b      	addhi	r3, r3, r5
 8014cca:	9302      	strhi	r3, [sp, #8]
 8014ccc:	2300      	movls	r3, #0
 8014cce:	bf86      	itte	hi
 8014cd0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014cd4:	608b      	strhi	r3, [r1, #8]
 8014cd6:	9302      	strls	r3, [sp, #8]
 8014cd8:	680b      	ldr	r3, [r1, #0]
 8014cda:	468b      	mov	fp, r1
 8014cdc:	2500      	movs	r5, #0
 8014cde:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014ce2:	f84b 3b1c 	str.w	r3, [fp], #28
 8014ce6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014cea:	4680      	mov	r8, r0
 8014cec:	460c      	mov	r4, r1
 8014cee:	465e      	mov	r6, fp
 8014cf0:	46aa      	mov	sl, r5
 8014cf2:	46a9      	mov	r9, r5
 8014cf4:	9501      	str	r5, [sp, #4]
 8014cf6:	68a2      	ldr	r2, [r4, #8]
 8014cf8:	b152      	cbz	r2, 8014d10 <_scanf_float+0x60>
 8014cfa:	683b      	ldr	r3, [r7, #0]
 8014cfc:	781b      	ldrb	r3, [r3, #0]
 8014cfe:	2b4e      	cmp	r3, #78	; 0x4e
 8014d00:	d864      	bhi.n	8014dcc <_scanf_float+0x11c>
 8014d02:	2b40      	cmp	r3, #64	; 0x40
 8014d04:	d83c      	bhi.n	8014d80 <_scanf_float+0xd0>
 8014d06:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8014d0a:	b2c8      	uxtb	r0, r1
 8014d0c:	280e      	cmp	r0, #14
 8014d0e:	d93a      	bls.n	8014d86 <_scanf_float+0xd6>
 8014d10:	f1b9 0f00 	cmp.w	r9, #0
 8014d14:	d003      	beq.n	8014d1e <_scanf_float+0x6e>
 8014d16:	6823      	ldr	r3, [r4, #0]
 8014d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014d1c:	6023      	str	r3, [r4, #0]
 8014d1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014d22:	f1ba 0f01 	cmp.w	sl, #1
 8014d26:	f200 8113 	bhi.w	8014f50 <_scanf_float+0x2a0>
 8014d2a:	455e      	cmp	r6, fp
 8014d2c:	f200 8105 	bhi.w	8014f3a <_scanf_float+0x28a>
 8014d30:	2501      	movs	r5, #1
 8014d32:	4628      	mov	r0, r5
 8014d34:	b007      	add	sp, #28
 8014d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d3a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8014d3e:	2a0d      	cmp	r2, #13
 8014d40:	d8e6      	bhi.n	8014d10 <_scanf_float+0x60>
 8014d42:	a101      	add	r1, pc, #4	; (adr r1, 8014d48 <_scanf_float+0x98>)
 8014d44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014d48:	08014e87 	.word	0x08014e87
 8014d4c:	08014d11 	.word	0x08014d11
 8014d50:	08014d11 	.word	0x08014d11
 8014d54:	08014d11 	.word	0x08014d11
 8014d58:	08014ee7 	.word	0x08014ee7
 8014d5c:	08014ebf 	.word	0x08014ebf
 8014d60:	08014d11 	.word	0x08014d11
 8014d64:	08014d11 	.word	0x08014d11
 8014d68:	08014e95 	.word	0x08014e95
 8014d6c:	08014d11 	.word	0x08014d11
 8014d70:	08014d11 	.word	0x08014d11
 8014d74:	08014d11 	.word	0x08014d11
 8014d78:	08014d11 	.word	0x08014d11
 8014d7c:	08014e4d 	.word	0x08014e4d
 8014d80:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8014d84:	e7db      	b.n	8014d3e <_scanf_float+0x8e>
 8014d86:	290e      	cmp	r1, #14
 8014d88:	d8c2      	bhi.n	8014d10 <_scanf_float+0x60>
 8014d8a:	a001      	add	r0, pc, #4	; (adr r0, 8014d90 <_scanf_float+0xe0>)
 8014d8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014d90:	08014e3f 	.word	0x08014e3f
 8014d94:	08014d11 	.word	0x08014d11
 8014d98:	08014e3f 	.word	0x08014e3f
 8014d9c:	08014ed3 	.word	0x08014ed3
 8014da0:	08014d11 	.word	0x08014d11
 8014da4:	08014ded 	.word	0x08014ded
 8014da8:	08014e29 	.word	0x08014e29
 8014dac:	08014e29 	.word	0x08014e29
 8014db0:	08014e29 	.word	0x08014e29
 8014db4:	08014e29 	.word	0x08014e29
 8014db8:	08014e29 	.word	0x08014e29
 8014dbc:	08014e29 	.word	0x08014e29
 8014dc0:	08014e29 	.word	0x08014e29
 8014dc4:	08014e29 	.word	0x08014e29
 8014dc8:	08014e29 	.word	0x08014e29
 8014dcc:	2b6e      	cmp	r3, #110	; 0x6e
 8014dce:	d809      	bhi.n	8014de4 <_scanf_float+0x134>
 8014dd0:	2b60      	cmp	r3, #96	; 0x60
 8014dd2:	d8b2      	bhi.n	8014d3a <_scanf_float+0x8a>
 8014dd4:	2b54      	cmp	r3, #84	; 0x54
 8014dd6:	d077      	beq.n	8014ec8 <_scanf_float+0x218>
 8014dd8:	2b59      	cmp	r3, #89	; 0x59
 8014dda:	d199      	bne.n	8014d10 <_scanf_float+0x60>
 8014ddc:	2d07      	cmp	r5, #7
 8014dde:	d197      	bne.n	8014d10 <_scanf_float+0x60>
 8014de0:	2508      	movs	r5, #8
 8014de2:	e029      	b.n	8014e38 <_scanf_float+0x188>
 8014de4:	2b74      	cmp	r3, #116	; 0x74
 8014de6:	d06f      	beq.n	8014ec8 <_scanf_float+0x218>
 8014de8:	2b79      	cmp	r3, #121	; 0x79
 8014dea:	e7f6      	b.n	8014dda <_scanf_float+0x12a>
 8014dec:	6821      	ldr	r1, [r4, #0]
 8014dee:	05c8      	lsls	r0, r1, #23
 8014df0:	d51a      	bpl.n	8014e28 <_scanf_float+0x178>
 8014df2:	9b02      	ldr	r3, [sp, #8]
 8014df4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014df8:	6021      	str	r1, [r4, #0]
 8014dfa:	f109 0901 	add.w	r9, r9, #1
 8014dfe:	b11b      	cbz	r3, 8014e08 <_scanf_float+0x158>
 8014e00:	3b01      	subs	r3, #1
 8014e02:	3201      	adds	r2, #1
 8014e04:	9302      	str	r3, [sp, #8]
 8014e06:	60a2      	str	r2, [r4, #8]
 8014e08:	68a3      	ldr	r3, [r4, #8]
 8014e0a:	3b01      	subs	r3, #1
 8014e0c:	60a3      	str	r3, [r4, #8]
 8014e0e:	6923      	ldr	r3, [r4, #16]
 8014e10:	3301      	adds	r3, #1
 8014e12:	6123      	str	r3, [r4, #16]
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	3b01      	subs	r3, #1
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	607b      	str	r3, [r7, #4]
 8014e1c:	f340 8084 	ble.w	8014f28 <_scanf_float+0x278>
 8014e20:	683b      	ldr	r3, [r7, #0]
 8014e22:	3301      	adds	r3, #1
 8014e24:	603b      	str	r3, [r7, #0]
 8014e26:	e766      	b.n	8014cf6 <_scanf_float+0x46>
 8014e28:	eb1a 0f05 	cmn.w	sl, r5
 8014e2c:	f47f af70 	bne.w	8014d10 <_scanf_float+0x60>
 8014e30:	6822      	ldr	r2, [r4, #0]
 8014e32:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8014e36:	6022      	str	r2, [r4, #0]
 8014e38:	f806 3b01 	strb.w	r3, [r6], #1
 8014e3c:	e7e4      	b.n	8014e08 <_scanf_float+0x158>
 8014e3e:	6822      	ldr	r2, [r4, #0]
 8014e40:	0610      	lsls	r0, r2, #24
 8014e42:	f57f af65 	bpl.w	8014d10 <_scanf_float+0x60>
 8014e46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014e4a:	e7f4      	b.n	8014e36 <_scanf_float+0x186>
 8014e4c:	f1ba 0f00 	cmp.w	sl, #0
 8014e50:	d10e      	bne.n	8014e70 <_scanf_float+0x1c0>
 8014e52:	f1b9 0f00 	cmp.w	r9, #0
 8014e56:	d10e      	bne.n	8014e76 <_scanf_float+0x1c6>
 8014e58:	6822      	ldr	r2, [r4, #0]
 8014e5a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014e5e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014e62:	d108      	bne.n	8014e76 <_scanf_float+0x1c6>
 8014e64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014e68:	6022      	str	r2, [r4, #0]
 8014e6a:	f04f 0a01 	mov.w	sl, #1
 8014e6e:	e7e3      	b.n	8014e38 <_scanf_float+0x188>
 8014e70:	f1ba 0f02 	cmp.w	sl, #2
 8014e74:	d055      	beq.n	8014f22 <_scanf_float+0x272>
 8014e76:	2d01      	cmp	r5, #1
 8014e78:	d002      	beq.n	8014e80 <_scanf_float+0x1d0>
 8014e7a:	2d04      	cmp	r5, #4
 8014e7c:	f47f af48 	bne.w	8014d10 <_scanf_float+0x60>
 8014e80:	3501      	adds	r5, #1
 8014e82:	b2ed      	uxtb	r5, r5
 8014e84:	e7d8      	b.n	8014e38 <_scanf_float+0x188>
 8014e86:	f1ba 0f01 	cmp.w	sl, #1
 8014e8a:	f47f af41 	bne.w	8014d10 <_scanf_float+0x60>
 8014e8e:	f04f 0a02 	mov.w	sl, #2
 8014e92:	e7d1      	b.n	8014e38 <_scanf_float+0x188>
 8014e94:	b97d      	cbnz	r5, 8014eb6 <_scanf_float+0x206>
 8014e96:	f1b9 0f00 	cmp.w	r9, #0
 8014e9a:	f47f af3c 	bne.w	8014d16 <_scanf_float+0x66>
 8014e9e:	6822      	ldr	r2, [r4, #0]
 8014ea0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014ea4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014ea8:	f47f af39 	bne.w	8014d1e <_scanf_float+0x6e>
 8014eac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014eb0:	6022      	str	r2, [r4, #0]
 8014eb2:	2501      	movs	r5, #1
 8014eb4:	e7c0      	b.n	8014e38 <_scanf_float+0x188>
 8014eb6:	2d03      	cmp	r5, #3
 8014eb8:	d0e2      	beq.n	8014e80 <_scanf_float+0x1d0>
 8014eba:	2d05      	cmp	r5, #5
 8014ebc:	e7de      	b.n	8014e7c <_scanf_float+0x1cc>
 8014ebe:	2d02      	cmp	r5, #2
 8014ec0:	f47f af26 	bne.w	8014d10 <_scanf_float+0x60>
 8014ec4:	2503      	movs	r5, #3
 8014ec6:	e7b7      	b.n	8014e38 <_scanf_float+0x188>
 8014ec8:	2d06      	cmp	r5, #6
 8014eca:	f47f af21 	bne.w	8014d10 <_scanf_float+0x60>
 8014ece:	2507      	movs	r5, #7
 8014ed0:	e7b2      	b.n	8014e38 <_scanf_float+0x188>
 8014ed2:	6822      	ldr	r2, [r4, #0]
 8014ed4:	0591      	lsls	r1, r2, #22
 8014ed6:	f57f af1b 	bpl.w	8014d10 <_scanf_float+0x60>
 8014eda:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8014ede:	6022      	str	r2, [r4, #0]
 8014ee0:	f8cd 9004 	str.w	r9, [sp, #4]
 8014ee4:	e7a8      	b.n	8014e38 <_scanf_float+0x188>
 8014ee6:	6822      	ldr	r2, [r4, #0]
 8014ee8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8014eec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8014ef0:	d006      	beq.n	8014f00 <_scanf_float+0x250>
 8014ef2:	0550      	lsls	r0, r2, #21
 8014ef4:	f57f af0c 	bpl.w	8014d10 <_scanf_float+0x60>
 8014ef8:	f1b9 0f00 	cmp.w	r9, #0
 8014efc:	f43f af0f 	beq.w	8014d1e <_scanf_float+0x6e>
 8014f00:	0591      	lsls	r1, r2, #22
 8014f02:	bf58      	it	pl
 8014f04:	9901      	ldrpl	r1, [sp, #4]
 8014f06:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014f0a:	bf58      	it	pl
 8014f0c:	eba9 0101 	subpl.w	r1, r9, r1
 8014f10:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8014f14:	bf58      	it	pl
 8014f16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014f1a:	6022      	str	r2, [r4, #0]
 8014f1c:	f04f 0900 	mov.w	r9, #0
 8014f20:	e78a      	b.n	8014e38 <_scanf_float+0x188>
 8014f22:	f04f 0a03 	mov.w	sl, #3
 8014f26:	e787      	b.n	8014e38 <_scanf_float+0x188>
 8014f28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014f2c:	4639      	mov	r1, r7
 8014f2e:	4640      	mov	r0, r8
 8014f30:	4798      	blx	r3
 8014f32:	2800      	cmp	r0, #0
 8014f34:	f43f aedf 	beq.w	8014cf6 <_scanf_float+0x46>
 8014f38:	e6ea      	b.n	8014d10 <_scanf_float+0x60>
 8014f3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014f3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014f42:	463a      	mov	r2, r7
 8014f44:	4640      	mov	r0, r8
 8014f46:	4798      	blx	r3
 8014f48:	6923      	ldr	r3, [r4, #16]
 8014f4a:	3b01      	subs	r3, #1
 8014f4c:	6123      	str	r3, [r4, #16]
 8014f4e:	e6ec      	b.n	8014d2a <_scanf_float+0x7a>
 8014f50:	1e6b      	subs	r3, r5, #1
 8014f52:	2b06      	cmp	r3, #6
 8014f54:	d825      	bhi.n	8014fa2 <_scanf_float+0x2f2>
 8014f56:	2d02      	cmp	r5, #2
 8014f58:	d836      	bhi.n	8014fc8 <_scanf_float+0x318>
 8014f5a:	455e      	cmp	r6, fp
 8014f5c:	f67f aee8 	bls.w	8014d30 <_scanf_float+0x80>
 8014f60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014f64:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014f68:	463a      	mov	r2, r7
 8014f6a:	4640      	mov	r0, r8
 8014f6c:	4798      	blx	r3
 8014f6e:	6923      	ldr	r3, [r4, #16]
 8014f70:	3b01      	subs	r3, #1
 8014f72:	6123      	str	r3, [r4, #16]
 8014f74:	e7f1      	b.n	8014f5a <_scanf_float+0x2aa>
 8014f76:	9802      	ldr	r0, [sp, #8]
 8014f78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014f7c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8014f80:	9002      	str	r0, [sp, #8]
 8014f82:	463a      	mov	r2, r7
 8014f84:	4640      	mov	r0, r8
 8014f86:	4798      	blx	r3
 8014f88:	6923      	ldr	r3, [r4, #16]
 8014f8a:	3b01      	subs	r3, #1
 8014f8c:	6123      	str	r3, [r4, #16]
 8014f8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014f92:	fa5f fa8a 	uxtb.w	sl, sl
 8014f96:	f1ba 0f02 	cmp.w	sl, #2
 8014f9a:	d1ec      	bne.n	8014f76 <_scanf_float+0x2c6>
 8014f9c:	3d03      	subs	r5, #3
 8014f9e:	b2ed      	uxtb	r5, r5
 8014fa0:	1b76      	subs	r6, r6, r5
 8014fa2:	6823      	ldr	r3, [r4, #0]
 8014fa4:	05da      	lsls	r2, r3, #23
 8014fa6:	d52f      	bpl.n	8015008 <_scanf_float+0x358>
 8014fa8:	055b      	lsls	r3, r3, #21
 8014faa:	d510      	bpl.n	8014fce <_scanf_float+0x31e>
 8014fac:	455e      	cmp	r6, fp
 8014fae:	f67f aebf 	bls.w	8014d30 <_scanf_float+0x80>
 8014fb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014fb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014fba:	463a      	mov	r2, r7
 8014fbc:	4640      	mov	r0, r8
 8014fbe:	4798      	blx	r3
 8014fc0:	6923      	ldr	r3, [r4, #16]
 8014fc2:	3b01      	subs	r3, #1
 8014fc4:	6123      	str	r3, [r4, #16]
 8014fc6:	e7f1      	b.n	8014fac <_scanf_float+0x2fc>
 8014fc8:	46aa      	mov	sl, r5
 8014fca:	9602      	str	r6, [sp, #8]
 8014fcc:	e7df      	b.n	8014f8e <_scanf_float+0x2de>
 8014fce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014fd2:	6923      	ldr	r3, [r4, #16]
 8014fd4:	2965      	cmp	r1, #101	; 0x65
 8014fd6:	f103 33ff 	add.w	r3, r3, #4294967295
 8014fda:	f106 35ff 	add.w	r5, r6, #4294967295
 8014fde:	6123      	str	r3, [r4, #16]
 8014fe0:	d00c      	beq.n	8014ffc <_scanf_float+0x34c>
 8014fe2:	2945      	cmp	r1, #69	; 0x45
 8014fe4:	d00a      	beq.n	8014ffc <_scanf_float+0x34c>
 8014fe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014fea:	463a      	mov	r2, r7
 8014fec:	4640      	mov	r0, r8
 8014fee:	4798      	blx	r3
 8014ff0:	6923      	ldr	r3, [r4, #16]
 8014ff2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014ff6:	3b01      	subs	r3, #1
 8014ff8:	1eb5      	subs	r5, r6, #2
 8014ffa:	6123      	str	r3, [r4, #16]
 8014ffc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015000:	463a      	mov	r2, r7
 8015002:	4640      	mov	r0, r8
 8015004:	4798      	blx	r3
 8015006:	462e      	mov	r6, r5
 8015008:	6825      	ldr	r5, [r4, #0]
 801500a:	f015 0510 	ands.w	r5, r5, #16
 801500e:	d158      	bne.n	80150c2 <_scanf_float+0x412>
 8015010:	7035      	strb	r5, [r6, #0]
 8015012:	6823      	ldr	r3, [r4, #0]
 8015014:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801501c:	d11c      	bne.n	8015058 <_scanf_float+0x3a8>
 801501e:	9b01      	ldr	r3, [sp, #4]
 8015020:	454b      	cmp	r3, r9
 8015022:	eba3 0209 	sub.w	r2, r3, r9
 8015026:	d124      	bne.n	8015072 <_scanf_float+0x3c2>
 8015028:	2200      	movs	r2, #0
 801502a:	4659      	mov	r1, fp
 801502c:	4640      	mov	r0, r8
 801502e:	f7ff f8df 	bl	80141f0 <_strtod_r>
 8015032:	9b03      	ldr	r3, [sp, #12]
 8015034:	6821      	ldr	r1, [r4, #0]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	f011 0f02 	tst.w	r1, #2
 801503c:	ec57 6b10 	vmov	r6, r7, d0
 8015040:	f103 0204 	add.w	r2, r3, #4
 8015044:	d020      	beq.n	8015088 <_scanf_float+0x3d8>
 8015046:	9903      	ldr	r1, [sp, #12]
 8015048:	600a      	str	r2, [r1, #0]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	e9c3 6700 	strd	r6, r7, [r3]
 8015050:	68e3      	ldr	r3, [r4, #12]
 8015052:	3301      	adds	r3, #1
 8015054:	60e3      	str	r3, [r4, #12]
 8015056:	e66c      	b.n	8014d32 <_scanf_float+0x82>
 8015058:	9b04      	ldr	r3, [sp, #16]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d0e4      	beq.n	8015028 <_scanf_float+0x378>
 801505e:	9905      	ldr	r1, [sp, #20]
 8015060:	230a      	movs	r3, #10
 8015062:	462a      	mov	r2, r5
 8015064:	3101      	adds	r1, #1
 8015066:	4640      	mov	r0, r8
 8015068:	f7ff f9b0 	bl	80143cc <_strtol_r>
 801506c:	9b04      	ldr	r3, [sp, #16]
 801506e:	9e05      	ldr	r6, [sp, #20]
 8015070:	1ac2      	subs	r2, r0, r3
 8015072:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015076:	429e      	cmp	r6, r3
 8015078:	bf28      	it	cs
 801507a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801507e:	4912      	ldr	r1, [pc, #72]	; (80150c8 <_scanf_float+0x418>)
 8015080:	4630      	mov	r0, r6
 8015082:	f000 f91b 	bl	80152bc <siprintf>
 8015086:	e7cf      	b.n	8015028 <_scanf_float+0x378>
 8015088:	f011 0f04 	tst.w	r1, #4
 801508c:	9903      	ldr	r1, [sp, #12]
 801508e:	600a      	str	r2, [r1, #0]
 8015090:	d1db      	bne.n	801504a <_scanf_float+0x39a>
 8015092:	f8d3 8000 	ldr.w	r8, [r3]
 8015096:	ee10 2a10 	vmov	r2, s0
 801509a:	ee10 0a10 	vmov	r0, s0
 801509e:	463b      	mov	r3, r7
 80150a0:	4639      	mov	r1, r7
 80150a2:	f7eb fd43 	bl	8000b2c <__aeabi_dcmpun>
 80150a6:	b128      	cbz	r0, 80150b4 <_scanf_float+0x404>
 80150a8:	4808      	ldr	r0, [pc, #32]	; (80150cc <_scanf_float+0x41c>)
 80150aa:	f000 fa9d 	bl	80155e8 <nanf>
 80150ae:	ed88 0a00 	vstr	s0, [r8]
 80150b2:	e7cd      	b.n	8015050 <_scanf_float+0x3a0>
 80150b4:	4630      	mov	r0, r6
 80150b6:	4639      	mov	r1, r7
 80150b8:	f7eb fd96 	bl	8000be8 <__aeabi_d2f>
 80150bc:	f8c8 0000 	str.w	r0, [r8]
 80150c0:	e7c6      	b.n	8015050 <_scanf_float+0x3a0>
 80150c2:	2500      	movs	r5, #0
 80150c4:	e635      	b.n	8014d32 <_scanf_float+0x82>
 80150c6:	bf00      	nop
 80150c8:	0801b9bd 	.word	0x0801b9bd
 80150cc:	0801ba76 	.word	0x0801ba76

080150d0 <std>:
 80150d0:	2300      	movs	r3, #0
 80150d2:	b510      	push	{r4, lr}
 80150d4:	4604      	mov	r4, r0
 80150d6:	e9c0 3300 	strd	r3, r3, [r0]
 80150da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80150de:	6083      	str	r3, [r0, #8]
 80150e0:	8181      	strh	r1, [r0, #12]
 80150e2:	6643      	str	r3, [r0, #100]	; 0x64
 80150e4:	81c2      	strh	r2, [r0, #14]
 80150e6:	6183      	str	r3, [r0, #24]
 80150e8:	4619      	mov	r1, r3
 80150ea:	2208      	movs	r2, #8
 80150ec:	305c      	adds	r0, #92	; 0x5c
 80150ee:	f000 f948 	bl	8015382 <memset>
 80150f2:	4b0d      	ldr	r3, [pc, #52]	; (8015128 <std+0x58>)
 80150f4:	6263      	str	r3, [r4, #36]	; 0x24
 80150f6:	4b0d      	ldr	r3, [pc, #52]	; (801512c <std+0x5c>)
 80150f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80150fa:	4b0d      	ldr	r3, [pc, #52]	; (8015130 <std+0x60>)
 80150fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80150fe:	4b0d      	ldr	r3, [pc, #52]	; (8015134 <std+0x64>)
 8015100:	6323      	str	r3, [r4, #48]	; 0x30
 8015102:	4b0d      	ldr	r3, [pc, #52]	; (8015138 <std+0x68>)
 8015104:	6224      	str	r4, [r4, #32]
 8015106:	429c      	cmp	r4, r3
 8015108:	d006      	beq.n	8015118 <std+0x48>
 801510a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801510e:	4294      	cmp	r4, r2
 8015110:	d002      	beq.n	8015118 <std+0x48>
 8015112:	33d0      	adds	r3, #208	; 0xd0
 8015114:	429c      	cmp	r4, r3
 8015116:	d105      	bne.n	8015124 <std+0x54>
 8015118:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801511c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015120:	f000 ba40 	b.w	80155a4 <__retarget_lock_init_recursive>
 8015124:	bd10      	pop	{r4, pc}
 8015126:	bf00      	nop
 8015128:	080152fd 	.word	0x080152fd
 801512c:	0801531f 	.word	0x0801531f
 8015130:	08015357 	.word	0x08015357
 8015134:	0801537b 	.word	0x0801537b
 8015138:	200022c0 	.word	0x200022c0

0801513c <stdio_exit_handler>:
 801513c:	4a02      	ldr	r2, [pc, #8]	; (8015148 <stdio_exit_handler+0xc>)
 801513e:	4903      	ldr	r1, [pc, #12]	; (801514c <stdio_exit_handler+0x10>)
 8015140:	4803      	ldr	r0, [pc, #12]	; (8015150 <stdio_exit_handler+0x14>)
 8015142:	f000 b869 	b.w	8015218 <_fwalk_sglue>
 8015146:	bf00      	nop
 8015148:	2000012c 	.word	0x2000012c
 801514c:	080177c1 	.word	0x080177c1
 8015150:	200002a4 	.word	0x200002a4

08015154 <cleanup_stdio>:
 8015154:	6841      	ldr	r1, [r0, #4]
 8015156:	4b0c      	ldr	r3, [pc, #48]	; (8015188 <cleanup_stdio+0x34>)
 8015158:	4299      	cmp	r1, r3
 801515a:	b510      	push	{r4, lr}
 801515c:	4604      	mov	r4, r0
 801515e:	d001      	beq.n	8015164 <cleanup_stdio+0x10>
 8015160:	f002 fb2e 	bl	80177c0 <_fflush_r>
 8015164:	68a1      	ldr	r1, [r4, #8]
 8015166:	4b09      	ldr	r3, [pc, #36]	; (801518c <cleanup_stdio+0x38>)
 8015168:	4299      	cmp	r1, r3
 801516a:	d002      	beq.n	8015172 <cleanup_stdio+0x1e>
 801516c:	4620      	mov	r0, r4
 801516e:	f002 fb27 	bl	80177c0 <_fflush_r>
 8015172:	68e1      	ldr	r1, [r4, #12]
 8015174:	4b06      	ldr	r3, [pc, #24]	; (8015190 <cleanup_stdio+0x3c>)
 8015176:	4299      	cmp	r1, r3
 8015178:	d004      	beq.n	8015184 <cleanup_stdio+0x30>
 801517a:	4620      	mov	r0, r4
 801517c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015180:	f002 bb1e 	b.w	80177c0 <_fflush_r>
 8015184:	bd10      	pop	{r4, pc}
 8015186:	bf00      	nop
 8015188:	200022c0 	.word	0x200022c0
 801518c:	20002328 	.word	0x20002328
 8015190:	20002390 	.word	0x20002390

08015194 <global_stdio_init.part.0>:
 8015194:	b510      	push	{r4, lr}
 8015196:	4b0b      	ldr	r3, [pc, #44]	; (80151c4 <global_stdio_init.part.0+0x30>)
 8015198:	4c0b      	ldr	r4, [pc, #44]	; (80151c8 <global_stdio_init.part.0+0x34>)
 801519a:	4a0c      	ldr	r2, [pc, #48]	; (80151cc <global_stdio_init.part.0+0x38>)
 801519c:	601a      	str	r2, [r3, #0]
 801519e:	4620      	mov	r0, r4
 80151a0:	2200      	movs	r2, #0
 80151a2:	2104      	movs	r1, #4
 80151a4:	f7ff ff94 	bl	80150d0 <std>
 80151a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80151ac:	2201      	movs	r2, #1
 80151ae:	2109      	movs	r1, #9
 80151b0:	f7ff ff8e 	bl	80150d0 <std>
 80151b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80151b8:	2202      	movs	r2, #2
 80151ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151be:	2112      	movs	r1, #18
 80151c0:	f7ff bf86 	b.w	80150d0 <std>
 80151c4:	200023f8 	.word	0x200023f8
 80151c8:	200022c0 	.word	0x200022c0
 80151cc:	0801513d 	.word	0x0801513d

080151d0 <__sfp_lock_acquire>:
 80151d0:	4801      	ldr	r0, [pc, #4]	; (80151d8 <__sfp_lock_acquire+0x8>)
 80151d2:	f000 b9e8 	b.w	80155a6 <__retarget_lock_acquire_recursive>
 80151d6:	bf00      	nop
 80151d8:	20002401 	.word	0x20002401

080151dc <__sfp_lock_release>:
 80151dc:	4801      	ldr	r0, [pc, #4]	; (80151e4 <__sfp_lock_release+0x8>)
 80151de:	f000 b9e3 	b.w	80155a8 <__retarget_lock_release_recursive>
 80151e2:	bf00      	nop
 80151e4:	20002401 	.word	0x20002401

080151e8 <__sinit>:
 80151e8:	b510      	push	{r4, lr}
 80151ea:	4604      	mov	r4, r0
 80151ec:	f7ff fff0 	bl	80151d0 <__sfp_lock_acquire>
 80151f0:	6a23      	ldr	r3, [r4, #32]
 80151f2:	b11b      	cbz	r3, 80151fc <__sinit+0x14>
 80151f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151f8:	f7ff bff0 	b.w	80151dc <__sfp_lock_release>
 80151fc:	4b04      	ldr	r3, [pc, #16]	; (8015210 <__sinit+0x28>)
 80151fe:	6223      	str	r3, [r4, #32]
 8015200:	4b04      	ldr	r3, [pc, #16]	; (8015214 <__sinit+0x2c>)
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d1f5      	bne.n	80151f4 <__sinit+0xc>
 8015208:	f7ff ffc4 	bl	8015194 <global_stdio_init.part.0>
 801520c:	e7f2      	b.n	80151f4 <__sinit+0xc>
 801520e:	bf00      	nop
 8015210:	08015155 	.word	0x08015155
 8015214:	200023f8 	.word	0x200023f8

08015218 <_fwalk_sglue>:
 8015218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801521c:	4607      	mov	r7, r0
 801521e:	4688      	mov	r8, r1
 8015220:	4614      	mov	r4, r2
 8015222:	2600      	movs	r6, #0
 8015224:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015228:	f1b9 0901 	subs.w	r9, r9, #1
 801522c:	d505      	bpl.n	801523a <_fwalk_sglue+0x22>
 801522e:	6824      	ldr	r4, [r4, #0]
 8015230:	2c00      	cmp	r4, #0
 8015232:	d1f7      	bne.n	8015224 <_fwalk_sglue+0xc>
 8015234:	4630      	mov	r0, r6
 8015236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801523a:	89ab      	ldrh	r3, [r5, #12]
 801523c:	2b01      	cmp	r3, #1
 801523e:	d907      	bls.n	8015250 <_fwalk_sglue+0x38>
 8015240:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015244:	3301      	adds	r3, #1
 8015246:	d003      	beq.n	8015250 <_fwalk_sglue+0x38>
 8015248:	4629      	mov	r1, r5
 801524a:	4638      	mov	r0, r7
 801524c:	47c0      	blx	r8
 801524e:	4306      	orrs	r6, r0
 8015250:	3568      	adds	r5, #104	; 0x68
 8015252:	e7e9      	b.n	8015228 <_fwalk_sglue+0x10>

08015254 <sniprintf>:
 8015254:	b40c      	push	{r2, r3}
 8015256:	b530      	push	{r4, r5, lr}
 8015258:	4b17      	ldr	r3, [pc, #92]	; (80152b8 <sniprintf+0x64>)
 801525a:	1e0c      	subs	r4, r1, #0
 801525c:	681d      	ldr	r5, [r3, #0]
 801525e:	b09d      	sub	sp, #116	; 0x74
 8015260:	da08      	bge.n	8015274 <sniprintf+0x20>
 8015262:	238b      	movs	r3, #139	; 0x8b
 8015264:	602b      	str	r3, [r5, #0]
 8015266:	f04f 30ff 	mov.w	r0, #4294967295
 801526a:	b01d      	add	sp, #116	; 0x74
 801526c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015270:	b002      	add	sp, #8
 8015272:	4770      	bx	lr
 8015274:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015278:	f8ad 3014 	strh.w	r3, [sp, #20]
 801527c:	bf14      	ite	ne
 801527e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015282:	4623      	moveq	r3, r4
 8015284:	9304      	str	r3, [sp, #16]
 8015286:	9307      	str	r3, [sp, #28]
 8015288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801528c:	9002      	str	r0, [sp, #8]
 801528e:	9006      	str	r0, [sp, #24]
 8015290:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015294:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015296:	ab21      	add	r3, sp, #132	; 0x84
 8015298:	a902      	add	r1, sp, #8
 801529a:	4628      	mov	r0, r5
 801529c:	9301      	str	r3, [sp, #4]
 801529e:	f002 f90b 	bl	80174b8 <_svfiprintf_r>
 80152a2:	1c43      	adds	r3, r0, #1
 80152a4:	bfbc      	itt	lt
 80152a6:	238b      	movlt	r3, #139	; 0x8b
 80152a8:	602b      	strlt	r3, [r5, #0]
 80152aa:	2c00      	cmp	r4, #0
 80152ac:	d0dd      	beq.n	801526a <sniprintf+0x16>
 80152ae:	9b02      	ldr	r3, [sp, #8]
 80152b0:	2200      	movs	r2, #0
 80152b2:	701a      	strb	r2, [r3, #0]
 80152b4:	e7d9      	b.n	801526a <sniprintf+0x16>
 80152b6:	bf00      	nop
 80152b8:	200002f0 	.word	0x200002f0

080152bc <siprintf>:
 80152bc:	b40e      	push	{r1, r2, r3}
 80152be:	b500      	push	{lr}
 80152c0:	b09c      	sub	sp, #112	; 0x70
 80152c2:	ab1d      	add	r3, sp, #116	; 0x74
 80152c4:	9002      	str	r0, [sp, #8]
 80152c6:	9006      	str	r0, [sp, #24]
 80152c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80152cc:	4809      	ldr	r0, [pc, #36]	; (80152f4 <siprintf+0x38>)
 80152ce:	9107      	str	r1, [sp, #28]
 80152d0:	9104      	str	r1, [sp, #16]
 80152d2:	4909      	ldr	r1, [pc, #36]	; (80152f8 <siprintf+0x3c>)
 80152d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80152d8:	9105      	str	r1, [sp, #20]
 80152da:	6800      	ldr	r0, [r0, #0]
 80152dc:	9301      	str	r3, [sp, #4]
 80152de:	a902      	add	r1, sp, #8
 80152e0:	f002 f8ea 	bl	80174b8 <_svfiprintf_r>
 80152e4:	9b02      	ldr	r3, [sp, #8]
 80152e6:	2200      	movs	r2, #0
 80152e8:	701a      	strb	r2, [r3, #0]
 80152ea:	b01c      	add	sp, #112	; 0x70
 80152ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80152f0:	b003      	add	sp, #12
 80152f2:	4770      	bx	lr
 80152f4:	200002f0 	.word	0x200002f0
 80152f8:	ffff0208 	.word	0xffff0208

080152fc <__sread>:
 80152fc:	b510      	push	{r4, lr}
 80152fe:	460c      	mov	r4, r1
 8015300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015304:	f000 f8f0 	bl	80154e8 <_read_r>
 8015308:	2800      	cmp	r0, #0
 801530a:	bfab      	itete	ge
 801530c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801530e:	89a3      	ldrhlt	r3, [r4, #12]
 8015310:	181b      	addge	r3, r3, r0
 8015312:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015316:	bfac      	ite	ge
 8015318:	6563      	strge	r3, [r4, #84]	; 0x54
 801531a:	81a3      	strhlt	r3, [r4, #12]
 801531c:	bd10      	pop	{r4, pc}

0801531e <__swrite>:
 801531e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015322:	461f      	mov	r7, r3
 8015324:	898b      	ldrh	r3, [r1, #12]
 8015326:	05db      	lsls	r3, r3, #23
 8015328:	4605      	mov	r5, r0
 801532a:	460c      	mov	r4, r1
 801532c:	4616      	mov	r6, r2
 801532e:	d505      	bpl.n	801533c <__swrite+0x1e>
 8015330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015334:	2302      	movs	r3, #2
 8015336:	2200      	movs	r2, #0
 8015338:	f000 f8c4 	bl	80154c4 <_lseek_r>
 801533c:	89a3      	ldrh	r3, [r4, #12]
 801533e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015346:	81a3      	strh	r3, [r4, #12]
 8015348:	4632      	mov	r2, r6
 801534a:	463b      	mov	r3, r7
 801534c:	4628      	mov	r0, r5
 801534e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015352:	f000 b8eb 	b.w	801552c <_write_r>

08015356 <__sseek>:
 8015356:	b510      	push	{r4, lr}
 8015358:	460c      	mov	r4, r1
 801535a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801535e:	f000 f8b1 	bl	80154c4 <_lseek_r>
 8015362:	1c43      	adds	r3, r0, #1
 8015364:	89a3      	ldrh	r3, [r4, #12]
 8015366:	bf15      	itete	ne
 8015368:	6560      	strne	r0, [r4, #84]	; 0x54
 801536a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801536e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015372:	81a3      	strheq	r3, [r4, #12]
 8015374:	bf18      	it	ne
 8015376:	81a3      	strhne	r3, [r4, #12]
 8015378:	bd10      	pop	{r4, pc}

0801537a <__sclose>:
 801537a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801537e:	f000 b891 	b.w	80154a4 <_close_r>

08015382 <memset>:
 8015382:	4402      	add	r2, r0
 8015384:	4603      	mov	r3, r0
 8015386:	4293      	cmp	r3, r2
 8015388:	d100      	bne.n	801538c <memset+0xa>
 801538a:	4770      	bx	lr
 801538c:	f803 1b01 	strb.w	r1, [r3], #1
 8015390:	e7f9      	b.n	8015386 <memset+0x4>

08015392 <strncmp>:
 8015392:	b510      	push	{r4, lr}
 8015394:	b16a      	cbz	r2, 80153b2 <strncmp+0x20>
 8015396:	3901      	subs	r1, #1
 8015398:	1884      	adds	r4, r0, r2
 801539a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801539e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80153a2:	429a      	cmp	r2, r3
 80153a4:	d103      	bne.n	80153ae <strncmp+0x1c>
 80153a6:	42a0      	cmp	r0, r4
 80153a8:	d001      	beq.n	80153ae <strncmp+0x1c>
 80153aa:	2a00      	cmp	r2, #0
 80153ac:	d1f5      	bne.n	801539a <strncmp+0x8>
 80153ae:	1ad0      	subs	r0, r2, r3
 80153b0:	bd10      	pop	{r4, pc}
 80153b2:	4610      	mov	r0, r2
 80153b4:	e7fc      	b.n	80153b0 <strncmp+0x1e>
	...

080153b8 <strtok>:
 80153b8:	4b16      	ldr	r3, [pc, #88]	; (8015414 <strtok+0x5c>)
 80153ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80153bc:	681e      	ldr	r6, [r3, #0]
 80153be:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80153c0:	4605      	mov	r5, r0
 80153c2:	b9fc      	cbnz	r4, 8015404 <strtok+0x4c>
 80153c4:	2050      	movs	r0, #80	; 0x50
 80153c6:	9101      	str	r1, [sp, #4]
 80153c8:	f7fe f84a 	bl	8013460 <malloc>
 80153cc:	9901      	ldr	r1, [sp, #4]
 80153ce:	6470      	str	r0, [r6, #68]	; 0x44
 80153d0:	4602      	mov	r2, r0
 80153d2:	b920      	cbnz	r0, 80153de <strtok+0x26>
 80153d4:	4b10      	ldr	r3, [pc, #64]	; (8015418 <strtok+0x60>)
 80153d6:	4811      	ldr	r0, [pc, #68]	; (801541c <strtok+0x64>)
 80153d8:	215b      	movs	r1, #91	; 0x5b
 80153da:	f000 f90b 	bl	80155f4 <__assert_func>
 80153de:	e9c0 4400 	strd	r4, r4, [r0]
 80153e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80153e6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80153ea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80153ee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80153f2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80153f6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80153fa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80153fe:	6184      	str	r4, [r0, #24]
 8015400:	7704      	strb	r4, [r0, #28]
 8015402:	6244      	str	r4, [r0, #36]	; 0x24
 8015404:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8015406:	2301      	movs	r3, #1
 8015408:	4628      	mov	r0, r5
 801540a:	b002      	add	sp, #8
 801540c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015410:	f000 b806 	b.w	8015420 <__strtok_r>
 8015414:	200002f0 	.word	0x200002f0
 8015418:	0801b9c2 	.word	0x0801b9c2
 801541c:	0801b9d9 	.word	0x0801b9d9

08015420 <__strtok_r>:
 8015420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015422:	b908      	cbnz	r0, 8015428 <__strtok_r+0x8>
 8015424:	6810      	ldr	r0, [r2, #0]
 8015426:	b188      	cbz	r0, 801544c <__strtok_r+0x2c>
 8015428:	4604      	mov	r4, r0
 801542a:	4620      	mov	r0, r4
 801542c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8015430:	460f      	mov	r7, r1
 8015432:	f817 6b01 	ldrb.w	r6, [r7], #1
 8015436:	b91e      	cbnz	r6, 8015440 <__strtok_r+0x20>
 8015438:	b965      	cbnz	r5, 8015454 <__strtok_r+0x34>
 801543a:	6015      	str	r5, [r2, #0]
 801543c:	4628      	mov	r0, r5
 801543e:	e005      	b.n	801544c <__strtok_r+0x2c>
 8015440:	42b5      	cmp	r5, r6
 8015442:	d1f6      	bne.n	8015432 <__strtok_r+0x12>
 8015444:	2b00      	cmp	r3, #0
 8015446:	d1f0      	bne.n	801542a <__strtok_r+0xa>
 8015448:	6014      	str	r4, [r2, #0]
 801544a:	7003      	strb	r3, [r0, #0]
 801544c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801544e:	461c      	mov	r4, r3
 8015450:	e00c      	b.n	801546c <__strtok_r+0x4c>
 8015452:	b915      	cbnz	r5, 801545a <__strtok_r+0x3a>
 8015454:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015458:	460e      	mov	r6, r1
 801545a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801545e:	42ab      	cmp	r3, r5
 8015460:	d1f7      	bne.n	8015452 <__strtok_r+0x32>
 8015462:	2b00      	cmp	r3, #0
 8015464:	d0f3      	beq.n	801544e <__strtok_r+0x2e>
 8015466:	2300      	movs	r3, #0
 8015468:	f804 3c01 	strb.w	r3, [r4, #-1]
 801546c:	6014      	str	r4, [r2, #0]
 801546e:	e7ed      	b.n	801544c <__strtok_r+0x2c>

08015470 <strstr>:
 8015470:	780a      	ldrb	r2, [r1, #0]
 8015472:	b570      	push	{r4, r5, r6, lr}
 8015474:	b96a      	cbnz	r2, 8015492 <strstr+0x22>
 8015476:	bd70      	pop	{r4, r5, r6, pc}
 8015478:	429a      	cmp	r2, r3
 801547a:	d109      	bne.n	8015490 <strstr+0x20>
 801547c:	460c      	mov	r4, r1
 801547e:	4605      	mov	r5, r0
 8015480:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015484:	2b00      	cmp	r3, #0
 8015486:	d0f6      	beq.n	8015476 <strstr+0x6>
 8015488:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801548c:	429e      	cmp	r6, r3
 801548e:	d0f7      	beq.n	8015480 <strstr+0x10>
 8015490:	3001      	adds	r0, #1
 8015492:	7803      	ldrb	r3, [r0, #0]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d1ef      	bne.n	8015478 <strstr+0x8>
 8015498:	4618      	mov	r0, r3
 801549a:	e7ec      	b.n	8015476 <strstr+0x6>

0801549c <_localeconv_r>:
 801549c:	4800      	ldr	r0, [pc, #0]	; (80154a0 <_localeconv_r+0x4>)
 801549e:	4770      	bx	lr
 80154a0:	20000228 	.word	0x20000228

080154a4 <_close_r>:
 80154a4:	b538      	push	{r3, r4, r5, lr}
 80154a6:	4d06      	ldr	r5, [pc, #24]	; (80154c0 <_close_r+0x1c>)
 80154a8:	2300      	movs	r3, #0
 80154aa:	4604      	mov	r4, r0
 80154ac:	4608      	mov	r0, r1
 80154ae:	602b      	str	r3, [r5, #0]
 80154b0:	f7ef fdf7 	bl	80050a2 <_close>
 80154b4:	1c43      	adds	r3, r0, #1
 80154b6:	d102      	bne.n	80154be <_close_r+0x1a>
 80154b8:	682b      	ldr	r3, [r5, #0]
 80154ba:	b103      	cbz	r3, 80154be <_close_r+0x1a>
 80154bc:	6023      	str	r3, [r4, #0]
 80154be:	bd38      	pop	{r3, r4, r5, pc}
 80154c0:	200023fc 	.word	0x200023fc

080154c4 <_lseek_r>:
 80154c4:	b538      	push	{r3, r4, r5, lr}
 80154c6:	4d07      	ldr	r5, [pc, #28]	; (80154e4 <_lseek_r+0x20>)
 80154c8:	4604      	mov	r4, r0
 80154ca:	4608      	mov	r0, r1
 80154cc:	4611      	mov	r1, r2
 80154ce:	2200      	movs	r2, #0
 80154d0:	602a      	str	r2, [r5, #0]
 80154d2:	461a      	mov	r2, r3
 80154d4:	f7ef fe0c 	bl	80050f0 <_lseek>
 80154d8:	1c43      	adds	r3, r0, #1
 80154da:	d102      	bne.n	80154e2 <_lseek_r+0x1e>
 80154dc:	682b      	ldr	r3, [r5, #0]
 80154de:	b103      	cbz	r3, 80154e2 <_lseek_r+0x1e>
 80154e0:	6023      	str	r3, [r4, #0]
 80154e2:	bd38      	pop	{r3, r4, r5, pc}
 80154e4:	200023fc 	.word	0x200023fc

080154e8 <_read_r>:
 80154e8:	b538      	push	{r3, r4, r5, lr}
 80154ea:	4d07      	ldr	r5, [pc, #28]	; (8015508 <_read_r+0x20>)
 80154ec:	4604      	mov	r4, r0
 80154ee:	4608      	mov	r0, r1
 80154f0:	4611      	mov	r1, r2
 80154f2:	2200      	movs	r2, #0
 80154f4:	602a      	str	r2, [r5, #0]
 80154f6:	461a      	mov	r2, r3
 80154f8:	f7ef fd9a 	bl	8005030 <_read>
 80154fc:	1c43      	adds	r3, r0, #1
 80154fe:	d102      	bne.n	8015506 <_read_r+0x1e>
 8015500:	682b      	ldr	r3, [r5, #0]
 8015502:	b103      	cbz	r3, 8015506 <_read_r+0x1e>
 8015504:	6023      	str	r3, [r4, #0]
 8015506:	bd38      	pop	{r3, r4, r5, pc}
 8015508:	200023fc 	.word	0x200023fc

0801550c <_sbrk_r>:
 801550c:	b538      	push	{r3, r4, r5, lr}
 801550e:	4d06      	ldr	r5, [pc, #24]	; (8015528 <_sbrk_r+0x1c>)
 8015510:	2300      	movs	r3, #0
 8015512:	4604      	mov	r4, r0
 8015514:	4608      	mov	r0, r1
 8015516:	602b      	str	r3, [r5, #0]
 8015518:	f7ef fdf8 	bl	800510c <_sbrk>
 801551c:	1c43      	adds	r3, r0, #1
 801551e:	d102      	bne.n	8015526 <_sbrk_r+0x1a>
 8015520:	682b      	ldr	r3, [r5, #0]
 8015522:	b103      	cbz	r3, 8015526 <_sbrk_r+0x1a>
 8015524:	6023      	str	r3, [r4, #0]
 8015526:	bd38      	pop	{r3, r4, r5, pc}
 8015528:	200023fc 	.word	0x200023fc

0801552c <_write_r>:
 801552c:	b538      	push	{r3, r4, r5, lr}
 801552e:	4d07      	ldr	r5, [pc, #28]	; (801554c <_write_r+0x20>)
 8015530:	4604      	mov	r4, r0
 8015532:	4608      	mov	r0, r1
 8015534:	4611      	mov	r1, r2
 8015536:	2200      	movs	r2, #0
 8015538:	602a      	str	r2, [r5, #0]
 801553a:	461a      	mov	r2, r3
 801553c:	f7ef fd95 	bl	800506a <_write>
 8015540:	1c43      	adds	r3, r0, #1
 8015542:	d102      	bne.n	801554a <_write_r+0x1e>
 8015544:	682b      	ldr	r3, [r5, #0]
 8015546:	b103      	cbz	r3, 801554a <_write_r+0x1e>
 8015548:	6023      	str	r3, [r4, #0]
 801554a:	bd38      	pop	{r3, r4, r5, pc}
 801554c:	200023fc 	.word	0x200023fc

08015550 <__errno>:
 8015550:	4b01      	ldr	r3, [pc, #4]	; (8015558 <__errno+0x8>)
 8015552:	6818      	ldr	r0, [r3, #0]
 8015554:	4770      	bx	lr
 8015556:	bf00      	nop
 8015558:	200002f0 	.word	0x200002f0

0801555c <__libc_init_array>:
 801555c:	b570      	push	{r4, r5, r6, lr}
 801555e:	4d0d      	ldr	r5, [pc, #52]	; (8015594 <__libc_init_array+0x38>)
 8015560:	4c0d      	ldr	r4, [pc, #52]	; (8015598 <__libc_init_array+0x3c>)
 8015562:	1b64      	subs	r4, r4, r5
 8015564:	10a4      	asrs	r4, r4, #2
 8015566:	2600      	movs	r6, #0
 8015568:	42a6      	cmp	r6, r4
 801556a:	d109      	bne.n	8015580 <__libc_init_array+0x24>
 801556c:	4d0b      	ldr	r5, [pc, #44]	; (801559c <__libc_init_array+0x40>)
 801556e:	4c0c      	ldr	r4, [pc, #48]	; (80155a0 <__libc_init_array+0x44>)
 8015570:	f004 f9fe 	bl	8019970 <_init>
 8015574:	1b64      	subs	r4, r4, r5
 8015576:	10a4      	asrs	r4, r4, #2
 8015578:	2600      	movs	r6, #0
 801557a:	42a6      	cmp	r6, r4
 801557c:	d105      	bne.n	801558a <__libc_init_array+0x2e>
 801557e:	bd70      	pop	{r4, r5, r6, pc}
 8015580:	f855 3b04 	ldr.w	r3, [r5], #4
 8015584:	4798      	blx	r3
 8015586:	3601      	adds	r6, #1
 8015588:	e7ee      	b.n	8015568 <__libc_init_array+0xc>
 801558a:	f855 3b04 	ldr.w	r3, [r5], #4
 801558e:	4798      	blx	r3
 8015590:	3601      	adds	r6, #1
 8015592:	e7f2      	b.n	801557a <__libc_init_array+0x1e>
 8015594:	0801beb0 	.word	0x0801beb0
 8015598:	0801beb0 	.word	0x0801beb0
 801559c:	0801beb0 	.word	0x0801beb0
 80155a0:	0801beb4 	.word	0x0801beb4

080155a4 <__retarget_lock_init_recursive>:
 80155a4:	4770      	bx	lr

080155a6 <__retarget_lock_acquire_recursive>:
 80155a6:	4770      	bx	lr

080155a8 <__retarget_lock_release_recursive>:
 80155a8:	4770      	bx	lr

080155aa <strcpy>:
 80155aa:	4603      	mov	r3, r0
 80155ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80155b0:	f803 2b01 	strb.w	r2, [r3], #1
 80155b4:	2a00      	cmp	r2, #0
 80155b6:	d1f9      	bne.n	80155ac <strcpy+0x2>
 80155b8:	4770      	bx	lr

080155ba <memcpy>:
 80155ba:	440a      	add	r2, r1
 80155bc:	4291      	cmp	r1, r2
 80155be:	f100 33ff 	add.w	r3, r0, #4294967295
 80155c2:	d100      	bne.n	80155c6 <memcpy+0xc>
 80155c4:	4770      	bx	lr
 80155c6:	b510      	push	{r4, lr}
 80155c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80155cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80155d0:	4291      	cmp	r1, r2
 80155d2:	d1f9      	bne.n	80155c8 <memcpy+0xe>
 80155d4:	bd10      	pop	{r4, pc}
	...

080155d8 <nan>:
 80155d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80155e0 <nan+0x8>
 80155dc:	4770      	bx	lr
 80155de:	bf00      	nop
 80155e0:	00000000 	.word	0x00000000
 80155e4:	7ff80000 	.word	0x7ff80000

080155e8 <nanf>:
 80155e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80155f0 <nanf+0x8>
 80155ec:	4770      	bx	lr
 80155ee:	bf00      	nop
 80155f0:	7fc00000 	.word	0x7fc00000

080155f4 <__assert_func>:
 80155f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80155f6:	4614      	mov	r4, r2
 80155f8:	461a      	mov	r2, r3
 80155fa:	4b09      	ldr	r3, [pc, #36]	; (8015620 <__assert_func+0x2c>)
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	4605      	mov	r5, r0
 8015600:	68d8      	ldr	r0, [r3, #12]
 8015602:	b14c      	cbz	r4, 8015618 <__assert_func+0x24>
 8015604:	4b07      	ldr	r3, [pc, #28]	; (8015624 <__assert_func+0x30>)
 8015606:	9100      	str	r1, [sp, #0]
 8015608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801560c:	4906      	ldr	r1, [pc, #24]	; (8015628 <__assert_func+0x34>)
 801560e:	462b      	mov	r3, r5
 8015610:	f002 f8fe 	bl	8017810 <fiprintf>
 8015614:	f002 f928 	bl	8017868 <abort>
 8015618:	4b04      	ldr	r3, [pc, #16]	; (801562c <__assert_func+0x38>)
 801561a:	461c      	mov	r4, r3
 801561c:	e7f3      	b.n	8015606 <__assert_func+0x12>
 801561e:	bf00      	nop
 8015620:	200002f0 	.word	0x200002f0
 8015624:	0801ba3b 	.word	0x0801ba3b
 8015628:	0801ba48 	.word	0x0801ba48
 801562c:	0801ba76 	.word	0x0801ba76

08015630 <quorem>:
 8015630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015634:	6903      	ldr	r3, [r0, #16]
 8015636:	690c      	ldr	r4, [r1, #16]
 8015638:	42a3      	cmp	r3, r4
 801563a:	4607      	mov	r7, r0
 801563c:	db7e      	blt.n	801573c <quorem+0x10c>
 801563e:	3c01      	subs	r4, #1
 8015640:	f101 0814 	add.w	r8, r1, #20
 8015644:	f100 0514 	add.w	r5, r0, #20
 8015648:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801564c:	9301      	str	r3, [sp, #4]
 801564e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015652:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015656:	3301      	adds	r3, #1
 8015658:	429a      	cmp	r2, r3
 801565a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801565e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015662:	fbb2 f6f3 	udiv	r6, r2, r3
 8015666:	d331      	bcc.n	80156cc <quorem+0x9c>
 8015668:	f04f 0e00 	mov.w	lr, #0
 801566c:	4640      	mov	r0, r8
 801566e:	46ac      	mov	ip, r5
 8015670:	46f2      	mov	sl, lr
 8015672:	f850 2b04 	ldr.w	r2, [r0], #4
 8015676:	b293      	uxth	r3, r2
 8015678:	fb06 e303 	mla	r3, r6, r3, lr
 801567c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015680:	0c1a      	lsrs	r2, r3, #16
 8015682:	b29b      	uxth	r3, r3
 8015684:	ebaa 0303 	sub.w	r3, sl, r3
 8015688:	f8dc a000 	ldr.w	sl, [ip]
 801568c:	fa13 f38a 	uxtah	r3, r3, sl
 8015690:	fb06 220e 	mla	r2, r6, lr, r2
 8015694:	9300      	str	r3, [sp, #0]
 8015696:	9b00      	ldr	r3, [sp, #0]
 8015698:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801569c:	b292      	uxth	r2, r2
 801569e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80156a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80156a6:	f8bd 3000 	ldrh.w	r3, [sp]
 80156aa:	4581      	cmp	r9, r0
 80156ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80156b0:	f84c 3b04 	str.w	r3, [ip], #4
 80156b4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80156b8:	d2db      	bcs.n	8015672 <quorem+0x42>
 80156ba:	f855 300b 	ldr.w	r3, [r5, fp]
 80156be:	b92b      	cbnz	r3, 80156cc <quorem+0x9c>
 80156c0:	9b01      	ldr	r3, [sp, #4]
 80156c2:	3b04      	subs	r3, #4
 80156c4:	429d      	cmp	r5, r3
 80156c6:	461a      	mov	r2, r3
 80156c8:	d32c      	bcc.n	8015724 <quorem+0xf4>
 80156ca:	613c      	str	r4, [r7, #16]
 80156cc:	4638      	mov	r0, r7
 80156ce:	f001 fca5 	bl	801701c <__mcmp>
 80156d2:	2800      	cmp	r0, #0
 80156d4:	db22      	blt.n	801571c <quorem+0xec>
 80156d6:	3601      	adds	r6, #1
 80156d8:	4629      	mov	r1, r5
 80156da:	2000      	movs	r0, #0
 80156dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80156e0:	f8d1 c000 	ldr.w	ip, [r1]
 80156e4:	b293      	uxth	r3, r2
 80156e6:	1ac3      	subs	r3, r0, r3
 80156e8:	0c12      	lsrs	r2, r2, #16
 80156ea:	fa13 f38c 	uxtah	r3, r3, ip
 80156ee:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80156f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80156f6:	b29b      	uxth	r3, r3
 80156f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80156fc:	45c1      	cmp	r9, r8
 80156fe:	f841 3b04 	str.w	r3, [r1], #4
 8015702:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015706:	d2e9      	bcs.n	80156dc <quorem+0xac>
 8015708:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801570c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015710:	b922      	cbnz	r2, 801571c <quorem+0xec>
 8015712:	3b04      	subs	r3, #4
 8015714:	429d      	cmp	r5, r3
 8015716:	461a      	mov	r2, r3
 8015718:	d30a      	bcc.n	8015730 <quorem+0x100>
 801571a:	613c      	str	r4, [r7, #16]
 801571c:	4630      	mov	r0, r6
 801571e:	b003      	add	sp, #12
 8015720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015724:	6812      	ldr	r2, [r2, #0]
 8015726:	3b04      	subs	r3, #4
 8015728:	2a00      	cmp	r2, #0
 801572a:	d1ce      	bne.n	80156ca <quorem+0x9a>
 801572c:	3c01      	subs	r4, #1
 801572e:	e7c9      	b.n	80156c4 <quorem+0x94>
 8015730:	6812      	ldr	r2, [r2, #0]
 8015732:	3b04      	subs	r3, #4
 8015734:	2a00      	cmp	r2, #0
 8015736:	d1f0      	bne.n	801571a <quorem+0xea>
 8015738:	3c01      	subs	r4, #1
 801573a:	e7eb      	b.n	8015714 <quorem+0xe4>
 801573c:	2000      	movs	r0, #0
 801573e:	e7ee      	b.n	801571e <quorem+0xee>

08015740 <_dtoa_r>:
 8015740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015744:	ed2d 8b04 	vpush	{d8-d9}
 8015748:	69c5      	ldr	r5, [r0, #28]
 801574a:	b093      	sub	sp, #76	; 0x4c
 801574c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015750:	ec57 6b10 	vmov	r6, r7, d0
 8015754:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015758:	9107      	str	r1, [sp, #28]
 801575a:	4604      	mov	r4, r0
 801575c:	920a      	str	r2, [sp, #40]	; 0x28
 801575e:	930d      	str	r3, [sp, #52]	; 0x34
 8015760:	b975      	cbnz	r5, 8015780 <_dtoa_r+0x40>
 8015762:	2010      	movs	r0, #16
 8015764:	f7fd fe7c 	bl	8013460 <malloc>
 8015768:	4602      	mov	r2, r0
 801576a:	61e0      	str	r0, [r4, #28]
 801576c:	b920      	cbnz	r0, 8015778 <_dtoa_r+0x38>
 801576e:	4bae      	ldr	r3, [pc, #696]	; (8015a28 <_dtoa_r+0x2e8>)
 8015770:	21ef      	movs	r1, #239	; 0xef
 8015772:	48ae      	ldr	r0, [pc, #696]	; (8015a2c <_dtoa_r+0x2ec>)
 8015774:	f7ff ff3e 	bl	80155f4 <__assert_func>
 8015778:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801577c:	6005      	str	r5, [r0, #0]
 801577e:	60c5      	str	r5, [r0, #12]
 8015780:	69e3      	ldr	r3, [r4, #28]
 8015782:	6819      	ldr	r1, [r3, #0]
 8015784:	b151      	cbz	r1, 801579c <_dtoa_r+0x5c>
 8015786:	685a      	ldr	r2, [r3, #4]
 8015788:	604a      	str	r2, [r1, #4]
 801578a:	2301      	movs	r3, #1
 801578c:	4093      	lsls	r3, r2
 801578e:	608b      	str	r3, [r1, #8]
 8015790:	4620      	mov	r0, r4
 8015792:	f001 f9bd 	bl	8016b10 <_Bfree>
 8015796:	69e3      	ldr	r3, [r4, #28]
 8015798:	2200      	movs	r2, #0
 801579a:	601a      	str	r2, [r3, #0]
 801579c:	1e3b      	subs	r3, r7, #0
 801579e:	bfbb      	ittet	lt
 80157a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80157a4:	9303      	strlt	r3, [sp, #12]
 80157a6:	2300      	movge	r3, #0
 80157a8:	2201      	movlt	r2, #1
 80157aa:	bfac      	ite	ge
 80157ac:	f8c8 3000 	strge.w	r3, [r8]
 80157b0:	f8c8 2000 	strlt.w	r2, [r8]
 80157b4:	4b9e      	ldr	r3, [pc, #632]	; (8015a30 <_dtoa_r+0x2f0>)
 80157b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80157ba:	ea33 0308 	bics.w	r3, r3, r8
 80157be:	d11b      	bne.n	80157f8 <_dtoa_r+0xb8>
 80157c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80157c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80157c6:	6013      	str	r3, [r2, #0]
 80157c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80157cc:	4333      	orrs	r3, r6
 80157ce:	f000 8593 	beq.w	80162f8 <_dtoa_r+0xbb8>
 80157d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80157d4:	b963      	cbnz	r3, 80157f0 <_dtoa_r+0xb0>
 80157d6:	4b97      	ldr	r3, [pc, #604]	; (8015a34 <_dtoa_r+0x2f4>)
 80157d8:	e027      	b.n	801582a <_dtoa_r+0xea>
 80157da:	4b97      	ldr	r3, [pc, #604]	; (8015a38 <_dtoa_r+0x2f8>)
 80157dc:	9300      	str	r3, [sp, #0]
 80157de:	3308      	adds	r3, #8
 80157e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80157e2:	6013      	str	r3, [r2, #0]
 80157e4:	9800      	ldr	r0, [sp, #0]
 80157e6:	b013      	add	sp, #76	; 0x4c
 80157e8:	ecbd 8b04 	vpop	{d8-d9}
 80157ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157f0:	4b90      	ldr	r3, [pc, #576]	; (8015a34 <_dtoa_r+0x2f4>)
 80157f2:	9300      	str	r3, [sp, #0]
 80157f4:	3303      	adds	r3, #3
 80157f6:	e7f3      	b.n	80157e0 <_dtoa_r+0xa0>
 80157f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80157fc:	2200      	movs	r2, #0
 80157fe:	ec51 0b17 	vmov	r0, r1, d7
 8015802:	eeb0 8a47 	vmov.f32	s16, s14
 8015806:	eef0 8a67 	vmov.f32	s17, s15
 801580a:	2300      	movs	r3, #0
 801580c:	f7eb f95c 	bl	8000ac8 <__aeabi_dcmpeq>
 8015810:	4681      	mov	r9, r0
 8015812:	b160      	cbz	r0, 801582e <_dtoa_r+0xee>
 8015814:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015816:	2301      	movs	r3, #1
 8015818:	6013      	str	r3, [r2, #0]
 801581a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801581c:	2b00      	cmp	r3, #0
 801581e:	f000 8568 	beq.w	80162f2 <_dtoa_r+0xbb2>
 8015822:	4b86      	ldr	r3, [pc, #536]	; (8015a3c <_dtoa_r+0x2fc>)
 8015824:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015826:	6013      	str	r3, [r2, #0]
 8015828:	3b01      	subs	r3, #1
 801582a:	9300      	str	r3, [sp, #0]
 801582c:	e7da      	b.n	80157e4 <_dtoa_r+0xa4>
 801582e:	aa10      	add	r2, sp, #64	; 0x40
 8015830:	a911      	add	r1, sp, #68	; 0x44
 8015832:	4620      	mov	r0, r4
 8015834:	eeb0 0a48 	vmov.f32	s0, s16
 8015838:	eef0 0a68 	vmov.f32	s1, s17
 801583c:	f001 fd04 	bl	8017248 <__d2b>
 8015840:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8015844:	4682      	mov	sl, r0
 8015846:	2d00      	cmp	r5, #0
 8015848:	d07f      	beq.n	801594a <_dtoa_r+0x20a>
 801584a:	ee18 3a90 	vmov	r3, s17
 801584e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015852:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8015856:	ec51 0b18 	vmov	r0, r1, d8
 801585a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801585e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015862:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8015866:	4619      	mov	r1, r3
 8015868:	2200      	movs	r2, #0
 801586a:	4b75      	ldr	r3, [pc, #468]	; (8015a40 <_dtoa_r+0x300>)
 801586c:	f7ea fd0c 	bl	8000288 <__aeabi_dsub>
 8015870:	a367      	add	r3, pc, #412	; (adr r3, 8015a10 <_dtoa_r+0x2d0>)
 8015872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015876:	f7ea febf 	bl	80005f8 <__aeabi_dmul>
 801587a:	a367      	add	r3, pc, #412	; (adr r3, 8015a18 <_dtoa_r+0x2d8>)
 801587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015880:	f7ea fd04 	bl	800028c <__adddf3>
 8015884:	4606      	mov	r6, r0
 8015886:	4628      	mov	r0, r5
 8015888:	460f      	mov	r7, r1
 801588a:	f7ea fe4b 	bl	8000524 <__aeabi_i2d>
 801588e:	a364      	add	r3, pc, #400	; (adr r3, 8015a20 <_dtoa_r+0x2e0>)
 8015890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015894:	f7ea feb0 	bl	80005f8 <__aeabi_dmul>
 8015898:	4602      	mov	r2, r0
 801589a:	460b      	mov	r3, r1
 801589c:	4630      	mov	r0, r6
 801589e:	4639      	mov	r1, r7
 80158a0:	f7ea fcf4 	bl	800028c <__adddf3>
 80158a4:	4606      	mov	r6, r0
 80158a6:	460f      	mov	r7, r1
 80158a8:	f7eb f956 	bl	8000b58 <__aeabi_d2iz>
 80158ac:	2200      	movs	r2, #0
 80158ae:	4683      	mov	fp, r0
 80158b0:	2300      	movs	r3, #0
 80158b2:	4630      	mov	r0, r6
 80158b4:	4639      	mov	r1, r7
 80158b6:	f7eb f911 	bl	8000adc <__aeabi_dcmplt>
 80158ba:	b148      	cbz	r0, 80158d0 <_dtoa_r+0x190>
 80158bc:	4658      	mov	r0, fp
 80158be:	f7ea fe31 	bl	8000524 <__aeabi_i2d>
 80158c2:	4632      	mov	r2, r6
 80158c4:	463b      	mov	r3, r7
 80158c6:	f7eb f8ff 	bl	8000ac8 <__aeabi_dcmpeq>
 80158ca:	b908      	cbnz	r0, 80158d0 <_dtoa_r+0x190>
 80158cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80158d0:	f1bb 0f16 	cmp.w	fp, #22
 80158d4:	d857      	bhi.n	8015986 <_dtoa_r+0x246>
 80158d6:	4b5b      	ldr	r3, [pc, #364]	; (8015a44 <_dtoa_r+0x304>)
 80158d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80158dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158e0:	ec51 0b18 	vmov	r0, r1, d8
 80158e4:	f7eb f8fa 	bl	8000adc <__aeabi_dcmplt>
 80158e8:	2800      	cmp	r0, #0
 80158ea:	d04e      	beq.n	801598a <_dtoa_r+0x24a>
 80158ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80158f0:	2300      	movs	r3, #0
 80158f2:	930c      	str	r3, [sp, #48]	; 0x30
 80158f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80158f6:	1b5b      	subs	r3, r3, r5
 80158f8:	1e5a      	subs	r2, r3, #1
 80158fa:	bf45      	ittet	mi
 80158fc:	f1c3 0301 	rsbmi	r3, r3, #1
 8015900:	9305      	strmi	r3, [sp, #20]
 8015902:	2300      	movpl	r3, #0
 8015904:	2300      	movmi	r3, #0
 8015906:	9206      	str	r2, [sp, #24]
 8015908:	bf54      	ite	pl
 801590a:	9305      	strpl	r3, [sp, #20]
 801590c:	9306      	strmi	r3, [sp, #24]
 801590e:	f1bb 0f00 	cmp.w	fp, #0
 8015912:	db3c      	blt.n	801598e <_dtoa_r+0x24e>
 8015914:	9b06      	ldr	r3, [sp, #24]
 8015916:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801591a:	445b      	add	r3, fp
 801591c:	9306      	str	r3, [sp, #24]
 801591e:	2300      	movs	r3, #0
 8015920:	9308      	str	r3, [sp, #32]
 8015922:	9b07      	ldr	r3, [sp, #28]
 8015924:	2b09      	cmp	r3, #9
 8015926:	d868      	bhi.n	80159fa <_dtoa_r+0x2ba>
 8015928:	2b05      	cmp	r3, #5
 801592a:	bfc4      	itt	gt
 801592c:	3b04      	subgt	r3, #4
 801592e:	9307      	strgt	r3, [sp, #28]
 8015930:	9b07      	ldr	r3, [sp, #28]
 8015932:	f1a3 0302 	sub.w	r3, r3, #2
 8015936:	bfcc      	ite	gt
 8015938:	2500      	movgt	r5, #0
 801593a:	2501      	movle	r5, #1
 801593c:	2b03      	cmp	r3, #3
 801593e:	f200 8085 	bhi.w	8015a4c <_dtoa_r+0x30c>
 8015942:	e8df f003 	tbb	[pc, r3]
 8015946:	3b2e      	.short	0x3b2e
 8015948:	5839      	.short	0x5839
 801594a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801594e:	441d      	add	r5, r3
 8015950:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015954:	2b20      	cmp	r3, #32
 8015956:	bfc1      	itttt	gt
 8015958:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801595c:	fa08 f803 	lslgt.w	r8, r8, r3
 8015960:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8015964:	fa26 f303 	lsrgt.w	r3, r6, r3
 8015968:	bfd6      	itet	le
 801596a:	f1c3 0320 	rsble	r3, r3, #32
 801596e:	ea48 0003 	orrgt.w	r0, r8, r3
 8015972:	fa06 f003 	lslle.w	r0, r6, r3
 8015976:	f7ea fdc5 	bl	8000504 <__aeabi_ui2d>
 801597a:	2201      	movs	r2, #1
 801597c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8015980:	3d01      	subs	r5, #1
 8015982:	920e      	str	r2, [sp, #56]	; 0x38
 8015984:	e76f      	b.n	8015866 <_dtoa_r+0x126>
 8015986:	2301      	movs	r3, #1
 8015988:	e7b3      	b.n	80158f2 <_dtoa_r+0x1b2>
 801598a:	900c      	str	r0, [sp, #48]	; 0x30
 801598c:	e7b2      	b.n	80158f4 <_dtoa_r+0x1b4>
 801598e:	9b05      	ldr	r3, [sp, #20]
 8015990:	eba3 030b 	sub.w	r3, r3, fp
 8015994:	9305      	str	r3, [sp, #20]
 8015996:	f1cb 0300 	rsb	r3, fp, #0
 801599a:	9308      	str	r3, [sp, #32]
 801599c:	2300      	movs	r3, #0
 801599e:	930b      	str	r3, [sp, #44]	; 0x2c
 80159a0:	e7bf      	b.n	8015922 <_dtoa_r+0x1e2>
 80159a2:	2300      	movs	r3, #0
 80159a4:	9309      	str	r3, [sp, #36]	; 0x24
 80159a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	dc52      	bgt.n	8015a52 <_dtoa_r+0x312>
 80159ac:	2301      	movs	r3, #1
 80159ae:	9301      	str	r3, [sp, #4]
 80159b0:	9304      	str	r3, [sp, #16]
 80159b2:	461a      	mov	r2, r3
 80159b4:	920a      	str	r2, [sp, #40]	; 0x28
 80159b6:	e00b      	b.n	80159d0 <_dtoa_r+0x290>
 80159b8:	2301      	movs	r3, #1
 80159ba:	e7f3      	b.n	80159a4 <_dtoa_r+0x264>
 80159bc:	2300      	movs	r3, #0
 80159be:	9309      	str	r3, [sp, #36]	; 0x24
 80159c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159c2:	445b      	add	r3, fp
 80159c4:	9301      	str	r3, [sp, #4]
 80159c6:	3301      	adds	r3, #1
 80159c8:	2b01      	cmp	r3, #1
 80159ca:	9304      	str	r3, [sp, #16]
 80159cc:	bfb8      	it	lt
 80159ce:	2301      	movlt	r3, #1
 80159d0:	69e0      	ldr	r0, [r4, #28]
 80159d2:	2100      	movs	r1, #0
 80159d4:	2204      	movs	r2, #4
 80159d6:	f102 0614 	add.w	r6, r2, #20
 80159da:	429e      	cmp	r6, r3
 80159dc:	d93d      	bls.n	8015a5a <_dtoa_r+0x31a>
 80159de:	6041      	str	r1, [r0, #4]
 80159e0:	4620      	mov	r0, r4
 80159e2:	f001 f855 	bl	8016a90 <_Balloc>
 80159e6:	9000      	str	r0, [sp, #0]
 80159e8:	2800      	cmp	r0, #0
 80159ea:	d139      	bne.n	8015a60 <_dtoa_r+0x320>
 80159ec:	4b16      	ldr	r3, [pc, #88]	; (8015a48 <_dtoa_r+0x308>)
 80159ee:	4602      	mov	r2, r0
 80159f0:	f240 11af 	movw	r1, #431	; 0x1af
 80159f4:	e6bd      	b.n	8015772 <_dtoa_r+0x32>
 80159f6:	2301      	movs	r3, #1
 80159f8:	e7e1      	b.n	80159be <_dtoa_r+0x27e>
 80159fa:	2501      	movs	r5, #1
 80159fc:	2300      	movs	r3, #0
 80159fe:	9307      	str	r3, [sp, #28]
 8015a00:	9509      	str	r5, [sp, #36]	; 0x24
 8015a02:	f04f 33ff 	mov.w	r3, #4294967295
 8015a06:	9301      	str	r3, [sp, #4]
 8015a08:	9304      	str	r3, [sp, #16]
 8015a0a:	2200      	movs	r2, #0
 8015a0c:	2312      	movs	r3, #18
 8015a0e:	e7d1      	b.n	80159b4 <_dtoa_r+0x274>
 8015a10:	636f4361 	.word	0x636f4361
 8015a14:	3fd287a7 	.word	0x3fd287a7
 8015a18:	8b60c8b3 	.word	0x8b60c8b3
 8015a1c:	3fc68a28 	.word	0x3fc68a28
 8015a20:	509f79fb 	.word	0x509f79fb
 8015a24:	3fd34413 	.word	0x3fd34413
 8015a28:	0801b9c2 	.word	0x0801b9c2
 8015a2c:	0801ba84 	.word	0x0801ba84
 8015a30:	7ff00000 	.word	0x7ff00000
 8015a34:	0801ba80 	.word	0x0801ba80
 8015a38:	0801ba77 	.word	0x0801ba77
 8015a3c:	0801b99a 	.word	0x0801b99a
 8015a40:	3ff80000 	.word	0x3ff80000
 8015a44:	0801bbd0 	.word	0x0801bbd0
 8015a48:	0801badc 	.word	0x0801badc
 8015a4c:	2301      	movs	r3, #1
 8015a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8015a50:	e7d7      	b.n	8015a02 <_dtoa_r+0x2c2>
 8015a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a54:	9301      	str	r3, [sp, #4]
 8015a56:	9304      	str	r3, [sp, #16]
 8015a58:	e7ba      	b.n	80159d0 <_dtoa_r+0x290>
 8015a5a:	3101      	adds	r1, #1
 8015a5c:	0052      	lsls	r2, r2, #1
 8015a5e:	e7ba      	b.n	80159d6 <_dtoa_r+0x296>
 8015a60:	69e3      	ldr	r3, [r4, #28]
 8015a62:	9a00      	ldr	r2, [sp, #0]
 8015a64:	601a      	str	r2, [r3, #0]
 8015a66:	9b04      	ldr	r3, [sp, #16]
 8015a68:	2b0e      	cmp	r3, #14
 8015a6a:	f200 80a8 	bhi.w	8015bbe <_dtoa_r+0x47e>
 8015a6e:	2d00      	cmp	r5, #0
 8015a70:	f000 80a5 	beq.w	8015bbe <_dtoa_r+0x47e>
 8015a74:	f1bb 0f00 	cmp.w	fp, #0
 8015a78:	dd38      	ble.n	8015aec <_dtoa_r+0x3ac>
 8015a7a:	4bc0      	ldr	r3, [pc, #768]	; (8015d7c <_dtoa_r+0x63c>)
 8015a7c:	f00b 020f 	and.w	r2, fp, #15
 8015a80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015a84:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015a88:	e9d3 6700 	ldrd	r6, r7, [r3]
 8015a8c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8015a90:	d019      	beq.n	8015ac6 <_dtoa_r+0x386>
 8015a92:	4bbb      	ldr	r3, [pc, #748]	; (8015d80 <_dtoa_r+0x640>)
 8015a94:	ec51 0b18 	vmov	r0, r1, d8
 8015a98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015a9c:	f7ea fed6 	bl	800084c <__aeabi_ddiv>
 8015aa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015aa4:	f008 080f 	and.w	r8, r8, #15
 8015aa8:	2503      	movs	r5, #3
 8015aaa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8015d80 <_dtoa_r+0x640>
 8015aae:	f1b8 0f00 	cmp.w	r8, #0
 8015ab2:	d10a      	bne.n	8015aca <_dtoa_r+0x38a>
 8015ab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015ab8:	4632      	mov	r2, r6
 8015aba:	463b      	mov	r3, r7
 8015abc:	f7ea fec6 	bl	800084c <__aeabi_ddiv>
 8015ac0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015ac4:	e02b      	b.n	8015b1e <_dtoa_r+0x3de>
 8015ac6:	2502      	movs	r5, #2
 8015ac8:	e7ef      	b.n	8015aaa <_dtoa_r+0x36a>
 8015aca:	f018 0f01 	tst.w	r8, #1
 8015ace:	d008      	beq.n	8015ae2 <_dtoa_r+0x3a2>
 8015ad0:	4630      	mov	r0, r6
 8015ad2:	4639      	mov	r1, r7
 8015ad4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015ad8:	f7ea fd8e 	bl	80005f8 <__aeabi_dmul>
 8015adc:	3501      	adds	r5, #1
 8015ade:	4606      	mov	r6, r0
 8015ae0:	460f      	mov	r7, r1
 8015ae2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015ae6:	f109 0908 	add.w	r9, r9, #8
 8015aea:	e7e0      	b.n	8015aae <_dtoa_r+0x36e>
 8015aec:	f000 809f 	beq.w	8015c2e <_dtoa_r+0x4ee>
 8015af0:	f1cb 0600 	rsb	r6, fp, #0
 8015af4:	4ba1      	ldr	r3, [pc, #644]	; (8015d7c <_dtoa_r+0x63c>)
 8015af6:	4fa2      	ldr	r7, [pc, #648]	; (8015d80 <_dtoa_r+0x640>)
 8015af8:	f006 020f 	and.w	r2, r6, #15
 8015afc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b04:	ec51 0b18 	vmov	r0, r1, d8
 8015b08:	f7ea fd76 	bl	80005f8 <__aeabi_dmul>
 8015b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b10:	1136      	asrs	r6, r6, #4
 8015b12:	2300      	movs	r3, #0
 8015b14:	2502      	movs	r5, #2
 8015b16:	2e00      	cmp	r6, #0
 8015b18:	d17e      	bne.n	8015c18 <_dtoa_r+0x4d8>
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d1d0      	bne.n	8015ac0 <_dtoa_r+0x380>
 8015b1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	f000 8084 	beq.w	8015c32 <_dtoa_r+0x4f2>
 8015b2a:	4b96      	ldr	r3, [pc, #600]	; (8015d84 <_dtoa_r+0x644>)
 8015b2c:	2200      	movs	r2, #0
 8015b2e:	4640      	mov	r0, r8
 8015b30:	4649      	mov	r1, r9
 8015b32:	f7ea ffd3 	bl	8000adc <__aeabi_dcmplt>
 8015b36:	2800      	cmp	r0, #0
 8015b38:	d07b      	beq.n	8015c32 <_dtoa_r+0x4f2>
 8015b3a:	9b04      	ldr	r3, [sp, #16]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d078      	beq.n	8015c32 <_dtoa_r+0x4f2>
 8015b40:	9b01      	ldr	r3, [sp, #4]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	dd39      	ble.n	8015bba <_dtoa_r+0x47a>
 8015b46:	4b90      	ldr	r3, [pc, #576]	; (8015d88 <_dtoa_r+0x648>)
 8015b48:	2200      	movs	r2, #0
 8015b4a:	4640      	mov	r0, r8
 8015b4c:	4649      	mov	r1, r9
 8015b4e:	f7ea fd53 	bl	80005f8 <__aeabi_dmul>
 8015b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b56:	9e01      	ldr	r6, [sp, #4]
 8015b58:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015b5c:	3501      	adds	r5, #1
 8015b5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015b62:	4628      	mov	r0, r5
 8015b64:	f7ea fcde 	bl	8000524 <__aeabi_i2d>
 8015b68:	4642      	mov	r2, r8
 8015b6a:	464b      	mov	r3, r9
 8015b6c:	f7ea fd44 	bl	80005f8 <__aeabi_dmul>
 8015b70:	4b86      	ldr	r3, [pc, #536]	; (8015d8c <_dtoa_r+0x64c>)
 8015b72:	2200      	movs	r2, #0
 8015b74:	f7ea fb8a 	bl	800028c <__adddf3>
 8015b78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b80:	9303      	str	r3, [sp, #12]
 8015b82:	2e00      	cmp	r6, #0
 8015b84:	d158      	bne.n	8015c38 <_dtoa_r+0x4f8>
 8015b86:	4b82      	ldr	r3, [pc, #520]	; (8015d90 <_dtoa_r+0x650>)
 8015b88:	2200      	movs	r2, #0
 8015b8a:	4640      	mov	r0, r8
 8015b8c:	4649      	mov	r1, r9
 8015b8e:	f7ea fb7b 	bl	8000288 <__aeabi_dsub>
 8015b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015b96:	4680      	mov	r8, r0
 8015b98:	4689      	mov	r9, r1
 8015b9a:	f7ea ffbd 	bl	8000b18 <__aeabi_dcmpgt>
 8015b9e:	2800      	cmp	r0, #0
 8015ba0:	f040 8296 	bne.w	80160d0 <_dtoa_r+0x990>
 8015ba4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015ba8:	4640      	mov	r0, r8
 8015baa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015bae:	4649      	mov	r1, r9
 8015bb0:	f7ea ff94 	bl	8000adc <__aeabi_dcmplt>
 8015bb4:	2800      	cmp	r0, #0
 8015bb6:	f040 8289 	bne.w	80160cc <_dtoa_r+0x98c>
 8015bba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015bbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	f2c0 814e 	blt.w	8015e62 <_dtoa_r+0x722>
 8015bc6:	f1bb 0f0e 	cmp.w	fp, #14
 8015bca:	f300 814a 	bgt.w	8015e62 <_dtoa_r+0x722>
 8015bce:	4b6b      	ldr	r3, [pc, #428]	; (8015d7c <_dtoa_r+0x63c>)
 8015bd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015bd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	f280 80dc 	bge.w	8015d98 <_dtoa_r+0x658>
 8015be0:	9b04      	ldr	r3, [sp, #16]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	f300 80d8 	bgt.w	8015d98 <_dtoa_r+0x658>
 8015be8:	f040 826f 	bne.w	80160ca <_dtoa_r+0x98a>
 8015bec:	4b68      	ldr	r3, [pc, #416]	; (8015d90 <_dtoa_r+0x650>)
 8015bee:	2200      	movs	r2, #0
 8015bf0:	4640      	mov	r0, r8
 8015bf2:	4649      	mov	r1, r9
 8015bf4:	f7ea fd00 	bl	80005f8 <__aeabi_dmul>
 8015bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015bfc:	f7ea ff82 	bl	8000b04 <__aeabi_dcmpge>
 8015c00:	9e04      	ldr	r6, [sp, #16]
 8015c02:	4637      	mov	r7, r6
 8015c04:	2800      	cmp	r0, #0
 8015c06:	f040 8245 	bne.w	8016094 <_dtoa_r+0x954>
 8015c0a:	9d00      	ldr	r5, [sp, #0]
 8015c0c:	2331      	movs	r3, #49	; 0x31
 8015c0e:	f805 3b01 	strb.w	r3, [r5], #1
 8015c12:	f10b 0b01 	add.w	fp, fp, #1
 8015c16:	e241      	b.n	801609c <_dtoa_r+0x95c>
 8015c18:	07f2      	lsls	r2, r6, #31
 8015c1a:	d505      	bpl.n	8015c28 <_dtoa_r+0x4e8>
 8015c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015c20:	f7ea fcea 	bl	80005f8 <__aeabi_dmul>
 8015c24:	3501      	adds	r5, #1
 8015c26:	2301      	movs	r3, #1
 8015c28:	1076      	asrs	r6, r6, #1
 8015c2a:	3708      	adds	r7, #8
 8015c2c:	e773      	b.n	8015b16 <_dtoa_r+0x3d6>
 8015c2e:	2502      	movs	r5, #2
 8015c30:	e775      	b.n	8015b1e <_dtoa_r+0x3de>
 8015c32:	9e04      	ldr	r6, [sp, #16]
 8015c34:	465f      	mov	r7, fp
 8015c36:	e792      	b.n	8015b5e <_dtoa_r+0x41e>
 8015c38:	9900      	ldr	r1, [sp, #0]
 8015c3a:	4b50      	ldr	r3, [pc, #320]	; (8015d7c <_dtoa_r+0x63c>)
 8015c3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015c40:	4431      	add	r1, r6
 8015c42:	9102      	str	r1, [sp, #8]
 8015c44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c46:	eeb0 9a47 	vmov.f32	s18, s14
 8015c4a:	eef0 9a67 	vmov.f32	s19, s15
 8015c4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015c52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015c56:	2900      	cmp	r1, #0
 8015c58:	d044      	beq.n	8015ce4 <_dtoa_r+0x5a4>
 8015c5a:	494e      	ldr	r1, [pc, #312]	; (8015d94 <_dtoa_r+0x654>)
 8015c5c:	2000      	movs	r0, #0
 8015c5e:	f7ea fdf5 	bl	800084c <__aeabi_ddiv>
 8015c62:	ec53 2b19 	vmov	r2, r3, d9
 8015c66:	f7ea fb0f 	bl	8000288 <__aeabi_dsub>
 8015c6a:	9d00      	ldr	r5, [sp, #0]
 8015c6c:	ec41 0b19 	vmov	d9, r0, r1
 8015c70:	4649      	mov	r1, r9
 8015c72:	4640      	mov	r0, r8
 8015c74:	f7ea ff70 	bl	8000b58 <__aeabi_d2iz>
 8015c78:	4606      	mov	r6, r0
 8015c7a:	f7ea fc53 	bl	8000524 <__aeabi_i2d>
 8015c7e:	4602      	mov	r2, r0
 8015c80:	460b      	mov	r3, r1
 8015c82:	4640      	mov	r0, r8
 8015c84:	4649      	mov	r1, r9
 8015c86:	f7ea faff 	bl	8000288 <__aeabi_dsub>
 8015c8a:	3630      	adds	r6, #48	; 0x30
 8015c8c:	f805 6b01 	strb.w	r6, [r5], #1
 8015c90:	ec53 2b19 	vmov	r2, r3, d9
 8015c94:	4680      	mov	r8, r0
 8015c96:	4689      	mov	r9, r1
 8015c98:	f7ea ff20 	bl	8000adc <__aeabi_dcmplt>
 8015c9c:	2800      	cmp	r0, #0
 8015c9e:	d164      	bne.n	8015d6a <_dtoa_r+0x62a>
 8015ca0:	4642      	mov	r2, r8
 8015ca2:	464b      	mov	r3, r9
 8015ca4:	4937      	ldr	r1, [pc, #220]	; (8015d84 <_dtoa_r+0x644>)
 8015ca6:	2000      	movs	r0, #0
 8015ca8:	f7ea faee 	bl	8000288 <__aeabi_dsub>
 8015cac:	ec53 2b19 	vmov	r2, r3, d9
 8015cb0:	f7ea ff14 	bl	8000adc <__aeabi_dcmplt>
 8015cb4:	2800      	cmp	r0, #0
 8015cb6:	f040 80b6 	bne.w	8015e26 <_dtoa_r+0x6e6>
 8015cba:	9b02      	ldr	r3, [sp, #8]
 8015cbc:	429d      	cmp	r5, r3
 8015cbe:	f43f af7c 	beq.w	8015bba <_dtoa_r+0x47a>
 8015cc2:	4b31      	ldr	r3, [pc, #196]	; (8015d88 <_dtoa_r+0x648>)
 8015cc4:	ec51 0b19 	vmov	r0, r1, d9
 8015cc8:	2200      	movs	r2, #0
 8015cca:	f7ea fc95 	bl	80005f8 <__aeabi_dmul>
 8015cce:	4b2e      	ldr	r3, [pc, #184]	; (8015d88 <_dtoa_r+0x648>)
 8015cd0:	ec41 0b19 	vmov	d9, r0, r1
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	4640      	mov	r0, r8
 8015cd8:	4649      	mov	r1, r9
 8015cda:	f7ea fc8d 	bl	80005f8 <__aeabi_dmul>
 8015cde:	4680      	mov	r8, r0
 8015ce0:	4689      	mov	r9, r1
 8015ce2:	e7c5      	b.n	8015c70 <_dtoa_r+0x530>
 8015ce4:	ec51 0b17 	vmov	r0, r1, d7
 8015ce8:	f7ea fc86 	bl	80005f8 <__aeabi_dmul>
 8015cec:	9b02      	ldr	r3, [sp, #8]
 8015cee:	9d00      	ldr	r5, [sp, #0]
 8015cf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8015cf2:	ec41 0b19 	vmov	d9, r0, r1
 8015cf6:	4649      	mov	r1, r9
 8015cf8:	4640      	mov	r0, r8
 8015cfa:	f7ea ff2d 	bl	8000b58 <__aeabi_d2iz>
 8015cfe:	4606      	mov	r6, r0
 8015d00:	f7ea fc10 	bl	8000524 <__aeabi_i2d>
 8015d04:	3630      	adds	r6, #48	; 0x30
 8015d06:	4602      	mov	r2, r0
 8015d08:	460b      	mov	r3, r1
 8015d0a:	4640      	mov	r0, r8
 8015d0c:	4649      	mov	r1, r9
 8015d0e:	f7ea fabb 	bl	8000288 <__aeabi_dsub>
 8015d12:	f805 6b01 	strb.w	r6, [r5], #1
 8015d16:	9b02      	ldr	r3, [sp, #8]
 8015d18:	429d      	cmp	r5, r3
 8015d1a:	4680      	mov	r8, r0
 8015d1c:	4689      	mov	r9, r1
 8015d1e:	f04f 0200 	mov.w	r2, #0
 8015d22:	d124      	bne.n	8015d6e <_dtoa_r+0x62e>
 8015d24:	4b1b      	ldr	r3, [pc, #108]	; (8015d94 <_dtoa_r+0x654>)
 8015d26:	ec51 0b19 	vmov	r0, r1, d9
 8015d2a:	f7ea faaf 	bl	800028c <__adddf3>
 8015d2e:	4602      	mov	r2, r0
 8015d30:	460b      	mov	r3, r1
 8015d32:	4640      	mov	r0, r8
 8015d34:	4649      	mov	r1, r9
 8015d36:	f7ea feef 	bl	8000b18 <__aeabi_dcmpgt>
 8015d3a:	2800      	cmp	r0, #0
 8015d3c:	d173      	bne.n	8015e26 <_dtoa_r+0x6e6>
 8015d3e:	ec53 2b19 	vmov	r2, r3, d9
 8015d42:	4914      	ldr	r1, [pc, #80]	; (8015d94 <_dtoa_r+0x654>)
 8015d44:	2000      	movs	r0, #0
 8015d46:	f7ea fa9f 	bl	8000288 <__aeabi_dsub>
 8015d4a:	4602      	mov	r2, r0
 8015d4c:	460b      	mov	r3, r1
 8015d4e:	4640      	mov	r0, r8
 8015d50:	4649      	mov	r1, r9
 8015d52:	f7ea fec3 	bl	8000adc <__aeabi_dcmplt>
 8015d56:	2800      	cmp	r0, #0
 8015d58:	f43f af2f 	beq.w	8015bba <_dtoa_r+0x47a>
 8015d5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015d5e:	1e6b      	subs	r3, r5, #1
 8015d60:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015d66:	2b30      	cmp	r3, #48	; 0x30
 8015d68:	d0f8      	beq.n	8015d5c <_dtoa_r+0x61c>
 8015d6a:	46bb      	mov	fp, r7
 8015d6c:	e04a      	b.n	8015e04 <_dtoa_r+0x6c4>
 8015d6e:	4b06      	ldr	r3, [pc, #24]	; (8015d88 <_dtoa_r+0x648>)
 8015d70:	f7ea fc42 	bl	80005f8 <__aeabi_dmul>
 8015d74:	4680      	mov	r8, r0
 8015d76:	4689      	mov	r9, r1
 8015d78:	e7bd      	b.n	8015cf6 <_dtoa_r+0x5b6>
 8015d7a:	bf00      	nop
 8015d7c:	0801bbd0 	.word	0x0801bbd0
 8015d80:	0801bba8 	.word	0x0801bba8
 8015d84:	3ff00000 	.word	0x3ff00000
 8015d88:	40240000 	.word	0x40240000
 8015d8c:	401c0000 	.word	0x401c0000
 8015d90:	40140000 	.word	0x40140000
 8015d94:	3fe00000 	.word	0x3fe00000
 8015d98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015d9c:	9d00      	ldr	r5, [sp, #0]
 8015d9e:	4642      	mov	r2, r8
 8015da0:	464b      	mov	r3, r9
 8015da2:	4630      	mov	r0, r6
 8015da4:	4639      	mov	r1, r7
 8015da6:	f7ea fd51 	bl	800084c <__aeabi_ddiv>
 8015daa:	f7ea fed5 	bl	8000b58 <__aeabi_d2iz>
 8015dae:	9001      	str	r0, [sp, #4]
 8015db0:	f7ea fbb8 	bl	8000524 <__aeabi_i2d>
 8015db4:	4642      	mov	r2, r8
 8015db6:	464b      	mov	r3, r9
 8015db8:	f7ea fc1e 	bl	80005f8 <__aeabi_dmul>
 8015dbc:	4602      	mov	r2, r0
 8015dbe:	460b      	mov	r3, r1
 8015dc0:	4630      	mov	r0, r6
 8015dc2:	4639      	mov	r1, r7
 8015dc4:	f7ea fa60 	bl	8000288 <__aeabi_dsub>
 8015dc8:	9e01      	ldr	r6, [sp, #4]
 8015dca:	9f04      	ldr	r7, [sp, #16]
 8015dcc:	3630      	adds	r6, #48	; 0x30
 8015dce:	f805 6b01 	strb.w	r6, [r5], #1
 8015dd2:	9e00      	ldr	r6, [sp, #0]
 8015dd4:	1bae      	subs	r6, r5, r6
 8015dd6:	42b7      	cmp	r7, r6
 8015dd8:	4602      	mov	r2, r0
 8015dda:	460b      	mov	r3, r1
 8015ddc:	d134      	bne.n	8015e48 <_dtoa_r+0x708>
 8015dde:	f7ea fa55 	bl	800028c <__adddf3>
 8015de2:	4642      	mov	r2, r8
 8015de4:	464b      	mov	r3, r9
 8015de6:	4606      	mov	r6, r0
 8015de8:	460f      	mov	r7, r1
 8015dea:	f7ea fe95 	bl	8000b18 <__aeabi_dcmpgt>
 8015dee:	b9c8      	cbnz	r0, 8015e24 <_dtoa_r+0x6e4>
 8015df0:	4642      	mov	r2, r8
 8015df2:	464b      	mov	r3, r9
 8015df4:	4630      	mov	r0, r6
 8015df6:	4639      	mov	r1, r7
 8015df8:	f7ea fe66 	bl	8000ac8 <__aeabi_dcmpeq>
 8015dfc:	b110      	cbz	r0, 8015e04 <_dtoa_r+0x6c4>
 8015dfe:	9b01      	ldr	r3, [sp, #4]
 8015e00:	07db      	lsls	r3, r3, #31
 8015e02:	d40f      	bmi.n	8015e24 <_dtoa_r+0x6e4>
 8015e04:	4651      	mov	r1, sl
 8015e06:	4620      	mov	r0, r4
 8015e08:	f000 fe82 	bl	8016b10 <_Bfree>
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015e10:	702b      	strb	r3, [r5, #0]
 8015e12:	f10b 0301 	add.w	r3, fp, #1
 8015e16:	6013      	str	r3, [r2, #0]
 8015e18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	f43f ace2 	beq.w	80157e4 <_dtoa_r+0xa4>
 8015e20:	601d      	str	r5, [r3, #0]
 8015e22:	e4df      	b.n	80157e4 <_dtoa_r+0xa4>
 8015e24:	465f      	mov	r7, fp
 8015e26:	462b      	mov	r3, r5
 8015e28:	461d      	mov	r5, r3
 8015e2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015e2e:	2a39      	cmp	r2, #57	; 0x39
 8015e30:	d106      	bne.n	8015e40 <_dtoa_r+0x700>
 8015e32:	9a00      	ldr	r2, [sp, #0]
 8015e34:	429a      	cmp	r2, r3
 8015e36:	d1f7      	bne.n	8015e28 <_dtoa_r+0x6e8>
 8015e38:	9900      	ldr	r1, [sp, #0]
 8015e3a:	2230      	movs	r2, #48	; 0x30
 8015e3c:	3701      	adds	r7, #1
 8015e3e:	700a      	strb	r2, [r1, #0]
 8015e40:	781a      	ldrb	r2, [r3, #0]
 8015e42:	3201      	adds	r2, #1
 8015e44:	701a      	strb	r2, [r3, #0]
 8015e46:	e790      	b.n	8015d6a <_dtoa_r+0x62a>
 8015e48:	4ba3      	ldr	r3, [pc, #652]	; (80160d8 <_dtoa_r+0x998>)
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	f7ea fbd4 	bl	80005f8 <__aeabi_dmul>
 8015e50:	2200      	movs	r2, #0
 8015e52:	2300      	movs	r3, #0
 8015e54:	4606      	mov	r6, r0
 8015e56:	460f      	mov	r7, r1
 8015e58:	f7ea fe36 	bl	8000ac8 <__aeabi_dcmpeq>
 8015e5c:	2800      	cmp	r0, #0
 8015e5e:	d09e      	beq.n	8015d9e <_dtoa_r+0x65e>
 8015e60:	e7d0      	b.n	8015e04 <_dtoa_r+0x6c4>
 8015e62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e64:	2a00      	cmp	r2, #0
 8015e66:	f000 80ca 	beq.w	8015ffe <_dtoa_r+0x8be>
 8015e6a:	9a07      	ldr	r2, [sp, #28]
 8015e6c:	2a01      	cmp	r2, #1
 8015e6e:	f300 80ad 	bgt.w	8015fcc <_dtoa_r+0x88c>
 8015e72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015e74:	2a00      	cmp	r2, #0
 8015e76:	f000 80a5 	beq.w	8015fc4 <_dtoa_r+0x884>
 8015e7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015e7e:	9e08      	ldr	r6, [sp, #32]
 8015e80:	9d05      	ldr	r5, [sp, #20]
 8015e82:	9a05      	ldr	r2, [sp, #20]
 8015e84:	441a      	add	r2, r3
 8015e86:	9205      	str	r2, [sp, #20]
 8015e88:	9a06      	ldr	r2, [sp, #24]
 8015e8a:	2101      	movs	r1, #1
 8015e8c:	441a      	add	r2, r3
 8015e8e:	4620      	mov	r0, r4
 8015e90:	9206      	str	r2, [sp, #24]
 8015e92:	f000 ff3d 	bl	8016d10 <__i2b>
 8015e96:	4607      	mov	r7, r0
 8015e98:	b165      	cbz	r5, 8015eb4 <_dtoa_r+0x774>
 8015e9a:	9b06      	ldr	r3, [sp, #24]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	dd09      	ble.n	8015eb4 <_dtoa_r+0x774>
 8015ea0:	42ab      	cmp	r3, r5
 8015ea2:	9a05      	ldr	r2, [sp, #20]
 8015ea4:	bfa8      	it	ge
 8015ea6:	462b      	movge	r3, r5
 8015ea8:	1ad2      	subs	r2, r2, r3
 8015eaa:	9205      	str	r2, [sp, #20]
 8015eac:	9a06      	ldr	r2, [sp, #24]
 8015eae:	1aed      	subs	r5, r5, r3
 8015eb0:	1ad3      	subs	r3, r2, r3
 8015eb2:	9306      	str	r3, [sp, #24]
 8015eb4:	9b08      	ldr	r3, [sp, #32]
 8015eb6:	b1f3      	cbz	r3, 8015ef6 <_dtoa_r+0x7b6>
 8015eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	f000 80a3 	beq.w	8016006 <_dtoa_r+0x8c6>
 8015ec0:	2e00      	cmp	r6, #0
 8015ec2:	dd10      	ble.n	8015ee6 <_dtoa_r+0x7a6>
 8015ec4:	4639      	mov	r1, r7
 8015ec6:	4632      	mov	r2, r6
 8015ec8:	4620      	mov	r0, r4
 8015eca:	f000 ffe1 	bl	8016e90 <__pow5mult>
 8015ece:	4652      	mov	r2, sl
 8015ed0:	4601      	mov	r1, r0
 8015ed2:	4607      	mov	r7, r0
 8015ed4:	4620      	mov	r0, r4
 8015ed6:	f000 ff31 	bl	8016d3c <__multiply>
 8015eda:	4651      	mov	r1, sl
 8015edc:	4680      	mov	r8, r0
 8015ede:	4620      	mov	r0, r4
 8015ee0:	f000 fe16 	bl	8016b10 <_Bfree>
 8015ee4:	46c2      	mov	sl, r8
 8015ee6:	9b08      	ldr	r3, [sp, #32]
 8015ee8:	1b9a      	subs	r2, r3, r6
 8015eea:	d004      	beq.n	8015ef6 <_dtoa_r+0x7b6>
 8015eec:	4651      	mov	r1, sl
 8015eee:	4620      	mov	r0, r4
 8015ef0:	f000 ffce 	bl	8016e90 <__pow5mult>
 8015ef4:	4682      	mov	sl, r0
 8015ef6:	2101      	movs	r1, #1
 8015ef8:	4620      	mov	r0, r4
 8015efa:	f000 ff09 	bl	8016d10 <__i2b>
 8015efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	4606      	mov	r6, r0
 8015f04:	f340 8081 	ble.w	801600a <_dtoa_r+0x8ca>
 8015f08:	461a      	mov	r2, r3
 8015f0a:	4601      	mov	r1, r0
 8015f0c:	4620      	mov	r0, r4
 8015f0e:	f000 ffbf 	bl	8016e90 <__pow5mult>
 8015f12:	9b07      	ldr	r3, [sp, #28]
 8015f14:	2b01      	cmp	r3, #1
 8015f16:	4606      	mov	r6, r0
 8015f18:	dd7a      	ble.n	8016010 <_dtoa_r+0x8d0>
 8015f1a:	f04f 0800 	mov.w	r8, #0
 8015f1e:	6933      	ldr	r3, [r6, #16]
 8015f20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015f24:	6918      	ldr	r0, [r3, #16]
 8015f26:	f000 fea5 	bl	8016c74 <__hi0bits>
 8015f2a:	f1c0 0020 	rsb	r0, r0, #32
 8015f2e:	9b06      	ldr	r3, [sp, #24]
 8015f30:	4418      	add	r0, r3
 8015f32:	f010 001f 	ands.w	r0, r0, #31
 8015f36:	f000 8094 	beq.w	8016062 <_dtoa_r+0x922>
 8015f3a:	f1c0 0320 	rsb	r3, r0, #32
 8015f3e:	2b04      	cmp	r3, #4
 8015f40:	f340 8085 	ble.w	801604e <_dtoa_r+0x90e>
 8015f44:	9b05      	ldr	r3, [sp, #20]
 8015f46:	f1c0 001c 	rsb	r0, r0, #28
 8015f4a:	4403      	add	r3, r0
 8015f4c:	9305      	str	r3, [sp, #20]
 8015f4e:	9b06      	ldr	r3, [sp, #24]
 8015f50:	4403      	add	r3, r0
 8015f52:	4405      	add	r5, r0
 8015f54:	9306      	str	r3, [sp, #24]
 8015f56:	9b05      	ldr	r3, [sp, #20]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	dd05      	ble.n	8015f68 <_dtoa_r+0x828>
 8015f5c:	4651      	mov	r1, sl
 8015f5e:	461a      	mov	r2, r3
 8015f60:	4620      	mov	r0, r4
 8015f62:	f000 ffef 	bl	8016f44 <__lshift>
 8015f66:	4682      	mov	sl, r0
 8015f68:	9b06      	ldr	r3, [sp, #24]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	dd05      	ble.n	8015f7a <_dtoa_r+0x83a>
 8015f6e:	4631      	mov	r1, r6
 8015f70:	461a      	mov	r2, r3
 8015f72:	4620      	mov	r0, r4
 8015f74:	f000 ffe6 	bl	8016f44 <__lshift>
 8015f78:	4606      	mov	r6, r0
 8015f7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d072      	beq.n	8016066 <_dtoa_r+0x926>
 8015f80:	4631      	mov	r1, r6
 8015f82:	4650      	mov	r0, sl
 8015f84:	f001 f84a 	bl	801701c <__mcmp>
 8015f88:	2800      	cmp	r0, #0
 8015f8a:	da6c      	bge.n	8016066 <_dtoa_r+0x926>
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	4651      	mov	r1, sl
 8015f90:	220a      	movs	r2, #10
 8015f92:	4620      	mov	r0, r4
 8015f94:	f000 fdde 	bl	8016b54 <__multadd>
 8015f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015f9e:	4682      	mov	sl, r0
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	f000 81b0 	beq.w	8016306 <_dtoa_r+0xbc6>
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	4639      	mov	r1, r7
 8015faa:	220a      	movs	r2, #10
 8015fac:	4620      	mov	r0, r4
 8015fae:	f000 fdd1 	bl	8016b54 <__multadd>
 8015fb2:	9b01      	ldr	r3, [sp, #4]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	4607      	mov	r7, r0
 8015fb8:	f300 8096 	bgt.w	80160e8 <_dtoa_r+0x9a8>
 8015fbc:	9b07      	ldr	r3, [sp, #28]
 8015fbe:	2b02      	cmp	r3, #2
 8015fc0:	dc59      	bgt.n	8016076 <_dtoa_r+0x936>
 8015fc2:	e091      	b.n	80160e8 <_dtoa_r+0x9a8>
 8015fc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015fc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015fca:	e758      	b.n	8015e7e <_dtoa_r+0x73e>
 8015fcc:	9b04      	ldr	r3, [sp, #16]
 8015fce:	1e5e      	subs	r6, r3, #1
 8015fd0:	9b08      	ldr	r3, [sp, #32]
 8015fd2:	42b3      	cmp	r3, r6
 8015fd4:	bfbf      	itttt	lt
 8015fd6:	9b08      	ldrlt	r3, [sp, #32]
 8015fd8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8015fda:	9608      	strlt	r6, [sp, #32]
 8015fdc:	1af3      	sublt	r3, r6, r3
 8015fde:	bfb4      	ite	lt
 8015fe0:	18d2      	addlt	r2, r2, r3
 8015fe2:	1b9e      	subge	r6, r3, r6
 8015fe4:	9b04      	ldr	r3, [sp, #16]
 8015fe6:	bfbc      	itt	lt
 8015fe8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8015fea:	2600      	movlt	r6, #0
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	bfb7      	itett	lt
 8015ff0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8015ff4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8015ff8:	1a9d      	sublt	r5, r3, r2
 8015ffa:	2300      	movlt	r3, #0
 8015ffc:	e741      	b.n	8015e82 <_dtoa_r+0x742>
 8015ffe:	9e08      	ldr	r6, [sp, #32]
 8016000:	9d05      	ldr	r5, [sp, #20]
 8016002:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016004:	e748      	b.n	8015e98 <_dtoa_r+0x758>
 8016006:	9a08      	ldr	r2, [sp, #32]
 8016008:	e770      	b.n	8015eec <_dtoa_r+0x7ac>
 801600a:	9b07      	ldr	r3, [sp, #28]
 801600c:	2b01      	cmp	r3, #1
 801600e:	dc19      	bgt.n	8016044 <_dtoa_r+0x904>
 8016010:	9b02      	ldr	r3, [sp, #8]
 8016012:	b9bb      	cbnz	r3, 8016044 <_dtoa_r+0x904>
 8016014:	9b03      	ldr	r3, [sp, #12]
 8016016:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801601a:	b99b      	cbnz	r3, 8016044 <_dtoa_r+0x904>
 801601c:	9b03      	ldr	r3, [sp, #12]
 801601e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016022:	0d1b      	lsrs	r3, r3, #20
 8016024:	051b      	lsls	r3, r3, #20
 8016026:	b183      	cbz	r3, 801604a <_dtoa_r+0x90a>
 8016028:	9b05      	ldr	r3, [sp, #20]
 801602a:	3301      	adds	r3, #1
 801602c:	9305      	str	r3, [sp, #20]
 801602e:	9b06      	ldr	r3, [sp, #24]
 8016030:	3301      	adds	r3, #1
 8016032:	9306      	str	r3, [sp, #24]
 8016034:	f04f 0801 	mov.w	r8, #1
 8016038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801603a:	2b00      	cmp	r3, #0
 801603c:	f47f af6f 	bne.w	8015f1e <_dtoa_r+0x7de>
 8016040:	2001      	movs	r0, #1
 8016042:	e774      	b.n	8015f2e <_dtoa_r+0x7ee>
 8016044:	f04f 0800 	mov.w	r8, #0
 8016048:	e7f6      	b.n	8016038 <_dtoa_r+0x8f8>
 801604a:	4698      	mov	r8, r3
 801604c:	e7f4      	b.n	8016038 <_dtoa_r+0x8f8>
 801604e:	d082      	beq.n	8015f56 <_dtoa_r+0x816>
 8016050:	9a05      	ldr	r2, [sp, #20]
 8016052:	331c      	adds	r3, #28
 8016054:	441a      	add	r2, r3
 8016056:	9205      	str	r2, [sp, #20]
 8016058:	9a06      	ldr	r2, [sp, #24]
 801605a:	441a      	add	r2, r3
 801605c:	441d      	add	r5, r3
 801605e:	9206      	str	r2, [sp, #24]
 8016060:	e779      	b.n	8015f56 <_dtoa_r+0x816>
 8016062:	4603      	mov	r3, r0
 8016064:	e7f4      	b.n	8016050 <_dtoa_r+0x910>
 8016066:	9b04      	ldr	r3, [sp, #16]
 8016068:	2b00      	cmp	r3, #0
 801606a:	dc37      	bgt.n	80160dc <_dtoa_r+0x99c>
 801606c:	9b07      	ldr	r3, [sp, #28]
 801606e:	2b02      	cmp	r3, #2
 8016070:	dd34      	ble.n	80160dc <_dtoa_r+0x99c>
 8016072:	9b04      	ldr	r3, [sp, #16]
 8016074:	9301      	str	r3, [sp, #4]
 8016076:	9b01      	ldr	r3, [sp, #4]
 8016078:	b963      	cbnz	r3, 8016094 <_dtoa_r+0x954>
 801607a:	4631      	mov	r1, r6
 801607c:	2205      	movs	r2, #5
 801607e:	4620      	mov	r0, r4
 8016080:	f000 fd68 	bl	8016b54 <__multadd>
 8016084:	4601      	mov	r1, r0
 8016086:	4606      	mov	r6, r0
 8016088:	4650      	mov	r0, sl
 801608a:	f000 ffc7 	bl	801701c <__mcmp>
 801608e:	2800      	cmp	r0, #0
 8016090:	f73f adbb 	bgt.w	8015c0a <_dtoa_r+0x4ca>
 8016094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016096:	9d00      	ldr	r5, [sp, #0]
 8016098:	ea6f 0b03 	mvn.w	fp, r3
 801609c:	f04f 0800 	mov.w	r8, #0
 80160a0:	4631      	mov	r1, r6
 80160a2:	4620      	mov	r0, r4
 80160a4:	f000 fd34 	bl	8016b10 <_Bfree>
 80160a8:	2f00      	cmp	r7, #0
 80160aa:	f43f aeab 	beq.w	8015e04 <_dtoa_r+0x6c4>
 80160ae:	f1b8 0f00 	cmp.w	r8, #0
 80160b2:	d005      	beq.n	80160c0 <_dtoa_r+0x980>
 80160b4:	45b8      	cmp	r8, r7
 80160b6:	d003      	beq.n	80160c0 <_dtoa_r+0x980>
 80160b8:	4641      	mov	r1, r8
 80160ba:	4620      	mov	r0, r4
 80160bc:	f000 fd28 	bl	8016b10 <_Bfree>
 80160c0:	4639      	mov	r1, r7
 80160c2:	4620      	mov	r0, r4
 80160c4:	f000 fd24 	bl	8016b10 <_Bfree>
 80160c8:	e69c      	b.n	8015e04 <_dtoa_r+0x6c4>
 80160ca:	2600      	movs	r6, #0
 80160cc:	4637      	mov	r7, r6
 80160ce:	e7e1      	b.n	8016094 <_dtoa_r+0x954>
 80160d0:	46bb      	mov	fp, r7
 80160d2:	4637      	mov	r7, r6
 80160d4:	e599      	b.n	8015c0a <_dtoa_r+0x4ca>
 80160d6:	bf00      	nop
 80160d8:	40240000 	.word	0x40240000
 80160dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160de:	2b00      	cmp	r3, #0
 80160e0:	f000 80c8 	beq.w	8016274 <_dtoa_r+0xb34>
 80160e4:	9b04      	ldr	r3, [sp, #16]
 80160e6:	9301      	str	r3, [sp, #4]
 80160e8:	2d00      	cmp	r5, #0
 80160ea:	dd05      	ble.n	80160f8 <_dtoa_r+0x9b8>
 80160ec:	4639      	mov	r1, r7
 80160ee:	462a      	mov	r2, r5
 80160f0:	4620      	mov	r0, r4
 80160f2:	f000 ff27 	bl	8016f44 <__lshift>
 80160f6:	4607      	mov	r7, r0
 80160f8:	f1b8 0f00 	cmp.w	r8, #0
 80160fc:	d05b      	beq.n	80161b6 <_dtoa_r+0xa76>
 80160fe:	6879      	ldr	r1, [r7, #4]
 8016100:	4620      	mov	r0, r4
 8016102:	f000 fcc5 	bl	8016a90 <_Balloc>
 8016106:	4605      	mov	r5, r0
 8016108:	b928      	cbnz	r0, 8016116 <_dtoa_r+0x9d6>
 801610a:	4b83      	ldr	r3, [pc, #524]	; (8016318 <_dtoa_r+0xbd8>)
 801610c:	4602      	mov	r2, r0
 801610e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8016112:	f7ff bb2e 	b.w	8015772 <_dtoa_r+0x32>
 8016116:	693a      	ldr	r2, [r7, #16]
 8016118:	3202      	adds	r2, #2
 801611a:	0092      	lsls	r2, r2, #2
 801611c:	f107 010c 	add.w	r1, r7, #12
 8016120:	300c      	adds	r0, #12
 8016122:	f7ff fa4a 	bl	80155ba <memcpy>
 8016126:	2201      	movs	r2, #1
 8016128:	4629      	mov	r1, r5
 801612a:	4620      	mov	r0, r4
 801612c:	f000 ff0a 	bl	8016f44 <__lshift>
 8016130:	9b00      	ldr	r3, [sp, #0]
 8016132:	3301      	adds	r3, #1
 8016134:	9304      	str	r3, [sp, #16]
 8016136:	e9dd 2300 	ldrd	r2, r3, [sp]
 801613a:	4413      	add	r3, r2
 801613c:	9308      	str	r3, [sp, #32]
 801613e:	9b02      	ldr	r3, [sp, #8]
 8016140:	f003 0301 	and.w	r3, r3, #1
 8016144:	46b8      	mov	r8, r7
 8016146:	9306      	str	r3, [sp, #24]
 8016148:	4607      	mov	r7, r0
 801614a:	9b04      	ldr	r3, [sp, #16]
 801614c:	4631      	mov	r1, r6
 801614e:	3b01      	subs	r3, #1
 8016150:	4650      	mov	r0, sl
 8016152:	9301      	str	r3, [sp, #4]
 8016154:	f7ff fa6c 	bl	8015630 <quorem>
 8016158:	4641      	mov	r1, r8
 801615a:	9002      	str	r0, [sp, #8]
 801615c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8016160:	4650      	mov	r0, sl
 8016162:	f000 ff5b 	bl	801701c <__mcmp>
 8016166:	463a      	mov	r2, r7
 8016168:	9005      	str	r0, [sp, #20]
 801616a:	4631      	mov	r1, r6
 801616c:	4620      	mov	r0, r4
 801616e:	f000 ff71 	bl	8017054 <__mdiff>
 8016172:	68c2      	ldr	r2, [r0, #12]
 8016174:	4605      	mov	r5, r0
 8016176:	bb02      	cbnz	r2, 80161ba <_dtoa_r+0xa7a>
 8016178:	4601      	mov	r1, r0
 801617a:	4650      	mov	r0, sl
 801617c:	f000 ff4e 	bl	801701c <__mcmp>
 8016180:	4602      	mov	r2, r0
 8016182:	4629      	mov	r1, r5
 8016184:	4620      	mov	r0, r4
 8016186:	9209      	str	r2, [sp, #36]	; 0x24
 8016188:	f000 fcc2 	bl	8016b10 <_Bfree>
 801618c:	9b07      	ldr	r3, [sp, #28]
 801618e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016190:	9d04      	ldr	r5, [sp, #16]
 8016192:	ea43 0102 	orr.w	r1, r3, r2
 8016196:	9b06      	ldr	r3, [sp, #24]
 8016198:	4319      	orrs	r1, r3
 801619a:	d110      	bne.n	80161be <_dtoa_r+0xa7e>
 801619c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80161a0:	d029      	beq.n	80161f6 <_dtoa_r+0xab6>
 80161a2:	9b05      	ldr	r3, [sp, #20]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	dd02      	ble.n	80161ae <_dtoa_r+0xa6e>
 80161a8:	9b02      	ldr	r3, [sp, #8]
 80161aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80161ae:	9b01      	ldr	r3, [sp, #4]
 80161b0:	f883 9000 	strb.w	r9, [r3]
 80161b4:	e774      	b.n	80160a0 <_dtoa_r+0x960>
 80161b6:	4638      	mov	r0, r7
 80161b8:	e7ba      	b.n	8016130 <_dtoa_r+0x9f0>
 80161ba:	2201      	movs	r2, #1
 80161bc:	e7e1      	b.n	8016182 <_dtoa_r+0xa42>
 80161be:	9b05      	ldr	r3, [sp, #20]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	db04      	blt.n	80161ce <_dtoa_r+0xa8e>
 80161c4:	9907      	ldr	r1, [sp, #28]
 80161c6:	430b      	orrs	r3, r1
 80161c8:	9906      	ldr	r1, [sp, #24]
 80161ca:	430b      	orrs	r3, r1
 80161cc:	d120      	bne.n	8016210 <_dtoa_r+0xad0>
 80161ce:	2a00      	cmp	r2, #0
 80161d0:	dded      	ble.n	80161ae <_dtoa_r+0xa6e>
 80161d2:	4651      	mov	r1, sl
 80161d4:	2201      	movs	r2, #1
 80161d6:	4620      	mov	r0, r4
 80161d8:	f000 feb4 	bl	8016f44 <__lshift>
 80161dc:	4631      	mov	r1, r6
 80161de:	4682      	mov	sl, r0
 80161e0:	f000 ff1c 	bl	801701c <__mcmp>
 80161e4:	2800      	cmp	r0, #0
 80161e6:	dc03      	bgt.n	80161f0 <_dtoa_r+0xab0>
 80161e8:	d1e1      	bne.n	80161ae <_dtoa_r+0xa6e>
 80161ea:	f019 0f01 	tst.w	r9, #1
 80161ee:	d0de      	beq.n	80161ae <_dtoa_r+0xa6e>
 80161f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80161f4:	d1d8      	bne.n	80161a8 <_dtoa_r+0xa68>
 80161f6:	9a01      	ldr	r2, [sp, #4]
 80161f8:	2339      	movs	r3, #57	; 0x39
 80161fa:	7013      	strb	r3, [r2, #0]
 80161fc:	462b      	mov	r3, r5
 80161fe:	461d      	mov	r5, r3
 8016200:	3b01      	subs	r3, #1
 8016202:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016206:	2a39      	cmp	r2, #57	; 0x39
 8016208:	d06c      	beq.n	80162e4 <_dtoa_r+0xba4>
 801620a:	3201      	adds	r2, #1
 801620c:	701a      	strb	r2, [r3, #0]
 801620e:	e747      	b.n	80160a0 <_dtoa_r+0x960>
 8016210:	2a00      	cmp	r2, #0
 8016212:	dd07      	ble.n	8016224 <_dtoa_r+0xae4>
 8016214:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016218:	d0ed      	beq.n	80161f6 <_dtoa_r+0xab6>
 801621a:	9a01      	ldr	r2, [sp, #4]
 801621c:	f109 0301 	add.w	r3, r9, #1
 8016220:	7013      	strb	r3, [r2, #0]
 8016222:	e73d      	b.n	80160a0 <_dtoa_r+0x960>
 8016224:	9b04      	ldr	r3, [sp, #16]
 8016226:	9a08      	ldr	r2, [sp, #32]
 8016228:	f803 9c01 	strb.w	r9, [r3, #-1]
 801622c:	4293      	cmp	r3, r2
 801622e:	d043      	beq.n	80162b8 <_dtoa_r+0xb78>
 8016230:	4651      	mov	r1, sl
 8016232:	2300      	movs	r3, #0
 8016234:	220a      	movs	r2, #10
 8016236:	4620      	mov	r0, r4
 8016238:	f000 fc8c 	bl	8016b54 <__multadd>
 801623c:	45b8      	cmp	r8, r7
 801623e:	4682      	mov	sl, r0
 8016240:	f04f 0300 	mov.w	r3, #0
 8016244:	f04f 020a 	mov.w	r2, #10
 8016248:	4641      	mov	r1, r8
 801624a:	4620      	mov	r0, r4
 801624c:	d107      	bne.n	801625e <_dtoa_r+0xb1e>
 801624e:	f000 fc81 	bl	8016b54 <__multadd>
 8016252:	4680      	mov	r8, r0
 8016254:	4607      	mov	r7, r0
 8016256:	9b04      	ldr	r3, [sp, #16]
 8016258:	3301      	adds	r3, #1
 801625a:	9304      	str	r3, [sp, #16]
 801625c:	e775      	b.n	801614a <_dtoa_r+0xa0a>
 801625e:	f000 fc79 	bl	8016b54 <__multadd>
 8016262:	4639      	mov	r1, r7
 8016264:	4680      	mov	r8, r0
 8016266:	2300      	movs	r3, #0
 8016268:	220a      	movs	r2, #10
 801626a:	4620      	mov	r0, r4
 801626c:	f000 fc72 	bl	8016b54 <__multadd>
 8016270:	4607      	mov	r7, r0
 8016272:	e7f0      	b.n	8016256 <_dtoa_r+0xb16>
 8016274:	9b04      	ldr	r3, [sp, #16]
 8016276:	9301      	str	r3, [sp, #4]
 8016278:	9d00      	ldr	r5, [sp, #0]
 801627a:	4631      	mov	r1, r6
 801627c:	4650      	mov	r0, sl
 801627e:	f7ff f9d7 	bl	8015630 <quorem>
 8016282:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8016286:	9b00      	ldr	r3, [sp, #0]
 8016288:	f805 9b01 	strb.w	r9, [r5], #1
 801628c:	1aea      	subs	r2, r5, r3
 801628e:	9b01      	ldr	r3, [sp, #4]
 8016290:	4293      	cmp	r3, r2
 8016292:	dd07      	ble.n	80162a4 <_dtoa_r+0xb64>
 8016294:	4651      	mov	r1, sl
 8016296:	2300      	movs	r3, #0
 8016298:	220a      	movs	r2, #10
 801629a:	4620      	mov	r0, r4
 801629c:	f000 fc5a 	bl	8016b54 <__multadd>
 80162a0:	4682      	mov	sl, r0
 80162a2:	e7ea      	b.n	801627a <_dtoa_r+0xb3a>
 80162a4:	9b01      	ldr	r3, [sp, #4]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	bfc8      	it	gt
 80162aa:	461d      	movgt	r5, r3
 80162ac:	9b00      	ldr	r3, [sp, #0]
 80162ae:	bfd8      	it	le
 80162b0:	2501      	movle	r5, #1
 80162b2:	441d      	add	r5, r3
 80162b4:	f04f 0800 	mov.w	r8, #0
 80162b8:	4651      	mov	r1, sl
 80162ba:	2201      	movs	r2, #1
 80162bc:	4620      	mov	r0, r4
 80162be:	f000 fe41 	bl	8016f44 <__lshift>
 80162c2:	4631      	mov	r1, r6
 80162c4:	4682      	mov	sl, r0
 80162c6:	f000 fea9 	bl	801701c <__mcmp>
 80162ca:	2800      	cmp	r0, #0
 80162cc:	dc96      	bgt.n	80161fc <_dtoa_r+0xabc>
 80162ce:	d102      	bne.n	80162d6 <_dtoa_r+0xb96>
 80162d0:	f019 0f01 	tst.w	r9, #1
 80162d4:	d192      	bne.n	80161fc <_dtoa_r+0xabc>
 80162d6:	462b      	mov	r3, r5
 80162d8:	461d      	mov	r5, r3
 80162da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80162de:	2a30      	cmp	r2, #48	; 0x30
 80162e0:	d0fa      	beq.n	80162d8 <_dtoa_r+0xb98>
 80162e2:	e6dd      	b.n	80160a0 <_dtoa_r+0x960>
 80162e4:	9a00      	ldr	r2, [sp, #0]
 80162e6:	429a      	cmp	r2, r3
 80162e8:	d189      	bne.n	80161fe <_dtoa_r+0xabe>
 80162ea:	f10b 0b01 	add.w	fp, fp, #1
 80162ee:	2331      	movs	r3, #49	; 0x31
 80162f0:	e796      	b.n	8016220 <_dtoa_r+0xae0>
 80162f2:	4b0a      	ldr	r3, [pc, #40]	; (801631c <_dtoa_r+0xbdc>)
 80162f4:	f7ff ba99 	b.w	801582a <_dtoa_r+0xea>
 80162f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	f47f aa6d 	bne.w	80157da <_dtoa_r+0x9a>
 8016300:	4b07      	ldr	r3, [pc, #28]	; (8016320 <_dtoa_r+0xbe0>)
 8016302:	f7ff ba92 	b.w	801582a <_dtoa_r+0xea>
 8016306:	9b01      	ldr	r3, [sp, #4]
 8016308:	2b00      	cmp	r3, #0
 801630a:	dcb5      	bgt.n	8016278 <_dtoa_r+0xb38>
 801630c:	9b07      	ldr	r3, [sp, #28]
 801630e:	2b02      	cmp	r3, #2
 8016310:	f73f aeb1 	bgt.w	8016076 <_dtoa_r+0x936>
 8016314:	e7b0      	b.n	8016278 <_dtoa_r+0xb38>
 8016316:	bf00      	nop
 8016318:	0801badc 	.word	0x0801badc
 801631c:	0801b999 	.word	0x0801b999
 8016320:	0801ba77 	.word	0x0801ba77

08016324 <_free_r>:
 8016324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016326:	2900      	cmp	r1, #0
 8016328:	d044      	beq.n	80163b4 <_free_r+0x90>
 801632a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801632e:	9001      	str	r0, [sp, #4]
 8016330:	2b00      	cmp	r3, #0
 8016332:	f1a1 0404 	sub.w	r4, r1, #4
 8016336:	bfb8      	it	lt
 8016338:	18e4      	addlt	r4, r4, r3
 801633a:	f7fd f941 	bl	80135c0 <__malloc_lock>
 801633e:	4a1e      	ldr	r2, [pc, #120]	; (80163b8 <_free_r+0x94>)
 8016340:	9801      	ldr	r0, [sp, #4]
 8016342:	6813      	ldr	r3, [r2, #0]
 8016344:	b933      	cbnz	r3, 8016354 <_free_r+0x30>
 8016346:	6063      	str	r3, [r4, #4]
 8016348:	6014      	str	r4, [r2, #0]
 801634a:	b003      	add	sp, #12
 801634c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016350:	f7fd b93c 	b.w	80135cc <__malloc_unlock>
 8016354:	42a3      	cmp	r3, r4
 8016356:	d908      	bls.n	801636a <_free_r+0x46>
 8016358:	6825      	ldr	r5, [r4, #0]
 801635a:	1961      	adds	r1, r4, r5
 801635c:	428b      	cmp	r3, r1
 801635e:	bf01      	itttt	eq
 8016360:	6819      	ldreq	r1, [r3, #0]
 8016362:	685b      	ldreq	r3, [r3, #4]
 8016364:	1949      	addeq	r1, r1, r5
 8016366:	6021      	streq	r1, [r4, #0]
 8016368:	e7ed      	b.n	8016346 <_free_r+0x22>
 801636a:	461a      	mov	r2, r3
 801636c:	685b      	ldr	r3, [r3, #4]
 801636e:	b10b      	cbz	r3, 8016374 <_free_r+0x50>
 8016370:	42a3      	cmp	r3, r4
 8016372:	d9fa      	bls.n	801636a <_free_r+0x46>
 8016374:	6811      	ldr	r1, [r2, #0]
 8016376:	1855      	adds	r5, r2, r1
 8016378:	42a5      	cmp	r5, r4
 801637a:	d10b      	bne.n	8016394 <_free_r+0x70>
 801637c:	6824      	ldr	r4, [r4, #0]
 801637e:	4421      	add	r1, r4
 8016380:	1854      	adds	r4, r2, r1
 8016382:	42a3      	cmp	r3, r4
 8016384:	6011      	str	r1, [r2, #0]
 8016386:	d1e0      	bne.n	801634a <_free_r+0x26>
 8016388:	681c      	ldr	r4, [r3, #0]
 801638a:	685b      	ldr	r3, [r3, #4]
 801638c:	6053      	str	r3, [r2, #4]
 801638e:	440c      	add	r4, r1
 8016390:	6014      	str	r4, [r2, #0]
 8016392:	e7da      	b.n	801634a <_free_r+0x26>
 8016394:	d902      	bls.n	801639c <_free_r+0x78>
 8016396:	230c      	movs	r3, #12
 8016398:	6003      	str	r3, [r0, #0]
 801639a:	e7d6      	b.n	801634a <_free_r+0x26>
 801639c:	6825      	ldr	r5, [r4, #0]
 801639e:	1961      	adds	r1, r4, r5
 80163a0:	428b      	cmp	r3, r1
 80163a2:	bf04      	itt	eq
 80163a4:	6819      	ldreq	r1, [r3, #0]
 80163a6:	685b      	ldreq	r3, [r3, #4]
 80163a8:	6063      	str	r3, [r4, #4]
 80163aa:	bf04      	itt	eq
 80163ac:	1949      	addeq	r1, r1, r5
 80163ae:	6021      	streq	r1, [r4, #0]
 80163b0:	6054      	str	r4, [r2, #4]
 80163b2:	e7ca      	b.n	801634a <_free_r+0x26>
 80163b4:	b003      	add	sp, #12
 80163b6:	bd30      	pop	{r4, r5, pc}
 80163b8:	200022b8 	.word	0x200022b8

080163bc <rshift>:
 80163bc:	6903      	ldr	r3, [r0, #16]
 80163be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80163c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80163ca:	f100 0414 	add.w	r4, r0, #20
 80163ce:	dd45      	ble.n	801645c <rshift+0xa0>
 80163d0:	f011 011f 	ands.w	r1, r1, #31
 80163d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80163d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80163dc:	d10c      	bne.n	80163f8 <rshift+0x3c>
 80163de:	f100 0710 	add.w	r7, r0, #16
 80163e2:	4629      	mov	r1, r5
 80163e4:	42b1      	cmp	r1, r6
 80163e6:	d334      	bcc.n	8016452 <rshift+0x96>
 80163e8:	1a9b      	subs	r3, r3, r2
 80163ea:	009b      	lsls	r3, r3, #2
 80163ec:	1eea      	subs	r2, r5, #3
 80163ee:	4296      	cmp	r6, r2
 80163f0:	bf38      	it	cc
 80163f2:	2300      	movcc	r3, #0
 80163f4:	4423      	add	r3, r4
 80163f6:	e015      	b.n	8016424 <rshift+0x68>
 80163f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80163fc:	f1c1 0820 	rsb	r8, r1, #32
 8016400:	40cf      	lsrs	r7, r1
 8016402:	f105 0e04 	add.w	lr, r5, #4
 8016406:	46a1      	mov	r9, r4
 8016408:	4576      	cmp	r6, lr
 801640a:	46f4      	mov	ip, lr
 801640c:	d815      	bhi.n	801643a <rshift+0x7e>
 801640e:	1a9a      	subs	r2, r3, r2
 8016410:	0092      	lsls	r2, r2, #2
 8016412:	3a04      	subs	r2, #4
 8016414:	3501      	adds	r5, #1
 8016416:	42ae      	cmp	r6, r5
 8016418:	bf38      	it	cc
 801641a:	2200      	movcc	r2, #0
 801641c:	18a3      	adds	r3, r4, r2
 801641e:	50a7      	str	r7, [r4, r2]
 8016420:	b107      	cbz	r7, 8016424 <rshift+0x68>
 8016422:	3304      	adds	r3, #4
 8016424:	1b1a      	subs	r2, r3, r4
 8016426:	42a3      	cmp	r3, r4
 8016428:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801642c:	bf08      	it	eq
 801642e:	2300      	moveq	r3, #0
 8016430:	6102      	str	r2, [r0, #16]
 8016432:	bf08      	it	eq
 8016434:	6143      	streq	r3, [r0, #20]
 8016436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801643a:	f8dc c000 	ldr.w	ip, [ip]
 801643e:	fa0c fc08 	lsl.w	ip, ip, r8
 8016442:	ea4c 0707 	orr.w	r7, ip, r7
 8016446:	f849 7b04 	str.w	r7, [r9], #4
 801644a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801644e:	40cf      	lsrs	r7, r1
 8016450:	e7da      	b.n	8016408 <rshift+0x4c>
 8016452:	f851 cb04 	ldr.w	ip, [r1], #4
 8016456:	f847 cf04 	str.w	ip, [r7, #4]!
 801645a:	e7c3      	b.n	80163e4 <rshift+0x28>
 801645c:	4623      	mov	r3, r4
 801645e:	e7e1      	b.n	8016424 <rshift+0x68>

08016460 <__hexdig_fun>:
 8016460:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016464:	2b09      	cmp	r3, #9
 8016466:	d802      	bhi.n	801646e <__hexdig_fun+0xe>
 8016468:	3820      	subs	r0, #32
 801646a:	b2c0      	uxtb	r0, r0
 801646c:	4770      	bx	lr
 801646e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016472:	2b05      	cmp	r3, #5
 8016474:	d801      	bhi.n	801647a <__hexdig_fun+0x1a>
 8016476:	3847      	subs	r0, #71	; 0x47
 8016478:	e7f7      	b.n	801646a <__hexdig_fun+0xa>
 801647a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801647e:	2b05      	cmp	r3, #5
 8016480:	d801      	bhi.n	8016486 <__hexdig_fun+0x26>
 8016482:	3827      	subs	r0, #39	; 0x27
 8016484:	e7f1      	b.n	801646a <__hexdig_fun+0xa>
 8016486:	2000      	movs	r0, #0
 8016488:	4770      	bx	lr
	...

0801648c <__gethex>:
 801648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016490:	4617      	mov	r7, r2
 8016492:	680a      	ldr	r2, [r1, #0]
 8016494:	b085      	sub	sp, #20
 8016496:	f102 0b02 	add.w	fp, r2, #2
 801649a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801649e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80164a2:	4681      	mov	r9, r0
 80164a4:	468a      	mov	sl, r1
 80164a6:	9302      	str	r3, [sp, #8]
 80164a8:	32fe      	adds	r2, #254	; 0xfe
 80164aa:	eb02 030b 	add.w	r3, r2, fp
 80164ae:	46d8      	mov	r8, fp
 80164b0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80164b4:	9301      	str	r3, [sp, #4]
 80164b6:	2830      	cmp	r0, #48	; 0x30
 80164b8:	d0f7      	beq.n	80164aa <__gethex+0x1e>
 80164ba:	f7ff ffd1 	bl	8016460 <__hexdig_fun>
 80164be:	4604      	mov	r4, r0
 80164c0:	2800      	cmp	r0, #0
 80164c2:	d138      	bne.n	8016536 <__gethex+0xaa>
 80164c4:	49a7      	ldr	r1, [pc, #668]	; (8016764 <__gethex+0x2d8>)
 80164c6:	2201      	movs	r2, #1
 80164c8:	4640      	mov	r0, r8
 80164ca:	f7fe ff62 	bl	8015392 <strncmp>
 80164ce:	4606      	mov	r6, r0
 80164d0:	2800      	cmp	r0, #0
 80164d2:	d169      	bne.n	80165a8 <__gethex+0x11c>
 80164d4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80164d8:	465d      	mov	r5, fp
 80164da:	f7ff ffc1 	bl	8016460 <__hexdig_fun>
 80164de:	2800      	cmp	r0, #0
 80164e0:	d064      	beq.n	80165ac <__gethex+0x120>
 80164e2:	465a      	mov	r2, fp
 80164e4:	7810      	ldrb	r0, [r2, #0]
 80164e6:	2830      	cmp	r0, #48	; 0x30
 80164e8:	4690      	mov	r8, r2
 80164ea:	f102 0201 	add.w	r2, r2, #1
 80164ee:	d0f9      	beq.n	80164e4 <__gethex+0x58>
 80164f0:	f7ff ffb6 	bl	8016460 <__hexdig_fun>
 80164f4:	2301      	movs	r3, #1
 80164f6:	fab0 f480 	clz	r4, r0
 80164fa:	0964      	lsrs	r4, r4, #5
 80164fc:	465e      	mov	r6, fp
 80164fe:	9301      	str	r3, [sp, #4]
 8016500:	4642      	mov	r2, r8
 8016502:	4615      	mov	r5, r2
 8016504:	3201      	adds	r2, #1
 8016506:	7828      	ldrb	r0, [r5, #0]
 8016508:	f7ff ffaa 	bl	8016460 <__hexdig_fun>
 801650c:	2800      	cmp	r0, #0
 801650e:	d1f8      	bne.n	8016502 <__gethex+0x76>
 8016510:	4994      	ldr	r1, [pc, #592]	; (8016764 <__gethex+0x2d8>)
 8016512:	2201      	movs	r2, #1
 8016514:	4628      	mov	r0, r5
 8016516:	f7fe ff3c 	bl	8015392 <strncmp>
 801651a:	b978      	cbnz	r0, 801653c <__gethex+0xb0>
 801651c:	b946      	cbnz	r6, 8016530 <__gethex+0xa4>
 801651e:	1c6e      	adds	r6, r5, #1
 8016520:	4632      	mov	r2, r6
 8016522:	4615      	mov	r5, r2
 8016524:	3201      	adds	r2, #1
 8016526:	7828      	ldrb	r0, [r5, #0]
 8016528:	f7ff ff9a 	bl	8016460 <__hexdig_fun>
 801652c:	2800      	cmp	r0, #0
 801652e:	d1f8      	bne.n	8016522 <__gethex+0x96>
 8016530:	1b73      	subs	r3, r6, r5
 8016532:	009e      	lsls	r6, r3, #2
 8016534:	e004      	b.n	8016540 <__gethex+0xb4>
 8016536:	2400      	movs	r4, #0
 8016538:	4626      	mov	r6, r4
 801653a:	e7e1      	b.n	8016500 <__gethex+0x74>
 801653c:	2e00      	cmp	r6, #0
 801653e:	d1f7      	bne.n	8016530 <__gethex+0xa4>
 8016540:	782b      	ldrb	r3, [r5, #0]
 8016542:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016546:	2b50      	cmp	r3, #80	; 0x50
 8016548:	d13d      	bne.n	80165c6 <__gethex+0x13a>
 801654a:	786b      	ldrb	r3, [r5, #1]
 801654c:	2b2b      	cmp	r3, #43	; 0x2b
 801654e:	d02f      	beq.n	80165b0 <__gethex+0x124>
 8016550:	2b2d      	cmp	r3, #45	; 0x2d
 8016552:	d031      	beq.n	80165b8 <__gethex+0x12c>
 8016554:	1c69      	adds	r1, r5, #1
 8016556:	f04f 0b00 	mov.w	fp, #0
 801655a:	7808      	ldrb	r0, [r1, #0]
 801655c:	f7ff ff80 	bl	8016460 <__hexdig_fun>
 8016560:	1e42      	subs	r2, r0, #1
 8016562:	b2d2      	uxtb	r2, r2
 8016564:	2a18      	cmp	r2, #24
 8016566:	d82e      	bhi.n	80165c6 <__gethex+0x13a>
 8016568:	f1a0 0210 	sub.w	r2, r0, #16
 801656c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016570:	f7ff ff76 	bl	8016460 <__hexdig_fun>
 8016574:	f100 3cff 	add.w	ip, r0, #4294967295
 8016578:	fa5f fc8c 	uxtb.w	ip, ip
 801657c:	f1bc 0f18 	cmp.w	ip, #24
 8016580:	d91d      	bls.n	80165be <__gethex+0x132>
 8016582:	f1bb 0f00 	cmp.w	fp, #0
 8016586:	d000      	beq.n	801658a <__gethex+0xfe>
 8016588:	4252      	negs	r2, r2
 801658a:	4416      	add	r6, r2
 801658c:	f8ca 1000 	str.w	r1, [sl]
 8016590:	b1dc      	cbz	r4, 80165ca <__gethex+0x13e>
 8016592:	9b01      	ldr	r3, [sp, #4]
 8016594:	2b00      	cmp	r3, #0
 8016596:	bf14      	ite	ne
 8016598:	f04f 0800 	movne.w	r8, #0
 801659c:	f04f 0806 	moveq.w	r8, #6
 80165a0:	4640      	mov	r0, r8
 80165a2:	b005      	add	sp, #20
 80165a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165a8:	4645      	mov	r5, r8
 80165aa:	4626      	mov	r6, r4
 80165ac:	2401      	movs	r4, #1
 80165ae:	e7c7      	b.n	8016540 <__gethex+0xb4>
 80165b0:	f04f 0b00 	mov.w	fp, #0
 80165b4:	1ca9      	adds	r1, r5, #2
 80165b6:	e7d0      	b.n	801655a <__gethex+0xce>
 80165b8:	f04f 0b01 	mov.w	fp, #1
 80165bc:	e7fa      	b.n	80165b4 <__gethex+0x128>
 80165be:	230a      	movs	r3, #10
 80165c0:	fb03 0002 	mla	r0, r3, r2, r0
 80165c4:	e7d0      	b.n	8016568 <__gethex+0xdc>
 80165c6:	4629      	mov	r1, r5
 80165c8:	e7e0      	b.n	801658c <__gethex+0x100>
 80165ca:	eba5 0308 	sub.w	r3, r5, r8
 80165ce:	3b01      	subs	r3, #1
 80165d0:	4621      	mov	r1, r4
 80165d2:	2b07      	cmp	r3, #7
 80165d4:	dc0a      	bgt.n	80165ec <__gethex+0x160>
 80165d6:	4648      	mov	r0, r9
 80165d8:	f000 fa5a 	bl	8016a90 <_Balloc>
 80165dc:	4604      	mov	r4, r0
 80165de:	b940      	cbnz	r0, 80165f2 <__gethex+0x166>
 80165e0:	4b61      	ldr	r3, [pc, #388]	; (8016768 <__gethex+0x2dc>)
 80165e2:	4602      	mov	r2, r0
 80165e4:	21e4      	movs	r1, #228	; 0xe4
 80165e6:	4861      	ldr	r0, [pc, #388]	; (801676c <__gethex+0x2e0>)
 80165e8:	f7ff f804 	bl	80155f4 <__assert_func>
 80165ec:	3101      	adds	r1, #1
 80165ee:	105b      	asrs	r3, r3, #1
 80165f0:	e7ef      	b.n	80165d2 <__gethex+0x146>
 80165f2:	f100 0a14 	add.w	sl, r0, #20
 80165f6:	2300      	movs	r3, #0
 80165f8:	495a      	ldr	r1, [pc, #360]	; (8016764 <__gethex+0x2d8>)
 80165fa:	f8cd a004 	str.w	sl, [sp, #4]
 80165fe:	469b      	mov	fp, r3
 8016600:	45a8      	cmp	r8, r5
 8016602:	d342      	bcc.n	801668a <__gethex+0x1fe>
 8016604:	9801      	ldr	r0, [sp, #4]
 8016606:	f840 bb04 	str.w	fp, [r0], #4
 801660a:	eba0 000a 	sub.w	r0, r0, sl
 801660e:	1080      	asrs	r0, r0, #2
 8016610:	6120      	str	r0, [r4, #16]
 8016612:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8016616:	4658      	mov	r0, fp
 8016618:	f000 fb2c 	bl	8016c74 <__hi0bits>
 801661c:	683d      	ldr	r5, [r7, #0]
 801661e:	eba8 0000 	sub.w	r0, r8, r0
 8016622:	42a8      	cmp	r0, r5
 8016624:	dd59      	ble.n	80166da <__gethex+0x24e>
 8016626:	eba0 0805 	sub.w	r8, r0, r5
 801662a:	4641      	mov	r1, r8
 801662c:	4620      	mov	r0, r4
 801662e:	f000 febb 	bl	80173a8 <__any_on>
 8016632:	4683      	mov	fp, r0
 8016634:	b1b8      	cbz	r0, 8016666 <__gethex+0x1da>
 8016636:	f108 33ff 	add.w	r3, r8, #4294967295
 801663a:	1159      	asrs	r1, r3, #5
 801663c:	f003 021f 	and.w	r2, r3, #31
 8016640:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016644:	f04f 0b01 	mov.w	fp, #1
 8016648:	fa0b f202 	lsl.w	r2, fp, r2
 801664c:	420a      	tst	r2, r1
 801664e:	d00a      	beq.n	8016666 <__gethex+0x1da>
 8016650:	455b      	cmp	r3, fp
 8016652:	dd06      	ble.n	8016662 <__gethex+0x1d6>
 8016654:	f1a8 0102 	sub.w	r1, r8, #2
 8016658:	4620      	mov	r0, r4
 801665a:	f000 fea5 	bl	80173a8 <__any_on>
 801665e:	2800      	cmp	r0, #0
 8016660:	d138      	bne.n	80166d4 <__gethex+0x248>
 8016662:	f04f 0b02 	mov.w	fp, #2
 8016666:	4641      	mov	r1, r8
 8016668:	4620      	mov	r0, r4
 801666a:	f7ff fea7 	bl	80163bc <rshift>
 801666e:	4446      	add	r6, r8
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	42b3      	cmp	r3, r6
 8016674:	da41      	bge.n	80166fa <__gethex+0x26e>
 8016676:	4621      	mov	r1, r4
 8016678:	4648      	mov	r0, r9
 801667a:	f000 fa49 	bl	8016b10 <_Bfree>
 801667e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016680:	2300      	movs	r3, #0
 8016682:	6013      	str	r3, [r2, #0]
 8016684:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8016688:	e78a      	b.n	80165a0 <__gethex+0x114>
 801668a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801668e:	2a2e      	cmp	r2, #46	; 0x2e
 8016690:	d014      	beq.n	80166bc <__gethex+0x230>
 8016692:	2b20      	cmp	r3, #32
 8016694:	d106      	bne.n	80166a4 <__gethex+0x218>
 8016696:	9b01      	ldr	r3, [sp, #4]
 8016698:	f843 bb04 	str.w	fp, [r3], #4
 801669c:	f04f 0b00 	mov.w	fp, #0
 80166a0:	9301      	str	r3, [sp, #4]
 80166a2:	465b      	mov	r3, fp
 80166a4:	7828      	ldrb	r0, [r5, #0]
 80166a6:	9303      	str	r3, [sp, #12]
 80166a8:	f7ff feda 	bl	8016460 <__hexdig_fun>
 80166ac:	9b03      	ldr	r3, [sp, #12]
 80166ae:	f000 000f 	and.w	r0, r0, #15
 80166b2:	4098      	lsls	r0, r3
 80166b4:	ea4b 0b00 	orr.w	fp, fp, r0
 80166b8:	3304      	adds	r3, #4
 80166ba:	e7a1      	b.n	8016600 <__gethex+0x174>
 80166bc:	45a8      	cmp	r8, r5
 80166be:	d8e8      	bhi.n	8016692 <__gethex+0x206>
 80166c0:	2201      	movs	r2, #1
 80166c2:	4628      	mov	r0, r5
 80166c4:	9303      	str	r3, [sp, #12]
 80166c6:	f7fe fe64 	bl	8015392 <strncmp>
 80166ca:	4926      	ldr	r1, [pc, #152]	; (8016764 <__gethex+0x2d8>)
 80166cc:	9b03      	ldr	r3, [sp, #12]
 80166ce:	2800      	cmp	r0, #0
 80166d0:	d1df      	bne.n	8016692 <__gethex+0x206>
 80166d2:	e795      	b.n	8016600 <__gethex+0x174>
 80166d4:	f04f 0b03 	mov.w	fp, #3
 80166d8:	e7c5      	b.n	8016666 <__gethex+0x1da>
 80166da:	da0b      	bge.n	80166f4 <__gethex+0x268>
 80166dc:	eba5 0800 	sub.w	r8, r5, r0
 80166e0:	4621      	mov	r1, r4
 80166e2:	4642      	mov	r2, r8
 80166e4:	4648      	mov	r0, r9
 80166e6:	f000 fc2d 	bl	8016f44 <__lshift>
 80166ea:	eba6 0608 	sub.w	r6, r6, r8
 80166ee:	4604      	mov	r4, r0
 80166f0:	f100 0a14 	add.w	sl, r0, #20
 80166f4:	f04f 0b00 	mov.w	fp, #0
 80166f8:	e7ba      	b.n	8016670 <__gethex+0x1e4>
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	42b3      	cmp	r3, r6
 80166fe:	dd73      	ble.n	80167e8 <__gethex+0x35c>
 8016700:	1b9e      	subs	r6, r3, r6
 8016702:	42b5      	cmp	r5, r6
 8016704:	dc34      	bgt.n	8016770 <__gethex+0x2e4>
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	2b02      	cmp	r3, #2
 801670a:	d023      	beq.n	8016754 <__gethex+0x2c8>
 801670c:	2b03      	cmp	r3, #3
 801670e:	d025      	beq.n	801675c <__gethex+0x2d0>
 8016710:	2b01      	cmp	r3, #1
 8016712:	d115      	bne.n	8016740 <__gethex+0x2b4>
 8016714:	42b5      	cmp	r5, r6
 8016716:	d113      	bne.n	8016740 <__gethex+0x2b4>
 8016718:	2d01      	cmp	r5, #1
 801671a:	d10b      	bne.n	8016734 <__gethex+0x2a8>
 801671c:	9a02      	ldr	r2, [sp, #8]
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	6013      	str	r3, [r2, #0]
 8016722:	2301      	movs	r3, #1
 8016724:	6123      	str	r3, [r4, #16]
 8016726:	f8ca 3000 	str.w	r3, [sl]
 801672a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801672c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8016730:	601c      	str	r4, [r3, #0]
 8016732:	e735      	b.n	80165a0 <__gethex+0x114>
 8016734:	1e69      	subs	r1, r5, #1
 8016736:	4620      	mov	r0, r4
 8016738:	f000 fe36 	bl	80173a8 <__any_on>
 801673c:	2800      	cmp	r0, #0
 801673e:	d1ed      	bne.n	801671c <__gethex+0x290>
 8016740:	4621      	mov	r1, r4
 8016742:	4648      	mov	r0, r9
 8016744:	f000 f9e4 	bl	8016b10 <_Bfree>
 8016748:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801674a:	2300      	movs	r3, #0
 801674c:	6013      	str	r3, [r2, #0]
 801674e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8016752:	e725      	b.n	80165a0 <__gethex+0x114>
 8016754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016756:	2b00      	cmp	r3, #0
 8016758:	d1f2      	bne.n	8016740 <__gethex+0x2b4>
 801675a:	e7df      	b.n	801671c <__gethex+0x290>
 801675c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801675e:	2b00      	cmp	r3, #0
 8016760:	d1dc      	bne.n	801671c <__gethex+0x290>
 8016762:	e7ed      	b.n	8016740 <__gethex+0x2b4>
 8016764:	0801b834 	.word	0x0801b834
 8016768:	0801badc 	.word	0x0801badc
 801676c:	0801baed 	.word	0x0801baed
 8016770:	f106 38ff 	add.w	r8, r6, #4294967295
 8016774:	f1bb 0f00 	cmp.w	fp, #0
 8016778:	d133      	bne.n	80167e2 <__gethex+0x356>
 801677a:	f1b8 0f00 	cmp.w	r8, #0
 801677e:	d004      	beq.n	801678a <__gethex+0x2fe>
 8016780:	4641      	mov	r1, r8
 8016782:	4620      	mov	r0, r4
 8016784:	f000 fe10 	bl	80173a8 <__any_on>
 8016788:	4683      	mov	fp, r0
 801678a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801678e:	2301      	movs	r3, #1
 8016790:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016794:	f008 081f 	and.w	r8, r8, #31
 8016798:	fa03 f308 	lsl.w	r3, r3, r8
 801679c:	4213      	tst	r3, r2
 801679e:	4631      	mov	r1, r6
 80167a0:	4620      	mov	r0, r4
 80167a2:	bf18      	it	ne
 80167a4:	f04b 0b02 	orrne.w	fp, fp, #2
 80167a8:	1bad      	subs	r5, r5, r6
 80167aa:	f7ff fe07 	bl	80163bc <rshift>
 80167ae:	687e      	ldr	r6, [r7, #4]
 80167b0:	f04f 0802 	mov.w	r8, #2
 80167b4:	f1bb 0f00 	cmp.w	fp, #0
 80167b8:	d04a      	beq.n	8016850 <__gethex+0x3c4>
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	2b02      	cmp	r3, #2
 80167be:	d016      	beq.n	80167ee <__gethex+0x362>
 80167c0:	2b03      	cmp	r3, #3
 80167c2:	d018      	beq.n	80167f6 <__gethex+0x36a>
 80167c4:	2b01      	cmp	r3, #1
 80167c6:	d109      	bne.n	80167dc <__gethex+0x350>
 80167c8:	f01b 0f02 	tst.w	fp, #2
 80167cc:	d006      	beq.n	80167dc <__gethex+0x350>
 80167ce:	f8da 3000 	ldr.w	r3, [sl]
 80167d2:	ea4b 0b03 	orr.w	fp, fp, r3
 80167d6:	f01b 0f01 	tst.w	fp, #1
 80167da:	d10f      	bne.n	80167fc <__gethex+0x370>
 80167dc:	f048 0810 	orr.w	r8, r8, #16
 80167e0:	e036      	b.n	8016850 <__gethex+0x3c4>
 80167e2:	f04f 0b01 	mov.w	fp, #1
 80167e6:	e7d0      	b.n	801678a <__gethex+0x2fe>
 80167e8:	f04f 0801 	mov.w	r8, #1
 80167ec:	e7e2      	b.n	80167b4 <__gethex+0x328>
 80167ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80167f0:	f1c3 0301 	rsb	r3, r3, #1
 80167f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80167f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d0ef      	beq.n	80167dc <__gethex+0x350>
 80167fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016800:	f104 0214 	add.w	r2, r4, #20
 8016804:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8016808:	9301      	str	r3, [sp, #4]
 801680a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801680e:	2300      	movs	r3, #0
 8016810:	4694      	mov	ip, r2
 8016812:	f852 1b04 	ldr.w	r1, [r2], #4
 8016816:	f1b1 3fff 	cmp.w	r1, #4294967295
 801681a:	d01e      	beq.n	801685a <__gethex+0x3ce>
 801681c:	3101      	adds	r1, #1
 801681e:	f8cc 1000 	str.w	r1, [ip]
 8016822:	f1b8 0f02 	cmp.w	r8, #2
 8016826:	f104 0214 	add.w	r2, r4, #20
 801682a:	d13d      	bne.n	80168a8 <__gethex+0x41c>
 801682c:	683b      	ldr	r3, [r7, #0]
 801682e:	3b01      	subs	r3, #1
 8016830:	42ab      	cmp	r3, r5
 8016832:	d10b      	bne.n	801684c <__gethex+0x3c0>
 8016834:	1169      	asrs	r1, r5, #5
 8016836:	2301      	movs	r3, #1
 8016838:	f005 051f 	and.w	r5, r5, #31
 801683c:	fa03 f505 	lsl.w	r5, r3, r5
 8016840:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016844:	421d      	tst	r5, r3
 8016846:	bf18      	it	ne
 8016848:	f04f 0801 	movne.w	r8, #1
 801684c:	f048 0820 	orr.w	r8, r8, #32
 8016850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016852:	601c      	str	r4, [r3, #0]
 8016854:	9b02      	ldr	r3, [sp, #8]
 8016856:	601e      	str	r6, [r3, #0]
 8016858:	e6a2      	b.n	80165a0 <__gethex+0x114>
 801685a:	4290      	cmp	r0, r2
 801685c:	f842 3c04 	str.w	r3, [r2, #-4]
 8016860:	d8d6      	bhi.n	8016810 <__gethex+0x384>
 8016862:	68a2      	ldr	r2, [r4, #8]
 8016864:	4593      	cmp	fp, r2
 8016866:	db17      	blt.n	8016898 <__gethex+0x40c>
 8016868:	6861      	ldr	r1, [r4, #4]
 801686a:	4648      	mov	r0, r9
 801686c:	3101      	adds	r1, #1
 801686e:	f000 f90f 	bl	8016a90 <_Balloc>
 8016872:	4682      	mov	sl, r0
 8016874:	b918      	cbnz	r0, 801687e <__gethex+0x3f2>
 8016876:	4b1b      	ldr	r3, [pc, #108]	; (80168e4 <__gethex+0x458>)
 8016878:	4602      	mov	r2, r0
 801687a:	2184      	movs	r1, #132	; 0x84
 801687c:	e6b3      	b.n	80165e6 <__gethex+0x15a>
 801687e:	6922      	ldr	r2, [r4, #16]
 8016880:	3202      	adds	r2, #2
 8016882:	f104 010c 	add.w	r1, r4, #12
 8016886:	0092      	lsls	r2, r2, #2
 8016888:	300c      	adds	r0, #12
 801688a:	f7fe fe96 	bl	80155ba <memcpy>
 801688e:	4621      	mov	r1, r4
 8016890:	4648      	mov	r0, r9
 8016892:	f000 f93d 	bl	8016b10 <_Bfree>
 8016896:	4654      	mov	r4, sl
 8016898:	6922      	ldr	r2, [r4, #16]
 801689a:	1c51      	adds	r1, r2, #1
 801689c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80168a0:	6121      	str	r1, [r4, #16]
 80168a2:	2101      	movs	r1, #1
 80168a4:	6151      	str	r1, [r2, #20]
 80168a6:	e7bc      	b.n	8016822 <__gethex+0x396>
 80168a8:	6921      	ldr	r1, [r4, #16]
 80168aa:	4559      	cmp	r1, fp
 80168ac:	dd0b      	ble.n	80168c6 <__gethex+0x43a>
 80168ae:	2101      	movs	r1, #1
 80168b0:	4620      	mov	r0, r4
 80168b2:	f7ff fd83 	bl	80163bc <rshift>
 80168b6:	68bb      	ldr	r3, [r7, #8]
 80168b8:	3601      	adds	r6, #1
 80168ba:	42b3      	cmp	r3, r6
 80168bc:	f6ff aedb 	blt.w	8016676 <__gethex+0x1ea>
 80168c0:	f04f 0801 	mov.w	r8, #1
 80168c4:	e7c2      	b.n	801684c <__gethex+0x3c0>
 80168c6:	f015 051f 	ands.w	r5, r5, #31
 80168ca:	d0f9      	beq.n	80168c0 <__gethex+0x434>
 80168cc:	9b01      	ldr	r3, [sp, #4]
 80168ce:	441a      	add	r2, r3
 80168d0:	f1c5 0520 	rsb	r5, r5, #32
 80168d4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80168d8:	f000 f9cc 	bl	8016c74 <__hi0bits>
 80168dc:	42a8      	cmp	r0, r5
 80168de:	dbe6      	blt.n	80168ae <__gethex+0x422>
 80168e0:	e7ee      	b.n	80168c0 <__gethex+0x434>
 80168e2:	bf00      	nop
 80168e4:	0801badc 	.word	0x0801badc

080168e8 <L_shift>:
 80168e8:	f1c2 0208 	rsb	r2, r2, #8
 80168ec:	0092      	lsls	r2, r2, #2
 80168ee:	b570      	push	{r4, r5, r6, lr}
 80168f0:	f1c2 0620 	rsb	r6, r2, #32
 80168f4:	6843      	ldr	r3, [r0, #4]
 80168f6:	6804      	ldr	r4, [r0, #0]
 80168f8:	fa03 f506 	lsl.w	r5, r3, r6
 80168fc:	432c      	orrs	r4, r5
 80168fe:	40d3      	lsrs	r3, r2
 8016900:	6004      	str	r4, [r0, #0]
 8016902:	f840 3f04 	str.w	r3, [r0, #4]!
 8016906:	4288      	cmp	r0, r1
 8016908:	d3f4      	bcc.n	80168f4 <L_shift+0xc>
 801690a:	bd70      	pop	{r4, r5, r6, pc}

0801690c <__match>:
 801690c:	b530      	push	{r4, r5, lr}
 801690e:	6803      	ldr	r3, [r0, #0]
 8016910:	3301      	adds	r3, #1
 8016912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016916:	b914      	cbnz	r4, 801691e <__match+0x12>
 8016918:	6003      	str	r3, [r0, #0]
 801691a:	2001      	movs	r0, #1
 801691c:	bd30      	pop	{r4, r5, pc}
 801691e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016922:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016926:	2d19      	cmp	r5, #25
 8016928:	bf98      	it	ls
 801692a:	3220      	addls	r2, #32
 801692c:	42a2      	cmp	r2, r4
 801692e:	d0f0      	beq.n	8016912 <__match+0x6>
 8016930:	2000      	movs	r0, #0
 8016932:	e7f3      	b.n	801691c <__match+0x10>

08016934 <__hexnan>:
 8016934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016938:	680b      	ldr	r3, [r1, #0]
 801693a:	6801      	ldr	r1, [r0, #0]
 801693c:	115e      	asrs	r6, r3, #5
 801693e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016942:	f013 031f 	ands.w	r3, r3, #31
 8016946:	b087      	sub	sp, #28
 8016948:	bf18      	it	ne
 801694a:	3604      	addne	r6, #4
 801694c:	2500      	movs	r5, #0
 801694e:	1f37      	subs	r7, r6, #4
 8016950:	4682      	mov	sl, r0
 8016952:	4690      	mov	r8, r2
 8016954:	9301      	str	r3, [sp, #4]
 8016956:	f846 5c04 	str.w	r5, [r6, #-4]
 801695a:	46b9      	mov	r9, r7
 801695c:	463c      	mov	r4, r7
 801695e:	9502      	str	r5, [sp, #8]
 8016960:	46ab      	mov	fp, r5
 8016962:	784a      	ldrb	r2, [r1, #1]
 8016964:	1c4b      	adds	r3, r1, #1
 8016966:	9303      	str	r3, [sp, #12]
 8016968:	b342      	cbz	r2, 80169bc <__hexnan+0x88>
 801696a:	4610      	mov	r0, r2
 801696c:	9105      	str	r1, [sp, #20]
 801696e:	9204      	str	r2, [sp, #16]
 8016970:	f7ff fd76 	bl	8016460 <__hexdig_fun>
 8016974:	2800      	cmp	r0, #0
 8016976:	d14f      	bne.n	8016a18 <__hexnan+0xe4>
 8016978:	9a04      	ldr	r2, [sp, #16]
 801697a:	9905      	ldr	r1, [sp, #20]
 801697c:	2a20      	cmp	r2, #32
 801697e:	d818      	bhi.n	80169b2 <__hexnan+0x7e>
 8016980:	9b02      	ldr	r3, [sp, #8]
 8016982:	459b      	cmp	fp, r3
 8016984:	dd13      	ble.n	80169ae <__hexnan+0x7a>
 8016986:	454c      	cmp	r4, r9
 8016988:	d206      	bcs.n	8016998 <__hexnan+0x64>
 801698a:	2d07      	cmp	r5, #7
 801698c:	dc04      	bgt.n	8016998 <__hexnan+0x64>
 801698e:	462a      	mov	r2, r5
 8016990:	4649      	mov	r1, r9
 8016992:	4620      	mov	r0, r4
 8016994:	f7ff ffa8 	bl	80168e8 <L_shift>
 8016998:	4544      	cmp	r4, r8
 801699a:	d950      	bls.n	8016a3e <__hexnan+0x10a>
 801699c:	2300      	movs	r3, #0
 801699e:	f1a4 0904 	sub.w	r9, r4, #4
 80169a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80169a6:	f8cd b008 	str.w	fp, [sp, #8]
 80169aa:	464c      	mov	r4, r9
 80169ac:	461d      	mov	r5, r3
 80169ae:	9903      	ldr	r1, [sp, #12]
 80169b0:	e7d7      	b.n	8016962 <__hexnan+0x2e>
 80169b2:	2a29      	cmp	r2, #41	; 0x29
 80169b4:	d155      	bne.n	8016a62 <__hexnan+0x12e>
 80169b6:	3102      	adds	r1, #2
 80169b8:	f8ca 1000 	str.w	r1, [sl]
 80169bc:	f1bb 0f00 	cmp.w	fp, #0
 80169c0:	d04f      	beq.n	8016a62 <__hexnan+0x12e>
 80169c2:	454c      	cmp	r4, r9
 80169c4:	d206      	bcs.n	80169d4 <__hexnan+0xa0>
 80169c6:	2d07      	cmp	r5, #7
 80169c8:	dc04      	bgt.n	80169d4 <__hexnan+0xa0>
 80169ca:	462a      	mov	r2, r5
 80169cc:	4649      	mov	r1, r9
 80169ce:	4620      	mov	r0, r4
 80169d0:	f7ff ff8a 	bl	80168e8 <L_shift>
 80169d4:	4544      	cmp	r4, r8
 80169d6:	d934      	bls.n	8016a42 <__hexnan+0x10e>
 80169d8:	f1a8 0204 	sub.w	r2, r8, #4
 80169dc:	4623      	mov	r3, r4
 80169de:	f853 1b04 	ldr.w	r1, [r3], #4
 80169e2:	f842 1f04 	str.w	r1, [r2, #4]!
 80169e6:	429f      	cmp	r7, r3
 80169e8:	d2f9      	bcs.n	80169de <__hexnan+0xaa>
 80169ea:	1b3b      	subs	r3, r7, r4
 80169ec:	f023 0303 	bic.w	r3, r3, #3
 80169f0:	3304      	adds	r3, #4
 80169f2:	3e03      	subs	r6, #3
 80169f4:	3401      	adds	r4, #1
 80169f6:	42a6      	cmp	r6, r4
 80169f8:	bf38      	it	cc
 80169fa:	2304      	movcc	r3, #4
 80169fc:	4443      	add	r3, r8
 80169fe:	2200      	movs	r2, #0
 8016a00:	f843 2b04 	str.w	r2, [r3], #4
 8016a04:	429f      	cmp	r7, r3
 8016a06:	d2fb      	bcs.n	8016a00 <__hexnan+0xcc>
 8016a08:	683b      	ldr	r3, [r7, #0]
 8016a0a:	b91b      	cbnz	r3, 8016a14 <__hexnan+0xe0>
 8016a0c:	4547      	cmp	r7, r8
 8016a0e:	d126      	bne.n	8016a5e <__hexnan+0x12a>
 8016a10:	2301      	movs	r3, #1
 8016a12:	603b      	str	r3, [r7, #0]
 8016a14:	2005      	movs	r0, #5
 8016a16:	e025      	b.n	8016a64 <__hexnan+0x130>
 8016a18:	3501      	adds	r5, #1
 8016a1a:	2d08      	cmp	r5, #8
 8016a1c:	f10b 0b01 	add.w	fp, fp, #1
 8016a20:	dd06      	ble.n	8016a30 <__hexnan+0xfc>
 8016a22:	4544      	cmp	r4, r8
 8016a24:	d9c3      	bls.n	80169ae <__hexnan+0x7a>
 8016a26:	2300      	movs	r3, #0
 8016a28:	f844 3c04 	str.w	r3, [r4, #-4]
 8016a2c:	2501      	movs	r5, #1
 8016a2e:	3c04      	subs	r4, #4
 8016a30:	6822      	ldr	r2, [r4, #0]
 8016a32:	f000 000f 	and.w	r0, r0, #15
 8016a36:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016a3a:	6020      	str	r0, [r4, #0]
 8016a3c:	e7b7      	b.n	80169ae <__hexnan+0x7a>
 8016a3e:	2508      	movs	r5, #8
 8016a40:	e7b5      	b.n	80169ae <__hexnan+0x7a>
 8016a42:	9b01      	ldr	r3, [sp, #4]
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d0df      	beq.n	8016a08 <__hexnan+0xd4>
 8016a48:	f1c3 0320 	rsb	r3, r3, #32
 8016a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8016a50:	40da      	lsrs	r2, r3
 8016a52:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016a56:	4013      	ands	r3, r2
 8016a58:	f846 3c04 	str.w	r3, [r6, #-4]
 8016a5c:	e7d4      	b.n	8016a08 <__hexnan+0xd4>
 8016a5e:	3f04      	subs	r7, #4
 8016a60:	e7d2      	b.n	8016a08 <__hexnan+0xd4>
 8016a62:	2004      	movs	r0, #4
 8016a64:	b007      	add	sp, #28
 8016a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016a6a <__ascii_mbtowc>:
 8016a6a:	b082      	sub	sp, #8
 8016a6c:	b901      	cbnz	r1, 8016a70 <__ascii_mbtowc+0x6>
 8016a6e:	a901      	add	r1, sp, #4
 8016a70:	b142      	cbz	r2, 8016a84 <__ascii_mbtowc+0x1a>
 8016a72:	b14b      	cbz	r3, 8016a88 <__ascii_mbtowc+0x1e>
 8016a74:	7813      	ldrb	r3, [r2, #0]
 8016a76:	600b      	str	r3, [r1, #0]
 8016a78:	7812      	ldrb	r2, [r2, #0]
 8016a7a:	1e10      	subs	r0, r2, #0
 8016a7c:	bf18      	it	ne
 8016a7e:	2001      	movne	r0, #1
 8016a80:	b002      	add	sp, #8
 8016a82:	4770      	bx	lr
 8016a84:	4610      	mov	r0, r2
 8016a86:	e7fb      	b.n	8016a80 <__ascii_mbtowc+0x16>
 8016a88:	f06f 0001 	mvn.w	r0, #1
 8016a8c:	e7f8      	b.n	8016a80 <__ascii_mbtowc+0x16>
	...

08016a90 <_Balloc>:
 8016a90:	b570      	push	{r4, r5, r6, lr}
 8016a92:	69c6      	ldr	r6, [r0, #28]
 8016a94:	4604      	mov	r4, r0
 8016a96:	460d      	mov	r5, r1
 8016a98:	b976      	cbnz	r6, 8016ab8 <_Balloc+0x28>
 8016a9a:	2010      	movs	r0, #16
 8016a9c:	f7fc fce0 	bl	8013460 <malloc>
 8016aa0:	4602      	mov	r2, r0
 8016aa2:	61e0      	str	r0, [r4, #28]
 8016aa4:	b920      	cbnz	r0, 8016ab0 <_Balloc+0x20>
 8016aa6:	4b18      	ldr	r3, [pc, #96]	; (8016b08 <_Balloc+0x78>)
 8016aa8:	4818      	ldr	r0, [pc, #96]	; (8016b0c <_Balloc+0x7c>)
 8016aaa:	216b      	movs	r1, #107	; 0x6b
 8016aac:	f7fe fda2 	bl	80155f4 <__assert_func>
 8016ab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016ab4:	6006      	str	r6, [r0, #0]
 8016ab6:	60c6      	str	r6, [r0, #12]
 8016ab8:	69e6      	ldr	r6, [r4, #28]
 8016aba:	68f3      	ldr	r3, [r6, #12]
 8016abc:	b183      	cbz	r3, 8016ae0 <_Balloc+0x50>
 8016abe:	69e3      	ldr	r3, [r4, #28]
 8016ac0:	68db      	ldr	r3, [r3, #12]
 8016ac2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016ac6:	b9b8      	cbnz	r0, 8016af8 <_Balloc+0x68>
 8016ac8:	2101      	movs	r1, #1
 8016aca:	fa01 f605 	lsl.w	r6, r1, r5
 8016ace:	1d72      	adds	r2, r6, #5
 8016ad0:	0092      	lsls	r2, r2, #2
 8016ad2:	4620      	mov	r0, r4
 8016ad4:	f000 fecf 	bl	8017876 <_calloc_r>
 8016ad8:	b160      	cbz	r0, 8016af4 <_Balloc+0x64>
 8016ada:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016ade:	e00e      	b.n	8016afe <_Balloc+0x6e>
 8016ae0:	2221      	movs	r2, #33	; 0x21
 8016ae2:	2104      	movs	r1, #4
 8016ae4:	4620      	mov	r0, r4
 8016ae6:	f000 fec6 	bl	8017876 <_calloc_r>
 8016aea:	69e3      	ldr	r3, [r4, #28]
 8016aec:	60f0      	str	r0, [r6, #12]
 8016aee:	68db      	ldr	r3, [r3, #12]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d1e4      	bne.n	8016abe <_Balloc+0x2e>
 8016af4:	2000      	movs	r0, #0
 8016af6:	bd70      	pop	{r4, r5, r6, pc}
 8016af8:	6802      	ldr	r2, [r0, #0]
 8016afa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016afe:	2300      	movs	r3, #0
 8016b00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016b04:	e7f7      	b.n	8016af6 <_Balloc+0x66>
 8016b06:	bf00      	nop
 8016b08:	0801b9c2 	.word	0x0801b9c2
 8016b0c:	0801bb4d 	.word	0x0801bb4d

08016b10 <_Bfree>:
 8016b10:	b570      	push	{r4, r5, r6, lr}
 8016b12:	69c6      	ldr	r6, [r0, #28]
 8016b14:	4605      	mov	r5, r0
 8016b16:	460c      	mov	r4, r1
 8016b18:	b976      	cbnz	r6, 8016b38 <_Bfree+0x28>
 8016b1a:	2010      	movs	r0, #16
 8016b1c:	f7fc fca0 	bl	8013460 <malloc>
 8016b20:	4602      	mov	r2, r0
 8016b22:	61e8      	str	r0, [r5, #28]
 8016b24:	b920      	cbnz	r0, 8016b30 <_Bfree+0x20>
 8016b26:	4b09      	ldr	r3, [pc, #36]	; (8016b4c <_Bfree+0x3c>)
 8016b28:	4809      	ldr	r0, [pc, #36]	; (8016b50 <_Bfree+0x40>)
 8016b2a:	218f      	movs	r1, #143	; 0x8f
 8016b2c:	f7fe fd62 	bl	80155f4 <__assert_func>
 8016b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016b34:	6006      	str	r6, [r0, #0]
 8016b36:	60c6      	str	r6, [r0, #12]
 8016b38:	b13c      	cbz	r4, 8016b4a <_Bfree+0x3a>
 8016b3a:	69eb      	ldr	r3, [r5, #28]
 8016b3c:	6862      	ldr	r2, [r4, #4]
 8016b3e:	68db      	ldr	r3, [r3, #12]
 8016b40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016b44:	6021      	str	r1, [r4, #0]
 8016b46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016b4a:	bd70      	pop	{r4, r5, r6, pc}
 8016b4c:	0801b9c2 	.word	0x0801b9c2
 8016b50:	0801bb4d 	.word	0x0801bb4d

08016b54 <__multadd>:
 8016b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b58:	690d      	ldr	r5, [r1, #16]
 8016b5a:	4607      	mov	r7, r0
 8016b5c:	460c      	mov	r4, r1
 8016b5e:	461e      	mov	r6, r3
 8016b60:	f101 0c14 	add.w	ip, r1, #20
 8016b64:	2000      	movs	r0, #0
 8016b66:	f8dc 3000 	ldr.w	r3, [ip]
 8016b6a:	b299      	uxth	r1, r3
 8016b6c:	fb02 6101 	mla	r1, r2, r1, r6
 8016b70:	0c1e      	lsrs	r6, r3, #16
 8016b72:	0c0b      	lsrs	r3, r1, #16
 8016b74:	fb02 3306 	mla	r3, r2, r6, r3
 8016b78:	b289      	uxth	r1, r1
 8016b7a:	3001      	adds	r0, #1
 8016b7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016b80:	4285      	cmp	r5, r0
 8016b82:	f84c 1b04 	str.w	r1, [ip], #4
 8016b86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016b8a:	dcec      	bgt.n	8016b66 <__multadd+0x12>
 8016b8c:	b30e      	cbz	r6, 8016bd2 <__multadd+0x7e>
 8016b8e:	68a3      	ldr	r3, [r4, #8]
 8016b90:	42ab      	cmp	r3, r5
 8016b92:	dc19      	bgt.n	8016bc8 <__multadd+0x74>
 8016b94:	6861      	ldr	r1, [r4, #4]
 8016b96:	4638      	mov	r0, r7
 8016b98:	3101      	adds	r1, #1
 8016b9a:	f7ff ff79 	bl	8016a90 <_Balloc>
 8016b9e:	4680      	mov	r8, r0
 8016ba0:	b928      	cbnz	r0, 8016bae <__multadd+0x5a>
 8016ba2:	4602      	mov	r2, r0
 8016ba4:	4b0c      	ldr	r3, [pc, #48]	; (8016bd8 <__multadd+0x84>)
 8016ba6:	480d      	ldr	r0, [pc, #52]	; (8016bdc <__multadd+0x88>)
 8016ba8:	21ba      	movs	r1, #186	; 0xba
 8016baa:	f7fe fd23 	bl	80155f4 <__assert_func>
 8016bae:	6922      	ldr	r2, [r4, #16]
 8016bb0:	3202      	adds	r2, #2
 8016bb2:	f104 010c 	add.w	r1, r4, #12
 8016bb6:	0092      	lsls	r2, r2, #2
 8016bb8:	300c      	adds	r0, #12
 8016bba:	f7fe fcfe 	bl	80155ba <memcpy>
 8016bbe:	4621      	mov	r1, r4
 8016bc0:	4638      	mov	r0, r7
 8016bc2:	f7ff ffa5 	bl	8016b10 <_Bfree>
 8016bc6:	4644      	mov	r4, r8
 8016bc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016bcc:	3501      	adds	r5, #1
 8016bce:	615e      	str	r6, [r3, #20]
 8016bd0:	6125      	str	r5, [r4, #16]
 8016bd2:	4620      	mov	r0, r4
 8016bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bd8:	0801badc 	.word	0x0801badc
 8016bdc:	0801bb4d 	.word	0x0801bb4d

08016be0 <__s2b>:
 8016be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016be4:	460c      	mov	r4, r1
 8016be6:	4615      	mov	r5, r2
 8016be8:	461f      	mov	r7, r3
 8016bea:	2209      	movs	r2, #9
 8016bec:	3308      	adds	r3, #8
 8016bee:	4606      	mov	r6, r0
 8016bf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8016bf4:	2100      	movs	r1, #0
 8016bf6:	2201      	movs	r2, #1
 8016bf8:	429a      	cmp	r2, r3
 8016bfa:	db09      	blt.n	8016c10 <__s2b+0x30>
 8016bfc:	4630      	mov	r0, r6
 8016bfe:	f7ff ff47 	bl	8016a90 <_Balloc>
 8016c02:	b940      	cbnz	r0, 8016c16 <__s2b+0x36>
 8016c04:	4602      	mov	r2, r0
 8016c06:	4b19      	ldr	r3, [pc, #100]	; (8016c6c <__s2b+0x8c>)
 8016c08:	4819      	ldr	r0, [pc, #100]	; (8016c70 <__s2b+0x90>)
 8016c0a:	21d3      	movs	r1, #211	; 0xd3
 8016c0c:	f7fe fcf2 	bl	80155f4 <__assert_func>
 8016c10:	0052      	lsls	r2, r2, #1
 8016c12:	3101      	adds	r1, #1
 8016c14:	e7f0      	b.n	8016bf8 <__s2b+0x18>
 8016c16:	9b08      	ldr	r3, [sp, #32]
 8016c18:	6143      	str	r3, [r0, #20]
 8016c1a:	2d09      	cmp	r5, #9
 8016c1c:	f04f 0301 	mov.w	r3, #1
 8016c20:	6103      	str	r3, [r0, #16]
 8016c22:	dd16      	ble.n	8016c52 <__s2b+0x72>
 8016c24:	f104 0909 	add.w	r9, r4, #9
 8016c28:	46c8      	mov	r8, r9
 8016c2a:	442c      	add	r4, r5
 8016c2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016c30:	4601      	mov	r1, r0
 8016c32:	3b30      	subs	r3, #48	; 0x30
 8016c34:	220a      	movs	r2, #10
 8016c36:	4630      	mov	r0, r6
 8016c38:	f7ff ff8c 	bl	8016b54 <__multadd>
 8016c3c:	45a0      	cmp	r8, r4
 8016c3e:	d1f5      	bne.n	8016c2c <__s2b+0x4c>
 8016c40:	f1a5 0408 	sub.w	r4, r5, #8
 8016c44:	444c      	add	r4, r9
 8016c46:	1b2d      	subs	r5, r5, r4
 8016c48:	1963      	adds	r3, r4, r5
 8016c4a:	42bb      	cmp	r3, r7
 8016c4c:	db04      	blt.n	8016c58 <__s2b+0x78>
 8016c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c52:	340a      	adds	r4, #10
 8016c54:	2509      	movs	r5, #9
 8016c56:	e7f6      	b.n	8016c46 <__s2b+0x66>
 8016c58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016c5c:	4601      	mov	r1, r0
 8016c5e:	3b30      	subs	r3, #48	; 0x30
 8016c60:	220a      	movs	r2, #10
 8016c62:	4630      	mov	r0, r6
 8016c64:	f7ff ff76 	bl	8016b54 <__multadd>
 8016c68:	e7ee      	b.n	8016c48 <__s2b+0x68>
 8016c6a:	bf00      	nop
 8016c6c:	0801badc 	.word	0x0801badc
 8016c70:	0801bb4d 	.word	0x0801bb4d

08016c74 <__hi0bits>:
 8016c74:	0c03      	lsrs	r3, r0, #16
 8016c76:	041b      	lsls	r3, r3, #16
 8016c78:	b9d3      	cbnz	r3, 8016cb0 <__hi0bits+0x3c>
 8016c7a:	0400      	lsls	r0, r0, #16
 8016c7c:	2310      	movs	r3, #16
 8016c7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016c82:	bf04      	itt	eq
 8016c84:	0200      	lsleq	r0, r0, #8
 8016c86:	3308      	addeq	r3, #8
 8016c88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016c8c:	bf04      	itt	eq
 8016c8e:	0100      	lsleq	r0, r0, #4
 8016c90:	3304      	addeq	r3, #4
 8016c92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016c96:	bf04      	itt	eq
 8016c98:	0080      	lsleq	r0, r0, #2
 8016c9a:	3302      	addeq	r3, #2
 8016c9c:	2800      	cmp	r0, #0
 8016c9e:	db05      	blt.n	8016cac <__hi0bits+0x38>
 8016ca0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016ca4:	f103 0301 	add.w	r3, r3, #1
 8016ca8:	bf08      	it	eq
 8016caa:	2320      	moveq	r3, #32
 8016cac:	4618      	mov	r0, r3
 8016cae:	4770      	bx	lr
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	e7e4      	b.n	8016c7e <__hi0bits+0xa>

08016cb4 <__lo0bits>:
 8016cb4:	6803      	ldr	r3, [r0, #0]
 8016cb6:	f013 0207 	ands.w	r2, r3, #7
 8016cba:	d00c      	beq.n	8016cd6 <__lo0bits+0x22>
 8016cbc:	07d9      	lsls	r1, r3, #31
 8016cbe:	d422      	bmi.n	8016d06 <__lo0bits+0x52>
 8016cc0:	079a      	lsls	r2, r3, #30
 8016cc2:	bf49      	itett	mi
 8016cc4:	085b      	lsrmi	r3, r3, #1
 8016cc6:	089b      	lsrpl	r3, r3, #2
 8016cc8:	6003      	strmi	r3, [r0, #0]
 8016cca:	2201      	movmi	r2, #1
 8016ccc:	bf5c      	itt	pl
 8016cce:	6003      	strpl	r3, [r0, #0]
 8016cd0:	2202      	movpl	r2, #2
 8016cd2:	4610      	mov	r0, r2
 8016cd4:	4770      	bx	lr
 8016cd6:	b299      	uxth	r1, r3
 8016cd8:	b909      	cbnz	r1, 8016cde <__lo0bits+0x2a>
 8016cda:	0c1b      	lsrs	r3, r3, #16
 8016cdc:	2210      	movs	r2, #16
 8016cde:	b2d9      	uxtb	r1, r3
 8016ce0:	b909      	cbnz	r1, 8016ce6 <__lo0bits+0x32>
 8016ce2:	3208      	adds	r2, #8
 8016ce4:	0a1b      	lsrs	r3, r3, #8
 8016ce6:	0719      	lsls	r1, r3, #28
 8016ce8:	bf04      	itt	eq
 8016cea:	091b      	lsreq	r3, r3, #4
 8016cec:	3204      	addeq	r2, #4
 8016cee:	0799      	lsls	r1, r3, #30
 8016cf0:	bf04      	itt	eq
 8016cf2:	089b      	lsreq	r3, r3, #2
 8016cf4:	3202      	addeq	r2, #2
 8016cf6:	07d9      	lsls	r1, r3, #31
 8016cf8:	d403      	bmi.n	8016d02 <__lo0bits+0x4e>
 8016cfa:	085b      	lsrs	r3, r3, #1
 8016cfc:	f102 0201 	add.w	r2, r2, #1
 8016d00:	d003      	beq.n	8016d0a <__lo0bits+0x56>
 8016d02:	6003      	str	r3, [r0, #0]
 8016d04:	e7e5      	b.n	8016cd2 <__lo0bits+0x1e>
 8016d06:	2200      	movs	r2, #0
 8016d08:	e7e3      	b.n	8016cd2 <__lo0bits+0x1e>
 8016d0a:	2220      	movs	r2, #32
 8016d0c:	e7e1      	b.n	8016cd2 <__lo0bits+0x1e>
	...

08016d10 <__i2b>:
 8016d10:	b510      	push	{r4, lr}
 8016d12:	460c      	mov	r4, r1
 8016d14:	2101      	movs	r1, #1
 8016d16:	f7ff febb 	bl	8016a90 <_Balloc>
 8016d1a:	4602      	mov	r2, r0
 8016d1c:	b928      	cbnz	r0, 8016d2a <__i2b+0x1a>
 8016d1e:	4b05      	ldr	r3, [pc, #20]	; (8016d34 <__i2b+0x24>)
 8016d20:	4805      	ldr	r0, [pc, #20]	; (8016d38 <__i2b+0x28>)
 8016d22:	f240 1145 	movw	r1, #325	; 0x145
 8016d26:	f7fe fc65 	bl	80155f4 <__assert_func>
 8016d2a:	2301      	movs	r3, #1
 8016d2c:	6144      	str	r4, [r0, #20]
 8016d2e:	6103      	str	r3, [r0, #16]
 8016d30:	bd10      	pop	{r4, pc}
 8016d32:	bf00      	nop
 8016d34:	0801badc 	.word	0x0801badc
 8016d38:	0801bb4d 	.word	0x0801bb4d

08016d3c <__multiply>:
 8016d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d40:	4691      	mov	r9, r2
 8016d42:	690a      	ldr	r2, [r1, #16]
 8016d44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016d48:	429a      	cmp	r2, r3
 8016d4a:	bfb8      	it	lt
 8016d4c:	460b      	movlt	r3, r1
 8016d4e:	460c      	mov	r4, r1
 8016d50:	bfbc      	itt	lt
 8016d52:	464c      	movlt	r4, r9
 8016d54:	4699      	movlt	r9, r3
 8016d56:	6927      	ldr	r7, [r4, #16]
 8016d58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016d5c:	68a3      	ldr	r3, [r4, #8]
 8016d5e:	6861      	ldr	r1, [r4, #4]
 8016d60:	eb07 060a 	add.w	r6, r7, sl
 8016d64:	42b3      	cmp	r3, r6
 8016d66:	b085      	sub	sp, #20
 8016d68:	bfb8      	it	lt
 8016d6a:	3101      	addlt	r1, #1
 8016d6c:	f7ff fe90 	bl	8016a90 <_Balloc>
 8016d70:	b930      	cbnz	r0, 8016d80 <__multiply+0x44>
 8016d72:	4602      	mov	r2, r0
 8016d74:	4b44      	ldr	r3, [pc, #272]	; (8016e88 <__multiply+0x14c>)
 8016d76:	4845      	ldr	r0, [pc, #276]	; (8016e8c <__multiply+0x150>)
 8016d78:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8016d7c:	f7fe fc3a 	bl	80155f4 <__assert_func>
 8016d80:	f100 0514 	add.w	r5, r0, #20
 8016d84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016d88:	462b      	mov	r3, r5
 8016d8a:	2200      	movs	r2, #0
 8016d8c:	4543      	cmp	r3, r8
 8016d8e:	d321      	bcc.n	8016dd4 <__multiply+0x98>
 8016d90:	f104 0314 	add.w	r3, r4, #20
 8016d94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016d98:	f109 0314 	add.w	r3, r9, #20
 8016d9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016da0:	9202      	str	r2, [sp, #8]
 8016da2:	1b3a      	subs	r2, r7, r4
 8016da4:	3a15      	subs	r2, #21
 8016da6:	f022 0203 	bic.w	r2, r2, #3
 8016daa:	3204      	adds	r2, #4
 8016dac:	f104 0115 	add.w	r1, r4, #21
 8016db0:	428f      	cmp	r7, r1
 8016db2:	bf38      	it	cc
 8016db4:	2204      	movcc	r2, #4
 8016db6:	9201      	str	r2, [sp, #4]
 8016db8:	9a02      	ldr	r2, [sp, #8]
 8016dba:	9303      	str	r3, [sp, #12]
 8016dbc:	429a      	cmp	r2, r3
 8016dbe:	d80c      	bhi.n	8016dda <__multiply+0x9e>
 8016dc0:	2e00      	cmp	r6, #0
 8016dc2:	dd03      	ble.n	8016dcc <__multiply+0x90>
 8016dc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d05b      	beq.n	8016e84 <__multiply+0x148>
 8016dcc:	6106      	str	r6, [r0, #16]
 8016dce:	b005      	add	sp, #20
 8016dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dd4:	f843 2b04 	str.w	r2, [r3], #4
 8016dd8:	e7d8      	b.n	8016d8c <__multiply+0x50>
 8016dda:	f8b3 a000 	ldrh.w	sl, [r3]
 8016dde:	f1ba 0f00 	cmp.w	sl, #0
 8016de2:	d024      	beq.n	8016e2e <__multiply+0xf2>
 8016de4:	f104 0e14 	add.w	lr, r4, #20
 8016de8:	46a9      	mov	r9, r5
 8016dea:	f04f 0c00 	mov.w	ip, #0
 8016dee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016df2:	f8d9 1000 	ldr.w	r1, [r9]
 8016df6:	fa1f fb82 	uxth.w	fp, r2
 8016dfa:	b289      	uxth	r1, r1
 8016dfc:	fb0a 110b 	mla	r1, sl, fp, r1
 8016e00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016e04:	f8d9 2000 	ldr.w	r2, [r9]
 8016e08:	4461      	add	r1, ip
 8016e0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016e0e:	fb0a c20b 	mla	r2, sl, fp, ip
 8016e12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016e16:	b289      	uxth	r1, r1
 8016e18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016e1c:	4577      	cmp	r7, lr
 8016e1e:	f849 1b04 	str.w	r1, [r9], #4
 8016e22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016e26:	d8e2      	bhi.n	8016dee <__multiply+0xb2>
 8016e28:	9a01      	ldr	r2, [sp, #4]
 8016e2a:	f845 c002 	str.w	ip, [r5, r2]
 8016e2e:	9a03      	ldr	r2, [sp, #12]
 8016e30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016e34:	3304      	adds	r3, #4
 8016e36:	f1b9 0f00 	cmp.w	r9, #0
 8016e3a:	d021      	beq.n	8016e80 <__multiply+0x144>
 8016e3c:	6829      	ldr	r1, [r5, #0]
 8016e3e:	f104 0c14 	add.w	ip, r4, #20
 8016e42:	46ae      	mov	lr, r5
 8016e44:	f04f 0a00 	mov.w	sl, #0
 8016e48:	f8bc b000 	ldrh.w	fp, [ip]
 8016e4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016e50:	fb09 220b 	mla	r2, r9, fp, r2
 8016e54:	4452      	add	r2, sl
 8016e56:	b289      	uxth	r1, r1
 8016e58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016e5c:	f84e 1b04 	str.w	r1, [lr], #4
 8016e60:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016e64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016e68:	f8be 1000 	ldrh.w	r1, [lr]
 8016e6c:	fb09 110a 	mla	r1, r9, sl, r1
 8016e70:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8016e74:	4567      	cmp	r7, ip
 8016e76:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016e7a:	d8e5      	bhi.n	8016e48 <__multiply+0x10c>
 8016e7c:	9a01      	ldr	r2, [sp, #4]
 8016e7e:	50a9      	str	r1, [r5, r2]
 8016e80:	3504      	adds	r5, #4
 8016e82:	e799      	b.n	8016db8 <__multiply+0x7c>
 8016e84:	3e01      	subs	r6, #1
 8016e86:	e79b      	b.n	8016dc0 <__multiply+0x84>
 8016e88:	0801badc 	.word	0x0801badc
 8016e8c:	0801bb4d 	.word	0x0801bb4d

08016e90 <__pow5mult>:
 8016e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e94:	4615      	mov	r5, r2
 8016e96:	f012 0203 	ands.w	r2, r2, #3
 8016e9a:	4606      	mov	r6, r0
 8016e9c:	460f      	mov	r7, r1
 8016e9e:	d007      	beq.n	8016eb0 <__pow5mult+0x20>
 8016ea0:	4c25      	ldr	r4, [pc, #148]	; (8016f38 <__pow5mult+0xa8>)
 8016ea2:	3a01      	subs	r2, #1
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016eaa:	f7ff fe53 	bl	8016b54 <__multadd>
 8016eae:	4607      	mov	r7, r0
 8016eb0:	10ad      	asrs	r5, r5, #2
 8016eb2:	d03d      	beq.n	8016f30 <__pow5mult+0xa0>
 8016eb4:	69f4      	ldr	r4, [r6, #28]
 8016eb6:	b97c      	cbnz	r4, 8016ed8 <__pow5mult+0x48>
 8016eb8:	2010      	movs	r0, #16
 8016eba:	f7fc fad1 	bl	8013460 <malloc>
 8016ebe:	4602      	mov	r2, r0
 8016ec0:	61f0      	str	r0, [r6, #28]
 8016ec2:	b928      	cbnz	r0, 8016ed0 <__pow5mult+0x40>
 8016ec4:	4b1d      	ldr	r3, [pc, #116]	; (8016f3c <__pow5mult+0xac>)
 8016ec6:	481e      	ldr	r0, [pc, #120]	; (8016f40 <__pow5mult+0xb0>)
 8016ec8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8016ecc:	f7fe fb92 	bl	80155f4 <__assert_func>
 8016ed0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016ed4:	6004      	str	r4, [r0, #0]
 8016ed6:	60c4      	str	r4, [r0, #12]
 8016ed8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8016edc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016ee0:	b94c      	cbnz	r4, 8016ef6 <__pow5mult+0x66>
 8016ee2:	f240 2171 	movw	r1, #625	; 0x271
 8016ee6:	4630      	mov	r0, r6
 8016ee8:	f7ff ff12 	bl	8016d10 <__i2b>
 8016eec:	2300      	movs	r3, #0
 8016eee:	f8c8 0008 	str.w	r0, [r8, #8]
 8016ef2:	4604      	mov	r4, r0
 8016ef4:	6003      	str	r3, [r0, #0]
 8016ef6:	f04f 0900 	mov.w	r9, #0
 8016efa:	07eb      	lsls	r3, r5, #31
 8016efc:	d50a      	bpl.n	8016f14 <__pow5mult+0x84>
 8016efe:	4639      	mov	r1, r7
 8016f00:	4622      	mov	r2, r4
 8016f02:	4630      	mov	r0, r6
 8016f04:	f7ff ff1a 	bl	8016d3c <__multiply>
 8016f08:	4639      	mov	r1, r7
 8016f0a:	4680      	mov	r8, r0
 8016f0c:	4630      	mov	r0, r6
 8016f0e:	f7ff fdff 	bl	8016b10 <_Bfree>
 8016f12:	4647      	mov	r7, r8
 8016f14:	106d      	asrs	r5, r5, #1
 8016f16:	d00b      	beq.n	8016f30 <__pow5mult+0xa0>
 8016f18:	6820      	ldr	r0, [r4, #0]
 8016f1a:	b938      	cbnz	r0, 8016f2c <__pow5mult+0x9c>
 8016f1c:	4622      	mov	r2, r4
 8016f1e:	4621      	mov	r1, r4
 8016f20:	4630      	mov	r0, r6
 8016f22:	f7ff ff0b 	bl	8016d3c <__multiply>
 8016f26:	6020      	str	r0, [r4, #0]
 8016f28:	f8c0 9000 	str.w	r9, [r0]
 8016f2c:	4604      	mov	r4, r0
 8016f2e:	e7e4      	b.n	8016efa <__pow5mult+0x6a>
 8016f30:	4638      	mov	r0, r7
 8016f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f36:	bf00      	nop
 8016f38:	0801bc98 	.word	0x0801bc98
 8016f3c:	0801b9c2 	.word	0x0801b9c2
 8016f40:	0801bb4d 	.word	0x0801bb4d

08016f44 <__lshift>:
 8016f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f48:	460c      	mov	r4, r1
 8016f4a:	6849      	ldr	r1, [r1, #4]
 8016f4c:	6923      	ldr	r3, [r4, #16]
 8016f4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016f52:	68a3      	ldr	r3, [r4, #8]
 8016f54:	4607      	mov	r7, r0
 8016f56:	4691      	mov	r9, r2
 8016f58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016f5c:	f108 0601 	add.w	r6, r8, #1
 8016f60:	42b3      	cmp	r3, r6
 8016f62:	db0b      	blt.n	8016f7c <__lshift+0x38>
 8016f64:	4638      	mov	r0, r7
 8016f66:	f7ff fd93 	bl	8016a90 <_Balloc>
 8016f6a:	4605      	mov	r5, r0
 8016f6c:	b948      	cbnz	r0, 8016f82 <__lshift+0x3e>
 8016f6e:	4602      	mov	r2, r0
 8016f70:	4b28      	ldr	r3, [pc, #160]	; (8017014 <__lshift+0xd0>)
 8016f72:	4829      	ldr	r0, [pc, #164]	; (8017018 <__lshift+0xd4>)
 8016f74:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8016f78:	f7fe fb3c 	bl	80155f4 <__assert_func>
 8016f7c:	3101      	adds	r1, #1
 8016f7e:	005b      	lsls	r3, r3, #1
 8016f80:	e7ee      	b.n	8016f60 <__lshift+0x1c>
 8016f82:	2300      	movs	r3, #0
 8016f84:	f100 0114 	add.w	r1, r0, #20
 8016f88:	f100 0210 	add.w	r2, r0, #16
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	4553      	cmp	r3, sl
 8016f90:	db33      	blt.n	8016ffa <__lshift+0xb6>
 8016f92:	6920      	ldr	r0, [r4, #16]
 8016f94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016f98:	f104 0314 	add.w	r3, r4, #20
 8016f9c:	f019 091f 	ands.w	r9, r9, #31
 8016fa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016fa4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016fa8:	d02b      	beq.n	8017002 <__lshift+0xbe>
 8016faa:	f1c9 0e20 	rsb	lr, r9, #32
 8016fae:	468a      	mov	sl, r1
 8016fb0:	2200      	movs	r2, #0
 8016fb2:	6818      	ldr	r0, [r3, #0]
 8016fb4:	fa00 f009 	lsl.w	r0, r0, r9
 8016fb8:	4310      	orrs	r0, r2
 8016fba:	f84a 0b04 	str.w	r0, [sl], #4
 8016fbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8016fc2:	459c      	cmp	ip, r3
 8016fc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8016fc8:	d8f3      	bhi.n	8016fb2 <__lshift+0x6e>
 8016fca:	ebac 0304 	sub.w	r3, ip, r4
 8016fce:	3b15      	subs	r3, #21
 8016fd0:	f023 0303 	bic.w	r3, r3, #3
 8016fd4:	3304      	adds	r3, #4
 8016fd6:	f104 0015 	add.w	r0, r4, #21
 8016fda:	4584      	cmp	ip, r0
 8016fdc:	bf38      	it	cc
 8016fde:	2304      	movcc	r3, #4
 8016fe0:	50ca      	str	r2, [r1, r3]
 8016fe2:	b10a      	cbz	r2, 8016fe8 <__lshift+0xa4>
 8016fe4:	f108 0602 	add.w	r6, r8, #2
 8016fe8:	3e01      	subs	r6, #1
 8016fea:	4638      	mov	r0, r7
 8016fec:	612e      	str	r6, [r5, #16]
 8016fee:	4621      	mov	r1, r4
 8016ff0:	f7ff fd8e 	bl	8016b10 <_Bfree>
 8016ff4:	4628      	mov	r0, r5
 8016ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ffa:	f842 0f04 	str.w	r0, [r2, #4]!
 8016ffe:	3301      	adds	r3, #1
 8017000:	e7c5      	b.n	8016f8e <__lshift+0x4a>
 8017002:	3904      	subs	r1, #4
 8017004:	f853 2b04 	ldr.w	r2, [r3], #4
 8017008:	f841 2f04 	str.w	r2, [r1, #4]!
 801700c:	459c      	cmp	ip, r3
 801700e:	d8f9      	bhi.n	8017004 <__lshift+0xc0>
 8017010:	e7ea      	b.n	8016fe8 <__lshift+0xa4>
 8017012:	bf00      	nop
 8017014:	0801badc 	.word	0x0801badc
 8017018:	0801bb4d 	.word	0x0801bb4d

0801701c <__mcmp>:
 801701c:	b530      	push	{r4, r5, lr}
 801701e:	6902      	ldr	r2, [r0, #16]
 8017020:	690c      	ldr	r4, [r1, #16]
 8017022:	1b12      	subs	r2, r2, r4
 8017024:	d10e      	bne.n	8017044 <__mcmp+0x28>
 8017026:	f100 0314 	add.w	r3, r0, #20
 801702a:	3114      	adds	r1, #20
 801702c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017030:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017034:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017038:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801703c:	42a5      	cmp	r5, r4
 801703e:	d003      	beq.n	8017048 <__mcmp+0x2c>
 8017040:	d305      	bcc.n	801704e <__mcmp+0x32>
 8017042:	2201      	movs	r2, #1
 8017044:	4610      	mov	r0, r2
 8017046:	bd30      	pop	{r4, r5, pc}
 8017048:	4283      	cmp	r3, r0
 801704a:	d3f3      	bcc.n	8017034 <__mcmp+0x18>
 801704c:	e7fa      	b.n	8017044 <__mcmp+0x28>
 801704e:	f04f 32ff 	mov.w	r2, #4294967295
 8017052:	e7f7      	b.n	8017044 <__mcmp+0x28>

08017054 <__mdiff>:
 8017054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017058:	460c      	mov	r4, r1
 801705a:	4606      	mov	r6, r0
 801705c:	4611      	mov	r1, r2
 801705e:	4620      	mov	r0, r4
 8017060:	4690      	mov	r8, r2
 8017062:	f7ff ffdb 	bl	801701c <__mcmp>
 8017066:	1e05      	subs	r5, r0, #0
 8017068:	d110      	bne.n	801708c <__mdiff+0x38>
 801706a:	4629      	mov	r1, r5
 801706c:	4630      	mov	r0, r6
 801706e:	f7ff fd0f 	bl	8016a90 <_Balloc>
 8017072:	b930      	cbnz	r0, 8017082 <__mdiff+0x2e>
 8017074:	4b3a      	ldr	r3, [pc, #232]	; (8017160 <__mdiff+0x10c>)
 8017076:	4602      	mov	r2, r0
 8017078:	f240 2137 	movw	r1, #567	; 0x237
 801707c:	4839      	ldr	r0, [pc, #228]	; (8017164 <__mdiff+0x110>)
 801707e:	f7fe fab9 	bl	80155f4 <__assert_func>
 8017082:	2301      	movs	r3, #1
 8017084:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801708c:	bfa4      	itt	ge
 801708e:	4643      	movge	r3, r8
 8017090:	46a0      	movge	r8, r4
 8017092:	4630      	mov	r0, r6
 8017094:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017098:	bfa6      	itte	ge
 801709a:	461c      	movge	r4, r3
 801709c:	2500      	movge	r5, #0
 801709e:	2501      	movlt	r5, #1
 80170a0:	f7ff fcf6 	bl	8016a90 <_Balloc>
 80170a4:	b920      	cbnz	r0, 80170b0 <__mdiff+0x5c>
 80170a6:	4b2e      	ldr	r3, [pc, #184]	; (8017160 <__mdiff+0x10c>)
 80170a8:	4602      	mov	r2, r0
 80170aa:	f240 2145 	movw	r1, #581	; 0x245
 80170ae:	e7e5      	b.n	801707c <__mdiff+0x28>
 80170b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80170b4:	6926      	ldr	r6, [r4, #16]
 80170b6:	60c5      	str	r5, [r0, #12]
 80170b8:	f104 0914 	add.w	r9, r4, #20
 80170bc:	f108 0514 	add.w	r5, r8, #20
 80170c0:	f100 0e14 	add.w	lr, r0, #20
 80170c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80170c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80170cc:	f108 0210 	add.w	r2, r8, #16
 80170d0:	46f2      	mov	sl, lr
 80170d2:	2100      	movs	r1, #0
 80170d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80170d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80170dc:	fa11 f88b 	uxtah	r8, r1, fp
 80170e0:	b299      	uxth	r1, r3
 80170e2:	0c1b      	lsrs	r3, r3, #16
 80170e4:	eba8 0801 	sub.w	r8, r8, r1
 80170e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80170ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80170f0:	fa1f f888 	uxth.w	r8, r8
 80170f4:	1419      	asrs	r1, r3, #16
 80170f6:	454e      	cmp	r6, r9
 80170f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80170fc:	f84a 3b04 	str.w	r3, [sl], #4
 8017100:	d8e8      	bhi.n	80170d4 <__mdiff+0x80>
 8017102:	1b33      	subs	r3, r6, r4
 8017104:	3b15      	subs	r3, #21
 8017106:	f023 0303 	bic.w	r3, r3, #3
 801710a:	3304      	adds	r3, #4
 801710c:	3415      	adds	r4, #21
 801710e:	42a6      	cmp	r6, r4
 8017110:	bf38      	it	cc
 8017112:	2304      	movcc	r3, #4
 8017114:	441d      	add	r5, r3
 8017116:	4473      	add	r3, lr
 8017118:	469e      	mov	lr, r3
 801711a:	462e      	mov	r6, r5
 801711c:	4566      	cmp	r6, ip
 801711e:	d30e      	bcc.n	801713e <__mdiff+0xea>
 8017120:	f10c 0203 	add.w	r2, ip, #3
 8017124:	1b52      	subs	r2, r2, r5
 8017126:	f022 0203 	bic.w	r2, r2, #3
 801712a:	3d03      	subs	r5, #3
 801712c:	45ac      	cmp	ip, r5
 801712e:	bf38      	it	cc
 8017130:	2200      	movcc	r2, #0
 8017132:	4413      	add	r3, r2
 8017134:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8017138:	b17a      	cbz	r2, 801715a <__mdiff+0x106>
 801713a:	6107      	str	r7, [r0, #16]
 801713c:	e7a4      	b.n	8017088 <__mdiff+0x34>
 801713e:	f856 8b04 	ldr.w	r8, [r6], #4
 8017142:	fa11 f288 	uxtah	r2, r1, r8
 8017146:	1414      	asrs	r4, r2, #16
 8017148:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801714c:	b292      	uxth	r2, r2
 801714e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017152:	f84e 2b04 	str.w	r2, [lr], #4
 8017156:	1421      	asrs	r1, r4, #16
 8017158:	e7e0      	b.n	801711c <__mdiff+0xc8>
 801715a:	3f01      	subs	r7, #1
 801715c:	e7ea      	b.n	8017134 <__mdiff+0xe0>
 801715e:	bf00      	nop
 8017160:	0801badc 	.word	0x0801badc
 8017164:	0801bb4d 	.word	0x0801bb4d

08017168 <__ulp>:
 8017168:	b082      	sub	sp, #8
 801716a:	ed8d 0b00 	vstr	d0, [sp]
 801716e:	9a01      	ldr	r2, [sp, #4]
 8017170:	4b0f      	ldr	r3, [pc, #60]	; (80171b0 <__ulp+0x48>)
 8017172:	4013      	ands	r3, r2
 8017174:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8017178:	2b00      	cmp	r3, #0
 801717a:	dc08      	bgt.n	801718e <__ulp+0x26>
 801717c:	425b      	negs	r3, r3
 801717e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8017182:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017186:	da04      	bge.n	8017192 <__ulp+0x2a>
 8017188:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801718c:	4113      	asrs	r3, r2
 801718e:	2200      	movs	r2, #0
 8017190:	e008      	b.n	80171a4 <__ulp+0x3c>
 8017192:	f1a2 0314 	sub.w	r3, r2, #20
 8017196:	2b1e      	cmp	r3, #30
 8017198:	bfda      	itte	le
 801719a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801719e:	40da      	lsrle	r2, r3
 80171a0:	2201      	movgt	r2, #1
 80171a2:	2300      	movs	r3, #0
 80171a4:	4619      	mov	r1, r3
 80171a6:	4610      	mov	r0, r2
 80171a8:	ec41 0b10 	vmov	d0, r0, r1
 80171ac:	b002      	add	sp, #8
 80171ae:	4770      	bx	lr
 80171b0:	7ff00000 	.word	0x7ff00000

080171b4 <__b2d>:
 80171b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171b8:	6906      	ldr	r6, [r0, #16]
 80171ba:	f100 0814 	add.w	r8, r0, #20
 80171be:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80171c2:	1f37      	subs	r7, r6, #4
 80171c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80171c8:	4610      	mov	r0, r2
 80171ca:	f7ff fd53 	bl	8016c74 <__hi0bits>
 80171ce:	f1c0 0320 	rsb	r3, r0, #32
 80171d2:	280a      	cmp	r0, #10
 80171d4:	600b      	str	r3, [r1, #0]
 80171d6:	491b      	ldr	r1, [pc, #108]	; (8017244 <__b2d+0x90>)
 80171d8:	dc15      	bgt.n	8017206 <__b2d+0x52>
 80171da:	f1c0 0c0b 	rsb	ip, r0, #11
 80171de:	fa22 f30c 	lsr.w	r3, r2, ip
 80171e2:	45b8      	cmp	r8, r7
 80171e4:	ea43 0501 	orr.w	r5, r3, r1
 80171e8:	bf34      	ite	cc
 80171ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80171ee:	2300      	movcs	r3, #0
 80171f0:	3015      	adds	r0, #21
 80171f2:	fa02 f000 	lsl.w	r0, r2, r0
 80171f6:	fa23 f30c 	lsr.w	r3, r3, ip
 80171fa:	4303      	orrs	r3, r0
 80171fc:	461c      	mov	r4, r3
 80171fe:	ec45 4b10 	vmov	d0, r4, r5
 8017202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017206:	45b8      	cmp	r8, r7
 8017208:	bf3a      	itte	cc
 801720a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801720e:	f1a6 0708 	subcc.w	r7, r6, #8
 8017212:	2300      	movcs	r3, #0
 8017214:	380b      	subs	r0, #11
 8017216:	d012      	beq.n	801723e <__b2d+0x8a>
 8017218:	f1c0 0120 	rsb	r1, r0, #32
 801721c:	fa23 f401 	lsr.w	r4, r3, r1
 8017220:	4082      	lsls	r2, r0
 8017222:	4322      	orrs	r2, r4
 8017224:	4547      	cmp	r7, r8
 8017226:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801722a:	bf8c      	ite	hi
 801722c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017230:	2200      	movls	r2, #0
 8017232:	4083      	lsls	r3, r0
 8017234:	40ca      	lsrs	r2, r1
 8017236:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801723a:	4313      	orrs	r3, r2
 801723c:	e7de      	b.n	80171fc <__b2d+0x48>
 801723e:	ea42 0501 	orr.w	r5, r2, r1
 8017242:	e7db      	b.n	80171fc <__b2d+0x48>
 8017244:	3ff00000 	.word	0x3ff00000

08017248 <__d2b>:
 8017248:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801724c:	460f      	mov	r7, r1
 801724e:	2101      	movs	r1, #1
 8017250:	ec59 8b10 	vmov	r8, r9, d0
 8017254:	4616      	mov	r6, r2
 8017256:	f7ff fc1b 	bl	8016a90 <_Balloc>
 801725a:	4604      	mov	r4, r0
 801725c:	b930      	cbnz	r0, 801726c <__d2b+0x24>
 801725e:	4602      	mov	r2, r0
 8017260:	4b24      	ldr	r3, [pc, #144]	; (80172f4 <__d2b+0xac>)
 8017262:	4825      	ldr	r0, [pc, #148]	; (80172f8 <__d2b+0xb0>)
 8017264:	f240 310f 	movw	r1, #783	; 0x30f
 8017268:	f7fe f9c4 	bl	80155f4 <__assert_func>
 801726c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017270:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017274:	bb2d      	cbnz	r5, 80172c2 <__d2b+0x7a>
 8017276:	9301      	str	r3, [sp, #4]
 8017278:	f1b8 0300 	subs.w	r3, r8, #0
 801727c:	d026      	beq.n	80172cc <__d2b+0x84>
 801727e:	4668      	mov	r0, sp
 8017280:	9300      	str	r3, [sp, #0]
 8017282:	f7ff fd17 	bl	8016cb4 <__lo0bits>
 8017286:	e9dd 1200 	ldrd	r1, r2, [sp]
 801728a:	b1e8      	cbz	r0, 80172c8 <__d2b+0x80>
 801728c:	f1c0 0320 	rsb	r3, r0, #32
 8017290:	fa02 f303 	lsl.w	r3, r2, r3
 8017294:	430b      	orrs	r3, r1
 8017296:	40c2      	lsrs	r2, r0
 8017298:	6163      	str	r3, [r4, #20]
 801729a:	9201      	str	r2, [sp, #4]
 801729c:	9b01      	ldr	r3, [sp, #4]
 801729e:	61a3      	str	r3, [r4, #24]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	bf14      	ite	ne
 80172a4:	2202      	movne	r2, #2
 80172a6:	2201      	moveq	r2, #1
 80172a8:	6122      	str	r2, [r4, #16]
 80172aa:	b1bd      	cbz	r5, 80172dc <__d2b+0x94>
 80172ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80172b0:	4405      	add	r5, r0
 80172b2:	603d      	str	r5, [r7, #0]
 80172b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80172b8:	6030      	str	r0, [r6, #0]
 80172ba:	4620      	mov	r0, r4
 80172bc:	b003      	add	sp, #12
 80172be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80172c6:	e7d6      	b.n	8017276 <__d2b+0x2e>
 80172c8:	6161      	str	r1, [r4, #20]
 80172ca:	e7e7      	b.n	801729c <__d2b+0x54>
 80172cc:	a801      	add	r0, sp, #4
 80172ce:	f7ff fcf1 	bl	8016cb4 <__lo0bits>
 80172d2:	9b01      	ldr	r3, [sp, #4]
 80172d4:	6163      	str	r3, [r4, #20]
 80172d6:	3020      	adds	r0, #32
 80172d8:	2201      	movs	r2, #1
 80172da:	e7e5      	b.n	80172a8 <__d2b+0x60>
 80172dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80172e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80172e4:	6038      	str	r0, [r7, #0]
 80172e6:	6918      	ldr	r0, [r3, #16]
 80172e8:	f7ff fcc4 	bl	8016c74 <__hi0bits>
 80172ec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80172f0:	e7e2      	b.n	80172b8 <__d2b+0x70>
 80172f2:	bf00      	nop
 80172f4:	0801badc 	.word	0x0801badc
 80172f8:	0801bb4d 	.word	0x0801bb4d

080172fc <__ratio>:
 80172fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017300:	4688      	mov	r8, r1
 8017302:	4669      	mov	r1, sp
 8017304:	4681      	mov	r9, r0
 8017306:	f7ff ff55 	bl	80171b4 <__b2d>
 801730a:	a901      	add	r1, sp, #4
 801730c:	4640      	mov	r0, r8
 801730e:	ec55 4b10 	vmov	r4, r5, d0
 8017312:	f7ff ff4f 	bl	80171b4 <__b2d>
 8017316:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801731a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801731e:	eba3 0c02 	sub.w	ip, r3, r2
 8017322:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017326:	1a9b      	subs	r3, r3, r2
 8017328:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801732c:	ec51 0b10 	vmov	r0, r1, d0
 8017330:	2b00      	cmp	r3, #0
 8017332:	bfd6      	itet	le
 8017334:	460a      	movle	r2, r1
 8017336:	462a      	movgt	r2, r5
 8017338:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801733c:	468b      	mov	fp, r1
 801733e:	462f      	mov	r7, r5
 8017340:	bfd4      	ite	le
 8017342:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8017346:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801734a:	4620      	mov	r0, r4
 801734c:	ee10 2a10 	vmov	r2, s0
 8017350:	465b      	mov	r3, fp
 8017352:	4639      	mov	r1, r7
 8017354:	f7e9 fa7a 	bl	800084c <__aeabi_ddiv>
 8017358:	ec41 0b10 	vmov	d0, r0, r1
 801735c:	b003      	add	sp, #12
 801735e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017362 <__copybits>:
 8017362:	3901      	subs	r1, #1
 8017364:	b570      	push	{r4, r5, r6, lr}
 8017366:	1149      	asrs	r1, r1, #5
 8017368:	6914      	ldr	r4, [r2, #16]
 801736a:	3101      	adds	r1, #1
 801736c:	f102 0314 	add.w	r3, r2, #20
 8017370:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017374:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017378:	1f05      	subs	r5, r0, #4
 801737a:	42a3      	cmp	r3, r4
 801737c:	d30c      	bcc.n	8017398 <__copybits+0x36>
 801737e:	1aa3      	subs	r3, r4, r2
 8017380:	3b11      	subs	r3, #17
 8017382:	f023 0303 	bic.w	r3, r3, #3
 8017386:	3211      	adds	r2, #17
 8017388:	42a2      	cmp	r2, r4
 801738a:	bf88      	it	hi
 801738c:	2300      	movhi	r3, #0
 801738e:	4418      	add	r0, r3
 8017390:	2300      	movs	r3, #0
 8017392:	4288      	cmp	r0, r1
 8017394:	d305      	bcc.n	80173a2 <__copybits+0x40>
 8017396:	bd70      	pop	{r4, r5, r6, pc}
 8017398:	f853 6b04 	ldr.w	r6, [r3], #4
 801739c:	f845 6f04 	str.w	r6, [r5, #4]!
 80173a0:	e7eb      	b.n	801737a <__copybits+0x18>
 80173a2:	f840 3b04 	str.w	r3, [r0], #4
 80173a6:	e7f4      	b.n	8017392 <__copybits+0x30>

080173a8 <__any_on>:
 80173a8:	f100 0214 	add.w	r2, r0, #20
 80173ac:	6900      	ldr	r0, [r0, #16]
 80173ae:	114b      	asrs	r3, r1, #5
 80173b0:	4298      	cmp	r0, r3
 80173b2:	b510      	push	{r4, lr}
 80173b4:	db11      	blt.n	80173da <__any_on+0x32>
 80173b6:	dd0a      	ble.n	80173ce <__any_on+0x26>
 80173b8:	f011 011f 	ands.w	r1, r1, #31
 80173bc:	d007      	beq.n	80173ce <__any_on+0x26>
 80173be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80173c2:	fa24 f001 	lsr.w	r0, r4, r1
 80173c6:	fa00 f101 	lsl.w	r1, r0, r1
 80173ca:	428c      	cmp	r4, r1
 80173cc:	d10b      	bne.n	80173e6 <__any_on+0x3e>
 80173ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80173d2:	4293      	cmp	r3, r2
 80173d4:	d803      	bhi.n	80173de <__any_on+0x36>
 80173d6:	2000      	movs	r0, #0
 80173d8:	bd10      	pop	{r4, pc}
 80173da:	4603      	mov	r3, r0
 80173dc:	e7f7      	b.n	80173ce <__any_on+0x26>
 80173de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80173e2:	2900      	cmp	r1, #0
 80173e4:	d0f5      	beq.n	80173d2 <__any_on+0x2a>
 80173e6:	2001      	movs	r0, #1
 80173e8:	e7f6      	b.n	80173d8 <__any_on+0x30>

080173ea <__ascii_wctomb>:
 80173ea:	b149      	cbz	r1, 8017400 <__ascii_wctomb+0x16>
 80173ec:	2aff      	cmp	r2, #255	; 0xff
 80173ee:	bf85      	ittet	hi
 80173f0:	238a      	movhi	r3, #138	; 0x8a
 80173f2:	6003      	strhi	r3, [r0, #0]
 80173f4:	700a      	strbls	r2, [r1, #0]
 80173f6:	f04f 30ff 	movhi.w	r0, #4294967295
 80173fa:	bf98      	it	ls
 80173fc:	2001      	movls	r0, #1
 80173fe:	4770      	bx	lr
 8017400:	4608      	mov	r0, r1
 8017402:	4770      	bx	lr

08017404 <__ssputs_r>:
 8017404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017408:	688e      	ldr	r6, [r1, #8]
 801740a:	461f      	mov	r7, r3
 801740c:	42be      	cmp	r6, r7
 801740e:	680b      	ldr	r3, [r1, #0]
 8017410:	4682      	mov	sl, r0
 8017412:	460c      	mov	r4, r1
 8017414:	4690      	mov	r8, r2
 8017416:	d82c      	bhi.n	8017472 <__ssputs_r+0x6e>
 8017418:	898a      	ldrh	r2, [r1, #12]
 801741a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801741e:	d026      	beq.n	801746e <__ssputs_r+0x6a>
 8017420:	6965      	ldr	r5, [r4, #20]
 8017422:	6909      	ldr	r1, [r1, #16]
 8017424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017428:	eba3 0901 	sub.w	r9, r3, r1
 801742c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017430:	1c7b      	adds	r3, r7, #1
 8017432:	444b      	add	r3, r9
 8017434:	106d      	asrs	r5, r5, #1
 8017436:	429d      	cmp	r5, r3
 8017438:	bf38      	it	cc
 801743a:	461d      	movcc	r5, r3
 801743c:	0553      	lsls	r3, r2, #21
 801743e:	d527      	bpl.n	8017490 <__ssputs_r+0x8c>
 8017440:	4629      	mov	r1, r5
 8017442:	f7fc f83d 	bl	80134c0 <_malloc_r>
 8017446:	4606      	mov	r6, r0
 8017448:	b360      	cbz	r0, 80174a4 <__ssputs_r+0xa0>
 801744a:	6921      	ldr	r1, [r4, #16]
 801744c:	464a      	mov	r2, r9
 801744e:	f7fe f8b4 	bl	80155ba <memcpy>
 8017452:	89a3      	ldrh	r3, [r4, #12]
 8017454:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801745c:	81a3      	strh	r3, [r4, #12]
 801745e:	6126      	str	r6, [r4, #16]
 8017460:	6165      	str	r5, [r4, #20]
 8017462:	444e      	add	r6, r9
 8017464:	eba5 0509 	sub.w	r5, r5, r9
 8017468:	6026      	str	r6, [r4, #0]
 801746a:	60a5      	str	r5, [r4, #8]
 801746c:	463e      	mov	r6, r7
 801746e:	42be      	cmp	r6, r7
 8017470:	d900      	bls.n	8017474 <__ssputs_r+0x70>
 8017472:	463e      	mov	r6, r7
 8017474:	6820      	ldr	r0, [r4, #0]
 8017476:	4632      	mov	r2, r6
 8017478:	4641      	mov	r1, r8
 801747a:	f000 f9db 	bl	8017834 <memmove>
 801747e:	68a3      	ldr	r3, [r4, #8]
 8017480:	1b9b      	subs	r3, r3, r6
 8017482:	60a3      	str	r3, [r4, #8]
 8017484:	6823      	ldr	r3, [r4, #0]
 8017486:	4433      	add	r3, r6
 8017488:	6023      	str	r3, [r4, #0]
 801748a:	2000      	movs	r0, #0
 801748c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017490:	462a      	mov	r2, r5
 8017492:	f000 fa06 	bl	80178a2 <_realloc_r>
 8017496:	4606      	mov	r6, r0
 8017498:	2800      	cmp	r0, #0
 801749a:	d1e0      	bne.n	801745e <__ssputs_r+0x5a>
 801749c:	6921      	ldr	r1, [r4, #16]
 801749e:	4650      	mov	r0, sl
 80174a0:	f7fe ff40 	bl	8016324 <_free_r>
 80174a4:	230c      	movs	r3, #12
 80174a6:	f8ca 3000 	str.w	r3, [sl]
 80174aa:	89a3      	ldrh	r3, [r4, #12]
 80174ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174b0:	81a3      	strh	r3, [r4, #12]
 80174b2:	f04f 30ff 	mov.w	r0, #4294967295
 80174b6:	e7e9      	b.n	801748c <__ssputs_r+0x88>

080174b8 <_svfiprintf_r>:
 80174b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174bc:	4698      	mov	r8, r3
 80174be:	898b      	ldrh	r3, [r1, #12]
 80174c0:	061b      	lsls	r3, r3, #24
 80174c2:	b09d      	sub	sp, #116	; 0x74
 80174c4:	4607      	mov	r7, r0
 80174c6:	460d      	mov	r5, r1
 80174c8:	4614      	mov	r4, r2
 80174ca:	d50e      	bpl.n	80174ea <_svfiprintf_r+0x32>
 80174cc:	690b      	ldr	r3, [r1, #16]
 80174ce:	b963      	cbnz	r3, 80174ea <_svfiprintf_r+0x32>
 80174d0:	2140      	movs	r1, #64	; 0x40
 80174d2:	f7fb fff5 	bl	80134c0 <_malloc_r>
 80174d6:	6028      	str	r0, [r5, #0]
 80174d8:	6128      	str	r0, [r5, #16]
 80174da:	b920      	cbnz	r0, 80174e6 <_svfiprintf_r+0x2e>
 80174dc:	230c      	movs	r3, #12
 80174de:	603b      	str	r3, [r7, #0]
 80174e0:	f04f 30ff 	mov.w	r0, #4294967295
 80174e4:	e0d0      	b.n	8017688 <_svfiprintf_r+0x1d0>
 80174e6:	2340      	movs	r3, #64	; 0x40
 80174e8:	616b      	str	r3, [r5, #20]
 80174ea:	2300      	movs	r3, #0
 80174ec:	9309      	str	r3, [sp, #36]	; 0x24
 80174ee:	2320      	movs	r3, #32
 80174f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80174f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80174f8:	2330      	movs	r3, #48	; 0x30
 80174fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80176a0 <_svfiprintf_r+0x1e8>
 80174fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017502:	f04f 0901 	mov.w	r9, #1
 8017506:	4623      	mov	r3, r4
 8017508:	469a      	mov	sl, r3
 801750a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801750e:	b10a      	cbz	r2, 8017514 <_svfiprintf_r+0x5c>
 8017510:	2a25      	cmp	r2, #37	; 0x25
 8017512:	d1f9      	bne.n	8017508 <_svfiprintf_r+0x50>
 8017514:	ebba 0b04 	subs.w	fp, sl, r4
 8017518:	d00b      	beq.n	8017532 <_svfiprintf_r+0x7a>
 801751a:	465b      	mov	r3, fp
 801751c:	4622      	mov	r2, r4
 801751e:	4629      	mov	r1, r5
 8017520:	4638      	mov	r0, r7
 8017522:	f7ff ff6f 	bl	8017404 <__ssputs_r>
 8017526:	3001      	adds	r0, #1
 8017528:	f000 80a9 	beq.w	801767e <_svfiprintf_r+0x1c6>
 801752c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801752e:	445a      	add	r2, fp
 8017530:	9209      	str	r2, [sp, #36]	; 0x24
 8017532:	f89a 3000 	ldrb.w	r3, [sl]
 8017536:	2b00      	cmp	r3, #0
 8017538:	f000 80a1 	beq.w	801767e <_svfiprintf_r+0x1c6>
 801753c:	2300      	movs	r3, #0
 801753e:	f04f 32ff 	mov.w	r2, #4294967295
 8017542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017546:	f10a 0a01 	add.w	sl, sl, #1
 801754a:	9304      	str	r3, [sp, #16]
 801754c:	9307      	str	r3, [sp, #28]
 801754e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017552:	931a      	str	r3, [sp, #104]	; 0x68
 8017554:	4654      	mov	r4, sl
 8017556:	2205      	movs	r2, #5
 8017558:	f814 1b01 	ldrb.w	r1, [r4], #1
 801755c:	4850      	ldr	r0, [pc, #320]	; (80176a0 <_svfiprintf_r+0x1e8>)
 801755e:	f7e8 fe37 	bl	80001d0 <memchr>
 8017562:	9a04      	ldr	r2, [sp, #16]
 8017564:	b9d8      	cbnz	r0, 801759e <_svfiprintf_r+0xe6>
 8017566:	06d0      	lsls	r0, r2, #27
 8017568:	bf44      	itt	mi
 801756a:	2320      	movmi	r3, #32
 801756c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017570:	0711      	lsls	r1, r2, #28
 8017572:	bf44      	itt	mi
 8017574:	232b      	movmi	r3, #43	; 0x2b
 8017576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801757a:	f89a 3000 	ldrb.w	r3, [sl]
 801757e:	2b2a      	cmp	r3, #42	; 0x2a
 8017580:	d015      	beq.n	80175ae <_svfiprintf_r+0xf6>
 8017582:	9a07      	ldr	r2, [sp, #28]
 8017584:	4654      	mov	r4, sl
 8017586:	2000      	movs	r0, #0
 8017588:	f04f 0c0a 	mov.w	ip, #10
 801758c:	4621      	mov	r1, r4
 801758e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017592:	3b30      	subs	r3, #48	; 0x30
 8017594:	2b09      	cmp	r3, #9
 8017596:	d94d      	bls.n	8017634 <_svfiprintf_r+0x17c>
 8017598:	b1b0      	cbz	r0, 80175c8 <_svfiprintf_r+0x110>
 801759a:	9207      	str	r2, [sp, #28]
 801759c:	e014      	b.n	80175c8 <_svfiprintf_r+0x110>
 801759e:	eba0 0308 	sub.w	r3, r0, r8
 80175a2:	fa09 f303 	lsl.w	r3, r9, r3
 80175a6:	4313      	orrs	r3, r2
 80175a8:	9304      	str	r3, [sp, #16]
 80175aa:	46a2      	mov	sl, r4
 80175ac:	e7d2      	b.n	8017554 <_svfiprintf_r+0x9c>
 80175ae:	9b03      	ldr	r3, [sp, #12]
 80175b0:	1d19      	adds	r1, r3, #4
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	9103      	str	r1, [sp, #12]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	bfbb      	ittet	lt
 80175ba:	425b      	neglt	r3, r3
 80175bc:	f042 0202 	orrlt.w	r2, r2, #2
 80175c0:	9307      	strge	r3, [sp, #28]
 80175c2:	9307      	strlt	r3, [sp, #28]
 80175c4:	bfb8      	it	lt
 80175c6:	9204      	strlt	r2, [sp, #16]
 80175c8:	7823      	ldrb	r3, [r4, #0]
 80175ca:	2b2e      	cmp	r3, #46	; 0x2e
 80175cc:	d10c      	bne.n	80175e8 <_svfiprintf_r+0x130>
 80175ce:	7863      	ldrb	r3, [r4, #1]
 80175d0:	2b2a      	cmp	r3, #42	; 0x2a
 80175d2:	d134      	bne.n	801763e <_svfiprintf_r+0x186>
 80175d4:	9b03      	ldr	r3, [sp, #12]
 80175d6:	1d1a      	adds	r2, r3, #4
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	9203      	str	r2, [sp, #12]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	bfb8      	it	lt
 80175e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80175e4:	3402      	adds	r4, #2
 80175e6:	9305      	str	r3, [sp, #20]
 80175e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80176b0 <_svfiprintf_r+0x1f8>
 80175ec:	7821      	ldrb	r1, [r4, #0]
 80175ee:	2203      	movs	r2, #3
 80175f0:	4650      	mov	r0, sl
 80175f2:	f7e8 fded 	bl	80001d0 <memchr>
 80175f6:	b138      	cbz	r0, 8017608 <_svfiprintf_r+0x150>
 80175f8:	9b04      	ldr	r3, [sp, #16]
 80175fa:	eba0 000a 	sub.w	r0, r0, sl
 80175fe:	2240      	movs	r2, #64	; 0x40
 8017600:	4082      	lsls	r2, r0
 8017602:	4313      	orrs	r3, r2
 8017604:	3401      	adds	r4, #1
 8017606:	9304      	str	r3, [sp, #16]
 8017608:	f814 1b01 	ldrb.w	r1, [r4], #1
 801760c:	4825      	ldr	r0, [pc, #148]	; (80176a4 <_svfiprintf_r+0x1ec>)
 801760e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017612:	2206      	movs	r2, #6
 8017614:	f7e8 fddc 	bl	80001d0 <memchr>
 8017618:	2800      	cmp	r0, #0
 801761a:	d038      	beq.n	801768e <_svfiprintf_r+0x1d6>
 801761c:	4b22      	ldr	r3, [pc, #136]	; (80176a8 <_svfiprintf_r+0x1f0>)
 801761e:	bb1b      	cbnz	r3, 8017668 <_svfiprintf_r+0x1b0>
 8017620:	9b03      	ldr	r3, [sp, #12]
 8017622:	3307      	adds	r3, #7
 8017624:	f023 0307 	bic.w	r3, r3, #7
 8017628:	3308      	adds	r3, #8
 801762a:	9303      	str	r3, [sp, #12]
 801762c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801762e:	4433      	add	r3, r6
 8017630:	9309      	str	r3, [sp, #36]	; 0x24
 8017632:	e768      	b.n	8017506 <_svfiprintf_r+0x4e>
 8017634:	fb0c 3202 	mla	r2, ip, r2, r3
 8017638:	460c      	mov	r4, r1
 801763a:	2001      	movs	r0, #1
 801763c:	e7a6      	b.n	801758c <_svfiprintf_r+0xd4>
 801763e:	2300      	movs	r3, #0
 8017640:	3401      	adds	r4, #1
 8017642:	9305      	str	r3, [sp, #20]
 8017644:	4619      	mov	r1, r3
 8017646:	f04f 0c0a 	mov.w	ip, #10
 801764a:	4620      	mov	r0, r4
 801764c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017650:	3a30      	subs	r2, #48	; 0x30
 8017652:	2a09      	cmp	r2, #9
 8017654:	d903      	bls.n	801765e <_svfiprintf_r+0x1a6>
 8017656:	2b00      	cmp	r3, #0
 8017658:	d0c6      	beq.n	80175e8 <_svfiprintf_r+0x130>
 801765a:	9105      	str	r1, [sp, #20]
 801765c:	e7c4      	b.n	80175e8 <_svfiprintf_r+0x130>
 801765e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017662:	4604      	mov	r4, r0
 8017664:	2301      	movs	r3, #1
 8017666:	e7f0      	b.n	801764a <_svfiprintf_r+0x192>
 8017668:	ab03      	add	r3, sp, #12
 801766a:	9300      	str	r3, [sp, #0]
 801766c:	462a      	mov	r2, r5
 801766e:	4b0f      	ldr	r3, [pc, #60]	; (80176ac <_svfiprintf_r+0x1f4>)
 8017670:	a904      	add	r1, sp, #16
 8017672:	4638      	mov	r0, r7
 8017674:	f7fc ff56 	bl	8014524 <_printf_float>
 8017678:	1c42      	adds	r2, r0, #1
 801767a:	4606      	mov	r6, r0
 801767c:	d1d6      	bne.n	801762c <_svfiprintf_r+0x174>
 801767e:	89ab      	ldrh	r3, [r5, #12]
 8017680:	065b      	lsls	r3, r3, #25
 8017682:	f53f af2d 	bmi.w	80174e0 <_svfiprintf_r+0x28>
 8017686:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017688:	b01d      	add	sp, #116	; 0x74
 801768a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801768e:	ab03      	add	r3, sp, #12
 8017690:	9300      	str	r3, [sp, #0]
 8017692:	462a      	mov	r2, r5
 8017694:	4b05      	ldr	r3, [pc, #20]	; (80176ac <_svfiprintf_r+0x1f4>)
 8017696:	a904      	add	r1, sp, #16
 8017698:	4638      	mov	r0, r7
 801769a:	f7fd f9e7 	bl	8014a6c <_printf_i>
 801769e:	e7eb      	b.n	8017678 <_svfiprintf_r+0x1c0>
 80176a0:	0801bca4 	.word	0x0801bca4
 80176a4:	0801bcae 	.word	0x0801bcae
 80176a8:	08014525 	.word	0x08014525
 80176ac:	08017405 	.word	0x08017405
 80176b0:	0801bcaa 	.word	0x0801bcaa

080176b4 <__sflush_r>:
 80176b4:	898a      	ldrh	r2, [r1, #12]
 80176b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176ba:	4605      	mov	r5, r0
 80176bc:	0710      	lsls	r0, r2, #28
 80176be:	460c      	mov	r4, r1
 80176c0:	d458      	bmi.n	8017774 <__sflush_r+0xc0>
 80176c2:	684b      	ldr	r3, [r1, #4]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	dc05      	bgt.n	80176d4 <__sflush_r+0x20>
 80176c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	dc02      	bgt.n	80176d4 <__sflush_r+0x20>
 80176ce:	2000      	movs	r0, #0
 80176d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80176d6:	2e00      	cmp	r6, #0
 80176d8:	d0f9      	beq.n	80176ce <__sflush_r+0x1a>
 80176da:	2300      	movs	r3, #0
 80176dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80176e0:	682f      	ldr	r7, [r5, #0]
 80176e2:	6a21      	ldr	r1, [r4, #32]
 80176e4:	602b      	str	r3, [r5, #0]
 80176e6:	d032      	beq.n	801774e <__sflush_r+0x9a>
 80176e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80176ea:	89a3      	ldrh	r3, [r4, #12]
 80176ec:	075a      	lsls	r2, r3, #29
 80176ee:	d505      	bpl.n	80176fc <__sflush_r+0x48>
 80176f0:	6863      	ldr	r3, [r4, #4]
 80176f2:	1ac0      	subs	r0, r0, r3
 80176f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80176f6:	b10b      	cbz	r3, 80176fc <__sflush_r+0x48>
 80176f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80176fa:	1ac0      	subs	r0, r0, r3
 80176fc:	2300      	movs	r3, #0
 80176fe:	4602      	mov	r2, r0
 8017700:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017702:	6a21      	ldr	r1, [r4, #32]
 8017704:	4628      	mov	r0, r5
 8017706:	47b0      	blx	r6
 8017708:	1c43      	adds	r3, r0, #1
 801770a:	89a3      	ldrh	r3, [r4, #12]
 801770c:	d106      	bne.n	801771c <__sflush_r+0x68>
 801770e:	6829      	ldr	r1, [r5, #0]
 8017710:	291d      	cmp	r1, #29
 8017712:	d82b      	bhi.n	801776c <__sflush_r+0xb8>
 8017714:	4a29      	ldr	r2, [pc, #164]	; (80177bc <__sflush_r+0x108>)
 8017716:	410a      	asrs	r2, r1
 8017718:	07d6      	lsls	r6, r2, #31
 801771a:	d427      	bmi.n	801776c <__sflush_r+0xb8>
 801771c:	2200      	movs	r2, #0
 801771e:	6062      	str	r2, [r4, #4]
 8017720:	04d9      	lsls	r1, r3, #19
 8017722:	6922      	ldr	r2, [r4, #16]
 8017724:	6022      	str	r2, [r4, #0]
 8017726:	d504      	bpl.n	8017732 <__sflush_r+0x7e>
 8017728:	1c42      	adds	r2, r0, #1
 801772a:	d101      	bne.n	8017730 <__sflush_r+0x7c>
 801772c:	682b      	ldr	r3, [r5, #0]
 801772e:	b903      	cbnz	r3, 8017732 <__sflush_r+0x7e>
 8017730:	6560      	str	r0, [r4, #84]	; 0x54
 8017732:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017734:	602f      	str	r7, [r5, #0]
 8017736:	2900      	cmp	r1, #0
 8017738:	d0c9      	beq.n	80176ce <__sflush_r+0x1a>
 801773a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801773e:	4299      	cmp	r1, r3
 8017740:	d002      	beq.n	8017748 <__sflush_r+0x94>
 8017742:	4628      	mov	r0, r5
 8017744:	f7fe fdee 	bl	8016324 <_free_r>
 8017748:	2000      	movs	r0, #0
 801774a:	6360      	str	r0, [r4, #52]	; 0x34
 801774c:	e7c0      	b.n	80176d0 <__sflush_r+0x1c>
 801774e:	2301      	movs	r3, #1
 8017750:	4628      	mov	r0, r5
 8017752:	47b0      	blx	r6
 8017754:	1c41      	adds	r1, r0, #1
 8017756:	d1c8      	bne.n	80176ea <__sflush_r+0x36>
 8017758:	682b      	ldr	r3, [r5, #0]
 801775a:	2b00      	cmp	r3, #0
 801775c:	d0c5      	beq.n	80176ea <__sflush_r+0x36>
 801775e:	2b1d      	cmp	r3, #29
 8017760:	d001      	beq.n	8017766 <__sflush_r+0xb2>
 8017762:	2b16      	cmp	r3, #22
 8017764:	d101      	bne.n	801776a <__sflush_r+0xb6>
 8017766:	602f      	str	r7, [r5, #0]
 8017768:	e7b1      	b.n	80176ce <__sflush_r+0x1a>
 801776a:	89a3      	ldrh	r3, [r4, #12]
 801776c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017770:	81a3      	strh	r3, [r4, #12]
 8017772:	e7ad      	b.n	80176d0 <__sflush_r+0x1c>
 8017774:	690f      	ldr	r7, [r1, #16]
 8017776:	2f00      	cmp	r7, #0
 8017778:	d0a9      	beq.n	80176ce <__sflush_r+0x1a>
 801777a:	0793      	lsls	r3, r2, #30
 801777c:	680e      	ldr	r6, [r1, #0]
 801777e:	bf08      	it	eq
 8017780:	694b      	ldreq	r3, [r1, #20]
 8017782:	600f      	str	r7, [r1, #0]
 8017784:	bf18      	it	ne
 8017786:	2300      	movne	r3, #0
 8017788:	eba6 0807 	sub.w	r8, r6, r7
 801778c:	608b      	str	r3, [r1, #8]
 801778e:	f1b8 0f00 	cmp.w	r8, #0
 8017792:	dd9c      	ble.n	80176ce <__sflush_r+0x1a>
 8017794:	6a21      	ldr	r1, [r4, #32]
 8017796:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017798:	4643      	mov	r3, r8
 801779a:	463a      	mov	r2, r7
 801779c:	4628      	mov	r0, r5
 801779e:	47b0      	blx	r6
 80177a0:	2800      	cmp	r0, #0
 80177a2:	dc06      	bgt.n	80177b2 <__sflush_r+0xfe>
 80177a4:	89a3      	ldrh	r3, [r4, #12]
 80177a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80177aa:	81a3      	strh	r3, [r4, #12]
 80177ac:	f04f 30ff 	mov.w	r0, #4294967295
 80177b0:	e78e      	b.n	80176d0 <__sflush_r+0x1c>
 80177b2:	4407      	add	r7, r0
 80177b4:	eba8 0800 	sub.w	r8, r8, r0
 80177b8:	e7e9      	b.n	801778e <__sflush_r+0xda>
 80177ba:	bf00      	nop
 80177bc:	dfbffffe 	.word	0xdfbffffe

080177c0 <_fflush_r>:
 80177c0:	b538      	push	{r3, r4, r5, lr}
 80177c2:	690b      	ldr	r3, [r1, #16]
 80177c4:	4605      	mov	r5, r0
 80177c6:	460c      	mov	r4, r1
 80177c8:	b913      	cbnz	r3, 80177d0 <_fflush_r+0x10>
 80177ca:	2500      	movs	r5, #0
 80177cc:	4628      	mov	r0, r5
 80177ce:	bd38      	pop	{r3, r4, r5, pc}
 80177d0:	b118      	cbz	r0, 80177da <_fflush_r+0x1a>
 80177d2:	6a03      	ldr	r3, [r0, #32]
 80177d4:	b90b      	cbnz	r3, 80177da <_fflush_r+0x1a>
 80177d6:	f7fd fd07 	bl	80151e8 <__sinit>
 80177da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d0f3      	beq.n	80177ca <_fflush_r+0xa>
 80177e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80177e4:	07d0      	lsls	r0, r2, #31
 80177e6:	d404      	bmi.n	80177f2 <_fflush_r+0x32>
 80177e8:	0599      	lsls	r1, r3, #22
 80177ea:	d402      	bmi.n	80177f2 <_fflush_r+0x32>
 80177ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80177ee:	f7fd feda 	bl	80155a6 <__retarget_lock_acquire_recursive>
 80177f2:	4628      	mov	r0, r5
 80177f4:	4621      	mov	r1, r4
 80177f6:	f7ff ff5d 	bl	80176b4 <__sflush_r>
 80177fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80177fc:	07da      	lsls	r2, r3, #31
 80177fe:	4605      	mov	r5, r0
 8017800:	d4e4      	bmi.n	80177cc <_fflush_r+0xc>
 8017802:	89a3      	ldrh	r3, [r4, #12]
 8017804:	059b      	lsls	r3, r3, #22
 8017806:	d4e1      	bmi.n	80177cc <_fflush_r+0xc>
 8017808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801780a:	f7fd fecd 	bl	80155a8 <__retarget_lock_release_recursive>
 801780e:	e7dd      	b.n	80177cc <_fflush_r+0xc>

08017810 <fiprintf>:
 8017810:	b40e      	push	{r1, r2, r3}
 8017812:	b503      	push	{r0, r1, lr}
 8017814:	4601      	mov	r1, r0
 8017816:	ab03      	add	r3, sp, #12
 8017818:	4805      	ldr	r0, [pc, #20]	; (8017830 <fiprintf+0x20>)
 801781a:	f853 2b04 	ldr.w	r2, [r3], #4
 801781e:	6800      	ldr	r0, [r0, #0]
 8017820:	9301      	str	r3, [sp, #4]
 8017822:	f000 f897 	bl	8017954 <_vfiprintf_r>
 8017826:	b002      	add	sp, #8
 8017828:	f85d eb04 	ldr.w	lr, [sp], #4
 801782c:	b003      	add	sp, #12
 801782e:	4770      	bx	lr
 8017830:	200002f0 	.word	0x200002f0

08017834 <memmove>:
 8017834:	4288      	cmp	r0, r1
 8017836:	b510      	push	{r4, lr}
 8017838:	eb01 0402 	add.w	r4, r1, r2
 801783c:	d902      	bls.n	8017844 <memmove+0x10>
 801783e:	4284      	cmp	r4, r0
 8017840:	4623      	mov	r3, r4
 8017842:	d807      	bhi.n	8017854 <memmove+0x20>
 8017844:	1e43      	subs	r3, r0, #1
 8017846:	42a1      	cmp	r1, r4
 8017848:	d008      	beq.n	801785c <memmove+0x28>
 801784a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801784e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017852:	e7f8      	b.n	8017846 <memmove+0x12>
 8017854:	4402      	add	r2, r0
 8017856:	4601      	mov	r1, r0
 8017858:	428a      	cmp	r2, r1
 801785a:	d100      	bne.n	801785e <memmove+0x2a>
 801785c:	bd10      	pop	{r4, pc}
 801785e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017862:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017866:	e7f7      	b.n	8017858 <memmove+0x24>

08017868 <abort>:
 8017868:	b508      	push	{r3, lr}
 801786a:	2006      	movs	r0, #6
 801786c:	f000 fa4a 	bl	8017d04 <raise>
 8017870:	2001      	movs	r0, #1
 8017872:	f7ed fbd3 	bl	800501c <_exit>

08017876 <_calloc_r>:
 8017876:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017878:	fba1 2402 	umull	r2, r4, r1, r2
 801787c:	b94c      	cbnz	r4, 8017892 <_calloc_r+0x1c>
 801787e:	4611      	mov	r1, r2
 8017880:	9201      	str	r2, [sp, #4]
 8017882:	f7fb fe1d 	bl	80134c0 <_malloc_r>
 8017886:	9a01      	ldr	r2, [sp, #4]
 8017888:	4605      	mov	r5, r0
 801788a:	b930      	cbnz	r0, 801789a <_calloc_r+0x24>
 801788c:	4628      	mov	r0, r5
 801788e:	b003      	add	sp, #12
 8017890:	bd30      	pop	{r4, r5, pc}
 8017892:	220c      	movs	r2, #12
 8017894:	6002      	str	r2, [r0, #0]
 8017896:	2500      	movs	r5, #0
 8017898:	e7f8      	b.n	801788c <_calloc_r+0x16>
 801789a:	4621      	mov	r1, r4
 801789c:	f7fd fd71 	bl	8015382 <memset>
 80178a0:	e7f4      	b.n	801788c <_calloc_r+0x16>

080178a2 <_realloc_r>:
 80178a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178a6:	4680      	mov	r8, r0
 80178a8:	4614      	mov	r4, r2
 80178aa:	460e      	mov	r6, r1
 80178ac:	b921      	cbnz	r1, 80178b8 <_realloc_r+0x16>
 80178ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178b2:	4611      	mov	r1, r2
 80178b4:	f7fb be04 	b.w	80134c0 <_malloc_r>
 80178b8:	b92a      	cbnz	r2, 80178c6 <_realloc_r+0x24>
 80178ba:	f7fe fd33 	bl	8016324 <_free_r>
 80178be:	4625      	mov	r5, r4
 80178c0:	4628      	mov	r0, r5
 80178c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178c6:	f000 fa39 	bl	8017d3c <_malloc_usable_size_r>
 80178ca:	4284      	cmp	r4, r0
 80178cc:	4607      	mov	r7, r0
 80178ce:	d802      	bhi.n	80178d6 <_realloc_r+0x34>
 80178d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80178d4:	d812      	bhi.n	80178fc <_realloc_r+0x5a>
 80178d6:	4621      	mov	r1, r4
 80178d8:	4640      	mov	r0, r8
 80178da:	f7fb fdf1 	bl	80134c0 <_malloc_r>
 80178de:	4605      	mov	r5, r0
 80178e0:	2800      	cmp	r0, #0
 80178e2:	d0ed      	beq.n	80178c0 <_realloc_r+0x1e>
 80178e4:	42bc      	cmp	r4, r7
 80178e6:	4622      	mov	r2, r4
 80178e8:	4631      	mov	r1, r6
 80178ea:	bf28      	it	cs
 80178ec:	463a      	movcs	r2, r7
 80178ee:	f7fd fe64 	bl	80155ba <memcpy>
 80178f2:	4631      	mov	r1, r6
 80178f4:	4640      	mov	r0, r8
 80178f6:	f7fe fd15 	bl	8016324 <_free_r>
 80178fa:	e7e1      	b.n	80178c0 <_realloc_r+0x1e>
 80178fc:	4635      	mov	r5, r6
 80178fe:	e7df      	b.n	80178c0 <_realloc_r+0x1e>

08017900 <__sfputc_r>:
 8017900:	6893      	ldr	r3, [r2, #8]
 8017902:	3b01      	subs	r3, #1
 8017904:	2b00      	cmp	r3, #0
 8017906:	b410      	push	{r4}
 8017908:	6093      	str	r3, [r2, #8]
 801790a:	da08      	bge.n	801791e <__sfputc_r+0x1e>
 801790c:	6994      	ldr	r4, [r2, #24]
 801790e:	42a3      	cmp	r3, r4
 8017910:	db01      	blt.n	8017916 <__sfputc_r+0x16>
 8017912:	290a      	cmp	r1, #10
 8017914:	d103      	bne.n	801791e <__sfputc_r+0x1e>
 8017916:	f85d 4b04 	ldr.w	r4, [sp], #4
 801791a:	f000 b935 	b.w	8017b88 <__swbuf_r>
 801791e:	6813      	ldr	r3, [r2, #0]
 8017920:	1c58      	adds	r0, r3, #1
 8017922:	6010      	str	r0, [r2, #0]
 8017924:	7019      	strb	r1, [r3, #0]
 8017926:	4608      	mov	r0, r1
 8017928:	f85d 4b04 	ldr.w	r4, [sp], #4
 801792c:	4770      	bx	lr

0801792e <__sfputs_r>:
 801792e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017930:	4606      	mov	r6, r0
 8017932:	460f      	mov	r7, r1
 8017934:	4614      	mov	r4, r2
 8017936:	18d5      	adds	r5, r2, r3
 8017938:	42ac      	cmp	r4, r5
 801793a:	d101      	bne.n	8017940 <__sfputs_r+0x12>
 801793c:	2000      	movs	r0, #0
 801793e:	e007      	b.n	8017950 <__sfputs_r+0x22>
 8017940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017944:	463a      	mov	r2, r7
 8017946:	4630      	mov	r0, r6
 8017948:	f7ff ffda 	bl	8017900 <__sfputc_r>
 801794c:	1c43      	adds	r3, r0, #1
 801794e:	d1f3      	bne.n	8017938 <__sfputs_r+0xa>
 8017950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017954 <_vfiprintf_r>:
 8017954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017958:	460d      	mov	r5, r1
 801795a:	b09d      	sub	sp, #116	; 0x74
 801795c:	4614      	mov	r4, r2
 801795e:	4698      	mov	r8, r3
 8017960:	4606      	mov	r6, r0
 8017962:	b118      	cbz	r0, 801796c <_vfiprintf_r+0x18>
 8017964:	6a03      	ldr	r3, [r0, #32]
 8017966:	b90b      	cbnz	r3, 801796c <_vfiprintf_r+0x18>
 8017968:	f7fd fc3e 	bl	80151e8 <__sinit>
 801796c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801796e:	07d9      	lsls	r1, r3, #31
 8017970:	d405      	bmi.n	801797e <_vfiprintf_r+0x2a>
 8017972:	89ab      	ldrh	r3, [r5, #12]
 8017974:	059a      	lsls	r2, r3, #22
 8017976:	d402      	bmi.n	801797e <_vfiprintf_r+0x2a>
 8017978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801797a:	f7fd fe14 	bl	80155a6 <__retarget_lock_acquire_recursive>
 801797e:	89ab      	ldrh	r3, [r5, #12]
 8017980:	071b      	lsls	r3, r3, #28
 8017982:	d501      	bpl.n	8017988 <_vfiprintf_r+0x34>
 8017984:	692b      	ldr	r3, [r5, #16]
 8017986:	b99b      	cbnz	r3, 80179b0 <_vfiprintf_r+0x5c>
 8017988:	4629      	mov	r1, r5
 801798a:	4630      	mov	r0, r6
 801798c:	f000 f93a 	bl	8017c04 <__swsetup_r>
 8017990:	b170      	cbz	r0, 80179b0 <_vfiprintf_r+0x5c>
 8017992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017994:	07dc      	lsls	r4, r3, #31
 8017996:	d504      	bpl.n	80179a2 <_vfiprintf_r+0x4e>
 8017998:	f04f 30ff 	mov.w	r0, #4294967295
 801799c:	b01d      	add	sp, #116	; 0x74
 801799e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179a2:	89ab      	ldrh	r3, [r5, #12]
 80179a4:	0598      	lsls	r0, r3, #22
 80179a6:	d4f7      	bmi.n	8017998 <_vfiprintf_r+0x44>
 80179a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80179aa:	f7fd fdfd 	bl	80155a8 <__retarget_lock_release_recursive>
 80179ae:	e7f3      	b.n	8017998 <_vfiprintf_r+0x44>
 80179b0:	2300      	movs	r3, #0
 80179b2:	9309      	str	r3, [sp, #36]	; 0x24
 80179b4:	2320      	movs	r3, #32
 80179b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80179ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80179be:	2330      	movs	r3, #48	; 0x30
 80179c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017b74 <_vfiprintf_r+0x220>
 80179c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80179c8:	f04f 0901 	mov.w	r9, #1
 80179cc:	4623      	mov	r3, r4
 80179ce:	469a      	mov	sl, r3
 80179d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80179d4:	b10a      	cbz	r2, 80179da <_vfiprintf_r+0x86>
 80179d6:	2a25      	cmp	r2, #37	; 0x25
 80179d8:	d1f9      	bne.n	80179ce <_vfiprintf_r+0x7a>
 80179da:	ebba 0b04 	subs.w	fp, sl, r4
 80179de:	d00b      	beq.n	80179f8 <_vfiprintf_r+0xa4>
 80179e0:	465b      	mov	r3, fp
 80179e2:	4622      	mov	r2, r4
 80179e4:	4629      	mov	r1, r5
 80179e6:	4630      	mov	r0, r6
 80179e8:	f7ff ffa1 	bl	801792e <__sfputs_r>
 80179ec:	3001      	adds	r0, #1
 80179ee:	f000 80a9 	beq.w	8017b44 <_vfiprintf_r+0x1f0>
 80179f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80179f4:	445a      	add	r2, fp
 80179f6:	9209      	str	r2, [sp, #36]	; 0x24
 80179f8:	f89a 3000 	ldrb.w	r3, [sl]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	f000 80a1 	beq.w	8017b44 <_vfiprintf_r+0x1f0>
 8017a02:	2300      	movs	r3, #0
 8017a04:	f04f 32ff 	mov.w	r2, #4294967295
 8017a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017a0c:	f10a 0a01 	add.w	sl, sl, #1
 8017a10:	9304      	str	r3, [sp, #16]
 8017a12:	9307      	str	r3, [sp, #28]
 8017a14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017a18:	931a      	str	r3, [sp, #104]	; 0x68
 8017a1a:	4654      	mov	r4, sl
 8017a1c:	2205      	movs	r2, #5
 8017a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a22:	4854      	ldr	r0, [pc, #336]	; (8017b74 <_vfiprintf_r+0x220>)
 8017a24:	f7e8 fbd4 	bl	80001d0 <memchr>
 8017a28:	9a04      	ldr	r2, [sp, #16]
 8017a2a:	b9d8      	cbnz	r0, 8017a64 <_vfiprintf_r+0x110>
 8017a2c:	06d1      	lsls	r1, r2, #27
 8017a2e:	bf44      	itt	mi
 8017a30:	2320      	movmi	r3, #32
 8017a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a36:	0713      	lsls	r3, r2, #28
 8017a38:	bf44      	itt	mi
 8017a3a:	232b      	movmi	r3, #43	; 0x2b
 8017a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a40:	f89a 3000 	ldrb.w	r3, [sl]
 8017a44:	2b2a      	cmp	r3, #42	; 0x2a
 8017a46:	d015      	beq.n	8017a74 <_vfiprintf_r+0x120>
 8017a48:	9a07      	ldr	r2, [sp, #28]
 8017a4a:	4654      	mov	r4, sl
 8017a4c:	2000      	movs	r0, #0
 8017a4e:	f04f 0c0a 	mov.w	ip, #10
 8017a52:	4621      	mov	r1, r4
 8017a54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017a58:	3b30      	subs	r3, #48	; 0x30
 8017a5a:	2b09      	cmp	r3, #9
 8017a5c:	d94d      	bls.n	8017afa <_vfiprintf_r+0x1a6>
 8017a5e:	b1b0      	cbz	r0, 8017a8e <_vfiprintf_r+0x13a>
 8017a60:	9207      	str	r2, [sp, #28]
 8017a62:	e014      	b.n	8017a8e <_vfiprintf_r+0x13a>
 8017a64:	eba0 0308 	sub.w	r3, r0, r8
 8017a68:	fa09 f303 	lsl.w	r3, r9, r3
 8017a6c:	4313      	orrs	r3, r2
 8017a6e:	9304      	str	r3, [sp, #16]
 8017a70:	46a2      	mov	sl, r4
 8017a72:	e7d2      	b.n	8017a1a <_vfiprintf_r+0xc6>
 8017a74:	9b03      	ldr	r3, [sp, #12]
 8017a76:	1d19      	adds	r1, r3, #4
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	9103      	str	r1, [sp, #12]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	bfbb      	ittet	lt
 8017a80:	425b      	neglt	r3, r3
 8017a82:	f042 0202 	orrlt.w	r2, r2, #2
 8017a86:	9307      	strge	r3, [sp, #28]
 8017a88:	9307      	strlt	r3, [sp, #28]
 8017a8a:	bfb8      	it	lt
 8017a8c:	9204      	strlt	r2, [sp, #16]
 8017a8e:	7823      	ldrb	r3, [r4, #0]
 8017a90:	2b2e      	cmp	r3, #46	; 0x2e
 8017a92:	d10c      	bne.n	8017aae <_vfiprintf_r+0x15a>
 8017a94:	7863      	ldrb	r3, [r4, #1]
 8017a96:	2b2a      	cmp	r3, #42	; 0x2a
 8017a98:	d134      	bne.n	8017b04 <_vfiprintf_r+0x1b0>
 8017a9a:	9b03      	ldr	r3, [sp, #12]
 8017a9c:	1d1a      	adds	r2, r3, #4
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	9203      	str	r2, [sp, #12]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	bfb8      	it	lt
 8017aa6:	f04f 33ff 	movlt.w	r3, #4294967295
 8017aaa:	3402      	adds	r4, #2
 8017aac:	9305      	str	r3, [sp, #20]
 8017aae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017b84 <_vfiprintf_r+0x230>
 8017ab2:	7821      	ldrb	r1, [r4, #0]
 8017ab4:	2203      	movs	r2, #3
 8017ab6:	4650      	mov	r0, sl
 8017ab8:	f7e8 fb8a 	bl	80001d0 <memchr>
 8017abc:	b138      	cbz	r0, 8017ace <_vfiprintf_r+0x17a>
 8017abe:	9b04      	ldr	r3, [sp, #16]
 8017ac0:	eba0 000a 	sub.w	r0, r0, sl
 8017ac4:	2240      	movs	r2, #64	; 0x40
 8017ac6:	4082      	lsls	r2, r0
 8017ac8:	4313      	orrs	r3, r2
 8017aca:	3401      	adds	r4, #1
 8017acc:	9304      	str	r3, [sp, #16]
 8017ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ad2:	4829      	ldr	r0, [pc, #164]	; (8017b78 <_vfiprintf_r+0x224>)
 8017ad4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017ad8:	2206      	movs	r2, #6
 8017ada:	f7e8 fb79 	bl	80001d0 <memchr>
 8017ade:	2800      	cmp	r0, #0
 8017ae0:	d03f      	beq.n	8017b62 <_vfiprintf_r+0x20e>
 8017ae2:	4b26      	ldr	r3, [pc, #152]	; (8017b7c <_vfiprintf_r+0x228>)
 8017ae4:	bb1b      	cbnz	r3, 8017b2e <_vfiprintf_r+0x1da>
 8017ae6:	9b03      	ldr	r3, [sp, #12]
 8017ae8:	3307      	adds	r3, #7
 8017aea:	f023 0307 	bic.w	r3, r3, #7
 8017aee:	3308      	adds	r3, #8
 8017af0:	9303      	str	r3, [sp, #12]
 8017af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017af4:	443b      	add	r3, r7
 8017af6:	9309      	str	r3, [sp, #36]	; 0x24
 8017af8:	e768      	b.n	80179cc <_vfiprintf_r+0x78>
 8017afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8017afe:	460c      	mov	r4, r1
 8017b00:	2001      	movs	r0, #1
 8017b02:	e7a6      	b.n	8017a52 <_vfiprintf_r+0xfe>
 8017b04:	2300      	movs	r3, #0
 8017b06:	3401      	adds	r4, #1
 8017b08:	9305      	str	r3, [sp, #20]
 8017b0a:	4619      	mov	r1, r3
 8017b0c:	f04f 0c0a 	mov.w	ip, #10
 8017b10:	4620      	mov	r0, r4
 8017b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b16:	3a30      	subs	r2, #48	; 0x30
 8017b18:	2a09      	cmp	r2, #9
 8017b1a:	d903      	bls.n	8017b24 <_vfiprintf_r+0x1d0>
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d0c6      	beq.n	8017aae <_vfiprintf_r+0x15a>
 8017b20:	9105      	str	r1, [sp, #20]
 8017b22:	e7c4      	b.n	8017aae <_vfiprintf_r+0x15a>
 8017b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8017b28:	4604      	mov	r4, r0
 8017b2a:	2301      	movs	r3, #1
 8017b2c:	e7f0      	b.n	8017b10 <_vfiprintf_r+0x1bc>
 8017b2e:	ab03      	add	r3, sp, #12
 8017b30:	9300      	str	r3, [sp, #0]
 8017b32:	462a      	mov	r2, r5
 8017b34:	4b12      	ldr	r3, [pc, #72]	; (8017b80 <_vfiprintf_r+0x22c>)
 8017b36:	a904      	add	r1, sp, #16
 8017b38:	4630      	mov	r0, r6
 8017b3a:	f7fc fcf3 	bl	8014524 <_printf_float>
 8017b3e:	4607      	mov	r7, r0
 8017b40:	1c78      	adds	r0, r7, #1
 8017b42:	d1d6      	bne.n	8017af2 <_vfiprintf_r+0x19e>
 8017b44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017b46:	07d9      	lsls	r1, r3, #31
 8017b48:	d405      	bmi.n	8017b56 <_vfiprintf_r+0x202>
 8017b4a:	89ab      	ldrh	r3, [r5, #12]
 8017b4c:	059a      	lsls	r2, r3, #22
 8017b4e:	d402      	bmi.n	8017b56 <_vfiprintf_r+0x202>
 8017b50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017b52:	f7fd fd29 	bl	80155a8 <__retarget_lock_release_recursive>
 8017b56:	89ab      	ldrh	r3, [r5, #12]
 8017b58:	065b      	lsls	r3, r3, #25
 8017b5a:	f53f af1d 	bmi.w	8017998 <_vfiprintf_r+0x44>
 8017b5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017b60:	e71c      	b.n	801799c <_vfiprintf_r+0x48>
 8017b62:	ab03      	add	r3, sp, #12
 8017b64:	9300      	str	r3, [sp, #0]
 8017b66:	462a      	mov	r2, r5
 8017b68:	4b05      	ldr	r3, [pc, #20]	; (8017b80 <_vfiprintf_r+0x22c>)
 8017b6a:	a904      	add	r1, sp, #16
 8017b6c:	4630      	mov	r0, r6
 8017b6e:	f7fc ff7d 	bl	8014a6c <_printf_i>
 8017b72:	e7e4      	b.n	8017b3e <_vfiprintf_r+0x1ea>
 8017b74:	0801bca4 	.word	0x0801bca4
 8017b78:	0801bcae 	.word	0x0801bcae
 8017b7c:	08014525 	.word	0x08014525
 8017b80:	0801792f 	.word	0x0801792f
 8017b84:	0801bcaa 	.word	0x0801bcaa

08017b88 <__swbuf_r>:
 8017b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b8a:	460e      	mov	r6, r1
 8017b8c:	4614      	mov	r4, r2
 8017b8e:	4605      	mov	r5, r0
 8017b90:	b118      	cbz	r0, 8017b9a <__swbuf_r+0x12>
 8017b92:	6a03      	ldr	r3, [r0, #32]
 8017b94:	b90b      	cbnz	r3, 8017b9a <__swbuf_r+0x12>
 8017b96:	f7fd fb27 	bl	80151e8 <__sinit>
 8017b9a:	69a3      	ldr	r3, [r4, #24]
 8017b9c:	60a3      	str	r3, [r4, #8]
 8017b9e:	89a3      	ldrh	r3, [r4, #12]
 8017ba0:	071a      	lsls	r2, r3, #28
 8017ba2:	d525      	bpl.n	8017bf0 <__swbuf_r+0x68>
 8017ba4:	6923      	ldr	r3, [r4, #16]
 8017ba6:	b31b      	cbz	r3, 8017bf0 <__swbuf_r+0x68>
 8017ba8:	6823      	ldr	r3, [r4, #0]
 8017baa:	6922      	ldr	r2, [r4, #16]
 8017bac:	1a98      	subs	r0, r3, r2
 8017bae:	6963      	ldr	r3, [r4, #20]
 8017bb0:	b2f6      	uxtb	r6, r6
 8017bb2:	4283      	cmp	r3, r0
 8017bb4:	4637      	mov	r7, r6
 8017bb6:	dc04      	bgt.n	8017bc2 <__swbuf_r+0x3a>
 8017bb8:	4621      	mov	r1, r4
 8017bba:	4628      	mov	r0, r5
 8017bbc:	f7ff fe00 	bl	80177c0 <_fflush_r>
 8017bc0:	b9e0      	cbnz	r0, 8017bfc <__swbuf_r+0x74>
 8017bc2:	68a3      	ldr	r3, [r4, #8]
 8017bc4:	3b01      	subs	r3, #1
 8017bc6:	60a3      	str	r3, [r4, #8]
 8017bc8:	6823      	ldr	r3, [r4, #0]
 8017bca:	1c5a      	adds	r2, r3, #1
 8017bcc:	6022      	str	r2, [r4, #0]
 8017bce:	701e      	strb	r6, [r3, #0]
 8017bd0:	6962      	ldr	r2, [r4, #20]
 8017bd2:	1c43      	adds	r3, r0, #1
 8017bd4:	429a      	cmp	r2, r3
 8017bd6:	d004      	beq.n	8017be2 <__swbuf_r+0x5a>
 8017bd8:	89a3      	ldrh	r3, [r4, #12]
 8017bda:	07db      	lsls	r3, r3, #31
 8017bdc:	d506      	bpl.n	8017bec <__swbuf_r+0x64>
 8017bde:	2e0a      	cmp	r6, #10
 8017be0:	d104      	bne.n	8017bec <__swbuf_r+0x64>
 8017be2:	4621      	mov	r1, r4
 8017be4:	4628      	mov	r0, r5
 8017be6:	f7ff fdeb 	bl	80177c0 <_fflush_r>
 8017bea:	b938      	cbnz	r0, 8017bfc <__swbuf_r+0x74>
 8017bec:	4638      	mov	r0, r7
 8017bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bf0:	4621      	mov	r1, r4
 8017bf2:	4628      	mov	r0, r5
 8017bf4:	f000 f806 	bl	8017c04 <__swsetup_r>
 8017bf8:	2800      	cmp	r0, #0
 8017bfa:	d0d5      	beq.n	8017ba8 <__swbuf_r+0x20>
 8017bfc:	f04f 37ff 	mov.w	r7, #4294967295
 8017c00:	e7f4      	b.n	8017bec <__swbuf_r+0x64>
	...

08017c04 <__swsetup_r>:
 8017c04:	b538      	push	{r3, r4, r5, lr}
 8017c06:	4b2a      	ldr	r3, [pc, #168]	; (8017cb0 <__swsetup_r+0xac>)
 8017c08:	4605      	mov	r5, r0
 8017c0a:	6818      	ldr	r0, [r3, #0]
 8017c0c:	460c      	mov	r4, r1
 8017c0e:	b118      	cbz	r0, 8017c18 <__swsetup_r+0x14>
 8017c10:	6a03      	ldr	r3, [r0, #32]
 8017c12:	b90b      	cbnz	r3, 8017c18 <__swsetup_r+0x14>
 8017c14:	f7fd fae8 	bl	80151e8 <__sinit>
 8017c18:	89a3      	ldrh	r3, [r4, #12]
 8017c1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017c1e:	0718      	lsls	r0, r3, #28
 8017c20:	d422      	bmi.n	8017c68 <__swsetup_r+0x64>
 8017c22:	06d9      	lsls	r1, r3, #27
 8017c24:	d407      	bmi.n	8017c36 <__swsetup_r+0x32>
 8017c26:	2309      	movs	r3, #9
 8017c28:	602b      	str	r3, [r5, #0]
 8017c2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017c2e:	81a3      	strh	r3, [r4, #12]
 8017c30:	f04f 30ff 	mov.w	r0, #4294967295
 8017c34:	e034      	b.n	8017ca0 <__swsetup_r+0x9c>
 8017c36:	0758      	lsls	r0, r3, #29
 8017c38:	d512      	bpl.n	8017c60 <__swsetup_r+0x5c>
 8017c3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017c3c:	b141      	cbz	r1, 8017c50 <__swsetup_r+0x4c>
 8017c3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017c42:	4299      	cmp	r1, r3
 8017c44:	d002      	beq.n	8017c4c <__swsetup_r+0x48>
 8017c46:	4628      	mov	r0, r5
 8017c48:	f7fe fb6c 	bl	8016324 <_free_r>
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	6363      	str	r3, [r4, #52]	; 0x34
 8017c50:	89a3      	ldrh	r3, [r4, #12]
 8017c52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017c56:	81a3      	strh	r3, [r4, #12]
 8017c58:	2300      	movs	r3, #0
 8017c5a:	6063      	str	r3, [r4, #4]
 8017c5c:	6923      	ldr	r3, [r4, #16]
 8017c5e:	6023      	str	r3, [r4, #0]
 8017c60:	89a3      	ldrh	r3, [r4, #12]
 8017c62:	f043 0308 	orr.w	r3, r3, #8
 8017c66:	81a3      	strh	r3, [r4, #12]
 8017c68:	6923      	ldr	r3, [r4, #16]
 8017c6a:	b94b      	cbnz	r3, 8017c80 <__swsetup_r+0x7c>
 8017c6c:	89a3      	ldrh	r3, [r4, #12]
 8017c6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017c76:	d003      	beq.n	8017c80 <__swsetup_r+0x7c>
 8017c78:	4621      	mov	r1, r4
 8017c7a:	4628      	mov	r0, r5
 8017c7c:	f000 f88c 	bl	8017d98 <__smakebuf_r>
 8017c80:	89a0      	ldrh	r0, [r4, #12]
 8017c82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017c86:	f010 0301 	ands.w	r3, r0, #1
 8017c8a:	d00a      	beq.n	8017ca2 <__swsetup_r+0x9e>
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	60a3      	str	r3, [r4, #8]
 8017c90:	6963      	ldr	r3, [r4, #20]
 8017c92:	425b      	negs	r3, r3
 8017c94:	61a3      	str	r3, [r4, #24]
 8017c96:	6923      	ldr	r3, [r4, #16]
 8017c98:	b943      	cbnz	r3, 8017cac <__swsetup_r+0xa8>
 8017c9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017c9e:	d1c4      	bne.n	8017c2a <__swsetup_r+0x26>
 8017ca0:	bd38      	pop	{r3, r4, r5, pc}
 8017ca2:	0781      	lsls	r1, r0, #30
 8017ca4:	bf58      	it	pl
 8017ca6:	6963      	ldrpl	r3, [r4, #20]
 8017ca8:	60a3      	str	r3, [r4, #8]
 8017caa:	e7f4      	b.n	8017c96 <__swsetup_r+0x92>
 8017cac:	2000      	movs	r0, #0
 8017cae:	e7f7      	b.n	8017ca0 <__swsetup_r+0x9c>
 8017cb0:	200002f0 	.word	0x200002f0

08017cb4 <_raise_r>:
 8017cb4:	291f      	cmp	r1, #31
 8017cb6:	b538      	push	{r3, r4, r5, lr}
 8017cb8:	4604      	mov	r4, r0
 8017cba:	460d      	mov	r5, r1
 8017cbc:	d904      	bls.n	8017cc8 <_raise_r+0x14>
 8017cbe:	2316      	movs	r3, #22
 8017cc0:	6003      	str	r3, [r0, #0]
 8017cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8017cc6:	bd38      	pop	{r3, r4, r5, pc}
 8017cc8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017cca:	b112      	cbz	r2, 8017cd2 <_raise_r+0x1e>
 8017ccc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017cd0:	b94b      	cbnz	r3, 8017ce6 <_raise_r+0x32>
 8017cd2:	4620      	mov	r0, r4
 8017cd4:	f000 f830 	bl	8017d38 <_getpid_r>
 8017cd8:	462a      	mov	r2, r5
 8017cda:	4601      	mov	r1, r0
 8017cdc:	4620      	mov	r0, r4
 8017cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ce2:	f000 b817 	b.w	8017d14 <_kill_r>
 8017ce6:	2b01      	cmp	r3, #1
 8017ce8:	d00a      	beq.n	8017d00 <_raise_r+0x4c>
 8017cea:	1c59      	adds	r1, r3, #1
 8017cec:	d103      	bne.n	8017cf6 <_raise_r+0x42>
 8017cee:	2316      	movs	r3, #22
 8017cf0:	6003      	str	r3, [r0, #0]
 8017cf2:	2001      	movs	r0, #1
 8017cf4:	e7e7      	b.n	8017cc6 <_raise_r+0x12>
 8017cf6:	2400      	movs	r4, #0
 8017cf8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017cfc:	4628      	mov	r0, r5
 8017cfe:	4798      	blx	r3
 8017d00:	2000      	movs	r0, #0
 8017d02:	e7e0      	b.n	8017cc6 <_raise_r+0x12>

08017d04 <raise>:
 8017d04:	4b02      	ldr	r3, [pc, #8]	; (8017d10 <raise+0xc>)
 8017d06:	4601      	mov	r1, r0
 8017d08:	6818      	ldr	r0, [r3, #0]
 8017d0a:	f7ff bfd3 	b.w	8017cb4 <_raise_r>
 8017d0e:	bf00      	nop
 8017d10:	200002f0 	.word	0x200002f0

08017d14 <_kill_r>:
 8017d14:	b538      	push	{r3, r4, r5, lr}
 8017d16:	4d07      	ldr	r5, [pc, #28]	; (8017d34 <_kill_r+0x20>)
 8017d18:	2300      	movs	r3, #0
 8017d1a:	4604      	mov	r4, r0
 8017d1c:	4608      	mov	r0, r1
 8017d1e:	4611      	mov	r1, r2
 8017d20:	602b      	str	r3, [r5, #0]
 8017d22:	f7ed f96b 	bl	8004ffc <_kill>
 8017d26:	1c43      	adds	r3, r0, #1
 8017d28:	d102      	bne.n	8017d30 <_kill_r+0x1c>
 8017d2a:	682b      	ldr	r3, [r5, #0]
 8017d2c:	b103      	cbz	r3, 8017d30 <_kill_r+0x1c>
 8017d2e:	6023      	str	r3, [r4, #0]
 8017d30:	bd38      	pop	{r3, r4, r5, pc}
 8017d32:	bf00      	nop
 8017d34:	200023fc 	.word	0x200023fc

08017d38 <_getpid_r>:
 8017d38:	f7ed b958 	b.w	8004fec <_getpid>

08017d3c <_malloc_usable_size_r>:
 8017d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d40:	1f18      	subs	r0, r3, #4
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	bfbc      	itt	lt
 8017d46:	580b      	ldrlt	r3, [r1, r0]
 8017d48:	18c0      	addlt	r0, r0, r3
 8017d4a:	4770      	bx	lr

08017d4c <__swhatbuf_r>:
 8017d4c:	b570      	push	{r4, r5, r6, lr}
 8017d4e:	460c      	mov	r4, r1
 8017d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d54:	2900      	cmp	r1, #0
 8017d56:	b096      	sub	sp, #88	; 0x58
 8017d58:	4615      	mov	r5, r2
 8017d5a:	461e      	mov	r6, r3
 8017d5c:	da0d      	bge.n	8017d7a <__swhatbuf_r+0x2e>
 8017d5e:	89a3      	ldrh	r3, [r4, #12]
 8017d60:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017d64:	f04f 0100 	mov.w	r1, #0
 8017d68:	bf0c      	ite	eq
 8017d6a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017d6e:	2340      	movne	r3, #64	; 0x40
 8017d70:	2000      	movs	r0, #0
 8017d72:	6031      	str	r1, [r6, #0]
 8017d74:	602b      	str	r3, [r5, #0]
 8017d76:	b016      	add	sp, #88	; 0x58
 8017d78:	bd70      	pop	{r4, r5, r6, pc}
 8017d7a:	466a      	mov	r2, sp
 8017d7c:	f000 f848 	bl	8017e10 <_fstat_r>
 8017d80:	2800      	cmp	r0, #0
 8017d82:	dbec      	blt.n	8017d5e <__swhatbuf_r+0x12>
 8017d84:	9901      	ldr	r1, [sp, #4]
 8017d86:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017d8a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017d8e:	4259      	negs	r1, r3
 8017d90:	4159      	adcs	r1, r3
 8017d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017d96:	e7eb      	b.n	8017d70 <__swhatbuf_r+0x24>

08017d98 <__smakebuf_r>:
 8017d98:	898b      	ldrh	r3, [r1, #12]
 8017d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017d9c:	079d      	lsls	r5, r3, #30
 8017d9e:	4606      	mov	r6, r0
 8017da0:	460c      	mov	r4, r1
 8017da2:	d507      	bpl.n	8017db4 <__smakebuf_r+0x1c>
 8017da4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017da8:	6023      	str	r3, [r4, #0]
 8017daa:	6123      	str	r3, [r4, #16]
 8017dac:	2301      	movs	r3, #1
 8017dae:	6163      	str	r3, [r4, #20]
 8017db0:	b002      	add	sp, #8
 8017db2:	bd70      	pop	{r4, r5, r6, pc}
 8017db4:	ab01      	add	r3, sp, #4
 8017db6:	466a      	mov	r2, sp
 8017db8:	f7ff ffc8 	bl	8017d4c <__swhatbuf_r>
 8017dbc:	9900      	ldr	r1, [sp, #0]
 8017dbe:	4605      	mov	r5, r0
 8017dc0:	4630      	mov	r0, r6
 8017dc2:	f7fb fb7d 	bl	80134c0 <_malloc_r>
 8017dc6:	b948      	cbnz	r0, 8017ddc <__smakebuf_r+0x44>
 8017dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017dcc:	059a      	lsls	r2, r3, #22
 8017dce:	d4ef      	bmi.n	8017db0 <__smakebuf_r+0x18>
 8017dd0:	f023 0303 	bic.w	r3, r3, #3
 8017dd4:	f043 0302 	orr.w	r3, r3, #2
 8017dd8:	81a3      	strh	r3, [r4, #12]
 8017dda:	e7e3      	b.n	8017da4 <__smakebuf_r+0xc>
 8017ddc:	89a3      	ldrh	r3, [r4, #12]
 8017dde:	6020      	str	r0, [r4, #0]
 8017de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017de4:	81a3      	strh	r3, [r4, #12]
 8017de6:	9b00      	ldr	r3, [sp, #0]
 8017de8:	6163      	str	r3, [r4, #20]
 8017dea:	9b01      	ldr	r3, [sp, #4]
 8017dec:	6120      	str	r0, [r4, #16]
 8017dee:	b15b      	cbz	r3, 8017e08 <__smakebuf_r+0x70>
 8017df0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017df4:	4630      	mov	r0, r6
 8017df6:	f000 f81d 	bl	8017e34 <_isatty_r>
 8017dfa:	b128      	cbz	r0, 8017e08 <__smakebuf_r+0x70>
 8017dfc:	89a3      	ldrh	r3, [r4, #12]
 8017dfe:	f023 0303 	bic.w	r3, r3, #3
 8017e02:	f043 0301 	orr.w	r3, r3, #1
 8017e06:	81a3      	strh	r3, [r4, #12]
 8017e08:	89a3      	ldrh	r3, [r4, #12]
 8017e0a:	431d      	orrs	r5, r3
 8017e0c:	81a5      	strh	r5, [r4, #12]
 8017e0e:	e7cf      	b.n	8017db0 <__smakebuf_r+0x18>

08017e10 <_fstat_r>:
 8017e10:	b538      	push	{r3, r4, r5, lr}
 8017e12:	4d07      	ldr	r5, [pc, #28]	; (8017e30 <_fstat_r+0x20>)
 8017e14:	2300      	movs	r3, #0
 8017e16:	4604      	mov	r4, r0
 8017e18:	4608      	mov	r0, r1
 8017e1a:	4611      	mov	r1, r2
 8017e1c:	602b      	str	r3, [r5, #0]
 8017e1e:	f7ed f94c 	bl	80050ba <_fstat>
 8017e22:	1c43      	adds	r3, r0, #1
 8017e24:	d102      	bne.n	8017e2c <_fstat_r+0x1c>
 8017e26:	682b      	ldr	r3, [r5, #0]
 8017e28:	b103      	cbz	r3, 8017e2c <_fstat_r+0x1c>
 8017e2a:	6023      	str	r3, [r4, #0]
 8017e2c:	bd38      	pop	{r3, r4, r5, pc}
 8017e2e:	bf00      	nop
 8017e30:	200023fc 	.word	0x200023fc

08017e34 <_isatty_r>:
 8017e34:	b538      	push	{r3, r4, r5, lr}
 8017e36:	4d06      	ldr	r5, [pc, #24]	; (8017e50 <_isatty_r+0x1c>)
 8017e38:	2300      	movs	r3, #0
 8017e3a:	4604      	mov	r4, r0
 8017e3c:	4608      	mov	r0, r1
 8017e3e:	602b      	str	r3, [r5, #0]
 8017e40:	f7ed f94b 	bl	80050da <_isatty>
 8017e44:	1c43      	adds	r3, r0, #1
 8017e46:	d102      	bne.n	8017e4e <_isatty_r+0x1a>
 8017e48:	682b      	ldr	r3, [r5, #0]
 8017e4a:	b103      	cbz	r3, 8017e4e <_isatty_r+0x1a>
 8017e4c:	6023      	str	r3, [r4, #0]
 8017e4e:	bd38      	pop	{r3, r4, r5, pc}
 8017e50:	200023fc 	.word	0x200023fc
 8017e54:	00000000 	.word	0x00000000

08017e58 <cos>:
 8017e58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017e5a:	ec53 2b10 	vmov	r2, r3, d0
 8017e5e:	4826      	ldr	r0, [pc, #152]	; (8017ef8 <cos+0xa0>)
 8017e60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017e64:	4281      	cmp	r1, r0
 8017e66:	dc06      	bgt.n	8017e76 <cos+0x1e>
 8017e68:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8017ef0 <cos+0x98>
 8017e6c:	b005      	add	sp, #20
 8017e6e:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e72:	f000 b9b9 	b.w	80181e8 <__kernel_cos>
 8017e76:	4821      	ldr	r0, [pc, #132]	; (8017efc <cos+0xa4>)
 8017e78:	4281      	cmp	r1, r0
 8017e7a:	dd09      	ble.n	8017e90 <cos+0x38>
 8017e7c:	ee10 0a10 	vmov	r0, s0
 8017e80:	4619      	mov	r1, r3
 8017e82:	f7e8 fa01 	bl	8000288 <__aeabi_dsub>
 8017e86:	ec41 0b10 	vmov	d0, r0, r1
 8017e8a:	b005      	add	sp, #20
 8017e8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017e90:	4668      	mov	r0, sp
 8017e92:	f000 fb31 	bl	80184f8 <__ieee754_rem_pio2>
 8017e96:	f000 0003 	and.w	r0, r0, #3
 8017e9a:	2801      	cmp	r0, #1
 8017e9c:	d00b      	beq.n	8017eb6 <cos+0x5e>
 8017e9e:	2802      	cmp	r0, #2
 8017ea0:	d016      	beq.n	8017ed0 <cos+0x78>
 8017ea2:	b9e0      	cbnz	r0, 8017ede <cos+0x86>
 8017ea4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017ea8:	ed9d 0b00 	vldr	d0, [sp]
 8017eac:	f000 f99c 	bl	80181e8 <__kernel_cos>
 8017eb0:	ec51 0b10 	vmov	r0, r1, d0
 8017eb4:	e7e7      	b.n	8017e86 <cos+0x2e>
 8017eb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017eba:	ed9d 0b00 	vldr	d0, [sp]
 8017ebe:	f000 fa5b 	bl	8018378 <__kernel_sin>
 8017ec2:	ec53 2b10 	vmov	r2, r3, d0
 8017ec6:	ee10 0a10 	vmov	r0, s0
 8017eca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017ece:	e7da      	b.n	8017e86 <cos+0x2e>
 8017ed0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017ed4:	ed9d 0b00 	vldr	d0, [sp]
 8017ed8:	f000 f986 	bl	80181e8 <__kernel_cos>
 8017edc:	e7f1      	b.n	8017ec2 <cos+0x6a>
 8017ede:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017ee2:	ed9d 0b00 	vldr	d0, [sp]
 8017ee6:	2001      	movs	r0, #1
 8017ee8:	f000 fa46 	bl	8018378 <__kernel_sin>
 8017eec:	e7e0      	b.n	8017eb0 <cos+0x58>
 8017eee:	bf00      	nop
	...
 8017ef8:	3fe921fb 	.word	0x3fe921fb
 8017efc:	7fefffff 	.word	0x7fefffff

08017f00 <sin>:
 8017f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017f02:	ec53 2b10 	vmov	r2, r3, d0
 8017f06:	4828      	ldr	r0, [pc, #160]	; (8017fa8 <sin+0xa8>)
 8017f08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017f0c:	4281      	cmp	r1, r0
 8017f0e:	dc07      	bgt.n	8017f20 <sin+0x20>
 8017f10:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8017fa0 <sin+0xa0>
 8017f14:	2000      	movs	r0, #0
 8017f16:	b005      	add	sp, #20
 8017f18:	f85d eb04 	ldr.w	lr, [sp], #4
 8017f1c:	f000 ba2c 	b.w	8018378 <__kernel_sin>
 8017f20:	4822      	ldr	r0, [pc, #136]	; (8017fac <sin+0xac>)
 8017f22:	4281      	cmp	r1, r0
 8017f24:	dd09      	ble.n	8017f3a <sin+0x3a>
 8017f26:	ee10 0a10 	vmov	r0, s0
 8017f2a:	4619      	mov	r1, r3
 8017f2c:	f7e8 f9ac 	bl	8000288 <__aeabi_dsub>
 8017f30:	ec41 0b10 	vmov	d0, r0, r1
 8017f34:	b005      	add	sp, #20
 8017f36:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f3a:	4668      	mov	r0, sp
 8017f3c:	f000 fadc 	bl	80184f8 <__ieee754_rem_pio2>
 8017f40:	f000 0003 	and.w	r0, r0, #3
 8017f44:	2801      	cmp	r0, #1
 8017f46:	d00c      	beq.n	8017f62 <sin+0x62>
 8017f48:	2802      	cmp	r0, #2
 8017f4a:	d011      	beq.n	8017f70 <sin+0x70>
 8017f4c:	b9f0      	cbnz	r0, 8017f8c <sin+0x8c>
 8017f4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017f52:	ed9d 0b00 	vldr	d0, [sp]
 8017f56:	2001      	movs	r0, #1
 8017f58:	f000 fa0e 	bl	8018378 <__kernel_sin>
 8017f5c:	ec51 0b10 	vmov	r0, r1, d0
 8017f60:	e7e6      	b.n	8017f30 <sin+0x30>
 8017f62:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017f66:	ed9d 0b00 	vldr	d0, [sp]
 8017f6a:	f000 f93d 	bl	80181e8 <__kernel_cos>
 8017f6e:	e7f5      	b.n	8017f5c <sin+0x5c>
 8017f70:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017f74:	ed9d 0b00 	vldr	d0, [sp]
 8017f78:	2001      	movs	r0, #1
 8017f7a:	f000 f9fd 	bl	8018378 <__kernel_sin>
 8017f7e:	ec53 2b10 	vmov	r2, r3, d0
 8017f82:	ee10 0a10 	vmov	r0, s0
 8017f86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017f8a:	e7d1      	b.n	8017f30 <sin+0x30>
 8017f8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017f90:	ed9d 0b00 	vldr	d0, [sp]
 8017f94:	f000 f928 	bl	80181e8 <__kernel_cos>
 8017f98:	e7f1      	b.n	8017f7e <sin+0x7e>
 8017f9a:	bf00      	nop
 8017f9c:	f3af 8000 	nop.w
	...
 8017fa8:	3fe921fb 	.word	0x3fe921fb
 8017fac:	7fefffff 	.word	0x7fefffff

08017fb0 <expf>:
 8017fb0:	b508      	push	{r3, lr}
 8017fb2:	ed2d 8b02 	vpush	{d8}
 8017fb6:	eef0 8a40 	vmov.f32	s17, s0
 8017fba:	f000 fce1 	bl	8018980 <__ieee754_expf>
 8017fbe:	eeb0 8a40 	vmov.f32	s16, s0
 8017fc2:	eeb0 0a68 	vmov.f32	s0, s17
 8017fc6:	f000 f87b 	bl	80180c0 <finitef>
 8017fca:	b160      	cbz	r0, 8017fe6 <expf+0x36>
 8017fcc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801800c <expf+0x5c>
 8017fd0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fd8:	dd0a      	ble.n	8017ff0 <expf+0x40>
 8017fda:	f7fd fab9 	bl	8015550 <__errno>
 8017fde:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8018010 <expf+0x60>
 8017fe2:	2322      	movs	r3, #34	; 0x22
 8017fe4:	6003      	str	r3, [r0, #0]
 8017fe6:	eeb0 0a48 	vmov.f32	s0, s16
 8017fea:	ecbd 8b02 	vpop	{d8}
 8017fee:	bd08      	pop	{r3, pc}
 8017ff0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8018014 <expf+0x64>
 8017ff4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ffc:	d5f3      	bpl.n	8017fe6 <expf+0x36>
 8017ffe:	f7fd faa7 	bl	8015550 <__errno>
 8018002:	2322      	movs	r3, #34	; 0x22
 8018004:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8018018 <expf+0x68>
 8018008:	6003      	str	r3, [r0, #0]
 801800a:	e7ec      	b.n	8017fe6 <expf+0x36>
 801800c:	42b17217 	.word	0x42b17217
 8018010:	7f800000 	.word	0x7f800000
 8018014:	c2cff1b5 	.word	0xc2cff1b5
 8018018:	00000000 	.word	0x00000000

0801801c <fmin>:
 801801c:	b508      	push	{r3, lr}
 801801e:	ed2d 8b04 	vpush	{d8-d9}
 8018022:	eeb0 8a40 	vmov.f32	s16, s0
 8018026:	eef0 8a60 	vmov.f32	s17, s1
 801802a:	eeb0 9a41 	vmov.f32	s18, s2
 801802e:	eef0 9a61 	vmov.f32	s19, s3
 8018032:	f000 f81b 	bl	801806c <__fpclassifyd>
 8018036:	b168      	cbz	r0, 8018054 <fmin+0x38>
 8018038:	eeb0 0a49 	vmov.f32	s0, s18
 801803c:	eef0 0a69 	vmov.f32	s1, s19
 8018040:	f000 f814 	bl	801806c <__fpclassifyd>
 8018044:	b150      	cbz	r0, 801805c <fmin+0x40>
 8018046:	ec53 2b19 	vmov	r2, r3, d9
 801804a:	ec51 0b18 	vmov	r0, r1, d8
 801804e:	f7e8 fd45 	bl	8000adc <__aeabi_dcmplt>
 8018052:	b918      	cbnz	r0, 801805c <fmin+0x40>
 8018054:	eeb0 8a49 	vmov.f32	s16, s18
 8018058:	eef0 8a69 	vmov.f32	s17, s19
 801805c:	eeb0 0a48 	vmov.f32	s0, s16
 8018060:	eef0 0a68 	vmov.f32	s1, s17
 8018064:	ecbd 8b04 	vpop	{d8-d9}
 8018068:	bd08      	pop	{r3, pc}
	...

0801806c <__fpclassifyd>:
 801806c:	ec51 0b10 	vmov	r0, r1, d0
 8018070:	b510      	push	{r4, lr}
 8018072:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8018076:	460b      	mov	r3, r1
 8018078:	d019      	beq.n	80180ae <__fpclassifyd+0x42>
 801807a:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 801807e:	490e      	ldr	r1, [pc, #56]	; (80180b8 <__fpclassifyd+0x4c>)
 8018080:	428a      	cmp	r2, r1
 8018082:	d90e      	bls.n	80180a2 <__fpclassifyd+0x36>
 8018084:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8018088:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 801808c:	428a      	cmp	r2, r1
 801808e:	d908      	bls.n	80180a2 <__fpclassifyd+0x36>
 8018090:	4a0a      	ldr	r2, [pc, #40]	; (80180bc <__fpclassifyd+0x50>)
 8018092:	4213      	tst	r3, r2
 8018094:	d007      	beq.n	80180a6 <__fpclassifyd+0x3a>
 8018096:	4294      	cmp	r4, r2
 8018098:	d107      	bne.n	80180aa <__fpclassifyd+0x3e>
 801809a:	fab0 f080 	clz	r0, r0
 801809e:	0940      	lsrs	r0, r0, #5
 80180a0:	bd10      	pop	{r4, pc}
 80180a2:	2004      	movs	r0, #4
 80180a4:	e7fc      	b.n	80180a0 <__fpclassifyd+0x34>
 80180a6:	2003      	movs	r0, #3
 80180a8:	e7fa      	b.n	80180a0 <__fpclassifyd+0x34>
 80180aa:	2000      	movs	r0, #0
 80180ac:	e7f8      	b.n	80180a0 <__fpclassifyd+0x34>
 80180ae:	2800      	cmp	r0, #0
 80180b0:	d1ee      	bne.n	8018090 <__fpclassifyd+0x24>
 80180b2:	2002      	movs	r0, #2
 80180b4:	e7f4      	b.n	80180a0 <__fpclassifyd+0x34>
 80180b6:	bf00      	nop
 80180b8:	7fdfffff 	.word	0x7fdfffff
 80180bc:	7ff00000 	.word	0x7ff00000

080180c0 <finitef>:
 80180c0:	b082      	sub	sp, #8
 80180c2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80180c6:	9801      	ldr	r0, [sp, #4]
 80180c8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80180cc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80180d0:	bfac      	ite	ge
 80180d2:	2000      	movge	r0, #0
 80180d4:	2001      	movlt	r0, #1
 80180d6:	b002      	add	sp, #8
 80180d8:	4770      	bx	lr

080180da <cosl>:
 80180da:	f7ff bebd 	b.w	8017e58 <cos>

080180de <sinl>:
 80180de:	f7ff bf0f 	b.w	8017f00 <sin>

080180e2 <acosl>:
 80180e2:	f000 bc0f 	b.w	8018904 <acos>
	...

080180e8 <floor>:
 80180e8:	ec51 0b10 	vmov	r0, r1, d0
 80180ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80180f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180f4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80180f8:	2e13      	cmp	r6, #19
 80180fa:	ee10 5a10 	vmov	r5, s0
 80180fe:	ee10 8a10 	vmov	r8, s0
 8018102:	460c      	mov	r4, r1
 8018104:	dc31      	bgt.n	801816a <floor+0x82>
 8018106:	2e00      	cmp	r6, #0
 8018108:	da14      	bge.n	8018134 <floor+0x4c>
 801810a:	a333      	add	r3, pc, #204	; (adr r3, 80181d8 <floor+0xf0>)
 801810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018110:	f7e8 f8bc 	bl	800028c <__adddf3>
 8018114:	2200      	movs	r2, #0
 8018116:	2300      	movs	r3, #0
 8018118:	f7e8 fcfe 	bl	8000b18 <__aeabi_dcmpgt>
 801811c:	b138      	cbz	r0, 801812e <floor+0x46>
 801811e:	2c00      	cmp	r4, #0
 8018120:	da53      	bge.n	80181ca <floor+0xe2>
 8018122:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8018126:	4325      	orrs	r5, r4
 8018128:	d052      	beq.n	80181d0 <floor+0xe8>
 801812a:	4c2d      	ldr	r4, [pc, #180]	; (80181e0 <floor+0xf8>)
 801812c:	2500      	movs	r5, #0
 801812e:	4621      	mov	r1, r4
 8018130:	4628      	mov	r0, r5
 8018132:	e024      	b.n	801817e <floor+0x96>
 8018134:	4f2b      	ldr	r7, [pc, #172]	; (80181e4 <floor+0xfc>)
 8018136:	4137      	asrs	r7, r6
 8018138:	ea01 0307 	and.w	r3, r1, r7
 801813c:	4303      	orrs	r3, r0
 801813e:	d01e      	beq.n	801817e <floor+0x96>
 8018140:	a325      	add	r3, pc, #148	; (adr r3, 80181d8 <floor+0xf0>)
 8018142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018146:	f7e8 f8a1 	bl	800028c <__adddf3>
 801814a:	2200      	movs	r2, #0
 801814c:	2300      	movs	r3, #0
 801814e:	f7e8 fce3 	bl	8000b18 <__aeabi_dcmpgt>
 8018152:	2800      	cmp	r0, #0
 8018154:	d0eb      	beq.n	801812e <floor+0x46>
 8018156:	2c00      	cmp	r4, #0
 8018158:	bfbe      	ittt	lt
 801815a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801815e:	4133      	asrlt	r3, r6
 8018160:	18e4      	addlt	r4, r4, r3
 8018162:	ea24 0407 	bic.w	r4, r4, r7
 8018166:	2500      	movs	r5, #0
 8018168:	e7e1      	b.n	801812e <floor+0x46>
 801816a:	2e33      	cmp	r6, #51	; 0x33
 801816c:	dd0b      	ble.n	8018186 <floor+0x9e>
 801816e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018172:	d104      	bne.n	801817e <floor+0x96>
 8018174:	ee10 2a10 	vmov	r2, s0
 8018178:	460b      	mov	r3, r1
 801817a:	f7e8 f887 	bl	800028c <__adddf3>
 801817e:	ec41 0b10 	vmov	d0, r0, r1
 8018182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018186:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801818a:	f04f 37ff 	mov.w	r7, #4294967295
 801818e:	40df      	lsrs	r7, r3
 8018190:	4238      	tst	r0, r7
 8018192:	d0f4      	beq.n	801817e <floor+0x96>
 8018194:	a310      	add	r3, pc, #64	; (adr r3, 80181d8 <floor+0xf0>)
 8018196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801819a:	f7e8 f877 	bl	800028c <__adddf3>
 801819e:	2200      	movs	r2, #0
 80181a0:	2300      	movs	r3, #0
 80181a2:	f7e8 fcb9 	bl	8000b18 <__aeabi_dcmpgt>
 80181a6:	2800      	cmp	r0, #0
 80181a8:	d0c1      	beq.n	801812e <floor+0x46>
 80181aa:	2c00      	cmp	r4, #0
 80181ac:	da0a      	bge.n	80181c4 <floor+0xdc>
 80181ae:	2e14      	cmp	r6, #20
 80181b0:	d101      	bne.n	80181b6 <floor+0xce>
 80181b2:	3401      	adds	r4, #1
 80181b4:	e006      	b.n	80181c4 <floor+0xdc>
 80181b6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80181ba:	2301      	movs	r3, #1
 80181bc:	40b3      	lsls	r3, r6
 80181be:	441d      	add	r5, r3
 80181c0:	45a8      	cmp	r8, r5
 80181c2:	d8f6      	bhi.n	80181b2 <floor+0xca>
 80181c4:	ea25 0507 	bic.w	r5, r5, r7
 80181c8:	e7b1      	b.n	801812e <floor+0x46>
 80181ca:	2500      	movs	r5, #0
 80181cc:	462c      	mov	r4, r5
 80181ce:	e7ae      	b.n	801812e <floor+0x46>
 80181d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80181d4:	e7ab      	b.n	801812e <floor+0x46>
 80181d6:	bf00      	nop
 80181d8:	8800759c 	.word	0x8800759c
 80181dc:	7e37e43c 	.word	0x7e37e43c
 80181e0:	bff00000 	.word	0xbff00000
 80181e4:	000fffff 	.word	0x000fffff

080181e8 <__kernel_cos>:
 80181e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181ec:	ec57 6b10 	vmov	r6, r7, d0
 80181f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80181f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80181f8:	ed8d 1b00 	vstr	d1, [sp]
 80181fc:	da07      	bge.n	801820e <__kernel_cos+0x26>
 80181fe:	ee10 0a10 	vmov	r0, s0
 8018202:	4639      	mov	r1, r7
 8018204:	f7e8 fca8 	bl	8000b58 <__aeabi_d2iz>
 8018208:	2800      	cmp	r0, #0
 801820a:	f000 8088 	beq.w	801831e <__kernel_cos+0x136>
 801820e:	4632      	mov	r2, r6
 8018210:	463b      	mov	r3, r7
 8018212:	4630      	mov	r0, r6
 8018214:	4639      	mov	r1, r7
 8018216:	f7e8 f9ef 	bl	80005f8 <__aeabi_dmul>
 801821a:	4b51      	ldr	r3, [pc, #324]	; (8018360 <__kernel_cos+0x178>)
 801821c:	2200      	movs	r2, #0
 801821e:	4604      	mov	r4, r0
 8018220:	460d      	mov	r5, r1
 8018222:	f7e8 f9e9 	bl	80005f8 <__aeabi_dmul>
 8018226:	a340      	add	r3, pc, #256	; (adr r3, 8018328 <__kernel_cos+0x140>)
 8018228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801822c:	4682      	mov	sl, r0
 801822e:	468b      	mov	fp, r1
 8018230:	4620      	mov	r0, r4
 8018232:	4629      	mov	r1, r5
 8018234:	f7e8 f9e0 	bl	80005f8 <__aeabi_dmul>
 8018238:	a33d      	add	r3, pc, #244	; (adr r3, 8018330 <__kernel_cos+0x148>)
 801823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801823e:	f7e8 f825 	bl	800028c <__adddf3>
 8018242:	4622      	mov	r2, r4
 8018244:	462b      	mov	r3, r5
 8018246:	f7e8 f9d7 	bl	80005f8 <__aeabi_dmul>
 801824a:	a33b      	add	r3, pc, #236	; (adr r3, 8018338 <__kernel_cos+0x150>)
 801824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018250:	f7e8 f81a 	bl	8000288 <__aeabi_dsub>
 8018254:	4622      	mov	r2, r4
 8018256:	462b      	mov	r3, r5
 8018258:	f7e8 f9ce 	bl	80005f8 <__aeabi_dmul>
 801825c:	a338      	add	r3, pc, #224	; (adr r3, 8018340 <__kernel_cos+0x158>)
 801825e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018262:	f7e8 f813 	bl	800028c <__adddf3>
 8018266:	4622      	mov	r2, r4
 8018268:	462b      	mov	r3, r5
 801826a:	f7e8 f9c5 	bl	80005f8 <__aeabi_dmul>
 801826e:	a336      	add	r3, pc, #216	; (adr r3, 8018348 <__kernel_cos+0x160>)
 8018270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018274:	f7e8 f808 	bl	8000288 <__aeabi_dsub>
 8018278:	4622      	mov	r2, r4
 801827a:	462b      	mov	r3, r5
 801827c:	f7e8 f9bc 	bl	80005f8 <__aeabi_dmul>
 8018280:	a333      	add	r3, pc, #204	; (adr r3, 8018350 <__kernel_cos+0x168>)
 8018282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018286:	f7e8 f801 	bl	800028c <__adddf3>
 801828a:	4622      	mov	r2, r4
 801828c:	462b      	mov	r3, r5
 801828e:	f7e8 f9b3 	bl	80005f8 <__aeabi_dmul>
 8018292:	4622      	mov	r2, r4
 8018294:	462b      	mov	r3, r5
 8018296:	f7e8 f9af 	bl	80005f8 <__aeabi_dmul>
 801829a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801829e:	4604      	mov	r4, r0
 80182a0:	460d      	mov	r5, r1
 80182a2:	4630      	mov	r0, r6
 80182a4:	4639      	mov	r1, r7
 80182a6:	f7e8 f9a7 	bl	80005f8 <__aeabi_dmul>
 80182aa:	460b      	mov	r3, r1
 80182ac:	4602      	mov	r2, r0
 80182ae:	4629      	mov	r1, r5
 80182b0:	4620      	mov	r0, r4
 80182b2:	f7e7 ffe9 	bl	8000288 <__aeabi_dsub>
 80182b6:	4b2b      	ldr	r3, [pc, #172]	; (8018364 <__kernel_cos+0x17c>)
 80182b8:	4598      	cmp	r8, r3
 80182ba:	4606      	mov	r6, r0
 80182bc:	460f      	mov	r7, r1
 80182be:	dc10      	bgt.n	80182e2 <__kernel_cos+0xfa>
 80182c0:	4602      	mov	r2, r0
 80182c2:	460b      	mov	r3, r1
 80182c4:	4650      	mov	r0, sl
 80182c6:	4659      	mov	r1, fp
 80182c8:	f7e7 ffde 	bl	8000288 <__aeabi_dsub>
 80182cc:	460b      	mov	r3, r1
 80182ce:	4926      	ldr	r1, [pc, #152]	; (8018368 <__kernel_cos+0x180>)
 80182d0:	4602      	mov	r2, r0
 80182d2:	2000      	movs	r0, #0
 80182d4:	f7e7 ffd8 	bl	8000288 <__aeabi_dsub>
 80182d8:	ec41 0b10 	vmov	d0, r0, r1
 80182dc:	b003      	add	sp, #12
 80182de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182e2:	4b22      	ldr	r3, [pc, #136]	; (801836c <__kernel_cos+0x184>)
 80182e4:	4920      	ldr	r1, [pc, #128]	; (8018368 <__kernel_cos+0x180>)
 80182e6:	4598      	cmp	r8, r3
 80182e8:	bfcc      	ite	gt
 80182ea:	4d21      	ldrgt	r5, [pc, #132]	; (8018370 <__kernel_cos+0x188>)
 80182ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80182f0:	2400      	movs	r4, #0
 80182f2:	4622      	mov	r2, r4
 80182f4:	462b      	mov	r3, r5
 80182f6:	2000      	movs	r0, #0
 80182f8:	f7e7 ffc6 	bl	8000288 <__aeabi_dsub>
 80182fc:	4622      	mov	r2, r4
 80182fe:	4680      	mov	r8, r0
 8018300:	4689      	mov	r9, r1
 8018302:	462b      	mov	r3, r5
 8018304:	4650      	mov	r0, sl
 8018306:	4659      	mov	r1, fp
 8018308:	f7e7 ffbe 	bl	8000288 <__aeabi_dsub>
 801830c:	4632      	mov	r2, r6
 801830e:	463b      	mov	r3, r7
 8018310:	f7e7 ffba 	bl	8000288 <__aeabi_dsub>
 8018314:	4602      	mov	r2, r0
 8018316:	460b      	mov	r3, r1
 8018318:	4640      	mov	r0, r8
 801831a:	4649      	mov	r1, r9
 801831c:	e7da      	b.n	80182d4 <__kernel_cos+0xec>
 801831e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8018358 <__kernel_cos+0x170>
 8018322:	e7db      	b.n	80182dc <__kernel_cos+0xf4>
 8018324:	f3af 8000 	nop.w
 8018328:	be8838d4 	.word	0xbe8838d4
 801832c:	bda8fae9 	.word	0xbda8fae9
 8018330:	bdb4b1c4 	.word	0xbdb4b1c4
 8018334:	3e21ee9e 	.word	0x3e21ee9e
 8018338:	809c52ad 	.word	0x809c52ad
 801833c:	3e927e4f 	.word	0x3e927e4f
 8018340:	19cb1590 	.word	0x19cb1590
 8018344:	3efa01a0 	.word	0x3efa01a0
 8018348:	16c15177 	.word	0x16c15177
 801834c:	3f56c16c 	.word	0x3f56c16c
 8018350:	5555554c 	.word	0x5555554c
 8018354:	3fa55555 	.word	0x3fa55555
 8018358:	00000000 	.word	0x00000000
 801835c:	3ff00000 	.word	0x3ff00000
 8018360:	3fe00000 	.word	0x3fe00000
 8018364:	3fd33332 	.word	0x3fd33332
 8018368:	3ff00000 	.word	0x3ff00000
 801836c:	3fe90000 	.word	0x3fe90000
 8018370:	3fd20000 	.word	0x3fd20000
 8018374:	00000000 	.word	0x00000000

08018378 <__kernel_sin>:
 8018378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801837c:	ed2d 8b04 	vpush	{d8-d9}
 8018380:	eeb0 8a41 	vmov.f32	s16, s2
 8018384:	eef0 8a61 	vmov.f32	s17, s3
 8018388:	ec55 4b10 	vmov	r4, r5, d0
 801838c:	b083      	sub	sp, #12
 801838e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8018392:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8018396:	9001      	str	r0, [sp, #4]
 8018398:	da06      	bge.n	80183a8 <__kernel_sin+0x30>
 801839a:	ee10 0a10 	vmov	r0, s0
 801839e:	4629      	mov	r1, r5
 80183a0:	f7e8 fbda 	bl	8000b58 <__aeabi_d2iz>
 80183a4:	2800      	cmp	r0, #0
 80183a6:	d051      	beq.n	801844c <__kernel_sin+0xd4>
 80183a8:	4622      	mov	r2, r4
 80183aa:	462b      	mov	r3, r5
 80183ac:	4620      	mov	r0, r4
 80183ae:	4629      	mov	r1, r5
 80183b0:	f7e8 f922 	bl	80005f8 <__aeabi_dmul>
 80183b4:	4682      	mov	sl, r0
 80183b6:	468b      	mov	fp, r1
 80183b8:	4602      	mov	r2, r0
 80183ba:	460b      	mov	r3, r1
 80183bc:	4620      	mov	r0, r4
 80183be:	4629      	mov	r1, r5
 80183c0:	f7e8 f91a 	bl	80005f8 <__aeabi_dmul>
 80183c4:	a341      	add	r3, pc, #260	; (adr r3, 80184cc <__kernel_sin+0x154>)
 80183c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183ca:	4680      	mov	r8, r0
 80183cc:	4689      	mov	r9, r1
 80183ce:	4650      	mov	r0, sl
 80183d0:	4659      	mov	r1, fp
 80183d2:	f7e8 f911 	bl	80005f8 <__aeabi_dmul>
 80183d6:	a33f      	add	r3, pc, #252	; (adr r3, 80184d4 <__kernel_sin+0x15c>)
 80183d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183dc:	f7e7 ff54 	bl	8000288 <__aeabi_dsub>
 80183e0:	4652      	mov	r2, sl
 80183e2:	465b      	mov	r3, fp
 80183e4:	f7e8 f908 	bl	80005f8 <__aeabi_dmul>
 80183e8:	a33c      	add	r3, pc, #240	; (adr r3, 80184dc <__kernel_sin+0x164>)
 80183ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183ee:	f7e7 ff4d 	bl	800028c <__adddf3>
 80183f2:	4652      	mov	r2, sl
 80183f4:	465b      	mov	r3, fp
 80183f6:	f7e8 f8ff 	bl	80005f8 <__aeabi_dmul>
 80183fa:	a33a      	add	r3, pc, #232	; (adr r3, 80184e4 <__kernel_sin+0x16c>)
 80183fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018400:	f7e7 ff42 	bl	8000288 <__aeabi_dsub>
 8018404:	4652      	mov	r2, sl
 8018406:	465b      	mov	r3, fp
 8018408:	f7e8 f8f6 	bl	80005f8 <__aeabi_dmul>
 801840c:	a337      	add	r3, pc, #220	; (adr r3, 80184ec <__kernel_sin+0x174>)
 801840e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018412:	f7e7 ff3b 	bl	800028c <__adddf3>
 8018416:	9b01      	ldr	r3, [sp, #4]
 8018418:	4606      	mov	r6, r0
 801841a:	460f      	mov	r7, r1
 801841c:	b9eb      	cbnz	r3, 801845a <__kernel_sin+0xe2>
 801841e:	4602      	mov	r2, r0
 8018420:	460b      	mov	r3, r1
 8018422:	4650      	mov	r0, sl
 8018424:	4659      	mov	r1, fp
 8018426:	f7e8 f8e7 	bl	80005f8 <__aeabi_dmul>
 801842a:	a325      	add	r3, pc, #148	; (adr r3, 80184c0 <__kernel_sin+0x148>)
 801842c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018430:	f7e7 ff2a 	bl	8000288 <__aeabi_dsub>
 8018434:	4642      	mov	r2, r8
 8018436:	464b      	mov	r3, r9
 8018438:	f7e8 f8de 	bl	80005f8 <__aeabi_dmul>
 801843c:	4602      	mov	r2, r0
 801843e:	460b      	mov	r3, r1
 8018440:	4620      	mov	r0, r4
 8018442:	4629      	mov	r1, r5
 8018444:	f7e7 ff22 	bl	800028c <__adddf3>
 8018448:	4604      	mov	r4, r0
 801844a:	460d      	mov	r5, r1
 801844c:	ec45 4b10 	vmov	d0, r4, r5
 8018450:	b003      	add	sp, #12
 8018452:	ecbd 8b04 	vpop	{d8-d9}
 8018456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801845a:	4b1b      	ldr	r3, [pc, #108]	; (80184c8 <__kernel_sin+0x150>)
 801845c:	ec51 0b18 	vmov	r0, r1, d8
 8018460:	2200      	movs	r2, #0
 8018462:	f7e8 f8c9 	bl	80005f8 <__aeabi_dmul>
 8018466:	4632      	mov	r2, r6
 8018468:	ec41 0b19 	vmov	d9, r0, r1
 801846c:	463b      	mov	r3, r7
 801846e:	4640      	mov	r0, r8
 8018470:	4649      	mov	r1, r9
 8018472:	f7e8 f8c1 	bl	80005f8 <__aeabi_dmul>
 8018476:	4602      	mov	r2, r0
 8018478:	460b      	mov	r3, r1
 801847a:	ec51 0b19 	vmov	r0, r1, d9
 801847e:	f7e7 ff03 	bl	8000288 <__aeabi_dsub>
 8018482:	4652      	mov	r2, sl
 8018484:	465b      	mov	r3, fp
 8018486:	f7e8 f8b7 	bl	80005f8 <__aeabi_dmul>
 801848a:	ec53 2b18 	vmov	r2, r3, d8
 801848e:	f7e7 fefb 	bl	8000288 <__aeabi_dsub>
 8018492:	a30b      	add	r3, pc, #44	; (adr r3, 80184c0 <__kernel_sin+0x148>)
 8018494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018498:	4606      	mov	r6, r0
 801849a:	460f      	mov	r7, r1
 801849c:	4640      	mov	r0, r8
 801849e:	4649      	mov	r1, r9
 80184a0:	f7e8 f8aa 	bl	80005f8 <__aeabi_dmul>
 80184a4:	4602      	mov	r2, r0
 80184a6:	460b      	mov	r3, r1
 80184a8:	4630      	mov	r0, r6
 80184aa:	4639      	mov	r1, r7
 80184ac:	f7e7 feee 	bl	800028c <__adddf3>
 80184b0:	4602      	mov	r2, r0
 80184b2:	460b      	mov	r3, r1
 80184b4:	4620      	mov	r0, r4
 80184b6:	4629      	mov	r1, r5
 80184b8:	f7e7 fee6 	bl	8000288 <__aeabi_dsub>
 80184bc:	e7c4      	b.n	8018448 <__kernel_sin+0xd0>
 80184be:	bf00      	nop
 80184c0:	55555549 	.word	0x55555549
 80184c4:	3fc55555 	.word	0x3fc55555
 80184c8:	3fe00000 	.word	0x3fe00000
 80184cc:	5acfd57c 	.word	0x5acfd57c
 80184d0:	3de5d93a 	.word	0x3de5d93a
 80184d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80184d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80184dc:	57b1fe7d 	.word	0x57b1fe7d
 80184e0:	3ec71de3 	.word	0x3ec71de3
 80184e4:	19c161d5 	.word	0x19c161d5
 80184e8:	3f2a01a0 	.word	0x3f2a01a0
 80184ec:	1110f8a6 	.word	0x1110f8a6
 80184f0:	3f811111 	.word	0x3f811111
 80184f4:	00000000 	.word	0x00000000

080184f8 <__ieee754_rem_pio2>:
 80184f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184fc:	ed2d 8b02 	vpush	{d8}
 8018500:	ec55 4b10 	vmov	r4, r5, d0
 8018504:	4bca      	ldr	r3, [pc, #808]	; (8018830 <__ieee754_rem_pio2+0x338>)
 8018506:	b08b      	sub	sp, #44	; 0x2c
 8018508:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801850c:	4598      	cmp	r8, r3
 801850e:	4682      	mov	sl, r0
 8018510:	9502      	str	r5, [sp, #8]
 8018512:	dc08      	bgt.n	8018526 <__ieee754_rem_pio2+0x2e>
 8018514:	2200      	movs	r2, #0
 8018516:	2300      	movs	r3, #0
 8018518:	ed80 0b00 	vstr	d0, [r0]
 801851c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8018520:	f04f 0b00 	mov.w	fp, #0
 8018524:	e028      	b.n	8018578 <__ieee754_rem_pio2+0x80>
 8018526:	4bc3      	ldr	r3, [pc, #780]	; (8018834 <__ieee754_rem_pio2+0x33c>)
 8018528:	4598      	cmp	r8, r3
 801852a:	dc78      	bgt.n	801861e <__ieee754_rem_pio2+0x126>
 801852c:	9b02      	ldr	r3, [sp, #8]
 801852e:	4ec2      	ldr	r6, [pc, #776]	; (8018838 <__ieee754_rem_pio2+0x340>)
 8018530:	2b00      	cmp	r3, #0
 8018532:	ee10 0a10 	vmov	r0, s0
 8018536:	a3b0      	add	r3, pc, #704	; (adr r3, 80187f8 <__ieee754_rem_pio2+0x300>)
 8018538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801853c:	4629      	mov	r1, r5
 801853e:	dd39      	ble.n	80185b4 <__ieee754_rem_pio2+0xbc>
 8018540:	f7e7 fea2 	bl	8000288 <__aeabi_dsub>
 8018544:	45b0      	cmp	r8, r6
 8018546:	4604      	mov	r4, r0
 8018548:	460d      	mov	r5, r1
 801854a:	d01b      	beq.n	8018584 <__ieee754_rem_pio2+0x8c>
 801854c:	a3ac      	add	r3, pc, #688	; (adr r3, 8018800 <__ieee754_rem_pio2+0x308>)
 801854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018552:	f7e7 fe99 	bl	8000288 <__aeabi_dsub>
 8018556:	4602      	mov	r2, r0
 8018558:	460b      	mov	r3, r1
 801855a:	e9ca 2300 	strd	r2, r3, [sl]
 801855e:	4620      	mov	r0, r4
 8018560:	4629      	mov	r1, r5
 8018562:	f7e7 fe91 	bl	8000288 <__aeabi_dsub>
 8018566:	a3a6      	add	r3, pc, #664	; (adr r3, 8018800 <__ieee754_rem_pio2+0x308>)
 8018568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801856c:	f7e7 fe8c 	bl	8000288 <__aeabi_dsub>
 8018570:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018574:	f04f 0b01 	mov.w	fp, #1
 8018578:	4658      	mov	r0, fp
 801857a:	b00b      	add	sp, #44	; 0x2c
 801857c:	ecbd 8b02 	vpop	{d8}
 8018580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018584:	a3a0      	add	r3, pc, #640	; (adr r3, 8018808 <__ieee754_rem_pio2+0x310>)
 8018586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801858a:	f7e7 fe7d 	bl	8000288 <__aeabi_dsub>
 801858e:	a3a0      	add	r3, pc, #640	; (adr r3, 8018810 <__ieee754_rem_pio2+0x318>)
 8018590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018594:	4604      	mov	r4, r0
 8018596:	460d      	mov	r5, r1
 8018598:	f7e7 fe76 	bl	8000288 <__aeabi_dsub>
 801859c:	4602      	mov	r2, r0
 801859e:	460b      	mov	r3, r1
 80185a0:	e9ca 2300 	strd	r2, r3, [sl]
 80185a4:	4620      	mov	r0, r4
 80185a6:	4629      	mov	r1, r5
 80185a8:	f7e7 fe6e 	bl	8000288 <__aeabi_dsub>
 80185ac:	a398      	add	r3, pc, #608	; (adr r3, 8018810 <__ieee754_rem_pio2+0x318>)
 80185ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185b2:	e7db      	b.n	801856c <__ieee754_rem_pio2+0x74>
 80185b4:	f7e7 fe6a 	bl	800028c <__adddf3>
 80185b8:	45b0      	cmp	r8, r6
 80185ba:	4604      	mov	r4, r0
 80185bc:	460d      	mov	r5, r1
 80185be:	d016      	beq.n	80185ee <__ieee754_rem_pio2+0xf6>
 80185c0:	a38f      	add	r3, pc, #572	; (adr r3, 8018800 <__ieee754_rem_pio2+0x308>)
 80185c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185c6:	f7e7 fe61 	bl	800028c <__adddf3>
 80185ca:	4602      	mov	r2, r0
 80185cc:	460b      	mov	r3, r1
 80185ce:	e9ca 2300 	strd	r2, r3, [sl]
 80185d2:	4620      	mov	r0, r4
 80185d4:	4629      	mov	r1, r5
 80185d6:	f7e7 fe57 	bl	8000288 <__aeabi_dsub>
 80185da:	a389      	add	r3, pc, #548	; (adr r3, 8018800 <__ieee754_rem_pio2+0x308>)
 80185dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185e0:	f7e7 fe54 	bl	800028c <__adddf3>
 80185e4:	f04f 3bff 	mov.w	fp, #4294967295
 80185e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80185ec:	e7c4      	b.n	8018578 <__ieee754_rem_pio2+0x80>
 80185ee:	a386      	add	r3, pc, #536	; (adr r3, 8018808 <__ieee754_rem_pio2+0x310>)
 80185f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185f4:	f7e7 fe4a 	bl	800028c <__adddf3>
 80185f8:	a385      	add	r3, pc, #532	; (adr r3, 8018810 <__ieee754_rem_pio2+0x318>)
 80185fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185fe:	4604      	mov	r4, r0
 8018600:	460d      	mov	r5, r1
 8018602:	f7e7 fe43 	bl	800028c <__adddf3>
 8018606:	4602      	mov	r2, r0
 8018608:	460b      	mov	r3, r1
 801860a:	e9ca 2300 	strd	r2, r3, [sl]
 801860e:	4620      	mov	r0, r4
 8018610:	4629      	mov	r1, r5
 8018612:	f7e7 fe39 	bl	8000288 <__aeabi_dsub>
 8018616:	a37e      	add	r3, pc, #504	; (adr r3, 8018810 <__ieee754_rem_pio2+0x318>)
 8018618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801861c:	e7e0      	b.n	80185e0 <__ieee754_rem_pio2+0xe8>
 801861e:	4b87      	ldr	r3, [pc, #540]	; (801883c <__ieee754_rem_pio2+0x344>)
 8018620:	4598      	cmp	r8, r3
 8018622:	f300 80d8 	bgt.w	80187d6 <__ieee754_rem_pio2+0x2de>
 8018626:	f000 f9a1 	bl	801896c <fabs>
 801862a:	ec55 4b10 	vmov	r4, r5, d0
 801862e:	ee10 0a10 	vmov	r0, s0
 8018632:	a379      	add	r3, pc, #484	; (adr r3, 8018818 <__ieee754_rem_pio2+0x320>)
 8018634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018638:	4629      	mov	r1, r5
 801863a:	f7e7 ffdd 	bl	80005f8 <__aeabi_dmul>
 801863e:	4b80      	ldr	r3, [pc, #512]	; (8018840 <__ieee754_rem_pio2+0x348>)
 8018640:	2200      	movs	r2, #0
 8018642:	f7e7 fe23 	bl	800028c <__adddf3>
 8018646:	f7e8 fa87 	bl	8000b58 <__aeabi_d2iz>
 801864a:	4683      	mov	fp, r0
 801864c:	f7e7 ff6a 	bl	8000524 <__aeabi_i2d>
 8018650:	4602      	mov	r2, r0
 8018652:	460b      	mov	r3, r1
 8018654:	ec43 2b18 	vmov	d8, r2, r3
 8018658:	a367      	add	r3, pc, #412	; (adr r3, 80187f8 <__ieee754_rem_pio2+0x300>)
 801865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801865e:	f7e7 ffcb 	bl	80005f8 <__aeabi_dmul>
 8018662:	4602      	mov	r2, r0
 8018664:	460b      	mov	r3, r1
 8018666:	4620      	mov	r0, r4
 8018668:	4629      	mov	r1, r5
 801866a:	f7e7 fe0d 	bl	8000288 <__aeabi_dsub>
 801866e:	a364      	add	r3, pc, #400	; (adr r3, 8018800 <__ieee754_rem_pio2+0x308>)
 8018670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018674:	4606      	mov	r6, r0
 8018676:	460f      	mov	r7, r1
 8018678:	ec51 0b18 	vmov	r0, r1, d8
 801867c:	f7e7 ffbc 	bl	80005f8 <__aeabi_dmul>
 8018680:	f1bb 0f1f 	cmp.w	fp, #31
 8018684:	4604      	mov	r4, r0
 8018686:	460d      	mov	r5, r1
 8018688:	dc0d      	bgt.n	80186a6 <__ieee754_rem_pio2+0x1ae>
 801868a:	4b6e      	ldr	r3, [pc, #440]	; (8018844 <__ieee754_rem_pio2+0x34c>)
 801868c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8018690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018694:	4543      	cmp	r3, r8
 8018696:	d006      	beq.n	80186a6 <__ieee754_rem_pio2+0x1ae>
 8018698:	4622      	mov	r2, r4
 801869a:	462b      	mov	r3, r5
 801869c:	4630      	mov	r0, r6
 801869e:	4639      	mov	r1, r7
 80186a0:	f7e7 fdf2 	bl	8000288 <__aeabi_dsub>
 80186a4:	e00e      	b.n	80186c4 <__ieee754_rem_pio2+0x1cc>
 80186a6:	462b      	mov	r3, r5
 80186a8:	4622      	mov	r2, r4
 80186aa:	4630      	mov	r0, r6
 80186ac:	4639      	mov	r1, r7
 80186ae:	f7e7 fdeb 	bl	8000288 <__aeabi_dsub>
 80186b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80186b6:	9303      	str	r3, [sp, #12]
 80186b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80186bc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80186c0:	2b10      	cmp	r3, #16
 80186c2:	dc02      	bgt.n	80186ca <__ieee754_rem_pio2+0x1d2>
 80186c4:	e9ca 0100 	strd	r0, r1, [sl]
 80186c8:	e039      	b.n	801873e <__ieee754_rem_pio2+0x246>
 80186ca:	a34f      	add	r3, pc, #316	; (adr r3, 8018808 <__ieee754_rem_pio2+0x310>)
 80186cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186d0:	ec51 0b18 	vmov	r0, r1, d8
 80186d4:	f7e7 ff90 	bl	80005f8 <__aeabi_dmul>
 80186d8:	4604      	mov	r4, r0
 80186da:	460d      	mov	r5, r1
 80186dc:	4602      	mov	r2, r0
 80186de:	460b      	mov	r3, r1
 80186e0:	4630      	mov	r0, r6
 80186e2:	4639      	mov	r1, r7
 80186e4:	f7e7 fdd0 	bl	8000288 <__aeabi_dsub>
 80186e8:	4602      	mov	r2, r0
 80186ea:	460b      	mov	r3, r1
 80186ec:	4680      	mov	r8, r0
 80186ee:	4689      	mov	r9, r1
 80186f0:	4630      	mov	r0, r6
 80186f2:	4639      	mov	r1, r7
 80186f4:	f7e7 fdc8 	bl	8000288 <__aeabi_dsub>
 80186f8:	4622      	mov	r2, r4
 80186fa:	462b      	mov	r3, r5
 80186fc:	f7e7 fdc4 	bl	8000288 <__aeabi_dsub>
 8018700:	a343      	add	r3, pc, #268	; (adr r3, 8018810 <__ieee754_rem_pio2+0x318>)
 8018702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018706:	4604      	mov	r4, r0
 8018708:	460d      	mov	r5, r1
 801870a:	ec51 0b18 	vmov	r0, r1, d8
 801870e:	f7e7 ff73 	bl	80005f8 <__aeabi_dmul>
 8018712:	4622      	mov	r2, r4
 8018714:	462b      	mov	r3, r5
 8018716:	f7e7 fdb7 	bl	8000288 <__aeabi_dsub>
 801871a:	4602      	mov	r2, r0
 801871c:	460b      	mov	r3, r1
 801871e:	4604      	mov	r4, r0
 8018720:	460d      	mov	r5, r1
 8018722:	4640      	mov	r0, r8
 8018724:	4649      	mov	r1, r9
 8018726:	f7e7 fdaf 	bl	8000288 <__aeabi_dsub>
 801872a:	9a03      	ldr	r2, [sp, #12]
 801872c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018730:	1ad3      	subs	r3, r2, r3
 8018732:	2b31      	cmp	r3, #49	; 0x31
 8018734:	dc24      	bgt.n	8018780 <__ieee754_rem_pio2+0x288>
 8018736:	e9ca 0100 	strd	r0, r1, [sl]
 801873a:	4646      	mov	r6, r8
 801873c:	464f      	mov	r7, r9
 801873e:	e9da 8900 	ldrd	r8, r9, [sl]
 8018742:	4630      	mov	r0, r6
 8018744:	4642      	mov	r2, r8
 8018746:	464b      	mov	r3, r9
 8018748:	4639      	mov	r1, r7
 801874a:	f7e7 fd9d 	bl	8000288 <__aeabi_dsub>
 801874e:	462b      	mov	r3, r5
 8018750:	4622      	mov	r2, r4
 8018752:	f7e7 fd99 	bl	8000288 <__aeabi_dsub>
 8018756:	9b02      	ldr	r3, [sp, #8]
 8018758:	2b00      	cmp	r3, #0
 801875a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801875e:	f6bf af0b 	bge.w	8018578 <__ieee754_rem_pio2+0x80>
 8018762:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8018766:	f8ca 3004 	str.w	r3, [sl, #4]
 801876a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801876e:	f8ca 8000 	str.w	r8, [sl]
 8018772:	f8ca 0008 	str.w	r0, [sl, #8]
 8018776:	f8ca 300c 	str.w	r3, [sl, #12]
 801877a:	f1cb 0b00 	rsb	fp, fp, #0
 801877e:	e6fb      	b.n	8018578 <__ieee754_rem_pio2+0x80>
 8018780:	a327      	add	r3, pc, #156	; (adr r3, 8018820 <__ieee754_rem_pio2+0x328>)
 8018782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018786:	ec51 0b18 	vmov	r0, r1, d8
 801878a:	f7e7 ff35 	bl	80005f8 <__aeabi_dmul>
 801878e:	4604      	mov	r4, r0
 8018790:	460d      	mov	r5, r1
 8018792:	4602      	mov	r2, r0
 8018794:	460b      	mov	r3, r1
 8018796:	4640      	mov	r0, r8
 8018798:	4649      	mov	r1, r9
 801879a:	f7e7 fd75 	bl	8000288 <__aeabi_dsub>
 801879e:	4602      	mov	r2, r0
 80187a0:	460b      	mov	r3, r1
 80187a2:	4606      	mov	r6, r0
 80187a4:	460f      	mov	r7, r1
 80187a6:	4640      	mov	r0, r8
 80187a8:	4649      	mov	r1, r9
 80187aa:	f7e7 fd6d 	bl	8000288 <__aeabi_dsub>
 80187ae:	4622      	mov	r2, r4
 80187b0:	462b      	mov	r3, r5
 80187b2:	f7e7 fd69 	bl	8000288 <__aeabi_dsub>
 80187b6:	a31c      	add	r3, pc, #112	; (adr r3, 8018828 <__ieee754_rem_pio2+0x330>)
 80187b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187bc:	4604      	mov	r4, r0
 80187be:	460d      	mov	r5, r1
 80187c0:	ec51 0b18 	vmov	r0, r1, d8
 80187c4:	f7e7 ff18 	bl	80005f8 <__aeabi_dmul>
 80187c8:	4622      	mov	r2, r4
 80187ca:	462b      	mov	r3, r5
 80187cc:	f7e7 fd5c 	bl	8000288 <__aeabi_dsub>
 80187d0:	4604      	mov	r4, r0
 80187d2:	460d      	mov	r5, r1
 80187d4:	e760      	b.n	8018698 <__ieee754_rem_pio2+0x1a0>
 80187d6:	4b1c      	ldr	r3, [pc, #112]	; (8018848 <__ieee754_rem_pio2+0x350>)
 80187d8:	4598      	cmp	r8, r3
 80187da:	dd37      	ble.n	801884c <__ieee754_rem_pio2+0x354>
 80187dc:	ee10 2a10 	vmov	r2, s0
 80187e0:	462b      	mov	r3, r5
 80187e2:	4620      	mov	r0, r4
 80187e4:	4629      	mov	r1, r5
 80187e6:	f7e7 fd4f 	bl	8000288 <__aeabi_dsub>
 80187ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80187ee:	e9ca 0100 	strd	r0, r1, [sl]
 80187f2:	e695      	b.n	8018520 <__ieee754_rem_pio2+0x28>
 80187f4:	f3af 8000 	nop.w
 80187f8:	54400000 	.word	0x54400000
 80187fc:	3ff921fb 	.word	0x3ff921fb
 8018800:	1a626331 	.word	0x1a626331
 8018804:	3dd0b461 	.word	0x3dd0b461
 8018808:	1a600000 	.word	0x1a600000
 801880c:	3dd0b461 	.word	0x3dd0b461
 8018810:	2e037073 	.word	0x2e037073
 8018814:	3ba3198a 	.word	0x3ba3198a
 8018818:	6dc9c883 	.word	0x6dc9c883
 801881c:	3fe45f30 	.word	0x3fe45f30
 8018820:	2e000000 	.word	0x2e000000
 8018824:	3ba3198a 	.word	0x3ba3198a
 8018828:	252049c1 	.word	0x252049c1
 801882c:	397b839a 	.word	0x397b839a
 8018830:	3fe921fb 	.word	0x3fe921fb
 8018834:	4002d97b 	.word	0x4002d97b
 8018838:	3ff921fb 	.word	0x3ff921fb
 801883c:	413921fb 	.word	0x413921fb
 8018840:	3fe00000 	.word	0x3fe00000
 8018844:	0801bcb8 	.word	0x0801bcb8
 8018848:	7fefffff 	.word	0x7fefffff
 801884c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8018850:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8018854:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8018858:	4620      	mov	r0, r4
 801885a:	460d      	mov	r5, r1
 801885c:	f7e8 f97c 	bl	8000b58 <__aeabi_d2iz>
 8018860:	f7e7 fe60 	bl	8000524 <__aeabi_i2d>
 8018864:	4602      	mov	r2, r0
 8018866:	460b      	mov	r3, r1
 8018868:	4620      	mov	r0, r4
 801886a:	4629      	mov	r1, r5
 801886c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018870:	f7e7 fd0a 	bl	8000288 <__aeabi_dsub>
 8018874:	4b21      	ldr	r3, [pc, #132]	; (80188fc <__ieee754_rem_pio2+0x404>)
 8018876:	2200      	movs	r2, #0
 8018878:	f7e7 febe 	bl	80005f8 <__aeabi_dmul>
 801887c:	460d      	mov	r5, r1
 801887e:	4604      	mov	r4, r0
 8018880:	f7e8 f96a 	bl	8000b58 <__aeabi_d2iz>
 8018884:	f7e7 fe4e 	bl	8000524 <__aeabi_i2d>
 8018888:	4602      	mov	r2, r0
 801888a:	460b      	mov	r3, r1
 801888c:	4620      	mov	r0, r4
 801888e:	4629      	mov	r1, r5
 8018890:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018894:	f7e7 fcf8 	bl	8000288 <__aeabi_dsub>
 8018898:	4b18      	ldr	r3, [pc, #96]	; (80188fc <__ieee754_rem_pio2+0x404>)
 801889a:	2200      	movs	r2, #0
 801889c:	f7e7 feac 	bl	80005f8 <__aeabi_dmul>
 80188a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80188a4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80188a8:	2703      	movs	r7, #3
 80188aa:	2400      	movs	r4, #0
 80188ac:	2500      	movs	r5, #0
 80188ae:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80188b2:	4622      	mov	r2, r4
 80188b4:	462b      	mov	r3, r5
 80188b6:	46b9      	mov	r9, r7
 80188b8:	3f01      	subs	r7, #1
 80188ba:	f7e8 f905 	bl	8000ac8 <__aeabi_dcmpeq>
 80188be:	2800      	cmp	r0, #0
 80188c0:	d1f5      	bne.n	80188ae <__ieee754_rem_pio2+0x3b6>
 80188c2:	4b0f      	ldr	r3, [pc, #60]	; (8018900 <__ieee754_rem_pio2+0x408>)
 80188c4:	9301      	str	r3, [sp, #4]
 80188c6:	2302      	movs	r3, #2
 80188c8:	9300      	str	r3, [sp, #0]
 80188ca:	4632      	mov	r2, r6
 80188cc:	464b      	mov	r3, r9
 80188ce:	4651      	mov	r1, sl
 80188d0:	a804      	add	r0, sp, #16
 80188d2:	f000 f945 	bl	8018b60 <__kernel_rem_pio2>
 80188d6:	9b02      	ldr	r3, [sp, #8]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	4683      	mov	fp, r0
 80188dc:	f6bf ae4c 	bge.w	8018578 <__ieee754_rem_pio2+0x80>
 80188e0:	e9da 2100 	ldrd	r2, r1, [sl]
 80188e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80188e8:	e9ca 2300 	strd	r2, r3, [sl]
 80188ec:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80188f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80188f4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80188f8:	e73f      	b.n	801877a <__ieee754_rem_pio2+0x282>
 80188fa:	bf00      	nop
 80188fc:	41700000 	.word	0x41700000
 8018900:	0801bd38 	.word	0x0801bd38

08018904 <acos>:
 8018904:	b538      	push	{r3, r4, r5, lr}
 8018906:	ed2d 8b02 	vpush	{d8}
 801890a:	ec55 4b10 	vmov	r4, r5, d0
 801890e:	f000 fc77 	bl	8019200 <__ieee754_acos>
 8018912:	4622      	mov	r2, r4
 8018914:	462b      	mov	r3, r5
 8018916:	4620      	mov	r0, r4
 8018918:	4629      	mov	r1, r5
 801891a:	eeb0 8a40 	vmov.f32	s16, s0
 801891e:	eef0 8a60 	vmov.f32	s17, s1
 8018922:	f7e8 f903 	bl	8000b2c <__aeabi_dcmpun>
 8018926:	b9a8      	cbnz	r0, 8018954 <acos+0x50>
 8018928:	ec45 4b10 	vmov	d0, r4, r5
 801892c:	f000 f81e 	bl	801896c <fabs>
 8018930:	4b0c      	ldr	r3, [pc, #48]	; (8018964 <acos+0x60>)
 8018932:	ec51 0b10 	vmov	r0, r1, d0
 8018936:	2200      	movs	r2, #0
 8018938:	f7e8 f8ee 	bl	8000b18 <__aeabi_dcmpgt>
 801893c:	b150      	cbz	r0, 8018954 <acos+0x50>
 801893e:	f7fc fe07 	bl	8015550 <__errno>
 8018942:	ecbd 8b02 	vpop	{d8}
 8018946:	2321      	movs	r3, #33	; 0x21
 8018948:	6003      	str	r3, [r0, #0]
 801894a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801894e:	4806      	ldr	r0, [pc, #24]	; (8018968 <acos+0x64>)
 8018950:	f7fc be42 	b.w	80155d8 <nan>
 8018954:	eeb0 0a48 	vmov.f32	s0, s16
 8018958:	eef0 0a68 	vmov.f32	s1, s17
 801895c:	ecbd 8b02 	vpop	{d8}
 8018960:	bd38      	pop	{r3, r4, r5, pc}
 8018962:	bf00      	nop
 8018964:	3ff00000 	.word	0x3ff00000
 8018968:	0801ba76 	.word	0x0801ba76

0801896c <fabs>:
 801896c:	ec51 0b10 	vmov	r0, r1, d0
 8018970:	ee10 2a10 	vmov	r2, s0
 8018974:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018978:	ec43 2b10 	vmov	d0, r2, r3
 801897c:	4770      	bx	lr
	...

08018980 <__ieee754_expf>:
 8018980:	ee10 2a10 	vmov	r2, s0
 8018984:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8018988:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801898c:	d902      	bls.n	8018994 <__ieee754_expf+0x14>
 801898e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018992:	4770      	bx	lr
 8018994:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8018998:	d106      	bne.n	80189a8 <__ieee754_expf+0x28>
 801899a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8018ad4 <__ieee754_expf+0x154>
 801899e:	2900      	cmp	r1, #0
 80189a0:	bf18      	it	ne
 80189a2:	eeb0 0a67 	vmovne.f32	s0, s15
 80189a6:	4770      	bx	lr
 80189a8:	484b      	ldr	r0, [pc, #300]	; (8018ad8 <__ieee754_expf+0x158>)
 80189aa:	4282      	cmp	r2, r0
 80189ac:	dd02      	ble.n	80189b4 <__ieee754_expf+0x34>
 80189ae:	2000      	movs	r0, #0
 80189b0:	f000 b8d0 	b.w	8018b54 <__math_oflowf>
 80189b4:	2a00      	cmp	r2, #0
 80189b6:	da05      	bge.n	80189c4 <__ieee754_expf+0x44>
 80189b8:	4a48      	ldr	r2, [pc, #288]	; (8018adc <__ieee754_expf+0x15c>)
 80189ba:	4293      	cmp	r3, r2
 80189bc:	d902      	bls.n	80189c4 <__ieee754_expf+0x44>
 80189be:	2000      	movs	r0, #0
 80189c0:	f000 b8c2 	b.w	8018b48 <__math_uflowf>
 80189c4:	4a46      	ldr	r2, [pc, #280]	; (8018ae0 <__ieee754_expf+0x160>)
 80189c6:	4293      	cmp	r3, r2
 80189c8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80189cc:	d952      	bls.n	8018a74 <__ieee754_expf+0xf4>
 80189ce:	4a45      	ldr	r2, [pc, #276]	; (8018ae4 <__ieee754_expf+0x164>)
 80189d0:	4293      	cmp	r3, r2
 80189d2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80189d6:	d834      	bhi.n	8018a42 <__ieee754_expf+0xc2>
 80189d8:	4b43      	ldr	r3, [pc, #268]	; (8018ae8 <__ieee754_expf+0x168>)
 80189da:	4413      	add	r3, r2
 80189dc:	ed93 7a00 	vldr	s14, [r3]
 80189e0:	4b42      	ldr	r3, [pc, #264]	; (8018aec <__ieee754_expf+0x16c>)
 80189e2:	4413      	add	r3, r2
 80189e4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80189e8:	f1c1 0201 	rsb	r2, r1, #1
 80189ec:	edd3 7a00 	vldr	s15, [r3]
 80189f0:	1a52      	subs	r2, r2, r1
 80189f2:	ee37 0a67 	vsub.f32	s0, s14, s15
 80189f6:	ee20 6a00 	vmul.f32	s12, s0, s0
 80189fa:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8018af0 <__ieee754_expf+0x170>
 80189fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8018af4 <__ieee754_expf+0x174>
 8018a02:	eee6 6a05 	vfma.f32	s13, s12, s10
 8018a06:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8018af8 <__ieee754_expf+0x178>
 8018a0a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8018a0e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8018afc <__ieee754_expf+0x17c>
 8018a12:	eee5 6a06 	vfma.f32	s13, s10, s12
 8018a16:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8018b00 <__ieee754_expf+0x180>
 8018a1a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8018a1e:	eef0 6a40 	vmov.f32	s13, s0
 8018a22:	eee5 6a46 	vfms.f32	s13, s10, s12
 8018a26:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8018a2a:	ee20 5a26 	vmul.f32	s10, s0, s13
 8018a2e:	bb92      	cbnz	r2, 8018a96 <__ieee754_expf+0x116>
 8018a30:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8018a34:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8018a38:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018a3c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8018a40:	4770      	bx	lr
 8018a42:	4b30      	ldr	r3, [pc, #192]	; (8018b04 <__ieee754_expf+0x184>)
 8018a44:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8018b08 <__ieee754_expf+0x188>
 8018a48:	eddf 6a30 	vldr	s13, [pc, #192]	; 8018b0c <__ieee754_expf+0x18c>
 8018a4c:	4413      	add	r3, r2
 8018a4e:	edd3 7a00 	vldr	s15, [r3]
 8018a52:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018a56:	eeb0 7a40 	vmov.f32	s14, s0
 8018a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018a5e:	ee17 2a90 	vmov	r2, s15
 8018a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a66:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8018a6a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8018b10 <__ieee754_expf+0x190>
 8018a6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018a72:	e7be      	b.n	80189f2 <__ieee754_expf+0x72>
 8018a74:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8018a78:	d20b      	bcs.n	8018a92 <__ieee754_expf+0x112>
 8018a7a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8018b14 <__ieee754_expf+0x194>
 8018a7e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8018a82:	eef4 6ae5 	vcmpe.f32	s13, s11
 8018a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a8a:	dd02      	ble.n	8018a92 <__ieee754_expf+0x112>
 8018a8c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8018a90:	4770      	bx	lr
 8018a92:	2200      	movs	r2, #0
 8018a94:	e7af      	b.n	80189f6 <__ieee754_expf+0x76>
 8018a96:	ee36 6a66 	vsub.f32	s12, s12, s13
 8018a9a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8018a9e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8018aa2:	bfb8      	it	lt
 8018aa4:	3264      	addlt	r2, #100	; 0x64
 8018aa6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018aaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018aae:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8018ab2:	ee17 3a90 	vmov	r3, s15
 8018ab6:	bfab      	itete	ge
 8018ab8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8018abc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8018ac0:	ee00 3a10 	vmovge	s0, r3
 8018ac4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8018b18 <__ieee754_expf+0x198>
 8018ac8:	bfbc      	itt	lt
 8018aca:	ee00 3a10 	vmovlt	s0, r3
 8018ace:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8018ad2:	4770      	bx	lr
 8018ad4:	00000000 	.word	0x00000000
 8018ad8:	42b17217 	.word	0x42b17217
 8018adc:	42cff1b5 	.word	0x42cff1b5
 8018ae0:	3eb17218 	.word	0x3eb17218
 8018ae4:	3f851591 	.word	0x3f851591
 8018ae8:	0801be48 	.word	0x0801be48
 8018aec:	0801be50 	.word	0x0801be50
 8018af0:	3331bb4c 	.word	0x3331bb4c
 8018af4:	b5ddea0e 	.word	0xb5ddea0e
 8018af8:	388ab355 	.word	0x388ab355
 8018afc:	bb360b61 	.word	0xbb360b61
 8018b00:	3e2aaaab 	.word	0x3e2aaaab
 8018b04:	0801be40 	.word	0x0801be40
 8018b08:	3fb8aa3b 	.word	0x3fb8aa3b
 8018b0c:	3f317180 	.word	0x3f317180
 8018b10:	3717f7d1 	.word	0x3717f7d1
 8018b14:	7149f2ca 	.word	0x7149f2ca
 8018b18:	0d800000 	.word	0x0d800000

08018b1c <with_errnof>:
 8018b1c:	b513      	push	{r0, r1, r4, lr}
 8018b1e:	4604      	mov	r4, r0
 8018b20:	ed8d 0a01 	vstr	s0, [sp, #4]
 8018b24:	f7fc fd14 	bl	8015550 <__errno>
 8018b28:	ed9d 0a01 	vldr	s0, [sp, #4]
 8018b2c:	6004      	str	r4, [r0, #0]
 8018b2e:	b002      	add	sp, #8
 8018b30:	bd10      	pop	{r4, pc}

08018b32 <xflowf>:
 8018b32:	b130      	cbz	r0, 8018b42 <xflowf+0x10>
 8018b34:	eef1 7a40 	vneg.f32	s15, s0
 8018b38:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018b3c:	2022      	movs	r0, #34	; 0x22
 8018b3e:	f7ff bfed 	b.w	8018b1c <with_errnof>
 8018b42:	eef0 7a40 	vmov.f32	s15, s0
 8018b46:	e7f7      	b.n	8018b38 <xflowf+0x6>

08018b48 <__math_uflowf>:
 8018b48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018b50 <__math_uflowf+0x8>
 8018b4c:	f7ff bff1 	b.w	8018b32 <xflowf>
 8018b50:	10000000 	.word	0x10000000

08018b54 <__math_oflowf>:
 8018b54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018b5c <__math_oflowf+0x8>
 8018b58:	f7ff bfeb 	b.w	8018b32 <xflowf>
 8018b5c:	70000000 	.word	0x70000000

08018b60 <__kernel_rem_pio2>:
 8018b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b64:	ed2d 8b02 	vpush	{d8}
 8018b68:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8018b6c:	f112 0f14 	cmn.w	r2, #20
 8018b70:	9306      	str	r3, [sp, #24]
 8018b72:	9104      	str	r1, [sp, #16]
 8018b74:	4bc2      	ldr	r3, [pc, #776]	; (8018e80 <__kernel_rem_pio2+0x320>)
 8018b76:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8018b78:	9009      	str	r0, [sp, #36]	; 0x24
 8018b7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018b7e:	9300      	str	r3, [sp, #0]
 8018b80:	9b06      	ldr	r3, [sp, #24]
 8018b82:	f103 33ff 	add.w	r3, r3, #4294967295
 8018b86:	bfa8      	it	ge
 8018b88:	1ed4      	subge	r4, r2, #3
 8018b8a:	9305      	str	r3, [sp, #20]
 8018b8c:	bfb2      	itee	lt
 8018b8e:	2400      	movlt	r4, #0
 8018b90:	2318      	movge	r3, #24
 8018b92:	fb94 f4f3 	sdivge	r4, r4, r3
 8018b96:	f06f 0317 	mvn.w	r3, #23
 8018b9a:	fb04 3303 	mla	r3, r4, r3, r3
 8018b9e:	eb03 0a02 	add.w	sl, r3, r2
 8018ba2:	9b00      	ldr	r3, [sp, #0]
 8018ba4:	9a05      	ldr	r2, [sp, #20]
 8018ba6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8018e70 <__kernel_rem_pio2+0x310>
 8018baa:	eb03 0802 	add.w	r8, r3, r2
 8018bae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8018bb0:	1aa7      	subs	r7, r4, r2
 8018bb2:	ae20      	add	r6, sp, #128	; 0x80
 8018bb4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8018bb8:	2500      	movs	r5, #0
 8018bba:	4545      	cmp	r5, r8
 8018bbc:	dd13      	ble.n	8018be6 <__kernel_rem_pio2+0x86>
 8018bbe:	9b06      	ldr	r3, [sp, #24]
 8018bc0:	aa20      	add	r2, sp, #128	; 0x80
 8018bc2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8018bc6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8018bca:	f04f 0800 	mov.w	r8, #0
 8018bce:	9b00      	ldr	r3, [sp, #0]
 8018bd0:	4598      	cmp	r8, r3
 8018bd2:	dc31      	bgt.n	8018c38 <__kernel_rem_pio2+0xd8>
 8018bd4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8018e70 <__kernel_rem_pio2+0x310>
 8018bd8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018bdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018be0:	462f      	mov	r7, r5
 8018be2:	2600      	movs	r6, #0
 8018be4:	e01b      	b.n	8018c1e <__kernel_rem_pio2+0xbe>
 8018be6:	42ef      	cmn	r7, r5
 8018be8:	d407      	bmi.n	8018bfa <__kernel_rem_pio2+0x9a>
 8018bea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8018bee:	f7e7 fc99 	bl	8000524 <__aeabi_i2d>
 8018bf2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8018bf6:	3501      	adds	r5, #1
 8018bf8:	e7df      	b.n	8018bba <__kernel_rem_pio2+0x5a>
 8018bfa:	ec51 0b18 	vmov	r0, r1, d8
 8018bfe:	e7f8      	b.n	8018bf2 <__kernel_rem_pio2+0x92>
 8018c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018c04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8018c08:	f7e7 fcf6 	bl	80005f8 <__aeabi_dmul>
 8018c0c:	4602      	mov	r2, r0
 8018c0e:	460b      	mov	r3, r1
 8018c10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018c14:	f7e7 fb3a 	bl	800028c <__adddf3>
 8018c18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018c1c:	3601      	adds	r6, #1
 8018c1e:	9b05      	ldr	r3, [sp, #20]
 8018c20:	429e      	cmp	r6, r3
 8018c22:	f1a7 0708 	sub.w	r7, r7, #8
 8018c26:	ddeb      	ble.n	8018c00 <__kernel_rem_pio2+0xa0>
 8018c28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018c2c:	f108 0801 	add.w	r8, r8, #1
 8018c30:	ecab 7b02 	vstmia	fp!, {d7}
 8018c34:	3508      	adds	r5, #8
 8018c36:	e7ca      	b.n	8018bce <__kernel_rem_pio2+0x6e>
 8018c38:	9b00      	ldr	r3, [sp, #0]
 8018c3a:	aa0c      	add	r2, sp, #48	; 0x30
 8018c3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c42:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8018c44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8018c48:	9c00      	ldr	r4, [sp, #0]
 8018c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8018c4c:	00e3      	lsls	r3, r4, #3
 8018c4e:	9308      	str	r3, [sp, #32]
 8018c50:	ab98      	add	r3, sp, #608	; 0x260
 8018c52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018c56:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8018c5a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8018c5e:	ab70      	add	r3, sp, #448	; 0x1c0
 8018c60:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8018c64:	46c3      	mov	fp, r8
 8018c66:	46a1      	mov	r9, r4
 8018c68:	f1b9 0f00 	cmp.w	r9, #0
 8018c6c:	f1a5 0508 	sub.w	r5, r5, #8
 8018c70:	dc77      	bgt.n	8018d62 <__kernel_rem_pio2+0x202>
 8018c72:	ec47 6b10 	vmov	d0, r6, r7
 8018c76:	4650      	mov	r0, sl
 8018c78:	f000 fd22 	bl	80196c0 <scalbn>
 8018c7c:	ec57 6b10 	vmov	r6, r7, d0
 8018c80:	2200      	movs	r2, #0
 8018c82:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8018c86:	ee10 0a10 	vmov	r0, s0
 8018c8a:	4639      	mov	r1, r7
 8018c8c:	f7e7 fcb4 	bl	80005f8 <__aeabi_dmul>
 8018c90:	ec41 0b10 	vmov	d0, r0, r1
 8018c94:	f7ff fa28 	bl	80180e8 <floor>
 8018c98:	4b7a      	ldr	r3, [pc, #488]	; (8018e84 <__kernel_rem_pio2+0x324>)
 8018c9a:	ec51 0b10 	vmov	r0, r1, d0
 8018c9e:	2200      	movs	r2, #0
 8018ca0:	f7e7 fcaa 	bl	80005f8 <__aeabi_dmul>
 8018ca4:	4602      	mov	r2, r0
 8018ca6:	460b      	mov	r3, r1
 8018ca8:	4630      	mov	r0, r6
 8018caa:	4639      	mov	r1, r7
 8018cac:	f7e7 faec 	bl	8000288 <__aeabi_dsub>
 8018cb0:	460f      	mov	r7, r1
 8018cb2:	4606      	mov	r6, r0
 8018cb4:	f7e7 ff50 	bl	8000b58 <__aeabi_d2iz>
 8018cb8:	9002      	str	r0, [sp, #8]
 8018cba:	f7e7 fc33 	bl	8000524 <__aeabi_i2d>
 8018cbe:	4602      	mov	r2, r0
 8018cc0:	460b      	mov	r3, r1
 8018cc2:	4630      	mov	r0, r6
 8018cc4:	4639      	mov	r1, r7
 8018cc6:	f7e7 fadf 	bl	8000288 <__aeabi_dsub>
 8018cca:	f1ba 0f00 	cmp.w	sl, #0
 8018cce:	4606      	mov	r6, r0
 8018cd0:	460f      	mov	r7, r1
 8018cd2:	dd6d      	ble.n	8018db0 <__kernel_rem_pio2+0x250>
 8018cd4:	1e61      	subs	r1, r4, #1
 8018cd6:	ab0c      	add	r3, sp, #48	; 0x30
 8018cd8:	9d02      	ldr	r5, [sp, #8]
 8018cda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018cde:	f1ca 0018 	rsb	r0, sl, #24
 8018ce2:	fa43 f200 	asr.w	r2, r3, r0
 8018ce6:	4415      	add	r5, r2
 8018ce8:	4082      	lsls	r2, r0
 8018cea:	1a9b      	subs	r3, r3, r2
 8018cec:	aa0c      	add	r2, sp, #48	; 0x30
 8018cee:	9502      	str	r5, [sp, #8]
 8018cf0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8018cf4:	f1ca 0217 	rsb	r2, sl, #23
 8018cf8:	fa43 fb02 	asr.w	fp, r3, r2
 8018cfc:	f1bb 0f00 	cmp.w	fp, #0
 8018d00:	dd65      	ble.n	8018dce <__kernel_rem_pio2+0x26e>
 8018d02:	9b02      	ldr	r3, [sp, #8]
 8018d04:	2200      	movs	r2, #0
 8018d06:	3301      	adds	r3, #1
 8018d08:	9302      	str	r3, [sp, #8]
 8018d0a:	4615      	mov	r5, r2
 8018d0c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8018d10:	4294      	cmp	r4, r2
 8018d12:	f300 809f 	bgt.w	8018e54 <__kernel_rem_pio2+0x2f4>
 8018d16:	f1ba 0f00 	cmp.w	sl, #0
 8018d1a:	dd07      	ble.n	8018d2c <__kernel_rem_pio2+0x1cc>
 8018d1c:	f1ba 0f01 	cmp.w	sl, #1
 8018d20:	f000 80c1 	beq.w	8018ea6 <__kernel_rem_pio2+0x346>
 8018d24:	f1ba 0f02 	cmp.w	sl, #2
 8018d28:	f000 80c7 	beq.w	8018eba <__kernel_rem_pio2+0x35a>
 8018d2c:	f1bb 0f02 	cmp.w	fp, #2
 8018d30:	d14d      	bne.n	8018dce <__kernel_rem_pio2+0x26e>
 8018d32:	4632      	mov	r2, r6
 8018d34:	463b      	mov	r3, r7
 8018d36:	4954      	ldr	r1, [pc, #336]	; (8018e88 <__kernel_rem_pio2+0x328>)
 8018d38:	2000      	movs	r0, #0
 8018d3a:	f7e7 faa5 	bl	8000288 <__aeabi_dsub>
 8018d3e:	4606      	mov	r6, r0
 8018d40:	460f      	mov	r7, r1
 8018d42:	2d00      	cmp	r5, #0
 8018d44:	d043      	beq.n	8018dce <__kernel_rem_pio2+0x26e>
 8018d46:	4650      	mov	r0, sl
 8018d48:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8018e78 <__kernel_rem_pio2+0x318>
 8018d4c:	f000 fcb8 	bl	80196c0 <scalbn>
 8018d50:	4630      	mov	r0, r6
 8018d52:	4639      	mov	r1, r7
 8018d54:	ec53 2b10 	vmov	r2, r3, d0
 8018d58:	f7e7 fa96 	bl	8000288 <__aeabi_dsub>
 8018d5c:	4606      	mov	r6, r0
 8018d5e:	460f      	mov	r7, r1
 8018d60:	e035      	b.n	8018dce <__kernel_rem_pio2+0x26e>
 8018d62:	4b4a      	ldr	r3, [pc, #296]	; (8018e8c <__kernel_rem_pio2+0x32c>)
 8018d64:	2200      	movs	r2, #0
 8018d66:	4630      	mov	r0, r6
 8018d68:	4639      	mov	r1, r7
 8018d6a:	f7e7 fc45 	bl	80005f8 <__aeabi_dmul>
 8018d6e:	f7e7 fef3 	bl	8000b58 <__aeabi_d2iz>
 8018d72:	f7e7 fbd7 	bl	8000524 <__aeabi_i2d>
 8018d76:	4602      	mov	r2, r0
 8018d78:	460b      	mov	r3, r1
 8018d7a:	ec43 2b18 	vmov	d8, r2, r3
 8018d7e:	4b44      	ldr	r3, [pc, #272]	; (8018e90 <__kernel_rem_pio2+0x330>)
 8018d80:	2200      	movs	r2, #0
 8018d82:	f7e7 fc39 	bl	80005f8 <__aeabi_dmul>
 8018d86:	4602      	mov	r2, r0
 8018d88:	460b      	mov	r3, r1
 8018d8a:	4630      	mov	r0, r6
 8018d8c:	4639      	mov	r1, r7
 8018d8e:	f7e7 fa7b 	bl	8000288 <__aeabi_dsub>
 8018d92:	f7e7 fee1 	bl	8000b58 <__aeabi_d2iz>
 8018d96:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018d9a:	f84b 0b04 	str.w	r0, [fp], #4
 8018d9e:	ec51 0b18 	vmov	r0, r1, d8
 8018da2:	f7e7 fa73 	bl	800028c <__adddf3>
 8018da6:	f109 39ff 	add.w	r9, r9, #4294967295
 8018daa:	4606      	mov	r6, r0
 8018dac:	460f      	mov	r7, r1
 8018dae:	e75b      	b.n	8018c68 <__kernel_rem_pio2+0x108>
 8018db0:	d106      	bne.n	8018dc0 <__kernel_rem_pio2+0x260>
 8018db2:	1e63      	subs	r3, r4, #1
 8018db4:	aa0c      	add	r2, sp, #48	; 0x30
 8018db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018dba:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8018dbe:	e79d      	b.n	8018cfc <__kernel_rem_pio2+0x19c>
 8018dc0:	4b34      	ldr	r3, [pc, #208]	; (8018e94 <__kernel_rem_pio2+0x334>)
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	f7e7 fe9e 	bl	8000b04 <__aeabi_dcmpge>
 8018dc8:	2800      	cmp	r0, #0
 8018dca:	d140      	bne.n	8018e4e <__kernel_rem_pio2+0x2ee>
 8018dcc:	4683      	mov	fp, r0
 8018dce:	2200      	movs	r2, #0
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	4630      	mov	r0, r6
 8018dd4:	4639      	mov	r1, r7
 8018dd6:	f7e7 fe77 	bl	8000ac8 <__aeabi_dcmpeq>
 8018dda:	2800      	cmp	r0, #0
 8018ddc:	f000 80c1 	beq.w	8018f62 <__kernel_rem_pio2+0x402>
 8018de0:	1e65      	subs	r5, r4, #1
 8018de2:	462b      	mov	r3, r5
 8018de4:	2200      	movs	r2, #0
 8018de6:	9900      	ldr	r1, [sp, #0]
 8018de8:	428b      	cmp	r3, r1
 8018dea:	da6d      	bge.n	8018ec8 <__kernel_rem_pio2+0x368>
 8018dec:	2a00      	cmp	r2, #0
 8018dee:	f000 808a 	beq.w	8018f06 <__kernel_rem_pio2+0x3a6>
 8018df2:	ab0c      	add	r3, sp, #48	; 0x30
 8018df4:	f1aa 0a18 	sub.w	sl, sl, #24
 8018df8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	f000 80ae 	beq.w	8018f5e <__kernel_rem_pio2+0x3fe>
 8018e02:	4650      	mov	r0, sl
 8018e04:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8018e78 <__kernel_rem_pio2+0x318>
 8018e08:	f000 fc5a 	bl	80196c0 <scalbn>
 8018e0c:	1c6b      	adds	r3, r5, #1
 8018e0e:	00da      	lsls	r2, r3, #3
 8018e10:	9205      	str	r2, [sp, #20]
 8018e12:	ec57 6b10 	vmov	r6, r7, d0
 8018e16:	aa70      	add	r2, sp, #448	; 0x1c0
 8018e18:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8018e8c <__kernel_rem_pio2+0x32c>
 8018e1c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8018e20:	462c      	mov	r4, r5
 8018e22:	f04f 0800 	mov.w	r8, #0
 8018e26:	2c00      	cmp	r4, #0
 8018e28:	f280 80d4 	bge.w	8018fd4 <__kernel_rem_pio2+0x474>
 8018e2c:	462c      	mov	r4, r5
 8018e2e:	2c00      	cmp	r4, #0
 8018e30:	f2c0 8102 	blt.w	8019038 <__kernel_rem_pio2+0x4d8>
 8018e34:	4b18      	ldr	r3, [pc, #96]	; (8018e98 <__kernel_rem_pio2+0x338>)
 8018e36:	461e      	mov	r6, r3
 8018e38:	ab70      	add	r3, sp, #448	; 0x1c0
 8018e3a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8018e3e:	1b2b      	subs	r3, r5, r4
 8018e40:	f04f 0900 	mov.w	r9, #0
 8018e44:	f04f 0a00 	mov.w	sl, #0
 8018e48:	2700      	movs	r7, #0
 8018e4a:	9306      	str	r3, [sp, #24]
 8018e4c:	e0e6      	b.n	801901c <__kernel_rem_pio2+0x4bc>
 8018e4e:	f04f 0b02 	mov.w	fp, #2
 8018e52:	e756      	b.n	8018d02 <__kernel_rem_pio2+0x1a2>
 8018e54:	f8d8 3000 	ldr.w	r3, [r8]
 8018e58:	bb05      	cbnz	r5, 8018e9c <__kernel_rem_pio2+0x33c>
 8018e5a:	b123      	cbz	r3, 8018e66 <__kernel_rem_pio2+0x306>
 8018e5c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8018e60:	f8c8 3000 	str.w	r3, [r8]
 8018e64:	2301      	movs	r3, #1
 8018e66:	3201      	adds	r2, #1
 8018e68:	f108 0804 	add.w	r8, r8, #4
 8018e6c:	461d      	mov	r5, r3
 8018e6e:	e74f      	b.n	8018d10 <__kernel_rem_pio2+0x1b0>
	...
 8018e7c:	3ff00000 	.word	0x3ff00000
 8018e80:	0801be98 	.word	0x0801be98
 8018e84:	40200000 	.word	0x40200000
 8018e88:	3ff00000 	.word	0x3ff00000
 8018e8c:	3e700000 	.word	0x3e700000
 8018e90:	41700000 	.word	0x41700000
 8018e94:	3fe00000 	.word	0x3fe00000
 8018e98:	0801be58 	.word	0x0801be58
 8018e9c:	1acb      	subs	r3, r1, r3
 8018e9e:	f8c8 3000 	str.w	r3, [r8]
 8018ea2:	462b      	mov	r3, r5
 8018ea4:	e7df      	b.n	8018e66 <__kernel_rem_pio2+0x306>
 8018ea6:	1e62      	subs	r2, r4, #1
 8018ea8:	ab0c      	add	r3, sp, #48	; 0x30
 8018eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018eae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018eb2:	a90c      	add	r1, sp, #48	; 0x30
 8018eb4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018eb8:	e738      	b.n	8018d2c <__kernel_rem_pio2+0x1cc>
 8018eba:	1e62      	subs	r2, r4, #1
 8018ebc:	ab0c      	add	r3, sp, #48	; 0x30
 8018ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018ec2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8018ec6:	e7f4      	b.n	8018eb2 <__kernel_rem_pio2+0x352>
 8018ec8:	a90c      	add	r1, sp, #48	; 0x30
 8018eca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8018ece:	3b01      	subs	r3, #1
 8018ed0:	430a      	orrs	r2, r1
 8018ed2:	e788      	b.n	8018de6 <__kernel_rem_pio2+0x286>
 8018ed4:	3301      	adds	r3, #1
 8018ed6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8018eda:	2900      	cmp	r1, #0
 8018edc:	d0fa      	beq.n	8018ed4 <__kernel_rem_pio2+0x374>
 8018ede:	9a08      	ldr	r2, [sp, #32]
 8018ee0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8018ee4:	446a      	add	r2, sp
 8018ee6:	3a98      	subs	r2, #152	; 0x98
 8018ee8:	9208      	str	r2, [sp, #32]
 8018eea:	9a06      	ldr	r2, [sp, #24]
 8018eec:	a920      	add	r1, sp, #128	; 0x80
 8018eee:	18a2      	adds	r2, r4, r2
 8018ef0:	18e3      	adds	r3, r4, r3
 8018ef2:	f104 0801 	add.w	r8, r4, #1
 8018ef6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8018efa:	9302      	str	r3, [sp, #8]
 8018efc:	9b02      	ldr	r3, [sp, #8]
 8018efe:	4543      	cmp	r3, r8
 8018f00:	da04      	bge.n	8018f0c <__kernel_rem_pio2+0x3ac>
 8018f02:	461c      	mov	r4, r3
 8018f04:	e6a2      	b.n	8018c4c <__kernel_rem_pio2+0xec>
 8018f06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018f08:	2301      	movs	r3, #1
 8018f0a:	e7e4      	b.n	8018ed6 <__kernel_rem_pio2+0x376>
 8018f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018f0e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018f12:	f7e7 fb07 	bl	8000524 <__aeabi_i2d>
 8018f16:	e8e5 0102 	strd	r0, r1, [r5], #8
 8018f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f1c:	46ab      	mov	fp, r5
 8018f1e:	461c      	mov	r4, r3
 8018f20:	f04f 0900 	mov.w	r9, #0
 8018f24:	2600      	movs	r6, #0
 8018f26:	2700      	movs	r7, #0
 8018f28:	9b05      	ldr	r3, [sp, #20]
 8018f2a:	4599      	cmp	r9, r3
 8018f2c:	dd06      	ble.n	8018f3c <__kernel_rem_pio2+0x3dc>
 8018f2e:	9b08      	ldr	r3, [sp, #32]
 8018f30:	e8e3 6702 	strd	r6, r7, [r3], #8
 8018f34:	f108 0801 	add.w	r8, r8, #1
 8018f38:	9308      	str	r3, [sp, #32]
 8018f3a:	e7df      	b.n	8018efc <__kernel_rem_pio2+0x39c>
 8018f3c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8018f40:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8018f44:	f7e7 fb58 	bl	80005f8 <__aeabi_dmul>
 8018f48:	4602      	mov	r2, r0
 8018f4a:	460b      	mov	r3, r1
 8018f4c:	4630      	mov	r0, r6
 8018f4e:	4639      	mov	r1, r7
 8018f50:	f7e7 f99c 	bl	800028c <__adddf3>
 8018f54:	f109 0901 	add.w	r9, r9, #1
 8018f58:	4606      	mov	r6, r0
 8018f5a:	460f      	mov	r7, r1
 8018f5c:	e7e4      	b.n	8018f28 <__kernel_rem_pio2+0x3c8>
 8018f5e:	3d01      	subs	r5, #1
 8018f60:	e747      	b.n	8018df2 <__kernel_rem_pio2+0x292>
 8018f62:	ec47 6b10 	vmov	d0, r6, r7
 8018f66:	f1ca 0000 	rsb	r0, sl, #0
 8018f6a:	f000 fba9 	bl	80196c0 <scalbn>
 8018f6e:	ec57 6b10 	vmov	r6, r7, d0
 8018f72:	4ba0      	ldr	r3, [pc, #640]	; (80191f4 <__kernel_rem_pio2+0x694>)
 8018f74:	ee10 0a10 	vmov	r0, s0
 8018f78:	2200      	movs	r2, #0
 8018f7a:	4639      	mov	r1, r7
 8018f7c:	f7e7 fdc2 	bl	8000b04 <__aeabi_dcmpge>
 8018f80:	b1f8      	cbz	r0, 8018fc2 <__kernel_rem_pio2+0x462>
 8018f82:	4b9d      	ldr	r3, [pc, #628]	; (80191f8 <__kernel_rem_pio2+0x698>)
 8018f84:	2200      	movs	r2, #0
 8018f86:	4630      	mov	r0, r6
 8018f88:	4639      	mov	r1, r7
 8018f8a:	f7e7 fb35 	bl	80005f8 <__aeabi_dmul>
 8018f8e:	f7e7 fde3 	bl	8000b58 <__aeabi_d2iz>
 8018f92:	4680      	mov	r8, r0
 8018f94:	f7e7 fac6 	bl	8000524 <__aeabi_i2d>
 8018f98:	4b96      	ldr	r3, [pc, #600]	; (80191f4 <__kernel_rem_pio2+0x694>)
 8018f9a:	2200      	movs	r2, #0
 8018f9c:	f7e7 fb2c 	bl	80005f8 <__aeabi_dmul>
 8018fa0:	460b      	mov	r3, r1
 8018fa2:	4602      	mov	r2, r0
 8018fa4:	4639      	mov	r1, r7
 8018fa6:	4630      	mov	r0, r6
 8018fa8:	f7e7 f96e 	bl	8000288 <__aeabi_dsub>
 8018fac:	f7e7 fdd4 	bl	8000b58 <__aeabi_d2iz>
 8018fb0:	1c65      	adds	r5, r4, #1
 8018fb2:	ab0c      	add	r3, sp, #48	; 0x30
 8018fb4:	f10a 0a18 	add.w	sl, sl, #24
 8018fb8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018fbc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8018fc0:	e71f      	b.n	8018e02 <__kernel_rem_pio2+0x2a2>
 8018fc2:	4630      	mov	r0, r6
 8018fc4:	4639      	mov	r1, r7
 8018fc6:	f7e7 fdc7 	bl	8000b58 <__aeabi_d2iz>
 8018fca:	ab0c      	add	r3, sp, #48	; 0x30
 8018fcc:	4625      	mov	r5, r4
 8018fce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018fd2:	e716      	b.n	8018e02 <__kernel_rem_pio2+0x2a2>
 8018fd4:	ab0c      	add	r3, sp, #48	; 0x30
 8018fd6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018fda:	f7e7 faa3 	bl	8000524 <__aeabi_i2d>
 8018fde:	4632      	mov	r2, r6
 8018fe0:	463b      	mov	r3, r7
 8018fe2:	f7e7 fb09 	bl	80005f8 <__aeabi_dmul>
 8018fe6:	4642      	mov	r2, r8
 8018fe8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8018fec:	464b      	mov	r3, r9
 8018fee:	4630      	mov	r0, r6
 8018ff0:	4639      	mov	r1, r7
 8018ff2:	f7e7 fb01 	bl	80005f8 <__aeabi_dmul>
 8018ff6:	3c01      	subs	r4, #1
 8018ff8:	4606      	mov	r6, r0
 8018ffa:	460f      	mov	r7, r1
 8018ffc:	e713      	b.n	8018e26 <__kernel_rem_pio2+0x2c6>
 8018ffe:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8019002:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8019006:	f7e7 faf7 	bl	80005f8 <__aeabi_dmul>
 801900a:	4602      	mov	r2, r0
 801900c:	460b      	mov	r3, r1
 801900e:	4648      	mov	r0, r9
 8019010:	4651      	mov	r1, sl
 8019012:	f7e7 f93b 	bl	800028c <__adddf3>
 8019016:	3701      	adds	r7, #1
 8019018:	4681      	mov	r9, r0
 801901a:	468a      	mov	sl, r1
 801901c:	9b00      	ldr	r3, [sp, #0]
 801901e:	429f      	cmp	r7, r3
 8019020:	dc02      	bgt.n	8019028 <__kernel_rem_pio2+0x4c8>
 8019022:	9b06      	ldr	r3, [sp, #24]
 8019024:	429f      	cmp	r7, r3
 8019026:	ddea      	ble.n	8018ffe <__kernel_rem_pio2+0x49e>
 8019028:	9a06      	ldr	r2, [sp, #24]
 801902a:	ab48      	add	r3, sp, #288	; 0x120
 801902c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8019030:	e9c6 9a00 	strd	r9, sl, [r6]
 8019034:	3c01      	subs	r4, #1
 8019036:	e6fa      	b.n	8018e2e <__kernel_rem_pio2+0x2ce>
 8019038:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801903a:	2b02      	cmp	r3, #2
 801903c:	dc0b      	bgt.n	8019056 <__kernel_rem_pio2+0x4f6>
 801903e:	2b00      	cmp	r3, #0
 8019040:	dc39      	bgt.n	80190b6 <__kernel_rem_pio2+0x556>
 8019042:	d05d      	beq.n	8019100 <__kernel_rem_pio2+0x5a0>
 8019044:	9b02      	ldr	r3, [sp, #8]
 8019046:	f003 0007 	and.w	r0, r3, #7
 801904a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801904e:	ecbd 8b02 	vpop	{d8}
 8019052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019056:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8019058:	2b03      	cmp	r3, #3
 801905a:	d1f3      	bne.n	8019044 <__kernel_rem_pio2+0x4e4>
 801905c:	9b05      	ldr	r3, [sp, #20]
 801905e:	9500      	str	r5, [sp, #0]
 8019060:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8019064:	eb0d 0403 	add.w	r4, sp, r3
 8019068:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801906c:	46a2      	mov	sl, r4
 801906e:	9b00      	ldr	r3, [sp, #0]
 8019070:	2b00      	cmp	r3, #0
 8019072:	f1aa 0a08 	sub.w	sl, sl, #8
 8019076:	dc69      	bgt.n	801914c <__kernel_rem_pio2+0x5ec>
 8019078:	46aa      	mov	sl, r5
 801907a:	f1ba 0f01 	cmp.w	sl, #1
 801907e:	f1a4 0408 	sub.w	r4, r4, #8
 8019082:	f300 8083 	bgt.w	801918c <__kernel_rem_pio2+0x62c>
 8019086:	9c05      	ldr	r4, [sp, #20]
 8019088:	ab48      	add	r3, sp, #288	; 0x120
 801908a:	441c      	add	r4, r3
 801908c:	2000      	movs	r0, #0
 801908e:	2100      	movs	r1, #0
 8019090:	2d01      	cmp	r5, #1
 8019092:	f300 809a 	bgt.w	80191ca <__kernel_rem_pio2+0x66a>
 8019096:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801909a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801909e:	f1bb 0f00 	cmp.w	fp, #0
 80190a2:	f040 8098 	bne.w	80191d6 <__kernel_rem_pio2+0x676>
 80190a6:	9b04      	ldr	r3, [sp, #16]
 80190a8:	e9c3 7800 	strd	r7, r8, [r3]
 80190ac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80190b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80190b4:	e7c6      	b.n	8019044 <__kernel_rem_pio2+0x4e4>
 80190b6:	9e05      	ldr	r6, [sp, #20]
 80190b8:	ab48      	add	r3, sp, #288	; 0x120
 80190ba:	441e      	add	r6, r3
 80190bc:	462c      	mov	r4, r5
 80190be:	2000      	movs	r0, #0
 80190c0:	2100      	movs	r1, #0
 80190c2:	2c00      	cmp	r4, #0
 80190c4:	da33      	bge.n	801912e <__kernel_rem_pio2+0x5ce>
 80190c6:	f1bb 0f00 	cmp.w	fp, #0
 80190ca:	d036      	beq.n	801913a <__kernel_rem_pio2+0x5da>
 80190cc:	4602      	mov	r2, r0
 80190ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80190d2:	9c04      	ldr	r4, [sp, #16]
 80190d4:	e9c4 2300 	strd	r2, r3, [r4]
 80190d8:	4602      	mov	r2, r0
 80190da:	460b      	mov	r3, r1
 80190dc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80190e0:	f7e7 f8d2 	bl	8000288 <__aeabi_dsub>
 80190e4:	ae4a      	add	r6, sp, #296	; 0x128
 80190e6:	2401      	movs	r4, #1
 80190e8:	42a5      	cmp	r5, r4
 80190ea:	da29      	bge.n	8019140 <__kernel_rem_pio2+0x5e0>
 80190ec:	f1bb 0f00 	cmp.w	fp, #0
 80190f0:	d002      	beq.n	80190f8 <__kernel_rem_pio2+0x598>
 80190f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80190f6:	4619      	mov	r1, r3
 80190f8:	9b04      	ldr	r3, [sp, #16]
 80190fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80190fe:	e7a1      	b.n	8019044 <__kernel_rem_pio2+0x4e4>
 8019100:	9c05      	ldr	r4, [sp, #20]
 8019102:	ab48      	add	r3, sp, #288	; 0x120
 8019104:	441c      	add	r4, r3
 8019106:	2000      	movs	r0, #0
 8019108:	2100      	movs	r1, #0
 801910a:	2d00      	cmp	r5, #0
 801910c:	da09      	bge.n	8019122 <__kernel_rem_pio2+0x5c2>
 801910e:	f1bb 0f00 	cmp.w	fp, #0
 8019112:	d002      	beq.n	801911a <__kernel_rem_pio2+0x5ba>
 8019114:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019118:	4619      	mov	r1, r3
 801911a:	9b04      	ldr	r3, [sp, #16]
 801911c:	e9c3 0100 	strd	r0, r1, [r3]
 8019120:	e790      	b.n	8019044 <__kernel_rem_pio2+0x4e4>
 8019122:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8019126:	f7e7 f8b1 	bl	800028c <__adddf3>
 801912a:	3d01      	subs	r5, #1
 801912c:	e7ed      	b.n	801910a <__kernel_rem_pio2+0x5aa>
 801912e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8019132:	f7e7 f8ab 	bl	800028c <__adddf3>
 8019136:	3c01      	subs	r4, #1
 8019138:	e7c3      	b.n	80190c2 <__kernel_rem_pio2+0x562>
 801913a:	4602      	mov	r2, r0
 801913c:	460b      	mov	r3, r1
 801913e:	e7c8      	b.n	80190d2 <__kernel_rem_pio2+0x572>
 8019140:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8019144:	f7e7 f8a2 	bl	800028c <__adddf3>
 8019148:	3401      	adds	r4, #1
 801914a:	e7cd      	b.n	80190e8 <__kernel_rem_pio2+0x588>
 801914c:	e9da 8900 	ldrd	r8, r9, [sl]
 8019150:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8019154:	9b00      	ldr	r3, [sp, #0]
 8019156:	3b01      	subs	r3, #1
 8019158:	9300      	str	r3, [sp, #0]
 801915a:	4632      	mov	r2, r6
 801915c:	463b      	mov	r3, r7
 801915e:	4640      	mov	r0, r8
 8019160:	4649      	mov	r1, r9
 8019162:	f7e7 f893 	bl	800028c <__adddf3>
 8019166:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801916a:	4602      	mov	r2, r0
 801916c:	460b      	mov	r3, r1
 801916e:	4640      	mov	r0, r8
 8019170:	4649      	mov	r1, r9
 8019172:	f7e7 f889 	bl	8000288 <__aeabi_dsub>
 8019176:	4632      	mov	r2, r6
 8019178:	463b      	mov	r3, r7
 801917a:	f7e7 f887 	bl	800028c <__adddf3>
 801917e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8019182:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019186:	ed8a 7b00 	vstr	d7, [sl]
 801918a:	e770      	b.n	801906e <__kernel_rem_pio2+0x50e>
 801918c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8019190:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8019194:	4640      	mov	r0, r8
 8019196:	4632      	mov	r2, r6
 8019198:	463b      	mov	r3, r7
 801919a:	4649      	mov	r1, r9
 801919c:	f7e7 f876 	bl	800028c <__adddf3>
 80191a0:	e9cd 0100 	strd	r0, r1, [sp]
 80191a4:	4602      	mov	r2, r0
 80191a6:	460b      	mov	r3, r1
 80191a8:	4640      	mov	r0, r8
 80191aa:	4649      	mov	r1, r9
 80191ac:	f7e7 f86c 	bl	8000288 <__aeabi_dsub>
 80191b0:	4632      	mov	r2, r6
 80191b2:	463b      	mov	r3, r7
 80191b4:	f7e7 f86a 	bl	800028c <__adddf3>
 80191b8:	ed9d 7b00 	vldr	d7, [sp]
 80191bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80191c0:	ed84 7b00 	vstr	d7, [r4]
 80191c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80191c8:	e757      	b.n	801907a <__kernel_rem_pio2+0x51a>
 80191ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80191ce:	f7e7 f85d 	bl	800028c <__adddf3>
 80191d2:	3d01      	subs	r5, #1
 80191d4:	e75c      	b.n	8019090 <__kernel_rem_pio2+0x530>
 80191d6:	9b04      	ldr	r3, [sp, #16]
 80191d8:	9a04      	ldr	r2, [sp, #16]
 80191da:	601f      	str	r7, [r3, #0]
 80191dc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80191e0:	605c      	str	r4, [r3, #4]
 80191e2:	609d      	str	r5, [r3, #8]
 80191e4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80191e8:	60d3      	str	r3, [r2, #12]
 80191ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80191ee:	6110      	str	r0, [r2, #16]
 80191f0:	6153      	str	r3, [r2, #20]
 80191f2:	e727      	b.n	8019044 <__kernel_rem_pio2+0x4e4>
 80191f4:	41700000 	.word	0x41700000
 80191f8:	3e700000 	.word	0x3e700000
 80191fc:	00000000 	.word	0x00000000

08019200 <__ieee754_acos>:
 8019200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019204:	ec55 4b10 	vmov	r4, r5, d0
 8019208:	49b7      	ldr	r1, [pc, #732]	; (80194e8 <__ieee754_acos+0x2e8>)
 801920a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801920e:	428b      	cmp	r3, r1
 8019210:	dd1b      	ble.n	801924a <__ieee754_acos+0x4a>
 8019212:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8019216:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801921a:	4323      	orrs	r3, r4
 801921c:	d106      	bne.n	801922c <__ieee754_acos+0x2c>
 801921e:	2d00      	cmp	r5, #0
 8019220:	f300 8211 	bgt.w	8019646 <__ieee754_acos+0x446>
 8019224:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8019480 <__ieee754_acos+0x280>
 8019228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801922c:	ee10 2a10 	vmov	r2, s0
 8019230:	462b      	mov	r3, r5
 8019232:	ee10 0a10 	vmov	r0, s0
 8019236:	4629      	mov	r1, r5
 8019238:	f7e7 f826 	bl	8000288 <__aeabi_dsub>
 801923c:	4602      	mov	r2, r0
 801923e:	460b      	mov	r3, r1
 8019240:	f7e7 fb04 	bl	800084c <__aeabi_ddiv>
 8019244:	ec41 0b10 	vmov	d0, r0, r1
 8019248:	e7ee      	b.n	8019228 <__ieee754_acos+0x28>
 801924a:	49a8      	ldr	r1, [pc, #672]	; (80194ec <__ieee754_acos+0x2ec>)
 801924c:	428b      	cmp	r3, r1
 801924e:	f300 8087 	bgt.w	8019360 <__ieee754_acos+0x160>
 8019252:	4aa7      	ldr	r2, [pc, #668]	; (80194f0 <__ieee754_acos+0x2f0>)
 8019254:	4293      	cmp	r3, r2
 8019256:	f340 81f9 	ble.w	801964c <__ieee754_acos+0x44c>
 801925a:	ee10 2a10 	vmov	r2, s0
 801925e:	ee10 0a10 	vmov	r0, s0
 8019262:	462b      	mov	r3, r5
 8019264:	4629      	mov	r1, r5
 8019266:	f7e7 f9c7 	bl	80005f8 <__aeabi_dmul>
 801926a:	a387      	add	r3, pc, #540	; (adr r3, 8019488 <__ieee754_acos+0x288>)
 801926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019270:	4606      	mov	r6, r0
 8019272:	460f      	mov	r7, r1
 8019274:	f7e7 f9c0 	bl	80005f8 <__aeabi_dmul>
 8019278:	a385      	add	r3, pc, #532	; (adr r3, 8019490 <__ieee754_acos+0x290>)
 801927a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801927e:	f7e7 f805 	bl	800028c <__adddf3>
 8019282:	4632      	mov	r2, r6
 8019284:	463b      	mov	r3, r7
 8019286:	f7e7 f9b7 	bl	80005f8 <__aeabi_dmul>
 801928a:	a383      	add	r3, pc, #524	; (adr r3, 8019498 <__ieee754_acos+0x298>)
 801928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019290:	f7e6 fffa 	bl	8000288 <__aeabi_dsub>
 8019294:	4632      	mov	r2, r6
 8019296:	463b      	mov	r3, r7
 8019298:	f7e7 f9ae 	bl	80005f8 <__aeabi_dmul>
 801929c:	a380      	add	r3, pc, #512	; (adr r3, 80194a0 <__ieee754_acos+0x2a0>)
 801929e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192a2:	f7e6 fff3 	bl	800028c <__adddf3>
 80192a6:	4632      	mov	r2, r6
 80192a8:	463b      	mov	r3, r7
 80192aa:	f7e7 f9a5 	bl	80005f8 <__aeabi_dmul>
 80192ae:	a37e      	add	r3, pc, #504	; (adr r3, 80194a8 <__ieee754_acos+0x2a8>)
 80192b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192b4:	f7e6 ffe8 	bl	8000288 <__aeabi_dsub>
 80192b8:	4632      	mov	r2, r6
 80192ba:	463b      	mov	r3, r7
 80192bc:	f7e7 f99c 	bl	80005f8 <__aeabi_dmul>
 80192c0:	a37b      	add	r3, pc, #492	; (adr r3, 80194b0 <__ieee754_acos+0x2b0>)
 80192c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192c6:	f7e6 ffe1 	bl	800028c <__adddf3>
 80192ca:	4632      	mov	r2, r6
 80192cc:	463b      	mov	r3, r7
 80192ce:	f7e7 f993 	bl	80005f8 <__aeabi_dmul>
 80192d2:	a379      	add	r3, pc, #484	; (adr r3, 80194b8 <__ieee754_acos+0x2b8>)
 80192d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192d8:	4680      	mov	r8, r0
 80192da:	4689      	mov	r9, r1
 80192dc:	4630      	mov	r0, r6
 80192de:	4639      	mov	r1, r7
 80192e0:	f7e7 f98a 	bl	80005f8 <__aeabi_dmul>
 80192e4:	a376      	add	r3, pc, #472	; (adr r3, 80194c0 <__ieee754_acos+0x2c0>)
 80192e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192ea:	f7e6 ffcd 	bl	8000288 <__aeabi_dsub>
 80192ee:	4632      	mov	r2, r6
 80192f0:	463b      	mov	r3, r7
 80192f2:	f7e7 f981 	bl	80005f8 <__aeabi_dmul>
 80192f6:	a374      	add	r3, pc, #464	; (adr r3, 80194c8 <__ieee754_acos+0x2c8>)
 80192f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192fc:	f7e6 ffc6 	bl	800028c <__adddf3>
 8019300:	4632      	mov	r2, r6
 8019302:	463b      	mov	r3, r7
 8019304:	f7e7 f978 	bl	80005f8 <__aeabi_dmul>
 8019308:	a371      	add	r3, pc, #452	; (adr r3, 80194d0 <__ieee754_acos+0x2d0>)
 801930a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801930e:	f7e6 ffbb 	bl	8000288 <__aeabi_dsub>
 8019312:	4632      	mov	r2, r6
 8019314:	463b      	mov	r3, r7
 8019316:	f7e7 f96f 	bl	80005f8 <__aeabi_dmul>
 801931a:	4b76      	ldr	r3, [pc, #472]	; (80194f4 <__ieee754_acos+0x2f4>)
 801931c:	2200      	movs	r2, #0
 801931e:	f7e6 ffb5 	bl	800028c <__adddf3>
 8019322:	4602      	mov	r2, r0
 8019324:	460b      	mov	r3, r1
 8019326:	4640      	mov	r0, r8
 8019328:	4649      	mov	r1, r9
 801932a:	f7e7 fa8f 	bl	800084c <__aeabi_ddiv>
 801932e:	4622      	mov	r2, r4
 8019330:	462b      	mov	r3, r5
 8019332:	f7e7 f961 	bl	80005f8 <__aeabi_dmul>
 8019336:	4602      	mov	r2, r0
 8019338:	460b      	mov	r3, r1
 801933a:	a167      	add	r1, pc, #412	; (adr r1, 80194d8 <__ieee754_acos+0x2d8>)
 801933c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019340:	f7e6 ffa2 	bl	8000288 <__aeabi_dsub>
 8019344:	4602      	mov	r2, r0
 8019346:	460b      	mov	r3, r1
 8019348:	4620      	mov	r0, r4
 801934a:	4629      	mov	r1, r5
 801934c:	f7e6 ff9c 	bl	8000288 <__aeabi_dsub>
 8019350:	4602      	mov	r2, r0
 8019352:	460b      	mov	r3, r1
 8019354:	a162      	add	r1, pc, #392	; (adr r1, 80194e0 <__ieee754_acos+0x2e0>)
 8019356:	e9d1 0100 	ldrd	r0, r1, [r1]
 801935a:	f7e6 ff95 	bl	8000288 <__aeabi_dsub>
 801935e:	e771      	b.n	8019244 <__ieee754_acos+0x44>
 8019360:	2d00      	cmp	r5, #0
 8019362:	f280 80cb 	bge.w	80194fc <__ieee754_acos+0x2fc>
 8019366:	ee10 0a10 	vmov	r0, s0
 801936a:	4b62      	ldr	r3, [pc, #392]	; (80194f4 <__ieee754_acos+0x2f4>)
 801936c:	2200      	movs	r2, #0
 801936e:	4629      	mov	r1, r5
 8019370:	f7e6 ff8c 	bl	800028c <__adddf3>
 8019374:	4b60      	ldr	r3, [pc, #384]	; (80194f8 <__ieee754_acos+0x2f8>)
 8019376:	2200      	movs	r2, #0
 8019378:	f7e7 f93e 	bl	80005f8 <__aeabi_dmul>
 801937c:	a342      	add	r3, pc, #264	; (adr r3, 8019488 <__ieee754_acos+0x288>)
 801937e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019382:	4604      	mov	r4, r0
 8019384:	460d      	mov	r5, r1
 8019386:	f7e7 f937 	bl	80005f8 <__aeabi_dmul>
 801938a:	a341      	add	r3, pc, #260	; (adr r3, 8019490 <__ieee754_acos+0x290>)
 801938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019390:	f7e6 ff7c 	bl	800028c <__adddf3>
 8019394:	4622      	mov	r2, r4
 8019396:	462b      	mov	r3, r5
 8019398:	f7e7 f92e 	bl	80005f8 <__aeabi_dmul>
 801939c:	a33e      	add	r3, pc, #248	; (adr r3, 8019498 <__ieee754_acos+0x298>)
 801939e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193a2:	f7e6 ff71 	bl	8000288 <__aeabi_dsub>
 80193a6:	4622      	mov	r2, r4
 80193a8:	462b      	mov	r3, r5
 80193aa:	f7e7 f925 	bl	80005f8 <__aeabi_dmul>
 80193ae:	a33c      	add	r3, pc, #240	; (adr r3, 80194a0 <__ieee754_acos+0x2a0>)
 80193b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193b4:	f7e6 ff6a 	bl	800028c <__adddf3>
 80193b8:	4622      	mov	r2, r4
 80193ba:	462b      	mov	r3, r5
 80193bc:	f7e7 f91c 	bl	80005f8 <__aeabi_dmul>
 80193c0:	a339      	add	r3, pc, #228	; (adr r3, 80194a8 <__ieee754_acos+0x2a8>)
 80193c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193c6:	f7e6 ff5f 	bl	8000288 <__aeabi_dsub>
 80193ca:	4622      	mov	r2, r4
 80193cc:	462b      	mov	r3, r5
 80193ce:	f7e7 f913 	bl	80005f8 <__aeabi_dmul>
 80193d2:	a337      	add	r3, pc, #220	; (adr r3, 80194b0 <__ieee754_acos+0x2b0>)
 80193d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193d8:	f7e6 ff58 	bl	800028c <__adddf3>
 80193dc:	4622      	mov	r2, r4
 80193de:	462b      	mov	r3, r5
 80193e0:	f7e7 f90a 	bl	80005f8 <__aeabi_dmul>
 80193e4:	ec45 4b10 	vmov	d0, r4, r5
 80193e8:	4680      	mov	r8, r0
 80193ea:	4689      	mov	r9, r1
 80193ec:	f000 f9e6 	bl	80197bc <__ieee754_sqrt>
 80193f0:	a331      	add	r3, pc, #196	; (adr r3, 80194b8 <__ieee754_acos+0x2b8>)
 80193f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193f6:	4620      	mov	r0, r4
 80193f8:	4629      	mov	r1, r5
 80193fa:	ec57 6b10 	vmov	r6, r7, d0
 80193fe:	f7e7 f8fb 	bl	80005f8 <__aeabi_dmul>
 8019402:	a32f      	add	r3, pc, #188	; (adr r3, 80194c0 <__ieee754_acos+0x2c0>)
 8019404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019408:	f7e6 ff3e 	bl	8000288 <__aeabi_dsub>
 801940c:	4622      	mov	r2, r4
 801940e:	462b      	mov	r3, r5
 8019410:	f7e7 f8f2 	bl	80005f8 <__aeabi_dmul>
 8019414:	a32c      	add	r3, pc, #176	; (adr r3, 80194c8 <__ieee754_acos+0x2c8>)
 8019416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801941a:	f7e6 ff37 	bl	800028c <__adddf3>
 801941e:	4622      	mov	r2, r4
 8019420:	462b      	mov	r3, r5
 8019422:	f7e7 f8e9 	bl	80005f8 <__aeabi_dmul>
 8019426:	a32a      	add	r3, pc, #168	; (adr r3, 80194d0 <__ieee754_acos+0x2d0>)
 8019428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801942c:	f7e6 ff2c 	bl	8000288 <__aeabi_dsub>
 8019430:	4622      	mov	r2, r4
 8019432:	462b      	mov	r3, r5
 8019434:	f7e7 f8e0 	bl	80005f8 <__aeabi_dmul>
 8019438:	4b2e      	ldr	r3, [pc, #184]	; (80194f4 <__ieee754_acos+0x2f4>)
 801943a:	2200      	movs	r2, #0
 801943c:	f7e6 ff26 	bl	800028c <__adddf3>
 8019440:	4602      	mov	r2, r0
 8019442:	460b      	mov	r3, r1
 8019444:	4640      	mov	r0, r8
 8019446:	4649      	mov	r1, r9
 8019448:	f7e7 fa00 	bl	800084c <__aeabi_ddiv>
 801944c:	4632      	mov	r2, r6
 801944e:	463b      	mov	r3, r7
 8019450:	f7e7 f8d2 	bl	80005f8 <__aeabi_dmul>
 8019454:	a320      	add	r3, pc, #128	; (adr r3, 80194d8 <__ieee754_acos+0x2d8>)
 8019456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801945a:	f7e6 ff15 	bl	8000288 <__aeabi_dsub>
 801945e:	4632      	mov	r2, r6
 8019460:	463b      	mov	r3, r7
 8019462:	f7e6 ff13 	bl	800028c <__adddf3>
 8019466:	4602      	mov	r2, r0
 8019468:	460b      	mov	r3, r1
 801946a:	f7e6 ff0f 	bl	800028c <__adddf3>
 801946e:	4602      	mov	r2, r0
 8019470:	460b      	mov	r3, r1
 8019472:	a103      	add	r1, pc, #12	; (adr r1, 8019480 <__ieee754_acos+0x280>)
 8019474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019478:	e76f      	b.n	801935a <__ieee754_acos+0x15a>
 801947a:	bf00      	nop
 801947c:	f3af 8000 	nop.w
 8019480:	54442d18 	.word	0x54442d18
 8019484:	400921fb 	.word	0x400921fb
 8019488:	0dfdf709 	.word	0x0dfdf709
 801948c:	3f023de1 	.word	0x3f023de1
 8019490:	7501b288 	.word	0x7501b288
 8019494:	3f49efe0 	.word	0x3f49efe0
 8019498:	b5688f3b 	.word	0xb5688f3b
 801949c:	3fa48228 	.word	0x3fa48228
 80194a0:	0e884455 	.word	0x0e884455
 80194a4:	3fc9c155 	.word	0x3fc9c155
 80194a8:	03eb6f7d 	.word	0x03eb6f7d
 80194ac:	3fd4d612 	.word	0x3fd4d612
 80194b0:	55555555 	.word	0x55555555
 80194b4:	3fc55555 	.word	0x3fc55555
 80194b8:	b12e9282 	.word	0xb12e9282
 80194bc:	3fb3b8c5 	.word	0x3fb3b8c5
 80194c0:	1b8d0159 	.word	0x1b8d0159
 80194c4:	3fe6066c 	.word	0x3fe6066c
 80194c8:	9c598ac8 	.word	0x9c598ac8
 80194cc:	40002ae5 	.word	0x40002ae5
 80194d0:	1c8a2d4b 	.word	0x1c8a2d4b
 80194d4:	40033a27 	.word	0x40033a27
 80194d8:	33145c07 	.word	0x33145c07
 80194dc:	3c91a626 	.word	0x3c91a626
 80194e0:	54442d18 	.word	0x54442d18
 80194e4:	3ff921fb 	.word	0x3ff921fb
 80194e8:	3fefffff 	.word	0x3fefffff
 80194ec:	3fdfffff 	.word	0x3fdfffff
 80194f0:	3c600000 	.word	0x3c600000
 80194f4:	3ff00000 	.word	0x3ff00000
 80194f8:	3fe00000 	.word	0x3fe00000
 80194fc:	ee10 2a10 	vmov	r2, s0
 8019500:	462b      	mov	r3, r5
 8019502:	496d      	ldr	r1, [pc, #436]	; (80196b8 <__ieee754_acos+0x4b8>)
 8019504:	2000      	movs	r0, #0
 8019506:	f7e6 febf 	bl	8000288 <__aeabi_dsub>
 801950a:	4b6c      	ldr	r3, [pc, #432]	; (80196bc <__ieee754_acos+0x4bc>)
 801950c:	2200      	movs	r2, #0
 801950e:	f7e7 f873 	bl	80005f8 <__aeabi_dmul>
 8019512:	4604      	mov	r4, r0
 8019514:	460d      	mov	r5, r1
 8019516:	ec45 4b10 	vmov	d0, r4, r5
 801951a:	f000 f94f 	bl	80197bc <__ieee754_sqrt>
 801951e:	a34e      	add	r3, pc, #312	; (adr r3, 8019658 <__ieee754_acos+0x458>)
 8019520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019524:	4620      	mov	r0, r4
 8019526:	4629      	mov	r1, r5
 8019528:	ec59 8b10 	vmov	r8, r9, d0
 801952c:	f7e7 f864 	bl	80005f8 <__aeabi_dmul>
 8019530:	a34b      	add	r3, pc, #300	; (adr r3, 8019660 <__ieee754_acos+0x460>)
 8019532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019536:	f7e6 fea9 	bl	800028c <__adddf3>
 801953a:	4622      	mov	r2, r4
 801953c:	462b      	mov	r3, r5
 801953e:	f7e7 f85b 	bl	80005f8 <__aeabi_dmul>
 8019542:	a349      	add	r3, pc, #292	; (adr r3, 8019668 <__ieee754_acos+0x468>)
 8019544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019548:	f7e6 fe9e 	bl	8000288 <__aeabi_dsub>
 801954c:	4622      	mov	r2, r4
 801954e:	462b      	mov	r3, r5
 8019550:	f7e7 f852 	bl	80005f8 <__aeabi_dmul>
 8019554:	a346      	add	r3, pc, #280	; (adr r3, 8019670 <__ieee754_acos+0x470>)
 8019556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801955a:	f7e6 fe97 	bl	800028c <__adddf3>
 801955e:	4622      	mov	r2, r4
 8019560:	462b      	mov	r3, r5
 8019562:	f7e7 f849 	bl	80005f8 <__aeabi_dmul>
 8019566:	a344      	add	r3, pc, #272	; (adr r3, 8019678 <__ieee754_acos+0x478>)
 8019568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801956c:	f7e6 fe8c 	bl	8000288 <__aeabi_dsub>
 8019570:	4622      	mov	r2, r4
 8019572:	462b      	mov	r3, r5
 8019574:	f7e7 f840 	bl	80005f8 <__aeabi_dmul>
 8019578:	a341      	add	r3, pc, #260	; (adr r3, 8019680 <__ieee754_acos+0x480>)
 801957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801957e:	f7e6 fe85 	bl	800028c <__adddf3>
 8019582:	4622      	mov	r2, r4
 8019584:	462b      	mov	r3, r5
 8019586:	f7e7 f837 	bl	80005f8 <__aeabi_dmul>
 801958a:	a33f      	add	r3, pc, #252	; (adr r3, 8019688 <__ieee754_acos+0x488>)
 801958c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019590:	4682      	mov	sl, r0
 8019592:	468b      	mov	fp, r1
 8019594:	4620      	mov	r0, r4
 8019596:	4629      	mov	r1, r5
 8019598:	f7e7 f82e 	bl	80005f8 <__aeabi_dmul>
 801959c:	a33c      	add	r3, pc, #240	; (adr r3, 8019690 <__ieee754_acos+0x490>)
 801959e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195a2:	f7e6 fe71 	bl	8000288 <__aeabi_dsub>
 80195a6:	4622      	mov	r2, r4
 80195a8:	462b      	mov	r3, r5
 80195aa:	f7e7 f825 	bl	80005f8 <__aeabi_dmul>
 80195ae:	a33a      	add	r3, pc, #232	; (adr r3, 8019698 <__ieee754_acos+0x498>)
 80195b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195b4:	f7e6 fe6a 	bl	800028c <__adddf3>
 80195b8:	4622      	mov	r2, r4
 80195ba:	462b      	mov	r3, r5
 80195bc:	f7e7 f81c 	bl	80005f8 <__aeabi_dmul>
 80195c0:	a337      	add	r3, pc, #220	; (adr r3, 80196a0 <__ieee754_acos+0x4a0>)
 80195c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195c6:	f7e6 fe5f 	bl	8000288 <__aeabi_dsub>
 80195ca:	4622      	mov	r2, r4
 80195cc:	462b      	mov	r3, r5
 80195ce:	f7e7 f813 	bl	80005f8 <__aeabi_dmul>
 80195d2:	4b39      	ldr	r3, [pc, #228]	; (80196b8 <__ieee754_acos+0x4b8>)
 80195d4:	2200      	movs	r2, #0
 80195d6:	f7e6 fe59 	bl	800028c <__adddf3>
 80195da:	4602      	mov	r2, r0
 80195dc:	460b      	mov	r3, r1
 80195de:	4650      	mov	r0, sl
 80195e0:	4659      	mov	r1, fp
 80195e2:	f7e7 f933 	bl	800084c <__aeabi_ddiv>
 80195e6:	4642      	mov	r2, r8
 80195e8:	464b      	mov	r3, r9
 80195ea:	f7e7 f805 	bl	80005f8 <__aeabi_dmul>
 80195ee:	2600      	movs	r6, #0
 80195f0:	4682      	mov	sl, r0
 80195f2:	468b      	mov	fp, r1
 80195f4:	4632      	mov	r2, r6
 80195f6:	464b      	mov	r3, r9
 80195f8:	4630      	mov	r0, r6
 80195fa:	4649      	mov	r1, r9
 80195fc:	f7e6 fffc 	bl	80005f8 <__aeabi_dmul>
 8019600:	4602      	mov	r2, r0
 8019602:	460b      	mov	r3, r1
 8019604:	4620      	mov	r0, r4
 8019606:	4629      	mov	r1, r5
 8019608:	f7e6 fe3e 	bl	8000288 <__aeabi_dsub>
 801960c:	4632      	mov	r2, r6
 801960e:	4604      	mov	r4, r0
 8019610:	460d      	mov	r5, r1
 8019612:	464b      	mov	r3, r9
 8019614:	4640      	mov	r0, r8
 8019616:	4649      	mov	r1, r9
 8019618:	f7e6 fe38 	bl	800028c <__adddf3>
 801961c:	4602      	mov	r2, r0
 801961e:	460b      	mov	r3, r1
 8019620:	4620      	mov	r0, r4
 8019622:	4629      	mov	r1, r5
 8019624:	f7e7 f912 	bl	800084c <__aeabi_ddiv>
 8019628:	4602      	mov	r2, r0
 801962a:	460b      	mov	r3, r1
 801962c:	4650      	mov	r0, sl
 801962e:	4659      	mov	r1, fp
 8019630:	f7e6 fe2c 	bl	800028c <__adddf3>
 8019634:	4632      	mov	r2, r6
 8019636:	464b      	mov	r3, r9
 8019638:	f7e6 fe28 	bl	800028c <__adddf3>
 801963c:	4602      	mov	r2, r0
 801963e:	460b      	mov	r3, r1
 8019640:	f7e6 fe24 	bl	800028c <__adddf3>
 8019644:	e5fe      	b.n	8019244 <__ieee754_acos+0x44>
 8019646:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80196a8 <__ieee754_acos+0x4a8>
 801964a:	e5ed      	b.n	8019228 <__ieee754_acos+0x28>
 801964c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80196b0 <__ieee754_acos+0x4b0>
 8019650:	e5ea      	b.n	8019228 <__ieee754_acos+0x28>
 8019652:	bf00      	nop
 8019654:	f3af 8000 	nop.w
 8019658:	0dfdf709 	.word	0x0dfdf709
 801965c:	3f023de1 	.word	0x3f023de1
 8019660:	7501b288 	.word	0x7501b288
 8019664:	3f49efe0 	.word	0x3f49efe0
 8019668:	b5688f3b 	.word	0xb5688f3b
 801966c:	3fa48228 	.word	0x3fa48228
 8019670:	0e884455 	.word	0x0e884455
 8019674:	3fc9c155 	.word	0x3fc9c155
 8019678:	03eb6f7d 	.word	0x03eb6f7d
 801967c:	3fd4d612 	.word	0x3fd4d612
 8019680:	55555555 	.word	0x55555555
 8019684:	3fc55555 	.word	0x3fc55555
 8019688:	b12e9282 	.word	0xb12e9282
 801968c:	3fb3b8c5 	.word	0x3fb3b8c5
 8019690:	1b8d0159 	.word	0x1b8d0159
 8019694:	3fe6066c 	.word	0x3fe6066c
 8019698:	9c598ac8 	.word	0x9c598ac8
 801969c:	40002ae5 	.word	0x40002ae5
 80196a0:	1c8a2d4b 	.word	0x1c8a2d4b
 80196a4:	40033a27 	.word	0x40033a27
	...
 80196b0:	54442d18 	.word	0x54442d18
 80196b4:	3ff921fb 	.word	0x3ff921fb
 80196b8:	3ff00000 	.word	0x3ff00000
 80196bc:	3fe00000 	.word	0x3fe00000

080196c0 <scalbn>:
 80196c0:	b570      	push	{r4, r5, r6, lr}
 80196c2:	ec55 4b10 	vmov	r4, r5, d0
 80196c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80196ca:	4606      	mov	r6, r0
 80196cc:	462b      	mov	r3, r5
 80196ce:	b999      	cbnz	r1, 80196f8 <scalbn+0x38>
 80196d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80196d4:	4323      	orrs	r3, r4
 80196d6:	d03f      	beq.n	8019758 <scalbn+0x98>
 80196d8:	4b35      	ldr	r3, [pc, #212]	; (80197b0 <scalbn+0xf0>)
 80196da:	4629      	mov	r1, r5
 80196dc:	ee10 0a10 	vmov	r0, s0
 80196e0:	2200      	movs	r2, #0
 80196e2:	f7e6 ff89 	bl	80005f8 <__aeabi_dmul>
 80196e6:	4b33      	ldr	r3, [pc, #204]	; (80197b4 <scalbn+0xf4>)
 80196e8:	429e      	cmp	r6, r3
 80196ea:	4604      	mov	r4, r0
 80196ec:	460d      	mov	r5, r1
 80196ee:	da10      	bge.n	8019712 <scalbn+0x52>
 80196f0:	a327      	add	r3, pc, #156	; (adr r3, 8019790 <scalbn+0xd0>)
 80196f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196f6:	e01f      	b.n	8019738 <scalbn+0x78>
 80196f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80196fc:	4291      	cmp	r1, r2
 80196fe:	d10c      	bne.n	801971a <scalbn+0x5a>
 8019700:	ee10 2a10 	vmov	r2, s0
 8019704:	4620      	mov	r0, r4
 8019706:	4629      	mov	r1, r5
 8019708:	f7e6 fdc0 	bl	800028c <__adddf3>
 801970c:	4604      	mov	r4, r0
 801970e:	460d      	mov	r5, r1
 8019710:	e022      	b.n	8019758 <scalbn+0x98>
 8019712:	460b      	mov	r3, r1
 8019714:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8019718:	3936      	subs	r1, #54	; 0x36
 801971a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801971e:	4296      	cmp	r6, r2
 8019720:	dd0d      	ble.n	801973e <scalbn+0x7e>
 8019722:	2d00      	cmp	r5, #0
 8019724:	a11c      	add	r1, pc, #112	; (adr r1, 8019798 <scalbn+0xd8>)
 8019726:	e9d1 0100 	ldrd	r0, r1, [r1]
 801972a:	da02      	bge.n	8019732 <scalbn+0x72>
 801972c:	a11c      	add	r1, pc, #112	; (adr r1, 80197a0 <scalbn+0xe0>)
 801972e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019732:	a319      	add	r3, pc, #100	; (adr r3, 8019798 <scalbn+0xd8>)
 8019734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019738:	f7e6 ff5e 	bl	80005f8 <__aeabi_dmul>
 801973c:	e7e6      	b.n	801970c <scalbn+0x4c>
 801973e:	1872      	adds	r2, r6, r1
 8019740:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019744:	428a      	cmp	r2, r1
 8019746:	dcec      	bgt.n	8019722 <scalbn+0x62>
 8019748:	2a00      	cmp	r2, #0
 801974a:	dd08      	ble.n	801975e <scalbn+0x9e>
 801974c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019750:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019754:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019758:	ec45 4b10 	vmov	d0, r4, r5
 801975c:	bd70      	pop	{r4, r5, r6, pc}
 801975e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019762:	da08      	bge.n	8019776 <scalbn+0xb6>
 8019764:	2d00      	cmp	r5, #0
 8019766:	a10a      	add	r1, pc, #40	; (adr r1, 8019790 <scalbn+0xd0>)
 8019768:	e9d1 0100 	ldrd	r0, r1, [r1]
 801976c:	dac0      	bge.n	80196f0 <scalbn+0x30>
 801976e:	a10e      	add	r1, pc, #56	; (adr r1, 80197a8 <scalbn+0xe8>)
 8019770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019774:	e7bc      	b.n	80196f0 <scalbn+0x30>
 8019776:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801977a:	3236      	adds	r2, #54	; 0x36
 801977c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019780:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8019784:	4620      	mov	r0, r4
 8019786:	4b0c      	ldr	r3, [pc, #48]	; (80197b8 <scalbn+0xf8>)
 8019788:	2200      	movs	r2, #0
 801978a:	e7d5      	b.n	8019738 <scalbn+0x78>
 801978c:	f3af 8000 	nop.w
 8019790:	c2f8f359 	.word	0xc2f8f359
 8019794:	01a56e1f 	.word	0x01a56e1f
 8019798:	8800759c 	.word	0x8800759c
 801979c:	7e37e43c 	.word	0x7e37e43c
 80197a0:	8800759c 	.word	0x8800759c
 80197a4:	fe37e43c 	.word	0xfe37e43c
 80197a8:	c2f8f359 	.word	0xc2f8f359
 80197ac:	81a56e1f 	.word	0x81a56e1f
 80197b0:	43500000 	.word	0x43500000
 80197b4:	ffff3cb0 	.word	0xffff3cb0
 80197b8:	3c900000 	.word	0x3c900000

080197bc <__ieee754_sqrt>:
 80197bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197c0:	ec55 4b10 	vmov	r4, r5, d0
 80197c4:	4e67      	ldr	r6, [pc, #412]	; (8019964 <__ieee754_sqrt+0x1a8>)
 80197c6:	43ae      	bics	r6, r5
 80197c8:	ee10 0a10 	vmov	r0, s0
 80197cc:	ee10 2a10 	vmov	r2, s0
 80197d0:	4629      	mov	r1, r5
 80197d2:	462b      	mov	r3, r5
 80197d4:	d10d      	bne.n	80197f2 <__ieee754_sqrt+0x36>
 80197d6:	f7e6 ff0f 	bl	80005f8 <__aeabi_dmul>
 80197da:	4602      	mov	r2, r0
 80197dc:	460b      	mov	r3, r1
 80197de:	4620      	mov	r0, r4
 80197e0:	4629      	mov	r1, r5
 80197e2:	f7e6 fd53 	bl	800028c <__adddf3>
 80197e6:	4604      	mov	r4, r0
 80197e8:	460d      	mov	r5, r1
 80197ea:	ec45 4b10 	vmov	d0, r4, r5
 80197ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197f2:	2d00      	cmp	r5, #0
 80197f4:	dc0b      	bgt.n	801980e <__ieee754_sqrt+0x52>
 80197f6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80197fa:	4326      	orrs	r6, r4
 80197fc:	d0f5      	beq.n	80197ea <__ieee754_sqrt+0x2e>
 80197fe:	b135      	cbz	r5, 801980e <__ieee754_sqrt+0x52>
 8019800:	f7e6 fd42 	bl	8000288 <__aeabi_dsub>
 8019804:	4602      	mov	r2, r0
 8019806:	460b      	mov	r3, r1
 8019808:	f7e7 f820 	bl	800084c <__aeabi_ddiv>
 801980c:	e7eb      	b.n	80197e6 <__ieee754_sqrt+0x2a>
 801980e:	1509      	asrs	r1, r1, #20
 8019810:	f000 808d 	beq.w	801992e <__ieee754_sqrt+0x172>
 8019814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019818:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801981c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019820:	07c9      	lsls	r1, r1, #31
 8019822:	bf5c      	itt	pl
 8019824:	005b      	lslpl	r3, r3, #1
 8019826:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801982a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801982e:	bf58      	it	pl
 8019830:	0052      	lslpl	r2, r2, #1
 8019832:	2500      	movs	r5, #0
 8019834:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019838:	1076      	asrs	r6, r6, #1
 801983a:	0052      	lsls	r2, r2, #1
 801983c:	f04f 0e16 	mov.w	lr, #22
 8019840:	46ac      	mov	ip, r5
 8019842:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019846:	eb0c 0001 	add.w	r0, ip, r1
 801984a:	4298      	cmp	r0, r3
 801984c:	bfde      	ittt	le
 801984e:	1a1b      	suble	r3, r3, r0
 8019850:	eb00 0c01 	addle.w	ip, r0, r1
 8019854:	186d      	addle	r5, r5, r1
 8019856:	005b      	lsls	r3, r3, #1
 8019858:	f1be 0e01 	subs.w	lr, lr, #1
 801985c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019860:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019864:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019868:	d1ed      	bne.n	8019846 <__ieee754_sqrt+0x8a>
 801986a:	4674      	mov	r4, lr
 801986c:	2720      	movs	r7, #32
 801986e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019872:	4563      	cmp	r3, ip
 8019874:	eb01 000e 	add.w	r0, r1, lr
 8019878:	dc02      	bgt.n	8019880 <__ieee754_sqrt+0xc4>
 801987a:	d113      	bne.n	80198a4 <__ieee754_sqrt+0xe8>
 801987c:	4290      	cmp	r0, r2
 801987e:	d811      	bhi.n	80198a4 <__ieee754_sqrt+0xe8>
 8019880:	2800      	cmp	r0, #0
 8019882:	eb00 0e01 	add.w	lr, r0, r1
 8019886:	da57      	bge.n	8019938 <__ieee754_sqrt+0x17c>
 8019888:	f1be 0f00 	cmp.w	lr, #0
 801988c:	db54      	blt.n	8019938 <__ieee754_sqrt+0x17c>
 801988e:	f10c 0801 	add.w	r8, ip, #1
 8019892:	eba3 030c 	sub.w	r3, r3, ip
 8019896:	4290      	cmp	r0, r2
 8019898:	bf88      	it	hi
 801989a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801989e:	1a12      	subs	r2, r2, r0
 80198a0:	440c      	add	r4, r1
 80198a2:	46c4      	mov	ip, r8
 80198a4:	005b      	lsls	r3, r3, #1
 80198a6:	3f01      	subs	r7, #1
 80198a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80198ac:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80198b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80198b4:	d1dd      	bne.n	8019872 <__ieee754_sqrt+0xb6>
 80198b6:	4313      	orrs	r3, r2
 80198b8:	d01b      	beq.n	80198f2 <__ieee754_sqrt+0x136>
 80198ba:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8019968 <__ieee754_sqrt+0x1ac>
 80198be:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801996c <__ieee754_sqrt+0x1b0>
 80198c2:	e9da 0100 	ldrd	r0, r1, [sl]
 80198c6:	e9db 2300 	ldrd	r2, r3, [fp]
 80198ca:	f7e6 fcdd 	bl	8000288 <__aeabi_dsub>
 80198ce:	e9da 8900 	ldrd	r8, r9, [sl]
 80198d2:	4602      	mov	r2, r0
 80198d4:	460b      	mov	r3, r1
 80198d6:	4640      	mov	r0, r8
 80198d8:	4649      	mov	r1, r9
 80198da:	f7e7 f909 	bl	8000af0 <__aeabi_dcmple>
 80198de:	b140      	cbz	r0, 80198f2 <__ieee754_sqrt+0x136>
 80198e0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80198e4:	e9da 0100 	ldrd	r0, r1, [sl]
 80198e8:	e9db 2300 	ldrd	r2, r3, [fp]
 80198ec:	d126      	bne.n	801993c <__ieee754_sqrt+0x180>
 80198ee:	3501      	adds	r5, #1
 80198f0:	463c      	mov	r4, r7
 80198f2:	106a      	asrs	r2, r5, #1
 80198f4:	0863      	lsrs	r3, r4, #1
 80198f6:	07e9      	lsls	r1, r5, #31
 80198f8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80198fc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8019900:	bf48      	it	mi
 8019902:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8019906:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801990a:	461c      	mov	r4, r3
 801990c:	e76d      	b.n	80197ea <__ieee754_sqrt+0x2e>
 801990e:	0ad3      	lsrs	r3, r2, #11
 8019910:	3815      	subs	r0, #21
 8019912:	0552      	lsls	r2, r2, #21
 8019914:	2b00      	cmp	r3, #0
 8019916:	d0fa      	beq.n	801990e <__ieee754_sqrt+0x152>
 8019918:	02dc      	lsls	r4, r3, #11
 801991a:	d50a      	bpl.n	8019932 <__ieee754_sqrt+0x176>
 801991c:	f1c1 0420 	rsb	r4, r1, #32
 8019920:	fa22 f404 	lsr.w	r4, r2, r4
 8019924:	1e4d      	subs	r5, r1, #1
 8019926:	408a      	lsls	r2, r1
 8019928:	4323      	orrs	r3, r4
 801992a:	1b41      	subs	r1, r0, r5
 801992c:	e772      	b.n	8019814 <__ieee754_sqrt+0x58>
 801992e:	4608      	mov	r0, r1
 8019930:	e7f0      	b.n	8019914 <__ieee754_sqrt+0x158>
 8019932:	005b      	lsls	r3, r3, #1
 8019934:	3101      	adds	r1, #1
 8019936:	e7ef      	b.n	8019918 <__ieee754_sqrt+0x15c>
 8019938:	46e0      	mov	r8, ip
 801993a:	e7aa      	b.n	8019892 <__ieee754_sqrt+0xd6>
 801993c:	f7e6 fca6 	bl	800028c <__adddf3>
 8019940:	e9da 8900 	ldrd	r8, r9, [sl]
 8019944:	4602      	mov	r2, r0
 8019946:	460b      	mov	r3, r1
 8019948:	4640      	mov	r0, r8
 801994a:	4649      	mov	r1, r9
 801994c:	f7e7 f8c6 	bl	8000adc <__aeabi_dcmplt>
 8019950:	b120      	cbz	r0, 801995c <__ieee754_sqrt+0x1a0>
 8019952:	1ca0      	adds	r0, r4, #2
 8019954:	bf08      	it	eq
 8019956:	3501      	addeq	r5, #1
 8019958:	3402      	adds	r4, #2
 801995a:	e7ca      	b.n	80198f2 <__ieee754_sqrt+0x136>
 801995c:	3401      	adds	r4, #1
 801995e:	f024 0401 	bic.w	r4, r4, #1
 8019962:	e7c6      	b.n	80198f2 <__ieee754_sqrt+0x136>
 8019964:	7ff00000 	.word	0x7ff00000
 8019968:	200002f8 	.word	0x200002f8
 801996c:	20000300 	.word	0x20000300

08019970 <_init>:
 8019970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019972:	bf00      	nop
 8019974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019976:	bc08      	pop	{r3}
 8019978:	469e      	mov	lr, r3
 801997a:	4770      	bx	lr

0801997c <_fini>:
 801997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801997e:	bf00      	nop
 8019980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019982:	bc08      	pop	{r3}
 8019984:	469e      	mov	lr, r3
 8019986:	4770      	bx	lr
