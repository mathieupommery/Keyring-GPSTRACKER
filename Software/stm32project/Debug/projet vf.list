
projet vf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016b44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024b0  08016cd8  08016cd8  00026cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019188  08019188  000302f4  2**0
                  CONTENTS
  4 .ARM          00000008  08019188  08019188  00029188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019190  08019190  000302f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019190  08019190  00029190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019194  08019194  00029194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f4  20000000  08019198  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dc0  200002f8  0801948c  000302f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200020b8  0801948c  000320b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030324  2**0
                  CONTENTS, READONLY
 13 .debug_info   000263b8  00000000  00000000  00030367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053a5  00000000  00000000  0005671f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f20  00000000  00000000  0005bac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001803  00000000  00000000  0005d9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000285d2  00000000  00000000  0005f1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029114  00000000  00000000  000877bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e552a  00000000  00000000  000b08d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009d5c  00000000  00000000  00195dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0019fb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f8 	.word	0x200002f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016cbc 	.word	0x08016cbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002fc 	.word	0x200002fc
 80001cc:	08016cbc 	.word	0x08016cbc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <QMC_init>:
//code recuperer et fonctionnel, il utilise une fonction init, permettant d'initialiser le capteur correctement en ecrivant dans ces registres selon le datasheet,
//puis d'une fonction read, qui lit le capteur puis met à jour la structurede donnée

//###############################################################################################################
uint8_t QMC_init(QMC_t *qmc,I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af04      	add	r7, sp, #16
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	4613      	mov	r3, r2
 800101c:	71fb      	strb	r3, [r7, #7]
	uint8_t array[2];
	qmc->i2c=i2c;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	601a      	str	r2, [r3, #0]
	qmc->Control_Register=0x11;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2211      	movs	r2, #17
 8001028:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 800102a:	2301      	movs	r3, #1
 800102c:	753b      	strb	r3, [r7, #20]
	array[1]=qmc->Control_Register;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	791b      	ldrb	r3, [r3, #4]
 8001032:	757b      	strb	r3, [r7, #21]

	if(Output_Data_Rate==200)qmc->Control_Register|=0b00001100;
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2bc8      	cmp	r3, #200	; 0xc8
 8001038:	d107      	bne.n	800104a <QMC_init+0x3a>
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	791b      	ldrb	r3, [r3, #4]
 800103e:	f043 030c 	orr.w	r3, r3, #12
 8001042:	b2da      	uxtb	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	711a      	strb	r2, [r3, #4]
 8001048:	e024      	b.n	8001094 <QMC_init+0x84>
	else if(Output_Data_Rate==100)qmc->Control_Register|=0b00001000;
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b64      	cmp	r3, #100	; 0x64
 800104e:	d107      	bne.n	8001060 <QMC_init+0x50>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	791b      	ldrb	r3, [r3, #4]
 8001054:	f043 0308 	orr.w	r3, r3, #8
 8001058:	b2da      	uxtb	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	711a      	strb	r2, [r3, #4]
 800105e:	e019      	b.n	8001094 <QMC_init+0x84>
	else if(Output_Data_Rate==50)qmc->Control_Register|=0b00000100;
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b32      	cmp	r3, #50	; 0x32
 8001064:	d107      	bne.n	8001076 <QMC_init+0x66>
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	791b      	ldrb	r3, [r3, #4]
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	b2da      	uxtb	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	711a      	strb	r2, [r3, #4]
 8001074:	e00e      	b.n	8001094 <QMC_init+0x84>
	else if(Output_Data_Rate==10)qmc->Control_Register|=0b00000000;
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b0a      	cmp	r3, #10
 800107a:	d104      	bne.n	8001086 <QMC_init+0x76>
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	791a      	ldrb	r2, [r3, #4]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	711a      	strb	r2, [r3, #4]
 8001084:	e006      	b.n	8001094 <QMC_init+0x84>
	else qmc->Control_Register|=0b00001100;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	791b      	ldrb	r3, [r3, #4]
 800108a:	f043 030c 	orr.w	r3, r3, #12
 800108e:	b2da      	uxtb	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	2364      	movs	r3, #100	; 0x64
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	2301      	movs	r3, #1
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2301      	movs	r3, #1
 80010a8:	220b      	movs	r2, #11
 80010aa:	211a      	movs	r1, #26
 80010ac:	f005 fc40 	bl	8006930 <HAL_I2C_Mem_Write>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <QMC_init+0xaa>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e014      	b.n	80010e4 <QMC_init+0xd4>
	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	2364      	movs	r3, #100	; 0x64
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	2301      	movs	r3, #1
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	3301      	adds	r3, #1
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2301      	movs	r3, #1
 80010d0:	2209      	movs	r2, #9
 80010d2:	211a      	movs	r1, #26
 80010d4:	f005 fc2c 	bl	8006930 <HAL_I2C_Mem_Write>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <QMC_init+0xd2>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <QMC_init+0xd4>

	return 0;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010fc:	d104      	bne.n	8001108 <HAL_GPIO_EXTI_Callback+0x1c>
//		ssd1306_SetCursor(33, 44);
//		ssd1306_WriteString("btna", Font_6x8, White);
//		ssd1306_UpdateScreen();
		BTN_A++;//sert à reconnaitre lorsque le bouto na est appuyer, cette variable est mise à 1 par un e interruption.
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	4a08      	ldr	r2, [pc, #32]	; (8001128 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001106:	6013      	str	r3, [r2, #0]


	}
	if(GPIO_Pin==GPIO_PIN_15){
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800110e:	d104      	bne.n	800111a <HAL_GPIO_EXTI_Callback+0x2e>
		//ssd1306_SetCursor(33, 44);
		//ssd1306_WriteString("btnb", Font_6x8, White);
		//ssd1306_UpdateScreen();
		BTN_B++;//de meme pour le bouton b
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_GPIO_EXTI_Callback+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <HAL_GPIO_EXTI_Callback+0x40>)
 8001118:	6013      	str	r3, [r2, #0]

	}
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000858 	.word	0x20000858
 800112c:	2000085c 	.word	0x2000085c

08001130 <HAL_UART_RxCpltCallback>:

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8001138:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <HAL_UART_RxCpltCallback+0xc4>)
 800113a:	881a      	ldrh	r2, [r3, #0]
 800113c:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <HAL_UART_RxCpltCallback+0xc8>)
 800113e:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8001140:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <HAL_UART_RxCpltCallback+0xc8>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001148:	d922      	bls.n	8001190 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 800114a:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <HAL_UART_RxCpltCallback+0xc8>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001152:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8001154:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <HAL_UART_RxCpltCallback+0xc8>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b28      	ldr	r3, [pc, #160]	; (80011fc <HAL_UART_RxCpltCallback+0xcc>)
 800115c:	4413      	add	r3, r2
 800115e:	89fa      	ldrh	r2, [r7, #14]
 8001160:	4927      	ldr	r1, [pc, #156]	; (8001200 <HAL_UART_RxCpltCallback+0xd0>)
 8001162:	4618      	mov	r0, r3
 8001164:	f011 ff95 	bl	8013092 <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8001168:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <HAL_UART_RxCpltCallback+0xc8>)
 800116a:	2200      	movs	r2, #0
 800116c:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 800116e:	89fb      	ldrh	r3, [r7, #14]
 8001170:	4a23      	ldr	r2, [pc, #140]	; (8001200 <HAL_UART_RxCpltCallback+0xd0>)
 8001172:	1899      	adds	r1, r3, r2
 8001174:	89fb      	ldrh	r3, [r7, #14]
 8001176:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800117a:	461a      	mov	r2, r3
 800117c:	481f      	ldr	r0, [pc, #124]	; (80011fc <HAL_UART_RxCpltCallback+0xcc>)
 800117e:	f011 ff88 	bl	8013092 <memcpy>
				newPos = (64-datatocopy);  // update the position
 8001182:	89fb      	ldrh	r3, [r7, #14]
 8001184:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001188:	b29a      	uxth	r2, r3
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <HAL_UART_RxCpltCallback+0xc4>)
 800118c:	801a      	strh	r2, [r3, #0]
 800118e:	e01b      	b.n	80011c8 <HAL_UART_RxCpltCallback+0x98>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_UART_RxCpltCallback+0xc8>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_UART_RxCpltCallback+0xcc>)
 8001198:	4413      	add	r3, r2
 800119a:	4a19      	ldr	r2, [pc, #100]	; (8001200 <HAL_UART_RxCpltCallback+0xd0>)
 800119c:	4614      	mov	r4, r2
 800119e:	469c      	mov	ip, r3
 80011a0:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 80011a4:	4665      	mov	r5, ip
 80011a6:	4626      	mov	r6, r4
 80011a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011aa:	6028      	str	r0, [r5, #0]
 80011ac:	6069      	str	r1, [r5, #4]
 80011ae:	60aa      	str	r2, [r5, #8]
 80011b0:	60eb      	str	r3, [r5, #12]
 80011b2:	3410      	adds	r4, #16
 80011b4:	f10c 0c10 	add.w	ip, ip, #16
 80011b8:	4574      	cmp	r4, lr
 80011ba:	d1f3      	bne.n	80011a4 <HAL_UART_RxCpltCallback+0x74>
				newPos = 64+oldPos; //update buffer position
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_UART_RxCpltCallback+0xc8>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	3340      	adds	r3, #64	; 0x40
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_UART_RxCpltCallback+0xc4>)
 80011c6:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 80011c8:	2240      	movs	r2, #64	; 0x40
 80011ca:	490d      	ldr	r1, [pc, #52]	; (8001200 <HAL_UART_RxCpltCallback+0xd0>)
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <HAL_UART_RxCpltCallback+0xd4>)
 80011ce:	f009 fb43 	bl	800a858 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_UART_RxCpltCallback+0xd8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_UART_RxCpltCallback+0xd8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0204 	bic.w	r2, r2, #4
 80011e0:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 80011e2:	2240      	movs	r2, #64	; 0x40
 80011e4:	4906      	ldr	r1, [pc, #24]	; (8001200 <HAL_UART_RxCpltCallback+0xd0>)
 80011e6:	4807      	ldr	r0, [pc, #28]	; (8001204 <HAL_UART_RxCpltCallback+0xd4>)
 80011e8:	f009 fb36 	bl	800a858 <HAL_UART_Receive_DMA>
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011f4:	200005d2 	.word	0x200005d2
 80011f8:	200005d0 	.word	0x200005d0
 80011fc:	20000614 	.word	0x20000614
 8001200:	200005d4 	.word	0x200005d4
 8001204:	20000468 	.word	0x20000468
 8001208:	200004f0 	.word	0x200004f0
 800120c:	00000000 	.word	0x00000000

08001210 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001210:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a3c      	ldr	r2, [pc, #240]	; (8001310 <HAL_ADC_ConvCpltCallback+0x100>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d166      	bne.n	80012f2 <HAL_ADC_ConvCpltCallback+0xe2>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 8001224:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <HAL_ADC_ConvCpltCallback+0x104>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f98b 	bl	8000544 <__aeabi_i2d>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	a135      	add	r1, pc, #212	; (adr r1, 8001308 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001234:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001238:	f7ff fb18 	bl	800086c <__aeabi_ddiv>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f7ff fce0 	bl	8000c08 <__aeabi_d2f>
 8001248:	4603      	mov	r3, r0
 800124a:	4a33      	ldr	r2, [pc, #204]	; (8001318 <HAL_ADC_ConvCpltCallback+0x108>)
 800124c:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 800124e:	4b33      	ldr	r3, [pc, #204]	; (800131c <HAL_ADC_ConvCpltCallback+0x10c>)
 8001250:	ed93 7a00 	vldr	s14, [r3]
 8001254:	4b32      	ldr	r3, [pc, #200]	; (8001320 <HAL_ADC_ConvCpltCallback+0x110>)
 8001256:	edd3 7a00 	vldr	s15, [r3]
 800125a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800125e:	ee17 0a90 	vmov	r0, s15
 8001262:	f7ff f981 	bl	8000568 <__aeabi_f2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	f04f 0000 	mov.w	r0, #0
 800126e:	492d      	ldr	r1, [pc, #180]	; (8001324 <HAL_ADC_ConvCpltCallback+0x114>)
 8001270:	f7ff fafc 	bl	800086c <__aeabi_ddiv>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4690      	mov	r8, r2
 800127a:	4699      	mov	r9, r3
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <HAL_ADC_ConvCpltCallback+0x104>)
 800127e:	885b      	ldrh	r3, [r3, #2]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f95f 	bl	8000544 <__aeabi_i2d>
 8001286:	4604      	mov	r4, r0
 8001288:	460d      	mov	r5, r1
 800128a:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_ADC_ConvCpltCallback+0x108>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f96a 	bl	8000568 <__aeabi_f2d>
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	4b23      	ldr	r3, [pc, #140]	; (8001328 <HAL_ADC_ConvCpltCallback+0x118>)
 800129a:	f7ff fae7 	bl	800086c <__aeabi_ddiv>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4620      	mov	r0, r4
 80012a4:	4629      	mov	r1, r5
 80012a6:	f7ff f9b7 	bl	8000618 <__aeabi_dmul>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4614      	mov	r4, r2
 80012b0:	461d      	mov	r5, r3
 80012b2:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <HAL_ADC_ConvCpltCallback+0x110>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f956 	bl	8000568 <__aeabi_f2d>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4620      	mov	r0, r4
 80012c2:	4629      	mov	r1, r5
 80012c4:	f7fe fff0 	bl	80002a8 <__aeabi_dsub>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4640      	mov	r0, r8
 80012ce:	4649      	mov	r1, r9
 80012d0:	f7ff f9a2 	bl	8000618 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fc94 	bl	8000c08 <__aeabi_d2f>
 80012e0:	ee07 0a10 	vmov	s14, r0
 80012e4:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80012e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_ADC_ConvCpltCallback+0x11c>)
 80012ee:	edc3 7a00 	vstr	s15, [r3]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 2);
 80012f2:	2202      	movs	r2, #2
 80012f4:	4907      	ldr	r1, [pc, #28]	; (8001314 <HAL_ADC_ConvCpltCallback+0x104>)
 80012f6:	480e      	ldr	r0, [pc, #56]	; (8001330 <HAL_ADC_ConvCpltCallback+0x120>)
 80012f8:	f003 fdcc 	bl	8004e94 <HAL_ADC_Start_DMA>



}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001306:	bf00      	nop
 8001308:	d70a3d70 	.word	0xd70a3d70
 800130c:	40b36323 	.word	0x40b36323
 8001310:	50040000 	.word	0x50040000
 8001314:	20000868 	.word	0x20000868
 8001318:	20000870 	.word	0x20000870
 800131c:	20000000 	.word	0x20000000
 8001320:	20000004 	.word	0x20000004
 8001324:	40590000 	.word	0x40590000
 8001328:	40080000 	.word	0x40080000
 800132c:	2000086c 	.word	0x2000086c
 8001330:	20000314 	.word	0x20000314

08001334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133a:	f003 f9f6 	bl	800472a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800133e:	f000 f867 	bl	8001410 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001342:	f000 f8b8 	bl	80014b6 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001346:	f000 fabf 	bl	80018c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800134a:	f000 fa8b 	bl	8001864 <MX_DMA_Init>
  MX_I2C1_Init();
 800134e:	f000 f957 	bl	8001600 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001352:	f000 f995 	bl	8001680 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8001356:	f000 f9d3 	bl	8001700 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800135a:	f000 f8db 	bl	8001514 <MX_ADC1_Init>
  MX_TIM2_Init();
 800135e:	f000 f9fb 	bl	8001758 <MX_TIM2_Init>
  MX_TIM7_Init();
 8001362:	f000 fa47 	bl	80017f4 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8001366:	f00f f837 	bl	80103d8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */



	ssd1306_Init();
 800136a:	f000 ffcf 	bl	800230c <ssd1306_Init>
	HAL_Delay(100);
 800136e:	2064      	movs	r0, #100	; 0x64
 8001370:	f003 fa50 	bl	8004814 <HAL_Delay>
	ssd1306_Fill(Black);
 8001374:	2000      	movs	r0, #0
 8001376:	f001 f833 	bl	80023e0 <ssd1306_Fill>

	ssd1306_DrawBitmap(32, 32, startimg, 64, 64, White);//start screen
 800137a:	2301      	movs	r3, #1
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	2340      	movs	r3, #64	; 0x40
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2340      	movs	r3, #64	; 0x40
 8001384:	4a19      	ldr	r2, [pc, #100]	; (80013ec <main+0xb8>)
 8001386:	2120      	movs	r1, #32
 8001388:	2020      	movs	r0, #32
 800138a:	f001 fafb 	bl	8002984 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();//demarrage des différents périphériques en i2c, qui ont besoin detre configuré
 800138e:	f001 f83f 	bl	8002410 <ssd1306_UpdateScreen>
	QMC_init(&compasdata,&hi2c1,10);
 8001392:	220a      	movs	r2, #10
 8001394:	4916      	ldr	r1, [pc, #88]	; (80013f0 <main+0xbc>)
 8001396:	4817      	ldr	r0, [pc, #92]	; (80013f4 <main+0xc0>)
 8001398:	f7ff fe3a 	bl	8001010 <QMC_init>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);//pour l'instant le gps est toujours alimenté
 800139c:	2201      	movs	r2, #1
 800139e:	2102      	movs	r1, #2
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a4:	f005 f9f8 	bl	8006798 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80013a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ac:	f003 fa32 	bl	8004814 <HAL_Delay>
//		}
//
//	}


	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 2);
 80013b0:	2202      	movs	r2, #2
 80013b2:	4911      	ldr	r1, [pc, #68]	; (80013f8 <main+0xc4>)
 80013b4:	4811      	ldr	r0, [pc, #68]	; (80013fc <main+0xc8>)
 80013b6:	f003 fd6d 	bl	8004e94 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 80013ba:	4811      	ldr	r0, [pc, #68]	; (8001400 <main+0xcc>)
 80013bc:	f008 fe32 	bl	800a024 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim7);
 80013c0:	4810      	ldr	r0, [pc, #64]	; (8001404 <main+0xd0>)
 80013c2:	f008 fe2f 	bl	800a024 <HAL_TIM_Base_Start>

	HAL_UART_Abort(&hlpuart1);
 80013c6:	4810      	ldr	r0, [pc, #64]	; (8001408 <main+0xd4>)
 80013c8:	f009 fa92 	bl	800a8f0 <HAL_UART_Abort>
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//lancement du dma pour le gps
 80013cc:	2240      	movs	r2, #64	; 0x40
 80013ce:	490f      	ldr	r1, [pc, #60]	; (800140c <main+0xd8>)
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <main+0xd4>)
 80013d2:	f009 fa41 	bl	800a858 <HAL_UART_Receive_DMA>

	ssd1306_Fill(Black);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f001 f802 	bl	80023e0 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80013dc:	f001 f818 	bl	8002410 <ssd1306_UpdateScreen>

    /* USER CODE BEGIN 3 */



		statemachine();//on execute la machine à etat
 80013e0:	f001 fb5e 	bl	8002aa0 <statemachine>
		ssd1306_UpdateScreen();//la machine a état ce sera occupe de mettre les choses necessaire dans le buffer du processeur necessaire a envoyer a l'ecran, il reste plus qu'a l'envoyer en i2c
 80013e4:	f001 f814 	bl	8002410 <ssd1306_UpdateScreen>
		statemachine();//on execute la machine à etat
 80013e8:	e7fa      	b.n	80013e0 <main+0xac>
 80013ea:	bf00      	nop
 80013ec:	08016f10 	.word	0x08016f10
 80013f0:	200003c0 	.word	0x200003c0
 80013f4:	20000d4c 	.word	0x20000d4c
 80013f8:	20000868 	.word	0x20000868
 80013fc:	20000314 	.word	0x20000314
 8001400:	20000538 	.word	0x20000538
 8001404:	20000584 	.word	0x20000584
 8001408:	20000468 	.word	0x20000468
 800140c:	200005d4 	.word	0x200005d4

08001410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b096      	sub	sp, #88	; 0x58
 8001414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	2244      	movs	r2, #68	; 0x44
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f011 fd1b 	bl	8012e5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001432:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001436:	f007 fc17 	bl	8008c68 <HAL_PWREx_ControlVoltageScaling>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001440:	f000 fac6 	bl	80019d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001444:	2310      	movs	r3, #16
 8001446:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001448:	2301      	movs	r3, #1
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001450:	2360      	movs	r3, #96	; 0x60
 8001452:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001454:	2302      	movs	r3, #2
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001458:	2301      	movs	r3, #1
 800145a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800145c:	2301      	movs	r3, #1
 800145e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001460:	2314      	movs	r3, #20
 8001462:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001464:	2307      	movs	r3, #7
 8001466:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001468:	2302      	movs	r3, #2
 800146a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800146c:	2302      	movs	r3, #2
 800146e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4618      	mov	r0, r3
 8001476:	f007 fc5d 	bl	8008d34 <HAL_RCC_OscConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001480:	f000 faa6 	bl	80019d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001484:	230f      	movs	r3, #15
 8001486:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001488:	2303      	movs	r3, #3
 800148a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001490:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001494:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800149a:	463b      	mov	r3, r7
 800149c:	2102      	movs	r1, #2
 800149e:	4618      	mov	r0, r3
 80014a0:	f008 f85c 	bl	800955c <HAL_RCC_ClockConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014aa:	f000 fa91 	bl	80019d0 <Error_Handler>
  }
}
 80014ae:	bf00      	nop
 80014b0:	3758      	adds	r7, #88	; 0x58
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b096      	sub	sp, #88	; 0x58
 80014ba:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2254      	movs	r2, #84	; 0x54
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f011 fcc9 	bl	8012e5a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80014c8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80014cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80014ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80014d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80014d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014d8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80014da:	2301      	movs	r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014de:	2301      	movs	r3, #1
 80014e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80014e2:	2318      	movs	r3, #24
 80014e4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014e6:	2307      	movs	r3, #7
 80014e8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80014f2:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80014f6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4618      	mov	r0, r3
 80014fc:	f008 fa52 	bl	80099a4 <HAL_RCCEx_PeriphCLKConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001506:	f000 fa63 	bl	80019d0 <Error_Handler>
  }
}
 800150a:	bf00      	nop
 800150c:	3758      	adds	r7, #88	; 0x58
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800151a:	463b      	mov	r3, r7
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
 8001528:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800152a:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <MX_ADC1_Init+0xdc>)
 800152c:	4a31      	ldr	r2, [pc, #196]	; (80015f4 <MX_ADC1_Init+0xe0>)
 800152e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001530:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <MX_ADC1_Init+0xdc>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001536:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <MX_ADC1_Init+0xdc>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800153c:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <MX_ADC1_Init+0xdc>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <MX_ADC1_Init+0xdc>)
 8001544:	2201      	movs	r2, #1
 8001546:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <MX_ADC1_Init+0xdc>)
 800154a:	2204      	movs	r2, #4
 800154c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800154e:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <MX_ADC1_Init+0xdc>)
 8001550:	2200      	movs	r2, #0
 8001552:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <MX_ADC1_Init+0xdc>)
 8001556:	2201      	movs	r2, #1
 8001558:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800155a:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <MX_ADC1_Init+0xdc>)
 800155c:	2202      	movs	r2, #2
 800155e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <MX_ADC1_Init+0xdc>)
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001568:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <MX_ADC1_Init+0xdc>)
 800156a:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <MX_ADC1_Init+0xdc>)
 8001572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_ADC1_Init+0xdc>)
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_ADC1_Init+0xdc>)
 8001582:	2200      	movs	r2, #0
 8001584:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_ADC1_Init+0xdc>)
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800158e:	4818      	ldr	r0, [pc, #96]	; (80015f0 <MX_ADC1_Init+0xdc>)
 8001590:	f003 fb3e 	bl	8004c10 <HAL_ADC_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800159a:	f000 fa19 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <MX_ADC1_Init+0xe4>)
 80015a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015a2:	2306      	movs	r3, #6
 80015a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80015a6:	2307      	movs	r3, #7
 80015a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015aa:	237f      	movs	r3, #127	; 0x7f
 80015ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015ae:	2304      	movs	r3, #4
 80015b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b6:	463b      	mov	r3, r7
 80015b8:	4619      	mov	r1, r3
 80015ba:	480d      	ldr	r0, [pc, #52]	; (80015f0 <MX_ADC1_Init+0xdc>)
 80015bc:	f003 fec0 	bl	8005340 <HAL_ADC_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80015c6:	f000 fa03 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_ADC1_Init+0xe8>)
 80015cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015ce:	230c      	movs	r3, #12
 80015d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d2:	463b      	mov	r3, r7
 80015d4:	4619      	mov	r1, r3
 80015d6:	4806      	ldr	r0, [pc, #24]	; (80015f0 <MX_ADC1_Init+0xdc>)
 80015d8:	f003 feb2 	bl	8005340 <HAL_ADC_ConfigChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80015e2:	f000 f9f5 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000314 	.word	0x20000314
 80015f4:	50040000 	.word	0x50040000
 80015f8:	80000001 	.word	0x80000001
 80015fc:	c7520000 	.word	0xc7520000

08001600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <MX_I2C1_Init+0x74>)
 8001606:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <MX_I2C1_Init+0x78>)
 8001608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00202538;
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <MX_I2C1_Init+0x74>)
 800160c:	4a1b      	ldr	r2, [pc, #108]	; (800167c <MX_I2C1_Init+0x7c>)
 800160e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <MX_I2C1_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <MX_I2C1_Init+0x74>)
 8001618:	2201      	movs	r2, #1
 800161a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <MX_I2C1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_I2C1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <MX_I2C1_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_I2C1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_I2C1_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800163a:	480e      	ldr	r0, [pc, #56]	; (8001674 <MX_I2C1_Init+0x74>)
 800163c:	f005 f8dc 	bl	80067f8 <HAL_I2C_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001646:	f000 f9c3 	bl	80019d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800164a:	2100      	movs	r1, #0
 800164c:	4809      	ldr	r0, [pc, #36]	; (8001674 <MX_I2C1_Init+0x74>)
 800164e:	f005 fce7 	bl	8007020 <HAL_I2CEx_ConfigAnalogFilter>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001658:	f000 f9ba 	bl	80019d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800165c:	2100      	movs	r1, #0
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_I2C1_Init+0x74>)
 8001660:	f005 fd29 	bl	80070b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800166a:	f000 f9b1 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200003c0 	.word	0x200003c0
 8001678:	40005400 	.word	0x40005400
 800167c:	00202538 	.word	0x00202538

08001680 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <MX_I2C3_Init+0x74>)
 8001686:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <MX_I2C3_Init+0x78>)
 8001688:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00202538;
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_I2C3_Init+0x74>)
 800168c:	4a1b      	ldr	r2, [pc, #108]	; (80016fc <MX_I2C3_Init+0x7c>)
 800168e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <MX_I2C3_Init+0x74>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <MX_I2C3_Init+0x74>)
 8001698:	2201      	movs	r2, #1
 800169a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <MX_I2C3_Init+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <MX_I2C3_Init+0x74>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MX_I2C3_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_I2C3_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_I2C3_Init+0x74>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80016ba:	480e      	ldr	r0, [pc, #56]	; (80016f4 <MX_I2C3_Init+0x74>)
 80016bc:	f005 f89c 	bl	80067f8 <HAL_I2C_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80016c6:	f000 f983 	bl	80019d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ca:	2100      	movs	r1, #0
 80016cc:	4809      	ldr	r0, [pc, #36]	; (80016f4 <MX_I2C3_Init+0x74>)
 80016ce:	f005 fca7 	bl	8007020 <HAL_I2CEx_ConfigAnalogFilter>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80016d8:	f000 f97a 	bl	80019d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80016dc:	2100      	movs	r1, #0
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_I2C3_Init+0x74>)
 80016e0:	f005 fce9 	bl	80070b6 <HAL_I2CEx_ConfigDigitalFilter>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80016ea:	f000 f971 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000414 	.word	0x20000414
 80016f8:	40005c00 	.word	0x40005c00
 80016fc:	00202538 	.word	0x00202538

08001700 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <MX_LPUART1_UART_Init+0x50>)
 8001706:	4a13      	ldr	r2, [pc, #76]	; (8001754 <MX_LPUART1_UART_Init+0x54>)
 8001708:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_LPUART1_UART_Init+0x50>)
 800170c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001710:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_LPUART1_UART_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <MX_LPUART1_UART_Init+0x50>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_LPUART1_UART_Init+0x50>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <MX_LPUART1_UART_Init+0x50>)
 8001726:	220c      	movs	r2, #12
 8001728:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_LPUART1_UART_Init+0x50>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001730:	4b07      	ldr	r3, [pc, #28]	; (8001750 <MX_LPUART1_UART_Init+0x50>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_LPUART1_UART_Init+0x50>)
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800173c:	4804      	ldr	r0, [pc, #16]	; (8001750 <MX_LPUART1_UART_Init+0x50>)
 800173e:	f009 f83d 	bl	800a7bc <HAL_UART_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001748:	f000 f942 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000468 	.word	0x20000468
 8001754:	40008000 	.word	0x40008000

08001758 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175e:	f107 0310 	add.w	r3, r7, #16
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <MX_TIM2_Init+0x98>)
 8001778:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800177c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_TIM2_Init+0x98>)
 8001780:	f240 128f 	movw	r2, #399	; 0x18f
 8001784:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_TIM2_Init+0x98>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800178c:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <MX_TIM2_Init+0x98>)
 800178e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001792:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_TIM2_Init+0x98>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <MX_TIM2_Init+0x98>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017a0:	4813      	ldr	r0, [pc, #76]	; (80017f0 <MX_TIM2_Init+0x98>)
 80017a2:	f008 fbe7 	bl	8009f74 <HAL_TIM_Base_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80017ac:	f000 f910 	bl	80019d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017b6:	f107 0310 	add.w	r3, r7, #16
 80017ba:	4619      	mov	r1, r3
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <MX_TIM2_Init+0x98>)
 80017be:	f008 fd7f 	bl	800a2c0 <HAL_TIM_ConfigClockSource>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80017c8:	f000 f902 	bl	80019d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017cc:	2320      	movs	r3, #32
 80017ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_TIM2_Init+0x98>)
 80017da:	f008 ff6b 	bl	800a6b4 <HAL_TIMEx_MasterConfigSynchronization>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80017e4:	f000 f8f4 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	3720      	adds	r7, #32
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000538 	.word	0x20000538

080017f4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001804:	4b15      	ldr	r3, [pc, #84]	; (800185c <MX_TIM7_Init+0x68>)
 8001806:	4a16      	ldr	r2, [pc, #88]	; (8001860 <MX_TIM7_Init+0x6c>)
 8001808:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10000-1;
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <MX_TIM7_Init+0x68>)
 800180c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001810:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <MX_TIM7_Init+0x68>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8000-1;
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <MX_TIM7_Init+0x68>)
 800181a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800181e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_TIM7_Init+0x68>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001826:	480d      	ldr	r0, [pc, #52]	; (800185c <MX_TIM7_Init+0x68>)
 8001828:	f008 fba4 	bl	8009f74 <HAL_TIM_Base_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001832:	f000 f8cd 	bl	80019d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	4619      	mov	r1, r3
 8001842:	4806      	ldr	r0, [pc, #24]	; (800185c <MX_TIM7_Init+0x68>)
 8001844:	f008 ff36 	bl	800a6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800184e:	f000 f8bf 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000584 	.word	0x20000584
 8001860:	40001400 	.word	0x40001400

08001864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <MX_DMA_Init+0x60>)
 800186c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186e:	4a15      	ldr	r2, [pc, #84]	; (80018c4 <MX_DMA_Init+0x60>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	6493      	str	r3, [r2, #72]	; 0x48
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <MX_DMA_Init+0x60>)
 8001878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <MX_DMA_Init+0x60>)
 8001884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001886:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <MX_DMA_Init+0x60>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6493      	str	r3, [r2, #72]	; 0x48
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <MX_DMA_Init+0x60>)
 8001890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	200b      	movs	r0, #11
 80018a0:	f004 fb57 	bl	8005f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018a4:	200b      	movs	r0, #11
 80018a6:	f004 fb70 	bl	8005f8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 1, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2101      	movs	r1, #1
 80018ae:	2045      	movs	r0, #69	; 0x45
 80018b0:	f004 fb4f 	bl	8005f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80018b4:	2045      	movs	r0, #69	; 0x45
 80018b6:	f004 fb68 	bl	8005f8a <HAL_NVIC_EnableIRQ>

}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000

080018c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018de:	4b39      	ldr	r3, [pc, #228]	; (80019c4 <MX_GPIO_Init+0xfc>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	4a38      	ldr	r2, [pc, #224]	; (80019c4 <MX_GPIO_Init+0xfc>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ea:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <MX_GPIO_Init+0xfc>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	4b33      	ldr	r3, [pc, #204]	; (80019c4 <MX_GPIO_Init+0xfc>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	4a32      	ldr	r2, [pc, #200]	; (80019c4 <MX_GPIO_Init+0xfc>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001902:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <MX_GPIO_Init+0xfc>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <MX_GPIO_Init+0xfc>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	4a2c      	ldr	r2, [pc, #176]	; (80019c4 <MX_GPIO_Init+0xfc>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191a:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <MX_GPIO_Init+0xfc>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	2102      	movs	r1, #2
 800192a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192e:	f004 ff33 	bl	8006798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	2101      	movs	r1, #1
 8001936:	4824      	ldr	r0, [pc, #144]	; (80019c8 <MX_GPIO_Init+0x100>)
 8001938:	f004 ff2e 	bl	8006798 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800193c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001942:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001948:	2302      	movs	r3, #2
 800194a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	4619      	mov	r1, r3
 8001952:	481e      	ldr	r0, [pc, #120]	; (80019cc <MX_GPIO_Init+0x104>)
 8001954:	f004 fdb6 	bl	80064c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001958:	2302      	movs	r3, #2
 800195a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195c:	2301      	movs	r3, #1
 800195e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	4619      	mov	r1, r3
 800196e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001972:	f004 fda7 	bl	80064c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001976:	2310      	movs	r3, #16
 8001978:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800197a:	2303      	movs	r3, #3
 800197c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	4619      	mov	r1, r3
 8001988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198c:	f004 fd9a 	bl	80064c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001990:	2301      	movs	r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001994:	2301      	movs	r3, #1
 8001996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	4619      	mov	r1, r3
 80019a6:	4808      	ldr	r0, [pc, #32]	; (80019c8 <MX_GPIO_Init+0x100>)
 80019a8:	f004 fd8c 	bl	80064c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2100      	movs	r1, #0
 80019b0:	2028      	movs	r0, #40	; 0x28
 80019b2:	f004 face 	bl	8005f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019b6:	2028      	movs	r0, #40	; 0x28
 80019b8:	f004 fae7 	bl	8005f8a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019bc:	bf00      	nop
 80019be:	3720      	adds	r7, #32
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40021000 	.word	0x40021000
 80019c8:	48000400 	.word	0x48000400
 80019cc:	48000800 	.word	0x48000800

080019d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d4:	b672      	cpsid	i
}
 80019d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019d8:	e7fe      	b.n	80019d8 <Error_Handler+0x8>

080019da <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7fe fc54 	bl	8000290 <strlen>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d801      	bhi.n	80019f2 <gps_checksum+0x18>
 80019ee:	2300      	movs	r3, #0
 80019f0:	e038      	b.n	8001a64 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7fe fc4c 	bl	8000290 <strlen>
 80019f8:	4603      	mov	r3, r0
 80019fa:	3b04      	subs	r3, #4
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4413      	add	r3, r2
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7fe fc43 	bl	8000290 <strlen>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	e00a      	b.n	8001a36 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	4053      	eors	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	3301      	adds	r3, #1
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7fe fc2a 	bl	8000290 <strlen>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	1f5a      	subs	r2, r3, #5
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d8ec      	bhi.n	8001a20 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	2210      	movs	r2, #16
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f010 fa2a 	bl	8011ea8 <strtol>
 8001a54:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d101      	bne.n	8001a62 <gps_checksum+0x88>
        return 1;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8001a62:	2300      	movs	r3, #0
    }
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b0b7      	sub	sp, #220	; 0xdc
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8001a7c:	f107 0320 	add.w	r3, r7, #32
 8001a80:	2264      	movs	r2, #100	; 0x64
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f011 f9e8 	bl	8012e5a <memset>
    char *marker = strtok(inputString, ",");
 8001a8a:	49c2      	ldr	r1, [pc, #776]	; (8001d94 <nmea_GPGGA+0x328>)
 8001a8c:	6838      	ldr	r0, [r7, #0]
 8001a8e:	f011 f9ff 	bl	8012e90 <strtok>
 8001a92:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001a96:	e027      	b.n	8001ae8 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001a98:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001a9c:	f7fe fbf8 	bl	8000290 <strlen>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001aa8:	1c63      	adds	r3, r4, #1
 8001aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001aae:	4610      	mov	r0, r2
 8001ab0:	f00f fa40 	bl	8010f34 <malloc>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	00a3      	lsls	r3, r4, #2
 8001aba:	33d8      	adds	r3, #216	; 0xd8
 8001abc:	443b      	add	r3, r7
 8001abe:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	33d8      	adds	r3, #216	; 0xd8
 8001acc:	443b      	add	r3, r7
 8001ace:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001ad2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f011 fad3 	bl	8013082 <strcpy>
        marker = strtok(NULL, ",");
 8001adc:	49ad      	ldr	r1, [pc, #692]	; (8001d94 <nmea_GPGGA+0x328>)
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f011 f9d6 	bl	8012e90 <strtok>
 8001ae4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001ae8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1d3      	bne.n	8001a98 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8001af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8001af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	332c      	adds	r3, #44	; 0x2c
 8001b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f011 faba 	bl	8013082 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8001b0e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001b12:	2b53      	cmp	r3, #83	; 0x53
 8001b14:	d004      	beq.n	8001b20 <nmea_GPGGA+0xb4>
 8001b16:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001b1a:	2b4e      	cmp	r3, #78	; 0x4e
 8001b1c:	f040 8159 	bne.w	8001dd2 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8001b20:	2300      	movs	r3, #0
 8001b22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b26:	e010      	b.n	8001b4a <nmea_GPGGA+0xde>
 8001b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b2e:	4413      	add	r3, r2
 8001b30:	7819      	ldrb	r1, [r3, #0]
 8001b32:	f107 021c 	add.w	r2, r7, #28
 8001b36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b3a:	4413      	add	r3, r2
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	701a      	strb	r2, [r3, #0]
 8001b40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b44:	3301      	adds	r3, #1
 8001b46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	ddea      	ble.n	8001b28 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b58:	e011      	b.n	8001b7e <nmea_GPGGA+0x112>
 8001b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b60:	3302      	adds	r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	7819      	ldrb	r1, [r3, #0]
 8001b66:	f107 0214 	add.w	r2, r7, #20
 8001b6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b6e:	4413      	add	r3, r2
 8001b70:	460a      	mov	r2, r1
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b82:	2b05      	cmp	r3, #5
 8001b84:	dde9      	ble.n	8001b5a <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	220a      	movs	r2, #10
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f010 f98a 	bl	8011ea8 <strtol>
 8001b94:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f010 f898 	bl	8011cd4 <strtof>
 8001ba4:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8001ba8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bac:	ee07 3a90 	vmov	s15, r3
 8001bb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb4:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001bb8:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8001d98 <nmea_GPGGA+0x32c>
 8001bbc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc4:	ee17 0a90 	vmov	r0, s15
 8001bc8:	f7fe fcce 	bl	8000568 <__aeabi_f2d>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001bda:	e010      	b.n	8001bfe <nmea_GPGGA+0x192>
 8001bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001be2:	4413      	add	r3, r2
 8001be4:	7819      	ldrb	r1, [r3, #0]
 8001be6:	f107 0210 	add.w	r2, r7, #16
 8001bea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bee:	4413      	add	r3, r2
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	701a      	strb	r2, [r3, #0]
 8001bf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001bfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	ddea      	ble.n	8001bdc <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c0c:	e011      	b.n	8001c32 <nmea_GPGGA+0x1c6>
 8001c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c14:	3303      	adds	r3, #3
 8001c16:	4413      	add	r3, r2
 8001c18:	7819      	ldrb	r1, [r3, #0]
 8001c1a:	f107 0208 	add.w	r2, r7, #8
 8001c1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c22:	4413      	add	r3, r2
 8001c24:	460a      	mov	r2, r1
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c36:	2b05      	cmp	r3, #5
 8001c38:	dde9      	ble.n	8001c0e <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8001c3a:	f107 0310 	add.w	r3, r7, #16
 8001c3e:	220a      	movs	r2, #10
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f010 f930 	bl	8011ea8 <strtol>
 8001c48:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8001c4c:	f107 0308 	add.w	r3, r7, #8
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f010 f83e 	bl	8011cd4 <strtof>
 8001c58:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8001c5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c60:	ee07 3a90 	vmov	s15, r3
 8001c64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c68:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001c6c:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8001d98 <nmea_GPGGA+0x32c>
 8001c70:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c78:	ee17 0a90 	vmov	r0, s15
 8001c7c:	f7fe fc74 	bl	8000568 <__aeabi_f2d>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001c94:	f7fe ff28 	bl	8000ae8 <__aeabi_dcmpeq>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d176      	bne.n	8001d8c <nmea_GPGGA+0x320>
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001caa:	f7fe ff1d 	bl	8000ae8 <__aeabi_dcmpeq>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d16b      	bne.n	8001d8c <nmea_GPGGA+0x320>
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	4b38      	ldr	r3, [pc, #224]	; (8001d9c <nmea_GPGGA+0x330>)
 8001cba:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001cbe:	f7fe ff1d 	bl	8000afc <__aeabi_dcmplt>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d061      	beq.n	8001d8c <nmea_GPGGA+0x320>
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <nmea_GPGGA+0x334>)
 8001cce:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001cd2:	f7fe ff13 	bl	8000afc <__aeabi_dcmplt>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d057      	beq.n	8001d8c <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001ce2:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8001cec:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001cf4:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8001cfe:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8001d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f00f ffe5 	bl	8011cd4 <strtof>
 8001d0a:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8001d0e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	d102      	bne.n	8001d22 <nmea_GPGGA+0x2b6>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	e001      	b.n	8001d26 <nmea_GPGGA+0x2ba>
 8001d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8001d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d2c:	220a      	movs	r2, #10
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f010 f8b9 	bl	8011ea8 <strtol>
 8001d36:	4602      	mov	r2, r0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8001d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d3e:	220a      	movs	r2, #10
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f010 f8b0 	bl	8011ea8 <strtol>
 8001d48:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8001d4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bfcc      	ite	gt
 8001d54:	2301      	movgt	r3, #1
 8001d56:	2300      	movle	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8001d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f00f ffb5 	bl	8011cd4 <strtof>
 8001d6a:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8001d6e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001d72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	d102      	bne.n	8001d82 <nmea_GPGGA+0x316>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	e001      	b.n	8001d86 <nmea_GPGGA+0x31a>
 8001d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001d8a:	e022      	b.n	8001dd2 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001d92:	e016      	b.n	8001dc2 <nmea_GPGGA+0x356>
 8001d94:	08016cd8 	.word	0x08016cd8
 8001d98:	42700000 	.word	0x42700000
 8001d9c:	40568000 	.word	0x40568000
 8001da0:	40668000 	.word	0x40668000
 8001da4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	33d8      	adds	r3, #216	; 0xd8
 8001dac:	443b      	add	r3, r7
 8001dae:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f00f f8c6 	bl	8010f44 <free>
 8001db8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001dc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	dbea      	blt.n	8001da4 <nmea_GPGGA+0x338>
            return 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e019      	b.n	8001e06 <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001dd8:	e00e      	b.n	8001df8 <nmea_GPGGA+0x38c>
 8001dda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	33d8      	adds	r3, #216	; 0xd8
 8001de2:	443b      	add	r3, r7
 8001de4:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f00f f8ab 	bl	8010f44 <free>
 8001dee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001df2:	3301      	adds	r3, #1
 8001df4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001df8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001dfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e00:	429a      	cmp	r2, r3
 8001e02:	dbea      	blt.n	8001dda <nmea_GPGGA+0x36e>
    return 1;
 8001e04:	2301      	movs	r3, #1
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	37dc      	adds	r7, #220	; 0xdc
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	bf00      	nop

08001e10 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b0a3      	sub	sp, #140	; 0x8c
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	2264      	movs	r2, #100	; 0x64
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f011 f816 	bl	8012e5a <memset>
    char *marker = strtok(inputString, ",");
 8001e2e:	493b      	ldr	r1, [pc, #236]	; (8001f1c <nmea_GPGSA+0x10c>)
 8001e30:	6838      	ldr	r0, [r7, #0]
 8001e32:	f011 f82d 	bl	8012e90 <strtok>
 8001e36:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001e3a:	e027      	b.n	8001e8c <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001e3c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001e40:	f7fe fa26 	bl	8000290 <strlen>
 8001e44:	4603      	mov	r3, r0
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8001e4c:	1c63      	adds	r3, r4, #1
 8001e4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e52:	4610      	mov	r0, r2
 8001e54:	f00f f86e 	bl	8010f34 <malloc>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	00a3      	lsls	r3, r4, #2
 8001e5e:	3388      	adds	r3, #136	; 0x88
 8001e60:	443b      	add	r3, r7
 8001e62:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8001e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	3388      	adds	r3, #136	; 0x88
 8001e70:	443b      	add	r3, r7
 8001e72:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001e76:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f011 f901 	bl	8013082 <strcpy>
        marker = strtok(NULL, ",");
 8001e80:	4926      	ldr	r1, [pc, #152]	; (8001f1c <nmea_GPGSA+0x10c>)
 8001e82:	2000      	movs	r0, #0
 8001e84:	f011 f804 	bl	8012e90 <strtok>
 8001e88:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1d3      	bne.n	8001e3c <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	220a      	movs	r2, #10
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f010 f804 	bl	8011ea8 <strtol>
 8001ea0:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8001ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	bfcc      	ite	gt
 8001ea8:	2301      	movgt	r3, #1
 8001eaa:	2300      	movle	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001eb8:	2303      	movs	r3, #3
 8001eba:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ebc:	e00e      	b.n	8001edc <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8001ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	3388      	adds	r3, #136	; 0x88
 8001ec4:	443b      	add	r3, r7
 8001ec6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <nmea_GPGSA+0xc6>
            satelliteCount++;
 8001ed0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ed8:	3301      	adds	r3, #1
 8001eda:	67bb      	str	r3, [r7, #120]	; 0x78
 8001edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ede:	2b0e      	cmp	r3, #14
 8001ee0:	dded      	ble.n	8001ebe <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8001ee8:	2300      	movs	r3, #0
 8001eea:	677b      	str	r3, [r7, #116]	; 0x74
 8001eec:	e00b      	b.n	8001f06 <nmea_GPGSA+0xf6>
 8001eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	3388      	adds	r3, #136	; 0x88
 8001ef4:	443b      	add	r3, r7
 8001ef6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f00f f822 	bl	8010f44 <free>
 8001f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f02:	3301      	adds	r3, #1
 8001f04:	677b      	str	r3, [r7, #116]	; 0x74
 8001f06:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	dbee      	blt.n	8001eee <nmea_GPGSA+0xde>
    return 1;
 8001f10:	2301      	movs	r3, #1
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	378c      	adds	r7, #140	; 0x8c
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd90      	pop	{r4, r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	08016cd8 	.word	0x08016cd8

08001f20 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b0a1      	sub	sp, #132	; 0x84
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8001f2e:	f107 030c 	add.w	r3, r7, #12
 8001f32:	2264      	movs	r2, #100	; 0x64
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f010 ff8f 	bl	8012e5a <memset>
    char *marker = strtok(inputString, ",");
 8001f3c:	4930      	ldr	r1, [pc, #192]	; (8002000 <nmea_GNRMC+0xe0>)
 8001f3e:	6838      	ldr	r0, [r7, #0]
 8001f40:	f010 ffa6 	bl	8012e90 <strtok>
 8001f44:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001f46:	e021      	b.n	8001f8c <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001f48:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001f4a:	f7fe f9a1 	bl	8000290 <strlen>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8001f54:	1c63      	adds	r3, r4, #1
 8001f56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f58:	4610      	mov	r0, r2
 8001f5a:	f00e ffeb 	bl	8010f34 <malloc>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	461a      	mov	r2, r3
 8001f62:	00a3      	lsls	r3, r4, #2
 8001f64:	3380      	adds	r3, #128	; 0x80
 8001f66:	443b      	add	r3, r7
 8001f68:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8001f6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	3380      	adds	r3, #128	; 0x80
 8001f74:	443b      	add	r3, r7
 8001f76:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001f7a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f011 f880 	bl	8013082 <strcpy>
        marker = strtok(NULL, ",");
 8001f82:	491f      	ldr	r1, [pc, #124]	; (8002000 <nmea_GNRMC+0xe0>)
 8001f84:	2000      	movs	r0, #0
 8001f86:	f010 ff83 	bl	8012e90 <strtok>
 8001f8a:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1da      	bne.n	8001f48 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8001f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f00f fe9c 	bl	8011cd4 <strtof>
 8001f9c:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 8001fa0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001fa2:	f7fe fae1 	bl	8000568 <__aeabi_f2d>
 8001fa6:	a314      	add	r3, pc, #80	; (adr r3, 8001ff8 <nmea_GNRMC+0xd8>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	f7fe fc5e 	bl	800086c <__aeabi_ddiv>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f7fe fe26 	bl	8000c08 <__aeabi_d2f>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	677b      	str	r3, [r7, #116]	; 0x74
 8001fc6:	e00b      	b.n	8001fe0 <nmea_GNRMC+0xc0>
 8001fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	3380      	adds	r3, #128	; 0x80
 8001fce:	443b      	add	r3, r7
 8001fd0:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f00e ffb5 	bl	8010f44 <free>
 8001fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fdc:	3301      	adds	r3, #1
 8001fde:	677b      	str	r3, [r7, #116]	; 0x74
 8001fe0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001fe2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	dbef      	blt.n	8001fc8 <nmea_GNRMC+0xa8>
    return 1;
 8001fe8:	2301      	movs	r3, #1
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3784      	adds	r7, #132	; 0x84
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	f3af 8000 	nop.w
 8001ff8:	be76c8b4 	.word	0xbe76c8b4
 8001ffc:	3fff1a9f 	.word	0x3fff1a9f
 8002000:	08016cd8 	.word	0x08016cd8

08002004 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 800200e:	223c      	movs	r2, #60	; 0x3c
 8002010:	2100      	movs	r1, #0
 8002012:	484e      	ldr	r0, [pc, #312]	; (800214c <nmea_parse+0x148>)
 8002014:	f010 ff21 	bl	8012e5a <memset>
    char * token = strtok(buffer, "$");
 8002018:	494d      	ldr	r1, [pc, #308]	; (8002150 <nmea_parse+0x14c>)
 800201a:	6838      	ldr	r0, [r7, #0]
 800201c:	f010 ff38 	bl	8012e90 <strtok>
 8002020:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8002026:	e01d      	b.n	8002064 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8002028:	6978      	ldr	r0, [r7, #20]
 800202a:	f7fe f931 	bl	8000290 <strlen>
 800202e:	4603      	mov	r3, r0
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	693c      	ldr	r4, [r7, #16]
 8002034:	1c63      	adds	r3, r4, #1
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	4610      	mov	r0, r2
 800203a:	f00e ff7b 	bl	8010f34 <malloc>
 800203e:	4603      	mov	r3, r0
 8002040:	461a      	mov	r2, r3
 8002042:	4b42      	ldr	r3, [pc, #264]	; (800214c <nmea_parse+0x148>)
 8002044:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	3b01      	subs	r3, #1
 800204c:	4a3f      	ldr	r2, [pc, #252]	; (800214c <nmea_parse+0x148>)
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	6979      	ldr	r1, [r7, #20]
 8002054:	4618      	mov	r0, r3
 8002056:	f011 f814 	bl	8013082 <strcpy>
        token = strtok(NULL, "$");
 800205a:	493d      	ldr	r1, [pc, #244]	; (8002150 <nmea_parse+0x14c>)
 800205c:	2000      	movs	r0, #0
 800205e:	f010 ff17 	bl	8012e90 <strtok>
 8002062:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1de      	bne.n	8002028 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	e052      	b.n	8002116 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8002070:	4a36      	ldr	r2, [pc, #216]	; (800214c <nmea_parse+0x148>)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002078:	4936      	ldr	r1, [pc, #216]	; (8002154 <nmea_parse+0x150>)
 800207a:	4618      	mov	r0, r3
 800207c:	f010 ff64 	bl	8012f48 <strstr>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d044      	beq.n	8002110 <nmea_parse+0x10c>
 8002086:	4a31      	ldr	r2, [pc, #196]	; (800214c <nmea_parse+0x148>)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fca3 	bl	80019da <gps_checksum>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d03a      	beq.n	8002110 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 800209a:	4a2c      	ldr	r2, [pc, #176]	; (800214c <nmea_parse+0x148>)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a2:	492d      	ldr	r1, [pc, #180]	; (8002158 <nmea_parse+0x154>)
 80020a4:	4618      	mov	r0, r3
 80020a6:	f010 ff4f 	bl	8012f48 <strstr>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 80020b0:	4a26      	ldr	r2, [pc, #152]	; (800214c <nmea_parse+0x148>)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b8:	4619      	mov	r1, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ff30 	bl	8001f20 <nmea_GNRMC>
 80020c0:	e026      	b.n	8002110 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 80020c2:	4a22      	ldr	r2, [pc, #136]	; (800214c <nmea_parse+0x148>)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ca:	4924      	ldr	r1, [pc, #144]	; (800215c <nmea_parse+0x158>)
 80020cc:	4618      	mov	r0, r3
 80020ce:	f010 ff3b 	bl	8012f48 <strstr>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 80020d8:	4a1c      	ldr	r2, [pc, #112]	; (800214c <nmea_parse+0x148>)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e0:	4619      	mov	r1, r3
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff fe94 	bl	8001e10 <nmea_GPGSA>
 80020e8:	e012      	b.n	8002110 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 80020ea:	4a18      	ldr	r2, [pc, #96]	; (800214c <nmea_parse+0x148>)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f2:	491b      	ldr	r1, [pc, #108]	; (8002160 <nmea_parse+0x15c>)
 80020f4:	4618      	mov	r0, r3
 80020f6:	f010 ff27 	bl	8012f48 <strstr>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d007      	beq.n	8002110 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8002100:	4a12      	ldr	r2, [pc, #72]	; (800214c <nmea_parse+0x148>)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	4619      	mov	r1, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff fcae 	bl	8001a6c <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	3301      	adds	r3, #1
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	429a      	cmp	r2, r3
 800211c:	dba8      	blt.n	8002070 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	e009      	b.n	8002138 <nmea_parse+0x134>
 8002124:	4a09      	ldr	r2, [pc, #36]	; (800214c <nmea_parse+0x148>)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212c:	4618      	mov	r0, r3
 800212e:	f00e ff09 	bl	8010f44 <free>
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	3301      	adds	r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	429a      	cmp	r2, r3
 800213e:	dbf1      	blt.n	8002124 <nmea_parse+0x120>


}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	371c      	adds	r7, #28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd90      	pop	{r4, r7, pc}
 800214a:	bf00      	nop
 800214c:	20000874 	.word	0x20000874
 8002150:	08016cdc 	.word	0x08016cdc
 8002154:	08016ce0 	.word	0x08016ce0
 8002158:	08016ce4 	.word	0x08016ce4
 800215c:	08016cec 	.word	0x08016cec
 8002160:	08016cf4 	.word	0x08016cf4

08002164 <nmea_speed>:

void nmea_speed(GPS *gps_data, uint8_t *buffer){
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
	 memset(data, 0, sizeof(data));
 800216e:	223c      	movs	r2, #60	; 0x3c
 8002170:	2100      	movs	r1, #0
 8002172:	4844      	ldr	r0, [pc, #272]	; (8002284 <nmea_speed+0x120>)
 8002174:	f010 fe71 	bl	8012e5a <memset>
	    char * token = strtok(buffer, "$");
 8002178:	4943      	ldr	r1, [pc, #268]	; (8002288 <nmea_speed+0x124>)
 800217a:	6838      	ldr	r0, [r7, #0]
 800217c:	f010 fe88 	bl	8012e90 <strtok>
 8002180:	6178      	str	r0, [r7, #20]
	    int cnt = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
	    while(token !=NULL){
 8002186:	e01d      	b.n	80021c4 <nmea_speed+0x60>
	        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8002188:	6978      	ldr	r0, [r7, #20]
 800218a:	f7fe f881 	bl	8000290 <strlen>
 800218e:	4603      	mov	r3, r0
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	693c      	ldr	r4, [r7, #16]
 8002194:	1c63      	adds	r3, r4, #1
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	4610      	mov	r0, r2
 800219a:	f00e fecb 	bl	8010f34 <malloc>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b38      	ldr	r3, [pc, #224]	; (8002284 <nmea_speed+0x120>)
 80021a4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	        strcpy(data[cnt-1], token);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	4a35      	ldr	r2, [pc, #212]	; (8002284 <nmea_speed+0x120>)
 80021ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b2:	6979      	ldr	r1, [r7, #20]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f010 ff64 	bl	8013082 <strcpy>
	        token = strtok(NULL, "$");
 80021ba:	4933      	ldr	r1, [pc, #204]	; (8002288 <nmea_speed+0x124>)
 80021bc:	2000      	movs	r0, #0
 80021be:	f010 fe67 	bl	8012e90 <strtok>
 80021c2:	6178      	str	r0, [r7, #20]
	    while(token !=NULL){
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1de      	bne.n	8002188 <nmea_speed+0x24>
	    }
	    for(int i = 0; i<cnt; i++){
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	e03e      	b.n	800224e <nmea_speed+0xea>
	       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 80021d0:	4a2c      	ldr	r2, [pc, #176]	; (8002284 <nmea_speed+0x120>)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d8:	492c      	ldr	r1, [pc, #176]	; (800228c <nmea_speed+0x128>)
 80021da:	4618      	mov	r0, r3
 80021dc:	f010 feb4 	bl	8012f48 <strstr>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d030      	beq.n	8002248 <nmea_speed+0xe4>
 80021e6:	4a27      	ldr	r2, [pc, #156]	; (8002284 <nmea_speed+0x120>)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fbf3 	bl	80019da <gps_checksum>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d026      	beq.n	8002248 <nmea_speed+0xe4>
	           if(strstr(data[i], "GNRMC")!=NULL){
 80021fa:	4a22      	ldr	r2, [pc, #136]	; (8002284 <nmea_speed+0x120>)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	4923      	ldr	r1, [pc, #140]	; (8002290 <nmea_speed+0x12c>)
 8002204:	4618      	mov	r0, r3
 8002206:	f010 fe9f 	bl	8012f48 <strstr>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <nmea_speed+0xbe>
	               nmea_GNRMC(gps_data, data[i]);
 8002210:	4a1c      	ldr	r2, [pc, #112]	; (8002284 <nmea_speed+0x120>)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002218:	4619      	mov	r1, r3
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff fe80 	bl	8001f20 <nmea_GNRMC>
 8002220:	e012      	b.n	8002248 <nmea_speed+0xe4>
	           }
	           else if(strstr(data[i], "GNGSA")!=NULL){
 8002222:	4a18      	ldr	r2, [pc, #96]	; (8002284 <nmea_speed+0x120>)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222a:	491a      	ldr	r1, [pc, #104]	; (8002294 <nmea_speed+0x130>)
 800222c:	4618      	mov	r0, r3
 800222e:	f010 fe8b 	bl	8012f48 <strstr>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d007      	beq.n	8002248 <nmea_speed+0xe4>
	                          nmea_GPGSA(gps_data, data[i]);
 8002238:	4a12      	ldr	r2, [pc, #72]	; (8002284 <nmea_speed+0x120>)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002240:	4619      	mov	r1, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff fde4 	bl	8001e10 <nmea_GPGSA>
	    for(int i = 0; i<cnt; i++){
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3301      	adds	r3, #1
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	429a      	cmp	r2, r3
 8002254:	dbbc      	blt.n	80021d0 <nmea_speed+0x6c>
	                      }
	       }

	    }
	    for(int i = 0; i<cnt; i++) free(data[i]);
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	e009      	b.n	8002270 <nmea_speed+0x10c>
 800225c:	4a09      	ldr	r2, [pc, #36]	; (8002284 <nmea_speed+0x120>)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002264:	4618      	mov	r0, r3
 8002266:	f00e fe6d 	bl	8010f44 <free>
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	3301      	adds	r3, #1
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	429a      	cmp	r2, r3
 8002276:	dbf1      	blt.n	800225c <nmea_speed+0xf8>

}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	371c      	adds	r7, #28
 800227e:	46bd      	mov	sp, r7
 8002280:	bd90      	pop	{r4, r7, pc}
 8002282:	bf00      	nop
 8002284:	20000874 	.word	0x20000874
 8002288:	08016cdc 	.word	0x08016cdc
 800228c:	08016ce0 	.word	0x08016ce0
 8002290:	08016ce4 	.word	0x08016ce4
 8002294:	08016cec 	.word	0x08016cec

08002298 <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h>  // For memcpy


void ssd1306_Reset(void) {
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af04      	add	r7, sp, #16
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	9302      	str	r3, [sp, #8]
 80022b8:	2301      	movs	r3, #1
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	1dfb      	adds	r3, r7, #7
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2301      	movs	r3, #1
 80022c2:	2200      	movs	r2, #0
 80022c4:	2178      	movs	r1, #120	; 0x78
 80022c6:	4803      	ldr	r0, [pc, #12]	; (80022d4 <ssd1306_WriteCommand+0x2c>)
 80022c8:	f004 fb32 	bl	8006930 <HAL_I2C_Mem_Write>
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000414 	.word	0x20000414

080022d8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af04      	add	r7, sp, #16
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	f04f 32ff 	mov.w	r2, #4294967295
 80022ea:	9202      	str	r2, [sp, #8]
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2301      	movs	r3, #1
 80022f4:	2240      	movs	r2, #64	; 0x40
 80022f6:	2178      	movs	r1, #120	; 0x78
 80022f8:	4803      	ldr	r0, [pc, #12]	; (8002308 <ssd1306_WriteData+0x30>)
 80022fa:	f004 fb19 	bl	8006930 <HAL_I2C_Mem_Write>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000414 	.word	0x20000414

0800230c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002310:	f7ff ffc2 	bl	8002298 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002314:	2064      	movs	r0, #100	; 0x64
 8002316:	f002 fa7d 	bl	8004814 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800231a:	2000      	movs	r0, #0
 800231c:	f000 fba0 	bl	8002a60 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002320:	2020      	movs	r0, #32
 8002322:	f7ff ffc1 	bl	80022a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002326:	2000      	movs	r0, #0
 8002328:	f7ff ffbe 	bl	80022a8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800232c:	20b0      	movs	r0, #176	; 0xb0
 800232e:	f7ff ffbb 	bl	80022a8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002332:	20c8      	movs	r0, #200	; 0xc8
 8002334:	f7ff ffb8 	bl	80022a8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002338:	2000      	movs	r0, #0
 800233a:	f7ff ffb5 	bl	80022a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800233e:	2010      	movs	r0, #16
 8002340:	f7ff ffb2 	bl	80022a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002344:	2040      	movs	r0, #64	; 0x40
 8002346:	f7ff ffaf 	bl	80022a8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800234a:	20ff      	movs	r0, #255	; 0xff
 800234c:	f000 fb75 	bl	8002a3a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002350:	20a1      	movs	r0, #161	; 0xa1
 8002352:	f7ff ffa9 	bl	80022a8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002356:	20a6      	movs	r0, #166	; 0xa6
 8002358:	f7ff ffa6 	bl	80022a8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800235c:	20a8      	movs	r0, #168	; 0xa8
 800235e:	f7ff ffa3 	bl	80022a8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002362:	203f      	movs	r0, #63	; 0x3f
 8002364:	f7ff ffa0 	bl	80022a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002368:	20a4      	movs	r0, #164	; 0xa4
 800236a:	f7ff ff9d 	bl	80022a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800236e:	20d3      	movs	r0, #211	; 0xd3
 8002370:	f7ff ff9a 	bl	80022a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002374:	2000      	movs	r0, #0
 8002376:	f7ff ff97 	bl	80022a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800237a:	20d5      	movs	r0, #213	; 0xd5
 800237c:	f7ff ff94 	bl	80022a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002380:	20f0      	movs	r0, #240	; 0xf0
 8002382:	f7ff ff91 	bl	80022a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002386:	20d9      	movs	r0, #217	; 0xd9
 8002388:	f7ff ff8e 	bl	80022a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800238c:	2022      	movs	r0, #34	; 0x22
 800238e:	f7ff ff8b 	bl	80022a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002392:	20da      	movs	r0, #218	; 0xda
 8002394:	f7ff ff88 	bl	80022a8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002398:	2012      	movs	r0, #18
 800239a:	f7ff ff85 	bl	80022a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800239e:	20db      	movs	r0, #219	; 0xdb
 80023a0:	f7ff ff82 	bl	80022a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80023a4:	2020      	movs	r0, #32
 80023a6:	f7ff ff7f 	bl	80022a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80023aa:	208d      	movs	r0, #141	; 0x8d
 80023ac:	f7ff ff7c 	bl	80022a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80023b0:	2014      	movs	r0, #20
 80023b2:	f7ff ff79 	bl	80022a8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80023b6:	2001      	movs	r0, #1
 80023b8:	f000 fb52 	bl	8002a60 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80023bc:	2000      	movs	r0, #0
 80023be:	f000 f80f 	bl	80023e0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80023c2:	f000 f825 	bl	8002410 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <ssd1306_Init+0xd0>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <ssd1306_Init+0xd0>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80023d2:	4b02      	ldr	r3, [pc, #8]	; (80023dc <ssd1306_Init+0xd0>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	711a      	strb	r2, [r3, #4]
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000cb0 	.word	0x20000cb0

080023e0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <ssd1306_Fill+0x14>
 80023f0:	2300      	movs	r3, #0
 80023f2:	e000      	b.n	80023f6 <ssd1306_Fill+0x16>
 80023f4:	23ff      	movs	r3, #255	; 0xff
 80023f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023fa:	4619      	mov	r1, r3
 80023fc:	4803      	ldr	r0, [pc, #12]	; (800240c <ssd1306_Fill+0x2c>)
 80023fe:	f010 fd2c 	bl	8012e5a <memset>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200008b0 	.word	0x200008b0

08002410 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002416:	2300      	movs	r3, #0
 8002418:	71fb      	strb	r3, [r7, #7]
 800241a:	e016      	b.n	800244a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	3b50      	subs	r3, #80	; 0x50
 8002420:	b2db      	uxtb	r3, r3
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ff40 	bl	80022a8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002428:	2000      	movs	r0, #0
 800242a:	f7ff ff3d 	bl	80022a8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800242e:	2010      	movs	r0, #16
 8002430:	f7ff ff3a 	bl	80022a8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	01db      	lsls	r3, r3, #7
 8002438:	4a08      	ldr	r2, [pc, #32]	; (800245c <ssd1306_UpdateScreen+0x4c>)
 800243a:	4413      	add	r3, r2
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff ff4a 	bl	80022d8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	3301      	adds	r3, #1
 8002448:	71fb      	strb	r3, [r7, #7]
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2b07      	cmp	r3, #7
 800244e:	d9e5      	bls.n	800241c <ssd1306_UpdateScreen+0xc>
    }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	200008b0 	.word	0x200008b0

08002460 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
 800246a:	460b      	mov	r3, r1
 800246c:	71bb      	strb	r3, [r7, #6]
 800246e:	4613      	mov	r3, r2
 8002470:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	2b00      	cmp	r3, #0
 8002478:	db3d      	blt.n	80024f6 <ssd1306_DrawPixel+0x96>
 800247a:	79bb      	ldrb	r3, [r7, #6]
 800247c:	2b3f      	cmp	r3, #63	; 0x3f
 800247e:	d83a      	bhi.n	80024f6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002480:	797b      	ldrb	r3, [r7, #5]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d11a      	bne.n	80024bc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002486:	79fa      	ldrb	r2, [r7, #7]
 8002488:	79bb      	ldrb	r3, [r7, #6]
 800248a:	08db      	lsrs	r3, r3, #3
 800248c:	b2d8      	uxtb	r0, r3
 800248e:	4603      	mov	r3, r0
 8002490:	01db      	lsls	r3, r3, #7
 8002492:	4413      	add	r3, r2
 8002494:	4a1b      	ldr	r2, [pc, #108]	; (8002504 <ssd1306_DrawPixel+0xa4>)
 8002496:	5cd3      	ldrb	r3, [r2, r3]
 8002498:	b25a      	sxtb	r2, r3
 800249a:	79bb      	ldrb	r3, [r7, #6]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	2101      	movs	r1, #1
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	b25b      	sxtb	r3, r3
 80024a8:	4313      	orrs	r3, r2
 80024aa:	b259      	sxtb	r1, r3
 80024ac:	79fa      	ldrb	r2, [r7, #7]
 80024ae:	4603      	mov	r3, r0
 80024b0:	01db      	lsls	r3, r3, #7
 80024b2:	4413      	add	r3, r2
 80024b4:	b2c9      	uxtb	r1, r1
 80024b6:	4a13      	ldr	r2, [pc, #76]	; (8002504 <ssd1306_DrawPixel+0xa4>)
 80024b8:	54d1      	strb	r1, [r2, r3]
 80024ba:	e01d      	b.n	80024f8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80024bc:	79fa      	ldrb	r2, [r7, #7]
 80024be:	79bb      	ldrb	r3, [r7, #6]
 80024c0:	08db      	lsrs	r3, r3, #3
 80024c2:	b2d8      	uxtb	r0, r3
 80024c4:	4603      	mov	r3, r0
 80024c6:	01db      	lsls	r3, r3, #7
 80024c8:	4413      	add	r3, r2
 80024ca:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <ssd1306_DrawPixel+0xa4>)
 80024cc:	5cd3      	ldrb	r3, [r2, r3]
 80024ce:	b25a      	sxtb	r2, r3
 80024d0:	79bb      	ldrb	r3, [r7, #6]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	2101      	movs	r1, #1
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	b25b      	sxtb	r3, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	b25b      	sxtb	r3, r3
 80024e2:	4013      	ands	r3, r2
 80024e4:	b259      	sxtb	r1, r3
 80024e6:	79fa      	ldrb	r2, [r7, #7]
 80024e8:	4603      	mov	r3, r0
 80024ea:	01db      	lsls	r3, r3, #7
 80024ec:	4413      	add	r3, r2
 80024ee:	b2c9      	uxtb	r1, r1
 80024f0:	4a04      	ldr	r2, [pc, #16]	; (8002504 <ssd1306_DrawPixel+0xa4>)
 80024f2:	54d1      	strb	r1, [r2, r3]
 80024f4:	e000      	b.n	80024f8 <ssd1306_DrawPixel+0x98>
        return;
 80024f6:	bf00      	nop
    }
}
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	200008b0 	.word	0x200008b0

08002508 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	4604      	mov	r4, r0
 8002510:	1d38      	adds	r0, r7, #4
 8002512:	e880 0006 	stmia.w	r0, {r1, r2}
 8002516:	461a      	mov	r2, r3
 8002518:	4623      	mov	r3, r4
 800251a:	73fb      	strb	r3, [r7, #15]
 800251c:	4613      	mov	r3, r2
 800251e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	2b1f      	cmp	r3, #31
 8002524:	d902      	bls.n	800252c <ssd1306_WriteChar+0x24>
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b7e      	cmp	r3, #126	; 0x7e
 800252a:	d901      	bls.n	8002530 <ssd1306_WriteChar+0x28>
        return 0;
 800252c:	2300      	movs	r3, #0
 800252e:	e06d      	b.n	800260c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002530:	4b38      	ldr	r3, [pc, #224]	; (8002614 <ssd1306_WriteChar+0x10c>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	793b      	ldrb	r3, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	2b80      	cmp	r3, #128	; 0x80
 800253c:	dc06      	bgt.n	800254c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800253e:	4b35      	ldr	r3, [pc, #212]	; (8002614 <ssd1306_WriteChar+0x10c>)
 8002540:	885b      	ldrh	r3, [r3, #2]
 8002542:	461a      	mov	r2, r3
 8002544:	797b      	ldrb	r3, [r7, #5]
 8002546:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002548:	2b40      	cmp	r3, #64	; 0x40
 800254a:	dd01      	ble.n	8002550 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800254c:	2300      	movs	r3, #0
 800254e:	e05d      	b.n	800260c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002550:	2300      	movs	r3, #0
 8002552:	61fb      	str	r3, [r7, #28]
 8002554:	e04c      	b.n	80025f0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	3b20      	subs	r3, #32
 800255c:	7979      	ldrb	r1, [r7, #5]
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4619      	mov	r1, r3
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	440b      	add	r3, r1
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002570:	2300      	movs	r3, #0
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	e034      	b.n	80025e0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d012      	beq.n	80025ac <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002586:	4b23      	ldr	r3, [pc, #140]	; (8002614 <ssd1306_WriteChar+0x10c>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	4413      	add	r3, r2
 8002592:	b2d8      	uxtb	r0, r3
 8002594:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <ssd1306_WriteChar+0x10c>)
 8002596:	885b      	ldrh	r3, [r3, #2]
 8002598:	b2da      	uxtb	r2, r3
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	4413      	add	r3, r2
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	7bba      	ldrb	r2, [r7, #14]
 80025a4:	4619      	mov	r1, r3
 80025a6:	f7ff ff5b 	bl	8002460 <ssd1306_DrawPixel>
 80025aa:	e016      	b.n	80025da <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <ssd1306_WriteChar+0x10c>)
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	b2d8      	uxtb	r0, r3
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <ssd1306_WriteChar+0x10c>)
 80025bc:	885b      	ldrh	r3, [r3, #2]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	b2d9      	uxtb	r1, r3
 80025c8:	7bbb      	ldrb	r3, [r7, #14]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf0c      	ite	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	2300      	movne	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	f7ff ff43 	bl	8002460 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	3301      	adds	r3, #1
 80025de:	61bb      	str	r3, [r7, #24]
 80025e0:	793b      	ldrb	r3, [r7, #4]
 80025e2:	461a      	mov	r2, r3
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d3c5      	bcc.n	8002576 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3301      	adds	r3, #1
 80025ee:	61fb      	str	r3, [r7, #28]
 80025f0:	797b      	ldrb	r3, [r7, #5]
 80025f2:	461a      	mov	r2, r3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d3ad      	bcc.n	8002556 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <ssd1306_WriteChar+0x10c>)
 80025fc:	881a      	ldrh	r2, [r3, #0]
 80025fe:	793b      	ldrb	r3, [r7, #4]
 8002600:	b29b      	uxth	r3, r3
 8002602:	4413      	add	r3, r2
 8002604:	b29a      	uxth	r2, r3
 8002606:	4b03      	ldr	r3, [pc, #12]	; (8002614 <ssd1306_WriteChar+0x10c>)
 8002608:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800260a:	7bfb      	ldrb	r3, [r7, #15]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3724      	adds	r7, #36	; 0x24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd90      	pop	{r4, r7, pc}
 8002614:	20000cb0 	.word	0x20000cb0

08002618 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	1d38      	adds	r0, r7, #4
 8002622:	e880 0006 	stmia.w	r0, {r1, r2}
 8002626:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002628:	e012      	b.n	8002650 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	7818      	ldrb	r0, [r3, #0]
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	1d3a      	adds	r2, r7, #4
 8002632:	ca06      	ldmia	r2, {r1, r2}
 8002634:	f7ff ff68 	bl	8002508 <ssd1306_WriteChar>
 8002638:	4603      	mov	r3, r0
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d002      	beq.n	800264a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	e008      	b.n	800265c <ssd1306_WriteString+0x44>
        }
        str++;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3301      	adds	r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1e8      	bne.n	800262a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	781b      	ldrb	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	460a      	mov	r2, r1
 800266e:	71fb      	strb	r3, [r7, #7]
 8002670:	4613      	mov	r3, r2
 8002672:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	b29a      	uxth	r2, r3
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <ssd1306_SetCursor+0x2c>)
 800267a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800267c:	79bb      	ldrb	r3, [r7, #6]
 800267e:	b29a      	uxth	r2, r3
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <ssd1306_SetCursor+0x2c>)
 8002682:	805a      	strh	r2, [r3, #2]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	20000cb0 	.word	0x20000cb0

08002694 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	4604      	mov	r4, r0
 800269c:	4608      	mov	r0, r1
 800269e:	4611      	mov	r1, r2
 80026a0:	461a      	mov	r2, r3
 80026a2:	4623      	mov	r3, r4
 80026a4:	71fb      	strb	r3, [r7, #7]
 80026a6:	4603      	mov	r3, r0
 80026a8:	71bb      	strb	r3, [r7, #6]
 80026aa:	460b      	mov	r3, r1
 80026ac:	717b      	strb	r3, [r7, #5]
 80026ae:	4613      	mov	r3, r2
 80026b0:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80026b2:	797a      	ldrb	r2, [r7, #5]
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	bfb8      	it	lt
 80026bc:	425b      	neglt	r3, r3
 80026be:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80026c0:	793a      	ldrb	r2, [r7, #4]
 80026c2:	79bb      	ldrb	r3, [r7, #6]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	bfb8      	it	lt
 80026ca:	425b      	neglt	r3, r3
 80026cc:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80026ce:	79fa      	ldrb	r2, [r7, #7]
 80026d0:	797b      	ldrb	r3, [r7, #5]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d201      	bcs.n	80026da <ssd1306_Line+0x46>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e001      	b.n	80026de <ssd1306_Line+0x4a>
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80026e0:	79ba      	ldrb	r2, [r7, #6]
 80026e2:	793b      	ldrb	r3, [r7, #4]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d201      	bcs.n	80026ec <ssd1306_Line+0x58>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e001      	b.n	80026f0 <ssd1306_Line+0x5c>
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295
 80026f0:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80026fa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80026fe:	7939      	ldrb	r1, [r7, #4]
 8002700:	797b      	ldrb	r3, [r7, #5]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff feac 	bl	8002460 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002708:	e024      	b.n	8002754 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800270a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800270e:	79b9      	ldrb	r1, [r7, #6]
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fea4 	bl	8002460 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	425b      	negs	r3, r3
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	429a      	cmp	r2, r3
 8002726:	dd08      	ble.n	800273a <ssd1306_Line+0xa6>
            error -= deltaY;
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	b2da      	uxtb	r2, r3
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	4413      	add	r3, r2
 8002738:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	429a      	cmp	r2, r3
 8002740:	da08      	bge.n	8002754 <ssd1306_Line+0xc0>
            error += deltaX;
 8002742:	69fa      	ldr	r2, [r7, #28]
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	4413      	add	r3, r2
 8002748:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	79bb      	ldrb	r3, [r7, #6]
 8002750:	4413      	add	r3, r2
 8002752:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002754:	79fa      	ldrb	r2, [r7, #7]
 8002756:	797b      	ldrb	r3, [r7, #5]
 8002758:	429a      	cmp	r2, r3
 800275a:	d1d6      	bne.n	800270a <ssd1306_Line+0x76>
 800275c:	79ba      	ldrb	r2, [r7, #6]
 800275e:	793b      	ldrb	r3, [r7, #4]
 8002760:	429a      	cmp	r2, r3
 8002762:	d1d2      	bne.n	800270a <ssd1306_Line+0x76>
        }
    }
    return;
 8002764:	bf00      	nop
}
 8002766:	3724      	adds	r7, #36	; 0x24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd90      	pop	{r4, r7, pc}

0800276c <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	4604      	mov	r4, r0
 8002774:	4608      	mov	r0, r1
 8002776:	4611      	mov	r1, r2
 8002778:	461a      	mov	r2, r3
 800277a:	4623      	mov	r3, r4
 800277c:	71fb      	strb	r3, [r7, #7]
 800277e:	4603      	mov	r3, r0
 8002780:	71bb      	strb	r3, [r7, #6]
 8002782:	460b      	mov	r3, r1
 8002784:	717b      	strb	r3, [r7, #5]
 8002786:	4613      	mov	r3, r2
 8002788:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 800278a:	797b      	ldrb	r3, [r7, #5]
 800278c:	425b      	negs	r3, r3
 800278e:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8002794:	797b      	ldrb	r3, [r7, #5]
 8002796:	f1c3 0301 	rsb	r3, r3, #1
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	db65      	blt.n	8002872 <ssd1306_DrawCircle+0x106>
 80027a6:	79bb      	ldrb	r3, [r7, #6]
 80027a8:	2b3f      	cmp	r3, #63	; 0x3f
 80027aa:	d862      	bhi.n	8002872 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	79fa      	ldrb	r2, [r7, #7]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	b2d8      	uxtb	r0, r3
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	79bb      	ldrb	r3, [r7, #6]
 80027bc:	4413      	add	r3, r2
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	793a      	ldrb	r2, [r7, #4]
 80027c2:	4619      	mov	r1, r3
 80027c4:	f7ff fe4c 	bl	8002460 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	4413      	add	r3, r2
 80027d0:	b2d8      	uxtb	r0, r3
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	79bb      	ldrb	r3, [r7, #6]
 80027d8:	4413      	add	r3, r2
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	793a      	ldrb	r2, [r7, #4]
 80027de:	4619      	mov	r1, r3
 80027e0:	f7ff fe3e 	bl	8002460 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	4413      	add	r3, r2
 80027ec:	b2d8      	uxtb	r0, r3
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	79ba      	ldrb	r2, [r7, #6]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	793a      	ldrb	r2, [r7, #4]
 80027fa:	4619      	mov	r1, r3
 80027fc:	f7ff fe30 	bl	8002460 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	79fa      	ldrb	r2, [r7, #7]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	b2d8      	uxtb	r0, r3
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	79ba      	ldrb	r2, [r7, #6]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	793a      	ldrb	r2, [r7, #4]
 8002816:	4619      	mov	r1, r3
 8002818:	f7ff fe22 	bl	8002460 <ssd1306_DrawPixel>
        e2 = err;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	429a      	cmp	r2, r3
 8002826:	dc13      	bgt.n	8002850 <ssd1306_DrawCircle+0xe4>
            y++;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	3301      	adds	r3, #1
 800282c:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	3301      	adds	r3, #1
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	425b      	negs	r3, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	429a      	cmp	r2, r3
 8002842:	d105      	bne.n	8002850 <ssd1306_DrawCircle+0xe4>
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	429a      	cmp	r2, r3
 800284a:	dc01      	bgt.n	8002850 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	dd08      	ble.n	800286a <ssd1306_DrawCircle+0xfe>
            x++;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	3301      	adds	r3, #1
 800285c:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	3301      	adds	r3, #1
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4413      	add	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b00      	cmp	r3, #0
 800286e:	dd9d      	ble.n	80027ac <ssd1306_DrawCircle+0x40>

    return;
 8002870:	e000      	b.n	8002874 <ssd1306_DrawCircle+0x108>
        return;
 8002872:	bf00      	nop
}
 8002874:	371c      	adds	r7, #28
 8002876:	46bd      	mov	sp, r7
 8002878:	bd90      	pop	{r4, r7, pc}

0800287a <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800287a:	b590      	push	{r4, r7, lr}
 800287c:	b085      	sub	sp, #20
 800287e:	af02      	add	r7, sp, #8
 8002880:	4604      	mov	r4, r0
 8002882:	4608      	mov	r0, r1
 8002884:	4611      	mov	r1, r2
 8002886:	461a      	mov	r2, r3
 8002888:	4623      	mov	r3, r4
 800288a:	71fb      	strb	r3, [r7, #7]
 800288c:	4603      	mov	r3, r0
 800288e:	71bb      	strb	r3, [r7, #6]
 8002890:	460b      	mov	r3, r1
 8002892:	717b      	strb	r3, [r7, #5]
 8002894:	4613      	mov	r3, r2
 8002896:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8002898:	79bc      	ldrb	r4, [r7, #6]
 800289a:	797a      	ldrb	r2, [r7, #5]
 800289c:	79b9      	ldrb	r1, [r7, #6]
 800289e:	79f8      	ldrb	r0, [r7, #7]
 80028a0:	7e3b      	ldrb	r3, [r7, #24]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	4623      	mov	r3, r4
 80028a6:	f7ff fef5 	bl	8002694 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80028aa:	793c      	ldrb	r4, [r7, #4]
 80028ac:	797a      	ldrb	r2, [r7, #5]
 80028ae:	79b9      	ldrb	r1, [r7, #6]
 80028b0:	7978      	ldrb	r0, [r7, #5]
 80028b2:	7e3b      	ldrb	r3, [r7, #24]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	4623      	mov	r3, r4
 80028b8:	f7ff feec 	bl	8002694 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80028bc:	793c      	ldrb	r4, [r7, #4]
 80028be:	79fa      	ldrb	r2, [r7, #7]
 80028c0:	7939      	ldrb	r1, [r7, #4]
 80028c2:	7978      	ldrb	r0, [r7, #5]
 80028c4:	7e3b      	ldrb	r3, [r7, #24]
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	4623      	mov	r3, r4
 80028ca:	f7ff fee3 	bl	8002694 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80028ce:	79bc      	ldrb	r4, [r7, #6]
 80028d0:	79fa      	ldrb	r2, [r7, #7]
 80028d2:	7939      	ldrb	r1, [r7, #4]
 80028d4:	79f8      	ldrb	r0, [r7, #7]
 80028d6:	7e3b      	ldrb	r3, [r7, #24]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	4623      	mov	r3, r4
 80028dc:	f7ff feda 	bl	8002694 <ssd1306_Line>

    return;
 80028e0:	bf00      	nop
}
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd90      	pop	{r4, r7, pc}

080028e8 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4604      	mov	r4, r0
 80028f0:	4608      	mov	r0, r1
 80028f2:	4611      	mov	r1, r2
 80028f4:	461a      	mov	r2, r3
 80028f6:	4623      	mov	r3, r4
 80028f8:	71fb      	strb	r3, [r7, #7]
 80028fa:	4603      	mov	r3, r0
 80028fc:	71bb      	strb	r3, [r7, #6]
 80028fe:	460b      	mov	r3, r1
 8002900:	717b      	strb	r3, [r7, #5]
 8002902:	4613      	mov	r3, r2
 8002904:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002906:	79fa      	ldrb	r2, [r7, #7]
 8002908:	797b      	ldrb	r3, [r7, #5]
 800290a:	4293      	cmp	r3, r2
 800290c:	bf28      	it	cs
 800290e:	4613      	movcs	r3, r2
 8002910:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002912:	797a      	ldrb	r2, [r7, #5]
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	4293      	cmp	r3, r2
 8002918:	bf38      	it	cc
 800291a:	4613      	movcc	r3, r2
 800291c:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 800291e:	79ba      	ldrb	r2, [r7, #6]
 8002920:	793b      	ldrb	r3, [r7, #4]
 8002922:	4293      	cmp	r3, r2
 8002924:	bf28      	it	cs
 8002926:	4613      	movcs	r3, r2
 8002928:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 800292a:	793a      	ldrb	r2, [r7, #4]
 800292c:	79bb      	ldrb	r3, [r7, #6]
 800292e:	4293      	cmp	r3, r2
 8002930:	bf38      	it	cc
 8002932:	4613      	movcc	r3, r2
 8002934:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002936:	7afb      	ldrb	r3, [r7, #11]
 8002938:	73fb      	strb	r3, [r7, #15]
 800293a:	e017      	b.n	800296c <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800293c:	7b7b      	ldrb	r3, [r7, #13]
 800293e:	73bb      	strb	r3, [r7, #14]
 8002940:	e009      	b.n	8002956 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8002942:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002946:	7bf9      	ldrb	r1, [r7, #15]
 8002948:	7bbb      	ldrb	r3, [r7, #14]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fd88 	bl	8002460 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002950:	7bbb      	ldrb	r3, [r7, #14]
 8002952:	3301      	adds	r3, #1
 8002954:	73bb      	strb	r3, [r7, #14]
 8002956:	7bba      	ldrb	r2, [r7, #14]
 8002958:	7b3b      	ldrb	r3, [r7, #12]
 800295a:	429a      	cmp	r2, r3
 800295c:	d803      	bhi.n	8002966 <ssd1306_FillRectangle+0x7e>
 800295e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002962:	2b00      	cmp	r3, #0
 8002964:	daed      	bge.n	8002942 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	3301      	adds	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	7abb      	ldrb	r3, [r7, #10]
 8002970:	429a      	cmp	r2, r3
 8002972:	d803      	bhi.n	800297c <ssd1306_FillRectangle+0x94>
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b3f      	cmp	r3, #63	; 0x3f
 8002978:	d9e0      	bls.n	800293c <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 800297a:	bf00      	nop
 800297c:	bf00      	nop
}
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bd90      	pop	{r4, r7, pc}

08002984 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	603a      	str	r2, [r7, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
 8002992:	460b      	mov	r3, r1
 8002994:	71bb      	strb	r3, [r7, #6]
 8002996:	4613      	mov	r3, r2
 8002998:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800299a:	797b      	ldrb	r3, [r7, #5]
 800299c:	3307      	adds	r3, #7
 800299e:	2b00      	cmp	r3, #0
 80029a0:	da00      	bge.n	80029a4 <ssd1306_DrawBitmap+0x20>
 80029a2:	3307      	adds	r3, #7
 80029a4:	10db      	asrs	r3, r3, #3
 80029a6:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	db3e      	blt.n	8002a32 <ssd1306_DrawBitmap+0xae>
 80029b4:	79bb      	ldrb	r3, [r7, #6]
 80029b6:	2b3f      	cmp	r3, #63	; 0x3f
 80029b8:	d83b      	bhi.n	8002a32 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80029ba:	2300      	movs	r3, #0
 80029bc:	73bb      	strb	r3, [r7, #14]
 80029be:	e033      	b.n	8002a28 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80029c0:	2300      	movs	r3, #0
 80029c2:	737b      	strb	r3, [r7, #13]
 80029c4:	e026      	b.n	8002a14 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80029c6:	7b7b      	ldrb	r3, [r7, #13]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
 80029d6:	e00d      	b.n	80029f4 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80029d8:	7bbb      	ldrb	r3, [r7, #14]
 80029da:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80029de:	fb02 f303 	mul.w	r3, r2, r3
 80029e2:	7b7a      	ldrb	r2, [r7, #13]
 80029e4:	08d2      	lsrs	r2, r2, #3
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	4413      	add	r3, r2
 80029ea:	461a      	mov	r2, r3
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	4413      	add	r3, r2
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80029f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	da08      	bge.n	8002a0e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80029fc:	79fa      	ldrb	r2, [r7, #7]
 80029fe:	7b7b      	ldrb	r3, [r7, #13]
 8002a00:	4413      	add	r3, r2
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	7f3a      	ldrb	r2, [r7, #28]
 8002a06:	79b9      	ldrb	r1, [r7, #6]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fd29 	bl	8002460 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8002a0e:	7b7b      	ldrb	r3, [r7, #13]
 8002a10:	3301      	adds	r3, #1
 8002a12:	737b      	strb	r3, [r7, #13]
 8002a14:	7b7a      	ldrb	r2, [r7, #13]
 8002a16:	797b      	ldrb	r3, [r7, #5]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d3d4      	bcc.n	80029c6 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002a1c:	7bbb      	ldrb	r3, [r7, #14]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	73bb      	strb	r3, [r7, #14]
 8002a22:	79bb      	ldrb	r3, [r7, #6]
 8002a24:	3301      	adds	r3, #1
 8002a26:	71bb      	strb	r3, [r7, #6]
 8002a28:	7bba      	ldrb	r2, [r7, #14]
 8002a2a:	7e3b      	ldrb	r3, [r7, #24]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d3c7      	bcc.n	80029c0 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8002a30:	e000      	b.n	8002a34 <ssd1306_DrawBitmap+0xb0>
        return;
 8002a32:	bf00      	nop
}
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002a44:	2381      	movs	r3, #129	; 0x81
 8002a46:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fc2c 	bl	80022a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fc28 	bl	80022a8 <ssd1306_WriteCommand>
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002a70:	23af      	movs	r3, #175	; 0xaf
 8002a72:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <ssd1306_SetDisplayOn+0x38>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	715a      	strb	r2, [r3, #5]
 8002a7a:	e004      	b.n	8002a86 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002a7c:	23ae      	movs	r3, #174	; 0xae
 8002a7e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <ssd1306_SetDisplayOn+0x38>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fc0d 	bl	80022a8 <ssd1306_WriteCommand>
}
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000cb0 	.word	0x20000cb0
 8002a9c:	00000000 	.word	0x00000000

08002aa0 <statemachine>:
		};



//le code qui permet d'avoir les ecran de donnée que l'on souhaite, changeable a souhait on peut d'ailleur rajouter des état ou rajouter des fonctionnalité au sein de chaque état, pas encore décidé de la version définitive.
void statemachine(void){
 8002aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aa2:	ed2d 8b02 	vpush	{d8}
 8002aa6:	b0a1      	sub	sp, #132	; 0x84
 8002aa8:	af04      	add	r7, sp, #16
	switch(state){
 8002aaa:	4bc3      	ldr	r3, [pc, #780]	; (8002db8 <statemachine+0x318>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b05      	cmp	r3, #5
 8002ab0:	f201 8281 	bhi.w	8003fb6 <statemachine+0x1516>
 8002ab4:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <statemachine+0x1c>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002ad5 	.word	0x08002ad5
 8002ac0:	08002f43 	.word	0x08002f43
 8002ac4:	08003465 	.word	0x08003465
 8002ac8:	08003ab9 	.word	0x08003ab9
 8002acc:	08003c41 	.word	0x08003c41
 8002ad0:	08003e01 	.word	0x08003e01
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7ff fc83 	bl	80023e0 <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 8002ada:	2120      	movs	r1, #32
 8002adc:	2020      	movs	r0, #32
 8002ade:	f7ff fdc1 	bl	8002664 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 8002ae2:	49b6      	ldr	r1, [pc, #728]	; (8002dbc <statemachine+0x31c>)
 8002ae4:	48b6      	ldr	r0, [pc, #728]	; (8002dc0 <statemachine+0x320>)
 8002ae6:	f7ff fa8d 	bl	8002004 <nmea_parse>
				 if(myData.speed>=vitmax){
 8002aea:	4bb5      	ldr	r3, [pc, #724]	; (8002dc0 <statemachine+0x320>)
 8002aec:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002af0:	4bb4      	ldr	r3, [pc, #720]	; (8002dc4 <statemachine+0x324>)
 8002af2:	edd3 7a00 	vldr	s15, [r3]
 8002af6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afe:	db03      	blt.n	8002b08 <statemachine+0x68>
									 vitmax=myData.speed;
 8002b00:	4baf      	ldr	r3, [pc, #700]	; (8002dc0 <statemachine+0x320>)
 8002b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b04:	4aaf      	ldr	r2, [pc, #700]	; (8002dc4 <statemachine+0x324>)
 8002b06:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
								 float sec=0;
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	66bb      	str	r3, [r7, #104]	; 0x68
								 if (myData.speed!=0){
 8002b14:	4baa      	ldr	r3, [pc, #680]	; (8002dc0 <statemachine+0x320>)
 8002b16:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002b1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b22:	d032      	beq.n	8002b8a <statemachine+0xea>
									 pace=1000/(60*myData.speed);
 8002b24:	4ba6      	ldr	r3, [pc, #664]	; (8002dc0 <statemachine+0x320>)
 8002b26:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002b2a:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8002dc8 <statemachine+0x328>
 8002b2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b32:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8002dcc <statemachine+0x32c>
 8002b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b3a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
									 sec=(pace-floor(pace))*60;
 8002b3e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002b40:	f7fd fd12 	bl	8000568 <__aeabi_f2d>
 8002b44:	4604      	mov	r4, r0
 8002b46:	460d      	mov	r5, r1
 8002b48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002b4a:	f7fd fd0d 	bl	8000568 <__aeabi_f2d>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	ec43 2b10 	vmov	d0, r2, r3
 8002b56:	f012 ffdb 	bl	8015b10 <floor>
 8002b5a:	ec53 2b10 	vmov	r2, r3, d0
 8002b5e:	4620      	mov	r0, r4
 8002b60:	4629      	mov	r1, r5
 8002b62:	f7fd fba1 	bl	80002a8 <__aeabi_dsub>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	4b97      	ldr	r3, [pc, #604]	; (8002dd0 <statemachine+0x330>)
 8002b74:	f7fd fd50 	bl	8000618 <__aeabi_dmul>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f7fe f842 	bl	8000c08 <__aeabi_d2f>
 8002b84:	4603      	mov	r3, r0
 8002b86:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b88:	e001      	b.n	8002b8e <statemachine+0xee>
								 }
								 else {
									 pace=9999;//en cas de division par 0, techniquement le temps devient infini mais ce n'est pas intérréssant
 8002b8a:	4b92      	ldr	r3, [pc, #584]	; (8002dd4 <statemachine+0x334>)
 8002b8c:	66fb      	str	r3, [r7, #108]	; 0x6c
								 }


				  switch(spdstate){
 8002b8e:	4b92      	ldr	r3, [pc, #584]	; (8002dd8 <statemachine+0x338>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	f000 815c 	beq.w	8002e50 <statemachine+0x3b0>
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	f300 81c2 	bgt.w	8002f22 <statemachine+0x482>
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <statemachine+0x10a>
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	f000 80a0 	beq.w	8002ce8 <statemachine+0x248>
 8002ba8:	e1bb      	b.n	8002f22 <statemachine+0x482>


				 case STATE_SUMMARY:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 8002baa:	4b85      	ldr	r3, [pc, #532]	; (8002dc0 <statemachine+0x320>)
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d16f      	bne.n	8002c92 <statemachine+0x1f2>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 8002bb2:	2014      	movs	r0, #20
 8002bb4:	f00e f9be 	bl	8010f34 <malloc>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	60fb      	str	r3, [r7, #12]
					 				 						snprintf(str,15, "MaxV=%.1f",vitmax*3.6);//amélioration possible la stocker en eeprom
 8002bbc:	4b81      	ldr	r3, [pc, #516]	; (8002dc4 <statemachine+0x324>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fd fcd1 	bl	8000568 <__aeabi_f2d>
 8002bc6:	a378      	add	r3, pc, #480	; (adr r3, 8002da8 <statemachine+0x308>)
 8002bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bcc:	f7fd fd24 	bl	8000618 <__aeabi_dmul>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	e9cd 2300 	strd	r2, r3, [sp]
 8002bd8:	4a80      	ldr	r2, [pc, #512]	; (8002ddc <statemachine+0x33c>)
 8002bda:	210f      	movs	r1, #15
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f010 f8a5 	bl	8012d2c <sniprintf>
					 				 						ssd1306_SetCursor(32, 32);
 8002be2:	2120      	movs	r1, #32
 8002be4:	2020      	movs	r0, #32
 8002be6:	f7ff fd3d 	bl	8002664 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002bea:	4a7d      	ldr	r2, [pc, #500]	; (8002de0 <statemachine+0x340>)
 8002bec:	2301      	movs	r3, #1
 8002bee:	ca06      	ldmia	r2, {r1, r2}
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f7ff fd11 	bl	8002618 <ssd1306_WriteString>
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 8002bf6:	4b72      	ldr	r3, [pc, #456]	; (8002dc0 <statemachine+0x320>)
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fcb4 	bl	8000568 <__aeabi_f2d>
 8002c00:	a369      	add	r3, pc, #420	; (adr r3, 8002da8 <statemachine+0x308>)
 8002c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c06:	f7fd fd07 	bl	8000618 <__aeabi_dmul>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	e9cd 2300 	strd	r2, r3, [sp]
 8002c12:	4a74      	ldr	r2, [pc, #464]	; (8002de4 <statemachine+0x344>)
 8002c14:	210f      	movs	r1, #15
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f010 f888 	bl	8012d2c <sniprintf>
					 				 						ssd1306_SetCursor(32, 42);
 8002c1c:	212a      	movs	r1, #42	; 0x2a
 8002c1e:	2020      	movs	r0, #32
 8002c20:	f7ff fd20 	bl	8002664 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002c24:	4a6e      	ldr	r2, [pc, #440]	; (8002de0 <statemachine+0x340>)
 8002c26:	2301      	movs	r3, #1
 8002c28:	ca06      	ldmia	r2, {r1, r2}
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7ff fcf4 	bl	8002618 <ssd1306_WriteString>
					 				 						snprintf(str,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));//affichage au format minute puis seconde
 8002c30:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002c32:	f7fd fc99 	bl	8000568 <__aeabi_f2d>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	ec43 2b10 	vmov	d0, r2, r3
 8002c3e:	f012 ff67 	bl	8015b10 <floor>
 8002c42:	eeb0 8a40 	vmov.f32	s16, s0
 8002c46:	eef0 8a60 	vmov.f32	s17, s1
 8002c4a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002c4c:	f7fd fc8c 	bl	8000568 <__aeabi_f2d>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	ec43 2b10 	vmov	d0, r2, r3
 8002c58:	f012 ff5a 	bl	8015b10 <floor>
 8002c5c:	eeb0 7a40 	vmov.f32	s14, s0
 8002c60:	eef0 7a60 	vmov.f32	s15, s1
 8002c64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002c68:	ed8d 8b00 	vstr	d8, [sp]
 8002c6c:	4a5e      	ldr	r2, [pc, #376]	; (8002de8 <statemachine+0x348>)
 8002c6e:	210f      	movs	r1, #15
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f010 f85b 	bl	8012d2c <sniprintf>
					 				 						ssd1306_SetCursor(32, 52);
 8002c76:	2134      	movs	r1, #52	; 0x34
 8002c78:	2020      	movs	r0, #32
 8002c7a:	f7ff fcf3 	bl	8002664 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002c7e:	4a58      	ldr	r2, [pc, #352]	; (8002de0 <statemachine+0x340>)
 8002c80:	2301      	movs	r3, #1
 8002c82:	ca06      	ldmia	r2, {r1, r2}
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f7ff fcc7 	bl	8002618 <ssd1306_WriteString>
					 				 						free(str);
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f00e f95a 	bl	8010f44 <free>
 8002c90:	e01b      	b.n	8002cca <statemachine+0x22a>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002c92:	2014      	movs	r0, #20
 8002c94:	f00e f94e 	bl	8010f34 <malloc>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	613b      	str	r3, [r7, #16]
					 				 						ssd1306_SetCursor(32, 32);
 8002c9c:	2120      	movs	r1, #32
 8002c9e:	2020      	movs	r0, #32
 8002ca0:	f7ff fce0 	bl	8002664 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 1", Font_6x8, White);
 8002ca4:	4a4e      	ldr	r2, [pc, #312]	; (8002de0 <statemachine+0x340>)
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	ca06      	ldmia	r2, {r1, r2}
 8002caa:	4850      	ldr	r0, [pc, #320]	; (8002dec <statemachine+0x34c>)
 8002cac:	f7ff fcb4 	bl	8002618 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8002cb0:	212c      	movs	r1, #44	; 0x2c
 8002cb2:	2020      	movs	r0, #32
 8002cb4:	f7ff fcd6 	bl	8002664 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002cb8:	4a49      	ldr	r2, [pc, #292]	; (8002de0 <statemachine+0x340>)
 8002cba:	2301      	movs	r3, #1
 8002cbc:	ca06      	ldmia	r2, {r1, r2}
 8002cbe:	484c      	ldr	r0, [pc, #304]	; (8002df0 <statemachine+0x350>)
 8002cc0:	f7ff fcaa 	bl	8002618 <ssd1306_WriteString>
					 				 						free(str);
 8002cc4:	6938      	ldr	r0, [r7, #16]
 8002cc6:	f00e f93d 	bl	8010f44 <free>
					 				 					}
					 if(BTN_B>=1){
 8002cca:	4b4a      	ldr	r3, [pc, #296]	; (8002df4 <statemachine+0x354>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f340 8122 	ble.w	8002f18 <statemachine+0x478>
					 					 				 					spdstate++;
 8002cd4:	4b40      	ldr	r3, [pc, #256]	; (8002dd8 <statemachine+0x338>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	4b3e      	ldr	r3, [pc, #248]	; (8002dd8 <statemachine+0x338>)
 8002cde:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8002ce0:	4b44      	ldr	r3, [pc, #272]	; (8002df4 <statemachine+0x354>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
					 					 				  	}



					 break;
 8002ce6:	e117      	b.n	8002f18 <statemachine+0x478>
				 case STATE_COMPTEUR:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 8002ce8:	4b35      	ldr	r3, [pc, #212]	; (8002dc0 <statemachine+0x320>)
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	f040 8085 	bne.w	8002dfc <statemachine+0x35c>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 8002cf2:	2014      	movs	r0, #20
 8002cf4:	f00e f91e 	bl	8010f34 <malloc>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	617b      	str	r3, [r7, #20]
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 8002cfc:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <statemachine+0x320>)
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fc31 	bl	8000568 <__aeabi_f2d>
 8002d06:	a328      	add	r3, pc, #160	; (adr r3, 8002da8 <statemachine+0x308>)
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	f7fd fc84 	bl	8000618 <__aeabi_dmul>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	e9cd 2300 	strd	r2, r3, [sp]
 8002d18:	4a32      	ldr	r2, [pc, #200]	; (8002de4 <statemachine+0x344>)
 8002d1a:	210f      	movs	r1, #15
 8002d1c:	6978      	ldr	r0, [r7, #20]
 8002d1e:	f010 f805 	bl	8012d2c <sniprintf>
					 				 						ssd1306_SetCursor(32, 54);
 8002d22:	2136      	movs	r1, #54	; 0x36
 8002d24:	2020      	movs	r0, #32
 8002d26:	f7ff fc9d 	bl	8002664 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002d2a:	4a2d      	ldr	r2, [pc, #180]	; (8002de0 <statemachine+0x340>)
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	ca06      	ldmia	r2, {r1, r2}
 8002d30:	6978      	ldr	r0, [r7, #20]
 8002d32:	f7ff fc71 	bl	8002618 <ssd1306_WriteString>
					 				 						ssd1306_DrawRectangle(32, 38, 95, 53, White);
 8002d36:	2301      	movs	r3, #1
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	2335      	movs	r3, #53	; 0x35
 8002d3c:	225f      	movs	r2, #95	; 0x5f
 8002d3e:	2126      	movs	r1, #38	; 0x26
 8002d40:	2020      	movs	r0, #32
 8002d42:	f7ff fd9a 	bl	800287a <ssd1306_DrawRectangle>
					 				 						ssd1306_FillRectangle(32, 38,(int) floor(32+(myData.speed*0.63)), 53, White);
 8002d46:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <statemachine+0x320>)
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fc0c 	bl	8000568 <__aeabi_f2d>
 8002d50:	a317      	add	r3, pc, #92	; (adr r3, 8002db0 <statemachine+0x310>)
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	f7fd fc5f 	bl	8000618 <__aeabi_dmul>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4610      	mov	r0, r2
 8002d60:	4619      	mov	r1, r3
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <statemachine+0x358>)
 8002d68:	f7fd faa0 	bl	80002ac <__adddf3>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	ec43 2b17 	vmov	d7, r2, r3
 8002d74:	eeb0 0a47 	vmov.f32	s0, s14
 8002d78:	eef0 0a67 	vmov.f32	s1, s15
 8002d7c:	f012 fec8 	bl	8015b10 <floor>
 8002d80:	ec53 2b10 	vmov	r2, r3, d0
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	f7fd fef6 	bl	8000b78 <__aeabi_d2iz>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	2301      	movs	r3, #1
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2335      	movs	r3, #53	; 0x35
 8002d96:	2126      	movs	r1, #38	; 0x26
 8002d98:	2020      	movs	r0, #32
 8002d9a:	f7ff fda5 	bl	80028e8 <ssd1306_FillRectangle>

					 				 						free(str);
 8002d9e:	6978      	ldr	r0, [r7, #20]
 8002da0:	f00e f8d0 	bl	8010f44 <free>
 8002da4:	e046      	b.n	8002e34 <statemachine+0x394>
 8002da6:	bf00      	nop
 8002da8:	cccccccd 	.word	0xcccccccd
 8002dac:	400ccccc 	.word	0x400ccccc
 8002db0:	c28f5c29 	.word	0xc28f5c29
 8002db4:	3fe428f5 	.word	0x3fe428f5
 8002db8:	20000860 	.word	0x20000860
 8002dbc:	20000614 	.word	0x20000614
 8002dc0:	20000818 	.word	0x20000818
 8002dc4:	20000cb8 	.word	0x20000cb8
 8002dc8:	42700000 	.word	0x42700000
 8002dcc:	447a0000 	.word	0x447a0000
 8002dd0:	404e0000 	.word	0x404e0000
 8002dd4:	461c3c00 	.word	0x461c3c00
 8002dd8:	20000862 	.word	0x20000862
 8002ddc:	08016cfc 	.word	0x08016cfc
 8002de0:	20000008 	.word	0x20000008
 8002de4:	08016d08 	.word	0x08016d08
 8002de8:	08016d10 	.word	0x08016d10
 8002dec:	08016d24 	.word	0x08016d24
 8002df0:	08016d2c 	.word	0x08016d2c
 8002df4:	2000085c 	.word	0x2000085c
 8002df8:	40400000 	.word	0x40400000
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002dfc:	2014      	movs	r0, #20
 8002dfe:	f00e f899 	bl	8010f34 <malloc>
 8002e02:	4603      	mov	r3, r0
 8002e04:	61bb      	str	r3, [r7, #24]
					 				 						ssd1306_SetCursor(32, 32);
 8002e06:	2120      	movs	r1, #32
 8002e08:	2020      	movs	r0, #32
 8002e0a:	f7ff fc2b 	bl	8002664 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 2", Font_6x8, White);
 8002e0e:	4a9a      	ldr	r2, [pc, #616]	; (8003078 <statemachine+0x5d8>)
 8002e10:	2301      	movs	r3, #1
 8002e12:	ca06      	ldmia	r2, {r1, r2}
 8002e14:	4899      	ldr	r0, [pc, #612]	; (800307c <statemachine+0x5dc>)
 8002e16:	f7ff fbff 	bl	8002618 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	2020      	movs	r0, #32
 8002e1e:	f7ff fc21 	bl	8002664 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002e22:	4a95      	ldr	r2, [pc, #596]	; (8003078 <statemachine+0x5d8>)
 8002e24:	2301      	movs	r3, #1
 8002e26:	ca06      	ldmia	r2, {r1, r2}
 8002e28:	4895      	ldr	r0, [pc, #596]	; (8003080 <statemachine+0x5e0>)
 8002e2a:	f7ff fbf5 	bl	8002618 <ssd1306_WriteString>
					 				 						free(str);
 8002e2e:	69b8      	ldr	r0, [r7, #24]
 8002e30:	f00e f888 	bl	8010f44 <free>
					 				 					}
					 if(BTN_B>=1){
 8002e34:	4b93      	ldr	r3, [pc, #588]	; (8003084 <statemachine+0x5e4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	dd6f      	ble.n	8002f1c <statemachine+0x47c>
					 				 					spdstate++;
 8002e3c:	4b92      	ldr	r3, [pc, #584]	; (8003088 <statemachine+0x5e8>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	4b90      	ldr	r3, [pc, #576]	; (8003088 <statemachine+0x5e8>)
 8002e46:	701a      	strb	r2, [r3, #0]
					 				 					BTN_B=0;
 8002e48:	4b8e      	ldr	r3, [pc, #568]	; (8003084 <statemachine+0x5e4>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
					 				  	}
					 break;
 8002e4e:	e065      	b.n	8002f1c <statemachine+0x47c>
				 case STATE_GRAPH:
					 if(myData.fix == 1){
 8002e50:	4b8e      	ldr	r3, [pc, #568]	; (800308c <statemachine+0x5ec>)
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d12f      	bne.n	8002eb8 <statemachine+0x418>
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002e58:	2014      	movs	r0, #20
 8002e5a:	f00e f86b 	bl	8010f34 <malloc>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	61fb      	str	r3, [r7, #28]

					 				 						ssd1306_SetCursor(32, 32);
 8002e62:	2120      	movs	r1, #32
 8002e64:	2020      	movs	r0, #32
 8002e66:	f7ff fbfd 	bl	8002664 <ssd1306_SetCursor>
					 				 						snprintf(str,15, "%0.1f",(myData.speed)*3.6);
 8002e6a:	4b88      	ldr	r3, [pc, #544]	; (800308c <statemachine+0x5ec>)
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd fb7a 	bl	8000568 <__aeabi_f2d>
 8002e74:	a37e      	add	r3, pc, #504	; (adr r3, 8003070 <statemachine+0x5d0>)
 8002e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7a:	f7fd fbcd 	bl	8000618 <__aeabi_dmul>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	e9cd 2300 	strd	r2, r3, [sp]
 8002e86:	4a82      	ldr	r2, [pc, #520]	; (8003090 <statemachine+0x5f0>)
 8002e88:	210f      	movs	r1, #15
 8002e8a:	69f8      	ldr	r0, [r7, #28]
 8002e8c:	f00f ff4e 	bl	8012d2c <sniprintf>
					 				 						ssd1306_WriteString(str, Font_11x18, White);
 8002e90:	4a80      	ldr	r2, [pc, #512]	; (8003094 <statemachine+0x5f4>)
 8002e92:	2301      	movs	r3, #1
 8002e94:	ca06      	ldmia	r2, {r1, r2}
 8002e96:	69f8      	ldr	r0, [r7, #28]
 8002e98:	f7ff fbbe 	bl	8002618 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 54);
 8002e9c:	2136      	movs	r1, #54	; 0x36
 8002e9e:	2020      	movs	r0, #32
 8002ea0:	f7ff fbe0 	bl	8002664 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("kmh", Font_6x8, White);
 8002ea4:	4a74      	ldr	r2, [pc, #464]	; (8003078 <statemachine+0x5d8>)
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	ca06      	ldmia	r2, {r1, r2}
 8002eaa:	487b      	ldr	r0, [pc, #492]	; (8003098 <statemachine+0x5f8>)
 8002eac:	f7ff fbb4 	bl	8002618 <ssd1306_WriteString>

					 				 						free(str);
 8002eb0:	69f8      	ldr	r0, [r7, #28]
 8002eb2:	f00e f847 	bl	8010f44 <free>
 8002eb6:	e01b      	b.n	8002ef0 <statemachine+0x450>
					 }
					 else{
						 char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002eb8:	2014      	movs	r0, #20
 8002eba:	f00e f83b 	bl	8010f34 <malloc>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	623b      	str	r3, [r7, #32]
						 ssd1306_SetCursor(32, 32);
 8002ec2:	2120      	movs	r1, #32
 8002ec4:	2020      	movs	r0, #32
 8002ec6:	f7ff fbcd 	bl	8002664 <ssd1306_SetCursor>
						 ssd1306_WriteString("Speed 3", Font_6x8, White);
 8002eca:	4a6b      	ldr	r2, [pc, #428]	; (8003078 <statemachine+0x5d8>)
 8002ecc:	2301      	movs	r3, #1
 8002ece:	ca06      	ldmia	r2, {r1, r2}
 8002ed0:	4872      	ldr	r0, [pc, #456]	; (800309c <statemachine+0x5fc>)
 8002ed2:	f7ff fba1 	bl	8002618 <ssd1306_WriteString>
						 ssd1306_SetCursor(32, 44);
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	2020      	movs	r0, #32
 8002eda:	f7ff fbc3 	bl	8002664 <ssd1306_SetCursor>
						 ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002ede:	4a66      	ldr	r2, [pc, #408]	; (8003078 <statemachine+0x5d8>)
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	ca06      	ldmia	r2, {r1, r2}
 8002ee4:	4866      	ldr	r0, [pc, #408]	; (8003080 <statemachine+0x5e0>)
 8002ee6:	f7ff fb97 	bl	8002618 <ssd1306_WriteString>
						 free(str);
 8002eea:	6a38      	ldr	r0, [r7, #32]
 8002eec:	f00e f82a 	bl	8010f44 <free>
					 }

					 if(BTN_B>=1){
 8002ef0:	4b64      	ldr	r3, [pc, #400]	; (8003084 <statemachine+0x5e4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	dd13      	ble.n	8002f20 <statemachine+0x480>
					 					 				 					spdstate--;
 8002ef8:	4b63      	ldr	r3, [pc, #396]	; (8003088 <statemachine+0x5e8>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	4b61      	ldr	r3, [pc, #388]	; (8003088 <statemachine+0x5e8>)
 8002f02:	701a      	strb	r2, [r3, #0]
					 					 				 					spdstate--;
 8002f04:	4b60      	ldr	r3, [pc, #384]	; (8003088 <statemachine+0x5e8>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	4b5e      	ldr	r3, [pc, #376]	; (8003088 <statemachine+0x5e8>)
 8002f0e:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8002f10:	4b5c      	ldr	r3, [pc, #368]	; (8003084 <statemachine+0x5e4>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 8002f16:	e003      	b.n	8002f20 <statemachine+0x480>
					 break;
 8002f18:	bf00      	nop
 8002f1a:	e002      	b.n	8002f22 <statemachine+0x482>
					 break;
 8002f1c:	bf00      	nop
 8002f1e:	e000      	b.n	8002f22 <statemachine+0x482>
					 break;
 8002f20:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 8002f22:	4b5f      	ldr	r3, [pc, #380]	; (80030a0 <statemachine+0x600>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f341 8039 	ble.w	8003f9e <statemachine+0x14fe>
				 					state++;
 8002f2c:	4b5d      	ldr	r3, [pc, #372]	; (80030a4 <statemachine+0x604>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	3301      	adds	r3, #1
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	4b5b      	ldr	r3, [pc, #364]	; (80030a4 <statemachine+0x604>)
 8002f36:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 8002f38:	4b59      	ldr	r3, [pc, #356]	; (80030a0 <statemachine+0x600>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
				  	}
				  break;
 8002f3e:	f001 b82e 	b.w	8003f9e <statemachine+0x14fe>


	case STATE_POS:
			  ssd1306_Fill(Black);
 8002f42:	2000      	movs	r0, #0
 8002f44:	f7ff fa4c 	bl	80023e0 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8002f48:	4957      	ldr	r1, [pc, #348]	; (80030a8 <statemachine+0x608>)
 8002f4a:	4850      	ldr	r0, [pc, #320]	; (800308c <statemachine+0x5ec>)
 8002f4c:	f7ff f85a 	bl	8002004 <nmea_parse>
			  switch(posstate){
 8002f50:	4b56      	ldr	r3, [pc, #344]	; (80030ac <statemachine+0x60c>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	f200 8275 	bhi.w	8003444 <statemachine+0x9a4>
 8002f5a:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <statemachine+0x4c0>)
 8002f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f60:	08002f71 	.word	0x08002f71
 8002f64:	080030c1 	.word	0x080030c1
 8002f68:	080031b7 	.word	0x080031b7
 8002f6c:	080032e1 	.word	0x080032e1

			  case STATE_SUMMARY1:
				  if(myData.fix == 1){
 8002f70:	4b46      	ldr	r3, [pc, #280]	; (800308c <statemachine+0x5ec>)
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d14e      	bne.n	8003016 <statemachine+0x576>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8002f78:	2014      	movs	r0, #20
 8002f7a:	f00d ffdb 	bl	8010f34 <malloc>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
				  						ssd1306_SetCursor(32, 32);
 8002f82:	2120      	movs	r1, #32
 8002f84:	2020      	movs	r0, #32
 8002f86:	f7ff fb6d 	bl	8002664 <ssd1306_SetCursor>
				  						snprintf(str,15, "Latitude:");
 8002f8a:	4a49      	ldr	r2, [pc, #292]	; (80030b0 <statemachine+0x610>)
 8002f8c:	210f      	movs	r1, #15
 8002f8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f90:	f00f fecc 	bl	8012d2c <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002f94:	4a38      	ldr	r2, [pc, #224]	; (8003078 <statemachine+0x5d8>)
 8002f96:	2301      	movs	r3, #1
 8002f98:	ca06      	ldmia	r2, {r1, r2}
 8002f9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f9c:	f7ff fb3c 	bl	8002618 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8002fa0:	4b3a      	ldr	r3, [pc, #232]	; (800308c <statemachine+0x5ec>)
 8002fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa6:	e9cd 2300 	strd	r2, r3, [sp]
 8002faa:	4a42      	ldr	r2, [pc, #264]	; (80030b4 <statemachine+0x614>)
 8002fac:	210f      	movs	r1, #15
 8002fae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fb0:	f00f febc 	bl	8012d2c <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8002fb4:	2128      	movs	r1, #40	; 0x28
 8002fb6:	2020      	movs	r0, #32
 8002fb8:	f7ff fb54 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002fbc:	4a2e      	ldr	r2, [pc, #184]	; (8003078 <statemachine+0x5d8>)
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	ca06      	ldmia	r2, {r1, r2}
 8002fc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fc4:	f7ff fb28 	bl	8002618 <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8002fc8:	4a3b      	ldr	r2, [pc, #236]	; (80030b8 <statemachine+0x618>)
 8002fca:	210f      	movs	r1, #15
 8002fcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fce:	f00f fead 	bl	8012d2c <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8002fd2:	2130      	movs	r1, #48	; 0x30
 8002fd4:	2020      	movs	r0, #32
 8002fd6:	f7ff fb45 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002fda:	4a27      	ldr	r2, [pc, #156]	; (8003078 <statemachine+0x5d8>)
 8002fdc:	2301      	movs	r3, #1
 8002fde:	ca06      	ldmia	r2, {r1, r2}
 8002fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fe2:	f7ff fb19 	bl	8002618 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8002fe6:	4b29      	ldr	r3, [pc, #164]	; (800308c <statemachine+0x5ec>)
 8002fe8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002fec:	e9cd 2300 	strd	r2, r3, [sp]
 8002ff0:	4a30      	ldr	r2, [pc, #192]	; (80030b4 <statemachine+0x614>)
 8002ff2:	210f      	movs	r1, #15
 8002ff4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ff6:	f00f fe99 	bl	8012d2c <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8002ffa:	2138      	movs	r1, #56	; 0x38
 8002ffc:	2020      	movs	r0, #32
 8002ffe:	f7ff fb31 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003002:	4a1d      	ldr	r2, [pc, #116]	; (8003078 <statemachine+0x5d8>)
 8003004:	2301      	movs	r3, #1
 8003006:	ca06      	ldmia	r2, {r1, r2}
 8003008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800300a:	f7ff fb05 	bl	8002618 <ssd1306_WriteString>
				  						free(str);
 800300e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003010:	f00d ff98 	bl	8010f44 <free>
 8003014:	e01b      	b.n	800304e <statemachine+0x5ae>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003016:	2014      	movs	r0, #20
 8003018:	f00d ff8c 	bl	8010f34 <malloc>
 800301c:	4603      	mov	r3, r0
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
				  						ssd1306_SetCursor(32, 32);
 8003020:	2120      	movs	r1, #32
 8003022:	2020      	movs	r0, #32
 8003024:	f7ff fb1e 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos1", Font_6x8, White);
 8003028:	4a13      	ldr	r2, [pc, #76]	; (8003078 <statemachine+0x5d8>)
 800302a:	2301      	movs	r3, #1
 800302c:	ca06      	ldmia	r2, {r1, r2}
 800302e:	4823      	ldr	r0, [pc, #140]	; (80030bc <statemachine+0x61c>)
 8003030:	f7ff faf2 	bl	8002618 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	2020      	movs	r0, #32
 8003038:	f7ff fb14 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800303c:	4a0e      	ldr	r2, [pc, #56]	; (8003078 <statemachine+0x5d8>)
 800303e:	2301      	movs	r3, #1
 8003040:	ca06      	ldmia	r2, {r1, r2}
 8003042:	480f      	ldr	r0, [pc, #60]	; (8003080 <statemachine+0x5e0>)
 8003044:	f7ff fae8 	bl	8002618 <ssd1306_WriteString>
				  						free(str);
 8003048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800304a:	f00d ff7b 	bl	8010f44 <free>
				  					}
				  if(BTN_B>=1){
 800304e:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <statemachine+0x5e4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f340 81ef 	ble.w	8003436 <statemachine+0x996>
					  posstate++;
 8003058:	4b14      	ldr	r3, [pc, #80]	; (80030ac <statemachine+0x60c>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	3301      	adds	r3, #1
 800305e:	b2da      	uxtb	r2, r3
 8003060:	4b12      	ldr	r3, [pc, #72]	; (80030ac <statemachine+0x60c>)
 8003062:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 8003064:	4b07      	ldr	r3, [pc, #28]	; (8003084 <statemachine+0x5e4>)
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]





				  break;
 800306a:	e1e4      	b.n	8003436 <statemachine+0x996>
 800306c:	f3af 8000 	nop.w
 8003070:	cccccccd 	.word	0xcccccccd
 8003074:	400ccccc 	.word	0x400ccccc
 8003078:	20000008 	.word	0x20000008
 800307c:	08016d38 	.word	0x08016d38
 8003080:	08016d2c 	.word	0x08016d2c
 8003084:	2000085c 	.word	0x2000085c
 8003088:	20000862 	.word	0x20000862
 800308c:	20000818 	.word	0x20000818
 8003090:	08016d40 	.word	0x08016d40
 8003094:	20000018 	.word	0x20000018
 8003098:	08016d48 	.word	0x08016d48
 800309c:	08016d4c 	.word	0x08016d4c
 80030a0:	20000858 	.word	0x20000858
 80030a4:	20000860 	.word	0x20000860
 80030a8:	20000614 	.word	0x20000614
 80030ac:	20000863 	.word	0x20000863
 80030b0:	08016d54 	.word	0x08016d54
 80030b4:	08016d60 	.word	0x08016d60
 80030b8:	08016d68 	.word	0x08016d68
 80030bc:	08016d74 	.word	0x08016d74
			  case STATE_LAT:
				  if(myData.fix == 1){
 80030c0:	4b7a      	ldr	r3, [pc, #488]	; (80032ac <statemachine+0x80c>)
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d14b      	bne.n	8003160 <statemachine+0x6c0>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 80030c8:	2014      	movs	r0, #20
 80030ca:	f00d ff33 	bl	8010f34 <malloc>
 80030ce:	4603      	mov	r3, r0
 80030d0:	62fb      	str	r3, [r7, #44]	; 0x2c
				  						ssd1306_SetCursor(32, 32);
 80030d2:	2120      	movs	r1, #32
 80030d4:	2020      	movs	r0, #32
 80030d6:	f7ff fac5 	bl	8002664 <ssd1306_SetCursor>
				  						snprintf(str,15, "LatSide:");
 80030da:	4a75      	ldr	r2, [pc, #468]	; (80032b0 <statemachine+0x810>)
 80030dc:	210f      	movs	r1, #15
 80030de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030e0:	f00f fe24 	bl	8012d2c <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80030e4:	4a73      	ldr	r2, [pc, #460]	; (80032b4 <statemachine+0x814>)
 80030e6:	2301      	movs	r3, #1
 80030e8:	ca06      	ldmia	r2, {r1, r2}
 80030ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030ec:	f7ff fa94 	bl	8002618 <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80030f0:	4b6e      	ldr	r3, [pc, #440]	; (80032ac <statemachine+0x80c>)
 80030f2:	7a1b      	ldrb	r3, [r3, #8]
 80030f4:	4a70      	ldr	r2, [pc, #448]	; (80032b8 <statemachine+0x818>)
 80030f6:	210f      	movs	r1, #15
 80030f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030fa:	f00f fe17 	bl	8012d2c <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 80030fe:	2128      	movs	r1, #40	; 0x28
 8003100:	2020      	movs	r0, #32
 8003102:	f7ff faaf 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003106:	4a6b      	ldr	r2, [pc, #428]	; (80032b4 <statemachine+0x814>)
 8003108:	2301      	movs	r3, #1
 800310a:	ca06      	ldmia	r2, {r1, r2}
 800310c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800310e:	f7ff fa83 	bl	8002618 <ssd1306_WriteString>
				  						snprintf(str,15, "Latitude:");
 8003112:	4a6a      	ldr	r2, [pc, #424]	; (80032bc <statemachine+0x81c>)
 8003114:	210f      	movs	r1, #15
 8003116:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003118:	f00f fe08 	bl	8012d2c <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 800311c:	2130      	movs	r1, #48	; 0x30
 800311e:	2020      	movs	r0, #32
 8003120:	f7ff faa0 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003124:	4a63      	ldr	r2, [pc, #396]	; (80032b4 <statemachine+0x814>)
 8003126:	2301      	movs	r3, #1
 8003128:	ca06      	ldmia	r2, {r1, r2}
 800312a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800312c:	f7ff fa74 	bl	8002618 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);
 8003130:	4b5e      	ldr	r3, [pc, #376]	; (80032ac <statemachine+0x80c>)
 8003132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003136:	e9cd 2300 	strd	r2, r3, [sp]
 800313a:	4a61      	ldr	r2, [pc, #388]	; (80032c0 <statemachine+0x820>)
 800313c:	210f      	movs	r1, #15
 800313e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003140:	f00f fdf4 	bl	8012d2c <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003144:	2138      	movs	r1, #56	; 0x38
 8003146:	2020      	movs	r0, #32
 8003148:	f7ff fa8c 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800314c:	4a59      	ldr	r2, [pc, #356]	; (80032b4 <statemachine+0x814>)
 800314e:	2301      	movs	r3, #1
 8003150:	ca06      	ldmia	r2, {r1, r2}
 8003152:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003154:	f7ff fa60 	bl	8002618 <ssd1306_WriteString>
				  						free(str);
 8003158:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800315a:	f00d fef3 	bl	8010f44 <free>
 800315e:	e01b      	b.n	8003198 <statemachine+0x6f8>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003160:	2014      	movs	r0, #20
 8003162:	f00d fee7 	bl	8010f34 <malloc>
 8003166:	4603      	mov	r3, r0
 8003168:	633b      	str	r3, [r7, #48]	; 0x30
				  						ssd1306_SetCursor(32, 32);
 800316a:	2120      	movs	r1, #32
 800316c:	2020      	movs	r0, #32
 800316e:	f7ff fa79 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos2", Font_6x8, White);
 8003172:	4a50      	ldr	r2, [pc, #320]	; (80032b4 <statemachine+0x814>)
 8003174:	2301      	movs	r3, #1
 8003176:	ca06      	ldmia	r2, {r1, r2}
 8003178:	4852      	ldr	r0, [pc, #328]	; (80032c4 <statemachine+0x824>)
 800317a:	f7ff fa4d 	bl	8002618 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 800317e:	212c      	movs	r1, #44	; 0x2c
 8003180:	2020      	movs	r0, #32
 8003182:	f7ff fa6f 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003186:	4a4b      	ldr	r2, [pc, #300]	; (80032b4 <statemachine+0x814>)
 8003188:	2301      	movs	r3, #1
 800318a:	ca06      	ldmia	r2, {r1, r2}
 800318c:	484e      	ldr	r0, [pc, #312]	; (80032c8 <statemachine+0x828>)
 800318e:	f7ff fa43 	bl	8002618 <ssd1306_WriteString>
				  						free(str);
 8003192:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003194:	f00d fed6 	bl	8010f44 <free>
				  					}
				  if(BTN_B>=1){
 8003198:	4b4c      	ldr	r3, [pc, #304]	; (80032cc <statemachine+0x82c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	f340 814c 	ble.w	800343a <statemachine+0x99a>
				  					  posstate++;
 80031a2:	4b4b      	ldr	r3, [pc, #300]	; (80032d0 <statemachine+0x830>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	3301      	adds	r3, #1
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	4b49      	ldr	r3, [pc, #292]	; (80032d0 <statemachine+0x830>)
 80031ac:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 80031ae:	4b47      	ldr	r3, [pc, #284]	; (80032cc <statemachine+0x82c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
				  				  }



				  break;
 80031b4:	e141      	b.n	800343a <statemachine+0x99a>
			  case STATE_LONG:
				  if(myData.fix == 1){
 80031b6:	4b3d      	ldr	r3, [pc, #244]	; (80032ac <statemachine+0x80c>)
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d14b      	bne.n	8003256 <statemachine+0x7b6>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 80031be:	2014      	movs	r0, #20
 80031c0:	f00d feb8 	bl	8010f34 <malloc>
 80031c4:	4603      	mov	r3, r0
 80031c6:	637b      	str	r3, [r7, #52]	; 0x34
				  						ssd1306_SetCursor(32, 32);
 80031c8:	2120      	movs	r1, #32
 80031ca:	2020      	movs	r0, #32
 80031cc:	f7ff fa4a 	bl	8002664 <ssd1306_SetCursor>
				  						snprintf(str,15, "LonSide:");
 80031d0:	4a40      	ldr	r2, [pc, #256]	; (80032d4 <statemachine+0x834>)
 80031d2:	210f      	movs	r1, #15
 80031d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031d6:	f00f fda9 	bl	8012d2c <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80031da:	4a36      	ldr	r2, [pc, #216]	; (80032b4 <statemachine+0x814>)
 80031dc:	2301      	movs	r3, #1
 80031de:	ca06      	ldmia	r2, {r1, r2}
 80031e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031e2:	f7ff fa19 	bl	8002618 <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80031e6:	4b31      	ldr	r3, [pc, #196]	; (80032ac <statemachine+0x80c>)
 80031e8:	7e1b      	ldrb	r3, [r3, #24]
 80031ea:	4a33      	ldr	r2, [pc, #204]	; (80032b8 <statemachine+0x818>)
 80031ec:	210f      	movs	r1, #15
 80031ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031f0:	f00f fd9c 	bl	8012d2c <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 80031f4:	2128      	movs	r1, #40	; 0x28
 80031f6:	2020      	movs	r0, #32
 80031f8:	f7ff fa34 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80031fc:	4a2d      	ldr	r2, [pc, #180]	; (80032b4 <statemachine+0x814>)
 80031fe:	2301      	movs	r3, #1
 8003200:	ca06      	ldmia	r2, {r1, r2}
 8003202:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003204:	f7ff fa08 	bl	8002618 <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8003208:	4a33      	ldr	r2, [pc, #204]	; (80032d8 <statemachine+0x838>)
 800320a:	210f      	movs	r1, #15
 800320c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800320e:	f00f fd8d 	bl	8012d2c <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8003212:	2130      	movs	r1, #48	; 0x30
 8003214:	2020      	movs	r0, #32
 8003216:	f7ff fa25 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800321a:	4a26      	ldr	r2, [pc, #152]	; (80032b4 <statemachine+0x814>)
 800321c:	2301      	movs	r3, #1
 800321e:	ca06      	ldmia	r2, {r1, r2}
 8003220:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003222:	f7ff f9f9 	bl	8002618 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8003226:	4b21      	ldr	r3, [pc, #132]	; (80032ac <statemachine+0x80c>)
 8003228:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800322c:	e9cd 2300 	strd	r2, r3, [sp]
 8003230:	4a23      	ldr	r2, [pc, #140]	; (80032c0 <statemachine+0x820>)
 8003232:	210f      	movs	r1, #15
 8003234:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003236:	f00f fd79 	bl	8012d2c <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 800323a:	2138      	movs	r1, #56	; 0x38
 800323c:	2020      	movs	r0, #32
 800323e:	f7ff fa11 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003242:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <statemachine+0x814>)
 8003244:	2301      	movs	r3, #1
 8003246:	ca06      	ldmia	r2, {r1, r2}
 8003248:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800324a:	f7ff f9e5 	bl	8002618 <ssd1306_WriteString>
				  						free(str);
 800324e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003250:	f00d fe78 	bl	8010f44 <free>
 8003254:	e01b      	b.n	800328e <statemachine+0x7ee>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003256:	2014      	movs	r0, #20
 8003258:	f00d fe6c 	bl	8010f34 <malloc>
 800325c:	4603      	mov	r3, r0
 800325e:	63bb      	str	r3, [r7, #56]	; 0x38
				  						ssd1306_SetCursor(32, 32);
 8003260:	2120      	movs	r1, #32
 8003262:	2020      	movs	r0, #32
 8003264:	f7ff f9fe 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos3", Font_6x8, White);
 8003268:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <statemachine+0x814>)
 800326a:	2301      	movs	r3, #1
 800326c:	ca06      	ldmia	r2, {r1, r2}
 800326e:	481b      	ldr	r0, [pc, #108]	; (80032dc <statemachine+0x83c>)
 8003270:	f7ff f9d2 	bl	8002618 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003274:	212c      	movs	r1, #44	; 0x2c
 8003276:	2020      	movs	r0, #32
 8003278:	f7ff f9f4 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800327c:	4a0d      	ldr	r2, [pc, #52]	; (80032b4 <statemachine+0x814>)
 800327e:	2301      	movs	r3, #1
 8003280:	ca06      	ldmia	r2, {r1, r2}
 8003282:	4811      	ldr	r0, [pc, #68]	; (80032c8 <statemachine+0x828>)
 8003284:	f7ff f9c8 	bl	8002618 <ssd1306_WriteString>
				  						free(str);
 8003288:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800328a:	f00d fe5b 	bl	8010f44 <free>
				  					}
				  if(BTN_B>=1){
 800328e:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <statemachine+0x82c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f340 80d3 	ble.w	800343e <statemachine+0x99e>
				  					  posstate++;
 8003298:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <statemachine+0x830>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	3301      	adds	r3, #1
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <statemachine+0x830>)
 80032a2:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 80032a4:	4b09      	ldr	r3, [pc, #36]	; (80032cc <statemachine+0x82c>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
				  				  }


				  break;
 80032aa:	e0c8      	b.n	800343e <statemachine+0x99e>
 80032ac:	20000818 	.word	0x20000818
 80032b0:	08016d7c 	.word	0x08016d7c
 80032b4:	20000008 	.word	0x20000008
 80032b8:	08016d88 	.word	0x08016d88
 80032bc:	08016d54 	.word	0x08016d54
 80032c0:	08016d60 	.word	0x08016d60
 80032c4:	08016d8c 	.word	0x08016d8c
 80032c8:	08016d2c 	.word	0x08016d2c
 80032cc:	2000085c 	.word	0x2000085c
 80032d0:	20000863 	.word	0x20000863
 80032d4:	08016d94 	.word	0x08016d94
 80032d8:	08016d68 	.word	0x08016d68
 80032dc:	08016da0 	.word	0x08016da0
			  case STATE_ALT:
				  if(myData.fix == 1){
 80032e0:	4bad      	ldr	r3, [pc, #692]	; (8003598 <statemachine+0xaf8>)
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d170      	bne.n	80033ca <statemachine+0x92a>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 80032e8:	2014      	movs	r0, #20
 80032ea:	f00d fe23 	bl	8010f34 <malloc>
 80032ee:	4603      	mov	r3, r0
 80032f0:	63fb      	str	r3, [r7, #60]	; 0x3c
				  						ssd1306_SetCursor(32, 32);
 80032f2:	2120      	movs	r1, #32
 80032f4:	2020      	movs	r0, #32
 80032f6:	f7ff f9b5 	bl	8002664 <ssd1306_SetCursor>
				  						snprintf(str,15, "altitude:");
 80032fa:	4aa8      	ldr	r2, [pc, #672]	; (800359c <statemachine+0xafc>)
 80032fc:	210f      	movs	r1, #15
 80032fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003300:	f00f fd14 	bl	8012d2c <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003304:	4aa6      	ldr	r2, [pc, #664]	; (80035a0 <statemachine+0xb00>)
 8003306:	2301      	movs	r3, #1
 8003308:	ca06      	ldmia	r2, {r1, r2}
 800330a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800330c:	f7ff f984 	bl	8002618 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003310:	4ba1      	ldr	r3, [pc, #644]	; (8003598 <statemachine+0xaf8>)
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd f927 	bl	8000568 <__aeabi_f2d>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	e9cd 2300 	strd	r2, r3, [sp]
 8003322:	4aa0      	ldr	r2, [pc, #640]	; (80035a4 <statemachine+0xb04>)
 8003324:	210f      	movs	r1, #15
 8003326:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003328:	f00f fd00 	bl	8012d2c <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 800332c:	2128      	movs	r1, #40	; 0x28
 800332e:	2020      	movs	r0, #32
 8003330:	f7ff f998 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003334:	4a9a      	ldr	r2, [pc, #616]	; (80035a0 <statemachine+0xb00>)
 8003336:	2301      	movs	r3, #1
 8003338:	ca06      	ldmia	r2, {r1, r2}
 800333a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800333c:	f7ff f96c 	bl	8002618 <ssd1306_WriteString>
				  						snprintf(str,15, "Pressure:");
 8003340:	4a99      	ldr	r2, [pc, #612]	; (80035a8 <statemachine+0xb08>)
 8003342:	210f      	movs	r1, #15
 8003344:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003346:	f00f fcf1 	bl	8012d2c <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 800334a:	2130      	movs	r1, #48	; 0x30
 800334c:	2020      	movs	r0, #32
 800334e:	f7ff f989 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003352:	4a93      	ldr	r2, [pc, #588]	; (80035a0 <statemachine+0xb00>)
 8003354:	2301      	movs	r3, #1
 8003356:	ca06      	ldmia	r2, {r1, r2}
 8003358:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800335a:	f7ff f95d 	bl	8002618 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 800335e:	4b8e      	ldr	r3, [pc, #568]	; (8003598 <statemachine+0xaf8>)
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd f900 	bl	8000568 <__aeabi_f2d>
 8003368:	a389      	add	r3, pc, #548	; (adr r3, 8003590 <statemachine+0xaf0>)
 800336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336e:	f7fd f953 	bl	8000618 <__aeabi_dmul>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4610      	mov	r0, r2
 8003378:	4619      	mov	r1, r3
 800337a:	f7fd fc45 	bl	8000c08 <__aeabi_d2f>
 800337e:	4603      	mov	r3, r0
 8003380:	ee00 3a10 	vmov	s0, r3
 8003384:	f012 fb80 	bl	8015a88 <expf>
 8003388:	eef0 7a40 	vmov.f32	s15, s0
 800338c:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80035ac <statemachine+0xb0c>
 8003390:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003394:	ee17 0a90 	vmov	r0, s15
 8003398:	f7fd f8e6 	bl	8000568 <__aeabi_f2d>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	e9cd 2300 	strd	r2, r3, [sp]
 80033a4:	4a82      	ldr	r2, [pc, #520]	; (80035b0 <statemachine+0xb10>)
 80033a6:	210f      	movs	r1, #15
 80033a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80033aa:	f00f fcbf 	bl	8012d2c <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80033ae:	2138      	movs	r1, #56	; 0x38
 80033b0:	2020      	movs	r0, #32
 80033b2:	f7ff f957 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80033b6:	4a7a      	ldr	r2, [pc, #488]	; (80035a0 <statemachine+0xb00>)
 80033b8:	2301      	movs	r3, #1
 80033ba:	ca06      	ldmia	r2, {r1, r2}
 80033bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80033be:	f7ff f92b 	bl	8002618 <ssd1306_WriteString>
				  						free(str);
 80033c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80033c4:	f00d fdbe 	bl	8010f44 <free>
 80033c8:	e01b      	b.n	8003402 <statemachine+0x962>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 80033ca:	2014      	movs	r0, #20
 80033cc:	f00d fdb2 	bl	8010f34 <malloc>
 80033d0:	4603      	mov	r3, r0
 80033d2:	643b      	str	r3, [r7, #64]	; 0x40
				  						ssd1306_SetCursor(32, 32);
 80033d4:	2120      	movs	r1, #32
 80033d6:	2020      	movs	r0, #32
 80033d8:	f7ff f944 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos4", Font_6x8, White);
 80033dc:	4a70      	ldr	r2, [pc, #448]	; (80035a0 <statemachine+0xb00>)
 80033de:	2301      	movs	r3, #1
 80033e0:	ca06      	ldmia	r2, {r1, r2}
 80033e2:	4874      	ldr	r0, [pc, #464]	; (80035b4 <statemachine+0xb14>)
 80033e4:	f7ff f918 	bl	8002618 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 80033e8:	212c      	movs	r1, #44	; 0x2c
 80033ea:	2020      	movs	r0, #32
 80033ec:	f7ff f93a 	bl	8002664 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80033f0:	4a6b      	ldr	r2, [pc, #428]	; (80035a0 <statemachine+0xb00>)
 80033f2:	2301      	movs	r3, #1
 80033f4:	ca06      	ldmia	r2, {r1, r2}
 80033f6:	4870      	ldr	r0, [pc, #448]	; (80035b8 <statemachine+0xb18>)
 80033f8:	f7ff f90e 	bl	8002618 <ssd1306_WriteString>
				  						free(str);
 80033fc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80033fe:	f00d fda1 	bl	8010f44 <free>
				  					}
				  if(BTN_B>=1){
 8003402:	4b6e      	ldr	r3, [pc, #440]	; (80035bc <statemachine+0xb1c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	dd1b      	ble.n	8003442 <statemachine+0x9a2>
				  					posstate--;
 800340a:	4b6d      	ldr	r3, [pc, #436]	; (80035c0 <statemachine+0xb20>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	3b01      	subs	r3, #1
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4b6b      	ldr	r3, [pc, #428]	; (80035c0 <statemachine+0xb20>)
 8003414:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003416:	4b6a      	ldr	r3, [pc, #424]	; (80035c0 <statemachine+0xb20>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	3b01      	subs	r3, #1
 800341c:	b2da      	uxtb	r2, r3
 800341e:	4b68      	ldr	r3, [pc, #416]	; (80035c0 <statemachine+0xb20>)
 8003420:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003422:	4b67      	ldr	r3, [pc, #412]	; (80035c0 <statemachine+0xb20>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	3b01      	subs	r3, #1
 8003428:	b2da      	uxtb	r2, r3
 800342a:	4b65      	ldr	r3, [pc, #404]	; (80035c0 <statemachine+0xb20>)
 800342c:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 800342e:	4b63      	ldr	r3, [pc, #396]	; (80035bc <statemachine+0xb1c>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
				  				  }
				  break;
 8003434:	e005      	b.n	8003442 <statemachine+0x9a2>
				  break;
 8003436:	bf00      	nop
 8003438:	e004      	b.n	8003444 <statemachine+0x9a4>
				  break;
 800343a:	bf00      	nop
 800343c:	e002      	b.n	8003444 <statemachine+0x9a4>
				  break;
 800343e:	bf00      	nop
 8003440:	e000      	b.n	8003444 <statemachine+0x9a4>
				  break;
 8003442:	bf00      	nop
			  }

					if(BTN_A>=1){
 8003444:	4b5f      	ldr	r3, [pc, #380]	; (80035c4 <statemachine+0xb24>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	f340 85aa 	ble.w	8003fa2 <statemachine+0x1502>
							state++;
 800344e:	4b5e      	ldr	r3, [pc, #376]	; (80035c8 <statemachine+0xb28>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	3301      	adds	r3, #1
 8003454:	b2da      	uxtb	r2, r3
 8003456:	4b5c      	ldr	r3, [pc, #368]	; (80035c8 <statemachine+0xb28>)
 8003458:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 800345a:	4b5a      	ldr	r3, [pc, #360]	; (80035c4 <statemachine+0xb24>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
						}
			  break;
 8003460:	f000 bd9f 	b.w	8003fa2 <statemachine+0x1502>

		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 8003464:	2000      	movs	r0, #0
 8003466:	f7fe ffbb 	bl	80023e0 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 800346a:	4958      	ldr	r1, [pc, #352]	; (80035cc <statemachine+0xb2c>)
 800346c:	484a      	ldr	r0, [pc, #296]	; (8003598 <statemachine+0xaf8>)
 800346e:	f7fe fdc9 	bl	8002004 <nmea_parse>
			  int heure=0;
 8003472:	2300      	movs	r3, #0
 8003474:	667b      	str	r3, [r7, #100]	; 0x64
			  heure=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8003476:	4b48      	ldr	r3, [pc, #288]	; (8003598 <statemachine+0xaf8>)
 8003478:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800347c:	f003 020f 	and.w	r2, r3, #15
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	461a      	mov	r2, r3
 800348a:	4b43      	ldr	r3, [pc, #268]	; (8003598 <statemachine+0xaf8>)
 800348c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	4413      	add	r3, r2
 8003496:	667b      	str	r3, [r7, #100]	; 0x64
			  if((heure+2)>=24){
 8003498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800349a:	2b15      	cmp	r3, #21
 800349c:	dd03      	ble.n	80034a6 <statemachine+0xa06>
				  heure=heure-22;
 800349e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034a0:	3b16      	subs	r3, #22
 80034a2:	667b      	str	r3, [r7, #100]	; 0x64
 80034a4:	e002      	b.n	80034ac <statemachine+0xa0c>
			  }
			  else{
				  heure=heure+2;
 80034a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034a8:	3302      	adds	r3, #2
 80034aa:	667b      	str	r3, [r7, #100]	; 0x64
			  }

			  if(myData.fix == 1){
 80034ac:	4b3a      	ldr	r3, [pc, #232]	; (8003598 <statemachine+0xaf8>)
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	f040 82d9 	bne.w	8003a68 <statemachine+0xfc8>

				  switch(hrstate){
 80034b6:	4b46      	ldr	r3, [pc, #280]	; (80035d0 <statemachine+0xb30>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <statemachine+0xa26>
 80034be:	2b01      	cmp	r3, #1
 80034c0:	f000 8092 	beq.w	80035e8 <statemachine+0xb48>
 80034c4:	e2e6      	b.n	8003a94 <statemachine+0xff4>
				  case STATE_DIGIT:
					  char * str = (char*)malloc(sizeof(char)*20);
 80034c6:	2014      	movs	r0, #20
 80034c8:	f00d fd34 	bl	8010f34 <malloc>
 80034cc:	4603      	mov	r3, r0
 80034ce:	647b      	str	r3, [r7, #68]	; 0x44
					  ssd1306_SetCursor(32, 32);
 80034d0:	2120      	movs	r1, #32
 80034d2:	2020      	movs	r0, #32
 80034d4:	f7ff f8c6 	bl	8002664 <ssd1306_SetCursor>
					  ssd1306_WriteString("hr GMT+2:", Font_6x8, White);
 80034d8:	4a31      	ldr	r2, [pc, #196]	; (80035a0 <statemachine+0xb00>)
 80034da:	2301      	movs	r3, #1
 80034dc:	ca06      	ldmia	r2, {r1, r2}
 80034de:	483d      	ldr	r0, [pc, #244]	; (80035d4 <statemachine+0xb34>)
 80034e0:	f7ff f89a 	bl	8002618 <ssd1306_WriteString>
					 ssd1306_SetCursor(34, 42);
 80034e4:	212a      	movs	r1, #42	; 0x2a
 80034e6:	2022      	movs	r0, #34	; 0x22
 80034e8:	f7ff f8bc 	bl	8002664 <ssd1306_SetCursor>
					 if(heure>=10){
 80034ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034ee:	2b09      	cmp	r3, #9
 80034f0:	dd0f      	ble.n	8003512 <statemachine+0xa72>
					snprintf(str,15, "%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 80034f2:	4b29      	ldr	r3, [pc, #164]	; (8003598 <statemachine+0xaf8>)
 80034f4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80034f8:	461a      	mov	r2, r3
 80034fa:	4b27      	ldr	r3, [pc, #156]	; (8003598 <statemachine+0xaf8>)
 80034fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	9200      	str	r2, [sp, #0]
 8003504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003506:	4a34      	ldr	r2, [pc, #208]	; (80035d8 <statemachine+0xb38>)
 8003508:	210f      	movs	r1, #15
 800350a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800350c:	f00f fc0e 	bl	8012d2c <sniprintf>
 8003510:	e00e      	b.n	8003530 <statemachine+0xa90>
					}
					else{
					 	snprintf(str,15, "0%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 8003512:	4b21      	ldr	r3, [pc, #132]	; (8003598 <statemachine+0xaf8>)
 8003514:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003518:	461a      	mov	r2, r3
 800351a:	4b1f      	ldr	r3, [pc, #124]	; (8003598 <statemachine+0xaf8>)
 800351c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	9200      	str	r2, [sp, #0]
 8003524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003526:	4a2d      	ldr	r2, [pc, #180]	; (80035dc <statemachine+0xb3c>)
 8003528:	210f      	movs	r1, #15
 800352a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800352c:	f00f fbfe 	bl	8012d2c <sniprintf>
					}
					ssd1306_WriteString(str, Font_7x10, White);
 8003530:	4a2b      	ldr	r2, [pc, #172]	; (80035e0 <statemachine+0xb40>)
 8003532:	2301      	movs	r3, #1
 8003534:	ca06      	ldmia	r2, {r1, r2}
 8003536:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003538:	f7ff f86e 	bl	8002618 <ssd1306_WriteString>
					ssd1306_SetCursor(34, 52);
 800353c:	2134      	movs	r1, #52	; 0x34
 800353e:	2022      	movs	r0, #34	; 0x22
 8003540:	f7ff f890 	bl	8002664 <ssd1306_SetCursor>
					snprintf(str,15, "%c%c sec",myData.lastMeasure[4],myData.lastMeasure[5]);
 8003544:	4b14      	ldr	r3, [pc, #80]	; (8003598 <statemachine+0xaf8>)
 8003546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800354a:	461a      	mov	r2, r3
 800354c:	4b12      	ldr	r3, [pc, #72]	; (8003598 <statemachine+0xaf8>)
 800354e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	4a23      	ldr	r2, [pc, #140]	; (80035e4 <statemachine+0xb44>)
 8003558:	210f      	movs	r1, #15
 800355a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800355c:	f00f fbe6 	bl	8012d2c <sniprintf>
					ssd1306_WriteString(str, Font_6x8, White);
 8003560:	4a0f      	ldr	r2, [pc, #60]	; (80035a0 <statemachine+0xb00>)
 8003562:	2301      	movs	r3, #1
 8003564:	ca06      	ldmia	r2, {r1, r2}
 8003566:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003568:	f7ff f856 	bl	8002618 <ssd1306_WriteString>
					free(str);
 800356c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800356e:	f00d fce9 	bl	8010f44 <free>
					if(BTN_B>=1){
 8003572:	4b12      	ldr	r3, [pc, #72]	; (80035bc <statemachine+0xb1c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	f340 8289 	ble.w	8003a8e <statemachine+0xfee>
												hrstate++;
 800357c:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <statemachine+0xb30>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	b2da      	uxtb	r2, r3
 8003584:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <statemachine+0xb30>)
 8003586:	701a      	strb	r2, [r3, #0]
												BTN_B=0;
 8003588:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <statemachine+0xb1c>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
											}




					  break;
 800358e:	e27e      	b.n	8003a8e <statemachine+0xfee>
 8003590:	fb798882 	.word	0xfb798882
 8003594:	bf1e1818 	.word	0xbf1e1818
 8003598:	20000818 	.word	0x20000818
 800359c:	08016da8 	.word	0x08016da8
 80035a0:	20000008 	.word	0x20000008
 80035a4:	08016db4 	.word	0x08016db4
 80035a8:	08016dbc 	.word	0x08016dbc
 80035ac:	447a0000 	.word	0x447a0000
 80035b0:	08016dc8 	.word	0x08016dc8
 80035b4:	08016dd4 	.word	0x08016dd4
 80035b8:	08016d2c 	.word	0x08016d2c
 80035bc:	2000085c 	.word	0x2000085c
 80035c0:	20000863 	.word	0x20000863
 80035c4:	20000858 	.word	0x20000858
 80035c8:	20000860 	.word	0x20000860
 80035cc:	20000614 	.word	0x20000614
 80035d0:	20000861 	.word	0x20000861
 80035d4:	08016ddc 	.word	0x08016ddc
 80035d8:	08016de8 	.word	0x08016de8
 80035dc:	08016df0 	.word	0x08016df0
 80035e0:	20000010 	.word	0x20000010
 80035e4:	08016dfc 	.word	0x08016dfc
				  case STATE_OLD:
					  if(heure>12){
 80035e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035ea:	2b0c      	cmp	r3, #12
 80035ec:	dd02      	ble.n	80035f4 <statemachine+0xb54>
						  heure=heure-12;
 80035ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035f0:	3b0c      	subs	r3, #12
 80035f2:	667b      	str	r3, [r7, #100]	; 0x64
					  }
					  int minute=0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	64bb      	str	r3, [r7, #72]	; 0x48
					  minute=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 80035f8:	4b91      	ldr	r3, [pc, #580]	; (8003840 <statemachine+0xda0>)
 80035fa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80035fe:	f003 020f 	and.w	r2, r3, #15
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	461a      	mov	r2, r3
 800360c:	4b8c      	ldr	r3, [pc, #560]	; (8003840 <statemachine+0xda0>)
 800360e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	4413      	add	r3, r2
 8003618:	64bb      	str	r3, [r7, #72]	; 0x48
					  ssd1306_DrawCircle(64, 48, 12, White);
 800361a:	2301      	movs	r3, #1
 800361c:	220c      	movs	r2, #12
 800361e:	2130      	movs	r1, #48	; 0x30
 8003620:	2040      	movs	r0, #64	; 0x40
 8003622:	f7ff f8a3 	bl	800276c <ssd1306_DrawCircle>
					  ssd1306_Line(64,48,64+floor(6*cos((3-heure)*M_PI/6)),48-floor(6*sin((3-heure)*M_PI/6)),White);
 8003626:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003628:	f1c3 0303 	rsb	r3, r3, #3
 800362c:	4618      	mov	r0, r3
 800362e:	f7fc ff89 	bl	8000544 <__aeabi_i2d>
 8003632:	a381      	add	r3, pc, #516	; (adr r3, 8003838 <statemachine+0xd98>)
 8003634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003638:	f7fc ffee 	bl	8000618 <__aeabi_dmul>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4610      	mov	r0, r2
 8003642:	4619      	mov	r1, r3
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	4b7e      	ldr	r3, [pc, #504]	; (8003844 <statemachine+0xda4>)
 800364a:	f7fd f90f 	bl	800086c <__aeabi_ddiv>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	ec43 2b17 	vmov	d7, r2, r3
 8003656:	eeb0 0a47 	vmov.f32	s0, s14
 800365a:	eef0 0a67 	vmov.f32	s1, s15
 800365e:	f012 f967 	bl	8015930 <cos>
 8003662:	ec51 0b10 	vmov	r0, r1, d0
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	4b76      	ldr	r3, [pc, #472]	; (8003844 <statemachine+0xda4>)
 800366c:	f7fc ffd4 	bl	8000618 <__aeabi_dmul>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	ec43 2b17 	vmov	d7, r2, r3
 8003678:	eeb0 0a47 	vmov.f32	s0, s14
 800367c:	eef0 0a67 	vmov.f32	s1, s15
 8003680:	f012 fa46 	bl	8015b10 <floor>
 8003684:	ec51 0b10 	vmov	r0, r1, d0
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	4b6e      	ldr	r3, [pc, #440]	; (8003848 <statemachine+0xda8>)
 800368e:	f7fc fe0d 	bl	80002ac <__adddf3>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4610      	mov	r0, r2
 8003698:	4619      	mov	r1, r3
 800369a:	f7fd fa95 	bl	8000bc8 <__aeabi_d2uiz>
 800369e:	4603      	mov	r3, r0
 80036a0:	b2dc      	uxtb	r4, r3
 80036a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036a4:	f1c3 0303 	rsb	r3, r3, #3
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fc ff4b 	bl	8000544 <__aeabi_i2d>
 80036ae:	a362      	add	r3, pc, #392	; (adr r3, 8003838 <statemachine+0xd98>)
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	f7fc ffb0 	bl	8000618 <__aeabi_dmul>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4610      	mov	r0, r2
 80036be:	4619      	mov	r1, r3
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	4b5f      	ldr	r3, [pc, #380]	; (8003844 <statemachine+0xda4>)
 80036c6:	f7fd f8d1 	bl	800086c <__aeabi_ddiv>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	ec43 2b17 	vmov	d7, r2, r3
 80036d2:	eeb0 0a47 	vmov.f32	s0, s14
 80036d6:	eef0 0a67 	vmov.f32	s1, s15
 80036da:	f012 f97d 	bl	80159d8 <sin>
 80036de:	ec51 0b10 	vmov	r0, r1, d0
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	4b57      	ldr	r3, [pc, #348]	; (8003844 <statemachine+0xda4>)
 80036e8:	f7fc ff96 	bl	8000618 <__aeabi_dmul>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	ec43 2b17 	vmov	d7, r2, r3
 80036f4:	eeb0 0a47 	vmov.f32	s0, s14
 80036f8:	eef0 0a67 	vmov.f32	s1, s15
 80036fc:	f012 fa08 	bl	8015b10 <floor>
 8003700:	ec53 2b10 	vmov	r2, r3, d0
 8003704:	f04f 0000 	mov.w	r0, #0
 8003708:	4950      	ldr	r1, [pc, #320]	; (800384c <statemachine+0xdac>)
 800370a:	f7fc fdcd 	bl	80002a8 <__aeabi_dsub>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4610      	mov	r0, r2
 8003714:	4619      	mov	r1, r3
 8003716:	f7fd fa57 	bl	8000bc8 <__aeabi_d2uiz>
 800371a:	4603      	mov	r3, r0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2201      	movs	r2, #1
 8003720:	9200      	str	r2, [sp, #0]
 8003722:	4622      	mov	r2, r4
 8003724:	2130      	movs	r1, #48	; 0x30
 8003726:	2040      	movs	r0, #64	; 0x40
 8003728:	f7fe ffb4 	bl	8002694 <ssd1306_Line>
					  ssd1306_Line(64,48,64+floor(12*cos((15-minute)*M_PI/30)),48-floor(12*sin((15-minute)*M_PI/30)),White);
 800372c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800372e:	f1c3 030f 	rsb	r3, r3, #15
 8003732:	4618      	mov	r0, r3
 8003734:	f7fc ff06 	bl	8000544 <__aeabi_i2d>
 8003738:	a33f      	add	r3, pc, #252	; (adr r3, 8003838 <statemachine+0xd98>)
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	f7fc ff6b 	bl	8000618 <__aeabi_dmul>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4610      	mov	r0, r2
 8003748:	4619      	mov	r1, r3
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	4b40      	ldr	r3, [pc, #256]	; (8003850 <statemachine+0xdb0>)
 8003750:	f7fd f88c 	bl	800086c <__aeabi_ddiv>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	ec43 2b17 	vmov	d7, r2, r3
 800375c:	eeb0 0a47 	vmov.f32	s0, s14
 8003760:	eef0 0a67 	vmov.f32	s1, s15
 8003764:	f012 f8e4 	bl	8015930 <cos>
 8003768:	ec51 0b10 	vmov	r0, r1, d0
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	4b38      	ldr	r3, [pc, #224]	; (8003854 <statemachine+0xdb4>)
 8003772:	f7fc ff51 	bl	8000618 <__aeabi_dmul>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	ec43 2b17 	vmov	d7, r2, r3
 800377e:	eeb0 0a47 	vmov.f32	s0, s14
 8003782:	eef0 0a67 	vmov.f32	s1, s15
 8003786:	f012 f9c3 	bl	8015b10 <floor>
 800378a:	ec51 0b10 	vmov	r0, r1, d0
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	4b2d      	ldr	r3, [pc, #180]	; (8003848 <statemachine+0xda8>)
 8003794:	f7fc fd8a 	bl	80002ac <__adddf3>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	f7fd fa12 	bl	8000bc8 <__aeabi_d2uiz>
 80037a4:	4603      	mov	r3, r0
 80037a6:	b2dc      	uxtb	r4, r3
 80037a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037aa:	f1c3 030f 	rsb	r3, r3, #15
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fc fec8 	bl	8000544 <__aeabi_i2d>
 80037b4:	a320      	add	r3, pc, #128	; (adr r3, 8003838 <statemachine+0xd98>)
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	f7fc ff2d 	bl	8000618 <__aeabi_dmul>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4610      	mov	r0, r2
 80037c4:	4619      	mov	r1, r3
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	4b21      	ldr	r3, [pc, #132]	; (8003850 <statemachine+0xdb0>)
 80037cc:	f7fd f84e 	bl	800086c <__aeabi_ddiv>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	ec43 2b17 	vmov	d7, r2, r3
 80037d8:	eeb0 0a47 	vmov.f32	s0, s14
 80037dc:	eef0 0a67 	vmov.f32	s1, s15
 80037e0:	f012 f8fa 	bl	80159d8 <sin>
 80037e4:	ec51 0b10 	vmov	r0, r1, d0
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <statemachine+0xdb4>)
 80037ee:	f7fc ff13 	bl	8000618 <__aeabi_dmul>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	ec43 2b17 	vmov	d7, r2, r3
 80037fa:	eeb0 0a47 	vmov.f32	s0, s14
 80037fe:	eef0 0a67 	vmov.f32	s1, s15
 8003802:	f012 f985 	bl	8015b10 <floor>
 8003806:	ec53 2b10 	vmov	r2, r3, d0
 800380a:	f04f 0000 	mov.w	r0, #0
 800380e:	490f      	ldr	r1, [pc, #60]	; (800384c <statemachine+0xdac>)
 8003810:	f7fc fd4a 	bl	80002a8 <__aeabi_dsub>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4610      	mov	r0, r2
 800381a:	4619      	mov	r1, r3
 800381c:	f7fd f9d4 	bl	8000bc8 <__aeabi_d2uiz>
 8003820:	4603      	mov	r3, r0
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2201      	movs	r2, #1
 8003826:	9200      	str	r2, [sp, #0]
 8003828:	4622      	mov	r2, r4
 800382a:	2130      	movs	r1, #48	; 0x30
 800382c:	2040      	movs	r0, #64	; 0x40
 800382e:	f7fe ff31 	bl	8002694 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 8003832:	2300      	movs	r3, #0
 8003834:	663b      	str	r3, [r7, #96]	; 0x60
 8003836:	e105      	b.n	8003a44 <statemachine+0xfa4>
 8003838:	54442d18 	.word	0x54442d18
 800383c:	400921fb 	.word	0x400921fb
 8003840:	20000818 	.word	0x20000818
 8003844:	40180000 	.word	0x40180000
 8003848:	40500000 	.word	0x40500000
 800384c:	40480000 	.word	0x40480000
 8003850:	403e0000 	.word	0x403e0000
 8003854:	40280000 	.word	0x40280000
						  ssd1306_Line(64+floor(10*cos((i)*M_PI/6)),48+floor(10*sin((i)*M_PI/6)),64+floor(12*cos((i)*M_PI/6)),48+floor(12*sin((i)*M_PI/6)),White);
 8003858:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800385a:	f7fc fe73 	bl	8000544 <__aeabi_i2d>
 800385e:	a3c2      	add	r3, pc, #776	; (adr r3, 8003b68 <statemachine+0x10c8>)
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f7fc fed8 	bl	8000618 <__aeabi_dmul>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4610      	mov	r0, r2
 800386e:	4619      	mov	r1, r3
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	4bbe      	ldr	r3, [pc, #760]	; (8003b70 <statemachine+0x10d0>)
 8003876:	f7fc fff9 	bl	800086c <__aeabi_ddiv>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	ec43 2b17 	vmov	d7, r2, r3
 8003882:	eeb0 0a47 	vmov.f32	s0, s14
 8003886:	eef0 0a67 	vmov.f32	s1, s15
 800388a:	f012 f851 	bl	8015930 <cos>
 800388e:	ec51 0b10 	vmov	r0, r1, d0
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	4bb7      	ldr	r3, [pc, #732]	; (8003b74 <statemachine+0x10d4>)
 8003898:	f7fc febe 	bl	8000618 <__aeabi_dmul>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	ec43 2b17 	vmov	d7, r2, r3
 80038a4:	eeb0 0a47 	vmov.f32	s0, s14
 80038a8:	eef0 0a67 	vmov.f32	s1, s15
 80038ac:	f012 f930 	bl	8015b10 <floor>
 80038b0:	ec51 0b10 	vmov	r0, r1, d0
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	4baf      	ldr	r3, [pc, #700]	; (8003b78 <statemachine+0x10d8>)
 80038ba:	f7fc fcf7 	bl	80002ac <__adddf3>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4610      	mov	r0, r2
 80038c4:	4619      	mov	r1, r3
 80038c6:	f7fd f97f 	bl	8000bc8 <__aeabi_d2uiz>
 80038ca:	4603      	mov	r3, r0
 80038cc:	b2dc      	uxtb	r4, r3
 80038ce:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80038d0:	f7fc fe38 	bl	8000544 <__aeabi_i2d>
 80038d4:	a3a4      	add	r3, pc, #656	; (adr r3, 8003b68 <statemachine+0x10c8>)
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	f7fc fe9d 	bl	8000618 <__aeabi_dmul>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4610      	mov	r0, r2
 80038e4:	4619      	mov	r1, r3
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	4ba1      	ldr	r3, [pc, #644]	; (8003b70 <statemachine+0x10d0>)
 80038ec:	f7fc ffbe 	bl	800086c <__aeabi_ddiv>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	ec43 2b17 	vmov	d7, r2, r3
 80038f8:	eeb0 0a47 	vmov.f32	s0, s14
 80038fc:	eef0 0a67 	vmov.f32	s1, s15
 8003900:	f012 f86a 	bl	80159d8 <sin>
 8003904:	ec51 0b10 	vmov	r0, r1, d0
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	4b99      	ldr	r3, [pc, #612]	; (8003b74 <statemachine+0x10d4>)
 800390e:	f7fc fe83 	bl	8000618 <__aeabi_dmul>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	ec43 2b17 	vmov	d7, r2, r3
 800391a:	eeb0 0a47 	vmov.f32	s0, s14
 800391e:	eef0 0a67 	vmov.f32	s1, s15
 8003922:	f012 f8f5 	bl	8015b10 <floor>
 8003926:	ec51 0b10 	vmov	r0, r1, d0
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	4b93      	ldr	r3, [pc, #588]	; (8003b7c <statemachine+0x10dc>)
 8003930:	f7fc fcbc 	bl	80002ac <__adddf3>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	f7fd f944 	bl	8000bc8 <__aeabi_d2uiz>
 8003940:	4603      	mov	r3, r0
 8003942:	b2dd      	uxtb	r5, r3
 8003944:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003946:	f7fc fdfd 	bl	8000544 <__aeabi_i2d>
 800394a:	a387      	add	r3, pc, #540	; (adr r3, 8003b68 <statemachine+0x10c8>)
 800394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003950:	f7fc fe62 	bl	8000618 <__aeabi_dmul>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	4b83      	ldr	r3, [pc, #524]	; (8003b70 <statemachine+0x10d0>)
 8003962:	f7fc ff83 	bl	800086c <__aeabi_ddiv>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	ec43 2b17 	vmov	d7, r2, r3
 800396e:	eeb0 0a47 	vmov.f32	s0, s14
 8003972:	eef0 0a67 	vmov.f32	s1, s15
 8003976:	f011 ffdb 	bl	8015930 <cos>
 800397a:	ec51 0b10 	vmov	r0, r1, d0
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	4b7f      	ldr	r3, [pc, #508]	; (8003b80 <statemachine+0x10e0>)
 8003984:	f7fc fe48 	bl	8000618 <__aeabi_dmul>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	ec43 2b17 	vmov	d7, r2, r3
 8003990:	eeb0 0a47 	vmov.f32	s0, s14
 8003994:	eef0 0a67 	vmov.f32	s1, s15
 8003998:	f012 f8ba 	bl	8015b10 <floor>
 800399c:	ec51 0b10 	vmov	r0, r1, d0
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	4b74      	ldr	r3, [pc, #464]	; (8003b78 <statemachine+0x10d8>)
 80039a6:	f7fc fc81 	bl	80002ac <__adddf3>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4610      	mov	r0, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	f7fd f909 	bl	8000bc8 <__aeabi_d2uiz>
 80039b6:	4603      	mov	r3, r0
 80039b8:	b2de      	uxtb	r6, r3
 80039ba:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80039bc:	f7fc fdc2 	bl	8000544 <__aeabi_i2d>
 80039c0:	a369      	add	r3, pc, #420	; (adr r3, 8003b68 <statemachine+0x10c8>)
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	f7fc fe27 	bl	8000618 <__aeabi_dmul>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	4b66      	ldr	r3, [pc, #408]	; (8003b70 <statemachine+0x10d0>)
 80039d8:	f7fc ff48 	bl	800086c <__aeabi_ddiv>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	ec43 2b17 	vmov	d7, r2, r3
 80039e4:	eeb0 0a47 	vmov.f32	s0, s14
 80039e8:	eef0 0a67 	vmov.f32	s1, s15
 80039ec:	f011 fff4 	bl	80159d8 <sin>
 80039f0:	ec51 0b10 	vmov	r0, r1, d0
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	4b61      	ldr	r3, [pc, #388]	; (8003b80 <statemachine+0x10e0>)
 80039fa:	f7fc fe0d 	bl	8000618 <__aeabi_dmul>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	ec43 2b17 	vmov	d7, r2, r3
 8003a06:	eeb0 0a47 	vmov.f32	s0, s14
 8003a0a:	eef0 0a67 	vmov.f32	s1, s15
 8003a0e:	f012 f87f 	bl	8015b10 <floor>
 8003a12:	ec51 0b10 	vmov	r0, r1, d0
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	4b58      	ldr	r3, [pc, #352]	; (8003b7c <statemachine+0x10dc>)
 8003a1c:	f7fc fc46 	bl	80002ac <__adddf3>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4610      	mov	r0, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	f7fd f8ce 	bl	8000bc8 <__aeabi_d2uiz>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2201      	movs	r2, #1
 8003a32:	9200      	str	r2, [sp, #0]
 8003a34:	4632      	mov	r2, r6
 8003a36:	4629      	mov	r1, r5
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f7fe fe2b 	bl	8002694 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 8003a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a40:	3301      	adds	r3, #1
 8003a42:	663b      	str	r3, [r7, #96]	; 0x60
 8003a44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a46:	2b0c      	cmp	r3, #12
 8003a48:	f77f af06 	ble.w	8003858 <statemachine+0xdb8>
					  }
					  if(BTN_B>=1){
 8003a4c:	4b4d      	ldr	r3, [pc, #308]	; (8003b84 <statemachine+0x10e4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	dd1e      	ble.n	8003a92 <statemachine+0xff2>
					  	hrstate--;
 8003a54:	4b4c      	ldr	r3, [pc, #304]	; (8003b88 <statemachine+0x10e8>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	4b4a      	ldr	r3, [pc, #296]	; (8003b88 <statemachine+0x10e8>)
 8003a5e:	701a      	strb	r2, [r3, #0]
					  	BTN_B=0;
 8003a60:	4b48      	ldr	r3, [pc, #288]	; (8003b84 <statemachine+0x10e4>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
					  }


					  break;
 8003a66:	e014      	b.n	8003a92 <statemachine+0xff2>

				  }

			  			 					}
			  			 	else{ //if the GPS doesn't have a fix, print a message
			  			 						char *str = (char*)malloc(sizeof(char)*20);
 8003a68:	2014      	movs	r0, #20
 8003a6a:	f00d fa63 	bl	8010f34 <malloc>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	64fb      	str	r3, [r7, #76]	; 0x4c
			  			 						ssd1306_SetCursor(32, 44);
 8003a72:	212c      	movs	r1, #44	; 0x2c
 8003a74:	2020      	movs	r0, #32
 8003a76:	f7fe fdf5 	bl	8002664 <ssd1306_SetCursor>
			  			 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003a7a:	4a44      	ldr	r2, [pc, #272]	; (8003b8c <statemachine+0x10ec>)
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	ca06      	ldmia	r2, {r1, r2}
 8003a80:	4843      	ldr	r0, [pc, #268]	; (8003b90 <statemachine+0x10f0>)
 8003a82:	f7fe fdc9 	bl	8002618 <ssd1306_WriteString>
			  			 						free(str);
 8003a86:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003a88:	f00d fa5c 	bl	8010f44 <free>
 8003a8c:	e002      	b.n	8003a94 <statemachine+0xff4>
					  break;
 8003a8e:	bf00      	nop
 8003a90:	e000      	b.n	8003a94 <statemachine+0xff4>
					  break;
 8003a92:	bf00      	nop
			  			 	}
				  if(BTN_A>=1){
 8003a94:	4b3f      	ldr	r3, [pc, #252]	; (8003b94 <statemachine+0x10f4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f340 8284 	ble.w	8003fa6 <statemachine+0x1506>
			  		state++;
 8003a9e:	4b3e      	ldr	r3, [pc, #248]	; (8003b98 <statemachine+0x10f8>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	4b3c      	ldr	r3, [pc, #240]	; (8003b98 <statemachine+0x10f8>)
 8003aa8:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8003aaa:	4b3a      	ldr	r3, [pc, #232]	; (8003b94 <statemachine+0x10f4>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8003ab0:	4b34      	ldr	r3, [pc, #208]	; (8003b84 <statemachine+0x10e4>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 8003ab6:	e276      	b.n	8003fa6 <statemachine+0x1506>
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f7fe fc91 	bl	80023e0 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8003abe:	4937      	ldr	r1, [pc, #220]	; (8003b9c <statemachine+0x10fc>)
 8003ac0:	4837      	ldr	r0, [pc, #220]	; (8003ba0 <statemachine+0x1100>)
 8003ac2:	f7fe fa9f 	bl	8002004 <nmea_parse>
			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 8003ac6:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <statemachine+0x1100>)
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d172      	bne.n	8003bb4 <statemachine+0x1114>
			 			 						char * str = (char*)malloc(sizeof(char)*20);
 8003ace:	2014      	movs	r0, #20
 8003ad0:	f00d fa30 	bl	8010f34 <malloc>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	653b      	str	r3, [r7, #80]	; 0x50
			 			 						snprintf(str,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8003ad8:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <statemachine+0x1100>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fc fd43 	bl	8000568 <__aeabi_f2d>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	e9cd 2300 	strd	r2, r3, [sp]
 8003aea:	4a2e      	ldr	r2, [pc, #184]	; (8003ba4 <statemachine+0x1104>)
 8003aec:	210f      	movs	r1, #15
 8003aee:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003af0:	f00f f91c 	bl	8012d2c <sniprintf>
			 			 						ssd1306_SetCursor(32, 32);
 8003af4:	2120      	movs	r1, #32
 8003af6:	2020      	movs	r0, #32
 8003af8:	f7fe fdb4 	bl	8002664 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8003afc:	4a23      	ldr	r2, [pc, #140]	; (8003b8c <statemachine+0x10ec>)
 8003afe:	2301      	movs	r3, #1
 8003b00:	ca06      	ldmia	r2, {r1, r2}
 8003b02:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003b04:	f7fe fd88 	bl	8002618 <ssd1306_WriteString>
			 			 						snprintf(str,15, "SatNb :%d",myData.satelliteCount);
 8003b08:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <statemachine+0x1100>)
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	4a26      	ldr	r2, [pc, #152]	; (8003ba8 <statemachine+0x1108>)
 8003b0e:	210f      	movs	r1, #15
 8003b10:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003b12:	f00f f90b 	bl	8012d2c <sniprintf>
			 			 						ssd1306_SetCursor(32, 42);
 8003b16:	212a      	movs	r1, #42	; 0x2a
 8003b18:	2020      	movs	r0, #32
 8003b1a:	f7fe fda3 	bl	8002664 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8003b1e:	4a1b      	ldr	r2, [pc, #108]	; (8003b8c <statemachine+0x10ec>)
 8003b20:	2301      	movs	r3, #1
 8003b22:	ca06      	ldmia	r2, {r1, r2}
 8003b24:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003b26:	f7fe fd77 	bl	8002618 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 8003b2a:	2132      	movs	r1, #50	; 0x32
 8003b2c:	2020      	movs	r0, #32
 8003b2e:	f7fe fd99 	bl	8002664 <ssd1306_SetCursor>
			 			 						snprintf(str,15,  "T=%0.2fC",temp);
 8003b32:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <statemachine+0x110c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fc fd16 	bl	8000568 <__aeabi_f2d>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	e9cd 2300 	strd	r2, r3, [sp]
 8003b44:	4a1a      	ldr	r2, [pc, #104]	; (8003bb0 <statemachine+0x1110>)
 8003b46:	210f      	movs	r1, #15
 8003b48:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003b4a:	f00f f8ef 	bl	8012d2c <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8003b4e:	4a0f      	ldr	r2, [pc, #60]	; (8003b8c <statemachine+0x10ec>)
 8003b50:	2301      	movs	r3, #1
 8003b52:	ca06      	ldmia	r2, {r1, r2}
 8003b54:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003b56:	f7fe fd5f 	bl	8002618 <ssd1306_WriteString>
			 			 						free(str);
 8003b5a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003b5c:	f00d f9f2 	bl	8010f44 <free>
 8003b60:	e05c      	b.n	8003c1c <statemachine+0x117c>
 8003b62:	bf00      	nop
 8003b64:	f3af 8000 	nop.w
 8003b68:	54442d18 	.word	0x54442d18
 8003b6c:	400921fb 	.word	0x400921fb
 8003b70:	40180000 	.word	0x40180000
 8003b74:	40240000 	.word	0x40240000
 8003b78:	40500000 	.word	0x40500000
 8003b7c:	40480000 	.word	0x40480000
 8003b80:	40280000 	.word	0x40280000
 8003b84:	2000085c 	.word	0x2000085c
 8003b88:	20000861 	.word	0x20000861
 8003b8c:	20000008 	.word	0x20000008
 8003b90:	08016d2c 	.word	0x08016d2c
 8003b94:	20000858 	.word	0x20000858
 8003b98:	20000860 	.word	0x20000860
 8003b9c:	20000614 	.word	0x20000614
 8003ba0:	20000818 	.word	0x20000818
 8003ba4:	08016e08 	.word	0x08016e08
 8003ba8:	08016e14 	.word	0x08016e14
 8003bac:	2000086c 	.word	0x2000086c
 8003bb0:	08016e20 	.word	0x08016e20
			 			 					}
			 			 	else{ //if the GPS doesn't have a fix, print a message
			 			 						char *str = (char*)malloc(sizeof(char)*20);
 8003bb4:	2014      	movs	r0, #20
 8003bb6:	f00d f9bd 	bl	8010f34 <malloc>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	657b      	str	r3, [r7, #84]	; 0x54
			 			 						ssd1306_SetCursor(32, 32);
 8003bbe:	2120      	movs	r1, #32
 8003bc0:	2020      	movs	r0, #32
 8003bc2:	f7fe fd4f 	bl	8002664 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("INFO", Font_6x8, White);
 8003bc6:	4a9c      	ldr	r2, [pc, #624]	; (8003e38 <statemachine+0x1398>)
 8003bc8:	2301      	movs	r3, #1
 8003bca:	ca06      	ldmia	r2, {r1, r2}
 8003bcc:	489b      	ldr	r0, [pc, #620]	; (8003e3c <statemachine+0x139c>)
 8003bce:	f7fe fd23 	bl	8002618 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 41);
 8003bd2:	2129      	movs	r1, #41	; 0x29
 8003bd4:	2020      	movs	r0, #32
 8003bd6:	f7fe fd45 	bl	8002664 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003bda:	4a97      	ldr	r2, [pc, #604]	; (8003e38 <statemachine+0x1398>)
 8003bdc:	2301      	movs	r3, #1
 8003bde:	ca06      	ldmia	r2, {r1, r2}
 8003be0:	4897      	ldr	r0, [pc, #604]	; (8003e40 <statemachine+0x13a0>)
 8003be2:	f7fe fd19 	bl	8002618 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 8003be6:	2132      	movs	r1, #50	; 0x32
 8003be8:	2020      	movs	r0, #32
 8003bea:	f7fe fd3b 	bl	8002664 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "T=%0.2fC",temp);
 8003bee:	4b95      	ldr	r3, [pc, #596]	; (8003e44 <statemachine+0x13a4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fc fcb8 	bl	8000568 <__aeabi_f2d>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	e9cd 2300 	strd	r2, r3, [sp]
 8003c00:	4a91      	ldr	r2, [pc, #580]	; (8003e48 <statemachine+0x13a8>)
 8003c02:	210f      	movs	r1, #15
 8003c04:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003c06:	f00f f891 	bl	8012d2c <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8003c0a:	4a8b      	ldr	r2, [pc, #556]	; (8003e38 <statemachine+0x1398>)
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	ca06      	ldmia	r2, {r1, r2}
 8003c10:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003c12:	f7fe fd01 	bl	8002618 <ssd1306_WriteString>
			 			 						free(str);
 8003c16:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003c18:	f00d f994 	bl	8010f44 <free>
			 			 					}
			  if(BTN_A>=1){
 8003c1c:	4b8b      	ldr	r3, [pc, #556]	; (8003e4c <statemachine+0x13ac>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f340 81c2 	ble.w	8003faa <statemachine+0x150a>
			  		state++;
 8003c26:	4b8a      	ldr	r3, [pc, #552]	; (8003e50 <statemachine+0x13b0>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	4b88      	ldr	r3, [pc, #544]	; (8003e50 <statemachine+0x13b0>)
 8003c30:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8003c32:	4b86      	ldr	r3, [pc, #536]	; (8003e4c <statemachine+0x13ac>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8003c38:	4b86      	ldr	r3, [pc, #536]	; (8003e54 <statemachine+0x13b4>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 8003c3e:	e1b4      	b.n	8003faa <statemachine+0x150a>

		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8003c40:	2000      	movs	r0, #0
 8003c42:	f7fe fbcd 	bl	80023e0 <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 8003c46:	2120      	movs	r1, #32
 8003c48:	2020      	movs	r0, #32
 8003c4a:	f7fe fd0b 	bl	8002664 <ssd1306_SetCursor>
			  char *str = (char*)malloc(sizeof(char)*20);
 8003c4e:	2014      	movs	r0, #20
 8003c50:	f00d f970 	bl	8010f34 <malloc>
 8003c54:	4603      	mov	r3, r0
 8003c56:	65bb      	str	r3, [r7, #88]	; 0x58
			  ssd1306_WriteString("chrono", Font_6x8, White);
 8003c58:	4a77      	ldr	r2, [pc, #476]	; (8003e38 <statemachine+0x1398>)
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	ca06      	ldmia	r2, {r1, r2}
 8003c5e:	487e      	ldr	r0, [pc, #504]	; (8003e58 <statemachine+0x13b8>)
 8003c60:	f7fe fcda 	bl	8002618 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 40);
 8003c64:	2128      	movs	r1, #40	; 0x28
 8003c66:	2020      	movs	r0, #32
 8003c68:	f7fe fcfc 	bl	8002664 <ssd1306_SetCursor>

			  switch(chronostate){
 8003c6c:	4b7b      	ldr	r3, [pc, #492]	; (8003e5c <statemachine+0x13bc>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d038      	beq.n	8003ce6 <statemachine+0x1246>
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	dc4f      	bgt.n	8003d18 <statemachine+0x1278>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <statemachine+0x11e2>
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d01d      	beq.n	8003cbc <statemachine+0x121c>
 8003c80:	e04a      	b.n	8003d18 <statemachine+0x1278>
			  case STATE_RESET:
				  min=0;
 8003c82:	4b77      	ldr	r3, [pc, #476]	; (8003e60 <statemachine+0x13c0>)
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8003c8a:	4b76      	ldr	r3, [pc, #472]	; (8003e64 <statemachine+0x13c4>)
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8003c92:	4b75      	ldr	r3, [pc, #468]	; (8003e68 <statemachine+0x13c8>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
				  	 if(BTN_B>=1){
 8003c98:	4b6e      	ldr	r3, [pc, #440]	; (8003e54 <statemachine+0x13b4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	dd36      	ble.n	8003d0e <statemachine+0x126e>
				  		chronostate++;
 8003ca0:	4b6e      	ldr	r3, [pc, #440]	; (8003e5c <statemachine+0x13bc>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	4b6c      	ldr	r3, [pc, #432]	; (8003e5c <statemachine+0x13bc>)
 8003caa:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8003cac:	4b69      	ldr	r3, [pc, #420]	; (8003e54 <statemachine+0x13b4>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8003cb2:	4b6e      	ldr	r3, [pc, #440]	; (8003e6c <statemachine+0x13cc>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a6e      	ldr	r2, [pc, #440]	; (8003e70 <statemachine+0x13d0>)
 8003cb8:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8003cba:	e028      	b.n	8003d0e <statemachine+0x126e>
			  case STATE_RUN:
				  calctime=uwTick-starttime;
 8003cbc:	4b6b      	ldr	r3, [pc, #428]	; (8003e6c <statemachine+0x13cc>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4b6b      	ldr	r3, [pc, #428]	; (8003e70 <statemachine+0x13d0>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	4a68      	ldr	r2, [pc, #416]	; (8003e68 <statemachine+0x13c8>)
 8003cc8:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8003cca:	4b62      	ldr	r3, [pc, #392]	; (8003e54 <statemachine+0x13b4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	dd1f      	ble.n	8003d12 <statemachine+0x1272>
				  		chronostate++;
 8003cd2:	4b62      	ldr	r3, [pc, #392]	; (8003e5c <statemachine+0x13bc>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	4b60      	ldr	r3, [pc, #384]	; (8003e5c <statemachine+0x13bc>)
 8003cdc:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8003cde:	4b5d      	ldr	r3, [pc, #372]	; (8003e54 <statemachine+0x13b4>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8003ce4:	e015      	b.n	8003d12 <statemachine+0x1272>
			  case STATE_PAUSE:
				  if(BTN_B>=1){
 8003ce6:	4b5b      	ldr	r3, [pc, #364]	; (8003e54 <statemachine+0x13b4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	dd13      	ble.n	8003d16 <statemachine+0x1276>
				  			chronostate--;
 8003cee:	4b5b      	ldr	r3, [pc, #364]	; (8003e5c <statemachine+0x13bc>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	4b59      	ldr	r3, [pc, #356]	; (8003e5c <statemachine+0x13bc>)
 8003cf8:	701a      	strb	r2, [r3, #0]
				  			chronostate--;
 8003cfa:	4b58      	ldr	r3, [pc, #352]	; (8003e5c <statemachine+0x13bc>)
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4b56      	ldr	r3, [pc, #344]	; (8003e5c <statemachine+0x13bc>)
 8003d04:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8003d06:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <statemachine+0x13b4>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
			 }

				  break;
 8003d0c:	e003      	b.n	8003d16 <statemachine+0x1276>
				  break;
 8003d0e:	bf00      	nop
 8003d10:	e002      	b.n	8003d18 <statemachine+0x1278>
				  break;
 8003d12:	bf00      	nop
 8003d14:	e000      	b.n	8003d18 <statemachine+0x1278>
				  break;
 8003d16:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8003d18:	4b53      	ldr	r3, [pc, #332]	; (8003e68 <statemachine+0x13c8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	ee07 3a90 	vmov	s15, r3
 8003d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d24:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003e74 <statemachine+0x13d4>
 8003d28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003d2c:	ee16 0a90 	vmov	r0, s13
 8003d30:	f7fc fc1a 	bl	8000568 <__aeabi_f2d>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	ec43 2b10 	vmov	d0, r2, r3
 8003d3c:	f011 fee8 	bl	8015b10 <floor>
 8003d40:	ec53 2b10 	vmov	r2, r3, d0
 8003d44:	4610      	mov	r0, r2
 8003d46:	4619      	mov	r1, r3
 8003d48:	f7fc ff5e 	bl	8000c08 <__aeabi_d2f>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	4a44      	ldr	r2, [pc, #272]	; (8003e60 <statemachine+0x13c0>)
 8003d50:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8003d52:	4b45      	ldr	r3, [pc, #276]	; (8003e68 <statemachine+0x13c8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	ee07 3a90 	vmov	s15, r3
 8003d5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d5e:	4b40      	ldr	r3, [pc, #256]	; (8003e60 <statemachine+0x13c0>)
 8003d60:	edd3 7a00 	vldr	s15, [r3]
 8003d64:	eddf 6a43 	vldr	s13, [pc, #268]	; 8003e74 <statemachine+0x13d4>
 8003d68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d70:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003e78 <statemachine+0x13d8>
 8003d74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d78:	4b3a      	ldr	r3, [pc, #232]	; (8003e64 <statemachine+0x13c4>)
 8003d7a:	edc3 7a00 	vstr	s15, [r3]
			  snprintf(str,15, "%0.0fmin",min);
 8003d7e:	4b38      	ldr	r3, [pc, #224]	; (8003e60 <statemachine+0x13c0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fc fbf0 	bl	8000568 <__aeabi_f2d>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	e9cd 2300 	strd	r2, r3, [sp]
 8003d90:	4a3a      	ldr	r2, [pc, #232]	; (8003e7c <statemachine+0x13dc>)
 8003d92:	210f      	movs	r1, #15
 8003d94:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003d96:	f00e ffc9 	bl	8012d2c <sniprintf>
			  ssd1306_WriteString(str, Font_7x10, White);
 8003d9a:	4a39      	ldr	r2, [pc, #228]	; (8003e80 <statemachine+0x13e0>)
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	ca06      	ldmia	r2, {r1, r2}
 8003da0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003da2:	f7fe fc39 	bl	8002618 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8003da6:	2132      	movs	r1, #50	; 0x32
 8003da8:	2020      	movs	r0, #32
 8003daa:	f7fe fc5b 	bl	8002664 <ssd1306_SetCursor>
			  snprintf(str,15, "%0.3fsec",seconde);
 8003dae:	4b2d      	ldr	r3, [pc, #180]	; (8003e64 <statemachine+0x13c4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fc fbd8 	bl	8000568 <__aeabi_f2d>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	e9cd 2300 	strd	r2, r3, [sp]
 8003dc0:	4a30      	ldr	r2, [pc, #192]	; (8003e84 <statemachine+0x13e4>)
 8003dc2:	210f      	movs	r1, #15
 8003dc4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003dc6:	f00e ffb1 	bl	8012d2c <sniprintf>
			  ssd1306_WriteString(str, Font_6x8, White);
 8003dca:	4a1b      	ldr	r2, [pc, #108]	; (8003e38 <statemachine+0x1398>)
 8003dcc:	2301      	movs	r3, #1
 8003dce:	ca06      	ldmia	r2, {r1, r2}
 8003dd0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003dd2:	f7fe fc21 	bl	8002618 <ssd1306_WriteString>
			  free(str);
 8003dd6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003dd8:	f00d f8b4 	bl	8010f44 <free>


			  if(BTN_A>=1){
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <statemachine+0x13ac>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f340 80e4 	ble.w	8003fae <statemachine+0x150e>
			 	state++;
 8003de6:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <statemachine+0x13b0>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	3301      	adds	r3, #1
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	4b18      	ldr	r3, [pc, #96]	; (8003e50 <statemachine+0x13b0>)
 8003df0:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8003df2:	4b16      	ldr	r3, [pc, #88]	; (8003e4c <statemachine+0x13ac>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8003df8:	4b16      	ldr	r3, [pc, #88]	; (8003e54 <statemachine+0x13b4>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]


	}
			  break;
 8003dfe:	e0d6      	b.n	8003fae <statemachine+0x150e>
			  case STATE_SPEEDTEST:
				  uint8_t displaybuf[10];
				  ssd1306_Fill(Black);
 8003e00:	2000      	movs	r0, #0
 8003e02:	f7fe faed 	bl	80023e0 <ssd1306_Fill>
				  nmea_speed(&myData, DataBuffer);
 8003e06:	4920      	ldr	r1, [pc, #128]	; (8003e88 <statemachine+0x13e8>)
 8003e08:	4820      	ldr	r0, [pc, #128]	; (8003e8c <statemachine+0x13ec>)
 8003e0a:	f7fe f9ab 	bl	8002164 <nmea_speed>
				  ssd1306_SetCursor(32, 32);
 8003e0e:	2120      	movs	r1, #32
 8003e10:	2020      	movs	r0, #32
 8003e12:	f7fe fc27 	bl	8002664 <ssd1306_SetCursor>
				  ssd1306_WriteString("ecranusb", Font_6x8, White);
 8003e16:	4a08      	ldr	r2, [pc, #32]	; (8003e38 <statemachine+0x1398>)
 8003e18:	2301      	movs	r3, #1
 8003e1a:	ca06      	ldmia	r2, {r1, r2}
 8003e1c:	481c      	ldr	r0, [pc, #112]	; (8003e90 <statemachine+0x13f0>)
 8003e1e:	f7fe fbfb 	bl	8002618 <ssd1306_WriteString>
				  ssd1306_SetCursor(32, 40);
 8003e22:	2128      	movs	r1, #40	; 0x28
 8003e24:	2020      	movs	r0, #32
 8003e26:	f7fe fc1d 	bl	8002664 <ssd1306_SetCursor>
				  HAL_Delay(100);
 8003e2a:	2064      	movs	r0, #100	; 0x64
 8003e2c:	f000 fcf2 	bl	8004814 <HAL_Delay>
				  for(int i=0;i<10;i++){
 8003e30:	2300      	movs	r3, #0
 8003e32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e34:	e03a      	b.n	8003eac <statemachine+0x140c>
 8003e36:	bf00      	nop
 8003e38:	20000008 	.word	0x20000008
 8003e3c:	08016e2c 	.word	0x08016e2c
 8003e40:	08016d2c 	.word	0x08016d2c
 8003e44:	2000086c 	.word	0x2000086c
 8003e48:	08016e20 	.word	0x08016e20
 8003e4c:	20000858 	.word	0x20000858
 8003e50:	20000860 	.word	0x20000860
 8003e54:	2000085c 	.word	0x2000085c
 8003e58:	08016e34 	.word	0x08016e34
 8003e5c:	20000864 	.word	0x20000864
 8003e60:	20000cc0 	.word	0x20000cc0
 8003e64:	20000cbc 	.word	0x20000cbc
 8003e68:	20000cc8 	.word	0x20000cc8
 8003e6c:	20000d70 	.word	0x20000d70
 8003e70:	20000cc4 	.word	0x20000cc4
 8003e74:	476a6000 	.word	0x476a6000
 8003e78:	447a0000 	.word	0x447a0000
 8003e7c:	08016e3c 	.word	0x08016e3c
 8003e80:	20000010 	.word	0x20000010
 8003e84:	08016e48 	.word	0x08016e48
 8003e88:	20000614 	.word	0x20000614
 8003e8c:	20000818 	.word	0x20000818
 8003e90:	08016e54 	.word	0x08016e54
					  displaybuf[i]=usbbuffer[i];
 8003e94:	4a4b      	ldr	r2, [pc, #300]	; (8003fc4 <statemachine+0x1524>)
 8003e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e98:	4413      	add	r3, r2
 8003e9a:	7819      	ldrb	r1, [r3, #0]
 8003e9c:	463a      	mov	r2, r7
 8003e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea0:	4413      	add	r3, r2
 8003ea2:	460a      	mov	r2, r1
 8003ea4:	701a      	strb	r2, [r3, #0]
				  for(int i=0;i<10;i++){
 8003ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eae:	2b09      	cmp	r3, #9
 8003eb0:	ddf0      	ble.n	8003e94 <statemachine+0x13f4>
				  }
				  ssd1306_WriteString((uint8_t*)displaybuf, Font_6x8, White);
 8003eb2:	4a45      	ldr	r2, [pc, #276]	; (8003fc8 <statemachine+0x1528>)
 8003eb4:	4638      	mov	r0, r7
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	ca06      	ldmia	r2, {r1, r2}
 8003eba:	f7fe fbad 	bl	8002618 <ssd1306_WriteString>


				  if(strcmp((uint8_t*)displaybuf,"temp")==0){
 8003ebe:	463b      	mov	r3, r7
 8003ec0:	4942      	ldr	r1, [pc, #264]	; (8003fcc <statemachine+0x152c>)
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fc f984 	bl	80001d0 <strcmp>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d126      	bne.n	8003f1c <statemachine+0x147c>
					  ssd1306_SetCursor(32, 48);
 8003ece:	2130      	movs	r1, #48	; 0x30
 8003ed0:	2020      	movs	r0, #32
 8003ed2:	f7fe fbc7 	bl	8002664 <ssd1306_SetCursor>
					  snprintf((uint8_t*)usbtransmitbuf,64, "la temperature du processeur est de:%0.2fC\n",temp);
 8003ed6:	4b3e      	ldr	r3, [pc, #248]	; (8003fd0 <statemachine+0x1530>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc fb44 	bl	8000568 <__aeabi_f2d>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	e9cd 2300 	strd	r2, r3, [sp]
 8003ee8:	4a3a      	ldr	r2, [pc, #232]	; (8003fd4 <statemachine+0x1534>)
 8003eea:	2140      	movs	r1, #64	; 0x40
 8003eec:	483a      	ldr	r0, [pc, #232]	; (8003fd8 <statemachine+0x1538>)
 8003eee:	f00e ff1d 	bl	8012d2c <sniprintf>
					  snprintf(str,15, "T=%0.2fC",temp);
 8003ef2:	4b37      	ldr	r3, [pc, #220]	; (8003fd0 <statemachine+0x1530>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fc fb36 	bl	8000568 <__aeabi_f2d>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	e9cd 2300 	strd	r2, r3, [sp]
 8003f04:	4a35      	ldr	r2, [pc, #212]	; (8003fdc <statemachine+0x153c>)
 8003f06:	210f      	movs	r1, #15
 8003f08:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003f0a:	f00e ff0f 	bl	8012d2c <sniprintf>
					  ssd1306_WriteString(str, Font_6x8, White);
 8003f0e:	4a2e      	ldr	r2, [pc, #184]	; (8003fc8 <statemachine+0x1528>)
 8003f10:	2301      	movs	r3, #1
 8003f12:	ca06      	ldmia	r2, {r1, r2}
 8003f14:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003f16:	f7fe fb7f 	bl	8002618 <ssd1306_WriteString>
 8003f1a:	e00e      	b.n	8003f3a <statemachine+0x149a>
				  }
				  else{
					  ssd1306_SetCursor(32, 48);
 8003f1c:	2130      	movs	r1, #48	; 0x30
 8003f1e:	2020      	movs	r0, #32
 8003f20:	f7fe fba0 	bl	8002664 <ssd1306_SetCursor>
					  ssd1306_WriteString("nonvalide", Font_6x8, White);
 8003f24:	4a28      	ldr	r2, [pc, #160]	; (8003fc8 <statemachine+0x1528>)
 8003f26:	2301      	movs	r3, #1
 8003f28:	ca06      	ldmia	r2, {r1, r2}
 8003f2a:	482d      	ldr	r0, [pc, #180]	; (8003fe0 <statemachine+0x1540>)
 8003f2c:	f7fe fb74 	bl	8002618 <ssd1306_WriteString>
					  snprintf((uint8_t*)usbtransmitbuf,64, "Veuillez ecrire quelque chose\n");
 8003f30:	4a2c      	ldr	r2, [pc, #176]	; (8003fe4 <statemachine+0x1544>)
 8003f32:	2140      	movs	r1, #64	; 0x40
 8003f34:	4828      	ldr	r0, [pc, #160]	; (8003fd8 <statemachine+0x1538>)
 8003f36:	f00e fef9 	bl	8012d2c <sniprintf>

				  }
				  CDC_Transmit_FS((uint8_t * )usbtransmitbuf,strlen(usbtransmitbuf));
 8003f3a:	4827      	ldr	r0, [pc, #156]	; (8003fd8 <statemachine+0x1538>)
 8003f3c:	f7fc f9a8 	bl	8000290 <strlen>
 8003f40:	4603      	mov	r3, r0
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	4619      	mov	r1, r3
 8003f46:	4824      	ldr	r0, [pc, #144]	; (8003fd8 <statemachine+0x1538>)
 8003f48:	f00c fb1a 	bl	8010580 <CDC_Transmit_FS>




				  if(BTN_A>=1){
 8003f4c:	4b26      	ldr	r3, [pc, #152]	; (8003fe8 <statemachine+0x1548>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	dd2e      	ble.n	8003fb2 <statemachine+0x1512>
				  			 	state--;
 8003f54:	4b25      	ldr	r3, [pc, #148]	; (8003fec <statemachine+0x154c>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	4b23      	ldr	r3, [pc, #140]	; (8003fec <statemachine+0x154c>)
 8003f5e:	701a      	strb	r2, [r3, #0]
				  			 	state--;
 8003f60:	4b22      	ldr	r3, [pc, #136]	; (8003fec <statemachine+0x154c>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	4b20      	ldr	r3, [pc, #128]	; (8003fec <statemachine+0x154c>)
 8003f6a:	701a      	strb	r2, [r3, #0]
				  			 	state--;
 8003f6c:	4b1f      	ldr	r3, [pc, #124]	; (8003fec <statemachine+0x154c>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <statemachine+0x154c>)
 8003f76:	701a      	strb	r2, [r3, #0]
				  			 	state--;
 8003f78:	4b1c      	ldr	r3, [pc, #112]	; (8003fec <statemachine+0x154c>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <statemachine+0x154c>)
 8003f82:	701a      	strb	r2, [r3, #0]
				  			 	state--;
 8003f84:	4b19      	ldr	r3, [pc, #100]	; (8003fec <statemachine+0x154c>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	4b17      	ldr	r3, [pc, #92]	; (8003fec <statemachine+0x154c>)
 8003f8e:	701a      	strb	r2, [r3, #0]
				  			 	BTN_A=0;
 8003f90:	4b15      	ldr	r3, [pc, #84]	; (8003fe8 <statemachine+0x1548>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
				  			 	BTN_B=0;
 8003f96:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <statemachine+0x1550>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
				  	}



				  break;
 8003f9c:	e009      	b.n	8003fb2 <statemachine+0x1512>
				  break;
 8003f9e:	bf00      	nop
 8003fa0:	e008      	b.n	8003fb4 <statemachine+0x1514>
			  break;
 8003fa2:	bf00      	nop
 8003fa4:	e006      	b.n	8003fb4 <statemachine+0x1514>
			  break;
 8003fa6:	bf00      	nop
 8003fa8:	e004      	b.n	8003fb4 <statemachine+0x1514>
			  break;
 8003faa:	bf00      	nop
 8003fac:	e002      	b.n	8003fb4 <statemachine+0x1514>
			  break;
 8003fae:	bf00      	nop
 8003fb0:	e000      	b.n	8003fb4 <statemachine+0x1514>
				  break;
 8003fb2:	bf00      	nop


	}

return ;
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
}
 8003fb8:	3774      	adds	r7, #116	; 0x74
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	ecbd 8b02 	vpop	{d8}
 8003fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000ccc 	.word	0x20000ccc
 8003fc8:	20000008 	.word	0x20000008
 8003fcc:	08016e60 	.word	0x08016e60
 8003fd0:	2000086c 	.word	0x2000086c
 8003fd4:	08016e68 	.word	0x08016e68
 8003fd8:	20000d0c 	.word	0x20000d0c
 8003fdc:	08016e20 	.word	0x08016e20
 8003fe0:	08016e94 	.word	0x08016e94
 8003fe4:	08016ea0 	.word	0x08016ea0
 8003fe8:	20000858 	.word	0x20000858
 8003fec:	20000860 	.word	0x20000860
 8003ff0:	2000085c 	.word	0x2000085c

08003ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ffa:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <HAL_MspInit+0x44>)
 8003ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffe:	4a0e      	ldr	r2, [pc, #56]	; (8004038 <HAL_MspInit+0x44>)
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	6613      	str	r3, [r2, #96]	; 0x60
 8004006:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <HAL_MspInit+0x44>)
 8004008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	607b      	str	r3, [r7, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_MspInit+0x44>)
 8004014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004016:	4a08      	ldr	r2, [pc, #32]	; (8004038 <HAL_MspInit+0x44>)
 8004018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401c:	6593      	str	r3, [r2, #88]	; 0x58
 800401e:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_MspInit+0x44>)
 8004020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40021000 	.word	0x40021000

0800403c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a22      	ldr	r2, [pc, #136]	; (80040d4 <HAL_ADC_MspInit+0x98>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d13e      	bne.n	80040cc <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800404e:	4b22      	ldr	r3, [pc, #136]	; (80040d8 <HAL_ADC_MspInit+0x9c>)
 8004050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004052:	4a21      	ldr	r2, [pc, #132]	; (80040d8 <HAL_ADC_MspInit+0x9c>)
 8004054:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800405a:	4b1f      	ldr	r3, [pc, #124]	; (80040d8 <HAL_ADC_MspInit+0x9c>)
 800405c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004066:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <HAL_ADC_MspInit+0xa0>)
 8004068:	4a1d      	ldr	r2, [pc, #116]	; (80040e0 <HAL_ADC_MspInit+0xa4>)
 800406a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800406c:	4b1b      	ldr	r3, [pc, #108]	; (80040dc <HAL_ADC_MspInit+0xa0>)
 800406e:	2200      	movs	r2, #0
 8004070:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004072:	4b1a      	ldr	r3, [pc, #104]	; (80040dc <HAL_ADC_MspInit+0xa0>)
 8004074:	2200      	movs	r2, #0
 8004076:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004078:	4b18      	ldr	r3, [pc, #96]	; (80040dc <HAL_ADC_MspInit+0xa0>)
 800407a:	2200      	movs	r2, #0
 800407c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800407e:	4b17      	ldr	r3, [pc, #92]	; (80040dc <HAL_ADC_MspInit+0xa0>)
 8004080:	2280      	movs	r2, #128	; 0x80
 8004082:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004084:	4b15      	ldr	r3, [pc, #84]	; (80040dc <HAL_ADC_MspInit+0xa0>)
 8004086:	f44f 7280 	mov.w	r2, #256	; 0x100
 800408a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800408c:	4b13      	ldr	r3, [pc, #76]	; (80040dc <HAL_ADC_MspInit+0xa0>)
 800408e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004092:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004094:	4b11      	ldr	r3, [pc, #68]	; (80040dc <HAL_ADC_MspInit+0xa0>)
 8004096:	2200      	movs	r2, #0
 8004098:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800409a:	4b10      	ldr	r3, [pc, #64]	; (80040dc <HAL_ADC_MspInit+0xa0>)
 800409c:	2200      	movs	r2, #0
 800409e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80040a0:	480e      	ldr	r0, [pc, #56]	; (80040dc <HAL_ADC_MspInit+0xa0>)
 80040a2:	f001 ff8d 	bl	8005fc0 <HAL_DMA_Init>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_ADC_MspInit+0x74>
    {
      Error_Handler();
 80040ac:	f7fd fc90 	bl	80019d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <HAL_ADC_MspInit+0xa0>)
 80040b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80040b6:	4a09      	ldr	r2, [pc, #36]	; (80040dc <HAL_ADC_MspInit+0xa0>)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80040bc:	2200      	movs	r2, #0
 80040be:	2100      	movs	r1, #0
 80040c0:	2012      	movs	r0, #18
 80040c2:	f001 ff46 	bl	8005f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80040c6:	2012      	movs	r0, #18
 80040c8:	f001 ff5f 	bl	8005f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	50040000 	.word	0x50040000
 80040d8:	40021000 	.word	0x40021000
 80040dc:	20000378 	.word	0x20000378
 80040e0:	40020008 	.word	0x40020008

080040e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b0a2      	sub	sp, #136	; 0x88
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	605a      	str	r2, [r3, #4]
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	60da      	str	r2, [r3, #12]
 80040fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040fc:	f107 0320 	add.w	r3, r7, #32
 8004100:	2254      	movs	r2, #84	; 0x54
 8004102:	2100      	movs	r1, #0
 8004104:	4618      	mov	r0, r3
 8004106:	f00e fea8 	bl	8012e5a <memset>
  if(hi2c->Instance==I2C1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a4f      	ldr	r2, [pc, #316]	; (800424c <HAL_I2C_MspInit+0x168>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d13a      	bne.n	800418a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004114:	2340      	movs	r3, #64	; 0x40
 8004116:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004118:	2300      	movs	r3, #0
 800411a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800411c:	f107 0320 	add.w	r3, r7, #32
 8004120:	4618      	mov	r0, r3
 8004122:	f005 fc3f 	bl	80099a4 <HAL_RCCEx_PeriphCLKConfig>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800412c:	f7fd fc50 	bl	80019d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004130:	4b47      	ldr	r3, [pc, #284]	; (8004250 <HAL_I2C_MspInit+0x16c>)
 8004132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004134:	4a46      	ldr	r2, [pc, #280]	; (8004250 <HAL_I2C_MspInit+0x16c>)
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800413c:	4b44      	ldr	r3, [pc, #272]	; (8004250 <HAL_I2C_MspInit+0x16c>)
 800413e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004148:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800414c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800414e:	2312      	movs	r3, #18
 8004150:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004152:	2300      	movs	r3, #0
 8004154:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004156:	2303      	movs	r3, #3
 8004158:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800415c:	2304      	movs	r3, #4
 800415e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004162:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004166:	4619      	mov	r1, r3
 8004168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800416c:	f002 f9aa 	bl	80064c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004170:	4b37      	ldr	r3, [pc, #220]	; (8004250 <HAL_I2C_MspInit+0x16c>)
 8004172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004174:	4a36      	ldr	r2, [pc, #216]	; (8004250 <HAL_I2C_MspInit+0x16c>)
 8004176:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800417a:	6593      	str	r3, [r2, #88]	; 0x58
 800417c:	4b34      	ldr	r3, [pc, #208]	; (8004250 <HAL_I2C_MspInit+0x16c>)
 800417e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004184:	61bb      	str	r3, [r7, #24]
 8004186:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004188:	e05c      	b.n	8004244 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a31      	ldr	r2, [pc, #196]	; (8004254 <HAL_I2C_MspInit+0x170>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d157      	bne.n	8004244 <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004198:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800419a:	2300      	movs	r3, #0
 800419c:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800419e:	f107 0320 	add.w	r3, r7, #32
 80041a2:	4618      	mov	r0, r3
 80041a4:	f005 fbfe 	bl	80099a4 <HAL_RCCEx_PeriphCLKConfig>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 80041ae:	f7fd fc0f 	bl	80019d0 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041b2:	4b27      	ldr	r3, [pc, #156]	; (8004250 <HAL_I2C_MspInit+0x16c>)
 80041b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b6:	4a26      	ldr	r2, [pc, #152]	; (8004250 <HAL_I2C_MspInit+0x16c>)
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041be:	4b24      	ldr	r3, [pc, #144]	; (8004250 <HAL_I2C_MspInit+0x16c>)
 80041c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ca:	4b21      	ldr	r3, [pc, #132]	; (8004250 <HAL_I2C_MspInit+0x16c>)
 80041cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ce:	4a20      	ldr	r2, [pc, #128]	; (8004250 <HAL_I2C_MspInit+0x16c>)
 80041d0:	f043 0302 	orr.w	r3, r3, #2
 80041d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041d6:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <HAL_I2C_MspInit+0x16c>)
 80041d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80041e2:	2380      	movs	r3, #128	; 0x80
 80041e4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041e6:	2312      	movs	r3, #18
 80041e8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ee:	2303      	movs	r3, #3
 80041f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80041f4:	2304      	movs	r3, #4
 80041f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80041fe:	4619      	mov	r1, r3
 8004200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004204:	f002 f95e 	bl	80064c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004208:	2310      	movs	r3, #16
 800420a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800420c:	2312      	movs	r3, #18
 800420e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004210:	2300      	movs	r3, #0
 8004212:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004214:	2303      	movs	r3, #3
 8004216:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800421a:	2304      	movs	r3, #4
 800421c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004220:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004224:	4619      	mov	r1, r3
 8004226:	480c      	ldr	r0, [pc, #48]	; (8004258 <HAL_I2C_MspInit+0x174>)
 8004228:	f002 f94c 	bl	80064c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800422c:	4b08      	ldr	r3, [pc, #32]	; (8004250 <HAL_I2C_MspInit+0x16c>)
 800422e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004230:	4a07      	ldr	r2, [pc, #28]	; (8004250 <HAL_I2C_MspInit+0x16c>)
 8004232:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004236:	6593      	str	r3, [r2, #88]	; 0x58
 8004238:	4b05      	ldr	r3, [pc, #20]	; (8004250 <HAL_I2C_MspInit+0x16c>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	68fb      	ldr	r3, [r7, #12]
}
 8004244:	bf00      	nop
 8004246:	3788      	adds	r7, #136	; 0x88
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40005400 	.word	0x40005400
 8004250:	40021000 	.word	0x40021000
 8004254:	40005c00 	.word	0x40005c00
 8004258:	48000400 	.word	0x48000400

0800425c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b09e      	sub	sp, #120	; 0x78
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004264:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	60da      	str	r2, [r3, #12]
 8004272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004274:	f107 0310 	add.w	r3, r7, #16
 8004278:	2254      	movs	r2, #84	; 0x54
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f00e fdec 	bl	8012e5a <memset>
  if(huart->Instance==LPUART1)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a38      	ldr	r2, [pc, #224]	; (8004368 <HAL_UART_MspInit+0x10c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d168      	bne.n	800435e <HAL_UART_MspInit+0x102>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800428c:	2320      	movs	r3, #32
 800428e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004290:	2300      	movs	r3, #0
 8004292:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004294:	f107 0310 	add.w	r3, r7, #16
 8004298:	4618      	mov	r0, r3
 800429a:	f005 fb83 	bl	80099a4 <HAL_RCCEx_PeriphCLKConfig>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80042a4:	f7fd fb94 	bl	80019d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80042a8:	4b30      	ldr	r3, [pc, #192]	; (800436c <HAL_UART_MspInit+0x110>)
 80042aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ac:	4a2f      	ldr	r2, [pc, #188]	; (800436c <HAL_UART_MspInit+0x110>)
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80042b4:	4b2d      	ldr	r3, [pc, #180]	; (800436c <HAL_UART_MspInit+0x110>)
 80042b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042c0:	4b2a      	ldr	r3, [pc, #168]	; (800436c <HAL_UART_MspInit+0x110>)
 80042c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c4:	4a29      	ldr	r2, [pc, #164]	; (800436c <HAL_UART_MspInit+0x110>)
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042cc:	4b27      	ldr	r3, [pc, #156]	; (800436c <HAL_UART_MspInit+0x110>)
 80042ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80042d8:	230c      	movs	r3, #12
 80042da:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042dc:	2302      	movs	r3, #2
 80042de:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042e4:	2303      	movs	r3, #3
 80042e6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80042e8:	2308      	movs	r3, #8
 80042ea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80042f0:	4619      	mov	r1, r3
 80042f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042f6:	f002 f8e5 	bl	80064c4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 80042fa:	4b1d      	ldr	r3, [pc, #116]	; (8004370 <HAL_UART_MspInit+0x114>)
 80042fc:	4a1d      	ldr	r2, [pc, #116]	; (8004374 <HAL_UART_MspInit+0x118>)
 80042fe:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 8004300:	4b1b      	ldr	r3, [pc, #108]	; (8004370 <HAL_UART_MspInit+0x114>)
 8004302:	2204      	movs	r2, #4
 8004304:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004306:	4b1a      	ldr	r3, [pc, #104]	; (8004370 <HAL_UART_MspInit+0x114>)
 8004308:	2200      	movs	r2, #0
 800430a:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800430c:	4b18      	ldr	r3, [pc, #96]	; (8004370 <HAL_UART_MspInit+0x114>)
 800430e:	2200      	movs	r2, #0
 8004310:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004312:	4b17      	ldr	r3, [pc, #92]	; (8004370 <HAL_UART_MspInit+0x114>)
 8004314:	2280      	movs	r2, #128	; 0x80
 8004316:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004318:	4b15      	ldr	r3, [pc, #84]	; (8004370 <HAL_UART_MspInit+0x114>)
 800431a:	2200      	movs	r2, #0
 800431c:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800431e:	4b14      	ldr	r3, [pc, #80]	; (8004370 <HAL_UART_MspInit+0x114>)
 8004320:	2200      	movs	r2, #0
 8004322:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_CIRCULAR;
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <HAL_UART_MspInit+0x114>)
 8004326:	2220      	movs	r2, #32
 8004328:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800432a:	4b11      	ldr	r3, [pc, #68]	; (8004370 <HAL_UART_MspInit+0x114>)
 800432c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004330:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 8004332:	480f      	ldr	r0, [pc, #60]	; (8004370 <HAL_UART_MspInit+0x114>)
 8004334:	f001 fe44 	bl	8005fc0 <HAL_DMA_Init>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800433e:	f7fd fb47 	bl	80019d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart_rx);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a0a      	ldr	r2, [pc, #40]	; (8004370 <HAL_UART_MspInit+0x114>)
 8004346:	675a      	str	r2, [r3, #116]	; 0x74
 8004348:	4a09      	ldr	r2, [pc, #36]	; (8004370 <HAL_UART_MspInit+0x114>)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800434e:	2200      	movs	r2, #0
 8004350:	2100      	movs	r1, #0
 8004352:	2046      	movs	r0, #70	; 0x46
 8004354:	f001 fdfd 	bl	8005f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004358:	2046      	movs	r0, #70	; 0x46
 800435a:	f001 fe16 	bl	8005f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800435e:	bf00      	nop
 8004360:	3778      	adds	r7, #120	; 0x78
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40008000 	.word	0x40008000
 800436c:	40021000 	.word	0x40021000
 8004370:	200004f0 	.word	0x200004f0
 8004374:	40020480 	.word	0x40020480

08004378 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004388:	d10c      	bne.n	80043a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800438a:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <HAL_TIM_Base_MspInit+0x68>)
 800438c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438e:	4a14      	ldr	r2, [pc, #80]	; (80043e0 <HAL_TIM_Base_MspInit+0x68>)
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	6593      	str	r3, [r2, #88]	; 0x58
 8004396:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <HAL_TIM_Base_MspInit+0x68>)
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80043a2:	e018      	b.n	80043d6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a0e      	ldr	r2, [pc, #56]	; (80043e4 <HAL_TIM_Base_MspInit+0x6c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d113      	bne.n	80043d6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80043ae:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <HAL_TIM_Base_MspInit+0x68>)
 80043b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b2:	4a0b      	ldr	r2, [pc, #44]	; (80043e0 <HAL_TIM_Base_MspInit+0x68>)
 80043b4:	f043 0320 	orr.w	r3, r3, #32
 80043b8:	6593      	str	r3, [r2, #88]	; 0x58
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <HAL_TIM_Base_MspInit+0x68>)
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80043c6:	2200      	movs	r2, #0
 80043c8:	2100      	movs	r1, #0
 80043ca:	2037      	movs	r0, #55	; 0x37
 80043cc:	f001 fdc1 	bl	8005f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80043d0:	2037      	movs	r0, #55	; 0x37
 80043d2:	f001 fdda 	bl	8005f8a <HAL_NVIC_EnableIRQ>
}
 80043d6:	bf00      	nop
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40001400 	.word	0x40001400

080043e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80043ec:	e7fe      	b.n	80043ec <NMI_Handler+0x4>
	...

080043f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_Fill(Black);
 80043f4:	2000      	movs	r0, #0
 80043f6:	f7fd fff3 	bl	80023e0 <ssd1306_Fill>
	  ssd1306_SetCursor(33, 36);
 80043fa:	2124      	movs	r1, #36	; 0x24
 80043fc:	2021      	movs	r0, #33	; 0x21
 80043fe:	f7fe f931 	bl	8002664 <ssd1306_SetCursor>
	  ssd1306_WriteString("rincee en", Font_6x8, White);
 8004402:	4a09      	ldr	r2, [pc, #36]	; (8004428 <HardFault_Handler+0x38>)
 8004404:	2301      	movs	r3, #1
 8004406:	ca06      	ldmia	r2, {r1, r2}
 8004408:	4808      	ldr	r0, [pc, #32]	; (800442c <HardFault_Handler+0x3c>)
 800440a:	f7fe f905 	bl	8002618 <ssd1306_WriteString>
	  ssd1306_SetCursor(33, 46);
 800440e:	212e      	movs	r1, #46	; 0x2e
 8004410:	2021      	movs	r0, #33	; 0x21
 8004412:	f7fe f927 	bl	8002664 <ssd1306_SetCursor>
	  ssd1306_WriteString("code", Font_6x8, White);
 8004416:	4a04      	ldr	r2, [pc, #16]	; (8004428 <HardFault_Handler+0x38>)
 8004418:	2301      	movs	r3, #1
 800441a:	ca06      	ldmia	r2, {r1, r2}
 800441c:	4804      	ldr	r0, [pc, #16]	; (8004430 <HardFault_Handler+0x40>)
 800441e:	f7fe f8fb 	bl	8002618 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8004422:	f7fd fff5 	bl	8002410 <ssd1306_UpdateScreen>
	  ssd1306_Fill(Black);
 8004426:	e7e5      	b.n	80043f4 <HardFault_Handler+0x4>
 8004428:	20000008 	.word	0x20000008
 800442c:	08016ec0 	.word	0x08016ec0
 8004430:	08016ecc 	.word	0x08016ecc

08004434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004438:	e7fe      	b.n	8004438 <MemManage_Handler+0x4>

0800443a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800443a:	b480      	push	{r7}
 800443c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800443e:	e7fe      	b.n	800443e <BusFault_Handler+0x4>

08004440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004444:	e7fe      	b.n	8004444 <UsageFault_Handler+0x4>

08004446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004446:	b480      	push	{r7}
 8004448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800444a:	bf00      	nop
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004458:	bf00      	nop
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004462:	b480      	push	{r7}
 8004464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004466:	bf00      	nop
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	distanceparcouru+=1;
 8004474:	4b04      	ldr	r3, [pc, #16]	; (8004488 <SysTick_Handler+0x18>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3301      	adds	r3, #1
 800447a:	4a03      	ldr	r2, [pc, #12]	; (8004488 <SysTick_Handler+0x18>)
 800447c:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800447e:	f000 f9a9 	bl	80047d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000d68 	.word	0x20000d68

0800448c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004490:	4802      	ldr	r0, [pc, #8]	; (800449c <DMA1_Channel1_IRQHandler+0x10>)
 8004492:	f001 ff2c 	bl	80062ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004496:	bf00      	nop
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20000378 	.word	0x20000378

080044a0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80044a4:	4802      	ldr	r0, [pc, #8]	; (80044b0 <ADC1_IRQHandler+0x10>)
 80044a6:	f000 fd79 	bl	8004f9c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20000314 	.word	0x20000314

080044b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80044b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80044bc:	f002 f984 	bl	80067c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80044c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80044c4:	f002 f980 	bl	80067c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80044c8:	bf00      	nop
 80044ca:	bd80      	pop	{r7, pc}

080044cc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	distanceparcouru+=1;
 80044d0:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <TIM7_IRQHandler+0x18>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3301      	adds	r3, #1
 80044d6:	4a03      	ldr	r2, [pc, #12]	; (80044e4 <TIM7_IRQHandler+0x18>)
 80044d8:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80044da:	4803      	ldr	r0, [pc, #12]	; (80044e8 <TIM7_IRQHandler+0x1c>)
 80044dc:	f005 fdee 	bl	800a0bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80044e0:	bf00      	nop
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	20000d68 	.word	0x20000d68
 80044e8:	20000584 	.word	0x20000584

080044ec <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80044f0:	4802      	ldr	r0, [pc, #8]	; (80044fc <USB_IRQHandler+0x10>)
 80044f2:	f002 ff54 	bl	800739e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80044f6:	bf00      	nop
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20001a54 	.word	0x20001a54

08004500 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 8004504:	4802      	ldr	r0, [pc, #8]	; (8004510 <DMA2_Channel7_IRQHandler+0x10>)
 8004506:	f001 fef2 	bl	80062ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 800450a:	bf00      	nop
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	200004f0 	.word	0x200004f0

08004514 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */


  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004518:	4802      	ldr	r0, [pc, #8]	; (8004524 <LPUART1_IRQHandler+0x10>)
 800451a:	f006 fae5 	bl	800aae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800451e:	bf00      	nop
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	20000468 	.word	0x20000468

08004528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  return 1;
 800452c:	2301      	movs	r3, #1
}
 800452e:	4618      	mov	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <_kill>:

int _kill(int pid, int sig)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004542:	f00e fd71 	bl	8013028 <__errno>
 8004546:	4603      	mov	r3, r0
 8004548:	2216      	movs	r2, #22
 800454a:	601a      	str	r2, [r3, #0]
  return -1;
 800454c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <_exit>:

void _exit (int status)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004560:	f04f 31ff 	mov.w	r1, #4294967295
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff ffe7 	bl	8004538 <_kill>
  while (1) {}    /* Make sure we hang here */
 800456a:	e7fe      	b.n	800456a <_exit+0x12>

0800456c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	e00a      	b.n	8004594 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800457e:	f3af 8000 	nop.w
 8004582:	4601      	mov	r1, r0
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	60ba      	str	r2, [r7, #8]
 800458a:	b2ca      	uxtb	r2, r1
 800458c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	3301      	adds	r3, #1
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	429a      	cmp	r2, r3
 800459a:	dbf0      	blt.n	800457e <_read+0x12>
  }

  return len;
 800459c:	687b      	ldr	r3, [r7, #4]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b086      	sub	sp, #24
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	e009      	b.n	80045cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	60ba      	str	r2, [r7, #8]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	3301      	adds	r3, #1
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	dbf1      	blt.n	80045b8 <_write+0x12>
  }
  return len;
 80045d4:	687b      	ldr	r3, [r7, #4]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <_close>:

int _close(int file)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80045e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004606:	605a      	str	r2, [r3, #4]
  return 0;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <_isatty>:

int _isatty(int file)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800461e:	2301      	movs	r3, #1
}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004650:	4a14      	ldr	r2, [pc, #80]	; (80046a4 <_sbrk+0x5c>)
 8004652:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <_sbrk+0x60>)
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800465c:	4b13      	ldr	r3, [pc, #76]	; (80046ac <_sbrk+0x64>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d102      	bne.n	800466a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004664:	4b11      	ldr	r3, [pc, #68]	; (80046ac <_sbrk+0x64>)
 8004666:	4a12      	ldr	r2, [pc, #72]	; (80046b0 <_sbrk+0x68>)
 8004668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800466a:	4b10      	ldr	r3, [pc, #64]	; (80046ac <_sbrk+0x64>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4413      	add	r3, r2
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	429a      	cmp	r2, r3
 8004676:	d207      	bcs.n	8004688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004678:	f00e fcd6 	bl	8013028 <__errno>
 800467c:	4603      	mov	r3, r0
 800467e:	220c      	movs	r2, #12
 8004680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295
 8004686:	e009      	b.n	800469c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004688:	4b08      	ldr	r3, [pc, #32]	; (80046ac <_sbrk+0x64>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800468e:	4b07      	ldr	r3, [pc, #28]	; (80046ac <_sbrk+0x64>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4413      	add	r3, r2
 8004696:	4a05      	ldr	r2, [pc, #20]	; (80046ac <_sbrk+0x64>)
 8004698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800469a:	68fb      	ldr	r3, [r7, #12]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20010000 	.word	0x20010000
 80046a8:	00000400 	.word	0x00000400
 80046ac:	20000d6c 	.word	0x20000d6c
 80046b0:	200020b8 	.word	0x200020b8

080046b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <SystemInit+0x20>)
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046be:	4a05      	ldr	r2, [pc, #20]	; (80046d4 <SystemInit+0x20>)
 80046c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80046c8:	bf00      	nop
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	e000ed00 	.word	0xe000ed00

080046d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80046d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004710 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80046dc:	f7ff ffea 	bl	80046b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046e0:	480c      	ldr	r0, [pc, #48]	; (8004714 <LoopForever+0x6>)
  ldr r1, =_edata
 80046e2:	490d      	ldr	r1, [pc, #52]	; (8004718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80046e4:	4a0d      	ldr	r2, [pc, #52]	; (800471c <LoopForever+0xe>)
  movs r3, #0
 80046e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046e8:	e002      	b.n	80046f0 <LoopCopyDataInit>

080046ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046ee:	3304      	adds	r3, #4

080046f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046f4:	d3f9      	bcc.n	80046ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046f6:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80046f8:	4c0a      	ldr	r4, [pc, #40]	; (8004724 <LoopForever+0x16>)
  movs r3, #0
 80046fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046fc:	e001      	b.n	8004702 <LoopFillZerobss>

080046fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004700:	3204      	adds	r2, #4

08004702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004704:	d3fb      	bcc.n	80046fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004706:	f00e fc95 	bl	8013034 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800470a:	f7fc fe13 	bl	8001334 <main>

0800470e <LoopForever>:

LoopForever:
    b LoopForever
 800470e:	e7fe      	b.n	800470e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004710:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004718:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 800471c:	08019198 	.word	0x08019198
  ldr r2, =_sbss
 8004720:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8004724:	200020b8 	.word	0x200020b8

08004728 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004728:	e7fe      	b.n	8004728 <CAN1_RX0_IRQHandler>

0800472a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004734:	2003      	movs	r0, #3
 8004736:	f001 fc01 	bl	8005f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800473a:	200f      	movs	r0, #15
 800473c:	f000 f80e 	bl	800475c <HAL_InitTick>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	71fb      	strb	r3, [r7, #7]
 800474a:	e001      	b.n	8004750 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800474c:	f7ff fc52 	bl	8003ff4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004750:	79fb      	ldrb	r3, [r7, #7]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004768:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <HAL_InitTick+0x6c>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d023      	beq.n	80047b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004770:	4b16      	ldr	r3, [pc, #88]	; (80047cc <HAL_InitTick+0x70>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <HAL_InitTick+0x6c>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	4619      	mov	r1, r3
 800477a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800477e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004782:	fbb2 f3f3 	udiv	r3, r2, r3
 8004786:	4618      	mov	r0, r3
 8004788:	f001 fc0d 	bl	8005fa6 <HAL_SYSTICK_Config>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10f      	bne.n	80047b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b0f      	cmp	r3, #15
 8004796:	d809      	bhi.n	80047ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004798:	2200      	movs	r2, #0
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	f04f 30ff 	mov.w	r0, #4294967295
 80047a0:	f001 fbd7 	bl	8005f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80047a4:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <HAL_InitTick+0x74>)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e007      	b.n	80047bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	73fb      	strb	r3, [r7, #15]
 80047b0:	e004      	b.n	80047bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]
 80047b6:	e001      	b.n	80047bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20000028 	.word	0x20000028
 80047cc:	20000020 	.word	0x20000020
 80047d0:	20000024 	.word	0x20000024

080047d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <HAL_IncTick+0x20>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	461a      	mov	r2, r3
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <HAL_IncTick+0x24>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4413      	add	r3, r2
 80047e4:	4a04      	ldr	r2, [pc, #16]	; (80047f8 <HAL_IncTick+0x24>)
 80047e6:	6013      	str	r3, [r2, #0]
}
 80047e8:	bf00      	nop
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20000028 	.word	0x20000028
 80047f8:	20000d70 	.word	0x20000d70

080047fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004800:	4b03      	ldr	r3, [pc, #12]	; (8004810 <HAL_GetTick+0x14>)
 8004802:	681b      	ldr	r3, [r3, #0]
}
 8004804:	4618      	mov	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	20000d70 	.word	0x20000d70

08004814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800481c:	f7ff ffee 	bl	80047fc <HAL_GetTick>
 8004820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482c:	d005      	beq.n	800483a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800482e:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <HAL_Delay+0x44>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800483a:	bf00      	nop
 800483c:	f7ff ffde 	bl	80047fc <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	429a      	cmp	r2, r3
 800484a:	d8f7      	bhi.n	800483c <HAL_Delay+0x28>
  {
  }
}
 800484c:	bf00      	nop
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000028 	.word	0x20000028

0800485c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	609a      	str	r2, [r3, #8]
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3360      	adds	r3, #96	; 0x60
 80048d6:	461a      	mov	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <LL_ADC_SetOffset+0x44>)
 80048e6:	4013      	ands	r3, r2
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80048fc:	bf00      	nop
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	03fff000 	.word	0x03fff000

0800490c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3360      	adds	r3, #96	; 0x60
 800491a:	461a      	mov	r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3360      	adds	r3, #96	; 0x60
 8004948:	461a      	mov	r2, r3
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	431a      	orrs	r2, r3
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004962:	bf00      	nop
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3330      	adds	r3, #48	; 0x30
 80049a4:	461a      	mov	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	f003 030c 	and.w	r3, r3, #12
 80049b0:	4413      	add	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	211f      	movs	r1, #31
 80049c0:	fa01 f303 	lsl.w	r3, r1, r3
 80049c4:	43db      	mvns	r3, r3
 80049c6:	401a      	ands	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	0e9b      	lsrs	r3, r3, #26
 80049cc:	f003 011f 	and.w	r1, r3, #31
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	fa01 f303 	lsl.w	r3, r1, r3
 80049da:	431a      	orrs	r2, r3
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80049e0:	bf00      	nop
 80049e2:	371c      	adds	r7, #28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b087      	sub	sp, #28
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3314      	adds	r3, #20
 8004a22:	461a      	mov	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	0e5b      	lsrs	r3, r3, #25
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	4413      	add	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	0d1b      	lsrs	r3, r3, #20
 8004a3a:	f003 031f 	and.w	r3, r3, #31
 8004a3e:	2107      	movs	r1, #7
 8004a40:	fa01 f303 	lsl.w	r3, r1, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	401a      	ands	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	0d1b      	lsrs	r3, r3, #20
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	fa01 f303 	lsl.w	r3, r1, r3
 8004a56:	431a      	orrs	r2, r3
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004a5c:	bf00      	nop
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a80:	43db      	mvns	r3, r3
 8004a82:	401a      	ands	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f003 0318 	and.w	r3, r3, #24
 8004a8a:	4908      	ldr	r1, [pc, #32]	; (8004aac <LL_ADC_SetChannelSingleDiff+0x44>)
 8004a8c:	40d9      	lsrs	r1, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	400b      	ands	r3, r1
 8004a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a96:	431a      	orrs	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004a9e:	bf00      	nop
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	0007ffff 	.word	0x0007ffff

08004ab0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004ac0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6093      	str	r3, [r2, #8]
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae8:	d101      	bne.n	8004aee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004b0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b38:	d101      	bne.n	8004b3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b60:	f043 0201 	orr.w	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <LL_ADC_IsEnabled+0x18>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <LL_ADC_IsEnabled+0x1a>
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004baa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004bae:	f043 0204 	orr.w	r2, r3, #4
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d101      	bne.n	8004bda <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d101      	bne.n	8004c00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e126      	b.n	8004e78 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d109      	bne.n	8004c4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff f9ff 	bl	800403c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff ff3f 	bl	8004ad4 <LL_ADC_IsDeepPowerDownEnabled>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d004      	beq.n	8004c66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff ff25 	bl	8004ab0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff ff5a 	bl	8004b24 <LL_ADC_IsInternalRegulatorEnabled>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d115      	bne.n	8004ca2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff ff3e 	bl	8004afc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c80:	4b7f      	ldr	r3, [pc, #508]	; (8004e80 <HAL_ADC_Init+0x270>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	099b      	lsrs	r3, r3, #6
 8004c86:	4a7f      	ldr	r2, [pc, #508]	; (8004e84 <HAL_ADC_Init+0x274>)
 8004c88:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8c:	099b      	lsrs	r3, r3, #6
 8004c8e:	3301      	adds	r3, #1
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004c94:	e002      	b.n	8004c9c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f9      	bne.n	8004c96 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff ff3c 	bl	8004b24 <LL_ADC_IsInternalRegulatorEnabled>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10d      	bne.n	8004cce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb6:	f043 0210 	orr.w	r2, r3, #16
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc2:	f043 0201 	orr.w	r2, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff ff75 	bl	8004bc2 <LL_ADC_REG_IsConversionOngoing>
 8004cd8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cde:	f003 0310 	and.w	r3, r3, #16
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f040 80bf 	bne.w	8004e66 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f040 80bb 	bne.w	8004e66 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004cf8:	f043 0202 	orr.w	r2, r3, #2
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff ff35 	bl	8004b74 <LL_ADC_IsEnabled>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10b      	bne.n	8004d28 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d10:	485d      	ldr	r0, [pc, #372]	; (8004e88 <HAL_ADC_Init+0x278>)
 8004d12:	f7ff ff2f 	bl	8004b74 <LL_ADC_IsEnabled>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d105      	bne.n	8004d28 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4619      	mov	r1, r3
 8004d22:	485a      	ldr	r0, [pc, #360]	; (8004e8c <HAL_ADC_Init+0x27c>)
 8004d24:	f7ff fd9a 	bl	800485c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	7e5b      	ldrb	r3, [r3, #25]
 8004d2c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d32:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004d38:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004d3e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d46:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d106      	bne.n	8004d64 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	045b      	lsls	r3, r3, #17
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d009      	beq.n	8004d80 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	4b42      	ldr	r3, [pc, #264]	; (8004e90 <HAL_ADC_Init+0x280>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6812      	ldr	r2, [r2, #0]
 8004d8e:	69b9      	ldr	r1, [r7, #24]
 8004d90:	430b      	orrs	r3, r1
 8004d92:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff ff25 	bl	8004be8 <LL_ADC_INJ_IsConversionOngoing>
 8004d9e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d13d      	bne.n	8004e22 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d13a      	bne.n	8004e22 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004db0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004db8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dc8:	f023 0302 	bic.w	r3, r3, #2
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6812      	ldr	r2, [r2, #0]
 8004dd0:	69b9      	ldr	r1, [r7, #24]
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d118      	bne.n	8004e12 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004dea:	f023 0304 	bic.w	r3, r3, #4
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004df6:	4311      	orrs	r1, r2
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004dfc:	4311      	orrs	r1, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e02:	430a      	orrs	r2, r1
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	611a      	str	r2, [r3, #16]
 8004e10:	e007      	b.n	8004e22 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0201 	bic.w	r2, r2, #1
 8004e20:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d10c      	bne.n	8004e44 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e30:	f023 010f 	bic.w	r1, r3, #15
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	1e5a      	subs	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	631a      	str	r2, [r3, #48]	; 0x30
 8004e42:	e007      	b.n	8004e54 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 020f 	bic.w	r2, r2, #15
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e58:	f023 0303 	bic.w	r3, r3, #3
 8004e5c:	f043 0201 	orr.w	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	655a      	str	r2, [r3, #84]	; 0x54
 8004e64:	e007      	b.n	8004e76 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6a:	f043 0210 	orr.w	r2, r3, #16
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e76:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3720      	adds	r7, #32
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20000020 	.word	0x20000020
 8004e84:	053e2d63 	.word	0x053e2d63
 8004e88:	50040000 	.word	0x50040000
 8004e8c:	50040300 	.word	0x50040300
 8004e90:	fff0c007 	.word	0xfff0c007

08004e94 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff fe8c 	bl	8004bc2 <LL_ADC_REG_IsConversionOngoing>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d167      	bne.n	8004f80 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_ADC_Start_DMA+0x2a>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e063      	b.n	8004f86 <HAL_ADC_Start_DMA+0xf2>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fe1c 	bl	8005b04 <ADC_Enable>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d14f      	bne.n	8004f76 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ede:	f023 0301 	bic.w	r3, r3, #1
 8004ee2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d006      	beq.n	8004f04 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efa:	f023 0206 	bic.w	r2, r3, #6
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	659a      	str	r2, [r3, #88]	; 0x58
 8004f02:	e002      	b.n	8004f0a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0e:	4a20      	ldr	r2, [pc, #128]	; (8004f90 <HAL_ADC_Start_DMA+0xfc>)
 8004f10:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	4a1f      	ldr	r2, [pc, #124]	; (8004f94 <HAL_ADC_Start_DMA+0x100>)
 8004f18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	4a1e      	ldr	r2, [pc, #120]	; (8004f98 <HAL_ADC_Start_DMA+0x104>)
 8004f20:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	221c      	movs	r2, #28
 8004f28:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0210 	orr.w	r2, r2, #16
 8004f40:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0201 	orr.w	r2, r2, #1
 8004f50:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3340      	adds	r3, #64	; 0x40
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f001 f8e5 	bl	8006130 <HAL_DMA_Start_IT>
 8004f66:	4603      	mov	r3, r0
 8004f68:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff fe13 	bl	8004b9a <LL_ADC_REG_StartConversion>
 8004f74:	e006      	b.n	8004f84 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004f7e:	e001      	b.n	8004f84 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004f80:	2302      	movs	r3, #2
 8004f82:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	08005c11 	.word	0x08005c11
 8004f94:	08005ce9 	.word	0x08005ce9
 8004f98:	08005d05 	.word	0x08005d05

08004f9c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d017      	beq.n	8004ff2 <HAL_ADC_IRQHandler+0x56>
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d012      	beq.n	8004ff2 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd0:	f003 0310 	and.w	r3, r3, #16
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d105      	bne.n	8004fe4 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fdc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fecf 	bl	8005d88 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d004      	beq.n	8005006 <HAL_ADC_IRQHandler+0x6a>
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	d109      	bne.n	800501a <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800500c:	2b00      	cmp	r3, #0
 800500e:	d05e      	beq.n	80050ce <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d059      	beq.n	80050ce <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501e:	f003 0310 	and.w	r3, r3, #16
 8005022:	2b00      	cmp	r3, #0
 8005024:	d105      	bne.n	8005032 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff fc99 	bl	800496e <LL_ADC_REG_IsTriggerSourceSWStart>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d03e      	beq.n	80050c0 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d135      	bne.n	80050c0 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b08      	cmp	r3, #8
 8005060:	d12e      	bne.n	80050c0 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff fdab 	bl	8004bc2 <LL_ADC_REG_IsConversionOngoing>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d11a      	bne.n	80050a8 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 020c 	bic.w	r2, r2, #12
 8005080:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005086:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d112      	bne.n	80050c0 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	f043 0201 	orr.w	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	655a      	str	r2, [r3, #84]	; 0x54
 80050a6:	e00b      	b.n	80050c0 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ac:	f043 0210 	orr.w	r2, r3, #16
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b8:	f043 0201 	orr.w	r2, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7fc f8a5 	bl	8001210 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	220c      	movs	r2, #12
 80050cc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d004      	beq.n	80050e2 <HAL_ADC_IRQHandler+0x146>
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f003 0320 	and.w	r3, r3, #32
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d109      	bne.n	80050f6 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d072      	beq.n	80051d2 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d06d      	beq.n	80051d2 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fa:	f003 0310 	and.w	r3, r3, #16
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d105      	bne.n	800510e <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005106:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff fc6a 	bl	80049ec <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005118:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff fc25 	bl	800496e <LL_ADC_REG_IsTriggerSourceSWStart>
 8005124:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d047      	beq.n	80051c4 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d007      	beq.n	800514e <HAL_ADC_IRQHandler+0x1b2>
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d03f      	beq.n	80051c4 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800514a:	2b00      	cmp	r3, #0
 800514c:	d13a      	bne.n	80051c4 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005158:	2b40      	cmp	r3, #64	; 0x40
 800515a:	d133      	bne.n	80051c4 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d12e      	bne.n	80051c4 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff fd3c 	bl	8004be8 <LL_ADC_INJ_IsConversionOngoing>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d11a      	bne.n	80051ac <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005184:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519a:	2b00      	cmp	r3, #0
 800519c:	d112      	bne.n	80051c4 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a2:	f043 0201 	orr.w	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	655a      	str	r2, [r3, #84]	; 0x54
 80051aa:	e00b      	b.n	80051c4 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b0:	f043 0210 	orr.w	r2, r3, #16
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051bc:	f043 0201 	orr.w	r2, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fdb7 	bl	8005d38 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2260      	movs	r2, #96	; 0x60
 80051d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d011      	beq.n	8005200 <HAL_ADC_IRQHandler+0x264>
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00c      	beq.n	8005200 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f890 	bl	8005318 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2280      	movs	r2, #128	; 0x80
 80051fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005206:	2b00      	cmp	r3, #0
 8005208:	d012      	beq.n	8005230 <HAL_ADC_IRQHandler+0x294>
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00d      	beq.n	8005230 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005218:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fd9d 	bl	8005d60 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800522e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005236:	2b00      	cmp	r3, #0
 8005238:	d012      	beq.n	8005260 <HAL_ADC_IRQHandler+0x2c4>
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00d      	beq.n	8005260 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005248:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fd8f 	bl	8005d74 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800525e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	2b00      	cmp	r3, #0
 8005268:	d02a      	beq.n	80052c0 <HAL_ADC_IRQHandler+0x324>
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b00      	cmp	r3, #0
 8005272:	d025      	beq.n	80052c0 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005278:	2b00      	cmp	r3, #0
 800527a:	d102      	bne.n	8005282 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800527c:	2301      	movs	r3, #1
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	e008      	b.n	8005294 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8005290:	2301      	movs	r3, #1
 8005292:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d10e      	bne.n	80052b8 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052aa:	f043 0202 	orr.w	r2, r3, #2
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f83a 	bl	800532c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2210      	movs	r2, #16
 80052be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d018      	beq.n	80052fc <HAL_ADC_IRQHandler+0x360>
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d013      	beq.n	80052fc <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e4:	f043 0208 	orr.w	r2, r3, #8
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052f4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fd28 	bl	8005d4c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80052fc:	bf00      	nop
 80052fe:	3720      	adds	r7, #32
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b0b6      	sub	sp, #216	; 0xd8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005350:	2300      	movs	r3, #0
 8005352:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800535a:	2b01      	cmp	r3, #1
 800535c:	d101      	bne.n	8005362 <HAL_ADC_ConfigChannel+0x22>
 800535e:	2302      	movs	r3, #2
 8005360:	e3bb      	b.n	8005ada <HAL_ADC_ConfigChannel+0x79a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff fc27 	bl	8004bc2 <LL_ADC_REG_IsConversionOngoing>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	f040 83a0 	bne.w	8005abc <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b05      	cmp	r3, #5
 800538a:	d824      	bhi.n	80053d6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	3b02      	subs	r3, #2
 8005392:	2b03      	cmp	r3, #3
 8005394:	d81b      	bhi.n	80053ce <HAL_ADC_ConfigChannel+0x8e>
 8005396:	a201      	add	r2, pc, #4	; (adr r2, 800539c <HAL_ADC_ConfigChannel+0x5c>)
 8005398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539c:	080053ad 	.word	0x080053ad
 80053a0:	080053b5 	.word	0x080053b5
 80053a4:	080053bd 	.word	0x080053bd
 80053a8:	080053c5 	.word	0x080053c5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80053ac:	230c      	movs	r3, #12
 80053ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80053b2:	e010      	b.n	80053d6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80053b4:	2312      	movs	r3, #18
 80053b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80053ba:	e00c      	b.n	80053d6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80053bc:	2318      	movs	r3, #24
 80053be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80053c2:	e008      	b.n	80053d6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80053c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80053cc:	e003      	b.n	80053d6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80053ce:	2306      	movs	r3, #6
 80053d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80053d4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6818      	ldr	r0, [r3, #0]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80053e4:	f7ff fad6 	bl	8004994 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff fbe8 	bl	8004bc2 <LL_ADC_REG_IsConversionOngoing>
 80053f2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff fbf4 	bl	8004be8 <LL_ADC_INJ_IsConversionOngoing>
 8005400:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005404:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005408:	2b00      	cmp	r3, #0
 800540a:	f040 81a4 	bne.w	8005756 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800540e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005412:	2b00      	cmp	r3, #0
 8005414:	f040 819f 	bne.w	8005756 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6818      	ldr	r0, [r3, #0]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	6819      	ldr	r1, [r3, #0]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	461a      	mov	r2, r3
 8005426:	f7ff faf4 	bl	8004a12 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695a      	ldr	r2, [r3, #20]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	08db      	lsrs	r3, r3, #3
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	fa02 f303 	lsl.w	r3, r2, r3
 8005440:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	2b04      	cmp	r3, #4
 800544a:	d00a      	beq.n	8005462 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	6919      	ldr	r1, [r3, #16]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800545c:	f7ff fa32 	bl	80048c4 <LL_ADC_SetOffset>
 8005460:	e179      	b.n	8005756 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2100      	movs	r1, #0
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff fa4f 	bl	800490c <LL_ADC_GetOffsetChannel>
 800546e:	4603      	mov	r3, r0
 8005470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10a      	bne.n	800548e <HAL_ADC_ConfigChannel+0x14e>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2100      	movs	r1, #0
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff fa44 	bl	800490c <LL_ADC_GetOffsetChannel>
 8005484:	4603      	mov	r3, r0
 8005486:	0e9b      	lsrs	r3, r3, #26
 8005488:	f003 021f 	and.w	r2, r3, #31
 800548c:	e01e      	b.n	80054cc <HAL_ADC_ConfigChannel+0x18c>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2100      	movs	r1, #0
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff fa39 	bl	800490c <LL_ADC_GetOffsetChannel>
 800549a:	4603      	mov	r3, r0
 800549c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80054a4:	fa93 f3a3 	rbit	r3, r3
 80054a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80054ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80054b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80054b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80054bc:	2320      	movs	r3, #32
 80054be:	e004      	b.n	80054ca <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80054c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054c4:	fab3 f383 	clz	r3, r3
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d105      	bne.n	80054e4 <HAL_ADC_ConfigChannel+0x1a4>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	0e9b      	lsrs	r3, r3, #26
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	e018      	b.n	8005516 <HAL_ADC_ConfigChannel+0x1d6>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054f0:	fa93 f3a3 	rbit	r3, r3
 80054f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80054f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005500:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8005508:	2320      	movs	r3, #32
 800550a:	e004      	b.n	8005516 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800550c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005510:	fab3 f383 	clz	r3, r3
 8005514:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005516:	429a      	cmp	r2, r3
 8005518:	d106      	bne.n	8005528 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2200      	movs	r2, #0
 8005520:	2100      	movs	r1, #0
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff fa08 	bl	8004938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2101      	movs	r1, #1
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff f9ec 	bl	800490c <LL_ADC_GetOffsetChannel>
 8005534:	4603      	mov	r3, r0
 8005536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10a      	bne.n	8005554 <HAL_ADC_ConfigChannel+0x214>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2101      	movs	r1, #1
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff f9e1 	bl	800490c <LL_ADC_GetOffsetChannel>
 800554a:	4603      	mov	r3, r0
 800554c:	0e9b      	lsrs	r3, r3, #26
 800554e:	f003 021f 	and.w	r2, r3, #31
 8005552:	e01e      	b.n	8005592 <HAL_ADC_ConfigChannel+0x252>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2101      	movs	r1, #1
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff f9d6 	bl	800490c <LL_ADC_GetOffsetChannel>
 8005560:	4603      	mov	r3, r0
 8005562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800556a:	fa93 f3a3 	rbit	r3, r3
 800556e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8005572:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005576:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800557a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8005582:	2320      	movs	r3, #32
 8005584:	e004      	b.n	8005590 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8005586:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800558a:	fab3 f383 	clz	r3, r3
 800558e:	b2db      	uxtb	r3, r3
 8005590:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800559a:	2b00      	cmp	r3, #0
 800559c:	d105      	bne.n	80055aa <HAL_ADC_ConfigChannel+0x26a>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	0e9b      	lsrs	r3, r3, #26
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	e018      	b.n	80055dc <HAL_ADC_ConfigChannel+0x29c>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80055b6:	fa93 f3a3 	rbit	r3, r3
 80055ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80055be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80055c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80055ce:	2320      	movs	r3, #32
 80055d0:	e004      	b.n	80055dc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80055d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055d6:	fab3 f383 	clz	r3, r3
 80055da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80055dc:	429a      	cmp	r2, r3
 80055de:	d106      	bne.n	80055ee <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2200      	movs	r2, #0
 80055e6:	2101      	movs	r1, #1
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7ff f9a5 	bl	8004938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2102      	movs	r1, #2
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff f989 	bl	800490c <LL_ADC_GetOffsetChannel>
 80055fa:	4603      	mov	r3, r0
 80055fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <HAL_ADC_ConfigChannel+0x2da>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2102      	movs	r1, #2
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff f97e 	bl	800490c <LL_ADC_GetOffsetChannel>
 8005610:	4603      	mov	r3, r0
 8005612:	0e9b      	lsrs	r3, r3, #26
 8005614:	f003 021f 	and.w	r2, r3, #31
 8005618:	e01e      	b.n	8005658 <HAL_ADC_ConfigChannel+0x318>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2102      	movs	r1, #2
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff f973 	bl	800490c <LL_ADC_GetOffsetChannel>
 8005626:	4603      	mov	r3, r0
 8005628:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005630:	fa93 f3a3 	rbit	r3, r3
 8005634:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8005638:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800563c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8005648:	2320      	movs	r3, #32
 800564a:	e004      	b.n	8005656 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800564c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005650:	fab3 f383 	clz	r3, r3
 8005654:	b2db      	uxtb	r3, r3
 8005656:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005660:	2b00      	cmp	r3, #0
 8005662:	d105      	bne.n	8005670 <HAL_ADC_ConfigChannel+0x330>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	0e9b      	lsrs	r3, r3, #26
 800566a:	f003 031f 	and.w	r3, r3, #31
 800566e:	e014      	b.n	800569a <HAL_ADC_ConfigChannel+0x35a>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005676:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005678:	fa93 f3a3 	rbit	r3, r3
 800567c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800567e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005680:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8005684:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800568c:	2320      	movs	r3, #32
 800568e:	e004      	b.n	800569a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8005690:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005694:	fab3 f383 	clz	r3, r3
 8005698:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800569a:	429a      	cmp	r2, r3
 800569c:	d106      	bne.n	80056ac <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2200      	movs	r2, #0
 80056a4:	2102      	movs	r1, #2
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7ff f946 	bl	8004938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2103      	movs	r1, #3
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff f92a 	bl	800490c <LL_ADC_GetOffsetChannel>
 80056b8:	4603      	mov	r3, r0
 80056ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10a      	bne.n	80056d8 <HAL_ADC_ConfigChannel+0x398>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2103      	movs	r1, #3
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff f91f 	bl	800490c <LL_ADC_GetOffsetChannel>
 80056ce:	4603      	mov	r3, r0
 80056d0:	0e9b      	lsrs	r3, r3, #26
 80056d2:	f003 021f 	and.w	r2, r3, #31
 80056d6:	e017      	b.n	8005708 <HAL_ADC_ConfigChannel+0x3c8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2103      	movs	r1, #3
 80056de:	4618      	mov	r0, r3
 80056e0:	f7ff f914 	bl	800490c <LL_ADC_GetOffsetChannel>
 80056e4:	4603      	mov	r3, r0
 80056e6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056ea:	fa93 f3a3 	rbit	r3, r3
 80056ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80056f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80056f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80056fa:	2320      	movs	r3, #32
 80056fc:	e003      	b.n	8005706 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80056fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005700:	fab3 f383 	clz	r3, r3
 8005704:	b2db      	uxtb	r3, r3
 8005706:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005710:	2b00      	cmp	r3, #0
 8005712:	d105      	bne.n	8005720 <HAL_ADC_ConfigChannel+0x3e0>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	0e9b      	lsrs	r3, r3, #26
 800571a:	f003 031f 	and.w	r3, r3, #31
 800571e:	e011      	b.n	8005744 <HAL_ADC_ConfigChannel+0x404>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005726:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005728:	fa93 f3a3 	rbit	r3, r3
 800572c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800572e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005730:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8005732:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005738:	2320      	movs	r3, #32
 800573a:	e003      	b.n	8005744 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800573c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800573e:	fab3 f383 	clz	r3, r3
 8005742:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005744:	429a      	cmp	r2, r3
 8005746:	d106      	bne.n	8005756 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2200      	movs	r2, #0
 800574e:	2103      	movs	r1, #3
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff f8f1 	bl	8004938 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff fa0a 	bl	8004b74 <LL_ADC_IsEnabled>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	f040 8140 	bne.w	80059e8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	6819      	ldr	r1, [r3, #0]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	461a      	mov	r2, r3
 8005776:	f7ff f977 	bl	8004a68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	4a8f      	ldr	r2, [pc, #572]	; (80059bc <HAL_ADC_ConfigChannel+0x67c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	f040 8131 	bne.w	80059e8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10b      	bne.n	80057ae <HAL_ADC_ConfigChannel+0x46e>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	0e9b      	lsrs	r3, r3, #26
 800579c:	3301      	adds	r3, #1
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	2b09      	cmp	r3, #9
 80057a4:	bf94      	ite	ls
 80057a6:	2301      	movls	r3, #1
 80057a8:	2300      	movhi	r3, #0
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	e019      	b.n	80057e2 <HAL_ADC_ConfigChannel+0x4a2>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057b6:	fa93 f3a3 	rbit	r3, r3
 80057ba:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80057bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057be:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80057c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80057c6:	2320      	movs	r3, #32
 80057c8:	e003      	b.n	80057d2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80057ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057cc:	fab3 f383 	clz	r3, r3
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	3301      	adds	r3, #1
 80057d4:	f003 031f 	and.w	r3, r3, #31
 80057d8:	2b09      	cmp	r3, #9
 80057da:	bf94      	ite	ls
 80057dc:	2301      	movls	r3, #1
 80057de:	2300      	movhi	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d079      	beq.n	80058da <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d107      	bne.n	8005802 <HAL_ADC_ConfigChannel+0x4c2>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	0e9b      	lsrs	r3, r3, #26
 80057f8:	3301      	adds	r3, #1
 80057fa:	069b      	lsls	r3, r3, #26
 80057fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005800:	e015      	b.n	800582e <HAL_ADC_ConfigChannel+0x4ee>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800580a:	fa93 f3a3 	rbit	r3, r3
 800580e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005812:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800581a:	2320      	movs	r3, #32
 800581c:	e003      	b.n	8005826 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800581e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005820:	fab3 f383 	clz	r3, r3
 8005824:	b2db      	uxtb	r3, r3
 8005826:	3301      	adds	r3, #1
 8005828:	069b      	lsls	r3, r3, #26
 800582a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005836:	2b00      	cmp	r3, #0
 8005838:	d109      	bne.n	800584e <HAL_ADC_ConfigChannel+0x50e>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	0e9b      	lsrs	r3, r3, #26
 8005840:	3301      	adds	r3, #1
 8005842:	f003 031f 	and.w	r3, r3, #31
 8005846:	2101      	movs	r1, #1
 8005848:	fa01 f303 	lsl.w	r3, r1, r3
 800584c:	e017      	b.n	800587e <HAL_ADC_ConfigChannel+0x53e>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005856:	fa93 f3a3 	rbit	r3, r3
 800585a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800585c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005866:	2320      	movs	r3, #32
 8005868:	e003      	b.n	8005872 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800586a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800586c:	fab3 f383 	clz	r3, r3
 8005870:	b2db      	uxtb	r3, r3
 8005872:	3301      	adds	r3, #1
 8005874:	f003 031f 	and.w	r3, r3, #31
 8005878:	2101      	movs	r1, #1
 800587a:	fa01 f303 	lsl.w	r3, r1, r3
 800587e:	ea42 0103 	orr.w	r1, r2, r3
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <HAL_ADC_ConfigChannel+0x564>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	0e9b      	lsrs	r3, r3, #26
 8005894:	3301      	adds	r3, #1
 8005896:	f003 021f 	and.w	r2, r3, #31
 800589a:	4613      	mov	r3, r2
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	4413      	add	r3, r2
 80058a0:	051b      	lsls	r3, r3, #20
 80058a2:	e018      	b.n	80058d6 <HAL_ADC_ConfigChannel+0x596>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ac:	fa93 f3a3 	rbit	r3, r3
 80058b0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80058b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80058bc:	2320      	movs	r3, #32
 80058be:	e003      	b.n	80058c8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80058c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c2:	fab3 f383 	clz	r3, r3
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	3301      	adds	r3, #1
 80058ca:	f003 021f 	and.w	r2, r3, #31
 80058ce:	4613      	mov	r3, r2
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	4413      	add	r3, r2
 80058d4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058d6:	430b      	orrs	r3, r1
 80058d8:	e081      	b.n	80059de <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d107      	bne.n	80058f6 <HAL_ADC_ConfigChannel+0x5b6>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	0e9b      	lsrs	r3, r3, #26
 80058ec:	3301      	adds	r3, #1
 80058ee:	069b      	lsls	r3, r3, #26
 80058f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80058f4:	e015      	b.n	8005922 <HAL_ADC_ConfigChannel+0x5e2>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	fa93 f3a3 	rbit	r3, r3
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800590e:	2320      	movs	r3, #32
 8005910:	e003      	b.n	800591a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8005912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005914:	fab3 f383 	clz	r3, r3
 8005918:	b2db      	uxtb	r3, r3
 800591a:	3301      	adds	r3, #1
 800591c:	069b      	lsls	r3, r3, #26
 800591e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800592a:	2b00      	cmp	r3, #0
 800592c:	d109      	bne.n	8005942 <HAL_ADC_ConfigChannel+0x602>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	0e9b      	lsrs	r3, r3, #26
 8005934:	3301      	adds	r3, #1
 8005936:	f003 031f 	and.w	r3, r3, #31
 800593a:	2101      	movs	r1, #1
 800593c:	fa01 f303 	lsl.w	r3, r1, r3
 8005940:	e017      	b.n	8005972 <HAL_ADC_ConfigChannel+0x632>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	fa93 f3a3 	rbit	r3, r3
 800594e:	61bb      	str	r3, [r7, #24]
  return result;
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800595a:	2320      	movs	r3, #32
 800595c:	e003      	b.n	8005966 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	fab3 f383 	clz	r3, r3
 8005964:	b2db      	uxtb	r3, r3
 8005966:	3301      	adds	r3, #1
 8005968:	f003 031f 	and.w	r3, r3, #31
 800596c:	2101      	movs	r1, #1
 800596e:	fa01 f303 	lsl.w	r3, r1, r3
 8005972:	ea42 0103 	orr.w	r1, r2, r3
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10d      	bne.n	800599e <HAL_ADC_ConfigChannel+0x65e>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	0e9b      	lsrs	r3, r3, #26
 8005988:	3301      	adds	r3, #1
 800598a:	f003 021f 	and.w	r2, r3, #31
 800598e:	4613      	mov	r3, r2
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	4413      	add	r3, r2
 8005994:	3b1e      	subs	r3, #30
 8005996:	051b      	lsls	r3, r3, #20
 8005998:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800599c:	e01e      	b.n	80059dc <HAL_ADC_ConfigChannel+0x69c>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	fa93 f3a3 	rbit	r3, r3
 80059aa:	60fb      	str	r3, [r7, #12]
  return result;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d104      	bne.n	80059c0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80059b6:	2320      	movs	r3, #32
 80059b8:	e006      	b.n	80059c8 <HAL_ADC_ConfigChannel+0x688>
 80059ba:	bf00      	nop
 80059bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	fab3 f383 	clz	r3, r3
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	3301      	adds	r3, #1
 80059ca:	f003 021f 	and.w	r2, r3, #31
 80059ce:	4613      	mov	r3, r2
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	4413      	add	r3, r2
 80059d4:	3b1e      	subs	r3, #30
 80059d6:	051b      	lsls	r3, r3, #20
 80059d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059dc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059e2:	4619      	mov	r1, r3
 80059e4:	f7ff f815 	bl	8004a12 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	4b3d      	ldr	r3, [pc, #244]	; (8005ae4 <HAL_ADC_ConfigChannel+0x7a4>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d06c      	beq.n	8005ace <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80059f4:	483c      	ldr	r0, [pc, #240]	; (8005ae8 <HAL_ADC_ConfigChannel+0x7a8>)
 80059f6:	f7fe ff57 	bl	80048a8 <LL_ADC_GetCommonPathInternalCh>
 80059fa:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a3a      	ldr	r2, [pc, #232]	; (8005aec <HAL_ADC_ConfigChannel+0x7ac>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d127      	bne.n	8005a58 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005a08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d121      	bne.n	8005a58 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a35      	ldr	r2, [pc, #212]	; (8005af0 <HAL_ADC_ConfigChannel+0x7b0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d157      	bne.n	8005ace <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a26:	4619      	mov	r1, r3
 8005a28:	482f      	ldr	r0, [pc, #188]	; (8005ae8 <HAL_ADC_ConfigChannel+0x7a8>)
 8005a2a:	f7fe ff2a 	bl	8004882 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a2e:	4b31      	ldr	r3, [pc, #196]	; (8005af4 <HAL_ADC_ConfigChannel+0x7b4>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	099b      	lsrs	r3, r3, #6
 8005a34:	4a30      	ldr	r2, [pc, #192]	; (8005af8 <HAL_ADC_ConfigChannel+0x7b8>)
 8005a36:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3a:	099b      	lsrs	r3, r3, #6
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	4613      	mov	r3, r2
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005a48:	e002      	b.n	8005a50 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f9      	bne.n	8005a4a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a56:	e03a      	b.n	8005ace <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a27      	ldr	r2, [pc, #156]	; (8005afc <HAL_ADC_ConfigChannel+0x7bc>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d113      	bne.n	8005a8a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005a62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10d      	bne.n	8005a8a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a1f      	ldr	r2, [pc, #124]	; (8005af0 <HAL_ADC_ConfigChannel+0x7b0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d12a      	bne.n	8005ace <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a80:	4619      	mov	r1, r3
 8005a82:	4819      	ldr	r0, [pc, #100]	; (8005ae8 <HAL_ADC_ConfigChannel+0x7a8>)
 8005a84:	f7fe fefd 	bl	8004882 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a88:	e021      	b.n	8005ace <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1c      	ldr	r2, [pc, #112]	; (8005b00 <HAL_ADC_ConfigChannel+0x7c0>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d11c      	bne.n	8005ace <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005a94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d116      	bne.n	8005ace <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a12      	ldr	r2, [pc, #72]	; (8005af0 <HAL_ADC_ConfigChannel+0x7b0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d111      	bne.n	8005ace <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005aaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005aae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	480c      	ldr	r0, [pc, #48]	; (8005ae8 <HAL_ADC_ConfigChannel+0x7a8>)
 8005ab6:	f7fe fee4 	bl	8004882 <LL_ADC_SetCommonPathInternalCh>
 8005aba:	e008      	b.n	8005ace <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac0:	f043 0220 	orr.w	r2, r3, #32
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005ad6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	37d8      	adds	r7, #216	; 0xd8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	80080000 	.word	0x80080000
 8005ae8:	50040300 	.word	0x50040300
 8005aec:	c7520000 	.word	0xc7520000
 8005af0:	50040000 	.word	0x50040000
 8005af4:	20000020 	.word	0x20000020
 8005af8:	053e2d63 	.word	0x053e2d63
 8005afc:	cb840000 	.word	0xcb840000
 8005b00:	80000001 	.word	0x80000001

08005b04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff f82d 	bl	8004b74 <LL_ADC_IsEnabled>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d169      	bne.n	8005bf4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	4b36      	ldr	r3, [pc, #216]	; (8005c00 <ADC_Enable+0xfc>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00d      	beq.n	8005b4a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b32:	f043 0210 	orr.w	r2, r3, #16
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3e:	f043 0201 	orr.w	r2, r3, #1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e055      	b.n	8005bf6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fe fffc 	bl	8004b4c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005b54:	482b      	ldr	r0, [pc, #172]	; (8005c04 <ADC_Enable+0x100>)
 8005b56:	f7fe fea7 	bl	80048a8 <LL_ADC_GetCommonPathInternalCh>
 8005b5a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005b5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d013      	beq.n	8005b8c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b64:	4b28      	ldr	r3, [pc, #160]	; (8005c08 <ADC_Enable+0x104>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	099b      	lsrs	r3, r3, #6
 8005b6a:	4a28      	ldr	r2, [pc, #160]	; (8005c0c <ADC_Enable+0x108>)
 8005b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b70:	099b      	lsrs	r3, r3, #6
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	4613      	mov	r3, r2
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	4413      	add	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005b7e:	e002      	b.n	8005b86 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1f9      	bne.n	8005b80 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005b8c:	f7fe fe36 	bl	80047fc <HAL_GetTick>
 8005b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b92:	e028      	b.n	8005be6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fe ffeb 	bl	8004b74 <LL_ADC_IsEnabled>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d104      	bne.n	8005bae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe ffcf 	bl	8004b4c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005bae:	f7fe fe25 	bl	80047fc <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d914      	bls.n	8005be6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d00d      	beq.n	8005be6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bce:	f043 0210 	orr.w	r2, r3, #16
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bda:	f043 0201 	orr.w	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e007      	b.n	8005bf6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d1cf      	bne.n	8005b94 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	8000003f 	.word	0x8000003f
 8005c04:	50040300 	.word	0x50040300
 8005c08:	20000020 	.word	0x20000020
 8005c0c:	053e2d63 	.word	0x053e2d63

08005c10 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d14b      	bne.n	8005cc2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d021      	beq.n	8005c88 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fe fe90 	bl	800496e <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d032      	beq.n	8005cba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d12b      	bne.n	8005cba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d11f      	bne.n	8005cba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7e:	f043 0201 	orr.w	r2, r3, #1
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	655a      	str	r2, [r3, #84]	; 0x54
 8005c86:	e018      	b.n	8005cba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d111      	bne.n	8005cba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d105      	bne.n	8005cba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb2:	f043 0201 	orr.w	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7fb faa8 	bl	8001210 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005cc0:	e00e      	b.n	8005ce0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc6:	f003 0310 	and.w	r3, r3, #16
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f7ff fb2c 	bl	800532c <HAL_ADC_ErrorCallback>
}
 8005cd4:	e004      	b.n	8005ce0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	4798      	blx	r3
}
 8005ce0:	bf00      	nop
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f7ff fb04 	bl	8005304 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005cfc:	bf00      	nop
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d22:	f043 0204 	orr.w	r2, r3, #4
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f7ff fafe 	bl	800532c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005dac:	4b0c      	ldr	r3, [pc, #48]	; (8005de0 <__NVIC_SetPriorityGrouping+0x44>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005db8:	4013      	ands	r3, r2
 8005dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dce:	4a04      	ldr	r2, [pc, #16]	; (8005de0 <__NVIC_SetPriorityGrouping+0x44>)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	60d3      	str	r3, [r2, #12]
}
 8005dd4:	bf00      	nop
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	e000ed00 	.word	0xe000ed00

08005de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005de8:	4b04      	ldr	r3, [pc, #16]	; (8005dfc <__NVIC_GetPriorityGrouping+0x18>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	0a1b      	lsrs	r3, r3, #8
 8005dee:	f003 0307 	and.w	r3, r3, #7
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	e000ed00 	.word	0xe000ed00

08005e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	4603      	mov	r3, r0
 8005e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	db0b      	blt.n	8005e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e12:	79fb      	ldrb	r3, [r7, #7]
 8005e14:	f003 021f 	and.w	r2, r3, #31
 8005e18:	4907      	ldr	r1, [pc, #28]	; (8005e38 <__NVIC_EnableIRQ+0x38>)
 8005e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e1e:	095b      	lsrs	r3, r3, #5
 8005e20:	2001      	movs	r0, #1
 8005e22:	fa00 f202 	lsl.w	r2, r0, r2
 8005e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	e000e100 	.word	0xe000e100

08005e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	4603      	mov	r3, r0
 8005e44:	6039      	str	r1, [r7, #0]
 8005e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	db0a      	blt.n	8005e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	490c      	ldr	r1, [pc, #48]	; (8005e88 <__NVIC_SetPriority+0x4c>)
 8005e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e5a:	0112      	lsls	r2, r2, #4
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	440b      	add	r3, r1
 8005e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e64:	e00a      	b.n	8005e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	4908      	ldr	r1, [pc, #32]	; (8005e8c <__NVIC_SetPriority+0x50>)
 8005e6c:	79fb      	ldrb	r3, [r7, #7]
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	3b04      	subs	r3, #4
 8005e74:	0112      	lsls	r2, r2, #4
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	440b      	add	r3, r1
 8005e7a:	761a      	strb	r2, [r3, #24]
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	e000e100 	.word	0xe000e100
 8005e8c:	e000ed00 	.word	0xe000ed00

08005e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b089      	sub	sp, #36	; 0x24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f1c3 0307 	rsb	r3, r3, #7
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	bf28      	it	cs
 8005eae:	2304      	movcs	r3, #4
 8005eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	2b06      	cmp	r3, #6
 8005eb8:	d902      	bls.n	8005ec0 <NVIC_EncodePriority+0x30>
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	3b03      	subs	r3, #3
 8005ebe:	e000      	b.n	8005ec2 <NVIC_EncodePriority+0x32>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ece:	43da      	mvns	r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	401a      	ands	r2, r3
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee2:	43d9      	mvns	r1, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ee8:	4313      	orrs	r3, r2
         );
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3724      	adds	r7, #36	; 0x24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
	...

08005ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f08:	d301      	bcc.n	8005f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e00f      	b.n	8005f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f0e:	4a0a      	ldr	r2, [pc, #40]	; (8005f38 <SysTick_Config+0x40>)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f16:	210f      	movs	r1, #15
 8005f18:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1c:	f7ff ff8e 	bl	8005e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f20:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <SysTick_Config+0x40>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f26:	4b04      	ldr	r3, [pc, #16]	; (8005f38 <SysTick_Config+0x40>)
 8005f28:	2207      	movs	r2, #7
 8005f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	e000e010 	.word	0xe000e010

08005f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff ff29 	bl	8005d9c <__NVIC_SetPriorityGrouping>
}
 8005f4a:	bf00      	nop
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b086      	sub	sp, #24
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	4603      	mov	r3, r0
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	607a      	str	r2, [r7, #4]
 8005f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005f64:	f7ff ff3e 	bl	8005de4 <__NVIC_GetPriorityGrouping>
 8005f68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	6978      	ldr	r0, [r7, #20]
 8005f70:	f7ff ff8e 	bl	8005e90 <NVIC_EncodePriority>
 8005f74:	4602      	mov	r2, r0
 8005f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f7a:	4611      	mov	r1, r2
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff ff5d 	bl	8005e3c <__NVIC_SetPriority>
}
 8005f82:	bf00      	nop
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b082      	sub	sp, #8
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	4603      	mov	r3, r0
 8005f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff ff31 	bl	8005e00 <__NVIC_EnableIRQ>
}
 8005f9e:	bf00      	nop
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b082      	sub	sp, #8
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7ff ffa2 	bl	8005ef8 <SysTick_Config>
 8005fb4:	4603      	mov	r3, r0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
	...

08005fc0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e098      	b.n	8006104 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4b4d      	ldr	r3, [pc, #308]	; (8006110 <HAL_DMA_Init+0x150>)
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d80f      	bhi.n	8005ffe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	4b4b      	ldr	r3, [pc, #300]	; (8006114 <HAL_DMA_Init+0x154>)
 8005fe6:	4413      	add	r3, r2
 8005fe8:	4a4b      	ldr	r2, [pc, #300]	; (8006118 <HAL_DMA_Init+0x158>)
 8005fea:	fba2 2303 	umull	r2, r3, r2, r3
 8005fee:	091b      	lsrs	r3, r3, #4
 8005ff0:	009a      	lsls	r2, r3, #2
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a48      	ldr	r2, [pc, #288]	; (800611c <HAL_DMA_Init+0x15c>)
 8005ffa:	641a      	str	r2, [r3, #64]	; 0x40
 8005ffc:	e00e      	b.n	800601c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	4b46      	ldr	r3, [pc, #280]	; (8006120 <HAL_DMA_Init+0x160>)
 8006006:	4413      	add	r3, r2
 8006008:	4a43      	ldr	r2, [pc, #268]	; (8006118 <HAL_DMA_Init+0x158>)
 800600a:	fba2 2303 	umull	r2, r3, r2, r3
 800600e:	091b      	lsrs	r3, r3, #4
 8006010:	009a      	lsls	r2, r3, #2
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a42      	ldr	r2, [pc, #264]	; (8006124 <HAL_DMA_Init+0x164>)
 800601a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006036:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006040:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800604c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006058:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006076:	d039      	beq.n	80060ec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607c:	4a27      	ldr	r2, [pc, #156]	; (800611c <HAL_DMA_Init+0x15c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d11a      	bne.n	80060b8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006082:	4b29      	ldr	r3, [pc, #164]	; (8006128 <HAL_DMA_Init+0x168>)
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608a:	f003 031c 	and.w	r3, r3, #28
 800608e:	210f      	movs	r1, #15
 8006090:	fa01 f303 	lsl.w	r3, r1, r3
 8006094:	43db      	mvns	r3, r3
 8006096:	4924      	ldr	r1, [pc, #144]	; (8006128 <HAL_DMA_Init+0x168>)
 8006098:	4013      	ands	r3, r2
 800609a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800609c:	4b22      	ldr	r3, [pc, #136]	; (8006128 <HAL_DMA_Init+0x168>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6859      	ldr	r1, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a8:	f003 031c 	and.w	r3, r3, #28
 80060ac:	fa01 f303 	lsl.w	r3, r1, r3
 80060b0:	491d      	ldr	r1, [pc, #116]	; (8006128 <HAL_DMA_Init+0x168>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	600b      	str	r3, [r1, #0]
 80060b6:	e019      	b.n	80060ec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80060b8:	4b1c      	ldr	r3, [pc, #112]	; (800612c <HAL_DMA_Init+0x16c>)
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c0:	f003 031c 	and.w	r3, r3, #28
 80060c4:	210f      	movs	r1, #15
 80060c6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ca:	43db      	mvns	r3, r3
 80060cc:	4917      	ldr	r1, [pc, #92]	; (800612c <HAL_DMA_Init+0x16c>)
 80060ce:	4013      	ands	r3, r2
 80060d0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80060d2:	4b16      	ldr	r3, [pc, #88]	; (800612c <HAL_DMA_Init+0x16c>)
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6859      	ldr	r1, [r3, #4]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060de:	f003 031c 	and.w	r3, r3, #28
 80060e2:	fa01 f303 	lsl.w	r3, r1, r3
 80060e6:	4911      	ldr	r1, [pc, #68]	; (800612c <HAL_DMA_Init+0x16c>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	40020407 	.word	0x40020407
 8006114:	bffdfff8 	.word	0xbffdfff8
 8006118:	cccccccd 	.word	0xcccccccd
 800611c:	40020000 	.word	0x40020000
 8006120:	bffdfbf8 	.word	0xbffdfbf8
 8006124:	40020400 	.word	0x40020400
 8006128:	400200a8 	.word	0x400200a8
 800612c:	400204a8 	.word	0x400204a8

08006130 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_DMA_Start_IT+0x20>
 800614c:	2302      	movs	r3, #2
 800614e:	e04b      	b.n	80061e8 <HAL_DMA_Start_IT+0xb8>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b01      	cmp	r3, #1
 8006162:	d13a      	bne.n	80061da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2202      	movs	r2, #2
 8006168:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0201 	bic.w	r2, r2, #1
 8006180:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	68b9      	ldr	r1, [r7, #8]
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 f96b 	bl	8006464 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006192:	2b00      	cmp	r3, #0
 8006194:	d008      	beq.n	80061a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f042 020e 	orr.w	r2, r2, #14
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	e00f      	b.n	80061c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0204 	bic.w	r2, r2, #4
 80061b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 020a 	orr.w	r2, r2, #10
 80061c6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0201 	orr.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	e005      	b.n	80061e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80061e2:	2302      	movs	r3, #2
 80061e4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d008      	beq.n	800621a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2204      	movs	r2, #4
 800620c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e022      	b.n	8006260 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 020e 	bic.w	r2, r2, #14
 8006228:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0201 	bic.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623e:	f003 021c 	and.w	r2, r3, #28
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	2101      	movs	r1, #1
 8006248:	fa01 f202 	lsl.w	r2, r1, r2
 800624c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800625e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006260:	4618      	mov	r0, r3
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006274:	2300      	movs	r3, #0
 8006276:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b02      	cmp	r3, #2
 8006282:	d005      	beq.n	8006290 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2204      	movs	r2, #4
 8006288:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	73fb      	strb	r3, [r7, #15]
 800628e:	e029      	b.n	80062e4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 020e 	bic.w	r2, r2, #14
 800629e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0201 	bic.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b4:	f003 021c 	and.w	r2, r3, #28
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062bc:	2101      	movs	r1, #1
 80062be:	fa01 f202 	lsl.w	r2, r1, r2
 80062c2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	4798      	blx	r3
    }
  }
  return status;
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630a:	f003 031c 	and.w	r3, r3, #28
 800630e:	2204      	movs	r2, #4
 8006310:	409a      	lsls	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4013      	ands	r3, r2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d026      	beq.n	8006368 <HAL_DMA_IRQHandler+0x7a>
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d021      	beq.n	8006368 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	2b00      	cmp	r3, #0
 8006330:	d107      	bne.n	8006342 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0204 	bic.w	r2, r2, #4
 8006340:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006346:	f003 021c 	and.w	r2, r3, #28
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	2104      	movs	r1, #4
 8006350:	fa01 f202 	lsl.w	r2, r1, r2
 8006354:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	2b00      	cmp	r3, #0
 800635c:	d071      	beq.n	8006442 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006366:	e06c      	b.n	8006442 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636c:	f003 031c 	and.w	r3, r3, #28
 8006370:	2202      	movs	r2, #2
 8006372:	409a      	lsls	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4013      	ands	r3, r2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d02e      	beq.n	80063da <HAL_DMA_IRQHandler+0xec>
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d029      	beq.n	80063da <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0320 	and.w	r3, r3, #32
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10b      	bne.n	80063ac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 020a 	bic.w	r2, r2, #10
 80063a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b0:	f003 021c 	and.w	r2, r3, #28
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b8:	2102      	movs	r1, #2
 80063ba:	fa01 f202 	lsl.w	r2, r1, r2
 80063be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d038      	beq.n	8006442 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80063d8:	e033      	b.n	8006442 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063de:	f003 031c 	and.w	r3, r3, #28
 80063e2:	2208      	movs	r2, #8
 80063e4:	409a      	lsls	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4013      	ands	r3, r2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d02a      	beq.n	8006444 <HAL_DMA_IRQHandler+0x156>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d025      	beq.n	8006444 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 020e 	bic.w	r2, r2, #14
 8006406:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640c:	f003 021c 	and.w	r2, r3, #28
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	2101      	movs	r1, #1
 8006416:	fa01 f202 	lsl.w	r2, r1, r2
 800641a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006436:	2b00      	cmp	r3, #0
 8006438:	d004      	beq.n	8006444 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006442:	bf00      	nop
 8006444:	bf00      	nop
}
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006476:	f003 021c 	and.w	r2, r3, #28
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	2101      	movs	r1, #1
 8006480:	fa01 f202 	lsl.w	r2, r1, r2
 8006484:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	2b10      	cmp	r3, #16
 8006494:	d108      	bne.n	80064a8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80064a6:	e007      	b.n	80064b8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	60da      	str	r2, [r3, #12]
}
 80064b8:	bf00      	nop
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064ce:	2300      	movs	r3, #0
 80064d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064d2:	e148      	b.n	8006766 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	2101      	movs	r1, #1
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	fa01 f303 	lsl.w	r3, r1, r3
 80064e0:	4013      	ands	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 813a 	beq.w	8006760 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f003 0303 	and.w	r3, r3, #3
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d005      	beq.n	8006504 <HAL_GPIO_Init+0x40>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	2b02      	cmp	r3, #2
 8006502:	d130      	bne.n	8006566 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	2203      	movs	r2, #3
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	43db      	mvns	r3, r3
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4013      	ands	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800653a:	2201      	movs	r2, #1
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	fa02 f303 	lsl.w	r3, r2, r3
 8006542:	43db      	mvns	r3, r3
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4013      	ands	r3, r2
 8006548:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	091b      	lsrs	r3, r3, #4
 8006550:	f003 0201 	and.w	r2, r3, #1
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	2b03      	cmp	r3, #3
 8006570:	d017      	beq.n	80065a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	2203      	movs	r2, #3
 800657e:	fa02 f303 	lsl.w	r3, r2, r3
 8006582:	43db      	mvns	r3, r3
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4013      	ands	r3, r2
 8006588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	689a      	ldr	r2, [r3, #8]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	fa02 f303 	lsl.w	r3, r2, r3
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	4313      	orrs	r3, r2
 800659a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f003 0303 	and.w	r3, r3, #3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d123      	bne.n	80065f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	08da      	lsrs	r2, r3, #3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3208      	adds	r2, #8
 80065b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	220f      	movs	r2, #15
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	43db      	mvns	r3, r3
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4013      	ands	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	691a      	ldr	r2, [r3, #16]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	08da      	lsrs	r2, r3, #3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3208      	adds	r2, #8
 80065f0:	6939      	ldr	r1, [r7, #16]
 80065f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	2203      	movs	r2, #3
 8006602:	fa02 f303 	lsl.w	r3, r2, r3
 8006606:	43db      	mvns	r3, r3
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4013      	ands	r3, r2
 800660c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f003 0203 	and.w	r2, r3, #3
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	fa02 f303 	lsl.w	r3, r2, r3
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	4313      	orrs	r3, r2
 8006622:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 8094 	beq.w	8006760 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006638:	4b52      	ldr	r3, [pc, #328]	; (8006784 <HAL_GPIO_Init+0x2c0>)
 800663a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800663c:	4a51      	ldr	r2, [pc, #324]	; (8006784 <HAL_GPIO_Init+0x2c0>)
 800663e:	f043 0301 	orr.w	r3, r3, #1
 8006642:	6613      	str	r3, [r2, #96]	; 0x60
 8006644:	4b4f      	ldr	r3, [pc, #316]	; (8006784 <HAL_GPIO_Init+0x2c0>)
 8006646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	60bb      	str	r3, [r7, #8]
 800664e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006650:	4a4d      	ldr	r2, [pc, #308]	; (8006788 <HAL_GPIO_Init+0x2c4>)
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	089b      	lsrs	r3, r3, #2
 8006656:	3302      	adds	r3, #2
 8006658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800665c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f003 0303 	and.w	r3, r3, #3
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	220f      	movs	r2, #15
 8006668:	fa02 f303 	lsl.w	r3, r2, r3
 800666c:	43db      	mvns	r3, r3
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4013      	ands	r3, r2
 8006672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800667a:	d00d      	beq.n	8006698 <HAL_GPIO_Init+0x1d4>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a43      	ldr	r2, [pc, #268]	; (800678c <HAL_GPIO_Init+0x2c8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d007      	beq.n	8006694 <HAL_GPIO_Init+0x1d0>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a42      	ldr	r2, [pc, #264]	; (8006790 <HAL_GPIO_Init+0x2cc>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d101      	bne.n	8006690 <HAL_GPIO_Init+0x1cc>
 800668c:	2302      	movs	r3, #2
 800668e:	e004      	b.n	800669a <HAL_GPIO_Init+0x1d6>
 8006690:	2307      	movs	r3, #7
 8006692:	e002      	b.n	800669a <HAL_GPIO_Init+0x1d6>
 8006694:	2301      	movs	r3, #1
 8006696:	e000      	b.n	800669a <HAL_GPIO_Init+0x1d6>
 8006698:	2300      	movs	r3, #0
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	f002 0203 	and.w	r2, r2, #3
 80066a0:	0092      	lsls	r2, r2, #2
 80066a2:	4093      	lsls	r3, r2
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80066aa:	4937      	ldr	r1, [pc, #220]	; (8006788 <HAL_GPIO_Init+0x2c4>)
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	089b      	lsrs	r3, r3, #2
 80066b0:	3302      	adds	r3, #2
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066b8:	4b36      	ldr	r3, [pc, #216]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	43db      	mvns	r3, r3
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	4013      	ands	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80066dc:	4a2d      	ldr	r2, [pc, #180]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80066e2:	4b2c      	ldr	r3, [pc, #176]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	43db      	mvns	r3, r3
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	4013      	ands	r3, r2
 80066f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4313      	orrs	r3, r2
 8006704:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006706:	4a23      	ldr	r2, [pc, #140]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800670c:	4b21      	ldr	r3, [pc, #132]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	43db      	mvns	r3, r3
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	4013      	ands	r3, r2
 800671a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006730:	4a18      	ldr	r2, [pc, #96]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006736:	4b17      	ldr	r3, [pc, #92]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	43db      	mvns	r3, r3
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4013      	ands	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800675a:	4a0e      	ldr	r2, [pc, #56]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	3301      	adds	r3, #1
 8006764:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	fa22 f303 	lsr.w	r3, r2, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	f47f aeaf 	bne.w	80064d4 <HAL_GPIO_Init+0x10>
  }
}
 8006776:	bf00      	nop
 8006778:	bf00      	nop
 800677a:	371c      	adds	r7, #28
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	40021000 	.word	0x40021000
 8006788:	40010000 	.word	0x40010000
 800678c:	48000400 	.word	0x48000400
 8006790:	48000800 	.word	0x48000800
 8006794:	40010400 	.word	0x40010400

08006798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	807b      	strh	r3, [r7, #2]
 80067a4:	4613      	mov	r3, r2
 80067a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067a8:	787b      	ldrb	r3, [r7, #1]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80067ae:	887a      	ldrh	r2, [r7, #2]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80067b4:	e002      	b.n	80067bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80067b6:	887a      	ldrh	r2, [r7, #2]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	4603      	mov	r3, r0
 80067d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80067d2:	4b08      	ldr	r3, [pc, #32]	; (80067f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067d4:	695a      	ldr	r2, [r3, #20]
 80067d6:	88fb      	ldrh	r3, [r7, #6]
 80067d8:	4013      	ands	r3, r2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d006      	beq.n	80067ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067de:	4a05      	ldr	r2, [pc, #20]	; (80067f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067e0:	88fb      	ldrh	r3, [r7, #6]
 80067e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067e4:	88fb      	ldrh	r3, [r7, #6]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fa fc80 	bl	80010ec <HAL_GPIO_EXTI_Callback>
  }
}
 80067ec:	bf00      	nop
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	40010400 	.word	0x40010400

080067f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e08d      	b.n	8006926 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d106      	bne.n	8006824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7fd fc60 	bl	80040e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2224      	movs	r2, #36	; 0x24
 8006828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0201 	bic.w	r2, r2, #1
 800683a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006848:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689a      	ldr	r2, [r3, #8]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006858:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d107      	bne.n	8006872 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689a      	ldr	r2, [r3, #8]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800686e:	609a      	str	r2, [r3, #8]
 8006870:	e006      	b.n	8006880 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800687e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	2b02      	cmp	r3, #2
 8006886:	d108      	bne.n	800689a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006896:	605a      	str	r2, [r3, #4]
 8006898:	e007      	b.n	80068aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6812      	ldr	r2, [r2, #0]
 80068b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80068b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68da      	ldr	r2, [r3, #12]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691a      	ldr	r2, [r3, #16]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	69d9      	ldr	r1, [r3, #28]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a1a      	ldr	r2, [r3, #32]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0201 	orr.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2220      	movs	r2, #32
 8006912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af02      	add	r7, sp, #8
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	4608      	mov	r0, r1
 800693a:	4611      	mov	r1, r2
 800693c:	461a      	mov	r2, r3
 800693e:	4603      	mov	r3, r0
 8006940:	817b      	strh	r3, [r7, #10]
 8006942:	460b      	mov	r3, r1
 8006944:	813b      	strh	r3, [r7, #8]
 8006946:	4613      	mov	r3, r2
 8006948:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b20      	cmp	r3, #32
 8006954:	f040 80f9 	bne.w	8006b4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <HAL_I2C_Mem_Write+0x34>
 800695e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006960:	2b00      	cmp	r3, #0
 8006962:	d105      	bne.n	8006970 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800696a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e0ed      	b.n	8006b4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <HAL_I2C_Mem_Write+0x4e>
 800697a:	2302      	movs	r3, #2
 800697c:	e0e6      	b.n	8006b4c <HAL_I2C_Mem_Write+0x21c>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006986:	f7fd ff39 	bl	80047fc <HAL_GetTick>
 800698a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	2319      	movs	r3, #25
 8006992:	2201      	movs	r2, #1
 8006994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 f955 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e0d1      	b.n	8006b4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2221      	movs	r2, #33	; 0x21
 80069ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2240      	movs	r2, #64	; 0x40
 80069b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a3a      	ldr	r2, [r7, #32]
 80069c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069d0:	88f8      	ldrh	r0, [r7, #6]
 80069d2:	893a      	ldrh	r2, [r7, #8]
 80069d4:	8979      	ldrh	r1, [r7, #10]
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	9301      	str	r3, [sp, #4]
 80069da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	4603      	mov	r3, r0
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f8b9 	bl	8006b58 <I2C_RequestMemoryWrite>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e0a9      	b.n	8006b4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2bff      	cmp	r3, #255	; 0xff
 8006a00:	d90e      	bls.n	8006a20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	22ff      	movs	r2, #255	; 0xff
 8006a06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	8979      	ldrh	r1, [r7, #10]
 8006a10:	2300      	movs	r3, #0
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 facf 	bl	8006fbc <I2C_TransferConfig>
 8006a1e:	e00f      	b.n	8006a40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	8979      	ldrh	r1, [r7, #10]
 8006a32:	2300      	movs	r3, #0
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 fabe 	bl	8006fbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f94e 	bl	8006ce6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e07b      	b.n	8006b4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	781a      	ldrb	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d034      	beq.n	8006af8 <HAL_I2C_Mem_Write+0x1c8>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d130      	bne.n	8006af8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	2180      	movs	r1, #128	; 0x80
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 f8d1 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e04d      	b.n	8006b4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	2bff      	cmp	r3, #255	; 0xff
 8006ab8:	d90e      	bls.n	8006ad8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	22ff      	movs	r2, #255	; 0xff
 8006abe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	8979      	ldrh	r1, [r7, #10]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 fa73 	bl	8006fbc <I2C_TransferConfig>
 8006ad6:	e00f      	b.n	8006af8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	8979      	ldrh	r1, [r7, #10]
 8006aea:	2300      	movs	r3, #0
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 fa62 	bl	8006fbc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d19e      	bne.n	8006a40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 f934 	bl	8006d74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e01a      	b.n	8006b4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6859      	ldr	r1, [r3, #4]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <HAL_I2C_Mem_Write+0x224>)
 8006b2a:	400b      	ands	r3, r1
 8006b2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	e000      	b.n	8006b4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006b4a:	2302      	movs	r3, #2
  }
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	fe00e800 	.word	0xfe00e800

08006b58 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af02      	add	r7, sp, #8
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	4608      	mov	r0, r1
 8006b62:	4611      	mov	r1, r2
 8006b64:	461a      	mov	r2, r3
 8006b66:	4603      	mov	r3, r0
 8006b68:	817b      	strh	r3, [r7, #10]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	813b      	strh	r3, [r7, #8]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006b72:	88fb      	ldrh	r3, [r7, #6]
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	8979      	ldrh	r1, [r7, #10]
 8006b78:	4b20      	ldr	r3, [pc, #128]	; (8006bfc <I2C_RequestMemoryWrite+0xa4>)
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 fa1b 	bl	8006fbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b86:	69fa      	ldr	r2, [r7, #28]
 8006b88:	69b9      	ldr	r1, [r7, #24]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 f8ab 	bl	8006ce6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e02c      	b.n	8006bf4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b9a:	88fb      	ldrh	r3, [r7, #6]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d105      	bne.n	8006bac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ba0:	893b      	ldrh	r3, [r7, #8]
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	629a      	str	r2, [r3, #40]	; 0x28
 8006baa:	e015      	b.n	8006bd8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006bac:	893b      	ldrh	r3, [r7, #8]
 8006bae:	0a1b      	lsrs	r3, r3, #8
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	69b9      	ldr	r1, [r7, #24]
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 f891 	bl	8006ce6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e012      	b.n	8006bf4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bce:	893b      	ldrh	r3, [r7, #8]
 8006bd0:	b2da      	uxtb	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	2200      	movs	r2, #0
 8006be0:	2180      	movs	r1, #128	; 0x80
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 f830 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e000      	b.n	8006bf4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	80002000 	.word	0x80002000

08006c00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d103      	bne.n	8006c1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d007      	beq.n	8006c3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699a      	ldr	r2, [r3, #24]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0201 	orr.w	r2, r2, #1
 8006c3a:	619a      	str	r2, [r3, #24]
  }
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	4613      	mov	r3, r2
 8006c56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c58:	e031      	b.n	8006cbe <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c60:	d02d      	beq.n	8006cbe <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c62:	f7fd fdcb 	bl	80047fc <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d302      	bcc.n	8006c78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d122      	bne.n	8006cbe <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	4013      	ands	r3, r2
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	bf0c      	ite	eq
 8006c88:	2301      	moveq	r3, #1
 8006c8a:	2300      	movne	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	461a      	mov	r2, r3
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d113      	bne.n	8006cbe <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c9a:	f043 0220 	orr.w	r2, r3, #32
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e00f      	b.n	8006cde <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	699a      	ldr	r2, [r3, #24]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	bf0c      	ite	eq
 8006cce:	2301      	moveq	r3, #1
 8006cd0:	2300      	movne	r3, #0
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	79fb      	ldrb	r3, [r7, #7]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d0be      	beq.n	8006c5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	60f8      	str	r0, [r7, #12]
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006cf2:	e033      	b.n	8006d5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	68b9      	ldr	r1, [r7, #8]
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 f87f 	bl	8006dfc <I2C_IsErrorOccurred>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e031      	b.n	8006d6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0e:	d025      	beq.n	8006d5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d10:	f7fd fd74 	bl	80047fc <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d302      	bcc.n	8006d26 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d11a      	bne.n	8006d5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d013      	beq.n	8006d5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d38:	f043 0220 	orr.w	r2, r3, #32
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2220      	movs	r2, #32
 8006d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e007      	b.n	8006d6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d1c4      	bne.n	8006cf4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d80:	e02f      	b.n	8006de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 f838 	bl	8006dfc <I2C_IsErrorOccurred>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e02d      	b.n	8006df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d96:	f7fd fd31 	bl	80047fc <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d302      	bcc.n	8006dac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d11a      	bne.n	8006de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	d013      	beq.n	8006de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dbe:	f043 0220 	orr.w	r2, r3, #32
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e007      	b.n	8006df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	d1c8      	bne.n	8006d82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
	...

08006dfc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08a      	sub	sp, #40	; 0x28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	f003 0310 	and.w	r3, r3, #16
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d068      	beq.n	8006efa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2210      	movs	r2, #16
 8006e2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e30:	e049      	b.n	8006ec6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e38:	d045      	beq.n	8006ec6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006e3a:	f7fd fcdf 	bl	80047fc <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d302      	bcc.n	8006e50 <I2C_IsErrorOccurred+0x54>
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d13a      	bne.n	8006ec6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e72:	d121      	bne.n	8006eb8 <I2C_IsErrorOccurred+0xbc>
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e7a:	d01d      	beq.n	8006eb8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006e7c:	7cfb      	ldrb	r3, [r7, #19]
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	d01a      	beq.n	8006eb8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006e92:	f7fd fcb3 	bl	80047fc <HAL_GetTick>
 8006e96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e98:	e00e      	b.n	8006eb8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006e9a:	f7fd fcaf 	bl	80047fc <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b19      	cmp	r3, #25
 8006ea6:	d907      	bls.n	8006eb8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	f043 0320 	orr.w	r3, r3, #32
 8006eae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006eb6:	e006      	b.n	8006ec6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	f003 0320 	and.w	r3, r3, #32
 8006ec2:	2b20      	cmp	r3, #32
 8006ec4:	d1e9      	bne.n	8006e9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	f003 0320 	and.w	r3, r3, #32
 8006ed0:	2b20      	cmp	r3, #32
 8006ed2:	d003      	beq.n	8006edc <I2C_IsErrorOccurred+0xe0>
 8006ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d0aa      	beq.n	8006e32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d103      	bne.n	8006eec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	f043 0304 	orr.w	r3, r3, #4
 8006ef2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00b      	beq.n	8006f24 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	f043 0301 	orr.w	r3, r3, #1
 8006f12:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00b      	beq.n	8006f46 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	f043 0308 	orr.w	r3, r3, #8
 8006f34:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00b      	beq.n	8006f68 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	f043 0302 	orr.w	r3, r3, #2
 8006f56:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006f68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01c      	beq.n	8006faa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f7ff fe45 	bl	8006c00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6859      	ldr	r1, [r3, #4]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	4b0d      	ldr	r3, [pc, #52]	; (8006fb8 <I2C_IsErrorOccurred+0x1bc>)
 8006f82:	400b      	ands	r3, r1
 8006f84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3728      	adds	r7, #40	; 0x28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	fe00e800 	.word	0xfe00e800

08006fbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	607b      	str	r3, [r7, #4]
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	817b      	strh	r3, [r7, #10]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fce:	897b      	ldrh	r3, [r7, #10]
 8006fd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006fd4:	7a7b      	ldrb	r3, [r7, #9]
 8006fd6:	041b      	lsls	r3, r3, #16
 8006fd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fdc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	0d5b      	lsrs	r3, r3, #21
 8006ff6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006ffa:	4b08      	ldr	r3, [pc, #32]	; (800701c <I2C_TransferConfig+0x60>)
 8006ffc:	430b      	orrs	r3, r1
 8006ffe:	43db      	mvns	r3, r3
 8007000:	ea02 0103 	and.w	r1, r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	430a      	orrs	r2, r1
 800700c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800700e:	bf00      	nop
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	03ff63ff 	.word	0x03ff63ff

08007020 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b20      	cmp	r3, #32
 8007034:	d138      	bne.n	80070a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800703c:	2b01      	cmp	r3, #1
 800703e:	d101      	bne.n	8007044 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007040:	2302      	movs	r3, #2
 8007042:	e032      	b.n	80070aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2224      	movs	r2, #36	; 0x24
 8007050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0201 	bic.w	r2, r2, #1
 8007062:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007072:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6819      	ldr	r1, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	430a      	orrs	r2, r1
 8007082:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f042 0201 	orr.w	r2, r2, #1
 8007092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2220      	movs	r2, #32
 8007098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	e000      	b.n	80070aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80070a8:	2302      	movs	r3, #2
  }
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b085      	sub	sp, #20
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b20      	cmp	r3, #32
 80070ca:	d139      	bne.n	8007140 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d101      	bne.n	80070da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80070d6:	2302      	movs	r3, #2
 80070d8:	e033      	b.n	8007142 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2224      	movs	r2, #36	; 0x24
 80070e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 0201 	bic.w	r2, r2, #1
 80070f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007108:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	021b      	lsls	r3, r3, #8
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	4313      	orrs	r3, r2
 8007112:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0201 	orr.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	e000      	b.n	8007142 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007140:	2302      	movs	r3, #2
  }
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800714e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007150:	b08b      	sub	sp, #44	; 0x2c
 8007152:	af06      	add	r7, sp, #24
 8007154:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e0f8      	b.n	8007352 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	d106      	bne.n	800717a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f009 fb5d 	bl	8010834 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2203      	movs	r2, #3
 800717e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4618      	mov	r0, r3
 8007188:	f004 fe30 	bl	800bdec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	603b      	str	r3, [r7, #0]
 8007192:	687e      	ldr	r6, [r7, #4]
 8007194:	466d      	mov	r5, sp
 8007196:	f106 0410 	add.w	r4, r6, #16
 800719a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800719c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	602b      	str	r3, [r5, #0]
 80071a2:	1d33      	adds	r3, r6, #4
 80071a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071a6:	6838      	ldr	r0, [r7, #0]
 80071a8:	f004 fdf8 	bl	800bd9c <USB_CoreInit>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d005      	beq.n	80071be <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2202      	movs	r2, #2
 80071b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e0c9      	b.n	8007352 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2100      	movs	r1, #0
 80071c4:	4618      	mov	r0, r3
 80071c6:	f004 fe2c 	bl	800be22 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071ca:	2300      	movs	r3, #0
 80071cc:	73fb      	strb	r3, [r7, #15]
 80071ce:	e040      	b.n	8007252 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	00db      	lsls	r3, r3, #3
 80071de:	440b      	add	r3, r1
 80071e0:	3301      	adds	r3, #1
 80071e2:	2201      	movs	r2, #1
 80071e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	6879      	ldr	r1, [r7, #4]
 80071ea:	1c5a      	adds	r2, r3, #1
 80071ec:	4613      	mov	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	440b      	add	r3, r1
 80071f6:	7bfa      	ldrb	r2, [r7, #15]
 80071f8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	6879      	ldr	r1, [r7, #4]
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	4613      	mov	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	440b      	add	r3, r1
 800720a:	3303      	adds	r3, #3
 800720c:	2200      	movs	r2, #0
 800720e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007210:	7bfa      	ldrb	r2, [r7, #15]
 8007212:	6879      	ldr	r1, [r7, #4]
 8007214:	4613      	mov	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	440b      	add	r3, r1
 800721e:	3338      	adds	r3, #56	; 0x38
 8007220:	2200      	movs	r2, #0
 8007222:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007224:	7bfa      	ldrb	r2, [r7, #15]
 8007226:	6879      	ldr	r1, [r7, #4]
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	440b      	add	r3, r1
 8007232:	333c      	adds	r3, #60	; 0x3c
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007238:	7bfa      	ldrb	r2, [r7, #15]
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	4613      	mov	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	440b      	add	r3, r1
 8007246:	3340      	adds	r3, #64	; 0x40
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	3301      	adds	r3, #1
 8007250:	73fb      	strb	r3, [r7, #15]
 8007252:	7bfa      	ldrb	r2, [r7, #15]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	429a      	cmp	r2, r3
 800725a:	d3b9      	bcc.n	80071d0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800725c:	2300      	movs	r3, #0
 800725e:	73fb      	strb	r3, [r7, #15]
 8007260:	e044      	b.n	80072ec <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007262:	7bfa      	ldrb	r2, [r7, #15]
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	00db      	lsls	r3, r3, #3
 800726e:	440b      	add	r3, r1
 8007270:	f203 1369 	addw	r3, r3, #361	; 0x169
 8007274:	2200      	movs	r2, #0
 8007276:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007278:	7bfa      	ldrb	r2, [r7, #15]
 800727a:	6879      	ldr	r1, [r7, #4]
 800727c:	4613      	mov	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	440b      	add	r3, r1
 8007286:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800728a:	7bfa      	ldrb	r2, [r7, #15]
 800728c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800728e:	7bfa      	ldrb	r2, [r7, #15]
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	00db      	lsls	r3, r3, #3
 800729a:	440b      	add	r3, r1
 800729c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80072a0:	2200      	movs	r2, #0
 80072a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80072a4:	7bfa      	ldrb	r2, [r7, #15]
 80072a6:	6879      	ldr	r1, [r7, #4]
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	00db      	lsls	r3, r3, #3
 80072b0:	440b      	add	r3, r1
 80072b2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80072ba:	7bfa      	ldrb	r2, [r7, #15]
 80072bc:	6879      	ldr	r1, [r7, #4]
 80072be:	4613      	mov	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	440b      	add	r3, r1
 80072c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80072cc:	2200      	movs	r2, #0
 80072ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80072d0:	7bfa      	ldrb	r2, [r7, #15]
 80072d2:	6879      	ldr	r1, [r7, #4]
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	440b      	add	r3, r1
 80072de:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80072e2:	2200      	movs	r2, #0
 80072e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	3301      	adds	r3, #1
 80072ea:	73fb      	strb	r3, [r7, #15]
 80072ec:	7bfa      	ldrb	r2, [r7, #15]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d3b5      	bcc.n	8007262 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	603b      	str	r3, [r7, #0]
 80072fc:	687e      	ldr	r6, [r7, #4]
 80072fe:	466d      	mov	r5, sp
 8007300:	f106 0410 	add.w	r4, r6, #16
 8007304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	602b      	str	r3, [r5, #0]
 800730c:	1d33      	adds	r3, r6, #4
 800730e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007310:	6838      	ldr	r0, [r7, #0]
 8007312:	f004 fd93 	bl	800be3c <USB_DevInit>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d005      	beq.n	8007328 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e014      	b.n	8007352 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d102      	bne.n	8007346 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 fc58 	bl	8008bf6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4618      	mov	r0, r3
 800734c:	f007 f824 	bl	800e398 <USB_DevDisconnect>

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800735a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <HAL_PCD_Start+0x16>
 800736c:	2302      	movs	r3, #2
 800736e:	e012      	b.n	8007396 <HAL_PCD_Start+0x3c>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4618      	mov	r0, r3
 800737e:	f004 fd1e 	bl	800bdbe <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4618      	mov	r0, r3
 8007388:	f006 ffef 	bl	800e36a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f007 f809 	bl	800e3c2 <USB_ReadInterrupts>
 80073b0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fb13 	bl	80079e8 <PCD_EP_ISR_Handler>

    return;
 80073c2:	e110      	b.n	80075e6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d013      	beq.n	80073f6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073e0:	b292      	uxth	r2, r2
 80073e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f009 fa9f 	bl	801092a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80073ec:	2100      	movs	r1, #0
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f8fc 	bl	80075ec <HAL_PCD_SetAddress>

    return;
 80073f4:	e0f7      	b.n	80075e6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00c      	beq.n	800741a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007408:	b29a      	uxth	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007412:	b292      	uxth	r2, r2
 8007414:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007418:	e0e5      	b.n	80075e6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00c      	beq.n	800743e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800742c:	b29a      	uxth	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007436:	b292      	uxth	r2, r2
 8007438:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800743c:	e0d3      	b.n	80075e6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d034      	beq.n	80074b2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007450:	b29a      	uxth	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0204 	bic.w	r2, r2, #4
 800745a:	b292      	uxth	r2, r2
 800745c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007468:	b29a      	uxth	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0208 	bic.w	r2, r2, #8
 8007472:	b292      	uxth	r2, r2
 8007474:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800747e:	2b01      	cmp	r3, #1
 8007480:	d107      	bne.n	8007492 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800748a:	2100      	movs	r1, #0
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f009 fcfd 	bl	8010e8c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f009 fa82 	bl	801099c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80074aa:	b292      	uxth	r2, r2
 80074ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80074b0:	e099      	b.n	80075e6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d027      	beq.n	800750c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f042 0208 	orr.w	r2, r2, #8
 80074ce:	b292      	uxth	r2, r2
 80074d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074dc:	b29a      	uxth	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074e6:	b292      	uxth	r2, r2
 80074e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0204 	orr.w	r2, r2, #4
 80074fe:	b292      	uxth	r2, r2
 8007500:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f009 fa2f 	bl	8010968 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800750a:	e06c      	b.n	80075e6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007512:	2b00      	cmp	r3, #0
 8007514:	d040      	beq.n	8007598 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800751e:	b29a      	uxth	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007528:	b292      	uxth	r2, r2
 800752a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d12b      	bne.n	8007590 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007540:	b29a      	uxth	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f042 0204 	orr.w	r2, r2, #4
 800754a:	b292      	uxth	r2, r2
 800754c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007558:	b29a      	uxth	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0208 	orr.w	r2, r2, #8
 8007562:	b292      	uxth	r2, r2
 8007564:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007578:	b29b      	uxth	r3, r3
 800757a:	089b      	lsrs	r3, r3, #2
 800757c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007586:	2101      	movs	r1, #1
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f009 fc7f 	bl	8010e8c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800758e:	e02a      	b.n	80075e6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f009 f9e9 	bl	8010968 <HAL_PCD_SuspendCallback>
    return;
 8007596:	e026      	b.n	80075e6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00f      	beq.n	80075c2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80075b4:	b292      	uxth	r2, r2
 80075b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f009 f9a7 	bl	801090e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80075c0:	e011      	b.n	80075e6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00c      	beq.n	80075e6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075de:	b292      	uxth	r2, r2
 80075e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80075e4:	bf00      	nop
  }
}
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	460b      	mov	r3, r1
 80075f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d101      	bne.n	8007606 <HAL_PCD_SetAddress+0x1a>
 8007602:	2302      	movs	r3, #2
 8007604:	e013      	b.n	800762e <HAL_PCD_SetAddress+0x42>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	78fa      	ldrb	r2, [r7, #3]
 8007612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	78fa      	ldrb	r2, [r7, #3]
 800761c:	4611      	mov	r1, r2
 800761e:	4618      	mov	r0, r3
 8007620:	f006 fe8f 	bl	800e342 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	4608      	mov	r0, r1
 8007640:	4611      	mov	r1, r2
 8007642:	461a      	mov	r2, r3
 8007644:	4603      	mov	r3, r0
 8007646:	70fb      	strb	r3, [r7, #3]
 8007648:	460b      	mov	r3, r1
 800764a:	803b      	strh	r3, [r7, #0]
 800764c:	4613      	mov	r3, r2
 800764e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007658:	2b00      	cmp	r3, #0
 800765a:	da0e      	bge.n	800767a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800765c:	78fb      	ldrb	r3, [r7, #3]
 800765e:	f003 0307 	and.w	r3, r3, #7
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	4613      	mov	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	00db      	lsls	r3, r3, #3
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	4413      	add	r3, r2
 8007670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2201      	movs	r2, #1
 8007676:	705a      	strb	r2, [r3, #1]
 8007678:	e00e      	b.n	8007698 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800767a:	78fb      	ldrb	r3, [r7, #3]
 800767c:	f003 0207 	and.w	r2, r3, #7
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	00db      	lsls	r3, r3, #3
 8007688:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	4413      	add	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007698:	78fb      	ldrb	r3, [r7, #3]
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80076a4:	883a      	ldrh	r2, [r7, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	78ba      	ldrb	r2, [r7, #2]
 80076ae:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80076b0:	78bb      	ldrb	r3, [r7, #2]
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d102      	bne.n	80076bc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d101      	bne.n	80076ca <HAL_PCD_EP_Open+0x94>
 80076c6:	2302      	movs	r3, #2
 80076c8:	e00e      	b.n	80076e8 <HAL_PCD_EP_Open+0xb2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68f9      	ldr	r1, [r7, #12]
 80076d8:	4618      	mov	r0, r3
 80076da:	f004 fbd1 	bl	800be80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80076e6:	7afb      	ldrb	r3, [r7, #11]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80076fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007700:	2b00      	cmp	r3, #0
 8007702:	da0e      	bge.n	8007722 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007704:	78fb      	ldrb	r3, [r7, #3]
 8007706:	f003 0307 	and.w	r3, r3, #7
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	4613      	mov	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	4413      	add	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	705a      	strb	r2, [r3, #1]
 8007720:	e00e      	b.n	8007740 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007722:	78fb      	ldrb	r3, [r7, #3]
 8007724:	f003 0207 	and.w	r2, r3, #7
 8007728:	4613      	mov	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	00db      	lsls	r3, r3, #3
 8007730:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	4413      	add	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007740:	78fb      	ldrb	r3, [r7, #3]
 8007742:	f003 0307 	and.w	r3, r3, #7
 8007746:	b2da      	uxtb	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007752:	2b01      	cmp	r3, #1
 8007754:	d101      	bne.n	800775a <HAL_PCD_EP_Close+0x6a>
 8007756:	2302      	movs	r3, #2
 8007758:	e00e      	b.n	8007778 <HAL_PCD_EP_Close+0x88>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68f9      	ldr	r1, [r7, #12]
 8007768:	4618      	mov	r0, r3
 800776a:	f004 ff4d 	bl	800c608 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	607a      	str	r2, [r7, #4]
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	460b      	mov	r3, r1
 800778e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007790:	7afb      	ldrb	r3, [r7, #11]
 8007792:	f003 0207 	and.w	r2, r3, #7
 8007796:	4613      	mov	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	00db      	lsls	r3, r3, #3
 800779e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	4413      	add	r3, r2
 80077a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	2200      	movs	r2, #0
 80077b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2200      	movs	r2, #0
 80077be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077c0:	7afb      	ldrb	r3, [r7, #11]
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6979      	ldr	r1, [r7, #20]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f005 f905 	bl	800c9e2 <USB_EPStartXfer>

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b083      	sub	sp, #12
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	460b      	mov	r3, r1
 80077ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80077ee:	78fb      	ldrb	r3, [r7, #3]
 80077f0:	f003 0207 	and.w	r2, r3, #7
 80077f4:	6879      	ldr	r1, [r7, #4]
 80077f6:	4613      	mov	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	00db      	lsls	r3, r3, #3
 80077fe:	440b      	add	r3, r1
 8007800:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8007804:	681b      	ldr	r3, [r3, #0]
}
 8007806:	4618      	mov	r0, r3
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b086      	sub	sp, #24
 8007816:	af00      	add	r7, sp, #0
 8007818:	60f8      	str	r0, [r7, #12]
 800781a:	607a      	str	r2, [r7, #4]
 800781c:	603b      	str	r3, [r7, #0]
 800781e:	460b      	mov	r3, r1
 8007820:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007822:	7afb      	ldrb	r3, [r7, #11]
 8007824:	f003 0307 	and.w	r3, r3, #7
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	4413      	add	r3, r2
 8007836:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2200      	movs	r2, #0
 8007856:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	2201      	movs	r2, #1
 800785c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800785e:	7afb      	ldrb	r3, [r7, #11]
 8007860:	f003 0307 	and.w	r3, r3, #7
 8007864:	b2da      	uxtb	r2, r3
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	6979      	ldr	r1, [r7, #20]
 8007870:	4618      	mov	r0, r3
 8007872:	f005 f8b6 	bl	800c9e2 <USB_EPStartXfer>

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800788c:	78fb      	ldrb	r3, [r7, #3]
 800788e:	f003 0207 	and.w	r2, r3, #7
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	429a      	cmp	r2, r3
 8007898:	d901      	bls.n	800789e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e04c      	b.n	8007938 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800789e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	da0e      	bge.n	80078c4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078a6:	78fb      	ldrb	r3, [r7, #3]
 80078a8:	f003 0307 	and.w	r3, r3, #7
 80078ac:	1c5a      	adds	r2, r3, #1
 80078ae:	4613      	mov	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	00db      	lsls	r3, r3, #3
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	4413      	add	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2201      	movs	r2, #1
 80078c0:	705a      	strb	r2, [r3, #1]
 80078c2:	e00c      	b.n	80078de <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80078c4:	78fa      	ldrb	r2, [r7, #3]
 80078c6:	4613      	mov	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	4413      	add	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2201      	movs	r2, #1
 80078e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078e4:	78fb      	ldrb	r3, [r7, #3]
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d101      	bne.n	80078fe <HAL_PCD_EP_SetStall+0x7e>
 80078fa:	2302      	movs	r3, #2
 80078fc:	e01c      	b.n	8007938 <HAL_PCD_EP_SetStall+0xb8>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68f9      	ldr	r1, [r7, #12]
 800790c:	4618      	mov	r0, r3
 800790e:	f006 fc19 	bl	800e144 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007912:	78fb      	ldrb	r3, [r7, #3]
 8007914:	f003 0307 	and.w	r3, r3, #7
 8007918:	2b00      	cmp	r3, #0
 800791a:	d108      	bne.n	800792e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007926:	4619      	mov	r1, r3
 8007928:	4610      	mov	r0, r2
 800792a:	f006 fd5a 	bl	800e3e2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800794c:	78fb      	ldrb	r3, [r7, #3]
 800794e:	f003 020f 	and.w	r2, r3, #15
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	429a      	cmp	r2, r3
 8007958:	d901      	bls.n	800795e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e040      	b.n	80079e0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800795e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007962:	2b00      	cmp	r3, #0
 8007964:	da0e      	bge.n	8007984 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007966:	78fb      	ldrb	r3, [r7, #3]
 8007968:	f003 0307 	and.w	r3, r3, #7
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	4613      	mov	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	00db      	lsls	r3, r3, #3
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	4413      	add	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2201      	movs	r2, #1
 8007980:	705a      	strb	r2, [r3, #1]
 8007982:	e00e      	b.n	80079a2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007984:	78fb      	ldrb	r3, [r7, #3]
 8007986:	f003 0207 	and.w	r2, r3, #7
 800798a:	4613      	mov	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	00db      	lsls	r3, r3, #3
 8007992:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	4413      	add	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079a8:	78fb      	ldrb	r3, [r7, #3]
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d101      	bne.n	80079c2 <HAL_PCD_EP_ClrStall+0x82>
 80079be:	2302      	movs	r3, #2
 80079c0:	e00e      	b.n	80079e0 <HAL_PCD_EP_ClrStall+0xa0>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68f9      	ldr	r1, [r7, #12]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f006 fc08 	bl	800e1e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b096      	sub	sp, #88	; 0x58
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80079f0:	e3b1      	b.n	8008156 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80079fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80079fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	f003 030f 	and.w	r3, r3, #15
 8007a08:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8007a0c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f040 8173 	bne.w	8007cfc <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007a16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a1a:	f003 0310 	and.w	r3, r3, #16
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d150      	bne.n	8007ac4 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a32:	81fb      	strh	r3, [r7, #14]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	89fb      	ldrh	r3, [r7, #14]
 8007a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	3328      	adds	r3, #40	; 0x28
 8007a4a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	461a      	mov	r2, r3
 8007a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	00db      	lsls	r3, r3, #3
 8007a5e:	4413      	add	r3, r2
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	6812      	ldr	r2, [r2, #0]
 8007a64:	4413      	add	r3, r2
 8007a66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a72:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a76:	695a      	ldr	r2, [r3, #20]
 8007a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	441a      	add	r2, r3
 8007a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a80:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007a82:	2100      	movs	r1, #0
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f008 ff28 	bl	80108da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 835f 	beq.w	8008156 <PCD_EP_ISR_Handler+0x76e>
 8007a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f040 835a 	bne.w	8008156 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	b292      	uxth	r2, r2
 8007ab6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007ac2:	e348      	b.n	8008156 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007aca:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007ad6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d032      	beq.n	8007b48 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	461a      	mov	r2, r3
 8007aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	4413      	add	r3, r2
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6812      	ldr	r2, [r2, #0]
 8007afa:	4413      	add	r3, r2
 8007afc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b08:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6818      	ldr	r0, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8007b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b16:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b1a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	f006 fcae 	bl	800e47e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007b2e:	4013      	ands	r3, r2
 8007b30:	823b      	strh	r3, [r7, #16]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	8a3a      	ldrh	r2, [r7, #16]
 8007b38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b3c:	b292      	uxth	r2, r2
 8007b3e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f008 fe9d 	bl	8010880 <HAL_PCD_SetupStageCallback>
 8007b46:	e306      	b.n	8008156 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007b48:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f280 8302 	bge.w	8008156 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007b5e:	4013      	ands	r3, r2
 8007b60:	83fb      	strh	r3, [r7, #30]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	8bfa      	ldrh	r2, [r7, #30]
 8007b68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b6c:	b292      	uxth	r2, r2
 8007b6e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	00db      	lsls	r3, r3, #3
 8007b82:	4413      	add	r3, r2
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	6812      	ldr	r2, [r2, #0]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b96:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d019      	beq.n	8007bd4 <PCD_EP_ISR_Handler+0x1ec>
 8007ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d015      	beq.n	8007bd4 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6818      	ldr	r0, [r3, #0]
 8007bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bae:	6959      	ldr	r1, [r3, #20]
 8007bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bb2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bb6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	f006 fc60 	bl	800e47e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bc0:	695a      	ldr	r2, [r3, #20]
 8007bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	441a      	add	r2, r3
 8007bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007bcc:	2100      	movs	r1, #0
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f008 fe68 	bl	80108a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	881b      	ldrh	r3, [r3, #0]
 8007bda:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007bde:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f040 82b5 	bne.w	8008156 <PCD_EP_ISR_Handler+0x76e>
 8007bec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007bf0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007bf4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007bf8:	f000 82ad 	beq.w	8008156 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	61bb      	str	r3, [r7, #24]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	4413      	add	r3, r2
 8007c12:	61bb      	str	r3, [r7, #24]
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c1a:	617b      	str	r3, [r7, #20]
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	801a      	strh	r2, [r3, #0]
 8007c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	2b3e      	cmp	r3, #62	; 0x3e
 8007c32:	d91d      	bls.n	8007c70 <PCD_EP_ISR_Handler+0x288>
 8007c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	095b      	lsrs	r3, r3, #5
 8007c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8007c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	f003 031f 	and.w	r3, r3, #31
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d102      	bne.n	8007c4e <PCD_EP_ISR_Handler+0x266>
 8007c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	029b      	lsls	r3, r3, #10
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	801a      	strh	r2, [r3, #0]
 8007c6e:	e026      	b.n	8007cbe <PCD_EP_ISR_Handler+0x2d6>
 8007c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10a      	bne.n	8007c8e <PCD_EP_ISR_Handler+0x2a6>
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	801a      	strh	r2, [r3, #0]
 8007c8c:	e017      	b.n	8007cbe <PCD_EP_ISR_Handler+0x2d6>
 8007c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	085b      	lsrs	r3, r3, #1
 8007c94:	647b      	str	r3, [r7, #68]	; 0x44
 8007c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d002      	beq.n	8007ca8 <PCD_EP_ISR_Handler+0x2c0>
 8007ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	029b      	lsls	r3, r3, #10
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cce:	827b      	strh	r3, [r7, #18]
 8007cd0:	8a7b      	ldrh	r3, [r7, #18]
 8007cd2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007cd6:	827b      	strh	r3, [r7, #18]
 8007cd8:	8a7b      	ldrh	r3, [r7, #18]
 8007cda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007cde:	827b      	strh	r3, [r7, #18]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	8a7b      	ldrh	r3, [r7, #18]
 8007ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	8013      	strh	r3, [r2, #0]
 8007cfa:	e22c      	b.n	8008156 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	461a      	mov	r2, r3
 8007d02:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007d10:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f280 80f6 	bge.w	8007f06 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007d30:	4013      	ands	r3, r2
 8007d32:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007d48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d4c:	b292      	uxth	r2, r2
 8007d4e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007d50:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8007d54:	4613      	mov	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4413      	add	r3, r2
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	4413      	add	r3, r2
 8007d64:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d68:	7b1b      	ldrb	r3, [r3, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d123      	bne.n	8007db6 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	461a      	mov	r2, r3
 8007d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	00db      	lsls	r3, r3, #3
 8007d80:	4413      	add	r3, r2
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	6812      	ldr	r2, [r2, #0]
 8007d86:	4413      	add	r3, r2
 8007d88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d8c:	881b      	ldrh	r3, [r3, #0]
 8007d8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d92:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8007d96:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 808e 	beq.w	8007ebc <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6818      	ldr	r0, [r3, #0]
 8007da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007da6:	6959      	ldr	r1, [r3, #20]
 8007da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007daa:	88da      	ldrh	r2, [r3, #6]
 8007dac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007db0:	f006 fb65 	bl	800e47e <USB_ReadPMA>
 8007db4:	e082      	b.n	8007ebc <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007db8:	78db      	ldrb	r3, [r3, #3]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d10a      	bne.n	8007dd4 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007dbe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f9d3 	bl	8008172 <HAL_PCD_EP_DB_Receive>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8007dd2:	e073      	b.n	8007ebc <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4413      	add	r3, r2
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dee:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	441a      	add	r2, r3
 8007e00:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	881b      	ldrh	r3, [r3, #0]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d022      	beq.n	8007e78 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	4413      	add	r3, r2
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	6812      	ldr	r2, [r2, #0]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e56:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8007e5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d02c      	beq.n	8007ebc <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e68:	6959      	ldr	r1, [r3, #20]
 8007e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e6c:	891a      	ldrh	r2, [r3, #8]
 8007e6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007e72:	f006 fb04 	bl	800e47e <USB_ReadPMA>
 8007e76:	e021      	b.n	8007ebc <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	461a      	mov	r2, r3
 8007e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	00db      	lsls	r3, r3, #3
 8007e8a:	4413      	add	r3, r2
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	6812      	ldr	r2, [r2, #0]
 8007e90:	4413      	add	r3, r2
 8007e92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e9c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8007ea0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d009      	beq.n	8007ebc <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6818      	ldr	r0, [r3, #0]
 8007eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eae:	6959      	ldr	r1, [r3, #20]
 8007eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eb2:	895a      	ldrh	r2, [r3, #10]
 8007eb4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007eb8:	f006 fae1 	bl	800e47e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ebe:	69da      	ldr	r2, [r3, #28]
 8007ec0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007ec4:	441a      	add	r2, r3
 8007ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ec8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ecc:	695a      	ldr	r2, [r3, #20]
 8007ece:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007ed2:	441a      	add	r2, r3
 8007ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ed6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d005      	beq.n	8007eec <PCD_EP_ISR_Handler+0x504>
 8007ee0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8007ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d206      	bcs.n	8007efa <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f008 fcd6 	bl	80108a4 <HAL_PCD_DataOutStageCallback>
 8007ef8:	e005      	b.n	8007f06 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f00:	4618      	mov	r0, r3
 8007f02:	f004 fd6e 	bl	800c9e2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007f06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 8121 	beq.w	8008156 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8007f14:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007f18:	1c5a      	adds	r2, r3, #1
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	00db      	lsls	r3, r3, #3
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	4413      	add	r3, r2
 8007f26:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	441a      	add	r2, r3
 8007f54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f66:	78db      	ldrb	r3, [r3, #3]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	f040 80a2 	bne.w	80080b2 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8007f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f70:	2200      	movs	r2, #0
 8007f72:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f76:	7b1b      	ldrb	r3, [r3, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 8093 	beq.w	80080a4 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007f7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d046      	beq.n	8008018 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f8c:	785b      	ldrb	r3, [r3, #1]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d126      	bne.n	8007fe0 <PCD_EP_ISR_Handler+0x5f8>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	627b      	str	r3, [r7, #36]	; 0x24
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	4413      	add	r3, r2
 8007fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8007faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	00da      	lsls	r2, r3, #3
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fb8:	623b      	str	r3, [r7, #32]
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	6a3b      	ldr	r3, [r7, #32]
 8007fc8:	801a      	strh	r2, [r3, #0]
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	801a      	strh	r2, [r3, #0]
 8007fde:	e061      	b.n	80080a4 <PCD_EP_ISR_Handler+0x6bc>
 8007fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fe2:	785b      	ldrb	r3, [r3, #1]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d15d      	bne.n	80080a4 <PCD_EP_ISR_Handler+0x6bc>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffc:	4413      	add	r3, r2
 8007ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	00da      	lsls	r2, r3, #3
 8008006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008008:	4413      	add	r3, r2
 800800a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800800e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008012:	2200      	movs	r2, #0
 8008014:	801a      	strh	r2, [r3, #0]
 8008016:	e045      	b.n	80080a4 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800801e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008020:	785b      	ldrb	r3, [r3, #1]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d126      	bne.n	8008074 <PCD_EP_ISR_Handler+0x68c>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	637b      	str	r3, [r7, #52]	; 0x34
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008034:	b29b      	uxth	r3, r3
 8008036:	461a      	mov	r2, r3
 8008038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803a:	4413      	add	r3, r2
 800803c:	637b      	str	r3, [r7, #52]	; 0x34
 800803e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	00da      	lsls	r2, r3, #3
 8008044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008046:	4413      	add	r3, r2
 8008048:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800804c:	633b      	str	r3, [r7, #48]	; 0x30
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	b29b      	uxth	r3, r3
 8008054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008058:	b29a      	uxth	r2, r3
 800805a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805c:	801a      	strh	r2, [r3, #0]
 800805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	b29b      	uxth	r3, r3
 8008064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800806c:	b29a      	uxth	r2, r3
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	801a      	strh	r2, [r3, #0]
 8008072:	e017      	b.n	80080a4 <PCD_EP_ISR_Handler+0x6bc>
 8008074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008076:	785b      	ldrb	r3, [r3, #1]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d113      	bne.n	80080a4 <PCD_EP_ISR_Handler+0x6bc>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008084:	b29b      	uxth	r3, r3
 8008086:	461a      	mov	r2, r3
 8008088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800808a:	4413      	add	r3, r2
 800808c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800808e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	00da      	lsls	r2, r3, #3
 8008094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008096:	4413      	add	r3, r2
 8008098:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800809c:	63bb      	str	r3, [r7, #56]	; 0x38
 800809e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a0:	2200      	movs	r2, #0
 80080a2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80080a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f008 fc15 	bl	80108da <HAL_PCD_DataInStageCallback>
 80080b0:	e051      	b.n	8008156 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80080b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80080b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d144      	bne.n	8008148 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	461a      	mov	r2, r3
 80080ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	00db      	lsls	r3, r3, #3
 80080d0:	4413      	add	r3, r2
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	6812      	ldr	r2, [r2, #0]
 80080d6:	4413      	add	r3, r2
 80080d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80080e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080e8:	699a      	ldr	r2, [r3, #24]
 80080ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d907      	bls.n	8008102 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 80080f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080f4:	699a      	ldr	r2, [r3, #24]
 80080f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80080fa:	1ad2      	subs	r2, r2, r3
 80080fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080fe:	619a      	str	r2, [r3, #24]
 8008100:	e002      	b.n	8008108 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8008102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008104:	2200      	movs	r2, #0
 8008106:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d106      	bne.n	800811e <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f008 fbdf 	bl	80108da <HAL_PCD_DataInStageCallback>
 800811c:	e01b      	b.n	8008156 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800811e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008120:	695a      	ldr	r2, [r3, #20]
 8008122:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008126:	441a      	add	r2, r3
 8008128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800812a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800812c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800812e:	69da      	ldr	r2, [r3, #28]
 8008130:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008134:	441a      	add	r2, r3
 8008136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008138:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008140:	4618      	mov	r0, r3
 8008142:	f004 fc4e 	bl	800c9e2 <USB_EPStartXfer>
 8008146:	e006      	b.n	8008156 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008148:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800814c:	461a      	mov	r2, r3
 800814e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f917 	bl	8008384 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800815e:	b29b      	uxth	r3, r3
 8008160:	b21b      	sxth	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	f6ff ac45 	blt.w	80079f2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3758      	adds	r7, #88	; 0x58
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b088      	sub	sp, #32
 8008176:	af00      	add	r7, sp, #0
 8008178:	60f8      	str	r0, [r7, #12]
 800817a:	60b9      	str	r1, [r7, #8]
 800817c:	4613      	mov	r3, r2
 800817e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008180:	88fb      	ldrh	r3, [r7, #6]
 8008182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d07c      	beq.n	8008284 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008192:	b29b      	uxth	r3, r3
 8008194:	461a      	mov	r2, r3
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	4413      	add	r3, r2
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	6812      	ldr	r2, [r2, #0]
 80081a2:	4413      	add	r3, r2
 80081a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80081a8:	881b      	ldrh	r3, [r3, #0]
 80081aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	699a      	ldr	r2, [r3, #24]
 80081b4:	8b7b      	ldrh	r3, [r7, #26]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d306      	bcc.n	80081c8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	699a      	ldr	r2, [r3, #24]
 80081be:	8b7b      	ldrh	r3, [r7, #26]
 80081c0:	1ad2      	subs	r2, r2, r3
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	619a      	str	r2, [r3, #24]
 80081c6:	e002      	b.n	80081ce <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2200      	movs	r2, #0
 80081cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d123      	bne.n	800821e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	881b      	ldrh	r3, [r3, #0]
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f0:	833b      	strh	r3, [r7, #24]
 80081f2:	8b3b      	ldrh	r3, [r7, #24]
 80081f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081f8:	833b      	strh	r3, [r7, #24]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	441a      	add	r2, r3
 8008208:	8b3b      	ldrh	r3, [r7, #24]
 800820a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800820e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800821a:	b29b      	uxth	r3, r3
 800821c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800821e:	88fb      	ldrh	r3, [r7, #6]
 8008220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008224:	2b00      	cmp	r3, #0
 8008226:	d01f      	beq.n	8008268 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	461a      	mov	r2, r3
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	881b      	ldrh	r3, [r3, #0]
 8008238:	b29b      	uxth	r3, r3
 800823a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800823e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008242:	82fb      	strh	r3, [r7, #22]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	461a      	mov	r2, r3
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	441a      	add	r2, r3
 8008252:	8afb      	ldrh	r3, [r7, #22]
 8008254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800825c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008260:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008264:	b29b      	uxth	r3, r3
 8008266:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008268:	8b7b      	ldrh	r3, [r7, #26]
 800826a:	2b00      	cmp	r3, #0
 800826c:	f000 8085 	beq.w	800837a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6818      	ldr	r0, [r3, #0]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	6959      	ldr	r1, [r3, #20]
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	891a      	ldrh	r2, [r3, #8]
 800827c:	8b7b      	ldrh	r3, [r7, #26]
 800827e:	f006 f8fe 	bl	800e47e <USB_ReadPMA>
 8008282:	e07a      	b.n	800837a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800828c:	b29b      	uxth	r3, r3
 800828e:	461a      	mov	r2, r3
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	00db      	lsls	r3, r3, #3
 8008296:	4413      	add	r3, r2
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	6812      	ldr	r2, [r2, #0]
 800829c:	4413      	add	r3, r2
 800829e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082a2:	881b      	ldrh	r3, [r3, #0]
 80082a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	699a      	ldr	r2, [r3, #24]
 80082ae:	8b7b      	ldrh	r3, [r7, #26]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d306      	bcc.n	80082c2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	699a      	ldr	r2, [r3, #24]
 80082b8:	8b7b      	ldrh	r3, [r7, #26]
 80082ba:	1ad2      	subs	r2, r2, r3
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	619a      	str	r2, [r3, #24]
 80082c0:	e002      	b.n	80082c8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2200      	movs	r2, #0
 80082c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d123      	bne.n	8008318 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	461a      	mov	r2, r3
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4413      	add	r3, r2
 80082de:	881b      	ldrh	r3, [r3, #0]
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ea:	83fb      	strh	r3, [r7, #30]
 80082ec:	8bfb      	ldrh	r3, [r7, #30]
 80082ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80082f2:	83fb      	strh	r3, [r7, #30]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	461a      	mov	r2, r3
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	441a      	add	r2, r3
 8008302:	8bfb      	ldrh	r3, [r7, #30]
 8008304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800830c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008314:	b29b      	uxth	r3, r3
 8008316:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008318:	88fb      	ldrh	r3, [r7, #6]
 800831a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800831e:	2b00      	cmp	r3, #0
 8008320:	d11f      	bne.n	8008362 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	b29b      	uxth	r3, r3
 8008334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800833c:	83bb      	strh	r3, [r7, #28]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	461a      	mov	r2, r3
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	441a      	add	r2, r3
 800834c:	8bbb      	ldrh	r3, [r7, #28]
 800834e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800835a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800835e:	b29b      	uxth	r3, r3
 8008360:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008362:	8b7b      	ldrh	r3, [r7, #26]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d008      	beq.n	800837a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6818      	ldr	r0, [r3, #0]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	6959      	ldr	r1, [r3, #20]
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	895a      	ldrh	r2, [r3, #10]
 8008374:	8b7b      	ldrh	r3, [r7, #26]
 8008376:	f006 f882 	bl	800e47e <USB_ReadPMA>
    }
  }

  return count;
 800837a:	8b7b      	ldrh	r3, [r7, #26]
}
 800837c:	4618      	mov	r0, r3
 800837e:	3720      	adds	r7, #32
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b0a4      	sub	sp, #144	; 0x90
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	4613      	mov	r3, r2
 8008390:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008392:	88fb      	ldrh	r3, [r7, #6]
 8008394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008398:	2b00      	cmp	r3, #0
 800839a:	f000 81db 	beq.w	8008754 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	461a      	mov	r2, r3
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	00db      	lsls	r3, r3, #3
 80083b0:	4413      	add	r3, r2
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	6812      	ldr	r2, [r2, #0]
 80083b6:	4413      	add	r3, r2
 80083b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083bc:	881b      	ldrh	r3, [r3, #0]
 80083be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083c2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	699a      	ldr	r2, [r3, #24]
 80083ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d907      	bls.n	80083e2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	699a      	ldr	r2, [r3, #24]
 80083d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80083da:	1ad2      	subs	r2, r2, r3
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	619a      	str	r2, [r3, #24]
 80083e0:	e002      	b.n	80083e8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2200      	movs	r2, #0
 80083e6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f040 80b9 	bne.w	8008564 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	785b      	ldrb	r3, [r3, #1]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d126      	bne.n	8008448 <HAL_PCD_EP_DB_Transmit+0xc4>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008408:	b29b      	uxth	r3, r3
 800840a:	461a      	mov	r2, r3
 800840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840e:	4413      	add	r3, r2
 8008410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	00da      	lsls	r2, r3, #3
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	4413      	add	r3, r2
 800841c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008420:	62bb      	str	r3, [r7, #40]	; 0x28
 8008422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008424:	881b      	ldrh	r3, [r3, #0]
 8008426:	b29b      	uxth	r3, r3
 8008428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800842c:	b29a      	uxth	r2, r3
 800842e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008430:	801a      	strh	r2, [r3, #0]
 8008432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008434:	881b      	ldrh	r3, [r3, #0]
 8008436:	b29b      	uxth	r3, r3
 8008438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800843c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008440:	b29a      	uxth	r2, r3
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	801a      	strh	r2, [r3, #0]
 8008446:	e01a      	b.n	800847e <HAL_PCD_EP_DB_Transmit+0xfa>
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	785b      	ldrb	r3, [r3, #1]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d116      	bne.n	800847e <HAL_PCD_EP_DB_Transmit+0xfa>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	637b      	str	r3, [r7, #52]	; 0x34
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800845e:	b29b      	uxth	r3, r3
 8008460:	461a      	mov	r2, r3
 8008462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008464:	4413      	add	r3, r2
 8008466:	637b      	str	r3, [r7, #52]	; 0x34
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	00da      	lsls	r2, r3, #3
 800846e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008470:	4413      	add	r3, r2
 8008472:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008476:	633b      	str	r3, [r7, #48]	; 0x30
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847a:	2200      	movs	r2, #0
 800847c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	627b      	str	r3, [r7, #36]	; 0x24
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	785b      	ldrb	r3, [r3, #1]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d126      	bne.n	80084da <HAL_PCD_EP_DB_Transmit+0x156>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	61fb      	str	r3, [r7, #28]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800849a:	b29b      	uxth	r3, r3
 800849c:	461a      	mov	r2, r3
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	4413      	add	r3, r2
 80084a2:	61fb      	str	r3, [r7, #28]
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	00da      	lsls	r2, r3, #3
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	4413      	add	r3, r2
 80084ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80084b2:	61bb      	str	r3, [r7, #24]
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084be:	b29a      	uxth	r2, r3
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	801a      	strh	r2, [r3, #0]
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	801a      	strh	r2, [r3, #0]
 80084d8:	e017      	b.n	800850a <HAL_PCD_EP_DB_Transmit+0x186>
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	785b      	ldrb	r3, [r3, #1]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d113      	bne.n	800850a <HAL_PCD_EP_DB_Transmit+0x186>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	461a      	mov	r2, r3
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	4413      	add	r3, r2
 80084f2:	627b      	str	r3, [r7, #36]	; 0x24
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	00da      	lsls	r2, r3, #3
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	4413      	add	r3, r2
 80084fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008502:	623b      	str	r3, [r7, #32]
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	2200      	movs	r2, #0
 8008508:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	4619      	mov	r1, r3
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f008 f9e2 	bl	80108da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008516:	88fb      	ldrh	r3, [r7, #6]
 8008518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 82fa 	beq.w	8008b16 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	461a      	mov	r2, r3
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	b29b      	uxth	r3, r3
 8008534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800853c:	82fb      	strh	r3, [r7, #22]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	441a      	add	r2, r3
 800854c:	8afb      	ldrh	r3, [r7, #22]
 800854e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008556:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800855a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800855e:	b29b      	uxth	r3, r3
 8008560:	8013      	strh	r3, [r2, #0]
 8008562:	e2d8      	b.n	8008b16 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008564:	88fb      	ldrh	r3, [r7, #6]
 8008566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d021      	beq.n	80085b2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	b29b      	uxth	r3, r3
 8008580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008588:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	461a      	mov	r2, r3
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	441a      	add	r2, r3
 800859a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800859e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	f040 82ac 	bne.w	8008b16 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	695a      	ldr	r2, [r3, #20]
 80085c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80085c6:	441a      	add	r2, r3
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	69da      	ldr	r2, [r3, #28]
 80085d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80085d4:	441a      	add	r2, r3
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	6a1a      	ldr	r2, [r3, #32]
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d30b      	bcc.n	80085fe <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	6a1a      	ldr	r2, [r3, #32]
 80085f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085f6:	1ad2      	subs	r2, r2, r3
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	621a      	str	r2, [r3, #32]
 80085fc:	e017      	b.n	800862e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d108      	bne.n	8008618 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8008606:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800860a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008616:	e00a      	b.n	800862e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	2200      	movs	r2, #0
 800862c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	785b      	ldrb	r3, [r3, #1]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d165      	bne.n	8008702 <HAL_PCD_EP_DB_Transmit+0x37e>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008644:	b29b      	uxth	r3, r3
 8008646:	461a      	mov	r2, r3
 8008648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800864a:	4413      	add	r3, r2
 800864c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	00da      	lsls	r2, r3, #3
 8008654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008656:	4413      	add	r3, r2
 8008658:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800865c:	63bb      	str	r3, [r7, #56]	; 0x38
 800865e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	b29b      	uxth	r3, r3
 8008664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008668:	b29a      	uxth	r2, r3
 800866a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866c:	801a      	strh	r2, [r3, #0]
 800866e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008672:	2b3e      	cmp	r3, #62	; 0x3e
 8008674:	d91d      	bls.n	80086b2 <HAL_PCD_EP_DB_Transmit+0x32e>
 8008676:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800867a:	095b      	lsrs	r3, r3, #5
 800867c:	64bb      	str	r3, [r7, #72]	; 0x48
 800867e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008682:	f003 031f 	and.w	r3, r3, #31
 8008686:	2b00      	cmp	r3, #0
 8008688:	d102      	bne.n	8008690 <HAL_PCD_EP_DB_Transmit+0x30c>
 800868a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800868c:	3b01      	subs	r3, #1
 800868e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	b29a      	uxth	r2, r3
 8008696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008698:	b29b      	uxth	r3, r3
 800869a:	029b      	lsls	r3, r3, #10
 800869c:	b29b      	uxth	r3, r3
 800869e:	4313      	orrs	r3, r2
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ae:	801a      	strh	r2, [r3, #0]
 80086b0:	e044      	b.n	800873c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80086b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10a      	bne.n	80086d0 <HAL_PCD_EP_DB_Transmit+0x34c>
 80086ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086bc:	881b      	ldrh	r3, [r3, #0]
 80086be:	b29b      	uxth	r3, r3
 80086c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086cc:	801a      	strh	r2, [r3, #0]
 80086ce:	e035      	b.n	800873c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80086d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086d4:	085b      	lsrs	r3, r3, #1
 80086d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80086d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <HAL_PCD_EP_DB_Transmit+0x366>
 80086e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086e6:	3301      	adds	r3, #1
 80086e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80086ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ec:	881b      	ldrh	r3, [r3, #0]
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	029b      	lsls	r3, r3, #10
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	4313      	orrs	r3, r2
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fe:	801a      	strh	r2, [r3, #0]
 8008700:	e01c      	b.n	800873c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	785b      	ldrb	r3, [r3, #1]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d118      	bne.n	800873c <HAL_PCD_EP_DB_Transmit+0x3b8>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	647b      	str	r3, [r7, #68]	; 0x44
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008718:	b29b      	uxth	r3, r3
 800871a:	461a      	mov	r2, r3
 800871c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800871e:	4413      	add	r3, r2
 8008720:	647b      	str	r3, [r7, #68]	; 0x44
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	00da      	lsls	r2, r3, #3
 8008728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800872a:	4413      	add	r3, r2
 800872c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008730:	643b      	str	r3, [r7, #64]	; 0x40
 8008732:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008736:	b29a      	uxth	r2, r3
 8008738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800873a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6818      	ldr	r0, [r3, #0]
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	6959      	ldr	r1, [r3, #20]
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	891a      	ldrh	r2, [r3, #8]
 8008748:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800874c:	b29b      	uxth	r3, r3
 800874e:	f005 fe54 	bl	800e3fa <USB_WritePMA>
 8008752:	e1e0      	b.n	8008b16 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800875c:	b29b      	uxth	r3, r3
 800875e:	461a      	mov	r2, r3
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	00db      	lsls	r3, r3, #3
 8008766:	4413      	add	r3, r2
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	6812      	ldr	r2, [r2, #0]
 800876c:	4413      	add	r3, r2
 800876e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008772:	881b      	ldrh	r3, [r3, #0]
 8008774:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008778:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	699a      	ldr	r2, [r3, #24]
 8008780:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008784:	429a      	cmp	r2, r3
 8008786:	d307      	bcc.n	8008798 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	699a      	ldr	r2, [r3, #24]
 800878c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008790:	1ad2      	subs	r2, r2, r3
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	619a      	str	r2, [r3, #24]
 8008796:	e002      	b.n	800879e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	2200      	movs	r2, #0
 800879c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f040 80c0 	bne.w	8008928 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	785b      	ldrb	r3, [r3, #1]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d126      	bne.n	80087fe <HAL_PCD_EP_DB_Transmit+0x47a>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087be:	b29b      	uxth	r3, r3
 80087c0:	461a      	mov	r2, r3
 80087c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80087c4:	4413      	add	r3, r2
 80087c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	00da      	lsls	r2, r3, #3
 80087ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80087d0:	4413      	add	r3, r2
 80087d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80087d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80087d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087da:	881b      	ldrh	r3, [r3, #0]
 80087dc:	b29b      	uxth	r3, r3
 80087de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087e6:	801a      	strh	r2, [r3, #0]
 80087e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087fa:	801a      	strh	r2, [r3, #0]
 80087fc:	e01a      	b.n	8008834 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	785b      	ldrb	r3, [r3, #1]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d116      	bne.n	8008834 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	667b      	str	r3, [r7, #100]	; 0x64
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008814:	b29b      	uxth	r3, r3
 8008816:	461a      	mov	r2, r3
 8008818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800881a:	4413      	add	r3, r2
 800881c:	667b      	str	r3, [r7, #100]	; 0x64
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	00da      	lsls	r2, r3, #3
 8008824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008826:	4413      	add	r3, r2
 8008828:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800882c:	663b      	str	r3, [r7, #96]	; 0x60
 800882e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008830:	2200      	movs	r2, #0
 8008832:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	677b      	str	r3, [r7, #116]	; 0x74
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	785b      	ldrb	r3, [r3, #1]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d12b      	bne.n	800889a <HAL_PCD_EP_DB_Transmit+0x516>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008850:	b29b      	uxth	r3, r3
 8008852:	461a      	mov	r2, r3
 8008854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008856:	4413      	add	r3, r2
 8008858:	66fb      	str	r3, [r7, #108]	; 0x6c
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	00da      	lsls	r2, r3, #3
 8008860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008862:	4413      	add	r3, r2
 8008864:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008868:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800886c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	b29b      	uxth	r3, r3
 8008874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008878:	b29a      	uxth	r2, r3
 800887a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800887e:	801a      	strh	r2, [r3, #0]
 8008880:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	b29b      	uxth	r3, r3
 8008888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800888c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008890:	b29a      	uxth	r2, r3
 8008892:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008896:	801a      	strh	r2, [r3, #0]
 8008898:	e017      	b.n	80088ca <HAL_PCD_EP_DB_Transmit+0x546>
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	785b      	ldrb	r3, [r3, #1]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d113      	bne.n	80088ca <HAL_PCD_EP_DB_Transmit+0x546>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	461a      	mov	r2, r3
 80088ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088b0:	4413      	add	r3, r2
 80088b2:	677b      	str	r3, [r7, #116]	; 0x74
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	00da      	lsls	r2, r3, #3
 80088ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088bc:	4413      	add	r3, r2
 80088be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088c2:	673b      	str	r3, [r7, #112]	; 0x70
 80088c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088c6:	2200      	movs	r2, #0
 80088c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	4619      	mov	r1, r3
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f008 f802 	bl	80108da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80088d6:	88fb      	ldrh	r3, [r7, #6]
 80088d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f040 811a 	bne.w	8008b16 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	881b      	ldrh	r3, [r3, #0]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088fc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	461a      	mov	r2, r3
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	441a      	add	r2, r3
 800890e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8008912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800891a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800891e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008922:	b29b      	uxth	r3, r3
 8008924:	8013      	strh	r3, [r2, #0]
 8008926:	e0f6      	b.n	8008b16 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008928:	88fb      	ldrh	r3, [r7, #6]
 800892a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800892e:	2b00      	cmp	r3, #0
 8008930:	d121      	bne.n	8008976 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	461a      	mov	r2, r3
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	4413      	add	r3, r2
 8008940:	881b      	ldrh	r3, [r3, #0]
 8008942:	b29b      	uxth	r3, r3
 8008944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800894c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	461a      	mov	r2, r3
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	441a      	add	r2, r3
 800895e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800896a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800896e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008972:	b29b      	uxth	r3, r3
 8008974:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800897c:	2b01      	cmp	r3, #1
 800897e:	f040 80ca 	bne.w	8008b16 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	695a      	ldr	r2, [r3, #20]
 8008986:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800898a:	441a      	add	r2, r3
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	69da      	ldr	r2, [r3, #28]
 8008994:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008998:	441a      	add	r2, r3
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	6a1a      	ldr	r2, [r3, #32]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d30b      	bcc.n	80089c2 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	6a1a      	ldr	r2, [r3, #32]
 80089b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089ba:	1ad2      	subs	r2, r2, r3
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	621a      	str	r2, [r3, #32]
 80089c0:	e017      	b.n	80089f2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d108      	bne.n	80089dc <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80089ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80089ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80089da:	e00a      	b.n	80089f2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	6a1b      	ldr	r3, [r3, #32]
 80089e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	2200      	movs	r2, #0
 80089e8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	657b      	str	r3, [r7, #84]	; 0x54
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	785b      	ldrb	r3, [r3, #1]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d165      	bne.n	8008acc <HAL_PCD_EP_DB_Transmit+0x748>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	461a      	mov	r2, r3
 8008a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a14:	4413      	add	r3, r2
 8008a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	00da      	lsls	r2, r3, #3
 8008a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a20:	4413      	add	r3, r2
 8008a22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a26:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a2a:	881b      	ldrh	r3, [r3, #0]
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a36:	801a      	strh	r2, [r3, #0]
 8008a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a3c:	2b3e      	cmp	r3, #62	; 0x3e
 8008a3e:	d91d      	bls.n	8008a7c <HAL_PCD_EP_DB_Transmit+0x6f8>
 8008a40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a44:	095b      	lsrs	r3, r3, #5
 8008a46:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a4c:	f003 031f 	and.w	r3, r3, #31
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d102      	bne.n	8008a5a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8008a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a56:	3b01      	subs	r3, #1
 8008a58:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	029b      	lsls	r3, r3, #10
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a78:	801a      	strh	r2, [r3, #0]
 8008a7a:	e041      	b.n	8008b00 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10a      	bne.n	8008a9a <HAL_PCD_EP_DB_Transmit+0x716>
 8008a84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a86:	881b      	ldrh	r3, [r3, #0]
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a96:	801a      	strh	r2, [r3, #0]
 8008a98:	e032      	b.n	8008b00 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a9e:	085b      	lsrs	r3, r3, #1
 8008aa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d002      	beq.n	8008ab4 <HAL_PCD_EP_DB_Transmit+0x730>
 8008aae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ab6:	881b      	ldrh	r3, [r3, #0]
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	029b      	lsls	r3, r3, #10
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ac8:	801a      	strh	r2, [r3, #0]
 8008aca:	e019      	b.n	8008b00 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	785b      	ldrb	r3, [r3, #1]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d115      	bne.n	8008b00 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	461a      	mov	r2, r3
 8008ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ae2:	4413      	add	r3, r2
 8008ae4:	657b      	str	r3, [r7, #84]	; 0x54
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	00da      	lsls	r2, r3, #3
 8008aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aee:	4413      	add	r3, r2
 8008af0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008af4:	653b      	str	r3, [r7, #80]	; 0x50
 8008af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008afe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6818      	ldr	r0, [r3, #0]
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	6959      	ldr	r1, [r3, #20]
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	895a      	ldrh	r2, [r3, #10]
 8008b0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	f005 fc72 	bl	800e3fa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	881b      	ldrh	r3, [r3, #0]
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b30:	82bb      	strh	r3, [r7, #20]
 8008b32:	8abb      	ldrh	r3, [r7, #20]
 8008b34:	f083 0310 	eor.w	r3, r3, #16
 8008b38:	82bb      	strh	r3, [r7, #20]
 8008b3a:	8abb      	ldrh	r3, [r7, #20]
 8008b3c:	f083 0320 	eor.w	r3, r3, #32
 8008b40:	82bb      	strh	r3, [r7, #20]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	461a      	mov	r2, r3
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	441a      	add	r2, r3
 8008b50:	8abb      	ldrh	r3, [r7, #20]
 8008b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3790      	adds	r7, #144	; 0x90
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	607b      	str	r3, [r7, #4]
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	817b      	strh	r3, [r7, #10]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008b82:	897b      	ldrh	r3, [r7, #10]
 8008b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00b      	beq.n	8008ba6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b8e:	897b      	ldrh	r3, [r7, #10]
 8008b90:	f003 0307 	and.w	r3, r3, #7
 8008b94:	1c5a      	adds	r2, r3, #1
 8008b96:	4613      	mov	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	00db      	lsls	r3, r3, #3
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	617b      	str	r3, [r7, #20]
 8008ba4:	e009      	b.n	8008bba <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008ba6:	897a      	ldrh	r2, [r7, #10]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	00db      	lsls	r3, r3, #3
 8008bb0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008bba:	893b      	ldrh	r3, [r7, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d107      	bne.n	8008bd0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	80da      	strh	r2, [r3, #6]
 8008bce:	e00b      	b.n	8008be8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	0c1b      	lsrs	r3, r3, #16
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	371c      	adds	r7, #28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b085      	sub	sp, #20
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	f043 0301 	orr.w	r3, r3, #1
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	f043 0302 	orr.w	r3, r3, #2
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
	...

08008c4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008c50:	4b04      	ldr	r3, [pc, #16]	; (8008c64 <HAL_PWREx_GetVoltageRange+0x18>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	40007000 	.word	0x40007000

08008c68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c76:	d130      	bne.n	8008cda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008c78:	4b23      	ldr	r3, [pc, #140]	; (8008d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c84:	d038      	beq.n	8008cf8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008c86:	4b20      	ldr	r3, [pc, #128]	; (8008d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008c8e:	4a1e      	ldr	r2, [pc, #120]	; (8008d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008c96:	4b1d      	ldr	r3, [pc, #116]	; (8008d0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2232      	movs	r2, #50	; 0x32
 8008c9c:	fb02 f303 	mul.w	r3, r2, r3
 8008ca0:	4a1b      	ldr	r2, [pc, #108]	; (8008d10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca6:	0c9b      	lsrs	r3, r3, #18
 8008ca8:	3301      	adds	r3, #1
 8008caa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008cac:	e002      	b.n	8008cb4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008cb4:	4b14      	ldr	r3, [pc, #80]	; (8008d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008cb6:	695b      	ldr	r3, [r3, #20]
 8008cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cc0:	d102      	bne.n	8008cc8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d1f2      	bne.n	8008cae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008cc8:	4b0f      	ldr	r3, [pc, #60]	; (8008d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cd4:	d110      	bne.n	8008cf8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e00f      	b.n	8008cfa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008cda:	4b0b      	ldr	r3, [pc, #44]	; (8008d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ce6:	d007      	beq.n	8008cf8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008ce8:	4b07      	ldr	r3, [pc, #28]	; (8008d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008cf0:	4a05      	ldr	r2, [pc, #20]	; (8008d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008cf6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	40007000 	.word	0x40007000
 8008d0c:	20000020 	.word	0x20000020
 8008d10:	431bde83 	.word	0x431bde83

08008d14 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8008d14:	b480      	push	{r7}
 8008d16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8008d18:	4b05      	ldr	r3, [pc, #20]	; (8008d30 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	4a04      	ldr	r2, [pc, #16]	; (8008d30 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d22:	6053      	str	r3, [r2, #4]
}
 8008d24:	bf00      	nop
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	40007000 	.word	0x40007000

08008d34 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b088      	sub	sp, #32
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d102      	bne.n	8008d48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	f000 bc02 	b.w	800954c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d48:	4b96      	ldr	r3, [pc, #600]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	f003 030c 	and.w	r3, r3, #12
 8008d50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d52:	4b94      	ldr	r3, [pc, #592]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	f003 0303 	and.w	r3, r3, #3
 8008d5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 0310 	and.w	r3, r3, #16
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 80e4 	beq.w	8008f32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d007      	beq.n	8008d80 <HAL_RCC_OscConfig+0x4c>
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	2b0c      	cmp	r3, #12
 8008d74:	f040 808b 	bne.w	8008e8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	f040 8087 	bne.w	8008e8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008d80:	4b88      	ldr	r3, [pc, #544]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0302 	and.w	r3, r3, #2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d005      	beq.n	8008d98 <HAL_RCC_OscConfig+0x64>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d101      	bne.n	8008d98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e3d9      	b.n	800954c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a1a      	ldr	r2, [r3, #32]
 8008d9c:	4b81      	ldr	r3, [pc, #516]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0308 	and.w	r3, r3, #8
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d004      	beq.n	8008db2 <HAL_RCC_OscConfig+0x7e>
 8008da8:	4b7e      	ldr	r3, [pc, #504]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008db0:	e005      	b.n	8008dbe <HAL_RCC_OscConfig+0x8a>
 8008db2:	4b7c      	ldr	r3, [pc, #496]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008db8:	091b      	lsrs	r3, r3, #4
 8008dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d223      	bcs.n	8008e0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 fd8c 	bl	80098e4 <RCC_SetFlashLatencyFromMSIRange>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e3ba      	b.n	800954c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008dd6:	4b73      	ldr	r3, [pc, #460]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a72      	ldr	r2, [pc, #456]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008ddc:	f043 0308 	orr.w	r3, r3, #8
 8008de0:	6013      	str	r3, [r2, #0]
 8008de2:	4b70      	ldr	r3, [pc, #448]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	496d      	ldr	r1, [pc, #436]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008df0:	4313      	orrs	r3, r2
 8008df2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008df4:	4b6b      	ldr	r3, [pc, #428]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	69db      	ldr	r3, [r3, #28]
 8008e00:	021b      	lsls	r3, r3, #8
 8008e02:	4968      	ldr	r1, [pc, #416]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008e04:	4313      	orrs	r3, r2
 8008e06:	604b      	str	r3, [r1, #4]
 8008e08:	e025      	b.n	8008e56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008e0a:	4b66      	ldr	r3, [pc, #408]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a65      	ldr	r2, [pc, #404]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008e10:	f043 0308 	orr.w	r3, r3, #8
 8008e14:	6013      	str	r3, [r2, #0]
 8008e16:	4b63      	ldr	r3, [pc, #396]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	4960      	ldr	r1, [pc, #384]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008e28:	4b5e      	ldr	r3, [pc, #376]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	69db      	ldr	r3, [r3, #28]
 8008e34:	021b      	lsls	r3, r3, #8
 8008e36:	495b      	ldr	r1, [pc, #364]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d109      	bne.n	8008e56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 fd4c 	bl	80098e4 <RCC_SetFlashLatencyFromMSIRange>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d001      	beq.n	8008e56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e37a      	b.n	800954c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008e56:	f000 fc81 	bl	800975c <HAL_RCC_GetSysClockFreq>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	4b51      	ldr	r3, [pc, #324]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	091b      	lsrs	r3, r3, #4
 8008e62:	f003 030f 	and.w	r3, r3, #15
 8008e66:	4950      	ldr	r1, [pc, #320]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008e68:	5ccb      	ldrb	r3, [r1, r3]
 8008e6a:	f003 031f 	and.w	r3, r3, #31
 8008e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e72:	4a4e      	ldr	r2, [pc, #312]	; (8008fac <HAL_RCC_OscConfig+0x278>)
 8008e74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008e76:	4b4e      	ldr	r3, [pc, #312]	; (8008fb0 <HAL_RCC_OscConfig+0x27c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fb fc6e 	bl	800475c <HAL_InitTick>
 8008e80:	4603      	mov	r3, r0
 8008e82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d052      	beq.n	8008f30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008e8a:	7bfb      	ldrb	r3, [r7, #15]
 8008e8c:	e35e      	b.n	800954c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d032      	beq.n	8008efc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008e96:	4b43      	ldr	r3, [pc, #268]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a42      	ldr	r2, [pc, #264]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008e9c:	f043 0301 	orr.w	r3, r3, #1
 8008ea0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008ea2:	f7fb fcab 	bl	80047fc <HAL_GetTick>
 8008ea6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008ea8:	e008      	b.n	8008ebc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008eaa:	f7fb fca7 	bl	80047fc <HAL_GetTick>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d901      	bls.n	8008ebc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e347      	b.n	800954c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008ebc:	4b39      	ldr	r3, [pc, #228]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0302 	and.w	r3, r3, #2
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0f0      	beq.n	8008eaa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008ec8:	4b36      	ldr	r3, [pc, #216]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a35      	ldr	r2, [pc, #212]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008ece:	f043 0308 	orr.w	r3, r3, #8
 8008ed2:	6013      	str	r3, [r2, #0]
 8008ed4:	4b33      	ldr	r3, [pc, #204]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a1b      	ldr	r3, [r3, #32]
 8008ee0:	4930      	ldr	r1, [pc, #192]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008ee6:	4b2f      	ldr	r3, [pc, #188]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	69db      	ldr	r3, [r3, #28]
 8008ef2:	021b      	lsls	r3, r3, #8
 8008ef4:	492b      	ldr	r1, [pc, #172]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	604b      	str	r3, [r1, #4]
 8008efa:	e01a      	b.n	8008f32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008efc:	4b29      	ldr	r3, [pc, #164]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a28      	ldr	r2, [pc, #160]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008f02:	f023 0301 	bic.w	r3, r3, #1
 8008f06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008f08:	f7fb fc78 	bl	80047fc <HAL_GetTick>
 8008f0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008f0e:	e008      	b.n	8008f22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008f10:	f7fb fc74 	bl	80047fc <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d901      	bls.n	8008f22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e314      	b.n	800954c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008f22:	4b20      	ldr	r3, [pc, #128]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 0302 	and.w	r3, r3, #2
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1f0      	bne.n	8008f10 <HAL_RCC_OscConfig+0x1dc>
 8008f2e:	e000      	b.n	8008f32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008f30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d073      	beq.n	8009026 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	d005      	beq.n	8008f50 <HAL_RCC_OscConfig+0x21c>
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	2b0c      	cmp	r3, #12
 8008f48:	d10e      	bne.n	8008f68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b03      	cmp	r3, #3
 8008f4e:	d10b      	bne.n	8008f68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f50:	4b14      	ldr	r3, [pc, #80]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d063      	beq.n	8009024 <HAL_RCC_OscConfig+0x2f0>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d15f      	bne.n	8009024 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e2f1      	b.n	800954c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f70:	d106      	bne.n	8008f80 <HAL_RCC_OscConfig+0x24c>
 8008f72:	4b0c      	ldr	r3, [pc, #48]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a0b      	ldr	r2, [pc, #44]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f7c:	6013      	str	r3, [r2, #0]
 8008f7e:	e025      	b.n	8008fcc <HAL_RCC_OscConfig+0x298>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f88:	d114      	bne.n	8008fb4 <HAL_RCC_OscConfig+0x280>
 8008f8a:	4b06      	ldr	r3, [pc, #24]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a05      	ldr	r2, [pc, #20]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f94:	6013      	str	r3, [r2, #0]
 8008f96:	4b03      	ldr	r3, [pc, #12]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a02      	ldr	r2, [pc, #8]	; (8008fa4 <HAL_RCC_OscConfig+0x270>)
 8008f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fa0:	6013      	str	r3, [r2, #0]
 8008fa2:	e013      	b.n	8008fcc <HAL_RCC_OscConfig+0x298>
 8008fa4:	40021000 	.word	0x40021000
 8008fa8:	08018ac8 	.word	0x08018ac8
 8008fac:	20000020 	.word	0x20000020
 8008fb0:	20000024 	.word	0x20000024
 8008fb4:	4ba0      	ldr	r3, [pc, #640]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a9f      	ldr	r2, [pc, #636]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 8008fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fbe:	6013      	str	r3, [r2, #0]
 8008fc0:	4b9d      	ldr	r3, [pc, #628]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a9c      	ldr	r2, [pc, #624]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 8008fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d013      	beq.n	8008ffc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fd4:	f7fb fc12 	bl	80047fc <HAL_GetTick>
 8008fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008fda:	e008      	b.n	8008fee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fdc:	f7fb fc0e 	bl	80047fc <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	2b64      	cmp	r3, #100	; 0x64
 8008fe8:	d901      	bls.n	8008fee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e2ae      	b.n	800954c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008fee:	4b92      	ldr	r3, [pc, #584]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d0f0      	beq.n	8008fdc <HAL_RCC_OscConfig+0x2a8>
 8008ffa:	e014      	b.n	8009026 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ffc:	f7fb fbfe 	bl	80047fc <HAL_GetTick>
 8009000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009002:	e008      	b.n	8009016 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009004:	f7fb fbfa 	bl	80047fc <HAL_GetTick>
 8009008:	4602      	mov	r2, r0
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	2b64      	cmp	r3, #100	; 0x64
 8009010:	d901      	bls.n	8009016 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009012:	2303      	movs	r3, #3
 8009014:	e29a      	b.n	800954c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009016:	4b88      	ldr	r3, [pc, #544]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1f0      	bne.n	8009004 <HAL_RCC_OscConfig+0x2d0>
 8009022:	e000      	b.n	8009026 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d060      	beq.n	80090f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	2b04      	cmp	r3, #4
 8009036:	d005      	beq.n	8009044 <HAL_RCC_OscConfig+0x310>
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	2b0c      	cmp	r3, #12
 800903c:	d119      	bne.n	8009072 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	2b02      	cmp	r3, #2
 8009042:	d116      	bne.n	8009072 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009044:	4b7c      	ldr	r3, [pc, #496]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800904c:	2b00      	cmp	r3, #0
 800904e:	d005      	beq.n	800905c <HAL_RCC_OscConfig+0x328>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d101      	bne.n	800905c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e277      	b.n	800954c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800905c:	4b76      	ldr	r3, [pc, #472]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	061b      	lsls	r3, r3, #24
 800906a:	4973      	ldr	r1, [pc, #460]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 800906c:	4313      	orrs	r3, r2
 800906e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009070:	e040      	b.n	80090f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d023      	beq.n	80090c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800907a:	4b6f      	ldr	r3, [pc, #444]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a6e      	ldr	r2, [pc, #440]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 8009080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009086:	f7fb fbb9 	bl	80047fc <HAL_GetTick>
 800908a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800908c:	e008      	b.n	80090a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800908e:	f7fb fbb5 	bl	80047fc <HAL_GetTick>
 8009092:	4602      	mov	r2, r0
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	2b02      	cmp	r3, #2
 800909a:	d901      	bls.n	80090a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e255      	b.n	800954c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80090a0:	4b65      	ldr	r3, [pc, #404]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0f0      	beq.n	800908e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090ac:	4b62      	ldr	r3, [pc, #392]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	061b      	lsls	r3, r3, #24
 80090ba:	495f      	ldr	r1, [pc, #380]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 80090bc:	4313      	orrs	r3, r2
 80090be:	604b      	str	r3, [r1, #4]
 80090c0:	e018      	b.n	80090f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090c2:	4b5d      	ldr	r3, [pc, #372]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a5c      	ldr	r2, [pc, #368]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 80090c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ce:	f7fb fb95 	bl	80047fc <HAL_GetTick>
 80090d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80090d4:	e008      	b.n	80090e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090d6:	f7fb fb91 	bl	80047fc <HAL_GetTick>
 80090da:	4602      	mov	r2, r0
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	1ad3      	subs	r3, r2, r3
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d901      	bls.n	80090e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80090e4:	2303      	movs	r3, #3
 80090e6:	e231      	b.n	800954c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80090e8:	4b53      	ldr	r3, [pc, #332]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1f0      	bne.n	80090d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 0308 	and.w	r3, r3, #8
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d03c      	beq.n	800917a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	695b      	ldr	r3, [r3, #20]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d01c      	beq.n	8009142 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009108:	4b4b      	ldr	r3, [pc, #300]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 800910a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800910e:	4a4a      	ldr	r2, [pc, #296]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 8009110:	f043 0301 	orr.w	r3, r3, #1
 8009114:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009118:	f7fb fb70 	bl	80047fc <HAL_GetTick>
 800911c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800911e:	e008      	b.n	8009132 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009120:	f7fb fb6c 	bl	80047fc <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	2b02      	cmp	r3, #2
 800912c:	d901      	bls.n	8009132 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800912e:	2303      	movs	r3, #3
 8009130:	e20c      	b.n	800954c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009132:	4b41      	ldr	r3, [pc, #260]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 8009134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009138:	f003 0302 	and.w	r3, r3, #2
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0ef      	beq.n	8009120 <HAL_RCC_OscConfig+0x3ec>
 8009140:	e01b      	b.n	800917a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009142:	4b3d      	ldr	r3, [pc, #244]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 8009144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009148:	4a3b      	ldr	r2, [pc, #236]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 800914a:	f023 0301 	bic.w	r3, r3, #1
 800914e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009152:	f7fb fb53 	bl	80047fc <HAL_GetTick>
 8009156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009158:	e008      	b.n	800916c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800915a:	f7fb fb4f 	bl	80047fc <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	2b02      	cmp	r3, #2
 8009166:	d901      	bls.n	800916c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	e1ef      	b.n	800954c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800916c:	4b32      	ldr	r3, [pc, #200]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 800916e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1ef      	bne.n	800915a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0304 	and.w	r3, r3, #4
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 80a6 	beq.w	80092d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009188:	2300      	movs	r3, #0
 800918a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800918c:	4b2a      	ldr	r3, [pc, #168]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 800918e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10d      	bne.n	80091b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009198:	4b27      	ldr	r3, [pc, #156]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 800919a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800919c:	4a26      	ldr	r2, [pc, #152]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 800919e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091a2:	6593      	str	r3, [r2, #88]	; 0x58
 80091a4:	4b24      	ldr	r3, [pc, #144]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 80091a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ac:	60bb      	str	r3, [r7, #8]
 80091ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091b0:	2301      	movs	r3, #1
 80091b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80091b4:	4b21      	ldr	r3, [pc, #132]	; (800923c <HAL_RCC_OscConfig+0x508>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d118      	bne.n	80091f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091c0:	4b1e      	ldr	r3, [pc, #120]	; (800923c <HAL_RCC_OscConfig+0x508>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a1d      	ldr	r2, [pc, #116]	; (800923c <HAL_RCC_OscConfig+0x508>)
 80091c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80091cc:	f7fb fb16 	bl	80047fc <HAL_GetTick>
 80091d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80091d2:	e008      	b.n	80091e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091d4:	f7fb fb12 	bl	80047fc <HAL_GetTick>
 80091d8:	4602      	mov	r2, r0
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d901      	bls.n	80091e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e1b2      	b.n	800954c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80091e6:	4b15      	ldr	r3, [pc, #84]	; (800923c <HAL_RCC_OscConfig+0x508>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0f0      	beq.n	80091d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d108      	bne.n	800920c <HAL_RCC_OscConfig+0x4d8>
 80091fa:	4b0f      	ldr	r3, [pc, #60]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 80091fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009200:	4a0d      	ldr	r2, [pc, #52]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 8009202:	f043 0301 	orr.w	r3, r3, #1
 8009206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800920a:	e029      	b.n	8009260 <HAL_RCC_OscConfig+0x52c>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	2b05      	cmp	r3, #5
 8009212:	d115      	bne.n	8009240 <HAL_RCC_OscConfig+0x50c>
 8009214:	4b08      	ldr	r3, [pc, #32]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 8009216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800921a:	4a07      	ldr	r2, [pc, #28]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 800921c:	f043 0304 	orr.w	r3, r3, #4
 8009220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009224:	4b04      	ldr	r3, [pc, #16]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 8009226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800922a:	4a03      	ldr	r2, [pc, #12]	; (8009238 <HAL_RCC_OscConfig+0x504>)
 800922c:	f043 0301 	orr.w	r3, r3, #1
 8009230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009234:	e014      	b.n	8009260 <HAL_RCC_OscConfig+0x52c>
 8009236:	bf00      	nop
 8009238:	40021000 	.word	0x40021000
 800923c:	40007000 	.word	0x40007000
 8009240:	4b9a      	ldr	r3, [pc, #616]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 8009242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009246:	4a99      	ldr	r2, [pc, #612]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 8009248:	f023 0301 	bic.w	r3, r3, #1
 800924c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009250:	4b96      	ldr	r3, [pc, #600]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 8009252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009256:	4a95      	ldr	r2, [pc, #596]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 8009258:	f023 0304 	bic.w	r3, r3, #4
 800925c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d016      	beq.n	8009296 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009268:	f7fb fac8 	bl	80047fc <HAL_GetTick>
 800926c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800926e:	e00a      	b.n	8009286 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009270:	f7fb fac4 	bl	80047fc <HAL_GetTick>
 8009274:	4602      	mov	r2, r0
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	f241 3288 	movw	r2, #5000	; 0x1388
 800927e:	4293      	cmp	r3, r2
 8009280:	d901      	bls.n	8009286 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009282:	2303      	movs	r3, #3
 8009284:	e162      	b.n	800954c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009286:	4b89      	ldr	r3, [pc, #548]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 8009288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d0ed      	beq.n	8009270 <HAL_RCC_OscConfig+0x53c>
 8009294:	e015      	b.n	80092c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009296:	f7fb fab1 	bl	80047fc <HAL_GetTick>
 800929a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800929c:	e00a      	b.n	80092b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800929e:	f7fb faad 	bl	80047fc <HAL_GetTick>
 80092a2:	4602      	mov	r2, r0
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d901      	bls.n	80092b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e14b      	b.n	800954c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80092b4:	4b7d      	ldr	r3, [pc, #500]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 80092b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ba:	f003 0302 	and.w	r3, r3, #2
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1ed      	bne.n	800929e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80092c2:	7ffb      	ldrb	r3, [r7, #31]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d105      	bne.n	80092d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092c8:	4b78      	ldr	r3, [pc, #480]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 80092ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092cc:	4a77      	ldr	r2, [pc, #476]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 80092ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0320 	and.w	r3, r3, #32
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d03c      	beq.n	800935a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d01c      	beq.n	8009322 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80092e8:	4b70      	ldr	r3, [pc, #448]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 80092ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092ee:	4a6f      	ldr	r2, [pc, #444]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 80092f0:	f043 0301 	orr.w	r3, r3, #1
 80092f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092f8:	f7fb fa80 	bl	80047fc <HAL_GetTick>
 80092fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80092fe:	e008      	b.n	8009312 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009300:	f7fb fa7c 	bl	80047fc <HAL_GetTick>
 8009304:	4602      	mov	r2, r0
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	2b02      	cmp	r3, #2
 800930c:	d901      	bls.n	8009312 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800930e:	2303      	movs	r3, #3
 8009310:	e11c      	b.n	800954c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009312:	4b66      	ldr	r3, [pc, #408]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 8009314:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	2b00      	cmp	r3, #0
 800931e:	d0ef      	beq.n	8009300 <HAL_RCC_OscConfig+0x5cc>
 8009320:	e01b      	b.n	800935a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009322:	4b62      	ldr	r3, [pc, #392]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 8009324:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009328:	4a60      	ldr	r2, [pc, #384]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 800932a:	f023 0301 	bic.w	r3, r3, #1
 800932e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009332:	f7fb fa63 	bl	80047fc <HAL_GetTick>
 8009336:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009338:	e008      	b.n	800934c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800933a:	f7fb fa5f 	bl	80047fc <HAL_GetTick>
 800933e:	4602      	mov	r2, r0
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	2b02      	cmp	r3, #2
 8009346:	d901      	bls.n	800934c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8009348:	2303      	movs	r3, #3
 800934a:	e0ff      	b.n	800954c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800934c:	4b57      	ldr	r3, [pc, #348]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 800934e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1ef      	bne.n	800933a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935e:	2b00      	cmp	r3, #0
 8009360:	f000 80f3 	beq.w	800954a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009368:	2b02      	cmp	r3, #2
 800936a:	f040 80c9 	bne.w	8009500 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800936e:	4b4f      	ldr	r3, [pc, #316]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	f003 0203 	and.w	r2, r3, #3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937e:	429a      	cmp	r2, r3
 8009380:	d12c      	bne.n	80093dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800938c:	3b01      	subs	r3, #1
 800938e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009390:	429a      	cmp	r2, r3
 8009392:	d123      	bne.n	80093dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800939e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d11b      	bne.n	80093dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d113      	bne.n	80093dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093be:	085b      	lsrs	r3, r3, #1
 80093c0:	3b01      	subs	r3, #1
 80093c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d109      	bne.n	80093dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d2:	085b      	lsrs	r3, r3, #1
 80093d4:	3b01      	subs	r3, #1
 80093d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80093d8:	429a      	cmp	r2, r3
 80093da:	d06b      	beq.n	80094b4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	2b0c      	cmp	r3, #12
 80093e0:	d062      	beq.n	80094a8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80093e2:	4b32      	ldr	r3, [pc, #200]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e0ac      	b.n	800954c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80093f2:	4b2e      	ldr	r3, [pc, #184]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a2d      	ldr	r2, [pc, #180]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 80093f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80093fe:	f7fb f9fd 	bl	80047fc <HAL_GetTick>
 8009402:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009404:	e008      	b.n	8009418 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009406:	f7fb f9f9 	bl	80047fc <HAL_GetTick>
 800940a:	4602      	mov	r2, r0
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	2b02      	cmp	r3, #2
 8009412:	d901      	bls.n	8009418 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	e099      	b.n	800954c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009418:	4b24      	ldr	r3, [pc, #144]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1f0      	bne.n	8009406 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009424:	4b21      	ldr	r3, [pc, #132]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 8009426:	68da      	ldr	r2, [r3, #12]
 8009428:	4b21      	ldr	r3, [pc, #132]	; (80094b0 <HAL_RCC_OscConfig+0x77c>)
 800942a:	4013      	ands	r3, r2
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009434:	3a01      	subs	r2, #1
 8009436:	0112      	lsls	r2, r2, #4
 8009438:	4311      	orrs	r1, r2
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800943e:	0212      	lsls	r2, r2, #8
 8009440:	4311      	orrs	r1, r2
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009446:	0852      	lsrs	r2, r2, #1
 8009448:	3a01      	subs	r2, #1
 800944a:	0552      	lsls	r2, r2, #21
 800944c:	4311      	orrs	r1, r2
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009452:	0852      	lsrs	r2, r2, #1
 8009454:	3a01      	subs	r2, #1
 8009456:	0652      	lsls	r2, r2, #25
 8009458:	4311      	orrs	r1, r2
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800945e:	06d2      	lsls	r2, r2, #27
 8009460:	430a      	orrs	r2, r1
 8009462:	4912      	ldr	r1, [pc, #72]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 8009464:	4313      	orrs	r3, r2
 8009466:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009468:	4b10      	ldr	r3, [pc, #64]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a0f      	ldr	r2, [pc, #60]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 800946e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009472:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009474:	4b0d      	ldr	r3, [pc, #52]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	4a0c      	ldr	r2, [pc, #48]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 800947a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800947e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009480:	f7fb f9bc 	bl	80047fc <HAL_GetTick>
 8009484:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009486:	e008      	b.n	800949a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009488:	f7fb f9b8 	bl	80047fc <HAL_GetTick>
 800948c:	4602      	mov	r2, r0
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	2b02      	cmp	r3, #2
 8009494:	d901      	bls.n	800949a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8009496:	2303      	movs	r3, #3
 8009498:	e058      	b.n	800954c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800949a:	4b04      	ldr	r3, [pc, #16]	; (80094ac <HAL_RCC_OscConfig+0x778>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0f0      	beq.n	8009488 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80094a6:	e050      	b.n	800954a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e04f      	b.n	800954c <HAL_RCC_OscConfig+0x818>
 80094ac:	40021000 	.word	0x40021000
 80094b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80094b4:	4b27      	ldr	r3, [pc, #156]	; (8009554 <HAL_RCC_OscConfig+0x820>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d144      	bne.n	800954a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80094c0:	4b24      	ldr	r3, [pc, #144]	; (8009554 <HAL_RCC_OscConfig+0x820>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a23      	ldr	r2, [pc, #140]	; (8009554 <HAL_RCC_OscConfig+0x820>)
 80094c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80094cc:	4b21      	ldr	r3, [pc, #132]	; (8009554 <HAL_RCC_OscConfig+0x820>)
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	4a20      	ldr	r2, [pc, #128]	; (8009554 <HAL_RCC_OscConfig+0x820>)
 80094d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80094d8:	f7fb f990 	bl	80047fc <HAL_GetTick>
 80094dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80094de:	e008      	b.n	80094f2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094e0:	f7fb f98c 	bl	80047fc <HAL_GetTick>
 80094e4:	4602      	mov	r2, r0
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d901      	bls.n	80094f2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e02c      	b.n	800954c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80094f2:	4b18      	ldr	r3, [pc, #96]	; (8009554 <HAL_RCC_OscConfig+0x820>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d0f0      	beq.n	80094e0 <HAL_RCC_OscConfig+0x7ac>
 80094fe:	e024      	b.n	800954a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	2b0c      	cmp	r3, #12
 8009504:	d01f      	beq.n	8009546 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009506:	4b13      	ldr	r3, [pc, #76]	; (8009554 <HAL_RCC_OscConfig+0x820>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a12      	ldr	r2, [pc, #72]	; (8009554 <HAL_RCC_OscConfig+0x820>)
 800950c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009512:	f7fb f973 	bl	80047fc <HAL_GetTick>
 8009516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009518:	e008      	b.n	800952c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800951a:	f7fb f96f 	bl	80047fc <HAL_GetTick>
 800951e:	4602      	mov	r2, r0
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	2b02      	cmp	r3, #2
 8009526:	d901      	bls.n	800952c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	e00f      	b.n	800954c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800952c:	4b09      	ldr	r3, [pc, #36]	; (8009554 <HAL_RCC_OscConfig+0x820>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1f0      	bne.n	800951a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8009538:	4b06      	ldr	r3, [pc, #24]	; (8009554 <HAL_RCC_OscConfig+0x820>)
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	4905      	ldr	r1, [pc, #20]	; (8009554 <HAL_RCC_OscConfig+0x820>)
 800953e:	4b06      	ldr	r3, [pc, #24]	; (8009558 <HAL_RCC_OscConfig+0x824>)
 8009540:	4013      	ands	r3, r2
 8009542:	60cb      	str	r3, [r1, #12]
 8009544:	e001      	b.n	800954a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e000      	b.n	800954c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3720      	adds	r7, #32
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	40021000 	.word	0x40021000
 8009558:	feeefffc 	.word	0xfeeefffc

0800955c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d101      	bne.n	8009570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e0e7      	b.n	8009740 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009570:	4b75      	ldr	r3, [pc, #468]	; (8009748 <HAL_RCC_ClockConfig+0x1ec>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0307 	and.w	r3, r3, #7
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	429a      	cmp	r2, r3
 800957c:	d910      	bls.n	80095a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800957e:	4b72      	ldr	r3, [pc, #456]	; (8009748 <HAL_RCC_ClockConfig+0x1ec>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f023 0207 	bic.w	r2, r3, #7
 8009586:	4970      	ldr	r1, [pc, #448]	; (8009748 <HAL_RCC_ClockConfig+0x1ec>)
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	4313      	orrs	r3, r2
 800958c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800958e:	4b6e      	ldr	r3, [pc, #440]	; (8009748 <HAL_RCC_ClockConfig+0x1ec>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 0307 	and.w	r3, r3, #7
 8009596:	683a      	ldr	r2, [r7, #0]
 8009598:	429a      	cmp	r2, r3
 800959a:	d001      	beq.n	80095a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e0cf      	b.n	8009740 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 0302 	and.w	r3, r3, #2
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d010      	beq.n	80095ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	689a      	ldr	r2, [r3, #8]
 80095b0:	4b66      	ldr	r3, [pc, #408]	; (800974c <HAL_RCC_ClockConfig+0x1f0>)
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d908      	bls.n	80095ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095bc:	4b63      	ldr	r3, [pc, #396]	; (800974c <HAL_RCC_ClockConfig+0x1f0>)
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	4960      	ldr	r1, [pc, #384]	; (800974c <HAL_RCC_ClockConfig+0x1f0>)
 80095ca:	4313      	orrs	r3, r2
 80095cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 0301 	and.w	r3, r3, #1
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d04c      	beq.n	8009674 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	2b03      	cmp	r3, #3
 80095e0:	d107      	bne.n	80095f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095e2:	4b5a      	ldr	r3, [pc, #360]	; (800974c <HAL_RCC_ClockConfig+0x1f0>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d121      	bne.n	8009632 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e0a6      	b.n	8009740 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d107      	bne.n	800960a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80095fa:	4b54      	ldr	r3, [pc, #336]	; (800974c <HAL_RCC_ClockConfig+0x1f0>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009602:	2b00      	cmp	r3, #0
 8009604:	d115      	bne.n	8009632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e09a      	b.n	8009740 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d107      	bne.n	8009622 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009612:	4b4e      	ldr	r3, [pc, #312]	; (800974c <HAL_RCC_ClockConfig+0x1f0>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 0302 	and.w	r3, r3, #2
 800961a:	2b00      	cmp	r3, #0
 800961c:	d109      	bne.n	8009632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e08e      	b.n	8009740 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009622:	4b4a      	ldr	r3, [pc, #296]	; (800974c <HAL_RCC_ClockConfig+0x1f0>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	e086      	b.n	8009740 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009632:	4b46      	ldr	r3, [pc, #280]	; (800974c <HAL_RCC_ClockConfig+0x1f0>)
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	f023 0203 	bic.w	r2, r3, #3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	4943      	ldr	r1, [pc, #268]	; (800974c <HAL_RCC_ClockConfig+0x1f0>)
 8009640:	4313      	orrs	r3, r2
 8009642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009644:	f7fb f8da 	bl	80047fc <HAL_GetTick>
 8009648:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800964a:	e00a      	b.n	8009662 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800964c:	f7fb f8d6 	bl	80047fc <HAL_GetTick>
 8009650:	4602      	mov	r2, r0
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	f241 3288 	movw	r2, #5000	; 0x1388
 800965a:	4293      	cmp	r3, r2
 800965c:	d901      	bls.n	8009662 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800965e:	2303      	movs	r3, #3
 8009660:	e06e      	b.n	8009740 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009662:	4b3a      	ldr	r3, [pc, #232]	; (800974c <HAL_RCC_ClockConfig+0x1f0>)
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	f003 020c 	and.w	r2, r3, #12
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	429a      	cmp	r2, r3
 8009672:	d1eb      	bne.n	800964c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	d010      	beq.n	80096a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	4b31      	ldr	r3, [pc, #196]	; (800974c <HAL_RCC_ClockConfig+0x1f0>)
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800968c:	429a      	cmp	r2, r3
 800968e:	d208      	bcs.n	80096a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009690:	4b2e      	ldr	r3, [pc, #184]	; (800974c <HAL_RCC_ClockConfig+0x1f0>)
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	492b      	ldr	r1, [pc, #172]	; (800974c <HAL_RCC_ClockConfig+0x1f0>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80096a2:	4b29      	ldr	r3, [pc, #164]	; (8009748 <HAL_RCC_ClockConfig+0x1ec>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 0307 	and.w	r3, r3, #7
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d210      	bcs.n	80096d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096b0:	4b25      	ldr	r3, [pc, #148]	; (8009748 <HAL_RCC_ClockConfig+0x1ec>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f023 0207 	bic.w	r2, r3, #7
 80096b8:	4923      	ldr	r1, [pc, #140]	; (8009748 <HAL_RCC_ClockConfig+0x1ec>)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	4313      	orrs	r3, r2
 80096be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80096c0:	4b21      	ldr	r3, [pc, #132]	; (8009748 <HAL_RCC_ClockConfig+0x1ec>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0307 	and.w	r3, r3, #7
 80096c8:	683a      	ldr	r2, [r7, #0]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d001      	beq.n	80096d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e036      	b.n	8009740 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f003 0304 	and.w	r3, r3, #4
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d008      	beq.n	80096f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80096de:	4b1b      	ldr	r3, [pc, #108]	; (800974c <HAL_RCC_ClockConfig+0x1f0>)
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	4918      	ldr	r1, [pc, #96]	; (800974c <HAL_RCC_ClockConfig+0x1f0>)
 80096ec:	4313      	orrs	r3, r2
 80096ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 0308 	and.w	r3, r3, #8
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d009      	beq.n	8009710 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80096fc:	4b13      	ldr	r3, [pc, #76]	; (800974c <HAL_RCC_ClockConfig+0x1f0>)
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	00db      	lsls	r3, r3, #3
 800970a:	4910      	ldr	r1, [pc, #64]	; (800974c <HAL_RCC_ClockConfig+0x1f0>)
 800970c:	4313      	orrs	r3, r2
 800970e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009710:	f000 f824 	bl	800975c <HAL_RCC_GetSysClockFreq>
 8009714:	4602      	mov	r2, r0
 8009716:	4b0d      	ldr	r3, [pc, #52]	; (800974c <HAL_RCC_ClockConfig+0x1f0>)
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	091b      	lsrs	r3, r3, #4
 800971c:	f003 030f 	and.w	r3, r3, #15
 8009720:	490b      	ldr	r1, [pc, #44]	; (8009750 <HAL_RCC_ClockConfig+0x1f4>)
 8009722:	5ccb      	ldrb	r3, [r1, r3]
 8009724:	f003 031f 	and.w	r3, r3, #31
 8009728:	fa22 f303 	lsr.w	r3, r2, r3
 800972c:	4a09      	ldr	r2, [pc, #36]	; (8009754 <HAL_RCC_ClockConfig+0x1f8>)
 800972e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009730:	4b09      	ldr	r3, [pc, #36]	; (8009758 <HAL_RCC_ClockConfig+0x1fc>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4618      	mov	r0, r3
 8009736:	f7fb f811 	bl	800475c <HAL_InitTick>
 800973a:	4603      	mov	r3, r0
 800973c:	72fb      	strb	r3, [r7, #11]

  return status;
 800973e:	7afb      	ldrb	r3, [r7, #11]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	40022000 	.word	0x40022000
 800974c:	40021000 	.word	0x40021000
 8009750:	08018ac8 	.word	0x08018ac8
 8009754:	20000020 	.word	0x20000020
 8009758:	20000024 	.word	0x20000024

0800975c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800975c:	b480      	push	{r7}
 800975e:	b089      	sub	sp, #36	; 0x24
 8009760:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009762:	2300      	movs	r3, #0
 8009764:	61fb      	str	r3, [r7, #28]
 8009766:	2300      	movs	r3, #0
 8009768:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800976a:	4b3e      	ldr	r3, [pc, #248]	; (8009864 <HAL_RCC_GetSysClockFreq+0x108>)
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f003 030c 	and.w	r3, r3, #12
 8009772:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009774:	4b3b      	ldr	r3, [pc, #236]	; (8009864 <HAL_RCC_GetSysClockFreq+0x108>)
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	f003 0303 	and.w	r3, r3, #3
 800977c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d005      	beq.n	8009790 <HAL_RCC_GetSysClockFreq+0x34>
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	2b0c      	cmp	r3, #12
 8009788:	d121      	bne.n	80097ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d11e      	bne.n	80097ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009790:	4b34      	ldr	r3, [pc, #208]	; (8009864 <HAL_RCC_GetSysClockFreq+0x108>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 0308 	and.w	r3, r3, #8
 8009798:	2b00      	cmp	r3, #0
 800979a:	d107      	bne.n	80097ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800979c:	4b31      	ldr	r3, [pc, #196]	; (8009864 <HAL_RCC_GetSysClockFreq+0x108>)
 800979e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097a2:	0a1b      	lsrs	r3, r3, #8
 80097a4:	f003 030f 	and.w	r3, r3, #15
 80097a8:	61fb      	str	r3, [r7, #28]
 80097aa:	e005      	b.n	80097b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80097ac:	4b2d      	ldr	r3, [pc, #180]	; (8009864 <HAL_RCC_GetSysClockFreq+0x108>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	091b      	lsrs	r3, r3, #4
 80097b2:	f003 030f 	and.w	r3, r3, #15
 80097b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80097b8:	4a2b      	ldr	r2, [pc, #172]	; (8009868 <HAL_RCC_GetSysClockFreq+0x10c>)
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10d      	bne.n	80097e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80097cc:	e00a      	b.n	80097e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	2b04      	cmp	r3, #4
 80097d2:	d102      	bne.n	80097da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80097d4:	4b25      	ldr	r3, [pc, #148]	; (800986c <HAL_RCC_GetSysClockFreq+0x110>)
 80097d6:	61bb      	str	r3, [r7, #24]
 80097d8:	e004      	b.n	80097e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	2b08      	cmp	r3, #8
 80097de:	d101      	bne.n	80097e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80097e0:	4b23      	ldr	r3, [pc, #140]	; (8009870 <HAL_RCC_GetSysClockFreq+0x114>)
 80097e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	2b0c      	cmp	r3, #12
 80097e8:	d134      	bne.n	8009854 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80097ea:	4b1e      	ldr	r3, [pc, #120]	; (8009864 <HAL_RCC_GetSysClockFreq+0x108>)
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	f003 0303 	and.w	r3, r3, #3
 80097f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d003      	beq.n	8009802 <HAL_RCC_GetSysClockFreq+0xa6>
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	2b03      	cmp	r3, #3
 80097fe:	d003      	beq.n	8009808 <HAL_RCC_GetSysClockFreq+0xac>
 8009800:	e005      	b.n	800980e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009802:	4b1a      	ldr	r3, [pc, #104]	; (800986c <HAL_RCC_GetSysClockFreq+0x110>)
 8009804:	617b      	str	r3, [r7, #20]
      break;
 8009806:	e005      	b.n	8009814 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009808:	4b19      	ldr	r3, [pc, #100]	; (8009870 <HAL_RCC_GetSysClockFreq+0x114>)
 800980a:	617b      	str	r3, [r7, #20]
      break;
 800980c:	e002      	b.n	8009814 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	617b      	str	r3, [r7, #20]
      break;
 8009812:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009814:	4b13      	ldr	r3, [pc, #76]	; (8009864 <HAL_RCC_GetSysClockFreq+0x108>)
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	091b      	lsrs	r3, r3, #4
 800981a:	f003 0307 	and.w	r3, r3, #7
 800981e:	3301      	adds	r3, #1
 8009820:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009822:	4b10      	ldr	r3, [pc, #64]	; (8009864 <HAL_RCC_GetSysClockFreq+0x108>)
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	0a1b      	lsrs	r3, r3, #8
 8009828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	fb03 f202 	mul.w	r2, r3, r2
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	fbb2 f3f3 	udiv	r3, r2, r3
 8009838:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800983a:	4b0a      	ldr	r3, [pc, #40]	; (8009864 <HAL_RCC_GetSysClockFreq+0x108>)
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	0e5b      	lsrs	r3, r3, #25
 8009840:	f003 0303 	and.w	r3, r3, #3
 8009844:	3301      	adds	r3, #1
 8009846:	005b      	lsls	r3, r3, #1
 8009848:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009852:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009854:	69bb      	ldr	r3, [r7, #24]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3724      	adds	r7, #36	; 0x24
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	40021000 	.word	0x40021000
 8009868:	08018ae0 	.word	0x08018ae0
 800986c:	00f42400 	.word	0x00f42400
 8009870:	007a1200 	.word	0x007a1200

08009874 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009874:	b480      	push	{r7}
 8009876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009878:	4b03      	ldr	r3, [pc, #12]	; (8009888 <HAL_RCC_GetHCLKFreq+0x14>)
 800987a:	681b      	ldr	r3, [r3, #0]
}
 800987c:	4618      	mov	r0, r3
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	20000020 	.word	0x20000020

0800988c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009890:	f7ff fff0 	bl	8009874 <HAL_RCC_GetHCLKFreq>
 8009894:	4602      	mov	r2, r0
 8009896:	4b06      	ldr	r3, [pc, #24]	; (80098b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	0a1b      	lsrs	r3, r3, #8
 800989c:	f003 0307 	and.w	r3, r3, #7
 80098a0:	4904      	ldr	r1, [pc, #16]	; (80098b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80098a2:	5ccb      	ldrb	r3, [r1, r3]
 80098a4:	f003 031f 	and.w	r3, r3, #31
 80098a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	40021000 	.word	0x40021000
 80098b4:	08018ad8 	.word	0x08018ad8

080098b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80098bc:	f7ff ffda 	bl	8009874 <HAL_RCC_GetHCLKFreq>
 80098c0:	4602      	mov	r2, r0
 80098c2:	4b06      	ldr	r3, [pc, #24]	; (80098dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	0adb      	lsrs	r3, r3, #11
 80098c8:	f003 0307 	and.w	r3, r3, #7
 80098cc:	4904      	ldr	r1, [pc, #16]	; (80098e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80098ce:	5ccb      	ldrb	r3, [r1, r3]
 80098d0:	f003 031f 	and.w	r3, r3, #31
 80098d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098d8:	4618      	mov	r0, r3
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	40021000 	.word	0x40021000
 80098e0:	08018ad8 	.word	0x08018ad8

080098e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b086      	sub	sp, #24
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80098ec:	2300      	movs	r3, #0
 80098ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80098f0:	4b2a      	ldr	r3, [pc, #168]	; (800999c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80098f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d003      	beq.n	8009904 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80098fc:	f7ff f9a6 	bl	8008c4c <HAL_PWREx_GetVoltageRange>
 8009900:	6178      	str	r0, [r7, #20]
 8009902:	e014      	b.n	800992e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009904:	4b25      	ldr	r3, [pc, #148]	; (800999c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009908:	4a24      	ldr	r2, [pc, #144]	; (800999c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800990a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800990e:	6593      	str	r3, [r2, #88]	; 0x58
 8009910:	4b22      	ldr	r3, [pc, #136]	; (800999c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009918:	60fb      	str	r3, [r7, #12]
 800991a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800991c:	f7ff f996 	bl	8008c4c <HAL_PWREx_GetVoltageRange>
 8009920:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009922:	4b1e      	ldr	r3, [pc, #120]	; (800999c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009926:	4a1d      	ldr	r2, [pc, #116]	; (800999c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800992c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009934:	d10b      	bne.n	800994e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2b80      	cmp	r3, #128	; 0x80
 800993a:	d919      	bls.n	8009970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2ba0      	cmp	r3, #160	; 0xa0
 8009940:	d902      	bls.n	8009948 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009942:	2302      	movs	r3, #2
 8009944:	613b      	str	r3, [r7, #16]
 8009946:	e013      	b.n	8009970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009948:	2301      	movs	r3, #1
 800994a:	613b      	str	r3, [r7, #16]
 800994c:	e010      	b.n	8009970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2b80      	cmp	r3, #128	; 0x80
 8009952:	d902      	bls.n	800995a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009954:	2303      	movs	r3, #3
 8009956:	613b      	str	r3, [r7, #16]
 8009958:	e00a      	b.n	8009970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2b80      	cmp	r3, #128	; 0x80
 800995e:	d102      	bne.n	8009966 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009960:	2302      	movs	r3, #2
 8009962:	613b      	str	r3, [r7, #16]
 8009964:	e004      	b.n	8009970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b70      	cmp	r3, #112	; 0x70
 800996a:	d101      	bne.n	8009970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800996c:	2301      	movs	r3, #1
 800996e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009970:	4b0b      	ldr	r3, [pc, #44]	; (80099a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f023 0207 	bic.w	r2, r3, #7
 8009978:	4909      	ldr	r1, [pc, #36]	; (80099a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	4313      	orrs	r3, r2
 800997e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009980:	4b07      	ldr	r3, [pc, #28]	; (80099a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 0307 	and.w	r3, r3, #7
 8009988:	693a      	ldr	r2, [r7, #16]
 800998a:	429a      	cmp	r2, r3
 800998c:	d001      	beq.n	8009992 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	e000      	b.n	8009994 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3718      	adds	r7, #24
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	40021000 	.word	0x40021000
 80099a0:	40022000 	.word	0x40022000

080099a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80099ac:	2300      	movs	r3, #0
 80099ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80099b0:	2300      	movs	r3, #0
 80099b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d031      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80099c8:	d01a      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80099ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80099ce:	d814      	bhi.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d009      	beq.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80099d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80099d8:	d10f      	bne.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80099da:	4b5d      	ldr	r3, [pc, #372]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	4a5c      	ldr	r2, [pc, #368]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80099e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80099e6:	e00c      	b.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	3304      	adds	r3, #4
 80099ec:	2100      	movs	r1, #0
 80099ee:	4618      	mov	r0, r3
 80099f0:	f000 f9ce 	bl	8009d90 <RCCEx_PLLSAI1_Config>
 80099f4:	4603      	mov	r3, r0
 80099f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80099f8:	e003      	b.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	74fb      	strb	r3, [r7, #19]
      break;
 80099fe:	e000      	b.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8009a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a02:	7cfb      	ldrb	r3, [r7, #19]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d10b      	bne.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009a08:	4b51      	ldr	r3, [pc, #324]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a16:	494e      	ldr	r1, [pc, #312]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009a1e:	e001      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a20:	7cfb      	ldrb	r3, [r7, #19]
 8009a22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f000 809e 	beq.w	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a32:	2300      	movs	r3, #0
 8009a34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009a36:	4b46      	ldr	r3, [pc, #280]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d101      	bne.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8009a42:	2301      	movs	r3, #1
 8009a44:	e000      	b.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8009a46:	2300      	movs	r3, #0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00d      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a4c:	4b40      	ldr	r3, [pc, #256]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a50:	4a3f      	ldr	r2, [pc, #252]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a56:	6593      	str	r3, [r2, #88]	; 0x58
 8009a58:	4b3d      	ldr	r3, [pc, #244]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a60:	60bb      	str	r3, [r7, #8]
 8009a62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a64:	2301      	movs	r3, #1
 8009a66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a68:	4b3a      	ldr	r3, [pc, #232]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a39      	ldr	r2, [pc, #228]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a74:	f7fa fec2 	bl	80047fc <HAL_GetTick>
 8009a78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009a7a:	e009      	b.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a7c:	f7fa febe 	bl	80047fc <HAL_GetTick>
 8009a80:	4602      	mov	r2, r0
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d902      	bls.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	74fb      	strb	r3, [r7, #19]
        break;
 8009a8e:	e005      	b.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009a90:	4b30      	ldr	r3, [pc, #192]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d0ef      	beq.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8009a9c:	7cfb      	ldrb	r3, [r7, #19]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d15a      	bne.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009aa2:	4b2b      	ldr	r3, [pc, #172]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009aac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d01e      	beq.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ab8:	697a      	ldr	r2, [r7, #20]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d019      	beq.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009abe:	4b24      	ldr	r3, [pc, #144]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ac8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009aca:	4b21      	ldr	r3, [pc, #132]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ad0:	4a1f      	ldr	r2, [pc, #124]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ada:	4b1d      	ldr	r3, [pc, #116]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ae0:	4a1b      	ldr	r2, [pc, #108]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009aea:	4a19      	ldr	r2, [pc, #100]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f003 0301 	and.w	r3, r3, #1
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d016      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009afc:	f7fa fe7e 	bl	80047fc <HAL_GetTick>
 8009b00:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b02:	e00b      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b04:	f7fa fe7a 	bl	80047fc <HAL_GetTick>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d902      	bls.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8009b16:	2303      	movs	r3, #3
 8009b18:	74fb      	strb	r3, [r7, #19]
            break;
 8009b1a:	e006      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b1c:	4b0c      	ldr	r3, [pc, #48]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b22:	f003 0302 	and.w	r3, r3, #2
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d0ec      	beq.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8009b2a:	7cfb      	ldrb	r3, [r7, #19]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10b      	bne.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b30:	4b07      	ldr	r3, [pc, #28]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b3e:	4904      	ldr	r1, [pc, #16]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009b40:	4313      	orrs	r3, r2
 8009b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009b46:	e009      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b48:	7cfb      	ldrb	r3, [r7, #19]
 8009b4a:	74bb      	strb	r3, [r7, #18]
 8009b4c:	e006      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8009b4e:	bf00      	nop
 8009b50:	40021000 	.word	0x40021000
 8009b54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b58:	7cfb      	ldrb	r3, [r7, #19]
 8009b5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b5c:	7c7b      	ldrb	r3, [r7, #17]
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d105      	bne.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b62:	4b8a      	ldr	r3, [pc, #552]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b66:	4a89      	ldr	r2, [pc, #548]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f003 0301 	and.w	r3, r3, #1
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00a      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009b7a:	4b84      	ldr	r3, [pc, #528]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b80:	f023 0203 	bic.w	r2, r3, #3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a1b      	ldr	r3, [r3, #32]
 8009b88:	4980      	ldr	r1, [pc, #512]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 0302 	and.w	r3, r3, #2
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00a      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009b9c:	4b7b      	ldr	r3, [pc, #492]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ba2:	f023 020c 	bic.w	r2, r3, #12
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009baa:	4978      	ldr	r1, [pc, #480]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009bac:	4313      	orrs	r3, r2
 8009bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 0320 	and.w	r3, r3, #32
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00a      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009bbe:	4b73      	ldr	r3, [pc, #460]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bcc:	496f      	ldr	r1, [pc, #444]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00a      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009be0:	4b6a      	ldr	r3, [pc, #424]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009be6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bee:	4967      	ldr	r1, [pc, #412]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00a      	beq.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c02:	4b62      	ldr	r3, [pc, #392]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c10:	495e      	ldr	r1, [pc, #376]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c12:	4313      	orrs	r3, r2
 8009c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00a      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009c24:	4b59      	ldr	r3, [pc, #356]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c32:	4956      	ldr	r1, [pc, #344]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c34:	4313      	orrs	r3, r2
 8009c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00a      	beq.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009c46:	4b51      	ldr	r3, [pc, #324]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c54:	494d      	ldr	r1, [pc, #308]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d028      	beq.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009c68:	4b48      	ldr	r3, [pc, #288]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c76:	4945      	ldr	r1, [pc, #276]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c86:	d106      	bne.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c88:	4b40      	ldr	r3, [pc, #256]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	4a3f      	ldr	r2, [pc, #252]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c92:	60d3      	str	r3, [r2, #12]
 8009c94:	e011      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c9e:	d10c      	bne.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	2101      	movs	r1, #1
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 f872 	bl	8009d90 <RCCEx_PLLSAI1_Config>
 8009cac:	4603      	mov	r3, r0
 8009cae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009cb0:	7cfb      	ldrb	r3, [r7, #19]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d001      	beq.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8009cb6:	7cfb      	ldrb	r3, [r7, #19]
 8009cb8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d028      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009cc6:	4b31      	ldr	r3, [pc, #196]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ccc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cd4:	492d      	ldr	r1, [pc, #180]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ce4:	d106      	bne.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ce6:	4b29      	ldr	r3, [pc, #164]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	4a28      	ldr	r2, [pc, #160]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009cec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cf0:	60d3      	str	r3, [r2, #12]
 8009cf2:	e011      	b.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cfc:	d10c      	bne.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	3304      	adds	r3, #4
 8009d02:	2101      	movs	r1, #1
 8009d04:	4618      	mov	r0, r3
 8009d06:	f000 f843 	bl	8009d90 <RCCEx_PLLSAI1_Config>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009d0e:	7cfb      	ldrb	r3, [r7, #19]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8009d14:	7cfb      	ldrb	r3, [r7, #19]
 8009d16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d01c      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d24:	4b19      	ldr	r3, [pc, #100]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d32:	4916      	ldr	r1, [pc, #88]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009d34:	4313      	orrs	r3, r2
 8009d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d42:	d10c      	bne.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	3304      	adds	r3, #4
 8009d48:	2102      	movs	r1, #2
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f000 f820 	bl	8009d90 <RCCEx_PLLSAI1_Config>
 8009d50:	4603      	mov	r3, r0
 8009d52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009d54:	7cfb      	ldrb	r3, [r7, #19]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8009d5a:	7cfb      	ldrb	r3, [r7, #19]
 8009d5c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00a      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009d6a:	4b08      	ldr	r3, [pc, #32]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d70:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d78:	4904      	ldr	r1, [pc, #16]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009d80:	7cbb      	ldrb	r3, [r7, #18]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3718      	adds	r7, #24
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	40021000 	.word	0x40021000

08009d90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009d9e:	4b74      	ldr	r3, [pc, #464]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	f003 0303 	and.w	r3, r3, #3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d018      	beq.n	8009ddc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009daa:	4b71      	ldr	r3, [pc, #452]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	f003 0203 	and.w	r2, r3, #3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d10d      	bne.n	8009dd6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
       ||
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d009      	beq.n	8009dd6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009dc2:	4b6b      	ldr	r3, [pc, #428]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	091b      	lsrs	r3, r3, #4
 8009dc8:	f003 0307 	and.w	r3, r3, #7
 8009dcc:	1c5a      	adds	r2, r3, #1
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
       ||
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d047      	beq.n	8009e66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	73fb      	strb	r3, [r7, #15]
 8009dda:	e044      	b.n	8009e66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2b03      	cmp	r3, #3
 8009de2:	d018      	beq.n	8009e16 <RCCEx_PLLSAI1_Config+0x86>
 8009de4:	2b03      	cmp	r3, #3
 8009de6:	d825      	bhi.n	8009e34 <RCCEx_PLLSAI1_Config+0xa4>
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d002      	beq.n	8009df2 <RCCEx_PLLSAI1_Config+0x62>
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d009      	beq.n	8009e04 <RCCEx_PLLSAI1_Config+0x74>
 8009df0:	e020      	b.n	8009e34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009df2:	4b5f      	ldr	r3, [pc, #380]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 0302 	and.w	r3, r3, #2
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d11d      	bne.n	8009e3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009e02:	e01a      	b.n	8009e3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009e04:	4b5a      	ldr	r3, [pc, #360]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d116      	bne.n	8009e3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009e14:	e013      	b.n	8009e3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009e16:	4b56      	ldr	r3, [pc, #344]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d10f      	bne.n	8009e42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009e22:	4b53      	ldr	r3, [pc, #332]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d109      	bne.n	8009e42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009e32:	e006      	b.n	8009e42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	73fb      	strb	r3, [r7, #15]
      break;
 8009e38:	e004      	b.n	8009e44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009e3a:	bf00      	nop
 8009e3c:	e002      	b.n	8009e44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009e3e:	bf00      	nop
 8009e40:	e000      	b.n	8009e44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009e42:	bf00      	nop
    }

    if(status == HAL_OK)
 8009e44:	7bfb      	ldrb	r3, [r7, #15]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10d      	bne.n	8009e66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009e4a:	4b49      	ldr	r3, [pc, #292]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6819      	ldr	r1, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	011b      	lsls	r3, r3, #4
 8009e5e:	430b      	orrs	r3, r1
 8009e60:	4943      	ldr	r1, [pc, #268]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009e62:	4313      	orrs	r3, r2
 8009e64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009e66:	7bfb      	ldrb	r3, [r7, #15]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d17c      	bne.n	8009f66 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009e6c:	4b40      	ldr	r3, [pc, #256]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a3f      	ldr	r2, [pc, #252]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009e72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e78:	f7fa fcc0 	bl	80047fc <HAL_GetTick>
 8009e7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009e7e:	e009      	b.n	8009e94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009e80:	f7fa fcbc 	bl	80047fc <HAL_GetTick>
 8009e84:	4602      	mov	r2, r0
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d902      	bls.n	8009e94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	73fb      	strb	r3, [r7, #15]
        break;
 8009e92:	e005      	b.n	8009ea0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009e94:	4b36      	ldr	r3, [pc, #216]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1ef      	bne.n	8009e80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009ea0:	7bfb      	ldrb	r3, [r7, #15]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d15f      	bne.n	8009f66 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d110      	bne.n	8009ece <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009eac:	4b30      	ldr	r3, [pc, #192]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009eb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	6892      	ldr	r2, [r2, #8]
 8009ebc:	0211      	lsls	r1, r2, #8
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	68d2      	ldr	r2, [r2, #12]
 8009ec2:	06d2      	lsls	r2, r2, #27
 8009ec4:	430a      	orrs	r2, r1
 8009ec6:	492a      	ldr	r1, [pc, #168]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	610b      	str	r3, [r1, #16]
 8009ecc:	e027      	b.n	8009f1e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d112      	bne.n	8009efa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009ed4:	4b26      	ldr	r3, [pc, #152]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009edc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	6892      	ldr	r2, [r2, #8]
 8009ee4:	0211      	lsls	r1, r2, #8
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	6912      	ldr	r2, [r2, #16]
 8009eea:	0852      	lsrs	r2, r2, #1
 8009eec:	3a01      	subs	r2, #1
 8009eee:	0552      	lsls	r2, r2, #21
 8009ef0:	430a      	orrs	r2, r1
 8009ef2:	491f      	ldr	r1, [pc, #124]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	610b      	str	r3, [r1, #16]
 8009ef8:	e011      	b.n	8009f1e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009efa:	4b1d      	ldr	r3, [pc, #116]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009f02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	6892      	ldr	r2, [r2, #8]
 8009f0a:	0211      	lsls	r1, r2, #8
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	6952      	ldr	r2, [r2, #20]
 8009f10:	0852      	lsrs	r2, r2, #1
 8009f12:	3a01      	subs	r2, #1
 8009f14:	0652      	lsls	r2, r2, #25
 8009f16:	430a      	orrs	r2, r1
 8009f18:	4915      	ldr	r1, [pc, #84]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009f1e:	4b14      	ldr	r3, [pc, #80]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a13      	ldr	r2, [pc, #76]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009f24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f28:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f2a:	f7fa fc67 	bl	80047fc <HAL_GetTick>
 8009f2e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009f30:	e009      	b.n	8009f46 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009f32:	f7fa fc63 	bl	80047fc <HAL_GetTick>
 8009f36:	4602      	mov	r2, r0
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d902      	bls.n	8009f46 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8009f40:	2303      	movs	r3, #3
 8009f42:	73fb      	strb	r3, [r7, #15]
          break;
 8009f44:	e005      	b.n	8009f52 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009f46:	4b0a      	ldr	r3, [pc, #40]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d0ef      	beq.n	8009f32 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8009f52:	7bfb      	ldrb	r3, [r7, #15]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d106      	bne.n	8009f66 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009f58:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009f5a:	691a      	ldr	r2, [r3, #16]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	4903      	ldr	r1, [pc, #12]	; (8009f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	40021000 	.word	0x40021000

08009f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d101      	bne.n	8009f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e049      	b.n	800a01a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d106      	bne.n	8009fa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7fa f9ec 	bl	8004378 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2202      	movs	r2, #2
 8009fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	3304      	adds	r3, #4
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	4610      	mov	r0, r2
 8009fb4:	f000 fa80 	bl	800a4b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
	...

0800a024 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a032:	b2db      	uxtb	r3, r3
 800a034:	2b01      	cmp	r3, #1
 800a036:	d001      	beq.n	800a03c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	e033      	b.n	800a0a4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2202      	movs	r2, #2
 800a040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a19      	ldr	r2, [pc, #100]	; (800a0b0 <HAL_TIM_Base_Start+0x8c>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d009      	beq.n	800a062 <HAL_TIM_Base_Start+0x3e>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a056:	d004      	beq.n	800a062 <HAL_TIM_Base_Start+0x3e>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a15      	ldr	r2, [pc, #84]	; (800a0b4 <HAL_TIM_Base_Start+0x90>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d115      	bne.n	800a08e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	689a      	ldr	r2, [r3, #8]
 800a068:	4b13      	ldr	r3, [pc, #76]	; (800a0b8 <HAL_TIM_Base_Start+0x94>)
 800a06a:	4013      	ands	r3, r2
 800a06c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2b06      	cmp	r3, #6
 800a072:	d015      	beq.n	800a0a0 <HAL_TIM_Base_Start+0x7c>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a07a:	d011      	beq.n	800a0a0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f042 0201 	orr.w	r2, r2, #1
 800a08a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a08c:	e008      	b.n	800a0a0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f042 0201 	orr.w	r2, r2, #1
 800a09c:	601a      	str	r2, [r3, #0]
 800a09e:	e000      	b.n	800a0a2 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3714      	adds	r7, #20
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	40012c00 	.word	0x40012c00
 800a0b4:	40014000 	.word	0x40014000
 800a0b8:	00010007 	.word	0x00010007

0800a0bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	f003 0302 	and.w	r3, r3, #2
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d020      	beq.n	800a120 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f003 0302 	and.w	r3, r3, #2
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d01b      	beq.n	800a120 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f06f 0202 	mvn.w	r2, #2
 800a0f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	f003 0303 	and.w	r3, r3, #3
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f9b7 	bl	800a47a <HAL_TIM_IC_CaptureCallback>
 800a10c:	e005      	b.n	800a11a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f9a9 	bl	800a466 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f9ba 	bl	800a48e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	f003 0304 	and.w	r3, r3, #4
 800a126:	2b00      	cmp	r3, #0
 800a128:	d020      	beq.n	800a16c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f003 0304 	and.w	r3, r3, #4
 800a130:	2b00      	cmp	r3, #0
 800a132:	d01b      	beq.n	800a16c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f06f 0204 	mvn.w	r2, #4
 800a13c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2202      	movs	r2, #2
 800a142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d003      	beq.n	800a15a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 f991 	bl	800a47a <HAL_TIM_IC_CaptureCallback>
 800a158:	e005      	b.n	800a166 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f983 	bl	800a466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 f994 	bl	800a48e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f003 0308 	and.w	r3, r3, #8
 800a172:	2b00      	cmp	r3, #0
 800a174:	d020      	beq.n	800a1b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f003 0308 	and.w	r3, r3, #8
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d01b      	beq.n	800a1b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f06f 0208 	mvn.w	r2, #8
 800a188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2204      	movs	r2, #4
 800a18e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	69db      	ldr	r3, [r3, #28]
 800a196:	f003 0303 	and.w	r3, r3, #3
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d003      	beq.n	800a1a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f96b 	bl	800a47a <HAL_TIM_IC_CaptureCallback>
 800a1a4:	e005      	b.n	800a1b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f95d 	bl	800a466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 f96e 	bl	800a48e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	f003 0310 	and.w	r3, r3, #16
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d020      	beq.n	800a204 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f003 0310 	and.w	r3, r3, #16
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d01b      	beq.n	800a204 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f06f 0210 	mvn.w	r2, #16
 800a1d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2208      	movs	r2, #8
 800a1da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d003      	beq.n	800a1f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f945 	bl	800a47a <HAL_TIM_IC_CaptureCallback>
 800a1f0:	e005      	b.n	800a1fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f937 	bl	800a466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 f948 	bl	800a48e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	f003 0301 	and.w	r3, r3, #1
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00c      	beq.n	800a228 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f003 0301 	and.w	r3, r3, #1
 800a214:	2b00      	cmp	r3, #0
 800a216:	d007      	beq.n	800a228 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f06f 0201 	mvn.w	r2, #1
 800a220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f915 	bl	800a452 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00c      	beq.n	800a24c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d007      	beq.n	800a24c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 faa4 	bl	800a794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00c      	beq.n	800a270 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d007      	beq.n	800a270 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fa9c 	bl	800a7a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00c      	beq.n	800a294 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a280:	2b00      	cmp	r3, #0
 800a282:	d007      	beq.n	800a294 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a28c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 f907 	bl	800a4a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	f003 0320 	and.w	r3, r3, #32
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00c      	beq.n	800a2b8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f003 0320 	and.w	r3, r3, #32
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d007      	beq.n	800a2b8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f06f 0220 	mvn.w	r2, #32
 800a2b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 fa64 	bl	800a780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2b8:	bf00      	nop
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d101      	bne.n	800a2dc <HAL_TIM_ConfigClockSource+0x1c>
 800a2d8:	2302      	movs	r3, #2
 800a2da:	e0b6      	b.n	800a44a <HAL_TIM_ConfigClockSource+0x18a>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2202      	movs	r2, #2
 800a2e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a2fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a318:	d03e      	beq.n	800a398 <HAL_TIM_ConfigClockSource+0xd8>
 800a31a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a31e:	f200 8087 	bhi.w	800a430 <HAL_TIM_ConfigClockSource+0x170>
 800a322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a326:	f000 8086 	beq.w	800a436 <HAL_TIM_ConfigClockSource+0x176>
 800a32a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a32e:	d87f      	bhi.n	800a430 <HAL_TIM_ConfigClockSource+0x170>
 800a330:	2b70      	cmp	r3, #112	; 0x70
 800a332:	d01a      	beq.n	800a36a <HAL_TIM_ConfigClockSource+0xaa>
 800a334:	2b70      	cmp	r3, #112	; 0x70
 800a336:	d87b      	bhi.n	800a430 <HAL_TIM_ConfigClockSource+0x170>
 800a338:	2b60      	cmp	r3, #96	; 0x60
 800a33a:	d050      	beq.n	800a3de <HAL_TIM_ConfigClockSource+0x11e>
 800a33c:	2b60      	cmp	r3, #96	; 0x60
 800a33e:	d877      	bhi.n	800a430 <HAL_TIM_ConfigClockSource+0x170>
 800a340:	2b50      	cmp	r3, #80	; 0x50
 800a342:	d03c      	beq.n	800a3be <HAL_TIM_ConfigClockSource+0xfe>
 800a344:	2b50      	cmp	r3, #80	; 0x50
 800a346:	d873      	bhi.n	800a430 <HAL_TIM_ConfigClockSource+0x170>
 800a348:	2b40      	cmp	r3, #64	; 0x40
 800a34a:	d058      	beq.n	800a3fe <HAL_TIM_ConfigClockSource+0x13e>
 800a34c:	2b40      	cmp	r3, #64	; 0x40
 800a34e:	d86f      	bhi.n	800a430 <HAL_TIM_ConfigClockSource+0x170>
 800a350:	2b30      	cmp	r3, #48	; 0x30
 800a352:	d064      	beq.n	800a41e <HAL_TIM_ConfigClockSource+0x15e>
 800a354:	2b30      	cmp	r3, #48	; 0x30
 800a356:	d86b      	bhi.n	800a430 <HAL_TIM_ConfigClockSource+0x170>
 800a358:	2b20      	cmp	r3, #32
 800a35a:	d060      	beq.n	800a41e <HAL_TIM_ConfigClockSource+0x15e>
 800a35c:	2b20      	cmp	r3, #32
 800a35e:	d867      	bhi.n	800a430 <HAL_TIM_ConfigClockSource+0x170>
 800a360:	2b00      	cmp	r3, #0
 800a362:	d05c      	beq.n	800a41e <HAL_TIM_ConfigClockSource+0x15e>
 800a364:	2b10      	cmp	r3, #16
 800a366:	d05a      	beq.n	800a41e <HAL_TIM_ConfigClockSource+0x15e>
 800a368:	e062      	b.n	800a430 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a37a:	f000 f97b 	bl	800a674 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a38c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	609a      	str	r2, [r3, #8]
      break;
 800a396:	e04f      	b.n	800a438 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a3a8:	f000 f964 	bl	800a674 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	689a      	ldr	r2, [r3, #8]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a3ba:	609a      	str	r2, [r3, #8]
      break;
 800a3bc:	e03c      	b.n	800a438 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	f000 f8d8 	bl	800a580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2150      	movs	r1, #80	; 0x50
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 f931 	bl	800a63e <TIM_ITRx_SetConfig>
      break;
 800a3dc:	e02c      	b.n	800a438 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	f000 f8f7 	bl	800a5de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2160      	movs	r1, #96	; 0x60
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 f921 	bl	800a63e <TIM_ITRx_SetConfig>
      break;
 800a3fc:	e01c      	b.n	800a438 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a40a:	461a      	mov	r2, r3
 800a40c:	f000 f8b8 	bl	800a580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2140      	movs	r1, #64	; 0x40
 800a416:	4618      	mov	r0, r3
 800a418:	f000 f911 	bl	800a63e <TIM_ITRx_SetConfig>
      break;
 800a41c:	e00c      	b.n	800a438 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4619      	mov	r1, r3
 800a428:	4610      	mov	r0, r2
 800a42a:	f000 f908 	bl	800a63e <TIM_ITRx_SetConfig>
      break;
 800a42e:	e003      	b.n	800a438 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	73fb      	strb	r3, [r7, #15]
      break;
 800a434:	e000      	b.n	800a438 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a448:	7bfb      	ldrb	r3, [r7, #15]
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a452:	b480      	push	{r7}
 800a454:	b083      	sub	sp, #12
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a45a:	bf00      	nop
 800a45c:	370c      	adds	r7, #12
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a46e:	bf00      	nop
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a482:	bf00      	nop
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4aa:	bf00      	nop
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
	...

0800a4b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a2a      	ldr	r2, [pc, #168]	; (800a574 <TIM_Base_SetConfig+0xbc>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d003      	beq.n	800a4d8 <TIM_Base_SetConfig+0x20>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4d6:	d108      	bne.n	800a4ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a21      	ldr	r2, [pc, #132]	; (800a574 <TIM_Base_SetConfig+0xbc>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d00b      	beq.n	800a50a <TIM_Base_SetConfig+0x52>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4f8:	d007      	beq.n	800a50a <TIM_Base_SetConfig+0x52>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4a1e      	ldr	r2, [pc, #120]	; (800a578 <TIM_Base_SetConfig+0xc0>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d003      	beq.n	800a50a <TIM_Base_SetConfig+0x52>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a1d      	ldr	r2, [pc, #116]	; (800a57c <TIM_Base_SetConfig+0xc4>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d108      	bne.n	800a51c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	4313      	orrs	r3, r2
 800a51a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	695b      	ldr	r3, [r3, #20]
 800a526:	4313      	orrs	r3, r2
 800a528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	68fa      	ldr	r2, [r7, #12]
 800a52e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	689a      	ldr	r2, [r3, #8]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4a0c      	ldr	r2, [pc, #48]	; (800a574 <TIM_Base_SetConfig+0xbc>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d007      	beq.n	800a558 <TIM_Base_SetConfig+0xa0>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a0b      	ldr	r2, [pc, #44]	; (800a578 <TIM_Base_SetConfig+0xc0>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d003      	beq.n	800a558 <TIM_Base_SetConfig+0xa0>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4a0a      	ldr	r2, [pc, #40]	; (800a57c <TIM_Base_SetConfig+0xc4>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d103      	bne.n	800a560 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	691a      	ldr	r2, [r3, #16]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	615a      	str	r2, [r3, #20]
}
 800a566:	bf00      	nop
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	40012c00 	.word	0x40012c00
 800a578:	40014000 	.word	0x40014000
 800a57c:	40014400 	.word	0x40014400

0800a580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a580:	b480      	push	{r7}
 800a582:	b087      	sub	sp, #28
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6a1b      	ldr	r3, [r3, #32]
 800a590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6a1b      	ldr	r3, [r3, #32]
 800a596:	f023 0201 	bic.w	r2, r3, #1
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	699b      	ldr	r3, [r3, #24]
 800a5a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	011b      	lsls	r3, r3, #4
 800a5b0:	693a      	ldr	r2, [r7, #16]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	f023 030a 	bic.w	r3, r3, #10
 800a5bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	697a      	ldr	r2, [r7, #20]
 800a5d0:	621a      	str	r2, [r3, #32]
}
 800a5d2:	bf00      	nop
 800a5d4:	371c      	adds	r7, #28
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr

0800a5de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5de:	b480      	push	{r7}
 800a5e0:	b087      	sub	sp, #28
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	60f8      	str	r0, [r7, #12]
 800a5e6:	60b9      	str	r1, [r7, #8]
 800a5e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6a1b      	ldr	r3, [r3, #32]
 800a5ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6a1b      	ldr	r3, [r3, #32]
 800a5f4:	f023 0210 	bic.w	r2, r3, #16
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	699b      	ldr	r3, [r3, #24]
 800a600:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a608:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	031b      	lsls	r3, r3, #12
 800a60e:	693a      	ldr	r2, [r7, #16]
 800a610:	4313      	orrs	r3, r2
 800a612:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a61a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	011b      	lsls	r3, r3, #4
 800a620:	697a      	ldr	r2, [r7, #20]
 800a622:	4313      	orrs	r3, r2
 800a624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	693a      	ldr	r2, [r7, #16]
 800a62a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	621a      	str	r2, [r3, #32]
}
 800a632:	bf00      	nop
 800a634:	371c      	adds	r7, #28
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr

0800a63e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a63e:	b480      	push	{r7}
 800a640:	b085      	sub	sp, #20
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
 800a646:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a654:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	f043 0307 	orr.w	r3, r3, #7
 800a660:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	609a      	str	r2, [r3, #8]
}
 800a668:	bf00      	nop
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a674:	b480      	push	{r7}
 800a676:	b087      	sub	sp, #28
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	607a      	str	r2, [r7, #4]
 800a680:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a68e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	021a      	lsls	r2, r3, #8
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	431a      	orrs	r2, r3
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	697a      	ldr	r2, [r7, #20]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	697a      	ldr	r2, [r7, #20]
 800a6a6:	609a      	str	r2, [r3, #8]
}
 800a6a8:	bf00      	nop
 800a6aa:	371c      	adds	r7, #28
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d101      	bne.n	800a6cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6c8:	2302      	movs	r3, #2
 800a6ca:	e04f      	b.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a21      	ldr	r2, [pc, #132]	; (800a778 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d108      	bne.n	800a708 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a6fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	4313      	orrs	r3, r2
 800a706:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a70e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	4313      	orrs	r3, r2
 800a718:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a14      	ldr	r2, [pc, #80]	; (800a778 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d009      	beq.n	800a740 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a734:	d004      	beq.n	800a740 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a10      	ldr	r2, [pc, #64]	; (800a77c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d10c      	bne.n	800a75a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a746:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	4313      	orrs	r3, r2
 800a750:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2201      	movs	r2, #1
 800a75e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3714      	adds	r7, #20
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr
 800a778:	40012c00 	.word	0x40012c00
 800a77c:	40014000 	.word	0x40014000

0800a780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d101      	bne.n	800a7ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e040      	b.n	800a850 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d106      	bne.n	800a7e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7f9 fd3c 	bl	800425c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2224      	movs	r2, #36	; 0x24
 800a7e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f022 0201 	bic.w	r2, r2, #1
 800a7f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d002      	beq.n	800a808 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 feb0 	bl	800b568 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fc81 	bl	800b110 <UART_SetConfig>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b01      	cmp	r3, #1
 800a812:	d101      	bne.n	800a818 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	e01b      	b.n	800a850 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	685a      	ldr	r2, [r3, #4]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a826:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	689a      	ldr	r2, [r3, #8]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a836:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f042 0201 	orr.w	r2, r2, #1
 800a846:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 ff2f 	bl	800b6ac <UART_CheckIdleState>
 800a84e:	4603      	mov	r3, r0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08a      	sub	sp, #40	; 0x28
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	4613      	mov	r3, r2
 800a864:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a86c:	2b20      	cmp	r3, #32
 800a86e:	d137      	bne.n	800a8e0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d002      	beq.n	800a87c <HAL_UART_Receive_DMA+0x24>
 800a876:	88fb      	ldrh	r3, [r7, #6]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d101      	bne.n	800a880 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	e030      	b.n	800a8e2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2200      	movs	r2, #0
 800a884:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a18      	ldr	r2, [pc, #96]	; (800a8ec <HAL_UART_Receive_DMA+0x94>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d01f      	beq.n	800a8d0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d018      	beq.n	800a8d0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	e853 3f00 	ldrex	r3, [r3]
 800a8aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a8b2:	627b      	str	r3, [r7, #36]	; 0x24
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8bc:	623b      	str	r3, [r7, #32]
 800a8be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c0:	69f9      	ldr	r1, [r7, #28]
 800a8c2:	6a3a      	ldr	r2, [r7, #32]
 800a8c4:	e841 2300 	strex	r3, r2, [r1]
 800a8c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d1e6      	bne.n	800a89e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a8d0:	88fb      	ldrh	r3, [r7, #6]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	68b9      	ldr	r1, [r7, #8]
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f000 fff8 	bl	800b8cc <UART_Start_Receive_DMA>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	e000      	b.n	800a8e2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a8e0:	2302      	movs	r3, #2
  }
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3728      	adds	r7, #40	; 0x28
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	40008000 	.word	0x40008000

0800a8f0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b0a0      	sub	sp, #128	; 0x80
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a900:	e853 3f00 	ldrex	r3, [r3]
 800a904:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a908:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800a90c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	461a      	mov	r2, r3
 800a914:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a916:	66bb      	str	r3, [r7, #104]	; 0x68
 800a918:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a91c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a91e:	e841 2300 	strex	r3, r2, [r1]
 800a922:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1e6      	bne.n	800a8f8 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	3308      	adds	r3, #8
 800a930:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a934:	e853 3f00 	ldrex	r3, [r3]
 800a938:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a93a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a93c:	f023 0301 	bic.w	r3, r3, #1
 800a940:	67bb      	str	r3, [r7, #120]	; 0x78
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	3308      	adds	r3, #8
 800a948:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a94a:	657a      	str	r2, [r7, #84]	; 0x54
 800a94c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a950:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a952:	e841 2300 	strex	r3, r2, [r1]
 800a956:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1e5      	bne.n	800a92a <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a962:	2b01      	cmp	r3, #1
 800a964:	d118      	bne.n	800a998 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a96e:	e853 3f00 	ldrex	r3, [r3]
 800a972:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a976:	f023 0310 	bic.w	r3, r3, #16
 800a97a:	677b      	str	r3, [r7, #116]	; 0x74
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	461a      	mov	r2, r3
 800a982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a984:	643b      	str	r3, [r7, #64]	; 0x40
 800a986:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a988:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a98a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a98c:	e841 2300 	strex	r3, r2, [r1]
 800a990:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a994:	2b00      	cmp	r3, #0
 800a996:	d1e6      	bne.n	800a966 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9a2:	2b80      	cmp	r3, #128	; 0x80
 800a9a4:	d137      	bne.n	800aa16 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	3308      	adds	r3, #8
 800a9ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	e853 3f00 	ldrex	r3, [r3]
 800a9b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9bc:	673b      	str	r3, [r7, #112]	; 0x70
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	3308      	adds	r3, #8
 800a9c4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a9c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a9c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9ce:	e841 2300 	strex	r3, r2, [r1]
 800a9d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1e5      	bne.n	800a9a6 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d019      	beq.n	800aa16 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fb fbfe 	bl	80061f0 <HAL_DMA_Abort>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00d      	beq.n	800aa16 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fb fd24 	bl	800644c <HAL_DMA_GetError>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b20      	cmp	r3, #32
 800aa08:	d105      	bne.n	800aa16 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2210      	movs	r2, #16
 800aa0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800aa12:	2303      	movs	r3, #3
 800aa14:	e063      	b.n	800aade <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa20:	2b40      	cmp	r3, #64	; 0x40
 800aa22:	d137      	bne.n	800aa94 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	3308      	adds	r3, #8
 800aa2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	e853 3f00 	ldrex	r3, [r3]
 800aa32:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	3308      	adds	r3, #8
 800aa42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aa44:	61ba      	str	r2, [r7, #24]
 800aa46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa48:	6979      	ldr	r1, [r7, #20]
 800aa4a:	69ba      	ldr	r2, [r7, #24]
 800aa4c:	e841 2300 	strex	r3, r2, [r1]
 800aa50:	613b      	str	r3, [r7, #16]
   return(result);
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1e5      	bne.n	800aa24 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d019      	beq.n	800aa94 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa64:	2200      	movs	r2, #0
 800aa66:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7fb fbbf 	bl	80061f0 <HAL_DMA_Abort>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00d      	beq.n	800aa94 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7fb fce5 	bl	800644c <HAL_DMA_GetError>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b20      	cmp	r3, #32
 800aa86:	d105      	bne.n	800aa94 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2210      	movs	r2, #16
 800aa8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800aa90:	2303      	movs	r3, #3
 800aa92:	e024      	b.n	800aade <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	220f      	movs	r2, #15
 800aaaa:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	8b1b      	ldrh	r3, [r3, #24]
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f042 0208 	orr.w	r2, r2, #8
 800aabc:	b292      	uxth	r2, r2
 800aabe:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2220      	movs	r2, #32
 800aac4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2220      	movs	r2, #32
 800aaca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3780      	adds	r7, #128	; 0x80
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
	...

0800aae8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b0ba      	sub	sp, #232	; 0xe8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	69db      	ldr	r3, [r3, #28]
 800aaf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	689b      	ldr	r3, [r3, #8]
 800ab0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ab0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ab12:	f640 030f 	movw	r3, #2063	; 0x80f
 800ab16:	4013      	ands	r3, r2
 800ab18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ab1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d115      	bne.n	800ab50 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ab24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab28:	f003 0320 	and.w	r3, r3, #32
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00f      	beq.n	800ab50 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ab30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab34:	f003 0320 	and.w	r3, r3, #32
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d009      	beq.n	800ab50 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f000 82ae 	beq.w	800b0a2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	4798      	blx	r3
      }
      return;
 800ab4e:	e2a8      	b.n	800b0a2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ab50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f000 8117 	beq.w	800ad88 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ab5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab5e:	f003 0301 	and.w	r3, r3, #1
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d106      	bne.n	800ab74 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ab66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ab6a:	4b85      	ldr	r3, [pc, #532]	; (800ad80 <HAL_UART_IRQHandler+0x298>)
 800ab6c:	4013      	ands	r3, r2
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f000 810a 	beq.w	800ad88 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab78:	f003 0301 	and.w	r3, r3, #1
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d011      	beq.n	800aba4 <HAL_UART_IRQHandler+0xbc>
 800ab80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00b      	beq.n	800aba4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2201      	movs	r2, #1
 800ab92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab9a:	f043 0201 	orr.w	r2, r3, #1
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aba8:	f003 0302 	and.w	r3, r3, #2
 800abac:	2b00      	cmp	r3, #0
 800abae:	d011      	beq.n	800abd4 <HAL_UART_IRQHandler+0xec>
 800abb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00b      	beq.n	800abd4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2202      	movs	r2, #2
 800abc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abca:	f043 0204 	orr.w	r2, r3, #4
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abd8:	f003 0304 	and.w	r3, r3, #4
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d011      	beq.n	800ac04 <HAL_UART_IRQHandler+0x11c>
 800abe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abe4:	f003 0301 	and.w	r3, r3, #1
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00b      	beq.n	800ac04 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2204      	movs	r2, #4
 800abf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abfa:	f043 0202 	orr.w	r2, r3, #2
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ac04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac08:	f003 0308 	and.w	r3, r3, #8
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d017      	beq.n	800ac40 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ac10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac14:	f003 0320 	and.w	r3, r3, #32
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d105      	bne.n	800ac28 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ac1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac20:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00b      	beq.n	800ac40 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2208      	movs	r2, #8
 800ac2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac36:	f043 0208 	orr.w	r2, r3, #8
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ac40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d012      	beq.n	800ac72 <HAL_UART_IRQHandler+0x18a>
 800ac4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00c      	beq.n	800ac72 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac68:	f043 0220 	orr.w	r2, r3, #32
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 8214 	beq.w	800b0a6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ac7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac82:	f003 0320 	and.w	r3, r3, #32
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00d      	beq.n	800aca6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ac8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac8e:	f003 0320 	and.w	r3, r3, #32
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d007      	beq.n	800aca6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d003      	beq.n	800aca6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acba:	2b40      	cmp	r3, #64	; 0x40
 800acbc:	d005      	beq.n	800acca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800acbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800acc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d04f      	beq.n	800ad6a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fec4 	bl	800ba58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acda:	2b40      	cmp	r3, #64	; 0x40
 800acdc:	d141      	bne.n	800ad62 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3308      	adds	r3, #8
 800ace4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800acec:	e853 3f00 	ldrex	r3, [r3]
 800acf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800acf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800acf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3308      	adds	r3, #8
 800ad06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ad0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ad0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ad16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ad1a:	e841 2300 	strex	r3, r2, [r1]
 800ad1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ad22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1d9      	bne.n	800acde <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d013      	beq.n	800ad5a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad36:	4a13      	ldr	r2, [pc, #76]	; (800ad84 <HAL_UART_IRQHandler+0x29c>)
 800ad38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fb fa94 	bl	800626c <HAL_DMA_Abort_IT>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d017      	beq.n	800ad7a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ad54:	4610      	mov	r0, r2
 800ad56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad58:	e00f      	b.n	800ad7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f9c2 	bl	800b0e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad60:	e00b      	b.n	800ad7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 f9be 	bl	800b0e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad68:	e007      	b.n	800ad7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 f9ba 	bl	800b0e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800ad78:	e195      	b.n	800b0a6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad7a:	bf00      	nop
    return;
 800ad7c:	e193      	b.n	800b0a6 <HAL_UART_IRQHandler+0x5be>
 800ad7e:	bf00      	nop
 800ad80:	04000120 	.word	0x04000120
 800ad84:	0800bd09 	.word	0x0800bd09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	f040 814e 	bne.w	800b02e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ad92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad96:	f003 0310 	and.w	r3, r3, #16
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	f000 8147 	beq.w	800b02e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ada0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ada4:	f003 0310 	and.w	r3, r3, #16
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f000 8140 	beq.w	800b02e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2210      	movs	r2, #16
 800adb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adc0:	2b40      	cmp	r3, #64	; 0x40
 800adc2:	f040 80b8 	bne.w	800af36 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800add2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800add6:	2b00      	cmp	r3, #0
 800add8:	f000 8167 	beq.w	800b0aa <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ade2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ade6:	429a      	cmp	r2, r3
 800ade8:	f080 815f 	bcs.w	800b0aa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800adf2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 0320 	and.w	r3, r3, #32
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f040 8086 	bne.w	800af14 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae14:	e853 3f00 	ldrex	r3, [r3]
 800ae18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ae1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ae36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ae3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ae42:	e841 2300 	strex	r3, r2, [r1]
 800ae46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ae4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1da      	bne.n	800ae08 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	3308      	adds	r3, #8
 800ae58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae5c:	e853 3f00 	ldrex	r3, [r3]
 800ae60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ae62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae64:	f023 0301 	bic.w	r3, r3, #1
 800ae68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	3308      	adds	r3, #8
 800ae72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ae76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ae7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ae7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ae82:	e841 2300 	strex	r3, r2, [r1]
 800ae86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ae88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1e1      	bne.n	800ae52 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	3308      	adds	r3, #8
 800ae94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae98:	e853 3f00 	ldrex	r3, [r3]
 800ae9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ae9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	3308      	adds	r3, #8
 800aeae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aeb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aeb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aeb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aeba:	e841 2300 	strex	r3, r2, [r1]
 800aebe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1e3      	bne.n	800ae8e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2220      	movs	r2, #32
 800aeca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aedc:	e853 3f00 	ldrex	r3, [r3]
 800aee0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aee4:	f023 0310 	bic.w	r3, r3, #16
 800aee8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	461a      	mov	r2, r3
 800aef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aef6:	65bb      	str	r3, [r7, #88]	; 0x58
 800aef8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aefc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aefe:	e841 2300 	strex	r3, r2, [r1]
 800af02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800af04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af06:	2b00      	cmp	r3, #0
 800af08:	d1e4      	bne.n	800aed4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af0e:	4618      	mov	r0, r3
 800af10:	f7fb f96e 	bl	80061f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2202      	movs	r2, #2
 800af18:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800af26:	b29b      	uxth	r3, r3
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	4619      	mov	r1, r3
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f8e2 	bl	800b0f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af34:	e0b9      	b.n	800b0aa <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800af42:	b29b      	uxth	r3, r3
 800af44:	1ad3      	subs	r3, r2, r3
 800af46:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800af50:	b29b      	uxth	r3, r3
 800af52:	2b00      	cmp	r3, #0
 800af54:	f000 80ab 	beq.w	800b0ae <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800af58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f000 80a6 	beq.w	800b0ae <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6a:	e853 3f00 	ldrex	r3, [r3]
 800af6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	461a      	mov	r2, r3
 800af80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af84:	647b      	str	r3, [r7, #68]	; 0x44
 800af86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af8c:	e841 2300 	strex	r3, r2, [r1]
 800af90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1e4      	bne.n	800af62 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	3308      	adds	r3, #8
 800af9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa2:	e853 3f00 	ldrex	r3, [r3]
 800afa6:	623b      	str	r3, [r7, #32]
   return(result);
 800afa8:	6a3b      	ldr	r3, [r7, #32]
 800afaa:	f023 0301 	bic.w	r3, r3, #1
 800afae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	3308      	adds	r3, #8
 800afb8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800afbc:	633a      	str	r2, [r7, #48]	; 0x30
 800afbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afc4:	e841 2300 	strex	r3, r2, [r1]
 800afc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800afca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d1e3      	bne.n	800af98 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2220      	movs	r2, #32
 800afd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	e853 3f00 	ldrex	r3, [r3]
 800aff0:	60fb      	str	r3, [r7, #12]
   return(result);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f023 0310 	bic.w	r3, r3, #16
 800aff8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	461a      	mov	r2, r3
 800b002:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b006:	61fb      	str	r3, [r7, #28]
 800b008:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00a:	69b9      	ldr	r1, [r7, #24]
 800b00c:	69fa      	ldr	r2, [r7, #28]
 800b00e:	e841 2300 	strex	r3, r2, [r1]
 800b012:	617b      	str	r3, [r7, #20]
   return(result);
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d1e4      	bne.n	800afe4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2202      	movs	r2, #2
 800b01e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 f866 	bl	800b0f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b02c:	e03f      	b.n	800b0ae <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b02e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00e      	beq.n	800b058 <HAL_UART_IRQHandler+0x570>
 800b03a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b03e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b042:	2b00      	cmp	r3, #0
 800b044:	d008      	beq.n	800b058 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b04e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 fe99 	bl	800bd88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b056:	e02d      	b.n	800b0b4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b05c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00e      	beq.n	800b082 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d008      	beq.n	800b082 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b074:	2b00      	cmp	r3, #0
 800b076:	d01c      	beq.n	800b0b2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	4798      	blx	r3
    }
    return;
 800b080:	e017      	b.n	800b0b2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d012      	beq.n	800b0b4 <HAL_UART_IRQHandler+0x5cc>
 800b08e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00c      	beq.n	800b0b4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 fe4a 	bl	800bd34 <UART_EndTransmit_IT>
    return;
 800b0a0:	e008      	b.n	800b0b4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800b0a2:	bf00      	nop
 800b0a4:	e006      	b.n	800b0b4 <HAL_UART_IRQHandler+0x5cc>
    return;
 800b0a6:	bf00      	nop
 800b0a8:	e004      	b.n	800b0b4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800b0aa:	bf00      	nop
 800b0ac:	e002      	b.n	800b0b4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800b0ae:	bf00      	nop
 800b0b0:	e000      	b.n	800b0b4 <HAL_UART_IRQHandler+0x5cc>
    return;
 800b0b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b0b4:	37e8      	adds	r7, #232	; 0xe8
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop

0800b0bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b0c4:	bf00      	nop
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b0ec:	bf00      	nop
 800b0ee:	370c      	adds	r7, #12
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr

0800b0f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	460b      	mov	r3, r1
 800b102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b104:	bf00      	nop
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b114:	b08a      	sub	sp, #40	; 0x28
 800b116:	af00      	add	r7, sp, #0
 800b118:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b11a:	2300      	movs	r3, #0
 800b11c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	689a      	ldr	r2, [r3, #8]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	431a      	orrs	r2, r3
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	695b      	ldr	r3, [r3, #20]
 800b12e:	431a      	orrs	r2, r3
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	4313      	orrs	r3, r2
 800b136:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	4bb4      	ldr	r3, [pc, #720]	; (800b410 <UART_SetConfig+0x300>)
 800b140:	4013      	ands	r3, r2
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	6812      	ldr	r2, [r2, #0]
 800b146:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b148:	430b      	orrs	r3, r1
 800b14a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	68da      	ldr	r2, [r3, #12]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	430a      	orrs	r2, r1
 800b160:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	699b      	ldr	r3, [r3, #24]
 800b166:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4aa9      	ldr	r2, [pc, #676]	; (800b414 <UART_SetConfig+0x304>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d004      	beq.n	800b17c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6a1b      	ldr	r3, [r3, #32]
 800b176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b178:	4313      	orrs	r3, r2
 800b17a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b18c:	430a      	orrs	r2, r1
 800b18e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4aa0      	ldr	r2, [pc, #640]	; (800b418 <UART_SetConfig+0x308>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d126      	bne.n	800b1e8 <UART_SetConfig+0xd8>
 800b19a:	4ba0      	ldr	r3, [pc, #640]	; (800b41c <UART_SetConfig+0x30c>)
 800b19c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1a0:	f003 0303 	and.w	r3, r3, #3
 800b1a4:	2b03      	cmp	r3, #3
 800b1a6:	d81b      	bhi.n	800b1e0 <UART_SetConfig+0xd0>
 800b1a8:	a201      	add	r2, pc, #4	; (adr r2, 800b1b0 <UART_SetConfig+0xa0>)
 800b1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ae:	bf00      	nop
 800b1b0:	0800b1c1 	.word	0x0800b1c1
 800b1b4:	0800b1d1 	.word	0x0800b1d1
 800b1b8:	0800b1c9 	.word	0x0800b1c9
 800b1bc:	0800b1d9 	.word	0x0800b1d9
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1c6:	e080      	b.n	800b2ca <UART_SetConfig+0x1ba>
 800b1c8:	2302      	movs	r3, #2
 800b1ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1ce:	e07c      	b.n	800b2ca <UART_SetConfig+0x1ba>
 800b1d0:	2304      	movs	r3, #4
 800b1d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1d6:	e078      	b.n	800b2ca <UART_SetConfig+0x1ba>
 800b1d8:	2308      	movs	r3, #8
 800b1da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1de:	e074      	b.n	800b2ca <UART_SetConfig+0x1ba>
 800b1e0:	2310      	movs	r3, #16
 800b1e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1e6:	e070      	b.n	800b2ca <UART_SetConfig+0x1ba>
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a8c      	ldr	r2, [pc, #560]	; (800b420 <UART_SetConfig+0x310>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d138      	bne.n	800b264 <UART_SetConfig+0x154>
 800b1f2:	4b8a      	ldr	r3, [pc, #552]	; (800b41c <UART_SetConfig+0x30c>)
 800b1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1f8:	f003 030c 	and.w	r3, r3, #12
 800b1fc:	2b0c      	cmp	r3, #12
 800b1fe:	d82d      	bhi.n	800b25c <UART_SetConfig+0x14c>
 800b200:	a201      	add	r2, pc, #4	; (adr r2, 800b208 <UART_SetConfig+0xf8>)
 800b202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b206:	bf00      	nop
 800b208:	0800b23d 	.word	0x0800b23d
 800b20c:	0800b25d 	.word	0x0800b25d
 800b210:	0800b25d 	.word	0x0800b25d
 800b214:	0800b25d 	.word	0x0800b25d
 800b218:	0800b24d 	.word	0x0800b24d
 800b21c:	0800b25d 	.word	0x0800b25d
 800b220:	0800b25d 	.word	0x0800b25d
 800b224:	0800b25d 	.word	0x0800b25d
 800b228:	0800b245 	.word	0x0800b245
 800b22c:	0800b25d 	.word	0x0800b25d
 800b230:	0800b25d 	.word	0x0800b25d
 800b234:	0800b25d 	.word	0x0800b25d
 800b238:	0800b255 	.word	0x0800b255
 800b23c:	2300      	movs	r3, #0
 800b23e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b242:	e042      	b.n	800b2ca <UART_SetConfig+0x1ba>
 800b244:	2302      	movs	r3, #2
 800b246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b24a:	e03e      	b.n	800b2ca <UART_SetConfig+0x1ba>
 800b24c:	2304      	movs	r3, #4
 800b24e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b252:	e03a      	b.n	800b2ca <UART_SetConfig+0x1ba>
 800b254:	2308      	movs	r3, #8
 800b256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b25a:	e036      	b.n	800b2ca <UART_SetConfig+0x1ba>
 800b25c:	2310      	movs	r3, #16
 800b25e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b262:	e032      	b.n	800b2ca <UART_SetConfig+0x1ba>
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a6a      	ldr	r2, [pc, #424]	; (800b414 <UART_SetConfig+0x304>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d12a      	bne.n	800b2c4 <UART_SetConfig+0x1b4>
 800b26e:	4b6b      	ldr	r3, [pc, #428]	; (800b41c <UART_SetConfig+0x30c>)
 800b270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b274:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b278:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b27c:	d01a      	beq.n	800b2b4 <UART_SetConfig+0x1a4>
 800b27e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b282:	d81b      	bhi.n	800b2bc <UART_SetConfig+0x1ac>
 800b284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b288:	d00c      	beq.n	800b2a4 <UART_SetConfig+0x194>
 800b28a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b28e:	d815      	bhi.n	800b2bc <UART_SetConfig+0x1ac>
 800b290:	2b00      	cmp	r3, #0
 800b292:	d003      	beq.n	800b29c <UART_SetConfig+0x18c>
 800b294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b298:	d008      	beq.n	800b2ac <UART_SetConfig+0x19c>
 800b29a:	e00f      	b.n	800b2bc <UART_SetConfig+0x1ac>
 800b29c:	2300      	movs	r3, #0
 800b29e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2a2:	e012      	b.n	800b2ca <UART_SetConfig+0x1ba>
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2aa:	e00e      	b.n	800b2ca <UART_SetConfig+0x1ba>
 800b2ac:	2304      	movs	r3, #4
 800b2ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2b2:	e00a      	b.n	800b2ca <UART_SetConfig+0x1ba>
 800b2b4:	2308      	movs	r3, #8
 800b2b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2ba:	e006      	b.n	800b2ca <UART_SetConfig+0x1ba>
 800b2bc:	2310      	movs	r3, #16
 800b2be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2c2:	e002      	b.n	800b2ca <UART_SetConfig+0x1ba>
 800b2c4:	2310      	movs	r3, #16
 800b2c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4a51      	ldr	r2, [pc, #324]	; (800b414 <UART_SetConfig+0x304>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d17a      	bne.n	800b3ca <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b2d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2d8:	2b08      	cmp	r3, #8
 800b2da:	d824      	bhi.n	800b326 <UART_SetConfig+0x216>
 800b2dc:	a201      	add	r2, pc, #4	; (adr r2, 800b2e4 <UART_SetConfig+0x1d4>)
 800b2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e2:	bf00      	nop
 800b2e4:	0800b309 	.word	0x0800b309
 800b2e8:	0800b327 	.word	0x0800b327
 800b2ec:	0800b311 	.word	0x0800b311
 800b2f0:	0800b327 	.word	0x0800b327
 800b2f4:	0800b317 	.word	0x0800b317
 800b2f8:	0800b327 	.word	0x0800b327
 800b2fc:	0800b327 	.word	0x0800b327
 800b300:	0800b327 	.word	0x0800b327
 800b304:	0800b31f 	.word	0x0800b31f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b308:	f7fe fac0 	bl	800988c <HAL_RCC_GetPCLK1Freq>
 800b30c:	61f8      	str	r0, [r7, #28]
        break;
 800b30e:	e010      	b.n	800b332 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b310:	4b44      	ldr	r3, [pc, #272]	; (800b424 <UART_SetConfig+0x314>)
 800b312:	61fb      	str	r3, [r7, #28]
        break;
 800b314:	e00d      	b.n	800b332 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b316:	f7fe fa21 	bl	800975c <HAL_RCC_GetSysClockFreq>
 800b31a:	61f8      	str	r0, [r7, #28]
        break;
 800b31c:	e009      	b.n	800b332 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b31e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b322:	61fb      	str	r3, [r7, #28]
        break;
 800b324:	e005      	b.n	800b332 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800b326:	2300      	movs	r3, #0
 800b328:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b32a:	2301      	movs	r3, #1
 800b32c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b330:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	2b00      	cmp	r3, #0
 800b336:	f000 8107 	beq.w	800b548 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	685a      	ldr	r2, [r3, #4]
 800b33e:	4613      	mov	r3, r2
 800b340:	005b      	lsls	r3, r3, #1
 800b342:	4413      	add	r3, r2
 800b344:	69fa      	ldr	r2, [r7, #28]
 800b346:	429a      	cmp	r2, r3
 800b348:	d305      	bcc.n	800b356 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b350:	69fa      	ldr	r2, [r7, #28]
 800b352:	429a      	cmp	r2, r3
 800b354:	d903      	bls.n	800b35e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b35c:	e0f4      	b.n	800b548 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	2200      	movs	r2, #0
 800b362:	461c      	mov	r4, r3
 800b364:	4615      	mov	r5, r2
 800b366:	f04f 0200 	mov.w	r2, #0
 800b36a:	f04f 0300 	mov.w	r3, #0
 800b36e:	022b      	lsls	r3, r5, #8
 800b370:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b374:	0222      	lsls	r2, r4, #8
 800b376:	68f9      	ldr	r1, [r7, #12]
 800b378:	6849      	ldr	r1, [r1, #4]
 800b37a:	0849      	lsrs	r1, r1, #1
 800b37c:	2000      	movs	r0, #0
 800b37e:	4688      	mov	r8, r1
 800b380:	4681      	mov	r9, r0
 800b382:	eb12 0a08 	adds.w	sl, r2, r8
 800b386:	eb43 0b09 	adc.w	fp, r3, r9
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	2200      	movs	r2, #0
 800b390:	603b      	str	r3, [r7, #0]
 800b392:	607a      	str	r2, [r7, #4]
 800b394:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b398:	4650      	mov	r0, sl
 800b39a:	4659      	mov	r1, fp
 800b39c:	f7f5 fc84 	bl	8000ca8 <__aeabi_uldivmod>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3ae:	d308      	bcc.n	800b3c2 <UART_SetConfig+0x2b2>
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3b6:	d204      	bcs.n	800b3c2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	69ba      	ldr	r2, [r7, #24]
 800b3be:	60da      	str	r2, [r3, #12]
 800b3c0:	e0c2      	b.n	800b548 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b3c8:	e0be      	b.n	800b548 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	69db      	ldr	r3, [r3, #28]
 800b3ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3d2:	d16a      	bne.n	800b4aa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800b3d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3d8:	2b08      	cmp	r3, #8
 800b3da:	d834      	bhi.n	800b446 <UART_SetConfig+0x336>
 800b3dc:	a201      	add	r2, pc, #4	; (adr r2, 800b3e4 <UART_SetConfig+0x2d4>)
 800b3de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e2:	bf00      	nop
 800b3e4:	0800b409 	.word	0x0800b409
 800b3e8:	0800b429 	.word	0x0800b429
 800b3ec:	0800b431 	.word	0x0800b431
 800b3f0:	0800b447 	.word	0x0800b447
 800b3f4:	0800b437 	.word	0x0800b437
 800b3f8:	0800b447 	.word	0x0800b447
 800b3fc:	0800b447 	.word	0x0800b447
 800b400:	0800b447 	.word	0x0800b447
 800b404:	0800b43f 	.word	0x0800b43f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b408:	f7fe fa40 	bl	800988c <HAL_RCC_GetPCLK1Freq>
 800b40c:	61f8      	str	r0, [r7, #28]
        break;
 800b40e:	e020      	b.n	800b452 <UART_SetConfig+0x342>
 800b410:	efff69f3 	.word	0xefff69f3
 800b414:	40008000 	.word	0x40008000
 800b418:	40013800 	.word	0x40013800
 800b41c:	40021000 	.word	0x40021000
 800b420:	40004400 	.word	0x40004400
 800b424:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b428:	f7fe fa46 	bl	80098b8 <HAL_RCC_GetPCLK2Freq>
 800b42c:	61f8      	str	r0, [r7, #28]
        break;
 800b42e:	e010      	b.n	800b452 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b430:	4b4c      	ldr	r3, [pc, #304]	; (800b564 <UART_SetConfig+0x454>)
 800b432:	61fb      	str	r3, [r7, #28]
        break;
 800b434:	e00d      	b.n	800b452 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b436:	f7fe f991 	bl	800975c <HAL_RCC_GetSysClockFreq>
 800b43a:	61f8      	str	r0, [r7, #28]
        break;
 800b43c:	e009      	b.n	800b452 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b43e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b442:	61fb      	str	r3, [r7, #28]
        break;
 800b444:	e005      	b.n	800b452 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800b446:	2300      	movs	r3, #0
 800b448:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b44a:	2301      	movs	r3, #1
 800b44c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b450:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d077      	beq.n	800b548 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	005a      	lsls	r2, r3, #1
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	085b      	lsrs	r3, r3, #1
 800b462:	441a      	add	r2, r3
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	fbb2 f3f3 	udiv	r3, r2, r3
 800b46c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b46e:	69bb      	ldr	r3, [r7, #24]
 800b470:	2b0f      	cmp	r3, #15
 800b472:	d916      	bls.n	800b4a2 <UART_SetConfig+0x392>
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b47a:	d212      	bcs.n	800b4a2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	b29b      	uxth	r3, r3
 800b480:	f023 030f 	bic.w	r3, r3, #15
 800b484:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	085b      	lsrs	r3, r3, #1
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	f003 0307 	and.w	r3, r3, #7
 800b490:	b29a      	uxth	r2, r3
 800b492:	8afb      	ldrh	r3, [r7, #22]
 800b494:	4313      	orrs	r3, r2
 800b496:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	8afa      	ldrh	r2, [r7, #22]
 800b49e:	60da      	str	r2, [r3, #12]
 800b4a0:	e052      	b.n	800b548 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b4a8:	e04e      	b.n	800b548 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b4aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4ae:	2b08      	cmp	r3, #8
 800b4b0:	d827      	bhi.n	800b502 <UART_SetConfig+0x3f2>
 800b4b2:	a201      	add	r2, pc, #4	; (adr r2, 800b4b8 <UART_SetConfig+0x3a8>)
 800b4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b8:	0800b4dd 	.word	0x0800b4dd
 800b4bc:	0800b4e5 	.word	0x0800b4e5
 800b4c0:	0800b4ed 	.word	0x0800b4ed
 800b4c4:	0800b503 	.word	0x0800b503
 800b4c8:	0800b4f3 	.word	0x0800b4f3
 800b4cc:	0800b503 	.word	0x0800b503
 800b4d0:	0800b503 	.word	0x0800b503
 800b4d4:	0800b503 	.word	0x0800b503
 800b4d8:	0800b4fb 	.word	0x0800b4fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4dc:	f7fe f9d6 	bl	800988c <HAL_RCC_GetPCLK1Freq>
 800b4e0:	61f8      	str	r0, [r7, #28]
        break;
 800b4e2:	e014      	b.n	800b50e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4e4:	f7fe f9e8 	bl	80098b8 <HAL_RCC_GetPCLK2Freq>
 800b4e8:	61f8      	str	r0, [r7, #28]
        break;
 800b4ea:	e010      	b.n	800b50e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b4ec:	4b1d      	ldr	r3, [pc, #116]	; (800b564 <UART_SetConfig+0x454>)
 800b4ee:	61fb      	str	r3, [r7, #28]
        break;
 800b4f0:	e00d      	b.n	800b50e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4f2:	f7fe f933 	bl	800975c <HAL_RCC_GetSysClockFreq>
 800b4f6:	61f8      	str	r0, [r7, #28]
        break;
 800b4f8:	e009      	b.n	800b50e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4fe:	61fb      	str	r3, [r7, #28]
        break;
 800b500:	e005      	b.n	800b50e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800b502:	2300      	movs	r3, #0
 800b504:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b50c:	bf00      	nop
    }

    if (pclk != 0U)
 800b50e:	69fb      	ldr	r3, [r7, #28]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d019      	beq.n	800b548 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	085a      	lsrs	r2, r3, #1
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	441a      	add	r2, r3
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	fbb2 f3f3 	udiv	r3, r2, r3
 800b526:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	2b0f      	cmp	r3, #15
 800b52c:	d909      	bls.n	800b542 <UART_SetConfig+0x432>
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b534:	d205      	bcs.n	800b542 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	b29a      	uxth	r2, r3
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	60da      	str	r2, [r3, #12]
 800b540:	e002      	b.n	800b548 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2200      	movs	r2, #0
 800b54c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b554:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3728      	adds	r7, #40	; 0x28
 800b55c:	46bd      	mov	sp, r7
 800b55e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b562:	bf00      	nop
 800b564:	00f42400 	.word	0x00f42400

0800b568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b574:	f003 0308 	and.w	r3, r3, #8
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00a      	beq.n	800b592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	430a      	orrs	r2, r1
 800b590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b596:	f003 0301 	and.w	r3, r3, #1
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d00a      	beq.n	800b5b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	430a      	orrs	r2, r1
 800b5b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b8:	f003 0302 	and.w	r3, r3, #2
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d00a      	beq.n	800b5d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	430a      	orrs	r2, r1
 800b5d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5da:	f003 0304 	and.w	r3, r3, #4
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00a      	beq.n	800b5f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	430a      	orrs	r2, r1
 800b5f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fc:	f003 0310 	and.w	r3, r3, #16
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00a      	beq.n	800b61a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	430a      	orrs	r2, r1
 800b618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61e:	f003 0320 	and.w	r3, r3, #32
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00a      	beq.n	800b63c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	430a      	orrs	r2, r1
 800b63a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b644:	2b00      	cmp	r3, #0
 800b646:	d01a      	beq.n	800b67e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	430a      	orrs	r2, r1
 800b65c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b666:	d10a      	bne.n	800b67e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	430a      	orrs	r2, r1
 800b67c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00a      	beq.n	800b6a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	430a      	orrs	r2, r1
 800b69e:	605a      	str	r2, [r3, #4]
  }
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b098      	sub	sp, #96	; 0x60
 800b6b0:	af02      	add	r7, sp, #8
 800b6b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b6bc:	f7f9 f89e 	bl	80047fc <HAL_GetTick>
 800b6c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f003 0308 	and.w	r3, r3, #8
 800b6cc:	2b08      	cmp	r3, #8
 800b6ce:	d12e      	bne.n	800b72e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b6d4:	9300      	str	r3, [sp, #0]
 800b6d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 f88c 	bl	800b7fc <UART_WaitOnFlagUntilTimeout>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d021      	beq.n	800b72e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f2:	e853 3f00 	ldrex	r3, [r3]
 800b6f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6fe:	653b      	str	r3, [r7, #80]	; 0x50
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	461a      	mov	r2, r3
 800b706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b708:	647b      	str	r3, [r7, #68]	; 0x44
 800b70a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b70e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b710:	e841 2300 	strex	r3, r2, [r1]
 800b714:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1e6      	bne.n	800b6ea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2220      	movs	r2, #32
 800b720:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b72a:	2303      	movs	r3, #3
 800b72c:	e062      	b.n	800b7f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f003 0304 	and.w	r3, r3, #4
 800b738:	2b04      	cmp	r3, #4
 800b73a:	d149      	bne.n	800b7d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b73c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b744:	2200      	movs	r2, #0
 800b746:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f856 	bl	800b7fc <UART_WaitOnFlagUntilTimeout>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d03c      	beq.n	800b7d0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75e:	e853 3f00 	ldrex	r3, [r3]
 800b762:	623b      	str	r3, [r7, #32]
   return(result);
 800b764:	6a3b      	ldr	r3, [r7, #32]
 800b766:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b76a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	461a      	mov	r2, r3
 800b772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b774:	633b      	str	r3, [r7, #48]	; 0x30
 800b776:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b778:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b77a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b77c:	e841 2300 	strex	r3, r2, [r1]
 800b780:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1e6      	bne.n	800b756 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3308      	adds	r3, #8
 800b78e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	e853 3f00 	ldrex	r3, [r3]
 800b796:	60fb      	str	r3, [r7, #12]
   return(result);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f023 0301 	bic.w	r3, r3, #1
 800b79e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	3308      	adds	r3, #8
 800b7a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7a8:	61fa      	str	r2, [r7, #28]
 800b7aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ac:	69b9      	ldr	r1, [r7, #24]
 800b7ae:	69fa      	ldr	r2, [r7, #28]
 800b7b0:	e841 2300 	strex	r3, r2, [r1]
 800b7b4:	617b      	str	r3, [r7, #20]
   return(result);
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1e5      	bne.n	800b788 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2220      	movs	r2, #32
 800b7c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7cc:	2303      	movs	r3, #3
 800b7ce:	e011      	b.n	800b7f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2220      	movs	r2, #32
 800b7d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2220      	movs	r2, #32
 800b7da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3758      	adds	r7, #88	; 0x58
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	603b      	str	r3, [r7, #0]
 800b808:	4613      	mov	r3, r2
 800b80a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b80c:	e049      	b.n	800b8a2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b814:	d045      	beq.n	800b8a2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b816:	f7f8 fff1 	bl	80047fc <HAL_GetTick>
 800b81a:	4602      	mov	r2, r0
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	69ba      	ldr	r2, [r7, #24]
 800b822:	429a      	cmp	r2, r3
 800b824:	d302      	bcc.n	800b82c <UART_WaitOnFlagUntilTimeout+0x30>
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b82c:	2303      	movs	r3, #3
 800b82e:	e048      	b.n	800b8c2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f003 0304 	and.w	r3, r3, #4
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d031      	beq.n	800b8a2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	69db      	ldr	r3, [r3, #28]
 800b844:	f003 0308 	and.w	r3, r3, #8
 800b848:	2b08      	cmp	r3, #8
 800b84a:	d110      	bne.n	800b86e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2208      	movs	r2, #8
 800b852:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f000 f8ff 	bl	800ba58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2208      	movs	r2, #8
 800b85e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2200      	movs	r2, #0
 800b866:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800b86a:	2301      	movs	r3, #1
 800b86c:	e029      	b.n	800b8c2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	69db      	ldr	r3, [r3, #28]
 800b874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b87c:	d111      	bne.n	800b8a2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b886:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f000 f8e5 	bl	800ba58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2220      	movs	r2, #32
 800b892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2200      	movs	r2, #0
 800b89a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b89e:	2303      	movs	r3, #3
 800b8a0:	e00f      	b.n	800b8c2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	69da      	ldr	r2, [r3, #28]
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	4013      	ands	r3, r2
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	bf0c      	ite	eq
 800b8b2:	2301      	moveq	r3, #1
 800b8b4:	2300      	movne	r3, #0
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	79fb      	ldrb	r3, [r7, #7]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d0a6      	beq.n	800b80e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b8c0:	2300      	movs	r3, #0
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
	...

0800b8cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b096      	sub	sp, #88	; 0x58
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	88fa      	ldrh	r2, [r7, #6]
 800b8e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2222      	movs	r2, #34	; 0x22
 800b8f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d028      	beq.n	800b952 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b904:	4a3e      	ldr	r2, [pc, #248]	; (800ba00 <UART_Start_Receive_DMA+0x134>)
 800b906:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b90c:	4a3d      	ldr	r2, [pc, #244]	; (800ba04 <UART_Start_Receive_DMA+0x138>)
 800b90e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b914:	4a3c      	ldr	r2, [pc, #240]	; (800ba08 <UART_Start_Receive_DMA+0x13c>)
 800b916:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b91c:	2200      	movs	r2, #0
 800b91e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	3324      	adds	r3, #36	; 0x24
 800b92a:	4619      	mov	r1, r3
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b930:	461a      	mov	r2, r3
 800b932:	88fb      	ldrh	r3, [r7, #6]
 800b934:	f7fa fbfc 	bl	8006130 <HAL_DMA_Start_IT>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d009      	beq.n	800b952 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2210      	movs	r2, #16
 800b942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2220      	movs	r2, #32
 800b94a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	e051      	b.n	800b9f6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	691b      	ldr	r3, [r3, #16]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d018      	beq.n	800b98c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b962:	e853 3f00 	ldrex	r3, [r3]
 800b966:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b96e:	657b      	str	r3, [r7, #84]	; 0x54
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	461a      	mov	r2, r3
 800b976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b978:	64bb      	str	r3, [r7, #72]	; 0x48
 800b97a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b97e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b980:	e841 2300 	strex	r3, r2, [r1]
 800b984:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1e6      	bne.n	800b95a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	3308      	adds	r3, #8
 800b992:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b996:	e853 3f00 	ldrex	r3, [r3]
 800b99a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99e:	f043 0301 	orr.w	r3, r3, #1
 800b9a2:	653b      	str	r3, [r7, #80]	; 0x50
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	3308      	adds	r3, #8
 800b9aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9ac:	637a      	str	r2, [r7, #52]	; 0x34
 800b9ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b9b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9b4:	e841 2300 	strex	r3, r2, [r1]
 800b9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1e5      	bne.n	800b98c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	3308      	adds	r3, #8
 800b9c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	e853 3f00 	ldrex	r3, [r3]
 800b9ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	3308      	adds	r3, #8
 800b9de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b9e0:	623a      	str	r2, [r7, #32]
 800b9e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e4:	69f9      	ldr	r1, [r7, #28]
 800b9e6:	6a3a      	ldr	r2, [r7, #32]
 800b9e8:	e841 2300 	strex	r3, r2, [r1]
 800b9ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d1e5      	bne.n	800b9c0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3758      	adds	r7, #88	; 0x58
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	0800bb21 	.word	0x0800bb21
 800ba04:	0800bc4d 	.word	0x0800bc4d
 800ba08:	0800bc8b 	.word	0x0800bc8b

0800ba0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b089      	sub	sp, #36	; 0x24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	e853 3f00 	ldrex	r3, [r3]
 800ba20:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ba28:	61fb      	str	r3, [r7, #28]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	61bb      	str	r3, [r7, #24]
 800ba34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba36:	6979      	ldr	r1, [r7, #20]
 800ba38:	69ba      	ldr	r2, [r7, #24]
 800ba3a:	e841 2300 	strex	r3, r2, [r1]
 800ba3e:	613b      	str	r3, [r7, #16]
   return(result);
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1e6      	bne.n	800ba14 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2220      	movs	r2, #32
 800ba4a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800ba4c:	bf00      	nop
 800ba4e:	3724      	adds	r7, #36	; 0x24
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b095      	sub	sp, #84	; 0x54
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba68:	e853 3f00 	ldrex	r3, [r3]
 800ba6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba7e:	643b      	str	r3, [r7, #64]	; 0x40
 800ba80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba86:	e841 2300 	strex	r3, r2, [r1]
 800ba8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d1e6      	bne.n	800ba60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	3308      	adds	r3, #8
 800ba98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9a:	6a3b      	ldr	r3, [r7, #32]
 800ba9c:	e853 3f00 	ldrex	r3, [r3]
 800baa0:	61fb      	str	r3, [r7, #28]
   return(result);
 800baa2:	69fb      	ldr	r3, [r7, #28]
 800baa4:	f023 0301 	bic.w	r3, r3, #1
 800baa8:	64bb      	str	r3, [r7, #72]	; 0x48
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	3308      	adds	r3, #8
 800bab0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bab2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bab4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baba:	e841 2300 	strex	r3, r2, [r1]
 800babe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1e5      	bne.n	800ba92 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d118      	bne.n	800bb00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	e853 3f00 	ldrex	r3, [r3]
 800bada:	60bb      	str	r3, [r7, #8]
   return(result);
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	f023 0310 	bic.w	r3, r3, #16
 800bae2:	647b      	str	r3, [r7, #68]	; 0x44
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	461a      	mov	r2, r3
 800baea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baec:	61bb      	str	r3, [r7, #24]
 800baee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf0:	6979      	ldr	r1, [r7, #20]
 800baf2:	69ba      	ldr	r2, [r7, #24]
 800baf4:	e841 2300 	strex	r3, r2, [r1]
 800baf8:	613b      	str	r3, [r7, #16]
   return(result);
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1e6      	bne.n	800bace <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2220      	movs	r2, #32
 800bb04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	669a      	str	r2, [r3, #104]	; 0x68
}
 800bb14:	bf00      	nop
 800bb16:	3754      	adds	r7, #84	; 0x54
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b09c      	sub	sp, #112	; 0x70
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb2c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f003 0320 	and.w	r3, r3, #32
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d171      	bne.n	800bc20 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800bb3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb4c:	e853 3f00 	ldrex	r3, [r3]
 800bb50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bb52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb58:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb62:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb64:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb6a:	e841 2300 	strex	r3, r2, [r1]
 800bb6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1e6      	bne.n	800bb44 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	3308      	adds	r3, #8
 800bb7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb80:	e853 3f00 	ldrex	r3, [r3]
 800bb84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb88:	f023 0301 	bic.w	r3, r3, #1
 800bb8c:	667b      	str	r3, [r7, #100]	; 0x64
 800bb8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	3308      	adds	r3, #8
 800bb94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb96:	647a      	str	r2, [r7, #68]	; 0x44
 800bb98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb9e:	e841 2300 	strex	r3, r2, [r1]
 800bba2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1e5      	bne.n	800bb76 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	3308      	adds	r3, #8
 800bbb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb4:	e853 3f00 	ldrex	r3, [r3]
 800bbb8:	623b      	str	r3, [r7, #32]
   return(result);
 800bbba:	6a3b      	ldr	r3, [r7, #32]
 800bbbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbc0:	663b      	str	r3, [r7, #96]	; 0x60
 800bbc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	3308      	adds	r3, #8
 800bbc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bbca:	633a      	str	r2, [r7, #48]	; 0x30
 800bbcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbd2:	e841 2300 	strex	r3, r2, [r1]
 800bbd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1e5      	bne.n	800bbaa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bbde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbe0:	2220      	movs	r2, #32
 800bbe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d118      	bne.n	800bc20 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	e853 3f00 	ldrex	r3, [r3]
 800bbfa:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f023 0310 	bic.w	r3, r3, #16
 800bc02:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	461a      	mov	r2, r3
 800bc0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc0c:	61fb      	str	r3, [r7, #28]
 800bc0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc10:	69b9      	ldr	r1, [r7, #24]
 800bc12:	69fa      	ldr	r2, [r7, #28]
 800bc14:	e841 2300 	strex	r3, r2, [r1]
 800bc18:	617b      	str	r3, [r7, #20]
   return(result);
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d1e6      	bne.n	800bbee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc22:	2200      	movs	r2, #0
 800bc24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d107      	bne.n	800bc3e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bc34:	4619      	mov	r1, r3
 800bc36:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bc38:	f7ff fa5e 	bl	800b0f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc3c:	e002      	b.n	800bc44 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800bc3e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bc40:	f7f5 fa76 	bl	8001130 <HAL_UART_RxCpltCallback>
}
 800bc44:	bf00      	nop
 800bc46:	3770      	adds	r7, #112	; 0x70
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc58:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d109      	bne.n	800bc7c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bc6e:	085b      	lsrs	r3, r3, #1
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	4619      	mov	r1, r3
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f7ff fa3f 	bl	800b0f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc7a:	e002      	b.n	800bc82 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f7ff fa27 	bl	800b0d0 <HAL_UART_RxHalfCpltCallback>
}
 800bc82:	bf00      	nop
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b086      	sub	sp, #24
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc96:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc9c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bca4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcb0:	2b80      	cmp	r3, #128	; 0x80
 800bcb2:	d109      	bne.n	800bcc8 <UART_DMAError+0x3e>
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	2b21      	cmp	r3, #33	; 0x21
 800bcb8:	d106      	bne.n	800bcc8 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800bcc2:	6978      	ldr	r0, [r7, #20]
 800bcc4:	f7ff fea2 	bl	800ba0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcd2:	2b40      	cmp	r3, #64	; 0x40
 800bcd4:	d109      	bne.n	800bcea <UART_DMAError+0x60>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2b22      	cmp	r3, #34	; 0x22
 800bcda:	d106      	bne.n	800bcea <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800bce4:	6978      	ldr	r0, [r7, #20]
 800bce6:	f7ff feb7 	bl	800ba58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcf0:	f043 0210 	orr.w	r2, r3, #16
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bcfa:	6978      	ldr	r0, [r7, #20]
 800bcfc:	f7ff f9f2 	bl	800b0e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd00:	bf00      	nop
 800bd02:	3718      	adds	r7, #24
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2200      	movs	r2, #0
 800bd22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f7ff f9dc 	bl	800b0e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd2c:	bf00      	nop
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b088      	sub	sp, #32
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	e853 3f00 	ldrex	r3, [r3]
 800bd48:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd50:	61fb      	str	r3, [r7, #28]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	461a      	mov	r2, r3
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	61bb      	str	r3, [r7, #24]
 800bd5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5e:	6979      	ldr	r1, [r7, #20]
 800bd60:	69ba      	ldr	r2, [r7, #24]
 800bd62:	e841 2300 	strex	r3, r2, [r1]
 800bd66:	613b      	str	r3, [r7, #16]
   return(result);
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1e6      	bne.n	800bd3c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2220      	movs	r2, #32
 800bd72:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2200      	movs	r2, #0
 800bd78:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f7ff f99e 	bl	800b0bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd80:	bf00      	nop
 800bd82:	3720      	adds	r7, #32
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bd90:	bf00      	nop
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bd9c:	b084      	sub	sp, #16
 800bd9e:	b480      	push	{r7}
 800bda0:	b083      	sub	sp, #12
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
 800bda6:	f107 0014 	add.w	r0, r7, #20
 800bdaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800bdae:	2300      	movs	r3, #0
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	b004      	add	sp, #16
 800bdbc:	4770      	bx	lr

0800bdbe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800bdbe:	b480      	push	{r7}
 800bdc0:	b085      	sub	sp, #20
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bdce:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800bdd2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bdde:	2300      	movs	r3, #0
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3714      	adds	r7, #20
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b085      	sub	sp, #20
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bdf4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800bdf8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800be00:	b29a      	uxth	r2, r3
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	b29b      	uxth	r3, r3
 800be06:	43db      	mvns	r3, r3
 800be08:	b29b      	uxth	r3, r3
 800be0a:	4013      	ands	r3, r2
 800be0c:	b29a      	uxth	r2, r3
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800be14:	2300      	movs	r3, #0
}
 800be16:	4618      	mov	r0, r3
 800be18:	3714      	adds	r7, #20
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr

0800be22 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800be22:	b480      	push	{r7}
 800be24:	b083      	sub	sp, #12
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
 800be2a:	460b      	mov	r3, r1
 800be2c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	370c      	adds	r7, #12
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr

0800be3c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800be3c:	b084      	sub	sp, #16
 800be3e:	b480      	push	{r7}
 800be40:	b083      	sub	sp, #12
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
 800be46:	f107 0014 	add.w	r0, r7, #20
 800be4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2201      	movs	r2, #1
 800be52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	b004      	add	sp, #16
 800be7c:	4770      	bx	lr
	...

0800be80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800be80:	b480      	push	{r7}
 800be82:	b09d      	sub	sp, #116	; 0x74
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800be8a:	2300      	movs	r3, #0
 800be8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	4413      	add	r3, r2
 800be9a:	881b      	ldrh	r3, [r3, #0]
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800bea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bea6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	78db      	ldrb	r3, [r3, #3]
 800beae:	2b03      	cmp	r3, #3
 800beb0:	d81f      	bhi.n	800bef2 <USB_ActivateEndpoint+0x72>
 800beb2:	a201      	add	r2, pc, #4	; (adr r2, 800beb8 <USB_ActivateEndpoint+0x38>)
 800beb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb8:	0800bec9 	.word	0x0800bec9
 800bebc:	0800bee5 	.word	0x0800bee5
 800bec0:	0800befb 	.word	0x0800befb
 800bec4:	0800bed7 	.word	0x0800bed7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bec8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800becc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bed0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800bed4:	e012      	b.n	800befc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bed6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800beda:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800bede:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800bee2:	e00b      	b.n	800befc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bee4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bee8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800beec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800bef0:	e004      	b.n	800befc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800bef8:	e000      	b.n	800befc <USB_ActivateEndpoint+0x7c>
      break;
 800befa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	441a      	add	r2, r3
 800bf06:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bf0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	4413      	add	r3, r2
 800bf28:	881b      	ldrh	r3, [r3, #0]
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	b21b      	sxth	r3, r3
 800bf2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf36:	b21a      	sxth	r2, r3
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	b21b      	sxth	r3, r3
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	b21b      	sxth	r3, r3
 800bf42:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	441a      	add	r2, r3
 800bf50:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800bf54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	7b1b      	ldrb	r3, [r3, #12]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f040 8178 	bne.w	800c262 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	785b      	ldrb	r3, [r3, #1]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f000 8084 	beq.w	800c084 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	61bb      	str	r3, [r7, #24]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	461a      	mov	r2, r3
 800bf8a:	69bb      	ldr	r3, [r7, #24]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	61bb      	str	r3, [r7, #24]
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	00da      	lsls	r2, r3, #3
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	4413      	add	r3, r2
 800bf9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf9e:	617b      	str	r3, [r7, #20]
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	88db      	ldrh	r3, [r3, #6]
 800bfa4:	085b      	lsrs	r3, r3, #1
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	005b      	lsls	r3, r3, #1
 800bfaa:	b29a      	uxth	r2, r3
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	4413      	add	r3, r2
 800bfba:	881b      	ldrh	r3, [r3, #0]
 800bfbc:	827b      	strh	r3, [r7, #18]
 800bfbe:	8a7b      	ldrh	r3, [r7, #18]
 800bfc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d01b      	beq.n	800c000 <USB_ActivateEndpoint+0x180>
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	4413      	add	r3, r2
 800bfd2:	881b      	ldrh	r3, [r3, #0]
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bfda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfde:	823b      	strh	r3, [r7, #16]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	441a      	add	r2, r3
 800bfea:	8a3b      	ldrh	r3, [r7, #16]
 800bfec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bff8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	78db      	ldrb	r3, [r3, #3]
 800c004:	2b01      	cmp	r3, #1
 800c006:	d020      	beq.n	800c04a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	4413      	add	r3, r2
 800c012:	881b      	ldrh	r3, [r3, #0]
 800c014:	b29b      	uxth	r3, r3
 800c016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c01a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c01e:	81bb      	strh	r3, [r7, #12]
 800c020:	89bb      	ldrh	r3, [r7, #12]
 800c022:	f083 0320 	eor.w	r3, r3, #32
 800c026:	81bb      	strh	r3, [r7, #12]
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	441a      	add	r2, r3
 800c032:	89bb      	ldrh	r3, [r7, #12]
 800c034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c03c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c044:	b29b      	uxth	r3, r3
 800c046:	8013      	strh	r3, [r2, #0]
 800c048:	e2d5      	b.n	800c5f6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	4413      	add	r3, r2
 800c054:	881b      	ldrh	r3, [r3, #0]
 800c056:	b29b      	uxth	r3, r3
 800c058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c05c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c060:	81fb      	strh	r3, [r7, #14]
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	441a      	add	r2, r3
 800c06c:	89fb      	ldrh	r3, [r7, #14]
 800c06e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c07a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c07e:	b29b      	uxth	r3, r3
 800c080:	8013      	strh	r3, [r2, #0]
 800c082:	e2b8      	b.n	800c5f6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	633b      	str	r3, [r7, #48]	; 0x30
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c08e:	b29b      	uxth	r3, r3
 800c090:	461a      	mov	r2, r3
 800c092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c094:	4413      	add	r3, r2
 800c096:	633b      	str	r3, [r7, #48]	; 0x30
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	00da      	lsls	r2, r3, #3
 800c09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a0:	4413      	add	r3, r2
 800c0a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	88db      	ldrh	r3, [r3, #6]
 800c0ac:	085b      	lsrs	r3, r3, #1
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	005b      	lsls	r3, r3, #1
 800c0b2:	b29a      	uxth	r2, r3
 800c0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c8:	4413      	add	r3, r2
 800c0ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	00da      	lsls	r2, r3, #3
 800c0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d4:	4413      	add	r3, r2
 800c0d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c0da:	627b      	str	r3, [r7, #36]	; 0x24
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0de:	881b      	ldrh	r3, [r3, #0]
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ea:	801a      	strh	r2, [r3, #0]
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	691b      	ldr	r3, [r3, #16]
 800c0f0:	2b3e      	cmp	r3, #62	; 0x3e
 800c0f2:	d91d      	bls.n	800c130 <USB_ActivateEndpoint+0x2b0>
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	691b      	ldr	r3, [r3, #16]
 800c0f8:	095b      	lsrs	r3, r3, #5
 800c0fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	691b      	ldr	r3, [r3, #16]
 800c100:	f003 031f 	and.w	r3, r3, #31
 800c104:	2b00      	cmp	r3, #0
 800c106:	d102      	bne.n	800c10e <USB_ActivateEndpoint+0x28e>
 800c108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c10a:	3b01      	subs	r3, #1
 800c10c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c110:	881b      	ldrh	r3, [r3, #0]
 800c112:	b29a      	uxth	r2, r3
 800c114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c116:	b29b      	uxth	r3, r3
 800c118:	029b      	lsls	r3, r3, #10
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	4313      	orrs	r3, r2
 800c11e:	b29b      	uxth	r3, r3
 800c120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c128:	b29a      	uxth	r2, r3
 800c12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12c:	801a      	strh	r2, [r3, #0]
 800c12e:	e026      	b.n	800c17e <USB_ActivateEndpoint+0x2fe>
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	691b      	ldr	r3, [r3, #16]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10a      	bne.n	800c14e <USB_ActivateEndpoint+0x2ce>
 800c138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c146:	b29a      	uxth	r2, r3
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	801a      	strh	r2, [r3, #0]
 800c14c:	e017      	b.n	800c17e <USB_ActivateEndpoint+0x2fe>
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	691b      	ldr	r3, [r3, #16]
 800c152:	085b      	lsrs	r3, r3, #1
 800c154:	66bb      	str	r3, [r7, #104]	; 0x68
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d002      	beq.n	800c168 <USB_ActivateEndpoint+0x2e8>
 800c162:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c164:	3301      	adds	r3, #1
 800c166:	66bb      	str	r3, [r7, #104]	; 0x68
 800c168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16a:	881b      	ldrh	r3, [r3, #0]
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c170:	b29b      	uxth	r3, r3
 800c172:	029b      	lsls	r3, r3, #10
 800c174:	b29b      	uxth	r3, r3
 800c176:	4313      	orrs	r3, r2
 800c178:	b29a      	uxth	r2, r3
 800c17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	4413      	add	r3, r2
 800c188:	881b      	ldrh	r3, [r3, #0]
 800c18a:	847b      	strh	r3, [r7, #34]	; 0x22
 800c18c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c18e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c192:	2b00      	cmp	r3, #0
 800c194:	d01b      	beq.n	800c1ce <USB_ActivateEndpoint+0x34e>
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	4413      	add	r3, r2
 800c1a0:	881b      	ldrh	r3, [r3, #0]
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1ac:	843b      	strh	r3, [r7, #32]
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	441a      	add	r2, r3
 800c1b8:	8c3b      	ldrh	r3, [r7, #32]
 800c1ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c1c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d124      	bne.n	800c220 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	4413      	add	r3, r2
 800c1e0:	881b      	ldrh	r3, [r3, #0]
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c1e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1ec:	83bb      	strh	r3, [r7, #28]
 800c1ee:	8bbb      	ldrh	r3, [r7, #28]
 800c1f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c1f4:	83bb      	strh	r3, [r7, #28]
 800c1f6:	8bbb      	ldrh	r3, [r7, #28]
 800c1f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c1fc:	83bb      	strh	r3, [r7, #28]
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	441a      	add	r2, r3
 800c208:	8bbb      	ldrh	r3, [r7, #28]
 800c20a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c20e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	8013      	strh	r3, [r2, #0]
 800c21e:	e1ea      	b.n	800c5f6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	4413      	add	r3, r2
 800c22a:	881b      	ldrh	r3, [r3, #0]
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c236:	83fb      	strh	r3, [r7, #30]
 800c238:	8bfb      	ldrh	r3, [r7, #30]
 800c23a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c23e:	83fb      	strh	r3, [r7, #30]
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	441a      	add	r2, r3
 800c24a:	8bfb      	ldrh	r3, [r7, #30]
 800c24c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	8013      	strh	r3, [r2, #0]
 800c260:	e1c9      	b.n	800c5f6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	78db      	ldrb	r3, [r3, #3]
 800c266:	2b02      	cmp	r3, #2
 800c268:	d11e      	bne.n	800c2a8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	4413      	add	r3, r2
 800c274:	881b      	ldrh	r3, [r3, #0]
 800c276:	b29b      	uxth	r3, r3
 800c278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c27c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c280:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	441a      	add	r2, r3
 800c28e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c29a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c29e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	8013      	strh	r3, [r2, #0]
 800c2a6:	e01d      	b.n	800c2e4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	881b      	ldrh	r3, [r3, #0]
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800c2ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2be:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	441a      	add	r2, r3
 800c2cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800c2d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2f4:	4413      	add	r3, r2
 800c2f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	00da      	lsls	r2, r3, #3
 800c2fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c300:	4413      	add	r3, r2
 800c302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c306:	65bb      	str	r3, [r7, #88]	; 0x58
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	891b      	ldrh	r3, [r3, #8]
 800c30c:	085b      	lsrs	r3, r3, #1
 800c30e:	b29b      	uxth	r3, r3
 800c310:	005b      	lsls	r3, r3, #1
 800c312:	b29a      	uxth	r2, r3
 800c314:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c316:	801a      	strh	r2, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	657b      	str	r3, [r7, #84]	; 0x54
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c322:	b29b      	uxth	r3, r3
 800c324:	461a      	mov	r2, r3
 800c326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c328:	4413      	add	r3, r2
 800c32a:	657b      	str	r3, [r7, #84]	; 0x54
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	00da      	lsls	r2, r3, #3
 800c332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c334:	4413      	add	r3, r2
 800c336:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c33a:	653b      	str	r3, [r7, #80]	; 0x50
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	895b      	ldrh	r3, [r3, #10]
 800c340:	085b      	lsrs	r3, r3, #1
 800c342:	b29b      	uxth	r3, r3
 800c344:	005b      	lsls	r3, r3, #1
 800c346:	b29a      	uxth	r2, r3
 800c348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c34a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	785b      	ldrb	r3, [r3, #1]
 800c350:	2b00      	cmp	r3, #0
 800c352:	f040 8093 	bne.w	800c47c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	4413      	add	r3, r2
 800c360:	881b      	ldrh	r3, [r3, #0]
 800c362:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c366:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c36a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d01b      	beq.n	800c3aa <USB_ActivateEndpoint+0x52a>
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	881b      	ldrh	r3, [r3, #0]
 800c37e:	b29b      	uxth	r3, r3
 800c380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c388:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	441a      	add	r2, r3
 800c394:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c39a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c39e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c3a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	4413      	add	r3, r2
 800c3b4:	881b      	ldrh	r3, [r3, #0]
 800c3b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c3b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c3ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d01b      	beq.n	800c3fa <USB_ActivateEndpoint+0x57a>
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	4413      	add	r3, r2
 800c3cc:	881b      	ldrh	r3, [r3, #0]
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3d8:	877b      	strh	r3, [r7, #58]	; 0x3a
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	441a      	add	r2, r3
 800c3e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c3e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	4413      	add	r3, r2
 800c404:	881b      	ldrh	r3, [r3, #0]
 800c406:	b29b      	uxth	r3, r3
 800c408:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c40c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c410:	873b      	strh	r3, [r7, #56]	; 0x38
 800c412:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c414:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c418:	873b      	strh	r3, [r7, #56]	; 0x38
 800c41a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c41c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c420:	873b      	strh	r3, [r7, #56]	; 0x38
 800c422:	687a      	ldr	r2, [r7, #4]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	441a      	add	r2, r3
 800c42c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c42e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c43a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c43e:	b29b      	uxth	r3, r3
 800c440:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	4413      	add	r3, r2
 800c44c:	881b      	ldrh	r3, [r3, #0]
 800c44e:	b29b      	uxth	r3, r3
 800c450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c458:	86fb      	strh	r3, [r7, #54]	; 0x36
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	009b      	lsls	r3, r3, #2
 800c462:	441a      	add	r2, r3
 800c464:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c46a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c46e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c476:	b29b      	uxth	r3, r3
 800c478:	8013      	strh	r3, [r2, #0]
 800c47a:	e0bc      	b.n	800c5f6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	4413      	add	r3, r2
 800c486:	881b      	ldrh	r3, [r3, #0]
 800c488:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800c48c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c494:	2b00      	cmp	r3, #0
 800c496:	d01d      	beq.n	800c4d4 <USB_ActivateEndpoint+0x654>
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	4413      	add	r3, r2
 800c4a2:	881b      	ldrh	r3, [r3, #0]
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4ae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	441a      	add	r2, r3
 800c4bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c4c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c4cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	4413      	add	r3, r2
 800c4de:	881b      	ldrh	r3, [r3, #0]
 800c4e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c4e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d01d      	beq.n	800c52c <USB_ActivateEndpoint+0x6ac>
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	4413      	add	r3, r2
 800c4fa:	881b      	ldrh	r3, [r3, #0]
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c506:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	009b      	lsls	r3, r3, #2
 800c512:	441a      	add	r2, r3
 800c514:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c51c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c524:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c528:	b29b      	uxth	r3, r3
 800c52a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	78db      	ldrb	r3, [r3, #3]
 800c530:	2b01      	cmp	r3, #1
 800c532:	d024      	beq.n	800c57e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	4413      	add	r3, r2
 800c53e:	881b      	ldrh	r3, [r3, #0]
 800c540:	b29b      	uxth	r3, r3
 800c542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c54a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c54e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c552:	f083 0320 	eor.w	r3, r3, #32
 800c556:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	441a      	add	r2, r3
 800c564:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c56c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c578:	b29b      	uxth	r3, r3
 800c57a:	8013      	strh	r3, [r2, #0]
 800c57c:	e01d      	b.n	800c5ba <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	4413      	add	r3, r2
 800c588:	881b      	ldrh	r3, [r3, #0]
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c594:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	441a      	add	r2, r3
 800c5a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c5a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	4413      	add	r3, r2
 800c5c4:	881b      	ldrh	r3, [r3, #0]
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c5cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	441a      	add	r2, r3
 800c5de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c5e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c5f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3774      	adds	r7, #116	; 0x74
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr
 800c606:	bf00      	nop

0800c608 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c608:	b480      	push	{r7}
 800c60a:	b08d      	sub	sp, #52	; 0x34
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	7b1b      	ldrb	r3, [r3, #12]
 800c616:	2b00      	cmp	r3, #0
 800c618:	f040 808e 	bne.w	800c738 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	785b      	ldrb	r3, [r3, #1]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d044      	beq.n	800c6ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	4413      	add	r3, r2
 800c62e:	881b      	ldrh	r3, [r3, #0]
 800c630:	81bb      	strh	r3, [r7, #12]
 800c632:	89bb      	ldrh	r3, [r7, #12]
 800c634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d01b      	beq.n	800c674 <USB_DeactivateEndpoint+0x6c>
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	009b      	lsls	r3, r3, #2
 800c644:	4413      	add	r3, r2
 800c646:	881b      	ldrh	r3, [r3, #0]
 800c648:	b29b      	uxth	r3, r3
 800c64a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c64e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c652:	817b      	strh	r3, [r7, #10]
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	441a      	add	r2, r3
 800c65e:	897b      	ldrh	r3, [r7, #10]
 800c660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c66c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c670:	b29b      	uxth	r3, r3
 800c672:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	4413      	add	r3, r2
 800c67e:	881b      	ldrh	r3, [r3, #0]
 800c680:	b29b      	uxth	r3, r3
 800c682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c68a:	813b      	strh	r3, [r7, #8]
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	441a      	add	r2, r3
 800c696:	893b      	ldrh	r3, [r7, #8]
 800c698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c69c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	8013      	strh	r3, [r2, #0]
 800c6ac:	e192      	b.n	800c9d4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	4413      	add	r3, r2
 800c6b8:	881b      	ldrh	r3, [r3, #0]
 800c6ba:	827b      	strh	r3, [r7, #18]
 800c6bc:	8a7b      	ldrh	r3, [r7, #18]
 800c6be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d01b      	beq.n	800c6fe <USB_DeactivateEndpoint+0xf6>
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	4413      	add	r3, r2
 800c6d0:	881b      	ldrh	r3, [r3, #0]
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6dc:	823b      	strh	r3, [r7, #16]
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	441a      	add	r2, r3
 800c6e8:	8a3b      	ldrh	r3, [r7, #16]
 800c6ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c6f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	4413      	add	r3, r2
 800c708:	881b      	ldrh	r3, [r3, #0]
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c714:	81fb      	strh	r3, [r7, #14]
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	441a      	add	r2, r3
 800c720:	89fb      	ldrh	r3, [r7, #14]
 800c722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c72a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c72e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c732:	b29b      	uxth	r3, r3
 800c734:	8013      	strh	r3, [r2, #0]
 800c736:	e14d      	b.n	800c9d4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	785b      	ldrb	r3, [r3, #1]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f040 80a5 	bne.w	800c88c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	4413      	add	r3, r2
 800c74c:	881b      	ldrh	r3, [r3, #0]
 800c74e:	843b      	strh	r3, [r7, #32]
 800c750:	8c3b      	ldrh	r3, [r7, #32]
 800c752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c756:	2b00      	cmp	r3, #0
 800c758:	d01b      	beq.n	800c792 <USB_DeactivateEndpoint+0x18a>
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	009b      	lsls	r3, r3, #2
 800c762:	4413      	add	r3, r2
 800c764:	881b      	ldrh	r3, [r3, #0]
 800c766:	b29b      	uxth	r3, r3
 800c768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c76c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c770:	83fb      	strh	r3, [r7, #30]
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	441a      	add	r2, r3
 800c77c:	8bfb      	ldrh	r3, [r7, #30]
 800c77e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c786:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c78a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c78e:	b29b      	uxth	r3, r3
 800c790:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	4413      	add	r3, r2
 800c79c:	881b      	ldrh	r3, [r3, #0]
 800c79e:	83bb      	strh	r3, [r7, #28]
 800c7a0:	8bbb      	ldrh	r3, [r7, #28]
 800c7a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d01b      	beq.n	800c7e2 <USB_DeactivateEndpoint+0x1da>
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	4413      	add	r3, r2
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7c0:	837b      	strh	r3, [r7, #26]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	441a      	add	r2, r3
 800c7cc:	8b7b      	ldrh	r3, [r7, #26]
 800c7ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	4413      	add	r3, r2
 800c7ec:	881b      	ldrh	r3, [r3, #0]
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7f8:	833b      	strh	r3, [r7, #24]
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	009b      	lsls	r3, r3, #2
 800c802:	441a      	add	r2, r3
 800c804:	8b3b      	ldrh	r3, [r7, #24]
 800c806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c80a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c80e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c812:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c816:	b29b      	uxth	r3, r3
 800c818:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	4413      	add	r3, r2
 800c824:	881b      	ldrh	r3, [r3, #0]
 800c826:	b29b      	uxth	r3, r3
 800c828:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c82c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c830:	82fb      	strh	r3, [r7, #22]
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	441a      	add	r2, r3
 800c83c:	8afb      	ldrh	r3, [r7, #22]
 800c83e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c84a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c84e:	b29b      	uxth	r3, r3
 800c850:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	4413      	add	r3, r2
 800c85c:	881b      	ldrh	r3, [r3, #0]
 800c85e:	b29b      	uxth	r3, r3
 800c860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c868:	82bb      	strh	r3, [r7, #20]
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	441a      	add	r2, r3
 800c874:	8abb      	ldrh	r3, [r7, #20]
 800c876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c87a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c87e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c886:	b29b      	uxth	r3, r3
 800c888:	8013      	strh	r3, [r2, #0]
 800c88a:	e0a3      	b.n	800c9d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	4413      	add	r3, r2
 800c896:	881b      	ldrh	r3, [r3, #0]
 800c898:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c89a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c89c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d01b      	beq.n	800c8dc <USB_DeactivateEndpoint+0x2d4>
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	4413      	add	r3, r2
 800c8ae:	881b      	ldrh	r3, [r3, #0]
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	441a      	add	r2, r3
 800c8c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c8c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c8cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c8d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c8d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	4413      	add	r3, r2
 800c8e6:	881b      	ldrh	r3, [r3, #0]
 800c8e8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c8ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c8ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d01b      	beq.n	800c92c <USB_DeactivateEndpoint+0x324>
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	4413      	add	r3, r2
 800c8fe:	881b      	ldrh	r3, [r3, #0]
 800c900:	b29b      	uxth	r3, r3
 800c902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c90a:	853b      	strh	r3, [r7, #40]	; 0x28
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	009b      	lsls	r3, r3, #2
 800c914:	441a      	add	r2, r3
 800c916:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c91c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c924:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c928:	b29b      	uxth	r3, r3
 800c92a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	4413      	add	r3, r2
 800c936:	881b      	ldrh	r3, [r3, #0]
 800c938:	b29b      	uxth	r3, r3
 800c93a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c93e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c942:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c944:	687a      	ldr	r2, [r7, #4]
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	441a      	add	r2, r3
 800c94e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c958:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c95c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c960:	b29b      	uxth	r3, r3
 800c962:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	009b      	lsls	r3, r3, #2
 800c96c:	4413      	add	r3, r2
 800c96e:	881b      	ldrh	r3, [r3, #0]
 800c970:	b29b      	uxth	r3, r3
 800c972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c97a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	441a      	add	r2, r3
 800c986:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c98c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c998:	b29b      	uxth	r3, r3
 800c99a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	4413      	add	r3, r2
 800c9a6:	881b      	ldrh	r3, [r3, #0]
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c9ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9b2:	847b      	strh	r3, [r7, #34]	; 0x22
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	441a      	add	r2, r3
 800c9be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c9d4:	2300      	movs	r3, #0
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3734      	adds	r7, #52	; 0x34
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr

0800c9e2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b0c2      	sub	sp, #264	; 0x108
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9f0:	6018      	str	r0, [r3, #0]
 800c9f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9fa:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c9fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	785b      	ldrb	r3, [r3, #1]
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	f040 86b7 	bne.w	800d77c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ca0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	699a      	ldr	r2, [r3, #24]
 800ca1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	691b      	ldr	r3, [r3, #16]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d908      	bls.n	800ca3c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800ca2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	691b      	ldr	r3, [r3, #16]
 800ca36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ca3a:	e007      	b.n	800ca4c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800ca3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	699b      	ldr	r3, [r3, #24]
 800ca48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ca4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	7b1b      	ldrb	r3, [r3, #12]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d13a      	bne.n	800cad2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ca5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	6959      	ldr	r1, [r3, #20]
 800ca68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	88da      	ldrh	r2, [r3, #6]
 800ca74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ca7e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ca82:	6800      	ldr	r0, [r0, #0]
 800ca84:	f001 fcb9 	bl	800e3fa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ca88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	613b      	str	r3, [r7, #16]
 800ca94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	461a      	mov	r2, r3
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	4413      	add	r3, r2
 800caaa:	613b      	str	r3, [r7, #16]
 800caac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	00da      	lsls	r2, r3, #3
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	4413      	add	r3, r2
 800cabe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cac2:	60fb      	str	r3, [r7, #12]
 800cac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cac8:	b29a      	uxth	r2, r3
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	801a      	strh	r2, [r3, #0]
 800cace:	f000 be1f 	b.w	800d710 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800cad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	78db      	ldrb	r3, [r3, #3]
 800cade:	2b02      	cmp	r3, #2
 800cae0:	f040 8462 	bne.w	800d3a8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800cae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	6a1a      	ldr	r2, [r3, #32]
 800caf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800caf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	f240 83df 	bls.w	800d2c0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cb02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	4413      	add	r3, r2
 800cb1c:	881b      	ldrh	r3, [r3, #0]
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb28:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800cb2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb34:	681a      	ldr	r2, [r3, #0]
 800cb36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	441a      	add	r2, r3
 800cb46:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cb4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb52:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800cb56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cb5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	6a1a      	ldr	r2, [r3, #32]
 800cb6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb6e:	1ad2      	subs	r2, r2, r3
 800cb70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cb7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	4413      	add	r3, r2
 800cb96:	881b      	ldrh	r3, [r3, #0]
 800cb98:	b29b      	uxth	r3, r3
 800cb9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	f000 81c7 	beq.w	800cf32 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	633b      	str	r3, [r7, #48]	; 0x30
 800cbb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	785b      	ldrb	r3, [r3, #1]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d177      	bne.n	800ccb0 <USB_EPStartXfer+0x2ce>
 800cbc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	461a      	mov	r2, r3
 800cbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe0:	4413      	add	r3, r2
 800cbe2:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	00da      	lsls	r2, r3, #3
 800cbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf4:	4413      	add	r3, r2
 800cbf6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cbfa:	627b      	str	r3, [r7, #36]	; 0x24
 800cbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfe:	881b      	ldrh	r3, [r3, #0]
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc06:	b29a      	uxth	r2, r3
 800cc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0a:	801a      	strh	r2, [r3, #0]
 800cc0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc10:	2b3e      	cmp	r3, #62	; 0x3e
 800cc12:	d921      	bls.n	800cc58 <USB_EPStartXfer+0x276>
 800cc14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc18:	095b      	lsrs	r3, r3, #5
 800cc1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cc1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc22:	f003 031f 	and.w	r3, r3, #31
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d104      	bne.n	800cc34 <USB_EPStartXfer+0x252>
 800cc2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cc2e:	3b01      	subs	r3, #1
 800cc30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc36:	881b      	ldrh	r3, [r3, #0]
 800cc38:	b29a      	uxth	r2, r3
 800cc3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	029b      	lsls	r3, r3, #10
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	4313      	orrs	r3, r2
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc54:	801a      	strh	r2, [r3, #0]
 800cc56:	e050      	b.n	800ccfa <USB_EPStartXfer+0x318>
 800cc58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d10a      	bne.n	800cc76 <USB_EPStartXfer+0x294>
 800cc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc62:	881b      	ldrh	r3, [r3, #0]
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc6e:	b29a      	uxth	r2, r3
 800cc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc72:	801a      	strh	r2, [r3, #0]
 800cc74:	e041      	b.n	800ccfa <USB_EPStartXfer+0x318>
 800cc76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc7a:	085b      	lsrs	r3, r3, #1
 800cc7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cc80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc84:	f003 0301 	and.w	r3, r3, #1
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d004      	beq.n	800cc96 <USB_EPStartXfer+0x2b4>
 800cc8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cc90:	3301      	adds	r3, #1
 800cc92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc98:	881b      	ldrh	r3, [r3, #0]
 800cc9a:	b29a      	uxth	r2, r3
 800cc9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	029b      	lsls	r3, r3, #10
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	4313      	orrs	r3, r2
 800cca8:	b29a      	uxth	r2, r3
 800ccaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccac:	801a      	strh	r2, [r3, #0]
 800ccae:	e024      	b.n	800ccfa <USB_EPStartXfer+0x318>
 800ccb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	785b      	ldrb	r3, [r3, #1]
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d11c      	bne.n	800ccfa <USB_EPStartXfer+0x318>
 800ccc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd4:	4413      	add	r3, r2
 800ccd6:	633b      	str	r3, [r7, #48]	; 0x30
 800ccd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	00da      	lsls	r2, r3, #3
 800cce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce8:	4413      	add	r3, r2
 800ccea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ccee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccf4:	b29a      	uxth	r2, r3
 800ccf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ccfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	895b      	ldrh	r3, [r3, #10]
 800cd06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	6959      	ldr	r1, [r3, #20]
 800cd16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cd20:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cd24:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cd28:	6800      	ldr	r0, [r0, #0]
 800cd2a:	f001 fb66 	bl	800e3fa <USB_WritePMA>
            ep->xfer_buff += len;
 800cd2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	695a      	ldr	r2, [r3, #20]
 800cd3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd3e:	441a      	add	r2, r3
 800cd40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cd4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	6a1a      	ldr	r2, [r3, #32]
 800cd58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	691b      	ldr	r3, [r3, #16]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d90f      	bls.n	800cd88 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800cd68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	6a1a      	ldr	r2, [r3, #32]
 800cd74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd78:	1ad2      	subs	r2, r2, r3
 800cd7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	621a      	str	r2, [r3, #32]
 800cd86:	e00e      	b.n	800cda6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800cd88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	6a1b      	ldr	r3, [r3, #32]
 800cd94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800cd98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2200      	movs	r2, #0
 800cda4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cda6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	785b      	ldrb	r3, [r3, #1]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d177      	bne.n	800cea6 <USB_EPStartXfer+0x4c4>
 800cdb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	61bb      	str	r3, [r7, #24]
 800cdc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	69bb      	ldr	r3, [r7, #24]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	61bb      	str	r3, [r7, #24]
 800cdda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	00da      	lsls	r2, r3, #3
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	4413      	add	r3, r2
 800cdec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cdf0:	617b      	str	r3, [r7, #20]
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	881b      	ldrh	r3, [r3, #0]
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cdfc:	b29a      	uxth	r2, r3
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	801a      	strh	r2, [r3, #0]
 800ce02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce06:	2b3e      	cmp	r3, #62	; 0x3e
 800ce08:	d921      	bls.n	800ce4e <USB_EPStartXfer+0x46c>
 800ce0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce0e:	095b      	lsrs	r3, r3, #5
 800ce10:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ce14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce18:	f003 031f 	and.w	r3, r3, #31
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d104      	bne.n	800ce2a <USB_EPStartXfer+0x448>
 800ce20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce24:	3b01      	subs	r3, #1
 800ce26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	881b      	ldrh	r3, [r3, #0]
 800ce2e:	b29a      	uxth	r2, r3
 800ce30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	029b      	lsls	r3, r3, #10
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce46:	b29a      	uxth	r2, r3
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	801a      	strh	r2, [r3, #0]
 800ce4c:	e056      	b.n	800cefc <USB_EPStartXfer+0x51a>
 800ce4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d10a      	bne.n	800ce6c <USB_EPStartXfer+0x48a>
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	881b      	ldrh	r3, [r3, #0]
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce64:	b29a      	uxth	r2, r3
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	801a      	strh	r2, [r3, #0]
 800ce6a:	e047      	b.n	800cefc <USB_EPStartXfer+0x51a>
 800ce6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce70:	085b      	lsrs	r3, r3, #1
 800ce72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ce76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce7a:	f003 0301 	and.w	r3, r3, #1
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d004      	beq.n	800ce8c <USB_EPStartXfer+0x4aa>
 800ce82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce86:	3301      	adds	r3, #1
 800ce88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	881b      	ldrh	r3, [r3, #0]
 800ce90:	b29a      	uxth	r2, r3
 800ce92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	029b      	lsls	r3, r3, #10
 800ce9a:	b29b      	uxth	r3, r3
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	b29a      	uxth	r2, r3
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	801a      	strh	r2, [r3, #0]
 800cea4:	e02a      	b.n	800cefc <USB_EPStartXfer+0x51a>
 800cea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ceaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	785b      	ldrb	r3, [r3, #1]
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d122      	bne.n	800cefc <USB_EPStartXfer+0x51a>
 800ceb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ceba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	623b      	str	r3, [r7, #32]
 800cec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cec6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	461a      	mov	r2, r3
 800ced4:	6a3b      	ldr	r3, [r7, #32]
 800ced6:	4413      	add	r3, r2
 800ced8:	623b      	str	r3, [r7, #32]
 800ceda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	00da      	lsls	r2, r3, #3
 800cee8:	6a3b      	ldr	r3, [r7, #32]
 800ceea:	4413      	add	r3, r2
 800ceec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cef0:	61fb      	str	r3, [r7, #28]
 800cef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cef6:	b29a      	uxth	r2, r3
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cefc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	891b      	ldrh	r3, [r3, #8]
 800cf08:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	6959      	ldr	r1, [r3, #20]
 800cf18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cf22:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cf26:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cf2a:	6800      	ldr	r0, [r0, #0]
 800cf2c:	f001 fa65 	bl	800e3fa <USB_WritePMA>
 800cf30:	e3ee      	b.n	800d710 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cf32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	785b      	ldrb	r3, [r3, #1]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d177      	bne.n	800d032 <USB_EPStartXfer+0x650>
 800cf42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	461a      	mov	r2, r3
 800cf60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf62:	4413      	add	r3, r2
 800cf64:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	00da      	lsls	r2, r3, #3
 800cf74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf76:	4413      	add	r3, r2
 800cf78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cf7c:	647b      	str	r3, [r7, #68]	; 0x44
 800cf7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf80:	881b      	ldrh	r3, [r3, #0]
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf88:	b29a      	uxth	r2, r3
 800cf8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf8c:	801a      	strh	r2, [r3, #0]
 800cf8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf92:	2b3e      	cmp	r3, #62	; 0x3e
 800cf94:	d921      	bls.n	800cfda <USB_EPStartXfer+0x5f8>
 800cf96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf9a:	095b      	lsrs	r3, r3, #5
 800cf9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cfa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfa4:	f003 031f 	and.w	r3, r3, #31
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d104      	bne.n	800cfb6 <USB_EPStartXfer+0x5d4>
 800cfac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cfb0:	3b01      	subs	r3, #1
 800cfb2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cfb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfb8:	881b      	ldrh	r3, [r3, #0]
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	029b      	lsls	r3, r3, #10
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfd2:	b29a      	uxth	r2, r3
 800cfd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfd6:	801a      	strh	r2, [r3, #0]
 800cfd8:	e056      	b.n	800d088 <USB_EPStartXfer+0x6a6>
 800cfda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d10a      	bne.n	800cff8 <USB_EPStartXfer+0x616>
 800cfe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfe4:	881b      	ldrh	r3, [r3, #0]
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cff0:	b29a      	uxth	r2, r3
 800cff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cff4:	801a      	strh	r2, [r3, #0]
 800cff6:	e047      	b.n	800d088 <USB_EPStartXfer+0x6a6>
 800cff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cffc:	085b      	lsrs	r3, r3, #1
 800cffe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d006:	f003 0301 	and.w	r3, r3, #1
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d004      	beq.n	800d018 <USB_EPStartXfer+0x636>
 800d00e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d012:	3301      	adds	r3, #1
 800d014:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d01a:	881b      	ldrh	r3, [r3, #0]
 800d01c:	b29a      	uxth	r2, r3
 800d01e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d022:	b29b      	uxth	r3, r3
 800d024:	029b      	lsls	r3, r3, #10
 800d026:	b29b      	uxth	r3, r3
 800d028:	4313      	orrs	r3, r2
 800d02a:	b29a      	uxth	r2, r3
 800d02c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d02e:	801a      	strh	r2, [r3, #0]
 800d030:	e02a      	b.n	800d088 <USB_EPStartXfer+0x6a6>
 800d032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	785b      	ldrb	r3, [r3, #1]
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d122      	bne.n	800d088 <USB_EPStartXfer+0x6a6>
 800d042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d046:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	653b      	str	r3, [r7, #80]	; 0x50
 800d04e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	461a      	mov	r2, r3
 800d060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d062:	4413      	add	r3, r2
 800d064:	653b      	str	r3, [r7, #80]	; 0x50
 800d066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d06a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	00da      	lsls	r2, r3, #3
 800d074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d076:	4413      	add	r3, r2
 800d078:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d07c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d082:	b29a      	uxth	r2, r3
 800d084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d086:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d08c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	891b      	ldrh	r3, [r3, #8]
 800d094:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d09c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	6959      	ldr	r1, [r3, #20]
 800d0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d0ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d0b2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d0b6:	6800      	ldr	r0, [r0, #0]
 800d0b8:	f001 f99f 	bl	800e3fa <USB_WritePMA>
            ep->xfer_buff += len;
 800d0bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	695a      	ldr	r2, [r3, #20]
 800d0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0cc:	441a      	add	r2, r3
 800d0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d0da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	6a1a      	ldr	r2, [r3, #32]
 800d0e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	691b      	ldr	r3, [r3, #16]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d90f      	bls.n	800d116 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d0f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	6a1a      	ldr	r2, [r3, #32]
 800d102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d106:	1ad2      	subs	r2, r2, r3
 800d108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d10c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	621a      	str	r2, [r3, #32]
 800d114:	e00e      	b.n	800d134 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d11a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	6a1b      	ldr	r3, [r3, #32]
 800d122:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800d126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d12a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2200      	movs	r2, #0
 800d132:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d138:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	643b      	str	r3, [r7, #64]	; 0x40
 800d140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	785b      	ldrb	r3, [r3, #1]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d177      	bne.n	800d240 <USB_EPStartXfer+0x85e>
 800d150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d154:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d15c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d160:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d16a:	b29b      	uxth	r3, r3
 800d16c:	461a      	mov	r2, r3
 800d16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d170:	4413      	add	r3, r2
 800d172:	63bb      	str	r3, [r7, #56]	; 0x38
 800d174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	00da      	lsls	r2, r3, #3
 800d182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d184:	4413      	add	r3, r2
 800d186:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d18a:	637b      	str	r3, [r7, #52]	; 0x34
 800d18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d18e:	881b      	ldrh	r3, [r3, #0]
 800d190:	b29b      	uxth	r3, r3
 800d192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d196:	b29a      	uxth	r2, r3
 800d198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d19a:	801a      	strh	r2, [r3, #0]
 800d19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1a0:	2b3e      	cmp	r3, #62	; 0x3e
 800d1a2:	d921      	bls.n	800d1e8 <USB_EPStartXfer+0x806>
 800d1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1a8:	095b      	lsrs	r3, r3, #5
 800d1aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1b2:	f003 031f 	and.w	r3, r3, #31
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d104      	bne.n	800d1c4 <USB_EPStartXfer+0x7e2>
 800d1ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1be:	3b01      	subs	r3, #1
 800d1c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c6:	881b      	ldrh	r3, [r3, #0]
 800d1c8:	b29a      	uxth	r2, r3
 800d1ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	029b      	lsls	r3, r3, #10
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1e0:	b29a      	uxth	r2, r3
 800d1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1e4:	801a      	strh	r2, [r3, #0]
 800d1e6:	e050      	b.n	800d28a <USB_EPStartXfer+0x8a8>
 800d1e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d10a      	bne.n	800d206 <USB_EPStartXfer+0x824>
 800d1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1f2:	881b      	ldrh	r3, [r3, #0]
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d202:	801a      	strh	r2, [r3, #0]
 800d204:	e041      	b.n	800d28a <USB_EPStartXfer+0x8a8>
 800d206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d20a:	085b      	lsrs	r3, r3, #1
 800d20c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d214:	f003 0301 	and.w	r3, r3, #1
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d004      	beq.n	800d226 <USB_EPStartXfer+0x844>
 800d21c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d220:	3301      	adds	r3, #1
 800d222:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d228:	881b      	ldrh	r3, [r3, #0]
 800d22a:	b29a      	uxth	r2, r3
 800d22c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d230:	b29b      	uxth	r3, r3
 800d232:	029b      	lsls	r3, r3, #10
 800d234:	b29b      	uxth	r3, r3
 800d236:	4313      	orrs	r3, r2
 800d238:	b29a      	uxth	r2, r3
 800d23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d23c:	801a      	strh	r2, [r3, #0]
 800d23e:	e024      	b.n	800d28a <USB_EPStartXfer+0x8a8>
 800d240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	785b      	ldrb	r3, [r3, #1]
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d11c      	bne.n	800d28a <USB_EPStartXfer+0x8a8>
 800d250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d254:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d25e:	b29b      	uxth	r3, r3
 800d260:	461a      	mov	r2, r3
 800d262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d264:	4413      	add	r3, r2
 800d266:	643b      	str	r3, [r7, #64]	; 0x40
 800d268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d26c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	00da      	lsls	r2, r3, #3
 800d276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d278:	4413      	add	r3, r2
 800d27a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d27e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d284:	b29a      	uxth	r2, r3
 800d286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d288:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d28a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d28e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	895b      	ldrh	r3, [r3, #10]
 800d296:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d29a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d29e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	6959      	ldr	r1, [r3, #20]
 800d2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d2b0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d2b4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d2b8:	6800      	ldr	r0, [r0, #0]
 800d2ba:	f001 f89e 	bl	800e3fa <USB_WritePMA>
 800d2be:	e227      	b.n	800d710 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d2c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	6a1b      	ldr	r3, [r3, #32]
 800d2cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d2d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	4413      	add	r3, r2
 800d2ea:	881b      	ldrh	r3, [r3, #0]
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800d2f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2f6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800d2fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	009b      	lsls	r3, r3, #2
 800d312:	441a      	add	r2, r3
 800d314:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d31c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d328:	b29b      	uxth	r3, r3
 800d32a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d32c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d330:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d33c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d346:	b29b      	uxth	r3, r3
 800d348:	461a      	mov	r2, r3
 800d34a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d34c:	4413      	add	r3, r2
 800d34e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	00da      	lsls	r2, r3, #3
 800d35e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d360:	4413      	add	r3, r2
 800d362:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d366:	65bb      	str	r3, [r7, #88]	; 0x58
 800d368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d36c:	b29a      	uxth	r2, r3
 800d36e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d370:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	891b      	ldrh	r3, [r3, #8]
 800d37e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	6959      	ldr	r1, [r3, #20]
 800d38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d392:	b29b      	uxth	r3, r3
 800d394:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d398:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d39c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d3a0:	6800      	ldr	r0, [r0, #0]
 800d3a2:	f001 f82a 	bl	800e3fa <USB_WritePMA>
 800d3a6:	e1b3      	b.n	800d710 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d3a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	6a1a      	ldr	r2, [r3, #32]
 800d3b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3b8:	1ad2      	subs	r2, r2, r3
 800d3ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d3c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	009b      	lsls	r3, r3, #2
 800d3de:	4413      	add	r3, r2
 800d3e0:	881b      	ldrh	r3, [r3, #0]
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	f000 80c6 	beq.w	800d57a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d3ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	673b      	str	r3, [r7, #112]	; 0x70
 800d3fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	785b      	ldrb	r3, [r3, #1]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d177      	bne.n	800d4fa <USB_EPStartXfer+0xb18>
 800d40a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d40e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	66bb      	str	r3, [r7, #104]	; 0x68
 800d416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d41a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d424:	b29b      	uxth	r3, r3
 800d426:	461a      	mov	r2, r3
 800d428:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d42a:	4413      	add	r3, r2
 800d42c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d42e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	00da      	lsls	r2, r3, #3
 800d43c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d43e:	4413      	add	r3, r2
 800d440:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d444:	667b      	str	r3, [r7, #100]	; 0x64
 800d446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d448:	881b      	ldrh	r3, [r3, #0]
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d450:	b29a      	uxth	r2, r3
 800d452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d454:	801a      	strh	r2, [r3, #0]
 800d456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d45a:	2b3e      	cmp	r3, #62	; 0x3e
 800d45c:	d921      	bls.n	800d4a2 <USB_EPStartXfer+0xac0>
 800d45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d462:	095b      	lsrs	r3, r3, #5
 800d464:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d46c:	f003 031f 	and.w	r3, r3, #31
 800d470:	2b00      	cmp	r3, #0
 800d472:	d104      	bne.n	800d47e <USB_EPStartXfer+0xa9c>
 800d474:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d478:	3b01      	subs	r3, #1
 800d47a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d47e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d480:	881b      	ldrh	r3, [r3, #0]
 800d482:	b29a      	uxth	r2, r3
 800d484:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d488:	b29b      	uxth	r3, r3
 800d48a:	029b      	lsls	r3, r3, #10
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	4313      	orrs	r3, r2
 800d490:	b29b      	uxth	r3, r3
 800d492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d49e:	801a      	strh	r2, [r3, #0]
 800d4a0:	e050      	b.n	800d544 <USB_EPStartXfer+0xb62>
 800d4a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d10a      	bne.n	800d4c0 <USB_EPStartXfer+0xade>
 800d4aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4ac:	881b      	ldrh	r3, [r3, #0]
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4b8:	b29a      	uxth	r2, r3
 800d4ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4bc:	801a      	strh	r2, [r3, #0]
 800d4be:	e041      	b.n	800d544 <USB_EPStartXfer+0xb62>
 800d4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4c4:	085b      	lsrs	r3, r3, #1
 800d4c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4ce:	f003 0301 	and.w	r3, r3, #1
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d004      	beq.n	800d4e0 <USB_EPStartXfer+0xafe>
 800d4d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d4da:	3301      	adds	r3, #1
 800d4dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d4e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4e2:	881b      	ldrh	r3, [r3, #0]
 800d4e4:	b29a      	uxth	r2, r3
 800d4e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	029b      	lsls	r3, r3, #10
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	b29a      	uxth	r2, r3
 800d4f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4f6:	801a      	strh	r2, [r3, #0]
 800d4f8:	e024      	b.n	800d544 <USB_EPStartXfer+0xb62>
 800d4fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	785b      	ldrb	r3, [r3, #1]
 800d506:	2b01      	cmp	r3, #1
 800d508:	d11c      	bne.n	800d544 <USB_EPStartXfer+0xb62>
 800d50a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d50e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d518:	b29b      	uxth	r3, r3
 800d51a:	461a      	mov	r2, r3
 800d51c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d51e:	4413      	add	r3, r2
 800d520:	673b      	str	r3, [r7, #112]	; 0x70
 800d522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	00da      	lsls	r2, r3, #3
 800d530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d532:	4413      	add	r3, r2
 800d534:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d538:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d53e:	b29a      	uxth	r2, r3
 800d540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d542:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	895b      	ldrh	r3, [r3, #10]
 800d550:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	6959      	ldr	r1, [r3, #20]
 800d560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d564:	b29b      	uxth	r3, r3
 800d566:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d56a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d56e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d572:	6800      	ldr	r0, [r0, #0]
 800d574:	f000 ff41 	bl	800e3fa <USB_WritePMA>
 800d578:	e0ca      	b.n	800d710 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d57a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d57e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	785b      	ldrb	r3, [r3, #1]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d177      	bne.n	800d67a <USB_EPStartXfer+0xc98>
 800d58a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d58e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d59a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5aa:	4413      	add	r3, r2
 800d5ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d5ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	00da      	lsls	r2, r3, #3
 800d5bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5be:	4413      	add	r3, r2
 800d5c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d5c4:	67bb      	str	r3, [r7, #120]	; 0x78
 800d5c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5c8:	881b      	ldrh	r3, [r3, #0]
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d5d0:	b29a      	uxth	r2, r3
 800d5d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5d4:	801a      	strh	r2, [r3, #0]
 800d5d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5da:	2b3e      	cmp	r3, #62	; 0x3e
 800d5dc:	d921      	bls.n	800d622 <USB_EPStartXfer+0xc40>
 800d5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5e2:	095b      	lsrs	r3, r3, #5
 800d5e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d5e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5ec:	f003 031f 	and.w	r3, r3, #31
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d104      	bne.n	800d5fe <USB_EPStartXfer+0xc1c>
 800d5f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d5f8:	3b01      	subs	r3, #1
 800d5fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d5fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d600:	881b      	ldrh	r3, [r3, #0]
 800d602:	b29a      	uxth	r2, r3
 800d604:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d608:	b29b      	uxth	r3, r3
 800d60a:	029b      	lsls	r3, r3, #10
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	4313      	orrs	r3, r2
 800d610:	b29b      	uxth	r3, r3
 800d612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d61a:	b29a      	uxth	r2, r3
 800d61c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d61e:	801a      	strh	r2, [r3, #0]
 800d620:	e05c      	b.n	800d6dc <USB_EPStartXfer+0xcfa>
 800d622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d626:	2b00      	cmp	r3, #0
 800d628:	d10a      	bne.n	800d640 <USB_EPStartXfer+0xc5e>
 800d62a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d62c:	881b      	ldrh	r3, [r3, #0]
 800d62e:	b29b      	uxth	r3, r3
 800d630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d638:	b29a      	uxth	r2, r3
 800d63a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d63c:	801a      	strh	r2, [r3, #0]
 800d63e:	e04d      	b.n	800d6dc <USB_EPStartXfer+0xcfa>
 800d640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d644:	085b      	lsrs	r3, r3, #1
 800d646:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d64a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d64e:	f003 0301 	and.w	r3, r3, #1
 800d652:	2b00      	cmp	r3, #0
 800d654:	d004      	beq.n	800d660 <USB_EPStartXfer+0xc7e>
 800d656:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d65a:	3301      	adds	r3, #1
 800d65c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d662:	881b      	ldrh	r3, [r3, #0]
 800d664:	b29a      	uxth	r2, r3
 800d666:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	029b      	lsls	r3, r3, #10
 800d66e:	b29b      	uxth	r3, r3
 800d670:	4313      	orrs	r3, r2
 800d672:	b29a      	uxth	r2, r3
 800d674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d676:	801a      	strh	r2, [r3, #0]
 800d678:	e030      	b.n	800d6dc <USB_EPStartXfer+0xcfa>
 800d67a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d67e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	785b      	ldrb	r3, [r3, #1]
 800d686:	2b01      	cmp	r3, #1
 800d688:	d128      	bne.n	800d6dc <USB_EPStartXfer+0xcfa>
 800d68a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d68e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d69c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d6ae:	4413      	add	r3, r2
 800d6b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d6b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	00da      	lsls	r2, r3, #3
 800d6c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d6c6:	4413      	add	r3, r2
 800d6c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d6cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6d4:	b29a      	uxth	r2, r3
 800d6d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d6da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d6dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	891b      	ldrh	r3, [r3, #8]
 800d6e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d6ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	6959      	ldr	r1, [r3, #20]
 800d6f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6fc:	b29b      	uxth	r3, r3
 800d6fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d702:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d706:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d70a:	6800      	ldr	r0, [r0, #0]
 800d70c:	f000 fe75 	bl	800e3fa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d714:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d71e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	781b      	ldrb	r3, [r3, #0]
 800d726:	009b      	lsls	r3, r3, #2
 800d728:	4413      	add	r3, r2
 800d72a:	881b      	ldrh	r3, [r3, #0]
 800d72c:	b29b      	uxth	r3, r3
 800d72e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d736:	817b      	strh	r3, [r7, #10]
 800d738:	897b      	ldrh	r3, [r7, #10]
 800d73a:	f083 0310 	eor.w	r3, r3, #16
 800d73e:	817b      	strh	r3, [r7, #10]
 800d740:	897b      	ldrh	r3, [r7, #10]
 800d742:	f083 0320 	eor.w	r3, r3, #32
 800d746:	817b      	strh	r3, [r7, #10]
 800d748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d74c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	009b      	lsls	r3, r3, #2
 800d760:	441a      	add	r2, r3
 800d762:	897b      	ldrh	r3, [r7, #10]
 800d764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d76c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d774:	b29b      	uxth	r3, r3
 800d776:	8013      	strh	r3, [r2, #0]
 800d778:	f000 bcde 	b.w	800e138 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d77c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	7b1b      	ldrb	r3, [r3, #12]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	f040 80bb 	bne.w	800d904 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d78e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	699a      	ldr	r2, [r3, #24]
 800d79a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d79e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	691b      	ldr	r3, [r3, #16]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d917      	bls.n	800d7da <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800d7aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	691b      	ldr	r3, [r3, #16]
 800d7b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800d7ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	699a      	ldr	r2, [r3, #24]
 800d7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7ca:	1ad2      	subs	r2, r2, r3
 800d7cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	619a      	str	r2, [r3, #24]
 800d7d8:	e00e      	b.n	800d7f8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800d7da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	699b      	ldr	r3, [r3, #24]
 800d7e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800d7ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d7f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d80a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d814:	b29b      	uxth	r3, r3
 800d816:	461a      	mov	r2, r3
 800d818:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d81c:	4413      	add	r3, r2
 800d81e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	00da      	lsls	r2, r3, #3
 800d830:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d834:	4413      	add	r3, r2
 800d836:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d83a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d83e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d842:	881b      	ldrh	r3, [r3, #0]
 800d844:	b29b      	uxth	r3, r3
 800d846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d84a:	b29a      	uxth	r2, r3
 800d84c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d850:	801a      	strh	r2, [r3, #0]
 800d852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d856:	2b3e      	cmp	r3, #62	; 0x3e
 800d858:	d924      	bls.n	800d8a4 <USB_EPStartXfer+0xec2>
 800d85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d85e:	095b      	lsrs	r3, r3, #5
 800d860:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d868:	f003 031f 	and.w	r3, r3, #31
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d104      	bne.n	800d87a <USB_EPStartXfer+0xe98>
 800d870:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d874:	3b01      	subs	r3, #1
 800d876:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d87a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d87e:	881b      	ldrh	r3, [r3, #0]
 800d880:	b29a      	uxth	r2, r3
 800d882:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d886:	b29b      	uxth	r3, r3
 800d888:	029b      	lsls	r3, r3, #10
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	4313      	orrs	r3, r2
 800d88e:	b29b      	uxth	r3, r3
 800d890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d898:	b29a      	uxth	r2, r3
 800d89a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d89e:	801a      	strh	r2, [r3, #0]
 800d8a0:	f000 bc10 	b.w	800e0c4 <USB_EPStartXfer+0x16e2>
 800d8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d10c      	bne.n	800d8c6 <USB_EPStartXfer+0xee4>
 800d8ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d8b0:	881b      	ldrh	r3, [r3, #0]
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8bc:	b29a      	uxth	r2, r3
 800d8be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d8c2:	801a      	strh	r2, [r3, #0]
 800d8c4:	e3fe      	b.n	800e0c4 <USB_EPStartXfer+0x16e2>
 800d8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8ca:	085b      	lsrs	r3, r3, #1
 800d8cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d8d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8d4:	f003 0301 	and.w	r3, r3, #1
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d004      	beq.n	800d8e6 <USB_EPStartXfer+0xf04>
 800d8dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d8e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d8ea:	881b      	ldrh	r3, [r3, #0]
 800d8ec:	b29a      	uxth	r2, r3
 800d8ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	029b      	lsls	r3, r3, #10
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	4313      	orrs	r3, r2
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d900:	801a      	strh	r2, [r3, #0]
 800d902:	e3df      	b.n	800e0c4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	78db      	ldrb	r3, [r3, #3]
 800d910:	2b02      	cmp	r3, #2
 800d912:	f040 8218 	bne.w	800dd46 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d91a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	785b      	ldrb	r3, [r3, #1]
 800d922:	2b00      	cmp	r3, #0
 800d924:	f040 809d 	bne.w	800da62 <USB_EPStartXfer+0x1080>
 800d928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d92c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d93a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d944:	b29b      	uxth	r3, r3
 800d946:	461a      	mov	r2, r3
 800d948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d94c:	4413      	add	r3, r2
 800d94e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	00da      	lsls	r2, r3, #3
 800d960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d964:	4413      	add	r3, r2
 800d966:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d96a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d96e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d972:	881b      	ldrh	r3, [r3, #0]
 800d974:	b29b      	uxth	r3, r3
 800d976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d980:	801a      	strh	r2, [r3, #0]
 800d982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	691b      	ldr	r3, [r3, #16]
 800d98e:	2b3e      	cmp	r3, #62	; 0x3e
 800d990:	d92b      	bls.n	800d9ea <USB_EPStartXfer+0x1008>
 800d992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	095b      	lsrs	r3, r3, #5
 800d9a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d9a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	691b      	ldr	r3, [r3, #16]
 800d9b0:	f003 031f 	and.w	r3, r3, #31
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d104      	bne.n	800d9c2 <USB_EPStartXfer+0xfe0>
 800d9b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9bc:	3b01      	subs	r3, #1
 800d9be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d9c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d9c6:	881b      	ldrh	r3, [r3, #0]
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	029b      	lsls	r3, r3, #10
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	4313      	orrs	r3, r2
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9e0:	b29a      	uxth	r2, r3
 800d9e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d9e6:	801a      	strh	r2, [r3, #0]
 800d9e8:	e070      	b.n	800dacc <USB_EPStartXfer+0x10ea>
 800d9ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	691b      	ldr	r3, [r3, #16]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d10c      	bne.n	800da14 <USB_EPStartXfer+0x1032>
 800d9fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d9fe:	881b      	ldrh	r3, [r3, #0]
 800da00:	b29b      	uxth	r3, r3
 800da02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da0a:	b29a      	uxth	r2, r3
 800da0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da10:	801a      	strh	r2, [r3, #0]
 800da12:	e05b      	b.n	800dacc <USB_EPStartXfer+0x10ea>
 800da14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	691b      	ldr	r3, [r3, #16]
 800da20:	085b      	lsrs	r3, r3, #1
 800da22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800da26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	f003 0301 	and.w	r3, r3, #1
 800da36:	2b00      	cmp	r3, #0
 800da38:	d004      	beq.n	800da44 <USB_EPStartXfer+0x1062>
 800da3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da3e:	3301      	adds	r3, #1
 800da40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800da44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da48:	881b      	ldrh	r3, [r3, #0]
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da50:	b29b      	uxth	r3, r3
 800da52:	029b      	lsls	r3, r3, #10
 800da54:	b29b      	uxth	r3, r3
 800da56:	4313      	orrs	r3, r2
 800da58:	b29a      	uxth	r2, r3
 800da5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da5e:	801a      	strh	r2, [r3, #0]
 800da60:	e034      	b.n	800dacc <USB_EPStartXfer+0x10ea>
 800da62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	785b      	ldrb	r3, [r3, #1]
 800da6e:	2b01      	cmp	r3, #1
 800da70:	d12c      	bne.n	800dacc <USB_EPStartXfer+0x10ea>
 800da72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800da80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da8e:	b29b      	uxth	r3, r3
 800da90:	461a      	mov	r2, r3
 800da92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da96:	4413      	add	r3, r2
 800da98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800da9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	00da      	lsls	r2, r3, #3
 800daaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800daae:	4413      	add	r3, r2
 800dab0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800dab4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dabc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	691b      	ldr	r3, [r3, #16]
 800dac4:	b29a      	uxth	r2, r3
 800dac6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800daca:	801a      	strh	r2, [r3, #0]
 800dacc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800dada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	785b      	ldrb	r3, [r3, #1]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f040 809d 	bne.w	800dc26 <USB_EPStartXfer+0x1244>
 800daec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dafa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dafe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800db08:	b29b      	uxth	r3, r3
 800db0a:	461a      	mov	r2, r3
 800db0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800db10:	4413      	add	r3, r2
 800db12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800db16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	781b      	ldrb	r3, [r3, #0]
 800db22:	00da      	lsls	r2, r3, #3
 800db24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800db28:	4413      	add	r3, r2
 800db2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800db2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800db32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800db36:	881b      	ldrh	r3, [r3, #0]
 800db38:	b29b      	uxth	r3, r3
 800db3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db3e:	b29a      	uxth	r2, r3
 800db40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800db44:	801a      	strh	r2, [r3, #0]
 800db46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	691b      	ldr	r3, [r3, #16]
 800db52:	2b3e      	cmp	r3, #62	; 0x3e
 800db54:	d92b      	bls.n	800dbae <USB_EPStartXfer+0x11cc>
 800db56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	691b      	ldr	r3, [r3, #16]
 800db62:	095b      	lsrs	r3, r3, #5
 800db64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800db68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	691b      	ldr	r3, [r3, #16]
 800db74:	f003 031f 	and.w	r3, r3, #31
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d104      	bne.n	800db86 <USB_EPStartXfer+0x11a4>
 800db7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db80:	3b01      	subs	r3, #1
 800db82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800db86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800db8a:	881b      	ldrh	r3, [r3, #0]
 800db8c:	b29a      	uxth	r2, r3
 800db8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db92:	b29b      	uxth	r3, r3
 800db94:	029b      	lsls	r3, r3, #10
 800db96:	b29b      	uxth	r3, r3
 800db98:	4313      	orrs	r3, r2
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dba4:	b29a      	uxth	r2, r3
 800dba6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dbaa:	801a      	strh	r2, [r3, #0]
 800dbac:	e069      	b.n	800dc82 <USB_EPStartXfer+0x12a0>
 800dbae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	691b      	ldr	r3, [r3, #16]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d10c      	bne.n	800dbd8 <USB_EPStartXfer+0x11f6>
 800dbbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dbc2:	881b      	ldrh	r3, [r3, #0]
 800dbc4:	b29b      	uxth	r3, r3
 800dbc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dbca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dbce:	b29a      	uxth	r2, r3
 800dbd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dbd4:	801a      	strh	r2, [r3, #0]
 800dbd6:	e054      	b.n	800dc82 <USB_EPStartXfer+0x12a0>
 800dbd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	691b      	ldr	r3, [r3, #16]
 800dbe4:	085b      	lsrs	r3, r3, #1
 800dbe6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dbea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	691b      	ldr	r3, [r3, #16]
 800dbf6:	f003 0301 	and.w	r3, r3, #1
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d004      	beq.n	800dc08 <USB_EPStartXfer+0x1226>
 800dbfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc02:	3301      	adds	r3, #1
 800dc04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dc08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dc0c:	881b      	ldrh	r3, [r3, #0]
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	029b      	lsls	r3, r3, #10
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	4313      	orrs	r3, r2
 800dc1c:	b29a      	uxth	r2, r3
 800dc1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dc22:	801a      	strh	r2, [r3, #0]
 800dc24:	e02d      	b.n	800dc82 <USB_EPStartXfer+0x12a0>
 800dc26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	785b      	ldrb	r3, [r3, #1]
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	d125      	bne.n	800dc82 <USB_EPStartXfer+0x12a0>
 800dc36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	461a      	mov	r2, r3
 800dc48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dc4c:	4413      	add	r3, r2
 800dc4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800dc52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	00da      	lsls	r2, r3, #3
 800dc60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dc64:	4413      	add	r3, r2
 800dc66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800dc6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dc6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	691b      	ldr	r3, [r3, #16]
 800dc7a:	b29a      	uxth	r2, r3
 800dc7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dc80:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800dc82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	69db      	ldr	r3, [r3, #28]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	f000 8218 	beq.w	800e0c4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800dc94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	4413      	add	r3, r2
 800dcae:	881b      	ldrh	r3, [r3, #0]
 800dcb0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dcb4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800dcb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d005      	beq.n	800dccc <USB_EPStartXfer+0x12ea>
 800dcc0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800dcc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d10d      	bne.n	800dce8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dccc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800dcd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	f040 81f5 	bne.w	800e0c4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dcda:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800dcde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	f040 81ee 	bne.w	800e0c4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800dce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	009b      	lsls	r3, r3, #2
 800dd00:	4413      	add	r3, r2
 800dd02:	881b      	ldrh	r3, [r3, #0]
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd0e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800dd12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	009b      	lsls	r3, r3, #2
 800dd2a:	441a      	add	r2, r3
 800dd2c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800dd30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	8013      	strh	r3, [r2, #0]
 800dd44:	e1be      	b.n	800e0c4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800dd46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	78db      	ldrb	r3, [r3, #3]
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	f040 81b4 	bne.w	800e0c0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800dd58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	699a      	ldr	r2, [r3, #24]
 800dd64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	691b      	ldr	r3, [r3, #16]
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d917      	bls.n	800dda4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800dd74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	691b      	ldr	r3, [r3, #16]
 800dd80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800dd84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	699a      	ldr	r2, [r3, #24]
 800dd90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd94:	1ad2      	subs	r2, r2, r3
 800dd96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	619a      	str	r2, [r3, #24]
 800dda2:	e00e      	b.n	800ddc2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800dda4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dda8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	699b      	ldr	r3, [r3, #24]
 800ddb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800ddb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ddc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	785b      	ldrb	r3, [r3, #1]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	f040 8085 	bne.w	800dede <USB_EPStartXfer+0x14fc>
 800ddd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dde2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dde6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ddf8:	4413      	add	r3, r2
 800ddfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ddfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	00da      	lsls	r2, r3, #3
 800de0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800de10:	4413      	add	r3, r2
 800de12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800de16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800de1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800de1e:	881b      	ldrh	r3, [r3, #0]
 800de20:	b29b      	uxth	r3, r3
 800de22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de26:	b29a      	uxth	r2, r3
 800de28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800de2c:	801a      	strh	r2, [r3, #0]
 800de2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de32:	2b3e      	cmp	r3, #62	; 0x3e
 800de34:	d923      	bls.n	800de7e <USB_EPStartXfer+0x149c>
 800de36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de3a:	095b      	lsrs	r3, r3, #5
 800de3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800de40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de44:	f003 031f 	and.w	r3, r3, #31
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d104      	bne.n	800de56 <USB_EPStartXfer+0x1474>
 800de4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de50:	3b01      	subs	r3, #1
 800de52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800de56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800de5a:	881b      	ldrh	r3, [r3, #0]
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de62:	b29b      	uxth	r3, r3
 800de64:	029b      	lsls	r3, r3, #10
 800de66:	b29b      	uxth	r3, r3
 800de68:	4313      	orrs	r3, r2
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de74:	b29a      	uxth	r2, r3
 800de76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800de7a:	801a      	strh	r2, [r3, #0]
 800de7c:	e060      	b.n	800df40 <USB_EPStartXfer+0x155e>
 800de7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de82:	2b00      	cmp	r3, #0
 800de84:	d10c      	bne.n	800dea0 <USB_EPStartXfer+0x14be>
 800de86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800de8a:	881b      	ldrh	r3, [r3, #0]
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de96:	b29a      	uxth	r2, r3
 800de98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800de9c:	801a      	strh	r2, [r3, #0]
 800de9e:	e04f      	b.n	800df40 <USB_EPStartXfer+0x155e>
 800dea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dea4:	085b      	lsrs	r3, r3, #1
 800dea6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800deaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800deae:	f003 0301 	and.w	r3, r3, #1
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d004      	beq.n	800dec0 <USB_EPStartXfer+0x14de>
 800deb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800deba:	3301      	adds	r3, #1
 800debc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800dec0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dec4:	881b      	ldrh	r3, [r3, #0]
 800dec6:	b29a      	uxth	r2, r3
 800dec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800decc:	b29b      	uxth	r3, r3
 800dece:	029b      	lsls	r3, r3, #10
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	4313      	orrs	r3, r2
 800ded4:	b29a      	uxth	r2, r3
 800ded6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800deda:	801a      	strh	r2, [r3, #0]
 800dedc:	e030      	b.n	800df40 <USB_EPStartXfer+0x155e>
 800dede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	785b      	ldrb	r3, [r3, #1]
 800deea:	2b01      	cmp	r3, #1
 800deec:	d128      	bne.n	800df40 <USB_EPStartXfer+0x155e>
 800deee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800def2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800defc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	461a      	mov	r2, r3
 800df0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df12:	4413      	add	r3, r2
 800df14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800df18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	00da      	lsls	r2, r3, #3
 800df26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df2a:	4413      	add	r3, r2
 800df2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800df30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800df34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df38:	b29a      	uxth	r2, r3
 800df3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800df3e:	801a      	strh	r2, [r3, #0]
 800df40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800df4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	785b      	ldrb	r3, [r3, #1]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f040 8085 	bne.w	800e06a <USB_EPStartXfer+0x1688>
 800df60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800df6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	461a      	mov	r2, r3
 800df80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800df84:	4413      	add	r3, r2
 800df86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800df8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	00da      	lsls	r2, r3, #3
 800df98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800df9c:	4413      	add	r3, r2
 800df9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800dfa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dfa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dfaa:	881b      	ldrh	r3, [r3, #0]
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dfb2:	b29a      	uxth	r2, r3
 800dfb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dfb8:	801a      	strh	r2, [r3, #0]
 800dfba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfbe:	2b3e      	cmp	r3, #62	; 0x3e
 800dfc0:	d923      	bls.n	800e00a <USB_EPStartXfer+0x1628>
 800dfc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfc6:	095b      	lsrs	r3, r3, #5
 800dfc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dfcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfd0:	f003 031f 	and.w	r3, r3, #31
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d104      	bne.n	800dfe2 <USB_EPStartXfer+0x1600>
 800dfd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dfdc:	3b01      	subs	r3, #1
 800dfde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dfe2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dfe6:	881b      	ldrh	r3, [r3, #0]
 800dfe8:	b29a      	uxth	r2, r3
 800dfea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dfee:	b29b      	uxth	r3, r3
 800dff0:	029b      	lsls	r3, r3, #10
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	4313      	orrs	r3, r2
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e000:	b29a      	uxth	r2, r3
 800e002:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e006:	801a      	strh	r2, [r3, #0]
 800e008:	e05c      	b.n	800e0c4 <USB_EPStartXfer+0x16e2>
 800e00a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d10c      	bne.n	800e02c <USB_EPStartXfer+0x164a>
 800e012:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e016:	881b      	ldrh	r3, [r3, #0]
 800e018:	b29b      	uxth	r3, r3
 800e01a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e01e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e022:	b29a      	uxth	r2, r3
 800e024:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e028:	801a      	strh	r2, [r3, #0]
 800e02a:	e04b      	b.n	800e0c4 <USB_EPStartXfer+0x16e2>
 800e02c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e030:	085b      	lsrs	r3, r3, #1
 800e032:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e03a:	f003 0301 	and.w	r3, r3, #1
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d004      	beq.n	800e04c <USB_EPStartXfer+0x166a>
 800e042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e046:	3301      	adds	r3, #1
 800e048:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e04c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e050:	881b      	ldrh	r3, [r3, #0]
 800e052:	b29a      	uxth	r2, r3
 800e054:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e058:	b29b      	uxth	r3, r3
 800e05a:	029b      	lsls	r3, r3, #10
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	4313      	orrs	r3, r2
 800e060:	b29a      	uxth	r2, r3
 800e062:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e066:	801a      	strh	r2, [r3, #0]
 800e068:	e02c      	b.n	800e0c4 <USB_EPStartXfer+0x16e2>
 800e06a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e06e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	785b      	ldrb	r3, [r3, #1]
 800e076:	2b01      	cmp	r3, #1
 800e078:	d124      	bne.n	800e0c4 <USB_EPStartXfer+0x16e2>
 800e07a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e07e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e088:	b29b      	uxth	r3, r3
 800e08a:	461a      	mov	r2, r3
 800e08c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e090:	4413      	add	r3, r2
 800e092:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e09a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	00da      	lsls	r2, r3, #3
 800e0a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e0a8:	4413      	add	r3, r2
 800e0aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e0ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0b6:	b29a      	uxth	r2, r3
 800e0b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e0bc:	801a      	strh	r2, [r3, #0]
 800e0be:	e001      	b.n	800e0c4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	e03a      	b.n	800e13a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e0c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	4413      	add	r3, r2
 800e0de:	881b      	ldrh	r3, [r3, #0]
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e0e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0ea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e0ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e0f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e0f6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e0fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e0fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e102:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e10a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	009b      	lsls	r3, r3, #2
 800e11e:	441a      	add	r2, r3
 800e120:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e12c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e134:	b29b      	uxth	r3, r3
 800e136:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e138:	2300      	movs	r3, #0
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e144:	b480      	push	{r7}
 800e146:	b085      	sub	sp, #20
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	785b      	ldrb	r3, [r3, #1]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d020      	beq.n	800e198 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	4413      	add	r3, r2
 800e160:	881b      	ldrh	r3, [r3, #0]
 800e162:	b29b      	uxth	r3, r3
 800e164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e16c:	81bb      	strh	r3, [r7, #12]
 800e16e:	89bb      	ldrh	r3, [r7, #12]
 800e170:	f083 0310 	eor.w	r3, r3, #16
 800e174:	81bb      	strh	r3, [r7, #12]
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	441a      	add	r2, r3
 800e180:	89bb      	ldrh	r3, [r7, #12]
 800e182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e18a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e18e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e192:	b29b      	uxth	r3, r3
 800e194:	8013      	strh	r3, [r2, #0]
 800e196:	e01f      	b.n	800e1d8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	4413      	add	r3, r2
 800e1a2:	881b      	ldrh	r3, [r3, #0]
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e1aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1ae:	81fb      	strh	r3, [r7, #14]
 800e1b0:	89fb      	ldrh	r3, [r7, #14]
 800e1b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e1b6:	81fb      	strh	r3, [r7, #14]
 800e1b8:	687a      	ldr	r2, [r7, #4]
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	009b      	lsls	r3, r3, #2
 800e1c0:	441a      	add	r2, r3
 800e1c2:	89fb      	ldrh	r3, [r7, #14]
 800e1c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e1c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e1cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e1d8:	2300      	movs	r3, #0
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3714      	adds	r7, #20
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr

0800e1e6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e1e6:	b480      	push	{r7}
 800e1e8:	b087      	sub	sp, #28
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
 800e1ee:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	7b1b      	ldrb	r3, [r3, #12]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	f040 809d 	bne.w	800e334 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	785b      	ldrb	r3, [r3, #1]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d04c      	beq.n	800e29c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	4413      	add	r3, r2
 800e20c:	881b      	ldrh	r3, [r3, #0]
 800e20e:	823b      	strh	r3, [r7, #16]
 800e210:	8a3b      	ldrh	r3, [r7, #16]
 800e212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e216:	2b00      	cmp	r3, #0
 800e218:	d01b      	beq.n	800e252 <USB_EPClearStall+0x6c>
 800e21a:	687a      	ldr	r2, [r7, #4]
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	009b      	lsls	r3, r3, #2
 800e222:	4413      	add	r3, r2
 800e224:	881b      	ldrh	r3, [r3, #0]
 800e226:	b29b      	uxth	r3, r3
 800e228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e22c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e230:	81fb      	strh	r3, [r7, #14]
 800e232:	687a      	ldr	r2, [r7, #4]
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	441a      	add	r2, r3
 800e23c:	89fb      	ldrh	r3, [r7, #14]
 800e23e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e24a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e24e:	b29b      	uxth	r3, r3
 800e250:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	78db      	ldrb	r3, [r3, #3]
 800e256:	2b01      	cmp	r3, #1
 800e258:	d06c      	beq.n	800e334 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e25a:	687a      	ldr	r2, [r7, #4]
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	4413      	add	r3, r2
 800e264:	881b      	ldrh	r3, [r3, #0]
 800e266:	b29b      	uxth	r3, r3
 800e268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e26c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e270:	81bb      	strh	r3, [r7, #12]
 800e272:	89bb      	ldrh	r3, [r7, #12]
 800e274:	f083 0320 	eor.w	r3, r3, #32
 800e278:	81bb      	strh	r3, [r7, #12]
 800e27a:	687a      	ldr	r2, [r7, #4]
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	441a      	add	r2, r3
 800e284:	89bb      	ldrh	r3, [r7, #12]
 800e286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e28a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e28e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e296:	b29b      	uxth	r3, r3
 800e298:	8013      	strh	r3, [r2, #0]
 800e29a:	e04b      	b.n	800e334 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	781b      	ldrb	r3, [r3, #0]
 800e2a2:	009b      	lsls	r3, r3, #2
 800e2a4:	4413      	add	r3, r2
 800e2a6:	881b      	ldrh	r3, [r3, #0]
 800e2a8:	82fb      	strh	r3, [r7, #22]
 800e2aa:	8afb      	ldrh	r3, [r7, #22]
 800e2ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d01b      	beq.n	800e2ec <USB_EPClearStall+0x106>
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	4413      	add	r3, r2
 800e2be:	881b      	ldrh	r3, [r3, #0]
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e2c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2ca:	82bb      	strh	r3, [r7, #20]
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	781b      	ldrb	r3, [r3, #0]
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	441a      	add	r2, r3
 800e2d6:	8abb      	ldrh	r3, [r7, #20]
 800e2d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e2dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e2e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	4413      	add	r3, r2
 800e2f6:	881b      	ldrh	r3, [r3, #0]
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e2fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e302:	827b      	strh	r3, [r7, #18]
 800e304:	8a7b      	ldrh	r3, [r7, #18]
 800e306:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e30a:	827b      	strh	r3, [r7, #18]
 800e30c:	8a7b      	ldrh	r3, [r7, #18]
 800e30e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e312:	827b      	strh	r3, [r7, #18]
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	441a      	add	r2, r3
 800e31e:	8a7b      	ldrh	r3, [r7, #18]
 800e320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e32c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e330:	b29b      	uxth	r3, r3
 800e332:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e334:	2300      	movs	r3, #0
}
 800e336:	4618      	mov	r0, r3
 800e338:	371c      	adds	r7, #28
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr

0800e342 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e342:	b480      	push	{r7}
 800e344:	b083      	sub	sp, #12
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
 800e34a:	460b      	mov	r3, r1
 800e34c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e34e:	78fb      	ldrb	r3, [r7, #3]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d103      	bne.n	800e35c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2280      	movs	r2, #128	; 0x80
 800e358:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800e35c:	2300      	movs	r3, #0
}
 800e35e:	4618      	mov	r0, r3
 800e360:	370c      	adds	r7, #12
 800e362:	46bd      	mov	sp, r7
 800e364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e368:	4770      	bx	lr

0800e36a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e36a:	b480      	push	{r7}
 800e36c:	b083      	sub	sp, #12
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e378:	b29b      	uxth	r3, r3
 800e37a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e37e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e382:	b29a      	uxth	r2, r3
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800e38a:	2300      	movs	r3, #0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e3a6:	b29b      	uxth	r3, r3
 800e3a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e3ac:	b29a      	uxth	r2, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800e3b4:	2300      	movs	r3, #0
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	370c      	adds	r7, #12
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr

0800e3c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e3c2:	b480      	push	{r7}
 800e3c4:	b085      	sub	sp, #20
 800e3c6:	af00      	add	r7, sp, #0
 800e3c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e3d0:	b29b      	uxth	r3, r3
 800e3d2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3714      	adds	r7, #20
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr

0800e3e2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800e3e2:	b480      	push	{r7}
 800e3e4:	b083      	sub	sp, #12
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	6078      	str	r0, [r7, #4]
 800e3ea:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800e3ec:	2300      	movs	r3, #0
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	370c      	adds	r7, #12
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f8:	4770      	bx	lr

0800e3fa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e3fa:	b480      	push	{r7}
 800e3fc:	b08b      	sub	sp, #44	; 0x2c
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	60f8      	str	r0, [r7, #12]
 800e402:	60b9      	str	r1, [r7, #8]
 800e404:	4611      	mov	r1, r2
 800e406:	461a      	mov	r2, r3
 800e408:	460b      	mov	r3, r1
 800e40a:	80fb      	strh	r3, [r7, #6]
 800e40c:	4613      	mov	r3, r2
 800e40e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e410:	88bb      	ldrh	r3, [r7, #4]
 800e412:	3301      	adds	r3, #1
 800e414:	085b      	lsrs	r3, r3, #1
 800e416:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e420:	88fa      	ldrh	r2, [r7, #6]
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	4413      	add	r3, r2
 800e426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e42a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e42c:	69bb      	ldr	r3, [r7, #24]
 800e42e:	627b      	str	r3, [r7, #36]	; 0x24
 800e430:	e01b      	b.n	800e46a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e432:	69fb      	ldr	r3, [r7, #28]
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	3301      	adds	r3, #1
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	021b      	lsls	r3, r3, #8
 800e440:	b21a      	sxth	r2, r3
 800e442:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e446:	4313      	orrs	r3, r2
 800e448:	b21b      	sxth	r3, r3
 800e44a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e44c:	6a3b      	ldr	r3, [r7, #32]
 800e44e:	8a7a      	ldrh	r2, [r7, #18]
 800e450:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e452:	6a3b      	ldr	r3, [r7, #32]
 800e454:	3302      	adds	r3, #2
 800e456:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	3301      	adds	r3, #1
 800e45c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e45e:	69fb      	ldr	r3, [r7, #28]
 800e460:	3301      	adds	r3, #1
 800e462:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e466:	3b01      	subs	r3, #1
 800e468:	627b      	str	r3, [r7, #36]	; 0x24
 800e46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d1e0      	bne.n	800e432 <USB_WritePMA+0x38>
  }
}
 800e470:	bf00      	nop
 800e472:	bf00      	nop
 800e474:	372c      	adds	r7, #44	; 0x2c
 800e476:	46bd      	mov	sp, r7
 800e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47c:	4770      	bx	lr

0800e47e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e47e:	b480      	push	{r7}
 800e480:	b08b      	sub	sp, #44	; 0x2c
 800e482:	af00      	add	r7, sp, #0
 800e484:	60f8      	str	r0, [r7, #12]
 800e486:	60b9      	str	r1, [r7, #8]
 800e488:	4611      	mov	r1, r2
 800e48a:	461a      	mov	r2, r3
 800e48c:	460b      	mov	r3, r1
 800e48e:	80fb      	strh	r3, [r7, #6]
 800e490:	4613      	mov	r3, r2
 800e492:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e494:	88bb      	ldrh	r3, [r7, #4]
 800e496:	085b      	lsrs	r3, r3, #1
 800e498:	b29b      	uxth	r3, r3
 800e49a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e4a4:	88fa      	ldrh	r2, [r7, #6]
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e4ae:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e4b0:	69bb      	ldr	r3, [r7, #24]
 800e4b2:	627b      	str	r3, [r7, #36]	; 0x24
 800e4b4:	e018      	b.n	800e4e8 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e4b6:	6a3b      	ldr	r3, [r7, #32]
 800e4b8:	881b      	ldrh	r3, [r3, #0]
 800e4ba:	b29b      	uxth	r3, r3
 800e4bc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e4be:	6a3b      	ldr	r3, [r7, #32]
 800e4c0:	3302      	adds	r3, #2
 800e4c2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	b2da      	uxtb	r2, r3
 800e4c8:	69fb      	ldr	r3, [r7, #28]
 800e4ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	0a1b      	lsrs	r3, r3, #8
 800e4d6:	b2da      	uxtb	r2, r3
 800e4d8:	69fb      	ldr	r3, [r7, #28]
 800e4da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e4dc:	69fb      	ldr	r3, [r7, #28]
 800e4de:	3301      	adds	r3, #1
 800e4e0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e4:	3b01      	subs	r3, #1
 800e4e6:	627b      	str	r3, [r7, #36]	; 0x24
 800e4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d1e3      	bne.n	800e4b6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e4ee:	88bb      	ldrh	r3, [r7, #4]
 800e4f0:	f003 0301 	and.w	r3, r3, #1
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d007      	beq.n	800e50a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e4fa:	6a3b      	ldr	r3, [r7, #32]
 800e4fc:	881b      	ldrh	r3, [r3, #0]
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	b2da      	uxtb	r2, r3
 800e506:	69fb      	ldr	r3, [r7, #28]
 800e508:	701a      	strb	r2, [r3, #0]
  }
}
 800e50a:	bf00      	nop
 800e50c:	372c      	adds	r7, #44	; 0x2c
 800e50e:	46bd      	mov	sp, r7
 800e510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e514:	4770      	bx	lr
	...

0800e518 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	460b      	mov	r3, r1
 800e522:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e524:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e528:	f002 fce6 	bl	8010ef8 <USBD_static_malloc>
 800e52c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d109      	bne.n	800e548 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	32b0      	adds	r2, #176	; 0xb0
 800e53e:	2100      	movs	r1, #0
 800e540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e544:	2302      	movs	r3, #2
 800e546:	e0d4      	b.n	800e6f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e548:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800e54c:	2100      	movs	r1, #0
 800e54e:	68f8      	ldr	r0, [r7, #12]
 800e550:	f004 fc83 	bl	8012e5a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	32b0      	adds	r2, #176	; 0xb0
 800e55e:	68f9      	ldr	r1, [r7, #12]
 800e560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	32b0      	adds	r2, #176	; 0xb0
 800e56e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	7c1b      	ldrb	r3, [r3, #16]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d138      	bne.n	800e5f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e580:	4b5e      	ldr	r3, [pc, #376]	; (800e6fc <USBD_CDC_Init+0x1e4>)
 800e582:	7819      	ldrb	r1, [r3, #0]
 800e584:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e588:	2202      	movs	r2, #2
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f002 fab6 	bl	8010afc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e590:	4b5a      	ldr	r3, [pc, #360]	; (800e6fc <USBD_CDC_Init+0x1e4>)
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	f003 020f 	and.w	r2, r3, #15
 800e598:	6879      	ldr	r1, [r7, #4]
 800e59a:	4613      	mov	r3, r2
 800e59c:	009b      	lsls	r3, r3, #2
 800e59e:	4413      	add	r3, r2
 800e5a0:	009b      	lsls	r3, r3, #2
 800e5a2:	440b      	add	r3, r1
 800e5a4:	3324      	adds	r3, #36	; 0x24
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e5aa:	4b55      	ldr	r3, [pc, #340]	; (800e700 <USBD_CDC_Init+0x1e8>)
 800e5ac:	7819      	ldrb	r1, [r3, #0]
 800e5ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5b2:	2202      	movs	r2, #2
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f002 faa1 	bl	8010afc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e5ba:	4b51      	ldr	r3, [pc, #324]	; (800e700 <USBD_CDC_Init+0x1e8>)
 800e5bc:	781b      	ldrb	r3, [r3, #0]
 800e5be:	f003 020f 	and.w	r2, r3, #15
 800e5c2:	6879      	ldr	r1, [r7, #4]
 800e5c4:	4613      	mov	r3, r2
 800e5c6:	009b      	lsls	r3, r3, #2
 800e5c8:	4413      	add	r3, r2
 800e5ca:	009b      	lsls	r3, r3, #2
 800e5cc:	440b      	add	r3, r1
 800e5ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e5d6:	4b4b      	ldr	r3, [pc, #300]	; (800e704 <USBD_CDC_Init+0x1ec>)
 800e5d8:	781b      	ldrb	r3, [r3, #0]
 800e5da:	f003 020f 	and.w	r2, r3, #15
 800e5de:	6879      	ldr	r1, [r7, #4]
 800e5e0:	4613      	mov	r3, r2
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	4413      	add	r3, r2
 800e5e6:	009b      	lsls	r3, r3, #2
 800e5e8:	440b      	add	r3, r1
 800e5ea:	3326      	adds	r3, #38	; 0x26
 800e5ec:	2210      	movs	r2, #16
 800e5ee:	801a      	strh	r2, [r3, #0]
 800e5f0:	e035      	b.n	800e65e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e5f2:	4b42      	ldr	r3, [pc, #264]	; (800e6fc <USBD_CDC_Init+0x1e4>)
 800e5f4:	7819      	ldrb	r1, [r3, #0]
 800e5f6:	2340      	movs	r3, #64	; 0x40
 800e5f8:	2202      	movs	r2, #2
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f002 fa7e 	bl	8010afc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e600:	4b3e      	ldr	r3, [pc, #248]	; (800e6fc <USBD_CDC_Init+0x1e4>)
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	f003 020f 	and.w	r2, r3, #15
 800e608:	6879      	ldr	r1, [r7, #4]
 800e60a:	4613      	mov	r3, r2
 800e60c:	009b      	lsls	r3, r3, #2
 800e60e:	4413      	add	r3, r2
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	440b      	add	r3, r1
 800e614:	3324      	adds	r3, #36	; 0x24
 800e616:	2201      	movs	r2, #1
 800e618:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e61a:	4b39      	ldr	r3, [pc, #228]	; (800e700 <USBD_CDC_Init+0x1e8>)
 800e61c:	7819      	ldrb	r1, [r3, #0]
 800e61e:	2340      	movs	r3, #64	; 0x40
 800e620:	2202      	movs	r2, #2
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f002 fa6a 	bl	8010afc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e628:	4b35      	ldr	r3, [pc, #212]	; (800e700 <USBD_CDC_Init+0x1e8>)
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	f003 020f 	and.w	r2, r3, #15
 800e630:	6879      	ldr	r1, [r7, #4]
 800e632:	4613      	mov	r3, r2
 800e634:	009b      	lsls	r3, r3, #2
 800e636:	4413      	add	r3, r2
 800e638:	009b      	lsls	r3, r3, #2
 800e63a:	440b      	add	r3, r1
 800e63c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e640:	2201      	movs	r2, #1
 800e642:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e644:	4b2f      	ldr	r3, [pc, #188]	; (800e704 <USBD_CDC_Init+0x1ec>)
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	f003 020f 	and.w	r2, r3, #15
 800e64c:	6879      	ldr	r1, [r7, #4]
 800e64e:	4613      	mov	r3, r2
 800e650:	009b      	lsls	r3, r3, #2
 800e652:	4413      	add	r3, r2
 800e654:	009b      	lsls	r3, r3, #2
 800e656:	440b      	add	r3, r1
 800e658:	3326      	adds	r3, #38	; 0x26
 800e65a:	2210      	movs	r2, #16
 800e65c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e65e:	4b29      	ldr	r3, [pc, #164]	; (800e704 <USBD_CDC_Init+0x1ec>)
 800e660:	7819      	ldrb	r1, [r3, #0]
 800e662:	2308      	movs	r3, #8
 800e664:	2203      	movs	r2, #3
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f002 fa48 	bl	8010afc <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e66c:	4b25      	ldr	r3, [pc, #148]	; (800e704 <USBD_CDC_Init+0x1ec>)
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	f003 020f 	and.w	r2, r3, #15
 800e674:	6879      	ldr	r1, [r7, #4]
 800e676:	4613      	mov	r3, r2
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	4413      	add	r3, r2
 800e67c:	009b      	lsls	r3, r3, #2
 800e67e:	440b      	add	r3, r1
 800e680:	3324      	adds	r3, #36	; 0x24
 800e682:	2201      	movs	r2, #1
 800e684:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2200      	movs	r2, #0
 800e68a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e694:	687a      	ldr	r2, [r7, #4]
 800e696:	33b0      	adds	r3, #176	; 0xb0
 800e698:	009b      	lsls	r3, r3, #2
 800e69a:	4413      	add	r3, r2
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d101      	bne.n	800e6c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e6bc:	2302      	movs	r3, #2
 800e6be:	e018      	b.n	800e6f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	7c1b      	ldrb	r3, [r3, #16]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d10a      	bne.n	800e6de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e6c8:	4b0d      	ldr	r3, [pc, #52]	; (800e700 <USBD_CDC_Init+0x1e8>)
 800e6ca:	7819      	ldrb	r1, [r3, #0]
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e6d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f002 fb8c 	bl	8010df4 <USBD_LL_PrepareReceive>
 800e6dc:	e008      	b.n	800e6f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e6de:	4b08      	ldr	r3, [pc, #32]	; (800e700 <USBD_CDC_Init+0x1e8>)
 800e6e0:	7819      	ldrb	r1, [r3, #0]
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e6e8:	2340      	movs	r3, #64	; 0x40
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f002 fb82 	bl	8010df4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e6f0:	2300      	movs	r3, #0
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3710      	adds	r7, #16
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	200000b3 	.word	0x200000b3
 800e700:	200000b4 	.word	0x200000b4
 800e704:	200000b5 	.word	0x200000b5

0800e708 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	460b      	mov	r3, r1
 800e712:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e714:	4b3a      	ldr	r3, [pc, #232]	; (800e800 <USBD_CDC_DeInit+0xf8>)
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	4619      	mov	r1, r3
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f002 fa2c 	bl	8010b78 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e720:	4b37      	ldr	r3, [pc, #220]	; (800e800 <USBD_CDC_DeInit+0xf8>)
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	f003 020f 	and.w	r2, r3, #15
 800e728:	6879      	ldr	r1, [r7, #4]
 800e72a:	4613      	mov	r3, r2
 800e72c:	009b      	lsls	r3, r3, #2
 800e72e:	4413      	add	r3, r2
 800e730:	009b      	lsls	r3, r3, #2
 800e732:	440b      	add	r3, r1
 800e734:	3324      	adds	r3, #36	; 0x24
 800e736:	2200      	movs	r2, #0
 800e738:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e73a:	4b32      	ldr	r3, [pc, #200]	; (800e804 <USBD_CDC_DeInit+0xfc>)
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	4619      	mov	r1, r3
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f002 fa19 	bl	8010b78 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e746:	4b2f      	ldr	r3, [pc, #188]	; (800e804 <USBD_CDC_DeInit+0xfc>)
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	f003 020f 	and.w	r2, r3, #15
 800e74e:	6879      	ldr	r1, [r7, #4]
 800e750:	4613      	mov	r3, r2
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	4413      	add	r3, r2
 800e756:	009b      	lsls	r3, r3, #2
 800e758:	440b      	add	r3, r1
 800e75a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e75e:	2200      	movs	r2, #0
 800e760:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e762:	4b29      	ldr	r3, [pc, #164]	; (800e808 <USBD_CDC_DeInit+0x100>)
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	4619      	mov	r1, r3
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f002 fa05 	bl	8010b78 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e76e:	4b26      	ldr	r3, [pc, #152]	; (800e808 <USBD_CDC_DeInit+0x100>)
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	f003 020f 	and.w	r2, r3, #15
 800e776:	6879      	ldr	r1, [r7, #4]
 800e778:	4613      	mov	r3, r2
 800e77a:	009b      	lsls	r3, r3, #2
 800e77c:	4413      	add	r3, r2
 800e77e:	009b      	lsls	r3, r3, #2
 800e780:	440b      	add	r3, r1
 800e782:	3324      	adds	r3, #36	; 0x24
 800e784:	2200      	movs	r2, #0
 800e786:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e788:	4b1f      	ldr	r3, [pc, #124]	; (800e808 <USBD_CDC_DeInit+0x100>)
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	f003 020f 	and.w	r2, r3, #15
 800e790:	6879      	ldr	r1, [r7, #4]
 800e792:	4613      	mov	r3, r2
 800e794:	009b      	lsls	r3, r3, #2
 800e796:	4413      	add	r3, r2
 800e798:	009b      	lsls	r3, r3, #2
 800e79a:	440b      	add	r3, r1
 800e79c:	3326      	adds	r3, #38	; 0x26
 800e79e:	2200      	movs	r2, #0
 800e7a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	32b0      	adds	r2, #176	; 0xb0
 800e7ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d01f      	beq.n	800e7f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e7ba:	687a      	ldr	r2, [r7, #4]
 800e7bc:	33b0      	adds	r3, #176	; 0xb0
 800e7be:	009b      	lsls	r3, r3, #2
 800e7c0:	4413      	add	r3, r2
 800e7c2:	685b      	ldr	r3, [r3, #4]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	32b0      	adds	r2, #176	; 0xb0
 800e7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f002 fb9c 	bl	8010f14 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	32b0      	adds	r2, #176	; 0xb0
 800e7e6:	2100      	movs	r1, #0
 800e7e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e7f4:	2300      	movs	r3, #0
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3708      	adds	r7, #8
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	200000b3 	.word	0x200000b3
 800e804:	200000b4 	.word	0x200000b4
 800e808:	200000b5 	.word	0x200000b5

0800e80c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b086      	sub	sp, #24
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	32b0      	adds	r2, #176	; 0xb0
 800e820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e824:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e826:	2300      	movs	r3, #0
 800e828:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e82a:	2300      	movs	r3, #0
 800e82c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e82e:	2300      	movs	r3, #0
 800e830:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d101      	bne.n	800e83c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e838:	2303      	movs	r3, #3
 800e83a:	e0bf      	b.n	800e9bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e844:	2b00      	cmp	r3, #0
 800e846:	d050      	beq.n	800e8ea <USBD_CDC_Setup+0xde>
 800e848:	2b20      	cmp	r3, #32
 800e84a:	f040 80af 	bne.w	800e9ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	88db      	ldrh	r3, [r3, #6]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d03a      	beq.n	800e8cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	b25b      	sxtb	r3, r3
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	da1b      	bge.n	800e898 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e866:	687a      	ldr	r2, [r7, #4]
 800e868:	33b0      	adds	r3, #176	; 0xb0
 800e86a:	009b      	lsls	r3, r3, #2
 800e86c:	4413      	add	r3, r2
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	689b      	ldr	r3, [r3, #8]
 800e872:	683a      	ldr	r2, [r7, #0]
 800e874:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e876:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e878:	683a      	ldr	r2, [r7, #0]
 800e87a:	88d2      	ldrh	r2, [r2, #6]
 800e87c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	88db      	ldrh	r3, [r3, #6]
 800e882:	2b07      	cmp	r3, #7
 800e884:	bf28      	it	cs
 800e886:	2307      	movcs	r3, #7
 800e888:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	89fa      	ldrh	r2, [r7, #14]
 800e88e:	4619      	mov	r1, r3
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f001 fd21 	bl	80102d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e896:	e090      	b.n	800e9ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	785a      	ldrb	r2, [r3, #1]
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	88db      	ldrh	r3, [r3, #6]
 800e8a6:	2b3f      	cmp	r3, #63	; 0x3f
 800e8a8:	d803      	bhi.n	800e8b2 <USBD_CDC_Setup+0xa6>
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	88db      	ldrh	r3, [r3, #6]
 800e8ae:	b2da      	uxtb	r2, r3
 800e8b0:	e000      	b.n	800e8b4 <USBD_CDC_Setup+0xa8>
 800e8b2:	2240      	movs	r2, #64	; 0x40
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e8ba:	6939      	ldr	r1, [r7, #16]
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f001 fd33 	bl	8010330 <USBD_CtlPrepareRx>
      break;
 800e8ca:	e076      	b.n	800e9ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	33b0      	adds	r3, #176	; 0xb0
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	4413      	add	r3, r2
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	683a      	ldr	r2, [r7, #0]
 800e8e0:	7850      	ldrb	r0, [r2, #1]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	6839      	ldr	r1, [r7, #0]
 800e8e6:	4798      	blx	r3
      break;
 800e8e8:	e067      	b.n	800e9ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	785b      	ldrb	r3, [r3, #1]
 800e8ee:	2b0b      	cmp	r3, #11
 800e8f0:	d851      	bhi.n	800e996 <USBD_CDC_Setup+0x18a>
 800e8f2:	a201      	add	r2, pc, #4	; (adr r2, 800e8f8 <USBD_CDC_Setup+0xec>)
 800e8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f8:	0800e929 	.word	0x0800e929
 800e8fc:	0800e9a5 	.word	0x0800e9a5
 800e900:	0800e997 	.word	0x0800e997
 800e904:	0800e997 	.word	0x0800e997
 800e908:	0800e997 	.word	0x0800e997
 800e90c:	0800e997 	.word	0x0800e997
 800e910:	0800e997 	.word	0x0800e997
 800e914:	0800e997 	.word	0x0800e997
 800e918:	0800e997 	.word	0x0800e997
 800e91c:	0800e997 	.word	0x0800e997
 800e920:	0800e953 	.word	0x0800e953
 800e924:	0800e97d 	.word	0x0800e97d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	2b03      	cmp	r3, #3
 800e932:	d107      	bne.n	800e944 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e934:	f107 030a 	add.w	r3, r7, #10
 800e938:	2202      	movs	r2, #2
 800e93a:	4619      	mov	r1, r3
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f001 fccb 	bl	80102d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e942:	e032      	b.n	800e9aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e944:	6839      	ldr	r1, [r7, #0]
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f001 fc55 	bl	80101f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800e94c:	2303      	movs	r3, #3
 800e94e:	75fb      	strb	r3, [r7, #23]
          break;
 800e950:	e02b      	b.n	800e9aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	2b03      	cmp	r3, #3
 800e95c:	d107      	bne.n	800e96e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e95e:	f107 030d 	add.w	r3, r7, #13
 800e962:	2201      	movs	r2, #1
 800e964:	4619      	mov	r1, r3
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f001 fcb6 	bl	80102d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e96c:	e01d      	b.n	800e9aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e96e:	6839      	ldr	r1, [r7, #0]
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f001 fc40 	bl	80101f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800e976:	2303      	movs	r3, #3
 800e978:	75fb      	strb	r3, [r7, #23]
          break;
 800e97a:	e016      	b.n	800e9aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e982:	b2db      	uxtb	r3, r3
 800e984:	2b03      	cmp	r3, #3
 800e986:	d00f      	beq.n	800e9a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e988:	6839      	ldr	r1, [r7, #0]
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f001 fc33 	bl	80101f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800e990:	2303      	movs	r3, #3
 800e992:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e994:	e008      	b.n	800e9a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e996:	6839      	ldr	r1, [r7, #0]
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f001 fc2c 	bl	80101f6 <USBD_CtlError>
          ret = USBD_FAIL;
 800e99e:	2303      	movs	r3, #3
 800e9a0:	75fb      	strb	r3, [r7, #23]
          break;
 800e9a2:	e002      	b.n	800e9aa <USBD_CDC_Setup+0x19e>
          break;
 800e9a4:	bf00      	nop
 800e9a6:	e008      	b.n	800e9ba <USBD_CDC_Setup+0x1ae>
          break;
 800e9a8:	bf00      	nop
      }
      break;
 800e9aa:	e006      	b.n	800e9ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e9ac:	6839      	ldr	r1, [r7, #0]
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f001 fc21 	bl	80101f6 <USBD_CtlError>
      ret = USBD_FAIL;
 800e9b4:	2303      	movs	r3, #3
 800e9b6:	75fb      	strb	r3, [r7, #23]
      break;
 800e9b8:	bf00      	nop
  }

  return (uint8_t)ret;
 800e9ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3718      	adds	r7, #24
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b084      	sub	sp, #16
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e9d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	32b0      	adds	r2, #176	; 0xb0
 800e9e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d101      	bne.n	800e9ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e9ea:	2303      	movs	r3, #3
 800e9ec:	e065      	b.n	800eaba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	32b0      	adds	r2, #176	; 0xb0
 800e9f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e9fe:	78fb      	ldrb	r3, [r7, #3]
 800ea00:	f003 020f 	and.w	r2, r3, #15
 800ea04:	6879      	ldr	r1, [r7, #4]
 800ea06:	4613      	mov	r3, r2
 800ea08:	009b      	lsls	r3, r3, #2
 800ea0a:	4413      	add	r3, r2
 800ea0c:	009b      	lsls	r3, r3, #2
 800ea0e:	440b      	add	r3, r1
 800ea10:	3318      	adds	r3, #24
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d02f      	beq.n	800ea78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ea18:	78fb      	ldrb	r3, [r7, #3]
 800ea1a:	f003 020f 	and.w	r2, r3, #15
 800ea1e:	6879      	ldr	r1, [r7, #4]
 800ea20:	4613      	mov	r3, r2
 800ea22:	009b      	lsls	r3, r3, #2
 800ea24:	4413      	add	r3, r2
 800ea26:	009b      	lsls	r3, r3, #2
 800ea28:	440b      	add	r3, r1
 800ea2a:	3318      	adds	r3, #24
 800ea2c:	681a      	ldr	r2, [r3, #0]
 800ea2e:	78fb      	ldrb	r3, [r7, #3]
 800ea30:	f003 010f 	and.w	r1, r3, #15
 800ea34:	68f8      	ldr	r0, [r7, #12]
 800ea36:	460b      	mov	r3, r1
 800ea38:	009b      	lsls	r3, r3, #2
 800ea3a:	440b      	add	r3, r1
 800ea3c:	00db      	lsls	r3, r3, #3
 800ea3e:	4403      	add	r3, r0
 800ea40:	3338      	adds	r3, #56	; 0x38
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	fbb2 f1f3 	udiv	r1, r2, r3
 800ea48:	fb01 f303 	mul.w	r3, r1, r3
 800ea4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d112      	bne.n	800ea78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ea52:	78fb      	ldrb	r3, [r7, #3]
 800ea54:	f003 020f 	and.w	r2, r3, #15
 800ea58:	6879      	ldr	r1, [r7, #4]
 800ea5a:	4613      	mov	r3, r2
 800ea5c:	009b      	lsls	r3, r3, #2
 800ea5e:	4413      	add	r3, r2
 800ea60:	009b      	lsls	r3, r3, #2
 800ea62:	440b      	add	r3, r1
 800ea64:	3318      	adds	r3, #24
 800ea66:	2200      	movs	r2, #0
 800ea68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ea6a:	78f9      	ldrb	r1, [r7, #3]
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	2200      	movs	r2, #0
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f002 f987 	bl	8010d84 <USBD_LL_Transmit>
 800ea76:	e01f      	b.n	800eab8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ea86:	687a      	ldr	r2, [r7, #4]
 800ea88:	33b0      	adds	r3, #176	; 0xb0
 800ea8a:	009b      	lsls	r3, r3, #2
 800ea8c:	4413      	add	r3, r2
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	691b      	ldr	r3, [r3, #16]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d010      	beq.n	800eab8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ea9c:	687a      	ldr	r2, [r7, #4]
 800ea9e:	33b0      	adds	r3, #176	; 0xb0
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	4413      	add	r3, r2
 800eaa4:	685b      	ldr	r3, [r3, #4]
 800eaa6:	691b      	ldr	r3, [r3, #16]
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800eaae:	68ba      	ldr	r2, [r7, #8]
 800eab0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800eab4:	78fa      	ldrb	r2, [r7, #3]
 800eab6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800eab8:	2300      	movs	r3, #0
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}

0800eac2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eac2:	b580      	push	{r7, lr}
 800eac4:	b084      	sub	sp, #16
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	6078      	str	r0, [r7, #4]
 800eaca:	460b      	mov	r3, r1
 800eacc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	32b0      	adds	r2, #176	; 0xb0
 800ead8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eadc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	32b0      	adds	r2, #176	; 0xb0
 800eae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d101      	bne.n	800eaf4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800eaf0:	2303      	movs	r3, #3
 800eaf2:	e01a      	b.n	800eb2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800eaf4:	78fb      	ldrb	r3, [r7, #3]
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f002 f9b3 	bl	8010e64 <USBD_LL_GetRxDataSize>
 800eafe:	4602      	mov	r2, r0
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800eb0c:	687a      	ldr	r2, [r7, #4]
 800eb0e:	33b0      	adds	r3, #176	; 0xb0
 800eb10:	009b      	lsls	r3, r3, #2
 800eb12:	4413      	add	r3, r2
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	68db      	ldr	r3, [r3, #12]
 800eb18:	68fa      	ldr	r2, [r7, #12]
 800eb1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800eb1e:	68fa      	ldr	r2, [r7, #12]
 800eb20:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800eb24:	4611      	mov	r1, r2
 800eb26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3710      	adds	r7, #16
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}

0800eb32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800eb32:	b580      	push	{r7, lr}
 800eb34:	b084      	sub	sp, #16
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	32b0      	adds	r2, #176	; 0xb0
 800eb44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d101      	bne.n	800eb54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800eb50:	2303      	movs	r3, #3
 800eb52:	e025      	b.n	800eba0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800eb5a:	687a      	ldr	r2, [r7, #4]
 800eb5c:	33b0      	adds	r3, #176	; 0xb0
 800eb5e:	009b      	lsls	r3, r3, #2
 800eb60:	4413      	add	r3, r2
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d01a      	beq.n	800eb9e <USBD_CDC_EP0_RxReady+0x6c>
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800eb6e:	2bff      	cmp	r3, #255	; 0xff
 800eb70:	d015      	beq.n	800eb9e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800eb78:	687a      	ldr	r2, [r7, #4]
 800eb7a:	33b0      	adds	r3, #176	; 0xb0
 800eb7c:	009b      	lsls	r3, r3, #2
 800eb7e:	4413      	add	r3, r2
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	689b      	ldr	r3, [r3, #8]
 800eb84:	68fa      	ldr	r2, [r7, #12]
 800eb86:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800eb8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800eb8c:	68fa      	ldr	r2, [r7, #12]
 800eb8e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800eb92:	b292      	uxth	r2, r2
 800eb94:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	22ff      	movs	r2, #255	; 0xff
 800eb9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800eb9e:	2300      	movs	r3, #0
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3710      	adds	r7, #16
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b086      	sub	sp, #24
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ebb0:	2182      	movs	r1, #130	; 0x82
 800ebb2:	4818      	ldr	r0, [pc, #96]	; (800ec14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ebb4:	f000 fcbd 	bl	800f532 <USBD_GetEpDesc>
 800ebb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ebba:	2101      	movs	r1, #1
 800ebbc:	4815      	ldr	r0, [pc, #84]	; (800ec14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ebbe:	f000 fcb8 	bl	800f532 <USBD_GetEpDesc>
 800ebc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ebc4:	2181      	movs	r1, #129	; 0x81
 800ebc6:	4813      	ldr	r0, [pc, #76]	; (800ec14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ebc8:	f000 fcb3 	bl	800f532 <USBD_GetEpDesc>
 800ebcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d002      	beq.n	800ebda <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	2210      	movs	r2, #16
 800ebd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d006      	beq.n	800ebee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ebe8:	711a      	strb	r2, [r3, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d006      	beq.n	800ec02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ebfc:	711a      	strb	r2, [r3, #4]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2243      	movs	r2, #67	; 0x43
 800ec06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ec08:	4b02      	ldr	r3, [pc, #8]	; (800ec14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3718      	adds	r7, #24
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	20000070 	.word	0x20000070

0800ec18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b086      	sub	sp, #24
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ec20:	2182      	movs	r1, #130	; 0x82
 800ec22:	4818      	ldr	r0, [pc, #96]	; (800ec84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ec24:	f000 fc85 	bl	800f532 <USBD_GetEpDesc>
 800ec28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ec2a:	2101      	movs	r1, #1
 800ec2c:	4815      	ldr	r0, [pc, #84]	; (800ec84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ec2e:	f000 fc80 	bl	800f532 <USBD_GetEpDesc>
 800ec32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ec34:	2181      	movs	r1, #129	; 0x81
 800ec36:	4813      	ldr	r0, [pc, #76]	; (800ec84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ec38:	f000 fc7b 	bl	800f532 <USBD_GetEpDesc>
 800ec3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d002      	beq.n	800ec4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	2210      	movs	r2, #16
 800ec48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d006      	beq.n	800ec5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	2200      	movs	r2, #0
 800ec54:	711a      	strb	r2, [r3, #4]
 800ec56:	2200      	movs	r2, #0
 800ec58:	f042 0202 	orr.w	r2, r2, #2
 800ec5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d006      	beq.n	800ec72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2200      	movs	r2, #0
 800ec68:	711a      	strb	r2, [r3, #4]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	f042 0202 	orr.w	r2, r2, #2
 800ec70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2243      	movs	r2, #67	; 0x43
 800ec76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ec78:	4b02      	ldr	r3, [pc, #8]	; (800ec84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3718      	adds	r7, #24
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	20000070 	.word	0x20000070

0800ec88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b086      	sub	sp, #24
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ec90:	2182      	movs	r1, #130	; 0x82
 800ec92:	4818      	ldr	r0, [pc, #96]	; (800ecf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ec94:	f000 fc4d 	bl	800f532 <USBD_GetEpDesc>
 800ec98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ec9a:	2101      	movs	r1, #1
 800ec9c:	4815      	ldr	r0, [pc, #84]	; (800ecf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ec9e:	f000 fc48 	bl	800f532 <USBD_GetEpDesc>
 800eca2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800eca4:	2181      	movs	r1, #129	; 0x81
 800eca6:	4813      	ldr	r0, [pc, #76]	; (800ecf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800eca8:	f000 fc43 	bl	800f532 <USBD_GetEpDesc>
 800ecac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d002      	beq.n	800ecba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	2210      	movs	r2, #16
 800ecb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d006      	beq.n	800ecce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ecc8:	711a      	strb	r2, [r3, #4]
 800ecca:	2200      	movs	r2, #0
 800eccc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d006      	beq.n	800ece2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ecdc:	711a      	strb	r2, [r3, #4]
 800ecde:	2200      	movs	r2, #0
 800ece0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2243      	movs	r2, #67	; 0x43
 800ece6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ece8:	4b02      	ldr	r3, [pc, #8]	; (800ecf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3718      	adds	r7, #24
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop
 800ecf4:	20000070 	.word	0x20000070

0800ecf8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b083      	sub	sp, #12
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	220a      	movs	r2, #10
 800ed04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ed06:	4b03      	ldr	r3, [pc, #12]	; (800ed14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	370c      	adds	r7, #12
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr
 800ed14:	2000002c 	.word	0x2000002c

0800ed18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d101      	bne.n	800ed2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ed28:	2303      	movs	r3, #3
 800ed2a:	e009      	b.n	800ed40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	33b0      	adds	r3, #176	; 0xb0
 800ed36:	009b      	lsls	r3, r3, #2
 800ed38:	4413      	add	r3, r2
 800ed3a:	683a      	ldr	r2, [r7, #0]
 800ed3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ed3e:	2300      	movs	r3, #0
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	370c      	adds	r7, #12
 800ed44:	46bd      	mov	sp, r7
 800ed46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4a:	4770      	bx	lr

0800ed4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b087      	sub	sp, #28
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	60f8      	str	r0, [r7, #12]
 800ed54:	60b9      	str	r1, [r7, #8]
 800ed56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	32b0      	adds	r2, #176	; 0xb0
 800ed62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d101      	bne.n	800ed72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ed6e:	2303      	movs	r3, #3
 800ed70:	e008      	b.n	800ed84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	68ba      	ldr	r2, [r7, #8]
 800ed76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ed82:	2300      	movs	r3, #0
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	371c      	adds	r7, #28
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b085      	sub	sp, #20
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	32b0      	adds	r2, #176	; 0xb0
 800eda4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eda8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d101      	bne.n	800edb4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800edb0:	2303      	movs	r3, #3
 800edb2:	e004      	b.n	800edbe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	683a      	ldr	r2, [r7, #0]
 800edb8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800edbc:	2300      	movs	r3, #0
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3714      	adds	r7, #20
 800edc2:	46bd      	mov	sp, r7
 800edc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc8:	4770      	bx	lr
	...

0800edcc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b084      	sub	sp, #16
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	32b0      	adds	r2, #176	; 0xb0
 800edde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ede2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ede4:	2301      	movs	r3, #1
 800ede6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d101      	bne.n	800edf2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800edee:	2303      	movs	r3, #3
 800edf0:	e025      	b.n	800ee3e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d11f      	bne.n	800ee3c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	2201      	movs	r2, #1
 800ee00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ee04:	4b10      	ldr	r3, [pc, #64]	; (800ee48 <USBD_CDC_TransmitPacket+0x7c>)
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	f003 020f 	and.w	r2, r3, #15
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	4613      	mov	r3, r2
 800ee16:	009b      	lsls	r3, r3, #2
 800ee18:	4413      	add	r3, r2
 800ee1a:	009b      	lsls	r3, r3, #2
 800ee1c:	4403      	add	r3, r0
 800ee1e:	3318      	adds	r3, #24
 800ee20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ee22:	4b09      	ldr	r3, [pc, #36]	; (800ee48 <USBD_CDC_TransmitPacket+0x7c>)
 800ee24:	7819      	ldrb	r1, [r3, #0]
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f001 ffa6 	bl	8010d84 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ee3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3710      	adds	r7, #16
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	200000b3 	.word	0x200000b3

0800ee4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	32b0      	adds	r2, #176	; 0xb0
 800ee5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	32b0      	adds	r2, #176	; 0xb0
 800ee6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d101      	bne.n	800ee7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ee76:	2303      	movs	r3, #3
 800ee78:	e018      	b.n	800eeac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	7c1b      	ldrb	r3, [r3, #16]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d10a      	bne.n	800ee98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ee82:	4b0c      	ldr	r3, [pc, #48]	; (800eeb4 <USBD_CDC_ReceivePacket+0x68>)
 800ee84:	7819      	ldrb	r1, [r3, #0]
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ee8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f001 ffaf 	bl	8010df4 <USBD_LL_PrepareReceive>
 800ee96:	e008      	b.n	800eeaa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ee98:	4b06      	ldr	r3, [pc, #24]	; (800eeb4 <USBD_CDC_ReceivePacket+0x68>)
 800ee9a:	7819      	ldrb	r1, [r3, #0]
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eea2:	2340      	movs	r3, #64	; 0x40
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f001 ffa5 	bl	8010df4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eeaa:	2300      	movs	r3, #0
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3710      	adds	r7, #16
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	200000b4 	.word	0x200000b4

0800eeb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b086      	sub	sp, #24
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	4613      	mov	r3, r2
 800eec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d101      	bne.n	800eed0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800eecc:	2303      	movs	r3, #3
 800eece:	e01f      	b.n	800ef10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2200      	movs	r2, #0
 800eed4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	2200      	movs	r2, #0
 800eedc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2200      	movs	r2, #0
 800eee4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d003      	beq.n	800eef6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	68ba      	ldr	r2, [r7, #8]
 800eef2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	2201      	movs	r2, #1
 800eefa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	79fa      	ldrb	r2, [r7, #7]
 800ef02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ef04:	68f8      	ldr	r0, [r7, #12]
 800ef06:	f001 fd65 	bl	80109d4 <USBD_LL_Init>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ef0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3718      	adds	r7, #24
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b084      	sub	sp, #16
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ef22:	2300      	movs	r3, #0
 800ef24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d101      	bne.n	800ef30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ef2c:	2303      	movs	r3, #3
 800ef2e:	e025      	b.n	800ef7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	683a      	ldr	r2, [r7, #0]
 800ef34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	32ae      	adds	r2, #174	; 0xae
 800ef42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d00f      	beq.n	800ef6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	32ae      	adds	r2, #174	; 0xae
 800ef56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef5c:	f107 020e 	add.w	r2, r7, #14
 800ef60:	4610      	mov	r0, r2
 800ef62:	4798      	blx	r3
 800ef64:	4602      	mov	r2, r0
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ef72:	1c5a      	adds	r2, r3, #1
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ef7a:	2300      	movs	r3, #0
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3710      	adds	r7, #16
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f001 fd83 	bl	8010a98 <USBD_LL_Start>
 800ef92:	4603      	mov	r3, r0
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3708      	adds	r7, #8
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b083      	sub	sp, #12
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800efa4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	370c      	adds	r7, #12
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr

0800efb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800efb2:	b580      	push	{r7, lr}
 800efb4:	b084      	sub	sp, #16
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
 800efba:	460b      	mov	r3, r1
 800efbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800efbe:	2300      	movs	r3, #0
 800efc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d009      	beq.n	800efe0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	78fa      	ldrb	r2, [r7, #3]
 800efd6:	4611      	mov	r1, r2
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	4798      	blx	r3
 800efdc:	4603      	mov	r3, r0
 800efde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800efe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3710      	adds	r7, #16
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}

0800efea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800efea:	b580      	push	{r7, lr}
 800efec:	b084      	sub	sp, #16
 800efee:	af00      	add	r7, sp, #0
 800eff0:	6078      	str	r0, [r7, #4]
 800eff2:	460b      	mov	r3, r1
 800eff4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800eff6:	2300      	movs	r3, #0
 800eff8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	78fa      	ldrb	r2, [r7, #3]
 800f004:	4611      	mov	r1, r2
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	4798      	blx	r3
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d001      	beq.n	800f014 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f010:	2303      	movs	r3, #3
 800f012:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f014:	7bfb      	ldrb	r3, [r7, #15]
}
 800f016:	4618      	mov	r0, r3
 800f018:	3710      	adds	r7, #16
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f01e:	b580      	push	{r7, lr}
 800f020:	b084      	sub	sp, #16
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
 800f026:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f02e:	6839      	ldr	r1, [r7, #0]
 800f030:	4618      	mov	r0, r3
 800f032:	f001 f8a6 	bl	8010182 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2201      	movs	r2, #1
 800f03a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f044:	461a      	mov	r2, r3
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f052:	f003 031f 	and.w	r3, r3, #31
 800f056:	2b02      	cmp	r3, #2
 800f058:	d01a      	beq.n	800f090 <USBD_LL_SetupStage+0x72>
 800f05a:	2b02      	cmp	r3, #2
 800f05c:	d822      	bhi.n	800f0a4 <USBD_LL_SetupStage+0x86>
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d002      	beq.n	800f068 <USBD_LL_SetupStage+0x4a>
 800f062:	2b01      	cmp	r3, #1
 800f064:	d00a      	beq.n	800f07c <USBD_LL_SetupStage+0x5e>
 800f066:	e01d      	b.n	800f0a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f06e:	4619      	mov	r1, r3
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f000 fad3 	bl	800f61c <USBD_StdDevReq>
 800f076:	4603      	mov	r3, r0
 800f078:	73fb      	strb	r3, [r7, #15]
      break;
 800f07a:	e020      	b.n	800f0be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f082:	4619      	mov	r1, r3
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f000 fb3b 	bl	800f700 <USBD_StdItfReq>
 800f08a:	4603      	mov	r3, r0
 800f08c:	73fb      	strb	r3, [r7, #15]
      break;
 800f08e:	e016      	b.n	800f0be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f096:	4619      	mov	r1, r3
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f000 fb9d 	bl	800f7d8 <USBD_StdEPReq>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	73fb      	strb	r3, [r7, #15]
      break;
 800f0a2:	e00c      	b.n	800f0be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f0aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f0ae:	b2db      	uxtb	r3, r3
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f001 fd96 	bl	8010be4 <USBD_LL_StallEP>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	73fb      	strb	r3, [r7, #15]
      break;
 800f0bc:	bf00      	nop
  }

  return ret;
 800f0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3710      	adds	r7, #16
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b086      	sub	sp, #24
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	60f8      	str	r0, [r7, #12]
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	607a      	str	r2, [r7, #4]
 800f0d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f0da:	7afb      	ldrb	r3, [r7, #11]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d16e      	bne.n	800f1be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f0e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f0ee:	2b03      	cmp	r3, #3
 800f0f0:	f040 8098 	bne.w	800f224 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	689a      	ldr	r2, [r3, #8]
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	68db      	ldr	r3, [r3, #12]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d913      	bls.n	800f128 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f100:	693b      	ldr	r3, [r7, #16]
 800f102:	689a      	ldr	r2, [r3, #8]
 800f104:	693b      	ldr	r3, [r7, #16]
 800f106:	68db      	ldr	r3, [r3, #12]
 800f108:	1ad2      	subs	r2, r2, r3
 800f10a:	693b      	ldr	r3, [r7, #16]
 800f10c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	68da      	ldr	r2, [r3, #12]
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	689b      	ldr	r3, [r3, #8]
 800f116:	4293      	cmp	r3, r2
 800f118:	bf28      	it	cs
 800f11a:	4613      	movcs	r3, r2
 800f11c:	461a      	mov	r2, r3
 800f11e:	6879      	ldr	r1, [r7, #4]
 800f120:	68f8      	ldr	r0, [r7, #12]
 800f122:	f001 f922 	bl	801036a <USBD_CtlContinueRx>
 800f126:	e07d      	b.n	800f224 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f12e:	f003 031f 	and.w	r3, r3, #31
 800f132:	2b02      	cmp	r3, #2
 800f134:	d014      	beq.n	800f160 <USBD_LL_DataOutStage+0x98>
 800f136:	2b02      	cmp	r3, #2
 800f138:	d81d      	bhi.n	800f176 <USBD_LL_DataOutStage+0xae>
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d002      	beq.n	800f144 <USBD_LL_DataOutStage+0x7c>
 800f13e:	2b01      	cmp	r3, #1
 800f140:	d003      	beq.n	800f14a <USBD_LL_DataOutStage+0x82>
 800f142:	e018      	b.n	800f176 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f144:	2300      	movs	r3, #0
 800f146:	75bb      	strb	r3, [r7, #22]
            break;
 800f148:	e018      	b.n	800f17c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f150:	b2db      	uxtb	r3, r3
 800f152:	4619      	mov	r1, r3
 800f154:	68f8      	ldr	r0, [r7, #12]
 800f156:	f000 f9d2 	bl	800f4fe <USBD_CoreFindIF>
 800f15a:	4603      	mov	r3, r0
 800f15c:	75bb      	strb	r3, [r7, #22]
            break;
 800f15e:	e00d      	b.n	800f17c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f166:	b2db      	uxtb	r3, r3
 800f168:	4619      	mov	r1, r3
 800f16a:	68f8      	ldr	r0, [r7, #12]
 800f16c:	f000 f9d4 	bl	800f518 <USBD_CoreFindEP>
 800f170:	4603      	mov	r3, r0
 800f172:	75bb      	strb	r3, [r7, #22]
            break;
 800f174:	e002      	b.n	800f17c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f176:	2300      	movs	r3, #0
 800f178:	75bb      	strb	r3, [r7, #22]
            break;
 800f17a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f17c:	7dbb      	ldrb	r3, [r7, #22]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d119      	bne.n	800f1b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	2b03      	cmp	r3, #3
 800f18c:	d113      	bne.n	800f1b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f18e:	7dba      	ldrb	r2, [r7, #22]
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	32ae      	adds	r2, #174	; 0xae
 800f194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f198:	691b      	ldr	r3, [r3, #16]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d00b      	beq.n	800f1b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f19e:	7dba      	ldrb	r2, [r7, #22]
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f1a6:	7dba      	ldrb	r2, [r7, #22]
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	32ae      	adds	r2, #174	; 0xae
 800f1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1b0:	691b      	ldr	r3, [r3, #16]
 800f1b2:	68f8      	ldr	r0, [r7, #12]
 800f1b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f1b6:	68f8      	ldr	r0, [r7, #12]
 800f1b8:	f001 f8e8 	bl	801038c <USBD_CtlSendStatus>
 800f1bc:	e032      	b.n	800f224 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f1be:	7afb      	ldrb	r3, [r7, #11]
 800f1c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1c4:	b2db      	uxtb	r3, r3
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	68f8      	ldr	r0, [r7, #12]
 800f1ca:	f000 f9a5 	bl	800f518 <USBD_CoreFindEP>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f1d2:	7dbb      	ldrb	r3, [r7, #22]
 800f1d4:	2bff      	cmp	r3, #255	; 0xff
 800f1d6:	d025      	beq.n	800f224 <USBD_LL_DataOutStage+0x15c>
 800f1d8:	7dbb      	ldrb	r3, [r7, #22]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d122      	bne.n	800f224 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	2b03      	cmp	r3, #3
 800f1e8:	d117      	bne.n	800f21a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f1ea:	7dba      	ldrb	r2, [r7, #22]
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	32ae      	adds	r2, #174	; 0xae
 800f1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1f4:	699b      	ldr	r3, [r3, #24]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d00f      	beq.n	800f21a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f1fa:	7dba      	ldrb	r2, [r7, #22]
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f202:	7dba      	ldrb	r2, [r7, #22]
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	32ae      	adds	r2, #174	; 0xae
 800f208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f20c:	699b      	ldr	r3, [r3, #24]
 800f20e:	7afa      	ldrb	r2, [r7, #11]
 800f210:	4611      	mov	r1, r2
 800f212:	68f8      	ldr	r0, [r7, #12]
 800f214:	4798      	blx	r3
 800f216:	4603      	mov	r3, r0
 800f218:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f21a:	7dfb      	ldrb	r3, [r7, #23]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d001      	beq.n	800f224 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f220:	7dfb      	ldrb	r3, [r7, #23]
 800f222:	e000      	b.n	800f226 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f224:	2300      	movs	r3, #0
}
 800f226:	4618      	mov	r0, r3
 800f228:	3718      	adds	r7, #24
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}

0800f22e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f22e:	b580      	push	{r7, lr}
 800f230:	b086      	sub	sp, #24
 800f232:	af00      	add	r7, sp, #0
 800f234:	60f8      	str	r0, [r7, #12]
 800f236:	460b      	mov	r3, r1
 800f238:	607a      	str	r2, [r7, #4]
 800f23a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f23c:	7afb      	ldrb	r3, [r7, #11]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d16f      	bne.n	800f322 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	3314      	adds	r3, #20
 800f246:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f24e:	2b02      	cmp	r3, #2
 800f250:	d15a      	bne.n	800f308 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	689a      	ldr	r2, [r3, #8]
 800f256:	693b      	ldr	r3, [r7, #16]
 800f258:	68db      	ldr	r3, [r3, #12]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d914      	bls.n	800f288 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f25e:	693b      	ldr	r3, [r7, #16]
 800f260:	689a      	ldr	r2, [r3, #8]
 800f262:	693b      	ldr	r3, [r7, #16]
 800f264:	68db      	ldr	r3, [r3, #12]
 800f266:	1ad2      	subs	r2, r2, r3
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	689b      	ldr	r3, [r3, #8]
 800f270:	461a      	mov	r2, r3
 800f272:	6879      	ldr	r1, [r7, #4]
 800f274:	68f8      	ldr	r0, [r7, #12]
 800f276:	f001 f84a 	bl	801030e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f27a:	2300      	movs	r3, #0
 800f27c:	2200      	movs	r2, #0
 800f27e:	2100      	movs	r1, #0
 800f280:	68f8      	ldr	r0, [r7, #12]
 800f282:	f001 fdb7 	bl	8010df4 <USBD_LL_PrepareReceive>
 800f286:	e03f      	b.n	800f308 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	68da      	ldr	r2, [r3, #12]
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	689b      	ldr	r3, [r3, #8]
 800f290:	429a      	cmp	r2, r3
 800f292:	d11c      	bne.n	800f2ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	685a      	ldr	r2, [r3, #4]
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d316      	bcc.n	800f2ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	685a      	ldr	r2, [r3, #4]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d20f      	bcs.n	800f2ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	2100      	movs	r1, #0
 800f2b2:	68f8      	ldr	r0, [r7, #12]
 800f2b4:	f001 f82b 	bl	801030e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	2100      	movs	r1, #0
 800f2c6:	68f8      	ldr	r0, [r7, #12]
 800f2c8:	f001 fd94 	bl	8010df4 <USBD_LL_PrepareReceive>
 800f2cc:	e01c      	b.n	800f308 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2d4:	b2db      	uxtb	r3, r3
 800f2d6:	2b03      	cmp	r3, #3
 800f2d8:	d10f      	bne.n	800f2fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2e0:	68db      	ldr	r3, [r3, #12]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d009      	beq.n	800f2fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2f4:	68db      	ldr	r3, [r3, #12]
 800f2f6:	68f8      	ldr	r0, [r7, #12]
 800f2f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f2fa:	2180      	movs	r1, #128	; 0x80
 800f2fc:	68f8      	ldr	r0, [r7, #12]
 800f2fe:	f001 fc71 	bl	8010be4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f302:	68f8      	ldr	r0, [r7, #12]
 800f304:	f001 f855 	bl	80103b2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d03a      	beq.n	800f388 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f312:	68f8      	ldr	r0, [r7, #12]
 800f314:	f7ff fe42 	bl	800ef9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	2200      	movs	r2, #0
 800f31c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f320:	e032      	b.n	800f388 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f322:	7afb      	ldrb	r3, [r7, #11]
 800f324:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f328:	b2db      	uxtb	r3, r3
 800f32a:	4619      	mov	r1, r3
 800f32c:	68f8      	ldr	r0, [r7, #12]
 800f32e:	f000 f8f3 	bl	800f518 <USBD_CoreFindEP>
 800f332:	4603      	mov	r3, r0
 800f334:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f336:	7dfb      	ldrb	r3, [r7, #23]
 800f338:	2bff      	cmp	r3, #255	; 0xff
 800f33a:	d025      	beq.n	800f388 <USBD_LL_DataInStage+0x15a>
 800f33c:	7dfb      	ldrb	r3, [r7, #23]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d122      	bne.n	800f388 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f348:	b2db      	uxtb	r3, r3
 800f34a:	2b03      	cmp	r3, #3
 800f34c:	d11c      	bne.n	800f388 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f34e:	7dfa      	ldrb	r2, [r7, #23]
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	32ae      	adds	r2, #174	; 0xae
 800f354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f358:	695b      	ldr	r3, [r3, #20]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d014      	beq.n	800f388 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f35e:	7dfa      	ldrb	r2, [r7, #23]
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f366:	7dfa      	ldrb	r2, [r7, #23]
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	32ae      	adds	r2, #174	; 0xae
 800f36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f370:	695b      	ldr	r3, [r3, #20]
 800f372:	7afa      	ldrb	r2, [r7, #11]
 800f374:	4611      	mov	r1, r2
 800f376:	68f8      	ldr	r0, [r7, #12]
 800f378:	4798      	blx	r3
 800f37a:	4603      	mov	r3, r0
 800f37c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f37e:	7dbb      	ldrb	r3, [r7, #22]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d001      	beq.n	800f388 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f384:	7dbb      	ldrb	r3, [r7, #22]
 800f386:	e000      	b.n	800f38a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f388:	2300      	movs	r3, #0
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3718      	adds	r7, #24
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}

0800f392 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f392:	b580      	push	{r7, lr}
 800f394:	b084      	sub	sp, #16
 800f396:	af00      	add	r7, sp, #0
 800f398:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f39a:	2300      	movs	r3, #0
 800f39c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d014      	beq.n	800f3f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d00e      	beq.n	800f3f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3e0:	685b      	ldr	r3, [r3, #4]
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	6852      	ldr	r2, [r2, #4]
 800f3e6:	b2d2      	uxtb	r2, r2
 800f3e8:	4611      	mov	r1, r2
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	4798      	blx	r3
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d001      	beq.n	800f3f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f3f4:	2303      	movs	r3, #3
 800f3f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f3f8:	2340      	movs	r3, #64	; 0x40
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	2100      	movs	r1, #0
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f001 fb7c 	bl	8010afc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2201      	movs	r2, #1
 800f408:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2240      	movs	r2, #64	; 0x40
 800f410:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f414:	2340      	movs	r3, #64	; 0x40
 800f416:	2200      	movs	r2, #0
 800f418:	2180      	movs	r1, #128	; 0x80
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f001 fb6e 	bl	8010afc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2201      	movs	r2, #1
 800f424:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2240      	movs	r2, #64	; 0x40
 800f42a:	621a      	str	r2, [r3, #32]

  return ret;
 800f42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3710      	adds	r7, #16
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f436:	b480      	push	{r7}
 800f438:	b083      	sub	sp, #12
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
 800f43e:	460b      	mov	r3, r1
 800f440:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	78fa      	ldrb	r2, [r7, #3]
 800f446:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f448:	2300      	movs	r3, #0
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	370c      	adds	r7, #12
 800f44e:	46bd      	mov	sp, r7
 800f450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f454:	4770      	bx	lr

0800f456 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f456:	b480      	push	{r7}
 800f458:	b083      	sub	sp, #12
 800f45a:	af00      	add	r7, sp, #0
 800f45c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f464:	b2db      	uxtb	r3, r3
 800f466:	2b04      	cmp	r3, #4
 800f468:	d006      	beq.n	800f478 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f470:	b2da      	uxtb	r2, r3
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2204      	movs	r2, #4
 800f47c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f480:	2300      	movs	r3, #0
}
 800f482:	4618      	mov	r0, r3
 800f484:	370c      	adds	r7, #12
 800f486:	46bd      	mov	sp, r7
 800f488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48c:	4770      	bx	lr

0800f48e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f48e:	b480      	push	{r7}
 800f490:	b083      	sub	sp, #12
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f49c:	b2db      	uxtb	r3, r3
 800f49e:	2b04      	cmp	r3, #4
 800f4a0:	d106      	bne.n	800f4b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f4a8:	b2da      	uxtb	r2, r3
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f4b0:	2300      	movs	r3, #0
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	370c      	adds	r7, #12
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4bc:	4770      	bx	lr

0800f4be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f4be:	b580      	push	{r7, lr}
 800f4c0:	b082      	sub	sp, #8
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4cc:	b2db      	uxtb	r3, r3
 800f4ce:	2b03      	cmp	r3, #3
 800f4d0:	d110      	bne.n	800f4f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d00b      	beq.n	800f4f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4e2:	69db      	ldr	r3, [r3, #28]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d005      	beq.n	800f4f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4ee:	69db      	ldr	r3, [r3, #28]
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f4f4:	2300      	movs	r3, #0
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3708      	adds	r7, #8
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f4fe:	b480      	push	{r7}
 800f500:	b083      	sub	sp, #12
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
 800f506:	460b      	mov	r3, r1
 800f508:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f50a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	370c      	adds	r7, #12
 800f510:	46bd      	mov	sp, r7
 800f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f516:	4770      	bx	lr

0800f518 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f518:	b480      	push	{r7}
 800f51a:	b083      	sub	sp, #12
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	460b      	mov	r3, r1
 800f522:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f524:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f526:	4618      	mov	r0, r3
 800f528:	370c      	adds	r7, #12
 800f52a:	46bd      	mov	sp, r7
 800f52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f530:	4770      	bx	lr

0800f532 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f532:	b580      	push	{r7, lr}
 800f534:	b086      	sub	sp, #24
 800f536:	af00      	add	r7, sp, #0
 800f538:	6078      	str	r0, [r7, #4]
 800f53a:	460b      	mov	r3, r1
 800f53c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f546:	2300      	movs	r3, #0
 800f548:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	885b      	ldrh	r3, [r3, #2]
 800f54e:	b29a      	uxth	r2, r3
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	b29b      	uxth	r3, r3
 800f556:	429a      	cmp	r2, r3
 800f558:	d920      	bls.n	800f59c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	b29b      	uxth	r3, r3
 800f560:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f562:	e013      	b.n	800f58c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f564:	f107 030a 	add.w	r3, r7, #10
 800f568:	4619      	mov	r1, r3
 800f56a:	6978      	ldr	r0, [r7, #20]
 800f56c:	f000 f81b 	bl	800f5a6 <USBD_GetNextDesc>
 800f570:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	785b      	ldrb	r3, [r3, #1]
 800f576:	2b05      	cmp	r3, #5
 800f578:	d108      	bne.n	800f58c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	789b      	ldrb	r3, [r3, #2]
 800f582:	78fa      	ldrb	r2, [r7, #3]
 800f584:	429a      	cmp	r2, r3
 800f586:	d008      	beq.n	800f59a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f588:	2300      	movs	r3, #0
 800f58a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	885b      	ldrh	r3, [r3, #2]
 800f590:	b29a      	uxth	r2, r3
 800f592:	897b      	ldrh	r3, [r7, #10]
 800f594:	429a      	cmp	r2, r3
 800f596:	d8e5      	bhi.n	800f564 <USBD_GetEpDesc+0x32>
 800f598:	e000      	b.n	800f59c <USBD_GetEpDesc+0x6a>
          break;
 800f59a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f59c:	693b      	ldr	r3, [r7, #16]
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3718      	adds	r7, #24
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}

0800f5a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f5a6:	b480      	push	{r7}
 800f5a8:	b085      	sub	sp, #20
 800f5aa:	af00      	add	r7, sp, #0
 800f5ac:	6078      	str	r0, [r7, #4]
 800f5ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	881a      	ldrh	r2, [r3, #0]
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	4413      	add	r3, r2
 800f5c0:	b29a      	uxth	r2, r3
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	4413      	add	r3, r2
 800f5d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f5d2:	68fb      	ldr	r3, [r7, #12]
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3714      	adds	r7, #20
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5de:	4770      	bx	lr

0800f5e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b087      	sub	sp, #28
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f5fe:	8a3b      	ldrh	r3, [r7, #16]
 800f600:	021b      	lsls	r3, r3, #8
 800f602:	b21a      	sxth	r2, r3
 800f604:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f608:	4313      	orrs	r3, r2
 800f60a:	b21b      	sxth	r3, r3
 800f60c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f60e:	89fb      	ldrh	r3, [r7, #14]
}
 800f610:	4618      	mov	r0, r3
 800f612:	371c      	adds	r7, #28
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr

0800f61c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b084      	sub	sp, #16
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f626:	2300      	movs	r3, #0
 800f628:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f632:	2b40      	cmp	r3, #64	; 0x40
 800f634:	d005      	beq.n	800f642 <USBD_StdDevReq+0x26>
 800f636:	2b40      	cmp	r3, #64	; 0x40
 800f638:	d857      	bhi.n	800f6ea <USBD_StdDevReq+0xce>
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d00f      	beq.n	800f65e <USBD_StdDevReq+0x42>
 800f63e:	2b20      	cmp	r3, #32
 800f640:	d153      	bne.n	800f6ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	32ae      	adds	r2, #174	; 0xae
 800f64c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f650:	689b      	ldr	r3, [r3, #8]
 800f652:	6839      	ldr	r1, [r7, #0]
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	4798      	blx	r3
 800f658:	4603      	mov	r3, r0
 800f65a:	73fb      	strb	r3, [r7, #15]
      break;
 800f65c:	e04a      	b.n	800f6f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	785b      	ldrb	r3, [r3, #1]
 800f662:	2b09      	cmp	r3, #9
 800f664:	d83b      	bhi.n	800f6de <USBD_StdDevReq+0xc2>
 800f666:	a201      	add	r2, pc, #4	; (adr r2, 800f66c <USBD_StdDevReq+0x50>)
 800f668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f66c:	0800f6c1 	.word	0x0800f6c1
 800f670:	0800f6d5 	.word	0x0800f6d5
 800f674:	0800f6df 	.word	0x0800f6df
 800f678:	0800f6cb 	.word	0x0800f6cb
 800f67c:	0800f6df 	.word	0x0800f6df
 800f680:	0800f69f 	.word	0x0800f69f
 800f684:	0800f695 	.word	0x0800f695
 800f688:	0800f6df 	.word	0x0800f6df
 800f68c:	0800f6b7 	.word	0x0800f6b7
 800f690:	0800f6a9 	.word	0x0800f6a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f694:	6839      	ldr	r1, [r7, #0]
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f000 fa3c 	bl	800fb14 <USBD_GetDescriptor>
          break;
 800f69c:	e024      	b.n	800f6e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f69e:	6839      	ldr	r1, [r7, #0]
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f000 fbcb 	bl	800fe3c <USBD_SetAddress>
          break;
 800f6a6:	e01f      	b.n	800f6e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f6a8:	6839      	ldr	r1, [r7, #0]
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f000 fc0a 	bl	800fec4 <USBD_SetConfig>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	73fb      	strb	r3, [r7, #15]
          break;
 800f6b4:	e018      	b.n	800f6e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f6b6:	6839      	ldr	r1, [r7, #0]
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f000 fcad 	bl	8010018 <USBD_GetConfig>
          break;
 800f6be:	e013      	b.n	800f6e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f6c0:	6839      	ldr	r1, [r7, #0]
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 fcde 	bl	8010084 <USBD_GetStatus>
          break;
 800f6c8:	e00e      	b.n	800f6e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f6ca:	6839      	ldr	r1, [r7, #0]
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f000 fd0d 	bl	80100ec <USBD_SetFeature>
          break;
 800f6d2:	e009      	b.n	800f6e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f6d4:	6839      	ldr	r1, [r7, #0]
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f000 fd31 	bl	801013e <USBD_ClrFeature>
          break;
 800f6dc:	e004      	b.n	800f6e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f6de:	6839      	ldr	r1, [r7, #0]
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f000 fd88 	bl	80101f6 <USBD_CtlError>
          break;
 800f6e6:	bf00      	nop
      }
      break;
 800f6e8:	e004      	b.n	800f6f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f6ea:	6839      	ldr	r1, [r7, #0]
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f000 fd82 	bl	80101f6 <USBD_CtlError>
      break;
 800f6f2:	bf00      	nop
  }

  return ret;
 800f6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3710      	adds	r7, #16
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop

0800f700 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f70a:	2300      	movs	r3, #0
 800f70c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f716:	2b40      	cmp	r3, #64	; 0x40
 800f718:	d005      	beq.n	800f726 <USBD_StdItfReq+0x26>
 800f71a:	2b40      	cmp	r3, #64	; 0x40
 800f71c:	d852      	bhi.n	800f7c4 <USBD_StdItfReq+0xc4>
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d001      	beq.n	800f726 <USBD_StdItfReq+0x26>
 800f722:	2b20      	cmp	r3, #32
 800f724:	d14e      	bne.n	800f7c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f72c:	b2db      	uxtb	r3, r3
 800f72e:	3b01      	subs	r3, #1
 800f730:	2b02      	cmp	r3, #2
 800f732:	d840      	bhi.n	800f7b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	889b      	ldrh	r3, [r3, #4]
 800f738:	b2db      	uxtb	r3, r3
 800f73a:	2b01      	cmp	r3, #1
 800f73c:	d836      	bhi.n	800f7ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	889b      	ldrh	r3, [r3, #4]
 800f742:	b2db      	uxtb	r3, r3
 800f744:	4619      	mov	r1, r3
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f7ff fed9 	bl	800f4fe <USBD_CoreFindIF>
 800f74c:	4603      	mov	r3, r0
 800f74e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f750:	7bbb      	ldrb	r3, [r7, #14]
 800f752:	2bff      	cmp	r3, #255	; 0xff
 800f754:	d01d      	beq.n	800f792 <USBD_StdItfReq+0x92>
 800f756:	7bbb      	ldrb	r3, [r7, #14]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d11a      	bne.n	800f792 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f75c:	7bba      	ldrb	r2, [r7, #14]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	32ae      	adds	r2, #174	; 0xae
 800f762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f766:	689b      	ldr	r3, [r3, #8]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d00f      	beq.n	800f78c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f76c:	7bba      	ldrb	r2, [r7, #14]
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f774:	7bba      	ldrb	r2, [r7, #14]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	32ae      	adds	r2, #174	; 0xae
 800f77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f77e:	689b      	ldr	r3, [r3, #8]
 800f780:	6839      	ldr	r1, [r7, #0]
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	4798      	blx	r3
 800f786:	4603      	mov	r3, r0
 800f788:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f78a:	e004      	b.n	800f796 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f78c:	2303      	movs	r3, #3
 800f78e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f790:	e001      	b.n	800f796 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f792:	2303      	movs	r3, #3
 800f794:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	88db      	ldrh	r3, [r3, #6]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d110      	bne.n	800f7c0 <USBD_StdItfReq+0xc0>
 800f79e:	7bfb      	ldrb	r3, [r7, #15]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d10d      	bne.n	800f7c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f000 fdf1 	bl	801038c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f7aa:	e009      	b.n	800f7c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f7ac:	6839      	ldr	r1, [r7, #0]
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f000 fd21 	bl	80101f6 <USBD_CtlError>
          break;
 800f7b4:	e004      	b.n	800f7c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f7b6:	6839      	ldr	r1, [r7, #0]
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f000 fd1c 	bl	80101f6 <USBD_CtlError>
          break;
 800f7be:	e000      	b.n	800f7c2 <USBD_StdItfReq+0xc2>
          break;
 800f7c0:	bf00      	nop
      }
      break;
 800f7c2:	e004      	b.n	800f7ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f7c4:	6839      	ldr	r1, [r7, #0]
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f000 fd15 	bl	80101f6 <USBD_CtlError>
      break;
 800f7cc:	bf00      	nop
  }

  return ret;
 800f7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3710      	adds	r7, #16
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b084      	sub	sp, #16
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	889b      	ldrh	r3, [r3, #4]
 800f7ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f7f4:	2b40      	cmp	r3, #64	; 0x40
 800f7f6:	d007      	beq.n	800f808 <USBD_StdEPReq+0x30>
 800f7f8:	2b40      	cmp	r3, #64	; 0x40
 800f7fa:	f200 817f 	bhi.w	800fafc <USBD_StdEPReq+0x324>
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d02a      	beq.n	800f858 <USBD_StdEPReq+0x80>
 800f802:	2b20      	cmp	r3, #32
 800f804:	f040 817a 	bne.w	800fafc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f808:	7bbb      	ldrb	r3, [r7, #14]
 800f80a:	4619      	mov	r1, r3
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f7ff fe83 	bl	800f518 <USBD_CoreFindEP>
 800f812:	4603      	mov	r3, r0
 800f814:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f816:	7b7b      	ldrb	r3, [r7, #13]
 800f818:	2bff      	cmp	r3, #255	; 0xff
 800f81a:	f000 8174 	beq.w	800fb06 <USBD_StdEPReq+0x32e>
 800f81e:	7b7b      	ldrb	r3, [r7, #13]
 800f820:	2b00      	cmp	r3, #0
 800f822:	f040 8170 	bne.w	800fb06 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f826:	7b7a      	ldrb	r2, [r7, #13]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f82e:	7b7a      	ldrb	r2, [r7, #13]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	32ae      	adds	r2, #174	; 0xae
 800f834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f838:	689b      	ldr	r3, [r3, #8]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	f000 8163 	beq.w	800fb06 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f840:	7b7a      	ldrb	r2, [r7, #13]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	32ae      	adds	r2, #174	; 0xae
 800f846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f84a:	689b      	ldr	r3, [r3, #8]
 800f84c:	6839      	ldr	r1, [r7, #0]
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	4798      	blx	r3
 800f852:	4603      	mov	r3, r0
 800f854:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f856:	e156      	b.n	800fb06 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	785b      	ldrb	r3, [r3, #1]
 800f85c:	2b03      	cmp	r3, #3
 800f85e:	d008      	beq.n	800f872 <USBD_StdEPReq+0x9a>
 800f860:	2b03      	cmp	r3, #3
 800f862:	f300 8145 	bgt.w	800faf0 <USBD_StdEPReq+0x318>
 800f866:	2b00      	cmp	r3, #0
 800f868:	f000 809b 	beq.w	800f9a2 <USBD_StdEPReq+0x1ca>
 800f86c:	2b01      	cmp	r3, #1
 800f86e:	d03c      	beq.n	800f8ea <USBD_StdEPReq+0x112>
 800f870:	e13e      	b.n	800faf0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f878:	b2db      	uxtb	r3, r3
 800f87a:	2b02      	cmp	r3, #2
 800f87c:	d002      	beq.n	800f884 <USBD_StdEPReq+0xac>
 800f87e:	2b03      	cmp	r3, #3
 800f880:	d016      	beq.n	800f8b0 <USBD_StdEPReq+0xd8>
 800f882:	e02c      	b.n	800f8de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f884:	7bbb      	ldrb	r3, [r7, #14]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d00d      	beq.n	800f8a6 <USBD_StdEPReq+0xce>
 800f88a:	7bbb      	ldrb	r3, [r7, #14]
 800f88c:	2b80      	cmp	r3, #128	; 0x80
 800f88e:	d00a      	beq.n	800f8a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f890:	7bbb      	ldrb	r3, [r7, #14]
 800f892:	4619      	mov	r1, r3
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	f001 f9a5 	bl	8010be4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f89a:	2180      	movs	r1, #128	; 0x80
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f001 f9a1 	bl	8010be4 <USBD_LL_StallEP>
 800f8a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f8a4:	e020      	b.n	800f8e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f8a6:	6839      	ldr	r1, [r7, #0]
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f000 fca4 	bl	80101f6 <USBD_CtlError>
              break;
 800f8ae:	e01b      	b.n	800f8e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	885b      	ldrh	r3, [r3, #2]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d10e      	bne.n	800f8d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f8b8:	7bbb      	ldrb	r3, [r7, #14]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d00b      	beq.n	800f8d6 <USBD_StdEPReq+0xfe>
 800f8be:	7bbb      	ldrb	r3, [r7, #14]
 800f8c0:	2b80      	cmp	r3, #128	; 0x80
 800f8c2:	d008      	beq.n	800f8d6 <USBD_StdEPReq+0xfe>
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	88db      	ldrh	r3, [r3, #6]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d104      	bne.n	800f8d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f8cc:	7bbb      	ldrb	r3, [r7, #14]
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f001 f987 	bl	8010be4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f000 fd58 	bl	801038c <USBD_CtlSendStatus>

              break;
 800f8dc:	e004      	b.n	800f8e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f8de:	6839      	ldr	r1, [r7, #0]
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f000 fc88 	bl	80101f6 <USBD_CtlError>
              break;
 800f8e6:	bf00      	nop
          }
          break;
 800f8e8:	e107      	b.n	800fafa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	2b02      	cmp	r3, #2
 800f8f4:	d002      	beq.n	800f8fc <USBD_StdEPReq+0x124>
 800f8f6:	2b03      	cmp	r3, #3
 800f8f8:	d016      	beq.n	800f928 <USBD_StdEPReq+0x150>
 800f8fa:	e04b      	b.n	800f994 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f8fc:	7bbb      	ldrb	r3, [r7, #14]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d00d      	beq.n	800f91e <USBD_StdEPReq+0x146>
 800f902:	7bbb      	ldrb	r3, [r7, #14]
 800f904:	2b80      	cmp	r3, #128	; 0x80
 800f906:	d00a      	beq.n	800f91e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f908:	7bbb      	ldrb	r3, [r7, #14]
 800f90a:	4619      	mov	r1, r3
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f001 f969 	bl	8010be4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f912:	2180      	movs	r1, #128	; 0x80
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	f001 f965 	bl	8010be4 <USBD_LL_StallEP>
 800f91a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f91c:	e040      	b.n	800f9a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f91e:	6839      	ldr	r1, [r7, #0]
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f000 fc68 	bl	80101f6 <USBD_CtlError>
              break;
 800f926:	e03b      	b.n	800f9a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	885b      	ldrh	r3, [r3, #2]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d136      	bne.n	800f99e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f930:	7bbb      	ldrb	r3, [r7, #14]
 800f932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f936:	2b00      	cmp	r3, #0
 800f938:	d004      	beq.n	800f944 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f93a:	7bbb      	ldrb	r3, [r7, #14]
 800f93c:	4619      	mov	r1, r3
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f001 f986 	bl	8010c50 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f000 fd21 	bl	801038c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f94a:	7bbb      	ldrb	r3, [r7, #14]
 800f94c:	4619      	mov	r1, r3
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f7ff fde2 	bl	800f518 <USBD_CoreFindEP>
 800f954:	4603      	mov	r3, r0
 800f956:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f958:	7b7b      	ldrb	r3, [r7, #13]
 800f95a:	2bff      	cmp	r3, #255	; 0xff
 800f95c:	d01f      	beq.n	800f99e <USBD_StdEPReq+0x1c6>
 800f95e:	7b7b      	ldrb	r3, [r7, #13]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d11c      	bne.n	800f99e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f964:	7b7a      	ldrb	r2, [r7, #13]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f96c:	7b7a      	ldrb	r2, [r7, #13]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	32ae      	adds	r2, #174	; 0xae
 800f972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f976:	689b      	ldr	r3, [r3, #8]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d010      	beq.n	800f99e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f97c:	7b7a      	ldrb	r2, [r7, #13]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	32ae      	adds	r2, #174	; 0xae
 800f982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f986:	689b      	ldr	r3, [r3, #8]
 800f988:	6839      	ldr	r1, [r7, #0]
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	4798      	blx	r3
 800f98e:	4603      	mov	r3, r0
 800f990:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f992:	e004      	b.n	800f99e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f994:	6839      	ldr	r1, [r7, #0]
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f000 fc2d 	bl	80101f6 <USBD_CtlError>
              break;
 800f99c:	e000      	b.n	800f9a0 <USBD_StdEPReq+0x1c8>
              break;
 800f99e:	bf00      	nop
          }
          break;
 800f9a0:	e0ab      	b.n	800fafa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	2b02      	cmp	r3, #2
 800f9ac:	d002      	beq.n	800f9b4 <USBD_StdEPReq+0x1dc>
 800f9ae:	2b03      	cmp	r3, #3
 800f9b0:	d032      	beq.n	800fa18 <USBD_StdEPReq+0x240>
 800f9b2:	e097      	b.n	800fae4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f9b4:	7bbb      	ldrb	r3, [r7, #14]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d007      	beq.n	800f9ca <USBD_StdEPReq+0x1f2>
 800f9ba:	7bbb      	ldrb	r3, [r7, #14]
 800f9bc:	2b80      	cmp	r3, #128	; 0x80
 800f9be:	d004      	beq.n	800f9ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f9c0:	6839      	ldr	r1, [r7, #0]
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f000 fc17 	bl	80101f6 <USBD_CtlError>
                break;
 800f9c8:	e091      	b.n	800faee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f9ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	da0b      	bge.n	800f9ea <USBD_StdEPReq+0x212>
 800f9d2:	7bbb      	ldrb	r3, [r7, #14]
 800f9d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f9d8:	4613      	mov	r3, r2
 800f9da:	009b      	lsls	r3, r3, #2
 800f9dc:	4413      	add	r3, r2
 800f9de:	009b      	lsls	r3, r3, #2
 800f9e0:	3310      	adds	r3, #16
 800f9e2:	687a      	ldr	r2, [r7, #4]
 800f9e4:	4413      	add	r3, r2
 800f9e6:	3304      	adds	r3, #4
 800f9e8:	e00b      	b.n	800fa02 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f9ea:	7bbb      	ldrb	r3, [r7, #14]
 800f9ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f9f0:	4613      	mov	r3, r2
 800f9f2:	009b      	lsls	r3, r3, #2
 800f9f4:	4413      	add	r3, r2
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f9fc:	687a      	ldr	r2, [r7, #4]
 800f9fe:	4413      	add	r3, r2
 800fa00:	3304      	adds	r3, #4
 800fa02:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	2200      	movs	r2, #0
 800fa08:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	2202      	movs	r2, #2
 800fa0e:	4619      	mov	r1, r3
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f000 fc61 	bl	80102d8 <USBD_CtlSendData>
              break;
 800fa16:	e06a      	b.n	800faee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fa18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	da11      	bge.n	800fa44 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fa20:	7bbb      	ldrb	r3, [r7, #14]
 800fa22:	f003 020f 	and.w	r2, r3, #15
 800fa26:	6879      	ldr	r1, [r7, #4]
 800fa28:	4613      	mov	r3, r2
 800fa2a:	009b      	lsls	r3, r3, #2
 800fa2c:	4413      	add	r3, r2
 800fa2e:	009b      	lsls	r3, r3, #2
 800fa30:	440b      	add	r3, r1
 800fa32:	3324      	adds	r3, #36	; 0x24
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d117      	bne.n	800fa6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fa3a:	6839      	ldr	r1, [r7, #0]
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f000 fbda 	bl	80101f6 <USBD_CtlError>
                  break;
 800fa42:	e054      	b.n	800faee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fa44:	7bbb      	ldrb	r3, [r7, #14]
 800fa46:	f003 020f 	and.w	r2, r3, #15
 800fa4a:	6879      	ldr	r1, [r7, #4]
 800fa4c:	4613      	mov	r3, r2
 800fa4e:	009b      	lsls	r3, r3, #2
 800fa50:	4413      	add	r3, r2
 800fa52:	009b      	lsls	r3, r3, #2
 800fa54:	440b      	add	r3, r1
 800fa56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fa5a:	881b      	ldrh	r3, [r3, #0]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d104      	bne.n	800fa6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fa60:	6839      	ldr	r1, [r7, #0]
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f000 fbc7 	bl	80101f6 <USBD_CtlError>
                  break;
 800fa68:	e041      	b.n	800faee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	da0b      	bge.n	800fa8a <USBD_StdEPReq+0x2b2>
 800fa72:	7bbb      	ldrb	r3, [r7, #14]
 800fa74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa78:	4613      	mov	r3, r2
 800fa7a:	009b      	lsls	r3, r3, #2
 800fa7c:	4413      	add	r3, r2
 800fa7e:	009b      	lsls	r3, r3, #2
 800fa80:	3310      	adds	r3, #16
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	4413      	add	r3, r2
 800fa86:	3304      	adds	r3, #4
 800fa88:	e00b      	b.n	800faa2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fa8a:	7bbb      	ldrb	r3, [r7, #14]
 800fa8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa90:	4613      	mov	r3, r2
 800fa92:	009b      	lsls	r3, r3, #2
 800fa94:	4413      	add	r3, r2
 800fa96:	009b      	lsls	r3, r3, #2
 800fa98:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fa9c:	687a      	ldr	r2, [r7, #4]
 800fa9e:	4413      	add	r3, r2
 800faa0:	3304      	adds	r3, #4
 800faa2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800faa4:	7bbb      	ldrb	r3, [r7, #14]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d002      	beq.n	800fab0 <USBD_StdEPReq+0x2d8>
 800faaa:	7bbb      	ldrb	r3, [r7, #14]
 800faac:	2b80      	cmp	r3, #128	; 0x80
 800faae:	d103      	bne.n	800fab8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	2200      	movs	r2, #0
 800fab4:	601a      	str	r2, [r3, #0]
 800fab6:	e00e      	b.n	800fad6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fab8:	7bbb      	ldrb	r3, [r7, #14]
 800faba:	4619      	mov	r1, r3
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f001 f8fd 	bl	8010cbc <USBD_LL_IsStallEP>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d003      	beq.n	800fad0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	2201      	movs	r2, #1
 800facc:	601a      	str	r2, [r3, #0]
 800face:	e002      	b.n	800fad6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	2200      	movs	r2, #0
 800fad4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fad6:	68bb      	ldr	r3, [r7, #8]
 800fad8:	2202      	movs	r2, #2
 800fada:	4619      	mov	r1, r3
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f000 fbfb 	bl	80102d8 <USBD_CtlSendData>
              break;
 800fae2:	e004      	b.n	800faee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800fae4:	6839      	ldr	r1, [r7, #0]
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f000 fb85 	bl	80101f6 <USBD_CtlError>
              break;
 800faec:	bf00      	nop
          }
          break;
 800faee:	e004      	b.n	800fafa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800faf0:	6839      	ldr	r1, [r7, #0]
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f000 fb7f 	bl	80101f6 <USBD_CtlError>
          break;
 800faf8:	bf00      	nop
      }
      break;
 800fafa:	e005      	b.n	800fb08 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800fafc:	6839      	ldr	r1, [r7, #0]
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 fb79 	bl	80101f6 <USBD_CtlError>
      break;
 800fb04:	e000      	b.n	800fb08 <USBD_StdEPReq+0x330>
      break;
 800fb06:	bf00      	nop
  }

  return ret;
 800fb08:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3710      	adds	r7, #16
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}
	...

0800fb14 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b084      	sub	sp, #16
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fb1e:	2300      	movs	r3, #0
 800fb20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fb22:	2300      	movs	r3, #0
 800fb24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fb26:	2300      	movs	r3, #0
 800fb28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	885b      	ldrh	r3, [r3, #2]
 800fb2e:	0a1b      	lsrs	r3, r3, #8
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	3b01      	subs	r3, #1
 800fb34:	2b0e      	cmp	r3, #14
 800fb36:	f200 8152 	bhi.w	800fdde <USBD_GetDescriptor+0x2ca>
 800fb3a:	a201      	add	r2, pc, #4	; (adr r2, 800fb40 <USBD_GetDescriptor+0x2c>)
 800fb3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb40:	0800fbb1 	.word	0x0800fbb1
 800fb44:	0800fbc9 	.word	0x0800fbc9
 800fb48:	0800fc09 	.word	0x0800fc09
 800fb4c:	0800fddf 	.word	0x0800fddf
 800fb50:	0800fddf 	.word	0x0800fddf
 800fb54:	0800fd7f 	.word	0x0800fd7f
 800fb58:	0800fdab 	.word	0x0800fdab
 800fb5c:	0800fddf 	.word	0x0800fddf
 800fb60:	0800fddf 	.word	0x0800fddf
 800fb64:	0800fddf 	.word	0x0800fddf
 800fb68:	0800fddf 	.word	0x0800fddf
 800fb6c:	0800fddf 	.word	0x0800fddf
 800fb70:	0800fddf 	.word	0x0800fddf
 800fb74:	0800fddf 	.word	0x0800fddf
 800fb78:	0800fb7d 	.word	0x0800fb7d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb82:	69db      	ldr	r3, [r3, #28]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d00b      	beq.n	800fba0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb8e:	69db      	ldr	r3, [r3, #28]
 800fb90:	687a      	ldr	r2, [r7, #4]
 800fb92:	7c12      	ldrb	r2, [r2, #16]
 800fb94:	f107 0108 	add.w	r1, r7, #8
 800fb98:	4610      	mov	r0, r2
 800fb9a:	4798      	blx	r3
 800fb9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb9e:	e126      	b.n	800fdee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fba0:	6839      	ldr	r1, [r7, #0]
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f000 fb27 	bl	80101f6 <USBD_CtlError>
        err++;
 800fba8:	7afb      	ldrb	r3, [r7, #11]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	72fb      	strb	r3, [r7, #11]
      break;
 800fbae:	e11e      	b.n	800fdee <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	7c12      	ldrb	r2, [r2, #16]
 800fbbc:	f107 0108 	add.w	r1, r7, #8
 800fbc0:	4610      	mov	r0, r2
 800fbc2:	4798      	blx	r3
 800fbc4:	60f8      	str	r0, [r7, #12]
      break;
 800fbc6:	e112      	b.n	800fdee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	7c1b      	ldrb	r3, [r3, #16]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d10d      	bne.n	800fbec <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbd8:	f107 0208 	add.w	r2, r7, #8
 800fbdc:	4610      	mov	r0, r2
 800fbde:	4798      	blx	r3
 800fbe0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	3301      	adds	r3, #1
 800fbe6:	2202      	movs	r2, #2
 800fbe8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fbea:	e100      	b.n	800fdee <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf4:	f107 0208 	add.w	r2, r7, #8
 800fbf8:	4610      	mov	r0, r2
 800fbfa:	4798      	blx	r3
 800fbfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	3301      	adds	r3, #1
 800fc02:	2202      	movs	r2, #2
 800fc04:	701a      	strb	r2, [r3, #0]
      break;
 800fc06:	e0f2      	b.n	800fdee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	885b      	ldrh	r3, [r3, #2]
 800fc0c:	b2db      	uxtb	r3, r3
 800fc0e:	2b05      	cmp	r3, #5
 800fc10:	f200 80ac 	bhi.w	800fd6c <USBD_GetDescriptor+0x258>
 800fc14:	a201      	add	r2, pc, #4	; (adr r2, 800fc1c <USBD_GetDescriptor+0x108>)
 800fc16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc1a:	bf00      	nop
 800fc1c:	0800fc35 	.word	0x0800fc35
 800fc20:	0800fc69 	.word	0x0800fc69
 800fc24:	0800fc9d 	.word	0x0800fc9d
 800fc28:	0800fcd1 	.word	0x0800fcd1
 800fc2c:	0800fd05 	.word	0x0800fd05
 800fc30:	0800fd39 	.word	0x0800fd39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d00b      	beq.n	800fc58 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc46:	685b      	ldr	r3, [r3, #4]
 800fc48:	687a      	ldr	r2, [r7, #4]
 800fc4a:	7c12      	ldrb	r2, [r2, #16]
 800fc4c:	f107 0108 	add.w	r1, r7, #8
 800fc50:	4610      	mov	r0, r2
 800fc52:	4798      	blx	r3
 800fc54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc56:	e091      	b.n	800fd7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc58:	6839      	ldr	r1, [r7, #0]
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f000 facb 	bl	80101f6 <USBD_CtlError>
            err++;
 800fc60:	7afb      	ldrb	r3, [r7, #11]
 800fc62:	3301      	adds	r3, #1
 800fc64:	72fb      	strb	r3, [r7, #11]
          break;
 800fc66:	e089      	b.n	800fd7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc6e:	689b      	ldr	r3, [r3, #8]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d00b      	beq.n	800fc8c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc7a:	689b      	ldr	r3, [r3, #8]
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	7c12      	ldrb	r2, [r2, #16]
 800fc80:	f107 0108 	add.w	r1, r7, #8
 800fc84:	4610      	mov	r0, r2
 800fc86:	4798      	blx	r3
 800fc88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc8a:	e077      	b.n	800fd7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc8c:	6839      	ldr	r1, [r7, #0]
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 fab1 	bl	80101f6 <USBD_CtlError>
            err++;
 800fc94:	7afb      	ldrb	r3, [r7, #11]
 800fc96:	3301      	adds	r3, #1
 800fc98:	72fb      	strb	r3, [r7, #11]
          break;
 800fc9a:	e06f      	b.n	800fd7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fca2:	68db      	ldr	r3, [r3, #12]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d00b      	beq.n	800fcc0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcae:	68db      	ldr	r3, [r3, #12]
 800fcb0:	687a      	ldr	r2, [r7, #4]
 800fcb2:	7c12      	ldrb	r2, [r2, #16]
 800fcb4:	f107 0108 	add.w	r1, r7, #8
 800fcb8:	4610      	mov	r0, r2
 800fcba:	4798      	blx	r3
 800fcbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fcbe:	e05d      	b.n	800fd7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fcc0:	6839      	ldr	r1, [r7, #0]
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f000 fa97 	bl	80101f6 <USBD_CtlError>
            err++;
 800fcc8:	7afb      	ldrb	r3, [r7, #11]
 800fcca:	3301      	adds	r3, #1
 800fccc:	72fb      	strb	r3, [r7, #11]
          break;
 800fcce:	e055      	b.n	800fd7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcd6:	691b      	ldr	r3, [r3, #16]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d00b      	beq.n	800fcf4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fce2:	691b      	ldr	r3, [r3, #16]
 800fce4:	687a      	ldr	r2, [r7, #4]
 800fce6:	7c12      	ldrb	r2, [r2, #16]
 800fce8:	f107 0108 	add.w	r1, r7, #8
 800fcec:	4610      	mov	r0, r2
 800fcee:	4798      	blx	r3
 800fcf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fcf2:	e043      	b.n	800fd7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fcf4:	6839      	ldr	r1, [r7, #0]
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f000 fa7d 	bl	80101f6 <USBD_CtlError>
            err++;
 800fcfc:	7afb      	ldrb	r3, [r7, #11]
 800fcfe:	3301      	adds	r3, #1
 800fd00:	72fb      	strb	r3, [r7, #11]
          break;
 800fd02:	e03b      	b.n	800fd7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd0a:	695b      	ldr	r3, [r3, #20]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d00b      	beq.n	800fd28 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd16:	695b      	ldr	r3, [r3, #20]
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	7c12      	ldrb	r2, [r2, #16]
 800fd1c:	f107 0108 	add.w	r1, r7, #8
 800fd20:	4610      	mov	r0, r2
 800fd22:	4798      	blx	r3
 800fd24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd26:	e029      	b.n	800fd7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fd28:	6839      	ldr	r1, [r7, #0]
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f000 fa63 	bl	80101f6 <USBD_CtlError>
            err++;
 800fd30:	7afb      	ldrb	r3, [r7, #11]
 800fd32:	3301      	adds	r3, #1
 800fd34:	72fb      	strb	r3, [r7, #11]
          break;
 800fd36:	e021      	b.n	800fd7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd3e:	699b      	ldr	r3, [r3, #24]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d00b      	beq.n	800fd5c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd4a:	699b      	ldr	r3, [r3, #24]
 800fd4c:	687a      	ldr	r2, [r7, #4]
 800fd4e:	7c12      	ldrb	r2, [r2, #16]
 800fd50:	f107 0108 	add.w	r1, r7, #8
 800fd54:	4610      	mov	r0, r2
 800fd56:	4798      	blx	r3
 800fd58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd5a:	e00f      	b.n	800fd7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fd5c:	6839      	ldr	r1, [r7, #0]
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 fa49 	bl	80101f6 <USBD_CtlError>
            err++;
 800fd64:	7afb      	ldrb	r3, [r7, #11]
 800fd66:	3301      	adds	r3, #1
 800fd68:	72fb      	strb	r3, [r7, #11]
          break;
 800fd6a:	e007      	b.n	800fd7c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fd6c:	6839      	ldr	r1, [r7, #0]
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f000 fa41 	bl	80101f6 <USBD_CtlError>
          err++;
 800fd74:	7afb      	ldrb	r3, [r7, #11]
 800fd76:	3301      	adds	r3, #1
 800fd78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fd7a:	bf00      	nop
      }
      break;
 800fd7c:	e037      	b.n	800fdee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	7c1b      	ldrb	r3, [r3, #16]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d109      	bne.n	800fd9a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd8e:	f107 0208 	add.w	r2, r7, #8
 800fd92:	4610      	mov	r0, r2
 800fd94:	4798      	blx	r3
 800fd96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd98:	e029      	b.n	800fdee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fd9a:	6839      	ldr	r1, [r7, #0]
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f000 fa2a 	bl	80101f6 <USBD_CtlError>
        err++;
 800fda2:	7afb      	ldrb	r3, [r7, #11]
 800fda4:	3301      	adds	r3, #1
 800fda6:	72fb      	strb	r3, [r7, #11]
      break;
 800fda8:	e021      	b.n	800fdee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	7c1b      	ldrb	r3, [r3, #16]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d10d      	bne.n	800fdce <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdba:	f107 0208 	add.w	r2, r7, #8
 800fdbe:	4610      	mov	r0, r2
 800fdc0:	4798      	blx	r3
 800fdc2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	3301      	adds	r3, #1
 800fdc8:	2207      	movs	r2, #7
 800fdca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fdcc:	e00f      	b.n	800fdee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fdce:	6839      	ldr	r1, [r7, #0]
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f000 fa10 	bl	80101f6 <USBD_CtlError>
        err++;
 800fdd6:	7afb      	ldrb	r3, [r7, #11]
 800fdd8:	3301      	adds	r3, #1
 800fdda:	72fb      	strb	r3, [r7, #11]
      break;
 800fddc:	e007      	b.n	800fdee <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fdde:	6839      	ldr	r1, [r7, #0]
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f000 fa08 	bl	80101f6 <USBD_CtlError>
      err++;
 800fde6:	7afb      	ldrb	r3, [r7, #11]
 800fde8:	3301      	adds	r3, #1
 800fdea:	72fb      	strb	r3, [r7, #11]
      break;
 800fdec:	bf00      	nop
  }

  if (err != 0U)
 800fdee:	7afb      	ldrb	r3, [r7, #11]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d11e      	bne.n	800fe32 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	88db      	ldrh	r3, [r3, #6]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d016      	beq.n	800fe2a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fdfc:	893b      	ldrh	r3, [r7, #8]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d00e      	beq.n	800fe20 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	88da      	ldrh	r2, [r3, #6]
 800fe06:	893b      	ldrh	r3, [r7, #8]
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	bf28      	it	cs
 800fe0c:	4613      	movcs	r3, r2
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fe12:	893b      	ldrh	r3, [r7, #8]
 800fe14:	461a      	mov	r2, r3
 800fe16:	68f9      	ldr	r1, [r7, #12]
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f000 fa5d 	bl	80102d8 <USBD_CtlSendData>
 800fe1e:	e009      	b.n	800fe34 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fe20:	6839      	ldr	r1, [r7, #0]
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 f9e7 	bl	80101f6 <USBD_CtlError>
 800fe28:	e004      	b.n	800fe34 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f000 faae 	bl	801038c <USBD_CtlSendStatus>
 800fe30:	e000      	b.n	800fe34 <USBD_GetDescriptor+0x320>
    return;
 800fe32:	bf00      	nop
  }
}
 800fe34:	3710      	adds	r7, #16
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop

0800fe3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b084      	sub	sp, #16
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	889b      	ldrh	r3, [r3, #4]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d131      	bne.n	800feb2 <USBD_SetAddress+0x76>
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	88db      	ldrh	r3, [r3, #6]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d12d      	bne.n	800feb2 <USBD_SetAddress+0x76>
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	885b      	ldrh	r3, [r3, #2]
 800fe5a:	2b7f      	cmp	r3, #127	; 0x7f
 800fe5c:	d829      	bhi.n	800feb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	885b      	ldrh	r3, [r3, #2]
 800fe62:	b2db      	uxtb	r3, r3
 800fe64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe70:	b2db      	uxtb	r3, r3
 800fe72:	2b03      	cmp	r3, #3
 800fe74:	d104      	bne.n	800fe80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fe76:	6839      	ldr	r1, [r7, #0]
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f000 f9bc 	bl	80101f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe7e:	e01d      	b.n	800febc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	7bfa      	ldrb	r2, [r7, #15]
 800fe84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fe88:	7bfb      	ldrb	r3, [r7, #15]
 800fe8a:	4619      	mov	r1, r3
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f000 ff43 	bl	8010d18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f000 fa7a 	bl	801038c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fe98:	7bfb      	ldrb	r3, [r7, #15]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d004      	beq.n	800fea8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2202      	movs	r2, #2
 800fea2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fea6:	e009      	b.n	800febc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2201      	movs	r2, #1
 800feac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800feb0:	e004      	b.n	800febc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800feb2:	6839      	ldr	r1, [r7, #0]
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f000 f99e 	bl	80101f6 <USBD_CtlError>
  }
}
 800feba:	bf00      	nop
 800febc:	bf00      	nop
 800febe:	3710      	adds	r7, #16
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b084      	sub	sp, #16
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fece:	2300      	movs	r3, #0
 800fed0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	885b      	ldrh	r3, [r3, #2]
 800fed6:	b2da      	uxtb	r2, r3
 800fed8:	4b4e      	ldr	r3, [pc, #312]	; (8010014 <USBD_SetConfig+0x150>)
 800feda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fedc:	4b4d      	ldr	r3, [pc, #308]	; (8010014 <USBD_SetConfig+0x150>)
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	2b01      	cmp	r3, #1
 800fee2:	d905      	bls.n	800fef0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fee4:	6839      	ldr	r1, [r7, #0]
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f000 f985 	bl	80101f6 <USBD_CtlError>
    return USBD_FAIL;
 800feec:	2303      	movs	r3, #3
 800feee:	e08c      	b.n	801000a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fef6:	b2db      	uxtb	r3, r3
 800fef8:	2b02      	cmp	r3, #2
 800fefa:	d002      	beq.n	800ff02 <USBD_SetConfig+0x3e>
 800fefc:	2b03      	cmp	r3, #3
 800fefe:	d029      	beq.n	800ff54 <USBD_SetConfig+0x90>
 800ff00:	e075      	b.n	800ffee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ff02:	4b44      	ldr	r3, [pc, #272]	; (8010014 <USBD_SetConfig+0x150>)
 800ff04:	781b      	ldrb	r3, [r3, #0]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d020      	beq.n	800ff4c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ff0a:	4b42      	ldr	r3, [pc, #264]	; (8010014 <USBD_SetConfig+0x150>)
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	461a      	mov	r2, r3
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ff14:	4b3f      	ldr	r3, [pc, #252]	; (8010014 <USBD_SetConfig+0x150>)
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	4619      	mov	r1, r3
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f7ff f849 	bl	800efb2 <USBD_SetClassConfig>
 800ff20:	4603      	mov	r3, r0
 800ff22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ff24:	7bfb      	ldrb	r3, [r7, #15]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d008      	beq.n	800ff3c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ff2a:	6839      	ldr	r1, [r7, #0]
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f000 f962 	bl	80101f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2202      	movs	r2, #2
 800ff36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ff3a:	e065      	b.n	8010008 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f000 fa25 	bl	801038c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2203      	movs	r2, #3
 800ff46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ff4a:	e05d      	b.n	8010008 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f000 fa1d 	bl	801038c <USBD_CtlSendStatus>
      break;
 800ff52:	e059      	b.n	8010008 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ff54:	4b2f      	ldr	r3, [pc, #188]	; (8010014 <USBD_SetConfig+0x150>)
 800ff56:	781b      	ldrb	r3, [r3, #0]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d112      	bne.n	800ff82 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2202      	movs	r2, #2
 800ff60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ff64:	4b2b      	ldr	r3, [pc, #172]	; (8010014 <USBD_SetConfig+0x150>)
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	461a      	mov	r2, r3
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ff6e:	4b29      	ldr	r3, [pc, #164]	; (8010014 <USBD_SetConfig+0x150>)
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	4619      	mov	r1, r3
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f7ff f838 	bl	800efea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f000 fa06 	bl	801038c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ff80:	e042      	b.n	8010008 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ff82:	4b24      	ldr	r3, [pc, #144]	; (8010014 <USBD_SetConfig+0x150>)
 800ff84:	781b      	ldrb	r3, [r3, #0]
 800ff86:	461a      	mov	r2, r3
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	685b      	ldr	r3, [r3, #4]
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d02a      	beq.n	800ffe6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	685b      	ldr	r3, [r3, #4]
 800ff94:	b2db      	uxtb	r3, r3
 800ff96:	4619      	mov	r1, r3
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f7ff f826 	bl	800efea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ff9e:	4b1d      	ldr	r3, [pc, #116]	; (8010014 <USBD_SetConfig+0x150>)
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ffa8:	4b1a      	ldr	r3, [pc, #104]	; (8010014 <USBD_SetConfig+0x150>)
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	4619      	mov	r1, r3
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f7fe ffff 	bl	800efb2 <USBD_SetClassConfig>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ffb8:	7bfb      	ldrb	r3, [r7, #15]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d00f      	beq.n	800ffde <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ffbe:	6839      	ldr	r1, [r7, #0]
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f000 f918 	bl	80101f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	b2db      	uxtb	r3, r3
 800ffcc:	4619      	mov	r1, r3
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f7ff f80b 	bl	800efea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2202      	movs	r2, #2
 800ffd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ffdc:	e014      	b.n	8010008 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f000 f9d4 	bl	801038c <USBD_CtlSendStatus>
      break;
 800ffe4:	e010      	b.n	8010008 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f000 f9d0 	bl	801038c <USBD_CtlSendStatus>
      break;
 800ffec:	e00c      	b.n	8010008 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ffee:	6839      	ldr	r1, [r7, #0]
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f000 f900 	bl	80101f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fff6:	4b07      	ldr	r3, [pc, #28]	; (8010014 <USBD_SetConfig+0x150>)
 800fff8:	781b      	ldrb	r3, [r3, #0]
 800fffa:	4619      	mov	r1, r3
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f7fe fff4 	bl	800efea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010002:	2303      	movs	r3, #3
 8010004:	73fb      	strb	r3, [r7, #15]
      break;
 8010006:	bf00      	nop
  }

  return ret;
 8010008:	7bfb      	ldrb	r3, [r7, #15]
}
 801000a:	4618      	mov	r0, r3
 801000c:	3710      	adds	r7, #16
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
 8010012:	bf00      	nop
 8010014:	20000d74 	.word	0x20000d74

08010018 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	88db      	ldrh	r3, [r3, #6]
 8010026:	2b01      	cmp	r3, #1
 8010028:	d004      	beq.n	8010034 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801002a:	6839      	ldr	r1, [r7, #0]
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f000 f8e2 	bl	80101f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010032:	e023      	b.n	801007c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801003a:	b2db      	uxtb	r3, r3
 801003c:	2b02      	cmp	r3, #2
 801003e:	dc02      	bgt.n	8010046 <USBD_GetConfig+0x2e>
 8010040:	2b00      	cmp	r3, #0
 8010042:	dc03      	bgt.n	801004c <USBD_GetConfig+0x34>
 8010044:	e015      	b.n	8010072 <USBD_GetConfig+0x5a>
 8010046:	2b03      	cmp	r3, #3
 8010048:	d00b      	beq.n	8010062 <USBD_GetConfig+0x4a>
 801004a:	e012      	b.n	8010072 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2200      	movs	r2, #0
 8010050:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	3308      	adds	r3, #8
 8010056:	2201      	movs	r2, #1
 8010058:	4619      	mov	r1, r3
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f000 f93c 	bl	80102d8 <USBD_CtlSendData>
        break;
 8010060:	e00c      	b.n	801007c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	3304      	adds	r3, #4
 8010066:	2201      	movs	r2, #1
 8010068:	4619      	mov	r1, r3
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f000 f934 	bl	80102d8 <USBD_CtlSendData>
        break;
 8010070:	e004      	b.n	801007c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010072:	6839      	ldr	r1, [r7, #0]
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f000 f8be 	bl	80101f6 <USBD_CtlError>
        break;
 801007a:	bf00      	nop
}
 801007c:	bf00      	nop
 801007e:	3708      	adds	r7, #8
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b082      	sub	sp, #8
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010094:	b2db      	uxtb	r3, r3
 8010096:	3b01      	subs	r3, #1
 8010098:	2b02      	cmp	r3, #2
 801009a:	d81e      	bhi.n	80100da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	88db      	ldrh	r3, [r3, #6]
 80100a0:	2b02      	cmp	r3, #2
 80100a2:	d004      	beq.n	80100ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80100a4:	6839      	ldr	r1, [r7, #0]
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f000 f8a5 	bl	80101f6 <USBD_CtlError>
        break;
 80100ac:	e01a      	b.n	80100e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	2201      	movs	r2, #1
 80100b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d005      	beq.n	80100ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	68db      	ldr	r3, [r3, #12]
 80100c2:	f043 0202 	orr.w	r2, r3, #2
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	330c      	adds	r3, #12
 80100ce:	2202      	movs	r2, #2
 80100d0:	4619      	mov	r1, r3
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f000 f900 	bl	80102d8 <USBD_CtlSendData>
      break;
 80100d8:	e004      	b.n	80100e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80100da:	6839      	ldr	r1, [r7, #0]
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f000 f88a 	bl	80101f6 <USBD_CtlError>
      break;
 80100e2:	bf00      	nop
  }
}
 80100e4:	bf00      	nop
 80100e6:	3708      	adds	r7, #8
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}

080100ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	885b      	ldrh	r3, [r3, #2]
 80100fa:	2b01      	cmp	r3, #1
 80100fc:	d107      	bne.n	801010e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2201      	movs	r2, #1
 8010102:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f000 f940 	bl	801038c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801010c:	e013      	b.n	8010136 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	885b      	ldrh	r3, [r3, #2]
 8010112:	2b02      	cmp	r3, #2
 8010114:	d10b      	bne.n	801012e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	889b      	ldrh	r3, [r3, #4]
 801011a:	0a1b      	lsrs	r3, r3, #8
 801011c:	b29b      	uxth	r3, r3
 801011e:	b2da      	uxtb	r2, r3
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f000 f930 	bl	801038c <USBD_CtlSendStatus>
}
 801012c:	e003      	b.n	8010136 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801012e:	6839      	ldr	r1, [r7, #0]
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f000 f860 	bl	80101f6 <USBD_CtlError>
}
 8010136:	bf00      	nop
 8010138:	3708      	adds	r7, #8
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}

0801013e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801013e:	b580      	push	{r7, lr}
 8010140:	b082      	sub	sp, #8
 8010142:	af00      	add	r7, sp, #0
 8010144:	6078      	str	r0, [r7, #4]
 8010146:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801014e:	b2db      	uxtb	r3, r3
 8010150:	3b01      	subs	r3, #1
 8010152:	2b02      	cmp	r3, #2
 8010154:	d80b      	bhi.n	801016e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	885b      	ldrh	r3, [r3, #2]
 801015a:	2b01      	cmp	r3, #1
 801015c:	d10c      	bne.n	8010178 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2200      	movs	r2, #0
 8010162:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f000 f910 	bl	801038c <USBD_CtlSendStatus>
      }
      break;
 801016c:	e004      	b.n	8010178 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801016e:	6839      	ldr	r1, [r7, #0]
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f000 f840 	bl	80101f6 <USBD_CtlError>
      break;
 8010176:	e000      	b.n	801017a <USBD_ClrFeature+0x3c>
      break;
 8010178:	bf00      	nop
  }
}
 801017a:	bf00      	nop
 801017c:	3708      	adds	r7, #8
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}

08010182 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010182:	b580      	push	{r7, lr}
 8010184:	b084      	sub	sp, #16
 8010186:	af00      	add	r7, sp, #0
 8010188:	6078      	str	r0, [r7, #4]
 801018a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	781a      	ldrb	r2, [r3, #0]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	3301      	adds	r3, #1
 801019c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	781a      	ldrb	r2, [r3, #0]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	3301      	adds	r3, #1
 80101aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80101ac:	68f8      	ldr	r0, [r7, #12]
 80101ae:	f7ff fa17 	bl	800f5e0 <SWAPBYTE>
 80101b2:	4603      	mov	r3, r0
 80101b4:	461a      	mov	r2, r3
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	3301      	adds	r3, #1
 80101be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	3301      	adds	r3, #1
 80101c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80101c6:	68f8      	ldr	r0, [r7, #12]
 80101c8:	f7ff fa0a 	bl	800f5e0 <SWAPBYTE>
 80101cc:	4603      	mov	r3, r0
 80101ce:	461a      	mov	r2, r3
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	3301      	adds	r3, #1
 80101d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	3301      	adds	r3, #1
 80101de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80101e0:	68f8      	ldr	r0, [r7, #12]
 80101e2:	f7ff f9fd 	bl	800f5e0 <SWAPBYTE>
 80101e6:	4603      	mov	r3, r0
 80101e8:	461a      	mov	r2, r3
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	80da      	strh	r2, [r3, #6]
}
 80101ee:	bf00      	nop
 80101f0:	3710      	adds	r7, #16
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}

080101f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101f6:	b580      	push	{r7, lr}
 80101f8:	b082      	sub	sp, #8
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	6078      	str	r0, [r7, #4]
 80101fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010200:	2180      	movs	r1, #128	; 0x80
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f000 fcee 	bl	8010be4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010208:	2100      	movs	r1, #0
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f000 fcea 	bl	8010be4 <USBD_LL_StallEP>
}
 8010210:	bf00      	nop
 8010212:	3708      	adds	r7, #8
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}

08010218 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b086      	sub	sp, #24
 801021c:	af00      	add	r7, sp, #0
 801021e:	60f8      	str	r0, [r7, #12]
 8010220:	60b9      	str	r1, [r7, #8]
 8010222:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010224:	2300      	movs	r3, #0
 8010226:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d036      	beq.n	801029c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010232:	6938      	ldr	r0, [r7, #16]
 8010234:	f000 f836 	bl	80102a4 <USBD_GetLen>
 8010238:	4603      	mov	r3, r0
 801023a:	3301      	adds	r3, #1
 801023c:	b29b      	uxth	r3, r3
 801023e:	005b      	lsls	r3, r3, #1
 8010240:	b29a      	uxth	r2, r3
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010246:	7dfb      	ldrb	r3, [r7, #23]
 8010248:	68ba      	ldr	r2, [r7, #8]
 801024a:	4413      	add	r3, r2
 801024c:	687a      	ldr	r2, [r7, #4]
 801024e:	7812      	ldrb	r2, [r2, #0]
 8010250:	701a      	strb	r2, [r3, #0]
  idx++;
 8010252:	7dfb      	ldrb	r3, [r7, #23]
 8010254:	3301      	adds	r3, #1
 8010256:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010258:	7dfb      	ldrb	r3, [r7, #23]
 801025a:	68ba      	ldr	r2, [r7, #8]
 801025c:	4413      	add	r3, r2
 801025e:	2203      	movs	r2, #3
 8010260:	701a      	strb	r2, [r3, #0]
  idx++;
 8010262:	7dfb      	ldrb	r3, [r7, #23]
 8010264:	3301      	adds	r3, #1
 8010266:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010268:	e013      	b.n	8010292 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801026a:	7dfb      	ldrb	r3, [r7, #23]
 801026c:	68ba      	ldr	r2, [r7, #8]
 801026e:	4413      	add	r3, r2
 8010270:	693a      	ldr	r2, [r7, #16]
 8010272:	7812      	ldrb	r2, [r2, #0]
 8010274:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	3301      	adds	r3, #1
 801027a:	613b      	str	r3, [r7, #16]
    idx++;
 801027c:	7dfb      	ldrb	r3, [r7, #23]
 801027e:	3301      	adds	r3, #1
 8010280:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010282:	7dfb      	ldrb	r3, [r7, #23]
 8010284:	68ba      	ldr	r2, [r7, #8]
 8010286:	4413      	add	r3, r2
 8010288:	2200      	movs	r2, #0
 801028a:	701a      	strb	r2, [r3, #0]
    idx++;
 801028c:	7dfb      	ldrb	r3, [r7, #23]
 801028e:	3301      	adds	r3, #1
 8010290:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	781b      	ldrb	r3, [r3, #0]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d1e7      	bne.n	801026a <USBD_GetString+0x52>
 801029a:	e000      	b.n	801029e <USBD_GetString+0x86>
    return;
 801029c:	bf00      	nop
  }
}
 801029e:	3718      	adds	r7, #24
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80102a4:	b480      	push	{r7}
 80102a6:	b085      	sub	sp, #20
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80102ac:	2300      	movs	r3, #0
 80102ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80102b4:	e005      	b.n	80102c2 <USBD_GetLen+0x1e>
  {
    len++;
 80102b6:	7bfb      	ldrb	r3, [r7, #15]
 80102b8:	3301      	adds	r3, #1
 80102ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	3301      	adds	r3, #1
 80102c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	781b      	ldrb	r3, [r3, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d1f5      	bne.n	80102b6 <USBD_GetLen+0x12>
  }

  return len;
 80102ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3714      	adds	r7, #20
 80102d0:	46bd      	mov	sp, r7
 80102d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d6:	4770      	bx	lr

080102d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b084      	sub	sp, #16
 80102dc:	af00      	add	r7, sp, #0
 80102de:	60f8      	str	r0, [r7, #12]
 80102e0:	60b9      	str	r1, [r7, #8]
 80102e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	2202      	movs	r2, #2
 80102e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	687a      	ldr	r2, [r7, #4]
 80102f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	687a      	ldr	r2, [r7, #4]
 80102f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	68ba      	ldr	r2, [r7, #8]
 80102fc:	2100      	movs	r1, #0
 80102fe:	68f8      	ldr	r0, [r7, #12]
 8010300:	f000 fd40 	bl	8010d84 <USBD_LL_Transmit>

  return USBD_OK;
 8010304:	2300      	movs	r3, #0
}
 8010306:	4618      	mov	r0, r3
 8010308:	3710      	adds	r7, #16
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}

0801030e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801030e:	b580      	push	{r7, lr}
 8010310:	b084      	sub	sp, #16
 8010312:	af00      	add	r7, sp, #0
 8010314:	60f8      	str	r0, [r7, #12]
 8010316:	60b9      	str	r1, [r7, #8]
 8010318:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	68ba      	ldr	r2, [r7, #8]
 801031e:	2100      	movs	r1, #0
 8010320:	68f8      	ldr	r0, [r7, #12]
 8010322:	f000 fd2f 	bl	8010d84 <USBD_LL_Transmit>

  return USBD_OK;
 8010326:	2300      	movs	r3, #0
}
 8010328:	4618      	mov	r0, r3
 801032a:	3710      	adds	r7, #16
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}

08010330 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b084      	sub	sp, #16
 8010334:	af00      	add	r7, sp, #0
 8010336:	60f8      	str	r0, [r7, #12]
 8010338:	60b9      	str	r1, [r7, #8]
 801033a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	2203      	movs	r2, #3
 8010340:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	687a      	ldr	r2, [r7, #4]
 8010348:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	68ba      	ldr	r2, [r7, #8]
 8010358:	2100      	movs	r1, #0
 801035a:	68f8      	ldr	r0, [r7, #12]
 801035c:	f000 fd4a 	bl	8010df4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010360:	2300      	movs	r3, #0
}
 8010362:	4618      	mov	r0, r3
 8010364:	3710      	adds	r7, #16
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}

0801036a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801036a:	b580      	push	{r7, lr}
 801036c:	b084      	sub	sp, #16
 801036e:	af00      	add	r7, sp, #0
 8010370:	60f8      	str	r0, [r7, #12]
 8010372:	60b9      	str	r1, [r7, #8]
 8010374:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	68ba      	ldr	r2, [r7, #8]
 801037a:	2100      	movs	r1, #0
 801037c:	68f8      	ldr	r0, [r7, #12]
 801037e:	f000 fd39 	bl	8010df4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010382:	2300      	movs	r3, #0
}
 8010384:	4618      	mov	r0, r3
 8010386:	3710      	adds	r7, #16
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}

0801038c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b082      	sub	sp, #8
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2204      	movs	r2, #4
 8010398:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801039c:	2300      	movs	r3, #0
 801039e:	2200      	movs	r2, #0
 80103a0:	2100      	movs	r1, #0
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	f000 fcee 	bl	8010d84 <USBD_LL_Transmit>

  return USBD_OK;
 80103a8:	2300      	movs	r3, #0
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3708      	adds	r7, #8
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}

080103b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80103b2:	b580      	push	{r7, lr}
 80103b4:	b082      	sub	sp, #8
 80103b6:	af00      	add	r7, sp, #0
 80103b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2205      	movs	r2, #5
 80103be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80103c2:	2300      	movs	r3, #0
 80103c4:	2200      	movs	r2, #0
 80103c6:	2100      	movs	r1, #0
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f000 fd13 	bl	8010df4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80103ce:	2300      	movs	r3, #0
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3708      	adds	r7, #8
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}

080103d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80103dc:	2200      	movs	r2, #0
 80103de:	4912      	ldr	r1, [pc, #72]	; (8010428 <MX_USB_DEVICE_Init+0x50>)
 80103e0:	4812      	ldr	r0, [pc, #72]	; (801042c <MX_USB_DEVICE_Init+0x54>)
 80103e2:	f7fe fd69 	bl	800eeb8 <USBD_Init>
 80103e6:	4603      	mov	r3, r0
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d001      	beq.n	80103f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80103ec:	f7f1 faf0 	bl	80019d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80103f0:	490f      	ldr	r1, [pc, #60]	; (8010430 <MX_USB_DEVICE_Init+0x58>)
 80103f2:	480e      	ldr	r0, [pc, #56]	; (801042c <MX_USB_DEVICE_Init+0x54>)
 80103f4:	f7fe fd90 	bl	800ef18 <USBD_RegisterClass>
 80103f8:	4603      	mov	r3, r0
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d001      	beq.n	8010402 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80103fe:	f7f1 fae7 	bl	80019d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010402:	490c      	ldr	r1, [pc, #48]	; (8010434 <MX_USB_DEVICE_Init+0x5c>)
 8010404:	4809      	ldr	r0, [pc, #36]	; (801042c <MX_USB_DEVICE_Init+0x54>)
 8010406:	f7fe fc87 	bl	800ed18 <USBD_CDC_RegisterInterface>
 801040a:	4603      	mov	r3, r0
 801040c:	2b00      	cmp	r3, #0
 801040e:	d001      	beq.n	8010414 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010410:	f7f1 fade 	bl	80019d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010414:	4805      	ldr	r0, [pc, #20]	; (801042c <MX_USB_DEVICE_Init+0x54>)
 8010416:	f7fe fdb5 	bl	800ef84 <USBD_Start>
 801041a:	4603      	mov	r3, r0
 801041c:	2b00      	cmp	r3, #0
 801041e:	d001      	beq.n	8010424 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010420:	f7f1 fad6 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010424:	bf00      	nop
 8010426:	bd80      	pop	{r7, pc}
 8010428:	200000cc 	.word	0x200000cc
 801042c:	20000d78 	.word	0x20000d78
 8010430:	20000038 	.word	0x20000038
 8010434:	200000b8 	.word	0x200000b8

08010438 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801043c:	2200      	movs	r2, #0
 801043e:	4905      	ldr	r1, [pc, #20]	; (8010454 <CDC_Init_FS+0x1c>)
 8010440:	4805      	ldr	r0, [pc, #20]	; (8010458 <CDC_Init_FS+0x20>)
 8010442:	f7fe fc83 	bl	800ed4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010446:	4905      	ldr	r1, [pc, #20]	; (801045c <CDC_Init_FS+0x24>)
 8010448:	4803      	ldr	r0, [pc, #12]	; (8010458 <CDC_Init_FS+0x20>)
 801044a:	f7fe fca1 	bl	800ed90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801044e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010450:	4618      	mov	r0, r3
 8010452:	bd80      	pop	{r7, pc}
 8010454:	20001454 	.word	0x20001454
 8010458:	20000d78 	.word	0x20000d78
 801045c:	20001054 	.word	0x20001054

08010460 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010460:	b480      	push	{r7}
 8010462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010464:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010466:	4618      	mov	r0, r3
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr

08010470 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010470:	b480      	push	{r7}
 8010472:	b083      	sub	sp, #12
 8010474:	af00      	add	r7, sp, #0
 8010476:	4603      	mov	r3, r0
 8010478:	6039      	str	r1, [r7, #0]
 801047a:	71fb      	strb	r3, [r7, #7]
 801047c:	4613      	mov	r3, r2
 801047e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010480:	79fb      	ldrb	r3, [r7, #7]
 8010482:	2b23      	cmp	r3, #35	; 0x23
 8010484:	d84a      	bhi.n	801051c <CDC_Control_FS+0xac>
 8010486:	a201      	add	r2, pc, #4	; (adr r2, 801048c <CDC_Control_FS+0x1c>)
 8010488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801048c:	0801051d 	.word	0x0801051d
 8010490:	0801051d 	.word	0x0801051d
 8010494:	0801051d 	.word	0x0801051d
 8010498:	0801051d 	.word	0x0801051d
 801049c:	0801051d 	.word	0x0801051d
 80104a0:	0801051d 	.word	0x0801051d
 80104a4:	0801051d 	.word	0x0801051d
 80104a8:	0801051d 	.word	0x0801051d
 80104ac:	0801051d 	.word	0x0801051d
 80104b0:	0801051d 	.word	0x0801051d
 80104b4:	0801051d 	.word	0x0801051d
 80104b8:	0801051d 	.word	0x0801051d
 80104bc:	0801051d 	.word	0x0801051d
 80104c0:	0801051d 	.word	0x0801051d
 80104c4:	0801051d 	.word	0x0801051d
 80104c8:	0801051d 	.word	0x0801051d
 80104cc:	0801051d 	.word	0x0801051d
 80104d0:	0801051d 	.word	0x0801051d
 80104d4:	0801051d 	.word	0x0801051d
 80104d8:	0801051d 	.word	0x0801051d
 80104dc:	0801051d 	.word	0x0801051d
 80104e0:	0801051d 	.word	0x0801051d
 80104e4:	0801051d 	.word	0x0801051d
 80104e8:	0801051d 	.word	0x0801051d
 80104ec:	0801051d 	.word	0x0801051d
 80104f0:	0801051d 	.word	0x0801051d
 80104f4:	0801051d 	.word	0x0801051d
 80104f8:	0801051d 	.word	0x0801051d
 80104fc:	0801051d 	.word	0x0801051d
 8010500:	0801051d 	.word	0x0801051d
 8010504:	0801051d 	.word	0x0801051d
 8010508:	0801051d 	.word	0x0801051d
 801050c:	0801051d 	.word	0x0801051d
 8010510:	0801051d 	.word	0x0801051d
 8010514:	0801051d 	.word	0x0801051d
 8010518:	0801051d 	.word	0x0801051d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801051c:	bf00      	nop
  }

  return (USBD_OK);
 801051e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010520:	4618      	mov	r0, r3
 8010522:	370c      	adds	r7, #12
 8010524:	46bd      	mov	sp, r7
 8010526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052a:	4770      	bx	lr

0801052c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b084      	sub	sp, #16
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010536:	6879      	ldr	r1, [r7, #4]
 8010538:	480f      	ldr	r0, [pc, #60]	; (8010578 <CDC_Receive_FS+0x4c>)
 801053a:	f7fe fc29 	bl	800ed90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801053e:	480e      	ldr	r0, [pc, #56]	; (8010578 <CDC_Receive_FS+0x4c>)
 8010540:	f7fe fc84 	bl	800ee4c <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	73fb      	strb	r3, [r7, #15]
  memset(usbbuffer,'\0',64);
 801054a:	2240      	movs	r2, #64	; 0x40
 801054c:	2100      	movs	r1, #0
 801054e:	480b      	ldr	r0, [pc, #44]	; (801057c <CDC_Receive_FS+0x50>)
 8010550:	f002 fc83 	bl	8012e5a <memset>
  memcpy(usbbuffer,Buf,len );
 8010554:	7bfb      	ldrb	r3, [r7, #15]
 8010556:	461a      	mov	r2, r3
 8010558:	6879      	ldr	r1, [r7, #4]
 801055a:	4808      	ldr	r0, [pc, #32]	; (801057c <CDC_Receive_FS+0x50>)
 801055c:	f002 fd99 	bl	8013092 <memcpy>
  memset(Buf,'\0',len);
 8010560:	7bfb      	ldrb	r3, [r7, #15]
 8010562:	461a      	mov	r2, r3
 8010564:	2100      	movs	r1, #0
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f002 fc77 	bl	8012e5a <memset>
  return (USBD_OK);
 801056c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801056e:	4618      	mov	r0, r3
 8010570:	3710      	adds	r7, #16
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	20000d78 	.word	0x20000d78
 801057c:	20000ccc 	.word	0x20000ccc

08010580 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b084      	sub	sp, #16
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	460b      	mov	r3, r1
 801058a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801058c:	2300      	movs	r3, #0
 801058e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010590:	4b0d      	ldr	r3, [pc, #52]	; (80105c8 <CDC_Transmit_FS+0x48>)
 8010592:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010596:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d001      	beq.n	80105a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80105a2:	2301      	movs	r3, #1
 80105a4:	e00b      	b.n	80105be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80105a6:	887b      	ldrh	r3, [r7, #2]
 80105a8:	461a      	mov	r2, r3
 80105aa:	6879      	ldr	r1, [r7, #4]
 80105ac:	4806      	ldr	r0, [pc, #24]	; (80105c8 <CDC_Transmit_FS+0x48>)
 80105ae:	f7fe fbcd 	bl	800ed4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80105b2:	4805      	ldr	r0, [pc, #20]	; (80105c8 <CDC_Transmit_FS+0x48>)
 80105b4:	f7fe fc0a 	bl	800edcc <USBD_CDC_TransmitPacket>
 80105b8:	4603      	mov	r3, r0
 80105ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80105bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3710      	adds	r7, #16
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}
 80105c6:	bf00      	nop
 80105c8:	20000d78 	.word	0x20000d78

080105cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80105cc:	b480      	push	{r7}
 80105ce:	b087      	sub	sp, #28
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	60f8      	str	r0, [r7, #12]
 80105d4:	60b9      	str	r1, [r7, #8]
 80105d6:	4613      	mov	r3, r2
 80105d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80105da:	2300      	movs	r3, #0
 80105dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80105de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	371c      	adds	r7, #28
 80105e6:	46bd      	mov	sp, r7
 80105e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ec:	4770      	bx	lr
	...

080105f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105f0:	b480      	push	{r7}
 80105f2:	b083      	sub	sp, #12
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	4603      	mov	r3, r0
 80105f8:	6039      	str	r1, [r7, #0]
 80105fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	2212      	movs	r2, #18
 8010600:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010602:	4b03      	ldr	r3, [pc, #12]	; (8010610 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010604:	4618      	mov	r0, r3
 8010606:	370c      	adds	r7, #12
 8010608:	46bd      	mov	sp, r7
 801060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060e:	4770      	bx	lr
 8010610:	200000ec 	.word	0x200000ec

08010614 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
 801061a:	4603      	mov	r3, r0
 801061c:	6039      	str	r1, [r7, #0]
 801061e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	2204      	movs	r2, #4
 8010624:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010626:	4b03      	ldr	r3, [pc, #12]	; (8010634 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010628:	4618      	mov	r0, r3
 801062a:	370c      	adds	r7, #12
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr
 8010634:	2000010c 	.word	0x2000010c

08010638 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b082      	sub	sp, #8
 801063c:	af00      	add	r7, sp, #0
 801063e:	4603      	mov	r3, r0
 8010640:	6039      	str	r1, [r7, #0]
 8010642:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010644:	79fb      	ldrb	r3, [r7, #7]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d105      	bne.n	8010656 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801064a:	683a      	ldr	r2, [r7, #0]
 801064c:	4907      	ldr	r1, [pc, #28]	; (801066c <USBD_FS_ProductStrDescriptor+0x34>)
 801064e:	4808      	ldr	r0, [pc, #32]	; (8010670 <USBD_FS_ProductStrDescriptor+0x38>)
 8010650:	f7ff fde2 	bl	8010218 <USBD_GetString>
 8010654:	e004      	b.n	8010660 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010656:	683a      	ldr	r2, [r7, #0]
 8010658:	4904      	ldr	r1, [pc, #16]	; (801066c <USBD_FS_ProductStrDescriptor+0x34>)
 801065a:	4805      	ldr	r0, [pc, #20]	; (8010670 <USBD_FS_ProductStrDescriptor+0x38>)
 801065c:	f7ff fddc 	bl	8010218 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010660:	4b02      	ldr	r3, [pc, #8]	; (801066c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010662:	4618      	mov	r0, r3
 8010664:	3708      	adds	r7, #8
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}
 801066a:	bf00      	nop
 801066c:	20001854 	.word	0x20001854
 8010670:	08016ed4 	.word	0x08016ed4

08010674 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b082      	sub	sp, #8
 8010678:	af00      	add	r7, sp, #0
 801067a:	4603      	mov	r3, r0
 801067c:	6039      	str	r1, [r7, #0]
 801067e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010680:	683a      	ldr	r2, [r7, #0]
 8010682:	4904      	ldr	r1, [pc, #16]	; (8010694 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010684:	4804      	ldr	r0, [pc, #16]	; (8010698 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010686:	f7ff fdc7 	bl	8010218 <USBD_GetString>
  return USBD_StrDesc;
 801068a:	4b02      	ldr	r3, [pc, #8]	; (8010694 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801068c:	4618      	mov	r0, r3
 801068e:	3708      	adds	r7, #8
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}
 8010694:	20001854 	.word	0x20001854
 8010698:	08016ee0 	.word	0x08016ee0

0801069c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b082      	sub	sp, #8
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	4603      	mov	r3, r0
 80106a4:	6039      	str	r1, [r7, #0]
 80106a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80106a8:	683b      	ldr	r3, [r7, #0]
 80106aa:	221a      	movs	r2, #26
 80106ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80106ae:	f000 f855 	bl	801075c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80106b2:	4b02      	ldr	r3, [pc, #8]	; (80106bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3708      	adds	r7, #8
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}
 80106bc:	20000110 	.word	0x20000110

080106c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b082      	sub	sp, #8
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	4603      	mov	r3, r0
 80106c8:	6039      	str	r1, [r7, #0]
 80106ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80106cc:	79fb      	ldrb	r3, [r7, #7]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d105      	bne.n	80106de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80106d2:	683a      	ldr	r2, [r7, #0]
 80106d4:	4907      	ldr	r1, [pc, #28]	; (80106f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80106d6:	4808      	ldr	r0, [pc, #32]	; (80106f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80106d8:	f7ff fd9e 	bl	8010218 <USBD_GetString>
 80106dc:	e004      	b.n	80106e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80106de:	683a      	ldr	r2, [r7, #0]
 80106e0:	4904      	ldr	r1, [pc, #16]	; (80106f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80106e2:	4805      	ldr	r0, [pc, #20]	; (80106f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80106e4:	f7ff fd98 	bl	8010218 <USBD_GetString>
  }
  return USBD_StrDesc;
 80106e8:	4b02      	ldr	r3, [pc, #8]	; (80106f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3708      	adds	r7, #8
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	20001854 	.word	0x20001854
 80106f8:	08016ef4 	.word	0x08016ef4

080106fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	4603      	mov	r3, r0
 8010704:	6039      	str	r1, [r7, #0]
 8010706:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010708:	79fb      	ldrb	r3, [r7, #7]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d105      	bne.n	801071a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801070e:	683a      	ldr	r2, [r7, #0]
 8010710:	4907      	ldr	r1, [pc, #28]	; (8010730 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010712:	4808      	ldr	r0, [pc, #32]	; (8010734 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010714:	f7ff fd80 	bl	8010218 <USBD_GetString>
 8010718:	e004      	b.n	8010724 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801071a:	683a      	ldr	r2, [r7, #0]
 801071c:	4904      	ldr	r1, [pc, #16]	; (8010730 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801071e:	4805      	ldr	r0, [pc, #20]	; (8010734 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010720:	f7ff fd7a 	bl	8010218 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010724:	4b02      	ldr	r3, [pc, #8]	; (8010730 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010726:	4618      	mov	r0, r3
 8010728:	3708      	adds	r7, #8
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}
 801072e:	bf00      	nop
 8010730:	20001854 	.word	0x20001854
 8010734:	08016f00 	.word	0x08016f00

08010738 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010738:	b480      	push	{r7}
 801073a:	b083      	sub	sp, #12
 801073c:	af00      	add	r7, sp, #0
 801073e:	4603      	mov	r3, r0
 8010740:	6039      	str	r1, [r7, #0]
 8010742:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	220c      	movs	r2, #12
 8010748:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801074a:	4b03      	ldr	r3, [pc, #12]	; (8010758 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801074c:	4618      	mov	r0, r3
 801074e:	370c      	adds	r7, #12
 8010750:	46bd      	mov	sp, r7
 8010752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010756:	4770      	bx	lr
 8010758:	20000100 	.word	0x20000100

0801075c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b084      	sub	sp, #16
 8010760:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010762:	4b0f      	ldr	r3, [pc, #60]	; (80107a0 <Get_SerialNum+0x44>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010768:	4b0e      	ldr	r3, [pc, #56]	; (80107a4 <Get_SerialNum+0x48>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801076e:	4b0e      	ldr	r3, [pc, #56]	; (80107a8 <Get_SerialNum+0x4c>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010774:	68fa      	ldr	r2, [r7, #12]
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	4413      	add	r3, r2
 801077a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d009      	beq.n	8010796 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010782:	2208      	movs	r2, #8
 8010784:	4909      	ldr	r1, [pc, #36]	; (80107ac <Get_SerialNum+0x50>)
 8010786:	68f8      	ldr	r0, [r7, #12]
 8010788:	f000 f814 	bl	80107b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801078c:	2204      	movs	r2, #4
 801078e:	4908      	ldr	r1, [pc, #32]	; (80107b0 <Get_SerialNum+0x54>)
 8010790:	68b8      	ldr	r0, [r7, #8]
 8010792:	f000 f80f 	bl	80107b4 <IntToUnicode>
  }
}
 8010796:	bf00      	nop
 8010798:	3710      	adds	r7, #16
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
 801079e:	bf00      	nop
 80107a0:	1fff7590 	.word	0x1fff7590
 80107a4:	1fff7594 	.word	0x1fff7594
 80107a8:	1fff7598 	.word	0x1fff7598
 80107ac:	20000112 	.word	0x20000112
 80107b0:	20000122 	.word	0x20000122

080107b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80107b4:	b480      	push	{r7}
 80107b6:	b087      	sub	sp, #28
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	60b9      	str	r1, [r7, #8]
 80107be:	4613      	mov	r3, r2
 80107c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80107c2:	2300      	movs	r3, #0
 80107c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80107c6:	2300      	movs	r3, #0
 80107c8:	75fb      	strb	r3, [r7, #23]
 80107ca:	e027      	b.n	801081c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	0f1b      	lsrs	r3, r3, #28
 80107d0:	2b09      	cmp	r3, #9
 80107d2:	d80b      	bhi.n	80107ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	0f1b      	lsrs	r3, r3, #28
 80107d8:	b2da      	uxtb	r2, r3
 80107da:	7dfb      	ldrb	r3, [r7, #23]
 80107dc:	005b      	lsls	r3, r3, #1
 80107de:	4619      	mov	r1, r3
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	440b      	add	r3, r1
 80107e4:	3230      	adds	r2, #48	; 0x30
 80107e6:	b2d2      	uxtb	r2, r2
 80107e8:	701a      	strb	r2, [r3, #0]
 80107ea:	e00a      	b.n	8010802 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	0f1b      	lsrs	r3, r3, #28
 80107f0:	b2da      	uxtb	r2, r3
 80107f2:	7dfb      	ldrb	r3, [r7, #23]
 80107f4:	005b      	lsls	r3, r3, #1
 80107f6:	4619      	mov	r1, r3
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	440b      	add	r3, r1
 80107fc:	3237      	adds	r2, #55	; 0x37
 80107fe:	b2d2      	uxtb	r2, r2
 8010800:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	011b      	lsls	r3, r3, #4
 8010806:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010808:	7dfb      	ldrb	r3, [r7, #23]
 801080a:	005b      	lsls	r3, r3, #1
 801080c:	3301      	adds	r3, #1
 801080e:	68ba      	ldr	r2, [r7, #8]
 8010810:	4413      	add	r3, r2
 8010812:	2200      	movs	r2, #0
 8010814:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010816:	7dfb      	ldrb	r3, [r7, #23]
 8010818:	3301      	adds	r3, #1
 801081a:	75fb      	strb	r3, [r7, #23]
 801081c:	7dfa      	ldrb	r2, [r7, #23]
 801081e:	79fb      	ldrb	r3, [r7, #7]
 8010820:	429a      	cmp	r2, r3
 8010822:	d3d3      	bcc.n	80107cc <IntToUnicode+0x18>
  }
}
 8010824:	bf00      	nop
 8010826:	bf00      	nop
 8010828:	371c      	adds	r7, #28
 801082a:	46bd      	mov	sp, r7
 801082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010830:	4770      	bx	lr
	...

08010834 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b084      	sub	sp, #16
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	4a0d      	ldr	r2, [pc, #52]	; (8010878 <HAL_PCD_MspInit+0x44>)
 8010842:	4293      	cmp	r3, r2
 8010844:	d113      	bne.n	801086e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010846:	4b0d      	ldr	r3, [pc, #52]	; (801087c <HAL_PCD_MspInit+0x48>)
 8010848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801084a:	4a0c      	ldr	r2, [pc, #48]	; (801087c <HAL_PCD_MspInit+0x48>)
 801084c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010850:	6593      	str	r3, [r2, #88]	; 0x58
 8010852:	4b0a      	ldr	r3, [pc, #40]	; (801087c <HAL_PCD_MspInit+0x48>)
 8010854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010856:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801085a:	60fb      	str	r3, [r7, #12]
 801085c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801085e:	2200      	movs	r2, #0
 8010860:	2100      	movs	r1, #0
 8010862:	2043      	movs	r0, #67	; 0x43
 8010864:	f7f5 fb75 	bl	8005f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8010868:	2043      	movs	r0, #67	; 0x43
 801086a:	f7f5 fb8e 	bl	8005f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801086e:	bf00      	nop
 8010870:	3710      	adds	r7, #16
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}
 8010876:	bf00      	nop
 8010878:	40006800 	.word	0x40006800
 801087c:	40021000 	.word	0x40021000

08010880 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b082      	sub	sp, #8
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8010894:	4619      	mov	r1, r3
 8010896:	4610      	mov	r0, r2
 8010898:	f7fe fbc1 	bl	800f01e <USBD_LL_SetupStage>
}
 801089c:	bf00      	nop
 801089e:	3708      	adds	r7, #8
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	460b      	mov	r3, r1
 80108ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 80108b6:	78fa      	ldrb	r2, [r7, #3]
 80108b8:	6879      	ldr	r1, [r7, #4]
 80108ba:	4613      	mov	r3, r2
 80108bc:	009b      	lsls	r3, r3, #2
 80108be:	4413      	add	r3, r2
 80108c0:	00db      	lsls	r3, r3, #3
 80108c2:	440b      	add	r3, r1
 80108c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	78fb      	ldrb	r3, [r7, #3]
 80108cc:	4619      	mov	r1, r3
 80108ce:	f7fe fbfb 	bl	800f0c8 <USBD_LL_DataOutStage>
}
 80108d2:	bf00      	nop
 80108d4:	3708      	adds	r7, #8
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}

080108da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108da:	b580      	push	{r7, lr}
 80108dc:	b082      	sub	sp, #8
 80108de:	af00      	add	r7, sp, #0
 80108e0:	6078      	str	r0, [r7, #4]
 80108e2:	460b      	mov	r3, r1
 80108e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 80108ec:	78fa      	ldrb	r2, [r7, #3]
 80108ee:	6879      	ldr	r1, [r7, #4]
 80108f0:	4613      	mov	r3, r2
 80108f2:	009b      	lsls	r3, r3, #2
 80108f4:	4413      	add	r3, r2
 80108f6:	00db      	lsls	r3, r3, #3
 80108f8:	440b      	add	r3, r1
 80108fa:	333c      	adds	r3, #60	; 0x3c
 80108fc:	681a      	ldr	r2, [r3, #0]
 80108fe:	78fb      	ldrb	r3, [r7, #3]
 8010900:	4619      	mov	r1, r3
 8010902:	f7fe fc94 	bl	800f22e <USBD_LL_DataInStage>
}
 8010906:	bf00      	nop
 8010908:	3708      	adds	r7, #8
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}

0801090e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801090e:	b580      	push	{r7, lr}
 8010910:	b082      	sub	sp, #8
 8010912:	af00      	add	r7, sp, #0
 8010914:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801091c:	4618      	mov	r0, r3
 801091e:	f7fe fdce 	bl	800f4be <USBD_LL_SOF>
}
 8010922:	bf00      	nop
 8010924:	3708      	adds	r7, #8
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}

0801092a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801092a:	b580      	push	{r7, lr}
 801092c:	b084      	sub	sp, #16
 801092e:	af00      	add	r7, sp, #0
 8010930:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010932:	2301      	movs	r3, #1
 8010934:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	689b      	ldr	r3, [r3, #8]
 801093a:	2b02      	cmp	r3, #2
 801093c:	d001      	beq.n	8010942 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801093e:	f7f1 f847 	bl	80019d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8010948:	7bfa      	ldrb	r2, [r7, #15]
 801094a:	4611      	mov	r1, r2
 801094c:	4618      	mov	r0, r3
 801094e:	f7fe fd72 	bl	800f436 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8010958:	4618      	mov	r0, r3
 801095a:	f7fe fd1a 	bl	800f392 <USBD_LL_Reset>
}
 801095e:	bf00      	nop
 8010960:	3710      	adds	r7, #16
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}
	...

08010968 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8010976:	4618      	mov	r0, r3
 8010978:	f7fe fd6d 	bl	800f456 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	699b      	ldr	r3, [r3, #24]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d005      	beq.n	8010990 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010984:	4b04      	ldr	r3, [pc, #16]	; (8010998 <HAL_PCD_SuspendCallback+0x30>)
 8010986:	691b      	ldr	r3, [r3, #16]
 8010988:	4a03      	ldr	r2, [pc, #12]	; (8010998 <HAL_PCD_SuspendCallback+0x30>)
 801098a:	f043 0306 	orr.w	r3, r3, #6
 801098e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010990:	bf00      	nop
 8010992:	3708      	adds	r7, #8
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}
 8010998:	e000ed00 	.word	0xe000ed00

0801099c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	699b      	ldr	r3, [r3, #24]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d007      	beq.n	80109bc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80109ac:	4b08      	ldr	r3, [pc, #32]	; (80109d0 <HAL_PCD_ResumeCallback+0x34>)
 80109ae:	691b      	ldr	r3, [r3, #16]
 80109b0:	4a07      	ldr	r2, [pc, #28]	; (80109d0 <HAL_PCD_ResumeCallback+0x34>)
 80109b2:	f023 0306 	bic.w	r3, r3, #6
 80109b6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80109b8:	f000 fab6 	bl	8010f28 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7fe fd63 	bl	800f48e <USBD_LL_Resume>
}
 80109c8:	bf00      	nop
 80109ca:	3708      	adds	r7, #8
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}
 80109d0:	e000ed00 	.word	0xe000ed00

080109d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b082      	sub	sp, #8
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80109dc:	f7f8 f99a 	bl	8008d14 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80109e0:	4a2b      	ldr	r2, [pc, #172]	; (8010a90 <USBD_LL_Init+0xbc>)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	4a29      	ldr	r2, [pc, #164]	; (8010a90 <USBD_LL_Init+0xbc>)
 80109ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 80109f0:	4b27      	ldr	r3, [pc, #156]	; (8010a90 <USBD_LL_Init+0xbc>)
 80109f2:	4a28      	ldr	r2, [pc, #160]	; (8010a94 <USBD_LL_Init+0xc0>)
 80109f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80109f6:	4b26      	ldr	r3, [pc, #152]	; (8010a90 <USBD_LL_Init+0xbc>)
 80109f8:	2208      	movs	r2, #8
 80109fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80109fc:	4b24      	ldr	r3, [pc, #144]	; (8010a90 <USBD_LL_Init+0xbc>)
 80109fe:	2202      	movs	r2, #2
 8010a00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010a02:	4b23      	ldr	r3, [pc, #140]	; (8010a90 <USBD_LL_Init+0xbc>)
 8010a04:	2202      	movs	r2, #2
 8010a06:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010a08:	4b21      	ldr	r3, [pc, #132]	; (8010a90 <USBD_LL_Init+0xbc>)
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010a0e:	4b20      	ldr	r3, [pc, #128]	; (8010a90 <USBD_LL_Init+0xbc>)
 8010a10:	2200      	movs	r2, #0
 8010a12:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010a14:	4b1e      	ldr	r3, [pc, #120]	; (8010a90 <USBD_LL_Init+0xbc>)
 8010a16:	2200      	movs	r2, #0
 8010a18:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010a1a:	4b1d      	ldr	r3, [pc, #116]	; (8010a90 <USBD_LL_Init+0xbc>)
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010a20:	481b      	ldr	r0, [pc, #108]	; (8010a90 <USBD_LL_Init+0xbc>)
 8010a22:	f7f6 fb94 	bl	800714e <HAL_PCD_Init>
 8010a26:	4603      	mov	r3, r0
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d001      	beq.n	8010a30 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8010a2c:	f7f0 ffd0 	bl	80019d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010a36:	2318      	movs	r3, #24
 8010a38:	2200      	movs	r2, #0
 8010a3a:	2100      	movs	r1, #0
 8010a3c:	f7f8 f898 	bl	8008b70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010a46:	2358      	movs	r3, #88	; 0x58
 8010a48:	2200      	movs	r2, #0
 8010a4a:	2180      	movs	r1, #128	; 0x80
 8010a4c:	f7f8 f890 	bl	8008b70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010a56:	23c0      	movs	r3, #192	; 0xc0
 8010a58:	2200      	movs	r2, #0
 8010a5a:	2181      	movs	r1, #129	; 0x81
 8010a5c:	f7f8 f888 	bl	8008b70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010a66:	f44f 7388 	mov.w	r3, #272	; 0x110
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	2101      	movs	r1, #1
 8010a6e:	f7f8 f87f 	bl	8008b70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	2182      	movs	r1, #130	; 0x82
 8010a80:	f7f8 f876 	bl	8008b70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010a84:	2300      	movs	r3, #0
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3708      	adds	r7, #8
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}
 8010a8e:	bf00      	nop
 8010a90:	20001a54 	.word	0x20001a54
 8010a94:	40006800 	.word	0x40006800

08010a98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b084      	sub	sp, #16
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7f6 fc53 	bl	800735a <HAL_PCD_Start>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010ab8:	7bbb      	ldrb	r3, [r7, #14]
 8010aba:	2b03      	cmp	r3, #3
 8010abc:	d816      	bhi.n	8010aec <USBD_LL_Start+0x54>
 8010abe:	a201      	add	r2, pc, #4	; (adr r2, 8010ac4 <USBD_LL_Start+0x2c>)
 8010ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ac4:	08010ad5 	.word	0x08010ad5
 8010ac8:	08010adb 	.word	0x08010adb
 8010acc:	08010ae1 	.word	0x08010ae1
 8010ad0:	08010ae7 	.word	0x08010ae7
    case HAL_OK :
      usb_status = USBD_OK;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8010ad8:	e00b      	b.n	8010af2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010ada:	2303      	movs	r3, #3
 8010adc:	73fb      	strb	r3, [r7, #15]
    break;
 8010ade:	e008      	b.n	8010af2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8010ae4:	e005      	b.n	8010af2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010ae6:	2303      	movs	r3, #3
 8010ae8:	73fb      	strb	r3, [r7, #15]
    break;
 8010aea:	e002      	b.n	8010af2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8010aec:	2303      	movs	r3, #3
 8010aee:	73fb      	strb	r3, [r7, #15]
    break;
 8010af0:	bf00      	nop
  }
  return usb_status;
 8010af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	3710      	adds	r7, #16
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}

08010afc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b084      	sub	sp, #16
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
 8010b04:	4608      	mov	r0, r1
 8010b06:	4611      	mov	r1, r2
 8010b08:	461a      	mov	r2, r3
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	70fb      	strb	r3, [r7, #3]
 8010b0e:	460b      	mov	r3, r1
 8010b10:	70bb      	strb	r3, [r7, #2]
 8010b12:	4613      	mov	r3, r2
 8010b14:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b16:	2300      	movs	r3, #0
 8010b18:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010b24:	78bb      	ldrb	r3, [r7, #2]
 8010b26:	883a      	ldrh	r2, [r7, #0]
 8010b28:	78f9      	ldrb	r1, [r7, #3]
 8010b2a:	f7f6 fd84 	bl	8007636 <HAL_PCD_EP_Open>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010b32:	7bbb      	ldrb	r3, [r7, #14]
 8010b34:	2b03      	cmp	r3, #3
 8010b36:	d817      	bhi.n	8010b68 <USBD_LL_OpenEP+0x6c>
 8010b38:	a201      	add	r2, pc, #4	; (adr r2, 8010b40 <USBD_LL_OpenEP+0x44>)
 8010b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b3e:	bf00      	nop
 8010b40:	08010b51 	.word	0x08010b51
 8010b44:	08010b57 	.word	0x08010b57
 8010b48:	08010b5d 	.word	0x08010b5d
 8010b4c:	08010b63 	.word	0x08010b63
    case HAL_OK :
      usb_status = USBD_OK;
 8010b50:	2300      	movs	r3, #0
 8010b52:	73fb      	strb	r3, [r7, #15]
    break;
 8010b54:	e00b      	b.n	8010b6e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010b56:	2303      	movs	r3, #3
 8010b58:	73fb      	strb	r3, [r7, #15]
    break;
 8010b5a:	e008      	b.n	8010b6e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8010b60:	e005      	b.n	8010b6e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010b62:	2303      	movs	r3, #3
 8010b64:	73fb      	strb	r3, [r7, #15]
    break;
 8010b66:	e002      	b.n	8010b6e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8010b68:	2303      	movs	r3, #3
 8010b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8010b6c:	bf00      	nop
  }
  return usb_status;
 8010b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3710      	adds	r7, #16
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}

08010b78 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	460b      	mov	r3, r1
 8010b82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b84:	2300      	movs	r3, #0
 8010b86:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010b92:	78fa      	ldrb	r2, [r7, #3]
 8010b94:	4611      	mov	r1, r2
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7f6 fdaa 	bl	80076f0 <HAL_PCD_EP_Close>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010ba0:	7bbb      	ldrb	r3, [r7, #14]
 8010ba2:	2b03      	cmp	r3, #3
 8010ba4:	d816      	bhi.n	8010bd4 <USBD_LL_CloseEP+0x5c>
 8010ba6:	a201      	add	r2, pc, #4	; (adr r2, 8010bac <USBD_LL_CloseEP+0x34>)
 8010ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bac:	08010bbd 	.word	0x08010bbd
 8010bb0:	08010bc3 	.word	0x08010bc3
 8010bb4:	08010bc9 	.word	0x08010bc9
 8010bb8:	08010bcf 	.word	0x08010bcf
    case HAL_OK :
      usb_status = USBD_OK;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8010bc0:	e00b      	b.n	8010bda <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010bc2:	2303      	movs	r3, #3
 8010bc4:	73fb      	strb	r3, [r7, #15]
    break;
 8010bc6:	e008      	b.n	8010bda <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010bc8:	2301      	movs	r3, #1
 8010bca:	73fb      	strb	r3, [r7, #15]
    break;
 8010bcc:	e005      	b.n	8010bda <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010bce:	2303      	movs	r3, #3
 8010bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8010bd2:	e002      	b.n	8010bda <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010bd4:	2303      	movs	r3, #3
 8010bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8010bd8:	bf00      	nop
  }
  return usb_status;
 8010bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3710      	adds	r7, #16
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}

08010be4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b084      	sub	sp, #16
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	460b      	mov	r3, r1
 8010bee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010bfe:	78fa      	ldrb	r2, [r7, #3]
 8010c00:	4611      	mov	r1, r2
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7f6 fe3c 	bl	8007880 <HAL_PCD_EP_SetStall>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010c0c:	7bbb      	ldrb	r3, [r7, #14]
 8010c0e:	2b03      	cmp	r3, #3
 8010c10:	d816      	bhi.n	8010c40 <USBD_LL_StallEP+0x5c>
 8010c12:	a201      	add	r2, pc, #4	; (adr r2, 8010c18 <USBD_LL_StallEP+0x34>)
 8010c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c18:	08010c29 	.word	0x08010c29
 8010c1c:	08010c2f 	.word	0x08010c2f
 8010c20:	08010c35 	.word	0x08010c35
 8010c24:	08010c3b 	.word	0x08010c3b
    case HAL_OK :
      usb_status = USBD_OK;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8010c2c:	e00b      	b.n	8010c46 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010c2e:	2303      	movs	r3, #3
 8010c30:	73fb      	strb	r3, [r7, #15]
    break;
 8010c32:	e008      	b.n	8010c46 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010c34:	2301      	movs	r3, #1
 8010c36:	73fb      	strb	r3, [r7, #15]
    break;
 8010c38:	e005      	b.n	8010c46 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010c3a:	2303      	movs	r3, #3
 8010c3c:	73fb      	strb	r3, [r7, #15]
    break;
 8010c3e:	e002      	b.n	8010c46 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010c40:	2303      	movs	r3, #3
 8010c42:	73fb      	strb	r3, [r7, #15]
    break;
 8010c44:	bf00      	nop
  }
  return usb_status;
 8010c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3710      	adds	r7, #16
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b084      	sub	sp, #16
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	460b      	mov	r3, r1
 8010c5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c60:	2300      	movs	r3, #0
 8010c62:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010c6a:	78fa      	ldrb	r2, [r7, #3]
 8010c6c:	4611      	mov	r1, r2
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f7f6 fe66 	bl	8007940 <HAL_PCD_EP_ClrStall>
 8010c74:	4603      	mov	r3, r0
 8010c76:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010c78:	7bbb      	ldrb	r3, [r7, #14]
 8010c7a:	2b03      	cmp	r3, #3
 8010c7c:	d816      	bhi.n	8010cac <USBD_LL_ClearStallEP+0x5c>
 8010c7e:	a201      	add	r2, pc, #4	; (adr r2, 8010c84 <USBD_LL_ClearStallEP+0x34>)
 8010c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c84:	08010c95 	.word	0x08010c95
 8010c88:	08010c9b 	.word	0x08010c9b
 8010c8c:	08010ca1 	.word	0x08010ca1
 8010c90:	08010ca7 	.word	0x08010ca7
    case HAL_OK :
      usb_status = USBD_OK;
 8010c94:	2300      	movs	r3, #0
 8010c96:	73fb      	strb	r3, [r7, #15]
    break;
 8010c98:	e00b      	b.n	8010cb2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010c9a:	2303      	movs	r3, #3
 8010c9c:	73fb      	strb	r3, [r7, #15]
    break;
 8010c9e:	e008      	b.n	8010cb2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8010ca4:	e005      	b.n	8010cb2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010ca6:	2303      	movs	r3, #3
 8010ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8010caa:	e002      	b.n	8010cb2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010cac:	2303      	movs	r3, #3
 8010cae:	73fb      	strb	r3, [r7, #15]
    break;
 8010cb0:	bf00      	nop
  }
  return usb_status;
 8010cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3710      	adds	r7, #16
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}

08010cbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010cbc:	b480      	push	{r7}
 8010cbe:	b085      	sub	sp, #20
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010cce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	da0c      	bge.n	8010cf2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010cd8:	78fb      	ldrb	r3, [r7, #3]
 8010cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cde:	68f9      	ldr	r1, [r7, #12]
 8010ce0:	1c5a      	adds	r2, r3, #1
 8010ce2:	4613      	mov	r3, r2
 8010ce4:	009b      	lsls	r3, r3, #2
 8010ce6:	4413      	add	r3, r2
 8010ce8:	00db      	lsls	r3, r3, #3
 8010cea:	440b      	add	r3, r1
 8010cec:	3302      	adds	r3, #2
 8010cee:	781b      	ldrb	r3, [r3, #0]
 8010cf0:	e00b      	b.n	8010d0a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010cf2:	78fb      	ldrb	r3, [r7, #3]
 8010cf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010cf8:	68f9      	ldr	r1, [r7, #12]
 8010cfa:	4613      	mov	r3, r2
 8010cfc:	009b      	lsls	r3, r3, #2
 8010cfe:	4413      	add	r3, r2
 8010d00:	00db      	lsls	r3, r3, #3
 8010d02:	440b      	add	r3, r1
 8010d04:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8010d08:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	3714      	adds	r7, #20
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d14:	4770      	bx	lr
	...

08010d18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b084      	sub	sp, #16
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
 8010d20:	460b      	mov	r3, r1
 8010d22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d24:	2300      	movs	r3, #0
 8010d26:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010d32:	78fa      	ldrb	r2, [r7, #3]
 8010d34:	4611      	mov	r1, r2
 8010d36:	4618      	mov	r0, r3
 8010d38:	f7f6 fc58 	bl	80075ec <HAL_PCD_SetAddress>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010d40:	7bbb      	ldrb	r3, [r7, #14]
 8010d42:	2b03      	cmp	r3, #3
 8010d44:	d816      	bhi.n	8010d74 <USBD_LL_SetUSBAddress+0x5c>
 8010d46:	a201      	add	r2, pc, #4	; (adr r2, 8010d4c <USBD_LL_SetUSBAddress+0x34>)
 8010d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d4c:	08010d5d 	.word	0x08010d5d
 8010d50:	08010d63 	.word	0x08010d63
 8010d54:	08010d69 	.word	0x08010d69
 8010d58:	08010d6f 	.word	0x08010d6f
    case HAL_OK :
      usb_status = USBD_OK;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8010d60:	e00b      	b.n	8010d7a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010d62:	2303      	movs	r3, #3
 8010d64:	73fb      	strb	r3, [r7, #15]
    break;
 8010d66:	e008      	b.n	8010d7a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010d68:	2301      	movs	r3, #1
 8010d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8010d6c:	e005      	b.n	8010d7a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010d6e:	2303      	movs	r3, #3
 8010d70:	73fb      	strb	r3, [r7, #15]
    break;
 8010d72:	e002      	b.n	8010d7a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8010d74:	2303      	movs	r3, #3
 8010d76:	73fb      	strb	r3, [r7, #15]
    break;
 8010d78:	bf00      	nop
  }
  return usb_status;
 8010d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3710      	adds	r7, #16
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b086      	sub	sp, #24
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60f8      	str	r0, [r7, #12]
 8010d8c:	607a      	str	r2, [r7, #4]
 8010d8e:	603b      	str	r3, [r7, #0]
 8010d90:	460b      	mov	r3, r1
 8010d92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d94:	2300      	movs	r3, #0
 8010d96:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010da2:	7af9      	ldrb	r1, [r7, #11]
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	687a      	ldr	r2, [r7, #4]
 8010da8:	f7f6 fd33 	bl	8007812 <HAL_PCD_EP_Transmit>
 8010dac:	4603      	mov	r3, r0
 8010dae:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010db0:	7dbb      	ldrb	r3, [r7, #22]
 8010db2:	2b03      	cmp	r3, #3
 8010db4:	d816      	bhi.n	8010de4 <USBD_LL_Transmit+0x60>
 8010db6:	a201      	add	r2, pc, #4	; (adr r2, 8010dbc <USBD_LL_Transmit+0x38>)
 8010db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dbc:	08010dcd 	.word	0x08010dcd
 8010dc0:	08010dd3 	.word	0x08010dd3
 8010dc4:	08010dd9 	.word	0x08010dd9
 8010dc8:	08010ddf 	.word	0x08010ddf
    case HAL_OK :
      usb_status = USBD_OK;
 8010dcc:	2300      	movs	r3, #0
 8010dce:	75fb      	strb	r3, [r7, #23]
    break;
 8010dd0:	e00b      	b.n	8010dea <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010dd2:	2303      	movs	r3, #3
 8010dd4:	75fb      	strb	r3, [r7, #23]
    break;
 8010dd6:	e008      	b.n	8010dea <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010dd8:	2301      	movs	r3, #1
 8010dda:	75fb      	strb	r3, [r7, #23]
    break;
 8010ddc:	e005      	b.n	8010dea <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010dde:	2303      	movs	r3, #3
 8010de0:	75fb      	strb	r3, [r7, #23]
    break;
 8010de2:	e002      	b.n	8010dea <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8010de4:	2303      	movs	r3, #3
 8010de6:	75fb      	strb	r3, [r7, #23]
    break;
 8010de8:	bf00      	nop
  }
  return usb_status;
 8010dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3718      	adds	r7, #24
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}

08010df4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b086      	sub	sp, #24
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	60f8      	str	r0, [r7, #12]
 8010dfc:	607a      	str	r2, [r7, #4]
 8010dfe:	603b      	str	r3, [r7, #0]
 8010e00:	460b      	mov	r3, r1
 8010e02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e04:	2300      	movs	r3, #0
 8010e06:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010e12:	7af9      	ldrb	r1, [r7, #11]
 8010e14:	683b      	ldr	r3, [r7, #0]
 8010e16:	687a      	ldr	r2, [r7, #4]
 8010e18:	f7f6 fcb2 	bl	8007780 <HAL_PCD_EP_Receive>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010e20:	7dbb      	ldrb	r3, [r7, #22]
 8010e22:	2b03      	cmp	r3, #3
 8010e24:	d816      	bhi.n	8010e54 <USBD_LL_PrepareReceive+0x60>
 8010e26:	a201      	add	r2, pc, #4	; (adr r2, 8010e2c <USBD_LL_PrepareReceive+0x38>)
 8010e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e2c:	08010e3d 	.word	0x08010e3d
 8010e30:	08010e43 	.word	0x08010e43
 8010e34:	08010e49 	.word	0x08010e49
 8010e38:	08010e4f 	.word	0x08010e4f
    case HAL_OK :
      usb_status = USBD_OK;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	75fb      	strb	r3, [r7, #23]
    break;
 8010e40:	e00b      	b.n	8010e5a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010e42:	2303      	movs	r3, #3
 8010e44:	75fb      	strb	r3, [r7, #23]
    break;
 8010e46:	e008      	b.n	8010e5a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010e48:	2301      	movs	r3, #1
 8010e4a:	75fb      	strb	r3, [r7, #23]
    break;
 8010e4c:	e005      	b.n	8010e5a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010e4e:	2303      	movs	r3, #3
 8010e50:	75fb      	strb	r3, [r7, #23]
    break;
 8010e52:	e002      	b.n	8010e5a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8010e54:	2303      	movs	r3, #3
 8010e56:	75fb      	strb	r3, [r7, #23]
    break;
 8010e58:	bf00      	nop
  }
  return usb_status;
 8010e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3718      	adds	r7, #24
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b082      	sub	sp, #8
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	460b      	mov	r3, r1
 8010e6e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010e76:	78fa      	ldrb	r2, [r7, #3]
 8010e78:	4611      	mov	r1, r2
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7f6 fcb1 	bl	80077e2 <HAL_PCD_EP_GetRxCount>
 8010e80:	4603      	mov	r3, r0
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3708      	adds	r7, #8
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
	...

08010e8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b082      	sub	sp, #8
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	460b      	mov	r3, r1
 8010e96:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010e98:	78fb      	ldrb	r3, [r7, #3]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d002      	beq.n	8010ea4 <HAL_PCDEx_LPM_Callback+0x18>
 8010e9e:	2b01      	cmp	r3, #1
 8010ea0:	d013      	beq.n	8010eca <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8010ea2:	e023      	b.n	8010eec <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	699b      	ldr	r3, [r3, #24]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d007      	beq.n	8010ebc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010eac:	f000 f83c 	bl	8010f28 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010eb0:	4b10      	ldr	r3, [pc, #64]	; (8010ef4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010eb2:	691b      	ldr	r3, [r3, #16]
 8010eb4:	4a0f      	ldr	r2, [pc, #60]	; (8010ef4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010eb6:	f023 0306 	bic.w	r3, r3, #6
 8010eba:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7fe fae3 	bl	800f48e <USBD_LL_Resume>
    break;
 8010ec8:	e010      	b.n	8010eec <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7fe fac0 	bl	800f456 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	699b      	ldr	r3, [r3, #24]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d005      	beq.n	8010eea <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010ede:	4b05      	ldr	r3, [pc, #20]	; (8010ef4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010ee0:	691b      	ldr	r3, [r3, #16]
 8010ee2:	4a04      	ldr	r2, [pc, #16]	; (8010ef4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010ee4:	f043 0306 	orr.w	r3, r3, #6
 8010ee8:	6113      	str	r3, [r2, #16]
    break;
 8010eea:	bf00      	nop
}
 8010eec:	bf00      	nop
 8010eee:	3708      	adds	r7, #8
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bd80      	pop	{r7, pc}
 8010ef4:	e000ed00 	.word	0xe000ed00

08010ef8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010ef8:	b480      	push	{r7}
 8010efa:	b083      	sub	sp, #12
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010f00:	4b03      	ldr	r3, [pc, #12]	; (8010f10 <USBD_static_malloc+0x18>)
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	370c      	adds	r7, #12
 8010f06:	46bd      	mov	sp, r7
 8010f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0c:	4770      	bx	lr
 8010f0e:	bf00      	nop
 8010f10:	20001d4c 	.word	0x20001d4c

08010f14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010f14:	b480      	push	{r7}
 8010f16:	b083      	sub	sp, #12
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]

}
 8010f1c:	bf00      	nop
 8010f1e:	370c      	adds	r7, #12
 8010f20:	46bd      	mov	sp, r7
 8010f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f26:	4770      	bx	lr

08010f28 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010f2c:	f7f0 fa70 	bl	8001410 <SystemClock_Config>
}
 8010f30:	bf00      	nop
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <malloc>:
 8010f34:	4b02      	ldr	r3, [pc, #8]	; (8010f40 <malloc+0xc>)
 8010f36:	4601      	mov	r1, r0
 8010f38:	6818      	ldr	r0, [r3, #0]
 8010f3a:	f000 b82b 	b.w	8010f94 <_malloc_r>
 8010f3e:	bf00      	nop
 8010f40:	200002f0 	.word	0x200002f0

08010f44 <free>:
 8010f44:	4b02      	ldr	r3, [pc, #8]	; (8010f50 <free+0xc>)
 8010f46:	4601      	mov	r1, r0
 8010f48:	6818      	ldr	r0, [r3, #0]
 8010f4a:	f002 bf57 	b.w	8013dfc <_free_r>
 8010f4e:	bf00      	nop
 8010f50:	200002f0 	.word	0x200002f0

08010f54 <sbrk_aligned>:
 8010f54:	b570      	push	{r4, r5, r6, lr}
 8010f56:	4e0e      	ldr	r6, [pc, #56]	; (8010f90 <sbrk_aligned+0x3c>)
 8010f58:	460c      	mov	r4, r1
 8010f5a:	6831      	ldr	r1, [r6, #0]
 8010f5c:	4605      	mov	r5, r0
 8010f5e:	b911      	cbnz	r1, 8010f66 <sbrk_aligned+0x12>
 8010f60:	f002 f840 	bl	8012fe4 <_sbrk_r>
 8010f64:	6030      	str	r0, [r6, #0]
 8010f66:	4621      	mov	r1, r4
 8010f68:	4628      	mov	r0, r5
 8010f6a:	f002 f83b 	bl	8012fe4 <_sbrk_r>
 8010f6e:	1c43      	adds	r3, r0, #1
 8010f70:	d00a      	beq.n	8010f88 <sbrk_aligned+0x34>
 8010f72:	1cc4      	adds	r4, r0, #3
 8010f74:	f024 0403 	bic.w	r4, r4, #3
 8010f78:	42a0      	cmp	r0, r4
 8010f7a:	d007      	beq.n	8010f8c <sbrk_aligned+0x38>
 8010f7c:	1a21      	subs	r1, r4, r0
 8010f7e:	4628      	mov	r0, r5
 8010f80:	f002 f830 	bl	8012fe4 <_sbrk_r>
 8010f84:	3001      	adds	r0, #1
 8010f86:	d101      	bne.n	8010f8c <sbrk_aligned+0x38>
 8010f88:	f04f 34ff 	mov.w	r4, #4294967295
 8010f8c:	4620      	mov	r0, r4
 8010f8e:	bd70      	pop	{r4, r5, r6, pc}
 8010f90:	20001f70 	.word	0x20001f70

08010f94 <_malloc_r>:
 8010f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f98:	1ccd      	adds	r5, r1, #3
 8010f9a:	f025 0503 	bic.w	r5, r5, #3
 8010f9e:	3508      	adds	r5, #8
 8010fa0:	2d0c      	cmp	r5, #12
 8010fa2:	bf38      	it	cc
 8010fa4:	250c      	movcc	r5, #12
 8010fa6:	2d00      	cmp	r5, #0
 8010fa8:	4607      	mov	r7, r0
 8010faa:	db01      	blt.n	8010fb0 <_malloc_r+0x1c>
 8010fac:	42a9      	cmp	r1, r5
 8010fae:	d905      	bls.n	8010fbc <_malloc_r+0x28>
 8010fb0:	230c      	movs	r3, #12
 8010fb2:	603b      	str	r3, [r7, #0]
 8010fb4:	2600      	movs	r6, #0
 8010fb6:	4630      	mov	r0, r6
 8010fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011090 <_malloc_r+0xfc>
 8010fc0:	f000 f868 	bl	8011094 <__malloc_lock>
 8010fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8010fc8:	461c      	mov	r4, r3
 8010fca:	bb5c      	cbnz	r4, 8011024 <_malloc_r+0x90>
 8010fcc:	4629      	mov	r1, r5
 8010fce:	4638      	mov	r0, r7
 8010fd0:	f7ff ffc0 	bl	8010f54 <sbrk_aligned>
 8010fd4:	1c43      	adds	r3, r0, #1
 8010fd6:	4604      	mov	r4, r0
 8010fd8:	d155      	bne.n	8011086 <_malloc_r+0xf2>
 8010fda:	f8d8 4000 	ldr.w	r4, [r8]
 8010fde:	4626      	mov	r6, r4
 8010fe0:	2e00      	cmp	r6, #0
 8010fe2:	d145      	bne.n	8011070 <_malloc_r+0xdc>
 8010fe4:	2c00      	cmp	r4, #0
 8010fe6:	d048      	beq.n	801107a <_malloc_r+0xe6>
 8010fe8:	6823      	ldr	r3, [r4, #0]
 8010fea:	4631      	mov	r1, r6
 8010fec:	4638      	mov	r0, r7
 8010fee:	eb04 0903 	add.w	r9, r4, r3
 8010ff2:	f001 fff7 	bl	8012fe4 <_sbrk_r>
 8010ff6:	4581      	cmp	r9, r0
 8010ff8:	d13f      	bne.n	801107a <_malloc_r+0xe6>
 8010ffa:	6821      	ldr	r1, [r4, #0]
 8010ffc:	1a6d      	subs	r5, r5, r1
 8010ffe:	4629      	mov	r1, r5
 8011000:	4638      	mov	r0, r7
 8011002:	f7ff ffa7 	bl	8010f54 <sbrk_aligned>
 8011006:	3001      	adds	r0, #1
 8011008:	d037      	beq.n	801107a <_malloc_r+0xe6>
 801100a:	6823      	ldr	r3, [r4, #0]
 801100c:	442b      	add	r3, r5
 801100e:	6023      	str	r3, [r4, #0]
 8011010:	f8d8 3000 	ldr.w	r3, [r8]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d038      	beq.n	801108a <_malloc_r+0xf6>
 8011018:	685a      	ldr	r2, [r3, #4]
 801101a:	42a2      	cmp	r2, r4
 801101c:	d12b      	bne.n	8011076 <_malloc_r+0xe2>
 801101e:	2200      	movs	r2, #0
 8011020:	605a      	str	r2, [r3, #4]
 8011022:	e00f      	b.n	8011044 <_malloc_r+0xb0>
 8011024:	6822      	ldr	r2, [r4, #0]
 8011026:	1b52      	subs	r2, r2, r5
 8011028:	d41f      	bmi.n	801106a <_malloc_r+0xd6>
 801102a:	2a0b      	cmp	r2, #11
 801102c:	d917      	bls.n	801105e <_malloc_r+0xca>
 801102e:	1961      	adds	r1, r4, r5
 8011030:	42a3      	cmp	r3, r4
 8011032:	6025      	str	r5, [r4, #0]
 8011034:	bf18      	it	ne
 8011036:	6059      	strne	r1, [r3, #4]
 8011038:	6863      	ldr	r3, [r4, #4]
 801103a:	bf08      	it	eq
 801103c:	f8c8 1000 	streq.w	r1, [r8]
 8011040:	5162      	str	r2, [r4, r5]
 8011042:	604b      	str	r3, [r1, #4]
 8011044:	4638      	mov	r0, r7
 8011046:	f104 060b 	add.w	r6, r4, #11
 801104a:	f000 f829 	bl	80110a0 <__malloc_unlock>
 801104e:	f026 0607 	bic.w	r6, r6, #7
 8011052:	1d23      	adds	r3, r4, #4
 8011054:	1af2      	subs	r2, r6, r3
 8011056:	d0ae      	beq.n	8010fb6 <_malloc_r+0x22>
 8011058:	1b9b      	subs	r3, r3, r6
 801105a:	50a3      	str	r3, [r4, r2]
 801105c:	e7ab      	b.n	8010fb6 <_malloc_r+0x22>
 801105e:	42a3      	cmp	r3, r4
 8011060:	6862      	ldr	r2, [r4, #4]
 8011062:	d1dd      	bne.n	8011020 <_malloc_r+0x8c>
 8011064:	f8c8 2000 	str.w	r2, [r8]
 8011068:	e7ec      	b.n	8011044 <_malloc_r+0xb0>
 801106a:	4623      	mov	r3, r4
 801106c:	6864      	ldr	r4, [r4, #4]
 801106e:	e7ac      	b.n	8010fca <_malloc_r+0x36>
 8011070:	4634      	mov	r4, r6
 8011072:	6876      	ldr	r6, [r6, #4]
 8011074:	e7b4      	b.n	8010fe0 <_malloc_r+0x4c>
 8011076:	4613      	mov	r3, r2
 8011078:	e7cc      	b.n	8011014 <_malloc_r+0x80>
 801107a:	230c      	movs	r3, #12
 801107c:	603b      	str	r3, [r7, #0]
 801107e:	4638      	mov	r0, r7
 8011080:	f000 f80e 	bl	80110a0 <__malloc_unlock>
 8011084:	e797      	b.n	8010fb6 <_malloc_r+0x22>
 8011086:	6025      	str	r5, [r4, #0]
 8011088:	e7dc      	b.n	8011044 <_malloc_r+0xb0>
 801108a:	605b      	str	r3, [r3, #4]
 801108c:	deff      	udf	#255	; 0xff
 801108e:	bf00      	nop
 8011090:	20001f6c 	.word	0x20001f6c

08011094 <__malloc_lock>:
 8011094:	4801      	ldr	r0, [pc, #4]	; (801109c <__malloc_lock+0x8>)
 8011096:	f001 bff2 	b.w	801307e <__retarget_lock_acquire_recursive>
 801109a:	bf00      	nop
 801109c:	200020b4 	.word	0x200020b4

080110a0 <__malloc_unlock>:
 80110a0:	4801      	ldr	r0, [pc, #4]	; (80110a8 <__malloc_unlock+0x8>)
 80110a2:	f001 bfed 	b.w	8013080 <__retarget_lock_release_recursive>
 80110a6:	bf00      	nop
 80110a8:	200020b4 	.word	0x200020b4

080110ac <sulp>:
 80110ac:	b570      	push	{r4, r5, r6, lr}
 80110ae:	4604      	mov	r4, r0
 80110b0:	460d      	mov	r5, r1
 80110b2:	ec45 4b10 	vmov	d0, r4, r5
 80110b6:	4616      	mov	r6, r2
 80110b8:	f003 fdc2 	bl	8014c40 <__ulp>
 80110bc:	ec51 0b10 	vmov	r0, r1, d0
 80110c0:	b17e      	cbz	r6, 80110e2 <sulp+0x36>
 80110c2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80110c6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	dd09      	ble.n	80110e2 <sulp+0x36>
 80110ce:	051b      	lsls	r3, r3, #20
 80110d0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80110d4:	2400      	movs	r4, #0
 80110d6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80110da:	4622      	mov	r2, r4
 80110dc:	462b      	mov	r3, r5
 80110de:	f7ef fa9b 	bl	8000618 <__aeabi_dmul>
 80110e2:	bd70      	pop	{r4, r5, r6, pc}
 80110e4:	0000      	movs	r0, r0
	...

080110e8 <_strtod_l>:
 80110e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ec:	ed2d 8b02 	vpush	{d8}
 80110f0:	b09b      	sub	sp, #108	; 0x6c
 80110f2:	4604      	mov	r4, r0
 80110f4:	9213      	str	r2, [sp, #76]	; 0x4c
 80110f6:	2200      	movs	r2, #0
 80110f8:	9216      	str	r2, [sp, #88]	; 0x58
 80110fa:	460d      	mov	r5, r1
 80110fc:	f04f 0800 	mov.w	r8, #0
 8011100:	f04f 0900 	mov.w	r9, #0
 8011104:	460a      	mov	r2, r1
 8011106:	9215      	str	r2, [sp, #84]	; 0x54
 8011108:	7811      	ldrb	r1, [r2, #0]
 801110a:	292b      	cmp	r1, #43	; 0x2b
 801110c:	d04c      	beq.n	80111a8 <_strtod_l+0xc0>
 801110e:	d83a      	bhi.n	8011186 <_strtod_l+0x9e>
 8011110:	290d      	cmp	r1, #13
 8011112:	d834      	bhi.n	801117e <_strtod_l+0x96>
 8011114:	2908      	cmp	r1, #8
 8011116:	d834      	bhi.n	8011182 <_strtod_l+0x9a>
 8011118:	2900      	cmp	r1, #0
 801111a:	d03d      	beq.n	8011198 <_strtod_l+0xb0>
 801111c:	2200      	movs	r2, #0
 801111e:	920a      	str	r2, [sp, #40]	; 0x28
 8011120:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8011122:	7832      	ldrb	r2, [r6, #0]
 8011124:	2a30      	cmp	r2, #48	; 0x30
 8011126:	f040 80b4 	bne.w	8011292 <_strtod_l+0x1aa>
 801112a:	7872      	ldrb	r2, [r6, #1]
 801112c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8011130:	2a58      	cmp	r2, #88	; 0x58
 8011132:	d170      	bne.n	8011216 <_strtod_l+0x12e>
 8011134:	9302      	str	r3, [sp, #8]
 8011136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011138:	9301      	str	r3, [sp, #4]
 801113a:	ab16      	add	r3, sp, #88	; 0x58
 801113c:	9300      	str	r3, [sp, #0]
 801113e:	4a8e      	ldr	r2, [pc, #568]	; (8011378 <_strtod_l+0x290>)
 8011140:	ab17      	add	r3, sp, #92	; 0x5c
 8011142:	a915      	add	r1, sp, #84	; 0x54
 8011144:	4620      	mov	r0, r4
 8011146:	f002 ff0d 	bl	8013f64 <__gethex>
 801114a:	f010 070f 	ands.w	r7, r0, #15
 801114e:	4605      	mov	r5, r0
 8011150:	d005      	beq.n	801115e <_strtod_l+0x76>
 8011152:	2f06      	cmp	r7, #6
 8011154:	d12a      	bne.n	80111ac <_strtod_l+0xc4>
 8011156:	3601      	adds	r6, #1
 8011158:	2300      	movs	r3, #0
 801115a:	9615      	str	r6, [sp, #84]	; 0x54
 801115c:	930a      	str	r3, [sp, #40]	; 0x28
 801115e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011160:	2b00      	cmp	r3, #0
 8011162:	f040 857f 	bne.w	8011c64 <_strtod_l+0xb7c>
 8011166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011168:	b1db      	cbz	r3, 80111a2 <_strtod_l+0xba>
 801116a:	4642      	mov	r2, r8
 801116c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011170:	ec43 2b10 	vmov	d0, r2, r3
 8011174:	b01b      	add	sp, #108	; 0x6c
 8011176:	ecbd 8b02 	vpop	{d8}
 801117a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801117e:	2920      	cmp	r1, #32
 8011180:	d1cc      	bne.n	801111c <_strtod_l+0x34>
 8011182:	3201      	adds	r2, #1
 8011184:	e7bf      	b.n	8011106 <_strtod_l+0x1e>
 8011186:	292d      	cmp	r1, #45	; 0x2d
 8011188:	d1c8      	bne.n	801111c <_strtod_l+0x34>
 801118a:	2101      	movs	r1, #1
 801118c:	910a      	str	r1, [sp, #40]	; 0x28
 801118e:	1c51      	adds	r1, r2, #1
 8011190:	9115      	str	r1, [sp, #84]	; 0x54
 8011192:	7852      	ldrb	r2, [r2, #1]
 8011194:	2a00      	cmp	r2, #0
 8011196:	d1c3      	bne.n	8011120 <_strtod_l+0x38>
 8011198:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801119a:	9515      	str	r5, [sp, #84]	; 0x54
 801119c:	2b00      	cmp	r3, #0
 801119e:	f040 855f 	bne.w	8011c60 <_strtod_l+0xb78>
 80111a2:	4642      	mov	r2, r8
 80111a4:	464b      	mov	r3, r9
 80111a6:	e7e3      	b.n	8011170 <_strtod_l+0x88>
 80111a8:	2100      	movs	r1, #0
 80111aa:	e7ef      	b.n	801118c <_strtod_l+0xa4>
 80111ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80111ae:	b13a      	cbz	r2, 80111c0 <_strtod_l+0xd8>
 80111b0:	2135      	movs	r1, #53	; 0x35
 80111b2:	a818      	add	r0, sp, #96	; 0x60
 80111b4:	f003 fe41 	bl	8014e3a <__copybits>
 80111b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80111ba:	4620      	mov	r0, r4
 80111bc:	f003 fa14 	bl	80145e8 <_Bfree>
 80111c0:	3f01      	subs	r7, #1
 80111c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80111c4:	2f04      	cmp	r7, #4
 80111c6:	d806      	bhi.n	80111d6 <_strtod_l+0xee>
 80111c8:	e8df f007 	tbb	[pc, r7]
 80111cc:	201d0314 	.word	0x201d0314
 80111d0:	14          	.byte	0x14
 80111d1:	00          	.byte	0x00
 80111d2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80111d6:	05e9      	lsls	r1, r5, #23
 80111d8:	bf48      	it	mi
 80111da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80111de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80111e2:	0d1b      	lsrs	r3, r3, #20
 80111e4:	051b      	lsls	r3, r3, #20
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d1b9      	bne.n	801115e <_strtod_l+0x76>
 80111ea:	f001 ff1d 	bl	8013028 <__errno>
 80111ee:	2322      	movs	r3, #34	; 0x22
 80111f0:	6003      	str	r3, [r0, #0]
 80111f2:	e7b4      	b.n	801115e <_strtod_l+0x76>
 80111f4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80111f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80111fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011200:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8011204:	e7e7      	b.n	80111d6 <_strtod_l+0xee>
 8011206:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011380 <_strtod_l+0x298>
 801120a:	e7e4      	b.n	80111d6 <_strtod_l+0xee>
 801120c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8011210:	f04f 38ff 	mov.w	r8, #4294967295
 8011214:	e7df      	b.n	80111d6 <_strtod_l+0xee>
 8011216:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011218:	1c5a      	adds	r2, r3, #1
 801121a:	9215      	str	r2, [sp, #84]	; 0x54
 801121c:	785b      	ldrb	r3, [r3, #1]
 801121e:	2b30      	cmp	r3, #48	; 0x30
 8011220:	d0f9      	beq.n	8011216 <_strtod_l+0x12e>
 8011222:	2b00      	cmp	r3, #0
 8011224:	d09b      	beq.n	801115e <_strtod_l+0x76>
 8011226:	2301      	movs	r3, #1
 8011228:	f04f 0a00 	mov.w	sl, #0
 801122c:	9304      	str	r3, [sp, #16]
 801122e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011230:	930b      	str	r3, [sp, #44]	; 0x2c
 8011232:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8011236:	46d3      	mov	fp, sl
 8011238:	220a      	movs	r2, #10
 801123a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801123c:	7806      	ldrb	r6, [r0, #0]
 801123e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011242:	b2d9      	uxtb	r1, r3
 8011244:	2909      	cmp	r1, #9
 8011246:	d926      	bls.n	8011296 <_strtod_l+0x1ae>
 8011248:	494c      	ldr	r1, [pc, #304]	; (801137c <_strtod_l+0x294>)
 801124a:	2201      	movs	r2, #1
 801124c:	f001 fe0d 	bl	8012e6a <strncmp>
 8011250:	2800      	cmp	r0, #0
 8011252:	d030      	beq.n	80112b6 <_strtod_l+0x1ce>
 8011254:	2000      	movs	r0, #0
 8011256:	4632      	mov	r2, r6
 8011258:	9005      	str	r0, [sp, #20]
 801125a:	465e      	mov	r6, fp
 801125c:	4603      	mov	r3, r0
 801125e:	2a65      	cmp	r2, #101	; 0x65
 8011260:	d001      	beq.n	8011266 <_strtod_l+0x17e>
 8011262:	2a45      	cmp	r2, #69	; 0x45
 8011264:	d113      	bne.n	801128e <_strtod_l+0x1a6>
 8011266:	b91e      	cbnz	r6, 8011270 <_strtod_l+0x188>
 8011268:	9a04      	ldr	r2, [sp, #16]
 801126a:	4302      	orrs	r2, r0
 801126c:	d094      	beq.n	8011198 <_strtod_l+0xb0>
 801126e:	2600      	movs	r6, #0
 8011270:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8011272:	1c6a      	adds	r2, r5, #1
 8011274:	9215      	str	r2, [sp, #84]	; 0x54
 8011276:	786a      	ldrb	r2, [r5, #1]
 8011278:	2a2b      	cmp	r2, #43	; 0x2b
 801127a:	d074      	beq.n	8011366 <_strtod_l+0x27e>
 801127c:	2a2d      	cmp	r2, #45	; 0x2d
 801127e:	d078      	beq.n	8011372 <_strtod_l+0x28a>
 8011280:	f04f 0c00 	mov.w	ip, #0
 8011284:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011288:	2909      	cmp	r1, #9
 801128a:	d97f      	bls.n	801138c <_strtod_l+0x2a4>
 801128c:	9515      	str	r5, [sp, #84]	; 0x54
 801128e:	2700      	movs	r7, #0
 8011290:	e09e      	b.n	80113d0 <_strtod_l+0x2e8>
 8011292:	2300      	movs	r3, #0
 8011294:	e7c8      	b.n	8011228 <_strtod_l+0x140>
 8011296:	f1bb 0f08 	cmp.w	fp, #8
 801129a:	bfd8      	it	le
 801129c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801129e:	f100 0001 	add.w	r0, r0, #1
 80112a2:	bfda      	itte	le
 80112a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80112a8:	9309      	strle	r3, [sp, #36]	; 0x24
 80112aa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80112ae:	f10b 0b01 	add.w	fp, fp, #1
 80112b2:	9015      	str	r0, [sp, #84]	; 0x54
 80112b4:	e7c1      	b.n	801123a <_strtod_l+0x152>
 80112b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80112b8:	1c5a      	adds	r2, r3, #1
 80112ba:	9215      	str	r2, [sp, #84]	; 0x54
 80112bc:	785a      	ldrb	r2, [r3, #1]
 80112be:	f1bb 0f00 	cmp.w	fp, #0
 80112c2:	d037      	beq.n	8011334 <_strtod_l+0x24c>
 80112c4:	9005      	str	r0, [sp, #20]
 80112c6:	465e      	mov	r6, fp
 80112c8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80112cc:	2b09      	cmp	r3, #9
 80112ce:	d912      	bls.n	80112f6 <_strtod_l+0x20e>
 80112d0:	2301      	movs	r3, #1
 80112d2:	e7c4      	b.n	801125e <_strtod_l+0x176>
 80112d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80112d6:	1c5a      	adds	r2, r3, #1
 80112d8:	9215      	str	r2, [sp, #84]	; 0x54
 80112da:	785a      	ldrb	r2, [r3, #1]
 80112dc:	3001      	adds	r0, #1
 80112de:	2a30      	cmp	r2, #48	; 0x30
 80112e0:	d0f8      	beq.n	80112d4 <_strtod_l+0x1ec>
 80112e2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80112e6:	2b08      	cmp	r3, #8
 80112e8:	f200 84c1 	bhi.w	8011c6e <_strtod_l+0xb86>
 80112ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80112ee:	9005      	str	r0, [sp, #20]
 80112f0:	2000      	movs	r0, #0
 80112f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80112f4:	4606      	mov	r6, r0
 80112f6:	3a30      	subs	r2, #48	; 0x30
 80112f8:	f100 0301 	add.w	r3, r0, #1
 80112fc:	d014      	beq.n	8011328 <_strtod_l+0x240>
 80112fe:	9905      	ldr	r1, [sp, #20]
 8011300:	4419      	add	r1, r3
 8011302:	9105      	str	r1, [sp, #20]
 8011304:	4633      	mov	r3, r6
 8011306:	eb00 0c06 	add.w	ip, r0, r6
 801130a:	210a      	movs	r1, #10
 801130c:	4563      	cmp	r3, ip
 801130e:	d113      	bne.n	8011338 <_strtod_l+0x250>
 8011310:	1833      	adds	r3, r6, r0
 8011312:	2b08      	cmp	r3, #8
 8011314:	f106 0601 	add.w	r6, r6, #1
 8011318:	4406      	add	r6, r0
 801131a:	dc1a      	bgt.n	8011352 <_strtod_l+0x26a>
 801131c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801131e:	230a      	movs	r3, #10
 8011320:	fb03 2301 	mla	r3, r3, r1, r2
 8011324:	9309      	str	r3, [sp, #36]	; 0x24
 8011326:	2300      	movs	r3, #0
 8011328:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801132a:	1c51      	adds	r1, r2, #1
 801132c:	9115      	str	r1, [sp, #84]	; 0x54
 801132e:	7852      	ldrb	r2, [r2, #1]
 8011330:	4618      	mov	r0, r3
 8011332:	e7c9      	b.n	80112c8 <_strtod_l+0x1e0>
 8011334:	4658      	mov	r0, fp
 8011336:	e7d2      	b.n	80112de <_strtod_l+0x1f6>
 8011338:	2b08      	cmp	r3, #8
 801133a:	f103 0301 	add.w	r3, r3, #1
 801133e:	dc03      	bgt.n	8011348 <_strtod_l+0x260>
 8011340:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011342:	434f      	muls	r7, r1
 8011344:	9709      	str	r7, [sp, #36]	; 0x24
 8011346:	e7e1      	b.n	801130c <_strtod_l+0x224>
 8011348:	2b10      	cmp	r3, #16
 801134a:	bfd8      	it	le
 801134c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8011350:	e7dc      	b.n	801130c <_strtod_l+0x224>
 8011352:	2e10      	cmp	r6, #16
 8011354:	bfdc      	itt	le
 8011356:	230a      	movle	r3, #10
 8011358:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801135c:	e7e3      	b.n	8011326 <_strtod_l+0x23e>
 801135e:	2300      	movs	r3, #0
 8011360:	9305      	str	r3, [sp, #20]
 8011362:	2301      	movs	r3, #1
 8011364:	e780      	b.n	8011268 <_strtod_l+0x180>
 8011366:	f04f 0c00 	mov.w	ip, #0
 801136a:	1caa      	adds	r2, r5, #2
 801136c:	9215      	str	r2, [sp, #84]	; 0x54
 801136e:	78aa      	ldrb	r2, [r5, #2]
 8011370:	e788      	b.n	8011284 <_strtod_l+0x19c>
 8011372:	f04f 0c01 	mov.w	ip, #1
 8011376:	e7f8      	b.n	801136a <_strtod_l+0x282>
 8011378:	08018b14 	.word	0x08018b14
 801137c:	08018b10 	.word	0x08018b10
 8011380:	7ff00000 	.word	0x7ff00000
 8011384:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011386:	1c51      	adds	r1, r2, #1
 8011388:	9115      	str	r1, [sp, #84]	; 0x54
 801138a:	7852      	ldrb	r2, [r2, #1]
 801138c:	2a30      	cmp	r2, #48	; 0x30
 801138e:	d0f9      	beq.n	8011384 <_strtod_l+0x29c>
 8011390:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011394:	2908      	cmp	r1, #8
 8011396:	f63f af7a 	bhi.w	801128e <_strtod_l+0x1a6>
 801139a:	3a30      	subs	r2, #48	; 0x30
 801139c:	9208      	str	r2, [sp, #32]
 801139e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80113a0:	920c      	str	r2, [sp, #48]	; 0x30
 80113a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80113a4:	1c57      	adds	r7, r2, #1
 80113a6:	9715      	str	r7, [sp, #84]	; 0x54
 80113a8:	7852      	ldrb	r2, [r2, #1]
 80113aa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80113ae:	f1be 0f09 	cmp.w	lr, #9
 80113b2:	d938      	bls.n	8011426 <_strtod_l+0x33e>
 80113b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80113b6:	1a7f      	subs	r7, r7, r1
 80113b8:	2f08      	cmp	r7, #8
 80113ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80113be:	dc03      	bgt.n	80113c8 <_strtod_l+0x2e0>
 80113c0:	9908      	ldr	r1, [sp, #32]
 80113c2:	428f      	cmp	r7, r1
 80113c4:	bfa8      	it	ge
 80113c6:	460f      	movge	r7, r1
 80113c8:	f1bc 0f00 	cmp.w	ip, #0
 80113cc:	d000      	beq.n	80113d0 <_strtod_l+0x2e8>
 80113ce:	427f      	negs	r7, r7
 80113d0:	2e00      	cmp	r6, #0
 80113d2:	d14f      	bne.n	8011474 <_strtod_l+0x38c>
 80113d4:	9904      	ldr	r1, [sp, #16]
 80113d6:	4301      	orrs	r1, r0
 80113d8:	f47f aec1 	bne.w	801115e <_strtod_l+0x76>
 80113dc:	2b00      	cmp	r3, #0
 80113de:	f47f aedb 	bne.w	8011198 <_strtod_l+0xb0>
 80113e2:	2a69      	cmp	r2, #105	; 0x69
 80113e4:	d029      	beq.n	801143a <_strtod_l+0x352>
 80113e6:	dc26      	bgt.n	8011436 <_strtod_l+0x34e>
 80113e8:	2a49      	cmp	r2, #73	; 0x49
 80113ea:	d026      	beq.n	801143a <_strtod_l+0x352>
 80113ec:	2a4e      	cmp	r2, #78	; 0x4e
 80113ee:	f47f aed3 	bne.w	8011198 <_strtod_l+0xb0>
 80113f2:	499b      	ldr	r1, [pc, #620]	; (8011660 <_strtod_l+0x578>)
 80113f4:	a815      	add	r0, sp, #84	; 0x54
 80113f6:	f002 fff5 	bl	80143e4 <__match>
 80113fa:	2800      	cmp	r0, #0
 80113fc:	f43f aecc 	beq.w	8011198 <_strtod_l+0xb0>
 8011400:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011402:	781b      	ldrb	r3, [r3, #0]
 8011404:	2b28      	cmp	r3, #40	; 0x28
 8011406:	d12f      	bne.n	8011468 <_strtod_l+0x380>
 8011408:	4996      	ldr	r1, [pc, #600]	; (8011664 <_strtod_l+0x57c>)
 801140a:	aa18      	add	r2, sp, #96	; 0x60
 801140c:	a815      	add	r0, sp, #84	; 0x54
 801140e:	f002 fffd 	bl	801440c <__hexnan>
 8011412:	2805      	cmp	r0, #5
 8011414:	d128      	bne.n	8011468 <_strtod_l+0x380>
 8011416:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011418:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801141c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011420:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8011424:	e69b      	b.n	801115e <_strtod_l+0x76>
 8011426:	9f08      	ldr	r7, [sp, #32]
 8011428:	210a      	movs	r1, #10
 801142a:	fb01 2107 	mla	r1, r1, r7, r2
 801142e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8011432:	9208      	str	r2, [sp, #32]
 8011434:	e7b5      	b.n	80113a2 <_strtod_l+0x2ba>
 8011436:	2a6e      	cmp	r2, #110	; 0x6e
 8011438:	e7d9      	b.n	80113ee <_strtod_l+0x306>
 801143a:	498b      	ldr	r1, [pc, #556]	; (8011668 <_strtod_l+0x580>)
 801143c:	a815      	add	r0, sp, #84	; 0x54
 801143e:	f002 ffd1 	bl	80143e4 <__match>
 8011442:	2800      	cmp	r0, #0
 8011444:	f43f aea8 	beq.w	8011198 <_strtod_l+0xb0>
 8011448:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801144a:	4988      	ldr	r1, [pc, #544]	; (801166c <_strtod_l+0x584>)
 801144c:	3b01      	subs	r3, #1
 801144e:	a815      	add	r0, sp, #84	; 0x54
 8011450:	9315      	str	r3, [sp, #84]	; 0x54
 8011452:	f002 ffc7 	bl	80143e4 <__match>
 8011456:	b910      	cbnz	r0, 801145e <_strtod_l+0x376>
 8011458:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801145a:	3301      	adds	r3, #1
 801145c:	9315      	str	r3, [sp, #84]	; 0x54
 801145e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801167c <_strtod_l+0x594>
 8011462:	f04f 0800 	mov.w	r8, #0
 8011466:	e67a      	b.n	801115e <_strtod_l+0x76>
 8011468:	4881      	ldr	r0, [pc, #516]	; (8011670 <_strtod_l+0x588>)
 801146a:	f001 fe21 	bl	80130b0 <nan>
 801146e:	ec59 8b10 	vmov	r8, r9, d0
 8011472:	e674      	b.n	801115e <_strtod_l+0x76>
 8011474:	9b05      	ldr	r3, [sp, #20]
 8011476:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011478:	1afb      	subs	r3, r7, r3
 801147a:	f1bb 0f00 	cmp.w	fp, #0
 801147e:	bf08      	it	eq
 8011480:	46b3      	moveq	fp, r6
 8011482:	2e10      	cmp	r6, #16
 8011484:	9308      	str	r3, [sp, #32]
 8011486:	4635      	mov	r5, r6
 8011488:	bfa8      	it	ge
 801148a:	2510      	movge	r5, #16
 801148c:	f7ef f84a 	bl	8000524 <__aeabi_ui2d>
 8011490:	2e09      	cmp	r6, #9
 8011492:	4680      	mov	r8, r0
 8011494:	4689      	mov	r9, r1
 8011496:	dd13      	ble.n	80114c0 <_strtod_l+0x3d8>
 8011498:	4b76      	ldr	r3, [pc, #472]	; (8011674 <_strtod_l+0x58c>)
 801149a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801149e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80114a2:	f7ef f8b9 	bl	8000618 <__aeabi_dmul>
 80114a6:	4680      	mov	r8, r0
 80114a8:	4650      	mov	r0, sl
 80114aa:	4689      	mov	r9, r1
 80114ac:	f7ef f83a 	bl	8000524 <__aeabi_ui2d>
 80114b0:	4602      	mov	r2, r0
 80114b2:	460b      	mov	r3, r1
 80114b4:	4640      	mov	r0, r8
 80114b6:	4649      	mov	r1, r9
 80114b8:	f7ee fef8 	bl	80002ac <__adddf3>
 80114bc:	4680      	mov	r8, r0
 80114be:	4689      	mov	r9, r1
 80114c0:	2e0f      	cmp	r6, #15
 80114c2:	dc38      	bgt.n	8011536 <_strtod_l+0x44e>
 80114c4:	9b08      	ldr	r3, [sp, #32]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	f43f ae49 	beq.w	801115e <_strtod_l+0x76>
 80114cc:	dd24      	ble.n	8011518 <_strtod_l+0x430>
 80114ce:	2b16      	cmp	r3, #22
 80114d0:	dc0b      	bgt.n	80114ea <_strtod_l+0x402>
 80114d2:	4968      	ldr	r1, [pc, #416]	; (8011674 <_strtod_l+0x58c>)
 80114d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80114d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114dc:	4642      	mov	r2, r8
 80114de:	464b      	mov	r3, r9
 80114e0:	f7ef f89a 	bl	8000618 <__aeabi_dmul>
 80114e4:	4680      	mov	r8, r0
 80114e6:	4689      	mov	r9, r1
 80114e8:	e639      	b.n	801115e <_strtod_l+0x76>
 80114ea:	9a08      	ldr	r2, [sp, #32]
 80114ec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80114f0:	4293      	cmp	r3, r2
 80114f2:	db20      	blt.n	8011536 <_strtod_l+0x44e>
 80114f4:	4c5f      	ldr	r4, [pc, #380]	; (8011674 <_strtod_l+0x58c>)
 80114f6:	f1c6 060f 	rsb	r6, r6, #15
 80114fa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80114fe:	4642      	mov	r2, r8
 8011500:	464b      	mov	r3, r9
 8011502:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011506:	f7ef f887 	bl	8000618 <__aeabi_dmul>
 801150a:	9b08      	ldr	r3, [sp, #32]
 801150c:	1b9e      	subs	r6, r3, r6
 801150e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8011512:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011516:	e7e3      	b.n	80114e0 <_strtod_l+0x3f8>
 8011518:	9b08      	ldr	r3, [sp, #32]
 801151a:	3316      	adds	r3, #22
 801151c:	db0b      	blt.n	8011536 <_strtod_l+0x44e>
 801151e:	9b05      	ldr	r3, [sp, #20]
 8011520:	1bdf      	subs	r7, r3, r7
 8011522:	4b54      	ldr	r3, [pc, #336]	; (8011674 <_strtod_l+0x58c>)
 8011524:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011528:	e9d7 2300 	ldrd	r2, r3, [r7]
 801152c:	4640      	mov	r0, r8
 801152e:	4649      	mov	r1, r9
 8011530:	f7ef f99c 	bl	800086c <__aeabi_ddiv>
 8011534:	e7d6      	b.n	80114e4 <_strtod_l+0x3fc>
 8011536:	9b08      	ldr	r3, [sp, #32]
 8011538:	1b75      	subs	r5, r6, r5
 801153a:	441d      	add	r5, r3
 801153c:	2d00      	cmp	r5, #0
 801153e:	dd70      	ble.n	8011622 <_strtod_l+0x53a>
 8011540:	f015 030f 	ands.w	r3, r5, #15
 8011544:	d00a      	beq.n	801155c <_strtod_l+0x474>
 8011546:	494b      	ldr	r1, [pc, #300]	; (8011674 <_strtod_l+0x58c>)
 8011548:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801154c:	4642      	mov	r2, r8
 801154e:	464b      	mov	r3, r9
 8011550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011554:	f7ef f860 	bl	8000618 <__aeabi_dmul>
 8011558:	4680      	mov	r8, r0
 801155a:	4689      	mov	r9, r1
 801155c:	f035 050f 	bics.w	r5, r5, #15
 8011560:	d04d      	beq.n	80115fe <_strtod_l+0x516>
 8011562:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8011566:	dd22      	ble.n	80115ae <_strtod_l+0x4c6>
 8011568:	2500      	movs	r5, #0
 801156a:	46ab      	mov	fp, r5
 801156c:	9509      	str	r5, [sp, #36]	; 0x24
 801156e:	9505      	str	r5, [sp, #20]
 8011570:	2322      	movs	r3, #34	; 0x22
 8011572:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801167c <_strtod_l+0x594>
 8011576:	6023      	str	r3, [r4, #0]
 8011578:	f04f 0800 	mov.w	r8, #0
 801157c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801157e:	2b00      	cmp	r3, #0
 8011580:	f43f aded 	beq.w	801115e <_strtod_l+0x76>
 8011584:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011586:	4620      	mov	r0, r4
 8011588:	f003 f82e 	bl	80145e8 <_Bfree>
 801158c:	9905      	ldr	r1, [sp, #20]
 801158e:	4620      	mov	r0, r4
 8011590:	f003 f82a 	bl	80145e8 <_Bfree>
 8011594:	4659      	mov	r1, fp
 8011596:	4620      	mov	r0, r4
 8011598:	f003 f826 	bl	80145e8 <_Bfree>
 801159c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801159e:	4620      	mov	r0, r4
 80115a0:	f003 f822 	bl	80145e8 <_Bfree>
 80115a4:	4629      	mov	r1, r5
 80115a6:	4620      	mov	r0, r4
 80115a8:	f003 f81e 	bl	80145e8 <_Bfree>
 80115ac:	e5d7      	b.n	801115e <_strtod_l+0x76>
 80115ae:	4b32      	ldr	r3, [pc, #200]	; (8011678 <_strtod_l+0x590>)
 80115b0:	9304      	str	r3, [sp, #16]
 80115b2:	2300      	movs	r3, #0
 80115b4:	112d      	asrs	r5, r5, #4
 80115b6:	4640      	mov	r0, r8
 80115b8:	4649      	mov	r1, r9
 80115ba:	469a      	mov	sl, r3
 80115bc:	2d01      	cmp	r5, #1
 80115be:	dc21      	bgt.n	8011604 <_strtod_l+0x51c>
 80115c0:	b10b      	cbz	r3, 80115c6 <_strtod_l+0x4de>
 80115c2:	4680      	mov	r8, r0
 80115c4:	4689      	mov	r9, r1
 80115c6:	492c      	ldr	r1, [pc, #176]	; (8011678 <_strtod_l+0x590>)
 80115c8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80115cc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80115d0:	4642      	mov	r2, r8
 80115d2:	464b      	mov	r3, r9
 80115d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115d8:	f7ef f81e 	bl	8000618 <__aeabi_dmul>
 80115dc:	4b27      	ldr	r3, [pc, #156]	; (801167c <_strtod_l+0x594>)
 80115de:	460a      	mov	r2, r1
 80115e0:	400b      	ands	r3, r1
 80115e2:	4927      	ldr	r1, [pc, #156]	; (8011680 <_strtod_l+0x598>)
 80115e4:	428b      	cmp	r3, r1
 80115e6:	4680      	mov	r8, r0
 80115e8:	d8be      	bhi.n	8011568 <_strtod_l+0x480>
 80115ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80115ee:	428b      	cmp	r3, r1
 80115f0:	bf86      	itte	hi
 80115f2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8011684 <_strtod_l+0x59c>
 80115f6:	f04f 38ff 	movhi.w	r8, #4294967295
 80115fa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80115fe:	2300      	movs	r3, #0
 8011600:	9304      	str	r3, [sp, #16]
 8011602:	e07b      	b.n	80116fc <_strtod_l+0x614>
 8011604:	07ea      	lsls	r2, r5, #31
 8011606:	d505      	bpl.n	8011614 <_strtod_l+0x52c>
 8011608:	9b04      	ldr	r3, [sp, #16]
 801160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801160e:	f7ef f803 	bl	8000618 <__aeabi_dmul>
 8011612:	2301      	movs	r3, #1
 8011614:	9a04      	ldr	r2, [sp, #16]
 8011616:	3208      	adds	r2, #8
 8011618:	f10a 0a01 	add.w	sl, sl, #1
 801161c:	106d      	asrs	r5, r5, #1
 801161e:	9204      	str	r2, [sp, #16]
 8011620:	e7cc      	b.n	80115bc <_strtod_l+0x4d4>
 8011622:	d0ec      	beq.n	80115fe <_strtod_l+0x516>
 8011624:	426d      	negs	r5, r5
 8011626:	f015 020f 	ands.w	r2, r5, #15
 801162a:	d00a      	beq.n	8011642 <_strtod_l+0x55a>
 801162c:	4b11      	ldr	r3, [pc, #68]	; (8011674 <_strtod_l+0x58c>)
 801162e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011632:	4640      	mov	r0, r8
 8011634:	4649      	mov	r1, r9
 8011636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801163a:	f7ef f917 	bl	800086c <__aeabi_ddiv>
 801163e:	4680      	mov	r8, r0
 8011640:	4689      	mov	r9, r1
 8011642:	112d      	asrs	r5, r5, #4
 8011644:	d0db      	beq.n	80115fe <_strtod_l+0x516>
 8011646:	2d1f      	cmp	r5, #31
 8011648:	dd1e      	ble.n	8011688 <_strtod_l+0x5a0>
 801164a:	2500      	movs	r5, #0
 801164c:	46ab      	mov	fp, r5
 801164e:	9509      	str	r5, [sp, #36]	; 0x24
 8011650:	9505      	str	r5, [sp, #20]
 8011652:	2322      	movs	r3, #34	; 0x22
 8011654:	f04f 0800 	mov.w	r8, #0
 8011658:	f04f 0900 	mov.w	r9, #0
 801165c:	6023      	str	r3, [r4, #0]
 801165e:	e78d      	b.n	801157c <_strtod_l+0x494>
 8011660:	08018c76 	.word	0x08018c76
 8011664:	08018b28 	.word	0x08018b28
 8011668:	08018c6e 	.word	0x08018c6e
 801166c:	08018d5a 	.word	0x08018d5a
 8011670:	08018d56 	.word	0x08018d56
 8011674:	08018eb0 	.word	0x08018eb0
 8011678:	08018e88 	.word	0x08018e88
 801167c:	7ff00000 	.word	0x7ff00000
 8011680:	7ca00000 	.word	0x7ca00000
 8011684:	7fefffff 	.word	0x7fefffff
 8011688:	f015 0310 	ands.w	r3, r5, #16
 801168c:	bf18      	it	ne
 801168e:	236a      	movne	r3, #106	; 0x6a
 8011690:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8011a34 <_strtod_l+0x94c>
 8011694:	9304      	str	r3, [sp, #16]
 8011696:	4640      	mov	r0, r8
 8011698:	4649      	mov	r1, r9
 801169a:	2300      	movs	r3, #0
 801169c:	07ea      	lsls	r2, r5, #31
 801169e:	d504      	bpl.n	80116aa <_strtod_l+0x5c2>
 80116a0:	e9da 2300 	ldrd	r2, r3, [sl]
 80116a4:	f7ee ffb8 	bl	8000618 <__aeabi_dmul>
 80116a8:	2301      	movs	r3, #1
 80116aa:	106d      	asrs	r5, r5, #1
 80116ac:	f10a 0a08 	add.w	sl, sl, #8
 80116b0:	d1f4      	bne.n	801169c <_strtod_l+0x5b4>
 80116b2:	b10b      	cbz	r3, 80116b8 <_strtod_l+0x5d0>
 80116b4:	4680      	mov	r8, r0
 80116b6:	4689      	mov	r9, r1
 80116b8:	9b04      	ldr	r3, [sp, #16]
 80116ba:	b1bb      	cbz	r3, 80116ec <_strtod_l+0x604>
 80116bc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80116c0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	4649      	mov	r1, r9
 80116c8:	dd10      	ble.n	80116ec <_strtod_l+0x604>
 80116ca:	2b1f      	cmp	r3, #31
 80116cc:	f340 811e 	ble.w	801190c <_strtod_l+0x824>
 80116d0:	2b34      	cmp	r3, #52	; 0x34
 80116d2:	bfde      	ittt	le
 80116d4:	f04f 33ff 	movle.w	r3, #4294967295
 80116d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80116dc:	4093      	lslle	r3, r2
 80116de:	f04f 0800 	mov.w	r8, #0
 80116e2:	bfcc      	ite	gt
 80116e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80116e8:	ea03 0901 	andle.w	r9, r3, r1
 80116ec:	2200      	movs	r2, #0
 80116ee:	2300      	movs	r3, #0
 80116f0:	4640      	mov	r0, r8
 80116f2:	4649      	mov	r1, r9
 80116f4:	f7ef f9f8 	bl	8000ae8 <__aeabi_dcmpeq>
 80116f8:	2800      	cmp	r0, #0
 80116fa:	d1a6      	bne.n	801164a <_strtod_l+0x562>
 80116fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116fe:	9300      	str	r3, [sp, #0]
 8011700:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011702:	4633      	mov	r3, r6
 8011704:	465a      	mov	r2, fp
 8011706:	4620      	mov	r0, r4
 8011708:	f002 ffd6 	bl	80146b8 <__s2b>
 801170c:	9009      	str	r0, [sp, #36]	; 0x24
 801170e:	2800      	cmp	r0, #0
 8011710:	f43f af2a 	beq.w	8011568 <_strtod_l+0x480>
 8011714:	9a08      	ldr	r2, [sp, #32]
 8011716:	9b05      	ldr	r3, [sp, #20]
 8011718:	2a00      	cmp	r2, #0
 801171a:	eba3 0307 	sub.w	r3, r3, r7
 801171e:	bfa8      	it	ge
 8011720:	2300      	movge	r3, #0
 8011722:	930c      	str	r3, [sp, #48]	; 0x30
 8011724:	2500      	movs	r5, #0
 8011726:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801172a:	9312      	str	r3, [sp, #72]	; 0x48
 801172c:	46ab      	mov	fp, r5
 801172e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011730:	4620      	mov	r0, r4
 8011732:	6859      	ldr	r1, [r3, #4]
 8011734:	f002 ff18 	bl	8014568 <_Balloc>
 8011738:	9005      	str	r0, [sp, #20]
 801173a:	2800      	cmp	r0, #0
 801173c:	f43f af18 	beq.w	8011570 <_strtod_l+0x488>
 8011740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011742:	691a      	ldr	r2, [r3, #16]
 8011744:	3202      	adds	r2, #2
 8011746:	f103 010c 	add.w	r1, r3, #12
 801174a:	0092      	lsls	r2, r2, #2
 801174c:	300c      	adds	r0, #12
 801174e:	f001 fca0 	bl	8013092 <memcpy>
 8011752:	ec49 8b10 	vmov	d0, r8, r9
 8011756:	aa18      	add	r2, sp, #96	; 0x60
 8011758:	a917      	add	r1, sp, #92	; 0x5c
 801175a:	4620      	mov	r0, r4
 801175c:	f003 fae0 	bl	8014d20 <__d2b>
 8011760:	ec49 8b18 	vmov	d8, r8, r9
 8011764:	9016      	str	r0, [sp, #88]	; 0x58
 8011766:	2800      	cmp	r0, #0
 8011768:	f43f af02 	beq.w	8011570 <_strtod_l+0x488>
 801176c:	2101      	movs	r1, #1
 801176e:	4620      	mov	r0, r4
 8011770:	f003 f83a 	bl	80147e8 <__i2b>
 8011774:	4683      	mov	fp, r0
 8011776:	2800      	cmp	r0, #0
 8011778:	f43f aefa 	beq.w	8011570 <_strtod_l+0x488>
 801177c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801177e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011780:	2e00      	cmp	r6, #0
 8011782:	bfab      	itete	ge
 8011784:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8011786:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8011788:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801178a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801178e:	bfac      	ite	ge
 8011790:	eb06 0a03 	addge.w	sl, r6, r3
 8011794:	1b9f      	sublt	r7, r3, r6
 8011796:	9b04      	ldr	r3, [sp, #16]
 8011798:	1af6      	subs	r6, r6, r3
 801179a:	4416      	add	r6, r2
 801179c:	4ba0      	ldr	r3, [pc, #640]	; (8011a20 <_strtod_l+0x938>)
 801179e:	3e01      	subs	r6, #1
 80117a0:	429e      	cmp	r6, r3
 80117a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80117a6:	f280 80c4 	bge.w	8011932 <_strtod_l+0x84a>
 80117aa:	1b9b      	subs	r3, r3, r6
 80117ac:	2b1f      	cmp	r3, #31
 80117ae:	eba2 0203 	sub.w	r2, r2, r3
 80117b2:	f04f 0101 	mov.w	r1, #1
 80117b6:	f300 80b0 	bgt.w	801191a <_strtod_l+0x832>
 80117ba:	fa01 f303 	lsl.w	r3, r1, r3
 80117be:	930e      	str	r3, [sp, #56]	; 0x38
 80117c0:	2300      	movs	r3, #0
 80117c2:	930d      	str	r3, [sp, #52]	; 0x34
 80117c4:	eb0a 0602 	add.w	r6, sl, r2
 80117c8:	9b04      	ldr	r3, [sp, #16]
 80117ca:	45b2      	cmp	sl, r6
 80117cc:	4417      	add	r7, r2
 80117ce:	441f      	add	r7, r3
 80117d0:	4653      	mov	r3, sl
 80117d2:	bfa8      	it	ge
 80117d4:	4633      	movge	r3, r6
 80117d6:	42bb      	cmp	r3, r7
 80117d8:	bfa8      	it	ge
 80117da:	463b      	movge	r3, r7
 80117dc:	2b00      	cmp	r3, #0
 80117de:	bfc2      	ittt	gt
 80117e0:	1af6      	subgt	r6, r6, r3
 80117e2:	1aff      	subgt	r7, r7, r3
 80117e4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80117e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	dd17      	ble.n	801181e <_strtod_l+0x736>
 80117ee:	4659      	mov	r1, fp
 80117f0:	461a      	mov	r2, r3
 80117f2:	4620      	mov	r0, r4
 80117f4:	f003 f8b8 	bl	8014968 <__pow5mult>
 80117f8:	4683      	mov	fp, r0
 80117fa:	2800      	cmp	r0, #0
 80117fc:	f43f aeb8 	beq.w	8011570 <_strtod_l+0x488>
 8011800:	4601      	mov	r1, r0
 8011802:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011804:	4620      	mov	r0, r4
 8011806:	f003 f805 	bl	8014814 <__multiply>
 801180a:	900b      	str	r0, [sp, #44]	; 0x2c
 801180c:	2800      	cmp	r0, #0
 801180e:	f43f aeaf 	beq.w	8011570 <_strtod_l+0x488>
 8011812:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011814:	4620      	mov	r0, r4
 8011816:	f002 fee7 	bl	80145e8 <_Bfree>
 801181a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801181c:	9316      	str	r3, [sp, #88]	; 0x58
 801181e:	2e00      	cmp	r6, #0
 8011820:	f300 808c 	bgt.w	801193c <_strtod_l+0x854>
 8011824:	9b08      	ldr	r3, [sp, #32]
 8011826:	2b00      	cmp	r3, #0
 8011828:	dd08      	ble.n	801183c <_strtod_l+0x754>
 801182a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801182c:	9905      	ldr	r1, [sp, #20]
 801182e:	4620      	mov	r0, r4
 8011830:	f003 f89a 	bl	8014968 <__pow5mult>
 8011834:	9005      	str	r0, [sp, #20]
 8011836:	2800      	cmp	r0, #0
 8011838:	f43f ae9a 	beq.w	8011570 <_strtod_l+0x488>
 801183c:	2f00      	cmp	r7, #0
 801183e:	dd08      	ble.n	8011852 <_strtod_l+0x76a>
 8011840:	9905      	ldr	r1, [sp, #20]
 8011842:	463a      	mov	r2, r7
 8011844:	4620      	mov	r0, r4
 8011846:	f003 f8e9 	bl	8014a1c <__lshift>
 801184a:	9005      	str	r0, [sp, #20]
 801184c:	2800      	cmp	r0, #0
 801184e:	f43f ae8f 	beq.w	8011570 <_strtod_l+0x488>
 8011852:	f1ba 0f00 	cmp.w	sl, #0
 8011856:	dd08      	ble.n	801186a <_strtod_l+0x782>
 8011858:	4659      	mov	r1, fp
 801185a:	4652      	mov	r2, sl
 801185c:	4620      	mov	r0, r4
 801185e:	f003 f8dd 	bl	8014a1c <__lshift>
 8011862:	4683      	mov	fp, r0
 8011864:	2800      	cmp	r0, #0
 8011866:	f43f ae83 	beq.w	8011570 <_strtod_l+0x488>
 801186a:	9a05      	ldr	r2, [sp, #20]
 801186c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801186e:	4620      	mov	r0, r4
 8011870:	f003 f95c 	bl	8014b2c <__mdiff>
 8011874:	4605      	mov	r5, r0
 8011876:	2800      	cmp	r0, #0
 8011878:	f43f ae7a 	beq.w	8011570 <_strtod_l+0x488>
 801187c:	68c3      	ldr	r3, [r0, #12]
 801187e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011880:	2300      	movs	r3, #0
 8011882:	60c3      	str	r3, [r0, #12]
 8011884:	4659      	mov	r1, fp
 8011886:	f003 f935 	bl	8014af4 <__mcmp>
 801188a:	2800      	cmp	r0, #0
 801188c:	da60      	bge.n	8011950 <_strtod_l+0x868>
 801188e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011890:	ea53 0308 	orrs.w	r3, r3, r8
 8011894:	f040 8084 	bne.w	80119a0 <_strtod_l+0x8b8>
 8011898:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801189c:	2b00      	cmp	r3, #0
 801189e:	d17f      	bne.n	80119a0 <_strtod_l+0x8b8>
 80118a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80118a4:	0d1b      	lsrs	r3, r3, #20
 80118a6:	051b      	lsls	r3, r3, #20
 80118a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80118ac:	d978      	bls.n	80119a0 <_strtod_l+0x8b8>
 80118ae:	696b      	ldr	r3, [r5, #20]
 80118b0:	b913      	cbnz	r3, 80118b8 <_strtod_l+0x7d0>
 80118b2:	692b      	ldr	r3, [r5, #16]
 80118b4:	2b01      	cmp	r3, #1
 80118b6:	dd73      	ble.n	80119a0 <_strtod_l+0x8b8>
 80118b8:	4629      	mov	r1, r5
 80118ba:	2201      	movs	r2, #1
 80118bc:	4620      	mov	r0, r4
 80118be:	f003 f8ad 	bl	8014a1c <__lshift>
 80118c2:	4659      	mov	r1, fp
 80118c4:	4605      	mov	r5, r0
 80118c6:	f003 f915 	bl	8014af4 <__mcmp>
 80118ca:	2800      	cmp	r0, #0
 80118cc:	dd68      	ble.n	80119a0 <_strtod_l+0x8b8>
 80118ce:	9904      	ldr	r1, [sp, #16]
 80118d0:	4a54      	ldr	r2, [pc, #336]	; (8011a24 <_strtod_l+0x93c>)
 80118d2:	464b      	mov	r3, r9
 80118d4:	2900      	cmp	r1, #0
 80118d6:	f000 8084 	beq.w	80119e2 <_strtod_l+0x8fa>
 80118da:	ea02 0109 	and.w	r1, r2, r9
 80118de:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80118e2:	dc7e      	bgt.n	80119e2 <_strtod_l+0x8fa>
 80118e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80118e8:	f77f aeb3 	ble.w	8011652 <_strtod_l+0x56a>
 80118ec:	4b4e      	ldr	r3, [pc, #312]	; (8011a28 <_strtod_l+0x940>)
 80118ee:	4640      	mov	r0, r8
 80118f0:	4649      	mov	r1, r9
 80118f2:	2200      	movs	r2, #0
 80118f4:	f7ee fe90 	bl	8000618 <__aeabi_dmul>
 80118f8:	4b4a      	ldr	r3, [pc, #296]	; (8011a24 <_strtod_l+0x93c>)
 80118fa:	400b      	ands	r3, r1
 80118fc:	4680      	mov	r8, r0
 80118fe:	4689      	mov	r9, r1
 8011900:	2b00      	cmp	r3, #0
 8011902:	f47f ae3f 	bne.w	8011584 <_strtod_l+0x49c>
 8011906:	2322      	movs	r3, #34	; 0x22
 8011908:	6023      	str	r3, [r4, #0]
 801190a:	e63b      	b.n	8011584 <_strtod_l+0x49c>
 801190c:	f04f 32ff 	mov.w	r2, #4294967295
 8011910:	fa02 f303 	lsl.w	r3, r2, r3
 8011914:	ea03 0808 	and.w	r8, r3, r8
 8011918:	e6e8      	b.n	80116ec <_strtod_l+0x604>
 801191a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801191e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011922:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011926:	36e2      	adds	r6, #226	; 0xe2
 8011928:	fa01 f306 	lsl.w	r3, r1, r6
 801192c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8011930:	e748      	b.n	80117c4 <_strtod_l+0x6dc>
 8011932:	2100      	movs	r1, #0
 8011934:	2301      	movs	r3, #1
 8011936:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801193a:	e743      	b.n	80117c4 <_strtod_l+0x6dc>
 801193c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801193e:	4632      	mov	r2, r6
 8011940:	4620      	mov	r0, r4
 8011942:	f003 f86b 	bl	8014a1c <__lshift>
 8011946:	9016      	str	r0, [sp, #88]	; 0x58
 8011948:	2800      	cmp	r0, #0
 801194a:	f47f af6b 	bne.w	8011824 <_strtod_l+0x73c>
 801194e:	e60f      	b.n	8011570 <_strtod_l+0x488>
 8011950:	46ca      	mov	sl, r9
 8011952:	d171      	bne.n	8011a38 <_strtod_l+0x950>
 8011954:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011956:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801195a:	b352      	cbz	r2, 80119b2 <_strtod_l+0x8ca>
 801195c:	4a33      	ldr	r2, [pc, #204]	; (8011a2c <_strtod_l+0x944>)
 801195e:	4293      	cmp	r3, r2
 8011960:	d12a      	bne.n	80119b8 <_strtod_l+0x8d0>
 8011962:	9b04      	ldr	r3, [sp, #16]
 8011964:	4641      	mov	r1, r8
 8011966:	b1fb      	cbz	r3, 80119a8 <_strtod_l+0x8c0>
 8011968:	4b2e      	ldr	r3, [pc, #184]	; (8011a24 <_strtod_l+0x93c>)
 801196a:	ea09 0303 	and.w	r3, r9, r3
 801196e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011972:	f04f 32ff 	mov.w	r2, #4294967295
 8011976:	d81a      	bhi.n	80119ae <_strtod_l+0x8c6>
 8011978:	0d1b      	lsrs	r3, r3, #20
 801197a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801197e:	fa02 f303 	lsl.w	r3, r2, r3
 8011982:	4299      	cmp	r1, r3
 8011984:	d118      	bne.n	80119b8 <_strtod_l+0x8d0>
 8011986:	4b2a      	ldr	r3, [pc, #168]	; (8011a30 <_strtod_l+0x948>)
 8011988:	459a      	cmp	sl, r3
 801198a:	d102      	bne.n	8011992 <_strtod_l+0x8aa>
 801198c:	3101      	adds	r1, #1
 801198e:	f43f adef 	beq.w	8011570 <_strtod_l+0x488>
 8011992:	4b24      	ldr	r3, [pc, #144]	; (8011a24 <_strtod_l+0x93c>)
 8011994:	ea0a 0303 	and.w	r3, sl, r3
 8011998:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801199c:	f04f 0800 	mov.w	r8, #0
 80119a0:	9b04      	ldr	r3, [sp, #16]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d1a2      	bne.n	80118ec <_strtod_l+0x804>
 80119a6:	e5ed      	b.n	8011584 <_strtod_l+0x49c>
 80119a8:	f04f 33ff 	mov.w	r3, #4294967295
 80119ac:	e7e9      	b.n	8011982 <_strtod_l+0x89a>
 80119ae:	4613      	mov	r3, r2
 80119b0:	e7e7      	b.n	8011982 <_strtod_l+0x89a>
 80119b2:	ea53 0308 	orrs.w	r3, r3, r8
 80119b6:	d08a      	beq.n	80118ce <_strtod_l+0x7e6>
 80119b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119ba:	b1e3      	cbz	r3, 80119f6 <_strtod_l+0x90e>
 80119bc:	ea13 0f0a 	tst.w	r3, sl
 80119c0:	d0ee      	beq.n	80119a0 <_strtod_l+0x8b8>
 80119c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119c4:	9a04      	ldr	r2, [sp, #16]
 80119c6:	4640      	mov	r0, r8
 80119c8:	4649      	mov	r1, r9
 80119ca:	b1c3      	cbz	r3, 80119fe <_strtod_l+0x916>
 80119cc:	f7ff fb6e 	bl	80110ac <sulp>
 80119d0:	4602      	mov	r2, r0
 80119d2:	460b      	mov	r3, r1
 80119d4:	ec51 0b18 	vmov	r0, r1, d8
 80119d8:	f7ee fc68 	bl	80002ac <__adddf3>
 80119dc:	4680      	mov	r8, r0
 80119de:	4689      	mov	r9, r1
 80119e0:	e7de      	b.n	80119a0 <_strtod_l+0x8b8>
 80119e2:	4013      	ands	r3, r2
 80119e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80119e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80119ec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80119f0:	f04f 38ff 	mov.w	r8, #4294967295
 80119f4:	e7d4      	b.n	80119a0 <_strtod_l+0x8b8>
 80119f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119f8:	ea13 0f08 	tst.w	r3, r8
 80119fc:	e7e0      	b.n	80119c0 <_strtod_l+0x8d8>
 80119fe:	f7ff fb55 	bl	80110ac <sulp>
 8011a02:	4602      	mov	r2, r0
 8011a04:	460b      	mov	r3, r1
 8011a06:	ec51 0b18 	vmov	r0, r1, d8
 8011a0a:	f7ee fc4d 	bl	80002a8 <__aeabi_dsub>
 8011a0e:	2200      	movs	r2, #0
 8011a10:	2300      	movs	r3, #0
 8011a12:	4680      	mov	r8, r0
 8011a14:	4689      	mov	r9, r1
 8011a16:	f7ef f867 	bl	8000ae8 <__aeabi_dcmpeq>
 8011a1a:	2800      	cmp	r0, #0
 8011a1c:	d0c0      	beq.n	80119a0 <_strtod_l+0x8b8>
 8011a1e:	e618      	b.n	8011652 <_strtod_l+0x56a>
 8011a20:	fffffc02 	.word	0xfffffc02
 8011a24:	7ff00000 	.word	0x7ff00000
 8011a28:	39500000 	.word	0x39500000
 8011a2c:	000fffff 	.word	0x000fffff
 8011a30:	7fefffff 	.word	0x7fefffff
 8011a34:	08018b40 	.word	0x08018b40
 8011a38:	4659      	mov	r1, fp
 8011a3a:	4628      	mov	r0, r5
 8011a3c:	f003 f9ca 	bl	8014dd4 <__ratio>
 8011a40:	ec57 6b10 	vmov	r6, r7, d0
 8011a44:	ee10 0a10 	vmov	r0, s0
 8011a48:	2200      	movs	r2, #0
 8011a4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011a4e:	4639      	mov	r1, r7
 8011a50:	f7ef f85e 	bl	8000b10 <__aeabi_dcmple>
 8011a54:	2800      	cmp	r0, #0
 8011a56:	d071      	beq.n	8011b3c <_strtod_l+0xa54>
 8011a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d17c      	bne.n	8011b58 <_strtod_l+0xa70>
 8011a5e:	f1b8 0f00 	cmp.w	r8, #0
 8011a62:	d15a      	bne.n	8011b1a <_strtod_l+0xa32>
 8011a64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d15d      	bne.n	8011b28 <_strtod_l+0xa40>
 8011a6c:	4b90      	ldr	r3, [pc, #576]	; (8011cb0 <_strtod_l+0xbc8>)
 8011a6e:	2200      	movs	r2, #0
 8011a70:	4630      	mov	r0, r6
 8011a72:	4639      	mov	r1, r7
 8011a74:	f7ef f842 	bl	8000afc <__aeabi_dcmplt>
 8011a78:	2800      	cmp	r0, #0
 8011a7a:	d15c      	bne.n	8011b36 <_strtod_l+0xa4e>
 8011a7c:	4630      	mov	r0, r6
 8011a7e:	4639      	mov	r1, r7
 8011a80:	4b8c      	ldr	r3, [pc, #560]	; (8011cb4 <_strtod_l+0xbcc>)
 8011a82:	2200      	movs	r2, #0
 8011a84:	f7ee fdc8 	bl	8000618 <__aeabi_dmul>
 8011a88:	4606      	mov	r6, r0
 8011a8a:	460f      	mov	r7, r1
 8011a8c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8011a90:	9606      	str	r6, [sp, #24]
 8011a92:	9307      	str	r3, [sp, #28]
 8011a94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011a98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8011a9c:	4b86      	ldr	r3, [pc, #536]	; (8011cb8 <_strtod_l+0xbd0>)
 8011a9e:	ea0a 0303 	and.w	r3, sl, r3
 8011aa2:	930d      	str	r3, [sp, #52]	; 0x34
 8011aa4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011aa6:	4b85      	ldr	r3, [pc, #532]	; (8011cbc <_strtod_l+0xbd4>)
 8011aa8:	429a      	cmp	r2, r3
 8011aaa:	f040 8090 	bne.w	8011bce <_strtod_l+0xae6>
 8011aae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8011ab2:	ec49 8b10 	vmov	d0, r8, r9
 8011ab6:	f003 f8c3 	bl	8014c40 <__ulp>
 8011aba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011abe:	ec51 0b10 	vmov	r0, r1, d0
 8011ac2:	f7ee fda9 	bl	8000618 <__aeabi_dmul>
 8011ac6:	4642      	mov	r2, r8
 8011ac8:	464b      	mov	r3, r9
 8011aca:	f7ee fbef 	bl	80002ac <__adddf3>
 8011ace:	460b      	mov	r3, r1
 8011ad0:	4979      	ldr	r1, [pc, #484]	; (8011cb8 <_strtod_l+0xbd0>)
 8011ad2:	4a7b      	ldr	r2, [pc, #492]	; (8011cc0 <_strtod_l+0xbd8>)
 8011ad4:	4019      	ands	r1, r3
 8011ad6:	4291      	cmp	r1, r2
 8011ad8:	4680      	mov	r8, r0
 8011ada:	d944      	bls.n	8011b66 <_strtod_l+0xa7e>
 8011adc:	ee18 2a90 	vmov	r2, s17
 8011ae0:	4b78      	ldr	r3, [pc, #480]	; (8011cc4 <_strtod_l+0xbdc>)
 8011ae2:	429a      	cmp	r2, r3
 8011ae4:	d104      	bne.n	8011af0 <_strtod_l+0xa08>
 8011ae6:	ee18 3a10 	vmov	r3, s16
 8011aea:	3301      	adds	r3, #1
 8011aec:	f43f ad40 	beq.w	8011570 <_strtod_l+0x488>
 8011af0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8011cc4 <_strtod_l+0xbdc>
 8011af4:	f04f 38ff 	mov.w	r8, #4294967295
 8011af8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011afa:	4620      	mov	r0, r4
 8011afc:	f002 fd74 	bl	80145e8 <_Bfree>
 8011b00:	9905      	ldr	r1, [sp, #20]
 8011b02:	4620      	mov	r0, r4
 8011b04:	f002 fd70 	bl	80145e8 <_Bfree>
 8011b08:	4659      	mov	r1, fp
 8011b0a:	4620      	mov	r0, r4
 8011b0c:	f002 fd6c 	bl	80145e8 <_Bfree>
 8011b10:	4629      	mov	r1, r5
 8011b12:	4620      	mov	r0, r4
 8011b14:	f002 fd68 	bl	80145e8 <_Bfree>
 8011b18:	e609      	b.n	801172e <_strtod_l+0x646>
 8011b1a:	f1b8 0f01 	cmp.w	r8, #1
 8011b1e:	d103      	bne.n	8011b28 <_strtod_l+0xa40>
 8011b20:	f1b9 0f00 	cmp.w	r9, #0
 8011b24:	f43f ad95 	beq.w	8011652 <_strtod_l+0x56a>
 8011b28:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8011c80 <_strtod_l+0xb98>
 8011b2c:	4f60      	ldr	r7, [pc, #384]	; (8011cb0 <_strtod_l+0xbc8>)
 8011b2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011b32:	2600      	movs	r6, #0
 8011b34:	e7ae      	b.n	8011a94 <_strtod_l+0x9ac>
 8011b36:	4f5f      	ldr	r7, [pc, #380]	; (8011cb4 <_strtod_l+0xbcc>)
 8011b38:	2600      	movs	r6, #0
 8011b3a:	e7a7      	b.n	8011a8c <_strtod_l+0x9a4>
 8011b3c:	4b5d      	ldr	r3, [pc, #372]	; (8011cb4 <_strtod_l+0xbcc>)
 8011b3e:	4630      	mov	r0, r6
 8011b40:	4639      	mov	r1, r7
 8011b42:	2200      	movs	r2, #0
 8011b44:	f7ee fd68 	bl	8000618 <__aeabi_dmul>
 8011b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b4a:	4606      	mov	r6, r0
 8011b4c:	460f      	mov	r7, r1
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d09c      	beq.n	8011a8c <_strtod_l+0x9a4>
 8011b52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011b56:	e79d      	b.n	8011a94 <_strtod_l+0x9ac>
 8011b58:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8011c88 <_strtod_l+0xba0>
 8011b5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011b60:	ec57 6b17 	vmov	r6, r7, d7
 8011b64:	e796      	b.n	8011a94 <_strtod_l+0x9ac>
 8011b66:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8011b6a:	9b04      	ldr	r3, [sp, #16]
 8011b6c:	46ca      	mov	sl, r9
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d1c2      	bne.n	8011af8 <_strtod_l+0xa10>
 8011b72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011b76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011b78:	0d1b      	lsrs	r3, r3, #20
 8011b7a:	051b      	lsls	r3, r3, #20
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d1bb      	bne.n	8011af8 <_strtod_l+0xa10>
 8011b80:	4630      	mov	r0, r6
 8011b82:	4639      	mov	r1, r7
 8011b84:	f7ef f8a8 	bl	8000cd8 <__aeabi_d2lz>
 8011b88:	f7ee fd18 	bl	80005bc <__aeabi_l2d>
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	460b      	mov	r3, r1
 8011b90:	4630      	mov	r0, r6
 8011b92:	4639      	mov	r1, r7
 8011b94:	f7ee fb88 	bl	80002a8 <__aeabi_dsub>
 8011b98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011b9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011b9e:	ea43 0308 	orr.w	r3, r3, r8
 8011ba2:	4313      	orrs	r3, r2
 8011ba4:	4606      	mov	r6, r0
 8011ba6:	460f      	mov	r7, r1
 8011ba8:	d054      	beq.n	8011c54 <_strtod_l+0xb6c>
 8011baa:	a339      	add	r3, pc, #228	; (adr r3, 8011c90 <_strtod_l+0xba8>)
 8011bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb0:	f7ee ffa4 	bl	8000afc <__aeabi_dcmplt>
 8011bb4:	2800      	cmp	r0, #0
 8011bb6:	f47f ace5 	bne.w	8011584 <_strtod_l+0x49c>
 8011bba:	a337      	add	r3, pc, #220	; (adr r3, 8011c98 <_strtod_l+0xbb0>)
 8011bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc0:	4630      	mov	r0, r6
 8011bc2:	4639      	mov	r1, r7
 8011bc4:	f7ee ffb8 	bl	8000b38 <__aeabi_dcmpgt>
 8011bc8:	2800      	cmp	r0, #0
 8011bca:	d095      	beq.n	8011af8 <_strtod_l+0xa10>
 8011bcc:	e4da      	b.n	8011584 <_strtod_l+0x49c>
 8011bce:	9b04      	ldr	r3, [sp, #16]
 8011bd0:	b333      	cbz	r3, 8011c20 <_strtod_l+0xb38>
 8011bd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bd4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011bd8:	d822      	bhi.n	8011c20 <_strtod_l+0xb38>
 8011bda:	a331      	add	r3, pc, #196	; (adr r3, 8011ca0 <_strtod_l+0xbb8>)
 8011bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be0:	4630      	mov	r0, r6
 8011be2:	4639      	mov	r1, r7
 8011be4:	f7ee ff94 	bl	8000b10 <__aeabi_dcmple>
 8011be8:	b1a0      	cbz	r0, 8011c14 <_strtod_l+0xb2c>
 8011bea:	4639      	mov	r1, r7
 8011bec:	4630      	mov	r0, r6
 8011bee:	f7ee ffeb 	bl	8000bc8 <__aeabi_d2uiz>
 8011bf2:	2801      	cmp	r0, #1
 8011bf4:	bf38      	it	cc
 8011bf6:	2001      	movcc	r0, #1
 8011bf8:	f7ee fc94 	bl	8000524 <__aeabi_ui2d>
 8011bfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011bfe:	4606      	mov	r6, r0
 8011c00:	460f      	mov	r7, r1
 8011c02:	bb23      	cbnz	r3, 8011c4e <_strtod_l+0xb66>
 8011c04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c08:	9010      	str	r0, [sp, #64]	; 0x40
 8011c0a:	9311      	str	r3, [sp, #68]	; 0x44
 8011c0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011c10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8011c14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011c16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011c18:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011c1c:	1a9b      	subs	r3, r3, r2
 8011c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c20:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011c24:	eeb0 0a48 	vmov.f32	s0, s16
 8011c28:	eef0 0a68 	vmov.f32	s1, s17
 8011c2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011c30:	f003 f806 	bl	8014c40 <__ulp>
 8011c34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011c38:	ec53 2b10 	vmov	r2, r3, d0
 8011c3c:	f7ee fcec 	bl	8000618 <__aeabi_dmul>
 8011c40:	ec53 2b18 	vmov	r2, r3, d8
 8011c44:	f7ee fb32 	bl	80002ac <__adddf3>
 8011c48:	4680      	mov	r8, r0
 8011c4a:	4689      	mov	r9, r1
 8011c4c:	e78d      	b.n	8011b6a <_strtod_l+0xa82>
 8011c4e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8011c52:	e7db      	b.n	8011c0c <_strtod_l+0xb24>
 8011c54:	a314      	add	r3, pc, #80	; (adr r3, 8011ca8 <_strtod_l+0xbc0>)
 8011c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c5a:	f7ee ff4f 	bl	8000afc <__aeabi_dcmplt>
 8011c5e:	e7b3      	b.n	8011bc8 <_strtod_l+0xae0>
 8011c60:	2300      	movs	r3, #0
 8011c62:	930a      	str	r3, [sp, #40]	; 0x28
 8011c64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011c66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c68:	6013      	str	r3, [r2, #0]
 8011c6a:	f7ff ba7c 	b.w	8011166 <_strtod_l+0x7e>
 8011c6e:	2a65      	cmp	r2, #101	; 0x65
 8011c70:	f43f ab75 	beq.w	801135e <_strtod_l+0x276>
 8011c74:	2a45      	cmp	r2, #69	; 0x45
 8011c76:	f43f ab72 	beq.w	801135e <_strtod_l+0x276>
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	f7ff bbaa 	b.w	80113d4 <_strtod_l+0x2ec>
 8011c80:	00000000 	.word	0x00000000
 8011c84:	bff00000 	.word	0xbff00000
 8011c88:	00000000 	.word	0x00000000
 8011c8c:	3ff00000 	.word	0x3ff00000
 8011c90:	94a03595 	.word	0x94a03595
 8011c94:	3fdfffff 	.word	0x3fdfffff
 8011c98:	35afe535 	.word	0x35afe535
 8011c9c:	3fe00000 	.word	0x3fe00000
 8011ca0:	ffc00000 	.word	0xffc00000
 8011ca4:	41dfffff 	.word	0x41dfffff
 8011ca8:	94a03595 	.word	0x94a03595
 8011cac:	3fcfffff 	.word	0x3fcfffff
 8011cb0:	3ff00000 	.word	0x3ff00000
 8011cb4:	3fe00000 	.word	0x3fe00000
 8011cb8:	7ff00000 	.word	0x7ff00000
 8011cbc:	7fe00000 	.word	0x7fe00000
 8011cc0:	7c9fffff 	.word	0x7c9fffff
 8011cc4:	7fefffff 	.word	0x7fefffff

08011cc8 <_strtod_r>:
 8011cc8:	4b01      	ldr	r3, [pc, #4]	; (8011cd0 <_strtod_r+0x8>)
 8011cca:	f7ff ba0d 	b.w	80110e8 <_strtod_l>
 8011cce:	bf00      	nop
 8011cd0:	20000138 	.word	0x20000138

08011cd4 <strtof>:
 8011cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cd8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8011d9c <strtof+0xc8>
 8011cdc:	4b2a      	ldr	r3, [pc, #168]	; (8011d88 <strtof+0xb4>)
 8011cde:	460a      	mov	r2, r1
 8011ce0:	ed2d 8b02 	vpush	{d8}
 8011ce4:	4601      	mov	r1, r0
 8011ce6:	f8d8 0000 	ldr.w	r0, [r8]
 8011cea:	f7ff f9fd 	bl	80110e8 <_strtod_l>
 8011cee:	ec55 4b10 	vmov	r4, r5, d0
 8011cf2:	ee10 2a10 	vmov	r2, s0
 8011cf6:	ee10 0a10 	vmov	r0, s0
 8011cfa:	462b      	mov	r3, r5
 8011cfc:	4629      	mov	r1, r5
 8011cfe:	f7ee ff25 	bl	8000b4c <__aeabi_dcmpun>
 8011d02:	b190      	cbz	r0, 8011d2a <strtof+0x56>
 8011d04:	2d00      	cmp	r5, #0
 8011d06:	4821      	ldr	r0, [pc, #132]	; (8011d8c <strtof+0xb8>)
 8011d08:	da09      	bge.n	8011d1e <strtof+0x4a>
 8011d0a:	f001 f9d9 	bl	80130c0 <nanf>
 8011d0e:	eeb1 8a40 	vneg.f32	s16, s0
 8011d12:	eeb0 0a48 	vmov.f32	s0, s16
 8011d16:	ecbd 8b02 	vpop	{d8}
 8011d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d1e:	ecbd 8b02 	vpop	{d8}
 8011d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d26:	f001 b9cb 	b.w	80130c0 <nanf>
 8011d2a:	4620      	mov	r0, r4
 8011d2c:	4629      	mov	r1, r5
 8011d2e:	f7ee ff6b 	bl	8000c08 <__aeabi_d2f>
 8011d32:	ee08 0a10 	vmov	s16, r0
 8011d36:	eddf 7a16 	vldr	s15, [pc, #88]	; 8011d90 <strtof+0xbc>
 8011d3a:	eeb0 7ac8 	vabs.f32	s14, s16
 8011d3e:	eeb4 7a67 	vcmp.f32	s14, s15
 8011d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d46:	dd11      	ble.n	8011d6c <strtof+0x98>
 8011d48:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8011d4c:	4b11      	ldr	r3, [pc, #68]	; (8011d94 <strtof+0xc0>)
 8011d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8011d52:	4620      	mov	r0, r4
 8011d54:	4639      	mov	r1, r7
 8011d56:	f7ee fef9 	bl	8000b4c <__aeabi_dcmpun>
 8011d5a:	b980      	cbnz	r0, 8011d7e <strtof+0xaa>
 8011d5c:	4b0d      	ldr	r3, [pc, #52]	; (8011d94 <strtof+0xc0>)
 8011d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8011d62:	4620      	mov	r0, r4
 8011d64:	4639      	mov	r1, r7
 8011d66:	f7ee fed3 	bl	8000b10 <__aeabi_dcmple>
 8011d6a:	b940      	cbnz	r0, 8011d7e <strtof+0xaa>
 8011d6c:	ee18 3a10 	vmov	r3, s16
 8011d70:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8011d74:	d1cd      	bne.n	8011d12 <strtof+0x3e>
 8011d76:	4b08      	ldr	r3, [pc, #32]	; (8011d98 <strtof+0xc4>)
 8011d78:	402b      	ands	r3, r5
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d0c9      	beq.n	8011d12 <strtof+0x3e>
 8011d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8011d82:	2222      	movs	r2, #34	; 0x22
 8011d84:	601a      	str	r2, [r3, #0]
 8011d86:	e7c4      	b.n	8011d12 <strtof+0x3e>
 8011d88:	20000138 	.word	0x20000138
 8011d8c:	08018d56 	.word	0x08018d56
 8011d90:	7f7fffff 	.word	0x7f7fffff
 8011d94:	7fefffff 	.word	0x7fefffff
 8011d98:	7ff00000 	.word	0x7ff00000
 8011d9c:	200002f0 	.word	0x200002f0

08011da0 <_strtol_l.constprop.0>:
 8011da0:	2b01      	cmp	r3, #1
 8011da2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011da6:	d001      	beq.n	8011dac <_strtol_l.constprop.0+0xc>
 8011da8:	2b24      	cmp	r3, #36	; 0x24
 8011daa:	d906      	bls.n	8011dba <_strtol_l.constprop.0+0x1a>
 8011dac:	f001 f93c 	bl	8013028 <__errno>
 8011db0:	2316      	movs	r3, #22
 8011db2:	6003      	str	r3, [r0, #0]
 8011db4:	2000      	movs	r0, #0
 8011db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011ea0 <_strtol_l.constprop.0+0x100>
 8011dbe:	460d      	mov	r5, r1
 8011dc0:	462e      	mov	r6, r5
 8011dc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011dc6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8011dca:	f017 0708 	ands.w	r7, r7, #8
 8011dce:	d1f7      	bne.n	8011dc0 <_strtol_l.constprop.0+0x20>
 8011dd0:	2c2d      	cmp	r4, #45	; 0x2d
 8011dd2:	d132      	bne.n	8011e3a <_strtol_l.constprop.0+0x9a>
 8011dd4:	782c      	ldrb	r4, [r5, #0]
 8011dd6:	2701      	movs	r7, #1
 8011dd8:	1cb5      	adds	r5, r6, #2
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d05b      	beq.n	8011e96 <_strtol_l.constprop.0+0xf6>
 8011dde:	2b10      	cmp	r3, #16
 8011de0:	d109      	bne.n	8011df6 <_strtol_l.constprop.0+0x56>
 8011de2:	2c30      	cmp	r4, #48	; 0x30
 8011de4:	d107      	bne.n	8011df6 <_strtol_l.constprop.0+0x56>
 8011de6:	782c      	ldrb	r4, [r5, #0]
 8011de8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011dec:	2c58      	cmp	r4, #88	; 0x58
 8011dee:	d14d      	bne.n	8011e8c <_strtol_l.constprop.0+0xec>
 8011df0:	786c      	ldrb	r4, [r5, #1]
 8011df2:	2310      	movs	r3, #16
 8011df4:	3502      	adds	r5, #2
 8011df6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011dfa:	f108 38ff 	add.w	r8, r8, #4294967295
 8011dfe:	f04f 0e00 	mov.w	lr, #0
 8011e02:	fbb8 f9f3 	udiv	r9, r8, r3
 8011e06:	4676      	mov	r6, lr
 8011e08:	fb03 8a19 	mls	sl, r3, r9, r8
 8011e0c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011e10:	f1bc 0f09 	cmp.w	ip, #9
 8011e14:	d816      	bhi.n	8011e44 <_strtol_l.constprop.0+0xa4>
 8011e16:	4664      	mov	r4, ip
 8011e18:	42a3      	cmp	r3, r4
 8011e1a:	dd24      	ble.n	8011e66 <_strtol_l.constprop.0+0xc6>
 8011e1c:	f1be 3fff 	cmp.w	lr, #4294967295
 8011e20:	d008      	beq.n	8011e34 <_strtol_l.constprop.0+0x94>
 8011e22:	45b1      	cmp	r9, r6
 8011e24:	d31c      	bcc.n	8011e60 <_strtol_l.constprop.0+0xc0>
 8011e26:	d101      	bne.n	8011e2c <_strtol_l.constprop.0+0x8c>
 8011e28:	45a2      	cmp	sl, r4
 8011e2a:	db19      	blt.n	8011e60 <_strtol_l.constprop.0+0xc0>
 8011e2c:	fb06 4603 	mla	r6, r6, r3, r4
 8011e30:	f04f 0e01 	mov.w	lr, #1
 8011e34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e38:	e7e8      	b.n	8011e0c <_strtol_l.constprop.0+0x6c>
 8011e3a:	2c2b      	cmp	r4, #43	; 0x2b
 8011e3c:	bf04      	itt	eq
 8011e3e:	782c      	ldrbeq	r4, [r5, #0]
 8011e40:	1cb5      	addeq	r5, r6, #2
 8011e42:	e7ca      	b.n	8011dda <_strtol_l.constprop.0+0x3a>
 8011e44:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011e48:	f1bc 0f19 	cmp.w	ip, #25
 8011e4c:	d801      	bhi.n	8011e52 <_strtol_l.constprop.0+0xb2>
 8011e4e:	3c37      	subs	r4, #55	; 0x37
 8011e50:	e7e2      	b.n	8011e18 <_strtol_l.constprop.0+0x78>
 8011e52:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011e56:	f1bc 0f19 	cmp.w	ip, #25
 8011e5a:	d804      	bhi.n	8011e66 <_strtol_l.constprop.0+0xc6>
 8011e5c:	3c57      	subs	r4, #87	; 0x57
 8011e5e:	e7db      	b.n	8011e18 <_strtol_l.constprop.0+0x78>
 8011e60:	f04f 3eff 	mov.w	lr, #4294967295
 8011e64:	e7e6      	b.n	8011e34 <_strtol_l.constprop.0+0x94>
 8011e66:	f1be 3fff 	cmp.w	lr, #4294967295
 8011e6a:	d105      	bne.n	8011e78 <_strtol_l.constprop.0+0xd8>
 8011e6c:	2322      	movs	r3, #34	; 0x22
 8011e6e:	6003      	str	r3, [r0, #0]
 8011e70:	4646      	mov	r6, r8
 8011e72:	b942      	cbnz	r2, 8011e86 <_strtol_l.constprop.0+0xe6>
 8011e74:	4630      	mov	r0, r6
 8011e76:	e79e      	b.n	8011db6 <_strtol_l.constprop.0+0x16>
 8011e78:	b107      	cbz	r7, 8011e7c <_strtol_l.constprop.0+0xdc>
 8011e7a:	4276      	negs	r6, r6
 8011e7c:	2a00      	cmp	r2, #0
 8011e7e:	d0f9      	beq.n	8011e74 <_strtol_l.constprop.0+0xd4>
 8011e80:	f1be 0f00 	cmp.w	lr, #0
 8011e84:	d000      	beq.n	8011e88 <_strtol_l.constprop.0+0xe8>
 8011e86:	1e69      	subs	r1, r5, #1
 8011e88:	6011      	str	r1, [r2, #0]
 8011e8a:	e7f3      	b.n	8011e74 <_strtol_l.constprop.0+0xd4>
 8011e8c:	2430      	movs	r4, #48	; 0x30
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d1b1      	bne.n	8011df6 <_strtol_l.constprop.0+0x56>
 8011e92:	2308      	movs	r3, #8
 8011e94:	e7af      	b.n	8011df6 <_strtol_l.constprop.0+0x56>
 8011e96:	2c30      	cmp	r4, #48	; 0x30
 8011e98:	d0a5      	beq.n	8011de6 <_strtol_l.constprop.0+0x46>
 8011e9a:	230a      	movs	r3, #10
 8011e9c:	e7ab      	b.n	8011df6 <_strtol_l.constprop.0+0x56>
 8011e9e:	bf00      	nop
 8011ea0:	08018b69 	.word	0x08018b69

08011ea4 <_strtol_r>:
 8011ea4:	f7ff bf7c 	b.w	8011da0 <_strtol_l.constprop.0>

08011ea8 <strtol>:
 8011ea8:	4613      	mov	r3, r2
 8011eaa:	460a      	mov	r2, r1
 8011eac:	4601      	mov	r1, r0
 8011eae:	4802      	ldr	r0, [pc, #8]	; (8011eb8 <strtol+0x10>)
 8011eb0:	6800      	ldr	r0, [r0, #0]
 8011eb2:	f7ff bf75 	b.w	8011da0 <_strtol_l.constprop.0>
 8011eb6:	bf00      	nop
 8011eb8:	200002f0 	.word	0x200002f0

08011ebc <__cvt>:
 8011ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ec0:	ec55 4b10 	vmov	r4, r5, d0
 8011ec4:	2d00      	cmp	r5, #0
 8011ec6:	460e      	mov	r6, r1
 8011ec8:	4619      	mov	r1, r3
 8011eca:	462b      	mov	r3, r5
 8011ecc:	bfbb      	ittet	lt
 8011ece:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011ed2:	461d      	movlt	r5, r3
 8011ed4:	2300      	movge	r3, #0
 8011ed6:	232d      	movlt	r3, #45	; 0x2d
 8011ed8:	700b      	strb	r3, [r1, #0]
 8011eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011edc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011ee0:	4691      	mov	r9, r2
 8011ee2:	f023 0820 	bic.w	r8, r3, #32
 8011ee6:	bfbc      	itt	lt
 8011ee8:	4622      	movlt	r2, r4
 8011eea:	4614      	movlt	r4, r2
 8011eec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011ef0:	d005      	beq.n	8011efe <__cvt+0x42>
 8011ef2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011ef6:	d100      	bne.n	8011efa <__cvt+0x3e>
 8011ef8:	3601      	adds	r6, #1
 8011efa:	2102      	movs	r1, #2
 8011efc:	e000      	b.n	8011f00 <__cvt+0x44>
 8011efe:	2103      	movs	r1, #3
 8011f00:	ab03      	add	r3, sp, #12
 8011f02:	9301      	str	r3, [sp, #4]
 8011f04:	ab02      	add	r3, sp, #8
 8011f06:	9300      	str	r3, [sp, #0]
 8011f08:	ec45 4b10 	vmov	d0, r4, r5
 8011f0c:	4653      	mov	r3, sl
 8011f0e:	4632      	mov	r2, r6
 8011f10:	f001 f982 	bl	8013218 <_dtoa_r>
 8011f14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011f18:	4607      	mov	r7, r0
 8011f1a:	d102      	bne.n	8011f22 <__cvt+0x66>
 8011f1c:	f019 0f01 	tst.w	r9, #1
 8011f20:	d022      	beq.n	8011f68 <__cvt+0xac>
 8011f22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011f26:	eb07 0906 	add.w	r9, r7, r6
 8011f2a:	d110      	bne.n	8011f4e <__cvt+0x92>
 8011f2c:	783b      	ldrb	r3, [r7, #0]
 8011f2e:	2b30      	cmp	r3, #48	; 0x30
 8011f30:	d10a      	bne.n	8011f48 <__cvt+0x8c>
 8011f32:	2200      	movs	r2, #0
 8011f34:	2300      	movs	r3, #0
 8011f36:	4620      	mov	r0, r4
 8011f38:	4629      	mov	r1, r5
 8011f3a:	f7ee fdd5 	bl	8000ae8 <__aeabi_dcmpeq>
 8011f3e:	b918      	cbnz	r0, 8011f48 <__cvt+0x8c>
 8011f40:	f1c6 0601 	rsb	r6, r6, #1
 8011f44:	f8ca 6000 	str.w	r6, [sl]
 8011f48:	f8da 3000 	ldr.w	r3, [sl]
 8011f4c:	4499      	add	r9, r3
 8011f4e:	2200      	movs	r2, #0
 8011f50:	2300      	movs	r3, #0
 8011f52:	4620      	mov	r0, r4
 8011f54:	4629      	mov	r1, r5
 8011f56:	f7ee fdc7 	bl	8000ae8 <__aeabi_dcmpeq>
 8011f5a:	b108      	cbz	r0, 8011f60 <__cvt+0xa4>
 8011f5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8011f60:	2230      	movs	r2, #48	; 0x30
 8011f62:	9b03      	ldr	r3, [sp, #12]
 8011f64:	454b      	cmp	r3, r9
 8011f66:	d307      	bcc.n	8011f78 <__cvt+0xbc>
 8011f68:	9b03      	ldr	r3, [sp, #12]
 8011f6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011f6c:	1bdb      	subs	r3, r3, r7
 8011f6e:	4638      	mov	r0, r7
 8011f70:	6013      	str	r3, [r2, #0]
 8011f72:	b004      	add	sp, #16
 8011f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f78:	1c59      	adds	r1, r3, #1
 8011f7a:	9103      	str	r1, [sp, #12]
 8011f7c:	701a      	strb	r2, [r3, #0]
 8011f7e:	e7f0      	b.n	8011f62 <__cvt+0xa6>

08011f80 <__exponent>:
 8011f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f82:	4603      	mov	r3, r0
 8011f84:	2900      	cmp	r1, #0
 8011f86:	bfb8      	it	lt
 8011f88:	4249      	neglt	r1, r1
 8011f8a:	f803 2b02 	strb.w	r2, [r3], #2
 8011f8e:	bfb4      	ite	lt
 8011f90:	222d      	movlt	r2, #45	; 0x2d
 8011f92:	222b      	movge	r2, #43	; 0x2b
 8011f94:	2909      	cmp	r1, #9
 8011f96:	7042      	strb	r2, [r0, #1]
 8011f98:	dd2a      	ble.n	8011ff0 <__exponent+0x70>
 8011f9a:	f10d 0207 	add.w	r2, sp, #7
 8011f9e:	4617      	mov	r7, r2
 8011fa0:	260a      	movs	r6, #10
 8011fa2:	4694      	mov	ip, r2
 8011fa4:	fb91 f5f6 	sdiv	r5, r1, r6
 8011fa8:	fb06 1415 	mls	r4, r6, r5, r1
 8011fac:	3430      	adds	r4, #48	; 0x30
 8011fae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011fb2:	460c      	mov	r4, r1
 8011fb4:	2c63      	cmp	r4, #99	; 0x63
 8011fb6:	f102 32ff 	add.w	r2, r2, #4294967295
 8011fba:	4629      	mov	r1, r5
 8011fbc:	dcf1      	bgt.n	8011fa2 <__exponent+0x22>
 8011fbe:	3130      	adds	r1, #48	; 0x30
 8011fc0:	f1ac 0402 	sub.w	r4, ip, #2
 8011fc4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011fc8:	1c41      	adds	r1, r0, #1
 8011fca:	4622      	mov	r2, r4
 8011fcc:	42ba      	cmp	r2, r7
 8011fce:	d30a      	bcc.n	8011fe6 <__exponent+0x66>
 8011fd0:	f10d 0209 	add.w	r2, sp, #9
 8011fd4:	eba2 020c 	sub.w	r2, r2, ip
 8011fd8:	42bc      	cmp	r4, r7
 8011fda:	bf88      	it	hi
 8011fdc:	2200      	movhi	r2, #0
 8011fde:	4413      	add	r3, r2
 8011fe0:	1a18      	subs	r0, r3, r0
 8011fe2:	b003      	add	sp, #12
 8011fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fe6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011fea:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011fee:	e7ed      	b.n	8011fcc <__exponent+0x4c>
 8011ff0:	2330      	movs	r3, #48	; 0x30
 8011ff2:	3130      	adds	r1, #48	; 0x30
 8011ff4:	7083      	strb	r3, [r0, #2]
 8011ff6:	70c1      	strb	r1, [r0, #3]
 8011ff8:	1d03      	adds	r3, r0, #4
 8011ffa:	e7f1      	b.n	8011fe0 <__exponent+0x60>

08011ffc <_printf_float>:
 8011ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012000:	ed2d 8b02 	vpush	{d8}
 8012004:	b08d      	sub	sp, #52	; 0x34
 8012006:	460c      	mov	r4, r1
 8012008:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801200c:	4616      	mov	r6, r2
 801200e:	461f      	mov	r7, r3
 8012010:	4605      	mov	r5, r0
 8012012:	f000 ffaf 	bl	8012f74 <_localeconv_r>
 8012016:	f8d0 a000 	ldr.w	sl, [r0]
 801201a:	4650      	mov	r0, sl
 801201c:	f7ee f938 	bl	8000290 <strlen>
 8012020:	2300      	movs	r3, #0
 8012022:	930a      	str	r3, [sp, #40]	; 0x28
 8012024:	6823      	ldr	r3, [r4, #0]
 8012026:	9305      	str	r3, [sp, #20]
 8012028:	f8d8 3000 	ldr.w	r3, [r8]
 801202c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012030:	3307      	adds	r3, #7
 8012032:	f023 0307 	bic.w	r3, r3, #7
 8012036:	f103 0208 	add.w	r2, r3, #8
 801203a:	f8c8 2000 	str.w	r2, [r8]
 801203e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012042:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012046:	9307      	str	r3, [sp, #28]
 8012048:	f8cd 8018 	str.w	r8, [sp, #24]
 801204c:	ee08 0a10 	vmov	s16, r0
 8012050:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8012054:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012058:	4b9e      	ldr	r3, [pc, #632]	; (80122d4 <_printf_float+0x2d8>)
 801205a:	f04f 32ff 	mov.w	r2, #4294967295
 801205e:	f7ee fd75 	bl	8000b4c <__aeabi_dcmpun>
 8012062:	bb88      	cbnz	r0, 80120c8 <_printf_float+0xcc>
 8012064:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012068:	4b9a      	ldr	r3, [pc, #616]	; (80122d4 <_printf_float+0x2d8>)
 801206a:	f04f 32ff 	mov.w	r2, #4294967295
 801206e:	f7ee fd4f 	bl	8000b10 <__aeabi_dcmple>
 8012072:	bb48      	cbnz	r0, 80120c8 <_printf_float+0xcc>
 8012074:	2200      	movs	r2, #0
 8012076:	2300      	movs	r3, #0
 8012078:	4640      	mov	r0, r8
 801207a:	4649      	mov	r1, r9
 801207c:	f7ee fd3e 	bl	8000afc <__aeabi_dcmplt>
 8012080:	b110      	cbz	r0, 8012088 <_printf_float+0x8c>
 8012082:	232d      	movs	r3, #45	; 0x2d
 8012084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012088:	4a93      	ldr	r2, [pc, #588]	; (80122d8 <_printf_float+0x2dc>)
 801208a:	4b94      	ldr	r3, [pc, #592]	; (80122dc <_printf_float+0x2e0>)
 801208c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012090:	bf94      	ite	ls
 8012092:	4690      	movls	r8, r2
 8012094:	4698      	movhi	r8, r3
 8012096:	2303      	movs	r3, #3
 8012098:	6123      	str	r3, [r4, #16]
 801209a:	9b05      	ldr	r3, [sp, #20]
 801209c:	f023 0304 	bic.w	r3, r3, #4
 80120a0:	6023      	str	r3, [r4, #0]
 80120a2:	f04f 0900 	mov.w	r9, #0
 80120a6:	9700      	str	r7, [sp, #0]
 80120a8:	4633      	mov	r3, r6
 80120aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80120ac:	4621      	mov	r1, r4
 80120ae:	4628      	mov	r0, r5
 80120b0:	f000 f9da 	bl	8012468 <_printf_common>
 80120b4:	3001      	adds	r0, #1
 80120b6:	f040 8090 	bne.w	80121da <_printf_float+0x1de>
 80120ba:	f04f 30ff 	mov.w	r0, #4294967295
 80120be:	b00d      	add	sp, #52	; 0x34
 80120c0:	ecbd 8b02 	vpop	{d8}
 80120c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120c8:	4642      	mov	r2, r8
 80120ca:	464b      	mov	r3, r9
 80120cc:	4640      	mov	r0, r8
 80120ce:	4649      	mov	r1, r9
 80120d0:	f7ee fd3c 	bl	8000b4c <__aeabi_dcmpun>
 80120d4:	b140      	cbz	r0, 80120e8 <_printf_float+0xec>
 80120d6:	464b      	mov	r3, r9
 80120d8:	2b00      	cmp	r3, #0
 80120da:	bfbc      	itt	lt
 80120dc:	232d      	movlt	r3, #45	; 0x2d
 80120de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80120e2:	4a7f      	ldr	r2, [pc, #508]	; (80122e0 <_printf_float+0x2e4>)
 80120e4:	4b7f      	ldr	r3, [pc, #508]	; (80122e4 <_printf_float+0x2e8>)
 80120e6:	e7d1      	b.n	801208c <_printf_float+0x90>
 80120e8:	6863      	ldr	r3, [r4, #4]
 80120ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80120ee:	9206      	str	r2, [sp, #24]
 80120f0:	1c5a      	adds	r2, r3, #1
 80120f2:	d13f      	bne.n	8012174 <_printf_float+0x178>
 80120f4:	2306      	movs	r3, #6
 80120f6:	6063      	str	r3, [r4, #4]
 80120f8:	9b05      	ldr	r3, [sp, #20]
 80120fa:	6861      	ldr	r1, [r4, #4]
 80120fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012100:	2300      	movs	r3, #0
 8012102:	9303      	str	r3, [sp, #12]
 8012104:	ab0a      	add	r3, sp, #40	; 0x28
 8012106:	e9cd b301 	strd	fp, r3, [sp, #4]
 801210a:	ab09      	add	r3, sp, #36	; 0x24
 801210c:	ec49 8b10 	vmov	d0, r8, r9
 8012110:	9300      	str	r3, [sp, #0]
 8012112:	6022      	str	r2, [r4, #0]
 8012114:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012118:	4628      	mov	r0, r5
 801211a:	f7ff fecf 	bl	8011ebc <__cvt>
 801211e:	9b06      	ldr	r3, [sp, #24]
 8012120:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012122:	2b47      	cmp	r3, #71	; 0x47
 8012124:	4680      	mov	r8, r0
 8012126:	d108      	bne.n	801213a <_printf_float+0x13e>
 8012128:	1cc8      	adds	r0, r1, #3
 801212a:	db02      	blt.n	8012132 <_printf_float+0x136>
 801212c:	6863      	ldr	r3, [r4, #4]
 801212e:	4299      	cmp	r1, r3
 8012130:	dd41      	ble.n	80121b6 <_printf_float+0x1ba>
 8012132:	f1ab 0302 	sub.w	r3, fp, #2
 8012136:	fa5f fb83 	uxtb.w	fp, r3
 801213a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801213e:	d820      	bhi.n	8012182 <_printf_float+0x186>
 8012140:	3901      	subs	r1, #1
 8012142:	465a      	mov	r2, fp
 8012144:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012148:	9109      	str	r1, [sp, #36]	; 0x24
 801214a:	f7ff ff19 	bl	8011f80 <__exponent>
 801214e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012150:	1813      	adds	r3, r2, r0
 8012152:	2a01      	cmp	r2, #1
 8012154:	4681      	mov	r9, r0
 8012156:	6123      	str	r3, [r4, #16]
 8012158:	dc02      	bgt.n	8012160 <_printf_float+0x164>
 801215a:	6822      	ldr	r2, [r4, #0]
 801215c:	07d2      	lsls	r2, r2, #31
 801215e:	d501      	bpl.n	8012164 <_printf_float+0x168>
 8012160:	3301      	adds	r3, #1
 8012162:	6123      	str	r3, [r4, #16]
 8012164:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012168:	2b00      	cmp	r3, #0
 801216a:	d09c      	beq.n	80120a6 <_printf_float+0xaa>
 801216c:	232d      	movs	r3, #45	; 0x2d
 801216e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012172:	e798      	b.n	80120a6 <_printf_float+0xaa>
 8012174:	9a06      	ldr	r2, [sp, #24]
 8012176:	2a47      	cmp	r2, #71	; 0x47
 8012178:	d1be      	bne.n	80120f8 <_printf_float+0xfc>
 801217a:	2b00      	cmp	r3, #0
 801217c:	d1bc      	bne.n	80120f8 <_printf_float+0xfc>
 801217e:	2301      	movs	r3, #1
 8012180:	e7b9      	b.n	80120f6 <_printf_float+0xfa>
 8012182:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012186:	d118      	bne.n	80121ba <_printf_float+0x1be>
 8012188:	2900      	cmp	r1, #0
 801218a:	6863      	ldr	r3, [r4, #4]
 801218c:	dd0b      	ble.n	80121a6 <_printf_float+0x1aa>
 801218e:	6121      	str	r1, [r4, #16]
 8012190:	b913      	cbnz	r3, 8012198 <_printf_float+0x19c>
 8012192:	6822      	ldr	r2, [r4, #0]
 8012194:	07d0      	lsls	r0, r2, #31
 8012196:	d502      	bpl.n	801219e <_printf_float+0x1a2>
 8012198:	3301      	adds	r3, #1
 801219a:	440b      	add	r3, r1
 801219c:	6123      	str	r3, [r4, #16]
 801219e:	65a1      	str	r1, [r4, #88]	; 0x58
 80121a0:	f04f 0900 	mov.w	r9, #0
 80121a4:	e7de      	b.n	8012164 <_printf_float+0x168>
 80121a6:	b913      	cbnz	r3, 80121ae <_printf_float+0x1b2>
 80121a8:	6822      	ldr	r2, [r4, #0]
 80121aa:	07d2      	lsls	r2, r2, #31
 80121ac:	d501      	bpl.n	80121b2 <_printf_float+0x1b6>
 80121ae:	3302      	adds	r3, #2
 80121b0:	e7f4      	b.n	801219c <_printf_float+0x1a0>
 80121b2:	2301      	movs	r3, #1
 80121b4:	e7f2      	b.n	801219c <_printf_float+0x1a0>
 80121b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80121ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121bc:	4299      	cmp	r1, r3
 80121be:	db05      	blt.n	80121cc <_printf_float+0x1d0>
 80121c0:	6823      	ldr	r3, [r4, #0]
 80121c2:	6121      	str	r1, [r4, #16]
 80121c4:	07d8      	lsls	r0, r3, #31
 80121c6:	d5ea      	bpl.n	801219e <_printf_float+0x1a2>
 80121c8:	1c4b      	adds	r3, r1, #1
 80121ca:	e7e7      	b.n	801219c <_printf_float+0x1a0>
 80121cc:	2900      	cmp	r1, #0
 80121ce:	bfd4      	ite	le
 80121d0:	f1c1 0202 	rsble	r2, r1, #2
 80121d4:	2201      	movgt	r2, #1
 80121d6:	4413      	add	r3, r2
 80121d8:	e7e0      	b.n	801219c <_printf_float+0x1a0>
 80121da:	6823      	ldr	r3, [r4, #0]
 80121dc:	055a      	lsls	r2, r3, #21
 80121de:	d407      	bmi.n	80121f0 <_printf_float+0x1f4>
 80121e0:	6923      	ldr	r3, [r4, #16]
 80121e2:	4642      	mov	r2, r8
 80121e4:	4631      	mov	r1, r6
 80121e6:	4628      	mov	r0, r5
 80121e8:	47b8      	blx	r7
 80121ea:	3001      	adds	r0, #1
 80121ec:	d12c      	bne.n	8012248 <_printf_float+0x24c>
 80121ee:	e764      	b.n	80120ba <_printf_float+0xbe>
 80121f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80121f4:	f240 80e0 	bls.w	80123b8 <_printf_float+0x3bc>
 80121f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80121fc:	2200      	movs	r2, #0
 80121fe:	2300      	movs	r3, #0
 8012200:	f7ee fc72 	bl	8000ae8 <__aeabi_dcmpeq>
 8012204:	2800      	cmp	r0, #0
 8012206:	d034      	beq.n	8012272 <_printf_float+0x276>
 8012208:	4a37      	ldr	r2, [pc, #220]	; (80122e8 <_printf_float+0x2ec>)
 801220a:	2301      	movs	r3, #1
 801220c:	4631      	mov	r1, r6
 801220e:	4628      	mov	r0, r5
 8012210:	47b8      	blx	r7
 8012212:	3001      	adds	r0, #1
 8012214:	f43f af51 	beq.w	80120ba <_printf_float+0xbe>
 8012218:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801221c:	429a      	cmp	r2, r3
 801221e:	db02      	blt.n	8012226 <_printf_float+0x22a>
 8012220:	6823      	ldr	r3, [r4, #0]
 8012222:	07d8      	lsls	r0, r3, #31
 8012224:	d510      	bpl.n	8012248 <_printf_float+0x24c>
 8012226:	ee18 3a10 	vmov	r3, s16
 801222a:	4652      	mov	r2, sl
 801222c:	4631      	mov	r1, r6
 801222e:	4628      	mov	r0, r5
 8012230:	47b8      	blx	r7
 8012232:	3001      	adds	r0, #1
 8012234:	f43f af41 	beq.w	80120ba <_printf_float+0xbe>
 8012238:	f04f 0800 	mov.w	r8, #0
 801223c:	f104 091a 	add.w	r9, r4, #26
 8012240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012242:	3b01      	subs	r3, #1
 8012244:	4543      	cmp	r3, r8
 8012246:	dc09      	bgt.n	801225c <_printf_float+0x260>
 8012248:	6823      	ldr	r3, [r4, #0]
 801224a:	079b      	lsls	r3, r3, #30
 801224c:	f100 8107 	bmi.w	801245e <_printf_float+0x462>
 8012250:	68e0      	ldr	r0, [r4, #12]
 8012252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012254:	4298      	cmp	r0, r3
 8012256:	bfb8      	it	lt
 8012258:	4618      	movlt	r0, r3
 801225a:	e730      	b.n	80120be <_printf_float+0xc2>
 801225c:	2301      	movs	r3, #1
 801225e:	464a      	mov	r2, r9
 8012260:	4631      	mov	r1, r6
 8012262:	4628      	mov	r0, r5
 8012264:	47b8      	blx	r7
 8012266:	3001      	adds	r0, #1
 8012268:	f43f af27 	beq.w	80120ba <_printf_float+0xbe>
 801226c:	f108 0801 	add.w	r8, r8, #1
 8012270:	e7e6      	b.n	8012240 <_printf_float+0x244>
 8012272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012274:	2b00      	cmp	r3, #0
 8012276:	dc39      	bgt.n	80122ec <_printf_float+0x2f0>
 8012278:	4a1b      	ldr	r2, [pc, #108]	; (80122e8 <_printf_float+0x2ec>)
 801227a:	2301      	movs	r3, #1
 801227c:	4631      	mov	r1, r6
 801227e:	4628      	mov	r0, r5
 8012280:	47b8      	blx	r7
 8012282:	3001      	adds	r0, #1
 8012284:	f43f af19 	beq.w	80120ba <_printf_float+0xbe>
 8012288:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801228c:	4313      	orrs	r3, r2
 801228e:	d102      	bne.n	8012296 <_printf_float+0x29a>
 8012290:	6823      	ldr	r3, [r4, #0]
 8012292:	07d9      	lsls	r1, r3, #31
 8012294:	d5d8      	bpl.n	8012248 <_printf_float+0x24c>
 8012296:	ee18 3a10 	vmov	r3, s16
 801229a:	4652      	mov	r2, sl
 801229c:	4631      	mov	r1, r6
 801229e:	4628      	mov	r0, r5
 80122a0:	47b8      	blx	r7
 80122a2:	3001      	adds	r0, #1
 80122a4:	f43f af09 	beq.w	80120ba <_printf_float+0xbe>
 80122a8:	f04f 0900 	mov.w	r9, #0
 80122ac:	f104 0a1a 	add.w	sl, r4, #26
 80122b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122b2:	425b      	negs	r3, r3
 80122b4:	454b      	cmp	r3, r9
 80122b6:	dc01      	bgt.n	80122bc <_printf_float+0x2c0>
 80122b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122ba:	e792      	b.n	80121e2 <_printf_float+0x1e6>
 80122bc:	2301      	movs	r3, #1
 80122be:	4652      	mov	r2, sl
 80122c0:	4631      	mov	r1, r6
 80122c2:	4628      	mov	r0, r5
 80122c4:	47b8      	blx	r7
 80122c6:	3001      	adds	r0, #1
 80122c8:	f43f aef7 	beq.w	80120ba <_printf_float+0xbe>
 80122cc:	f109 0901 	add.w	r9, r9, #1
 80122d0:	e7ee      	b.n	80122b0 <_printf_float+0x2b4>
 80122d2:	bf00      	nop
 80122d4:	7fefffff 	.word	0x7fefffff
 80122d8:	08018c69 	.word	0x08018c69
 80122dc:	08018c6d 	.word	0x08018c6d
 80122e0:	08018c71 	.word	0x08018c71
 80122e4:	08018c75 	.word	0x08018c75
 80122e8:	08018c79 	.word	0x08018c79
 80122ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80122f0:	429a      	cmp	r2, r3
 80122f2:	bfa8      	it	ge
 80122f4:	461a      	movge	r2, r3
 80122f6:	2a00      	cmp	r2, #0
 80122f8:	4691      	mov	r9, r2
 80122fa:	dc37      	bgt.n	801236c <_printf_float+0x370>
 80122fc:	f04f 0b00 	mov.w	fp, #0
 8012300:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012304:	f104 021a 	add.w	r2, r4, #26
 8012308:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801230a:	9305      	str	r3, [sp, #20]
 801230c:	eba3 0309 	sub.w	r3, r3, r9
 8012310:	455b      	cmp	r3, fp
 8012312:	dc33      	bgt.n	801237c <_printf_float+0x380>
 8012314:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012318:	429a      	cmp	r2, r3
 801231a:	db3b      	blt.n	8012394 <_printf_float+0x398>
 801231c:	6823      	ldr	r3, [r4, #0]
 801231e:	07da      	lsls	r2, r3, #31
 8012320:	d438      	bmi.n	8012394 <_printf_float+0x398>
 8012322:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012326:	eba2 0903 	sub.w	r9, r2, r3
 801232a:	9b05      	ldr	r3, [sp, #20]
 801232c:	1ad2      	subs	r2, r2, r3
 801232e:	4591      	cmp	r9, r2
 8012330:	bfa8      	it	ge
 8012332:	4691      	movge	r9, r2
 8012334:	f1b9 0f00 	cmp.w	r9, #0
 8012338:	dc35      	bgt.n	80123a6 <_printf_float+0x3aa>
 801233a:	f04f 0800 	mov.w	r8, #0
 801233e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012342:	f104 0a1a 	add.w	sl, r4, #26
 8012346:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801234a:	1a9b      	subs	r3, r3, r2
 801234c:	eba3 0309 	sub.w	r3, r3, r9
 8012350:	4543      	cmp	r3, r8
 8012352:	f77f af79 	ble.w	8012248 <_printf_float+0x24c>
 8012356:	2301      	movs	r3, #1
 8012358:	4652      	mov	r2, sl
 801235a:	4631      	mov	r1, r6
 801235c:	4628      	mov	r0, r5
 801235e:	47b8      	blx	r7
 8012360:	3001      	adds	r0, #1
 8012362:	f43f aeaa 	beq.w	80120ba <_printf_float+0xbe>
 8012366:	f108 0801 	add.w	r8, r8, #1
 801236a:	e7ec      	b.n	8012346 <_printf_float+0x34a>
 801236c:	4613      	mov	r3, r2
 801236e:	4631      	mov	r1, r6
 8012370:	4642      	mov	r2, r8
 8012372:	4628      	mov	r0, r5
 8012374:	47b8      	blx	r7
 8012376:	3001      	adds	r0, #1
 8012378:	d1c0      	bne.n	80122fc <_printf_float+0x300>
 801237a:	e69e      	b.n	80120ba <_printf_float+0xbe>
 801237c:	2301      	movs	r3, #1
 801237e:	4631      	mov	r1, r6
 8012380:	4628      	mov	r0, r5
 8012382:	9205      	str	r2, [sp, #20]
 8012384:	47b8      	blx	r7
 8012386:	3001      	adds	r0, #1
 8012388:	f43f ae97 	beq.w	80120ba <_printf_float+0xbe>
 801238c:	9a05      	ldr	r2, [sp, #20]
 801238e:	f10b 0b01 	add.w	fp, fp, #1
 8012392:	e7b9      	b.n	8012308 <_printf_float+0x30c>
 8012394:	ee18 3a10 	vmov	r3, s16
 8012398:	4652      	mov	r2, sl
 801239a:	4631      	mov	r1, r6
 801239c:	4628      	mov	r0, r5
 801239e:	47b8      	blx	r7
 80123a0:	3001      	adds	r0, #1
 80123a2:	d1be      	bne.n	8012322 <_printf_float+0x326>
 80123a4:	e689      	b.n	80120ba <_printf_float+0xbe>
 80123a6:	9a05      	ldr	r2, [sp, #20]
 80123a8:	464b      	mov	r3, r9
 80123aa:	4442      	add	r2, r8
 80123ac:	4631      	mov	r1, r6
 80123ae:	4628      	mov	r0, r5
 80123b0:	47b8      	blx	r7
 80123b2:	3001      	adds	r0, #1
 80123b4:	d1c1      	bne.n	801233a <_printf_float+0x33e>
 80123b6:	e680      	b.n	80120ba <_printf_float+0xbe>
 80123b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123ba:	2a01      	cmp	r2, #1
 80123bc:	dc01      	bgt.n	80123c2 <_printf_float+0x3c6>
 80123be:	07db      	lsls	r3, r3, #31
 80123c0:	d53a      	bpl.n	8012438 <_printf_float+0x43c>
 80123c2:	2301      	movs	r3, #1
 80123c4:	4642      	mov	r2, r8
 80123c6:	4631      	mov	r1, r6
 80123c8:	4628      	mov	r0, r5
 80123ca:	47b8      	blx	r7
 80123cc:	3001      	adds	r0, #1
 80123ce:	f43f ae74 	beq.w	80120ba <_printf_float+0xbe>
 80123d2:	ee18 3a10 	vmov	r3, s16
 80123d6:	4652      	mov	r2, sl
 80123d8:	4631      	mov	r1, r6
 80123da:	4628      	mov	r0, r5
 80123dc:	47b8      	blx	r7
 80123de:	3001      	adds	r0, #1
 80123e0:	f43f ae6b 	beq.w	80120ba <_printf_float+0xbe>
 80123e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80123e8:	2200      	movs	r2, #0
 80123ea:	2300      	movs	r3, #0
 80123ec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80123f0:	f7ee fb7a 	bl	8000ae8 <__aeabi_dcmpeq>
 80123f4:	b9d8      	cbnz	r0, 801242e <_printf_float+0x432>
 80123f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80123fa:	f108 0201 	add.w	r2, r8, #1
 80123fe:	4631      	mov	r1, r6
 8012400:	4628      	mov	r0, r5
 8012402:	47b8      	blx	r7
 8012404:	3001      	adds	r0, #1
 8012406:	d10e      	bne.n	8012426 <_printf_float+0x42a>
 8012408:	e657      	b.n	80120ba <_printf_float+0xbe>
 801240a:	2301      	movs	r3, #1
 801240c:	4652      	mov	r2, sl
 801240e:	4631      	mov	r1, r6
 8012410:	4628      	mov	r0, r5
 8012412:	47b8      	blx	r7
 8012414:	3001      	adds	r0, #1
 8012416:	f43f ae50 	beq.w	80120ba <_printf_float+0xbe>
 801241a:	f108 0801 	add.w	r8, r8, #1
 801241e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012420:	3b01      	subs	r3, #1
 8012422:	4543      	cmp	r3, r8
 8012424:	dcf1      	bgt.n	801240a <_printf_float+0x40e>
 8012426:	464b      	mov	r3, r9
 8012428:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801242c:	e6da      	b.n	80121e4 <_printf_float+0x1e8>
 801242e:	f04f 0800 	mov.w	r8, #0
 8012432:	f104 0a1a 	add.w	sl, r4, #26
 8012436:	e7f2      	b.n	801241e <_printf_float+0x422>
 8012438:	2301      	movs	r3, #1
 801243a:	4642      	mov	r2, r8
 801243c:	e7df      	b.n	80123fe <_printf_float+0x402>
 801243e:	2301      	movs	r3, #1
 8012440:	464a      	mov	r2, r9
 8012442:	4631      	mov	r1, r6
 8012444:	4628      	mov	r0, r5
 8012446:	47b8      	blx	r7
 8012448:	3001      	adds	r0, #1
 801244a:	f43f ae36 	beq.w	80120ba <_printf_float+0xbe>
 801244e:	f108 0801 	add.w	r8, r8, #1
 8012452:	68e3      	ldr	r3, [r4, #12]
 8012454:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012456:	1a5b      	subs	r3, r3, r1
 8012458:	4543      	cmp	r3, r8
 801245a:	dcf0      	bgt.n	801243e <_printf_float+0x442>
 801245c:	e6f8      	b.n	8012250 <_printf_float+0x254>
 801245e:	f04f 0800 	mov.w	r8, #0
 8012462:	f104 0919 	add.w	r9, r4, #25
 8012466:	e7f4      	b.n	8012452 <_printf_float+0x456>

08012468 <_printf_common>:
 8012468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801246c:	4616      	mov	r6, r2
 801246e:	4699      	mov	r9, r3
 8012470:	688a      	ldr	r2, [r1, #8]
 8012472:	690b      	ldr	r3, [r1, #16]
 8012474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012478:	4293      	cmp	r3, r2
 801247a:	bfb8      	it	lt
 801247c:	4613      	movlt	r3, r2
 801247e:	6033      	str	r3, [r6, #0]
 8012480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012484:	4607      	mov	r7, r0
 8012486:	460c      	mov	r4, r1
 8012488:	b10a      	cbz	r2, 801248e <_printf_common+0x26>
 801248a:	3301      	adds	r3, #1
 801248c:	6033      	str	r3, [r6, #0]
 801248e:	6823      	ldr	r3, [r4, #0]
 8012490:	0699      	lsls	r1, r3, #26
 8012492:	bf42      	ittt	mi
 8012494:	6833      	ldrmi	r3, [r6, #0]
 8012496:	3302      	addmi	r3, #2
 8012498:	6033      	strmi	r3, [r6, #0]
 801249a:	6825      	ldr	r5, [r4, #0]
 801249c:	f015 0506 	ands.w	r5, r5, #6
 80124a0:	d106      	bne.n	80124b0 <_printf_common+0x48>
 80124a2:	f104 0a19 	add.w	sl, r4, #25
 80124a6:	68e3      	ldr	r3, [r4, #12]
 80124a8:	6832      	ldr	r2, [r6, #0]
 80124aa:	1a9b      	subs	r3, r3, r2
 80124ac:	42ab      	cmp	r3, r5
 80124ae:	dc26      	bgt.n	80124fe <_printf_common+0x96>
 80124b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80124b4:	1e13      	subs	r3, r2, #0
 80124b6:	6822      	ldr	r2, [r4, #0]
 80124b8:	bf18      	it	ne
 80124ba:	2301      	movne	r3, #1
 80124bc:	0692      	lsls	r2, r2, #26
 80124be:	d42b      	bmi.n	8012518 <_printf_common+0xb0>
 80124c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80124c4:	4649      	mov	r1, r9
 80124c6:	4638      	mov	r0, r7
 80124c8:	47c0      	blx	r8
 80124ca:	3001      	adds	r0, #1
 80124cc:	d01e      	beq.n	801250c <_printf_common+0xa4>
 80124ce:	6823      	ldr	r3, [r4, #0]
 80124d0:	6922      	ldr	r2, [r4, #16]
 80124d2:	f003 0306 	and.w	r3, r3, #6
 80124d6:	2b04      	cmp	r3, #4
 80124d8:	bf02      	ittt	eq
 80124da:	68e5      	ldreq	r5, [r4, #12]
 80124dc:	6833      	ldreq	r3, [r6, #0]
 80124de:	1aed      	subeq	r5, r5, r3
 80124e0:	68a3      	ldr	r3, [r4, #8]
 80124e2:	bf0c      	ite	eq
 80124e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80124e8:	2500      	movne	r5, #0
 80124ea:	4293      	cmp	r3, r2
 80124ec:	bfc4      	itt	gt
 80124ee:	1a9b      	subgt	r3, r3, r2
 80124f0:	18ed      	addgt	r5, r5, r3
 80124f2:	2600      	movs	r6, #0
 80124f4:	341a      	adds	r4, #26
 80124f6:	42b5      	cmp	r5, r6
 80124f8:	d11a      	bne.n	8012530 <_printf_common+0xc8>
 80124fa:	2000      	movs	r0, #0
 80124fc:	e008      	b.n	8012510 <_printf_common+0xa8>
 80124fe:	2301      	movs	r3, #1
 8012500:	4652      	mov	r2, sl
 8012502:	4649      	mov	r1, r9
 8012504:	4638      	mov	r0, r7
 8012506:	47c0      	blx	r8
 8012508:	3001      	adds	r0, #1
 801250a:	d103      	bne.n	8012514 <_printf_common+0xac>
 801250c:	f04f 30ff 	mov.w	r0, #4294967295
 8012510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012514:	3501      	adds	r5, #1
 8012516:	e7c6      	b.n	80124a6 <_printf_common+0x3e>
 8012518:	18e1      	adds	r1, r4, r3
 801251a:	1c5a      	adds	r2, r3, #1
 801251c:	2030      	movs	r0, #48	; 0x30
 801251e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012522:	4422      	add	r2, r4
 8012524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801252c:	3302      	adds	r3, #2
 801252e:	e7c7      	b.n	80124c0 <_printf_common+0x58>
 8012530:	2301      	movs	r3, #1
 8012532:	4622      	mov	r2, r4
 8012534:	4649      	mov	r1, r9
 8012536:	4638      	mov	r0, r7
 8012538:	47c0      	blx	r8
 801253a:	3001      	adds	r0, #1
 801253c:	d0e6      	beq.n	801250c <_printf_common+0xa4>
 801253e:	3601      	adds	r6, #1
 8012540:	e7d9      	b.n	80124f6 <_printf_common+0x8e>
	...

08012544 <_printf_i>:
 8012544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012548:	7e0f      	ldrb	r7, [r1, #24]
 801254a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801254c:	2f78      	cmp	r7, #120	; 0x78
 801254e:	4691      	mov	r9, r2
 8012550:	4680      	mov	r8, r0
 8012552:	460c      	mov	r4, r1
 8012554:	469a      	mov	sl, r3
 8012556:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801255a:	d807      	bhi.n	801256c <_printf_i+0x28>
 801255c:	2f62      	cmp	r7, #98	; 0x62
 801255e:	d80a      	bhi.n	8012576 <_printf_i+0x32>
 8012560:	2f00      	cmp	r7, #0
 8012562:	f000 80d4 	beq.w	801270e <_printf_i+0x1ca>
 8012566:	2f58      	cmp	r7, #88	; 0x58
 8012568:	f000 80c0 	beq.w	80126ec <_printf_i+0x1a8>
 801256c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012574:	e03a      	b.n	80125ec <_printf_i+0xa8>
 8012576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801257a:	2b15      	cmp	r3, #21
 801257c:	d8f6      	bhi.n	801256c <_printf_i+0x28>
 801257e:	a101      	add	r1, pc, #4	; (adr r1, 8012584 <_printf_i+0x40>)
 8012580:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012584:	080125dd 	.word	0x080125dd
 8012588:	080125f1 	.word	0x080125f1
 801258c:	0801256d 	.word	0x0801256d
 8012590:	0801256d 	.word	0x0801256d
 8012594:	0801256d 	.word	0x0801256d
 8012598:	0801256d 	.word	0x0801256d
 801259c:	080125f1 	.word	0x080125f1
 80125a0:	0801256d 	.word	0x0801256d
 80125a4:	0801256d 	.word	0x0801256d
 80125a8:	0801256d 	.word	0x0801256d
 80125ac:	0801256d 	.word	0x0801256d
 80125b0:	080126f5 	.word	0x080126f5
 80125b4:	0801261d 	.word	0x0801261d
 80125b8:	080126af 	.word	0x080126af
 80125bc:	0801256d 	.word	0x0801256d
 80125c0:	0801256d 	.word	0x0801256d
 80125c4:	08012717 	.word	0x08012717
 80125c8:	0801256d 	.word	0x0801256d
 80125cc:	0801261d 	.word	0x0801261d
 80125d0:	0801256d 	.word	0x0801256d
 80125d4:	0801256d 	.word	0x0801256d
 80125d8:	080126b7 	.word	0x080126b7
 80125dc:	682b      	ldr	r3, [r5, #0]
 80125de:	1d1a      	adds	r2, r3, #4
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	602a      	str	r2, [r5, #0]
 80125e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80125e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80125ec:	2301      	movs	r3, #1
 80125ee:	e09f      	b.n	8012730 <_printf_i+0x1ec>
 80125f0:	6820      	ldr	r0, [r4, #0]
 80125f2:	682b      	ldr	r3, [r5, #0]
 80125f4:	0607      	lsls	r7, r0, #24
 80125f6:	f103 0104 	add.w	r1, r3, #4
 80125fa:	6029      	str	r1, [r5, #0]
 80125fc:	d501      	bpl.n	8012602 <_printf_i+0xbe>
 80125fe:	681e      	ldr	r6, [r3, #0]
 8012600:	e003      	b.n	801260a <_printf_i+0xc6>
 8012602:	0646      	lsls	r6, r0, #25
 8012604:	d5fb      	bpl.n	80125fe <_printf_i+0xba>
 8012606:	f9b3 6000 	ldrsh.w	r6, [r3]
 801260a:	2e00      	cmp	r6, #0
 801260c:	da03      	bge.n	8012616 <_printf_i+0xd2>
 801260e:	232d      	movs	r3, #45	; 0x2d
 8012610:	4276      	negs	r6, r6
 8012612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012616:	485a      	ldr	r0, [pc, #360]	; (8012780 <_printf_i+0x23c>)
 8012618:	230a      	movs	r3, #10
 801261a:	e012      	b.n	8012642 <_printf_i+0xfe>
 801261c:	682b      	ldr	r3, [r5, #0]
 801261e:	6820      	ldr	r0, [r4, #0]
 8012620:	1d19      	adds	r1, r3, #4
 8012622:	6029      	str	r1, [r5, #0]
 8012624:	0605      	lsls	r5, r0, #24
 8012626:	d501      	bpl.n	801262c <_printf_i+0xe8>
 8012628:	681e      	ldr	r6, [r3, #0]
 801262a:	e002      	b.n	8012632 <_printf_i+0xee>
 801262c:	0641      	lsls	r1, r0, #25
 801262e:	d5fb      	bpl.n	8012628 <_printf_i+0xe4>
 8012630:	881e      	ldrh	r6, [r3, #0]
 8012632:	4853      	ldr	r0, [pc, #332]	; (8012780 <_printf_i+0x23c>)
 8012634:	2f6f      	cmp	r7, #111	; 0x6f
 8012636:	bf0c      	ite	eq
 8012638:	2308      	moveq	r3, #8
 801263a:	230a      	movne	r3, #10
 801263c:	2100      	movs	r1, #0
 801263e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012642:	6865      	ldr	r5, [r4, #4]
 8012644:	60a5      	str	r5, [r4, #8]
 8012646:	2d00      	cmp	r5, #0
 8012648:	bfa2      	ittt	ge
 801264a:	6821      	ldrge	r1, [r4, #0]
 801264c:	f021 0104 	bicge.w	r1, r1, #4
 8012650:	6021      	strge	r1, [r4, #0]
 8012652:	b90e      	cbnz	r6, 8012658 <_printf_i+0x114>
 8012654:	2d00      	cmp	r5, #0
 8012656:	d04b      	beq.n	80126f0 <_printf_i+0x1ac>
 8012658:	4615      	mov	r5, r2
 801265a:	fbb6 f1f3 	udiv	r1, r6, r3
 801265e:	fb03 6711 	mls	r7, r3, r1, r6
 8012662:	5dc7      	ldrb	r7, [r0, r7]
 8012664:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012668:	4637      	mov	r7, r6
 801266a:	42bb      	cmp	r3, r7
 801266c:	460e      	mov	r6, r1
 801266e:	d9f4      	bls.n	801265a <_printf_i+0x116>
 8012670:	2b08      	cmp	r3, #8
 8012672:	d10b      	bne.n	801268c <_printf_i+0x148>
 8012674:	6823      	ldr	r3, [r4, #0]
 8012676:	07de      	lsls	r6, r3, #31
 8012678:	d508      	bpl.n	801268c <_printf_i+0x148>
 801267a:	6923      	ldr	r3, [r4, #16]
 801267c:	6861      	ldr	r1, [r4, #4]
 801267e:	4299      	cmp	r1, r3
 8012680:	bfde      	ittt	le
 8012682:	2330      	movle	r3, #48	; 0x30
 8012684:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012688:	f105 35ff 	addle.w	r5, r5, #4294967295
 801268c:	1b52      	subs	r2, r2, r5
 801268e:	6122      	str	r2, [r4, #16]
 8012690:	f8cd a000 	str.w	sl, [sp]
 8012694:	464b      	mov	r3, r9
 8012696:	aa03      	add	r2, sp, #12
 8012698:	4621      	mov	r1, r4
 801269a:	4640      	mov	r0, r8
 801269c:	f7ff fee4 	bl	8012468 <_printf_common>
 80126a0:	3001      	adds	r0, #1
 80126a2:	d14a      	bne.n	801273a <_printf_i+0x1f6>
 80126a4:	f04f 30ff 	mov.w	r0, #4294967295
 80126a8:	b004      	add	sp, #16
 80126aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126ae:	6823      	ldr	r3, [r4, #0]
 80126b0:	f043 0320 	orr.w	r3, r3, #32
 80126b4:	6023      	str	r3, [r4, #0]
 80126b6:	4833      	ldr	r0, [pc, #204]	; (8012784 <_printf_i+0x240>)
 80126b8:	2778      	movs	r7, #120	; 0x78
 80126ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80126be:	6823      	ldr	r3, [r4, #0]
 80126c0:	6829      	ldr	r1, [r5, #0]
 80126c2:	061f      	lsls	r7, r3, #24
 80126c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80126c8:	d402      	bmi.n	80126d0 <_printf_i+0x18c>
 80126ca:	065f      	lsls	r7, r3, #25
 80126cc:	bf48      	it	mi
 80126ce:	b2b6      	uxthmi	r6, r6
 80126d0:	07df      	lsls	r7, r3, #31
 80126d2:	bf48      	it	mi
 80126d4:	f043 0320 	orrmi.w	r3, r3, #32
 80126d8:	6029      	str	r1, [r5, #0]
 80126da:	bf48      	it	mi
 80126dc:	6023      	strmi	r3, [r4, #0]
 80126de:	b91e      	cbnz	r6, 80126e8 <_printf_i+0x1a4>
 80126e0:	6823      	ldr	r3, [r4, #0]
 80126e2:	f023 0320 	bic.w	r3, r3, #32
 80126e6:	6023      	str	r3, [r4, #0]
 80126e8:	2310      	movs	r3, #16
 80126ea:	e7a7      	b.n	801263c <_printf_i+0xf8>
 80126ec:	4824      	ldr	r0, [pc, #144]	; (8012780 <_printf_i+0x23c>)
 80126ee:	e7e4      	b.n	80126ba <_printf_i+0x176>
 80126f0:	4615      	mov	r5, r2
 80126f2:	e7bd      	b.n	8012670 <_printf_i+0x12c>
 80126f4:	682b      	ldr	r3, [r5, #0]
 80126f6:	6826      	ldr	r6, [r4, #0]
 80126f8:	6961      	ldr	r1, [r4, #20]
 80126fa:	1d18      	adds	r0, r3, #4
 80126fc:	6028      	str	r0, [r5, #0]
 80126fe:	0635      	lsls	r5, r6, #24
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	d501      	bpl.n	8012708 <_printf_i+0x1c4>
 8012704:	6019      	str	r1, [r3, #0]
 8012706:	e002      	b.n	801270e <_printf_i+0x1ca>
 8012708:	0670      	lsls	r0, r6, #25
 801270a:	d5fb      	bpl.n	8012704 <_printf_i+0x1c0>
 801270c:	8019      	strh	r1, [r3, #0]
 801270e:	2300      	movs	r3, #0
 8012710:	6123      	str	r3, [r4, #16]
 8012712:	4615      	mov	r5, r2
 8012714:	e7bc      	b.n	8012690 <_printf_i+0x14c>
 8012716:	682b      	ldr	r3, [r5, #0]
 8012718:	1d1a      	adds	r2, r3, #4
 801271a:	602a      	str	r2, [r5, #0]
 801271c:	681d      	ldr	r5, [r3, #0]
 801271e:	6862      	ldr	r2, [r4, #4]
 8012720:	2100      	movs	r1, #0
 8012722:	4628      	mov	r0, r5
 8012724:	f7ed fd64 	bl	80001f0 <memchr>
 8012728:	b108      	cbz	r0, 801272e <_printf_i+0x1ea>
 801272a:	1b40      	subs	r0, r0, r5
 801272c:	6060      	str	r0, [r4, #4]
 801272e:	6863      	ldr	r3, [r4, #4]
 8012730:	6123      	str	r3, [r4, #16]
 8012732:	2300      	movs	r3, #0
 8012734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012738:	e7aa      	b.n	8012690 <_printf_i+0x14c>
 801273a:	6923      	ldr	r3, [r4, #16]
 801273c:	462a      	mov	r2, r5
 801273e:	4649      	mov	r1, r9
 8012740:	4640      	mov	r0, r8
 8012742:	47d0      	blx	sl
 8012744:	3001      	adds	r0, #1
 8012746:	d0ad      	beq.n	80126a4 <_printf_i+0x160>
 8012748:	6823      	ldr	r3, [r4, #0]
 801274a:	079b      	lsls	r3, r3, #30
 801274c:	d413      	bmi.n	8012776 <_printf_i+0x232>
 801274e:	68e0      	ldr	r0, [r4, #12]
 8012750:	9b03      	ldr	r3, [sp, #12]
 8012752:	4298      	cmp	r0, r3
 8012754:	bfb8      	it	lt
 8012756:	4618      	movlt	r0, r3
 8012758:	e7a6      	b.n	80126a8 <_printf_i+0x164>
 801275a:	2301      	movs	r3, #1
 801275c:	4632      	mov	r2, r6
 801275e:	4649      	mov	r1, r9
 8012760:	4640      	mov	r0, r8
 8012762:	47d0      	blx	sl
 8012764:	3001      	adds	r0, #1
 8012766:	d09d      	beq.n	80126a4 <_printf_i+0x160>
 8012768:	3501      	adds	r5, #1
 801276a:	68e3      	ldr	r3, [r4, #12]
 801276c:	9903      	ldr	r1, [sp, #12]
 801276e:	1a5b      	subs	r3, r3, r1
 8012770:	42ab      	cmp	r3, r5
 8012772:	dcf2      	bgt.n	801275a <_printf_i+0x216>
 8012774:	e7eb      	b.n	801274e <_printf_i+0x20a>
 8012776:	2500      	movs	r5, #0
 8012778:	f104 0619 	add.w	r6, r4, #25
 801277c:	e7f5      	b.n	801276a <_printf_i+0x226>
 801277e:	bf00      	nop
 8012780:	08018c7b 	.word	0x08018c7b
 8012784:	08018c8c 	.word	0x08018c8c

08012788 <_scanf_float>:
 8012788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801278c:	b087      	sub	sp, #28
 801278e:	4617      	mov	r7, r2
 8012790:	9303      	str	r3, [sp, #12]
 8012792:	688b      	ldr	r3, [r1, #8]
 8012794:	1e5a      	subs	r2, r3, #1
 8012796:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801279a:	bf83      	ittte	hi
 801279c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80127a0:	195b      	addhi	r3, r3, r5
 80127a2:	9302      	strhi	r3, [sp, #8]
 80127a4:	2300      	movls	r3, #0
 80127a6:	bf86      	itte	hi
 80127a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80127ac:	608b      	strhi	r3, [r1, #8]
 80127ae:	9302      	strls	r3, [sp, #8]
 80127b0:	680b      	ldr	r3, [r1, #0]
 80127b2:	468b      	mov	fp, r1
 80127b4:	2500      	movs	r5, #0
 80127b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80127ba:	f84b 3b1c 	str.w	r3, [fp], #28
 80127be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80127c2:	4680      	mov	r8, r0
 80127c4:	460c      	mov	r4, r1
 80127c6:	465e      	mov	r6, fp
 80127c8:	46aa      	mov	sl, r5
 80127ca:	46a9      	mov	r9, r5
 80127cc:	9501      	str	r5, [sp, #4]
 80127ce:	68a2      	ldr	r2, [r4, #8]
 80127d0:	b152      	cbz	r2, 80127e8 <_scanf_float+0x60>
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	781b      	ldrb	r3, [r3, #0]
 80127d6:	2b4e      	cmp	r3, #78	; 0x4e
 80127d8:	d864      	bhi.n	80128a4 <_scanf_float+0x11c>
 80127da:	2b40      	cmp	r3, #64	; 0x40
 80127dc:	d83c      	bhi.n	8012858 <_scanf_float+0xd0>
 80127de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80127e2:	b2c8      	uxtb	r0, r1
 80127e4:	280e      	cmp	r0, #14
 80127e6:	d93a      	bls.n	801285e <_scanf_float+0xd6>
 80127e8:	f1b9 0f00 	cmp.w	r9, #0
 80127ec:	d003      	beq.n	80127f6 <_scanf_float+0x6e>
 80127ee:	6823      	ldr	r3, [r4, #0]
 80127f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80127f4:	6023      	str	r3, [r4, #0]
 80127f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80127fa:	f1ba 0f01 	cmp.w	sl, #1
 80127fe:	f200 8113 	bhi.w	8012a28 <_scanf_float+0x2a0>
 8012802:	455e      	cmp	r6, fp
 8012804:	f200 8105 	bhi.w	8012a12 <_scanf_float+0x28a>
 8012808:	2501      	movs	r5, #1
 801280a:	4628      	mov	r0, r5
 801280c:	b007      	add	sp, #28
 801280e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012812:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012816:	2a0d      	cmp	r2, #13
 8012818:	d8e6      	bhi.n	80127e8 <_scanf_float+0x60>
 801281a:	a101      	add	r1, pc, #4	; (adr r1, 8012820 <_scanf_float+0x98>)
 801281c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012820:	0801295f 	.word	0x0801295f
 8012824:	080127e9 	.word	0x080127e9
 8012828:	080127e9 	.word	0x080127e9
 801282c:	080127e9 	.word	0x080127e9
 8012830:	080129bf 	.word	0x080129bf
 8012834:	08012997 	.word	0x08012997
 8012838:	080127e9 	.word	0x080127e9
 801283c:	080127e9 	.word	0x080127e9
 8012840:	0801296d 	.word	0x0801296d
 8012844:	080127e9 	.word	0x080127e9
 8012848:	080127e9 	.word	0x080127e9
 801284c:	080127e9 	.word	0x080127e9
 8012850:	080127e9 	.word	0x080127e9
 8012854:	08012925 	.word	0x08012925
 8012858:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801285c:	e7db      	b.n	8012816 <_scanf_float+0x8e>
 801285e:	290e      	cmp	r1, #14
 8012860:	d8c2      	bhi.n	80127e8 <_scanf_float+0x60>
 8012862:	a001      	add	r0, pc, #4	; (adr r0, 8012868 <_scanf_float+0xe0>)
 8012864:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012868:	08012917 	.word	0x08012917
 801286c:	080127e9 	.word	0x080127e9
 8012870:	08012917 	.word	0x08012917
 8012874:	080129ab 	.word	0x080129ab
 8012878:	080127e9 	.word	0x080127e9
 801287c:	080128c5 	.word	0x080128c5
 8012880:	08012901 	.word	0x08012901
 8012884:	08012901 	.word	0x08012901
 8012888:	08012901 	.word	0x08012901
 801288c:	08012901 	.word	0x08012901
 8012890:	08012901 	.word	0x08012901
 8012894:	08012901 	.word	0x08012901
 8012898:	08012901 	.word	0x08012901
 801289c:	08012901 	.word	0x08012901
 80128a0:	08012901 	.word	0x08012901
 80128a4:	2b6e      	cmp	r3, #110	; 0x6e
 80128a6:	d809      	bhi.n	80128bc <_scanf_float+0x134>
 80128a8:	2b60      	cmp	r3, #96	; 0x60
 80128aa:	d8b2      	bhi.n	8012812 <_scanf_float+0x8a>
 80128ac:	2b54      	cmp	r3, #84	; 0x54
 80128ae:	d077      	beq.n	80129a0 <_scanf_float+0x218>
 80128b0:	2b59      	cmp	r3, #89	; 0x59
 80128b2:	d199      	bne.n	80127e8 <_scanf_float+0x60>
 80128b4:	2d07      	cmp	r5, #7
 80128b6:	d197      	bne.n	80127e8 <_scanf_float+0x60>
 80128b8:	2508      	movs	r5, #8
 80128ba:	e029      	b.n	8012910 <_scanf_float+0x188>
 80128bc:	2b74      	cmp	r3, #116	; 0x74
 80128be:	d06f      	beq.n	80129a0 <_scanf_float+0x218>
 80128c0:	2b79      	cmp	r3, #121	; 0x79
 80128c2:	e7f6      	b.n	80128b2 <_scanf_float+0x12a>
 80128c4:	6821      	ldr	r1, [r4, #0]
 80128c6:	05c8      	lsls	r0, r1, #23
 80128c8:	d51a      	bpl.n	8012900 <_scanf_float+0x178>
 80128ca:	9b02      	ldr	r3, [sp, #8]
 80128cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80128d0:	6021      	str	r1, [r4, #0]
 80128d2:	f109 0901 	add.w	r9, r9, #1
 80128d6:	b11b      	cbz	r3, 80128e0 <_scanf_float+0x158>
 80128d8:	3b01      	subs	r3, #1
 80128da:	3201      	adds	r2, #1
 80128dc:	9302      	str	r3, [sp, #8]
 80128de:	60a2      	str	r2, [r4, #8]
 80128e0:	68a3      	ldr	r3, [r4, #8]
 80128e2:	3b01      	subs	r3, #1
 80128e4:	60a3      	str	r3, [r4, #8]
 80128e6:	6923      	ldr	r3, [r4, #16]
 80128e8:	3301      	adds	r3, #1
 80128ea:	6123      	str	r3, [r4, #16]
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	3b01      	subs	r3, #1
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	607b      	str	r3, [r7, #4]
 80128f4:	f340 8084 	ble.w	8012a00 <_scanf_float+0x278>
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	3301      	adds	r3, #1
 80128fc:	603b      	str	r3, [r7, #0]
 80128fe:	e766      	b.n	80127ce <_scanf_float+0x46>
 8012900:	eb1a 0f05 	cmn.w	sl, r5
 8012904:	f47f af70 	bne.w	80127e8 <_scanf_float+0x60>
 8012908:	6822      	ldr	r2, [r4, #0]
 801290a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801290e:	6022      	str	r2, [r4, #0]
 8012910:	f806 3b01 	strb.w	r3, [r6], #1
 8012914:	e7e4      	b.n	80128e0 <_scanf_float+0x158>
 8012916:	6822      	ldr	r2, [r4, #0]
 8012918:	0610      	lsls	r0, r2, #24
 801291a:	f57f af65 	bpl.w	80127e8 <_scanf_float+0x60>
 801291e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012922:	e7f4      	b.n	801290e <_scanf_float+0x186>
 8012924:	f1ba 0f00 	cmp.w	sl, #0
 8012928:	d10e      	bne.n	8012948 <_scanf_float+0x1c0>
 801292a:	f1b9 0f00 	cmp.w	r9, #0
 801292e:	d10e      	bne.n	801294e <_scanf_float+0x1c6>
 8012930:	6822      	ldr	r2, [r4, #0]
 8012932:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012936:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801293a:	d108      	bne.n	801294e <_scanf_float+0x1c6>
 801293c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012940:	6022      	str	r2, [r4, #0]
 8012942:	f04f 0a01 	mov.w	sl, #1
 8012946:	e7e3      	b.n	8012910 <_scanf_float+0x188>
 8012948:	f1ba 0f02 	cmp.w	sl, #2
 801294c:	d055      	beq.n	80129fa <_scanf_float+0x272>
 801294e:	2d01      	cmp	r5, #1
 8012950:	d002      	beq.n	8012958 <_scanf_float+0x1d0>
 8012952:	2d04      	cmp	r5, #4
 8012954:	f47f af48 	bne.w	80127e8 <_scanf_float+0x60>
 8012958:	3501      	adds	r5, #1
 801295a:	b2ed      	uxtb	r5, r5
 801295c:	e7d8      	b.n	8012910 <_scanf_float+0x188>
 801295e:	f1ba 0f01 	cmp.w	sl, #1
 8012962:	f47f af41 	bne.w	80127e8 <_scanf_float+0x60>
 8012966:	f04f 0a02 	mov.w	sl, #2
 801296a:	e7d1      	b.n	8012910 <_scanf_float+0x188>
 801296c:	b97d      	cbnz	r5, 801298e <_scanf_float+0x206>
 801296e:	f1b9 0f00 	cmp.w	r9, #0
 8012972:	f47f af3c 	bne.w	80127ee <_scanf_float+0x66>
 8012976:	6822      	ldr	r2, [r4, #0]
 8012978:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801297c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012980:	f47f af39 	bne.w	80127f6 <_scanf_float+0x6e>
 8012984:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012988:	6022      	str	r2, [r4, #0]
 801298a:	2501      	movs	r5, #1
 801298c:	e7c0      	b.n	8012910 <_scanf_float+0x188>
 801298e:	2d03      	cmp	r5, #3
 8012990:	d0e2      	beq.n	8012958 <_scanf_float+0x1d0>
 8012992:	2d05      	cmp	r5, #5
 8012994:	e7de      	b.n	8012954 <_scanf_float+0x1cc>
 8012996:	2d02      	cmp	r5, #2
 8012998:	f47f af26 	bne.w	80127e8 <_scanf_float+0x60>
 801299c:	2503      	movs	r5, #3
 801299e:	e7b7      	b.n	8012910 <_scanf_float+0x188>
 80129a0:	2d06      	cmp	r5, #6
 80129a2:	f47f af21 	bne.w	80127e8 <_scanf_float+0x60>
 80129a6:	2507      	movs	r5, #7
 80129a8:	e7b2      	b.n	8012910 <_scanf_float+0x188>
 80129aa:	6822      	ldr	r2, [r4, #0]
 80129ac:	0591      	lsls	r1, r2, #22
 80129ae:	f57f af1b 	bpl.w	80127e8 <_scanf_float+0x60>
 80129b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80129b6:	6022      	str	r2, [r4, #0]
 80129b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80129bc:	e7a8      	b.n	8012910 <_scanf_float+0x188>
 80129be:	6822      	ldr	r2, [r4, #0]
 80129c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80129c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80129c8:	d006      	beq.n	80129d8 <_scanf_float+0x250>
 80129ca:	0550      	lsls	r0, r2, #21
 80129cc:	f57f af0c 	bpl.w	80127e8 <_scanf_float+0x60>
 80129d0:	f1b9 0f00 	cmp.w	r9, #0
 80129d4:	f43f af0f 	beq.w	80127f6 <_scanf_float+0x6e>
 80129d8:	0591      	lsls	r1, r2, #22
 80129da:	bf58      	it	pl
 80129dc:	9901      	ldrpl	r1, [sp, #4]
 80129de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80129e2:	bf58      	it	pl
 80129e4:	eba9 0101 	subpl.w	r1, r9, r1
 80129e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80129ec:	bf58      	it	pl
 80129ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80129f2:	6022      	str	r2, [r4, #0]
 80129f4:	f04f 0900 	mov.w	r9, #0
 80129f8:	e78a      	b.n	8012910 <_scanf_float+0x188>
 80129fa:	f04f 0a03 	mov.w	sl, #3
 80129fe:	e787      	b.n	8012910 <_scanf_float+0x188>
 8012a00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012a04:	4639      	mov	r1, r7
 8012a06:	4640      	mov	r0, r8
 8012a08:	4798      	blx	r3
 8012a0a:	2800      	cmp	r0, #0
 8012a0c:	f43f aedf 	beq.w	80127ce <_scanf_float+0x46>
 8012a10:	e6ea      	b.n	80127e8 <_scanf_float+0x60>
 8012a12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012a1a:	463a      	mov	r2, r7
 8012a1c:	4640      	mov	r0, r8
 8012a1e:	4798      	blx	r3
 8012a20:	6923      	ldr	r3, [r4, #16]
 8012a22:	3b01      	subs	r3, #1
 8012a24:	6123      	str	r3, [r4, #16]
 8012a26:	e6ec      	b.n	8012802 <_scanf_float+0x7a>
 8012a28:	1e6b      	subs	r3, r5, #1
 8012a2a:	2b06      	cmp	r3, #6
 8012a2c:	d825      	bhi.n	8012a7a <_scanf_float+0x2f2>
 8012a2e:	2d02      	cmp	r5, #2
 8012a30:	d836      	bhi.n	8012aa0 <_scanf_float+0x318>
 8012a32:	455e      	cmp	r6, fp
 8012a34:	f67f aee8 	bls.w	8012808 <_scanf_float+0x80>
 8012a38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a3c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012a40:	463a      	mov	r2, r7
 8012a42:	4640      	mov	r0, r8
 8012a44:	4798      	blx	r3
 8012a46:	6923      	ldr	r3, [r4, #16]
 8012a48:	3b01      	subs	r3, #1
 8012a4a:	6123      	str	r3, [r4, #16]
 8012a4c:	e7f1      	b.n	8012a32 <_scanf_float+0x2aa>
 8012a4e:	9802      	ldr	r0, [sp, #8]
 8012a50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a54:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012a58:	9002      	str	r0, [sp, #8]
 8012a5a:	463a      	mov	r2, r7
 8012a5c:	4640      	mov	r0, r8
 8012a5e:	4798      	blx	r3
 8012a60:	6923      	ldr	r3, [r4, #16]
 8012a62:	3b01      	subs	r3, #1
 8012a64:	6123      	str	r3, [r4, #16]
 8012a66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012a6a:	fa5f fa8a 	uxtb.w	sl, sl
 8012a6e:	f1ba 0f02 	cmp.w	sl, #2
 8012a72:	d1ec      	bne.n	8012a4e <_scanf_float+0x2c6>
 8012a74:	3d03      	subs	r5, #3
 8012a76:	b2ed      	uxtb	r5, r5
 8012a78:	1b76      	subs	r6, r6, r5
 8012a7a:	6823      	ldr	r3, [r4, #0]
 8012a7c:	05da      	lsls	r2, r3, #23
 8012a7e:	d52f      	bpl.n	8012ae0 <_scanf_float+0x358>
 8012a80:	055b      	lsls	r3, r3, #21
 8012a82:	d510      	bpl.n	8012aa6 <_scanf_float+0x31e>
 8012a84:	455e      	cmp	r6, fp
 8012a86:	f67f aebf 	bls.w	8012808 <_scanf_float+0x80>
 8012a8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012a92:	463a      	mov	r2, r7
 8012a94:	4640      	mov	r0, r8
 8012a96:	4798      	blx	r3
 8012a98:	6923      	ldr	r3, [r4, #16]
 8012a9a:	3b01      	subs	r3, #1
 8012a9c:	6123      	str	r3, [r4, #16]
 8012a9e:	e7f1      	b.n	8012a84 <_scanf_float+0x2fc>
 8012aa0:	46aa      	mov	sl, r5
 8012aa2:	9602      	str	r6, [sp, #8]
 8012aa4:	e7df      	b.n	8012a66 <_scanf_float+0x2de>
 8012aa6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012aaa:	6923      	ldr	r3, [r4, #16]
 8012aac:	2965      	cmp	r1, #101	; 0x65
 8012aae:	f103 33ff 	add.w	r3, r3, #4294967295
 8012ab2:	f106 35ff 	add.w	r5, r6, #4294967295
 8012ab6:	6123      	str	r3, [r4, #16]
 8012ab8:	d00c      	beq.n	8012ad4 <_scanf_float+0x34c>
 8012aba:	2945      	cmp	r1, #69	; 0x45
 8012abc:	d00a      	beq.n	8012ad4 <_scanf_float+0x34c>
 8012abe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012ac2:	463a      	mov	r2, r7
 8012ac4:	4640      	mov	r0, r8
 8012ac6:	4798      	blx	r3
 8012ac8:	6923      	ldr	r3, [r4, #16]
 8012aca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012ace:	3b01      	subs	r3, #1
 8012ad0:	1eb5      	subs	r5, r6, #2
 8012ad2:	6123      	str	r3, [r4, #16]
 8012ad4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012ad8:	463a      	mov	r2, r7
 8012ada:	4640      	mov	r0, r8
 8012adc:	4798      	blx	r3
 8012ade:	462e      	mov	r6, r5
 8012ae0:	6825      	ldr	r5, [r4, #0]
 8012ae2:	f015 0510 	ands.w	r5, r5, #16
 8012ae6:	d158      	bne.n	8012b9a <_scanf_float+0x412>
 8012ae8:	7035      	strb	r5, [r6, #0]
 8012aea:	6823      	ldr	r3, [r4, #0]
 8012aec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012af4:	d11c      	bne.n	8012b30 <_scanf_float+0x3a8>
 8012af6:	9b01      	ldr	r3, [sp, #4]
 8012af8:	454b      	cmp	r3, r9
 8012afa:	eba3 0209 	sub.w	r2, r3, r9
 8012afe:	d124      	bne.n	8012b4a <_scanf_float+0x3c2>
 8012b00:	2200      	movs	r2, #0
 8012b02:	4659      	mov	r1, fp
 8012b04:	4640      	mov	r0, r8
 8012b06:	f7ff f8df 	bl	8011cc8 <_strtod_r>
 8012b0a:	9b03      	ldr	r3, [sp, #12]
 8012b0c:	6821      	ldr	r1, [r4, #0]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	f011 0f02 	tst.w	r1, #2
 8012b14:	ec57 6b10 	vmov	r6, r7, d0
 8012b18:	f103 0204 	add.w	r2, r3, #4
 8012b1c:	d020      	beq.n	8012b60 <_scanf_float+0x3d8>
 8012b1e:	9903      	ldr	r1, [sp, #12]
 8012b20:	600a      	str	r2, [r1, #0]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	e9c3 6700 	strd	r6, r7, [r3]
 8012b28:	68e3      	ldr	r3, [r4, #12]
 8012b2a:	3301      	adds	r3, #1
 8012b2c:	60e3      	str	r3, [r4, #12]
 8012b2e:	e66c      	b.n	801280a <_scanf_float+0x82>
 8012b30:	9b04      	ldr	r3, [sp, #16]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d0e4      	beq.n	8012b00 <_scanf_float+0x378>
 8012b36:	9905      	ldr	r1, [sp, #20]
 8012b38:	230a      	movs	r3, #10
 8012b3a:	462a      	mov	r2, r5
 8012b3c:	3101      	adds	r1, #1
 8012b3e:	4640      	mov	r0, r8
 8012b40:	f7ff f9b0 	bl	8011ea4 <_strtol_r>
 8012b44:	9b04      	ldr	r3, [sp, #16]
 8012b46:	9e05      	ldr	r6, [sp, #20]
 8012b48:	1ac2      	subs	r2, r0, r3
 8012b4a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012b4e:	429e      	cmp	r6, r3
 8012b50:	bf28      	it	cs
 8012b52:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012b56:	4912      	ldr	r1, [pc, #72]	; (8012ba0 <_scanf_float+0x418>)
 8012b58:	4630      	mov	r0, r6
 8012b5a:	f000 f91b 	bl	8012d94 <siprintf>
 8012b5e:	e7cf      	b.n	8012b00 <_scanf_float+0x378>
 8012b60:	f011 0f04 	tst.w	r1, #4
 8012b64:	9903      	ldr	r1, [sp, #12]
 8012b66:	600a      	str	r2, [r1, #0]
 8012b68:	d1db      	bne.n	8012b22 <_scanf_float+0x39a>
 8012b6a:	f8d3 8000 	ldr.w	r8, [r3]
 8012b6e:	ee10 2a10 	vmov	r2, s0
 8012b72:	ee10 0a10 	vmov	r0, s0
 8012b76:	463b      	mov	r3, r7
 8012b78:	4639      	mov	r1, r7
 8012b7a:	f7ed ffe7 	bl	8000b4c <__aeabi_dcmpun>
 8012b7e:	b128      	cbz	r0, 8012b8c <_scanf_float+0x404>
 8012b80:	4808      	ldr	r0, [pc, #32]	; (8012ba4 <_scanf_float+0x41c>)
 8012b82:	f000 fa9d 	bl	80130c0 <nanf>
 8012b86:	ed88 0a00 	vstr	s0, [r8]
 8012b8a:	e7cd      	b.n	8012b28 <_scanf_float+0x3a0>
 8012b8c:	4630      	mov	r0, r6
 8012b8e:	4639      	mov	r1, r7
 8012b90:	f7ee f83a 	bl	8000c08 <__aeabi_d2f>
 8012b94:	f8c8 0000 	str.w	r0, [r8]
 8012b98:	e7c6      	b.n	8012b28 <_scanf_float+0x3a0>
 8012b9a:	2500      	movs	r5, #0
 8012b9c:	e635      	b.n	801280a <_scanf_float+0x82>
 8012b9e:	bf00      	nop
 8012ba0:	08018c9d 	.word	0x08018c9d
 8012ba4:	08018d56 	.word	0x08018d56

08012ba8 <std>:
 8012ba8:	2300      	movs	r3, #0
 8012baa:	b510      	push	{r4, lr}
 8012bac:	4604      	mov	r4, r0
 8012bae:	e9c0 3300 	strd	r3, r3, [r0]
 8012bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012bb6:	6083      	str	r3, [r0, #8]
 8012bb8:	8181      	strh	r1, [r0, #12]
 8012bba:	6643      	str	r3, [r0, #100]	; 0x64
 8012bbc:	81c2      	strh	r2, [r0, #14]
 8012bbe:	6183      	str	r3, [r0, #24]
 8012bc0:	4619      	mov	r1, r3
 8012bc2:	2208      	movs	r2, #8
 8012bc4:	305c      	adds	r0, #92	; 0x5c
 8012bc6:	f000 f948 	bl	8012e5a <memset>
 8012bca:	4b0d      	ldr	r3, [pc, #52]	; (8012c00 <std+0x58>)
 8012bcc:	6263      	str	r3, [r4, #36]	; 0x24
 8012bce:	4b0d      	ldr	r3, [pc, #52]	; (8012c04 <std+0x5c>)
 8012bd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8012bd2:	4b0d      	ldr	r3, [pc, #52]	; (8012c08 <std+0x60>)
 8012bd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012bd6:	4b0d      	ldr	r3, [pc, #52]	; (8012c0c <std+0x64>)
 8012bd8:	6323      	str	r3, [r4, #48]	; 0x30
 8012bda:	4b0d      	ldr	r3, [pc, #52]	; (8012c10 <std+0x68>)
 8012bdc:	6224      	str	r4, [r4, #32]
 8012bde:	429c      	cmp	r4, r3
 8012be0:	d006      	beq.n	8012bf0 <std+0x48>
 8012be2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012be6:	4294      	cmp	r4, r2
 8012be8:	d002      	beq.n	8012bf0 <std+0x48>
 8012bea:	33d0      	adds	r3, #208	; 0xd0
 8012bec:	429c      	cmp	r4, r3
 8012bee:	d105      	bne.n	8012bfc <std+0x54>
 8012bf0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bf8:	f000 ba40 	b.w	801307c <__retarget_lock_init_recursive>
 8012bfc:	bd10      	pop	{r4, pc}
 8012bfe:	bf00      	nop
 8012c00:	08012dd5 	.word	0x08012dd5
 8012c04:	08012df7 	.word	0x08012df7
 8012c08:	08012e2f 	.word	0x08012e2f
 8012c0c:	08012e53 	.word	0x08012e53
 8012c10:	20001f74 	.word	0x20001f74

08012c14 <stdio_exit_handler>:
 8012c14:	4a02      	ldr	r2, [pc, #8]	; (8012c20 <stdio_exit_handler+0xc>)
 8012c16:	4903      	ldr	r1, [pc, #12]	; (8012c24 <stdio_exit_handler+0x10>)
 8012c18:	4803      	ldr	r0, [pc, #12]	; (8012c28 <stdio_exit_handler+0x14>)
 8012c1a:	f000 b869 	b.w	8012cf0 <_fwalk_sglue>
 8012c1e:	bf00      	nop
 8012c20:	2000012c 	.word	0x2000012c
 8012c24:	08015299 	.word	0x08015299
 8012c28:	200002a4 	.word	0x200002a4

08012c2c <cleanup_stdio>:
 8012c2c:	6841      	ldr	r1, [r0, #4]
 8012c2e:	4b0c      	ldr	r3, [pc, #48]	; (8012c60 <cleanup_stdio+0x34>)
 8012c30:	4299      	cmp	r1, r3
 8012c32:	b510      	push	{r4, lr}
 8012c34:	4604      	mov	r4, r0
 8012c36:	d001      	beq.n	8012c3c <cleanup_stdio+0x10>
 8012c38:	f002 fb2e 	bl	8015298 <_fflush_r>
 8012c3c:	68a1      	ldr	r1, [r4, #8]
 8012c3e:	4b09      	ldr	r3, [pc, #36]	; (8012c64 <cleanup_stdio+0x38>)
 8012c40:	4299      	cmp	r1, r3
 8012c42:	d002      	beq.n	8012c4a <cleanup_stdio+0x1e>
 8012c44:	4620      	mov	r0, r4
 8012c46:	f002 fb27 	bl	8015298 <_fflush_r>
 8012c4a:	68e1      	ldr	r1, [r4, #12]
 8012c4c:	4b06      	ldr	r3, [pc, #24]	; (8012c68 <cleanup_stdio+0x3c>)
 8012c4e:	4299      	cmp	r1, r3
 8012c50:	d004      	beq.n	8012c5c <cleanup_stdio+0x30>
 8012c52:	4620      	mov	r0, r4
 8012c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c58:	f002 bb1e 	b.w	8015298 <_fflush_r>
 8012c5c:	bd10      	pop	{r4, pc}
 8012c5e:	bf00      	nop
 8012c60:	20001f74 	.word	0x20001f74
 8012c64:	20001fdc 	.word	0x20001fdc
 8012c68:	20002044 	.word	0x20002044

08012c6c <global_stdio_init.part.0>:
 8012c6c:	b510      	push	{r4, lr}
 8012c6e:	4b0b      	ldr	r3, [pc, #44]	; (8012c9c <global_stdio_init.part.0+0x30>)
 8012c70:	4c0b      	ldr	r4, [pc, #44]	; (8012ca0 <global_stdio_init.part.0+0x34>)
 8012c72:	4a0c      	ldr	r2, [pc, #48]	; (8012ca4 <global_stdio_init.part.0+0x38>)
 8012c74:	601a      	str	r2, [r3, #0]
 8012c76:	4620      	mov	r0, r4
 8012c78:	2200      	movs	r2, #0
 8012c7a:	2104      	movs	r1, #4
 8012c7c:	f7ff ff94 	bl	8012ba8 <std>
 8012c80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012c84:	2201      	movs	r2, #1
 8012c86:	2109      	movs	r1, #9
 8012c88:	f7ff ff8e 	bl	8012ba8 <std>
 8012c8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012c90:	2202      	movs	r2, #2
 8012c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c96:	2112      	movs	r1, #18
 8012c98:	f7ff bf86 	b.w	8012ba8 <std>
 8012c9c:	200020ac 	.word	0x200020ac
 8012ca0:	20001f74 	.word	0x20001f74
 8012ca4:	08012c15 	.word	0x08012c15

08012ca8 <__sfp_lock_acquire>:
 8012ca8:	4801      	ldr	r0, [pc, #4]	; (8012cb0 <__sfp_lock_acquire+0x8>)
 8012caa:	f000 b9e8 	b.w	801307e <__retarget_lock_acquire_recursive>
 8012cae:	bf00      	nop
 8012cb0:	200020b5 	.word	0x200020b5

08012cb4 <__sfp_lock_release>:
 8012cb4:	4801      	ldr	r0, [pc, #4]	; (8012cbc <__sfp_lock_release+0x8>)
 8012cb6:	f000 b9e3 	b.w	8013080 <__retarget_lock_release_recursive>
 8012cba:	bf00      	nop
 8012cbc:	200020b5 	.word	0x200020b5

08012cc0 <__sinit>:
 8012cc0:	b510      	push	{r4, lr}
 8012cc2:	4604      	mov	r4, r0
 8012cc4:	f7ff fff0 	bl	8012ca8 <__sfp_lock_acquire>
 8012cc8:	6a23      	ldr	r3, [r4, #32]
 8012cca:	b11b      	cbz	r3, 8012cd4 <__sinit+0x14>
 8012ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cd0:	f7ff bff0 	b.w	8012cb4 <__sfp_lock_release>
 8012cd4:	4b04      	ldr	r3, [pc, #16]	; (8012ce8 <__sinit+0x28>)
 8012cd6:	6223      	str	r3, [r4, #32]
 8012cd8:	4b04      	ldr	r3, [pc, #16]	; (8012cec <__sinit+0x2c>)
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d1f5      	bne.n	8012ccc <__sinit+0xc>
 8012ce0:	f7ff ffc4 	bl	8012c6c <global_stdio_init.part.0>
 8012ce4:	e7f2      	b.n	8012ccc <__sinit+0xc>
 8012ce6:	bf00      	nop
 8012ce8:	08012c2d 	.word	0x08012c2d
 8012cec:	200020ac 	.word	0x200020ac

08012cf0 <_fwalk_sglue>:
 8012cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012cf4:	4607      	mov	r7, r0
 8012cf6:	4688      	mov	r8, r1
 8012cf8:	4614      	mov	r4, r2
 8012cfa:	2600      	movs	r6, #0
 8012cfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012d00:	f1b9 0901 	subs.w	r9, r9, #1
 8012d04:	d505      	bpl.n	8012d12 <_fwalk_sglue+0x22>
 8012d06:	6824      	ldr	r4, [r4, #0]
 8012d08:	2c00      	cmp	r4, #0
 8012d0a:	d1f7      	bne.n	8012cfc <_fwalk_sglue+0xc>
 8012d0c:	4630      	mov	r0, r6
 8012d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d12:	89ab      	ldrh	r3, [r5, #12]
 8012d14:	2b01      	cmp	r3, #1
 8012d16:	d907      	bls.n	8012d28 <_fwalk_sglue+0x38>
 8012d18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d1c:	3301      	adds	r3, #1
 8012d1e:	d003      	beq.n	8012d28 <_fwalk_sglue+0x38>
 8012d20:	4629      	mov	r1, r5
 8012d22:	4638      	mov	r0, r7
 8012d24:	47c0      	blx	r8
 8012d26:	4306      	orrs	r6, r0
 8012d28:	3568      	adds	r5, #104	; 0x68
 8012d2a:	e7e9      	b.n	8012d00 <_fwalk_sglue+0x10>

08012d2c <sniprintf>:
 8012d2c:	b40c      	push	{r2, r3}
 8012d2e:	b530      	push	{r4, r5, lr}
 8012d30:	4b17      	ldr	r3, [pc, #92]	; (8012d90 <sniprintf+0x64>)
 8012d32:	1e0c      	subs	r4, r1, #0
 8012d34:	681d      	ldr	r5, [r3, #0]
 8012d36:	b09d      	sub	sp, #116	; 0x74
 8012d38:	da08      	bge.n	8012d4c <sniprintf+0x20>
 8012d3a:	238b      	movs	r3, #139	; 0x8b
 8012d3c:	602b      	str	r3, [r5, #0]
 8012d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8012d42:	b01d      	add	sp, #116	; 0x74
 8012d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d48:	b002      	add	sp, #8
 8012d4a:	4770      	bx	lr
 8012d4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012d50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012d54:	bf14      	ite	ne
 8012d56:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012d5a:	4623      	moveq	r3, r4
 8012d5c:	9304      	str	r3, [sp, #16]
 8012d5e:	9307      	str	r3, [sp, #28]
 8012d60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d64:	9002      	str	r0, [sp, #8]
 8012d66:	9006      	str	r0, [sp, #24]
 8012d68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012d6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012d6e:	ab21      	add	r3, sp, #132	; 0x84
 8012d70:	a902      	add	r1, sp, #8
 8012d72:	4628      	mov	r0, r5
 8012d74:	9301      	str	r3, [sp, #4]
 8012d76:	f002 f90b 	bl	8014f90 <_svfiprintf_r>
 8012d7a:	1c43      	adds	r3, r0, #1
 8012d7c:	bfbc      	itt	lt
 8012d7e:	238b      	movlt	r3, #139	; 0x8b
 8012d80:	602b      	strlt	r3, [r5, #0]
 8012d82:	2c00      	cmp	r4, #0
 8012d84:	d0dd      	beq.n	8012d42 <sniprintf+0x16>
 8012d86:	9b02      	ldr	r3, [sp, #8]
 8012d88:	2200      	movs	r2, #0
 8012d8a:	701a      	strb	r2, [r3, #0]
 8012d8c:	e7d9      	b.n	8012d42 <sniprintf+0x16>
 8012d8e:	bf00      	nop
 8012d90:	200002f0 	.word	0x200002f0

08012d94 <siprintf>:
 8012d94:	b40e      	push	{r1, r2, r3}
 8012d96:	b500      	push	{lr}
 8012d98:	b09c      	sub	sp, #112	; 0x70
 8012d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8012d9c:	9002      	str	r0, [sp, #8]
 8012d9e:	9006      	str	r0, [sp, #24]
 8012da0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012da4:	4809      	ldr	r0, [pc, #36]	; (8012dcc <siprintf+0x38>)
 8012da6:	9107      	str	r1, [sp, #28]
 8012da8:	9104      	str	r1, [sp, #16]
 8012daa:	4909      	ldr	r1, [pc, #36]	; (8012dd0 <siprintf+0x3c>)
 8012dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8012db0:	9105      	str	r1, [sp, #20]
 8012db2:	6800      	ldr	r0, [r0, #0]
 8012db4:	9301      	str	r3, [sp, #4]
 8012db6:	a902      	add	r1, sp, #8
 8012db8:	f002 f8ea 	bl	8014f90 <_svfiprintf_r>
 8012dbc:	9b02      	ldr	r3, [sp, #8]
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	701a      	strb	r2, [r3, #0]
 8012dc2:	b01c      	add	sp, #112	; 0x70
 8012dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012dc8:	b003      	add	sp, #12
 8012dca:	4770      	bx	lr
 8012dcc:	200002f0 	.word	0x200002f0
 8012dd0:	ffff0208 	.word	0xffff0208

08012dd4 <__sread>:
 8012dd4:	b510      	push	{r4, lr}
 8012dd6:	460c      	mov	r4, r1
 8012dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ddc:	f000 f8f0 	bl	8012fc0 <_read_r>
 8012de0:	2800      	cmp	r0, #0
 8012de2:	bfab      	itete	ge
 8012de4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012de6:	89a3      	ldrhlt	r3, [r4, #12]
 8012de8:	181b      	addge	r3, r3, r0
 8012dea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012dee:	bfac      	ite	ge
 8012df0:	6563      	strge	r3, [r4, #84]	; 0x54
 8012df2:	81a3      	strhlt	r3, [r4, #12]
 8012df4:	bd10      	pop	{r4, pc}

08012df6 <__swrite>:
 8012df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dfa:	461f      	mov	r7, r3
 8012dfc:	898b      	ldrh	r3, [r1, #12]
 8012dfe:	05db      	lsls	r3, r3, #23
 8012e00:	4605      	mov	r5, r0
 8012e02:	460c      	mov	r4, r1
 8012e04:	4616      	mov	r6, r2
 8012e06:	d505      	bpl.n	8012e14 <__swrite+0x1e>
 8012e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e0c:	2302      	movs	r3, #2
 8012e0e:	2200      	movs	r2, #0
 8012e10:	f000 f8c4 	bl	8012f9c <_lseek_r>
 8012e14:	89a3      	ldrh	r3, [r4, #12]
 8012e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012e1e:	81a3      	strh	r3, [r4, #12]
 8012e20:	4632      	mov	r2, r6
 8012e22:	463b      	mov	r3, r7
 8012e24:	4628      	mov	r0, r5
 8012e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e2a:	f000 b8eb 	b.w	8013004 <_write_r>

08012e2e <__sseek>:
 8012e2e:	b510      	push	{r4, lr}
 8012e30:	460c      	mov	r4, r1
 8012e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e36:	f000 f8b1 	bl	8012f9c <_lseek_r>
 8012e3a:	1c43      	adds	r3, r0, #1
 8012e3c:	89a3      	ldrh	r3, [r4, #12]
 8012e3e:	bf15      	itete	ne
 8012e40:	6560      	strne	r0, [r4, #84]	; 0x54
 8012e42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012e46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012e4a:	81a3      	strheq	r3, [r4, #12]
 8012e4c:	bf18      	it	ne
 8012e4e:	81a3      	strhne	r3, [r4, #12]
 8012e50:	bd10      	pop	{r4, pc}

08012e52 <__sclose>:
 8012e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e56:	f000 b891 	b.w	8012f7c <_close_r>

08012e5a <memset>:
 8012e5a:	4402      	add	r2, r0
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	4293      	cmp	r3, r2
 8012e60:	d100      	bne.n	8012e64 <memset+0xa>
 8012e62:	4770      	bx	lr
 8012e64:	f803 1b01 	strb.w	r1, [r3], #1
 8012e68:	e7f9      	b.n	8012e5e <memset+0x4>

08012e6a <strncmp>:
 8012e6a:	b510      	push	{r4, lr}
 8012e6c:	b16a      	cbz	r2, 8012e8a <strncmp+0x20>
 8012e6e:	3901      	subs	r1, #1
 8012e70:	1884      	adds	r4, r0, r2
 8012e72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e76:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012e7a:	429a      	cmp	r2, r3
 8012e7c:	d103      	bne.n	8012e86 <strncmp+0x1c>
 8012e7e:	42a0      	cmp	r0, r4
 8012e80:	d001      	beq.n	8012e86 <strncmp+0x1c>
 8012e82:	2a00      	cmp	r2, #0
 8012e84:	d1f5      	bne.n	8012e72 <strncmp+0x8>
 8012e86:	1ad0      	subs	r0, r2, r3
 8012e88:	bd10      	pop	{r4, pc}
 8012e8a:	4610      	mov	r0, r2
 8012e8c:	e7fc      	b.n	8012e88 <strncmp+0x1e>
	...

08012e90 <strtok>:
 8012e90:	4b16      	ldr	r3, [pc, #88]	; (8012eec <strtok+0x5c>)
 8012e92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012e94:	681e      	ldr	r6, [r3, #0]
 8012e96:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8012e98:	4605      	mov	r5, r0
 8012e9a:	b9fc      	cbnz	r4, 8012edc <strtok+0x4c>
 8012e9c:	2050      	movs	r0, #80	; 0x50
 8012e9e:	9101      	str	r1, [sp, #4]
 8012ea0:	f7fe f848 	bl	8010f34 <malloc>
 8012ea4:	9901      	ldr	r1, [sp, #4]
 8012ea6:	6470      	str	r0, [r6, #68]	; 0x44
 8012ea8:	4602      	mov	r2, r0
 8012eaa:	b920      	cbnz	r0, 8012eb6 <strtok+0x26>
 8012eac:	4b10      	ldr	r3, [pc, #64]	; (8012ef0 <strtok+0x60>)
 8012eae:	4811      	ldr	r0, [pc, #68]	; (8012ef4 <strtok+0x64>)
 8012eb0:	215b      	movs	r1, #91	; 0x5b
 8012eb2:	f000 f90b 	bl	80130cc <__assert_func>
 8012eb6:	e9c0 4400 	strd	r4, r4, [r0]
 8012eba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012ebe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012ec2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8012ec6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8012eca:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8012ece:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8012ed2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8012ed6:	6184      	str	r4, [r0, #24]
 8012ed8:	7704      	strb	r4, [r0, #28]
 8012eda:	6244      	str	r4, [r0, #36]	; 0x24
 8012edc:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8012ede:	2301      	movs	r3, #1
 8012ee0:	4628      	mov	r0, r5
 8012ee2:	b002      	add	sp, #8
 8012ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ee8:	f000 b806 	b.w	8012ef8 <__strtok_r>
 8012eec:	200002f0 	.word	0x200002f0
 8012ef0:	08018ca2 	.word	0x08018ca2
 8012ef4:	08018cb9 	.word	0x08018cb9

08012ef8 <__strtok_r>:
 8012ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012efa:	b908      	cbnz	r0, 8012f00 <__strtok_r+0x8>
 8012efc:	6810      	ldr	r0, [r2, #0]
 8012efe:	b188      	cbz	r0, 8012f24 <__strtok_r+0x2c>
 8012f00:	4604      	mov	r4, r0
 8012f02:	4620      	mov	r0, r4
 8012f04:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012f08:	460f      	mov	r7, r1
 8012f0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012f0e:	b91e      	cbnz	r6, 8012f18 <__strtok_r+0x20>
 8012f10:	b965      	cbnz	r5, 8012f2c <__strtok_r+0x34>
 8012f12:	6015      	str	r5, [r2, #0]
 8012f14:	4628      	mov	r0, r5
 8012f16:	e005      	b.n	8012f24 <__strtok_r+0x2c>
 8012f18:	42b5      	cmp	r5, r6
 8012f1a:	d1f6      	bne.n	8012f0a <__strtok_r+0x12>
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d1f0      	bne.n	8012f02 <__strtok_r+0xa>
 8012f20:	6014      	str	r4, [r2, #0]
 8012f22:	7003      	strb	r3, [r0, #0]
 8012f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f26:	461c      	mov	r4, r3
 8012f28:	e00c      	b.n	8012f44 <__strtok_r+0x4c>
 8012f2a:	b915      	cbnz	r5, 8012f32 <__strtok_r+0x3a>
 8012f2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012f30:	460e      	mov	r6, r1
 8012f32:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012f36:	42ab      	cmp	r3, r5
 8012f38:	d1f7      	bne.n	8012f2a <__strtok_r+0x32>
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d0f3      	beq.n	8012f26 <__strtok_r+0x2e>
 8012f3e:	2300      	movs	r3, #0
 8012f40:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012f44:	6014      	str	r4, [r2, #0]
 8012f46:	e7ed      	b.n	8012f24 <__strtok_r+0x2c>

08012f48 <strstr>:
 8012f48:	780a      	ldrb	r2, [r1, #0]
 8012f4a:	b570      	push	{r4, r5, r6, lr}
 8012f4c:	b96a      	cbnz	r2, 8012f6a <strstr+0x22>
 8012f4e:	bd70      	pop	{r4, r5, r6, pc}
 8012f50:	429a      	cmp	r2, r3
 8012f52:	d109      	bne.n	8012f68 <strstr+0x20>
 8012f54:	460c      	mov	r4, r1
 8012f56:	4605      	mov	r5, r0
 8012f58:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d0f6      	beq.n	8012f4e <strstr+0x6>
 8012f60:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012f64:	429e      	cmp	r6, r3
 8012f66:	d0f7      	beq.n	8012f58 <strstr+0x10>
 8012f68:	3001      	adds	r0, #1
 8012f6a:	7803      	ldrb	r3, [r0, #0]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d1ef      	bne.n	8012f50 <strstr+0x8>
 8012f70:	4618      	mov	r0, r3
 8012f72:	e7ec      	b.n	8012f4e <strstr+0x6>

08012f74 <_localeconv_r>:
 8012f74:	4800      	ldr	r0, [pc, #0]	; (8012f78 <_localeconv_r+0x4>)
 8012f76:	4770      	bx	lr
 8012f78:	20000228 	.word	0x20000228

08012f7c <_close_r>:
 8012f7c:	b538      	push	{r3, r4, r5, lr}
 8012f7e:	4d06      	ldr	r5, [pc, #24]	; (8012f98 <_close_r+0x1c>)
 8012f80:	2300      	movs	r3, #0
 8012f82:	4604      	mov	r4, r0
 8012f84:	4608      	mov	r0, r1
 8012f86:	602b      	str	r3, [r5, #0]
 8012f88:	f7f1 fb29 	bl	80045de <_close>
 8012f8c:	1c43      	adds	r3, r0, #1
 8012f8e:	d102      	bne.n	8012f96 <_close_r+0x1a>
 8012f90:	682b      	ldr	r3, [r5, #0]
 8012f92:	b103      	cbz	r3, 8012f96 <_close_r+0x1a>
 8012f94:	6023      	str	r3, [r4, #0]
 8012f96:	bd38      	pop	{r3, r4, r5, pc}
 8012f98:	200020b0 	.word	0x200020b0

08012f9c <_lseek_r>:
 8012f9c:	b538      	push	{r3, r4, r5, lr}
 8012f9e:	4d07      	ldr	r5, [pc, #28]	; (8012fbc <_lseek_r+0x20>)
 8012fa0:	4604      	mov	r4, r0
 8012fa2:	4608      	mov	r0, r1
 8012fa4:	4611      	mov	r1, r2
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	602a      	str	r2, [r5, #0]
 8012faa:	461a      	mov	r2, r3
 8012fac:	f7f1 fb3e 	bl	800462c <_lseek>
 8012fb0:	1c43      	adds	r3, r0, #1
 8012fb2:	d102      	bne.n	8012fba <_lseek_r+0x1e>
 8012fb4:	682b      	ldr	r3, [r5, #0]
 8012fb6:	b103      	cbz	r3, 8012fba <_lseek_r+0x1e>
 8012fb8:	6023      	str	r3, [r4, #0]
 8012fba:	bd38      	pop	{r3, r4, r5, pc}
 8012fbc:	200020b0 	.word	0x200020b0

08012fc0 <_read_r>:
 8012fc0:	b538      	push	{r3, r4, r5, lr}
 8012fc2:	4d07      	ldr	r5, [pc, #28]	; (8012fe0 <_read_r+0x20>)
 8012fc4:	4604      	mov	r4, r0
 8012fc6:	4608      	mov	r0, r1
 8012fc8:	4611      	mov	r1, r2
 8012fca:	2200      	movs	r2, #0
 8012fcc:	602a      	str	r2, [r5, #0]
 8012fce:	461a      	mov	r2, r3
 8012fd0:	f7f1 facc 	bl	800456c <_read>
 8012fd4:	1c43      	adds	r3, r0, #1
 8012fd6:	d102      	bne.n	8012fde <_read_r+0x1e>
 8012fd8:	682b      	ldr	r3, [r5, #0]
 8012fda:	b103      	cbz	r3, 8012fde <_read_r+0x1e>
 8012fdc:	6023      	str	r3, [r4, #0]
 8012fde:	bd38      	pop	{r3, r4, r5, pc}
 8012fe0:	200020b0 	.word	0x200020b0

08012fe4 <_sbrk_r>:
 8012fe4:	b538      	push	{r3, r4, r5, lr}
 8012fe6:	4d06      	ldr	r5, [pc, #24]	; (8013000 <_sbrk_r+0x1c>)
 8012fe8:	2300      	movs	r3, #0
 8012fea:	4604      	mov	r4, r0
 8012fec:	4608      	mov	r0, r1
 8012fee:	602b      	str	r3, [r5, #0]
 8012ff0:	f7f1 fb2a 	bl	8004648 <_sbrk>
 8012ff4:	1c43      	adds	r3, r0, #1
 8012ff6:	d102      	bne.n	8012ffe <_sbrk_r+0x1a>
 8012ff8:	682b      	ldr	r3, [r5, #0]
 8012ffa:	b103      	cbz	r3, 8012ffe <_sbrk_r+0x1a>
 8012ffc:	6023      	str	r3, [r4, #0]
 8012ffe:	bd38      	pop	{r3, r4, r5, pc}
 8013000:	200020b0 	.word	0x200020b0

08013004 <_write_r>:
 8013004:	b538      	push	{r3, r4, r5, lr}
 8013006:	4d07      	ldr	r5, [pc, #28]	; (8013024 <_write_r+0x20>)
 8013008:	4604      	mov	r4, r0
 801300a:	4608      	mov	r0, r1
 801300c:	4611      	mov	r1, r2
 801300e:	2200      	movs	r2, #0
 8013010:	602a      	str	r2, [r5, #0]
 8013012:	461a      	mov	r2, r3
 8013014:	f7f1 fac7 	bl	80045a6 <_write>
 8013018:	1c43      	adds	r3, r0, #1
 801301a:	d102      	bne.n	8013022 <_write_r+0x1e>
 801301c:	682b      	ldr	r3, [r5, #0]
 801301e:	b103      	cbz	r3, 8013022 <_write_r+0x1e>
 8013020:	6023      	str	r3, [r4, #0]
 8013022:	bd38      	pop	{r3, r4, r5, pc}
 8013024:	200020b0 	.word	0x200020b0

08013028 <__errno>:
 8013028:	4b01      	ldr	r3, [pc, #4]	; (8013030 <__errno+0x8>)
 801302a:	6818      	ldr	r0, [r3, #0]
 801302c:	4770      	bx	lr
 801302e:	bf00      	nop
 8013030:	200002f0 	.word	0x200002f0

08013034 <__libc_init_array>:
 8013034:	b570      	push	{r4, r5, r6, lr}
 8013036:	4d0d      	ldr	r5, [pc, #52]	; (801306c <__libc_init_array+0x38>)
 8013038:	4c0d      	ldr	r4, [pc, #52]	; (8013070 <__libc_init_array+0x3c>)
 801303a:	1b64      	subs	r4, r4, r5
 801303c:	10a4      	asrs	r4, r4, #2
 801303e:	2600      	movs	r6, #0
 8013040:	42a6      	cmp	r6, r4
 8013042:	d109      	bne.n	8013058 <__libc_init_array+0x24>
 8013044:	4d0b      	ldr	r5, [pc, #44]	; (8013074 <__libc_init_array+0x40>)
 8013046:	4c0c      	ldr	r4, [pc, #48]	; (8013078 <__libc_init_array+0x44>)
 8013048:	f003 fe38 	bl	8016cbc <_init>
 801304c:	1b64      	subs	r4, r4, r5
 801304e:	10a4      	asrs	r4, r4, #2
 8013050:	2600      	movs	r6, #0
 8013052:	42a6      	cmp	r6, r4
 8013054:	d105      	bne.n	8013062 <__libc_init_array+0x2e>
 8013056:	bd70      	pop	{r4, r5, r6, pc}
 8013058:	f855 3b04 	ldr.w	r3, [r5], #4
 801305c:	4798      	blx	r3
 801305e:	3601      	adds	r6, #1
 8013060:	e7ee      	b.n	8013040 <__libc_init_array+0xc>
 8013062:	f855 3b04 	ldr.w	r3, [r5], #4
 8013066:	4798      	blx	r3
 8013068:	3601      	adds	r6, #1
 801306a:	e7f2      	b.n	8013052 <__libc_init_array+0x1e>
 801306c:	08019190 	.word	0x08019190
 8013070:	08019190 	.word	0x08019190
 8013074:	08019190 	.word	0x08019190
 8013078:	08019194 	.word	0x08019194

0801307c <__retarget_lock_init_recursive>:
 801307c:	4770      	bx	lr

0801307e <__retarget_lock_acquire_recursive>:
 801307e:	4770      	bx	lr

08013080 <__retarget_lock_release_recursive>:
 8013080:	4770      	bx	lr

08013082 <strcpy>:
 8013082:	4603      	mov	r3, r0
 8013084:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013088:	f803 2b01 	strb.w	r2, [r3], #1
 801308c:	2a00      	cmp	r2, #0
 801308e:	d1f9      	bne.n	8013084 <strcpy+0x2>
 8013090:	4770      	bx	lr

08013092 <memcpy>:
 8013092:	440a      	add	r2, r1
 8013094:	4291      	cmp	r1, r2
 8013096:	f100 33ff 	add.w	r3, r0, #4294967295
 801309a:	d100      	bne.n	801309e <memcpy+0xc>
 801309c:	4770      	bx	lr
 801309e:	b510      	push	{r4, lr}
 80130a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80130a8:	4291      	cmp	r1, r2
 80130aa:	d1f9      	bne.n	80130a0 <memcpy+0xe>
 80130ac:	bd10      	pop	{r4, pc}
	...

080130b0 <nan>:
 80130b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80130b8 <nan+0x8>
 80130b4:	4770      	bx	lr
 80130b6:	bf00      	nop
 80130b8:	00000000 	.word	0x00000000
 80130bc:	7ff80000 	.word	0x7ff80000

080130c0 <nanf>:
 80130c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80130c8 <nanf+0x8>
 80130c4:	4770      	bx	lr
 80130c6:	bf00      	nop
 80130c8:	7fc00000 	.word	0x7fc00000

080130cc <__assert_func>:
 80130cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80130ce:	4614      	mov	r4, r2
 80130d0:	461a      	mov	r2, r3
 80130d2:	4b09      	ldr	r3, [pc, #36]	; (80130f8 <__assert_func+0x2c>)
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	4605      	mov	r5, r0
 80130d8:	68d8      	ldr	r0, [r3, #12]
 80130da:	b14c      	cbz	r4, 80130f0 <__assert_func+0x24>
 80130dc:	4b07      	ldr	r3, [pc, #28]	; (80130fc <__assert_func+0x30>)
 80130de:	9100      	str	r1, [sp, #0]
 80130e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80130e4:	4906      	ldr	r1, [pc, #24]	; (8013100 <__assert_func+0x34>)
 80130e6:	462b      	mov	r3, r5
 80130e8:	f002 f8fe 	bl	80152e8 <fiprintf>
 80130ec:	f002 f928 	bl	8015340 <abort>
 80130f0:	4b04      	ldr	r3, [pc, #16]	; (8013104 <__assert_func+0x38>)
 80130f2:	461c      	mov	r4, r3
 80130f4:	e7f3      	b.n	80130de <__assert_func+0x12>
 80130f6:	bf00      	nop
 80130f8:	200002f0 	.word	0x200002f0
 80130fc:	08018d1b 	.word	0x08018d1b
 8013100:	08018d28 	.word	0x08018d28
 8013104:	08018d56 	.word	0x08018d56

08013108 <quorem>:
 8013108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801310c:	6903      	ldr	r3, [r0, #16]
 801310e:	690c      	ldr	r4, [r1, #16]
 8013110:	42a3      	cmp	r3, r4
 8013112:	4607      	mov	r7, r0
 8013114:	db7e      	blt.n	8013214 <quorem+0x10c>
 8013116:	3c01      	subs	r4, #1
 8013118:	f101 0814 	add.w	r8, r1, #20
 801311c:	f100 0514 	add.w	r5, r0, #20
 8013120:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013124:	9301      	str	r3, [sp, #4]
 8013126:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801312a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801312e:	3301      	adds	r3, #1
 8013130:	429a      	cmp	r2, r3
 8013132:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013136:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801313a:	fbb2 f6f3 	udiv	r6, r2, r3
 801313e:	d331      	bcc.n	80131a4 <quorem+0x9c>
 8013140:	f04f 0e00 	mov.w	lr, #0
 8013144:	4640      	mov	r0, r8
 8013146:	46ac      	mov	ip, r5
 8013148:	46f2      	mov	sl, lr
 801314a:	f850 2b04 	ldr.w	r2, [r0], #4
 801314e:	b293      	uxth	r3, r2
 8013150:	fb06 e303 	mla	r3, r6, r3, lr
 8013154:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013158:	0c1a      	lsrs	r2, r3, #16
 801315a:	b29b      	uxth	r3, r3
 801315c:	ebaa 0303 	sub.w	r3, sl, r3
 8013160:	f8dc a000 	ldr.w	sl, [ip]
 8013164:	fa13 f38a 	uxtah	r3, r3, sl
 8013168:	fb06 220e 	mla	r2, r6, lr, r2
 801316c:	9300      	str	r3, [sp, #0]
 801316e:	9b00      	ldr	r3, [sp, #0]
 8013170:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013174:	b292      	uxth	r2, r2
 8013176:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801317a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801317e:	f8bd 3000 	ldrh.w	r3, [sp]
 8013182:	4581      	cmp	r9, r0
 8013184:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013188:	f84c 3b04 	str.w	r3, [ip], #4
 801318c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013190:	d2db      	bcs.n	801314a <quorem+0x42>
 8013192:	f855 300b 	ldr.w	r3, [r5, fp]
 8013196:	b92b      	cbnz	r3, 80131a4 <quorem+0x9c>
 8013198:	9b01      	ldr	r3, [sp, #4]
 801319a:	3b04      	subs	r3, #4
 801319c:	429d      	cmp	r5, r3
 801319e:	461a      	mov	r2, r3
 80131a0:	d32c      	bcc.n	80131fc <quorem+0xf4>
 80131a2:	613c      	str	r4, [r7, #16]
 80131a4:	4638      	mov	r0, r7
 80131a6:	f001 fca5 	bl	8014af4 <__mcmp>
 80131aa:	2800      	cmp	r0, #0
 80131ac:	db22      	blt.n	80131f4 <quorem+0xec>
 80131ae:	3601      	adds	r6, #1
 80131b0:	4629      	mov	r1, r5
 80131b2:	2000      	movs	r0, #0
 80131b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80131b8:	f8d1 c000 	ldr.w	ip, [r1]
 80131bc:	b293      	uxth	r3, r2
 80131be:	1ac3      	subs	r3, r0, r3
 80131c0:	0c12      	lsrs	r2, r2, #16
 80131c2:	fa13 f38c 	uxtah	r3, r3, ip
 80131c6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80131ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80131ce:	b29b      	uxth	r3, r3
 80131d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80131d4:	45c1      	cmp	r9, r8
 80131d6:	f841 3b04 	str.w	r3, [r1], #4
 80131da:	ea4f 4022 	mov.w	r0, r2, asr #16
 80131de:	d2e9      	bcs.n	80131b4 <quorem+0xac>
 80131e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80131e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80131e8:	b922      	cbnz	r2, 80131f4 <quorem+0xec>
 80131ea:	3b04      	subs	r3, #4
 80131ec:	429d      	cmp	r5, r3
 80131ee:	461a      	mov	r2, r3
 80131f0:	d30a      	bcc.n	8013208 <quorem+0x100>
 80131f2:	613c      	str	r4, [r7, #16]
 80131f4:	4630      	mov	r0, r6
 80131f6:	b003      	add	sp, #12
 80131f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131fc:	6812      	ldr	r2, [r2, #0]
 80131fe:	3b04      	subs	r3, #4
 8013200:	2a00      	cmp	r2, #0
 8013202:	d1ce      	bne.n	80131a2 <quorem+0x9a>
 8013204:	3c01      	subs	r4, #1
 8013206:	e7c9      	b.n	801319c <quorem+0x94>
 8013208:	6812      	ldr	r2, [r2, #0]
 801320a:	3b04      	subs	r3, #4
 801320c:	2a00      	cmp	r2, #0
 801320e:	d1f0      	bne.n	80131f2 <quorem+0xea>
 8013210:	3c01      	subs	r4, #1
 8013212:	e7eb      	b.n	80131ec <quorem+0xe4>
 8013214:	2000      	movs	r0, #0
 8013216:	e7ee      	b.n	80131f6 <quorem+0xee>

08013218 <_dtoa_r>:
 8013218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801321c:	ed2d 8b04 	vpush	{d8-d9}
 8013220:	69c5      	ldr	r5, [r0, #28]
 8013222:	b093      	sub	sp, #76	; 0x4c
 8013224:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013228:	ec57 6b10 	vmov	r6, r7, d0
 801322c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013230:	9107      	str	r1, [sp, #28]
 8013232:	4604      	mov	r4, r0
 8013234:	920a      	str	r2, [sp, #40]	; 0x28
 8013236:	930d      	str	r3, [sp, #52]	; 0x34
 8013238:	b975      	cbnz	r5, 8013258 <_dtoa_r+0x40>
 801323a:	2010      	movs	r0, #16
 801323c:	f7fd fe7a 	bl	8010f34 <malloc>
 8013240:	4602      	mov	r2, r0
 8013242:	61e0      	str	r0, [r4, #28]
 8013244:	b920      	cbnz	r0, 8013250 <_dtoa_r+0x38>
 8013246:	4bae      	ldr	r3, [pc, #696]	; (8013500 <_dtoa_r+0x2e8>)
 8013248:	21ef      	movs	r1, #239	; 0xef
 801324a:	48ae      	ldr	r0, [pc, #696]	; (8013504 <_dtoa_r+0x2ec>)
 801324c:	f7ff ff3e 	bl	80130cc <__assert_func>
 8013250:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013254:	6005      	str	r5, [r0, #0]
 8013256:	60c5      	str	r5, [r0, #12]
 8013258:	69e3      	ldr	r3, [r4, #28]
 801325a:	6819      	ldr	r1, [r3, #0]
 801325c:	b151      	cbz	r1, 8013274 <_dtoa_r+0x5c>
 801325e:	685a      	ldr	r2, [r3, #4]
 8013260:	604a      	str	r2, [r1, #4]
 8013262:	2301      	movs	r3, #1
 8013264:	4093      	lsls	r3, r2
 8013266:	608b      	str	r3, [r1, #8]
 8013268:	4620      	mov	r0, r4
 801326a:	f001 f9bd 	bl	80145e8 <_Bfree>
 801326e:	69e3      	ldr	r3, [r4, #28]
 8013270:	2200      	movs	r2, #0
 8013272:	601a      	str	r2, [r3, #0]
 8013274:	1e3b      	subs	r3, r7, #0
 8013276:	bfbb      	ittet	lt
 8013278:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801327c:	9303      	strlt	r3, [sp, #12]
 801327e:	2300      	movge	r3, #0
 8013280:	2201      	movlt	r2, #1
 8013282:	bfac      	ite	ge
 8013284:	f8c8 3000 	strge.w	r3, [r8]
 8013288:	f8c8 2000 	strlt.w	r2, [r8]
 801328c:	4b9e      	ldr	r3, [pc, #632]	; (8013508 <_dtoa_r+0x2f0>)
 801328e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8013292:	ea33 0308 	bics.w	r3, r3, r8
 8013296:	d11b      	bne.n	80132d0 <_dtoa_r+0xb8>
 8013298:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801329a:	f242 730f 	movw	r3, #9999	; 0x270f
 801329e:	6013      	str	r3, [r2, #0]
 80132a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80132a4:	4333      	orrs	r3, r6
 80132a6:	f000 8593 	beq.w	8013dd0 <_dtoa_r+0xbb8>
 80132aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132ac:	b963      	cbnz	r3, 80132c8 <_dtoa_r+0xb0>
 80132ae:	4b97      	ldr	r3, [pc, #604]	; (801350c <_dtoa_r+0x2f4>)
 80132b0:	e027      	b.n	8013302 <_dtoa_r+0xea>
 80132b2:	4b97      	ldr	r3, [pc, #604]	; (8013510 <_dtoa_r+0x2f8>)
 80132b4:	9300      	str	r3, [sp, #0]
 80132b6:	3308      	adds	r3, #8
 80132b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80132ba:	6013      	str	r3, [r2, #0]
 80132bc:	9800      	ldr	r0, [sp, #0]
 80132be:	b013      	add	sp, #76	; 0x4c
 80132c0:	ecbd 8b04 	vpop	{d8-d9}
 80132c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132c8:	4b90      	ldr	r3, [pc, #576]	; (801350c <_dtoa_r+0x2f4>)
 80132ca:	9300      	str	r3, [sp, #0]
 80132cc:	3303      	adds	r3, #3
 80132ce:	e7f3      	b.n	80132b8 <_dtoa_r+0xa0>
 80132d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80132d4:	2200      	movs	r2, #0
 80132d6:	ec51 0b17 	vmov	r0, r1, d7
 80132da:	eeb0 8a47 	vmov.f32	s16, s14
 80132de:	eef0 8a67 	vmov.f32	s17, s15
 80132e2:	2300      	movs	r3, #0
 80132e4:	f7ed fc00 	bl	8000ae8 <__aeabi_dcmpeq>
 80132e8:	4681      	mov	r9, r0
 80132ea:	b160      	cbz	r0, 8013306 <_dtoa_r+0xee>
 80132ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80132ee:	2301      	movs	r3, #1
 80132f0:	6013      	str	r3, [r2, #0]
 80132f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	f000 8568 	beq.w	8013dca <_dtoa_r+0xbb2>
 80132fa:	4b86      	ldr	r3, [pc, #536]	; (8013514 <_dtoa_r+0x2fc>)
 80132fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80132fe:	6013      	str	r3, [r2, #0]
 8013300:	3b01      	subs	r3, #1
 8013302:	9300      	str	r3, [sp, #0]
 8013304:	e7da      	b.n	80132bc <_dtoa_r+0xa4>
 8013306:	aa10      	add	r2, sp, #64	; 0x40
 8013308:	a911      	add	r1, sp, #68	; 0x44
 801330a:	4620      	mov	r0, r4
 801330c:	eeb0 0a48 	vmov.f32	s0, s16
 8013310:	eef0 0a68 	vmov.f32	s1, s17
 8013314:	f001 fd04 	bl	8014d20 <__d2b>
 8013318:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801331c:	4682      	mov	sl, r0
 801331e:	2d00      	cmp	r5, #0
 8013320:	d07f      	beq.n	8013422 <_dtoa_r+0x20a>
 8013322:	ee18 3a90 	vmov	r3, s17
 8013326:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801332a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801332e:	ec51 0b18 	vmov	r0, r1, d8
 8013332:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013336:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801333a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801333e:	4619      	mov	r1, r3
 8013340:	2200      	movs	r2, #0
 8013342:	4b75      	ldr	r3, [pc, #468]	; (8013518 <_dtoa_r+0x300>)
 8013344:	f7ec ffb0 	bl	80002a8 <__aeabi_dsub>
 8013348:	a367      	add	r3, pc, #412	; (adr r3, 80134e8 <_dtoa_r+0x2d0>)
 801334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801334e:	f7ed f963 	bl	8000618 <__aeabi_dmul>
 8013352:	a367      	add	r3, pc, #412	; (adr r3, 80134f0 <_dtoa_r+0x2d8>)
 8013354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013358:	f7ec ffa8 	bl	80002ac <__adddf3>
 801335c:	4606      	mov	r6, r0
 801335e:	4628      	mov	r0, r5
 8013360:	460f      	mov	r7, r1
 8013362:	f7ed f8ef 	bl	8000544 <__aeabi_i2d>
 8013366:	a364      	add	r3, pc, #400	; (adr r3, 80134f8 <_dtoa_r+0x2e0>)
 8013368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801336c:	f7ed f954 	bl	8000618 <__aeabi_dmul>
 8013370:	4602      	mov	r2, r0
 8013372:	460b      	mov	r3, r1
 8013374:	4630      	mov	r0, r6
 8013376:	4639      	mov	r1, r7
 8013378:	f7ec ff98 	bl	80002ac <__adddf3>
 801337c:	4606      	mov	r6, r0
 801337e:	460f      	mov	r7, r1
 8013380:	f7ed fbfa 	bl	8000b78 <__aeabi_d2iz>
 8013384:	2200      	movs	r2, #0
 8013386:	4683      	mov	fp, r0
 8013388:	2300      	movs	r3, #0
 801338a:	4630      	mov	r0, r6
 801338c:	4639      	mov	r1, r7
 801338e:	f7ed fbb5 	bl	8000afc <__aeabi_dcmplt>
 8013392:	b148      	cbz	r0, 80133a8 <_dtoa_r+0x190>
 8013394:	4658      	mov	r0, fp
 8013396:	f7ed f8d5 	bl	8000544 <__aeabi_i2d>
 801339a:	4632      	mov	r2, r6
 801339c:	463b      	mov	r3, r7
 801339e:	f7ed fba3 	bl	8000ae8 <__aeabi_dcmpeq>
 80133a2:	b908      	cbnz	r0, 80133a8 <_dtoa_r+0x190>
 80133a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80133a8:	f1bb 0f16 	cmp.w	fp, #22
 80133ac:	d857      	bhi.n	801345e <_dtoa_r+0x246>
 80133ae:	4b5b      	ldr	r3, [pc, #364]	; (801351c <_dtoa_r+0x304>)
 80133b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80133b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b8:	ec51 0b18 	vmov	r0, r1, d8
 80133bc:	f7ed fb9e 	bl	8000afc <__aeabi_dcmplt>
 80133c0:	2800      	cmp	r0, #0
 80133c2:	d04e      	beq.n	8013462 <_dtoa_r+0x24a>
 80133c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80133c8:	2300      	movs	r3, #0
 80133ca:	930c      	str	r3, [sp, #48]	; 0x30
 80133cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80133ce:	1b5b      	subs	r3, r3, r5
 80133d0:	1e5a      	subs	r2, r3, #1
 80133d2:	bf45      	ittet	mi
 80133d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80133d8:	9305      	strmi	r3, [sp, #20]
 80133da:	2300      	movpl	r3, #0
 80133dc:	2300      	movmi	r3, #0
 80133de:	9206      	str	r2, [sp, #24]
 80133e0:	bf54      	ite	pl
 80133e2:	9305      	strpl	r3, [sp, #20]
 80133e4:	9306      	strmi	r3, [sp, #24]
 80133e6:	f1bb 0f00 	cmp.w	fp, #0
 80133ea:	db3c      	blt.n	8013466 <_dtoa_r+0x24e>
 80133ec:	9b06      	ldr	r3, [sp, #24]
 80133ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80133f2:	445b      	add	r3, fp
 80133f4:	9306      	str	r3, [sp, #24]
 80133f6:	2300      	movs	r3, #0
 80133f8:	9308      	str	r3, [sp, #32]
 80133fa:	9b07      	ldr	r3, [sp, #28]
 80133fc:	2b09      	cmp	r3, #9
 80133fe:	d868      	bhi.n	80134d2 <_dtoa_r+0x2ba>
 8013400:	2b05      	cmp	r3, #5
 8013402:	bfc4      	itt	gt
 8013404:	3b04      	subgt	r3, #4
 8013406:	9307      	strgt	r3, [sp, #28]
 8013408:	9b07      	ldr	r3, [sp, #28]
 801340a:	f1a3 0302 	sub.w	r3, r3, #2
 801340e:	bfcc      	ite	gt
 8013410:	2500      	movgt	r5, #0
 8013412:	2501      	movle	r5, #1
 8013414:	2b03      	cmp	r3, #3
 8013416:	f200 8085 	bhi.w	8013524 <_dtoa_r+0x30c>
 801341a:	e8df f003 	tbb	[pc, r3]
 801341e:	3b2e      	.short	0x3b2e
 8013420:	5839      	.short	0x5839
 8013422:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013426:	441d      	add	r5, r3
 8013428:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801342c:	2b20      	cmp	r3, #32
 801342e:	bfc1      	itttt	gt
 8013430:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013434:	fa08 f803 	lslgt.w	r8, r8, r3
 8013438:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801343c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8013440:	bfd6      	itet	le
 8013442:	f1c3 0320 	rsble	r3, r3, #32
 8013446:	ea48 0003 	orrgt.w	r0, r8, r3
 801344a:	fa06 f003 	lslle.w	r0, r6, r3
 801344e:	f7ed f869 	bl	8000524 <__aeabi_ui2d>
 8013452:	2201      	movs	r2, #1
 8013454:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013458:	3d01      	subs	r5, #1
 801345a:	920e      	str	r2, [sp, #56]	; 0x38
 801345c:	e76f      	b.n	801333e <_dtoa_r+0x126>
 801345e:	2301      	movs	r3, #1
 8013460:	e7b3      	b.n	80133ca <_dtoa_r+0x1b2>
 8013462:	900c      	str	r0, [sp, #48]	; 0x30
 8013464:	e7b2      	b.n	80133cc <_dtoa_r+0x1b4>
 8013466:	9b05      	ldr	r3, [sp, #20]
 8013468:	eba3 030b 	sub.w	r3, r3, fp
 801346c:	9305      	str	r3, [sp, #20]
 801346e:	f1cb 0300 	rsb	r3, fp, #0
 8013472:	9308      	str	r3, [sp, #32]
 8013474:	2300      	movs	r3, #0
 8013476:	930b      	str	r3, [sp, #44]	; 0x2c
 8013478:	e7bf      	b.n	80133fa <_dtoa_r+0x1e2>
 801347a:	2300      	movs	r3, #0
 801347c:	9309      	str	r3, [sp, #36]	; 0x24
 801347e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013480:	2b00      	cmp	r3, #0
 8013482:	dc52      	bgt.n	801352a <_dtoa_r+0x312>
 8013484:	2301      	movs	r3, #1
 8013486:	9301      	str	r3, [sp, #4]
 8013488:	9304      	str	r3, [sp, #16]
 801348a:	461a      	mov	r2, r3
 801348c:	920a      	str	r2, [sp, #40]	; 0x28
 801348e:	e00b      	b.n	80134a8 <_dtoa_r+0x290>
 8013490:	2301      	movs	r3, #1
 8013492:	e7f3      	b.n	801347c <_dtoa_r+0x264>
 8013494:	2300      	movs	r3, #0
 8013496:	9309      	str	r3, [sp, #36]	; 0x24
 8013498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801349a:	445b      	add	r3, fp
 801349c:	9301      	str	r3, [sp, #4]
 801349e:	3301      	adds	r3, #1
 80134a0:	2b01      	cmp	r3, #1
 80134a2:	9304      	str	r3, [sp, #16]
 80134a4:	bfb8      	it	lt
 80134a6:	2301      	movlt	r3, #1
 80134a8:	69e0      	ldr	r0, [r4, #28]
 80134aa:	2100      	movs	r1, #0
 80134ac:	2204      	movs	r2, #4
 80134ae:	f102 0614 	add.w	r6, r2, #20
 80134b2:	429e      	cmp	r6, r3
 80134b4:	d93d      	bls.n	8013532 <_dtoa_r+0x31a>
 80134b6:	6041      	str	r1, [r0, #4]
 80134b8:	4620      	mov	r0, r4
 80134ba:	f001 f855 	bl	8014568 <_Balloc>
 80134be:	9000      	str	r0, [sp, #0]
 80134c0:	2800      	cmp	r0, #0
 80134c2:	d139      	bne.n	8013538 <_dtoa_r+0x320>
 80134c4:	4b16      	ldr	r3, [pc, #88]	; (8013520 <_dtoa_r+0x308>)
 80134c6:	4602      	mov	r2, r0
 80134c8:	f240 11af 	movw	r1, #431	; 0x1af
 80134cc:	e6bd      	b.n	801324a <_dtoa_r+0x32>
 80134ce:	2301      	movs	r3, #1
 80134d0:	e7e1      	b.n	8013496 <_dtoa_r+0x27e>
 80134d2:	2501      	movs	r5, #1
 80134d4:	2300      	movs	r3, #0
 80134d6:	9307      	str	r3, [sp, #28]
 80134d8:	9509      	str	r5, [sp, #36]	; 0x24
 80134da:	f04f 33ff 	mov.w	r3, #4294967295
 80134de:	9301      	str	r3, [sp, #4]
 80134e0:	9304      	str	r3, [sp, #16]
 80134e2:	2200      	movs	r2, #0
 80134e4:	2312      	movs	r3, #18
 80134e6:	e7d1      	b.n	801348c <_dtoa_r+0x274>
 80134e8:	636f4361 	.word	0x636f4361
 80134ec:	3fd287a7 	.word	0x3fd287a7
 80134f0:	8b60c8b3 	.word	0x8b60c8b3
 80134f4:	3fc68a28 	.word	0x3fc68a28
 80134f8:	509f79fb 	.word	0x509f79fb
 80134fc:	3fd34413 	.word	0x3fd34413
 8013500:	08018ca2 	.word	0x08018ca2
 8013504:	08018d64 	.word	0x08018d64
 8013508:	7ff00000 	.word	0x7ff00000
 801350c:	08018d60 	.word	0x08018d60
 8013510:	08018d57 	.word	0x08018d57
 8013514:	08018c7a 	.word	0x08018c7a
 8013518:	3ff80000 	.word	0x3ff80000
 801351c:	08018eb0 	.word	0x08018eb0
 8013520:	08018dbc 	.word	0x08018dbc
 8013524:	2301      	movs	r3, #1
 8013526:	9309      	str	r3, [sp, #36]	; 0x24
 8013528:	e7d7      	b.n	80134da <_dtoa_r+0x2c2>
 801352a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801352c:	9301      	str	r3, [sp, #4]
 801352e:	9304      	str	r3, [sp, #16]
 8013530:	e7ba      	b.n	80134a8 <_dtoa_r+0x290>
 8013532:	3101      	adds	r1, #1
 8013534:	0052      	lsls	r2, r2, #1
 8013536:	e7ba      	b.n	80134ae <_dtoa_r+0x296>
 8013538:	69e3      	ldr	r3, [r4, #28]
 801353a:	9a00      	ldr	r2, [sp, #0]
 801353c:	601a      	str	r2, [r3, #0]
 801353e:	9b04      	ldr	r3, [sp, #16]
 8013540:	2b0e      	cmp	r3, #14
 8013542:	f200 80a8 	bhi.w	8013696 <_dtoa_r+0x47e>
 8013546:	2d00      	cmp	r5, #0
 8013548:	f000 80a5 	beq.w	8013696 <_dtoa_r+0x47e>
 801354c:	f1bb 0f00 	cmp.w	fp, #0
 8013550:	dd38      	ble.n	80135c4 <_dtoa_r+0x3ac>
 8013552:	4bc0      	ldr	r3, [pc, #768]	; (8013854 <_dtoa_r+0x63c>)
 8013554:	f00b 020f 	and.w	r2, fp, #15
 8013558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801355c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013560:	e9d3 6700 	ldrd	r6, r7, [r3]
 8013564:	ea4f 182b 	mov.w	r8, fp, asr #4
 8013568:	d019      	beq.n	801359e <_dtoa_r+0x386>
 801356a:	4bbb      	ldr	r3, [pc, #748]	; (8013858 <_dtoa_r+0x640>)
 801356c:	ec51 0b18 	vmov	r0, r1, d8
 8013570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013574:	f7ed f97a 	bl	800086c <__aeabi_ddiv>
 8013578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801357c:	f008 080f 	and.w	r8, r8, #15
 8013580:	2503      	movs	r5, #3
 8013582:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013858 <_dtoa_r+0x640>
 8013586:	f1b8 0f00 	cmp.w	r8, #0
 801358a:	d10a      	bne.n	80135a2 <_dtoa_r+0x38a>
 801358c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013590:	4632      	mov	r2, r6
 8013592:	463b      	mov	r3, r7
 8013594:	f7ed f96a 	bl	800086c <__aeabi_ddiv>
 8013598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801359c:	e02b      	b.n	80135f6 <_dtoa_r+0x3de>
 801359e:	2502      	movs	r5, #2
 80135a0:	e7ef      	b.n	8013582 <_dtoa_r+0x36a>
 80135a2:	f018 0f01 	tst.w	r8, #1
 80135a6:	d008      	beq.n	80135ba <_dtoa_r+0x3a2>
 80135a8:	4630      	mov	r0, r6
 80135aa:	4639      	mov	r1, r7
 80135ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 80135b0:	f7ed f832 	bl	8000618 <__aeabi_dmul>
 80135b4:	3501      	adds	r5, #1
 80135b6:	4606      	mov	r6, r0
 80135b8:	460f      	mov	r7, r1
 80135ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80135be:	f109 0908 	add.w	r9, r9, #8
 80135c2:	e7e0      	b.n	8013586 <_dtoa_r+0x36e>
 80135c4:	f000 809f 	beq.w	8013706 <_dtoa_r+0x4ee>
 80135c8:	f1cb 0600 	rsb	r6, fp, #0
 80135cc:	4ba1      	ldr	r3, [pc, #644]	; (8013854 <_dtoa_r+0x63c>)
 80135ce:	4fa2      	ldr	r7, [pc, #648]	; (8013858 <_dtoa_r+0x640>)
 80135d0:	f006 020f 	and.w	r2, r6, #15
 80135d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80135d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135dc:	ec51 0b18 	vmov	r0, r1, d8
 80135e0:	f7ed f81a 	bl	8000618 <__aeabi_dmul>
 80135e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80135e8:	1136      	asrs	r6, r6, #4
 80135ea:	2300      	movs	r3, #0
 80135ec:	2502      	movs	r5, #2
 80135ee:	2e00      	cmp	r6, #0
 80135f0:	d17e      	bne.n	80136f0 <_dtoa_r+0x4d8>
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d1d0      	bne.n	8013598 <_dtoa_r+0x380>
 80135f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	f000 8084 	beq.w	801370a <_dtoa_r+0x4f2>
 8013602:	4b96      	ldr	r3, [pc, #600]	; (801385c <_dtoa_r+0x644>)
 8013604:	2200      	movs	r2, #0
 8013606:	4640      	mov	r0, r8
 8013608:	4649      	mov	r1, r9
 801360a:	f7ed fa77 	bl	8000afc <__aeabi_dcmplt>
 801360e:	2800      	cmp	r0, #0
 8013610:	d07b      	beq.n	801370a <_dtoa_r+0x4f2>
 8013612:	9b04      	ldr	r3, [sp, #16]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d078      	beq.n	801370a <_dtoa_r+0x4f2>
 8013618:	9b01      	ldr	r3, [sp, #4]
 801361a:	2b00      	cmp	r3, #0
 801361c:	dd39      	ble.n	8013692 <_dtoa_r+0x47a>
 801361e:	4b90      	ldr	r3, [pc, #576]	; (8013860 <_dtoa_r+0x648>)
 8013620:	2200      	movs	r2, #0
 8013622:	4640      	mov	r0, r8
 8013624:	4649      	mov	r1, r9
 8013626:	f7ec fff7 	bl	8000618 <__aeabi_dmul>
 801362a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801362e:	9e01      	ldr	r6, [sp, #4]
 8013630:	f10b 37ff 	add.w	r7, fp, #4294967295
 8013634:	3501      	adds	r5, #1
 8013636:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801363a:	4628      	mov	r0, r5
 801363c:	f7ec ff82 	bl	8000544 <__aeabi_i2d>
 8013640:	4642      	mov	r2, r8
 8013642:	464b      	mov	r3, r9
 8013644:	f7ec ffe8 	bl	8000618 <__aeabi_dmul>
 8013648:	4b86      	ldr	r3, [pc, #536]	; (8013864 <_dtoa_r+0x64c>)
 801364a:	2200      	movs	r2, #0
 801364c:	f7ec fe2e 	bl	80002ac <__adddf3>
 8013650:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013658:	9303      	str	r3, [sp, #12]
 801365a:	2e00      	cmp	r6, #0
 801365c:	d158      	bne.n	8013710 <_dtoa_r+0x4f8>
 801365e:	4b82      	ldr	r3, [pc, #520]	; (8013868 <_dtoa_r+0x650>)
 8013660:	2200      	movs	r2, #0
 8013662:	4640      	mov	r0, r8
 8013664:	4649      	mov	r1, r9
 8013666:	f7ec fe1f 	bl	80002a8 <__aeabi_dsub>
 801366a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801366e:	4680      	mov	r8, r0
 8013670:	4689      	mov	r9, r1
 8013672:	f7ed fa61 	bl	8000b38 <__aeabi_dcmpgt>
 8013676:	2800      	cmp	r0, #0
 8013678:	f040 8296 	bne.w	8013ba8 <_dtoa_r+0x990>
 801367c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013680:	4640      	mov	r0, r8
 8013682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013686:	4649      	mov	r1, r9
 8013688:	f7ed fa38 	bl	8000afc <__aeabi_dcmplt>
 801368c:	2800      	cmp	r0, #0
 801368e:	f040 8289 	bne.w	8013ba4 <_dtoa_r+0x98c>
 8013692:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013696:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013698:	2b00      	cmp	r3, #0
 801369a:	f2c0 814e 	blt.w	801393a <_dtoa_r+0x722>
 801369e:	f1bb 0f0e 	cmp.w	fp, #14
 80136a2:	f300 814a 	bgt.w	801393a <_dtoa_r+0x722>
 80136a6:	4b6b      	ldr	r3, [pc, #428]	; (8013854 <_dtoa_r+0x63c>)
 80136a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80136ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80136b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	f280 80dc 	bge.w	8013870 <_dtoa_r+0x658>
 80136b8:	9b04      	ldr	r3, [sp, #16]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	f300 80d8 	bgt.w	8013870 <_dtoa_r+0x658>
 80136c0:	f040 826f 	bne.w	8013ba2 <_dtoa_r+0x98a>
 80136c4:	4b68      	ldr	r3, [pc, #416]	; (8013868 <_dtoa_r+0x650>)
 80136c6:	2200      	movs	r2, #0
 80136c8:	4640      	mov	r0, r8
 80136ca:	4649      	mov	r1, r9
 80136cc:	f7ec ffa4 	bl	8000618 <__aeabi_dmul>
 80136d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80136d4:	f7ed fa26 	bl	8000b24 <__aeabi_dcmpge>
 80136d8:	9e04      	ldr	r6, [sp, #16]
 80136da:	4637      	mov	r7, r6
 80136dc:	2800      	cmp	r0, #0
 80136de:	f040 8245 	bne.w	8013b6c <_dtoa_r+0x954>
 80136e2:	9d00      	ldr	r5, [sp, #0]
 80136e4:	2331      	movs	r3, #49	; 0x31
 80136e6:	f805 3b01 	strb.w	r3, [r5], #1
 80136ea:	f10b 0b01 	add.w	fp, fp, #1
 80136ee:	e241      	b.n	8013b74 <_dtoa_r+0x95c>
 80136f0:	07f2      	lsls	r2, r6, #31
 80136f2:	d505      	bpl.n	8013700 <_dtoa_r+0x4e8>
 80136f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80136f8:	f7ec ff8e 	bl	8000618 <__aeabi_dmul>
 80136fc:	3501      	adds	r5, #1
 80136fe:	2301      	movs	r3, #1
 8013700:	1076      	asrs	r6, r6, #1
 8013702:	3708      	adds	r7, #8
 8013704:	e773      	b.n	80135ee <_dtoa_r+0x3d6>
 8013706:	2502      	movs	r5, #2
 8013708:	e775      	b.n	80135f6 <_dtoa_r+0x3de>
 801370a:	9e04      	ldr	r6, [sp, #16]
 801370c:	465f      	mov	r7, fp
 801370e:	e792      	b.n	8013636 <_dtoa_r+0x41e>
 8013710:	9900      	ldr	r1, [sp, #0]
 8013712:	4b50      	ldr	r3, [pc, #320]	; (8013854 <_dtoa_r+0x63c>)
 8013714:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013718:	4431      	add	r1, r6
 801371a:	9102      	str	r1, [sp, #8]
 801371c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801371e:	eeb0 9a47 	vmov.f32	s18, s14
 8013722:	eef0 9a67 	vmov.f32	s19, s15
 8013726:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801372a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801372e:	2900      	cmp	r1, #0
 8013730:	d044      	beq.n	80137bc <_dtoa_r+0x5a4>
 8013732:	494e      	ldr	r1, [pc, #312]	; (801386c <_dtoa_r+0x654>)
 8013734:	2000      	movs	r0, #0
 8013736:	f7ed f899 	bl	800086c <__aeabi_ddiv>
 801373a:	ec53 2b19 	vmov	r2, r3, d9
 801373e:	f7ec fdb3 	bl	80002a8 <__aeabi_dsub>
 8013742:	9d00      	ldr	r5, [sp, #0]
 8013744:	ec41 0b19 	vmov	d9, r0, r1
 8013748:	4649      	mov	r1, r9
 801374a:	4640      	mov	r0, r8
 801374c:	f7ed fa14 	bl	8000b78 <__aeabi_d2iz>
 8013750:	4606      	mov	r6, r0
 8013752:	f7ec fef7 	bl	8000544 <__aeabi_i2d>
 8013756:	4602      	mov	r2, r0
 8013758:	460b      	mov	r3, r1
 801375a:	4640      	mov	r0, r8
 801375c:	4649      	mov	r1, r9
 801375e:	f7ec fda3 	bl	80002a8 <__aeabi_dsub>
 8013762:	3630      	adds	r6, #48	; 0x30
 8013764:	f805 6b01 	strb.w	r6, [r5], #1
 8013768:	ec53 2b19 	vmov	r2, r3, d9
 801376c:	4680      	mov	r8, r0
 801376e:	4689      	mov	r9, r1
 8013770:	f7ed f9c4 	bl	8000afc <__aeabi_dcmplt>
 8013774:	2800      	cmp	r0, #0
 8013776:	d164      	bne.n	8013842 <_dtoa_r+0x62a>
 8013778:	4642      	mov	r2, r8
 801377a:	464b      	mov	r3, r9
 801377c:	4937      	ldr	r1, [pc, #220]	; (801385c <_dtoa_r+0x644>)
 801377e:	2000      	movs	r0, #0
 8013780:	f7ec fd92 	bl	80002a8 <__aeabi_dsub>
 8013784:	ec53 2b19 	vmov	r2, r3, d9
 8013788:	f7ed f9b8 	bl	8000afc <__aeabi_dcmplt>
 801378c:	2800      	cmp	r0, #0
 801378e:	f040 80b6 	bne.w	80138fe <_dtoa_r+0x6e6>
 8013792:	9b02      	ldr	r3, [sp, #8]
 8013794:	429d      	cmp	r5, r3
 8013796:	f43f af7c 	beq.w	8013692 <_dtoa_r+0x47a>
 801379a:	4b31      	ldr	r3, [pc, #196]	; (8013860 <_dtoa_r+0x648>)
 801379c:	ec51 0b19 	vmov	r0, r1, d9
 80137a0:	2200      	movs	r2, #0
 80137a2:	f7ec ff39 	bl	8000618 <__aeabi_dmul>
 80137a6:	4b2e      	ldr	r3, [pc, #184]	; (8013860 <_dtoa_r+0x648>)
 80137a8:	ec41 0b19 	vmov	d9, r0, r1
 80137ac:	2200      	movs	r2, #0
 80137ae:	4640      	mov	r0, r8
 80137b0:	4649      	mov	r1, r9
 80137b2:	f7ec ff31 	bl	8000618 <__aeabi_dmul>
 80137b6:	4680      	mov	r8, r0
 80137b8:	4689      	mov	r9, r1
 80137ba:	e7c5      	b.n	8013748 <_dtoa_r+0x530>
 80137bc:	ec51 0b17 	vmov	r0, r1, d7
 80137c0:	f7ec ff2a 	bl	8000618 <__aeabi_dmul>
 80137c4:	9b02      	ldr	r3, [sp, #8]
 80137c6:	9d00      	ldr	r5, [sp, #0]
 80137c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80137ca:	ec41 0b19 	vmov	d9, r0, r1
 80137ce:	4649      	mov	r1, r9
 80137d0:	4640      	mov	r0, r8
 80137d2:	f7ed f9d1 	bl	8000b78 <__aeabi_d2iz>
 80137d6:	4606      	mov	r6, r0
 80137d8:	f7ec feb4 	bl	8000544 <__aeabi_i2d>
 80137dc:	3630      	adds	r6, #48	; 0x30
 80137de:	4602      	mov	r2, r0
 80137e0:	460b      	mov	r3, r1
 80137e2:	4640      	mov	r0, r8
 80137e4:	4649      	mov	r1, r9
 80137e6:	f7ec fd5f 	bl	80002a8 <__aeabi_dsub>
 80137ea:	f805 6b01 	strb.w	r6, [r5], #1
 80137ee:	9b02      	ldr	r3, [sp, #8]
 80137f0:	429d      	cmp	r5, r3
 80137f2:	4680      	mov	r8, r0
 80137f4:	4689      	mov	r9, r1
 80137f6:	f04f 0200 	mov.w	r2, #0
 80137fa:	d124      	bne.n	8013846 <_dtoa_r+0x62e>
 80137fc:	4b1b      	ldr	r3, [pc, #108]	; (801386c <_dtoa_r+0x654>)
 80137fe:	ec51 0b19 	vmov	r0, r1, d9
 8013802:	f7ec fd53 	bl	80002ac <__adddf3>
 8013806:	4602      	mov	r2, r0
 8013808:	460b      	mov	r3, r1
 801380a:	4640      	mov	r0, r8
 801380c:	4649      	mov	r1, r9
 801380e:	f7ed f993 	bl	8000b38 <__aeabi_dcmpgt>
 8013812:	2800      	cmp	r0, #0
 8013814:	d173      	bne.n	80138fe <_dtoa_r+0x6e6>
 8013816:	ec53 2b19 	vmov	r2, r3, d9
 801381a:	4914      	ldr	r1, [pc, #80]	; (801386c <_dtoa_r+0x654>)
 801381c:	2000      	movs	r0, #0
 801381e:	f7ec fd43 	bl	80002a8 <__aeabi_dsub>
 8013822:	4602      	mov	r2, r0
 8013824:	460b      	mov	r3, r1
 8013826:	4640      	mov	r0, r8
 8013828:	4649      	mov	r1, r9
 801382a:	f7ed f967 	bl	8000afc <__aeabi_dcmplt>
 801382e:	2800      	cmp	r0, #0
 8013830:	f43f af2f 	beq.w	8013692 <_dtoa_r+0x47a>
 8013834:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013836:	1e6b      	subs	r3, r5, #1
 8013838:	930f      	str	r3, [sp, #60]	; 0x3c
 801383a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801383e:	2b30      	cmp	r3, #48	; 0x30
 8013840:	d0f8      	beq.n	8013834 <_dtoa_r+0x61c>
 8013842:	46bb      	mov	fp, r7
 8013844:	e04a      	b.n	80138dc <_dtoa_r+0x6c4>
 8013846:	4b06      	ldr	r3, [pc, #24]	; (8013860 <_dtoa_r+0x648>)
 8013848:	f7ec fee6 	bl	8000618 <__aeabi_dmul>
 801384c:	4680      	mov	r8, r0
 801384e:	4689      	mov	r9, r1
 8013850:	e7bd      	b.n	80137ce <_dtoa_r+0x5b6>
 8013852:	bf00      	nop
 8013854:	08018eb0 	.word	0x08018eb0
 8013858:	08018e88 	.word	0x08018e88
 801385c:	3ff00000 	.word	0x3ff00000
 8013860:	40240000 	.word	0x40240000
 8013864:	401c0000 	.word	0x401c0000
 8013868:	40140000 	.word	0x40140000
 801386c:	3fe00000 	.word	0x3fe00000
 8013870:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013874:	9d00      	ldr	r5, [sp, #0]
 8013876:	4642      	mov	r2, r8
 8013878:	464b      	mov	r3, r9
 801387a:	4630      	mov	r0, r6
 801387c:	4639      	mov	r1, r7
 801387e:	f7ec fff5 	bl	800086c <__aeabi_ddiv>
 8013882:	f7ed f979 	bl	8000b78 <__aeabi_d2iz>
 8013886:	9001      	str	r0, [sp, #4]
 8013888:	f7ec fe5c 	bl	8000544 <__aeabi_i2d>
 801388c:	4642      	mov	r2, r8
 801388e:	464b      	mov	r3, r9
 8013890:	f7ec fec2 	bl	8000618 <__aeabi_dmul>
 8013894:	4602      	mov	r2, r0
 8013896:	460b      	mov	r3, r1
 8013898:	4630      	mov	r0, r6
 801389a:	4639      	mov	r1, r7
 801389c:	f7ec fd04 	bl	80002a8 <__aeabi_dsub>
 80138a0:	9e01      	ldr	r6, [sp, #4]
 80138a2:	9f04      	ldr	r7, [sp, #16]
 80138a4:	3630      	adds	r6, #48	; 0x30
 80138a6:	f805 6b01 	strb.w	r6, [r5], #1
 80138aa:	9e00      	ldr	r6, [sp, #0]
 80138ac:	1bae      	subs	r6, r5, r6
 80138ae:	42b7      	cmp	r7, r6
 80138b0:	4602      	mov	r2, r0
 80138b2:	460b      	mov	r3, r1
 80138b4:	d134      	bne.n	8013920 <_dtoa_r+0x708>
 80138b6:	f7ec fcf9 	bl	80002ac <__adddf3>
 80138ba:	4642      	mov	r2, r8
 80138bc:	464b      	mov	r3, r9
 80138be:	4606      	mov	r6, r0
 80138c0:	460f      	mov	r7, r1
 80138c2:	f7ed f939 	bl	8000b38 <__aeabi_dcmpgt>
 80138c6:	b9c8      	cbnz	r0, 80138fc <_dtoa_r+0x6e4>
 80138c8:	4642      	mov	r2, r8
 80138ca:	464b      	mov	r3, r9
 80138cc:	4630      	mov	r0, r6
 80138ce:	4639      	mov	r1, r7
 80138d0:	f7ed f90a 	bl	8000ae8 <__aeabi_dcmpeq>
 80138d4:	b110      	cbz	r0, 80138dc <_dtoa_r+0x6c4>
 80138d6:	9b01      	ldr	r3, [sp, #4]
 80138d8:	07db      	lsls	r3, r3, #31
 80138da:	d40f      	bmi.n	80138fc <_dtoa_r+0x6e4>
 80138dc:	4651      	mov	r1, sl
 80138de:	4620      	mov	r0, r4
 80138e0:	f000 fe82 	bl	80145e8 <_Bfree>
 80138e4:	2300      	movs	r3, #0
 80138e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80138e8:	702b      	strb	r3, [r5, #0]
 80138ea:	f10b 0301 	add.w	r3, fp, #1
 80138ee:	6013      	str	r3, [r2, #0]
 80138f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	f43f ace2 	beq.w	80132bc <_dtoa_r+0xa4>
 80138f8:	601d      	str	r5, [r3, #0]
 80138fa:	e4df      	b.n	80132bc <_dtoa_r+0xa4>
 80138fc:	465f      	mov	r7, fp
 80138fe:	462b      	mov	r3, r5
 8013900:	461d      	mov	r5, r3
 8013902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013906:	2a39      	cmp	r2, #57	; 0x39
 8013908:	d106      	bne.n	8013918 <_dtoa_r+0x700>
 801390a:	9a00      	ldr	r2, [sp, #0]
 801390c:	429a      	cmp	r2, r3
 801390e:	d1f7      	bne.n	8013900 <_dtoa_r+0x6e8>
 8013910:	9900      	ldr	r1, [sp, #0]
 8013912:	2230      	movs	r2, #48	; 0x30
 8013914:	3701      	adds	r7, #1
 8013916:	700a      	strb	r2, [r1, #0]
 8013918:	781a      	ldrb	r2, [r3, #0]
 801391a:	3201      	adds	r2, #1
 801391c:	701a      	strb	r2, [r3, #0]
 801391e:	e790      	b.n	8013842 <_dtoa_r+0x62a>
 8013920:	4ba3      	ldr	r3, [pc, #652]	; (8013bb0 <_dtoa_r+0x998>)
 8013922:	2200      	movs	r2, #0
 8013924:	f7ec fe78 	bl	8000618 <__aeabi_dmul>
 8013928:	2200      	movs	r2, #0
 801392a:	2300      	movs	r3, #0
 801392c:	4606      	mov	r6, r0
 801392e:	460f      	mov	r7, r1
 8013930:	f7ed f8da 	bl	8000ae8 <__aeabi_dcmpeq>
 8013934:	2800      	cmp	r0, #0
 8013936:	d09e      	beq.n	8013876 <_dtoa_r+0x65e>
 8013938:	e7d0      	b.n	80138dc <_dtoa_r+0x6c4>
 801393a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801393c:	2a00      	cmp	r2, #0
 801393e:	f000 80ca 	beq.w	8013ad6 <_dtoa_r+0x8be>
 8013942:	9a07      	ldr	r2, [sp, #28]
 8013944:	2a01      	cmp	r2, #1
 8013946:	f300 80ad 	bgt.w	8013aa4 <_dtoa_r+0x88c>
 801394a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801394c:	2a00      	cmp	r2, #0
 801394e:	f000 80a5 	beq.w	8013a9c <_dtoa_r+0x884>
 8013952:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013956:	9e08      	ldr	r6, [sp, #32]
 8013958:	9d05      	ldr	r5, [sp, #20]
 801395a:	9a05      	ldr	r2, [sp, #20]
 801395c:	441a      	add	r2, r3
 801395e:	9205      	str	r2, [sp, #20]
 8013960:	9a06      	ldr	r2, [sp, #24]
 8013962:	2101      	movs	r1, #1
 8013964:	441a      	add	r2, r3
 8013966:	4620      	mov	r0, r4
 8013968:	9206      	str	r2, [sp, #24]
 801396a:	f000 ff3d 	bl	80147e8 <__i2b>
 801396e:	4607      	mov	r7, r0
 8013970:	b165      	cbz	r5, 801398c <_dtoa_r+0x774>
 8013972:	9b06      	ldr	r3, [sp, #24]
 8013974:	2b00      	cmp	r3, #0
 8013976:	dd09      	ble.n	801398c <_dtoa_r+0x774>
 8013978:	42ab      	cmp	r3, r5
 801397a:	9a05      	ldr	r2, [sp, #20]
 801397c:	bfa8      	it	ge
 801397e:	462b      	movge	r3, r5
 8013980:	1ad2      	subs	r2, r2, r3
 8013982:	9205      	str	r2, [sp, #20]
 8013984:	9a06      	ldr	r2, [sp, #24]
 8013986:	1aed      	subs	r5, r5, r3
 8013988:	1ad3      	subs	r3, r2, r3
 801398a:	9306      	str	r3, [sp, #24]
 801398c:	9b08      	ldr	r3, [sp, #32]
 801398e:	b1f3      	cbz	r3, 80139ce <_dtoa_r+0x7b6>
 8013990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013992:	2b00      	cmp	r3, #0
 8013994:	f000 80a3 	beq.w	8013ade <_dtoa_r+0x8c6>
 8013998:	2e00      	cmp	r6, #0
 801399a:	dd10      	ble.n	80139be <_dtoa_r+0x7a6>
 801399c:	4639      	mov	r1, r7
 801399e:	4632      	mov	r2, r6
 80139a0:	4620      	mov	r0, r4
 80139a2:	f000 ffe1 	bl	8014968 <__pow5mult>
 80139a6:	4652      	mov	r2, sl
 80139a8:	4601      	mov	r1, r0
 80139aa:	4607      	mov	r7, r0
 80139ac:	4620      	mov	r0, r4
 80139ae:	f000 ff31 	bl	8014814 <__multiply>
 80139b2:	4651      	mov	r1, sl
 80139b4:	4680      	mov	r8, r0
 80139b6:	4620      	mov	r0, r4
 80139b8:	f000 fe16 	bl	80145e8 <_Bfree>
 80139bc:	46c2      	mov	sl, r8
 80139be:	9b08      	ldr	r3, [sp, #32]
 80139c0:	1b9a      	subs	r2, r3, r6
 80139c2:	d004      	beq.n	80139ce <_dtoa_r+0x7b6>
 80139c4:	4651      	mov	r1, sl
 80139c6:	4620      	mov	r0, r4
 80139c8:	f000 ffce 	bl	8014968 <__pow5mult>
 80139cc:	4682      	mov	sl, r0
 80139ce:	2101      	movs	r1, #1
 80139d0:	4620      	mov	r0, r4
 80139d2:	f000 ff09 	bl	80147e8 <__i2b>
 80139d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80139d8:	2b00      	cmp	r3, #0
 80139da:	4606      	mov	r6, r0
 80139dc:	f340 8081 	ble.w	8013ae2 <_dtoa_r+0x8ca>
 80139e0:	461a      	mov	r2, r3
 80139e2:	4601      	mov	r1, r0
 80139e4:	4620      	mov	r0, r4
 80139e6:	f000 ffbf 	bl	8014968 <__pow5mult>
 80139ea:	9b07      	ldr	r3, [sp, #28]
 80139ec:	2b01      	cmp	r3, #1
 80139ee:	4606      	mov	r6, r0
 80139f0:	dd7a      	ble.n	8013ae8 <_dtoa_r+0x8d0>
 80139f2:	f04f 0800 	mov.w	r8, #0
 80139f6:	6933      	ldr	r3, [r6, #16]
 80139f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80139fc:	6918      	ldr	r0, [r3, #16]
 80139fe:	f000 fea5 	bl	801474c <__hi0bits>
 8013a02:	f1c0 0020 	rsb	r0, r0, #32
 8013a06:	9b06      	ldr	r3, [sp, #24]
 8013a08:	4418      	add	r0, r3
 8013a0a:	f010 001f 	ands.w	r0, r0, #31
 8013a0e:	f000 8094 	beq.w	8013b3a <_dtoa_r+0x922>
 8013a12:	f1c0 0320 	rsb	r3, r0, #32
 8013a16:	2b04      	cmp	r3, #4
 8013a18:	f340 8085 	ble.w	8013b26 <_dtoa_r+0x90e>
 8013a1c:	9b05      	ldr	r3, [sp, #20]
 8013a1e:	f1c0 001c 	rsb	r0, r0, #28
 8013a22:	4403      	add	r3, r0
 8013a24:	9305      	str	r3, [sp, #20]
 8013a26:	9b06      	ldr	r3, [sp, #24]
 8013a28:	4403      	add	r3, r0
 8013a2a:	4405      	add	r5, r0
 8013a2c:	9306      	str	r3, [sp, #24]
 8013a2e:	9b05      	ldr	r3, [sp, #20]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	dd05      	ble.n	8013a40 <_dtoa_r+0x828>
 8013a34:	4651      	mov	r1, sl
 8013a36:	461a      	mov	r2, r3
 8013a38:	4620      	mov	r0, r4
 8013a3a:	f000 ffef 	bl	8014a1c <__lshift>
 8013a3e:	4682      	mov	sl, r0
 8013a40:	9b06      	ldr	r3, [sp, #24]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	dd05      	ble.n	8013a52 <_dtoa_r+0x83a>
 8013a46:	4631      	mov	r1, r6
 8013a48:	461a      	mov	r2, r3
 8013a4a:	4620      	mov	r0, r4
 8013a4c:	f000 ffe6 	bl	8014a1c <__lshift>
 8013a50:	4606      	mov	r6, r0
 8013a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d072      	beq.n	8013b3e <_dtoa_r+0x926>
 8013a58:	4631      	mov	r1, r6
 8013a5a:	4650      	mov	r0, sl
 8013a5c:	f001 f84a 	bl	8014af4 <__mcmp>
 8013a60:	2800      	cmp	r0, #0
 8013a62:	da6c      	bge.n	8013b3e <_dtoa_r+0x926>
 8013a64:	2300      	movs	r3, #0
 8013a66:	4651      	mov	r1, sl
 8013a68:	220a      	movs	r2, #10
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	f000 fdde 	bl	801462c <__multadd>
 8013a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013a76:	4682      	mov	sl, r0
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	f000 81b0 	beq.w	8013dde <_dtoa_r+0xbc6>
 8013a7e:	2300      	movs	r3, #0
 8013a80:	4639      	mov	r1, r7
 8013a82:	220a      	movs	r2, #10
 8013a84:	4620      	mov	r0, r4
 8013a86:	f000 fdd1 	bl	801462c <__multadd>
 8013a8a:	9b01      	ldr	r3, [sp, #4]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	4607      	mov	r7, r0
 8013a90:	f300 8096 	bgt.w	8013bc0 <_dtoa_r+0x9a8>
 8013a94:	9b07      	ldr	r3, [sp, #28]
 8013a96:	2b02      	cmp	r3, #2
 8013a98:	dc59      	bgt.n	8013b4e <_dtoa_r+0x936>
 8013a9a:	e091      	b.n	8013bc0 <_dtoa_r+0x9a8>
 8013a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013a9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013aa2:	e758      	b.n	8013956 <_dtoa_r+0x73e>
 8013aa4:	9b04      	ldr	r3, [sp, #16]
 8013aa6:	1e5e      	subs	r6, r3, #1
 8013aa8:	9b08      	ldr	r3, [sp, #32]
 8013aaa:	42b3      	cmp	r3, r6
 8013aac:	bfbf      	itttt	lt
 8013aae:	9b08      	ldrlt	r3, [sp, #32]
 8013ab0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013ab2:	9608      	strlt	r6, [sp, #32]
 8013ab4:	1af3      	sublt	r3, r6, r3
 8013ab6:	bfb4      	ite	lt
 8013ab8:	18d2      	addlt	r2, r2, r3
 8013aba:	1b9e      	subge	r6, r3, r6
 8013abc:	9b04      	ldr	r3, [sp, #16]
 8013abe:	bfbc      	itt	lt
 8013ac0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8013ac2:	2600      	movlt	r6, #0
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	bfb7      	itett	lt
 8013ac8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8013acc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013ad0:	1a9d      	sublt	r5, r3, r2
 8013ad2:	2300      	movlt	r3, #0
 8013ad4:	e741      	b.n	801395a <_dtoa_r+0x742>
 8013ad6:	9e08      	ldr	r6, [sp, #32]
 8013ad8:	9d05      	ldr	r5, [sp, #20]
 8013ada:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013adc:	e748      	b.n	8013970 <_dtoa_r+0x758>
 8013ade:	9a08      	ldr	r2, [sp, #32]
 8013ae0:	e770      	b.n	80139c4 <_dtoa_r+0x7ac>
 8013ae2:	9b07      	ldr	r3, [sp, #28]
 8013ae4:	2b01      	cmp	r3, #1
 8013ae6:	dc19      	bgt.n	8013b1c <_dtoa_r+0x904>
 8013ae8:	9b02      	ldr	r3, [sp, #8]
 8013aea:	b9bb      	cbnz	r3, 8013b1c <_dtoa_r+0x904>
 8013aec:	9b03      	ldr	r3, [sp, #12]
 8013aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013af2:	b99b      	cbnz	r3, 8013b1c <_dtoa_r+0x904>
 8013af4:	9b03      	ldr	r3, [sp, #12]
 8013af6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013afa:	0d1b      	lsrs	r3, r3, #20
 8013afc:	051b      	lsls	r3, r3, #20
 8013afe:	b183      	cbz	r3, 8013b22 <_dtoa_r+0x90a>
 8013b00:	9b05      	ldr	r3, [sp, #20]
 8013b02:	3301      	adds	r3, #1
 8013b04:	9305      	str	r3, [sp, #20]
 8013b06:	9b06      	ldr	r3, [sp, #24]
 8013b08:	3301      	adds	r3, #1
 8013b0a:	9306      	str	r3, [sp, #24]
 8013b0c:	f04f 0801 	mov.w	r8, #1
 8013b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	f47f af6f 	bne.w	80139f6 <_dtoa_r+0x7de>
 8013b18:	2001      	movs	r0, #1
 8013b1a:	e774      	b.n	8013a06 <_dtoa_r+0x7ee>
 8013b1c:	f04f 0800 	mov.w	r8, #0
 8013b20:	e7f6      	b.n	8013b10 <_dtoa_r+0x8f8>
 8013b22:	4698      	mov	r8, r3
 8013b24:	e7f4      	b.n	8013b10 <_dtoa_r+0x8f8>
 8013b26:	d082      	beq.n	8013a2e <_dtoa_r+0x816>
 8013b28:	9a05      	ldr	r2, [sp, #20]
 8013b2a:	331c      	adds	r3, #28
 8013b2c:	441a      	add	r2, r3
 8013b2e:	9205      	str	r2, [sp, #20]
 8013b30:	9a06      	ldr	r2, [sp, #24]
 8013b32:	441a      	add	r2, r3
 8013b34:	441d      	add	r5, r3
 8013b36:	9206      	str	r2, [sp, #24]
 8013b38:	e779      	b.n	8013a2e <_dtoa_r+0x816>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	e7f4      	b.n	8013b28 <_dtoa_r+0x910>
 8013b3e:	9b04      	ldr	r3, [sp, #16]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	dc37      	bgt.n	8013bb4 <_dtoa_r+0x99c>
 8013b44:	9b07      	ldr	r3, [sp, #28]
 8013b46:	2b02      	cmp	r3, #2
 8013b48:	dd34      	ble.n	8013bb4 <_dtoa_r+0x99c>
 8013b4a:	9b04      	ldr	r3, [sp, #16]
 8013b4c:	9301      	str	r3, [sp, #4]
 8013b4e:	9b01      	ldr	r3, [sp, #4]
 8013b50:	b963      	cbnz	r3, 8013b6c <_dtoa_r+0x954>
 8013b52:	4631      	mov	r1, r6
 8013b54:	2205      	movs	r2, #5
 8013b56:	4620      	mov	r0, r4
 8013b58:	f000 fd68 	bl	801462c <__multadd>
 8013b5c:	4601      	mov	r1, r0
 8013b5e:	4606      	mov	r6, r0
 8013b60:	4650      	mov	r0, sl
 8013b62:	f000 ffc7 	bl	8014af4 <__mcmp>
 8013b66:	2800      	cmp	r0, #0
 8013b68:	f73f adbb 	bgt.w	80136e2 <_dtoa_r+0x4ca>
 8013b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b6e:	9d00      	ldr	r5, [sp, #0]
 8013b70:	ea6f 0b03 	mvn.w	fp, r3
 8013b74:	f04f 0800 	mov.w	r8, #0
 8013b78:	4631      	mov	r1, r6
 8013b7a:	4620      	mov	r0, r4
 8013b7c:	f000 fd34 	bl	80145e8 <_Bfree>
 8013b80:	2f00      	cmp	r7, #0
 8013b82:	f43f aeab 	beq.w	80138dc <_dtoa_r+0x6c4>
 8013b86:	f1b8 0f00 	cmp.w	r8, #0
 8013b8a:	d005      	beq.n	8013b98 <_dtoa_r+0x980>
 8013b8c:	45b8      	cmp	r8, r7
 8013b8e:	d003      	beq.n	8013b98 <_dtoa_r+0x980>
 8013b90:	4641      	mov	r1, r8
 8013b92:	4620      	mov	r0, r4
 8013b94:	f000 fd28 	bl	80145e8 <_Bfree>
 8013b98:	4639      	mov	r1, r7
 8013b9a:	4620      	mov	r0, r4
 8013b9c:	f000 fd24 	bl	80145e8 <_Bfree>
 8013ba0:	e69c      	b.n	80138dc <_dtoa_r+0x6c4>
 8013ba2:	2600      	movs	r6, #0
 8013ba4:	4637      	mov	r7, r6
 8013ba6:	e7e1      	b.n	8013b6c <_dtoa_r+0x954>
 8013ba8:	46bb      	mov	fp, r7
 8013baa:	4637      	mov	r7, r6
 8013bac:	e599      	b.n	80136e2 <_dtoa_r+0x4ca>
 8013bae:	bf00      	nop
 8013bb0:	40240000 	.word	0x40240000
 8013bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	f000 80c8 	beq.w	8013d4c <_dtoa_r+0xb34>
 8013bbc:	9b04      	ldr	r3, [sp, #16]
 8013bbe:	9301      	str	r3, [sp, #4]
 8013bc0:	2d00      	cmp	r5, #0
 8013bc2:	dd05      	ble.n	8013bd0 <_dtoa_r+0x9b8>
 8013bc4:	4639      	mov	r1, r7
 8013bc6:	462a      	mov	r2, r5
 8013bc8:	4620      	mov	r0, r4
 8013bca:	f000 ff27 	bl	8014a1c <__lshift>
 8013bce:	4607      	mov	r7, r0
 8013bd0:	f1b8 0f00 	cmp.w	r8, #0
 8013bd4:	d05b      	beq.n	8013c8e <_dtoa_r+0xa76>
 8013bd6:	6879      	ldr	r1, [r7, #4]
 8013bd8:	4620      	mov	r0, r4
 8013bda:	f000 fcc5 	bl	8014568 <_Balloc>
 8013bde:	4605      	mov	r5, r0
 8013be0:	b928      	cbnz	r0, 8013bee <_dtoa_r+0x9d6>
 8013be2:	4b83      	ldr	r3, [pc, #524]	; (8013df0 <_dtoa_r+0xbd8>)
 8013be4:	4602      	mov	r2, r0
 8013be6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8013bea:	f7ff bb2e 	b.w	801324a <_dtoa_r+0x32>
 8013bee:	693a      	ldr	r2, [r7, #16]
 8013bf0:	3202      	adds	r2, #2
 8013bf2:	0092      	lsls	r2, r2, #2
 8013bf4:	f107 010c 	add.w	r1, r7, #12
 8013bf8:	300c      	adds	r0, #12
 8013bfa:	f7ff fa4a 	bl	8013092 <memcpy>
 8013bfe:	2201      	movs	r2, #1
 8013c00:	4629      	mov	r1, r5
 8013c02:	4620      	mov	r0, r4
 8013c04:	f000 ff0a 	bl	8014a1c <__lshift>
 8013c08:	9b00      	ldr	r3, [sp, #0]
 8013c0a:	3301      	adds	r3, #1
 8013c0c:	9304      	str	r3, [sp, #16]
 8013c0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c12:	4413      	add	r3, r2
 8013c14:	9308      	str	r3, [sp, #32]
 8013c16:	9b02      	ldr	r3, [sp, #8]
 8013c18:	f003 0301 	and.w	r3, r3, #1
 8013c1c:	46b8      	mov	r8, r7
 8013c1e:	9306      	str	r3, [sp, #24]
 8013c20:	4607      	mov	r7, r0
 8013c22:	9b04      	ldr	r3, [sp, #16]
 8013c24:	4631      	mov	r1, r6
 8013c26:	3b01      	subs	r3, #1
 8013c28:	4650      	mov	r0, sl
 8013c2a:	9301      	str	r3, [sp, #4]
 8013c2c:	f7ff fa6c 	bl	8013108 <quorem>
 8013c30:	4641      	mov	r1, r8
 8013c32:	9002      	str	r0, [sp, #8]
 8013c34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013c38:	4650      	mov	r0, sl
 8013c3a:	f000 ff5b 	bl	8014af4 <__mcmp>
 8013c3e:	463a      	mov	r2, r7
 8013c40:	9005      	str	r0, [sp, #20]
 8013c42:	4631      	mov	r1, r6
 8013c44:	4620      	mov	r0, r4
 8013c46:	f000 ff71 	bl	8014b2c <__mdiff>
 8013c4a:	68c2      	ldr	r2, [r0, #12]
 8013c4c:	4605      	mov	r5, r0
 8013c4e:	bb02      	cbnz	r2, 8013c92 <_dtoa_r+0xa7a>
 8013c50:	4601      	mov	r1, r0
 8013c52:	4650      	mov	r0, sl
 8013c54:	f000 ff4e 	bl	8014af4 <__mcmp>
 8013c58:	4602      	mov	r2, r0
 8013c5a:	4629      	mov	r1, r5
 8013c5c:	4620      	mov	r0, r4
 8013c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8013c60:	f000 fcc2 	bl	80145e8 <_Bfree>
 8013c64:	9b07      	ldr	r3, [sp, #28]
 8013c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c68:	9d04      	ldr	r5, [sp, #16]
 8013c6a:	ea43 0102 	orr.w	r1, r3, r2
 8013c6e:	9b06      	ldr	r3, [sp, #24]
 8013c70:	4319      	orrs	r1, r3
 8013c72:	d110      	bne.n	8013c96 <_dtoa_r+0xa7e>
 8013c74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013c78:	d029      	beq.n	8013cce <_dtoa_r+0xab6>
 8013c7a:	9b05      	ldr	r3, [sp, #20]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	dd02      	ble.n	8013c86 <_dtoa_r+0xa6e>
 8013c80:	9b02      	ldr	r3, [sp, #8]
 8013c82:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013c86:	9b01      	ldr	r3, [sp, #4]
 8013c88:	f883 9000 	strb.w	r9, [r3]
 8013c8c:	e774      	b.n	8013b78 <_dtoa_r+0x960>
 8013c8e:	4638      	mov	r0, r7
 8013c90:	e7ba      	b.n	8013c08 <_dtoa_r+0x9f0>
 8013c92:	2201      	movs	r2, #1
 8013c94:	e7e1      	b.n	8013c5a <_dtoa_r+0xa42>
 8013c96:	9b05      	ldr	r3, [sp, #20]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	db04      	blt.n	8013ca6 <_dtoa_r+0xa8e>
 8013c9c:	9907      	ldr	r1, [sp, #28]
 8013c9e:	430b      	orrs	r3, r1
 8013ca0:	9906      	ldr	r1, [sp, #24]
 8013ca2:	430b      	orrs	r3, r1
 8013ca4:	d120      	bne.n	8013ce8 <_dtoa_r+0xad0>
 8013ca6:	2a00      	cmp	r2, #0
 8013ca8:	dded      	ble.n	8013c86 <_dtoa_r+0xa6e>
 8013caa:	4651      	mov	r1, sl
 8013cac:	2201      	movs	r2, #1
 8013cae:	4620      	mov	r0, r4
 8013cb0:	f000 feb4 	bl	8014a1c <__lshift>
 8013cb4:	4631      	mov	r1, r6
 8013cb6:	4682      	mov	sl, r0
 8013cb8:	f000 ff1c 	bl	8014af4 <__mcmp>
 8013cbc:	2800      	cmp	r0, #0
 8013cbe:	dc03      	bgt.n	8013cc8 <_dtoa_r+0xab0>
 8013cc0:	d1e1      	bne.n	8013c86 <_dtoa_r+0xa6e>
 8013cc2:	f019 0f01 	tst.w	r9, #1
 8013cc6:	d0de      	beq.n	8013c86 <_dtoa_r+0xa6e>
 8013cc8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013ccc:	d1d8      	bne.n	8013c80 <_dtoa_r+0xa68>
 8013cce:	9a01      	ldr	r2, [sp, #4]
 8013cd0:	2339      	movs	r3, #57	; 0x39
 8013cd2:	7013      	strb	r3, [r2, #0]
 8013cd4:	462b      	mov	r3, r5
 8013cd6:	461d      	mov	r5, r3
 8013cd8:	3b01      	subs	r3, #1
 8013cda:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013cde:	2a39      	cmp	r2, #57	; 0x39
 8013ce0:	d06c      	beq.n	8013dbc <_dtoa_r+0xba4>
 8013ce2:	3201      	adds	r2, #1
 8013ce4:	701a      	strb	r2, [r3, #0]
 8013ce6:	e747      	b.n	8013b78 <_dtoa_r+0x960>
 8013ce8:	2a00      	cmp	r2, #0
 8013cea:	dd07      	ble.n	8013cfc <_dtoa_r+0xae4>
 8013cec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013cf0:	d0ed      	beq.n	8013cce <_dtoa_r+0xab6>
 8013cf2:	9a01      	ldr	r2, [sp, #4]
 8013cf4:	f109 0301 	add.w	r3, r9, #1
 8013cf8:	7013      	strb	r3, [r2, #0]
 8013cfa:	e73d      	b.n	8013b78 <_dtoa_r+0x960>
 8013cfc:	9b04      	ldr	r3, [sp, #16]
 8013cfe:	9a08      	ldr	r2, [sp, #32]
 8013d00:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013d04:	4293      	cmp	r3, r2
 8013d06:	d043      	beq.n	8013d90 <_dtoa_r+0xb78>
 8013d08:	4651      	mov	r1, sl
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	220a      	movs	r2, #10
 8013d0e:	4620      	mov	r0, r4
 8013d10:	f000 fc8c 	bl	801462c <__multadd>
 8013d14:	45b8      	cmp	r8, r7
 8013d16:	4682      	mov	sl, r0
 8013d18:	f04f 0300 	mov.w	r3, #0
 8013d1c:	f04f 020a 	mov.w	r2, #10
 8013d20:	4641      	mov	r1, r8
 8013d22:	4620      	mov	r0, r4
 8013d24:	d107      	bne.n	8013d36 <_dtoa_r+0xb1e>
 8013d26:	f000 fc81 	bl	801462c <__multadd>
 8013d2a:	4680      	mov	r8, r0
 8013d2c:	4607      	mov	r7, r0
 8013d2e:	9b04      	ldr	r3, [sp, #16]
 8013d30:	3301      	adds	r3, #1
 8013d32:	9304      	str	r3, [sp, #16]
 8013d34:	e775      	b.n	8013c22 <_dtoa_r+0xa0a>
 8013d36:	f000 fc79 	bl	801462c <__multadd>
 8013d3a:	4639      	mov	r1, r7
 8013d3c:	4680      	mov	r8, r0
 8013d3e:	2300      	movs	r3, #0
 8013d40:	220a      	movs	r2, #10
 8013d42:	4620      	mov	r0, r4
 8013d44:	f000 fc72 	bl	801462c <__multadd>
 8013d48:	4607      	mov	r7, r0
 8013d4a:	e7f0      	b.n	8013d2e <_dtoa_r+0xb16>
 8013d4c:	9b04      	ldr	r3, [sp, #16]
 8013d4e:	9301      	str	r3, [sp, #4]
 8013d50:	9d00      	ldr	r5, [sp, #0]
 8013d52:	4631      	mov	r1, r6
 8013d54:	4650      	mov	r0, sl
 8013d56:	f7ff f9d7 	bl	8013108 <quorem>
 8013d5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013d5e:	9b00      	ldr	r3, [sp, #0]
 8013d60:	f805 9b01 	strb.w	r9, [r5], #1
 8013d64:	1aea      	subs	r2, r5, r3
 8013d66:	9b01      	ldr	r3, [sp, #4]
 8013d68:	4293      	cmp	r3, r2
 8013d6a:	dd07      	ble.n	8013d7c <_dtoa_r+0xb64>
 8013d6c:	4651      	mov	r1, sl
 8013d6e:	2300      	movs	r3, #0
 8013d70:	220a      	movs	r2, #10
 8013d72:	4620      	mov	r0, r4
 8013d74:	f000 fc5a 	bl	801462c <__multadd>
 8013d78:	4682      	mov	sl, r0
 8013d7a:	e7ea      	b.n	8013d52 <_dtoa_r+0xb3a>
 8013d7c:	9b01      	ldr	r3, [sp, #4]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	bfc8      	it	gt
 8013d82:	461d      	movgt	r5, r3
 8013d84:	9b00      	ldr	r3, [sp, #0]
 8013d86:	bfd8      	it	le
 8013d88:	2501      	movle	r5, #1
 8013d8a:	441d      	add	r5, r3
 8013d8c:	f04f 0800 	mov.w	r8, #0
 8013d90:	4651      	mov	r1, sl
 8013d92:	2201      	movs	r2, #1
 8013d94:	4620      	mov	r0, r4
 8013d96:	f000 fe41 	bl	8014a1c <__lshift>
 8013d9a:	4631      	mov	r1, r6
 8013d9c:	4682      	mov	sl, r0
 8013d9e:	f000 fea9 	bl	8014af4 <__mcmp>
 8013da2:	2800      	cmp	r0, #0
 8013da4:	dc96      	bgt.n	8013cd4 <_dtoa_r+0xabc>
 8013da6:	d102      	bne.n	8013dae <_dtoa_r+0xb96>
 8013da8:	f019 0f01 	tst.w	r9, #1
 8013dac:	d192      	bne.n	8013cd4 <_dtoa_r+0xabc>
 8013dae:	462b      	mov	r3, r5
 8013db0:	461d      	mov	r5, r3
 8013db2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013db6:	2a30      	cmp	r2, #48	; 0x30
 8013db8:	d0fa      	beq.n	8013db0 <_dtoa_r+0xb98>
 8013dba:	e6dd      	b.n	8013b78 <_dtoa_r+0x960>
 8013dbc:	9a00      	ldr	r2, [sp, #0]
 8013dbe:	429a      	cmp	r2, r3
 8013dc0:	d189      	bne.n	8013cd6 <_dtoa_r+0xabe>
 8013dc2:	f10b 0b01 	add.w	fp, fp, #1
 8013dc6:	2331      	movs	r3, #49	; 0x31
 8013dc8:	e796      	b.n	8013cf8 <_dtoa_r+0xae0>
 8013dca:	4b0a      	ldr	r3, [pc, #40]	; (8013df4 <_dtoa_r+0xbdc>)
 8013dcc:	f7ff ba99 	b.w	8013302 <_dtoa_r+0xea>
 8013dd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	f47f aa6d 	bne.w	80132b2 <_dtoa_r+0x9a>
 8013dd8:	4b07      	ldr	r3, [pc, #28]	; (8013df8 <_dtoa_r+0xbe0>)
 8013dda:	f7ff ba92 	b.w	8013302 <_dtoa_r+0xea>
 8013dde:	9b01      	ldr	r3, [sp, #4]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	dcb5      	bgt.n	8013d50 <_dtoa_r+0xb38>
 8013de4:	9b07      	ldr	r3, [sp, #28]
 8013de6:	2b02      	cmp	r3, #2
 8013de8:	f73f aeb1 	bgt.w	8013b4e <_dtoa_r+0x936>
 8013dec:	e7b0      	b.n	8013d50 <_dtoa_r+0xb38>
 8013dee:	bf00      	nop
 8013df0:	08018dbc 	.word	0x08018dbc
 8013df4:	08018c79 	.word	0x08018c79
 8013df8:	08018d57 	.word	0x08018d57

08013dfc <_free_r>:
 8013dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013dfe:	2900      	cmp	r1, #0
 8013e00:	d044      	beq.n	8013e8c <_free_r+0x90>
 8013e02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e06:	9001      	str	r0, [sp, #4]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	f1a1 0404 	sub.w	r4, r1, #4
 8013e0e:	bfb8      	it	lt
 8013e10:	18e4      	addlt	r4, r4, r3
 8013e12:	f7fd f93f 	bl	8011094 <__malloc_lock>
 8013e16:	4a1e      	ldr	r2, [pc, #120]	; (8013e90 <_free_r+0x94>)
 8013e18:	9801      	ldr	r0, [sp, #4]
 8013e1a:	6813      	ldr	r3, [r2, #0]
 8013e1c:	b933      	cbnz	r3, 8013e2c <_free_r+0x30>
 8013e1e:	6063      	str	r3, [r4, #4]
 8013e20:	6014      	str	r4, [r2, #0]
 8013e22:	b003      	add	sp, #12
 8013e24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013e28:	f7fd b93a 	b.w	80110a0 <__malloc_unlock>
 8013e2c:	42a3      	cmp	r3, r4
 8013e2e:	d908      	bls.n	8013e42 <_free_r+0x46>
 8013e30:	6825      	ldr	r5, [r4, #0]
 8013e32:	1961      	adds	r1, r4, r5
 8013e34:	428b      	cmp	r3, r1
 8013e36:	bf01      	itttt	eq
 8013e38:	6819      	ldreq	r1, [r3, #0]
 8013e3a:	685b      	ldreq	r3, [r3, #4]
 8013e3c:	1949      	addeq	r1, r1, r5
 8013e3e:	6021      	streq	r1, [r4, #0]
 8013e40:	e7ed      	b.n	8013e1e <_free_r+0x22>
 8013e42:	461a      	mov	r2, r3
 8013e44:	685b      	ldr	r3, [r3, #4]
 8013e46:	b10b      	cbz	r3, 8013e4c <_free_r+0x50>
 8013e48:	42a3      	cmp	r3, r4
 8013e4a:	d9fa      	bls.n	8013e42 <_free_r+0x46>
 8013e4c:	6811      	ldr	r1, [r2, #0]
 8013e4e:	1855      	adds	r5, r2, r1
 8013e50:	42a5      	cmp	r5, r4
 8013e52:	d10b      	bne.n	8013e6c <_free_r+0x70>
 8013e54:	6824      	ldr	r4, [r4, #0]
 8013e56:	4421      	add	r1, r4
 8013e58:	1854      	adds	r4, r2, r1
 8013e5a:	42a3      	cmp	r3, r4
 8013e5c:	6011      	str	r1, [r2, #0]
 8013e5e:	d1e0      	bne.n	8013e22 <_free_r+0x26>
 8013e60:	681c      	ldr	r4, [r3, #0]
 8013e62:	685b      	ldr	r3, [r3, #4]
 8013e64:	6053      	str	r3, [r2, #4]
 8013e66:	440c      	add	r4, r1
 8013e68:	6014      	str	r4, [r2, #0]
 8013e6a:	e7da      	b.n	8013e22 <_free_r+0x26>
 8013e6c:	d902      	bls.n	8013e74 <_free_r+0x78>
 8013e6e:	230c      	movs	r3, #12
 8013e70:	6003      	str	r3, [r0, #0]
 8013e72:	e7d6      	b.n	8013e22 <_free_r+0x26>
 8013e74:	6825      	ldr	r5, [r4, #0]
 8013e76:	1961      	adds	r1, r4, r5
 8013e78:	428b      	cmp	r3, r1
 8013e7a:	bf04      	itt	eq
 8013e7c:	6819      	ldreq	r1, [r3, #0]
 8013e7e:	685b      	ldreq	r3, [r3, #4]
 8013e80:	6063      	str	r3, [r4, #4]
 8013e82:	bf04      	itt	eq
 8013e84:	1949      	addeq	r1, r1, r5
 8013e86:	6021      	streq	r1, [r4, #0]
 8013e88:	6054      	str	r4, [r2, #4]
 8013e8a:	e7ca      	b.n	8013e22 <_free_r+0x26>
 8013e8c:	b003      	add	sp, #12
 8013e8e:	bd30      	pop	{r4, r5, pc}
 8013e90:	20001f6c 	.word	0x20001f6c

08013e94 <rshift>:
 8013e94:	6903      	ldr	r3, [r0, #16]
 8013e96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013e9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013ea2:	f100 0414 	add.w	r4, r0, #20
 8013ea6:	dd45      	ble.n	8013f34 <rshift+0xa0>
 8013ea8:	f011 011f 	ands.w	r1, r1, #31
 8013eac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013eb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013eb4:	d10c      	bne.n	8013ed0 <rshift+0x3c>
 8013eb6:	f100 0710 	add.w	r7, r0, #16
 8013eba:	4629      	mov	r1, r5
 8013ebc:	42b1      	cmp	r1, r6
 8013ebe:	d334      	bcc.n	8013f2a <rshift+0x96>
 8013ec0:	1a9b      	subs	r3, r3, r2
 8013ec2:	009b      	lsls	r3, r3, #2
 8013ec4:	1eea      	subs	r2, r5, #3
 8013ec6:	4296      	cmp	r6, r2
 8013ec8:	bf38      	it	cc
 8013eca:	2300      	movcc	r3, #0
 8013ecc:	4423      	add	r3, r4
 8013ece:	e015      	b.n	8013efc <rshift+0x68>
 8013ed0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013ed4:	f1c1 0820 	rsb	r8, r1, #32
 8013ed8:	40cf      	lsrs	r7, r1
 8013eda:	f105 0e04 	add.w	lr, r5, #4
 8013ede:	46a1      	mov	r9, r4
 8013ee0:	4576      	cmp	r6, lr
 8013ee2:	46f4      	mov	ip, lr
 8013ee4:	d815      	bhi.n	8013f12 <rshift+0x7e>
 8013ee6:	1a9a      	subs	r2, r3, r2
 8013ee8:	0092      	lsls	r2, r2, #2
 8013eea:	3a04      	subs	r2, #4
 8013eec:	3501      	adds	r5, #1
 8013eee:	42ae      	cmp	r6, r5
 8013ef0:	bf38      	it	cc
 8013ef2:	2200      	movcc	r2, #0
 8013ef4:	18a3      	adds	r3, r4, r2
 8013ef6:	50a7      	str	r7, [r4, r2]
 8013ef8:	b107      	cbz	r7, 8013efc <rshift+0x68>
 8013efa:	3304      	adds	r3, #4
 8013efc:	1b1a      	subs	r2, r3, r4
 8013efe:	42a3      	cmp	r3, r4
 8013f00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013f04:	bf08      	it	eq
 8013f06:	2300      	moveq	r3, #0
 8013f08:	6102      	str	r2, [r0, #16]
 8013f0a:	bf08      	it	eq
 8013f0c:	6143      	streq	r3, [r0, #20]
 8013f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f12:	f8dc c000 	ldr.w	ip, [ip]
 8013f16:	fa0c fc08 	lsl.w	ip, ip, r8
 8013f1a:	ea4c 0707 	orr.w	r7, ip, r7
 8013f1e:	f849 7b04 	str.w	r7, [r9], #4
 8013f22:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013f26:	40cf      	lsrs	r7, r1
 8013f28:	e7da      	b.n	8013ee0 <rshift+0x4c>
 8013f2a:	f851 cb04 	ldr.w	ip, [r1], #4
 8013f2e:	f847 cf04 	str.w	ip, [r7, #4]!
 8013f32:	e7c3      	b.n	8013ebc <rshift+0x28>
 8013f34:	4623      	mov	r3, r4
 8013f36:	e7e1      	b.n	8013efc <rshift+0x68>

08013f38 <__hexdig_fun>:
 8013f38:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013f3c:	2b09      	cmp	r3, #9
 8013f3e:	d802      	bhi.n	8013f46 <__hexdig_fun+0xe>
 8013f40:	3820      	subs	r0, #32
 8013f42:	b2c0      	uxtb	r0, r0
 8013f44:	4770      	bx	lr
 8013f46:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013f4a:	2b05      	cmp	r3, #5
 8013f4c:	d801      	bhi.n	8013f52 <__hexdig_fun+0x1a>
 8013f4e:	3847      	subs	r0, #71	; 0x47
 8013f50:	e7f7      	b.n	8013f42 <__hexdig_fun+0xa>
 8013f52:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013f56:	2b05      	cmp	r3, #5
 8013f58:	d801      	bhi.n	8013f5e <__hexdig_fun+0x26>
 8013f5a:	3827      	subs	r0, #39	; 0x27
 8013f5c:	e7f1      	b.n	8013f42 <__hexdig_fun+0xa>
 8013f5e:	2000      	movs	r0, #0
 8013f60:	4770      	bx	lr
	...

08013f64 <__gethex>:
 8013f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f68:	4617      	mov	r7, r2
 8013f6a:	680a      	ldr	r2, [r1, #0]
 8013f6c:	b085      	sub	sp, #20
 8013f6e:	f102 0b02 	add.w	fp, r2, #2
 8013f72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013f76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013f7a:	4681      	mov	r9, r0
 8013f7c:	468a      	mov	sl, r1
 8013f7e:	9302      	str	r3, [sp, #8]
 8013f80:	32fe      	adds	r2, #254	; 0xfe
 8013f82:	eb02 030b 	add.w	r3, r2, fp
 8013f86:	46d8      	mov	r8, fp
 8013f88:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8013f8c:	9301      	str	r3, [sp, #4]
 8013f8e:	2830      	cmp	r0, #48	; 0x30
 8013f90:	d0f7      	beq.n	8013f82 <__gethex+0x1e>
 8013f92:	f7ff ffd1 	bl	8013f38 <__hexdig_fun>
 8013f96:	4604      	mov	r4, r0
 8013f98:	2800      	cmp	r0, #0
 8013f9a:	d138      	bne.n	801400e <__gethex+0xaa>
 8013f9c:	49a7      	ldr	r1, [pc, #668]	; (801423c <__gethex+0x2d8>)
 8013f9e:	2201      	movs	r2, #1
 8013fa0:	4640      	mov	r0, r8
 8013fa2:	f7fe ff62 	bl	8012e6a <strncmp>
 8013fa6:	4606      	mov	r6, r0
 8013fa8:	2800      	cmp	r0, #0
 8013faa:	d169      	bne.n	8014080 <__gethex+0x11c>
 8013fac:	f898 0001 	ldrb.w	r0, [r8, #1]
 8013fb0:	465d      	mov	r5, fp
 8013fb2:	f7ff ffc1 	bl	8013f38 <__hexdig_fun>
 8013fb6:	2800      	cmp	r0, #0
 8013fb8:	d064      	beq.n	8014084 <__gethex+0x120>
 8013fba:	465a      	mov	r2, fp
 8013fbc:	7810      	ldrb	r0, [r2, #0]
 8013fbe:	2830      	cmp	r0, #48	; 0x30
 8013fc0:	4690      	mov	r8, r2
 8013fc2:	f102 0201 	add.w	r2, r2, #1
 8013fc6:	d0f9      	beq.n	8013fbc <__gethex+0x58>
 8013fc8:	f7ff ffb6 	bl	8013f38 <__hexdig_fun>
 8013fcc:	2301      	movs	r3, #1
 8013fce:	fab0 f480 	clz	r4, r0
 8013fd2:	0964      	lsrs	r4, r4, #5
 8013fd4:	465e      	mov	r6, fp
 8013fd6:	9301      	str	r3, [sp, #4]
 8013fd8:	4642      	mov	r2, r8
 8013fda:	4615      	mov	r5, r2
 8013fdc:	3201      	adds	r2, #1
 8013fde:	7828      	ldrb	r0, [r5, #0]
 8013fe0:	f7ff ffaa 	bl	8013f38 <__hexdig_fun>
 8013fe4:	2800      	cmp	r0, #0
 8013fe6:	d1f8      	bne.n	8013fda <__gethex+0x76>
 8013fe8:	4994      	ldr	r1, [pc, #592]	; (801423c <__gethex+0x2d8>)
 8013fea:	2201      	movs	r2, #1
 8013fec:	4628      	mov	r0, r5
 8013fee:	f7fe ff3c 	bl	8012e6a <strncmp>
 8013ff2:	b978      	cbnz	r0, 8014014 <__gethex+0xb0>
 8013ff4:	b946      	cbnz	r6, 8014008 <__gethex+0xa4>
 8013ff6:	1c6e      	adds	r6, r5, #1
 8013ff8:	4632      	mov	r2, r6
 8013ffa:	4615      	mov	r5, r2
 8013ffc:	3201      	adds	r2, #1
 8013ffe:	7828      	ldrb	r0, [r5, #0]
 8014000:	f7ff ff9a 	bl	8013f38 <__hexdig_fun>
 8014004:	2800      	cmp	r0, #0
 8014006:	d1f8      	bne.n	8013ffa <__gethex+0x96>
 8014008:	1b73      	subs	r3, r6, r5
 801400a:	009e      	lsls	r6, r3, #2
 801400c:	e004      	b.n	8014018 <__gethex+0xb4>
 801400e:	2400      	movs	r4, #0
 8014010:	4626      	mov	r6, r4
 8014012:	e7e1      	b.n	8013fd8 <__gethex+0x74>
 8014014:	2e00      	cmp	r6, #0
 8014016:	d1f7      	bne.n	8014008 <__gethex+0xa4>
 8014018:	782b      	ldrb	r3, [r5, #0]
 801401a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801401e:	2b50      	cmp	r3, #80	; 0x50
 8014020:	d13d      	bne.n	801409e <__gethex+0x13a>
 8014022:	786b      	ldrb	r3, [r5, #1]
 8014024:	2b2b      	cmp	r3, #43	; 0x2b
 8014026:	d02f      	beq.n	8014088 <__gethex+0x124>
 8014028:	2b2d      	cmp	r3, #45	; 0x2d
 801402a:	d031      	beq.n	8014090 <__gethex+0x12c>
 801402c:	1c69      	adds	r1, r5, #1
 801402e:	f04f 0b00 	mov.w	fp, #0
 8014032:	7808      	ldrb	r0, [r1, #0]
 8014034:	f7ff ff80 	bl	8013f38 <__hexdig_fun>
 8014038:	1e42      	subs	r2, r0, #1
 801403a:	b2d2      	uxtb	r2, r2
 801403c:	2a18      	cmp	r2, #24
 801403e:	d82e      	bhi.n	801409e <__gethex+0x13a>
 8014040:	f1a0 0210 	sub.w	r2, r0, #16
 8014044:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014048:	f7ff ff76 	bl	8013f38 <__hexdig_fun>
 801404c:	f100 3cff 	add.w	ip, r0, #4294967295
 8014050:	fa5f fc8c 	uxtb.w	ip, ip
 8014054:	f1bc 0f18 	cmp.w	ip, #24
 8014058:	d91d      	bls.n	8014096 <__gethex+0x132>
 801405a:	f1bb 0f00 	cmp.w	fp, #0
 801405e:	d000      	beq.n	8014062 <__gethex+0xfe>
 8014060:	4252      	negs	r2, r2
 8014062:	4416      	add	r6, r2
 8014064:	f8ca 1000 	str.w	r1, [sl]
 8014068:	b1dc      	cbz	r4, 80140a2 <__gethex+0x13e>
 801406a:	9b01      	ldr	r3, [sp, #4]
 801406c:	2b00      	cmp	r3, #0
 801406e:	bf14      	ite	ne
 8014070:	f04f 0800 	movne.w	r8, #0
 8014074:	f04f 0806 	moveq.w	r8, #6
 8014078:	4640      	mov	r0, r8
 801407a:	b005      	add	sp, #20
 801407c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014080:	4645      	mov	r5, r8
 8014082:	4626      	mov	r6, r4
 8014084:	2401      	movs	r4, #1
 8014086:	e7c7      	b.n	8014018 <__gethex+0xb4>
 8014088:	f04f 0b00 	mov.w	fp, #0
 801408c:	1ca9      	adds	r1, r5, #2
 801408e:	e7d0      	b.n	8014032 <__gethex+0xce>
 8014090:	f04f 0b01 	mov.w	fp, #1
 8014094:	e7fa      	b.n	801408c <__gethex+0x128>
 8014096:	230a      	movs	r3, #10
 8014098:	fb03 0002 	mla	r0, r3, r2, r0
 801409c:	e7d0      	b.n	8014040 <__gethex+0xdc>
 801409e:	4629      	mov	r1, r5
 80140a0:	e7e0      	b.n	8014064 <__gethex+0x100>
 80140a2:	eba5 0308 	sub.w	r3, r5, r8
 80140a6:	3b01      	subs	r3, #1
 80140a8:	4621      	mov	r1, r4
 80140aa:	2b07      	cmp	r3, #7
 80140ac:	dc0a      	bgt.n	80140c4 <__gethex+0x160>
 80140ae:	4648      	mov	r0, r9
 80140b0:	f000 fa5a 	bl	8014568 <_Balloc>
 80140b4:	4604      	mov	r4, r0
 80140b6:	b940      	cbnz	r0, 80140ca <__gethex+0x166>
 80140b8:	4b61      	ldr	r3, [pc, #388]	; (8014240 <__gethex+0x2dc>)
 80140ba:	4602      	mov	r2, r0
 80140bc:	21e4      	movs	r1, #228	; 0xe4
 80140be:	4861      	ldr	r0, [pc, #388]	; (8014244 <__gethex+0x2e0>)
 80140c0:	f7ff f804 	bl	80130cc <__assert_func>
 80140c4:	3101      	adds	r1, #1
 80140c6:	105b      	asrs	r3, r3, #1
 80140c8:	e7ef      	b.n	80140aa <__gethex+0x146>
 80140ca:	f100 0a14 	add.w	sl, r0, #20
 80140ce:	2300      	movs	r3, #0
 80140d0:	495a      	ldr	r1, [pc, #360]	; (801423c <__gethex+0x2d8>)
 80140d2:	f8cd a004 	str.w	sl, [sp, #4]
 80140d6:	469b      	mov	fp, r3
 80140d8:	45a8      	cmp	r8, r5
 80140da:	d342      	bcc.n	8014162 <__gethex+0x1fe>
 80140dc:	9801      	ldr	r0, [sp, #4]
 80140de:	f840 bb04 	str.w	fp, [r0], #4
 80140e2:	eba0 000a 	sub.w	r0, r0, sl
 80140e6:	1080      	asrs	r0, r0, #2
 80140e8:	6120      	str	r0, [r4, #16]
 80140ea:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80140ee:	4658      	mov	r0, fp
 80140f0:	f000 fb2c 	bl	801474c <__hi0bits>
 80140f4:	683d      	ldr	r5, [r7, #0]
 80140f6:	eba8 0000 	sub.w	r0, r8, r0
 80140fa:	42a8      	cmp	r0, r5
 80140fc:	dd59      	ble.n	80141b2 <__gethex+0x24e>
 80140fe:	eba0 0805 	sub.w	r8, r0, r5
 8014102:	4641      	mov	r1, r8
 8014104:	4620      	mov	r0, r4
 8014106:	f000 febb 	bl	8014e80 <__any_on>
 801410a:	4683      	mov	fp, r0
 801410c:	b1b8      	cbz	r0, 801413e <__gethex+0x1da>
 801410e:	f108 33ff 	add.w	r3, r8, #4294967295
 8014112:	1159      	asrs	r1, r3, #5
 8014114:	f003 021f 	and.w	r2, r3, #31
 8014118:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801411c:	f04f 0b01 	mov.w	fp, #1
 8014120:	fa0b f202 	lsl.w	r2, fp, r2
 8014124:	420a      	tst	r2, r1
 8014126:	d00a      	beq.n	801413e <__gethex+0x1da>
 8014128:	455b      	cmp	r3, fp
 801412a:	dd06      	ble.n	801413a <__gethex+0x1d6>
 801412c:	f1a8 0102 	sub.w	r1, r8, #2
 8014130:	4620      	mov	r0, r4
 8014132:	f000 fea5 	bl	8014e80 <__any_on>
 8014136:	2800      	cmp	r0, #0
 8014138:	d138      	bne.n	80141ac <__gethex+0x248>
 801413a:	f04f 0b02 	mov.w	fp, #2
 801413e:	4641      	mov	r1, r8
 8014140:	4620      	mov	r0, r4
 8014142:	f7ff fea7 	bl	8013e94 <rshift>
 8014146:	4446      	add	r6, r8
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	42b3      	cmp	r3, r6
 801414c:	da41      	bge.n	80141d2 <__gethex+0x26e>
 801414e:	4621      	mov	r1, r4
 8014150:	4648      	mov	r0, r9
 8014152:	f000 fa49 	bl	80145e8 <_Bfree>
 8014156:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014158:	2300      	movs	r3, #0
 801415a:	6013      	str	r3, [r2, #0]
 801415c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8014160:	e78a      	b.n	8014078 <__gethex+0x114>
 8014162:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8014166:	2a2e      	cmp	r2, #46	; 0x2e
 8014168:	d014      	beq.n	8014194 <__gethex+0x230>
 801416a:	2b20      	cmp	r3, #32
 801416c:	d106      	bne.n	801417c <__gethex+0x218>
 801416e:	9b01      	ldr	r3, [sp, #4]
 8014170:	f843 bb04 	str.w	fp, [r3], #4
 8014174:	f04f 0b00 	mov.w	fp, #0
 8014178:	9301      	str	r3, [sp, #4]
 801417a:	465b      	mov	r3, fp
 801417c:	7828      	ldrb	r0, [r5, #0]
 801417e:	9303      	str	r3, [sp, #12]
 8014180:	f7ff feda 	bl	8013f38 <__hexdig_fun>
 8014184:	9b03      	ldr	r3, [sp, #12]
 8014186:	f000 000f 	and.w	r0, r0, #15
 801418a:	4098      	lsls	r0, r3
 801418c:	ea4b 0b00 	orr.w	fp, fp, r0
 8014190:	3304      	adds	r3, #4
 8014192:	e7a1      	b.n	80140d8 <__gethex+0x174>
 8014194:	45a8      	cmp	r8, r5
 8014196:	d8e8      	bhi.n	801416a <__gethex+0x206>
 8014198:	2201      	movs	r2, #1
 801419a:	4628      	mov	r0, r5
 801419c:	9303      	str	r3, [sp, #12]
 801419e:	f7fe fe64 	bl	8012e6a <strncmp>
 80141a2:	4926      	ldr	r1, [pc, #152]	; (801423c <__gethex+0x2d8>)
 80141a4:	9b03      	ldr	r3, [sp, #12]
 80141a6:	2800      	cmp	r0, #0
 80141a8:	d1df      	bne.n	801416a <__gethex+0x206>
 80141aa:	e795      	b.n	80140d8 <__gethex+0x174>
 80141ac:	f04f 0b03 	mov.w	fp, #3
 80141b0:	e7c5      	b.n	801413e <__gethex+0x1da>
 80141b2:	da0b      	bge.n	80141cc <__gethex+0x268>
 80141b4:	eba5 0800 	sub.w	r8, r5, r0
 80141b8:	4621      	mov	r1, r4
 80141ba:	4642      	mov	r2, r8
 80141bc:	4648      	mov	r0, r9
 80141be:	f000 fc2d 	bl	8014a1c <__lshift>
 80141c2:	eba6 0608 	sub.w	r6, r6, r8
 80141c6:	4604      	mov	r4, r0
 80141c8:	f100 0a14 	add.w	sl, r0, #20
 80141cc:	f04f 0b00 	mov.w	fp, #0
 80141d0:	e7ba      	b.n	8014148 <__gethex+0x1e4>
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	42b3      	cmp	r3, r6
 80141d6:	dd73      	ble.n	80142c0 <__gethex+0x35c>
 80141d8:	1b9e      	subs	r6, r3, r6
 80141da:	42b5      	cmp	r5, r6
 80141dc:	dc34      	bgt.n	8014248 <__gethex+0x2e4>
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	2b02      	cmp	r3, #2
 80141e2:	d023      	beq.n	801422c <__gethex+0x2c8>
 80141e4:	2b03      	cmp	r3, #3
 80141e6:	d025      	beq.n	8014234 <__gethex+0x2d0>
 80141e8:	2b01      	cmp	r3, #1
 80141ea:	d115      	bne.n	8014218 <__gethex+0x2b4>
 80141ec:	42b5      	cmp	r5, r6
 80141ee:	d113      	bne.n	8014218 <__gethex+0x2b4>
 80141f0:	2d01      	cmp	r5, #1
 80141f2:	d10b      	bne.n	801420c <__gethex+0x2a8>
 80141f4:	9a02      	ldr	r2, [sp, #8]
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	6013      	str	r3, [r2, #0]
 80141fa:	2301      	movs	r3, #1
 80141fc:	6123      	str	r3, [r4, #16]
 80141fe:	f8ca 3000 	str.w	r3, [sl]
 8014202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014204:	f04f 0862 	mov.w	r8, #98	; 0x62
 8014208:	601c      	str	r4, [r3, #0]
 801420a:	e735      	b.n	8014078 <__gethex+0x114>
 801420c:	1e69      	subs	r1, r5, #1
 801420e:	4620      	mov	r0, r4
 8014210:	f000 fe36 	bl	8014e80 <__any_on>
 8014214:	2800      	cmp	r0, #0
 8014216:	d1ed      	bne.n	80141f4 <__gethex+0x290>
 8014218:	4621      	mov	r1, r4
 801421a:	4648      	mov	r0, r9
 801421c:	f000 f9e4 	bl	80145e8 <_Bfree>
 8014220:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014222:	2300      	movs	r3, #0
 8014224:	6013      	str	r3, [r2, #0]
 8014226:	f04f 0850 	mov.w	r8, #80	; 0x50
 801422a:	e725      	b.n	8014078 <__gethex+0x114>
 801422c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801422e:	2b00      	cmp	r3, #0
 8014230:	d1f2      	bne.n	8014218 <__gethex+0x2b4>
 8014232:	e7df      	b.n	80141f4 <__gethex+0x290>
 8014234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014236:	2b00      	cmp	r3, #0
 8014238:	d1dc      	bne.n	80141f4 <__gethex+0x290>
 801423a:	e7ed      	b.n	8014218 <__gethex+0x2b4>
 801423c:	08018b10 	.word	0x08018b10
 8014240:	08018dbc 	.word	0x08018dbc
 8014244:	08018dcd 	.word	0x08018dcd
 8014248:	f106 38ff 	add.w	r8, r6, #4294967295
 801424c:	f1bb 0f00 	cmp.w	fp, #0
 8014250:	d133      	bne.n	80142ba <__gethex+0x356>
 8014252:	f1b8 0f00 	cmp.w	r8, #0
 8014256:	d004      	beq.n	8014262 <__gethex+0x2fe>
 8014258:	4641      	mov	r1, r8
 801425a:	4620      	mov	r0, r4
 801425c:	f000 fe10 	bl	8014e80 <__any_on>
 8014260:	4683      	mov	fp, r0
 8014262:	ea4f 1268 	mov.w	r2, r8, asr #5
 8014266:	2301      	movs	r3, #1
 8014268:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801426c:	f008 081f 	and.w	r8, r8, #31
 8014270:	fa03 f308 	lsl.w	r3, r3, r8
 8014274:	4213      	tst	r3, r2
 8014276:	4631      	mov	r1, r6
 8014278:	4620      	mov	r0, r4
 801427a:	bf18      	it	ne
 801427c:	f04b 0b02 	orrne.w	fp, fp, #2
 8014280:	1bad      	subs	r5, r5, r6
 8014282:	f7ff fe07 	bl	8013e94 <rshift>
 8014286:	687e      	ldr	r6, [r7, #4]
 8014288:	f04f 0802 	mov.w	r8, #2
 801428c:	f1bb 0f00 	cmp.w	fp, #0
 8014290:	d04a      	beq.n	8014328 <__gethex+0x3c4>
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	2b02      	cmp	r3, #2
 8014296:	d016      	beq.n	80142c6 <__gethex+0x362>
 8014298:	2b03      	cmp	r3, #3
 801429a:	d018      	beq.n	80142ce <__gethex+0x36a>
 801429c:	2b01      	cmp	r3, #1
 801429e:	d109      	bne.n	80142b4 <__gethex+0x350>
 80142a0:	f01b 0f02 	tst.w	fp, #2
 80142a4:	d006      	beq.n	80142b4 <__gethex+0x350>
 80142a6:	f8da 3000 	ldr.w	r3, [sl]
 80142aa:	ea4b 0b03 	orr.w	fp, fp, r3
 80142ae:	f01b 0f01 	tst.w	fp, #1
 80142b2:	d10f      	bne.n	80142d4 <__gethex+0x370>
 80142b4:	f048 0810 	orr.w	r8, r8, #16
 80142b8:	e036      	b.n	8014328 <__gethex+0x3c4>
 80142ba:	f04f 0b01 	mov.w	fp, #1
 80142be:	e7d0      	b.n	8014262 <__gethex+0x2fe>
 80142c0:	f04f 0801 	mov.w	r8, #1
 80142c4:	e7e2      	b.n	801428c <__gethex+0x328>
 80142c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80142c8:	f1c3 0301 	rsb	r3, r3, #1
 80142cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80142ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d0ef      	beq.n	80142b4 <__gethex+0x350>
 80142d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80142d8:	f104 0214 	add.w	r2, r4, #20
 80142dc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80142e0:	9301      	str	r3, [sp, #4]
 80142e2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80142e6:	2300      	movs	r3, #0
 80142e8:	4694      	mov	ip, r2
 80142ea:	f852 1b04 	ldr.w	r1, [r2], #4
 80142ee:	f1b1 3fff 	cmp.w	r1, #4294967295
 80142f2:	d01e      	beq.n	8014332 <__gethex+0x3ce>
 80142f4:	3101      	adds	r1, #1
 80142f6:	f8cc 1000 	str.w	r1, [ip]
 80142fa:	f1b8 0f02 	cmp.w	r8, #2
 80142fe:	f104 0214 	add.w	r2, r4, #20
 8014302:	d13d      	bne.n	8014380 <__gethex+0x41c>
 8014304:	683b      	ldr	r3, [r7, #0]
 8014306:	3b01      	subs	r3, #1
 8014308:	42ab      	cmp	r3, r5
 801430a:	d10b      	bne.n	8014324 <__gethex+0x3c0>
 801430c:	1169      	asrs	r1, r5, #5
 801430e:	2301      	movs	r3, #1
 8014310:	f005 051f 	and.w	r5, r5, #31
 8014314:	fa03 f505 	lsl.w	r5, r3, r5
 8014318:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801431c:	421d      	tst	r5, r3
 801431e:	bf18      	it	ne
 8014320:	f04f 0801 	movne.w	r8, #1
 8014324:	f048 0820 	orr.w	r8, r8, #32
 8014328:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801432a:	601c      	str	r4, [r3, #0]
 801432c:	9b02      	ldr	r3, [sp, #8]
 801432e:	601e      	str	r6, [r3, #0]
 8014330:	e6a2      	b.n	8014078 <__gethex+0x114>
 8014332:	4290      	cmp	r0, r2
 8014334:	f842 3c04 	str.w	r3, [r2, #-4]
 8014338:	d8d6      	bhi.n	80142e8 <__gethex+0x384>
 801433a:	68a2      	ldr	r2, [r4, #8]
 801433c:	4593      	cmp	fp, r2
 801433e:	db17      	blt.n	8014370 <__gethex+0x40c>
 8014340:	6861      	ldr	r1, [r4, #4]
 8014342:	4648      	mov	r0, r9
 8014344:	3101      	adds	r1, #1
 8014346:	f000 f90f 	bl	8014568 <_Balloc>
 801434a:	4682      	mov	sl, r0
 801434c:	b918      	cbnz	r0, 8014356 <__gethex+0x3f2>
 801434e:	4b1b      	ldr	r3, [pc, #108]	; (80143bc <__gethex+0x458>)
 8014350:	4602      	mov	r2, r0
 8014352:	2184      	movs	r1, #132	; 0x84
 8014354:	e6b3      	b.n	80140be <__gethex+0x15a>
 8014356:	6922      	ldr	r2, [r4, #16]
 8014358:	3202      	adds	r2, #2
 801435a:	f104 010c 	add.w	r1, r4, #12
 801435e:	0092      	lsls	r2, r2, #2
 8014360:	300c      	adds	r0, #12
 8014362:	f7fe fe96 	bl	8013092 <memcpy>
 8014366:	4621      	mov	r1, r4
 8014368:	4648      	mov	r0, r9
 801436a:	f000 f93d 	bl	80145e8 <_Bfree>
 801436e:	4654      	mov	r4, sl
 8014370:	6922      	ldr	r2, [r4, #16]
 8014372:	1c51      	adds	r1, r2, #1
 8014374:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014378:	6121      	str	r1, [r4, #16]
 801437a:	2101      	movs	r1, #1
 801437c:	6151      	str	r1, [r2, #20]
 801437e:	e7bc      	b.n	80142fa <__gethex+0x396>
 8014380:	6921      	ldr	r1, [r4, #16]
 8014382:	4559      	cmp	r1, fp
 8014384:	dd0b      	ble.n	801439e <__gethex+0x43a>
 8014386:	2101      	movs	r1, #1
 8014388:	4620      	mov	r0, r4
 801438a:	f7ff fd83 	bl	8013e94 <rshift>
 801438e:	68bb      	ldr	r3, [r7, #8]
 8014390:	3601      	adds	r6, #1
 8014392:	42b3      	cmp	r3, r6
 8014394:	f6ff aedb 	blt.w	801414e <__gethex+0x1ea>
 8014398:	f04f 0801 	mov.w	r8, #1
 801439c:	e7c2      	b.n	8014324 <__gethex+0x3c0>
 801439e:	f015 051f 	ands.w	r5, r5, #31
 80143a2:	d0f9      	beq.n	8014398 <__gethex+0x434>
 80143a4:	9b01      	ldr	r3, [sp, #4]
 80143a6:	441a      	add	r2, r3
 80143a8:	f1c5 0520 	rsb	r5, r5, #32
 80143ac:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80143b0:	f000 f9cc 	bl	801474c <__hi0bits>
 80143b4:	42a8      	cmp	r0, r5
 80143b6:	dbe6      	blt.n	8014386 <__gethex+0x422>
 80143b8:	e7ee      	b.n	8014398 <__gethex+0x434>
 80143ba:	bf00      	nop
 80143bc:	08018dbc 	.word	0x08018dbc

080143c0 <L_shift>:
 80143c0:	f1c2 0208 	rsb	r2, r2, #8
 80143c4:	0092      	lsls	r2, r2, #2
 80143c6:	b570      	push	{r4, r5, r6, lr}
 80143c8:	f1c2 0620 	rsb	r6, r2, #32
 80143cc:	6843      	ldr	r3, [r0, #4]
 80143ce:	6804      	ldr	r4, [r0, #0]
 80143d0:	fa03 f506 	lsl.w	r5, r3, r6
 80143d4:	432c      	orrs	r4, r5
 80143d6:	40d3      	lsrs	r3, r2
 80143d8:	6004      	str	r4, [r0, #0]
 80143da:	f840 3f04 	str.w	r3, [r0, #4]!
 80143de:	4288      	cmp	r0, r1
 80143e0:	d3f4      	bcc.n	80143cc <L_shift+0xc>
 80143e2:	bd70      	pop	{r4, r5, r6, pc}

080143e4 <__match>:
 80143e4:	b530      	push	{r4, r5, lr}
 80143e6:	6803      	ldr	r3, [r0, #0]
 80143e8:	3301      	adds	r3, #1
 80143ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80143ee:	b914      	cbnz	r4, 80143f6 <__match+0x12>
 80143f0:	6003      	str	r3, [r0, #0]
 80143f2:	2001      	movs	r0, #1
 80143f4:	bd30      	pop	{r4, r5, pc}
 80143f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80143fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80143fe:	2d19      	cmp	r5, #25
 8014400:	bf98      	it	ls
 8014402:	3220      	addls	r2, #32
 8014404:	42a2      	cmp	r2, r4
 8014406:	d0f0      	beq.n	80143ea <__match+0x6>
 8014408:	2000      	movs	r0, #0
 801440a:	e7f3      	b.n	80143f4 <__match+0x10>

0801440c <__hexnan>:
 801440c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014410:	680b      	ldr	r3, [r1, #0]
 8014412:	6801      	ldr	r1, [r0, #0]
 8014414:	115e      	asrs	r6, r3, #5
 8014416:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801441a:	f013 031f 	ands.w	r3, r3, #31
 801441e:	b087      	sub	sp, #28
 8014420:	bf18      	it	ne
 8014422:	3604      	addne	r6, #4
 8014424:	2500      	movs	r5, #0
 8014426:	1f37      	subs	r7, r6, #4
 8014428:	4682      	mov	sl, r0
 801442a:	4690      	mov	r8, r2
 801442c:	9301      	str	r3, [sp, #4]
 801442e:	f846 5c04 	str.w	r5, [r6, #-4]
 8014432:	46b9      	mov	r9, r7
 8014434:	463c      	mov	r4, r7
 8014436:	9502      	str	r5, [sp, #8]
 8014438:	46ab      	mov	fp, r5
 801443a:	784a      	ldrb	r2, [r1, #1]
 801443c:	1c4b      	adds	r3, r1, #1
 801443e:	9303      	str	r3, [sp, #12]
 8014440:	b342      	cbz	r2, 8014494 <__hexnan+0x88>
 8014442:	4610      	mov	r0, r2
 8014444:	9105      	str	r1, [sp, #20]
 8014446:	9204      	str	r2, [sp, #16]
 8014448:	f7ff fd76 	bl	8013f38 <__hexdig_fun>
 801444c:	2800      	cmp	r0, #0
 801444e:	d14f      	bne.n	80144f0 <__hexnan+0xe4>
 8014450:	9a04      	ldr	r2, [sp, #16]
 8014452:	9905      	ldr	r1, [sp, #20]
 8014454:	2a20      	cmp	r2, #32
 8014456:	d818      	bhi.n	801448a <__hexnan+0x7e>
 8014458:	9b02      	ldr	r3, [sp, #8]
 801445a:	459b      	cmp	fp, r3
 801445c:	dd13      	ble.n	8014486 <__hexnan+0x7a>
 801445e:	454c      	cmp	r4, r9
 8014460:	d206      	bcs.n	8014470 <__hexnan+0x64>
 8014462:	2d07      	cmp	r5, #7
 8014464:	dc04      	bgt.n	8014470 <__hexnan+0x64>
 8014466:	462a      	mov	r2, r5
 8014468:	4649      	mov	r1, r9
 801446a:	4620      	mov	r0, r4
 801446c:	f7ff ffa8 	bl	80143c0 <L_shift>
 8014470:	4544      	cmp	r4, r8
 8014472:	d950      	bls.n	8014516 <__hexnan+0x10a>
 8014474:	2300      	movs	r3, #0
 8014476:	f1a4 0904 	sub.w	r9, r4, #4
 801447a:	f844 3c04 	str.w	r3, [r4, #-4]
 801447e:	f8cd b008 	str.w	fp, [sp, #8]
 8014482:	464c      	mov	r4, r9
 8014484:	461d      	mov	r5, r3
 8014486:	9903      	ldr	r1, [sp, #12]
 8014488:	e7d7      	b.n	801443a <__hexnan+0x2e>
 801448a:	2a29      	cmp	r2, #41	; 0x29
 801448c:	d155      	bne.n	801453a <__hexnan+0x12e>
 801448e:	3102      	adds	r1, #2
 8014490:	f8ca 1000 	str.w	r1, [sl]
 8014494:	f1bb 0f00 	cmp.w	fp, #0
 8014498:	d04f      	beq.n	801453a <__hexnan+0x12e>
 801449a:	454c      	cmp	r4, r9
 801449c:	d206      	bcs.n	80144ac <__hexnan+0xa0>
 801449e:	2d07      	cmp	r5, #7
 80144a0:	dc04      	bgt.n	80144ac <__hexnan+0xa0>
 80144a2:	462a      	mov	r2, r5
 80144a4:	4649      	mov	r1, r9
 80144a6:	4620      	mov	r0, r4
 80144a8:	f7ff ff8a 	bl	80143c0 <L_shift>
 80144ac:	4544      	cmp	r4, r8
 80144ae:	d934      	bls.n	801451a <__hexnan+0x10e>
 80144b0:	f1a8 0204 	sub.w	r2, r8, #4
 80144b4:	4623      	mov	r3, r4
 80144b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80144ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80144be:	429f      	cmp	r7, r3
 80144c0:	d2f9      	bcs.n	80144b6 <__hexnan+0xaa>
 80144c2:	1b3b      	subs	r3, r7, r4
 80144c4:	f023 0303 	bic.w	r3, r3, #3
 80144c8:	3304      	adds	r3, #4
 80144ca:	3e03      	subs	r6, #3
 80144cc:	3401      	adds	r4, #1
 80144ce:	42a6      	cmp	r6, r4
 80144d0:	bf38      	it	cc
 80144d2:	2304      	movcc	r3, #4
 80144d4:	4443      	add	r3, r8
 80144d6:	2200      	movs	r2, #0
 80144d8:	f843 2b04 	str.w	r2, [r3], #4
 80144dc:	429f      	cmp	r7, r3
 80144de:	d2fb      	bcs.n	80144d8 <__hexnan+0xcc>
 80144e0:	683b      	ldr	r3, [r7, #0]
 80144e2:	b91b      	cbnz	r3, 80144ec <__hexnan+0xe0>
 80144e4:	4547      	cmp	r7, r8
 80144e6:	d126      	bne.n	8014536 <__hexnan+0x12a>
 80144e8:	2301      	movs	r3, #1
 80144ea:	603b      	str	r3, [r7, #0]
 80144ec:	2005      	movs	r0, #5
 80144ee:	e025      	b.n	801453c <__hexnan+0x130>
 80144f0:	3501      	adds	r5, #1
 80144f2:	2d08      	cmp	r5, #8
 80144f4:	f10b 0b01 	add.w	fp, fp, #1
 80144f8:	dd06      	ble.n	8014508 <__hexnan+0xfc>
 80144fa:	4544      	cmp	r4, r8
 80144fc:	d9c3      	bls.n	8014486 <__hexnan+0x7a>
 80144fe:	2300      	movs	r3, #0
 8014500:	f844 3c04 	str.w	r3, [r4, #-4]
 8014504:	2501      	movs	r5, #1
 8014506:	3c04      	subs	r4, #4
 8014508:	6822      	ldr	r2, [r4, #0]
 801450a:	f000 000f 	and.w	r0, r0, #15
 801450e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014512:	6020      	str	r0, [r4, #0]
 8014514:	e7b7      	b.n	8014486 <__hexnan+0x7a>
 8014516:	2508      	movs	r5, #8
 8014518:	e7b5      	b.n	8014486 <__hexnan+0x7a>
 801451a:	9b01      	ldr	r3, [sp, #4]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d0df      	beq.n	80144e0 <__hexnan+0xd4>
 8014520:	f1c3 0320 	rsb	r3, r3, #32
 8014524:	f04f 32ff 	mov.w	r2, #4294967295
 8014528:	40da      	lsrs	r2, r3
 801452a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801452e:	4013      	ands	r3, r2
 8014530:	f846 3c04 	str.w	r3, [r6, #-4]
 8014534:	e7d4      	b.n	80144e0 <__hexnan+0xd4>
 8014536:	3f04      	subs	r7, #4
 8014538:	e7d2      	b.n	80144e0 <__hexnan+0xd4>
 801453a:	2004      	movs	r0, #4
 801453c:	b007      	add	sp, #28
 801453e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014542 <__ascii_mbtowc>:
 8014542:	b082      	sub	sp, #8
 8014544:	b901      	cbnz	r1, 8014548 <__ascii_mbtowc+0x6>
 8014546:	a901      	add	r1, sp, #4
 8014548:	b142      	cbz	r2, 801455c <__ascii_mbtowc+0x1a>
 801454a:	b14b      	cbz	r3, 8014560 <__ascii_mbtowc+0x1e>
 801454c:	7813      	ldrb	r3, [r2, #0]
 801454e:	600b      	str	r3, [r1, #0]
 8014550:	7812      	ldrb	r2, [r2, #0]
 8014552:	1e10      	subs	r0, r2, #0
 8014554:	bf18      	it	ne
 8014556:	2001      	movne	r0, #1
 8014558:	b002      	add	sp, #8
 801455a:	4770      	bx	lr
 801455c:	4610      	mov	r0, r2
 801455e:	e7fb      	b.n	8014558 <__ascii_mbtowc+0x16>
 8014560:	f06f 0001 	mvn.w	r0, #1
 8014564:	e7f8      	b.n	8014558 <__ascii_mbtowc+0x16>
	...

08014568 <_Balloc>:
 8014568:	b570      	push	{r4, r5, r6, lr}
 801456a:	69c6      	ldr	r6, [r0, #28]
 801456c:	4604      	mov	r4, r0
 801456e:	460d      	mov	r5, r1
 8014570:	b976      	cbnz	r6, 8014590 <_Balloc+0x28>
 8014572:	2010      	movs	r0, #16
 8014574:	f7fc fcde 	bl	8010f34 <malloc>
 8014578:	4602      	mov	r2, r0
 801457a:	61e0      	str	r0, [r4, #28]
 801457c:	b920      	cbnz	r0, 8014588 <_Balloc+0x20>
 801457e:	4b18      	ldr	r3, [pc, #96]	; (80145e0 <_Balloc+0x78>)
 8014580:	4818      	ldr	r0, [pc, #96]	; (80145e4 <_Balloc+0x7c>)
 8014582:	216b      	movs	r1, #107	; 0x6b
 8014584:	f7fe fda2 	bl	80130cc <__assert_func>
 8014588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801458c:	6006      	str	r6, [r0, #0]
 801458e:	60c6      	str	r6, [r0, #12]
 8014590:	69e6      	ldr	r6, [r4, #28]
 8014592:	68f3      	ldr	r3, [r6, #12]
 8014594:	b183      	cbz	r3, 80145b8 <_Balloc+0x50>
 8014596:	69e3      	ldr	r3, [r4, #28]
 8014598:	68db      	ldr	r3, [r3, #12]
 801459a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801459e:	b9b8      	cbnz	r0, 80145d0 <_Balloc+0x68>
 80145a0:	2101      	movs	r1, #1
 80145a2:	fa01 f605 	lsl.w	r6, r1, r5
 80145a6:	1d72      	adds	r2, r6, #5
 80145a8:	0092      	lsls	r2, r2, #2
 80145aa:	4620      	mov	r0, r4
 80145ac:	f000 fecf 	bl	801534e <_calloc_r>
 80145b0:	b160      	cbz	r0, 80145cc <_Balloc+0x64>
 80145b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80145b6:	e00e      	b.n	80145d6 <_Balloc+0x6e>
 80145b8:	2221      	movs	r2, #33	; 0x21
 80145ba:	2104      	movs	r1, #4
 80145bc:	4620      	mov	r0, r4
 80145be:	f000 fec6 	bl	801534e <_calloc_r>
 80145c2:	69e3      	ldr	r3, [r4, #28]
 80145c4:	60f0      	str	r0, [r6, #12]
 80145c6:	68db      	ldr	r3, [r3, #12]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d1e4      	bne.n	8014596 <_Balloc+0x2e>
 80145cc:	2000      	movs	r0, #0
 80145ce:	bd70      	pop	{r4, r5, r6, pc}
 80145d0:	6802      	ldr	r2, [r0, #0]
 80145d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80145d6:	2300      	movs	r3, #0
 80145d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80145dc:	e7f7      	b.n	80145ce <_Balloc+0x66>
 80145de:	bf00      	nop
 80145e0:	08018ca2 	.word	0x08018ca2
 80145e4:	08018e2d 	.word	0x08018e2d

080145e8 <_Bfree>:
 80145e8:	b570      	push	{r4, r5, r6, lr}
 80145ea:	69c6      	ldr	r6, [r0, #28]
 80145ec:	4605      	mov	r5, r0
 80145ee:	460c      	mov	r4, r1
 80145f0:	b976      	cbnz	r6, 8014610 <_Bfree+0x28>
 80145f2:	2010      	movs	r0, #16
 80145f4:	f7fc fc9e 	bl	8010f34 <malloc>
 80145f8:	4602      	mov	r2, r0
 80145fa:	61e8      	str	r0, [r5, #28]
 80145fc:	b920      	cbnz	r0, 8014608 <_Bfree+0x20>
 80145fe:	4b09      	ldr	r3, [pc, #36]	; (8014624 <_Bfree+0x3c>)
 8014600:	4809      	ldr	r0, [pc, #36]	; (8014628 <_Bfree+0x40>)
 8014602:	218f      	movs	r1, #143	; 0x8f
 8014604:	f7fe fd62 	bl	80130cc <__assert_func>
 8014608:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801460c:	6006      	str	r6, [r0, #0]
 801460e:	60c6      	str	r6, [r0, #12]
 8014610:	b13c      	cbz	r4, 8014622 <_Bfree+0x3a>
 8014612:	69eb      	ldr	r3, [r5, #28]
 8014614:	6862      	ldr	r2, [r4, #4]
 8014616:	68db      	ldr	r3, [r3, #12]
 8014618:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801461c:	6021      	str	r1, [r4, #0]
 801461e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014622:	bd70      	pop	{r4, r5, r6, pc}
 8014624:	08018ca2 	.word	0x08018ca2
 8014628:	08018e2d 	.word	0x08018e2d

0801462c <__multadd>:
 801462c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014630:	690d      	ldr	r5, [r1, #16]
 8014632:	4607      	mov	r7, r0
 8014634:	460c      	mov	r4, r1
 8014636:	461e      	mov	r6, r3
 8014638:	f101 0c14 	add.w	ip, r1, #20
 801463c:	2000      	movs	r0, #0
 801463e:	f8dc 3000 	ldr.w	r3, [ip]
 8014642:	b299      	uxth	r1, r3
 8014644:	fb02 6101 	mla	r1, r2, r1, r6
 8014648:	0c1e      	lsrs	r6, r3, #16
 801464a:	0c0b      	lsrs	r3, r1, #16
 801464c:	fb02 3306 	mla	r3, r2, r6, r3
 8014650:	b289      	uxth	r1, r1
 8014652:	3001      	adds	r0, #1
 8014654:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014658:	4285      	cmp	r5, r0
 801465a:	f84c 1b04 	str.w	r1, [ip], #4
 801465e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014662:	dcec      	bgt.n	801463e <__multadd+0x12>
 8014664:	b30e      	cbz	r6, 80146aa <__multadd+0x7e>
 8014666:	68a3      	ldr	r3, [r4, #8]
 8014668:	42ab      	cmp	r3, r5
 801466a:	dc19      	bgt.n	80146a0 <__multadd+0x74>
 801466c:	6861      	ldr	r1, [r4, #4]
 801466e:	4638      	mov	r0, r7
 8014670:	3101      	adds	r1, #1
 8014672:	f7ff ff79 	bl	8014568 <_Balloc>
 8014676:	4680      	mov	r8, r0
 8014678:	b928      	cbnz	r0, 8014686 <__multadd+0x5a>
 801467a:	4602      	mov	r2, r0
 801467c:	4b0c      	ldr	r3, [pc, #48]	; (80146b0 <__multadd+0x84>)
 801467e:	480d      	ldr	r0, [pc, #52]	; (80146b4 <__multadd+0x88>)
 8014680:	21ba      	movs	r1, #186	; 0xba
 8014682:	f7fe fd23 	bl	80130cc <__assert_func>
 8014686:	6922      	ldr	r2, [r4, #16]
 8014688:	3202      	adds	r2, #2
 801468a:	f104 010c 	add.w	r1, r4, #12
 801468e:	0092      	lsls	r2, r2, #2
 8014690:	300c      	adds	r0, #12
 8014692:	f7fe fcfe 	bl	8013092 <memcpy>
 8014696:	4621      	mov	r1, r4
 8014698:	4638      	mov	r0, r7
 801469a:	f7ff ffa5 	bl	80145e8 <_Bfree>
 801469e:	4644      	mov	r4, r8
 80146a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80146a4:	3501      	adds	r5, #1
 80146a6:	615e      	str	r6, [r3, #20]
 80146a8:	6125      	str	r5, [r4, #16]
 80146aa:	4620      	mov	r0, r4
 80146ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146b0:	08018dbc 	.word	0x08018dbc
 80146b4:	08018e2d 	.word	0x08018e2d

080146b8 <__s2b>:
 80146b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146bc:	460c      	mov	r4, r1
 80146be:	4615      	mov	r5, r2
 80146c0:	461f      	mov	r7, r3
 80146c2:	2209      	movs	r2, #9
 80146c4:	3308      	adds	r3, #8
 80146c6:	4606      	mov	r6, r0
 80146c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80146cc:	2100      	movs	r1, #0
 80146ce:	2201      	movs	r2, #1
 80146d0:	429a      	cmp	r2, r3
 80146d2:	db09      	blt.n	80146e8 <__s2b+0x30>
 80146d4:	4630      	mov	r0, r6
 80146d6:	f7ff ff47 	bl	8014568 <_Balloc>
 80146da:	b940      	cbnz	r0, 80146ee <__s2b+0x36>
 80146dc:	4602      	mov	r2, r0
 80146de:	4b19      	ldr	r3, [pc, #100]	; (8014744 <__s2b+0x8c>)
 80146e0:	4819      	ldr	r0, [pc, #100]	; (8014748 <__s2b+0x90>)
 80146e2:	21d3      	movs	r1, #211	; 0xd3
 80146e4:	f7fe fcf2 	bl	80130cc <__assert_func>
 80146e8:	0052      	lsls	r2, r2, #1
 80146ea:	3101      	adds	r1, #1
 80146ec:	e7f0      	b.n	80146d0 <__s2b+0x18>
 80146ee:	9b08      	ldr	r3, [sp, #32]
 80146f0:	6143      	str	r3, [r0, #20]
 80146f2:	2d09      	cmp	r5, #9
 80146f4:	f04f 0301 	mov.w	r3, #1
 80146f8:	6103      	str	r3, [r0, #16]
 80146fa:	dd16      	ble.n	801472a <__s2b+0x72>
 80146fc:	f104 0909 	add.w	r9, r4, #9
 8014700:	46c8      	mov	r8, r9
 8014702:	442c      	add	r4, r5
 8014704:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014708:	4601      	mov	r1, r0
 801470a:	3b30      	subs	r3, #48	; 0x30
 801470c:	220a      	movs	r2, #10
 801470e:	4630      	mov	r0, r6
 8014710:	f7ff ff8c 	bl	801462c <__multadd>
 8014714:	45a0      	cmp	r8, r4
 8014716:	d1f5      	bne.n	8014704 <__s2b+0x4c>
 8014718:	f1a5 0408 	sub.w	r4, r5, #8
 801471c:	444c      	add	r4, r9
 801471e:	1b2d      	subs	r5, r5, r4
 8014720:	1963      	adds	r3, r4, r5
 8014722:	42bb      	cmp	r3, r7
 8014724:	db04      	blt.n	8014730 <__s2b+0x78>
 8014726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801472a:	340a      	adds	r4, #10
 801472c:	2509      	movs	r5, #9
 801472e:	e7f6      	b.n	801471e <__s2b+0x66>
 8014730:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014734:	4601      	mov	r1, r0
 8014736:	3b30      	subs	r3, #48	; 0x30
 8014738:	220a      	movs	r2, #10
 801473a:	4630      	mov	r0, r6
 801473c:	f7ff ff76 	bl	801462c <__multadd>
 8014740:	e7ee      	b.n	8014720 <__s2b+0x68>
 8014742:	bf00      	nop
 8014744:	08018dbc 	.word	0x08018dbc
 8014748:	08018e2d 	.word	0x08018e2d

0801474c <__hi0bits>:
 801474c:	0c03      	lsrs	r3, r0, #16
 801474e:	041b      	lsls	r3, r3, #16
 8014750:	b9d3      	cbnz	r3, 8014788 <__hi0bits+0x3c>
 8014752:	0400      	lsls	r0, r0, #16
 8014754:	2310      	movs	r3, #16
 8014756:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801475a:	bf04      	itt	eq
 801475c:	0200      	lsleq	r0, r0, #8
 801475e:	3308      	addeq	r3, #8
 8014760:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014764:	bf04      	itt	eq
 8014766:	0100      	lsleq	r0, r0, #4
 8014768:	3304      	addeq	r3, #4
 801476a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801476e:	bf04      	itt	eq
 8014770:	0080      	lsleq	r0, r0, #2
 8014772:	3302      	addeq	r3, #2
 8014774:	2800      	cmp	r0, #0
 8014776:	db05      	blt.n	8014784 <__hi0bits+0x38>
 8014778:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801477c:	f103 0301 	add.w	r3, r3, #1
 8014780:	bf08      	it	eq
 8014782:	2320      	moveq	r3, #32
 8014784:	4618      	mov	r0, r3
 8014786:	4770      	bx	lr
 8014788:	2300      	movs	r3, #0
 801478a:	e7e4      	b.n	8014756 <__hi0bits+0xa>

0801478c <__lo0bits>:
 801478c:	6803      	ldr	r3, [r0, #0]
 801478e:	f013 0207 	ands.w	r2, r3, #7
 8014792:	d00c      	beq.n	80147ae <__lo0bits+0x22>
 8014794:	07d9      	lsls	r1, r3, #31
 8014796:	d422      	bmi.n	80147de <__lo0bits+0x52>
 8014798:	079a      	lsls	r2, r3, #30
 801479a:	bf49      	itett	mi
 801479c:	085b      	lsrmi	r3, r3, #1
 801479e:	089b      	lsrpl	r3, r3, #2
 80147a0:	6003      	strmi	r3, [r0, #0]
 80147a2:	2201      	movmi	r2, #1
 80147a4:	bf5c      	itt	pl
 80147a6:	6003      	strpl	r3, [r0, #0]
 80147a8:	2202      	movpl	r2, #2
 80147aa:	4610      	mov	r0, r2
 80147ac:	4770      	bx	lr
 80147ae:	b299      	uxth	r1, r3
 80147b0:	b909      	cbnz	r1, 80147b6 <__lo0bits+0x2a>
 80147b2:	0c1b      	lsrs	r3, r3, #16
 80147b4:	2210      	movs	r2, #16
 80147b6:	b2d9      	uxtb	r1, r3
 80147b8:	b909      	cbnz	r1, 80147be <__lo0bits+0x32>
 80147ba:	3208      	adds	r2, #8
 80147bc:	0a1b      	lsrs	r3, r3, #8
 80147be:	0719      	lsls	r1, r3, #28
 80147c0:	bf04      	itt	eq
 80147c2:	091b      	lsreq	r3, r3, #4
 80147c4:	3204      	addeq	r2, #4
 80147c6:	0799      	lsls	r1, r3, #30
 80147c8:	bf04      	itt	eq
 80147ca:	089b      	lsreq	r3, r3, #2
 80147cc:	3202      	addeq	r2, #2
 80147ce:	07d9      	lsls	r1, r3, #31
 80147d0:	d403      	bmi.n	80147da <__lo0bits+0x4e>
 80147d2:	085b      	lsrs	r3, r3, #1
 80147d4:	f102 0201 	add.w	r2, r2, #1
 80147d8:	d003      	beq.n	80147e2 <__lo0bits+0x56>
 80147da:	6003      	str	r3, [r0, #0]
 80147dc:	e7e5      	b.n	80147aa <__lo0bits+0x1e>
 80147de:	2200      	movs	r2, #0
 80147e0:	e7e3      	b.n	80147aa <__lo0bits+0x1e>
 80147e2:	2220      	movs	r2, #32
 80147e4:	e7e1      	b.n	80147aa <__lo0bits+0x1e>
	...

080147e8 <__i2b>:
 80147e8:	b510      	push	{r4, lr}
 80147ea:	460c      	mov	r4, r1
 80147ec:	2101      	movs	r1, #1
 80147ee:	f7ff febb 	bl	8014568 <_Balloc>
 80147f2:	4602      	mov	r2, r0
 80147f4:	b928      	cbnz	r0, 8014802 <__i2b+0x1a>
 80147f6:	4b05      	ldr	r3, [pc, #20]	; (801480c <__i2b+0x24>)
 80147f8:	4805      	ldr	r0, [pc, #20]	; (8014810 <__i2b+0x28>)
 80147fa:	f240 1145 	movw	r1, #325	; 0x145
 80147fe:	f7fe fc65 	bl	80130cc <__assert_func>
 8014802:	2301      	movs	r3, #1
 8014804:	6144      	str	r4, [r0, #20]
 8014806:	6103      	str	r3, [r0, #16]
 8014808:	bd10      	pop	{r4, pc}
 801480a:	bf00      	nop
 801480c:	08018dbc 	.word	0x08018dbc
 8014810:	08018e2d 	.word	0x08018e2d

08014814 <__multiply>:
 8014814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014818:	4691      	mov	r9, r2
 801481a:	690a      	ldr	r2, [r1, #16]
 801481c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014820:	429a      	cmp	r2, r3
 8014822:	bfb8      	it	lt
 8014824:	460b      	movlt	r3, r1
 8014826:	460c      	mov	r4, r1
 8014828:	bfbc      	itt	lt
 801482a:	464c      	movlt	r4, r9
 801482c:	4699      	movlt	r9, r3
 801482e:	6927      	ldr	r7, [r4, #16]
 8014830:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014834:	68a3      	ldr	r3, [r4, #8]
 8014836:	6861      	ldr	r1, [r4, #4]
 8014838:	eb07 060a 	add.w	r6, r7, sl
 801483c:	42b3      	cmp	r3, r6
 801483e:	b085      	sub	sp, #20
 8014840:	bfb8      	it	lt
 8014842:	3101      	addlt	r1, #1
 8014844:	f7ff fe90 	bl	8014568 <_Balloc>
 8014848:	b930      	cbnz	r0, 8014858 <__multiply+0x44>
 801484a:	4602      	mov	r2, r0
 801484c:	4b44      	ldr	r3, [pc, #272]	; (8014960 <__multiply+0x14c>)
 801484e:	4845      	ldr	r0, [pc, #276]	; (8014964 <__multiply+0x150>)
 8014850:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014854:	f7fe fc3a 	bl	80130cc <__assert_func>
 8014858:	f100 0514 	add.w	r5, r0, #20
 801485c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014860:	462b      	mov	r3, r5
 8014862:	2200      	movs	r2, #0
 8014864:	4543      	cmp	r3, r8
 8014866:	d321      	bcc.n	80148ac <__multiply+0x98>
 8014868:	f104 0314 	add.w	r3, r4, #20
 801486c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014870:	f109 0314 	add.w	r3, r9, #20
 8014874:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014878:	9202      	str	r2, [sp, #8]
 801487a:	1b3a      	subs	r2, r7, r4
 801487c:	3a15      	subs	r2, #21
 801487e:	f022 0203 	bic.w	r2, r2, #3
 8014882:	3204      	adds	r2, #4
 8014884:	f104 0115 	add.w	r1, r4, #21
 8014888:	428f      	cmp	r7, r1
 801488a:	bf38      	it	cc
 801488c:	2204      	movcc	r2, #4
 801488e:	9201      	str	r2, [sp, #4]
 8014890:	9a02      	ldr	r2, [sp, #8]
 8014892:	9303      	str	r3, [sp, #12]
 8014894:	429a      	cmp	r2, r3
 8014896:	d80c      	bhi.n	80148b2 <__multiply+0x9e>
 8014898:	2e00      	cmp	r6, #0
 801489a:	dd03      	ble.n	80148a4 <__multiply+0x90>
 801489c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d05b      	beq.n	801495c <__multiply+0x148>
 80148a4:	6106      	str	r6, [r0, #16]
 80148a6:	b005      	add	sp, #20
 80148a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ac:	f843 2b04 	str.w	r2, [r3], #4
 80148b0:	e7d8      	b.n	8014864 <__multiply+0x50>
 80148b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80148b6:	f1ba 0f00 	cmp.w	sl, #0
 80148ba:	d024      	beq.n	8014906 <__multiply+0xf2>
 80148bc:	f104 0e14 	add.w	lr, r4, #20
 80148c0:	46a9      	mov	r9, r5
 80148c2:	f04f 0c00 	mov.w	ip, #0
 80148c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80148ca:	f8d9 1000 	ldr.w	r1, [r9]
 80148ce:	fa1f fb82 	uxth.w	fp, r2
 80148d2:	b289      	uxth	r1, r1
 80148d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80148d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80148dc:	f8d9 2000 	ldr.w	r2, [r9]
 80148e0:	4461      	add	r1, ip
 80148e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80148e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80148ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80148ee:	b289      	uxth	r1, r1
 80148f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80148f4:	4577      	cmp	r7, lr
 80148f6:	f849 1b04 	str.w	r1, [r9], #4
 80148fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80148fe:	d8e2      	bhi.n	80148c6 <__multiply+0xb2>
 8014900:	9a01      	ldr	r2, [sp, #4]
 8014902:	f845 c002 	str.w	ip, [r5, r2]
 8014906:	9a03      	ldr	r2, [sp, #12]
 8014908:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801490c:	3304      	adds	r3, #4
 801490e:	f1b9 0f00 	cmp.w	r9, #0
 8014912:	d021      	beq.n	8014958 <__multiply+0x144>
 8014914:	6829      	ldr	r1, [r5, #0]
 8014916:	f104 0c14 	add.w	ip, r4, #20
 801491a:	46ae      	mov	lr, r5
 801491c:	f04f 0a00 	mov.w	sl, #0
 8014920:	f8bc b000 	ldrh.w	fp, [ip]
 8014924:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014928:	fb09 220b 	mla	r2, r9, fp, r2
 801492c:	4452      	add	r2, sl
 801492e:	b289      	uxth	r1, r1
 8014930:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014934:	f84e 1b04 	str.w	r1, [lr], #4
 8014938:	f85c 1b04 	ldr.w	r1, [ip], #4
 801493c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014940:	f8be 1000 	ldrh.w	r1, [lr]
 8014944:	fb09 110a 	mla	r1, r9, sl, r1
 8014948:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801494c:	4567      	cmp	r7, ip
 801494e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014952:	d8e5      	bhi.n	8014920 <__multiply+0x10c>
 8014954:	9a01      	ldr	r2, [sp, #4]
 8014956:	50a9      	str	r1, [r5, r2]
 8014958:	3504      	adds	r5, #4
 801495a:	e799      	b.n	8014890 <__multiply+0x7c>
 801495c:	3e01      	subs	r6, #1
 801495e:	e79b      	b.n	8014898 <__multiply+0x84>
 8014960:	08018dbc 	.word	0x08018dbc
 8014964:	08018e2d 	.word	0x08018e2d

08014968 <__pow5mult>:
 8014968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801496c:	4615      	mov	r5, r2
 801496e:	f012 0203 	ands.w	r2, r2, #3
 8014972:	4606      	mov	r6, r0
 8014974:	460f      	mov	r7, r1
 8014976:	d007      	beq.n	8014988 <__pow5mult+0x20>
 8014978:	4c25      	ldr	r4, [pc, #148]	; (8014a10 <__pow5mult+0xa8>)
 801497a:	3a01      	subs	r2, #1
 801497c:	2300      	movs	r3, #0
 801497e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014982:	f7ff fe53 	bl	801462c <__multadd>
 8014986:	4607      	mov	r7, r0
 8014988:	10ad      	asrs	r5, r5, #2
 801498a:	d03d      	beq.n	8014a08 <__pow5mult+0xa0>
 801498c:	69f4      	ldr	r4, [r6, #28]
 801498e:	b97c      	cbnz	r4, 80149b0 <__pow5mult+0x48>
 8014990:	2010      	movs	r0, #16
 8014992:	f7fc facf 	bl	8010f34 <malloc>
 8014996:	4602      	mov	r2, r0
 8014998:	61f0      	str	r0, [r6, #28]
 801499a:	b928      	cbnz	r0, 80149a8 <__pow5mult+0x40>
 801499c:	4b1d      	ldr	r3, [pc, #116]	; (8014a14 <__pow5mult+0xac>)
 801499e:	481e      	ldr	r0, [pc, #120]	; (8014a18 <__pow5mult+0xb0>)
 80149a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80149a4:	f7fe fb92 	bl	80130cc <__assert_func>
 80149a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80149ac:	6004      	str	r4, [r0, #0]
 80149ae:	60c4      	str	r4, [r0, #12]
 80149b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80149b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80149b8:	b94c      	cbnz	r4, 80149ce <__pow5mult+0x66>
 80149ba:	f240 2171 	movw	r1, #625	; 0x271
 80149be:	4630      	mov	r0, r6
 80149c0:	f7ff ff12 	bl	80147e8 <__i2b>
 80149c4:	2300      	movs	r3, #0
 80149c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80149ca:	4604      	mov	r4, r0
 80149cc:	6003      	str	r3, [r0, #0]
 80149ce:	f04f 0900 	mov.w	r9, #0
 80149d2:	07eb      	lsls	r3, r5, #31
 80149d4:	d50a      	bpl.n	80149ec <__pow5mult+0x84>
 80149d6:	4639      	mov	r1, r7
 80149d8:	4622      	mov	r2, r4
 80149da:	4630      	mov	r0, r6
 80149dc:	f7ff ff1a 	bl	8014814 <__multiply>
 80149e0:	4639      	mov	r1, r7
 80149e2:	4680      	mov	r8, r0
 80149e4:	4630      	mov	r0, r6
 80149e6:	f7ff fdff 	bl	80145e8 <_Bfree>
 80149ea:	4647      	mov	r7, r8
 80149ec:	106d      	asrs	r5, r5, #1
 80149ee:	d00b      	beq.n	8014a08 <__pow5mult+0xa0>
 80149f0:	6820      	ldr	r0, [r4, #0]
 80149f2:	b938      	cbnz	r0, 8014a04 <__pow5mult+0x9c>
 80149f4:	4622      	mov	r2, r4
 80149f6:	4621      	mov	r1, r4
 80149f8:	4630      	mov	r0, r6
 80149fa:	f7ff ff0b 	bl	8014814 <__multiply>
 80149fe:	6020      	str	r0, [r4, #0]
 8014a00:	f8c0 9000 	str.w	r9, [r0]
 8014a04:	4604      	mov	r4, r0
 8014a06:	e7e4      	b.n	80149d2 <__pow5mult+0x6a>
 8014a08:	4638      	mov	r0, r7
 8014a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a0e:	bf00      	nop
 8014a10:	08018f78 	.word	0x08018f78
 8014a14:	08018ca2 	.word	0x08018ca2
 8014a18:	08018e2d 	.word	0x08018e2d

08014a1c <__lshift>:
 8014a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a20:	460c      	mov	r4, r1
 8014a22:	6849      	ldr	r1, [r1, #4]
 8014a24:	6923      	ldr	r3, [r4, #16]
 8014a26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014a2a:	68a3      	ldr	r3, [r4, #8]
 8014a2c:	4607      	mov	r7, r0
 8014a2e:	4691      	mov	r9, r2
 8014a30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014a34:	f108 0601 	add.w	r6, r8, #1
 8014a38:	42b3      	cmp	r3, r6
 8014a3a:	db0b      	blt.n	8014a54 <__lshift+0x38>
 8014a3c:	4638      	mov	r0, r7
 8014a3e:	f7ff fd93 	bl	8014568 <_Balloc>
 8014a42:	4605      	mov	r5, r0
 8014a44:	b948      	cbnz	r0, 8014a5a <__lshift+0x3e>
 8014a46:	4602      	mov	r2, r0
 8014a48:	4b28      	ldr	r3, [pc, #160]	; (8014aec <__lshift+0xd0>)
 8014a4a:	4829      	ldr	r0, [pc, #164]	; (8014af0 <__lshift+0xd4>)
 8014a4c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014a50:	f7fe fb3c 	bl	80130cc <__assert_func>
 8014a54:	3101      	adds	r1, #1
 8014a56:	005b      	lsls	r3, r3, #1
 8014a58:	e7ee      	b.n	8014a38 <__lshift+0x1c>
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	f100 0114 	add.w	r1, r0, #20
 8014a60:	f100 0210 	add.w	r2, r0, #16
 8014a64:	4618      	mov	r0, r3
 8014a66:	4553      	cmp	r3, sl
 8014a68:	db33      	blt.n	8014ad2 <__lshift+0xb6>
 8014a6a:	6920      	ldr	r0, [r4, #16]
 8014a6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014a70:	f104 0314 	add.w	r3, r4, #20
 8014a74:	f019 091f 	ands.w	r9, r9, #31
 8014a78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014a7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014a80:	d02b      	beq.n	8014ada <__lshift+0xbe>
 8014a82:	f1c9 0e20 	rsb	lr, r9, #32
 8014a86:	468a      	mov	sl, r1
 8014a88:	2200      	movs	r2, #0
 8014a8a:	6818      	ldr	r0, [r3, #0]
 8014a8c:	fa00 f009 	lsl.w	r0, r0, r9
 8014a90:	4310      	orrs	r0, r2
 8014a92:	f84a 0b04 	str.w	r0, [sl], #4
 8014a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a9a:	459c      	cmp	ip, r3
 8014a9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014aa0:	d8f3      	bhi.n	8014a8a <__lshift+0x6e>
 8014aa2:	ebac 0304 	sub.w	r3, ip, r4
 8014aa6:	3b15      	subs	r3, #21
 8014aa8:	f023 0303 	bic.w	r3, r3, #3
 8014aac:	3304      	adds	r3, #4
 8014aae:	f104 0015 	add.w	r0, r4, #21
 8014ab2:	4584      	cmp	ip, r0
 8014ab4:	bf38      	it	cc
 8014ab6:	2304      	movcc	r3, #4
 8014ab8:	50ca      	str	r2, [r1, r3]
 8014aba:	b10a      	cbz	r2, 8014ac0 <__lshift+0xa4>
 8014abc:	f108 0602 	add.w	r6, r8, #2
 8014ac0:	3e01      	subs	r6, #1
 8014ac2:	4638      	mov	r0, r7
 8014ac4:	612e      	str	r6, [r5, #16]
 8014ac6:	4621      	mov	r1, r4
 8014ac8:	f7ff fd8e 	bl	80145e8 <_Bfree>
 8014acc:	4628      	mov	r0, r5
 8014ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ad2:	f842 0f04 	str.w	r0, [r2, #4]!
 8014ad6:	3301      	adds	r3, #1
 8014ad8:	e7c5      	b.n	8014a66 <__lshift+0x4a>
 8014ada:	3904      	subs	r1, #4
 8014adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ae0:	f841 2f04 	str.w	r2, [r1, #4]!
 8014ae4:	459c      	cmp	ip, r3
 8014ae6:	d8f9      	bhi.n	8014adc <__lshift+0xc0>
 8014ae8:	e7ea      	b.n	8014ac0 <__lshift+0xa4>
 8014aea:	bf00      	nop
 8014aec:	08018dbc 	.word	0x08018dbc
 8014af0:	08018e2d 	.word	0x08018e2d

08014af4 <__mcmp>:
 8014af4:	b530      	push	{r4, r5, lr}
 8014af6:	6902      	ldr	r2, [r0, #16]
 8014af8:	690c      	ldr	r4, [r1, #16]
 8014afa:	1b12      	subs	r2, r2, r4
 8014afc:	d10e      	bne.n	8014b1c <__mcmp+0x28>
 8014afe:	f100 0314 	add.w	r3, r0, #20
 8014b02:	3114      	adds	r1, #20
 8014b04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014b08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014b0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014b10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014b14:	42a5      	cmp	r5, r4
 8014b16:	d003      	beq.n	8014b20 <__mcmp+0x2c>
 8014b18:	d305      	bcc.n	8014b26 <__mcmp+0x32>
 8014b1a:	2201      	movs	r2, #1
 8014b1c:	4610      	mov	r0, r2
 8014b1e:	bd30      	pop	{r4, r5, pc}
 8014b20:	4283      	cmp	r3, r0
 8014b22:	d3f3      	bcc.n	8014b0c <__mcmp+0x18>
 8014b24:	e7fa      	b.n	8014b1c <__mcmp+0x28>
 8014b26:	f04f 32ff 	mov.w	r2, #4294967295
 8014b2a:	e7f7      	b.n	8014b1c <__mcmp+0x28>

08014b2c <__mdiff>:
 8014b2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b30:	460c      	mov	r4, r1
 8014b32:	4606      	mov	r6, r0
 8014b34:	4611      	mov	r1, r2
 8014b36:	4620      	mov	r0, r4
 8014b38:	4690      	mov	r8, r2
 8014b3a:	f7ff ffdb 	bl	8014af4 <__mcmp>
 8014b3e:	1e05      	subs	r5, r0, #0
 8014b40:	d110      	bne.n	8014b64 <__mdiff+0x38>
 8014b42:	4629      	mov	r1, r5
 8014b44:	4630      	mov	r0, r6
 8014b46:	f7ff fd0f 	bl	8014568 <_Balloc>
 8014b4a:	b930      	cbnz	r0, 8014b5a <__mdiff+0x2e>
 8014b4c:	4b3a      	ldr	r3, [pc, #232]	; (8014c38 <__mdiff+0x10c>)
 8014b4e:	4602      	mov	r2, r0
 8014b50:	f240 2137 	movw	r1, #567	; 0x237
 8014b54:	4839      	ldr	r0, [pc, #228]	; (8014c3c <__mdiff+0x110>)
 8014b56:	f7fe fab9 	bl	80130cc <__assert_func>
 8014b5a:	2301      	movs	r3, #1
 8014b5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014b60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b64:	bfa4      	itt	ge
 8014b66:	4643      	movge	r3, r8
 8014b68:	46a0      	movge	r8, r4
 8014b6a:	4630      	mov	r0, r6
 8014b6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014b70:	bfa6      	itte	ge
 8014b72:	461c      	movge	r4, r3
 8014b74:	2500      	movge	r5, #0
 8014b76:	2501      	movlt	r5, #1
 8014b78:	f7ff fcf6 	bl	8014568 <_Balloc>
 8014b7c:	b920      	cbnz	r0, 8014b88 <__mdiff+0x5c>
 8014b7e:	4b2e      	ldr	r3, [pc, #184]	; (8014c38 <__mdiff+0x10c>)
 8014b80:	4602      	mov	r2, r0
 8014b82:	f240 2145 	movw	r1, #581	; 0x245
 8014b86:	e7e5      	b.n	8014b54 <__mdiff+0x28>
 8014b88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014b8c:	6926      	ldr	r6, [r4, #16]
 8014b8e:	60c5      	str	r5, [r0, #12]
 8014b90:	f104 0914 	add.w	r9, r4, #20
 8014b94:	f108 0514 	add.w	r5, r8, #20
 8014b98:	f100 0e14 	add.w	lr, r0, #20
 8014b9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014ba0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014ba4:	f108 0210 	add.w	r2, r8, #16
 8014ba8:	46f2      	mov	sl, lr
 8014baa:	2100      	movs	r1, #0
 8014bac:	f859 3b04 	ldr.w	r3, [r9], #4
 8014bb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014bb4:	fa11 f88b 	uxtah	r8, r1, fp
 8014bb8:	b299      	uxth	r1, r3
 8014bba:	0c1b      	lsrs	r3, r3, #16
 8014bbc:	eba8 0801 	sub.w	r8, r8, r1
 8014bc0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014bc4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014bc8:	fa1f f888 	uxth.w	r8, r8
 8014bcc:	1419      	asrs	r1, r3, #16
 8014bce:	454e      	cmp	r6, r9
 8014bd0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014bd4:	f84a 3b04 	str.w	r3, [sl], #4
 8014bd8:	d8e8      	bhi.n	8014bac <__mdiff+0x80>
 8014bda:	1b33      	subs	r3, r6, r4
 8014bdc:	3b15      	subs	r3, #21
 8014bde:	f023 0303 	bic.w	r3, r3, #3
 8014be2:	3304      	adds	r3, #4
 8014be4:	3415      	adds	r4, #21
 8014be6:	42a6      	cmp	r6, r4
 8014be8:	bf38      	it	cc
 8014bea:	2304      	movcc	r3, #4
 8014bec:	441d      	add	r5, r3
 8014bee:	4473      	add	r3, lr
 8014bf0:	469e      	mov	lr, r3
 8014bf2:	462e      	mov	r6, r5
 8014bf4:	4566      	cmp	r6, ip
 8014bf6:	d30e      	bcc.n	8014c16 <__mdiff+0xea>
 8014bf8:	f10c 0203 	add.w	r2, ip, #3
 8014bfc:	1b52      	subs	r2, r2, r5
 8014bfe:	f022 0203 	bic.w	r2, r2, #3
 8014c02:	3d03      	subs	r5, #3
 8014c04:	45ac      	cmp	ip, r5
 8014c06:	bf38      	it	cc
 8014c08:	2200      	movcc	r2, #0
 8014c0a:	4413      	add	r3, r2
 8014c0c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014c10:	b17a      	cbz	r2, 8014c32 <__mdiff+0x106>
 8014c12:	6107      	str	r7, [r0, #16]
 8014c14:	e7a4      	b.n	8014b60 <__mdiff+0x34>
 8014c16:	f856 8b04 	ldr.w	r8, [r6], #4
 8014c1a:	fa11 f288 	uxtah	r2, r1, r8
 8014c1e:	1414      	asrs	r4, r2, #16
 8014c20:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014c24:	b292      	uxth	r2, r2
 8014c26:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014c2a:	f84e 2b04 	str.w	r2, [lr], #4
 8014c2e:	1421      	asrs	r1, r4, #16
 8014c30:	e7e0      	b.n	8014bf4 <__mdiff+0xc8>
 8014c32:	3f01      	subs	r7, #1
 8014c34:	e7ea      	b.n	8014c0c <__mdiff+0xe0>
 8014c36:	bf00      	nop
 8014c38:	08018dbc 	.word	0x08018dbc
 8014c3c:	08018e2d 	.word	0x08018e2d

08014c40 <__ulp>:
 8014c40:	b082      	sub	sp, #8
 8014c42:	ed8d 0b00 	vstr	d0, [sp]
 8014c46:	9a01      	ldr	r2, [sp, #4]
 8014c48:	4b0f      	ldr	r3, [pc, #60]	; (8014c88 <__ulp+0x48>)
 8014c4a:	4013      	ands	r3, r2
 8014c4c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	dc08      	bgt.n	8014c66 <__ulp+0x26>
 8014c54:	425b      	negs	r3, r3
 8014c56:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8014c5a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014c5e:	da04      	bge.n	8014c6a <__ulp+0x2a>
 8014c60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014c64:	4113      	asrs	r3, r2
 8014c66:	2200      	movs	r2, #0
 8014c68:	e008      	b.n	8014c7c <__ulp+0x3c>
 8014c6a:	f1a2 0314 	sub.w	r3, r2, #20
 8014c6e:	2b1e      	cmp	r3, #30
 8014c70:	bfda      	itte	le
 8014c72:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8014c76:	40da      	lsrle	r2, r3
 8014c78:	2201      	movgt	r2, #1
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	4619      	mov	r1, r3
 8014c7e:	4610      	mov	r0, r2
 8014c80:	ec41 0b10 	vmov	d0, r0, r1
 8014c84:	b002      	add	sp, #8
 8014c86:	4770      	bx	lr
 8014c88:	7ff00000 	.word	0x7ff00000

08014c8c <__b2d>:
 8014c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c90:	6906      	ldr	r6, [r0, #16]
 8014c92:	f100 0814 	add.w	r8, r0, #20
 8014c96:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014c9a:	1f37      	subs	r7, r6, #4
 8014c9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014ca0:	4610      	mov	r0, r2
 8014ca2:	f7ff fd53 	bl	801474c <__hi0bits>
 8014ca6:	f1c0 0320 	rsb	r3, r0, #32
 8014caa:	280a      	cmp	r0, #10
 8014cac:	600b      	str	r3, [r1, #0]
 8014cae:	491b      	ldr	r1, [pc, #108]	; (8014d1c <__b2d+0x90>)
 8014cb0:	dc15      	bgt.n	8014cde <__b2d+0x52>
 8014cb2:	f1c0 0c0b 	rsb	ip, r0, #11
 8014cb6:	fa22 f30c 	lsr.w	r3, r2, ip
 8014cba:	45b8      	cmp	r8, r7
 8014cbc:	ea43 0501 	orr.w	r5, r3, r1
 8014cc0:	bf34      	ite	cc
 8014cc2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014cc6:	2300      	movcs	r3, #0
 8014cc8:	3015      	adds	r0, #21
 8014cca:	fa02 f000 	lsl.w	r0, r2, r0
 8014cce:	fa23 f30c 	lsr.w	r3, r3, ip
 8014cd2:	4303      	orrs	r3, r0
 8014cd4:	461c      	mov	r4, r3
 8014cd6:	ec45 4b10 	vmov	d0, r4, r5
 8014cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cde:	45b8      	cmp	r8, r7
 8014ce0:	bf3a      	itte	cc
 8014ce2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014ce6:	f1a6 0708 	subcc.w	r7, r6, #8
 8014cea:	2300      	movcs	r3, #0
 8014cec:	380b      	subs	r0, #11
 8014cee:	d012      	beq.n	8014d16 <__b2d+0x8a>
 8014cf0:	f1c0 0120 	rsb	r1, r0, #32
 8014cf4:	fa23 f401 	lsr.w	r4, r3, r1
 8014cf8:	4082      	lsls	r2, r0
 8014cfa:	4322      	orrs	r2, r4
 8014cfc:	4547      	cmp	r7, r8
 8014cfe:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8014d02:	bf8c      	ite	hi
 8014d04:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014d08:	2200      	movls	r2, #0
 8014d0a:	4083      	lsls	r3, r0
 8014d0c:	40ca      	lsrs	r2, r1
 8014d0e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014d12:	4313      	orrs	r3, r2
 8014d14:	e7de      	b.n	8014cd4 <__b2d+0x48>
 8014d16:	ea42 0501 	orr.w	r5, r2, r1
 8014d1a:	e7db      	b.n	8014cd4 <__b2d+0x48>
 8014d1c:	3ff00000 	.word	0x3ff00000

08014d20 <__d2b>:
 8014d20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014d24:	460f      	mov	r7, r1
 8014d26:	2101      	movs	r1, #1
 8014d28:	ec59 8b10 	vmov	r8, r9, d0
 8014d2c:	4616      	mov	r6, r2
 8014d2e:	f7ff fc1b 	bl	8014568 <_Balloc>
 8014d32:	4604      	mov	r4, r0
 8014d34:	b930      	cbnz	r0, 8014d44 <__d2b+0x24>
 8014d36:	4602      	mov	r2, r0
 8014d38:	4b24      	ldr	r3, [pc, #144]	; (8014dcc <__d2b+0xac>)
 8014d3a:	4825      	ldr	r0, [pc, #148]	; (8014dd0 <__d2b+0xb0>)
 8014d3c:	f240 310f 	movw	r1, #783	; 0x30f
 8014d40:	f7fe f9c4 	bl	80130cc <__assert_func>
 8014d44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014d48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014d4c:	bb2d      	cbnz	r5, 8014d9a <__d2b+0x7a>
 8014d4e:	9301      	str	r3, [sp, #4]
 8014d50:	f1b8 0300 	subs.w	r3, r8, #0
 8014d54:	d026      	beq.n	8014da4 <__d2b+0x84>
 8014d56:	4668      	mov	r0, sp
 8014d58:	9300      	str	r3, [sp, #0]
 8014d5a:	f7ff fd17 	bl	801478c <__lo0bits>
 8014d5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014d62:	b1e8      	cbz	r0, 8014da0 <__d2b+0x80>
 8014d64:	f1c0 0320 	rsb	r3, r0, #32
 8014d68:	fa02 f303 	lsl.w	r3, r2, r3
 8014d6c:	430b      	orrs	r3, r1
 8014d6e:	40c2      	lsrs	r2, r0
 8014d70:	6163      	str	r3, [r4, #20]
 8014d72:	9201      	str	r2, [sp, #4]
 8014d74:	9b01      	ldr	r3, [sp, #4]
 8014d76:	61a3      	str	r3, [r4, #24]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	bf14      	ite	ne
 8014d7c:	2202      	movne	r2, #2
 8014d7e:	2201      	moveq	r2, #1
 8014d80:	6122      	str	r2, [r4, #16]
 8014d82:	b1bd      	cbz	r5, 8014db4 <__d2b+0x94>
 8014d84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014d88:	4405      	add	r5, r0
 8014d8a:	603d      	str	r5, [r7, #0]
 8014d8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014d90:	6030      	str	r0, [r6, #0]
 8014d92:	4620      	mov	r0, r4
 8014d94:	b003      	add	sp, #12
 8014d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014d9e:	e7d6      	b.n	8014d4e <__d2b+0x2e>
 8014da0:	6161      	str	r1, [r4, #20]
 8014da2:	e7e7      	b.n	8014d74 <__d2b+0x54>
 8014da4:	a801      	add	r0, sp, #4
 8014da6:	f7ff fcf1 	bl	801478c <__lo0bits>
 8014daa:	9b01      	ldr	r3, [sp, #4]
 8014dac:	6163      	str	r3, [r4, #20]
 8014dae:	3020      	adds	r0, #32
 8014db0:	2201      	movs	r2, #1
 8014db2:	e7e5      	b.n	8014d80 <__d2b+0x60>
 8014db4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014db8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014dbc:	6038      	str	r0, [r7, #0]
 8014dbe:	6918      	ldr	r0, [r3, #16]
 8014dc0:	f7ff fcc4 	bl	801474c <__hi0bits>
 8014dc4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014dc8:	e7e2      	b.n	8014d90 <__d2b+0x70>
 8014dca:	bf00      	nop
 8014dcc:	08018dbc 	.word	0x08018dbc
 8014dd0:	08018e2d 	.word	0x08018e2d

08014dd4 <__ratio>:
 8014dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dd8:	4688      	mov	r8, r1
 8014dda:	4669      	mov	r1, sp
 8014ddc:	4681      	mov	r9, r0
 8014dde:	f7ff ff55 	bl	8014c8c <__b2d>
 8014de2:	a901      	add	r1, sp, #4
 8014de4:	4640      	mov	r0, r8
 8014de6:	ec55 4b10 	vmov	r4, r5, d0
 8014dea:	f7ff ff4f 	bl	8014c8c <__b2d>
 8014dee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014df2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014df6:	eba3 0c02 	sub.w	ip, r3, r2
 8014dfa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014dfe:	1a9b      	subs	r3, r3, r2
 8014e00:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014e04:	ec51 0b10 	vmov	r0, r1, d0
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	bfd6      	itet	le
 8014e0c:	460a      	movle	r2, r1
 8014e0e:	462a      	movgt	r2, r5
 8014e10:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014e14:	468b      	mov	fp, r1
 8014e16:	462f      	mov	r7, r5
 8014e18:	bfd4      	ite	le
 8014e1a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014e1e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014e22:	4620      	mov	r0, r4
 8014e24:	ee10 2a10 	vmov	r2, s0
 8014e28:	465b      	mov	r3, fp
 8014e2a:	4639      	mov	r1, r7
 8014e2c:	f7eb fd1e 	bl	800086c <__aeabi_ddiv>
 8014e30:	ec41 0b10 	vmov	d0, r0, r1
 8014e34:	b003      	add	sp, #12
 8014e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e3a <__copybits>:
 8014e3a:	3901      	subs	r1, #1
 8014e3c:	b570      	push	{r4, r5, r6, lr}
 8014e3e:	1149      	asrs	r1, r1, #5
 8014e40:	6914      	ldr	r4, [r2, #16]
 8014e42:	3101      	adds	r1, #1
 8014e44:	f102 0314 	add.w	r3, r2, #20
 8014e48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014e4c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014e50:	1f05      	subs	r5, r0, #4
 8014e52:	42a3      	cmp	r3, r4
 8014e54:	d30c      	bcc.n	8014e70 <__copybits+0x36>
 8014e56:	1aa3      	subs	r3, r4, r2
 8014e58:	3b11      	subs	r3, #17
 8014e5a:	f023 0303 	bic.w	r3, r3, #3
 8014e5e:	3211      	adds	r2, #17
 8014e60:	42a2      	cmp	r2, r4
 8014e62:	bf88      	it	hi
 8014e64:	2300      	movhi	r3, #0
 8014e66:	4418      	add	r0, r3
 8014e68:	2300      	movs	r3, #0
 8014e6a:	4288      	cmp	r0, r1
 8014e6c:	d305      	bcc.n	8014e7a <__copybits+0x40>
 8014e6e:	bd70      	pop	{r4, r5, r6, pc}
 8014e70:	f853 6b04 	ldr.w	r6, [r3], #4
 8014e74:	f845 6f04 	str.w	r6, [r5, #4]!
 8014e78:	e7eb      	b.n	8014e52 <__copybits+0x18>
 8014e7a:	f840 3b04 	str.w	r3, [r0], #4
 8014e7e:	e7f4      	b.n	8014e6a <__copybits+0x30>

08014e80 <__any_on>:
 8014e80:	f100 0214 	add.w	r2, r0, #20
 8014e84:	6900      	ldr	r0, [r0, #16]
 8014e86:	114b      	asrs	r3, r1, #5
 8014e88:	4298      	cmp	r0, r3
 8014e8a:	b510      	push	{r4, lr}
 8014e8c:	db11      	blt.n	8014eb2 <__any_on+0x32>
 8014e8e:	dd0a      	ble.n	8014ea6 <__any_on+0x26>
 8014e90:	f011 011f 	ands.w	r1, r1, #31
 8014e94:	d007      	beq.n	8014ea6 <__any_on+0x26>
 8014e96:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014e9a:	fa24 f001 	lsr.w	r0, r4, r1
 8014e9e:	fa00 f101 	lsl.w	r1, r0, r1
 8014ea2:	428c      	cmp	r4, r1
 8014ea4:	d10b      	bne.n	8014ebe <__any_on+0x3e>
 8014ea6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014eaa:	4293      	cmp	r3, r2
 8014eac:	d803      	bhi.n	8014eb6 <__any_on+0x36>
 8014eae:	2000      	movs	r0, #0
 8014eb0:	bd10      	pop	{r4, pc}
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	e7f7      	b.n	8014ea6 <__any_on+0x26>
 8014eb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014eba:	2900      	cmp	r1, #0
 8014ebc:	d0f5      	beq.n	8014eaa <__any_on+0x2a>
 8014ebe:	2001      	movs	r0, #1
 8014ec0:	e7f6      	b.n	8014eb0 <__any_on+0x30>

08014ec2 <__ascii_wctomb>:
 8014ec2:	b149      	cbz	r1, 8014ed8 <__ascii_wctomb+0x16>
 8014ec4:	2aff      	cmp	r2, #255	; 0xff
 8014ec6:	bf85      	ittet	hi
 8014ec8:	238a      	movhi	r3, #138	; 0x8a
 8014eca:	6003      	strhi	r3, [r0, #0]
 8014ecc:	700a      	strbls	r2, [r1, #0]
 8014ece:	f04f 30ff 	movhi.w	r0, #4294967295
 8014ed2:	bf98      	it	ls
 8014ed4:	2001      	movls	r0, #1
 8014ed6:	4770      	bx	lr
 8014ed8:	4608      	mov	r0, r1
 8014eda:	4770      	bx	lr

08014edc <__ssputs_r>:
 8014edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ee0:	688e      	ldr	r6, [r1, #8]
 8014ee2:	461f      	mov	r7, r3
 8014ee4:	42be      	cmp	r6, r7
 8014ee6:	680b      	ldr	r3, [r1, #0]
 8014ee8:	4682      	mov	sl, r0
 8014eea:	460c      	mov	r4, r1
 8014eec:	4690      	mov	r8, r2
 8014eee:	d82c      	bhi.n	8014f4a <__ssputs_r+0x6e>
 8014ef0:	898a      	ldrh	r2, [r1, #12]
 8014ef2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014ef6:	d026      	beq.n	8014f46 <__ssputs_r+0x6a>
 8014ef8:	6965      	ldr	r5, [r4, #20]
 8014efa:	6909      	ldr	r1, [r1, #16]
 8014efc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014f00:	eba3 0901 	sub.w	r9, r3, r1
 8014f04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014f08:	1c7b      	adds	r3, r7, #1
 8014f0a:	444b      	add	r3, r9
 8014f0c:	106d      	asrs	r5, r5, #1
 8014f0e:	429d      	cmp	r5, r3
 8014f10:	bf38      	it	cc
 8014f12:	461d      	movcc	r5, r3
 8014f14:	0553      	lsls	r3, r2, #21
 8014f16:	d527      	bpl.n	8014f68 <__ssputs_r+0x8c>
 8014f18:	4629      	mov	r1, r5
 8014f1a:	f7fc f83b 	bl	8010f94 <_malloc_r>
 8014f1e:	4606      	mov	r6, r0
 8014f20:	b360      	cbz	r0, 8014f7c <__ssputs_r+0xa0>
 8014f22:	6921      	ldr	r1, [r4, #16]
 8014f24:	464a      	mov	r2, r9
 8014f26:	f7fe f8b4 	bl	8013092 <memcpy>
 8014f2a:	89a3      	ldrh	r3, [r4, #12]
 8014f2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f34:	81a3      	strh	r3, [r4, #12]
 8014f36:	6126      	str	r6, [r4, #16]
 8014f38:	6165      	str	r5, [r4, #20]
 8014f3a:	444e      	add	r6, r9
 8014f3c:	eba5 0509 	sub.w	r5, r5, r9
 8014f40:	6026      	str	r6, [r4, #0]
 8014f42:	60a5      	str	r5, [r4, #8]
 8014f44:	463e      	mov	r6, r7
 8014f46:	42be      	cmp	r6, r7
 8014f48:	d900      	bls.n	8014f4c <__ssputs_r+0x70>
 8014f4a:	463e      	mov	r6, r7
 8014f4c:	6820      	ldr	r0, [r4, #0]
 8014f4e:	4632      	mov	r2, r6
 8014f50:	4641      	mov	r1, r8
 8014f52:	f000 f9db 	bl	801530c <memmove>
 8014f56:	68a3      	ldr	r3, [r4, #8]
 8014f58:	1b9b      	subs	r3, r3, r6
 8014f5a:	60a3      	str	r3, [r4, #8]
 8014f5c:	6823      	ldr	r3, [r4, #0]
 8014f5e:	4433      	add	r3, r6
 8014f60:	6023      	str	r3, [r4, #0]
 8014f62:	2000      	movs	r0, #0
 8014f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f68:	462a      	mov	r2, r5
 8014f6a:	f000 fa06 	bl	801537a <_realloc_r>
 8014f6e:	4606      	mov	r6, r0
 8014f70:	2800      	cmp	r0, #0
 8014f72:	d1e0      	bne.n	8014f36 <__ssputs_r+0x5a>
 8014f74:	6921      	ldr	r1, [r4, #16]
 8014f76:	4650      	mov	r0, sl
 8014f78:	f7fe ff40 	bl	8013dfc <_free_r>
 8014f7c:	230c      	movs	r3, #12
 8014f7e:	f8ca 3000 	str.w	r3, [sl]
 8014f82:	89a3      	ldrh	r3, [r4, #12]
 8014f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f88:	81a3      	strh	r3, [r4, #12]
 8014f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8014f8e:	e7e9      	b.n	8014f64 <__ssputs_r+0x88>

08014f90 <_svfiprintf_r>:
 8014f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f94:	4698      	mov	r8, r3
 8014f96:	898b      	ldrh	r3, [r1, #12]
 8014f98:	061b      	lsls	r3, r3, #24
 8014f9a:	b09d      	sub	sp, #116	; 0x74
 8014f9c:	4607      	mov	r7, r0
 8014f9e:	460d      	mov	r5, r1
 8014fa0:	4614      	mov	r4, r2
 8014fa2:	d50e      	bpl.n	8014fc2 <_svfiprintf_r+0x32>
 8014fa4:	690b      	ldr	r3, [r1, #16]
 8014fa6:	b963      	cbnz	r3, 8014fc2 <_svfiprintf_r+0x32>
 8014fa8:	2140      	movs	r1, #64	; 0x40
 8014faa:	f7fb fff3 	bl	8010f94 <_malloc_r>
 8014fae:	6028      	str	r0, [r5, #0]
 8014fb0:	6128      	str	r0, [r5, #16]
 8014fb2:	b920      	cbnz	r0, 8014fbe <_svfiprintf_r+0x2e>
 8014fb4:	230c      	movs	r3, #12
 8014fb6:	603b      	str	r3, [r7, #0]
 8014fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8014fbc:	e0d0      	b.n	8015160 <_svfiprintf_r+0x1d0>
 8014fbe:	2340      	movs	r3, #64	; 0x40
 8014fc0:	616b      	str	r3, [r5, #20]
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8014fc6:	2320      	movs	r3, #32
 8014fc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014fcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8014fd0:	2330      	movs	r3, #48	; 0x30
 8014fd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015178 <_svfiprintf_r+0x1e8>
 8014fd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014fda:	f04f 0901 	mov.w	r9, #1
 8014fde:	4623      	mov	r3, r4
 8014fe0:	469a      	mov	sl, r3
 8014fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014fe6:	b10a      	cbz	r2, 8014fec <_svfiprintf_r+0x5c>
 8014fe8:	2a25      	cmp	r2, #37	; 0x25
 8014fea:	d1f9      	bne.n	8014fe0 <_svfiprintf_r+0x50>
 8014fec:	ebba 0b04 	subs.w	fp, sl, r4
 8014ff0:	d00b      	beq.n	801500a <_svfiprintf_r+0x7a>
 8014ff2:	465b      	mov	r3, fp
 8014ff4:	4622      	mov	r2, r4
 8014ff6:	4629      	mov	r1, r5
 8014ff8:	4638      	mov	r0, r7
 8014ffa:	f7ff ff6f 	bl	8014edc <__ssputs_r>
 8014ffe:	3001      	adds	r0, #1
 8015000:	f000 80a9 	beq.w	8015156 <_svfiprintf_r+0x1c6>
 8015004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015006:	445a      	add	r2, fp
 8015008:	9209      	str	r2, [sp, #36]	; 0x24
 801500a:	f89a 3000 	ldrb.w	r3, [sl]
 801500e:	2b00      	cmp	r3, #0
 8015010:	f000 80a1 	beq.w	8015156 <_svfiprintf_r+0x1c6>
 8015014:	2300      	movs	r3, #0
 8015016:	f04f 32ff 	mov.w	r2, #4294967295
 801501a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801501e:	f10a 0a01 	add.w	sl, sl, #1
 8015022:	9304      	str	r3, [sp, #16]
 8015024:	9307      	str	r3, [sp, #28]
 8015026:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801502a:	931a      	str	r3, [sp, #104]	; 0x68
 801502c:	4654      	mov	r4, sl
 801502e:	2205      	movs	r2, #5
 8015030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015034:	4850      	ldr	r0, [pc, #320]	; (8015178 <_svfiprintf_r+0x1e8>)
 8015036:	f7eb f8db 	bl	80001f0 <memchr>
 801503a:	9a04      	ldr	r2, [sp, #16]
 801503c:	b9d8      	cbnz	r0, 8015076 <_svfiprintf_r+0xe6>
 801503e:	06d0      	lsls	r0, r2, #27
 8015040:	bf44      	itt	mi
 8015042:	2320      	movmi	r3, #32
 8015044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015048:	0711      	lsls	r1, r2, #28
 801504a:	bf44      	itt	mi
 801504c:	232b      	movmi	r3, #43	; 0x2b
 801504e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015052:	f89a 3000 	ldrb.w	r3, [sl]
 8015056:	2b2a      	cmp	r3, #42	; 0x2a
 8015058:	d015      	beq.n	8015086 <_svfiprintf_r+0xf6>
 801505a:	9a07      	ldr	r2, [sp, #28]
 801505c:	4654      	mov	r4, sl
 801505e:	2000      	movs	r0, #0
 8015060:	f04f 0c0a 	mov.w	ip, #10
 8015064:	4621      	mov	r1, r4
 8015066:	f811 3b01 	ldrb.w	r3, [r1], #1
 801506a:	3b30      	subs	r3, #48	; 0x30
 801506c:	2b09      	cmp	r3, #9
 801506e:	d94d      	bls.n	801510c <_svfiprintf_r+0x17c>
 8015070:	b1b0      	cbz	r0, 80150a0 <_svfiprintf_r+0x110>
 8015072:	9207      	str	r2, [sp, #28]
 8015074:	e014      	b.n	80150a0 <_svfiprintf_r+0x110>
 8015076:	eba0 0308 	sub.w	r3, r0, r8
 801507a:	fa09 f303 	lsl.w	r3, r9, r3
 801507e:	4313      	orrs	r3, r2
 8015080:	9304      	str	r3, [sp, #16]
 8015082:	46a2      	mov	sl, r4
 8015084:	e7d2      	b.n	801502c <_svfiprintf_r+0x9c>
 8015086:	9b03      	ldr	r3, [sp, #12]
 8015088:	1d19      	adds	r1, r3, #4
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	9103      	str	r1, [sp, #12]
 801508e:	2b00      	cmp	r3, #0
 8015090:	bfbb      	ittet	lt
 8015092:	425b      	neglt	r3, r3
 8015094:	f042 0202 	orrlt.w	r2, r2, #2
 8015098:	9307      	strge	r3, [sp, #28]
 801509a:	9307      	strlt	r3, [sp, #28]
 801509c:	bfb8      	it	lt
 801509e:	9204      	strlt	r2, [sp, #16]
 80150a0:	7823      	ldrb	r3, [r4, #0]
 80150a2:	2b2e      	cmp	r3, #46	; 0x2e
 80150a4:	d10c      	bne.n	80150c0 <_svfiprintf_r+0x130>
 80150a6:	7863      	ldrb	r3, [r4, #1]
 80150a8:	2b2a      	cmp	r3, #42	; 0x2a
 80150aa:	d134      	bne.n	8015116 <_svfiprintf_r+0x186>
 80150ac:	9b03      	ldr	r3, [sp, #12]
 80150ae:	1d1a      	adds	r2, r3, #4
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	9203      	str	r2, [sp, #12]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	bfb8      	it	lt
 80150b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80150bc:	3402      	adds	r4, #2
 80150be:	9305      	str	r3, [sp, #20]
 80150c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015188 <_svfiprintf_r+0x1f8>
 80150c4:	7821      	ldrb	r1, [r4, #0]
 80150c6:	2203      	movs	r2, #3
 80150c8:	4650      	mov	r0, sl
 80150ca:	f7eb f891 	bl	80001f0 <memchr>
 80150ce:	b138      	cbz	r0, 80150e0 <_svfiprintf_r+0x150>
 80150d0:	9b04      	ldr	r3, [sp, #16]
 80150d2:	eba0 000a 	sub.w	r0, r0, sl
 80150d6:	2240      	movs	r2, #64	; 0x40
 80150d8:	4082      	lsls	r2, r0
 80150da:	4313      	orrs	r3, r2
 80150dc:	3401      	adds	r4, #1
 80150de:	9304      	str	r3, [sp, #16]
 80150e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150e4:	4825      	ldr	r0, [pc, #148]	; (801517c <_svfiprintf_r+0x1ec>)
 80150e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80150ea:	2206      	movs	r2, #6
 80150ec:	f7eb f880 	bl	80001f0 <memchr>
 80150f0:	2800      	cmp	r0, #0
 80150f2:	d038      	beq.n	8015166 <_svfiprintf_r+0x1d6>
 80150f4:	4b22      	ldr	r3, [pc, #136]	; (8015180 <_svfiprintf_r+0x1f0>)
 80150f6:	bb1b      	cbnz	r3, 8015140 <_svfiprintf_r+0x1b0>
 80150f8:	9b03      	ldr	r3, [sp, #12]
 80150fa:	3307      	adds	r3, #7
 80150fc:	f023 0307 	bic.w	r3, r3, #7
 8015100:	3308      	adds	r3, #8
 8015102:	9303      	str	r3, [sp, #12]
 8015104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015106:	4433      	add	r3, r6
 8015108:	9309      	str	r3, [sp, #36]	; 0x24
 801510a:	e768      	b.n	8014fde <_svfiprintf_r+0x4e>
 801510c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015110:	460c      	mov	r4, r1
 8015112:	2001      	movs	r0, #1
 8015114:	e7a6      	b.n	8015064 <_svfiprintf_r+0xd4>
 8015116:	2300      	movs	r3, #0
 8015118:	3401      	adds	r4, #1
 801511a:	9305      	str	r3, [sp, #20]
 801511c:	4619      	mov	r1, r3
 801511e:	f04f 0c0a 	mov.w	ip, #10
 8015122:	4620      	mov	r0, r4
 8015124:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015128:	3a30      	subs	r2, #48	; 0x30
 801512a:	2a09      	cmp	r2, #9
 801512c:	d903      	bls.n	8015136 <_svfiprintf_r+0x1a6>
 801512e:	2b00      	cmp	r3, #0
 8015130:	d0c6      	beq.n	80150c0 <_svfiprintf_r+0x130>
 8015132:	9105      	str	r1, [sp, #20]
 8015134:	e7c4      	b.n	80150c0 <_svfiprintf_r+0x130>
 8015136:	fb0c 2101 	mla	r1, ip, r1, r2
 801513a:	4604      	mov	r4, r0
 801513c:	2301      	movs	r3, #1
 801513e:	e7f0      	b.n	8015122 <_svfiprintf_r+0x192>
 8015140:	ab03      	add	r3, sp, #12
 8015142:	9300      	str	r3, [sp, #0]
 8015144:	462a      	mov	r2, r5
 8015146:	4b0f      	ldr	r3, [pc, #60]	; (8015184 <_svfiprintf_r+0x1f4>)
 8015148:	a904      	add	r1, sp, #16
 801514a:	4638      	mov	r0, r7
 801514c:	f7fc ff56 	bl	8011ffc <_printf_float>
 8015150:	1c42      	adds	r2, r0, #1
 8015152:	4606      	mov	r6, r0
 8015154:	d1d6      	bne.n	8015104 <_svfiprintf_r+0x174>
 8015156:	89ab      	ldrh	r3, [r5, #12]
 8015158:	065b      	lsls	r3, r3, #25
 801515a:	f53f af2d 	bmi.w	8014fb8 <_svfiprintf_r+0x28>
 801515e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015160:	b01d      	add	sp, #116	; 0x74
 8015162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015166:	ab03      	add	r3, sp, #12
 8015168:	9300      	str	r3, [sp, #0]
 801516a:	462a      	mov	r2, r5
 801516c:	4b05      	ldr	r3, [pc, #20]	; (8015184 <_svfiprintf_r+0x1f4>)
 801516e:	a904      	add	r1, sp, #16
 8015170:	4638      	mov	r0, r7
 8015172:	f7fd f9e7 	bl	8012544 <_printf_i>
 8015176:	e7eb      	b.n	8015150 <_svfiprintf_r+0x1c0>
 8015178:	08018f84 	.word	0x08018f84
 801517c:	08018f8e 	.word	0x08018f8e
 8015180:	08011ffd 	.word	0x08011ffd
 8015184:	08014edd 	.word	0x08014edd
 8015188:	08018f8a 	.word	0x08018f8a

0801518c <__sflush_r>:
 801518c:	898a      	ldrh	r2, [r1, #12]
 801518e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015192:	4605      	mov	r5, r0
 8015194:	0710      	lsls	r0, r2, #28
 8015196:	460c      	mov	r4, r1
 8015198:	d458      	bmi.n	801524c <__sflush_r+0xc0>
 801519a:	684b      	ldr	r3, [r1, #4]
 801519c:	2b00      	cmp	r3, #0
 801519e:	dc05      	bgt.n	80151ac <__sflush_r+0x20>
 80151a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	dc02      	bgt.n	80151ac <__sflush_r+0x20>
 80151a6:	2000      	movs	r0, #0
 80151a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80151ae:	2e00      	cmp	r6, #0
 80151b0:	d0f9      	beq.n	80151a6 <__sflush_r+0x1a>
 80151b2:	2300      	movs	r3, #0
 80151b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80151b8:	682f      	ldr	r7, [r5, #0]
 80151ba:	6a21      	ldr	r1, [r4, #32]
 80151bc:	602b      	str	r3, [r5, #0]
 80151be:	d032      	beq.n	8015226 <__sflush_r+0x9a>
 80151c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80151c2:	89a3      	ldrh	r3, [r4, #12]
 80151c4:	075a      	lsls	r2, r3, #29
 80151c6:	d505      	bpl.n	80151d4 <__sflush_r+0x48>
 80151c8:	6863      	ldr	r3, [r4, #4]
 80151ca:	1ac0      	subs	r0, r0, r3
 80151cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80151ce:	b10b      	cbz	r3, 80151d4 <__sflush_r+0x48>
 80151d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80151d2:	1ac0      	subs	r0, r0, r3
 80151d4:	2300      	movs	r3, #0
 80151d6:	4602      	mov	r2, r0
 80151d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80151da:	6a21      	ldr	r1, [r4, #32]
 80151dc:	4628      	mov	r0, r5
 80151de:	47b0      	blx	r6
 80151e0:	1c43      	adds	r3, r0, #1
 80151e2:	89a3      	ldrh	r3, [r4, #12]
 80151e4:	d106      	bne.n	80151f4 <__sflush_r+0x68>
 80151e6:	6829      	ldr	r1, [r5, #0]
 80151e8:	291d      	cmp	r1, #29
 80151ea:	d82b      	bhi.n	8015244 <__sflush_r+0xb8>
 80151ec:	4a29      	ldr	r2, [pc, #164]	; (8015294 <__sflush_r+0x108>)
 80151ee:	410a      	asrs	r2, r1
 80151f0:	07d6      	lsls	r6, r2, #31
 80151f2:	d427      	bmi.n	8015244 <__sflush_r+0xb8>
 80151f4:	2200      	movs	r2, #0
 80151f6:	6062      	str	r2, [r4, #4]
 80151f8:	04d9      	lsls	r1, r3, #19
 80151fa:	6922      	ldr	r2, [r4, #16]
 80151fc:	6022      	str	r2, [r4, #0]
 80151fe:	d504      	bpl.n	801520a <__sflush_r+0x7e>
 8015200:	1c42      	adds	r2, r0, #1
 8015202:	d101      	bne.n	8015208 <__sflush_r+0x7c>
 8015204:	682b      	ldr	r3, [r5, #0]
 8015206:	b903      	cbnz	r3, 801520a <__sflush_r+0x7e>
 8015208:	6560      	str	r0, [r4, #84]	; 0x54
 801520a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801520c:	602f      	str	r7, [r5, #0]
 801520e:	2900      	cmp	r1, #0
 8015210:	d0c9      	beq.n	80151a6 <__sflush_r+0x1a>
 8015212:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015216:	4299      	cmp	r1, r3
 8015218:	d002      	beq.n	8015220 <__sflush_r+0x94>
 801521a:	4628      	mov	r0, r5
 801521c:	f7fe fdee 	bl	8013dfc <_free_r>
 8015220:	2000      	movs	r0, #0
 8015222:	6360      	str	r0, [r4, #52]	; 0x34
 8015224:	e7c0      	b.n	80151a8 <__sflush_r+0x1c>
 8015226:	2301      	movs	r3, #1
 8015228:	4628      	mov	r0, r5
 801522a:	47b0      	blx	r6
 801522c:	1c41      	adds	r1, r0, #1
 801522e:	d1c8      	bne.n	80151c2 <__sflush_r+0x36>
 8015230:	682b      	ldr	r3, [r5, #0]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d0c5      	beq.n	80151c2 <__sflush_r+0x36>
 8015236:	2b1d      	cmp	r3, #29
 8015238:	d001      	beq.n	801523e <__sflush_r+0xb2>
 801523a:	2b16      	cmp	r3, #22
 801523c:	d101      	bne.n	8015242 <__sflush_r+0xb6>
 801523e:	602f      	str	r7, [r5, #0]
 8015240:	e7b1      	b.n	80151a6 <__sflush_r+0x1a>
 8015242:	89a3      	ldrh	r3, [r4, #12]
 8015244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015248:	81a3      	strh	r3, [r4, #12]
 801524a:	e7ad      	b.n	80151a8 <__sflush_r+0x1c>
 801524c:	690f      	ldr	r7, [r1, #16]
 801524e:	2f00      	cmp	r7, #0
 8015250:	d0a9      	beq.n	80151a6 <__sflush_r+0x1a>
 8015252:	0793      	lsls	r3, r2, #30
 8015254:	680e      	ldr	r6, [r1, #0]
 8015256:	bf08      	it	eq
 8015258:	694b      	ldreq	r3, [r1, #20]
 801525a:	600f      	str	r7, [r1, #0]
 801525c:	bf18      	it	ne
 801525e:	2300      	movne	r3, #0
 8015260:	eba6 0807 	sub.w	r8, r6, r7
 8015264:	608b      	str	r3, [r1, #8]
 8015266:	f1b8 0f00 	cmp.w	r8, #0
 801526a:	dd9c      	ble.n	80151a6 <__sflush_r+0x1a>
 801526c:	6a21      	ldr	r1, [r4, #32]
 801526e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015270:	4643      	mov	r3, r8
 8015272:	463a      	mov	r2, r7
 8015274:	4628      	mov	r0, r5
 8015276:	47b0      	blx	r6
 8015278:	2800      	cmp	r0, #0
 801527a:	dc06      	bgt.n	801528a <__sflush_r+0xfe>
 801527c:	89a3      	ldrh	r3, [r4, #12]
 801527e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015282:	81a3      	strh	r3, [r4, #12]
 8015284:	f04f 30ff 	mov.w	r0, #4294967295
 8015288:	e78e      	b.n	80151a8 <__sflush_r+0x1c>
 801528a:	4407      	add	r7, r0
 801528c:	eba8 0800 	sub.w	r8, r8, r0
 8015290:	e7e9      	b.n	8015266 <__sflush_r+0xda>
 8015292:	bf00      	nop
 8015294:	dfbffffe 	.word	0xdfbffffe

08015298 <_fflush_r>:
 8015298:	b538      	push	{r3, r4, r5, lr}
 801529a:	690b      	ldr	r3, [r1, #16]
 801529c:	4605      	mov	r5, r0
 801529e:	460c      	mov	r4, r1
 80152a0:	b913      	cbnz	r3, 80152a8 <_fflush_r+0x10>
 80152a2:	2500      	movs	r5, #0
 80152a4:	4628      	mov	r0, r5
 80152a6:	bd38      	pop	{r3, r4, r5, pc}
 80152a8:	b118      	cbz	r0, 80152b2 <_fflush_r+0x1a>
 80152aa:	6a03      	ldr	r3, [r0, #32]
 80152ac:	b90b      	cbnz	r3, 80152b2 <_fflush_r+0x1a>
 80152ae:	f7fd fd07 	bl	8012cc0 <__sinit>
 80152b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d0f3      	beq.n	80152a2 <_fflush_r+0xa>
 80152ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80152bc:	07d0      	lsls	r0, r2, #31
 80152be:	d404      	bmi.n	80152ca <_fflush_r+0x32>
 80152c0:	0599      	lsls	r1, r3, #22
 80152c2:	d402      	bmi.n	80152ca <_fflush_r+0x32>
 80152c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80152c6:	f7fd feda 	bl	801307e <__retarget_lock_acquire_recursive>
 80152ca:	4628      	mov	r0, r5
 80152cc:	4621      	mov	r1, r4
 80152ce:	f7ff ff5d 	bl	801518c <__sflush_r>
 80152d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80152d4:	07da      	lsls	r2, r3, #31
 80152d6:	4605      	mov	r5, r0
 80152d8:	d4e4      	bmi.n	80152a4 <_fflush_r+0xc>
 80152da:	89a3      	ldrh	r3, [r4, #12]
 80152dc:	059b      	lsls	r3, r3, #22
 80152de:	d4e1      	bmi.n	80152a4 <_fflush_r+0xc>
 80152e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80152e2:	f7fd fecd 	bl	8013080 <__retarget_lock_release_recursive>
 80152e6:	e7dd      	b.n	80152a4 <_fflush_r+0xc>

080152e8 <fiprintf>:
 80152e8:	b40e      	push	{r1, r2, r3}
 80152ea:	b503      	push	{r0, r1, lr}
 80152ec:	4601      	mov	r1, r0
 80152ee:	ab03      	add	r3, sp, #12
 80152f0:	4805      	ldr	r0, [pc, #20]	; (8015308 <fiprintf+0x20>)
 80152f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80152f6:	6800      	ldr	r0, [r0, #0]
 80152f8:	9301      	str	r3, [sp, #4]
 80152fa:	f000 f897 	bl	801542c <_vfiprintf_r>
 80152fe:	b002      	add	sp, #8
 8015300:	f85d eb04 	ldr.w	lr, [sp], #4
 8015304:	b003      	add	sp, #12
 8015306:	4770      	bx	lr
 8015308:	200002f0 	.word	0x200002f0

0801530c <memmove>:
 801530c:	4288      	cmp	r0, r1
 801530e:	b510      	push	{r4, lr}
 8015310:	eb01 0402 	add.w	r4, r1, r2
 8015314:	d902      	bls.n	801531c <memmove+0x10>
 8015316:	4284      	cmp	r4, r0
 8015318:	4623      	mov	r3, r4
 801531a:	d807      	bhi.n	801532c <memmove+0x20>
 801531c:	1e43      	subs	r3, r0, #1
 801531e:	42a1      	cmp	r1, r4
 8015320:	d008      	beq.n	8015334 <memmove+0x28>
 8015322:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015326:	f803 2f01 	strb.w	r2, [r3, #1]!
 801532a:	e7f8      	b.n	801531e <memmove+0x12>
 801532c:	4402      	add	r2, r0
 801532e:	4601      	mov	r1, r0
 8015330:	428a      	cmp	r2, r1
 8015332:	d100      	bne.n	8015336 <memmove+0x2a>
 8015334:	bd10      	pop	{r4, pc}
 8015336:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801533a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801533e:	e7f7      	b.n	8015330 <memmove+0x24>

08015340 <abort>:
 8015340:	b508      	push	{r3, lr}
 8015342:	2006      	movs	r0, #6
 8015344:	f000 fa4a 	bl	80157dc <raise>
 8015348:	2001      	movs	r0, #1
 801534a:	f7ef f905 	bl	8004558 <_exit>

0801534e <_calloc_r>:
 801534e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015350:	fba1 2402 	umull	r2, r4, r1, r2
 8015354:	b94c      	cbnz	r4, 801536a <_calloc_r+0x1c>
 8015356:	4611      	mov	r1, r2
 8015358:	9201      	str	r2, [sp, #4]
 801535a:	f7fb fe1b 	bl	8010f94 <_malloc_r>
 801535e:	9a01      	ldr	r2, [sp, #4]
 8015360:	4605      	mov	r5, r0
 8015362:	b930      	cbnz	r0, 8015372 <_calloc_r+0x24>
 8015364:	4628      	mov	r0, r5
 8015366:	b003      	add	sp, #12
 8015368:	bd30      	pop	{r4, r5, pc}
 801536a:	220c      	movs	r2, #12
 801536c:	6002      	str	r2, [r0, #0]
 801536e:	2500      	movs	r5, #0
 8015370:	e7f8      	b.n	8015364 <_calloc_r+0x16>
 8015372:	4621      	mov	r1, r4
 8015374:	f7fd fd71 	bl	8012e5a <memset>
 8015378:	e7f4      	b.n	8015364 <_calloc_r+0x16>

0801537a <_realloc_r>:
 801537a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801537e:	4680      	mov	r8, r0
 8015380:	4614      	mov	r4, r2
 8015382:	460e      	mov	r6, r1
 8015384:	b921      	cbnz	r1, 8015390 <_realloc_r+0x16>
 8015386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801538a:	4611      	mov	r1, r2
 801538c:	f7fb be02 	b.w	8010f94 <_malloc_r>
 8015390:	b92a      	cbnz	r2, 801539e <_realloc_r+0x24>
 8015392:	f7fe fd33 	bl	8013dfc <_free_r>
 8015396:	4625      	mov	r5, r4
 8015398:	4628      	mov	r0, r5
 801539a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801539e:	f000 fa39 	bl	8015814 <_malloc_usable_size_r>
 80153a2:	4284      	cmp	r4, r0
 80153a4:	4607      	mov	r7, r0
 80153a6:	d802      	bhi.n	80153ae <_realloc_r+0x34>
 80153a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80153ac:	d812      	bhi.n	80153d4 <_realloc_r+0x5a>
 80153ae:	4621      	mov	r1, r4
 80153b0:	4640      	mov	r0, r8
 80153b2:	f7fb fdef 	bl	8010f94 <_malloc_r>
 80153b6:	4605      	mov	r5, r0
 80153b8:	2800      	cmp	r0, #0
 80153ba:	d0ed      	beq.n	8015398 <_realloc_r+0x1e>
 80153bc:	42bc      	cmp	r4, r7
 80153be:	4622      	mov	r2, r4
 80153c0:	4631      	mov	r1, r6
 80153c2:	bf28      	it	cs
 80153c4:	463a      	movcs	r2, r7
 80153c6:	f7fd fe64 	bl	8013092 <memcpy>
 80153ca:	4631      	mov	r1, r6
 80153cc:	4640      	mov	r0, r8
 80153ce:	f7fe fd15 	bl	8013dfc <_free_r>
 80153d2:	e7e1      	b.n	8015398 <_realloc_r+0x1e>
 80153d4:	4635      	mov	r5, r6
 80153d6:	e7df      	b.n	8015398 <_realloc_r+0x1e>

080153d8 <__sfputc_r>:
 80153d8:	6893      	ldr	r3, [r2, #8]
 80153da:	3b01      	subs	r3, #1
 80153dc:	2b00      	cmp	r3, #0
 80153de:	b410      	push	{r4}
 80153e0:	6093      	str	r3, [r2, #8]
 80153e2:	da08      	bge.n	80153f6 <__sfputc_r+0x1e>
 80153e4:	6994      	ldr	r4, [r2, #24]
 80153e6:	42a3      	cmp	r3, r4
 80153e8:	db01      	blt.n	80153ee <__sfputc_r+0x16>
 80153ea:	290a      	cmp	r1, #10
 80153ec:	d103      	bne.n	80153f6 <__sfputc_r+0x1e>
 80153ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153f2:	f000 b935 	b.w	8015660 <__swbuf_r>
 80153f6:	6813      	ldr	r3, [r2, #0]
 80153f8:	1c58      	adds	r0, r3, #1
 80153fa:	6010      	str	r0, [r2, #0]
 80153fc:	7019      	strb	r1, [r3, #0]
 80153fe:	4608      	mov	r0, r1
 8015400:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015404:	4770      	bx	lr

08015406 <__sfputs_r>:
 8015406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015408:	4606      	mov	r6, r0
 801540a:	460f      	mov	r7, r1
 801540c:	4614      	mov	r4, r2
 801540e:	18d5      	adds	r5, r2, r3
 8015410:	42ac      	cmp	r4, r5
 8015412:	d101      	bne.n	8015418 <__sfputs_r+0x12>
 8015414:	2000      	movs	r0, #0
 8015416:	e007      	b.n	8015428 <__sfputs_r+0x22>
 8015418:	f814 1b01 	ldrb.w	r1, [r4], #1
 801541c:	463a      	mov	r2, r7
 801541e:	4630      	mov	r0, r6
 8015420:	f7ff ffda 	bl	80153d8 <__sfputc_r>
 8015424:	1c43      	adds	r3, r0, #1
 8015426:	d1f3      	bne.n	8015410 <__sfputs_r+0xa>
 8015428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801542c <_vfiprintf_r>:
 801542c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015430:	460d      	mov	r5, r1
 8015432:	b09d      	sub	sp, #116	; 0x74
 8015434:	4614      	mov	r4, r2
 8015436:	4698      	mov	r8, r3
 8015438:	4606      	mov	r6, r0
 801543a:	b118      	cbz	r0, 8015444 <_vfiprintf_r+0x18>
 801543c:	6a03      	ldr	r3, [r0, #32]
 801543e:	b90b      	cbnz	r3, 8015444 <_vfiprintf_r+0x18>
 8015440:	f7fd fc3e 	bl	8012cc0 <__sinit>
 8015444:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015446:	07d9      	lsls	r1, r3, #31
 8015448:	d405      	bmi.n	8015456 <_vfiprintf_r+0x2a>
 801544a:	89ab      	ldrh	r3, [r5, #12]
 801544c:	059a      	lsls	r2, r3, #22
 801544e:	d402      	bmi.n	8015456 <_vfiprintf_r+0x2a>
 8015450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015452:	f7fd fe14 	bl	801307e <__retarget_lock_acquire_recursive>
 8015456:	89ab      	ldrh	r3, [r5, #12]
 8015458:	071b      	lsls	r3, r3, #28
 801545a:	d501      	bpl.n	8015460 <_vfiprintf_r+0x34>
 801545c:	692b      	ldr	r3, [r5, #16]
 801545e:	b99b      	cbnz	r3, 8015488 <_vfiprintf_r+0x5c>
 8015460:	4629      	mov	r1, r5
 8015462:	4630      	mov	r0, r6
 8015464:	f000 f93a 	bl	80156dc <__swsetup_r>
 8015468:	b170      	cbz	r0, 8015488 <_vfiprintf_r+0x5c>
 801546a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801546c:	07dc      	lsls	r4, r3, #31
 801546e:	d504      	bpl.n	801547a <_vfiprintf_r+0x4e>
 8015470:	f04f 30ff 	mov.w	r0, #4294967295
 8015474:	b01d      	add	sp, #116	; 0x74
 8015476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801547a:	89ab      	ldrh	r3, [r5, #12]
 801547c:	0598      	lsls	r0, r3, #22
 801547e:	d4f7      	bmi.n	8015470 <_vfiprintf_r+0x44>
 8015480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015482:	f7fd fdfd 	bl	8013080 <__retarget_lock_release_recursive>
 8015486:	e7f3      	b.n	8015470 <_vfiprintf_r+0x44>
 8015488:	2300      	movs	r3, #0
 801548a:	9309      	str	r3, [sp, #36]	; 0x24
 801548c:	2320      	movs	r3, #32
 801548e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015492:	f8cd 800c 	str.w	r8, [sp, #12]
 8015496:	2330      	movs	r3, #48	; 0x30
 8015498:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801564c <_vfiprintf_r+0x220>
 801549c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80154a0:	f04f 0901 	mov.w	r9, #1
 80154a4:	4623      	mov	r3, r4
 80154a6:	469a      	mov	sl, r3
 80154a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80154ac:	b10a      	cbz	r2, 80154b2 <_vfiprintf_r+0x86>
 80154ae:	2a25      	cmp	r2, #37	; 0x25
 80154b0:	d1f9      	bne.n	80154a6 <_vfiprintf_r+0x7a>
 80154b2:	ebba 0b04 	subs.w	fp, sl, r4
 80154b6:	d00b      	beq.n	80154d0 <_vfiprintf_r+0xa4>
 80154b8:	465b      	mov	r3, fp
 80154ba:	4622      	mov	r2, r4
 80154bc:	4629      	mov	r1, r5
 80154be:	4630      	mov	r0, r6
 80154c0:	f7ff ffa1 	bl	8015406 <__sfputs_r>
 80154c4:	3001      	adds	r0, #1
 80154c6:	f000 80a9 	beq.w	801561c <_vfiprintf_r+0x1f0>
 80154ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80154cc:	445a      	add	r2, fp
 80154ce:	9209      	str	r2, [sp, #36]	; 0x24
 80154d0:	f89a 3000 	ldrb.w	r3, [sl]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	f000 80a1 	beq.w	801561c <_vfiprintf_r+0x1f0>
 80154da:	2300      	movs	r3, #0
 80154dc:	f04f 32ff 	mov.w	r2, #4294967295
 80154e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80154e4:	f10a 0a01 	add.w	sl, sl, #1
 80154e8:	9304      	str	r3, [sp, #16]
 80154ea:	9307      	str	r3, [sp, #28]
 80154ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80154f0:	931a      	str	r3, [sp, #104]	; 0x68
 80154f2:	4654      	mov	r4, sl
 80154f4:	2205      	movs	r2, #5
 80154f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154fa:	4854      	ldr	r0, [pc, #336]	; (801564c <_vfiprintf_r+0x220>)
 80154fc:	f7ea fe78 	bl	80001f0 <memchr>
 8015500:	9a04      	ldr	r2, [sp, #16]
 8015502:	b9d8      	cbnz	r0, 801553c <_vfiprintf_r+0x110>
 8015504:	06d1      	lsls	r1, r2, #27
 8015506:	bf44      	itt	mi
 8015508:	2320      	movmi	r3, #32
 801550a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801550e:	0713      	lsls	r3, r2, #28
 8015510:	bf44      	itt	mi
 8015512:	232b      	movmi	r3, #43	; 0x2b
 8015514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015518:	f89a 3000 	ldrb.w	r3, [sl]
 801551c:	2b2a      	cmp	r3, #42	; 0x2a
 801551e:	d015      	beq.n	801554c <_vfiprintf_r+0x120>
 8015520:	9a07      	ldr	r2, [sp, #28]
 8015522:	4654      	mov	r4, sl
 8015524:	2000      	movs	r0, #0
 8015526:	f04f 0c0a 	mov.w	ip, #10
 801552a:	4621      	mov	r1, r4
 801552c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015530:	3b30      	subs	r3, #48	; 0x30
 8015532:	2b09      	cmp	r3, #9
 8015534:	d94d      	bls.n	80155d2 <_vfiprintf_r+0x1a6>
 8015536:	b1b0      	cbz	r0, 8015566 <_vfiprintf_r+0x13a>
 8015538:	9207      	str	r2, [sp, #28]
 801553a:	e014      	b.n	8015566 <_vfiprintf_r+0x13a>
 801553c:	eba0 0308 	sub.w	r3, r0, r8
 8015540:	fa09 f303 	lsl.w	r3, r9, r3
 8015544:	4313      	orrs	r3, r2
 8015546:	9304      	str	r3, [sp, #16]
 8015548:	46a2      	mov	sl, r4
 801554a:	e7d2      	b.n	80154f2 <_vfiprintf_r+0xc6>
 801554c:	9b03      	ldr	r3, [sp, #12]
 801554e:	1d19      	adds	r1, r3, #4
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	9103      	str	r1, [sp, #12]
 8015554:	2b00      	cmp	r3, #0
 8015556:	bfbb      	ittet	lt
 8015558:	425b      	neglt	r3, r3
 801555a:	f042 0202 	orrlt.w	r2, r2, #2
 801555e:	9307      	strge	r3, [sp, #28]
 8015560:	9307      	strlt	r3, [sp, #28]
 8015562:	bfb8      	it	lt
 8015564:	9204      	strlt	r2, [sp, #16]
 8015566:	7823      	ldrb	r3, [r4, #0]
 8015568:	2b2e      	cmp	r3, #46	; 0x2e
 801556a:	d10c      	bne.n	8015586 <_vfiprintf_r+0x15a>
 801556c:	7863      	ldrb	r3, [r4, #1]
 801556e:	2b2a      	cmp	r3, #42	; 0x2a
 8015570:	d134      	bne.n	80155dc <_vfiprintf_r+0x1b0>
 8015572:	9b03      	ldr	r3, [sp, #12]
 8015574:	1d1a      	adds	r2, r3, #4
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	9203      	str	r2, [sp, #12]
 801557a:	2b00      	cmp	r3, #0
 801557c:	bfb8      	it	lt
 801557e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015582:	3402      	adds	r4, #2
 8015584:	9305      	str	r3, [sp, #20]
 8015586:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801565c <_vfiprintf_r+0x230>
 801558a:	7821      	ldrb	r1, [r4, #0]
 801558c:	2203      	movs	r2, #3
 801558e:	4650      	mov	r0, sl
 8015590:	f7ea fe2e 	bl	80001f0 <memchr>
 8015594:	b138      	cbz	r0, 80155a6 <_vfiprintf_r+0x17a>
 8015596:	9b04      	ldr	r3, [sp, #16]
 8015598:	eba0 000a 	sub.w	r0, r0, sl
 801559c:	2240      	movs	r2, #64	; 0x40
 801559e:	4082      	lsls	r2, r0
 80155a0:	4313      	orrs	r3, r2
 80155a2:	3401      	adds	r4, #1
 80155a4:	9304      	str	r3, [sp, #16]
 80155a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155aa:	4829      	ldr	r0, [pc, #164]	; (8015650 <_vfiprintf_r+0x224>)
 80155ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80155b0:	2206      	movs	r2, #6
 80155b2:	f7ea fe1d 	bl	80001f0 <memchr>
 80155b6:	2800      	cmp	r0, #0
 80155b8:	d03f      	beq.n	801563a <_vfiprintf_r+0x20e>
 80155ba:	4b26      	ldr	r3, [pc, #152]	; (8015654 <_vfiprintf_r+0x228>)
 80155bc:	bb1b      	cbnz	r3, 8015606 <_vfiprintf_r+0x1da>
 80155be:	9b03      	ldr	r3, [sp, #12]
 80155c0:	3307      	adds	r3, #7
 80155c2:	f023 0307 	bic.w	r3, r3, #7
 80155c6:	3308      	adds	r3, #8
 80155c8:	9303      	str	r3, [sp, #12]
 80155ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155cc:	443b      	add	r3, r7
 80155ce:	9309      	str	r3, [sp, #36]	; 0x24
 80155d0:	e768      	b.n	80154a4 <_vfiprintf_r+0x78>
 80155d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80155d6:	460c      	mov	r4, r1
 80155d8:	2001      	movs	r0, #1
 80155da:	e7a6      	b.n	801552a <_vfiprintf_r+0xfe>
 80155dc:	2300      	movs	r3, #0
 80155de:	3401      	adds	r4, #1
 80155e0:	9305      	str	r3, [sp, #20]
 80155e2:	4619      	mov	r1, r3
 80155e4:	f04f 0c0a 	mov.w	ip, #10
 80155e8:	4620      	mov	r0, r4
 80155ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80155ee:	3a30      	subs	r2, #48	; 0x30
 80155f0:	2a09      	cmp	r2, #9
 80155f2:	d903      	bls.n	80155fc <_vfiprintf_r+0x1d0>
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d0c6      	beq.n	8015586 <_vfiprintf_r+0x15a>
 80155f8:	9105      	str	r1, [sp, #20]
 80155fa:	e7c4      	b.n	8015586 <_vfiprintf_r+0x15a>
 80155fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8015600:	4604      	mov	r4, r0
 8015602:	2301      	movs	r3, #1
 8015604:	e7f0      	b.n	80155e8 <_vfiprintf_r+0x1bc>
 8015606:	ab03      	add	r3, sp, #12
 8015608:	9300      	str	r3, [sp, #0]
 801560a:	462a      	mov	r2, r5
 801560c:	4b12      	ldr	r3, [pc, #72]	; (8015658 <_vfiprintf_r+0x22c>)
 801560e:	a904      	add	r1, sp, #16
 8015610:	4630      	mov	r0, r6
 8015612:	f7fc fcf3 	bl	8011ffc <_printf_float>
 8015616:	4607      	mov	r7, r0
 8015618:	1c78      	adds	r0, r7, #1
 801561a:	d1d6      	bne.n	80155ca <_vfiprintf_r+0x19e>
 801561c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801561e:	07d9      	lsls	r1, r3, #31
 8015620:	d405      	bmi.n	801562e <_vfiprintf_r+0x202>
 8015622:	89ab      	ldrh	r3, [r5, #12]
 8015624:	059a      	lsls	r2, r3, #22
 8015626:	d402      	bmi.n	801562e <_vfiprintf_r+0x202>
 8015628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801562a:	f7fd fd29 	bl	8013080 <__retarget_lock_release_recursive>
 801562e:	89ab      	ldrh	r3, [r5, #12]
 8015630:	065b      	lsls	r3, r3, #25
 8015632:	f53f af1d 	bmi.w	8015470 <_vfiprintf_r+0x44>
 8015636:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015638:	e71c      	b.n	8015474 <_vfiprintf_r+0x48>
 801563a:	ab03      	add	r3, sp, #12
 801563c:	9300      	str	r3, [sp, #0]
 801563e:	462a      	mov	r2, r5
 8015640:	4b05      	ldr	r3, [pc, #20]	; (8015658 <_vfiprintf_r+0x22c>)
 8015642:	a904      	add	r1, sp, #16
 8015644:	4630      	mov	r0, r6
 8015646:	f7fc ff7d 	bl	8012544 <_printf_i>
 801564a:	e7e4      	b.n	8015616 <_vfiprintf_r+0x1ea>
 801564c:	08018f84 	.word	0x08018f84
 8015650:	08018f8e 	.word	0x08018f8e
 8015654:	08011ffd 	.word	0x08011ffd
 8015658:	08015407 	.word	0x08015407
 801565c:	08018f8a 	.word	0x08018f8a

08015660 <__swbuf_r>:
 8015660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015662:	460e      	mov	r6, r1
 8015664:	4614      	mov	r4, r2
 8015666:	4605      	mov	r5, r0
 8015668:	b118      	cbz	r0, 8015672 <__swbuf_r+0x12>
 801566a:	6a03      	ldr	r3, [r0, #32]
 801566c:	b90b      	cbnz	r3, 8015672 <__swbuf_r+0x12>
 801566e:	f7fd fb27 	bl	8012cc0 <__sinit>
 8015672:	69a3      	ldr	r3, [r4, #24]
 8015674:	60a3      	str	r3, [r4, #8]
 8015676:	89a3      	ldrh	r3, [r4, #12]
 8015678:	071a      	lsls	r2, r3, #28
 801567a:	d525      	bpl.n	80156c8 <__swbuf_r+0x68>
 801567c:	6923      	ldr	r3, [r4, #16]
 801567e:	b31b      	cbz	r3, 80156c8 <__swbuf_r+0x68>
 8015680:	6823      	ldr	r3, [r4, #0]
 8015682:	6922      	ldr	r2, [r4, #16]
 8015684:	1a98      	subs	r0, r3, r2
 8015686:	6963      	ldr	r3, [r4, #20]
 8015688:	b2f6      	uxtb	r6, r6
 801568a:	4283      	cmp	r3, r0
 801568c:	4637      	mov	r7, r6
 801568e:	dc04      	bgt.n	801569a <__swbuf_r+0x3a>
 8015690:	4621      	mov	r1, r4
 8015692:	4628      	mov	r0, r5
 8015694:	f7ff fe00 	bl	8015298 <_fflush_r>
 8015698:	b9e0      	cbnz	r0, 80156d4 <__swbuf_r+0x74>
 801569a:	68a3      	ldr	r3, [r4, #8]
 801569c:	3b01      	subs	r3, #1
 801569e:	60a3      	str	r3, [r4, #8]
 80156a0:	6823      	ldr	r3, [r4, #0]
 80156a2:	1c5a      	adds	r2, r3, #1
 80156a4:	6022      	str	r2, [r4, #0]
 80156a6:	701e      	strb	r6, [r3, #0]
 80156a8:	6962      	ldr	r2, [r4, #20]
 80156aa:	1c43      	adds	r3, r0, #1
 80156ac:	429a      	cmp	r2, r3
 80156ae:	d004      	beq.n	80156ba <__swbuf_r+0x5a>
 80156b0:	89a3      	ldrh	r3, [r4, #12]
 80156b2:	07db      	lsls	r3, r3, #31
 80156b4:	d506      	bpl.n	80156c4 <__swbuf_r+0x64>
 80156b6:	2e0a      	cmp	r6, #10
 80156b8:	d104      	bne.n	80156c4 <__swbuf_r+0x64>
 80156ba:	4621      	mov	r1, r4
 80156bc:	4628      	mov	r0, r5
 80156be:	f7ff fdeb 	bl	8015298 <_fflush_r>
 80156c2:	b938      	cbnz	r0, 80156d4 <__swbuf_r+0x74>
 80156c4:	4638      	mov	r0, r7
 80156c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156c8:	4621      	mov	r1, r4
 80156ca:	4628      	mov	r0, r5
 80156cc:	f000 f806 	bl	80156dc <__swsetup_r>
 80156d0:	2800      	cmp	r0, #0
 80156d2:	d0d5      	beq.n	8015680 <__swbuf_r+0x20>
 80156d4:	f04f 37ff 	mov.w	r7, #4294967295
 80156d8:	e7f4      	b.n	80156c4 <__swbuf_r+0x64>
	...

080156dc <__swsetup_r>:
 80156dc:	b538      	push	{r3, r4, r5, lr}
 80156de:	4b2a      	ldr	r3, [pc, #168]	; (8015788 <__swsetup_r+0xac>)
 80156e0:	4605      	mov	r5, r0
 80156e2:	6818      	ldr	r0, [r3, #0]
 80156e4:	460c      	mov	r4, r1
 80156e6:	b118      	cbz	r0, 80156f0 <__swsetup_r+0x14>
 80156e8:	6a03      	ldr	r3, [r0, #32]
 80156ea:	b90b      	cbnz	r3, 80156f0 <__swsetup_r+0x14>
 80156ec:	f7fd fae8 	bl	8012cc0 <__sinit>
 80156f0:	89a3      	ldrh	r3, [r4, #12]
 80156f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80156f6:	0718      	lsls	r0, r3, #28
 80156f8:	d422      	bmi.n	8015740 <__swsetup_r+0x64>
 80156fa:	06d9      	lsls	r1, r3, #27
 80156fc:	d407      	bmi.n	801570e <__swsetup_r+0x32>
 80156fe:	2309      	movs	r3, #9
 8015700:	602b      	str	r3, [r5, #0]
 8015702:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015706:	81a3      	strh	r3, [r4, #12]
 8015708:	f04f 30ff 	mov.w	r0, #4294967295
 801570c:	e034      	b.n	8015778 <__swsetup_r+0x9c>
 801570e:	0758      	lsls	r0, r3, #29
 8015710:	d512      	bpl.n	8015738 <__swsetup_r+0x5c>
 8015712:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015714:	b141      	cbz	r1, 8015728 <__swsetup_r+0x4c>
 8015716:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801571a:	4299      	cmp	r1, r3
 801571c:	d002      	beq.n	8015724 <__swsetup_r+0x48>
 801571e:	4628      	mov	r0, r5
 8015720:	f7fe fb6c 	bl	8013dfc <_free_r>
 8015724:	2300      	movs	r3, #0
 8015726:	6363      	str	r3, [r4, #52]	; 0x34
 8015728:	89a3      	ldrh	r3, [r4, #12]
 801572a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801572e:	81a3      	strh	r3, [r4, #12]
 8015730:	2300      	movs	r3, #0
 8015732:	6063      	str	r3, [r4, #4]
 8015734:	6923      	ldr	r3, [r4, #16]
 8015736:	6023      	str	r3, [r4, #0]
 8015738:	89a3      	ldrh	r3, [r4, #12]
 801573a:	f043 0308 	orr.w	r3, r3, #8
 801573e:	81a3      	strh	r3, [r4, #12]
 8015740:	6923      	ldr	r3, [r4, #16]
 8015742:	b94b      	cbnz	r3, 8015758 <__swsetup_r+0x7c>
 8015744:	89a3      	ldrh	r3, [r4, #12]
 8015746:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801574a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801574e:	d003      	beq.n	8015758 <__swsetup_r+0x7c>
 8015750:	4621      	mov	r1, r4
 8015752:	4628      	mov	r0, r5
 8015754:	f000 f88c 	bl	8015870 <__smakebuf_r>
 8015758:	89a0      	ldrh	r0, [r4, #12]
 801575a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801575e:	f010 0301 	ands.w	r3, r0, #1
 8015762:	d00a      	beq.n	801577a <__swsetup_r+0x9e>
 8015764:	2300      	movs	r3, #0
 8015766:	60a3      	str	r3, [r4, #8]
 8015768:	6963      	ldr	r3, [r4, #20]
 801576a:	425b      	negs	r3, r3
 801576c:	61a3      	str	r3, [r4, #24]
 801576e:	6923      	ldr	r3, [r4, #16]
 8015770:	b943      	cbnz	r3, 8015784 <__swsetup_r+0xa8>
 8015772:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015776:	d1c4      	bne.n	8015702 <__swsetup_r+0x26>
 8015778:	bd38      	pop	{r3, r4, r5, pc}
 801577a:	0781      	lsls	r1, r0, #30
 801577c:	bf58      	it	pl
 801577e:	6963      	ldrpl	r3, [r4, #20]
 8015780:	60a3      	str	r3, [r4, #8]
 8015782:	e7f4      	b.n	801576e <__swsetup_r+0x92>
 8015784:	2000      	movs	r0, #0
 8015786:	e7f7      	b.n	8015778 <__swsetup_r+0x9c>
 8015788:	200002f0 	.word	0x200002f0

0801578c <_raise_r>:
 801578c:	291f      	cmp	r1, #31
 801578e:	b538      	push	{r3, r4, r5, lr}
 8015790:	4604      	mov	r4, r0
 8015792:	460d      	mov	r5, r1
 8015794:	d904      	bls.n	80157a0 <_raise_r+0x14>
 8015796:	2316      	movs	r3, #22
 8015798:	6003      	str	r3, [r0, #0]
 801579a:	f04f 30ff 	mov.w	r0, #4294967295
 801579e:	bd38      	pop	{r3, r4, r5, pc}
 80157a0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80157a2:	b112      	cbz	r2, 80157aa <_raise_r+0x1e>
 80157a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80157a8:	b94b      	cbnz	r3, 80157be <_raise_r+0x32>
 80157aa:	4620      	mov	r0, r4
 80157ac:	f000 f830 	bl	8015810 <_getpid_r>
 80157b0:	462a      	mov	r2, r5
 80157b2:	4601      	mov	r1, r0
 80157b4:	4620      	mov	r0, r4
 80157b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80157ba:	f000 b817 	b.w	80157ec <_kill_r>
 80157be:	2b01      	cmp	r3, #1
 80157c0:	d00a      	beq.n	80157d8 <_raise_r+0x4c>
 80157c2:	1c59      	adds	r1, r3, #1
 80157c4:	d103      	bne.n	80157ce <_raise_r+0x42>
 80157c6:	2316      	movs	r3, #22
 80157c8:	6003      	str	r3, [r0, #0]
 80157ca:	2001      	movs	r0, #1
 80157cc:	e7e7      	b.n	801579e <_raise_r+0x12>
 80157ce:	2400      	movs	r4, #0
 80157d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80157d4:	4628      	mov	r0, r5
 80157d6:	4798      	blx	r3
 80157d8:	2000      	movs	r0, #0
 80157da:	e7e0      	b.n	801579e <_raise_r+0x12>

080157dc <raise>:
 80157dc:	4b02      	ldr	r3, [pc, #8]	; (80157e8 <raise+0xc>)
 80157de:	4601      	mov	r1, r0
 80157e0:	6818      	ldr	r0, [r3, #0]
 80157e2:	f7ff bfd3 	b.w	801578c <_raise_r>
 80157e6:	bf00      	nop
 80157e8:	200002f0 	.word	0x200002f0

080157ec <_kill_r>:
 80157ec:	b538      	push	{r3, r4, r5, lr}
 80157ee:	4d07      	ldr	r5, [pc, #28]	; (801580c <_kill_r+0x20>)
 80157f0:	2300      	movs	r3, #0
 80157f2:	4604      	mov	r4, r0
 80157f4:	4608      	mov	r0, r1
 80157f6:	4611      	mov	r1, r2
 80157f8:	602b      	str	r3, [r5, #0]
 80157fa:	f7ee fe9d 	bl	8004538 <_kill>
 80157fe:	1c43      	adds	r3, r0, #1
 8015800:	d102      	bne.n	8015808 <_kill_r+0x1c>
 8015802:	682b      	ldr	r3, [r5, #0]
 8015804:	b103      	cbz	r3, 8015808 <_kill_r+0x1c>
 8015806:	6023      	str	r3, [r4, #0]
 8015808:	bd38      	pop	{r3, r4, r5, pc}
 801580a:	bf00      	nop
 801580c:	200020b0 	.word	0x200020b0

08015810 <_getpid_r>:
 8015810:	f7ee be8a 	b.w	8004528 <_getpid>

08015814 <_malloc_usable_size_r>:
 8015814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015818:	1f18      	subs	r0, r3, #4
 801581a:	2b00      	cmp	r3, #0
 801581c:	bfbc      	itt	lt
 801581e:	580b      	ldrlt	r3, [r1, r0]
 8015820:	18c0      	addlt	r0, r0, r3
 8015822:	4770      	bx	lr

08015824 <__swhatbuf_r>:
 8015824:	b570      	push	{r4, r5, r6, lr}
 8015826:	460c      	mov	r4, r1
 8015828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801582c:	2900      	cmp	r1, #0
 801582e:	b096      	sub	sp, #88	; 0x58
 8015830:	4615      	mov	r5, r2
 8015832:	461e      	mov	r6, r3
 8015834:	da0d      	bge.n	8015852 <__swhatbuf_r+0x2e>
 8015836:	89a3      	ldrh	r3, [r4, #12]
 8015838:	f013 0f80 	tst.w	r3, #128	; 0x80
 801583c:	f04f 0100 	mov.w	r1, #0
 8015840:	bf0c      	ite	eq
 8015842:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015846:	2340      	movne	r3, #64	; 0x40
 8015848:	2000      	movs	r0, #0
 801584a:	6031      	str	r1, [r6, #0]
 801584c:	602b      	str	r3, [r5, #0]
 801584e:	b016      	add	sp, #88	; 0x58
 8015850:	bd70      	pop	{r4, r5, r6, pc}
 8015852:	466a      	mov	r2, sp
 8015854:	f000 f848 	bl	80158e8 <_fstat_r>
 8015858:	2800      	cmp	r0, #0
 801585a:	dbec      	blt.n	8015836 <__swhatbuf_r+0x12>
 801585c:	9901      	ldr	r1, [sp, #4]
 801585e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015862:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015866:	4259      	negs	r1, r3
 8015868:	4159      	adcs	r1, r3
 801586a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801586e:	e7eb      	b.n	8015848 <__swhatbuf_r+0x24>

08015870 <__smakebuf_r>:
 8015870:	898b      	ldrh	r3, [r1, #12]
 8015872:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015874:	079d      	lsls	r5, r3, #30
 8015876:	4606      	mov	r6, r0
 8015878:	460c      	mov	r4, r1
 801587a:	d507      	bpl.n	801588c <__smakebuf_r+0x1c>
 801587c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015880:	6023      	str	r3, [r4, #0]
 8015882:	6123      	str	r3, [r4, #16]
 8015884:	2301      	movs	r3, #1
 8015886:	6163      	str	r3, [r4, #20]
 8015888:	b002      	add	sp, #8
 801588a:	bd70      	pop	{r4, r5, r6, pc}
 801588c:	ab01      	add	r3, sp, #4
 801588e:	466a      	mov	r2, sp
 8015890:	f7ff ffc8 	bl	8015824 <__swhatbuf_r>
 8015894:	9900      	ldr	r1, [sp, #0]
 8015896:	4605      	mov	r5, r0
 8015898:	4630      	mov	r0, r6
 801589a:	f7fb fb7b 	bl	8010f94 <_malloc_r>
 801589e:	b948      	cbnz	r0, 80158b4 <__smakebuf_r+0x44>
 80158a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158a4:	059a      	lsls	r2, r3, #22
 80158a6:	d4ef      	bmi.n	8015888 <__smakebuf_r+0x18>
 80158a8:	f023 0303 	bic.w	r3, r3, #3
 80158ac:	f043 0302 	orr.w	r3, r3, #2
 80158b0:	81a3      	strh	r3, [r4, #12]
 80158b2:	e7e3      	b.n	801587c <__smakebuf_r+0xc>
 80158b4:	89a3      	ldrh	r3, [r4, #12]
 80158b6:	6020      	str	r0, [r4, #0]
 80158b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80158bc:	81a3      	strh	r3, [r4, #12]
 80158be:	9b00      	ldr	r3, [sp, #0]
 80158c0:	6163      	str	r3, [r4, #20]
 80158c2:	9b01      	ldr	r3, [sp, #4]
 80158c4:	6120      	str	r0, [r4, #16]
 80158c6:	b15b      	cbz	r3, 80158e0 <__smakebuf_r+0x70>
 80158c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80158cc:	4630      	mov	r0, r6
 80158ce:	f000 f81d 	bl	801590c <_isatty_r>
 80158d2:	b128      	cbz	r0, 80158e0 <__smakebuf_r+0x70>
 80158d4:	89a3      	ldrh	r3, [r4, #12]
 80158d6:	f023 0303 	bic.w	r3, r3, #3
 80158da:	f043 0301 	orr.w	r3, r3, #1
 80158de:	81a3      	strh	r3, [r4, #12]
 80158e0:	89a3      	ldrh	r3, [r4, #12]
 80158e2:	431d      	orrs	r5, r3
 80158e4:	81a5      	strh	r5, [r4, #12]
 80158e6:	e7cf      	b.n	8015888 <__smakebuf_r+0x18>

080158e8 <_fstat_r>:
 80158e8:	b538      	push	{r3, r4, r5, lr}
 80158ea:	4d07      	ldr	r5, [pc, #28]	; (8015908 <_fstat_r+0x20>)
 80158ec:	2300      	movs	r3, #0
 80158ee:	4604      	mov	r4, r0
 80158f0:	4608      	mov	r0, r1
 80158f2:	4611      	mov	r1, r2
 80158f4:	602b      	str	r3, [r5, #0]
 80158f6:	f7ee fe7e 	bl	80045f6 <_fstat>
 80158fa:	1c43      	adds	r3, r0, #1
 80158fc:	d102      	bne.n	8015904 <_fstat_r+0x1c>
 80158fe:	682b      	ldr	r3, [r5, #0]
 8015900:	b103      	cbz	r3, 8015904 <_fstat_r+0x1c>
 8015902:	6023      	str	r3, [r4, #0]
 8015904:	bd38      	pop	{r3, r4, r5, pc}
 8015906:	bf00      	nop
 8015908:	200020b0 	.word	0x200020b0

0801590c <_isatty_r>:
 801590c:	b538      	push	{r3, r4, r5, lr}
 801590e:	4d06      	ldr	r5, [pc, #24]	; (8015928 <_isatty_r+0x1c>)
 8015910:	2300      	movs	r3, #0
 8015912:	4604      	mov	r4, r0
 8015914:	4608      	mov	r0, r1
 8015916:	602b      	str	r3, [r5, #0]
 8015918:	f7ee fe7d 	bl	8004616 <_isatty>
 801591c:	1c43      	adds	r3, r0, #1
 801591e:	d102      	bne.n	8015926 <_isatty_r+0x1a>
 8015920:	682b      	ldr	r3, [r5, #0]
 8015922:	b103      	cbz	r3, 8015926 <_isatty_r+0x1a>
 8015924:	6023      	str	r3, [r4, #0]
 8015926:	bd38      	pop	{r3, r4, r5, pc}
 8015928:	200020b0 	.word	0x200020b0
 801592c:	00000000 	.word	0x00000000

08015930 <cos>:
 8015930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015932:	ec53 2b10 	vmov	r2, r3, d0
 8015936:	4826      	ldr	r0, [pc, #152]	; (80159d0 <cos+0xa0>)
 8015938:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801593c:	4281      	cmp	r1, r0
 801593e:	dc06      	bgt.n	801594e <cos+0x1e>
 8015940:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80159c8 <cos+0x98>
 8015944:	b005      	add	sp, #20
 8015946:	f85d eb04 	ldr.w	lr, [sp], #4
 801594a:	f000 b961 	b.w	8015c10 <__kernel_cos>
 801594e:	4821      	ldr	r0, [pc, #132]	; (80159d4 <cos+0xa4>)
 8015950:	4281      	cmp	r1, r0
 8015952:	dd09      	ble.n	8015968 <cos+0x38>
 8015954:	ee10 0a10 	vmov	r0, s0
 8015958:	4619      	mov	r1, r3
 801595a:	f7ea fca5 	bl	80002a8 <__aeabi_dsub>
 801595e:	ec41 0b10 	vmov	d0, r0, r1
 8015962:	b005      	add	sp, #20
 8015964:	f85d fb04 	ldr.w	pc, [sp], #4
 8015968:	4668      	mov	r0, sp
 801596a:	f000 fad9 	bl	8015f20 <__ieee754_rem_pio2>
 801596e:	f000 0003 	and.w	r0, r0, #3
 8015972:	2801      	cmp	r0, #1
 8015974:	d00b      	beq.n	801598e <cos+0x5e>
 8015976:	2802      	cmp	r0, #2
 8015978:	d016      	beq.n	80159a8 <cos+0x78>
 801597a:	b9e0      	cbnz	r0, 80159b6 <cos+0x86>
 801597c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015980:	ed9d 0b00 	vldr	d0, [sp]
 8015984:	f000 f944 	bl	8015c10 <__kernel_cos>
 8015988:	ec51 0b10 	vmov	r0, r1, d0
 801598c:	e7e7      	b.n	801595e <cos+0x2e>
 801598e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015992:	ed9d 0b00 	vldr	d0, [sp]
 8015996:	f000 fa03 	bl	8015da0 <__kernel_sin>
 801599a:	ec53 2b10 	vmov	r2, r3, d0
 801599e:	ee10 0a10 	vmov	r0, s0
 80159a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80159a6:	e7da      	b.n	801595e <cos+0x2e>
 80159a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80159ac:	ed9d 0b00 	vldr	d0, [sp]
 80159b0:	f000 f92e 	bl	8015c10 <__kernel_cos>
 80159b4:	e7f1      	b.n	801599a <cos+0x6a>
 80159b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80159ba:	ed9d 0b00 	vldr	d0, [sp]
 80159be:	2001      	movs	r0, #1
 80159c0:	f000 f9ee 	bl	8015da0 <__kernel_sin>
 80159c4:	e7e0      	b.n	8015988 <cos+0x58>
 80159c6:	bf00      	nop
	...
 80159d0:	3fe921fb 	.word	0x3fe921fb
 80159d4:	7fefffff 	.word	0x7fefffff

080159d8 <sin>:
 80159d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80159da:	ec53 2b10 	vmov	r2, r3, d0
 80159de:	4828      	ldr	r0, [pc, #160]	; (8015a80 <sin+0xa8>)
 80159e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80159e4:	4281      	cmp	r1, r0
 80159e6:	dc07      	bgt.n	80159f8 <sin+0x20>
 80159e8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8015a78 <sin+0xa0>
 80159ec:	2000      	movs	r0, #0
 80159ee:	b005      	add	sp, #20
 80159f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80159f4:	f000 b9d4 	b.w	8015da0 <__kernel_sin>
 80159f8:	4822      	ldr	r0, [pc, #136]	; (8015a84 <sin+0xac>)
 80159fa:	4281      	cmp	r1, r0
 80159fc:	dd09      	ble.n	8015a12 <sin+0x3a>
 80159fe:	ee10 0a10 	vmov	r0, s0
 8015a02:	4619      	mov	r1, r3
 8015a04:	f7ea fc50 	bl	80002a8 <__aeabi_dsub>
 8015a08:	ec41 0b10 	vmov	d0, r0, r1
 8015a0c:	b005      	add	sp, #20
 8015a0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a12:	4668      	mov	r0, sp
 8015a14:	f000 fa84 	bl	8015f20 <__ieee754_rem_pio2>
 8015a18:	f000 0003 	and.w	r0, r0, #3
 8015a1c:	2801      	cmp	r0, #1
 8015a1e:	d00c      	beq.n	8015a3a <sin+0x62>
 8015a20:	2802      	cmp	r0, #2
 8015a22:	d011      	beq.n	8015a48 <sin+0x70>
 8015a24:	b9f0      	cbnz	r0, 8015a64 <sin+0x8c>
 8015a26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015a2a:	ed9d 0b00 	vldr	d0, [sp]
 8015a2e:	2001      	movs	r0, #1
 8015a30:	f000 f9b6 	bl	8015da0 <__kernel_sin>
 8015a34:	ec51 0b10 	vmov	r0, r1, d0
 8015a38:	e7e6      	b.n	8015a08 <sin+0x30>
 8015a3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015a3e:	ed9d 0b00 	vldr	d0, [sp]
 8015a42:	f000 f8e5 	bl	8015c10 <__kernel_cos>
 8015a46:	e7f5      	b.n	8015a34 <sin+0x5c>
 8015a48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015a4c:	ed9d 0b00 	vldr	d0, [sp]
 8015a50:	2001      	movs	r0, #1
 8015a52:	f000 f9a5 	bl	8015da0 <__kernel_sin>
 8015a56:	ec53 2b10 	vmov	r2, r3, d0
 8015a5a:	ee10 0a10 	vmov	r0, s0
 8015a5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015a62:	e7d1      	b.n	8015a08 <sin+0x30>
 8015a64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015a68:	ed9d 0b00 	vldr	d0, [sp]
 8015a6c:	f000 f8d0 	bl	8015c10 <__kernel_cos>
 8015a70:	e7f1      	b.n	8015a56 <sin+0x7e>
 8015a72:	bf00      	nop
 8015a74:	f3af 8000 	nop.w
	...
 8015a80:	3fe921fb 	.word	0x3fe921fb
 8015a84:	7fefffff 	.word	0x7fefffff

08015a88 <expf>:
 8015a88:	b508      	push	{r3, lr}
 8015a8a:	ed2d 8b02 	vpush	{d8}
 8015a8e:	eef0 8a40 	vmov.f32	s17, s0
 8015a92:	f000 fc55 	bl	8016340 <__ieee754_expf>
 8015a96:	eeb0 8a40 	vmov.f32	s16, s0
 8015a9a:	eeb0 0a68 	vmov.f32	s0, s17
 8015a9e:	f000 f829 	bl	8015af4 <finitef>
 8015aa2:	b160      	cbz	r0, 8015abe <expf+0x36>
 8015aa4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8015ae4 <expf+0x5c>
 8015aa8:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ab0:	dd0a      	ble.n	8015ac8 <expf+0x40>
 8015ab2:	f7fd fab9 	bl	8013028 <__errno>
 8015ab6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8015ae8 <expf+0x60>
 8015aba:	2322      	movs	r3, #34	; 0x22
 8015abc:	6003      	str	r3, [r0, #0]
 8015abe:	eeb0 0a48 	vmov.f32	s0, s16
 8015ac2:	ecbd 8b02 	vpop	{d8}
 8015ac6:	bd08      	pop	{r3, pc}
 8015ac8:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015aec <expf+0x64>
 8015acc:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ad4:	d5f3      	bpl.n	8015abe <expf+0x36>
 8015ad6:	f7fd faa7 	bl	8013028 <__errno>
 8015ada:	2322      	movs	r3, #34	; 0x22
 8015adc:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8015af0 <expf+0x68>
 8015ae0:	6003      	str	r3, [r0, #0]
 8015ae2:	e7ec      	b.n	8015abe <expf+0x36>
 8015ae4:	42b17217 	.word	0x42b17217
 8015ae8:	7f800000 	.word	0x7f800000
 8015aec:	c2cff1b5 	.word	0xc2cff1b5
 8015af0:	00000000 	.word	0x00000000

08015af4 <finitef>:
 8015af4:	b082      	sub	sp, #8
 8015af6:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015afa:	9801      	ldr	r0, [sp, #4]
 8015afc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015b00:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8015b04:	bfac      	ite	ge
 8015b06:	2000      	movge	r0, #0
 8015b08:	2001      	movlt	r0, #1
 8015b0a:	b002      	add	sp, #8
 8015b0c:	4770      	bx	lr
	...

08015b10 <floor>:
 8015b10:	ec51 0b10 	vmov	r0, r1, d0
 8015b14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b1c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8015b20:	2e13      	cmp	r6, #19
 8015b22:	ee10 5a10 	vmov	r5, s0
 8015b26:	ee10 8a10 	vmov	r8, s0
 8015b2a:	460c      	mov	r4, r1
 8015b2c:	dc31      	bgt.n	8015b92 <floor+0x82>
 8015b2e:	2e00      	cmp	r6, #0
 8015b30:	da14      	bge.n	8015b5c <floor+0x4c>
 8015b32:	a333      	add	r3, pc, #204	; (adr r3, 8015c00 <floor+0xf0>)
 8015b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b38:	f7ea fbb8 	bl	80002ac <__adddf3>
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	2300      	movs	r3, #0
 8015b40:	f7ea fffa 	bl	8000b38 <__aeabi_dcmpgt>
 8015b44:	b138      	cbz	r0, 8015b56 <floor+0x46>
 8015b46:	2c00      	cmp	r4, #0
 8015b48:	da53      	bge.n	8015bf2 <floor+0xe2>
 8015b4a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8015b4e:	4325      	orrs	r5, r4
 8015b50:	d052      	beq.n	8015bf8 <floor+0xe8>
 8015b52:	4c2d      	ldr	r4, [pc, #180]	; (8015c08 <floor+0xf8>)
 8015b54:	2500      	movs	r5, #0
 8015b56:	4621      	mov	r1, r4
 8015b58:	4628      	mov	r0, r5
 8015b5a:	e024      	b.n	8015ba6 <floor+0x96>
 8015b5c:	4f2b      	ldr	r7, [pc, #172]	; (8015c0c <floor+0xfc>)
 8015b5e:	4137      	asrs	r7, r6
 8015b60:	ea01 0307 	and.w	r3, r1, r7
 8015b64:	4303      	orrs	r3, r0
 8015b66:	d01e      	beq.n	8015ba6 <floor+0x96>
 8015b68:	a325      	add	r3, pc, #148	; (adr r3, 8015c00 <floor+0xf0>)
 8015b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b6e:	f7ea fb9d 	bl	80002ac <__adddf3>
 8015b72:	2200      	movs	r2, #0
 8015b74:	2300      	movs	r3, #0
 8015b76:	f7ea ffdf 	bl	8000b38 <__aeabi_dcmpgt>
 8015b7a:	2800      	cmp	r0, #0
 8015b7c:	d0eb      	beq.n	8015b56 <floor+0x46>
 8015b7e:	2c00      	cmp	r4, #0
 8015b80:	bfbe      	ittt	lt
 8015b82:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015b86:	4133      	asrlt	r3, r6
 8015b88:	18e4      	addlt	r4, r4, r3
 8015b8a:	ea24 0407 	bic.w	r4, r4, r7
 8015b8e:	2500      	movs	r5, #0
 8015b90:	e7e1      	b.n	8015b56 <floor+0x46>
 8015b92:	2e33      	cmp	r6, #51	; 0x33
 8015b94:	dd0b      	ble.n	8015bae <floor+0x9e>
 8015b96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015b9a:	d104      	bne.n	8015ba6 <floor+0x96>
 8015b9c:	ee10 2a10 	vmov	r2, s0
 8015ba0:	460b      	mov	r3, r1
 8015ba2:	f7ea fb83 	bl	80002ac <__adddf3>
 8015ba6:	ec41 0b10 	vmov	d0, r0, r1
 8015baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bae:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8015bb2:	f04f 37ff 	mov.w	r7, #4294967295
 8015bb6:	40df      	lsrs	r7, r3
 8015bb8:	4238      	tst	r0, r7
 8015bba:	d0f4      	beq.n	8015ba6 <floor+0x96>
 8015bbc:	a310      	add	r3, pc, #64	; (adr r3, 8015c00 <floor+0xf0>)
 8015bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bc2:	f7ea fb73 	bl	80002ac <__adddf3>
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	2300      	movs	r3, #0
 8015bca:	f7ea ffb5 	bl	8000b38 <__aeabi_dcmpgt>
 8015bce:	2800      	cmp	r0, #0
 8015bd0:	d0c1      	beq.n	8015b56 <floor+0x46>
 8015bd2:	2c00      	cmp	r4, #0
 8015bd4:	da0a      	bge.n	8015bec <floor+0xdc>
 8015bd6:	2e14      	cmp	r6, #20
 8015bd8:	d101      	bne.n	8015bde <floor+0xce>
 8015bda:	3401      	adds	r4, #1
 8015bdc:	e006      	b.n	8015bec <floor+0xdc>
 8015bde:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015be2:	2301      	movs	r3, #1
 8015be4:	40b3      	lsls	r3, r6
 8015be6:	441d      	add	r5, r3
 8015be8:	45a8      	cmp	r8, r5
 8015bea:	d8f6      	bhi.n	8015bda <floor+0xca>
 8015bec:	ea25 0507 	bic.w	r5, r5, r7
 8015bf0:	e7b1      	b.n	8015b56 <floor+0x46>
 8015bf2:	2500      	movs	r5, #0
 8015bf4:	462c      	mov	r4, r5
 8015bf6:	e7ae      	b.n	8015b56 <floor+0x46>
 8015bf8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015bfc:	e7ab      	b.n	8015b56 <floor+0x46>
 8015bfe:	bf00      	nop
 8015c00:	8800759c 	.word	0x8800759c
 8015c04:	7e37e43c 	.word	0x7e37e43c
 8015c08:	bff00000 	.word	0xbff00000
 8015c0c:	000fffff 	.word	0x000fffff

08015c10 <__kernel_cos>:
 8015c10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c14:	ec57 6b10 	vmov	r6, r7, d0
 8015c18:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8015c1c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8015c20:	ed8d 1b00 	vstr	d1, [sp]
 8015c24:	da07      	bge.n	8015c36 <__kernel_cos+0x26>
 8015c26:	ee10 0a10 	vmov	r0, s0
 8015c2a:	4639      	mov	r1, r7
 8015c2c:	f7ea ffa4 	bl	8000b78 <__aeabi_d2iz>
 8015c30:	2800      	cmp	r0, #0
 8015c32:	f000 8088 	beq.w	8015d46 <__kernel_cos+0x136>
 8015c36:	4632      	mov	r2, r6
 8015c38:	463b      	mov	r3, r7
 8015c3a:	4630      	mov	r0, r6
 8015c3c:	4639      	mov	r1, r7
 8015c3e:	f7ea fceb 	bl	8000618 <__aeabi_dmul>
 8015c42:	4b51      	ldr	r3, [pc, #324]	; (8015d88 <__kernel_cos+0x178>)
 8015c44:	2200      	movs	r2, #0
 8015c46:	4604      	mov	r4, r0
 8015c48:	460d      	mov	r5, r1
 8015c4a:	f7ea fce5 	bl	8000618 <__aeabi_dmul>
 8015c4e:	a340      	add	r3, pc, #256	; (adr r3, 8015d50 <__kernel_cos+0x140>)
 8015c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c54:	4682      	mov	sl, r0
 8015c56:	468b      	mov	fp, r1
 8015c58:	4620      	mov	r0, r4
 8015c5a:	4629      	mov	r1, r5
 8015c5c:	f7ea fcdc 	bl	8000618 <__aeabi_dmul>
 8015c60:	a33d      	add	r3, pc, #244	; (adr r3, 8015d58 <__kernel_cos+0x148>)
 8015c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c66:	f7ea fb21 	bl	80002ac <__adddf3>
 8015c6a:	4622      	mov	r2, r4
 8015c6c:	462b      	mov	r3, r5
 8015c6e:	f7ea fcd3 	bl	8000618 <__aeabi_dmul>
 8015c72:	a33b      	add	r3, pc, #236	; (adr r3, 8015d60 <__kernel_cos+0x150>)
 8015c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c78:	f7ea fb16 	bl	80002a8 <__aeabi_dsub>
 8015c7c:	4622      	mov	r2, r4
 8015c7e:	462b      	mov	r3, r5
 8015c80:	f7ea fcca 	bl	8000618 <__aeabi_dmul>
 8015c84:	a338      	add	r3, pc, #224	; (adr r3, 8015d68 <__kernel_cos+0x158>)
 8015c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c8a:	f7ea fb0f 	bl	80002ac <__adddf3>
 8015c8e:	4622      	mov	r2, r4
 8015c90:	462b      	mov	r3, r5
 8015c92:	f7ea fcc1 	bl	8000618 <__aeabi_dmul>
 8015c96:	a336      	add	r3, pc, #216	; (adr r3, 8015d70 <__kernel_cos+0x160>)
 8015c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c9c:	f7ea fb04 	bl	80002a8 <__aeabi_dsub>
 8015ca0:	4622      	mov	r2, r4
 8015ca2:	462b      	mov	r3, r5
 8015ca4:	f7ea fcb8 	bl	8000618 <__aeabi_dmul>
 8015ca8:	a333      	add	r3, pc, #204	; (adr r3, 8015d78 <__kernel_cos+0x168>)
 8015caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cae:	f7ea fafd 	bl	80002ac <__adddf3>
 8015cb2:	4622      	mov	r2, r4
 8015cb4:	462b      	mov	r3, r5
 8015cb6:	f7ea fcaf 	bl	8000618 <__aeabi_dmul>
 8015cba:	4622      	mov	r2, r4
 8015cbc:	462b      	mov	r3, r5
 8015cbe:	f7ea fcab 	bl	8000618 <__aeabi_dmul>
 8015cc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015cc6:	4604      	mov	r4, r0
 8015cc8:	460d      	mov	r5, r1
 8015cca:	4630      	mov	r0, r6
 8015ccc:	4639      	mov	r1, r7
 8015cce:	f7ea fca3 	bl	8000618 <__aeabi_dmul>
 8015cd2:	460b      	mov	r3, r1
 8015cd4:	4602      	mov	r2, r0
 8015cd6:	4629      	mov	r1, r5
 8015cd8:	4620      	mov	r0, r4
 8015cda:	f7ea fae5 	bl	80002a8 <__aeabi_dsub>
 8015cde:	4b2b      	ldr	r3, [pc, #172]	; (8015d8c <__kernel_cos+0x17c>)
 8015ce0:	4598      	cmp	r8, r3
 8015ce2:	4606      	mov	r6, r0
 8015ce4:	460f      	mov	r7, r1
 8015ce6:	dc10      	bgt.n	8015d0a <__kernel_cos+0xfa>
 8015ce8:	4602      	mov	r2, r0
 8015cea:	460b      	mov	r3, r1
 8015cec:	4650      	mov	r0, sl
 8015cee:	4659      	mov	r1, fp
 8015cf0:	f7ea fada 	bl	80002a8 <__aeabi_dsub>
 8015cf4:	460b      	mov	r3, r1
 8015cf6:	4926      	ldr	r1, [pc, #152]	; (8015d90 <__kernel_cos+0x180>)
 8015cf8:	4602      	mov	r2, r0
 8015cfa:	2000      	movs	r0, #0
 8015cfc:	f7ea fad4 	bl	80002a8 <__aeabi_dsub>
 8015d00:	ec41 0b10 	vmov	d0, r0, r1
 8015d04:	b003      	add	sp, #12
 8015d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d0a:	4b22      	ldr	r3, [pc, #136]	; (8015d94 <__kernel_cos+0x184>)
 8015d0c:	4920      	ldr	r1, [pc, #128]	; (8015d90 <__kernel_cos+0x180>)
 8015d0e:	4598      	cmp	r8, r3
 8015d10:	bfcc      	ite	gt
 8015d12:	4d21      	ldrgt	r5, [pc, #132]	; (8015d98 <__kernel_cos+0x188>)
 8015d14:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8015d18:	2400      	movs	r4, #0
 8015d1a:	4622      	mov	r2, r4
 8015d1c:	462b      	mov	r3, r5
 8015d1e:	2000      	movs	r0, #0
 8015d20:	f7ea fac2 	bl	80002a8 <__aeabi_dsub>
 8015d24:	4622      	mov	r2, r4
 8015d26:	4680      	mov	r8, r0
 8015d28:	4689      	mov	r9, r1
 8015d2a:	462b      	mov	r3, r5
 8015d2c:	4650      	mov	r0, sl
 8015d2e:	4659      	mov	r1, fp
 8015d30:	f7ea faba 	bl	80002a8 <__aeabi_dsub>
 8015d34:	4632      	mov	r2, r6
 8015d36:	463b      	mov	r3, r7
 8015d38:	f7ea fab6 	bl	80002a8 <__aeabi_dsub>
 8015d3c:	4602      	mov	r2, r0
 8015d3e:	460b      	mov	r3, r1
 8015d40:	4640      	mov	r0, r8
 8015d42:	4649      	mov	r1, r9
 8015d44:	e7da      	b.n	8015cfc <__kernel_cos+0xec>
 8015d46:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8015d80 <__kernel_cos+0x170>
 8015d4a:	e7db      	b.n	8015d04 <__kernel_cos+0xf4>
 8015d4c:	f3af 8000 	nop.w
 8015d50:	be8838d4 	.word	0xbe8838d4
 8015d54:	bda8fae9 	.word	0xbda8fae9
 8015d58:	bdb4b1c4 	.word	0xbdb4b1c4
 8015d5c:	3e21ee9e 	.word	0x3e21ee9e
 8015d60:	809c52ad 	.word	0x809c52ad
 8015d64:	3e927e4f 	.word	0x3e927e4f
 8015d68:	19cb1590 	.word	0x19cb1590
 8015d6c:	3efa01a0 	.word	0x3efa01a0
 8015d70:	16c15177 	.word	0x16c15177
 8015d74:	3f56c16c 	.word	0x3f56c16c
 8015d78:	5555554c 	.word	0x5555554c
 8015d7c:	3fa55555 	.word	0x3fa55555
 8015d80:	00000000 	.word	0x00000000
 8015d84:	3ff00000 	.word	0x3ff00000
 8015d88:	3fe00000 	.word	0x3fe00000
 8015d8c:	3fd33332 	.word	0x3fd33332
 8015d90:	3ff00000 	.word	0x3ff00000
 8015d94:	3fe90000 	.word	0x3fe90000
 8015d98:	3fd20000 	.word	0x3fd20000
 8015d9c:	00000000 	.word	0x00000000

08015da0 <__kernel_sin>:
 8015da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015da4:	ed2d 8b04 	vpush	{d8-d9}
 8015da8:	eeb0 8a41 	vmov.f32	s16, s2
 8015dac:	eef0 8a61 	vmov.f32	s17, s3
 8015db0:	ec55 4b10 	vmov	r4, r5, d0
 8015db4:	b083      	sub	sp, #12
 8015db6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015dba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015dbe:	9001      	str	r0, [sp, #4]
 8015dc0:	da06      	bge.n	8015dd0 <__kernel_sin+0x30>
 8015dc2:	ee10 0a10 	vmov	r0, s0
 8015dc6:	4629      	mov	r1, r5
 8015dc8:	f7ea fed6 	bl	8000b78 <__aeabi_d2iz>
 8015dcc:	2800      	cmp	r0, #0
 8015dce:	d051      	beq.n	8015e74 <__kernel_sin+0xd4>
 8015dd0:	4622      	mov	r2, r4
 8015dd2:	462b      	mov	r3, r5
 8015dd4:	4620      	mov	r0, r4
 8015dd6:	4629      	mov	r1, r5
 8015dd8:	f7ea fc1e 	bl	8000618 <__aeabi_dmul>
 8015ddc:	4682      	mov	sl, r0
 8015dde:	468b      	mov	fp, r1
 8015de0:	4602      	mov	r2, r0
 8015de2:	460b      	mov	r3, r1
 8015de4:	4620      	mov	r0, r4
 8015de6:	4629      	mov	r1, r5
 8015de8:	f7ea fc16 	bl	8000618 <__aeabi_dmul>
 8015dec:	a341      	add	r3, pc, #260	; (adr r3, 8015ef4 <__kernel_sin+0x154>)
 8015dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015df2:	4680      	mov	r8, r0
 8015df4:	4689      	mov	r9, r1
 8015df6:	4650      	mov	r0, sl
 8015df8:	4659      	mov	r1, fp
 8015dfa:	f7ea fc0d 	bl	8000618 <__aeabi_dmul>
 8015dfe:	a33f      	add	r3, pc, #252	; (adr r3, 8015efc <__kernel_sin+0x15c>)
 8015e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e04:	f7ea fa50 	bl	80002a8 <__aeabi_dsub>
 8015e08:	4652      	mov	r2, sl
 8015e0a:	465b      	mov	r3, fp
 8015e0c:	f7ea fc04 	bl	8000618 <__aeabi_dmul>
 8015e10:	a33c      	add	r3, pc, #240	; (adr r3, 8015f04 <__kernel_sin+0x164>)
 8015e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e16:	f7ea fa49 	bl	80002ac <__adddf3>
 8015e1a:	4652      	mov	r2, sl
 8015e1c:	465b      	mov	r3, fp
 8015e1e:	f7ea fbfb 	bl	8000618 <__aeabi_dmul>
 8015e22:	a33a      	add	r3, pc, #232	; (adr r3, 8015f0c <__kernel_sin+0x16c>)
 8015e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e28:	f7ea fa3e 	bl	80002a8 <__aeabi_dsub>
 8015e2c:	4652      	mov	r2, sl
 8015e2e:	465b      	mov	r3, fp
 8015e30:	f7ea fbf2 	bl	8000618 <__aeabi_dmul>
 8015e34:	a337      	add	r3, pc, #220	; (adr r3, 8015f14 <__kernel_sin+0x174>)
 8015e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e3a:	f7ea fa37 	bl	80002ac <__adddf3>
 8015e3e:	9b01      	ldr	r3, [sp, #4]
 8015e40:	4606      	mov	r6, r0
 8015e42:	460f      	mov	r7, r1
 8015e44:	b9eb      	cbnz	r3, 8015e82 <__kernel_sin+0xe2>
 8015e46:	4602      	mov	r2, r0
 8015e48:	460b      	mov	r3, r1
 8015e4a:	4650      	mov	r0, sl
 8015e4c:	4659      	mov	r1, fp
 8015e4e:	f7ea fbe3 	bl	8000618 <__aeabi_dmul>
 8015e52:	a325      	add	r3, pc, #148	; (adr r3, 8015ee8 <__kernel_sin+0x148>)
 8015e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e58:	f7ea fa26 	bl	80002a8 <__aeabi_dsub>
 8015e5c:	4642      	mov	r2, r8
 8015e5e:	464b      	mov	r3, r9
 8015e60:	f7ea fbda 	bl	8000618 <__aeabi_dmul>
 8015e64:	4602      	mov	r2, r0
 8015e66:	460b      	mov	r3, r1
 8015e68:	4620      	mov	r0, r4
 8015e6a:	4629      	mov	r1, r5
 8015e6c:	f7ea fa1e 	bl	80002ac <__adddf3>
 8015e70:	4604      	mov	r4, r0
 8015e72:	460d      	mov	r5, r1
 8015e74:	ec45 4b10 	vmov	d0, r4, r5
 8015e78:	b003      	add	sp, #12
 8015e7a:	ecbd 8b04 	vpop	{d8-d9}
 8015e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e82:	4b1b      	ldr	r3, [pc, #108]	; (8015ef0 <__kernel_sin+0x150>)
 8015e84:	ec51 0b18 	vmov	r0, r1, d8
 8015e88:	2200      	movs	r2, #0
 8015e8a:	f7ea fbc5 	bl	8000618 <__aeabi_dmul>
 8015e8e:	4632      	mov	r2, r6
 8015e90:	ec41 0b19 	vmov	d9, r0, r1
 8015e94:	463b      	mov	r3, r7
 8015e96:	4640      	mov	r0, r8
 8015e98:	4649      	mov	r1, r9
 8015e9a:	f7ea fbbd 	bl	8000618 <__aeabi_dmul>
 8015e9e:	4602      	mov	r2, r0
 8015ea0:	460b      	mov	r3, r1
 8015ea2:	ec51 0b19 	vmov	r0, r1, d9
 8015ea6:	f7ea f9ff 	bl	80002a8 <__aeabi_dsub>
 8015eaa:	4652      	mov	r2, sl
 8015eac:	465b      	mov	r3, fp
 8015eae:	f7ea fbb3 	bl	8000618 <__aeabi_dmul>
 8015eb2:	ec53 2b18 	vmov	r2, r3, d8
 8015eb6:	f7ea f9f7 	bl	80002a8 <__aeabi_dsub>
 8015eba:	a30b      	add	r3, pc, #44	; (adr r3, 8015ee8 <__kernel_sin+0x148>)
 8015ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ec0:	4606      	mov	r6, r0
 8015ec2:	460f      	mov	r7, r1
 8015ec4:	4640      	mov	r0, r8
 8015ec6:	4649      	mov	r1, r9
 8015ec8:	f7ea fba6 	bl	8000618 <__aeabi_dmul>
 8015ecc:	4602      	mov	r2, r0
 8015ece:	460b      	mov	r3, r1
 8015ed0:	4630      	mov	r0, r6
 8015ed2:	4639      	mov	r1, r7
 8015ed4:	f7ea f9ea 	bl	80002ac <__adddf3>
 8015ed8:	4602      	mov	r2, r0
 8015eda:	460b      	mov	r3, r1
 8015edc:	4620      	mov	r0, r4
 8015ede:	4629      	mov	r1, r5
 8015ee0:	f7ea f9e2 	bl	80002a8 <__aeabi_dsub>
 8015ee4:	e7c4      	b.n	8015e70 <__kernel_sin+0xd0>
 8015ee6:	bf00      	nop
 8015ee8:	55555549 	.word	0x55555549
 8015eec:	3fc55555 	.word	0x3fc55555
 8015ef0:	3fe00000 	.word	0x3fe00000
 8015ef4:	5acfd57c 	.word	0x5acfd57c
 8015ef8:	3de5d93a 	.word	0x3de5d93a
 8015efc:	8a2b9ceb 	.word	0x8a2b9ceb
 8015f00:	3e5ae5e6 	.word	0x3e5ae5e6
 8015f04:	57b1fe7d 	.word	0x57b1fe7d
 8015f08:	3ec71de3 	.word	0x3ec71de3
 8015f0c:	19c161d5 	.word	0x19c161d5
 8015f10:	3f2a01a0 	.word	0x3f2a01a0
 8015f14:	1110f8a6 	.word	0x1110f8a6
 8015f18:	3f811111 	.word	0x3f811111
 8015f1c:	00000000 	.word	0x00000000

08015f20 <__ieee754_rem_pio2>:
 8015f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f24:	ed2d 8b02 	vpush	{d8}
 8015f28:	ec55 4b10 	vmov	r4, r5, d0
 8015f2c:	4bca      	ldr	r3, [pc, #808]	; (8016258 <__ieee754_rem_pio2+0x338>)
 8015f2e:	b08b      	sub	sp, #44	; 0x2c
 8015f30:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8015f34:	4598      	cmp	r8, r3
 8015f36:	4682      	mov	sl, r0
 8015f38:	9502      	str	r5, [sp, #8]
 8015f3a:	dc08      	bgt.n	8015f4e <__ieee754_rem_pio2+0x2e>
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	2300      	movs	r3, #0
 8015f40:	ed80 0b00 	vstr	d0, [r0]
 8015f44:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015f48:	f04f 0b00 	mov.w	fp, #0
 8015f4c:	e028      	b.n	8015fa0 <__ieee754_rem_pio2+0x80>
 8015f4e:	4bc3      	ldr	r3, [pc, #780]	; (801625c <__ieee754_rem_pio2+0x33c>)
 8015f50:	4598      	cmp	r8, r3
 8015f52:	dc78      	bgt.n	8016046 <__ieee754_rem_pio2+0x126>
 8015f54:	9b02      	ldr	r3, [sp, #8]
 8015f56:	4ec2      	ldr	r6, [pc, #776]	; (8016260 <__ieee754_rem_pio2+0x340>)
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	ee10 0a10 	vmov	r0, s0
 8015f5e:	a3b0      	add	r3, pc, #704	; (adr r3, 8016220 <__ieee754_rem_pio2+0x300>)
 8015f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f64:	4629      	mov	r1, r5
 8015f66:	dd39      	ble.n	8015fdc <__ieee754_rem_pio2+0xbc>
 8015f68:	f7ea f99e 	bl	80002a8 <__aeabi_dsub>
 8015f6c:	45b0      	cmp	r8, r6
 8015f6e:	4604      	mov	r4, r0
 8015f70:	460d      	mov	r5, r1
 8015f72:	d01b      	beq.n	8015fac <__ieee754_rem_pio2+0x8c>
 8015f74:	a3ac      	add	r3, pc, #688	; (adr r3, 8016228 <__ieee754_rem_pio2+0x308>)
 8015f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f7a:	f7ea f995 	bl	80002a8 <__aeabi_dsub>
 8015f7e:	4602      	mov	r2, r0
 8015f80:	460b      	mov	r3, r1
 8015f82:	e9ca 2300 	strd	r2, r3, [sl]
 8015f86:	4620      	mov	r0, r4
 8015f88:	4629      	mov	r1, r5
 8015f8a:	f7ea f98d 	bl	80002a8 <__aeabi_dsub>
 8015f8e:	a3a6      	add	r3, pc, #664	; (adr r3, 8016228 <__ieee754_rem_pio2+0x308>)
 8015f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f94:	f7ea f988 	bl	80002a8 <__aeabi_dsub>
 8015f98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015f9c:	f04f 0b01 	mov.w	fp, #1
 8015fa0:	4658      	mov	r0, fp
 8015fa2:	b00b      	add	sp, #44	; 0x2c
 8015fa4:	ecbd 8b02 	vpop	{d8}
 8015fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fac:	a3a0      	add	r3, pc, #640	; (adr r3, 8016230 <__ieee754_rem_pio2+0x310>)
 8015fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fb2:	f7ea f979 	bl	80002a8 <__aeabi_dsub>
 8015fb6:	a3a0      	add	r3, pc, #640	; (adr r3, 8016238 <__ieee754_rem_pio2+0x318>)
 8015fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fbc:	4604      	mov	r4, r0
 8015fbe:	460d      	mov	r5, r1
 8015fc0:	f7ea f972 	bl	80002a8 <__aeabi_dsub>
 8015fc4:	4602      	mov	r2, r0
 8015fc6:	460b      	mov	r3, r1
 8015fc8:	e9ca 2300 	strd	r2, r3, [sl]
 8015fcc:	4620      	mov	r0, r4
 8015fce:	4629      	mov	r1, r5
 8015fd0:	f7ea f96a 	bl	80002a8 <__aeabi_dsub>
 8015fd4:	a398      	add	r3, pc, #608	; (adr r3, 8016238 <__ieee754_rem_pio2+0x318>)
 8015fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fda:	e7db      	b.n	8015f94 <__ieee754_rem_pio2+0x74>
 8015fdc:	f7ea f966 	bl	80002ac <__adddf3>
 8015fe0:	45b0      	cmp	r8, r6
 8015fe2:	4604      	mov	r4, r0
 8015fe4:	460d      	mov	r5, r1
 8015fe6:	d016      	beq.n	8016016 <__ieee754_rem_pio2+0xf6>
 8015fe8:	a38f      	add	r3, pc, #572	; (adr r3, 8016228 <__ieee754_rem_pio2+0x308>)
 8015fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fee:	f7ea f95d 	bl	80002ac <__adddf3>
 8015ff2:	4602      	mov	r2, r0
 8015ff4:	460b      	mov	r3, r1
 8015ff6:	e9ca 2300 	strd	r2, r3, [sl]
 8015ffa:	4620      	mov	r0, r4
 8015ffc:	4629      	mov	r1, r5
 8015ffe:	f7ea f953 	bl	80002a8 <__aeabi_dsub>
 8016002:	a389      	add	r3, pc, #548	; (adr r3, 8016228 <__ieee754_rem_pio2+0x308>)
 8016004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016008:	f7ea f950 	bl	80002ac <__adddf3>
 801600c:	f04f 3bff 	mov.w	fp, #4294967295
 8016010:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016014:	e7c4      	b.n	8015fa0 <__ieee754_rem_pio2+0x80>
 8016016:	a386      	add	r3, pc, #536	; (adr r3, 8016230 <__ieee754_rem_pio2+0x310>)
 8016018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801601c:	f7ea f946 	bl	80002ac <__adddf3>
 8016020:	a385      	add	r3, pc, #532	; (adr r3, 8016238 <__ieee754_rem_pio2+0x318>)
 8016022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016026:	4604      	mov	r4, r0
 8016028:	460d      	mov	r5, r1
 801602a:	f7ea f93f 	bl	80002ac <__adddf3>
 801602e:	4602      	mov	r2, r0
 8016030:	460b      	mov	r3, r1
 8016032:	e9ca 2300 	strd	r2, r3, [sl]
 8016036:	4620      	mov	r0, r4
 8016038:	4629      	mov	r1, r5
 801603a:	f7ea f935 	bl	80002a8 <__aeabi_dsub>
 801603e:	a37e      	add	r3, pc, #504	; (adr r3, 8016238 <__ieee754_rem_pio2+0x318>)
 8016040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016044:	e7e0      	b.n	8016008 <__ieee754_rem_pio2+0xe8>
 8016046:	4b87      	ldr	r3, [pc, #540]	; (8016264 <__ieee754_rem_pio2+0x344>)
 8016048:	4598      	cmp	r8, r3
 801604a:	f300 80d8 	bgt.w	80161fe <__ieee754_rem_pio2+0x2de>
 801604e:	f000 f96d 	bl	801632c <fabs>
 8016052:	ec55 4b10 	vmov	r4, r5, d0
 8016056:	ee10 0a10 	vmov	r0, s0
 801605a:	a379      	add	r3, pc, #484	; (adr r3, 8016240 <__ieee754_rem_pio2+0x320>)
 801605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016060:	4629      	mov	r1, r5
 8016062:	f7ea fad9 	bl	8000618 <__aeabi_dmul>
 8016066:	4b80      	ldr	r3, [pc, #512]	; (8016268 <__ieee754_rem_pio2+0x348>)
 8016068:	2200      	movs	r2, #0
 801606a:	f7ea f91f 	bl	80002ac <__adddf3>
 801606e:	f7ea fd83 	bl	8000b78 <__aeabi_d2iz>
 8016072:	4683      	mov	fp, r0
 8016074:	f7ea fa66 	bl	8000544 <__aeabi_i2d>
 8016078:	4602      	mov	r2, r0
 801607a:	460b      	mov	r3, r1
 801607c:	ec43 2b18 	vmov	d8, r2, r3
 8016080:	a367      	add	r3, pc, #412	; (adr r3, 8016220 <__ieee754_rem_pio2+0x300>)
 8016082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016086:	f7ea fac7 	bl	8000618 <__aeabi_dmul>
 801608a:	4602      	mov	r2, r0
 801608c:	460b      	mov	r3, r1
 801608e:	4620      	mov	r0, r4
 8016090:	4629      	mov	r1, r5
 8016092:	f7ea f909 	bl	80002a8 <__aeabi_dsub>
 8016096:	a364      	add	r3, pc, #400	; (adr r3, 8016228 <__ieee754_rem_pio2+0x308>)
 8016098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801609c:	4606      	mov	r6, r0
 801609e:	460f      	mov	r7, r1
 80160a0:	ec51 0b18 	vmov	r0, r1, d8
 80160a4:	f7ea fab8 	bl	8000618 <__aeabi_dmul>
 80160a8:	f1bb 0f1f 	cmp.w	fp, #31
 80160ac:	4604      	mov	r4, r0
 80160ae:	460d      	mov	r5, r1
 80160b0:	dc0d      	bgt.n	80160ce <__ieee754_rem_pio2+0x1ae>
 80160b2:	4b6e      	ldr	r3, [pc, #440]	; (801626c <__ieee754_rem_pio2+0x34c>)
 80160b4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80160b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160bc:	4543      	cmp	r3, r8
 80160be:	d006      	beq.n	80160ce <__ieee754_rem_pio2+0x1ae>
 80160c0:	4622      	mov	r2, r4
 80160c2:	462b      	mov	r3, r5
 80160c4:	4630      	mov	r0, r6
 80160c6:	4639      	mov	r1, r7
 80160c8:	f7ea f8ee 	bl	80002a8 <__aeabi_dsub>
 80160cc:	e00e      	b.n	80160ec <__ieee754_rem_pio2+0x1cc>
 80160ce:	462b      	mov	r3, r5
 80160d0:	4622      	mov	r2, r4
 80160d2:	4630      	mov	r0, r6
 80160d4:	4639      	mov	r1, r7
 80160d6:	f7ea f8e7 	bl	80002a8 <__aeabi_dsub>
 80160da:	ea4f 5328 	mov.w	r3, r8, asr #20
 80160de:	9303      	str	r3, [sp, #12]
 80160e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80160e4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80160e8:	2b10      	cmp	r3, #16
 80160ea:	dc02      	bgt.n	80160f2 <__ieee754_rem_pio2+0x1d2>
 80160ec:	e9ca 0100 	strd	r0, r1, [sl]
 80160f0:	e039      	b.n	8016166 <__ieee754_rem_pio2+0x246>
 80160f2:	a34f      	add	r3, pc, #316	; (adr r3, 8016230 <__ieee754_rem_pio2+0x310>)
 80160f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160f8:	ec51 0b18 	vmov	r0, r1, d8
 80160fc:	f7ea fa8c 	bl	8000618 <__aeabi_dmul>
 8016100:	4604      	mov	r4, r0
 8016102:	460d      	mov	r5, r1
 8016104:	4602      	mov	r2, r0
 8016106:	460b      	mov	r3, r1
 8016108:	4630      	mov	r0, r6
 801610a:	4639      	mov	r1, r7
 801610c:	f7ea f8cc 	bl	80002a8 <__aeabi_dsub>
 8016110:	4602      	mov	r2, r0
 8016112:	460b      	mov	r3, r1
 8016114:	4680      	mov	r8, r0
 8016116:	4689      	mov	r9, r1
 8016118:	4630      	mov	r0, r6
 801611a:	4639      	mov	r1, r7
 801611c:	f7ea f8c4 	bl	80002a8 <__aeabi_dsub>
 8016120:	4622      	mov	r2, r4
 8016122:	462b      	mov	r3, r5
 8016124:	f7ea f8c0 	bl	80002a8 <__aeabi_dsub>
 8016128:	a343      	add	r3, pc, #268	; (adr r3, 8016238 <__ieee754_rem_pio2+0x318>)
 801612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801612e:	4604      	mov	r4, r0
 8016130:	460d      	mov	r5, r1
 8016132:	ec51 0b18 	vmov	r0, r1, d8
 8016136:	f7ea fa6f 	bl	8000618 <__aeabi_dmul>
 801613a:	4622      	mov	r2, r4
 801613c:	462b      	mov	r3, r5
 801613e:	f7ea f8b3 	bl	80002a8 <__aeabi_dsub>
 8016142:	4602      	mov	r2, r0
 8016144:	460b      	mov	r3, r1
 8016146:	4604      	mov	r4, r0
 8016148:	460d      	mov	r5, r1
 801614a:	4640      	mov	r0, r8
 801614c:	4649      	mov	r1, r9
 801614e:	f7ea f8ab 	bl	80002a8 <__aeabi_dsub>
 8016152:	9a03      	ldr	r2, [sp, #12]
 8016154:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016158:	1ad3      	subs	r3, r2, r3
 801615a:	2b31      	cmp	r3, #49	; 0x31
 801615c:	dc24      	bgt.n	80161a8 <__ieee754_rem_pio2+0x288>
 801615e:	e9ca 0100 	strd	r0, r1, [sl]
 8016162:	4646      	mov	r6, r8
 8016164:	464f      	mov	r7, r9
 8016166:	e9da 8900 	ldrd	r8, r9, [sl]
 801616a:	4630      	mov	r0, r6
 801616c:	4642      	mov	r2, r8
 801616e:	464b      	mov	r3, r9
 8016170:	4639      	mov	r1, r7
 8016172:	f7ea f899 	bl	80002a8 <__aeabi_dsub>
 8016176:	462b      	mov	r3, r5
 8016178:	4622      	mov	r2, r4
 801617a:	f7ea f895 	bl	80002a8 <__aeabi_dsub>
 801617e:	9b02      	ldr	r3, [sp, #8]
 8016180:	2b00      	cmp	r3, #0
 8016182:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016186:	f6bf af0b 	bge.w	8015fa0 <__ieee754_rem_pio2+0x80>
 801618a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801618e:	f8ca 3004 	str.w	r3, [sl, #4]
 8016192:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016196:	f8ca 8000 	str.w	r8, [sl]
 801619a:	f8ca 0008 	str.w	r0, [sl, #8]
 801619e:	f8ca 300c 	str.w	r3, [sl, #12]
 80161a2:	f1cb 0b00 	rsb	fp, fp, #0
 80161a6:	e6fb      	b.n	8015fa0 <__ieee754_rem_pio2+0x80>
 80161a8:	a327      	add	r3, pc, #156	; (adr r3, 8016248 <__ieee754_rem_pio2+0x328>)
 80161aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ae:	ec51 0b18 	vmov	r0, r1, d8
 80161b2:	f7ea fa31 	bl	8000618 <__aeabi_dmul>
 80161b6:	4604      	mov	r4, r0
 80161b8:	460d      	mov	r5, r1
 80161ba:	4602      	mov	r2, r0
 80161bc:	460b      	mov	r3, r1
 80161be:	4640      	mov	r0, r8
 80161c0:	4649      	mov	r1, r9
 80161c2:	f7ea f871 	bl	80002a8 <__aeabi_dsub>
 80161c6:	4602      	mov	r2, r0
 80161c8:	460b      	mov	r3, r1
 80161ca:	4606      	mov	r6, r0
 80161cc:	460f      	mov	r7, r1
 80161ce:	4640      	mov	r0, r8
 80161d0:	4649      	mov	r1, r9
 80161d2:	f7ea f869 	bl	80002a8 <__aeabi_dsub>
 80161d6:	4622      	mov	r2, r4
 80161d8:	462b      	mov	r3, r5
 80161da:	f7ea f865 	bl	80002a8 <__aeabi_dsub>
 80161de:	a31c      	add	r3, pc, #112	; (adr r3, 8016250 <__ieee754_rem_pio2+0x330>)
 80161e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e4:	4604      	mov	r4, r0
 80161e6:	460d      	mov	r5, r1
 80161e8:	ec51 0b18 	vmov	r0, r1, d8
 80161ec:	f7ea fa14 	bl	8000618 <__aeabi_dmul>
 80161f0:	4622      	mov	r2, r4
 80161f2:	462b      	mov	r3, r5
 80161f4:	f7ea f858 	bl	80002a8 <__aeabi_dsub>
 80161f8:	4604      	mov	r4, r0
 80161fa:	460d      	mov	r5, r1
 80161fc:	e760      	b.n	80160c0 <__ieee754_rem_pio2+0x1a0>
 80161fe:	4b1c      	ldr	r3, [pc, #112]	; (8016270 <__ieee754_rem_pio2+0x350>)
 8016200:	4598      	cmp	r8, r3
 8016202:	dd37      	ble.n	8016274 <__ieee754_rem_pio2+0x354>
 8016204:	ee10 2a10 	vmov	r2, s0
 8016208:	462b      	mov	r3, r5
 801620a:	4620      	mov	r0, r4
 801620c:	4629      	mov	r1, r5
 801620e:	f7ea f84b 	bl	80002a8 <__aeabi_dsub>
 8016212:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016216:	e9ca 0100 	strd	r0, r1, [sl]
 801621a:	e695      	b.n	8015f48 <__ieee754_rem_pio2+0x28>
 801621c:	f3af 8000 	nop.w
 8016220:	54400000 	.word	0x54400000
 8016224:	3ff921fb 	.word	0x3ff921fb
 8016228:	1a626331 	.word	0x1a626331
 801622c:	3dd0b461 	.word	0x3dd0b461
 8016230:	1a600000 	.word	0x1a600000
 8016234:	3dd0b461 	.word	0x3dd0b461
 8016238:	2e037073 	.word	0x2e037073
 801623c:	3ba3198a 	.word	0x3ba3198a
 8016240:	6dc9c883 	.word	0x6dc9c883
 8016244:	3fe45f30 	.word	0x3fe45f30
 8016248:	2e000000 	.word	0x2e000000
 801624c:	3ba3198a 	.word	0x3ba3198a
 8016250:	252049c1 	.word	0x252049c1
 8016254:	397b839a 	.word	0x397b839a
 8016258:	3fe921fb 	.word	0x3fe921fb
 801625c:	4002d97b 	.word	0x4002d97b
 8016260:	3ff921fb 	.word	0x3ff921fb
 8016264:	413921fb 	.word	0x413921fb
 8016268:	3fe00000 	.word	0x3fe00000
 801626c:	08018f98 	.word	0x08018f98
 8016270:	7fefffff 	.word	0x7fefffff
 8016274:	ea4f 5628 	mov.w	r6, r8, asr #20
 8016278:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801627c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8016280:	4620      	mov	r0, r4
 8016282:	460d      	mov	r5, r1
 8016284:	f7ea fc78 	bl	8000b78 <__aeabi_d2iz>
 8016288:	f7ea f95c 	bl	8000544 <__aeabi_i2d>
 801628c:	4602      	mov	r2, r0
 801628e:	460b      	mov	r3, r1
 8016290:	4620      	mov	r0, r4
 8016292:	4629      	mov	r1, r5
 8016294:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016298:	f7ea f806 	bl	80002a8 <__aeabi_dsub>
 801629c:	4b21      	ldr	r3, [pc, #132]	; (8016324 <__ieee754_rem_pio2+0x404>)
 801629e:	2200      	movs	r2, #0
 80162a0:	f7ea f9ba 	bl	8000618 <__aeabi_dmul>
 80162a4:	460d      	mov	r5, r1
 80162a6:	4604      	mov	r4, r0
 80162a8:	f7ea fc66 	bl	8000b78 <__aeabi_d2iz>
 80162ac:	f7ea f94a 	bl	8000544 <__aeabi_i2d>
 80162b0:	4602      	mov	r2, r0
 80162b2:	460b      	mov	r3, r1
 80162b4:	4620      	mov	r0, r4
 80162b6:	4629      	mov	r1, r5
 80162b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80162bc:	f7e9 fff4 	bl	80002a8 <__aeabi_dsub>
 80162c0:	4b18      	ldr	r3, [pc, #96]	; (8016324 <__ieee754_rem_pio2+0x404>)
 80162c2:	2200      	movs	r2, #0
 80162c4:	f7ea f9a8 	bl	8000618 <__aeabi_dmul>
 80162c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80162cc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80162d0:	2703      	movs	r7, #3
 80162d2:	2400      	movs	r4, #0
 80162d4:	2500      	movs	r5, #0
 80162d6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80162da:	4622      	mov	r2, r4
 80162dc:	462b      	mov	r3, r5
 80162de:	46b9      	mov	r9, r7
 80162e0:	3f01      	subs	r7, #1
 80162e2:	f7ea fc01 	bl	8000ae8 <__aeabi_dcmpeq>
 80162e6:	2800      	cmp	r0, #0
 80162e8:	d1f5      	bne.n	80162d6 <__ieee754_rem_pio2+0x3b6>
 80162ea:	4b0f      	ldr	r3, [pc, #60]	; (8016328 <__ieee754_rem_pio2+0x408>)
 80162ec:	9301      	str	r3, [sp, #4]
 80162ee:	2302      	movs	r3, #2
 80162f0:	9300      	str	r3, [sp, #0]
 80162f2:	4632      	mov	r2, r6
 80162f4:	464b      	mov	r3, r9
 80162f6:	4651      	mov	r1, sl
 80162f8:	a804      	add	r0, sp, #16
 80162fa:	f000 f911 	bl	8016520 <__kernel_rem_pio2>
 80162fe:	9b02      	ldr	r3, [sp, #8]
 8016300:	2b00      	cmp	r3, #0
 8016302:	4683      	mov	fp, r0
 8016304:	f6bf ae4c 	bge.w	8015fa0 <__ieee754_rem_pio2+0x80>
 8016308:	e9da 2100 	ldrd	r2, r1, [sl]
 801630c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016310:	e9ca 2300 	strd	r2, r3, [sl]
 8016314:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8016318:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801631c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8016320:	e73f      	b.n	80161a2 <__ieee754_rem_pio2+0x282>
 8016322:	bf00      	nop
 8016324:	41700000 	.word	0x41700000
 8016328:	08019018 	.word	0x08019018

0801632c <fabs>:
 801632c:	ec51 0b10 	vmov	r0, r1, d0
 8016330:	ee10 2a10 	vmov	r2, s0
 8016334:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016338:	ec43 2b10 	vmov	d0, r2, r3
 801633c:	4770      	bx	lr
	...

08016340 <__ieee754_expf>:
 8016340:	ee10 2a10 	vmov	r2, s0
 8016344:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8016348:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801634c:	d902      	bls.n	8016354 <__ieee754_expf+0x14>
 801634e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016352:	4770      	bx	lr
 8016354:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8016358:	d106      	bne.n	8016368 <__ieee754_expf+0x28>
 801635a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8016494 <__ieee754_expf+0x154>
 801635e:	2900      	cmp	r1, #0
 8016360:	bf18      	it	ne
 8016362:	eeb0 0a67 	vmovne.f32	s0, s15
 8016366:	4770      	bx	lr
 8016368:	484b      	ldr	r0, [pc, #300]	; (8016498 <__ieee754_expf+0x158>)
 801636a:	4282      	cmp	r2, r0
 801636c:	dd02      	ble.n	8016374 <__ieee754_expf+0x34>
 801636e:	2000      	movs	r0, #0
 8016370:	f000 b8d0 	b.w	8016514 <__math_oflowf>
 8016374:	2a00      	cmp	r2, #0
 8016376:	da05      	bge.n	8016384 <__ieee754_expf+0x44>
 8016378:	4a48      	ldr	r2, [pc, #288]	; (801649c <__ieee754_expf+0x15c>)
 801637a:	4293      	cmp	r3, r2
 801637c:	d902      	bls.n	8016384 <__ieee754_expf+0x44>
 801637e:	2000      	movs	r0, #0
 8016380:	f000 b8c2 	b.w	8016508 <__math_uflowf>
 8016384:	4a46      	ldr	r2, [pc, #280]	; (80164a0 <__ieee754_expf+0x160>)
 8016386:	4293      	cmp	r3, r2
 8016388:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801638c:	d952      	bls.n	8016434 <__ieee754_expf+0xf4>
 801638e:	4a45      	ldr	r2, [pc, #276]	; (80164a4 <__ieee754_expf+0x164>)
 8016390:	4293      	cmp	r3, r2
 8016392:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8016396:	d834      	bhi.n	8016402 <__ieee754_expf+0xc2>
 8016398:	4b43      	ldr	r3, [pc, #268]	; (80164a8 <__ieee754_expf+0x168>)
 801639a:	4413      	add	r3, r2
 801639c:	ed93 7a00 	vldr	s14, [r3]
 80163a0:	4b42      	ldr	r3, [pc, #264]	; (80164ac <__ieee754_expf+0x16c>)
 80163a2:	4413      	add	r3, r2
 80163a4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80163a8:	f1c1 0201 	rsb	r2, r1, #1
 80163ac:	edd3 7a00 	vldr	s15, [r3]
 80163b0:	1a52      	subs	r2, r2, r1
 80163b2:	ee37 0a67 	vsub.f32	s0, s14, s15
 80163b6:	ee20 6a00 	vmul.f32	s12, s0, s0
 80163ba:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80164b0 <__ieee754_expf+0x170>
 80163be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80164b4 <__ieee754_expf+0x174>
 80163c2:	eee6 6a05 	vfma.f32	s13, s12, s10
 80163c6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80164b8 <__ieee754_expf+0x178>
 80163ca:	eea6 5a86 	vfma.f32	s10, s13, s12
 80163ce:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80164bc <__ieee754_expf+0x17c>
 80163d2:	eee5 6a06 	vfma.f32	s13, s10, s12
 80163d6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80164c0 <__ieee754_expf+0x180>
 80163da:	eea6 5a86 	vfma.f32	s10, s13, s12
 80163de:	eef0 6a40 	vmov.f32	s13, s0
 80163e2:	eee5 6a46 	vfms.f32	s13, s10, s12
 80163e6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80163ea:	ee20 5a26 	vmul.f32	s10, s0, s13
 80163ee:	bb92      	cbnz	r2, 8016456 <__ieee754_expf+0x116>
 80163f0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80163f4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80163f8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80163fc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8016400:	4770      	bx	lr
 8016402:	4b30      	ldr	r3, [pc, #192]	; (80164c4 <__ieee754_expf+0x184>)
 8016404:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80164c8 <__ieee754_expf+0x188>
 8016408:	eddf 6a30 	vldr	s13, [pc, #192]	; 80164cc <__ieee754_expf+0x18c>
 801640c:	4413      	add	r3, r2
 801640e:	edd3 7a00 	vldr	s15, [r3]
 8016412:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016416:	eeb0 7a40 	vmov.f32	s14, s0
 801641a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801641e:	ee17 2a90 	vmov	r2, s15
 8016422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016426:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801642a:	eddf 6a29 	vldr	s13, [pc, #164]	; 80164d0 <__ieee754_expf+0x190>
 801642e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016432:	e7be      	b.n	80163b2 <__ieee754_expf+0x72>
 8016434:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8016438:	d20b      	bcs.n	8016452 <__ieee754_expf+0x112>
 801643a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80164d4 <__ieee754_expf+0x194>
 801643e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8016442:	eef4 6ae5 	vcmpe.f32	s13, s11
 8016446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801644a:	dd02      	ble.n	8016452 <__ieee754_expf+0x112>
 801644c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8016450:	4770      	bx	lr
 8016452:	2200      	movs	r2, #0
 8016454:	e7af      	b.n	80163b6 <__ieee754_expf+0x76>
 8016456:	ee36 6a66 	vsub.f32	s12, s12, s13
 801645a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801645e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8016462:	bfb8      	it	lt
 8016464:	3264      	addlt	r2, #100	; 0x64
 8016466:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801646a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801646e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8016472:	ee17 3a90 	vmov	r3, s15
 8016476:	bfab      	itete	ge
 8016478:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801647c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8016480:	ee00 3a10 	vmovge	s0, r3
 8016484:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80164d8 <__ieee754_expf+0x198>
 8016488:	bfbc      	itt	lt
 801648a:	ee00 3a10 	vmovlt	s0, r3
 801648e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8016492:	4770      	bx	lr
 8016494:	00000000 	.word	0x00000000
 8016498:	42b17217 	.word	0x42b17217
 801649c:	42cff1b5 	.word	0x42cff1b5
 80164a0:	3eb17218 	.word	0x3eb17218
 80164a4:	3f851591 	.word	0x3f851591
 80164a8:	08019128 	.word	0x08019128
 80164ac:	08019130 	.word	0x08019130
 80164b0:	3331bb4c 	.word	0x3331bb4c
 80164b4:	b5ddea0e 	.word	0xb5ddea0e
 80164b8:	388ab355 	.word	0x388ab355
 80164bc:	bb360b61 	.word	0xbb360b61
 80164c0:	3e2aaaab 	.word	0x3e2aaaab
 80164c4:	08019120 	.word	0x08019120
 80164c8:	3fb8aa3b 	.word	0x3fb8aa3b
 80164cc:	3f317180 	.word	0x3f317180
 80164d0:	3717f7d1 	.word	0x3717f7d1
 80164d4:	7149f2ca 	.word	0x7149f2ca
 80164d8:	0d800000 	.word	0x0d800000

080164dc <with_errnof>:
 80164dc:	b513      	push	{r0, r1, r4, lr}
 80164de:	4604      	mov	r4, r0
 80164e0:	ed8d 0a01 	vstr	s0, [sp, #4]
 80164e4:	f7fc fda0 	bl	8013028 <__errno>
 80164e8:	ed9d 0a01 	vldr	s0, [sp, #4]
 80164ec:	6004      	str	r4, [r0, #0]
 80164ee:	b002      	add	sp, #8
 80164f0:	bd10      	pop	{r4, pc}

080164f2 <xflowf>:
 80164f2:	b130      	cbz	r0, 8016502 <xflowf+0x10>
 80164f4:	eef1 7a40 	vneg.f32	s15, s0
 80164f8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80164fc:	2022      	movs	r0, #34	; 0x22
 80164fe:	f7ff bfed 	b.w	80164dc <with_errnof>
 8016502:	eef0 7a40 	vmov.f32	s15, s0
 8016506:	e7f7      	b.n	80164f8 <xflowf+0x6>

08016508 <__math_uflowf>:
 8016508:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016510 <__math_uflowf+0x8>
 801650c:	f7ff bff1 	b.w	80164f2 <xflowf>
 8016510:	10000000 	.word	0x10000000

08016514 <__math_oflowf>:
 8016514:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801651c <__math_oflowf+0x8>
 8016518:	f7ff bfeb 	b.w	80164f2 <xflowf>
 801651c:	70000000 	.word	0x70000000

08016520 <__kernel_rem_pio2>:
 8016520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016524:	ed2d 8b02 	vpush	{d8}
 8016528:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801652c:	f112 0f14 	cmn.w	r2, #20
 8016530:	9306      	str	r3, [sp, #24]
 8016532:	9104      	str	r1, [sp, #16]
 8016534:	4bc2      	ldr	r3, [pc, #776]	; (8016840 <__kernel_rem_pio2+0x320>)
 8016536:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8016538:	9009      	str	r0, [sp, #36]	; 0x24
 801653a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801653e:	9300      	str	r3, [sp, #0]
 8016540:	9b06      	ldr	r3, [sp, #24]
 8016542:	f103 33ff 	add.w	r3, r3, #4294967295
 8016546:	bfa8      	it	ge
 8016548:	1ed4      	subge	r4, r2, #3
 801654a:	9305      	str	r3, [sp, #20]
 801654c:	bfb2      	itee	lt
 801654e:	2400      	movlt	r4, #0
 8016550:	2318      	movge	r3, #24
 8016552:	fb94 f4f3 	sdivge	r4, r4, r3
 8016556:	f06f 0317 	mvn.w	r3, #23
 801655a:	fb04 3303 	mla	r3, r4, r3, r3
 801655e:	eb03 0a02 	add.w	sl, r3, r2
 8016562:	9b00      	ldr	r3, [sp, #0]
 8016564:	9a05      	ldr	r2, [sp, #20]
 8016566:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8016830 <__kernel_rem_pio2+0x310>
 801656a:	eb03 0802 	add.w	r8, r3, r2
 801656e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8016570:	1aa7      	subs	r7, r4, r2
 8016572:	ae20      	add	r6, sp, #128	; 0x80
 8016574:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8016578:	2500      	movs	r5, #0
 801657a:	4545      	cmp	r5, r8
 801657c:	dd13      	ble.n	80165a6 <__kernel_rem_pio2+0x86>
 801657e:	9b06      	ldr	r3, [sp, #24]
 8016580:	aa20      	add	r2, sp, #128	; 0x80
 8016582:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8016586:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801658a:	f04f 0800 	mov.w	r8, #0
 801658e:	9b00      	ldr	r3, [sp, #0]
 8016590:	4598      	cmp	r8, r3
 8016592:	dc31      	bgt.n	80165f8 <__kernel_rem_pio2+0xd8>
 8016594:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8016830 <__kernel_rem_pio2+0x310>
 8016598:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801659c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80165a0:	462f      	mov	r7, r5
 80165a2:	2600      	movs	r6, #0
 80165a4:	e01b      	b.n	80165de <__kernel_rem_pio2+0xbe>
 80165a6:	42ef      	cmn	r7, r5
 80165a8:	d407      	bmi.n	80165ba <__kernel_rem_pio2+0x9a>
 80165aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80165ae:	f7e9 ffc9 	bl	8000544 <__aeabi_i2d>
 80165b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80165b6:	3501      	adds	r5, #1
 80165b8:	e7df      	b.n	801657a <__kernel_rem_pio2+0x5a>
 80165ba:	ec51 0b18 	vmov	r0, r1, d8
 80165be:	e7f8      	b.n	80165b2 <__kernel_rem_pio2+0x92>
 80165c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80165c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80165c8:	f7ea f826 	bl	8000618 <__aeabi_dmul>
 80165cc:	4602      	mov	r2, r0
 80165ce:	460b      	mov	r3, r1
 80165d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80165d4:	f7e9 fe6a 	bl	80002ac <__adddf3>
 80165d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80165dc:	3601      	adds	r6, #1
 80165de:	9b05      	ldr	r3, [sp, #20]
 80165e0:	429e      	cmp	r6, r3
 80165e2:	f1a7 0708 	sub.w	r7, r7, #8
 80165e6:	ddeb      	ble.n	80165c0 <__kernel_rem_pio2+0xa0>
 80165e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80165ec:	f108 0801 	add.w	r8, r8, #1
 80165f0:	ecab 7b02 	vstmia	fp!, {d7}
 80165f4:	3508      	adds	r5, #8
 80165f6:	e7ca      	b.n	801658e <__kernel_rem_pio2+0x6e>
 80165f8:	9b00      	ldr	r3, [sp, #0]
 80165fa:	aa0c      	add	r2, sp, #48	; 0x30
 80165fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016600:	930b      	str	r3, [sp, #44]	; 0x2c
 8016602:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8016604:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016608:	9c00      	ldr	r4, [sp, #0]
 801660a:	930a      	str	r3, [sp, #40]	; 0x28
 801660c:	00e3      	lsls	r3, r4, #3
 801660e:	9308      	str	r3, [sp, #32]
 8016610:	ab98      	add	r3, sp, #608	; 0x260
 8016612:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016616:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801661a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801661e:	ab70      	add	r3, sp, #448	; 0x1c0
 8016620:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8016624:	46c3      	mov	fp, r8
 8016626:	46a1      	mov	r9, r4
 8016628:	f1b9 0f00 	cmp.w	r9, #0
 801662c:	f1a5 0508 	sub.w	r5, r5, #8
 8016630:	dc77      	bgt.n	8016722 <__kernel_rem_pio2+0x202>
 8016632:	ec47 6b10 	vmov	d0, r6, r7
 8016636:	4650      	mov	r0, sl
 8016638:	f000 fac2 	bl	8016bc0 <scalbn>
 801663c:	ec57 6b10 	vmov	r6, r7, d0
 8016640:	2200      	movs	r2, #0
 8016642:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8016646:	ee10 0a10 	vmov	r0, s0
 801664a:	4639      	mov	r1, r7
 801664c:	f7e9 ffe4 	bl	8000618 <__aeabi_dmul>
 8016650:	ec41 0b10 	vmov	d0, r0, r1
 8016654:	f7ff fa5c 	bl	8015b10 <floor>
 8016658:	4b7a      	ldr	r3, [pc, #488]	; (8016844 <__kernel_rem_pio2+0x324>)
 801665a:	ec51 0b10 	vmov	r0, r1, d0
 801665e:	2200      	movs	r2, #0
 8016660:	f7e9 ffda 	bl	8000618 <__aeabi_dmul>
 8016664:	4602      	mov	r2, r0
 8016666:	460b      	mov	r3, r1
 8016668:	4630      	mov	r0, r6
 801666a:	4639      	mov	r1, r7
 801666c:	f7e9 fe1c 	bl	80002a8 <__aeabi_dsub>
 8016670:	460f      	mov	r7, r1
 8016672:	4606      	mov	r6, r0
 8016674:	f7ea fa80 	bl	8000b78 <__aeabi_d2iz>
 8016678:	9002      	str	r0, [sp, #8]
 801667a:	f7e9 ff63 	bl	8000544 <__aeabi_i2d>
 801667e:	4602      	mov	r2, r0
 8016680:	460b      	mov	r3, r1
 8016682:	4630      	mov	r0, r6
 8016684:	4639      	mov	r1, r7
 8016686:	f7e9 fe0f 	bl	80002a8 <__aeabi_dsub>
 801668a:	f1ba 0f00 	cmp.w	sl, #0
 801668e:	4606      	mov	r6, r0
 8016690:	460f      	mov	r7, r1
 8016692:	dd6d      	ble.n	8016770 <__kernel_rem_pio2+0x250>
 8016694:	1e61      	subs	r1, r4, #1
 8016696:	ab0c      	add	r3, sp, #48	; 0x30
 8016698:	9d02      	ldr	r5, [sp, #8]
 801669a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801669e:	f1ca 0018 	rsb	r0, sl, #24
 80166a2:	fa43 f200 	asr.w	r2, r3, r0
 80166a6:	4415      	add	r5, r2
 80166a8:	4082      	lsls	r2, r0
 80166aa:	1a9b      	subs	r3, r3, r2
 80166ac:	aa0c      	add	r2, sp, #48	; 0x30
 80166ae:	9502      	str	r5, [sp, #8]
 80166b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80166b4:	f1ca 0217 	rsb	r2, sl, #23
 80166b8:	fa43 fb02 	asr.w	fp, r3, r2
 80166bc:	f1bb 0f00 	cmp.w	fp, #0
 80166c0:	dd65      	ble.n	801678e <__kernel_rem_pio2+0x26e>
 80166c2:	9b02      	ldr	r3, [sp, #8]
 80166c4:	2200      	movs	r2, #0
 80166c6:	3301      	adds	r3, #1
 80166c8:	9302      	str	r3, [sp, #8]
 80166ca:	4615      	mov	r5, r2
 80166cc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80166d0:	4294      	cmp	r4, r2
 80166d2:	f300 809f 	bgt.w	8016814 <__kernel_rem_pio2+0x2f4>
 80166d6:	f1ba 0f00 	cmp.w	sl, #0
 80166da:	dd07      	ble.n	80166ec <__kernel_rem_pio2+0x1cc>
 80166dc:	f1ba 0f01 	cmp.w	sl, #1
 80166e0:	f000 80c1 	beq.w	8016866 <__kernel_rem_pio2+0x346>
 80166e4:	f1ba 0f02 	cmp.w	sl, #2
 80166e8:	f000 80c7 	beq.w	801687a <__kernel_rem_pio2+0x35a>
 80166ec:	f1bb 0f02 	cmp.w	fp, #2
 80166f0:	d14d      	bne.n	801678e <__kernel_rem_pio2+0x26e>
 80166f2:	4632      	mov	r2, r6
 80166f4:	463b      	mov	r3, r7
 80166f6:	4954      	ldr	r1, [pc, #336]	; (8016848 <__kernel_rem_pio2+0x328>)
 80166f8:	2000      	movs	r0, #0
 80166fa:	f7e9 fdd5 	bl	80002a8 <__aeabi_dsub>
 80166fe:	4606      	mov	r6, r0
 8016700:	460f      	mov	r7, r1
 8016702:	2d00      	cmp	r5, #0
 8016704:	d043      	beq.n	801678e <__kernel_rem_pio2+0x26e>
 8016706:	4650      	mov	r0, sl
 8016708:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8016838 <__kernel_rem_pio2+0x318>
 801670c:	f000 fa58 	bl	8016bc0 <scalbn>
 8016710:	4630      	mov	r0, r6
 8016712:	4639      	mov	r1, r7
 8016714:	ec53 2b10 	vmov	r2, r3, d0
 8016718:	f7e9 fdc6 	bl	80002a8 <__aeabi_dsub>
 801671c:	4606      	mov	r6, r0
 801671e:	460f      	mov	r7, r1
 8016720:	e035      	b.n	801678e <__kernel_rem_pio2+0x26e>
 8016722:	4b4a      	ldr	r3, [pc, #296]	; (801684c <__kernel_rem_pio2+0x32c>)
 8016724:	2200      	movs	r2, #0
 8016726:	4630      	mov	r0, r6
 8016728:	4639      	mov	r1, r7
 801672a:	f7e9 ff75 	bl	8000618 <__aeabi_dmul>
 801672e:	f7ea fa23 	bl	8000b78 <__aeabi_d2iz>
 8016732:	f7e9 ff07 	bl	8000544 <__aeabi_i2d>
 8016736:	4602      	mov	r2, r0
 8016738:	460b      	mov	r3, r1
 801673a:	ec43 2b18 	vmov	d8, r2, r3
 801673e:	4b44      	ldr	r3, [pc, #272]	; (8016850 <__kernel_rem_pio2+0x330>)
 8016740:	2200      	movs	r2, #0
 8016742:	f7e9 ff69 	bl	8000618 <__aeabi_dmul>
 8016746:	4602      	mov	r2, r0
 8016748:	460b      	mov	r3, r1
 801674a:	4630      	mov	r0, r6
 801674c:	4639      	mov	r1, r7
 801674e:	f7e9 fdab 	bl	80002a8 <__aeabi_dsub>
 8016752:	f7ea fa11 	bl	8000b78 <__aeabi_d2iz>
 8016756:	e9d5 2300 	ldrd	r2, r3, [r5]
 801675a:	f84b 0b04 	str.w	r0, [fp], #4
 801675e:	ec51 0b18 	vmov	r0, r1, d8
 8016762:	f7e9 fda3 	bl	80002ac <__adddf3>
 8016766:	f109 39ff 	add.w	r9, r9, #4294967295
 801676a:	4606      	mov	r6, r0
 801676c:	460f      	mov	r7, r1
 801676e:	e75b      	b.n	8016628 <__kernel_rem_pio2+0x108>
 8016770:	d106      	bne.n	8016780 <__kernel_rem_pio2+0x260>
 8016772:	1e63      	subs	r3, r4, #1
 8016774:	aa0c      	add	r2, sp, #48	; 0x30
 8016776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801677a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801677e:	e79d      	b.n	80166bc <__kernel_rem_pio2+0x19c>
 8016780:	4b34      	ldr	r3, [pc, #208]	; (8016854 <__kernel_rem_pio2+0x334>)
 8016782:	2200      	movs	r2, #0
 8016784:	f7ea f9ce 	bl	8000b24 <__aeabi_dcmpge>
 8016788:	2800      	cmp	r0, #0
 801678a:	d140      	bne.n	801680e <__kernel_rem_pio2+0x2ee>
 801678c:	4683      	mov	fp, r0
 801678e:	2200      	movs	r2, #0
 8016790:	2300      	movs	r3, #0
 8016792:	4630      	mov	r0, r6
 8016794:	4639      	mov	r1, r7
 8016796:	f7ea f9a7 	bl	8000ae8 <__aeabi_dcmpeq>
 801679a:	2800      	cmp	r0, #0
 801679c:	f000 80c1 	beq.w	8016922 <__kernel_rem_pio2+0x402>
 80167a0:	1e65      	subs	r5, r4, #1
 80167a2:	462b      	mov	r3, r5
 80167a4:	2200      	movs	r2, #0
 80167a6:	9900      	ldr	r1, [sp, #0]
 80167a8:	428b      	cmp	r3, r1
 80167aa:	da6d      	bge.n	8016888 <__kernel_rem_pio2+0x368>
 80167ac:	2a00      	cmp	r2, #0
 80167ae:	f000 808a 	beq.w	80168c6 <__kernel_rem_pio2+0x3a6>
 80167b2:	ab0c      	add	r3, sp, #48	; 0x30
 80167b4:	f1aa 0a18 	sub.w	sl, sl, #24
 80167b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	f000 80ae 	beq.w	801691e <__kernel_rem_pio2+0x3fe>
 80167c2:	4650      	mov	r0, sl
 80167c4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8016838 <__kernel_rem_pio2+0x318>
 80167c8:	f000 f9fa 	bl	8016bc0 <scalbn>
 80167cc:	1c6b      	adds	r3, r5, #1
 80167ce:	00da      	lsls	r2, r3, #3
 80167d0:	9205      	str	r2, [sp, #20]
 80167d2:	ec57 6b10 	vmov	r6, r7, d0
 80167d6:	aa70      	add	r2, sp, #448	; 0x1c0
 80167d8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801684c <__kernel_rem_pio2+0x32c>
 80167dc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80167e0:	462c      	mov	r4, r5
 80167e2:	f04f 0800 	mov.w	r8, #0
 80167e6:	2c00      	cmp	r4, #0
 80167e8:	f280 80d4 	bge.w	8016994 <__kernel_rem_pio2+0x474>
 80167ec:	462c      	mov	r4, r5
 80167ee:	2c00      	cmp	r4, #0
 80167f0:	f2c0 8102 	blt.w	80169f8 <__kernel_rem_pio2+0x4d8>
 80167f4:	4b18      	ldr	r3, [pc, #96]	; (8016858 <__kernel_rem_pio2+0x338>)
 80167f6:	461e      	mov	r6, r3
 80167f8:	ab70      	add	r3, sp, #448	; 0x1c0
 80167fa:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80167fe:	1b2b      	subs	r3, r5, r4
 8016800:	f04f 0900 	mov.w	r9, #0
 8016804:	f04f 0a00 	mov.w	sl, #0
 8016808:	2700      	movs	r7, #0
 801680a:	9306      	str	r3, [sp, #24]
 801680c:	e0e6      	b.n	80169dc <__kernel_rem_pio2+0x4bc>
 801680e:	f04f 0b02 	mov.w	fp, #2
 8016812:	e756      	b.n	80166c2 <__kernel_rem_pio2+0x1a2>
 8016814:	f8d8 3000 	ldr.w	r3, [r8]
 8016818:	bb05      	cbnz	r5, 801685c <__kernel_rem_pio2+0x33c>
 801681a:	b123      	cbz	r3, 8016826 <__kernel_rem_pio2+0x306>
 801681c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8016820:	f8c8 3000 	str.w	r3, [r8]
 8016824:	2301      	movs	r3, #1
 8016826:	3201      	adds	r2, #1
 8016828:	f108 0804 	add.w	r8, r8, #4
 801682c:	461d      	mov	r5, r3
 801682e:	e74f      	b.n	80166d0 <__kernel_rem_pio2+0x1b0>
	...
 801683c:	3ff00000 	.word	0x3ff00000
 8016840:	08019178 	.word	0x08019178
 8016844:	40200000 	.word	0x40200000
 8016848:	3ff00000 	.word	0x3ff00000
 801684c:	3e700000 	.word	0x3e700000
 8016850:	41700000 	.word	0x41700000
 8016854:	3fe00000 	.word	0x3fe00000
 8016858:	08019138 	.word	0x08019138
 801685c:	1acb      	subs	r3, r1, r3
 801685e:	f8c8 3000 	str.w	r3, [r8]
 8016862:	462b      	mov	r3, r5
 8016864:	e7df      	b.n	8016826 <__kernel_rem_pio2+0x306>
 8016866:	1e62      	subs	r2, r4, #1
 8016868:	ab0c      	add	r3, sp, #48	; 0x30
 801686a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801686e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016872:	a90c      	add	r1, sp, #48	; 0x30
 8016874:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016878:	e738      	b.n	80166ec <__kernel_rem_pio2+0x1cc>
 801687a:	1e62      	subs	r2, r4, #1
 801687c:	ab0c      	add	r3, sp, #48	; 0x30
 801687e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016882:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8016886:	e7f4      	b.n	8016872 <__kernel_rem_pio2+0x352>
 8016888:	a90c      	add	r1, sp, #48	; 0x30
 801688a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801688e:	3b01      	subs	r3, #1
 8016890:	430a      	orrs	r2, r1
 8016892:	e788      	b.n	80167a6 <__kernel_rem_pio2+0x286>
 8016894:	3301      	adds	r3, #1
 8016896:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801689a:	2900      	cmp	r1, #0
 801689c:	d0fa      	beq.n	8016894 <__kernel_rem_pio2+0x374>
 801689e:	9a08      	ldr	r2, [sp, #32]
 80168a0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80168a4:	446a      	add	r2, sp
 80168a6:	3a98      	subs	r2, #152	; 0x98
 80168a8:	9208      	str	r2, [sp, #32]
 80168aa:	9a06      	ldr	r2, [sp, #24]
 80168ac:	a920      	add	r1, sp, #128	; 0x80
 80168ae:	18a2      	adds	r2, r4, r2
 80168b0:	18e3      	adds	r3, r4, r3
 80168b2:	f104 0801 	add.w	r8, r4, #1
 80168b6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80168ba:	9302      	str	r3, [sp, #8]
 80168bc:	9b02      	ldr	r3, [sp, #8]
 80168be:	4543      	cmp	r3, r8
 80168c0:	da04      	bge.n	80168cc <__kernel_rem_pio2+0x3ac>
 80168c2:	461c      	mov	r4, r3
 80168c4:	e6a2      	b.n	801660c <__kernel_rem_pio2+0xec>
 80168c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80168c8:	2301      	movs	r3, #1
 80168ca:	e7e4      	b.n	8016896 <__kernel_rem_pio2+0x376>
 80168cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168ce:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80168d2:	f7e9 fe37 	bl	8000544 <__aeabi_i2d>
 80168d6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80168da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168dc:	46ab      	mov	fp, r5
 80168de:	461c      	mov	r4, r3
 80168e0:	f04f 0900 	mov.w	r9, #0
 80168e4:	2600      	movs	r6, #0
 80168e6:	2700      	movs	r7, #0
 80168e8:	9b05      	ldr	r3, [sp, #20]
 80168ea:	4599      	cmp	r9, r3
 80168ec:	dd06      	ble.n	80168fc <__kernel_rem_pio2+0x3dc>
 80168ee:	9b08      	ldr	r3, [sp, #32]
 80168f0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80168f4:	f108 0801 	add.w	r8, r8, #1
 80168f8:	9308      	str	r3, [sp, #32]
 80168fa:	e7df      	b.n	80168bc <__kernel_rem_pio2+0x39c>
 80168fc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8016900:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8016904:	f7e9 fe88 	bl	8000618 <__aeabi_dmul>
 8016908:	4602      	mov	r2, r0
 801690a:	460b      	mov	r3, r1
 801690c:	4630      	mov	r0, r6
 801690e:	4639      	mov	r1, r7
 8016910:	f7e9 fccc 	bl	80002ac <__adddf3>
 8016914:	f109 0901 	add.w	r9, r9, #1
 8016918:	4606      	mov	r6, r0
 801691a:	460f      	mov	r7, r1
 801691c:	e7e4      	b.n	80168e8 <__kernel_rem_pio2+0x3c8>
 801691e:	3d01      	subs	r5, #1
 8016920:	e747      	b.n	80167b2 <__kernel_rem_pio2+0x292>
 8016922:	ec47 6b10 	vmov	d0, r6, r7
 8016926:	f1ca 0000 	rsb	r0, sl, #0
 801692a:	f000 f949 	bl	8016bc0 <scalbn>
 801692e:	ec57 6b10 	vmov	r6, r7, d0
 8016932:	4ba0      	ldr	r3, [pc, #640]	; (8016bb4 <__kernel_rem_pio2+0x694>)
 8016934:	ee10 0a10 	vmov	r0, s0
 8016938:	2200      	movs	r2, #0
 801693a:	4639      	mov	r1, r7
 801693c:	f7ea f8f2 	bl	8000b24 <__aeabi_dcmpge>
 8016940:	b1f8      	cbz	r0, 8016982 <__kernel_rem_pio2+0x462>
 8016942:	4b9d      	ldr	r3, [pc, #628]	; (8016bb8 <__kernel_rem_pio2+0x698>)
 8016944:	2200      	movs	r2, #0
 8016946:	4630      	mov	r0, r6
 8016948:	4639      	mov	r1, r7
 801694a:	f7e9 fe65 	bl	8000618 <__aeabi_dmul>
 801694e:	f7ea f913 	bl	8000b78 <__aeabi_d2iz>
 8016952:	4680      	mov	r8, r0
 8016954:	f7e9 fdf6 	bl	8000544 <__aeabi_i2d>
 8016958:	4b96      	ldr	r3, [pc, #600]	; (8016bb4 <__kernel_rem_pio2+0x694>)
 801695a:	2200      	movs	r2, #0
 801695c:	f7e9 fe5c 	bl	8000618 <__aeabi_dmul>
 8016960:	460b      	mov	r3, r1
 8016962:	4602      	mov	r2, r0
 8016964:	4639      	mov	r1, r7
 8016966:	4630      	mov	r0, r6
 8016968:	f7e9 fc9e 	bl	80002a8 <__aeabi_dsub>
 801696c:	f7ea f904 	bl	8000b78 <__aeabi_d2iz>
 8016970:	1c65      	adds	r5, r4, #1
 8016972:	ab0c      	add	r3, sp, #48	; 0x30
 8016974:	f10a 0a18 	add.w	sl, sl, #24
 8016978:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801697c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8016980:	e71f      	b.n	80167c2 <__kernel_rem_pio2+0x2a2>
 8016982:	4630      	mov	r0, r6
 8016984:	4639      	mov	r1, r7
 8016986:	f7ea f8f7 	bl	8000b78 <__aeabi_d2iz>
 801698a:	ab0c      	add	r3, sp, #48	; 0x30
 801698c:	4625      	mov	r5, r4
 801698e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8016992:	e716      	b.n	80167c2 <__kernel_rem_pio2+0x2a2>
 8016994:	ab0c      	add	r3, sp, #48	; 0x30
 8016996:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801699a:	f7e9 fdd3 	bl	8000544 <__aeabi_i2d>
 801699e:	4632      	mov	r2, r6
 80169a0:	463b      	mov	r3, r7
 80169a2:	f7e9 fe39 	bl	8000618 <__aeabi_dmul>
 80169a6:	4642      	mov	r2, r8
 80169a8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80169ac:	464b      	mov	r3, r9
 80169ae:	4630      	mov	r0, r6
 80169b0:	4639      	mov	r1, r7
 80169b2:	f7e9 fe31 	bl	8000618 <__aeabi_dmul>
 80169b6:	3c01      	subs	r4, #1
 80169b8:	4606      	mov	r6, r0
 80169ba:	460f      	mov	r7, r1
 80169bc:	e713      	b.n	80167e6 <__kernel_rem_pio2+0x2c6>
 80169be:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80169c2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80169c6:	f7e9 fe27 	bl	8000618 <__aeabi_dmul>
 80169ca:	4602      	mov	r2, r0
 80169cc:	460b      	mov	r3, r1
 80169ce:	4648      	mov	r0, r9
 80169d0:	4651      	mov	r1, sl
 80169d2:	f7e9 fc6b 	bl	80002ac <__adddf3>
 80169d6:	3701      	adds	r7, #1
 80169d8:	4681      	mov	r9, r0
 80169da:	468a      	mov	sl, r1
 80169dc:	9b00      	ldr	r3, [sp, #0]
 80169de:	429f      	cmp	r7, r3
 80169e0:	dc02      	bgt.n	80169e8 <__kernel_rem_pio2+0x4c8>
 80169e2:	9b06      	ldr	r3, [sp, #24]
 80169e4:	429f      	cmp	r7, r3
 80169e6:	ddea      	ble.n	80169be <__kernel_rem_pio2+0x49e>
 80169e8:	9a06      	ldr	r2, [sp, #24]
 80169ea:	ab48      	add	r3, sp, #288	; 0x120
 80169ec:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80169f0:	e9c6 9a00 	strd	r9, sl, [r6]
 80169f4:	3c01      	subs	r4, #1
 80169f6:	e6fa      	b.n	80167ee <__kernel_rem_pio2+0x2ce>
 80169f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80169fa:	2b02      	cmp	r3, #2
 80169fc:	dc0b      	bgt.n	8016a16 <__kernel_rem_pio2+0x4f6>
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	dc39      	bgt.n	8016a76 <__kernel_rem_pio2+0x556>
 8016a02:	d05d      	beq.n	8016ac0 <__kernel_rem_pio2+0x5a0>
 8016a04:	9b02      	ldr	r3, [sp, #8]
 8016a06:	f003 0007 	and.w	r0, r3, #7
 8016a0a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8016a0e:	ecbd 8b02 	vpop	{d8}
 8016a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a16:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8016a18:	2b03      	cmp	r3, #3
 8016a1a:	d1f3      	bne.n	8016a04 <__kernel_rem_pio2+0x4e4>
 8016a1c:	9b05      	ldr	r3, [sp, #20]
 8016a1e:	9500      	str	r5, [sp, #0]
 8016a20:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8016a24:	eb0d 0403 	add.w	r4, sp, r3
 8016a28:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8016a2c:	46a2      	mov	sl, r4
 8016a2e:	9b00      	ldr	r3, [sp, #0]
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	f1aa 0a08 	sub.w	sl, sl, #8
 8016a36:	dc69      	bgt.n	8016b0c <__kernel_rem_pio2+0x5ec>
 8016a38:	46aa      	mov	sl, r5
 8016a3a:	f1ba 0f01 	cmp.w	sl, #1
 8016a3e:	f1a4 0408 	sub.w	r4, r4, #8
 8016a42:	f300 8083 	bgt.w	8016b4c <__kernel_rem_pio2+0x62c>
 8016a46:	9c05      	ldr	r4, [sp, #20]
 8016a48:	ab48      	add	r3, sp, #288	; 0x120
 8016a4a:	441c      	add	r4, r3
 8016a4c:	2000      	movs	r0, #0
 8016a4e:	2100      	movs	r1, #0
 8016a50:	2d01      	cmp	r5, #1
 8016a52:	f300 809a 	bgt.w	8016b8a <__kernel_rem_pio2+0x66a>
 8016a56:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8016a5a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8016a5e:	f1bb 0f00 	cmp.w	fp, #0
 8016a62:	f040 8098 	bne.w	8016b96 <__kernel_rem_pio2+0x676>
 8016a66:	9b04      	ldr	r3, [sp, #16]
 8016a68:	e9c3 7800 	strd	r7, r8, [r3]
 8016a6c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8016a70:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8016a74:	e7c6      	b.n	8016a04 <__kernel_rem_pio2+0x4e4>
 8016a76:	9e05      	ldr	r6, [sp, #20]
 8016a78:	ab48      	add	r3, sp, #288	; 0x120
 8016a7a:	441e      	add	r6, r3
 8016a7c:	462c      	mov	r4, r5
 8016a7e:	2000      	movs	r0, #0
 8016a80:	2100      	movs	r1, #0
 8016a82:	2c00      	cmp	r4, #0
 8016a84:	da33      	bge.n	8016aee <__kernel_rem_pio2+0x5ce>
 8016a86:	f1bb 0f00 	cmp.w	fp, #0
 8016a8a:	d036      	beq.n	8016afa <__kernel_rem_pio2+0x5da>
 8016a8c:	4602      	mov	r2, r0
 8016a8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016a92:	9c04      	ldr	r4, [sp, #16]
 8016a94:	e9c4 2300 	strd	r2, r3, [r4]
 8016a98:	4602      	mov	r2, r0
 8016a9a:	460b      	mov	r3, r1
 8016a9c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8016aa0:	f7e9 fc02 	bl	80002a8 <__aeabi_dsub>
 8016aa4:	ae4a      	add	r6, sp, #296	; 0x128
 8016aa6:	2401      	movs	r4, #1
 8016aa8:	42a5      	cmp	r5, r4
 8016aaa:	da29      	bge.n	8016b00 <__kernel_rem_pio2+0x5e0>
 8016aac:	f1bb 0f00 	cmp.w	fp, #0
 8016ab0:	d002      	beq.n	8016ab8 <__kernel_rem_pio2+0x598>
 8016ab2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016ab6:	4619      	mov	r1, r3
 8016ab8:	9b04      	ldr	r3, [sp, #16]
 8016aba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8016abe:	e7a1      	b.n	8016a04 <__kernel_rem_pio2+0x4e4>
 8016ac0:	9c05      	ldr	r4, [sp, #20]
 8016ac2:	ab48      	add	r3, sp, #288	; 0x120
 8016ac4:	441c      	add	r4, r3
 8016ac6:	2000      	movs	r0, #0
 8016ac8:	2100      	movs	r1, #0
 8016aca:	2d00      	cmp	r5, #0
 8016acc:	da09      	bge.n	8016ae2 <__kernel_rem_pio2+0x5c2>
 8016ace:	f1bb 0f00 	cmp.w	fp, #0
 8016ad2:	d002      	beq.n	8016ada <__kernel_rem_pio2+0x5ba>
 8016ad4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016ad8:	4619      	mov	r1, r3
 8016ada:	9b04      	ldr	r3, [sp, #16]
 8016adc:	e9c3 0100 	strd	r0, r1, [r3]
 8016ae0:	e790      	b.n	8016a04 <__kernel_rem_pio2+0x4e4>
 8016ae2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8016ae6:	f7e9 fbe1 	bl	80002ac <__adddf3>
 8016aea:	3d01      	subs	r5, #1
 8016aec:	e7ed      	b.n	8016aca <__kernel_rem_pio2+0x5aa>
 8016aee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8016af2:	f7e9 fbdb 	bl	80002ac <__adddf3>
 8016af6:	3c01      	subs	r4, #1
 8016af8:	e7c3      	b.n	8016a82 <__kernel_rem_pio2+0x562>
 8016afa:	4602      	mov	r2, r0
 8016afc:	460b      	mov	r3, r1
 8016afe:	e7c8      	b.n	8016a92 <__kernel_rem_pio2+0x572>
 8016b00:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8016b04:	f7e9 fbd2 	bl	80002ac <__adddf3>
 8016b08:	3401      	adds	r4, #1
 8016b0a:	e7cd      	b.n	8016aa8 <__kernel_rem_pio2+0x588>
 8016b0c:	e9da 8900 	ldrd	r8, r9, [sl]
 8016b10:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8016b14:	9b00      	ldr	r3, [sp, #0]
 8016b16:	3b01      	subs	r3, #1
 8016b18:	9300      	str	r3, [sp, #0]
 8016b1a:	4632      	mov	r2, r6
 8016b1c:	463b      	mov	r3, r7
 8016b1e:	4640      	mov	r0, r8
 8016b20:	4649      	mov	r1, r9
 8016b22:	f7e9 fbc3 	bl	80002ac <__adddf3>
 8016b26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016b2a:	4602      	mov	r2, r0
 8016b2c:	460b      	mov	r3, r1
 8016b2e:	4640      	mov	r0, r8
 8016b30:	4649      	mov	r1, r9
 8016b32:	f7e9 fbb9 	bl	80002a8 <__aeabi_dsub>
 8016b36:	4632      	mov	r2, r6
 8016b38:	463b      	mov	r3, r7
 8016b3a:	f7e9 fbb7 	bl	80002ac <__adddf3>
 8016b3e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8016b42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016b46:	ed8a 7b00 	vstr	d7, [sl]
 8016b4a:	e770      	b.n	8016a2e <__kernel_rem_pio2+0x50e>
 8016b4c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8016b50:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8016b54:	4640      	mov	r0, r8
 8016b56:	4632      	mov	r2, r6
 8016b58:	463b      	mov	r3, r7
 8016b5a:	4649      	mov	r1, r9
 8016b5c:	f7e9 fba6 	bl	80002ac <__adddf3>
 8016b60:	e9cd 0100 	strd	r0, r1, [sp]
 8016b64:	4602      	mov	r2, r0
 8016b66:	460b      	mov	r3, r1
 8016b68:	4640      	mov	r0, r8
 8016b6a:	4649      	mov	r1, r9
 8016b6c:	f7e9 fb9c 	bl	80002a8 <__aeabi_dsub>
 8016b70:	4632      	mov	r2, r6
 8016b72:	463b      	mov	r3, r7
 8016b74:	f7e9 fb9a 	bl	80002ac <__adddf3>
 8016b78:	ed9d 7b00 	vldr	d7, [sp]
 8016b7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016b80:	ed84 7b00 	vstr	d7, [r4]
 8016b84:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016b88:	e757      	b.n	8016a3a <__kernel_rem_pio2+0x51a>
 8016b8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8016b8e:	f7e9 fb8d 	bl	80002ac <__adddf3>
 8016b92:	3d01      	subs	r5, #1
 8016b94:	e75c      	b.n	8016a50 <__kernel_rem_pio2+0x530>
 8016b96:	9b04      	ldr	r3, [sp, #16]
 8016b98:	9a04      	ldr	r2, [sp, #16]
 8016b9a:	601f      	str	r7, [r3, #0]
 8016b9c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8016ba0:	605c      	str	r4, [r3, #4]
 8016ba2:	609d      	str	r5, [r3, #8]
 8016ba4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016ba8:	60d3      	str	r3, [r2, #12]
 8016baa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016bae:	6110      	str	r0, [r2, #16]
 8016bb0:	6153      	str	r3, [r2, #20]
 8016bb2:	e727      	b.n	8016a04 <__kernel_rem_pio2+0x4e4>
 8016bb4:	41700000 	.word	0x41700000
 8016bb8:	3e700000 	.word	0x3e700000
 8016bbc:	00000000 	.word	0x00000000

08016bc0 <scalbn>:
 8016bc0:	b570      	push	{r4, r5, r6, lr}
 8016bc2:	ec55 4b10 	vmov	r4, r5, d0
 8016bc6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8016bca:	4606      	mov	r6, r0
 8016bcc:	462b      	mov	r3, r5
 8016bce:	b999      	cbnz	r1, 8016bf8 <scalbn+0x38>
 8016bd0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016bd4:	4323      	orrs	r3, r4
 8016bd6:	d03f      	beq.n	8016c58 <scalbn+0x98>
 8016bd8:	4b35      	ldr	r3, [pc, #212]	; (8016cb0 <scalbn+0xf0>)
 8016bda:	4629      	mov	r1, r5
 8016bdc:	ee10 0a10 	vmov	r0, s0
 8016be0:	2200      	movs	r2, #0
 8016be2:	f7e9 fd19 	bl	8000618 <__aeabi_dmul>
 8016be6:	4b33      	ldr	r3, [pc, #204]	; (8016cb4 <scalbn+0xf4>)
 8016be8:	429e      	cmp	r6, r3
 8016bea:	4604      	mov	r4, r0
 8016bec:	460d      	mov	r5, r1
 8016bee:	da10      	bge.n	8016c12 <scalbn+0x52>
 8016bf0:	a327      	add	r3, pc, #156	; (adr r3, 8016c90 <scalbn+0xd0>)
 8016bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bf6:	e01f      	b.n	8016c38 <scalbn+0x78>
 8016bf8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8016bfc:	4291      	cmp	r1, r2
 8016bfe:	d10c      	bne.n	8016c1a <scalbn+0x5a>
 8016c00:	ee10 2a10 	vmov	r2, s0
 8016c04:	4620      	mov	r0, r4
 8016c06:	4629      	mov	r1, r5
 8016c08:	f7e9 fb50 	bl	80002ac <__adddf3>
 8016c0c:	4604      	mov	r4, r0
 8016c0e:	460d      	mov	r5, r1
 8016c10:	e022      	b.n	8016c58 <scalbn+0x98>
 8016c12:	460b      	mov	r3, r1
 8016c14:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016c18:	3936      	subs	r1, #54	; 0x36
 8016c1a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8016c1e:	4296      	cmp	r6, r2
 8016c20:	dd0d      	ble.n	8016c3e <scalbn+0x7e>
 8016c22:	2d00      	cmp	r5, #0
 8016c24:	a11c      	add	r1, pc, #112	; (adr r1, 8016c98 <scalbn+0xd8>)
 8016c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c2a:	da02      	bge.n	8016c32 <scalbn+0x72>
 8016c2c:	a11c      	add	r1, pc, #112	; (adr r1, 8016ca0 <scalbn+0xe0>)
 8016c2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c32:	a319      	add	r3, pc, #100	; (adr r3, 8016c98 <scalbn+0xd8>)
 8016c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c38:	f7e9 fcee 	bl	8000618 <__aeabi_dmul>
 8016c3c:	e7e6      	b.n	8016c0c <scalbn+0x4c>
 8016c3e:	1872      	adds	r2, r6, r1
 8016c40:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016c44:	428a      	cmp	r2, r1
 8016c46:	dcec      	bgt.n	8016c22 <scalbn+0x62>
 8016c48:	2a00      	cmp	r2, #0
 8016c4a:	dd08      	ble.n	8016c5e <scalbn+0x9e>
 8016c4c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016c50:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016c54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016c58:	ec45 4b10 	vmov	d0, r4, r5
 8016c5c:	bd70      	pop	{r4, r5, r6, pc}
 8016c5e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016c62:	da08      	bge.n	8016c76 <scalbn+0xb6>
 8016c64:	2d00      	cmp	r5, #0
 8016c66:	a10a      	add	r1, pc, #40	; (adr r1, 8016c90 <scalbn+0xd0>)
 8016c68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c6c:	dac0      	bge.n	8016bf0 <scalbn+0x30>
 8016c6e:	a10e      	add	r1, pc, #56	; (adr r1, 8016ca8 <scalbn+0xe8>)
 8016c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c74:	e7bc      	b.n	8016bf0 <scalbn+0x30>
 8016c76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016c7a:	3236      	adds	r2, #54	; 0x36
 8016c7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016c80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8016c84:	4620      	mov	r0, r4
 8016c86:	4b0c      	ldr	r3, [pc, #48]	; (8016cb8 <scalbn+0xf8>)
 8016c88:	2200      	movs	r2, #0
 8016c8a:	e7d5      	b.n	8016c38 <scalbn+0x78>
 8016c8c:	f3af 8000 	nop.w
 8016c90:	c2f8f359 	.word	0xc2f8f359
 8016c94:	01a56e1f 	.word	0x01a56e1f
 8016c98:	8800759c 	.word	0x8800759c
 8016c9c:	7e37e43c 	.word	0x7e37e43c
 8016ca0:	8800759c 	.word	0x8800759c
 8016ca4:	fe37e43c 	.word	0xfe37e43c
 8016ca8:	c2f8f359 	.word	0xc2f8f359
 8016cac:	81a56e1f 	.word	0x81a56e1f
 8016cb0:	43500000 	.word	0x43500000
 8016cb4:	ffff3cb0 	.word	0xffff3cb0
 8016cb8:	3c900000 	.word	0x3c900000

08016cbc <_init>:
 8016cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cbe:	bf00      	nop
 8016cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cc2:	bc08      	pop	{r3}
 8016cc4:	469e      	mov	lr, r3
 8016cc6:	4770      	bx	lr

08016cc8 <_fini>:
 8016cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cca:	bf00      	nop
 8016ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cce:	bc08      	pop	{r3}
 8016cd0:	469e      	mov	lr, r3
 8016cd2:	4770      	bx	lr
