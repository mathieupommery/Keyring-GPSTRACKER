
projet vf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cbc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002578  0801cd58  0801cd58  0002cd58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f2d0  0801f2d0  00030320  2**0
                  CONTENTS
  4 .ARM          00000008  0801f2d0  0801f2d0  0002f2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f2d8  0801f2d8  00030320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f2d8  0801f2d8  0002f2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f2dc  0801f2dc  0002f2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000320  20000000  0801f2e0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002204  20000320  0801f600  00030320  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002524  0801f600  00032524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030320  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030718  00000000  00000000  00030393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000693c  00000000  00000000  00060aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000026a8  00000000  00000000  000673e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001da6  00000000  00000000  00069a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002abca  00000000  00000000  0006b836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032fad  00000000  00000000  00096400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea37b  00000000  00000000  000c93ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000bfd0  00000000  00000000  001b3728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001bf6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000320 	.word	0x20000320
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801cd40 	.word	0x0801cd40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000324 	.word	0x20000324
 80001cc:	0801cd40 	.word	0x0801cd40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <PADS_ReadReg>:
 */
static inline int8_t PADS_ReadReg(WE_sensorInterface_t* sensorInterface,
                                  uint8_t regAdr,
                                  uint16_t numBytesToRead,
                                  uint8_t *data)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	72fb      	strb	r3, [r7, #11]
 8000ffe:	4613      	mov	r3, r2
 8001000:	813b      	strh	r3, [r7, #8]
  return WE_ReadReg(sensorInterface, regAdr, numBytesToRead, data);
 8001002:	893a      	ldrh	r2, [r7, #8]
 8001004:	7af9      	ldrb	r1, [r7, #11]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f001 fb33 	bl	8002674 <WE_ReadReg>
 800100e:	4603      	mov	r3, r0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <PADS_WriteReg>:
 */
static inline int8_t PADS_WriteReg(WE_sensorInterface_t* sensorInterface,
                                   uint8_t regAdr,
                                   uint16_t numBytesToWrite,
                                   uint8_t *data)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	72fb      	strb	r3, [r7, #11]
 8001026:	4613      	mov	r3, r2
 8001028:	813b      	strh	r3, [r7, #8]
  return WE_WriteReg(sensorInterface, regAdr, numBytesToWrite, data);
 800102a:	893a      	ldrh	r2, [r7, #8]
 800102c:	7af9      	ldrb	r1, [r7, #11]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f001 fc2b 	bl	800288c <WE_WriteReg>
 8001036:	4603      	mov	r3, r0
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <PADS_getDefaultInterface>:
 * @brief Returns the default sensor interface configuration.
 * @param[out] sensorInterface Sensor interface configuration (output parameter)
 * @return Error code
 */
int8_t PADS_getDefaultInterface(WE_sensorInterface_t* sensorInterface)
{
 8001040:	b4b0      	push	{r4, r5, r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  *sensorInterface = padsDefaultSensorInterface;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a07      	ldr	r2, [pc, #28]	; (8001068 <PADS_getDefaultInterface+0x28>)
 800104c:	461c      	mov	r4, r3
 800104e:	4615      	mov	r5, r2
 8001050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001054:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001058:	e884 0003 	stmia.w	r4, {r0, r1}
  return WE_SUCCESS;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bcb0      	pop	{r4, r5, r7}
 8001066:	4770      	bx	lr
 8001068:	20000000 	.word	0x20000000

0800106c <PADS_getDeviceID>:
 * @param[in] sensorInterface Pointer to sensor interface
 * @param[out] deviceID The returned device ID.
 * @retval Error code
 */
int8_t PADS_getDeviceID(WE_sensorInterface_t* sensorInterface, uint8_t *deviceID)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  return PADS_ReadReg(sensorInterface, PADS_DEVICE_ID_REG, 1, deviceID);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2201      	movs	r2, #1
 800107a:	210f      	movs	r1, #15
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffb7 	bl	8000ff0 <PADS_ReadReg>
 8001082:	4603      	mov	r3, r0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <PADS_softReset>:
 * @param[in] sensorInterface Pointer to sensor interface
 * @param[in] swReset Software reset state
 * @retval Error code
 */
int8_t PADS_softReset(WE_sensorInterface_t* sensorInterface, PADS_state_t swReset)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	70fb      	strb	r3, [r7, #3]
  PADS_ctrl2_t ctrl2;

  if (WE_FAIL == PADS_ReadReg(sensorInterface, PADS_CTRL_2_REG, 1, (uint8_t *) &ctrl2))
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2201      	movs	r2, #1
 800109e:	2111      	movs	r1, #17
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ffa5 	bl	8000ff0 <PADS_ReadReg>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d102      	bne.n	80010b4 <PADS_softReset+0x28>
  {
    return WE_FAIL;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	e00f      	b.n	80010d4 <PADS_softReset+0x48>
  }

  ctrl2.softwareReset = swReset;
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	7b3b      	ldrb	r3, [r7, #12]
 80010be:	f362 0382 	bfi	r3, r2, #2, #1
 80010c2:	733b      	strb	r3, [r7, #12]

  return PADS_WriteReg(sensorInterface, PADS_CTRL_2_REG, 1, (uint8_t *) &ctrl2);
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2201      	movs	r2, #1
 80010ca:	2111      	movs	r1, #17
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ffa3 	bl	8001018 <PADS_WriteReg>
 80010d2:	4603      	mov	r3, r0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <PADS_getSoftResetState>:
 * @param[in] sensorInterface Pointer to sensor interface
 * @param[out] swReset The returned software reset state.
 * @retval Error code
 */
int8_t PADS_getSoftResetState(WE_sensorInterface_t* sensorInterface, PADS_state_t *swReset)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  PADS_ctrl2_t ctrl2;

  if (WE_FAIL == PADS_ReadReg(sensorInterface, PADS_CTRL_2_REG, 1, (uint8_t *) &ctrl2))
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	2201      	movs	r2, #1
 80010ec:	2111      	movs	r1, #17
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ff7e 	bl	8000ff0 <PADS_ReadReg>
 80010f4:	4603      	mov	r3, r0
 80010f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fa:	d102      	bne.n	8001102 <PADS_getSoftResetState+0x26>
  {
    return WE_FAIL;
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	e007      	b.n	8001112 <PADS_getSoftResetState+0x36>
  }
  *swReset = (PADS_state_t) ctrl2.softwareReset;
 8001102:	7b3b      	ldrb	r3, [r7, #12]
 8001104:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	461a      	mov	r2, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	701a      	strb	r2, [r3, #0]

  return WE_SUCCESS;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <PADS_getRawPressure>:
 * @param[in] sensorInterface Pointer to sensor interface
 * @param[out] rawPres The returned raw pressure
 * @retval Error code
 */
int8_t PADS_getRawPressure(WE_sensorInterface_t* sensorInterface, int32_t *rawPres)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint8_t tmp[3] = {0};
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <PADS_getRawPressure+0x70>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	81bb      	strh	r3, [r7, #12]
 800112c:	2300      	movs	r3, #0
 800112e:	73bb      	strb	r3, [r7, #14]

  if (WE_FAIL == PADS_ReadReg(sensorInterface, PADS_DATA_P_XL_REG, 3, tmp))
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2203      	movs	r2, #3
 8001136:	2128      	movs	r1, #40	; 0x28
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff59 	bl	8000ff0 <PADS_ReadReg>
 800113e:	4603      	mov	r3, r0
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d102      	bne.n	800114c <PADS_getRawPressure+0x30>
  {
    return WE_FAIL;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	e01b      	b.n	8001184 <PADS_getRawPressure+0x68>
  }

  *rawPres = (int32_t) (tmp[2] << 24);
 800114c:	7bbb      	ldrb	r3, [r7, #14]
 800114e:	061a      	lsls	r2, r3, #24
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	601a      	str	r2, [r3, #0]
  *rawPres |= (int32_t) (tmp[1] << 16);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	7b7b      	ldrb	r3, [r7, #13]
 800115a:	041b      	lsls	r3, r3, #16
 800115c:	431a      	orrs	r2, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	601a      	str	r2, [r3, #0]
  *rawPres |= (int32_t) (tmp[0] << 8);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	7b3b      	ldrb	r3, [r7, #12]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	431a      	orrs	r2, r3
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	601a      	str	r2, [r3, #0]
  *rawPres /= 256;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	da00      	bge.n	800117a <PADS_getRawPressure+0x5e>
 8001178:	33ff      	adds	r3, #255	; 0xff
 800117a:	121b      	asrs	r3, r3, #8
 800117c:	461a      	mov	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	601a      	str	r2, [r3, #0]

  return WE_SUCCESS;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	0801cd58 	.word	0x0801cd58

08001190 <PADS_getRawTemperature>:
 * @param[in] sensorInterface Pointer to sensor interface
 * @param[out] rawTemp The returned raw temperature
 * @retval Error code
 */
int8_t PADS_getRawTemperature(WE_sensorInterface_t* sensorInterface, int16_t *rawTemp)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint8_t tmp[2] = {0};
 800119a:	2300      	movs	r3, #0
 800119c:	81bb      	strh	r3, [r7, #12]

  if (WE_FAIL == PADS_ReadReg(sensorInterface, PADS_DATA_T_L_REG, 2, tmp))
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	2202      	movs	r2, #2
 80011a4:	212b      	movs	r1, #43	; 0x2b
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ff22 	bl	8000ff0 <PADS_ReadReg>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b2:	d102      	bne.n	80011ba <PADS_getRawTemperature+0x2a>
  {
    return WE_FAIL;
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	e00e      	b.n	80011d8 <PADS_getRawTemperature+0x48>
  }

  *rawTemp = (int16_t) (tmp[1] << 8);
 80011ba:	7b7b      	ldrb	r3, [r7, #13]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21a      	sxth	r2, r3
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	801a      	strh	r2, [r3, #0]
  *rawTemp |= (int16_t) tmp[0];
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011ca:	7b3b      	ldrb	r3, [r7, #12]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	801a      	strh	r2, [r3, #0]

  return WE_SUCCESS;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <PADS_getPressure_int>:
 * @param[in] sensorInterface Pointer to sensor interface
 * @param[out] pressPa The returned pressure measurement
 * @retval Error code
 */
int8_t PADS_getPressure_int(WE_sensorInterface_t* sensorInterface, int32_t *pressPa)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  int32_t rawPressure = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  if (PADS_getRawPressure(sensorInterface, &rawPressure) == WE_SUCCESS)
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4619      	mov	r1, r3
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff91 	bl	800111c <PADS_getRawPressure>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d108      	bne.n	8001212 <PADS_getPressure_int+0x32>
  {
    *pressPa = PADS_convertPressure_int(rawPressure);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f819 	bl	800123a <PADS_convertPressure_int>
 8001208:	4602      	mov	r2, r0
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    return WE_FAIL;
  }
  return WE_SUCCESS;
 800120e:	2300      	movs	r3, #0
 8001210:	e001      	b.n	8001216 <PADS_getPressure_int+0x36>
    return WE_FAIL;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <PADS_getTemperature_int>:
 * @param[in] sensorInterface Pointer to sensor interface
 * @param[out] temperature The returned temperature measurement
 * @retval Error code
 */
int8_t PADS_getTemperature_int(WE_sensorInterface_t* sensorInterface, int16_t *temperature)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
  return PADS_getRawTemperature(sensorInterface, temperature);
 8001228:	6839      	ldr	r1, [r7, #0]
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffb0 	bl	8001190 <PADS_getRawTemperature>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <PADS_convertPressure_int>:
 * In that case, the function PADS_convertDifferentialPressure_int() should be used.
 *
 * @retval Pressure in [Pa]
 */
int32_t PADS_convertPressure_int(int32_t rawPres)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  return (rawPres * 100) / 4096;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2264      	movs	r2, #100	; 0x64
 8001246:	fb02 f303 	mul.w	r3, r2, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	da01      	bge.n	8001252 <PADS_convertPressure_int+0x18>
 800124e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001252:	131b      	asrs	r3, r3, #12
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <PADS_init>:
WE_sensorInterface_t pads;

/* Sensor initialization function */

void PADS_init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
  /* Initialize sensor interface (i2c with PADS address, burst mode deactivated) */
  PADS_getDefaultInterface(&pads);
 8001266:	4818      	ldr	r0, [pc, #96]	; (80012c8 <PADS_init+0x68>)
 8001268:	f7ff feea 	bl	8001040 <PADS_getDefaultInterface>
  pads.interfaceType = WE_i2c;
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <PADS_init+0x68>)
 800126e:	2200      	movs	r2, #0
 8001270:	705a      	strb	r2, [r3, #1]
  pads.handle = &hi2c1;
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <PADS_init+0x68>)
 8001274:	4a15      	ldr	r2, [pc, #84]	; (80012cc <PADS_init+0x6c>)
 8001276:	615a      	str	r2, [r3, #20]

  /* Wait for boot */
  HAL_Delay(50);
 8001278:	2032      	movs	r0, #50	; 0x32
 800127a:	f005 f8a9 	bl	80063d0 <HAL_Delay>
  while (WE_SUCCESS != WE_isSensorInterfaceReady(&pads))
 800127e:	bf00      	nop
 8001280:	4811      	ldr	r0, [pc, #68]	; (80012c8 <PADS_init+0x68>)
 8001282:	f001 fbcd 	bl	8002a20 <WE_isSensorInterfaceReady>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f9      	bne.n	8001280 <PADS_init+0x20>
  {
  }
  HAL_Delay(5);
 800128c:	2005      	movs	r0, #5
 800128e:	f005 f89f 	bl	80063d0 <HAL_Delay>

  uint8_t deviceIdValue = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	71fb      	strb	r3, [r7, #7]
  if (WE_SUCCESS == PADS_getDeviceID(&pads, &deviceIdValue))
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	4619      	mov	r1, r3
 800129a:	480b      	ldr	r0, [pc, #44]	; (80012c8 <PADS_init+0x68>)
 800129c:	f7ff fee6 	bl	800106c <PADS_getDeviceID>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
  }
  else
  {
  }

  PADS_softReset(&pads, PADS_enable);
 80012a4:	2101      	movs	r1, #1
 80012a6:	4808      	ldr	r0, [pc, #32]	; (80012c8 <PADS_init+0x68>)
 80012a8:	f7ff fef0 	bl	800108c <PADS_softReset>
  PADS_state_t swReset;
  do
  {
    PADS_getSoftResetState(&pads, &swReset);
 80012ac:	1dbb      	adds	r3, r7, #6
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <PADS_init+0x68>)
 80012b2:	f7ff ff13 	bl	80010dc <PADS_getSoftResetState>
  } while (swReset);
 80012b6:	79bb      	ldrb	r3, [r7, #6]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f7      	bne.n	80012ac <PADS_init+0x4c>

}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000033c 	.word	0x2000033c
 80012cc:	20000400 	.word	0x20000400

080012d0 <altitudecalc>:


float altitudecalc(int pression){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

	return (float)(288.15/0.0065)*(1-pow((pression/101325),0.1903));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <altitudecalc+0x78>)
 80012dc:	fb82 1203 	smull	r1, r2, r2, r3
 80012e0:	1392      	asrs	r2, r2, #14
 80012e2:	17db      	asrs	r3, r3, #31
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f91c 	bl	8000524 <__aeabi_i2d>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8001338 <altitudecalc+0x68>
 80012f4:	ec43 2b10 	vmov	d0, r2, r3
 80012f8:	f019 f9b8 	bl	801a66c <pow>
 80012fc:	ec53 2b10 	vmov	r2, r3, d0
 8001300:	f04f 0000 	mov.w	r0, #0
 8001304:	4911      	ldr	r1, [pc, #68]	; (800134c <altitudecalc+0x7c>)
 8001306:	f7fe ffbf 	bl	8000288 <__aeabi_dsub>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	a30b      	add	r3, pc, #44	; (adr r3, 8001340 <altitudecalc+0x70>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff f96e 	bl	80005f8 <__aeabi_dmul>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fc60 	bl	8000be8 <__aeabi_d2f>
 8001328:	4603      	mov	r3, r0
 800132a:	ee07 3a90 	vmov	s15, r3



}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	1a36e2eb 	.word	0x1a36e2eb
 800133c:	3fc85bc0 	.word	0x3fc85bc0
 8001340:	a0000000 	.word	0xa0000000
 8001344:	40e5a558 	.word	0x40e5a558
 8001348:	29650205 	.word	0x29650205
 800134c:	3ff00000 	.word	0x3ff00000

08001350 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001356:	463b      	mov	r3, r7
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001366:	4b38      	ldr	r3, [pc, #224]	; (8001448 <MX_ADC1_Init+0xf8>)
 8001368:	4a38      	ldr	r2, [pc, #224]	; (800144c <MX_ADC1_Init+0xfc>)
 800136a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800136c:	4b36      	ldr	r3, [pc, #216]	; (8001448 <MX_ADC1_Init+0xf8>)
 800136e:	2200      	movs	r2, #0
 8001370:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001372:	4b35      	ldr	r3, [pc, #212]	; (8001448 <MX_ADC1_Init+0xf8>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001378:	4b33      	ldr	r3, [pc, #204]	; (8001448 <MX_ADC1_Init+0xf8>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800137e:	4b32      	ldr	r3, [pc, #200]	; (8001448 <MX_ADC1_Init+0xf8>)
 8001380:	2201      	movs	r2, #1
 8001382:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001384:	4b30      	ldr	r3, [pc, #192]	; (8001448 <MX_ADC1_Init+0xf8>)
 8001386:	2204      	movs	r2, #4
 8001388:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800138a:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <MX_ADC1_Init+0xf8>)
 800138c:	2200      	movs	r2, #0
 800138e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001390:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <MX_ADC1_Init+0xf8>)
 8001392:	2201      	movs	r2, #1
 8001394:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001396:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <MX_ADC1_Init+0xf8>)
 8001398:	2203      	movs	r2, #3
 800139a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800139c:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <MX_ADC1_Init+0xf8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80013a4:	4b28      	ldr	r3, [pc, #160]	; (8001448 <MX_ADC1_Init+0xf8>)
 80013a6:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013ac:	4b26      	ldr	r3, [pc, #152]	; (8001448 <MX_ADC1_Init+0xf8>)
 80013ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013b4:	4b24      	ldr	r3, [pc, #144]	; (8001448 <MX_ADC1_Init+0xf8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <MX_ADC1_Init+0xf8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <MX_ADC1_Init+0xf8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013ca:	481f      	ldr	r0, [pc, #124]	; (8001448 <MX_ADC1_Init+0xf8>)
 80013cc:	f005 f9fe 	bl	80067cc <HAL_ADC_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80013d6:	f000 fca0 	bl	8001d1a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <MX_ADC1_Init+0x100>)
 80013dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013de:	2306      	movs	r3, #6
 80013e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80013e2:	2307      	movs	r3, #7
 80013e4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013e6:	237f      	movs	r3, #127	; 0x7f
 80013e8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013ea:	2304      	movs	r3, #4
 80013ec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f2:	463b      	mov	r3, r7
 80013f4:	4619      	mov	r1, r3
 80013f6:	4814      	ldr	r0, [pc, #80]	; (8001448 <MX_ADC1_Init+0xf8>)
 80013f8:	f005 fd80 	bl	8006efc <HAL_ADC_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001402:	f000 fc8a 	bl	8001d1a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_ADC1_Init+0x104>)
 8001408:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800140a:	230c      	movs	r3, #12
 800140c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140e:	463b      	mov	r3, r7
 8001410:	4619      	mov	r1, r3
 8001412:	480d      	ldr	r0, [pc, #52]	; (8001448 <MX_ADC1_Init+0xf8>)
 8001414:	f005 fd72 	bl	8006efc <HAL_ADC_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800141e:	f000 fc7c 	bl	8001d1a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <MX_ADC1_Init+0x108>)
 8001424:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001426:	2312      	movs	r3, #18
 8001428:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142a:	463b      	mov	r3, r7
 800142c:	4619      	mov	r1, r3
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <MX_ADC1_Init+0xf8>)
 8001430:	f005 fd64 	bl	8006efc <HAL_ADC_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800143a:	f000 fc6e 	bl	8001d1a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000354 	.word	0x20000354
 800144c:	50040000 	.word	0x50040000
 8001450:	80000001 	.word	0x80000001
 8001454:	c7520000 	.word	0xc7520000
 8001458:	25b00200 	.word	0x25b00200

0800145c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a2f      	ldr	r2, [pc, #188]	; (8001538 <HAL_ADC_MspInit+0xdc>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d157      	bne.n	800152e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800147e:	4b2f      	ldr	r3, [pc, #188]	; (800153c <HAL_ADC_MspInit+0xe0>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4a2e      	ldr	r2, [pc, #184]	; (800153c <HAL_ADC_MspInit+0xe0>)
 8001484:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4b2c      	ldr	r3, [pc, #176]	; (800153c <HAL_ADC_MspInit+0xe0>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	4b29      	ldr	r3, [pc, #164]	; (800153c <HAL_ADC_MspInit+0xe0>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	4a28      	ldr	r2, [pc, #160]	; (800153c <HAL_ADC_MspInit+0xe0>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <HAL_ADC_MspInit+0xe0>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014ae:	2310      	movs	r3, #16
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014b2:	230b      	movs	r3, #11
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c4:	f006 fddc 	bl	8008080 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 80014ca:	4a1e      	ldr	r2, [pc, #120]	; (8001544 <HAL_ADC_MspInit+0xe8>)
 80014cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 80014e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 80014f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014fc:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001502:	480f      	ldr	r0, [pc, #60]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 8001504:	f006 fb3a 	bl	8007b7c <HAL_DMA_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800150e:	f000 fc04 	bl	8001d1a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 8001516:	64da      	str	r2, [r3, #76]	; 0x4c
 8001518:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	2012      	movs	r0, #18
 8001524:	f006 faf3 	bl	8007b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001528:	2012      	movs	r0, #18
 800152a:	f006 fb0c 	bl	8007b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	50040000 	.word	0x50040000
 800153c:	40021000 	.word	0x40021000
 8001540:	200003b8 	.word	0x200003b8
 8001544:	40020008 	.word	0x40020008

08001548 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001548:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a54      	ldr	r2, [pc, #336]	; (80016a8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001558:	4293      	cmp	r3, r2
 800155a:	f040 8091 	bne.w	8001680 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 800155e:	4b53      	ldr	r3, [pc, #332]	; (80016ac <HAL_ADC_ConvCpltCallback+0x164>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ffde 	bl	8000524 <__aeabi_i2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	a14a      	add	r1, pc, #296	; (adr r1, 8001698 <HAL_ADC_ConvCpltCallback+0x150>)
 800156e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001572:	f7ff f96b 	bl	800084c <__aeabi_ddiv>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fb33 	bl	8000be8 <__aeabi_d2f>
 8001582:	4603      	mov	r3, r0
 8001584:	4a4a      	ldr	r2, [pc, #296]	; (80016b0 <HAL_ADC_ConvCpltCallback+0x168>)
 8001586:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001588:	4b4a      	ldr	r3, [pc, #296]	; (80016b4 <HAL_ADC_ConvCpltCallback+0x16c>)
 800158a:	ed93 7a00 	vldr	s14, [r3]
 800158e:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <HAL_ADC_ConvCpltCallback+0x170>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001598:	ee17 0a90 	vmov	r0, s15
 800159c:	f7fe ffd4 	bl	8000548 <__aeabi_f2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	f04f 0000 	mov.w	r0, #0
 80015a8:	4944      	ldr	r1, [pc, #272]	; (80016bc <HAL_ADC_ConvCpltCallback+0x174>)
 80015aa:	f7ff f94f 	bl	800084c <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4690      	mov	r8, r2
 80015b4:	4699      	mov	r9, r3
 80015b6:	4b3d      	ldr	r3, [pc, #244]	; (80016ac <HAL_ADC_ConvCpltCallback+0x164>)
 80015b8:	885b      	ldrh	r3, [r3, #2]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe ffb2 	bl	8000524 <__aeabi_i2d>
 80015c0:	4604      	mov	r4, r0
 80015c2:	460d      	mov	r5, r1
 80015c4:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <HAL_ADC_ConvCpltCallback+0x168>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ffbd 	bl	8000548 <__aeabi_f2d>
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <HAL_ADC_ConvCpltCallback+0x178>)
 80015d4:	f7ff f93a 	bl	800084c <__aeabi_ddiv>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7ff f80a 	bl	80005f8 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4614      	mov	r4, r2
 80015ea:	461d      	mov	r5, r3
 80015ec:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <HAL_ADC_ConvCpltCallback+0x170>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ffa9 	bl	8000548 <__aeabi_f2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4620      	mov	r0, r4
 80015fc:	4629      	mov	r1, r5
 80015fe:	f7fe fe43 	bl	8000288 <__aeabi_dsub>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4640      	mov	r0, r8
 8001608:	4649      	mov	r1, r9
 800160a:	f7fe fff5 	bl	80005f8 <__aeabi_dmul>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	f7ff fae7 	bl	8000be8 <__aeabi_d2f>
 800161a:	ee07 0a10 	vmov	s14, r0
 800161e:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001626:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001628:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <HAL_ADC_ConvCpltCallback+0x164>)
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff77 	bl	8000524 <__aeabi_i2d>
 8001636:	a31a      	add	r3, pc, #104	; (adr r3, 80016a0 <HAL_ADC_ConvCpltCallback+0x158>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7ff f906 	bl	800084c <__aeabi_ddiv>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	f7fe fe1e 	bl	800028c <__adddf3>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4614      	mov	r4, r2
 8001656:	461d      	mov	r5, r3
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_ADC_ConvCpltCallback+0x168>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff73 	bl	8000548 <__aeabi_f2d>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4620      	mov	r0, r4
 8001668:	4629      	mov	r1, r5
 800166a:	f7fe ffc5 	bl	80005f8 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff fab7 	bl	8000be8 <__aeabi_d2f>
 800167a:	4603      	mov	r3, r0
 800167c:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <HAL_ADC_ConvCpltCallback+0x180>)
 800167e:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001680:	2203      	movs	r2, #3
 8001682:	490a      	ldr	r1, [pc, #40]	; (80016ac <HAL_ADC_ConvCpltCallback+0x164>)
 8001684:	4811      	ldr	r0, [pc, #68]	; (80016cc <HAL_ADC_ConvCpltCallback+0x184>)
 8001686:	f005 f9e3 	bl	8006a50 <HAL_ADC_Start_DMA>



}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001694:	f3af 8000 	nop.w
 8001698:	d70a3d70 	.word	0xd70a3d70
 800169c:	40b36323 	.word	0x40b36323
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40affe00 	.word	0x40affe00
 80016a8:	50040000 	.word	0x50040000
 80016ac:	20000760 	.word	0x20000760
 80016b0:	2000076c 	.word	0x2000076c
 80016b4:	20000018 	.word	0x20000018
 80016b8:	2000001c 	.word	0x2000001c
 80016bc:	40590000 	.word	0x40590000
 80016c0:	40080000 	.word	0x40080000
 80016c4:	20000768 	.word	0x20000768
 80016c8:	20000770 	.word	0x20000770
 80016cc:	20000354 	.word	0x20000354

080016d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_DMA_Init+0x80>)
 80016d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016da:	4a1d      	ldr	r2, [pc, #116]	; (8001750 <MX_DMA_Init+0x80>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6493      	str	r3, [r2, #72]	; 0x48
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_DMA_Init+0x80>)
 80016e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <MX_DMA_Init+0x80>)
 80016f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <MX_DMA_Init+0x80>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6493      	str	r3, [r2, #72]	; 0x48
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <MX_DMA_Init+0x80>)
 80016fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	200b      	movs	r0, #11
 800170c:	f006 f9ff 	bl	8007b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001710:	200b      	movs	r0, #11
 8001712:	f006 fa18 	bl	8007b46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	200c      	movs	r0, #12
 800171c:	f006 f9f7 	bl	8007b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001720:	200c      	movs	r0, #12
 8001722:	f006 fa10 	bl	8007b46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	200d      	movs	r0, #13
 800172c:	f006 f9ef 	bl	8007b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001730:	200d      	movs	r0, #13
 8001732:	f006 fa08 	bl	8007b46 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	2045      	movs	r0, #69	; 0x45
 800173c:	f006 f9e7 	bl	8007b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8001740:	2045      	movs	r0, #69	; 0x45
 8001742:	f006 fa00 	bl	8007b46 <HAL_NVIC_EnableIRQ>

}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000

08001754 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	4b38      	ldr	r3, [pc, #224]	; (800184c <MX_GPIO_Init+0xf8>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	4a37      	ldr	r2, [pc, #220]	; (800184c <MX_GPIO_Init+0xf8>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001776:	4b35      	ldr	r3, [pc, #212]	; (800184c <MX_GPIO_Init+0xf8>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	4b32      	ldr	r3, [pc, #200]	; (800184c <MX_GPIO_Init+0xf8>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	4a31      	ldr	r2, [pc, #196]	; (800184c <MX_GPIO_Init+0xf8>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178e:	4b2f      	ldr	r3, [pc, #188]	; (800184c <MX_GPIO_Init+0xf8>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2102      	movs	r1, #2
 800179e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a2:	f006 fdd7 	bl	8008354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2101      	movs	r1, #1
 80017aa:	4829      	ldr	r0, [pc, #164]	; (8001850 <MX_GPIO_Init+0xfc>)
 80017ac:	f006 fdd2 	bl	8008354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017b0:	2302      	movs	r3, #2
 80017b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	4619      	mov	r1, r3
 80017c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ca:	f006 fc59 	bl	8008080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80017ce:	2301      	movs	r3, #1
 80017d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	4619      	mov	r1, r3
 80017e4:	481a      	ldr	r0, [pc, #104]	; (8001850 <MX_GPIO_Init+0xfc>)
 80017e6:	f006 fc4b 	bl	8008080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017ea:	2302      	movs	r3, #2
 80017ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	4619      	mov	r1, r3
 80017fe:	4814      	ldr	r0, [pc, #80]	; (8001850 <MX_GPIO_Init+0xfc>)
 8001800:	f006 fc3e 	bl	8008080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800180a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800180e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	4619      	mov	r1, r3
 800181a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181e:	f006 fc2f 	bl	8008080 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2101      	movs	r1, #1
 8001826:	2007      	movs	r0, #7
 8001828:	f006 f971 	bl	8007b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800182c:	2007      	movs	r0, #7
 800182e:	f006 f98a 	bl	8007b46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2101      	movs	r1, #1
 8001836:	2017      	movs	r0, #23
 8001838:	f006 f969 	bl	8007b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800183c:	2017      	movs	r0, #23
 800183e:	f006 f982 	bl	8007b46 <HAL_NVIC_EnableIRQ>

}
 8001842:	bf00      	nop
 8001844:	3720      	adds	r7, #32
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	48000400 	.word	0x48000400

08001854 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <MX_I2C1_Init+0x74>)
 800185a:	4a1c      	ldr	r2, [pc, #112]	; (80018cc <MX_I2C1_Init+0x78>)
 800185c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00202538;
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <MX_I2C1_Init+0x74>)
 8001860:	4a1b      	ldr	r2, [pc, #108]	; (80018d0 <MX_I2C1_Init+0x7c>)
 8001862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <MX_I2C1_Init+0x74>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <MX_I2C1_Init+0x74>)
 800186c:	2201      	movs	r2, #1
 800186e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <MX_I2C1_Init+0x74>)
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <MX_I2C1_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <MX_I2C1_Init+0x74>)
 800187e:	2200      	movs	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_I2C1_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <MX_I2C1_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800188e:	480e      	ldr	r0, [pc, #56]	; (80018c8 <MX_I2C1_Init+0x74>)
 8001890:	f006 fd90 	bl	80083b4 <HAL_I2C_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800189a:	f000 fa3e 	bl	8001d1a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800189e:	2100      	movs	r1, #0
 80018a0:	4809      	ldr	r0, [pc, #36]	; (80018c8 <MX_I2C1_Init+0x74>)
 80018a2:	f007 fea3 	bl	80095ec <HAL_I2CEx_ConfigAnalogFilter>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018ac:	f000 fa35 	bl	8001d1a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018b0:	2100      	movs	r1, #0
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_I2C1_Init+0x74>)
 80018b4:	f007 fee5 	bl	8009682 <HAL_I2CEx_ConfigDigitalFilter>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018be:	f000 fa2c 	bl	8001d1a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000400 	.word	0x20000400
 80018cc:	40005400 	.word	0x40005400
 80018d0:	00202538 	.word	0x00202538

080018d4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <MX_I2C3_Init+0x7c>)
 80018da:	4a1e      	ldr	r2, [pc, #120]	; (8001954 <MX_I2C3_Init+0x80>)
 80018dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100618;
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <MX_I2C3_Init+0x7c>)
 80018e0:	4a1d      	ldr	r2, [pc, #116]	; (8001958 <MX_I2C3_Init+0x84>)
 80018e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <MX_I2C3_Init+0x7c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <MX_I2C3_Init+0x7c>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <MX_I2C3_Init+0x7c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <MX_I2C3_Init+0x7c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <MX_I2C3_Init+0x7c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <MX_I2C3_Init+0x7c>)
 8001904:	2200      	movs	r2, #0
 8001906:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_I2C3_Init+0x7c>)
 800190a:	2200      	movs	r2, #0
 800190c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800190e:	4810      	ldr	r0, [pc, #64]	; (8001950 <MX_I2C3_Init+0x7c>)
 8001910:	f006 fd50 	bl	80083b4 <HAL_I2C_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800191a:	f000 f9fe 	bl	8001d1a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800191e:	2100      	movs	r1, #0
 8001920:	480b      	ldr	r0, [pc, #44]	; (8001950 <MX_I2C3_Init+0x7c>)
 8001922:	f007 fe63 	bl	80095ec <HAL_I2CEx_ConfigAnalogFilter>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800192c:	f000 f9f5 	bl	8001d1a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001930:	2100      	movs	r1, #0
 8001932:	4807      	ldr	r0, [pc, #28]	; (8001950 <MX_I2C3_Init+0x7c>)
 8001934:	f007 fea5 	bl	8009682 <HAL_I2CEx_ConfigDigitalFilter>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800193e:	f000 f9ec 	bl	8001d1a <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8001942:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001946:	f007 fee9 	bl	800971c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000454 	.word	0x20000454
 8001954:	40005c00 	.word	0x40005c00
 8001958:	00100618 	.word	0x00100618

0800195c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b0a2      	sub	sp, #136	; 0x88
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001974:	f107 0320 	add.w	r3, r7, #32
 8001978:	2254      	movs	r2, #84	; 0x54
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f016 f90c 	bl	8017b9a <memset>
  if(i2cHandle->Instance==I2C1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a50      	ldr	r2, [pc, #320]	; (8001ac8 <HAL_I2C_MspInit+0x16c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d13a      	bne.n	8001a02 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800198c:	2340      	movs	r3, #64	; 0x40
 800198e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001990:	2300      	movs	r3, #0
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001994:	f107 0320 	add.w	r3, r7, #32
 8001998:	4618      	mov	r0, r3
 800199a:	f00a fb09 	bl	800bfb0 <HAL_RCCEx_PeriphCLKConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019a4:	f000 f9b9 	bl	8001d1a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a8:	4b48      	ldr	r3, [pc, #288]	; (8001acc <HAL_I2C_MspInit+0x170>)
 80019aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ac:	4a47      	ldr	r2, [pc, #284]	; (8001acc <HAL_I2C_MspInit+0x170>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b4:	4b45      	ldr	r3, [pc, #276]	; (8001acc <HAL_I2C_MspInit+0x170>)
 80019b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019c4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019c6:	2312      	movs	r3, #18
 80019c8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019d4:	2304      	movs	r3, #4
 80019d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019de:	4619      	mov	r1, r3
 80019e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e4:	f006 fb4c 	bl	8008080 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019e8:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_I2C_MspInit+0x170>)
 80019ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ec:	4a37      	ldr	r2, [pc, #220]	; (8001acc <HAL_I2C_MspInit+0x170>)
 80019ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019f2:	6593      	str	r3, [r2, #88]	; 0x58
 80019f4:	4b35      	ldr	r3, [pc, #212]	; (8001acc <HAL_I2C_MspInit+0x170>)
 80019f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fc:	61bb      	str	r3, [r7, #24]
 80019fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001a00:	e05d      	b.n	8001abe <HAL_I2C_MspInit+0x162>
  else if(i2cHandle->Instance==I2C3)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a32      	ldr	r2, [pc, #200]	; (8001ad0 <HAL_I2C_MspInit+0x174>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d158      	bne.n	8001abe <HAL_I2C_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a10:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8001a12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a16:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a18:	f107 0320 	add.w	r3, r7, #32
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f00a fac7 	bl	800bfb0 <HAL_RCCEx_PeriphCLKConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001a28:	f000 f977 	bl	8001d1a <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2c:	4b27      	ldr	r3, [pc, #156]	; (8001acc <HAL_I2C_MspInit+0x170>)
 8001a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a30:	4a26      	ldr	r2, [pc, #152]	; (8001acc <HAL_I2C_MspInit+0x170>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_I2C_MspInit+0x170>)
 8001a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_I2C_MspInit+0x170>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a48:	4a20      	ldr	r2, [pc, #128]	; (8001acc <HAL_I2C_MspInit+0x170>)
 8001a4a:	f043 0302 	orr.w	r3, r3, #2
 8001a4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a50:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <HAL_I2C_MspInit+0x170>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a60:	2312      	movs	r3, #18
 8001a62:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7e:	f006 faff 	bl	8008080 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a82:	2310      	movs	r3, #16
 8001a84:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a86:	2312      	movs	r3, #18
 8001a88:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a94:	2304      	movs	r3, #4
 8001a96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <HAL_I2C_MspInit+0x178>)
 8001aa2:	f006 faed 	bl	8008080 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_I2C_MspInit+0x170>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	4a08      	ldr	r2, [pc, #32]	; (8001acc <HAL_I2C_MspInit+0x170>)
 8001aac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_I2C_MspInit+0x170>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
}
 8001abe:	bf00      	nop
 8001ac0:	3788      	adds	r7, #136	; 0x88
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40005400 	.word	0x40005400
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40005c00 	.word	0x40005c00
 8001ad4:	48000400 	.word	0x48000400

08001ad8 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_8){
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ae8:	d104      	bne.n	8001af4 <HAL_GPIO_EXTI_Callback+0x1c>
//		ssd1306_SetCursor(33, 44);
//		ssd1306_WriteString("btna", Font_6x8, White);
//		ssd1306_UpdateScreen();
		BTN_A++;//sert à reconnaitre lorsque le bouto na est appuyer, cette variable est mise à 1 par un e interruption.
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x38>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3301      	adds	r3, #1
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x38>)
 8001af2:	6013      	str	r3, [r2, #0]


	}
	if(GPIO_Pin==GPIO_PIN_1){
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d104      	bne.n	8001b04 <HAL_GPIO_EXTI_Callback+0x2c>
		//ssd1306_SetCursor(33, 44);
		//ssd1306_WriteString("btnb", Font_6x8, White);
		//ssd1306_UpdateScreen();
		BTN_B++;//de meme pour le bouton b
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3301      	adds	r3, #1
 8001b00:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001b02:	6013      	str	r3, [r2, #0]

	}
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	20000738 	.word	0x20000738
 8001b14:	2000073c 	.word	0x2000073c

08001b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b1e:	f004 fbe2 	bl	80062e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b22:	f000 f879 	bl	8001c18 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001b26:	f000 f8ca 	bl	8001cbe <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b2a:	f7ff fe13 	bl	8001754 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b2e:	f7ff fdcf 	bl	80016d0 <MX_DMA_Init>
  MX_I2C3_Init();
 8001b32:	f7ff fecf 	bl	80018d4 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8001b36:	f004 fa13 	bl	8005f60 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001b3a:	f7ff fc09 	bl	8001350 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001b3e:	f004 f951 	bl	8005de4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8001b42:	f013 fafd 	bl	8015140 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001b46:	f7ff fe85 	bl	8001854 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001b4a:	f004 fa35 	bl	8005fb8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001b4e:	f001 f84d 	bl	8002bec <MX_SPI1_Init>
  MX_TIM7_Init();
 8001b52:	f004 f995 	bl	8005e80 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */



	ssd1306_Init();
 8001b56:	f001 fb23 	bl	80031a0 <ssd1306_Init>

	HAL_Delay(100);
 8001b5a:	2064      	movs	r0, #100	; 0x64
 8001b5c:	f004 fc38 	bl	80063d0 <HAL_Delay>
	ssd1306_Fill(Black);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f001 fb87 	bl	8003274 <ssd1306_Fill>

	ssd1306_DrawBitmap(32, 32, startimg, 64, 64, White);
 8001b66:	2301      	movs	r3, #1
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	2340      	movs	r3, #64	; 0x40
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2340      	movs	r3, #64	; 0x40
 8001b70:	4a1d      	ldr	r2, [pc, #116]	; (8001be8 <main+0xd0>)
 8001b72:	2120      	movs	r1, #32
 8001b74:	2020      	movs	r0, #32
 8001b76:	f001 fe4f 	bl	8003818 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001b7a:	f001 fb93 	bl	80032a4 <ssd1306_UpdateScreen>


	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001b7e:	2203      	movs	r2, #3
 8001b80:	491a      	ldr	r1, [pc, #104]	; (8001bec <main+0xd4>)
 8001b82:	481b      	ldr	r0, [pc, #108]	; (8001bf0 <main+0xd8>)
 8001b84:	f004 ff64 	bl	8006a50 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 8001b88:	481a      	ldr	r0, [pc, #104]	; (8001bf4 <main+0xdc>)
 8001b8a:	f00c fae9 	bl	800e160 <HAL_TIM_Base_Start>

	HAL_UART_Abort(&hlpuart1);
 8001b8e:	481a      	ldr	r0, [pc, #104]	; (8001bf8 <main+0xe0>)
 8001b90:	f00c ffce 	bl	800eb30 <HAL_UART_Abort>
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8001b94:	2240      	movs	r2, #64	; 0x40
 8001b96:	4919      	ldr	r1, [pc, #100]	; (8001bfc <main+0xe4>)
 8001b98:	4817      	ldr	r0, [pc, #92]	; (8001bf8 <main+0xe0>)
 8001b9a:	f00c ff7d 	bl	800ea98 <HAL_UART_Receive_DMA>

	memset(flashread,'1',256);
 8001b9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba2:	2131      	movs	r1, #49	; 0x31
 8001ba4:	4816      	ldr	r0, [pc, #88]	; (8001c00 <main+0xe8>)
 8001ba6:	f015 fff8 	bl	8017b9a <memset>
	memset(flashwrite,'\0',256);
 8001baa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4814      	ldr	r0, [pc, #80]	; (8001c04 <main+0xec>)
 8001bb2:	f015 fff2 	bl	8017b9a <memset>
	memset((uint8_t *)bufferscreen ,'\0',50);
 8001bb6:	2232      	movs	r2, #50	; 0x32
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4813      	ldr	r0, [pc, #76]	; (8001c08 <main+0xf0>)
 8001bbc:	f015 ffed 	bl	8017b9a <memset>

	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_0);
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <main+0xf4>)
 8001bc4:	4912      	ldr	r1, [pc, #72]	; (8001c10 <main+0xf8>)
 8001bc6:	4813      	ldr	r0, [pc, #76]	; (8001c14 <main+0xfc>)
 8001bc8:	f013 f957 	bl	8014e7a <SPIF_Init>



	getindex();
 8001bcc:	f001 f9b4 	bl	8002f38 <getindex>

	ssd1306_Fill(Black);
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f001 fb4f 	bl	8003274 <ssd1306_Fill>

	HAL_Delay(700);
 8001bd6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001bda:	f004 fbf9 	bl	80063d0 <HAL_Delay>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		statemachine();
 8001bde:	f002 f883 	bl	8003ce8 <statemachine>
		ssd1306_UpdateScreen();
 8001be2:	f001 fb5f 	bl	80032a4 <ssd1306_UpdateScreen>
		statemachine();
 8001be6:	e7fa      	b.n	8001bde <main+0xc6>
 8001be8:	0801d02c 	.word	0x0801d02c
 8001bec:	20000760 	.word	0x20000760
 8001bf0:	20000354 	.word	0x20000354
 8001bf4:	20000fec 	.word	0x20000fec
 8001bf8:	20001084 	.word	0x20001084
 8001bfc:	200004b4 	.word	0x200004b4
 8001c00:	20000888 	.word	0x20000888
 8001c04:	20000788 	.word	0x20000788
 8001c08:	200009ac 	.word	0x200009ac
 8001c0c:	48000400 	.word	0x48000400
 8001c10:	20000aec 	.word	0x20000aec
 8001c14:	20000740 	.word	0x20000740

08001c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b096      	sub	sp, #88	; 0x58
 8001c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	2244      	movs	r2, #68	; 0x44
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f015 ffb7 	bl	8017b9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c2c:	463b      	mov	r3, r7
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
 8001c38:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c3e:	f009 fb19 	bl	800b274 <HAL_PWREx_ControlVoltageScaling>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c48:	f000 f867 	bl	8001d1a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001c4c:	2310      	movs	r3, #16
 8001c4e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c50:	2301      	movs	r3, #1
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c58:	2360      	movs	r3, #96	; 0x60
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001c60:	2301      	movs	r3, #1
 8001c62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c64:	2301      	movs	r3, #1
 8001c66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001c68:	2314      	movs	r3, #20
 8001c6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c6c:	2307      	movs	r3, #7
 8001c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c70:	2302      	movs	r3, #2
 8001c72:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c74:	2302      	movs	r3, #2
 8001c76:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f009 fb5f 	bl	800b340 <HAL_RCC_OscConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001c88:	f000 f847 	bl	8001d1a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c8c:	230f      	movs	r3, #15
 8001c8e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c90:	2303      	movs	r3, #3
 8001c92:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c98:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001c9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	2102      	movs	r1, #2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f009 ff5e 	bl	800bb68 <HAL_RCC_ClockConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001cb2:	f000 f832 	bl	8001d1a <Error_Handler>
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	3758      	adds	r7, #88	; 0x58
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b096      	sub	sp, #88	; 0x58
 8001cc2:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	2254      	movs	r2, #84	; 0x54
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f015 ff65 	bl	8017b9a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001cd0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001cd4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001cd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001cda:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001cdc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ce0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001cea:	2318      	movs	r3, #24
 8001cec:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001cee:	2307      	movs	r3, #7
 8001cf0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001cfa:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001cfe:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	4618      	mov	r0, r3
 8001d04:	f00a f954 	bl	800bfb0 <HAL_RCCEx_PeriphCLKConfig>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001d0e:	f000 f804 	bl	8001d1a <Error_Handler>
  }
}
 8001d12:	bf00      	nop
 8001d14:	3758      	adds	r7, #88	; 0x58
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d1e:	b672      	cpsid	i
}
 8001d20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d22:	e7fe      	b.n	8001d22 <Error_Handler+0x8>

08001d24 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7fe fa9f 	bl	8000270 <strlen>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d801      	bhi.n	8001d3c <gps_checksum+0x18>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	e038      	b.n	8001dae <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7fe fa97 	bl	8000270 <strlen>
 8001d42:	4603      	mov	r3, r0
 8001d44:	3b04      	subs	r3, #4
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7fe fa8e 	bl	8000270 <strlen>
 8001d54:	4603      	mov	r3, r0
 8001d56:	3b03      	subs	r3, #3
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	e00a      	b.n	8001d80 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	4053      	eors	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7fe fa75 	bl	8000270 <strlen>
 8001d86:	4603      	mov	r3, r0
 8001d88:	1f5a      	subs	r2, r3, #5
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d8ec      	bhi.n	8001d6a <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8001d90:	f107 0308 	add.w	r3, r7, #8
 8001d94:	2210      	movs	r2, #16
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f014 ff25 	bl	8016be8 <strtol>
 8001d9e:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d101      	bne.n	8001dac <gps_checksum+0x88>
        return 1;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <gps_checksum+0x8a>
    }
    else{
        return 0;
 8001dac:	2300      	movs	r3, #0
    }
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b0b7      	sub	sp, #220	; 0xdc
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8001dc8:	f107 0320 	add.w	r3, r7, #32
 8001dcc:	2264      	movs	r2, #100	; 0x64
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f015 fee2 	bl	8017b9a <memset>
    char *marker = strtok(inputString, ",");
 8001dd6:	49c2      	ldr	r1, [pc, #776]	; (80020e0 <nmea_GPGGA+0x328>)
 8001dd8:	6838      	ldr	r0, [r7, #0]
 8001dda:	f015 fef9 	bl	8017bd0 <strtok>
 8001dde:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001de2:	e027      	b.n	8001e34 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001de4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001de8:	f7fe fa42 	bl	8000270 <strlen>
 8001dec:	4603      	mov	r3, r0
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001df4:	1c63      	adds	r3, r4, #1
 8001df6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	f013 ff3c 	bl	8015c78 <malloc>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	00a3      	lsls	r3, r4, #2
 8001e06:	33d8      	adds	r3, #216	; 0xd8
 8001e08:	443b      	add	r3, r7
 8001e0a:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e12:	3b01      	subs	r3, #1
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	33d8      	adds	r3, #216	; 0xd8
 8001e18:	443b      	add	r3, r7
 8001e1a:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001e1e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f015 ffcd 	bl	8017dc2 <strcpy>
        marker = strtok(NULL, ",");
 8001e28:	49ad      	ldr	r1, [pc, #692]	; (80020e0 <nmea_GPGGA+0x328>)
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f015 fed0 	bl	8017bd0 <strtok>
 8001e30:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001e34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1d3      	bne.n	8001de4 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8001e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8001e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	332c      	adds	r3, #44	; 0x2c
 8001e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f015 ffb4 	bl	8017dc2 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8001e5a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001e5e:	2b53      	cmp	r3, #83	; 0x53
 8001e60:	d004      	beq.n	8001e6c <nmea_GPGGA+0xb4>
 8001e62:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001e66:	2b4e      	cmp	r3, #78	; 0x4e
 8001e68:	f040 8159 	bne.w	800211e <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001e72:	e010      	b.n	8001e96 <nmea_GPGGA+0xde>
 8001e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e7a:	4413      	add	r3, r2
 8001e7c:	7819      	ldrb	r1, [r3, #0]
 8001e7e:	f107 021c 	add.w	r2, r7, #28
 8001e82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e86:	4413      	add	r3, r2
 8001e88:	460a      	mov	r2, r1
 8001e8a:	701a      	strb	r2, [r3, #0]
 8001e8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e90:	3301      	adds	r3, #1
 8001e92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001e96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	ddea      	ble.n	8001e74 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ea4:	e011      	b.n	8001eca <nmea_GPGGA+0x112>
 8001ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ea8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001eac:	3302      	adds	r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	7819      	ldrb	r1, [r3, #0]
 8001eb2:	f107 0214 	add.w	r2, r7, #20
 8001eb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001eba:	4413      	add	r3, r2
 8001ebc:	460a      	mov	r2, r1
 8001ebe:	701a      	strb	r2, [r3, #0]
 8001ec0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ece:	2b05      	cmp	r3, #5
 8001ed0:	dde9      	ble.n	8001ea6 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	220a      	movs	r2, #10
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f014 fe84 	bl	8016be8 <strtol>
 8001ee0:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f014 fd92 	bl	8016a14 <strtof>
 8001ef0:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8001ef4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f00:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001f04:	ed9f 6a77 	vldr	s12, [pc, #476]	; 80020e4 <nmea_GPGGA+0x32c>
 8001f08:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f10:	ee17 0a90 	vmov	r0, s15
 8001f14:	f7fe fb18 	bl	8000548 <__aeabi_f2d>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001f26:	e010      	b.n	8001f4a <nmea_GPGGA+0x192>
 8001f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f2e:	4413      	add	r3, r2
 8001f30:	7819      	ldrb	r1, [r3, #0]
 8001f32:	f107 0210 	add.w	r2, r7, #16
 8001f36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f3a:	4413      	add	r3, r2
 8001f3c:	460a      	mov	r2, r1
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f44:	3301      	adds	r3, #1
 8001f46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001f4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	ddea      	ble.n	8001f28 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f58:	e011      	b.n	8001f7e <nmea_GPGGA+0x1c6>
 8001f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f60:	3303      	adds	r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	7819      	ldrb	r1, [r3, #0]
 8001f66:	f107 0208 	add.w	r2, r7, #8
 8001f6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f6e:	4413      	add	r3, r2
 8001f70:	460a      	mov	r2, r1
 8001f72:	701a      	strb	r2, [r3, #0]
 8001f74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	dde9      	ble.n	8001f5a <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8001f86:	f107 0310 	add.w	r3, r7, #16
 8001f8a:	220a      	movs	r2, #10
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f014 fe2a 	bl	8016be8 <strtol>
 8001f94:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8001f98:	f107 0308 	add.w	r3, r7, #8
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f014 fd38 	bl	8016a14 <strtof>
 8001fa4:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8001fa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb4:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001fb8:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 80020e4 <nmea_GPGGA+0x32c>
 8001fbc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc4:	ee17 0a90 	vmov	r0, s15
 8001fc8:	f7fe fabe 	bl	8000548 <__aeabi_f2d>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001fe0:	f7fe fd72 	bl	8000ac8 <__aeabi_dcmpeq>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d176      	bne.n	80020d8 <nmea_GPGGA+0x320>
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001ff6:	f7fe fd67 	bl	8000ac8 <__aeabi_dcmpeq>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d16b      	bne.n	80020d8 <nmea_GPGGA+0x320>
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <nmea_GPGGA+0x330>)
 8002006:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800200a:	f7fe fd67 	bl	8000adc <__aeabi_dcmplt>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d061      	beq.n	80020d8 <nmea_GPGGA+0x320>
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	4b34      	ldr	r3, [pc, #208]	; (80020ec <nmea_GPGGA+0x334>)
 800201a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800201e:	f7fe fd5d 	bl	8000adc <__aeabi_dcmplt>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d057      	beq.n	80020d8 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800202e:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8002038:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002040:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 800204a:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 800204c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f014 fcdf 	bl	8016a14 <strtof>
 8002056:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 800205a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800205e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	d102      	bne.n	800206e <nmea_GPGGA+0x2b6>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	e001      	b.n	8002072 <nmea_GPGGA+0x2ba>
 800206e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8002076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002078:	220a      	movs	r2, #10
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f014 fdb3 	bl	8016be8 <strtol>
 8002082:	4602      	mov	r2, r0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8002088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208a:	220a      	movs	r2, #10
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f014 fdaa 	bl	8016be8 <strtol>
 8002094:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8002098:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800209c:	2b00      	cmp	r3, #0
 800209e:	bfcc      	ite	gt
 80020a0:	2301      	movgt	r3, #1
 80020a2:	2300      	movle	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 80020ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f014 fcaf 	bl	8016a14 <strtof>
 80020b6:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 80020ba:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80020be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c6:	d102      	bne.n	80020ce <nmea_GPGGA+0x316>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	e001      	b.n	80020d2 <nmea_GPGGA+0x31a>
 80020ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80020d6:	e022      	b.n	800211e <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80020de:	e016      	b.n	800210e <nmea_GPGGA+0x356>
 80020e0:	0801cd5c 	.word	0x0801cd5c
 80020e4:	42700000 	.word	0x42700000
 80020e8:	40568000 	.word	0x40568000
 80020ec:	40668000 	.word	0x40668000
 80020f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	33d8      	adds	r3, #216	; 0xd8
 80020f8:	443b      	add	r3, r7
 80020fa:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80020fe:	4618      	mov	r0, r3
 8002100:	f013 fdc2 	bl	8015c88 <free>
 8002104:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002108:	3301      	adds	r3, #1
 800210a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800210e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002116:	429a      	cmp	r2, r3
 8002118:	dbea      	blt.n	80020f0 <nmea_GPGGA+0x338>
            return 0;
 800211a:	2300      	movs	r3, #0
 800211c:	e019      	b.n	8002152 <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002124:	e00e      	b.n	8002144 <nmea_GPGGA+0x38c>
 8002126:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	33d8      	adds	r3, #216	; 0xd8
 800212e:	443b      	add	r3, r7
 8002130:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002134:	4618      	mov	r0, r3
 8002136:	f013 fda7 	bl	8015c88 <free>
 800213a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800213e:	3301      	adds	r3, #1
 8002140:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002144:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002148:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800214c:	429a      	cmp	r2, r3
 800214e:	dbea      	blt.n	8002126 <nmea_GPGGA+0x36e>
    return 1;
 8002150:	2301      	movs	r3, #1
}
 8002152:	4618      	mov	r0, r3
 8002154:	37dc      	adds	r7, #220	; 0xdc
 8002156:	46bd      	mov	sp, r7
 8002158:	bd90      	pop	{r4, r7, pc}
 800215a:	bf00      	nop

0800215c <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b0a3      	sub	sp, #140	; 0x8c
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	2264      	movs	r2, #100	; 0x64
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f015 fd10 	bl	8017b9a <memset>
    char *marker = strtok(inputString, ",");
 800217a:	493b      	ldr	r1, [pc, #236]	; (8002268 <nmea_GPGSA+0x10c>)
 800217c:	6838      	ldr	r0, [r7, #0]
 800217e:	f015 fd27 	bl	8017bd0 <strtok>
 8002182:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8002186:	e027      	b.n	80021d8 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002188:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800218c:	f7fe f870 	bl	8000270 <strlen>
 8002190:	4603      	mov	r3, r0
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8002198:	1c63      	adds	r3, r4, #1
 800219a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800219e:	4610      	mov	r0, r2
 80021a0:	f013 fd6a 	bl	8015c78 <malloc>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	00a3      	lsls	r3, r4, #2
 80021aa:	3388      	adds	r3, #136	; 0x88
 80021ac:	443b      	add	r3, r7
 80021ae:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 80021b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021b6:	3b01      	subs	r3, #1
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	3388      	adds	r3, #136	; 0x88
 80021bc:	443b      	add	r3, r7
 80021be:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80021c2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80021c6:	4618      	mov	r0, r3
 80021c8:	f015 fdfb 	bl	8017dc2 <strcpy>
        marker = strtok(NULL, ",");
 80021cc:	4926      	ldr	r1, [pc, #152]	; (8002268 <nmea_GPGSA+0x10c>)
 80021ce:	2000      	movs	r0, #0
 80021d0:	f015 fcfe 	bl	8017bd0 <strtok>
 80021d4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 80021d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1d3      	bne.n	8002188 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	220a      	movs	r2, #10
 80021e4:	2100      	movs	r1, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	f014 fcfe 	bl	8016be8 <strtol>
 80021ec:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 80021ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	bfcc      	ite	gt
 80021f4:	2301      	movgt	r3, #1
 80021f6:	2300      	movle	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8002204:	2303      	movs	r3, #3
 8002206:	67bb      	str	r3, [r7, #120]	; 0x78
 8002208:	e00e      	b.n	8002228 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 800220a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	3388      	adds	r3, #136	; 0x88
 8002210:	443b      	add	r3, r7
 8002212:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <nmea_GPGSA+0xc6>
            satelliteCount++;
 800221c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800221e:	3301      	adds	r3, #1
 8002220:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8002222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002224:	3301      	adds	r3, #1
 8002226:	67bb      	str	r3, [r7, #120]	; 0x78
 8002228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800222a:	2b0e      	cmp	r3, #14
 800222c:	dded      	ble.n	800220a <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002232:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8002234:	2300      	movs	r3, #0
 8002236:	677b      	str	r3, [r7, #116]	; 0x74
 8002238:	e00b      	b.n	8002252 <nmea_GPGSA+0xf6>
 800223a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	3388      	adds	r3, #136	; 0x88
 8002240:	443b      	add	r3, r7
 8002242:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002246:	4618      	mov	r0, r3
 8002248:	f013 fd1e 	bl	8015c88 <free>
 800224c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800224e:	3301      	adds	r3, #1
 8002250:	677b      	str	r3, [r7, #116]	; 0x74
 8002252:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002258:	429a      	cmp	r2, r3
 800225a:	dbee      	blt.n	800223a <nmea_GPGSA+0xde>
    return 1;
 800225c:	2301      	movs	r3, #1
}
 800225e:	4618      	mov	r0, r3
 8002260:	378c      	adds	r7, #140	; 0x8c
 8002262:	46bd      	mov	sp, r7
 8002264:	bd90      	pop	{r4, r7, pc}
 8002266:	bf00      	nop
 8002268:	0801cd5c 	.word	0x0801cd5c
 800226c:	00000000 	.word	0x00000000

08002270 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b0a1      	sub	sp, #132	; 0x84
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 800227e:	f107 030c 	add.w	r3, r7, #12
 8002282:	2264      	movs	r2, #100	; 0x64
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f015 fc87 	bl	8017b9a <memset>
    char *marker = strtok(inputString, ",");
 800228c:	4930      	ldr	r1, [pc, #192]	; (8002350 <nmea_GNRMC+0xe0>)
 800228e:	6838      	ldr	r0, [r7, #0]
 8002290:	f015 fc9e 	bl	8017bd0 <strtok>
 8002294:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8002296:	e021      	b.n	80022dc <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002298:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800229a:	f7fd ffe9 	bl	8000270 <strlen>
 800229e:	4603      	mov	r3, r0
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80022a4:	1c63      	adds	r3, r4, #1
 80022a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022a8:	4610      	mov	r0, r2
 80022aa:	f013 fce5 	bl	8015c78 <malloc>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	00a3      	lsls	r3, r4, #2
 80022b4:	3380      	adds	r3, #128	; 0x80
 80022b6:	443b      	add	r3, r7
 80022b8:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 80022bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022be:	3b01      	subs	r3, #1
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	3380      	adds	r3, #128	; 0x80
 80022c4:	443b      	add	r3, r7
 80022c6:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80022ca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80022cc:	4618      	mov	r0, r3
 80022ce:	f015 fd78 	bl	8017dc2 <strcpy>
        marker = strtok(NULL, ",");
 80022d2:	491f      	ldr	r1, [pc, #124]	; (8002350 <nmea_GNRMC+0xe0>)
 80022d4:	2000      	movs	r0, #0
 80022d6:	f015 fc7b 	bl	8017bd0 <strtok>
 80022da:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 80022dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1da      	bne.n	8002298 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 80022e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f014 fb94 	bl	8016a14 <strtof>
 80022ec:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 80022f0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80022f2:	f7fe f929 	bl	8000548 <__aeabi_f2d>
 80022f6:	a314      	add	r3, pc, #80	; (adr r3, 8002348 <nmea_GNRMC+0xd8>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	f7fe faa6 	bl	800084c <__aeabi_ddiv>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4610      	mov	r0, r2
 8002306:	4619      	mov	r1, r3
 8002308:	f7fe fc6e 	bl	8000be8 <__aeabi_d2f>
 800230c:	4602      	mov	r2, r0
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8002312:	2300      	movs	r3, #0
 8002314:	677b      	str	r3, [r7, #116]	; 0x74
 8002316:	e00b      	b.n	8002330 <nmea_GNRMC+0xc0>
 8002318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	3380      	adds	r3, #128	; 0x80
 800231e:	443b      	add	r3, r7
 8002320:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002324:	4618      	mov	r0, r3
 8002326:	f013 fcaf 	bl	8015c88 <free>
 800232a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800232c:	3301      	adds	r3, #1
 800232e:	677b      	str	r3, [r7, #116]	; 0x74
 8002330:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002332:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002334:	429a      	cmp	r2, r3
 8002336:	dbef      	blt.n	8002318 <nmea_GNRMC+0xa8>
    return 1;
 8002338:	2301      	movs	r3, #1
}
 800233a:	4618      	mov	r0, r3
 800233c:	3784      	adds	r7, #132	; 0x84
 800233e:	46bd      	mov	sp, r7
 8002340:	bd90      	pop	{r4, r7, pc}
 8002342:	bf00      	nop
 8002344:	f3af 8000 	nop.w
 8002348:	be76c8b4 	.word	0xbe76c8b4
 800234c:	3fff1a9f 	.word	0x3fff1a9f
 8002350:	0801cd5c 	.word	0x0801cd5c

08002354 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 800235e:	223c      	movs	r2, #60	; 0x3c
 8002360:	2100      	movs	r1, #0
 8002362:	484e      	ldr	r0, [pc, #312]	; (800249c <nmea_parse+0x148>)
 8002364:	f015 fc19 	bl	8017b9a <memset>
    char * token = strtok(buffer, "$");
 8002368:	494d      	ldr	r1, [pc, #308]	; (80024a0 <nmea_parse+0x14c>)
 800236a:	6838      	ldr	r0, [r7, #0]
 800236c:	f015 fc30 	bl	8017bd0 <strtok>
 8002370:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8002376:	e01d      	b.n	80023b4 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8002378:	6978      	ldr	r0, [r7, #20]
 800237a:	f7fd ff79 	bl	8000270 <strlen>
 800237e:	4603      	mov	r3, r0
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	693c      	ldr	r4, [r7, #16]
 8002384:	1c63      	adds	r3, r4, #1
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	4610      	mov	r0, r2
 800238a:	f013 fc75 	bl	8015c78 <malloc>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	4b42      	ldr	r3, [pc, #264]	; (800249c <nmea_parse+0x148>)
 8002394:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	3b01      	subs	r3, #1
 800239c:	4a3f      	ldr	r2, [pc, #252]	; (800249c <nmea_parse+0x148>)
 800239e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a2:	6979      	ldr	r1, [r7, #20]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f015 fd0c 	bl	8017dc2 <strcpy>
        token = strtok(NULL, "$");
 80023aa:	493d      	ldr	r1, [pc, #244]	; (80024a0 <nmea_parse+0x14c>)
 80023ac:	2000      	movs	r0, #0
 80023ae:	f015 fc0f 	bl	8017bd0 <strtok>
 80023b2:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1de      	bne.n	8002378 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	e052      	b.n	8002466 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 80023c0:	4a36      	ldr	r2, [pc, #216]	; (800249c <nmea_parse+0x148>)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c8:	4936      	ldr	r1, [pc, #216]	; (80024a4 <nmea_parse+0x150>)
 80023ca:	4618      	mov	r0, r3
 80023cc:	f015 fc5c 	bl	8017c88 <strstr>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d044      	beq.n	8002460 <nmea_parse+0x10c>
 80023d6:	4a31      	ldr	r2, [pc, #196]	; (800249c <nmea_parse+0x148>)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fca0 	bl	8001d24 <gps_checksum>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d03a      	beq.n	8002460 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 80023ea:	4a2c      	ldr	r2, [pc, #176]	; (800249c <nmea_parse+0x148>)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f2:	492d      	ldr	r1, [pc, #180]	; (80024a8 <nmea_parse+0x154>)
 80023f4:	4618      	mov	r0, r3
 80023f6:	f015 fc47 	bl	8017c88 <strstr>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8002400:	4a26      	ldr	r2, [pc, #152]	; (800249c <nmea_parse+0x148>)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002408:	4619      	mov	r1, r3
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ff30 	bl	8002270 <nmea_GNRMC>
 8002410:	e026      	b.n	8002460 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 8002412:	4a22      	ldr	r2, [pc, #136]	; (800249c <nmea_parse+0x148>)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241a:	4924      	ldr	r1, [pc, #144]	; (80024ac <nmea_parse+0x158>)
 800241c:	4618      	mov	r0, r3
 800241e:	f015 fc33 	bl	8017c88 <strstr>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8002428:	4a1c      	ldr	r2, [pc, #112]	; (800249c <nmea_parse+0x148>)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002430:	4619      	mov	r1, r3
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff fe92 	bl	800215c <nmea_GPGSA>
 8002438:	e012      	b.n	8002460 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 800243a:	4a18      	ldr	r2, [pc, #96]	; (800249c <nmea_parse+0x148>)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002442:	491b      	ldr	r1, [pc, #108]	; (80024b0 <nmea_parse+0x15c>)
 8002444:	4618      	mov	r0, r3
 8002446:	f015 fc1f 	bl	8017c88 <strstr>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8002450:	4a12      	ldr	r2, [pc, #72]	; (800249c <nmea_parse+0x148>)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002458:	4619      	mov	r1, r3
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff fcac 	bl	8001db8 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3301      	adds	r3, #1
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	429a      	cmp	r2, r3
 800246c:	dba8      	blt.n	80023c0 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	e009      	b.n	8002488 <nmea_parse+0x134>
 8002474:	4a09      	ldr	r2, [pc, #36]	; (800249c <nmea_parse+0x148>)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	4618      	mov	r0, r3
 800247e:	f013 fc03 	bl	8015c88 <free>
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	3301      	adds	r3, #1
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	429a      	cmp	r2, r3
 800248e:	dbf1      	blt.n	8002474 <nmea_parse+0x120>


}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	371c      	adds	r7, #28
 8002496:	46bd      	mov	sp, r7
 8002498:	bd90      	pop	{r4, r7, pc}
 800249a:	bf00      	nop
 800249c:	20000a7c 	.word	0x20000a7c
 80024a0:	0801cd60 	.word	0x0801cd60
 80024a4:	0801cd64 	.word	0x0801cd64
 80024a8:	0801cd68 	.word	0x0801cd68
 80024ac:	0801cd70 	.word	0x0801cd70
 80024b0:	0801cd78 	.word	0x0801cd78
 80024b4:	00000000 	.word	0x00000000

080024b8 <distancecalc>:

}



double distancecalc(double lat1, double lat2, double long1, double long2){
 80024b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024bc:	b08a      	sub	sp, #40	; 0x28
 80024be:	af00      	add	r7, sp, #0
 80024c0:	ed87 0b06 	vstr	d0, [r7, #24]
 80024c4:	ed87 1b04 	vstr	d1, [r7, #16]
 80024c8:	ed87 2b02 	vstr	d2, [r7, #8]
 80024cc:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 80024dc:	a361      	add	r3, pc, #388	; (adr r3, 8002664 <distancecalc+0x1ac>)
 80024de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024e6:	f7fe f887 	bl	80005f8 <__aeabi_dmul>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	ec43 2b17 	vmov	d7, r2, r3
 80024f2:	eeb0 0a47 	vmov.f32	s0, s14
 80024f6:	eef0 0a67 	vmov.f32	s1, s15
 80024fa:	f018 fa76 	bl	801a9ea <sinl>
 80024fe:	ec55 4b10 	vmov	r4, r5, d0
 8002502:	a358      	add	r3, pc, #352	; (adr r3, 8002664 <distancecalc+0x1ac>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800250c:	f7fe f874 	bl	80005f8 <__aeabi_dmul>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	ec43 2b17 	vmov	d7, r2, r3
 8002518:	eeb0 0a47 	vmov.f32	s0, s14
 800251c:	eef0 0a67 	vmov.f32	s1, s15
 8002520:	f018 fa63 	bl	801a9ea <sinl>
 8002524:	ec53 2b10 	vmov	r2, r3, d0
 8002528:	4620      	mov	r0, r4
 800252a:	4629      	mov	r1, r5
 800252c:	f7fe f864 	bl	80005f8 <__aeabi_dmul>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4614      	mov	r4, r2
 8002536:	461d      	mov	r5, r3
 8002538:	a34a      	add	r3, pc, #296	; (adr r3, 8002664 <distancecalc+0x1ac>)
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002542:	f7fe f859 	bl	80005f8 <__aeabi_dmul>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	ec43 2b17 	vmov	d7, r2, r3
 800254e:	eeb0 0a47 	vmov.f32	s0, s14
 8002552:	eef0 0a67 	vmov.f32	s1, s15
 8002556:	f018 fa46 	bl	801a9e6 <cosl>
 800255a:	ec59 8b10 	vmov	r8, r9, d0
 800255e:	a341      	add	r3, pc, #260	; (adr r3, 8002664 <distancecalc+0x1ac>)
 8002560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002564:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002568:	f7fe f846 	bl	80005f8 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	ec43 2b17 	vmov	d7, r2, r3
 8002574:	eeb0 0a47 	vmov.f32	s0, s14
 8002578:	eef0 0a67 	vmov.f32	s1, s15
 800257c:	f018 fa33 	bl	801a9e6 <cosl>
 8002580:	ec53 2b10 	vmov	r2, r3, d0
 8002584:	4640      	mov	r0, r8
 8002586:	4649      	mov	r1, r9
 8002588:	f7fe f836 	bl	80005f8 <__aeabi_dmul>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4690      	mov	r8, r2
 8002592:	4699      	mov	r9, r3
 8002594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002598:	e9d7 0100 	ldrd	r0, r1, [r7]
 800259c:	f7fd fe74 	bl	8000288 <__aeabi_dsub>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4610      	mov	r0, r2
 80025a6:	4619      	mov	r1, r3
 80025a8:	a32e      	add	r3, pc, #184	; (adr r3, 8002664 <distancecalc+0x1ac>)
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	f7fe f823 	bl	80005f8 <__aeabi_dmul>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	ec43 2b17 	vmov	d7, r2, r3
 80025ba:	eeb0 0a47 	vmov.f32	s0, s14
 80025be:	eef0 0a67 	vmov.f32	s1, s15
 80025c2:	f018 fa10 	bl	801a9e6 <cosl>
 80025c6:	ec53 2b10 	vmov	r2, r3, d0
 80025ca:	4640      	mov	r0, r8
 80025cc:	4649      	mov	r1, r9
 80025ce:	f7fe f813 	bl	80005f8 <__aeabi_dmul>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4620      	mov	r0, r4
 80025d8:	4629      	mov	r1, r5
 80025da:	f7fd fe57 	bl	800028c <__adddf3>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	ec43 2b17 	vmov	d7, r2, r3
 80025e6:	eeb0 1a47 	vmov.f32	s2, s14
 80025ea:	eef0 1a67 	vmov.f32	s3, s15
 80025ee:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8002658 <distancecalc+0x1a0>
 80025f2:	f018 f99a 	bl	801a92a <fmin>
 80025f6:	eeb0 7a40 	vmov.f32	s14, s0
 80025fa:	eef0 7a60 	vmov.f32	s15, s1
 80025fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002602:	eef0 0a67 	vmov.f32	s1, s15
 8002606:	f018 f9f2 	bl	801a9ee <acosl>
 800260a:	ec51 0b10 	vmov	r0, r1, d0
 800260e:	a317      	add	r3, pc, #92	; (adr r3, 800266c <distancecalc+0x1b4>)
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	f7fd fff0 	bl	80005f8 <__aeabi_dmul>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	*distanceparcouru=*distanceparcouru + distance;
 8002620:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <distancecalc+0x1a8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002628:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <distancecalc+0x1a8>)
 800262a:	681c      	ldr	r4, [r3, #0]
 800262c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002630:	f7fd fe2c 	bl	800028c <__adddf3>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	e9c4 2300 	strd	r2, r3, [r4]

	return distance;
 800263c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002640:	ec43 2b17 	vmov	d7, r2, r3
}
 8002644:	eeb0 0a47 	vmov.f32	s0, s14
 8002648:	eef0 0a67 	vmov.f32	s1, s15
 800264c:	3728      	adds	r7, #40	; 0x28
 800264e:	46bd      	mov	sp, r7
 8002650:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002654:	f3af 8000 	nop.w
 8002658:	00000000 	.word	0x00000000
 800265c:	3ff00000 	.word	0x3ff00000
 8002660:	20000a50 	.word	0x20000a50
 8002664:	a2529d39 	.word	0xa2529d39
 8002668:	3f91df46 	.word	0x3f91df46
 800266c:	00000000 	.word	0x00000000
 8002670:	41584dae 	.word	0x41584dae

08002674 <WE_ReadReg>:
 */
inline int8_t WE_ReadReg(WE_sensorInterface_t *interface,
                         uint8_t regAdr,
                         uint16_t numBytesToRead,
                         uint8_t *data)
{
 8002674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002676:	b08b      	sub	sp, #44	; 0x2c
 8002678:	af04      	add	r7, sp, #16
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	72fb      	strb	r3, [r7, #11]
 8002682:	4613      	mov	r3, r2
 8002684:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	75fb      	strb	r3, [r7, #23]

  switch (interface->interfaceType)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	785b      	ldrb	r3, [r3, #1]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d008      	beq.n	80026a4 <WE_ReadReg+0x30>
 8002692:	2b02      	cmp	r3, #2
 8002694:	f300 80e7 	bgt.w	8002866 <WE_ReadReg+0x1f2>
 8002698:	2b00      	cmp	r3, #0
 800269a:	d038      	beq.n	800270e <WE_ReadReg+0x9a>
 800269c:	2b01      	cmp	r3, #1
 800269e:	f000 8099 	beq.w	80027d4 <WE_ReadReg+0x160>
 80026a2:	e0e0      	b.n	8002866 <WE_ReadReg+0x1f2>
  {
  case WE_i2c_fifo:
#ifdef HAL_I2C_MODULE_ENABLED
	if (interface->options.i2c.burstMode != 0 || numBytesToRead == 1)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	795b      	ldrb	r3, [r3, #5]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <WE_ReadReg+0x46>
 80026b2:	893b      	ldrh	r3, [r7, #8]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	f040 80d9 	bne.w	800286c <WE_ReadReg+0x1f8>
	{
	  if (numBytesToRead > 1 && interface->options.i2c.useRegAddrMsbForMultiBytesRead)
 80026ba:	893b      	ldrh	r3, [r7, #8]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d90a      	bls.n	80026d6 <WE_ReadReg+0x62>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	795b      	ldrb	r3, [r3, #5]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <WE_ReadReg+0x62>
	  {
		/* Register address most significant bit is used to enable multi bytes read */
		regAdr |= 1 << 7;
 80026ce:	7afb      	ldrb	r3, [r7, #11]
 80026d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026d4:	72fb      	strb	r3, [r7, #11]
	  }
	  status = I2Cx_ReadBytes((I2C_HandleTypeDef*) interface->handle,
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6958      	ldr	r0, [r3, #20]
							  interface->options.i2c.address << 1, /* stm32 needs shifted value */
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	791b      	ldrb	r3, [r3, #4]
	  status = I2Cx_ReadBytes((I2C_HandleTypeDef*) interface->handle,
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	b2d9      	uxtb	r1, r3
 80026e2:	7afb      	ldrb	r3, [r7, #11]
 80026e4:	b29c      	uxth	r4, r3
							  (uint16_t) regAdr,
							  numBytesToRead,
							  interface->options.i2c.slaveTransmitterMode,
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	795b      	ldrb	r3, [r3, #5]
 80026ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80026ee:	b2db      	uxtb	r3, r3
	  status = I2Cx_ReadBytes((I2C_HandleTypeDef*) interface->handle,
 80026f0:	461e      	mov	r6, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8a1b      	ldrh	r3, [r3, #16]
 80026f6:	893d      	ldrh	r5, [r7, #8]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	9202      	str	r2, [sp, #8]
 80026fc:	9301      	str	r3, [sp, #4]
 80026fe:	9600      	str	r6, [sp, #0]
 8002700:	462b      	mov	r3, r5
 8002702:	4622      	mov	r2, r4
 8002704:	f000 f9b3 	bl	8002a6e <I2Cx_ReadBytes>
 8002708:	4603      	mov	r3, r0
 800270a:	75fb      	strb	r3, [r7, #23]
							  data);
	}
#else
    status = HAL_ERROR;
#endif /* HAL_I2C_MODULE_ENABLED */
    break;
 800270c:	e0ae      	b.n	800286c <WE_ReadReg+0x1f8>

  case WE_i2c:
#ifdef HAL_I2C_MODULE_ENABLED
    if (interface->options.i2c.burstMode != 0 || numBytesToRead == 1)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	795b      	ldrb	r3, [r3, #5]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <WE_ReadReg+0xae>
 800271c:	893b      	ldrh	r3, [r7, #8]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d12a      	bne.n	8002778 <WE_ReadReg+0x104>
    {
      if (numBytesToRead > 1 && interface->options.i2c.useRegAddrMsbForMultiBytesRead)
 8002722:	893b      	ldrh	r3, [r7, #8]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d90a      	bls.n	800273e <WE_ReadReg+0xca>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	795b      	ldrb	r3, [r3, #5]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <WE_ReadReg+0xca>
      {
        /* Register address most significant bit is used to enable multi bytes read */
        regAdr |= 1 << 7;
 8002736:	7afb      	ldrb	r3, [r7, #11]
 8002738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800273c:	72fb      	strb	r3, [r7, #11]
      }
      status = I2Cx_ReadBytes((I2C_HandleTypeDef*) interface->handle,
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6958      	ldr	r0, [r3, #20]
                              interface->options.i2c.address << 1, /* stm32 needs shifted value */
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	791b      	ldrb	r3, [r3, #4]
      status = I2Cx_ReadBytes((I2C_HandleTypeDef*) interface->handle,
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	b2d9      	uxtb	r1, r3
 800274a:	7afb      	ldrb	r3, [r7, #11]
 800274c:	b29c      	uxth	r4, r3
                              (uint16_t) regAdr,
                              numBytesToRead,
                              interface->options.i2c.slaveTransmitterMode,
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	795b      	ldrb	r3, [r3, #5]
 8002752:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002756:	b2db      	uxtb	r3, r3
      status = I2Cx_ReadBytes((I2C_HandleTypeDef*) interface->handle,
 8002758:	461e      	mov	r6, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8a1b      	ldrh	r3, [r3, #16]
 800275e:	893d      	ldrh	r5, [r7, #8]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	9202      	str	r2, [sp, #8]
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	9600      	str	r6, [sp, #0]
 8002768:	462b      	mov	r3, r5
 800276a:	4622      	mov	r2, r4
 800276c:	f000 f97f 	bl	8002a6e <I2Cx_ReadBytes>
 8002770:	4603      	mov	r3, r0
 8002772:	75fb      	strb	r3, [r7, #23]
 8002774:	bf00      	nop
      }
    }
#else
    status = HAL_ERROR;
#endif /* HAL_I2C_MODULE_ENABLED */
    break;
 8002776:	e07b      	b.n	8002870 <WE_ReadReg+0x1fc>
      for (uint16_t i = 0; (i < numBytesToRead) && (status == HAL_OK); i++)
 8002778:	2300      	movs	r3, #0
 800277a:	82bb      	strh	r3, [r7, #20]
 800277c:	e022      	b.n	80027c4 <WE_ReadReg+0x150>
        status = I2Cx_ReadBytes((I2C_HandleTypeDef*) interface->handle,
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6958      	ldr	r0, [r3, #20]
                                interface->options.i2c.address << 1, /* stm32 needs shifted value */
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	791b      	ldrb	r3, [r3, #4]
        status = I2Cx_ReadBytes((I2C_HandleTypeDef*) interface->handle,
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	b2dc      	uxtb	r4, r3
 800278a:	7afb      	ldrb	r3, [r7, #11]
 800278c:	b29a      	uxth	r2, r3
 800278e:	8abb      	ldrh	r3, [r7, #20]
 8002790:	4413      	add	r3, r2
 8002792:	b29d      	uxth	r5, r3
                                interface->options.i2c.slaveTransmitterMode,
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	795b      	ldrb	r3, [r3, #5]
 8002798:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800279c:	b2db      	uxtb	r3, r3
        status = I2Cx_ReadBytes((I2C_HandleTypeDef*) interface->handle,
 800279e:	461e      	mov	r6, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8a1b      	ldrh	r3, [r3, #16]
 80027a4:	8aba      	ldrh	r2, [r7, #20]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	440a      	add	r2, r1
 80027aa:	9202      	str	r2, [sp, #8]
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	9600      	str	r6, [sp, #0]
 80027b0:	2301      	movs	r3, #1
 80027b2:	462a      	mov	r2, r5
 80027b4:	4621      	mov	r1, r4
 80027b6:	f000 f95a 	bl	8002a6e <I2Cx_ReadBytes>
 80027ba:	4603      	mov	r3, r0
 80027bc:	75fb      	strb	r3, [r7, #23]
      for (uint16_t i = 0; (i < numBytesToRead) && (status == HAL_OK); i++)
 80027be:	8abb      	ldrh	r3, [r7, #20]
 80027c0:	3301      	adds	r3, #1
 80027c2:	82bb      	strh	r3, [r7, #20]
 80027c4:	8aba      	ldrh	r2, [r7, #20]
 80027c6:	893b      	ldrh	r3, [r7, #8]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d251      	bcs.n	8002870 <WE_ReadReg+0x1fc>
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0d5      	beq.n	800277e <WE_ReadReg+0x10a>
    break;
 80027d2:	e04d      	b.n	8002870 <WE_ReadReg+0x1fc>

  case WE_spi:
#ifdef HAL_SPI_MODULE_ENABLED
    if (interface->options.spi.burstMode != 0 || numBytesToRead == 1)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	7b9b      	ldrb	r3, [r3, #14]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <WE_ReadReg+0x174>
 80027e2:	893b      	ldrh	r3, [r7, #8]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d115      	bne.n	8002814 <WE_ReadReg+0x1a0>
    {
      status = SPIx_ReadBytes((SPI_HandleTypeDef*) interface->handle,
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6958      	ldr	r0, [r3, #20]
                              (GPIO_TypeDef*) interface->options.spi.chipSelectPort,
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6899      	ldr	r1, [r3, #8]
      status = SPIx_ReadBytes((SPI_HandleTypeDef*) interface->handle,
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	899c      	ldrh	r4, [r3, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8a1b      	ldrh	r3, [r3, #16]
 80027f8:	7afd      	ldrb	r5, [r7, #11]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	9202      	str	r2, [sp, #8]
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	893b      	ldrh	r3, [r7, #8]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	462b      	mov	r3, r5
 8002806:	4622      	mov	r2, r4
 8002808:	f000 f97e 	bl	8002b08 <SPIx_ReadBytes>
 800280c:	4603      	mov	r3, r0
 800280e:	75fb      	strb	r3, [r7, #23]
 8002810:	bf00      	nop
      }
    }
#else
    status = HAL_ERROR;
#endif /* HAL_SPI_MODULE_ENABLED */
    break;
 8002812:	e02f      	b.n	8002874 <WE_ReadReg+0x200>
      for (uint16_t i = 0; (i < numBytesToRead) && (status == HAL_OK); i++)
 8002814:	2300      	movs	r3, #0
 8002816:	827b      	strh	r3, [r7, #18]
 8002818:	e01d      	b.n	8002856 <WE_ReadReg+0x1e2>
        status = SPIx_ReadBytes((SPI_HandleTypeDef*) interface->handle,
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6958      	ldr	r0, [r3, #20]
                                (GPIO_TypeDef*) interface->options.spi.chipSelectPort,
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689c      	ldr	r4, [r3, #8]
        status = SPIx_ReadBytes((SPI_HandleTypeDef*) interface->handle,
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	899d      	ldrh	r5, [r3, #12]
 8002826:	8a7b      	ldrh	r3, [r7, #18]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	7afb      	ldrb	r3, [r7, #11]
 800282c:	4413      	add	r3, r2
 800282e:	b2de      	uxtb	r6, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8a1b      	ldrh	r3, [r3, #16]
 8002834:	8a7a      	ldrh	r2, [r7, #18]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	440a      	add	r2, r1
 800283a:	9202      	str	r2, [sp, #8]
 800283c:	9301      	str	r3, [sp, #4]
 800283e:	2301      	movs	r3, #1
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	4633      	mov	r3, r6
 8002844:	462a      	mov	r2, r5
 8002846:	4621      	mov	r1, r4
 8002848:	f000 f95e 	bl	8002b08 <SPIx_ReadBytes>
 800284c:	4603      	mov	r3, r0
 800284e:	75fb      	strb	r3, [r7, #23]
      for (uint16_t i = 0; (i < numBytesToRead) && (status == HAL_OK); i++)
 8002850:	8a7b      	ldrh	r3, [r7, #18]
 8002852:	3301      	adds	r3, #1
 8002854:	827b      	strh	r3, [r7, #18]
 8002856:	8a7a      	ldrh	r2, [r7, #18]
 8002858:	893b      	ldrh	r3, [r7, #8]
 800285a:	429a      	cmp	r2, r3
 800285c:	d20a      	bcs.n	8002874 <WE_ReadReg+0x200>
 800285e:	7dfb      	ldrb	r3, [r7, #23]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0da      	beq.n	800281a <WE_ReadReg+0x1a6>
    break;
 8002864:	e006      	b.n	8002874 <WE_ReadReg+0x200>


  default:
	  status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	75fb      	strb	r3, [r7, #23]
	  break;
 800286a:	e004      	b.n	8002876 <WE_ReadReg+0x202>
    break;
 800286c:	bf00      	nop
 800286e:	e002      	b.n	8002876 <WE_ReadReg+0x202>
    break;
 8002870:	bf00      	nop
 8002872:	e000      	b.n	8002876 <WE_ReadReg+0x202>
    break;
 8002874:	bf00      	nop
  }

  return status == HAL_OK ? WE_SUCCESS : WE_FAIL;
 8002876:	7dfb      	ldrb	r3, [r7, #23]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <WE_ReadReg+0x20c>
 800287c:	2300      	movs	r3, #0
 800287e:	e001      	b.n	8002884 <WE_ReadReg+0x210>
 8002880:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002884:	4618      	mov	r0, r3
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800288c <WE_WriteReg>:
 */
inline int8_t WE_WriteReg(WE_sensorInterface_t *interface,
                          uint8_t regAdr,
                          uint16_t numBytesToWrite,
                          uint8_t *data)
{
 800288c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288e:	b08b      	sub	sp, #44	; 0x2c
 8002890:	af04      	add	r7, sp, #16
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	72fb      	strb	r3, [r7, #11]
 800289a:	4613      	mov	r3, r2
 800289c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	75fb      	strb	r3, [r7, #23]

  switch (interface->interfaceType)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d007      	beq.n	80028ba <WE_WriteReg+0x2e>
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	f300 80a7 	bgt.w	80029fe <WE_WriteReg+0x172>
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d014      	beq.n	80028de <WE_WriteReg+0x52>
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d059      	beq.n	800296c <WE_WriteReg+0xe0>
 80028b8:	e0a1      	b.n	80029fe <WE_WriteReg+0x172>
  {


  case WE_i2c_fifo:
#ifdef HAL_I2C_MODULE_ENABLED
	  status = HAL_I2C_Master_Transmit(interface->handle,
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6958      	ldr	r0, [r3, #20]
			                          interface->options.i2c.address << 1,
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	791b      	ldrb	r3, [r3, #4]
 80028c2:	b29b      	uxth	r3, r3
	  status = HAL_I2C_Master_Transmit(interface->handle,
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	b299      	uxth	r1, r3
									  data,
									  numBytesToWrite,
									  interface->options.writeTimeout);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8a5b      	ldrh	r3, [r3, #18]
	  status = HAL_I2C_Master_Transmit(interface->handle,
 80028cc:	461a      	mov	r2, r3
 80028ce:	893b      	ldrh	r3, [r7, #8]
 80028d0:	9200      	str	r2, [sp, #0]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	f005 fe0a 	bl	80084ec <HAL_I2C_Master_Transmit>
 80028d8:	4603      	mov	r3, r0
 80028da:	75fb      	strb	r3, [r7, #23]
#else
    status = HAL_ERROR;
#endif /* HAL_I2C_MODULE_ENABLED */
	  break;
 80028dc:	e095      	b.n	8002a0a <WE_WriteReg+0x17e>

  case WE_i2c:
#ifdef HAL_I2C_MODULE_ENABLED
    if (interface->options.i2c.burstMode != 0 || numBytesToWrite == 1)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	795b      	ldrb	r3, [r3, #5]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d102      	bne.n	80028f2 <WE_WriteReg+0x66>
 80028ec:	893b      	ldrh	r3, [r7, #8]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d115      	bne.n	800291e <WE_WriteReg+0x92>
    {
      status = I2Cx_WriteBytes((I2C_HandleTypeDef*) interface->handle,
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6958      	ldr	r0, [r3, #20]
                               interface->options.i2c.address << 1, /* stm32 needs shifted value */
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	791b      	ldrb	r3, [r3, #4]
      status = I2Cx_WriteBytes((I2C_HandleTypeDef*) interface->handle,
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	b2d9      	uxtb	r1, r3
 80028fe:	7afb      	ldrb	r3, [r7, #11]
 8002900:	b29c      	uxth	r4, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8a5b      	ldrh	r3, [r3, #18]
 8002906:	893d      	ldrh	r5, [r7, #8]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	9201      	str	r2, [sp, #4]
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	462b      	mov	r3, r5
 8002910:	4622      	mov	r2, r4
 8002912:	f000 f8da 	bl	8002aca <I2Cx_WriteBytes>
 8002916:	4603      	mov	r3, r0
 8002918:	75fb      	strb	r3, [r7, #23]
 800291a:	bf00      	nop
      }
    }
#else
    status = HAL_ERROR;
#endif /* HAL_I2C_MODULE_ENABLED */
    break;
 800291c:	e072      	b.n	8002a04 <WE_WriteReg+0x178>
      for (uint16_t i = 0; (i < numBytesToWrite) && (status == HAL_OK); i++)
 800291e:	2300      	movs	r3, #0
 8002920:	82bb      	strh	r3, [r7, #20]
 8002922:	e01b      	b.n	800295c <WE_WriteReg+0xd0>
        status = I2Cx_WriteBytes((I2C_HandleTypeDef*) interface->handle,
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6958      	ldr	r0, [r3, #20]
                                 interface->options.i2c.address << 1, /* stm32 needs shifted value */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	791b      	ldrb	r3, [r3, #4]
        status = I2Cx_WriteBytes((I2C_HandleTypeDef*) interface->handle,
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	b2dc      	uxtb	r4, r3
 8002930:	7afb      	ldrb	r3, [r7, #11]
 8002932:	b29a      	uxth	r2, r3
 8002934:	8abb      	ldrh	r3, [r7, #20]
 8002936:	4413      	add	r3, r2
 8002938:	b29d      	uxth	r5, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8a5b      	ldrh	r3, [r3, #18]
 800293e:	8aba      	ldrh	r2, [r7, #20]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	440a      	add	r2, r1
 8002944:	9201      	str	r2, [sp, #4]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	2301      	movs	r3, #1
 800294a:	462a      	mov	r2, r5
 800294c:	4621      	mov	r1, r4
 800294e:	f000 f8bc 	bl	8002aca <I2Cx_WriteBytes>
 8002952:	4603      	mov	r3, r0
 8002954:	75fb      	strb	r3, [r7, #23]
      for (uint16_t i = 0; (i < numBytesToWrite) && (status == HAL_OK); i++)
 8002956:	8abb      	ldrh	r3, [r7, #20]
 8002958:	3301      	adds	r3, #1
 800295a:	82bb      	strh	r3, [r7, #20]
 800295c:	8aba      	ldrh	r2, [r7, #20]
 800295e:	893b      	ldrh	r3, [r7, #8]
 8002960:	429a      	cmp	r2, r3
 8002962:	d24f      	bcs.n	8002a04 <WE_WriteReg+0x178>
 8002964:	7dfb      	ldrb	r3, [r7, #23]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0dc      	beq.n	8002924 <WE_WriteReg+0x98>
    break;
 800296a:	e04b      	b.n	8002a04 <WE_WriteReg+0x178>

  case WE_spi:
#ifdef HAL_SPI_MODULE_ENABLED
    if (interface->options.spi.burstMode != 0 || numBytesToWrite == 1)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	7b9b      	ldrb	r3, [r3, #14]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <WE_WriteReg+0xf4>
 800297a:	893b      	ldrh	r3, [r7, #8]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d115      	bne.n	80029ac <WE_WriteReg+0x120>
    {
      status = SPIx_WriteBytes((SPI_HandleTypeDef*) interface->handle,
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6958      	ldr	r0, [r3, #20]
                               (GPIO_TypeDef*) interface->options.spi.chipSelectPort,
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6899      	ldr	r1, [r3, #8]
      status = SPIx_WriteBytes((SPI_HandleTypeDef*) interface->handle,
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	899c      	ldrh	r4, [r3, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8a5b      	ldrh	r3, [r3, #18]
 8002990:	7afd      	ldrb	r5, [r7, #11]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	9202      	str	r2, [sp, #8]
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	893b      	ldrh	r3, [r7, #8]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	462b      	mov	r3, r5
 800299e:	4622      	mov	r2, r4
 80029a0:	f000 f8eb 	bl	8002b7a <SPIx_WriteBytes>
 80029a4:	4603      	mov	r3, r0
 80029a6:	75fb      	strb	r3, [r7, #23]
 80029a8:	bf00      	nop
      }
    }
#else
    status = HAL_ERROR;
#endif /* HAL_SPI_MODULE_ENABLED */
    break;
 80029aa:	e02d      	b.n	8002a08 <WE_WriteReg+0x17c>
      for (uint16_t i = 0; (i < numBytesToWrite) && (status == HAL_OK); i++)
 80029ac:	2300      	movs	r3, #0
 80029ae:	827b      	strh	r3, [r7, #18]
 80029b0:	e01d      	b.n	80029ee <WE_WriteReg+0x162>
        status = SPIx_WriteBytes((SPI_HandleTypeDef*) interface->handle,
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6958      	ldr	r0, [r3, #20]
                                 (GPIO_TypeDef*) interface->options.spi.chipSelectPort,
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	689c      	ldr	r4, [r3, #8]
        status = SPIx_WriteBytes((SPI_HandleTypeDef*) interface->handle,
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	899d      	ldrh	r5, [r3, #12]
 80029be:	8a7b      	ldrh	r3, [r7, #18]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	7afb      	ldrb	r3, [r7, #11]
 80029c4:	4413      	add	r3, r2
 80029c6:	b2de      	uxtb	r6, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8a5b      	ldrh	r3, [r3, #18]
 80029cc:	8a7a      	ldrh	r2, [r7, #18]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	440a      	add	r2, r1
 80029d2:	9202      	str	r2, [sp, #8]
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	2301      	movs	r3, #1
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	4633      	mov	r3, r6
 80029dc:	462a      	mov	r2, r5
 80029de:	4621      	mov	r1, r4
 80029e0:	f000 f8cb 	bl	8002b7a <SPIx_WriteBytes>
 80029e4:	4603      	mov	r3, r0
 80029e6:	75fb      	strb	r3, [r7, #23]
      for (uint16_t i = 0; (i < numBytesToWrite) && (status == HAL_OK); i++)
 80029e8:	8a7b      	ldrh	r3, [r7, #18]
 80029ea:	3301      	adds	r3, #1
 80029ec:	827b      	strh	r3, [r7, #18]
 80029ee:	8a7a      	ldrh	r2, [r7, #18]
 80029f0:	893b      	ldrh	r3, [r7, #8]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d208      	bcs.n	8002a08 <WE_WriteReg+0x17c>
 80029f6:	7dfb      	ldrb	r3, [r7, #23]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0da      	beq.n	80029b2 <WE_WriteReg+0x126>
    break;
 80029fc:	e004      	b.n	8002a08 <WE_WriteReg+0x17c>

  default:
	  status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	75fb      	strb	r3, [r7, #23]
	  break;
 8002a02:	e002      	b.n	8002a0a <WE_WriteReg+0x17e>
    break;
 8002a04:	bf00      	nop
 8002a06:	e000      	b.n	8002a0a <WE_WriteReg+0x17e>
    break;
 8002a08:	bf00      	nop
  }

  return status == HAL_OK ? WE_SUCCESS : WE_FAIL;
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <WE_WriteReg+0x188>
 8002a10:	2300      	movs	r3, #0
 8002a12:	e001      	b.n	8002a18 <WE_WriteReg+0x18c>
 8002a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	371c      	adds	r7, #28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a20 <WE_isSensorInterfaceReady>:
 * @brief Checks if the sensor interface is ready.
 * @param[in] interface Sensor interface
 * @return WE_SUCCESS if interface is ready, WE_FAIL if not.
 */
int8_t WE_isSensorInterfaceReady(WE_sensorInterface_t* interface)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  switch (interface->interfaceType)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	785b      	ldrb	r3, [r3, #1]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <WE_isSensorInterfaceReady+0x16>
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d014      	beq.n	8002a5e <WE_isSensorInterfaceReady+0x3e>
 8002a34:	e015      	b.n	8002a62 <WE_isSensorInterfaceReady+0x42>
  {
  case WE_i2c:
#ifdef HAL_I2C_MODULE_ENABLED
    return (HAL_OK == HAL_I2C_IsDeviceReady((I2C_HandleTypeDef*) interface->handle,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6958      	ldr	r0, [r3, #20]
                                            interface->options.i2c.address << 1,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	791b      	ldrb	r3, [r3, #4]
 8002a3e:	b29b      	uxth	r3, r3
    return (HAL_OK == HAL_I2C_IsDeviceReady((I2C_HandleTypeDef*) interface->handle,
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	b299      	uxth	r1, r3
 8002a44:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a48:	2240      	movs	r2, #64	; 0x40
 8002a4a:	f006 f98b 	bl	8008d64 <HAL_I2C_IsDeviceReady>
 8002a4e:	4603      	mov	r3, r0
                                            64,
                                            5000)) ? WE_SUCCESS : WE_FAIL;
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <WE_isSensorInterfaceReady+0x38>
 8002a54:	2300      	movs	r3, #0
 8002a56:	e006      	b.n	8002a66 <WE_isSensorInterfaceReady+0x46>
 8002a58:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5c:	e003      	b.n	8002a66 <WE_isSensorInterfaceReady+0x46>
    return WE_FAIL;
#endif

  case WE_spi:
#ifdef HAL_SPI_MODULE_ENABLED
    return WE_SUCCESS;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e001      	b.n	8002a66 <WE_isSensorInterfaceReady+0x46>
#else
    return WE_FAIL;
#endif

  default:
    return WE_FAIL;
 8002a62:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <I2Cx_ReadBytes>:
                                        uint16_t reg,
                                        uint16_t numBytesToRead,
                                        uint8_t slaveTransmitterMode,
                                        uint16_t timeout,
                                        uint8_t *value)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b088      	sub	sp, #32
 8002a72:	af04      	add	r7, sp, #16
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	4608      	mov	r0, r1
 8002a78:	4611      	mov	r1, r2
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	72fb      	strb	r3, [r7, #11]
 8002a80:	460b      	mov	r3, r1
 8002a82:	813b      	strh	r3, [r7, #8]
 8002a84:	4613      	mov	r3, r2
 8002a86:	80fb      	strh	r3, [r7, #6]
  if (slaveTransmitterMode == 0)
 8002a88:	7e3b      	ldrb	r3, [r7, #24]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10e      	bne.n	8002aac <I2Cx_ReadBytes+0x3e>
  {
    return HAL_I2C_Mem_Read(handle,
 8002a8e:	7afb      	ldrb	r3, [r7, #11]
 8002a90:	b299      	uxth	r1, r3
 8002a92:	8bbb      	ldrh	r3, [r7, #28]
 8002a94:	893a      	ldrh	r2, [r7, #8]
 8002a96:	9302      	str	r3, [sp, #8]
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f006 f844 	bl	8008b30 <HAL_I2C_Mem_Read>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	e00a      	b.n	8002ac2 <I2Cx_ReadBytes+0x54>
                            numBytesToRead,
                            timeout);
  }
  else
  {
    return HAL_I2C_Master_Receive(handle,
 8002aac:	7afb      	ldrb	r3, [r7, #11]
 8002aae:	b299      	uxth	r1, r3
 8002ab0:	8bbb      	ldrh	r3, [r7, #28]
 8002ab2:	88fa      	ldrh	r2, [r7, #6]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	6a3a      	ldr	r2, [r7, #32]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f005 fe2e 	bl	800871c <HAL_I2C_Master_Receive>
 8002ac0:	4603      	mov	r3, r0
                                  addr,
                                  value,
                                  numBytesToRead,
                                  timeout);
  }
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <I2Cx_WriteBytes>:
                                         uint8_t addr,
                                         uint16_t reg,
                                         uint16_t numBytesToWrite,
                                         uint16_t timeout,
                                         uint8_t *value)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b088      	sub	sp, #32
 8002ace:	af04      	add	r7, sp, #16
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	4608      	mov	r0, r1
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4603      	mov	r3, r0
 8002ada:	72fb      	strb	r3, [r7, #11]
 8002adc:	460b      	mov	r3, r1
 8002ade:	813b      	strh	r3, [r7, #8]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	80fb      	strh	r3, [r7, #6]
  return HAL_I2C_Mem_Write(handle,
 8002ae4:	7afb      	ldrb	r3, [r7, #11]
 8002ae6:	b299      	uxth	r1, r3
 8002ae8:	8b3b      	ldrh	r3, [r7, #24]
 8002aea:	893a      	ldrh	r2, [r7, #8]
 8002aec:	9302      	str	r3, [sp, #8]
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	2301      	movs	r3, #1
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f005 ff05 	bl	8008908 <HAL_I2C_Mem_Write>
 8002afe:	4603      	mov	r3, r0
                           reg,
                           I2C_MEMADD_SIZE_8BIT,
                           value,
                           numBytesToWrite,
                           timeout);
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <SPIx_ReadBytes>:
                                        uint16_t chipSelectPin,
                                        uint8_t reg,
                                        uint16_t numBytesToRead,
                                        uint16_t timeout,
                                        uint8_t *value)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	4611      	mov	r1, r2
 8002b14:	461a      	mov	r2, r3
 8002b16:	460b      	mov	r3, r1
 8002b18:	80fb      	strh	r3, [r7, #6]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	75fb      	strb	r3, [r7, #23]
  HAL_GPIO_WritePin(chipSelectPort, chipSelectPin, GPIO_PIN_RESET);
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	2200      	movs	r2, #0
 8002b26:	4619      	mov	r1, r3
 8002b28:	68b8      	ldr	r0, [r7, #8]
 8002b2a:	f005 fc13 	bl	8008354 <HAL_GPIO_WritePin>
  /* Bit 7 has to be 0 for write and 1 for read operations */
  uint8_t header = reg | (1 << 7);
 8002b2e:	797b      	ldrb	r3, [r7, #5]
 8002b30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	75bb      	strb	r3, [r7, #22]
  /* For some sensors (e.g. HIDS) Bit 6 is used for auto-increment (MS) in multiple reads/writes (1: enabled, 0: disabled) */
//  if (numBytesToRead > 1)
//  {
//    header |= 1 << 6;
//  }
  status = HAL_SPI_Transmit(handle, &header, 1, timeout);
 8002b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b3a:	f107 0116 	add.w	r1, r7, #22
 8002b3e:	2201      	movs	r2, #1
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f009 fdc0 	bl	800c6c6 <HAL_SPI_Transmit>
 8002b46:	4603      	mov	r3, r0
 8002b48:	75fb      	strb	r3, [r7, #23]
  if (status != HAL_OK)
 8002b4a:	7dfb      	ldrb	r3, [r7, #23]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <SPIx_ReadBytes+0x4c>
  {
    return status;
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	e00e      	b.n	8002b72 <SPIx_ReadBytes+0x6a>
  }
  status = HAL_SPI_Receive(handle, value, numBytesToRead, timeout);
 8002b54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b56:	8c3a      	ldrh	r2, [r7, #32]
 8002b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f009 ff28 	bl	800c9b0 <HAL_SPI_Receive>
 8002b60:	4603      	mov	r3, r0
 8002b62:	75fb      	strb	r3, [r7, #23]
  HAL_GPIO_WritePin(chipSelectPort, chipSelectPin, GPIO_PIN_SET);
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	2201      	movs	r2, #1
 8002b68:	4619      	mov	r1, r3
 8002b6a:	68b8      	ldr	r0, [r7, #8]
 8002b6c:	f005 fbf2 	bl	8008354 <HAL_GPIO_WritePin>
  return status;
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <SPIx_WriteBytes>:
                                         uint16_t chipSelectPin,
                                         uint8_t reg,
                                         uint16_t numBytesToWrite,
                                         uint16_t timeout,
                                         uint8_t *value)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	4611      	mov	r1, r2
 8002b86:	461a      	mov	r2, r3
 8002b88:	460b      	mov	r3, r1
 8002b8a:	80fb      	strh	r3, [r7, #6]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	75fb      	strb	r3, [r7, #23]
  HAL_GPIO_WritePin(chipSelectPort, chipSelectPin, GPIO_PIN_RESET);
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	2200      	movs	r2, #0
 8002b98:	4619      	mov	r1, r3
 8002b9a:	68b8      	ldr	r0, [r7, #8]
 8002b9c:	f005 fbda 	bl	8008354 <HAL_GPIO_WritePin>
  /* Bit 7 has to be 0 for write and 1 for read operations */
  uint8_t header = reg & ~(1 << 7);
 8002ba0:	797b      	ldrb	r3, [r7, #5]
 8002ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	75bb      	strb	r3, [r7, #22]
  /* For some sensors (e.g. HIDS) Bit 6 is used for auto-increment (MS) in multiple reads/writes (1: enabled, 0: disabled) */
//  if (numBytesToWrite > 1)
//  {
//    header |= 1 << 6;
//  }
  status = HAL_SPI_Transmit(handle, &header, 1, timeout);
 8002baa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002bac:	f107 0116 	add.w	r1, r7, #22
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f009 fd87 	bl	800c6c6 <HAL_SPI_Transmit>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	75fb      	strb	r3, [r7, #23]
  if (status != HAL_OK)
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <SPIx_WriteBytes+0x4c>
  {
    return status;
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
 8002bc4:	e00e      	b.n	8002be4 <SPIx_WriteBytes+0x6a>
  }
  status = HAL_SPI_Transmit(handle, value, numBytesToWrite, timeout);
 8002bc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002bc8:	8c3a      	ldrh	r2, [r7, #32]
 8002bca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f009 fd7a 	bl	800c6c6 <HAL_SPI_Transmit>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	75fb      	strb	r3, [r7, #23]
  HAL_GPIO_WritePin(chipSelectPort, chipSelectPin, GPIO_PIN_SET);
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	4619      	mov	r1, r3
 8002bdc:	68b8      	ldr	r0, [r7, #8]
 8002bde:	f005 fbb9 	bl	8008354 <HAL_GPIO_WritePin>
  return status;
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <MX_SPI1_Init+0x74>)
 8002bf2:	4a1c      	ldr	r2, [pc, #112]	; (8002c64 <MX_SPI1_Init+0x78>)
 8002bf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bf6:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <MX_SPI1_Init+0x74>)
 8002bf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bfe:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <MX_SPI1_Init+0x74>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <MX_SPI1_Init+0x74>)
 8002c06:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <MX_SPI1_Init+0x74>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c12:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <MX_SPI1_Init+0x74>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <MX_SPI1_Init+0x74>)
 8002c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <MX_SPI1_Init+0x74>)
 8002c22:	2210      	movs	r2, #16
 8002c24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c26:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <MX_SPI1_Init+0x74>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <MX_SPI1_Init+0x74>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <MX_SPI1_Init+0x74>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <MX_SPI1_Init+0x74>)
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c3e:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <MX_SPI1_Init+0x74>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <MX_SPI1_Init+0x74>)
 8002c46:	2208      	movs	r2, #8
 8002c48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c4a:	4805      	ldr	r0, [pc, #20]	; (8002c60 <MX_SPI1_Init+0x74>)
 8002c4c:	f009 fc98 	bl	800c580 <HAL_SPI_Init>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002c56:	f7ff f860 	bl	8001d1a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000aec 	.word	0x20000aec
 8002c64:	40013000 	.word	0x40013000

08002c68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	f107 0314 	add.w	r3, r7, #20
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a53      	ldr	r2, [pc, #332]	; (8002dd4 <HAL_SPI_MspInit+0x16c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	f040 809f 	bne.w	8002dca <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c8c:	4b52      	ldr	r3, [pc, #328]	; (8002dd8 <HAL_SPI_MspInit+0x170>)
 8002c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c90:	4a51      	ldr	r2, [pc, #324]	; (8002dd8 <HAL_SPI_MspInit+0x170>)
 8002c92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c96:	6613      	str	r3, [r2, #96]	; 0x60
 8002c98:	4b4f      	ldr	r3, [pc, #316]	; (8002dd8 <HAL_SPI_MspInit+0x170>)
 8002c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca4:	4b4c      	ldr	r3, [pc, #304]	; (8002dd8 <HAL_SPI_MspInit+0x170>)
 8002ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca8:	4a4b      	ldr	r2, [pc, #300]	; (8002dd8 <HAL_SPI_MspInit+0x170>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cb0:	4b49      	ldr	r3, [pc, #292]	; (8002dd8 <HAL_SPI_MspInit+0x170>)
 8002cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbc:	4b46      	ldr	r3, [pc, #280]	; (8002dd8 <HAL_SPI_MspInit+0x170>)
 8002cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc0:	4a45      	ldr	r2, [pc, #276]	; (8002dd8 <HAL_SPI_MspInit+0x170>)
 8002cc2:	f043 0302 	orr.w	r3, r3, #2
 8002cc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cc8:	4b43      	ldr	r3, [pc, #268]	; (8002dd8 <HAL_SPI_MspInit+0x170>)
 8002cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002cd4:	2360      	movs	r3, #96	; 0x60
 8002cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ce4:	2305      	movs	r3, #5
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce8:	f107 0314 	add.w	r3, r7, #20
 8002cec:	4619      	mov	r1, r3
 8002cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cf2:	f005 f9c5 	bl	8008080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002cf6:	2320      	movs	r3, #32
 8002cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d02:	2303      	movs	r3, #3
 8002d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d06:	2305      	movs	r3, #5
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0a:	f107 0314 	add.w	r3, r7, #20
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4832      	ldr	r0, [pc, #200]	; (8002ddc <HAL_SPI_MspInit+0x174>)
 8002d12:	f005 f9b5 	bl	8008080 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002d16:	4b32      	ldr	r3, [pc, #200]	; (8002de0 <HAL_SPI_MspInit+0x178>)
 8002d18:	4a32      	ldr	r2, [pc, #200]	; (8002de4 <HAL_SPI_MspInit+0x17c>)
 8002d1a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8002d1c:	4b30      	ldr	r3, [pc, #192]	; (8002de0 <HAL_SPI_MspInit+0x178>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d22:	4b2f      	ldr	r3, [pc, #188]	; (8002de0 <HAL_SPI_MspInit+0x178>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d28:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <HAL_SPI_MspInit+0x178>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d2e:	4b2c      	ldr	r3, [pc, #176]	; (8002de0 <HAL_SPI_MspInit+0x178>)
 8002d30:	2280      	movs	r2, #128	; 0x80
 8002d32:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d34:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <HAL_SPI_MspInit+0x178>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d3a:	4b29      	ldr	r3, [pc, #164]	; (8002de0 <HAL_SPI_MspInit+0x178>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002d40:	4b27      	ldr	r3, [pc, #156]	; (8002de0 <HAL_SPI_MspInit+0x178>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d46:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_SPI_MspInit+0x178>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002d4c:	4824      	ldr	r0, [pc, #144]	; (8002de0 <HAL_SPI_MspInit+0x178>)
 8002d4e:	f004 ff15 	bl	8007b7c <HAL_DMA_Init>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_SPI_MspInit+0xf4>
    {
      Error_Handler();
 8002d58:	f7fe ffdf 	bl	8001d1a <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a20      	ldr	r2, [pc, #128]	; (8002de0 <HAL_SPI_MspInit+0x178>)
 8002d60:	659a      	str	r2, [r3, #88]	; 0x58
 8002d62:	4a1f      	ldr	r2, [pc, #124]	; (8002de0 <HAL_SPI_MspInit+0x178>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002d68:	4b1f      	ldr	r3, [pc, #124]	; (8002de8 <HAL_SPI_MspInit+0x180>)
 8002d6a:	4a20      	ldr	r2, [pc, #128]	; (8002dec <HAL_SPI_MspInit+0x184>)
 8002d6c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <HAL_SPI_MspInit+0x180>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d74:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <HAL_SPI_MspInit+0x180>)
 8002d76:	2210      	movs	r2, #16
 8002d78:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <HAL_SPI_MspInit+0x180>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d80:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <HAL_SPI_MspInit+0x180>)
 8002d82:	2280      	movs	r2, #128	; 0x80
 8002d84:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d86:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <HAL_SPI_MspInit+0x180>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d8c:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <HAL_SPI_MspInit+0x180>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <HAL_SPI_MspInit+0x180>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d98:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <HAL_SPI_MspInit+0x180>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002d9e:	4812      	ldr	r0, [pc, #72]	; (8002de8 <HAL_SPI_MspInit+0x180>)
 8002da0:	f004 feec 	bl	8007b7c <HAL_DMA_Init>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_SPI_MspInit+0x146>
    {
      Error_Handler();
 8002daa:	f7fe ffb6 	bl	8001d1a <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a0d      	ldr	r2, [pc, #52]	; (8002de8 <HAL_SPI_MspInit+0x180>)
 8002db2:	655a      	str	r2, [r3, #84]	; 0x54
 8002db4:	4a0c      	ldr	r2, [pc, #48]	; (8002de8 <HAL_SPI_MspInit+0x180>)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	2023      	movs	r0, #35	; 0x23
 8002dc0:	f004 fea5 	bl	8007b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002dc4:	2023      	movs	r0, #35	; 0x23
 8002dc6:	f004 febe 	bl	8007b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002dca:	bf00      	nop
 8002dcc:	3728      	adds	r7, #40	; 0x28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40013000 	.word	0x40013000
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	48000400 	.word	0x48000400
 8002de0:	20000b50 	.word	0x20000b50
 8002de4:	4002001c 	.word	0x4002001c
 8002de8:	20000b98 	.word	0x20000b98
 8002dec:	40020030 	.word	0x40020030

08002df0 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 8002df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df4:	ed2d 8b02 	vpush	{d8}
 8002df8:	b09c      	sub	sp, #112	; 0x70
 8002dfa:	af10      	add	r7, sp, #64	; 0x40
 8002dfc:	6278      	str	r0, [r7, #36]	; 0x24
 8002dfe:	ed87 0a08 	vstr	s0, [r7, #32]
 8002e02:	edc7 0a07 	vstr	s1, [r7, #28]
 8002e06:	61b9      	str	r1, [r7, #24]
 8002e08:	617a      	str	r2, [r7, #20]
 8002e0a:	ed87 1a04 	vstr	s2, [r7, #16]
	int framesize=0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	62fb      	str	r3, [r7, #44]	; 0x2c
	framesize=snprintf((uint8_t*)buffer,256, "%0.2f,%0.2f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2);
 8002e12:	6a38      	ldr	r0, [r7, #32]
 8002e14:	f7fd fb98 	bl	8000548 <__aeabi_f2d>
 8002e18:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002e1c:	69f8      	ldr	r0, [r7, #28]
 8002e1e:	f7fd fb93 	bl	8000548 <__aeabi_f2d>
 8002e22:	e9c7 0100 	strd	r0, r1, [r7]
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fd fb8c 	bl	8000548 <__aeabi_f2d>
 8002e30:	a320      	add	r3, pc, #128	; (adr r3, 8002eb4 <csvframe+0xc4>)
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	f7fd fbdf 	bl	80005f8 <__aeabi_dmul>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	ec43 2b18 	vmov	d8, r2, r3
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd fb78 	bl	8000548 <__aeabi_f2d>
 8002e58:	4604      	mov	r4, r0
 8002e5a:	460d      	mov	r5, r1
 8002e5c:	6938      	ldr	r0, [r7, #16]
 8002e5e:	f7fd fb73 	bl	8000548 <__aeabi_f2d>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	930c      	str	r3, [sp, #48]	; 0x30
 8002e6e:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002e72:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8002e76:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002e7a:	ed8d 8b04 	vstr	d8, [sp, #16]
 8002e7e:	ed97 7b00 	vldr	d7, [r7]
 8002e82:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002e86:	ed97 7b02 	vldr	d7, [r7, #8]
 8002e8a:	ed8d 7b00 	vstr	d7, [sp]
 8002e8e:	4a08      	ldr	r2, [pc, #32]	; (8002eb0 <csvframe+0xc0>)
 8002e90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e96:	f014 fde9 	bl	8017a6c <sniprintf>
 8002e9a:	62f8      	str	r0, [r7, #44]	; 0x2c
	return framesize;
 8002e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3730      	adds	r7, #48	; 0x30
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	ecbd 8b02 	vpop	{d8}
 8002ea8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eac:	f3af 8000 	nop.w
 8002eb0:	0801cd80 	.word	0x0801cd80
 8002eb4:	cccccccd 	.word	0xcccccccd
 8002eb8:	400ccccc 	.word	0x400ccccc

08002ebc <storeindex>:


void storeindex(void){
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b09c      	sub	sp, #112	; 0x70
 8002ec0:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 8002ec2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002ec6:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 8002ec8:	463b      	mov	r3, r7
 8002eca:	2264      	movs	r2, #100	; 0x64
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f014 fe63 	bl	8017b9a <memset>
	snprintf((uint8_t*)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <storeindex+0x6c>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <storeindex+0x70>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4638      	mov	r0, r7
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	4a13      	ldr	r2, [pc, #76]	; (8002f30 <storeindex+0x74>)
 8002ee4:	2164      	movs	r1, #100	; 0x64
 8002ee6:	f014 fdc1 	bl	8017a6c <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8002eea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	da00      	bge.n	8002ef2 <storeindex+0x36>
 8002ef0:	330f      	adds	r3, #15
 8002ef2:	111b      	asrs	r3, r3, #4
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd fb15 	bl	8000524 <__aeabi_i2d>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4610      	mov	r0, r2
 8002f00:	4619      	mov	r1, r3
 8002f02:	f7fd fe29 	bl	8000b58 <__aeabi_d2iz>
 8002f06:	4603      	mov	r3, r0
 8002f08:	4619      	mov	r1, r3
 8002f0a:	480a      	ldr	r0, [pc, #40]	; (8002f34 <storeindex+0x78>)
 8002f0c:	f012 f84b 	bl	8014fa6 <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8002f10:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002f12:	463a      	mov	r2, r7
 8002f14:	2300      	movs	r3, #0
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2364      	movs	r3, #100	; 0x64
 8002f1a:	4806      	ldr	r0, [pc, #24]	; (8002f34 <storeindex+0x78>)
 8002f1c:	f012 f8c6 	bl	80150ac <SPIF_WritePage>

}
 8002f20:	bf00      	nop
 8002f22:	3768      	adds	r7, #104	; 0x68
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000988 	.word	0x20000988
 8002f2c:	2000098c 	.word	0x2000098c
 8002f30:	0801cdb0 	.word	0x0801cdb0
 8002f34:	20000740 	.word	0x20000740

08002f38 <getindex>:

void getindex(void){
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 8002f3e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002f42:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	2300      	movs	r3, #0
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2332      	movs	r3, #50	; 0x32
 8002f4c:	4a2b      	ldr	r2, [pc, #172]	; (8002ffc <getindex+0xc4>)
 8002f4e:	482c      	ldr	r0, [pc, #176]	; (8003000 <getindex+0xc8>)
 8002f50:	f012 f8ca 	bl	80150e8 <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 8002f54:	220a      	movs	r2, #10
 8002f56:	2124      	movs	r1, #36	; 0x24
 8002f58:	482a      	ldr	r0, [pc, #168]	; (8003004 <getindex+0xcc>)
 8002f5a:	f014 fe1e 	bl	8017b9a <memset>
	memset(numbuf2,'$',10);
 8002f5e:	220a      	movs	r2, #10
 8002f60:	2124      	movs	r1, #36	; 0x24
 8002f62:	4829      	ldr	r0, [pc, #164]	; (8003008 <getindex+0xd0>)
 8002f64:	f014 fe19 	bl	8017b9a <memset>
	int cnt=0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 8002f6c:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <getindex+0xc4>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	2b09      	cmp	r3, #9
 8002f76:	dc3a      	bgt.n	8002fee <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 8002f78:	e00b      	b.n	8002f92 <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 8002f7a:	4a20      	ldr	r2, [pc, #128]	; (8002ffc <getindex+0xc4>)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	7819      	ldrb	r1, [r3, #0]
 8002f82:	4a20      	ldr	r2, [pc, #128]	; (8003004 <getindex+0xcc>)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	460a      	mov	r2, r1
 8002f8a:	701a      	strb	r2, [r3, #0]
			  cnt++;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 8002f92:	4a1a      	ldr	r2, [pc, #104]	; (8002ffc <getindex+0xc4>)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b24      	cmp	r3, #36	; 0x24
 8002f9c:	d1ed      	bne.n	8002f7a <getindex+0x42>
		  }
		  cnt++;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8002fa8:	e00e      	b.n	8002fc8 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8002faa:	4a14      	ldr	r2, [pc, #80]	; (8002ffc <getindex+0xc4>)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4413      	add	r3, r2
 8002fb0:	7819      	ldrb	r1, [r3, #0]
 8002fb2:	4a15      	ldr	r2, [pc, #84]	; (8003008 <getindex+0xd0>)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	460a      	mov	r2, r1
 8002fba:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 8002fc8:	4a0c      	ldr	r2, [pc, #48]	; (8002ffc <getindex+0xc4>)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4413      	add	r3, r2
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b24      	cmp	r3, #36	; 0x24
 8002fd2:	d1ea      	bne.n	8002faa <getindex+0x72>
		  	  }

		 pageoffset=atoi((uint8_t*)numbuf1);
 8002fd4:	480b      	ldr	r0, [pc, #44]	; (8003004 <getindex+0xcc>)
 8002fd6:	f012 fe4b 	bl	8015c70 <atoi>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	4a0b      	ldr	r2, [pc, #44]	; (800300c <getindex+0xd4>)
 8002fde:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((uint8_t*)numbuf2);
 8002fe0:	4809      	ldr	r0, [pc, #36]	; (8003008 <getindex+0xd0>)
 8002fe2:	f012 fe45 	bl	8015c70 <atoi>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4a09      	ldr	r2, [pc, #36]	; (8003010 <getindex+0xd8>)
 8002fea:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 8002fec:	e001      	b.n	8002ff2 <getindex+0xba>
		storeindex();
 8002fee:	f7ff ff65 	bl	8002ebc <storeindex>
}
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000ab8 	.word	0x20000ab8
 8003000:	20000740 	.word	0x20000740
 8003004:	20000994 	.word	0x20000994
 8003008:	200009a0 	.word	0x200009a0
 800300c:	20000988 	.word	0x20000988
 8003010:	2000098c 	.word	0x2000098c

08003014 <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af02      	add	r7, sp, #8
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 800301e:	4b3f      	ldr	r3, [pc, #252]	; (800311c <writebuffertoflash+0x108>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3301      	adds	r3, #1
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	2b00      	cmp	r3, #0
 800302a:	d11b      	bne.n	8003064 <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 800302c:	4b3c      	ldr	r3, [pc, #240]	; (8003120 <writebuffertoflash+0x10c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d117      	bne.n	8003064 <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8003034:	4b39      	ldr	r3, [pc, #228]	; (800311c <writebuffertoflash+0x108>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	da00      	bge.n	8003040 <writebuffertoflash+0x2c>
 800303e:	330f      	adds	r3, #15
 8003040:	111b      	asrs	r3, r3, #4
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd fa6e 	bl	8000524 <__aeabi_i2d>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	f7fd fd82 	bl	8000b58 <__aeabi_d2iz>
 8003054:	4603      	mov	r3, r0
 8003056:	4619      	mov	r1, r3
 8003058:	4832      	ldr	r0, [pc, #200]	; (8003124 <writebuffertoflash+0x110>)
 800305a:	f011 ffa4 	bl	8014fa6 <SPIF_EraseSector>
		sectoreraseen=1;
 800305e:	4b30      	ldr	r3, [pc, #192]	; (8003120 <writebuffertoflash+0x10c>)
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 8003064:	4b30      	ldr	r3, [pc, #192]	; (8003128 <writebuffertoflash+0x114>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	4413      	add	r3, r2
 800306c:	2bff      	cmp	r3, #255	; 0xff
 800306e:	dc11      	bgt.n	8003094 <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8003070:	4b2a      	ldr	r3, [pc, #168]	; (800311c <writebuffertoflash+0x108>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4619      	mov	r1, r3
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	4a2b      	ldr	r2, [pc, #172]	; (8003128 <writebuffertoflash+0x114>)
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	9200      	str	r2, [sp, #0]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4828      	ldr	r0, [pc, #160]	; (8003124 <writebuffertoflash+0x110>)
 8003082:	f012 f813 	bl	80150ac <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 8003086:	4b28      	ldr	r3, [pc, #160]	; (8003128 <writebuffertoflash+0x114>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	4413      	add	r3, r2
 800308e:	4a26      	ldr	r2, [pc, #152]	; (8003128 <writebuffertoflash+0x114>)
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	e03c      	b.n	800310e <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 8003094:	4b21      	ldr	r3, [pc, #132]	; (800311c <writebuffertoflash+0x108>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4619      	mov	r1, r3
 800309a:	4b23      	ldr	r3, [pc, #140]	; (8003128 <writebuffertoflash+0x114>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b20      	ldr	r3, [pc, #128]	; (8003128 <writebuffertoflash+0x114>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	4613      	mov	r3, r2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	481d      	ldr	r0, [pc, #116]	; (8003124 <writebuffertoflash+0x110>)
 80030b0:	f011 fffc 	bl	80150ac <SPIF_WritePage>
		HAL_Delay(100);
 80030b4:	2064      	movs	r0, #100	; 0x64
 80030b6:	f003 f98b 	bl	80063d0 <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 80030ba:	4b18      	ldr	r3, [pc, #96]	; (800311c <writebuffertoflash+0x108>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3301      	adds	r3, #1
 80030c0:	4618      	mov	r0, r3
 80030c2:	4b19      	ldr	r3, [pc, #100]	; (8003128 <writebuffertoflash+0x114>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80030ca:	461a      	mov	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	1899      	adds	r1, r3, r2
 80030d0:	4b15      	ldr	r3, [pc, #84]	; (8003128 <writebuffertoflash+0x114>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	2300      	movs	r3, #0
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	4613      	mov	r3, r2
 80030e4:	460a      	mov	r2, r1
 80030e6:	4601      	mov	r1, r0
 80030e8:	480e      	ldr	r0, [pc, #56]	; (8003124 <writebuffertoflash+0x110>)
 80030ea:	f011 ffdf 	bl	80150ac <SPIF_WritePage>
		pagenumber=pagenumber+1;
 80030ee:	4b0b      	ldr	r3, [pc, #44]	; (800311c <writebuffertoflash+0x108>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3301      	adds	r3, #1
 80030f4:	4a09      	ldr	r2, [pc, #36]	; (800311c <writebuffertoflash+0x108>)
 80030f6:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 80030f8:	4b09      	ldr	r3, [pc, #36]	; (8003120 <writebuffertoflash+0x10c>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 80030fe:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <writebuffertoflash+0x114>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	4a07      	ldr	r2, [pc, #28]	; (8003128 <writebuffertoflash+0x114>)
 800310c:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 800310e:	f7ff fed5 	bl	8002ebc <storeindex>

}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	2000098c 	.word	0x2000098c
 8003120:	20000990 	.word	0x20000990
 8003124:	20000740 	.word	0x20000740
 8003128:	20000988 	.word	0x20000988

0800312c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern char str[20];

void ssd1306_Reset(void) {
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af04      	add	r7, sp, #16
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003146:	f04f 33ff 	mov.w	r3, #4294967295
 800314a:	9302      	str	r3, [sp, #8]
 800314c:	2301      	movs	r3, #1
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	1dfb      	adds	r3, r7, #7
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2301      	movs	r3, #1
 8003156:	2200      	movs	r2, #0
 8003158:	2178      	movs	r1, #120	; 0x78
 800315a:	4803      	ldr	r0, [pc, #12]	; (8003168 <ssd1306_WriteCommand+0x2c>)
 800315c:	f005 fbd4 	bl	8008908 <HAL_I2C_Mem_Write>
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20000454 	.word	0x20000454

0800316c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af04      	add	r7, sp, #16
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	b29b      	uxth	r3, r3
 800317a:	f04f 32ff 	mov.w	r2, #4294967295
 800317e:	9202      	str	r2, [sp, #8]
 8003180:	9301      	str	r3, [sp, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	2301      	movs	r3, #1
 8003188:	2240      	movs	r2, #64	; 0x40
 800318a:	2178      	movs	r1, #120	; 0x78
 800318c:	4803      	ldr	r0, [pc, #12]	; (800319c <ssd1306_WriteData+0x30>)
 800318e:	f005 fbbb 	bl	8008908 <HAL_I2C_Mem_Write>
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000454 	.word	0x20000454

080031a0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80031a4:	f7ff ffc2 	bl	800312c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80031a8:	2064      	movs	r0, #100	; 0x64
 80031aa:	f003 f911 	bl	80063d0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80031ae:	2000      	movs	r0, #0
 80031b0:	f000 fba0 	bl	80038f4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80031b4:	2020      	movs	r0, #32
 80031b6:	f7ff ffc1 	bl	800313c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7ff ffbe 	bl	800313c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80031c0:	20b0      	movs	r0, #176	; 0xb0
 80031c2:	f7ff ffbb 	bl	800313c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80031c6:	20c8      	movs	r0, #200	; 0xc8
 80031c8:	f7ff ffb8 	bl	800313c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80031cc:	2000      	movs	r0, #0
 80031ce:	f7ff ffb5 	bl	800313c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80031d2:	2010      	movs	r0, #16
 80031d4:	f7ff ffb2 	bl	800313c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80031d8:	2040      	movs	r0, #64	; 0x40
 80031da:	f7ff ffaf 	bl	800313c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80031de:	20ff      	movs	r0, #255	; 0xff
 80031e0:	f000 fb75 	bl	80038ce <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80031e4:	20a1      	movs	r0, #161	; 0xa1
 80031e6:	f7ff ffa9 	bl	800313c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80031ea:	20a6      	movs	r0, #166	; 0xa6
 80031ec:	f7ff ffa6 	bl	800313c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80031f0:	20a8      	movs	r0, #168	; 0xa8
 80031f2:	f7ff ffa3 	bl	800313c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80031f6:	203f      	movs	r0, #63	; 0x3f
 80031f8:	f7ff ffa0 	bl	800313c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80031fc:	20a4      	movs	r0, #164	; 0xa4
 80031fe:	f7ff ff9d 	bl	800313c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003202:	20d3      	movs	r0, #211	; 0xd3
 8003204:	f7ff ff9a 	bl	800313c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003208:	2000      	movs	r0, #0
 800320a:	f7ff ff97 	bl	800313c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800320e:	20d5      	movs	r0, #213	; 0xd5
 8003210:	f7ff ff94 	bl	800313c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003214:	20f0      	movs	r0, #240	; 0xf0
 8003216:	f7ff ff91 	bl	800313c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800321a:	20d9      	movs	r0, #217	; 0xd9
 800321c:	f7ff ff8e 	bl	800313c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003220:	2022      	movs	r0, #34	; 0x22
 8003222:	f7ff ff8b 	bl	800313c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003226:	20da      	movs	r0, #218	; 0xda
 8003228:	f7ff ff88 	bl	800313c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800322c:	2012      	movs	r0, #18
 800322e:	f7ff ff85 	bl	800313c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003232:	20db      	movs	r0, #219	; 0xdb
 8003234:	f7ff ff82 	bl	800313c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003238:	2020      	movs	r0, #32
 800323a:	f7ff ff7f 	bl	800313c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800323e:	208d      	movs	r0, #141	; 0x8d
 8003240:	f7ff ff7c 	bl	800313c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003244:	2014      	movs	r0, #20
 8003246:	f7ff ff79 	bl	800313c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800324a:	2001      	movs	r0, #1
 800324c:	f000 fb52 	bl	80038f4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003250:	2000      	movs	r0, #0
 8003252:	f000 f80f 	bl	8003274 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003256:	f000 f825 	bl	80032a4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800325a:	4b05      	ldr	r3, [pc, #20]	; (8003270 <ssd1306_Init+0xd0>)
 800325c:	2200      	movs	r2, #0
 800325e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <ssd1306_Init+0xd0>)
 8003262:	2200      	movs	r2, #0
 8003264:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003266:	4b02      	ldr	r3, [pc, #8]	; (8003270 <ssd1306_Init+0xd0>)
 8003268:	2201      	movs	r2, #1
 800326a:	711a      	strb	r2, [r3, #4]
}
 800326c:	bf00      	nop
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20000fe0 	.word	0x20000fe0

08003274 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <ssd1306_Fill+0x14>
 8003284:	2300      	movs	r3, #0
 8003286:	e000      	b.n	800328a <ssd1306_Fill+0x16>
 8003288:	23ff      	movs	r3, #255	; 0xff
 800328a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800328e:	4619      	mov	r1, r3
 8003290:	4803      	ldr	r0, [pc, #12]	; (80032a0 <ssd1306_Fill+0x2c>)
 8003292:	f014 fc82 	bl	8017b9a <memset>
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000be0 	.word	0x20000be0

080032a4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80032aa:	2300      	movs	r3, #0
 80032ac:	71fb      	strb	r3, [r7, #7]
 80032ae:	e016      	b.n	80032de <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	3b50      	subs	r3, #80	; 0x50
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff ff40 	bl	800313c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80032bc:	2000      	movs	r0, #0
 80032be:	f7ff ff3d 	bl	800313c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80032c2:	2010      	movs	r0, #16
 80032c4:	f7ff ff3a 	bl	800313c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	01db      	lsls	r3, r3, #7
 80032cc:	4a08      	ldr	r2, [pc, #32]	; (80032f0 <ssd1306_UpdateScreen+0x4c>)
 80032ce:	4413      	add	r3, r2
 80032d0:	2180      	movs	r1, #128	; 0x80
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff ff4a 	bl	800316c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	3301      	adds	r3, #1
 80032dc:	71fb      	strb	r3, [r7, #7]
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	2b07      	cmp	r3, #7
 80032e2:	d9e5      	bls.n	80032b0 <ssd1306_UpdateScreen+0xc>
    }
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000be0 	.word	0x20000be0

080032f4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
 80032fe:	460b      	mov	r3, r1
 8003300:	71bb      	strb	r3, [r7, #6]
 8003302:	4613      	mov	r3, r2
 8003304:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	2b00      	cmp	r3, #0
 800330c:	db3d      	blt.n	800338a <ssd1306_DrawPixel+0x96>
 800330e:	79bb      	ldrb	r3, [r7, #6]
 8003310:	2b3f      	cmp	r3, #63	; 0x3f
 8003312:	d83a      	bhi.n	800338a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003314:	797b      	ldrb	r3, [r7, #5]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d11a      	bne.n	8003350 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800331a:	79fa      	ldrb	r2, [r7, #7]
 800331c:	79bb      	ldrb	r3, [r7, #6]
 800331e:	08db      	lsrs	r3, r3, #3
 8003320:	b2d8      	uxtb	r0, r3
 8003322:	4603      	mov	r3, r0
 8003324:	01db      	lsls	r3, r3, #7
 8003326:	4413      	add	r3, r2
 8003328:	4a1b      	ldr	r2, [pc, #108]	; (8003398 <ssd1306_DrawPixel+0xa4>)
 800332a:	5cd3      	ldrb	r3, [r2, r3]
 800332c:	b25a      	sxtb	r2, r3
 800332e:	79bb      	ldrb	r3, [r7, #6]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	2101      	movs	r1, #1
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	b25b      	sxtb	r3, r3
 800333c:	4313      	orrs	r3, r2
 800333e:	b259      	sxtb	r1, r3
 8003340:	79fa      	ldrb	r2, [r7, #7]
 8003342:	4603      	mov	r3, r0
 8003344:	01db      	lsls	r3, r3, #7
 8003346:	4413      	add	r3, r2
 8003348:	b2c9      	uxtb	r1, r1
 800334a:	4a13      	ldr	r2, [pc, #76]	; (8003398 <ssd1306_DrawPixel+0xa4>)
 800334c:	54d1      	strb	r1, [r2, r3]
 800334e:	e01d      	b.n	800338c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003350:	79fa      	ldrb	r2, [r7, #7]
 8003352:	79bb      	ldrb	r3, [r7, #6]
 8003354:	08db      	lsrs	r3, r3, #3
 8003356:	b2d8      	uxtb	r0, r3
 8003358:	4603      	mov	r3, r0
 800335a:	01db      	lsls	r3, r3, #7
 800335c:	4413      	add	r3, r2
 800335e:	4a0e      	ldr	r2, [pc, #56]	; (8003398 <ssd1306_DrawPixel+0xa4>)
 8003360:	5cd3      	ldrb	r3, [r2, r3]
 8003362:	b25a      	sxtb	r2, r3
 8003364:	79bb      	ldrb	r3, [r7, #6]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	2101      	movs	r1, #1
 800336c:	fa01 f303 	lsl.w	r3, r1, r3
 8003370:	b25b      	sxtb	r3, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	b25b      	sxtb	r3, r3
 8003376:	4013      	ands	r3, r2
 8003378:	b259      	sxtb	r1, r3
 800337a:	79fa      	ldrb	r2, [r7, #7]
 800337c:	4603      	mov	r3, r0
 800337e:	01db      	lsls	r3, r3, #7
 8003380:	4413      	add	r3, r2
 8003382:	b2c9      	uxtb	r1, r1
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <ssd1306_DrawPixel+0xa4>)
 8003386:	54d1      	strb	r1, [r2, r3]
 8003388:	e000      	b.n	800338c <ssd1306_DrawPixel+0x98>
        return;
 800338a:	bf00      	nop
    }
}
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000be0 	.word	0x20000be0

0800339c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b089      	sub	sp, #36	; 0x24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4604      	mov	r4, r0
 80033a4:	1d38      	adds	r0, r7, #4
 80033a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80033aa:	461a      	mov	r2, r3
 80033ac:	4623      	mov	r3, r4
 80033ae:	73fb      	strb	r3, [r7, #15]
 80033b0:	4613      	mov	r3, r2
 80033b2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b1f      	cmp	r3, #31
 80033b8:	d902      	bls.n	80033c0 <ssd1306_WriteChar+0x24>
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	2b7e      	cmp	r3, #126	; 0x7e
 80033be:	d901      	bls.n	80033c4 <ssd1306_WriteChar+0x28>
        return 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	e06d      	b.n	80034a0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80033c4:	4b38      	ldr	r3, [pc, #224]	; (80034a8 <ssd1306_WriteChar+0x10c>)
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	793b      	ldrb	r3, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	2b80      	cmp	r3, #128	; 0x80
 80033d0:	dc06      	bgt.n	80033e0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80033d2:	4b35      	ldr	r3, [pc, #212]	; (80034a8 <ssd1306_WriteChar+0x10c>)
 80033d4:	885b      	ldrh	r3, [r3, #2]
 80033d6:	461a      	mov	r2, r3
 80033d8:	797b      	ldrb	r3, [r7, #5]
 80033da:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80033dc:	2b40      	cmp	r3, #64	; 0x40
 80033de:	dd01      	ble.n	80033e4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e05d      	b.n	80034a0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80033e4:	2300      	movs	r3, #0
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	e04c      	b.n	8003484 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	3b20      	subs	r3, #32
 80033f0:	7979      	ldrb	r1, [r7, #5]
 80033f2:	fb01 f303 	mul.w	r3, r1, r3
 80033f6:	4619      	mov	r1, r3
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	440b      	add	r3, r1
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4413      	add	r3, r2
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003404:	2300      	movs	r3, #0
 8003406:	61bb      	str	r3, [r7, #24]
 8003408:	e034      	b.n	8003474 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d012      	beq.n	8003440 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800341a:	4b23      	ldr	r3, [pc, #140]	; (80034a8 <ssd1306_WriteChar+0x10c>)
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	b2da      	uxtb	r2, r3
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	4413      	add	r3, r2
 8003426:	b2d8      	uxtb	r0, r3
 8003428:	4b1f      	ldr	r3, [pc, #124]	; (80034a8 <ssd1306_WriteChar+0x10c>)
 800342a:	885b      	ldrh	r3, [r3, #2]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	4413      	add	r3, r2
 8003434:	b2db      	uxtb	r3, r3
 8003436:	7bba      	ldrb	r2, [r7, #14]
 8003438:	4619      	mov	r1, r3
 800343a:	f7ff ff5b 	bl	80032f4 <ssd1306_DrawPixel>
 800343e:	e016      	b.n	800346e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003440:	4b19      	ldr	r3, [pc, #100]	; (80034a8 <ssd1306_WriteChar+0x10c>)
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	4413      	add	r3, r2
 800344c:	b2d8      	uxtb	r0, r3
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <ssd1306_WriteChar+0x10c>)
 8003450:	885b      	ldrh	r3, [r3, #2]
 8003452:	b2da      	uxtb	r2, r3
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	4413      	add	r3, r2
 800345a:	b2d9      	uxtb	r1, r3
 800345c:	7bbb      	ldrb	r3, [r7, #14]
 800345e:	2b00      	cmp	r3, #0
 8003460:	bf0c      	ite	eq
 8003462:	2301      	moveq	r3, #1
 8003464:	2300      	movne	r3, #0
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	f7ff ff43 	bl	80032f4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	3301      	adds	r3, #1
 8003472:	61bb      	str	r3, [r7, #24]
 8003474:	793b      	ldrb	r3, [r7, #4]
 8003476:	461a      	mov	r2, r3
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	4293      	cmp	r3, r2
 800347c:	d3c5      	bcc.n	800340a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3301      	adds	r3, #1
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	797b      	ldrb	r3, [r7, #5]
 8003486:	461a      	mov	r2, r3
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	4293      	cmp	r3, r2
 800348c:	d3ad      	bcc.n	80033ea <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <ssd1306_WriteChar+0x10c>)
 8003490:	881a      	ldrh	r2, [r3, #0]
 8003492:	793b      	ldrb	r3, [r7, #4]
 8003494:	b29b      	uxth	r3, r3
 8003496:	4413      	add	r3, r2
 8003498:	b29a      	uxth	r2, r3
 800349a:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <ssd1306_WriteChar+0x10c>)
 800349c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800349e:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3724      	adds	r7, #36	; 0x24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd90      	pop	{r4, r7, pc}
 80034a8:	20000fe0 	.word	0x20000fe0

080034ac <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	1d38      	adds	r0, r7, #4
 80034b6:	e880 0006 	stmia.w	r0, {r1, r2}
 80034ba:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80034bc:	e012      	b.n	80034e4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	7818      	ldrb	r0, [r3, #0]
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	1d3a      	adds	r2, r7, #4
 80034c6:	ca06      	ldmia	r2, {r1, r2}
 80034c8:	f7ff ff68 	bl	800339c <ssd1306_WriteChar>
 80034cc:	4603      	mov	r3, r0
 80034ce:	461a      	mov	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d002      	beq.n	80034de <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	e008      	b.n	80034f0 <ssd1306_WriteString+0x44>
        }
        str++;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3301      	adds	r3, #1
 80034e2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e8      	bne.n	80034be <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	781b      	ldrb	r3, [r3, #0]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	460a      	mov	r2, r1
 8003502:	71fb      	strb	r3, [r7, #7]
 8003504:	4613      	mov	r3, r2
 8003506:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	b29a      	uxth	r2, r3
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <ssd1306_SetCursor+0x2c>)
 800350e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003510:	79bb      	ldrb	r3, [r7, #6]
 8003512:	b29a      	uxth	r2, r3
 8003514:	4b03      	ldr	r3, [pc, #12]	; (8003524 <ssd1306_SetCursor+0x2c>)
 8003516:	805a      	strh	r2, [r3, #2]
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	20000fe0 	.word	0x20000fe0

08003528 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003528:	b590      	push	{r4, r7, lr}
 800352a:	b089      	sub	sp, #36	; 0x24
 800352c:	af00      	add	r7, sp, #0
 800352e:	4604      	mov	r4, r0
 8003530:	4608      	mov	r0, r1
 8003532:	4611      	mov	r1, r2
 8003534:	461a      	mov	r2, r3
 8003536:	4623      	mov	r3, r4
 8003538:	71fb      	strb	r3, [r7, #7]
 800353a:	4603      	mov	r3, r0
 800353c:	71bb      	strb	r3, [r7, #6]
 800353e:	460b      	mov	r3, r1
 8003540:	717b      	strb	r3, [r7, #5]
 8003542:	4613      	mov	r3, r2
 8003544:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8003546:	797a      	ldrb	r2, [r7, #5]
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	bfb8      	it	lt
 8003550:	425b      	neglt	r3, r3
 8003552:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8003554:	793a      	ldrb	r2, [r7, #4]
 8003556:	79bb      	ldrb	r3, [r7, #6]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	bfb8      	it	lt
 800355e:	425b      	neglt	r3, r3
 8003560:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8003562:	79fa      	ldrb	r2, [r7, #7]
 8003564:	797b      	ldrb	r3, [r7, #5]
 8003566:	429a      	cmp	r2, r3
 8003568:	d201      	bcs.n	800356e <ssd1306_Line+0x46>
 800356a:	2301      	movs	r3, #1
 800356c:	e001      	b.n	8003572 <ssd1306_Line+0x4a>
 800356e:	f04f 33ff 	mov.w	r3, #4294967295
 8003572:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8003574:	79ba      	ldrb	r2, [r7, #6]
 8003576:	793b      	ldrb	r3, [r7, #4]
 8003578:	429a      	cmp	r2, r3
 800357a:	d201      	bcs.n	8003580 <ssd1306_Line+0x58>
 800357c:	2301      	movs	r3, #1
 800357e:	e001      	b.n	8003584 <ssd1306_Line+0x5c>
 8003580:	f04f 33ff 	mov.w	r3, #4294967295
 8003584:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800358e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003592:	7939      	ldrb	r1, [r7, #4]
 8003594:	797b      	ldrb	r3, [r7, #5]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff feac 	bl	80032f4 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 800359c:	e024      	b.n	80035e8 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800359e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80035a2:	79b9      	ldrb	r1, [r7, #6]
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fea4 	bl	80032f4 <ssd1306_DrawPixel>
        error2 = error * 2;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	425b      	negs	r3, r3
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	dd08      	ble.n	80035ce <ssd1306_Line+0xa6>
            error -= deltaY;
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	4413      	add	r3, r2
 80035cc:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	da08      	bge.n	80035e8 <ssd1306_Line+0xc0>
            error += deltaX;
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	4413      	add	r3, r2
 80035dc:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	79bb      	ldrb	r3, [r7, #6]
 80035e4:	4413      	add	r3, r2
 80035e6:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80035e8:	79fa      	ldrb	r2, [r7, #7]
 80035ea:	797b      	ldrb	r3, [r7, #5]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1d6      	bne.n	800359e <ssd1306_Line+0x76>
 80035f0:	79ba      	ldrb	r2, [r7, #6]
 80035f2:	793b      	ldrb	r3, [r7, #4]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d1d2      	bne.n	800359e <ssd1306_Line+0x76>
        }
    }
    return;
 80035f8:	bf00      	nop
}
 80035fa:	3724      	adds	r7, #36	; 0x24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd90      	pop	{r4, r7, pc}

08003600 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8003600:	b590      	push	{r4, r7, lr}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	4604      	mov	r4, r0
 8003608:	4608      	mov	r0, r1
 800360a:	4611      	mov	r1, r2
 800360c:	461a      	mov	r2, r3
 800360e:	4623      	mov	r3, r4
 8003610:	71fb      	strb	r3, [r7, #7]
 8003612:	4603      	mov	r3, r0
 8003614:	71bb      	strb	r3, [r7, #6]
 8003616:	460b      	mov	r3, r1
 8003618:	717b      	strb	r3, [r7, #5]
 800361a:	4613      	mov	r3, r2
 800361c:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 800361e:	797b      	ldrb	r3, [r7, #5]
 8003620:	425b      	negs	r3, r3
 8003622:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8003628:	797b      	ldrb	r3, [r7, #5]
 800362a:	f1c3 0301 	rsb	r3, r3, #1
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	2b00      	cmp	r3, #0
 8003638:	db65      	blt.n	8003706 <ssd1306_DrawCircle+0x106>
 800363a:	79bb      	ldrb	r3, [r7, #6]
 800363c:	2b3f      	cmp	r3, #63	; 0x3f
 800363e:	d862      	bhi.n	8003706 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	79fa      	ldrb	r2, [r7, #7]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	b2d8      	uxtb	r0, r3
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	b2da      	uxtb	r2, r3
 800364e:	79bb      	ldrb	r3, [r7, #6]
 8003650:	4413      	add	r3, r2
 8003652:	b2db      	uxtb	r3, r3
 8003654:	793a      	ldrb	r2, [r7, #4]
 8003656:	4619      	mov	r1, r3
 8003658:	f7ff fe4c 	bl	80032f4 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	b2da      	uxtb	r2, r3
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	4413      	add	r3, r2
 8003664:	b2d8      	uxtb	r0, r3
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	b2da      	uxtb	r2, r3
 800366a:	79bb      	ldrb	r3, [r7, #6]
 800366c:	4413      	add	r3, r2
 800366e:	b2db      	uxtb	r3, r3
 8003670:	793a      	ldrb	r2, [r7, #4]
 8003672:	4619      	mov	r1, r3
 8003674:	f7ff fe3e 	bl	80032f4 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	4413      	add	r3, r2
 8003680:	b2d8      	uxtb	r0, r3
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	79ba      	ldrb	r2, [r7, #6]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	793a      	ldrb	r2, [r7, #4]
 800368e:	4619      	mov	r1, r3
 8003690:	f7ff fe30 	bl	80032f4 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	79fa      	ldrb	r2, [r7, #7]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	b2d8      	uxtb	r0, r3
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	79ba      	ldrb	r2, [r7, #6]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	793a      	ldrb	r2, [r7, #4]
 80036aa:	4619      	mov	r1, r3
 80036ac:	f7ff fe22 	bl	80032f4 <ssd1306_DrawPixel>
        e2 = err;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	dc13      	bgt.n	80036e4 <ssd1306_DrawCircle+0xe4>
            y++;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	3301      	adds	r3, #1
 80036c0:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	3301      	adds	r3, #1
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	425b      	negs	r3, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d105      	bne.n	80036e4 <ssd1306_DrawCircle+0xe4>
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	429a      	cmp	r2, r3
 80036de:	dc01      	bgt.n	80036e4 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	dd08      	ble.n	80036fe <ssd1306_DrawCircle+0xfe>
            x++;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	3301      	adds	r3, #1
 80036f0:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	3301      	adds	r3, #1
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b00      	cmp	r3, #0
 8003702:	dd9d      	ble.n	8003640 <ssd1306_DrawCircle+0x40>

    return;
 8003704:	e000      	b.n	8003708 <ssd1306_DrawCircle+0x108>
        return;
 8003706:	bf00      	nop
}
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	bd90      	pop	{r4, r7, pc}

0800370e <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800370e:	b590      	push	{r4, r7, lr}
 8003710:	b085      	sub	sp, #20
 8003712:	af02      	add	r7, sp, #8
 8003714:	4604      	mov	r4, r0
 8003716:	4608      	mov	r0, r1
 8003718:	4611      	mov	r1, r2
 800371a:	461a      	mov	r2, r3
 800371c:	4623      	mov	r3, r4
 800371e:	71fb      	strb	r3, [r7, #7]
 8003720:	4603      	mov	r3, r0
 8003722:	71bb      	strb	r3, [r7, #6]
 8003724:	460b      	mov	r3, r1
 8003726:	717b      	strb	r3, [r7, #5]
 8003728:	4613      	mov	r3, r2
 800372a:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800372c:	79bc      	ldrb	r4, [r7, #6]
 800372e:	797a      	ldrb	r2, [r7, #5]
 8003730:	79b9      	ldrb	r1, [r7, #6]
 8003732:	79f8      	ldrb	r0, [r7, #7]
 8003734:	7e3b      	ldrb	r3, [r7, #24]
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	4623      	mov	r3, r4
 800373a:	f7ff fef5 	bl	8003528 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 800373e:	793c      	ldrb	r4, [r7, #4]
 8003740:	797a      	ldrb	r2, [r7, #5]
 8003742:	79b9      	ldrb	r1, [r7, #6]
 8003744:	7978      	ldrb	r0, [r7, #5]
 8003746:	7e3b      	ldrb	r3, [r7, #24]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	4623      	mov	r3, r4
 800374c:	f7ff feec 	bl	8003528 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8003750:	793c      	ldrb	r4, [r7, #4]
 8003752:	79fa      	ldrb	r2, [r7, #7]
 8003754:	7939      	ldrb	r1, [r7, #4]
 8003756:	7978      	ldrb	r0, [r7, #5]
 8003758:	7e3b      	ldrb	r3, [r7, #24]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	4623      	mov	r3, r4
 800375e:	f7ff fee3 	bl	8003528 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8003762:	79bc      	ldrb	r4, [r7, #6]
 8003764:	79fa      	ldrb	r2, [r7, #7]
 8003766:	7939      	ldrb	r1, [r7, #4]
 8003768:	79f8      	ldrb	r0, [r7, #7]
 800376a:	7e3b      	ldrb	r3, [r7, #24]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	4623      	mov	r3, r4
 8003770:	f7ff feda 	bl	8003528 <ssd1306_Line>

    return;
 8003774:	bf00      	nop
}
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bd90      	pop	{r4, r7, pc}

0800377c <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800377c:	b590      	push	{r4, r7, lr}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	4604      	mov	r4, r0
 8003784:	4608      	mov	r0, r1
 8003786:	4611      	mov	r1, r2
 8003788:	461a      	mov	r2, r3
 800378a:	4623      	mov	r3, r4
 800378c:	71fb      	strb	r3, [r7, #7]
 800378e:	4603      	mov	r3, r0
 8003790:	71bb      	strb	r3, [r7, #6]
 8003792:	460b      	mov	r3, r1
 8003794:	717b      	strb	r3, [r7, #5]
 8003796:	4613      	mov	r3, r2
 8003798:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 800379a:	79fa      	ldrb	r2, [r7, #7]
 800379c:	797b      	ldrb	r3, [r7, #5]
 800379e:	4293      	cmp	r3, r2
 80037a0:	bf28      	it	cs
 80037a2:	4613      	movcs	r3, r2
 80037a4:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80037a6:	797a      	ldrb	r2, [r7, #5]
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	4293      	cmp	r3, r2
 80037ac:	bf38      	it	cc
 80037ae:	4613      	movcc	r3, r2
 80037b0:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 80037b2:	79ba      	ldrb	r2, [r7, #6]
 80037b4:	793b      	ldrb	r3, [r7, #4]
 80037b6:	4293      	cmp	r3, r2
 80037b8:	bf28      	it	cs
 80037ba:	4613      	movcs	r3, r2
 80037bc:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 80037be:	793a      	ldrb	r2, [r7, #4]
 80037c0:	79bb      	ldrb	r3, [r7, #6]
 80037c2:	4293      	cmp	r3, r2
 80037c4:	bf38      	it	cc
 80037c6:	4613      	movcc	r3, r2
 80037c8:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80037ca:	7afb      	ldrb	r3, [r7, #11]
 80037cc:	73fb      	strb	r3, [r7, #15]
 80037ce:	e017      	b.n	8003800 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80037d0:	7b7b      	ldrb	r3, [r7, #13]
 80037d2:	73bb      	strb	r3, [r7, #14]
 80037d4:	e009      	b.n	80037ea <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 80037d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80037da:	7bf9      	ldrb	r1, [r7, #15]
 80037dc:	7bbb      	ldrb	r3, [r7, #14]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff fd88 	bl	80032f4 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80037e4:	7bbb      	ldrb	r3, [r7, #14]
 80037e6:	3301      	adds	r3, #1
 80037e8:	73bb      	strb	r3, [r7, #14]
 80037ea:	7bba      	ldrb	r2, [r7, #14]
 80037ec:	7b3b      	ldrb	r3, [r7, #12]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d803      	bhi.n	80037fa <ssd1306_FillRectangle+0x7e>
 80037f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	daed      	bge.n	80037d6 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	3301      	adds	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
 8003800:	7bfa      	ldrb	r2, [r7, #15]
 8003802:	7abb      	ldrb	r3, [r7, #10]
 8003804:	429a      	cmp	r2, r3
 8003806:	d803      	bhi.n	8003810 <ssd1306_FillRectangle+0x94>
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	2b3f      	cmp	r3, #63	; 0x3f
 800380c:	d9e0      	bls.n	80037d0 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 800380e:	bf00      	nop
 8003810:	bf00      	nop
}
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	bd90      	pop	{r4, r7, pc}

08003818 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	603a      	str	r2, [r7, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	4603      	mov	r3, r0
 8003824:	71fb      	strb	r3, [r7, #7]
 8003826:	460b      	mov	r3, r1
 8003828:	71bb      	strb	r3, [r7, #6]
 800382a:	4613      	mov	r3, r2
 800382c:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800382e:	797b      	ldrb	r3, [r7, #5]
 8003830:	3307      	adds	r3, #7
 8003832:	2b00      	cmp	r3, #0
 8003834:	da00      	bge.n	8003838 <ssd1306_DrawBitmap+0x20>
 8003836:	3307      	adds	r3, #7
 8003838:	10db      	asrs	r3, r3, #3
 800383a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003844:	2b00      	cmp	r3, #0
 8003846:	db3e      	blt.n	80038c6 <ssd1306_DrawBitmap+0xae>
 8003848:	79bb      	ldrb	r3, [r7, #6]
 800384a:	2b3f      	cmp	r3, #63	; 0x3f
 800384c:	d83b      	bhi.n	80038c6 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800384e:	2300      	movs	r3, #0
 8003850:	73bb      	strb	r3, [r7, #14]
 8003852:	e033      	b.n	80038bc <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8003854:	2300      	movs	r3, #0
 8003856:	737b      	strb	r3, [r7, #13]
 8003858:	e026      	b.n	80038a8 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 800385a:	7b7b      	ldrb	r3, [r7, #13]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	73fb      	strb	r3, [r7, #15]
 800386a:	e00d      	b.n	8003888 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800386c:	7bbb      	ldrb	r3, [r7, #14]
 800386e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	7b7a      	ldrb	r2, [r7, #13]
 8003878:	08d2      	lsrs	r2, r2, #3
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	4413      	add	r3, r2
 800387e:	461a      	mov	r2, r3
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	4413      	add	r3, r2
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8003888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388c:	2b00      	cmp	r3, #0
 800388e:	da08      	bge.n	80038a2 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8003890:	79fa      	ldrb	r2, [r7, #7]
 8003892:	7b7b      	ldrb	r3, [r7, #13]
 8003894:	4413      	add	r3, r2
 8003896:	b2db      	uxtb	r3, r3
 8003898:	7f3a      	ldrb	r2, [r7, #28]
 800389a:	79b9      	ldrb	r1, [r7, #6]
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff fd29 	bl	80032f4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80038a2:	7b7b      	ldrb	r3, [r7, #13]
 80038a4:	3301      	adds	r3, #1
 80038a6:	737b      	strb	r3, [r7, #13]
 80038a8:	7b7a      	ldrb	r2, [r7, #13]
 80038aa:	797b      	ldrb	r3, [r7, #5]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d3d4      	bcc.n	800385a <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80038b0:	7bbb      	ldrb	r3, [r7, #14]
 80038b2:	3301      	adds	r3, #1
 80038b4:	73bb      	strb	r3, [r7, #14]
 80038b6:	79bb      	ldrb	r3, [r7, #6]
 80038b8:	3301      	adds	r3, #1
 80038ba:	71bb      	strb	r3, [r7, #6]
 80038bc:	7bba      	ldrb	r2, [r7, #14]
 80038be:	7e3b      	ldrb	r3, [r7, #24]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d3c7      	bcc.n	8003854 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80038c4:	e000      	b.n	80038c8 <ssd1306_DrawBitmap+0xb0>
        return;
 80038c6:	bf00      	nop
}
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	4603      	mov	r3, r0
 80038d6:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80038d8:	2381      	movs	r3, #129	; 0x81
 80038da:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff fc2c 	bl	800313c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff fc28 	bl	800313c <ssd1306_WriteCommand>
}
 80038ec:	bf00      	nop
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003904:	23af      	movs	r3, #175	; 0xaf
 8003906:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <ssd1306_SetDisplayOn+0x38>)
 800390a:	2201      	movs	r2, #1
 800390c:	715a      	strb	r2, [r3, #5]
 800390e:	e004      	b.n	800391a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003910:	23ae      	movs	r3, #174	; 0xae
 8003912:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <ssd1306_SetDisplayOn+0x38>)
 8003916:	2200      	movs	r2, #0
 8003918:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fc0d 	bl	800313c <ssd1306_WriteCommand>
}
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000fe0 	.word	0x20000fe0

08003930 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b087      	sub	sp, #28
 8003934:	af02      	add	r7, sp, #8
 8003936:	ed87 0a03 	vstr	s0, [r7, #12]
 800393a:	60b8      	str	r0, [r7, #8]
 800393c:	6079      	str	r1, [r7, #4]
 800393e:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	330f      	adds	r3, #15
 8003946:	b2d8      	uxtb	r0, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	3301      	adds	r3, #1
 800394e:	b2d9      	uxtb	r1, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	b2db      	uxtb	r3, r3
 8003954:	330f      	adds	r3, #15
 8003956:	b2da      	uxtb	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	3305      	adds	r3, #5
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2401      	movs	r4, #1
 8003962:	9400      	str	r4, [sp, #0]
 8003964:	f7ff fde0 	bl	8003528 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	3310      	adds	r3, #16
 800396e:	b2d8      	uxtb	r0, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	3301      	adds	r3, #1
 8003976:	b2d9      	uxtb	r1, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	3310      	adds	r3, #16
 800397e:	b2da      	uxtb	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	3305      	adds	r3, #5
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2401      	movs	r4, #1
 800398a:	9400      	str	r4, [sp, #0]
 800398c:	f7ff fdcc 	bl	8003528 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	b2d8      	uxtb	r0, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	b2d9      	uxtb	r1, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	330e      	adds	r3, #14
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	3306      	adds	r3, #6
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2401      	movs	r4, #1
 80039aa:	9400      	str	r4, [sp, #0]
 80039ac:	f7ff feaf 	bl	800370e <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f7fc fdc9 	bl	8000548 <__aeabi_f2d>
 80039b6:	a396      	add	r3, pc, #600	; (adr r3, 8003c10 <batterygauge+0x2e0>)
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f7fd f898 	bl	8000af0 <__aeabi_dcmple>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d02a      	beq.n	8003a1c <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	3302      	adds	r3, #2
 80039cc:	b2d8      	uxtb	r0, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	3302      	adds	r3, #2
 80039d4:	b2d9      	uxtb	r1, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	3303      	adds	r3, #3
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	3304      	adds	r3, #4
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2401      	movs	r4, #1
 80039e8:	9400      	str	r4, [sp, #0]
 80039ea:	f7ff fe90 	bl	800370e <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d113      	bne.n	8003a1c <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	3302      	adds	r3, #2
 80039fa:	b2d8      	uxtb	r0, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	3302      	adds	r3, #2
 8003a02:	b2d9      	uxtb	r1, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	3303      	adds	r3, #3
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	3304      	adds	r3, #4
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2401      	movs	r4, #1
 8003a16:	9400      	str	r4, [sp, #0]
 8003a18:	f7ff fe79 	bl	800370e <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f7fc fd93 	bl	8000548 <__aeabi_f2d>
 8003a22:	a37b      	add	r3, pc, #492	; (adr r3, 8003c10 <batterygauge+0x2e0>)
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f7fd f876 	bl	8000b18 <__aeabi_dcmpgt>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d035      	beq.n	8003a9e <batterygauge+0x16e>
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f7fc fd88 	bl	8000548 <__aeabi_f2d>
 8003a38:	a377      	add	r3, pc, #476	; (adr r3, 8003c18 <batterygauge+0x2e8>)
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	f7fd f857 	bl	8000af0 <__aeabi_dcmple>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d02a      	beq.n	8003a9e <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	3302      	adds	r3, #2
 8003a4e:	b2d8      	uxtb	r0, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	3302      	adds	r3, #2
 8003a56:	b2d9      	uxtb	r1, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	3303      	adds	r3, #3
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	3304      	adds	r3, #4
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2401      	movs	r4, #1
 8003a6a:	9400      	str	r4, [sp, #0]
 8003a6c:	f7ff fe4f 	bl	800370e <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d113      	bne.n	8003a9e <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	3305      	adds	r3, #5
 8003a7c:	b2d8      	uxtb	r0, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	3302      	adds	r3, #2
 8003a84:	b2d9      	uxtb	r1, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	3306      	adds	r3, #6
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	3304      	adds	r3, #4
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2401      	movs	r4, #1
 8003a98:	9400      	str	r4, [sp, #0]
 8003a9a:	f7ff fe38 	bl	800370e <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f7fc fd52 	bl	8000548 <__aeabi_f2d>
 8003aa4:	a35c      	add	r3, pc, #368	; (adr r3, 8003c18 <batterygauge+0x2e8>)
 8003aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aaa:	f7fd f835 	bl	8000b18 <__aeabi_dcmpgt>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d049      	beq.n	8003b48 <batterygauge+0x218>
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f7fc fd47 	bl	8000548 <__aeabi_f2d>
 8003aba:	a359      	add	r3, pc, #356	; (adr r3, 8003c20 <batterygauge+0x2f0>)
 8003abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac0:	f7fd f816 	bl	8000af0 <__aeabi_dcmple>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d03e      	beq.n	8003b48 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	3302      	adds	r3, #2
 8003ad0:	b2d8      	uxtb	r0, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	3302      	adds	r3, #2
 8003ad8:	b2d9      	uxtb	r1, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	3303      	adds	r3, #3
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2401      	movs	r4, #1
 8003aec:	9400      	str	r4, [sp, #0]
 8003aee:	f7ff fe0e 	bl	800370e <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	3305      	adds	r3, #5
 8003af8:	b2d8      	uxtb	r0, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	3302      	adds	r3, #2
 8003b00:	b2d9      	uxtb	r1, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	3306      	adds	r3, #6
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	3304      	adds	r3, #4
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2401      	movs	r4, #1
 8003b14:	9400      	str	r4, [sp, #0]
 8003b16:	f7ff fdfa 	bl	800370e <ssd1306_DrawRectangle>

		if(currentsquare==1){
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d113      	bne.n	8003b48 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	3308      	adds	r3, #8
 8003b26:	b2d8      	uxtb	r0, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	b2d9      	uxtb	r1, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	3309      	adds	r3, #9
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2401      	movs	r4, #1
 8003b42:	9400      	str	r4, [sp, #0]
 8003b44:	f7ff fde3 	bl	800370e <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f7fc fcfd 	bl	8000548 <__aeabi_f2d>
 8003b4e:	a334      	add	r3, pc, #208	; (adr r3, 8003c20 <batterygauge+0x2f0>)
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	f7fc ffe0 	bl	8000b18 <__aeabi_dcmpgt>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d100      	bne.n	8003b60 <batterygauge+0x230>
	}




}
 8003b5e:	e052      	b.n	8003c06 <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	3302      	adds	r3, #2
 8003b66:	b2d8      	uxtb	r0, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	b2d9      	uxtb	r1, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	3303      	adds	r3, #3
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2401      	movs	r4, #1
 8003b82:	9400      	str	r4, [sp, #0]
 8003b84:	f7ff fdc3 	bl	800370e <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	3305      	adds	r3, #5
 8003b8e:	b2d8      	uxtb	r0, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	3302      	adds	r3, #2
 8003b96:	b2d9      	uxtb	r1, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	3306      	adds	r3, #6
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2401      	movs	r4, #1
 8003baa:	9400      	str	r4, [sp, #0]
 8003bac:	f7ff fdaf 	bl	800370e <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	b2d8      	uxtb	r0, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	3302      	adds	r3, #2
 8003bbe:	b2d9      	uxtb	r1, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	3309      	adds	r3, #9
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	3304      	adds	r3, #4
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2401      	movs	r4, #1
 8003bd2:	9400      	str	r4, [sp, #0]
 8003bd4:	f7ff fd9b 	bl	800370e <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d113      	bne.n	8003c06 <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	330b      	adds	r3, #11
 8003be4:	b2d8      	uxtb	r0, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	3302      	adds	r3, #2
 8003bec:	b2d9      	uxtb	r1, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	330c      	adds	r3, #12
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2401      	movs	r4, #1
 8003c00:	9400      	str	r4, [sp, #0]
 8003c02:	f7ff fd84 	bl	800370e <ssd1306_DrawRectangle>
}
 8003c06:	bf00      	nop
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd90      	pop	{r4, r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	9999999a 	.word	0x9999999a
 8003c14:	400d9999 	.word	0x400d9999
 8003c18:	33333333 	.word	0x33333333
 8003c1c:	400f3333 	.word	0x400f3333
 8003c20:	66666666 	.word	0x66666666
 8003c24:	40106666 	.word	0x40106666

08003c28 <percentage>:

void percentage(float percent){
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 40, floor(0.64*percent+32), 56, White);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fc fc88 	bl	8000548 <__aeabi_f2d>
 8003c38:	a329      	add	r3, pc, #164	; (adr r3, 8003ce0 <percentage+0xb8>)
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	f7fc fcdb 	bl	80005f8 <__aeabi_dmul>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	4b20      	ldr	r3, [pc, #128]	; (8003cd0 <percentage+0xa8>)
 8003c50:	f7fc fb1c 	bl	800028c <__adddf3>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	ec43 2b17 	vmov	d7, r2, r3
 8003c5c:	eeb0 0a47 	vmov.f32	s0, s14
 8003c60:	eef0 0a67 	vmov.f32	s1, s15
 8003c64:	f016 fec8 	bl	801a9f8 <floor>
 8003c68:	ec53 2b10 	vmov	r2, r3, d0
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f7fc ff9a 	bl	8000ba8 <__aeabi_d2uiz>
 8003c74:	4603      	mov	r3, r0
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	2301      	movs	r3, #1
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	2338      	movs	r3, #56	; 0x38
 8003c7e:	2128      	movs	r1, #40	; 0x28
 8003c80:	2020      	movs	r0, #32
 8003c82:	f7ff fd7b 	bl	800377c <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 40, 95, 56, White);
 8003c86:	2301      	movs	r3, #1
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	2338      	movs	r3, #56	; 0x38
 8003c8c:	225f      	movs	r2, #95	; 0x5f
 8003c8e:	2128      	movs	r1, #40	; 0x28
 8003c90:	2020      	movs	r0, #32
 8003c92:	f7ff fd3c 	bl	800370e <ssd1306_DrawRectangle>
	snprintf((uint8_t *)str,20,"%0.2f %%",(float) percent);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fc fc56 	bl	8000548 <__aeabi_f2d>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	e9cd 2300 	strd	r2, r3, [sp]
 8003ca4:	4a0b      	ldr	r2, [pc, #44]	; (8003cd4 <percentage+0xac>)
 8003ca6:	2114      	movs	r1, #20
 8003ca8:	480b      	ldr	r0, [pc, #44]	; (8003cd8 <percentage+0xb0>)
 8003caa:	f013 fedf 	bl	8017a6c <sniprintf>
	ssd1306_SetCursor(45,44);
 8003cae:	212c      	movs	r1, #44	; 0x2c
 8003cb0:	202d      	movs	r0, #45	; 0x2d
 8003cb2:	f7ff fc21 	bl	80034f8 <ssd1306_SetCursor>
	ssd1306_WriteString((uint8_t*)str,Font_6x8,White);
 8003cb6:	4a09      	ldr	r2, [pc, #36]	; (8003cdc <percentage+0xb4>)
 8003cb8:	2301      	movs	r3, #1
 8003cba:	ca06      	ldmia	r2, {r1, r2}
 8003cbc:	4806      	ldr	r0, [pc, #24]	; (8003cd8 <percentage+0xb0>)
 8003cbe:	f7ff fbf5 	bl	80034ac <ssd1306_WriteString>


}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	f3af 8000 	nop.w
 8003cd0:	40400000 	.word	0x40400000
 8003cd4:	0801cdb8 	.word	0x0801cdb8
 8003cd8:	20000774 	.word	0x20000774
 8003cdc:	20000020 	.word	0x20000020
 8003ce0:	47ae147b 	.word	0x47ae147b
 8003ce4:	3fe47ae1 	.word	0x3fe47ae1

08003ce8 <statemachine>:

extern int enablewrite;



void statemachine(void){
 8003ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cea:	ed2d 8b02 	vpush	{d8}
 8003cee:	b09f      	sub	sp, #124	; 0x7c
 8003cf0:	af04      	add	r7, sp, #16
	switch(state){
 8003cf2:	4b99      	ldr	r3, [pc, #612]	; (8003f58 <statemachine+0x270>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b07      	cmp	r3, #7
 8003cf8:	f201 86be 	bhi.w	8005a78 <statemachine+0x1d90>
 8003cfc:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <statemachine+0x1c>)
 8003cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d02:	bf00      	nop
 8003d04:	08003d25 	.word	0x08003d25
 8003d08:	080041b9 	.word	0x080041b9
 8003d0c:	08004701 	.word	0x08004701
 8003d10:	08004d6b 	.word	0x08004d6b
 8003d14:	08004f23 	.word	0x08004f23
 8003d18:	08005139 	.word	0x08005139
 8003d1c:	08005233 	.word	0x08005233
 8003d20:	08005655 	.word	0x08005655
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 8003d24:	2000      	movs	r0, #0
 8003d26:	f7ff faa5 	bl	8003274 <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 8003d2a:	2120      	movs	r1, #32
 8003d2c:	2020      	movs	r0, #32
 8003d2e:	f7ff fbe3 	bl	80034f8 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 8003d32:	498a      	ldr	r1, [pc, #552]	; (8003f5c <statemachine+0x274>)
 8003d34:	488a      	ldr	r0, [pc, #552]	; (8003f60 <statemachine+0x278>)
 8003d36:	f7fe fb0d 	bl	8002354 <nmea_parse>
				 if(myData.speed>=vitmax){
 8003d3a:	4b89      	ldr	r3, [pc, #548]	; (8003f60 <statemachine+0x278>)
 8003d3c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003d40:	4b88      	ldr	r3, [pc, #544]	; (8003f64 <statemachine+0x27c>)
 8003d42:	edd3 7a00 	vldr	s15, [r3]
 8003d46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4e:	db03      	blt.n	8003d58 <statemachine+0x70>
									 vitmax=myData.speed;
 8003d50:	4b83      	ldr	r3, [pc, #524]	; (8003f60 <statemachine+0x278>)
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	4a83      	ldr	r2, [pc, #524]	; (8003f64 <statemachine+0x27c>)
 8003d56:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	667b      	str	r3, [r7, #100]	; 0x64
								 float sec=0;
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	663b      	str	r3, [r7, #96]	; 0x60
								 if (myData.speed!=0){
 8003d64:	4b7e      	ldr	r3, [pc, #504]	; (8003f60 <statemachine+0x278>)
 8003d66:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003d6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d72:	d032      	beq.n	8003dda <statemachine+0xf2>
									 pace=1000/(60*myData.speed);
 8003d74:	4b7a      	ldr	r3, [pc, #488]	; (8003f60 <statemachine+0x278>)
 8003d76:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003d7a:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8003f68 <statemachine+0x280>
 8003d7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d82:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8003f6c <statemachine+0x284>
 8003d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d8a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
									 sec=(pace-floor(pace))*60;
 8003d8e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003d90:	f7fc fbda 	bl	8000548 <__aeabi_f2d>
 8003d94:	4604      	mov	r4, r0
 8003d96:	460d      	mov	r5, r1
 8003d98:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003d9a:	f7fc fbd5 	bl	8000548 <__aeabi_f2d>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	ec43 2b10 	vmov	d0, r2, r3
 8003da6:	f016 fe27 	bl	801a9f8 <floor>
 8003daa:	ec53 2b10 	vmov	r2, r3, d0
 8003dae:	4620      	mov	r0, r4
 8003db0:	4629      	mov	r1, r5
 8003db2:	f7fc fa69 	bl	8000288 <__aeabi_dsub>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4610      	mov	r0, r2
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	4b6b      	ldr	r3, [pc, #428]	; (8003f70 <statemachine+0x288>)
 8003dc4:	f7fc fc18 	bl	80005f8 <__aeabi_dmul>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4610      	mov	r0, r2
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f7fc ff0a 	bl	8000be8 <__aeabi_d2f>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	663b      	str	r3, [r7, #96]	; 0x60
 8003dd8:	e001      	b.n	8003dde <statemachine+0xf6>
								 }
								 else {
									 pace=9999;
 8003dda:	4b66      	ldr	r3, [pc, #408]	; (8003f74 <statemachine+0x28c>)
 8003ddc:	667b      	str	r3, [r7, #100]	; 0x64
								 }


				  switch(spdstate){
 8003dde:	4b66      	ldr	r3, [pc, #408]	; (8003f78 <statemachine+0x290>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	f000 8162 	beq.w	80040ac <statemachine+0x3c4>
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	f300 81d2 	bgt.w	8004192 <statemachine+0x4aa>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <statemachine+0x112>
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	f000 80d2 	beq.w	8003f9c <statemachine+0x2b4>
 8003df8:	e1cb      	b.n	8004192 <statemachine+0x4aa>


				 case STATE_SUMMARY:
					 if(myData.fix == 1){
 8003dfa:	4b59      	ldr	r3, [pc, #356]	; (8003f60 <statemachine+0x278>)
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d16f      	bne.n	8003ee2 <statemachine+0x1fa>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 8003e02:	2014      	movs	r0, #20
 8003e04:	f011 ff38 	bl	8015c78 <malloc>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	603b      	str	r3, [r7, #0]
					 				 						snprintf(str,15, "MaxV=%.1f",vitmax*3.6);
 8003e0c:	4b55      	ldr	r3, [pc, #340]	; (8003f64 <statemachine+0x27c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fc fb99 	bl	8000548 <__aeabi_f2d>
 8003e16:	a34e      	add	r3, pc, #312	; (adr r3, 8003f50 <statemachine+0x268>)
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	f7fc fbec 	bl	80005f8 <__aeabi_dmul>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	e9cd 2300 	strd	r2, r3, [sp]
 8003e28:	4a54      	ldr	r2, [pc, #336]	; (8003f7c <statemachine+0x294>)
 8003e2a:	210f      	movs	r1, #15
 8003e2c:	6838      	ldr	r0, [r7, #0]
 8003e2e:	f013 fe1d 	bl	8017a6c <sniprintf>
					 				 						ssd1306_SetCursor(32, 32);
 8003e32:	2120      	movs	r1, #32
 8003e34:	2020      	movs	r0, #32
 8003e36:	f7ff fb5f 	bl	80034f8 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8003e3a:	4a51      	ldr	r2, [pc, #324]	; (8003f80 <statemachine+0x298>)
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	ca06      	ldmia	r2, {r1, r2}
 8003e40:	6838      	ldr	r0, [r7, #0]
 8003e42:	f7ff fb33 	bl	80034ac <ssd1306_WriteString>
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 8003e46:	4b46      	ldr	r3, [pc, #280]	; (8003f60 <statemachine+0x278>)
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fc fb7c 	bl	8000548 <__aeabi_f2d>
 8003e50:	a33f      	add	r3, pc, #252	; (adr r3, 8003f50 <statemachine+0x268>)
 8003e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e56:	f7fc fbcf 	bl	80005f8 <__aeabi_dmul>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	e9cd 2300 	strd	r2, r3, [sp]
 8003e62:	4a48      	ldr	r2, [pc, #288]	; (8003f84 <statemachine+0x29c>)
 8003e64:	210f      	movs	r1, #15
 8003e66:	6838      	ldr	r0, [r7, #0]
 8003e68:	f013 fe00 	bl	8017a6c <sniprintf>
					 				 						ssd1306_SetCursor(32, 42);
 8003e6c:	212a      	movs	r1, #42	; 0x2a
 8003e6e:	2020      	movs	r0, #32
 8003e70:	f7ff fb42 	bl	80034f8 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8003e74:	4a42      	ldr	r2, [pc, #264]	; (8003f80 <statemachine+0x298>)
 8003e76:	2301      	movs	r3, #1
 8003e78:	ca06      	ldmia	r2, {r1, r2}
 8003e7a:	6838      	ldr	r0, [r7, #0]
 8003e7c:	f7ff fb16 	bl	80034ac <ssd1306_WriteString>
					 				 						snprintf(str,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));
 8003e80:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003e82:	f7fc fb61 	bl	8000548 <__aeabi_f2d>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	ec43 2b10 	vmov	d0, r2, r3
 8003e8e:	f016 fdb3 	bl	801a9f8 <floor>
 8003e92:	eeb0 8a40 	vmov.f32	s16, s0
 8003e96:	eef0 8a60 	vmov.f32	s17, s1
 8003e9a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003e9c:	f7fc fb54 	bl	8000548 <__aeabi_f2d>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	ec43 2b10 	vmov	d0, r2, r3
 8003ea8:	f016 fda6 	bl	801a9f8 <floor>
 8003eac:	eeb0 7a40 	vmov.f32	s14, s0
 8003eb0:	eef0 7a60 	vmov.f32	s15, s1
 8003eb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003eb8:	ed8d 8b00 	vstr	d8, [sp]
 8003ebc:	4a32      	ldr	r2, [pc, #200]	; (8003f88 <statemachine+0x2a0>)
 8003ebe:	210f      	movs	r1, #15
 8003ec0:	6838      	ldr	r0, [r7, #0]
 8003ec2:	f013 fdd3 	bl	8017a6c <sniprintf>
					 				 						ssd1306_SetCursor(32, 52);
 8003ec6:	2134      	movs	r1, #52	; 0x34
 8003ec8:	2020      	movs	r0, #32
 8003eca:	f7ff fb15 	bl	80034f8 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8003ece:	4a2c      	ldr	r2, [pc, #176]	; (8003f80 <statemachine+0x298>)
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	ca06      	ldmia	r2, {r1, r2}
 8003ed4:	6838      	ldr	r0, [r7, #0]
 8003ed6:	f7ff fae9 	bl	80034ac <ssd1306_WriteString>
					 				 						free(str);
 8003eda:	6838      	ldr	r0, [r7, #0]
 8003edc:	f011 fed4 	bl	8015c88 <free>
 8003ee0:	e025      	b.n	8003f2e <statemachine+0x246>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);
 8003ee2:	2014      	movs	r0, #20
 8003ee4:	f011 fec8 	bl	8015c78 <malloc>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	607b      	str	r3, [r7, #4]
					 				 						ssd1306_SetCursor(32, 32);
 8003eec:	2120      	movs	r1, #32
 8003eee:	2020      	movs	r0, #32
 8003ef0:	f7ff fb02 	bl	80034f8 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 1", Font_6x8, White);
 8003ef4:	4a22      	ldr	r2, [pc, #136]	; (8003f80 <statemachine+0x298>)
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	ca06      	ldmia	r2, {r1, r2}
 8003efa:	4824      	ldr	r0, [pc, #144]	; (8003f8c <statemachine+0x2a4>)
 8003efc:	f7ff fad6 	bl	80034ac <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8003f00:	212c      	movs	r1, #44	; 0x2c
 8003f02:	2020      	movs	r0, #32
 8003f04:	f7ff faf8 	bl	80034f8 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003f08:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <statemachine+0x298>)
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	ca06      	ldmia	r2, {r1, r2}
 8003f0e:	4820      	ldr	r0, [pc, #128]	; (8003f90 <statemachine+0x2a8>)
 8003f10:	f7ff facc 	bl	80034ac <ssd1306_WriteString>
					 				 						batterygauge(vbat,35, 54,1);
 8003f14:	4b1f      	ldr	r3, [pc, #124]	; (8003f94 <statemachine+0x2ac>)
 8003f16:	edd3 7a00 	vldr	s15, [r3]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	2136      	movs	r1, #54	; 0x36
 8003f1e:	2023      	movs	r0, #35	; 0x23
 8003f20:	eeb0 0a67 	vmov.f32	s0, s15
 8003f24:	f7ff fd04 	bl	8003930 <batterygauge>
					 				 						free(str);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f011 fead 	bl	8015c88 <free>
					 				 					}
					 if(BTN_B>=1){
 8003f2e:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <statemachine+0x2b0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f340 8128 	ble.w	8004188 <statemachine+0x4a0>
					 					 				 					spdstate++;
 8003f38:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <statemachine+0x290>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <statemachine+0x290>)
 8003f42:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8003f44:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <statemachine+0x2b0>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]
					 					 				  	}



					 break;
 8003f4a:	e11d      	b.n	8004188 <statemachine+0x4a0>
 8003f4c:	f3af 8000 	nop.w
 8003f50:	cccccccd 	.word	0xcccccccd
 8003f54:	400ccccc 	.word	0x400ccccc
 8003f58:	200004a8 	.word	0x200004a8
 8003f5c:	200004f4 	.word	0x200004f4
 8003f60:	200006f8 	.word	0x200006f8
 8003f64:	20000a20 	.word	0x20000a20
 8003f68:	42700000 	.word	0x42700000
 8003f6c:	447a0000 	.word	0x447a0000
 8003f70:	404e0000 	.word	0x404e0000
 8003f74:	461c3c00 	.word	0x461c3c00
 8003f78:	200004aa 	.word	0x200004aa
 8003f7c:	0801cdc4 	.word	0x0801cdc4
 8003f80:	20000020 	.word	0x20000020
 8003f84:	0801cdd0 	.word	0x0801cdd0
 8003f88:	0801cdd8 	.word	0x0801cdd8
 8003f8c:	0801cdec 	.word	0x0801cdec
 8003f90:	0801cdf4 	.word	0x0801cdf4
 8003f94:	20000770 	.word	0x20000770
 8003f98:	2000073c 	.word	0x2000073c
				 case STATE_COMPTEUR:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 8003f9c:	4b96      	ldr	r3, [pc, #600]	; (80041f8 <statemachine+0x510>)
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d159      	bne.n	8004058 <statemachine+0x370>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 8003fa4:	2014      	movs	r0, #20
 8003fa6:	f011 fe67 	bl	8015c78 <malloc>
 8003faa:	4603      	mov	r3, r0
 8003fac:	60bb      	str	r3, [r7, #8]
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 8003fae:	4b92      	ldr	r3, [pc, #584]	; (80041f8 <statemachine+0x510>)
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fc fac8 	bl	8000548 <__aeabi_f2d>
 8003fb8:	a38b      	add	r3, pc, #556	; (adr r3, 80041e8 <statemachine+0x500>)
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	f7fc fb1b 	bl	80005f8 <__aeabi_dmul>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	e9cd 2300 	strd	r2, r3, [sp]
 8003fca:	4a8c      	ldr	r2, [pc, #560]	; (80041fc <statemachine+0x514>)
 8003fcc:	210f      	movs	r1, #15
 8003fce:	68b8      	ldr	r0, [r7, #8]
 8003fd0:	f013 fd4c 	bl	8017a6c <sniprintf>
					 				 						ssd1306_SetCursor(32, 54);
 8003fd4:	2136      	movs	r1, #54	; 0x36
 8003fd6:	2020      	movs	r0, #32
 8003fd8:	f7ff fa8e 	bl	80034f8 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8003fdc:	4a88      	ldr	r2, [pc, #544]	; (8004200 <statemachine+0x518>)
 8003fde:	2301      	movs	r3, #1
 8003fe0:	ca06      	ldmia	r2, {r1, r2}
 8003fe2:	68b8      	ldr	r0, [r7, #8]
 8003fe4:	f7ff fa62 	bl	80034ac <ssd1306_WriteString>
					 				 						ssd1306_DrawRectangle(32, 38, 95, 53, White);
 8003fe8:	2301      	movs	r3, #1
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	2335      	movs	r3, #53	; 0x35
 8003fee:	225f      	movs	r2, #95	; 0x5f
 8003ff0:	2126      	movs	r1, #38	; 0x26
 8003ff2:	2020      	movs	r0, #32
 8003ff4:	f7ff fb8b 	bl	800370e <ssd1306_DrawRectangle>
					 				 						ssd1306_FillRectangle(32, 38,(int) floor(32+(myData.speed*0.63)), 53, White);
 8003ff8:	4b7f      	ldr	r3, [pc, #508]	; (80041f8 <statemachine+0x510>)
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fc faa3 	bl	8000548 <__aeabi_f2d>
 8004002:	a37b      	add	r3, pc, #492	; (adr r3, 80041f0 <statemachine+0x508>)
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f7fc faf6 	bl	80005f8 <__aeabi_dmul>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4610      	mov	r0, r2
 8004012:	4619      	mov	r1, r3
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	4b7a      	ldr	r3, [pc, #488]	; (8004204 <statemachine+0x51c>)
 800401a:	f7fc f937 	bl	800028c <__adddf3>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	ec43 2b17 	vmov	d7, r2, r3
 8004026:	eeb0 0a47 	vmov.f32	s0, s14
 800402a:	eef0 0a67 	vmov.f32	s1, s15
 800402e:	f016 fce3 	bl	801a9f8 <floor>
 8004032:	ec53 2b10 	vmov	r2, r3, d0
 8004036:	4610      	mov	r0, r2
 8004038:	4619      	mov	r1, r3
 800403a:	f7fc fd8d 	bl	8000b58 <__aeabi_d2iz>
 800403e:	4603      	mov	r3, r0
 8004040:	b2da      	uxtb	r2, r3
 8004042:	2301      	movs	r3, #1
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	2335      	movs	r3, #53	; 0x35
 8004048:	2126      	movs	r1, #38	; 0x26
 800404a:	2020      	movs	r0, #32
 800404c:	f7ff fb96 	bl	800377c <ssd1306_FillRectangle>

					 				 						free(str);
 8004050:	68b8      	ldr	r0, [r7, #8]
 8004052:	f011 fe19 	bl	8015c88 <free>
 8004056:	e01b      	b.n	8004090 <statemachine+0x3a8>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8004058:	2014      	movs	r0, #20
 800405a:	f011 fe0d 	bl	8015c78 <malloc>
 800405e:	4603      	mov	r3, r0
 8004060:	60fb      	str	r3, [r7, #12]
					 				 						ssd1306_SetCursor(32, 32);
 8004062:	2120      	movs	r1, #32
 8004064:	2020      	movs	r0, #32
 8004066:	f7ff fa47 	bl	80034f8 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 2", Font_6x8, White);
 800406a:	4a65      	ldr	r2, [pc, #404]	; (8004200 <statemachine+0x518>)
 800406c:	2301      	movs	r3, #1
 800406e:	ca06      	ldmia	r2, {r1, r2}
 8004070:	4865      	ldr	r0, [pc, #404]	; (8004208 <statemachine+0x520>)
 8004072:	f7ff fa1b 	bl	80034ac <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8004076:	212c      	movs	r1, #44	; 0x2c
 8004078:	2020      	movs	r0, #32
 800407a:	f7ff fa3d 	bl	80034f8 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800407e:	4a60      	ldr	r2, [pc, #384]	; (8004200 <statemachine+0x518>)
 8004080:	2301      	movs	r3, #1
 8004082:	ca06      	ldmia	r2, {r1, r2}
 8004084:	4861      	ldr	r0, [pc, #388]	; (800420c <statemachine+0x524>)
 8004086:	f7ff fa11 	bl	80034ac <ssd1306_WriteString>
					 				 						free(str);
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f011 fdfc 	bl	8015c88 <free>
					 				 					}
					 if(BTN_B>=1){
 8004090:	4b5f      	ldr	r3, [pc, #380]	; (8004210 <statemachine+0x528>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	dd79      	ble.n	800418c <statemachine+0x4a4>
					 				 					spdstate++;
 8004098:	4b5e      	ldr	r3, [pc, #376]	; (8004214 <statemachine+0x52c>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	3301      	adds	r3, #1
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	4b5c      	ldr	r3, [pc, #368]	; (8004214 <statemachine+0x52c>)
 80040a2:	701a      	strb	r2, [r3, #0]
					 				 					BTN_B=0;
 80040a4:	4b5a      	ldr	r3, [pc, #360]	; (8004210 <statemachine+0x528>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
					 				  	}
					 break;
 80040aa:	e06f      	b.n	800418c <statemachine+0x4a4>
				 case STATE_GRAPH:
					 if(myData.fix == 1){
 80040ac:	4b52      	ldr	r3, [pc, #328]	; (80041f8 <statemachine+0x510>)
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d12f      	bne.n	8004114 <statemachine+0x42c>
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 80040b4:	2014      	movs	r0, #20
 80040b6:	f011 fddf 	bl	8015c78 <malloc>
 80040ba:	4603      	mov	r3, r0
 80040bc:	613b      	str	r3, [r7, #16]

					 				 						ssd1306_SetCursor(32, 32);
 80040be:	2120      	movs	r1, #32
 80040c0:	2020      	movs	r0, #32
 80040c2:	f7ff fa19 	bl	80034f8 <ssd1306_SetCursor>
					 				 						snprintf(str,15, "%0.1f",(myData.speed)*3.6);
 80040c6:	4b4c      	ldr	r3, [pc, #304]	; (80041f8 <statemachine+0x510>)
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc fa3c 	bl	8000548 <__aeabi_f2d>
 80040d0:	a345      	add	r3, pc, #276	; (adr r3, 80041e8 <statemachine+0x500>)
 80040d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d6:	f7fc fa8f 	bl	80005f8 <__aeabi_dmul>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	e9cd 2300 	strd	r2, r3, [sp]
 80040e2:	4a4d      	ldr	r2, [pc, #308]	; (8004218 <statemachine+0x530>)
 80040e4:	210f      	movs	r1, #15
 80040e6:	6938      	ldr	r0, [r7, #16]
 80040e8:	f013 fcc0 	bl	8017a6c <sniprintf>
					 				 						ssd1306_WriteString(str, Font_11x18, White);
 80040ec:	4a4b      	ldr	r2, [pc, #300]	; (800421c <statemachine+0x534>)
 80040ee:	2301      	movs	r3, #1
 80040f0:	ca06      	ldmia	r2, {r1, r2}
 80040f2:	6938      	ldr	r0, [r7, #16]
 80040f4:	f7ff f9da 	bl	80034ac <ssd1306_WriteString>
					 				 						batterygauge(vbat,35, 54,1);
 80040f8:	4b49      	ldr	r3, [pc, #292]	; (8004220 <statemachine+0x538>)
 80040fa:	edd3 7a00 	vldr	s15, [r3]
 80040fe:	2201      	movs	r2, #1
 8004100:	2136      	movs	r1, #54	; 0x36
 8004102:	2023      	movs	r0, #35	; 0x23
 8004104:	eeb0 0a67 	vmov.f32	s0, s15
 8004108:	f7ff fc12 	bl	8003930 <batterygauge>

					 				 						free(str);
 800410c:	6938      	ldr	r0, [r7, #16]
 800410e:	f011 fdbb 	bl	8015c88 <free>
 8004112:	e025      	b.n	8004160 <statemachine+0x478>
					 }
					 else{
						 char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8004114:	2014      	movs	r0, #20
 8004116:	f011 fdaf 	bl	8015c78 <malloc>
 800411a:	4603      	mov	r3, r0
 800411c:	617b      	str	r3, [r7, #20]
						 ssd1306_SetCursor(32, 32);
 800411e:	2120      	movs	r1, #32
 8004120:	2020      	movs	r0, #32
 8004122:	f7ff f9e9 	bl	80034f8 <ssd1306_SetCursor>
						 ssd1306_WriteString("Speed 3", Font_6x8, White);
 8004126:	4a36      	ldr	r2, [pc, #216]	; (8004200 <statemachine+0x518>)
 8004128:	2301      	movs	r3, #1
 800412a:	ca06      	ldmia	r2, {r1, r2}
 800412c:	483d      	ldr	r0, [pc, #244]	; (8004224 <statemachine+0x53c>)
 800412e:	f7ff f9bd 	bl	80034ac <ssd1306_WriteString>
						 ssd1306_SetCursor(32, 44);
 8004132:	212c      	movs	r1, #44	; 0x2c
 8004134:	2020      	movs	r0, #32
 8004136:	f7ff f9df 	bl	80034f8 <ssd1306_SetCursor>
						 ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800413a:	4a31      	ldr	r2, [pc, #196]	; (8004200 <statemachine+0x518>)
 800413c:	2301      	movs	r3, #1
 800413e:	ca06      	ldmia	r2, {r1, r2}
 8004140:	4832      	ldr	r0, [pc, #200]	; (800420c <statemachine+0x524>)
 8004142:	f7ff f9b3 	bl	80034ac <ssd1306_WriteString>
						 batterygauge(vbat,35, 54,1);
 8004146:	4b36      	ldr	r3, [pc, #216]	; (8004220 <statemachine+0x538>)
 8004148:	edd3 7a00 	vldr	s15, [r3]
 800414c:	2201      	movs	r2, #1
 800414e:	2136      	movs	r1, #54	; 0x36
 8004150:	2023      	movs	r0, #35	; 0x23
 8004152:	eeb0 0a67 	vmov.f32	s0, s15
 8004156:	f7ff fbeb 	bl	8003930 <batterygauge>
						 free(str);
 800415a:	6978      	ldr	r0, [r7, #20]
 800415c:	f011 fd94 	bl	8015c88 <free>
					 }

					 if(BTN_B>=1){
 8004160:	4b2b      	ldr	r3, [pc, #172]	; (8004210 <statemachine+0x528>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	dd13      	ble.n	8004190 <statemachine+0x4a8>
					 					 				 					spdstate--;
 8004168:	4b2a      	ldr	r3, [pc, #168]	; (8004214 <statemachine+0x52c>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	3b01      	subs	r3, #1
 800416e:	b2da      	uxtb	r2, r3
 8004170:	4b28      	ldr	r3, [pc, #160]	; (8004214 <statemachine+0x52c>)
 8004172:	701a      	strb	r2, [r3, #0]
					 					 				 					spdstate--;
 8004174:	4b27      	ldr	r3, [pc, #156]	; (8004214 <statemachine+0x52c>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	3b01      	subs	r3, #1
 800417a:	b2da      	uxtb	r2, r3
 800417c:	4b25      	ldr	r3, [pc, #148]	; (8004214 <statemachine+0x52c>)
 800417e:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8004180:	4b23      	ldr	r3, [pc, #140]	; (8004210 <statemachine+0x528>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 8004186:	e003      	b.n	8004190 <statemachine+0x4a8>
					 break;
 8004188:	bf00      	nop
 800418a:	e002      	b.n	8004192 <statemachine+0x4aa>
					 break;
 800418c:	bf00      	nop
 800418e:	e000      	b.n	8004192 <statemachine+0x4aa>
					 break;
 8004190:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 8004192:	4b25      	ldr	r3, [pc, #148]	; (8004228 <statemachine+0x540>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	f341 845e 	ble.w	8005a58 <statemachine+0x1d70>
				 					state++;
 800419c:	4b23      	ldr	r3, [pc, #140]	; (800422c <statemachine+0x544>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	3301      	adds	r3, #1
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	4b21      	ldr	r3, [pc, #132]	; (800422c <statemachine+0x544>)
 80041a6:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 80041a8:	4b1f      	ldr	r3, [pc, #124]	; (8004228 <statemachine+0x540>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
				 					BTN_B=0;
 80041ae:	4b18      	ldr	r3, [pc, #96]	; (8004210 <statemachine+0x528>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
				  	}
				  break;
 80041b4:	f001 bc50 	b.w	8005a58 <statemachine+0x1d70>


	case STATE_POS:
			  ssd1306_Fill(Black);
 80041b8:	2000      	movs	r0, #0
 80041ba:	f7ff f85b 	bl	8003274 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 80041be:	491c      	ldr	r1, [pc, #112]	; (8004230 <statemachine+0x548>)
 80041c0:	480d      	ldr	r0, [pc, #52]	; (80041f8 <statemachine+0x510>)
 80041c2:	f7fe f8c7 	bl	8002354 <nmea_parse>
			  switch(posstate){
 80041c6:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <statemachine+0x54c>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	f200 8285 	bhi.w	80046da <statemachine+0x9f2>
 80041d0:	a201      	add	r2, pc, #4	; (adr r2, 80041d8 <statemachine+0x4f0>)
 80041d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d6:	bf00      	nop
 80041d8:	08004239 	.word	0x08004239
 80041dc:	08004351 	.word	0x08004351
 80041e0:	08004447 	.word	0x08004447
 80041e4:	08004577 	.word	0x08004577
 80041e8:	cccccccd 	.word	0xcccccccd
 80041ec:	400ccccc 	.word	0x400ccccc
 80041f0:	c28f5c29 	.word	0xc28f5c29
 80041f4:	3fe428f5 	.word	0x3fe428f5
 80041f8:	200006f8 	.word	0x200006f8
 80041fc:	0801cdd0 	.word	0x0801cdd0
 8004200:	20000020 	.word	0x20000020
 8004204:	40400000 	.word	0x40400000
 8004208:	0801ce00 	.word	0x0801ce00
 800420c:	0801cdf4 	.word	0x0801cdf4
 8004210:	2000073c 	.word	0x2000073c
 8004214:	200004aa 	.word	0x200004aa
 8004218:	0801ce08 	.word	0x0801ce08
 800421c:	20000030 	.word	0x20000030
 8004220:	20000770 	.word	0x20000770
 8004224:	0801ce10 	.word	0x0801ce10
 8004228:	20000738 	.word	0x20000738
 800422c:	200004a8 	.word	0x200004a8
 8004230:	200004f4 	.word	0x200004f4
 8004234:	200004ab 	.word	0x200004ab

			  case STATE_SUMMARY1:
				  if(myData.fix == 1){
 8004238:	4bab      	ldr	r3, [pc, #684]	; (80044e8 <statemachine+0x800>)
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	2b01      	cmp	r3, #1
 800423e:	d14e      	bne.n	80042de <statemachine+0x5f6>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8004240:	2014      	movs	r0, #20
 8004242:	f011 fd19 	bl	8015c78 <malloc>
 8004246:	4603      	mov	r3, r0
 8004248:	61bb      	str	r3, [r7, #24]
				  						ssd1306_SetCursor(32, 32);
 800424a:	2120      	movs	r1, #32
 800424c:	2020      	movs	r0, #32
 800424e:	f7ff f953 	bl	80034f8 <ssd1306_SetCursor>
				  						snprintf(str,15, "Latitude:");
 8004252:	4aa6      	ldr	r2, [pc, #664]	; (80044ec <statemachine+0x804>)
 8004254:	210f      	movs	r1, #15
 8004256:	69b8      	ldr	r0, [r7, #24]
 8004258:	f013 fc08 	bl	8017a6c <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800425c:	4aa4      	ldr	r2, [pc, #656]	; (80044f0 <statemachine+0x808>)
 800425e:	2301      	movs	r3, #1
 8004260:	ca06      	ldmia	r2, {r1, r2}
 8004262:	69b8      	ldr	r0, [r7, #24]
 8004264:	f7ff f922 	bl	80034ac <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8004268:	4b9f      	ldr	r3, [pc, #636]	; (80044e8 <statemachine+0x800>)
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	e9cd 2300 	strd	r2, r3, [sp]
 8004272:	4aa0      	ldr	r2, [pc, #640]	; (80044f4 <statemachine+0x80c>)
 8004274:	210f      	movs	r1, #15
 8004276:	69b8      	ldr	r0, [r7, #24]
 8004278:	f013 fbf8 	bl	8017a6c <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 800427c:	2128      	movs	r1, #40	; 0x28
 800427e:	2020      	movs	r0, #32
 8004280:	f7ff f93a 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8004284:	4a9a      	ldr	r2, [pc, #616]	; (80044f0 <statemachine+0x808>)
 8004286:	2301      	movs	r3, #1
 8004288:	ca06      	ldmia	r2, {r1, r2}
 800428a:	69b8      	ldr	r0, [r7, #24]
 800428c:	f7ff f90e 	bl	80034ac <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8004290:	4a99      	ldr	r2, [pc, #612]	; (80044f8 <statemachine+0x810>)
 8004292:	210f      	movs	r1, #15
 8004294:	69b8      	ldr	r0, [r7, #24]
 8004296:	f013 fbe9 	bl	8017a6c <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 800429a:	2130      	movs	r1, #48	; 0x30
 800429c:	2020      	movs	r0, #32
 800429e:	f7ff f92b 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80042a2:	4a93      	ldr	r2, [pc, #588]	; (80044f0 <statemachine+0x808>)
 80042a4:	2301      	movs	r3, #1
 80042a6:	ca06      	ldmia	r2, {r1, r2}
 80042a8:	69b8      	ldr	r0, [r7, #24]
 80042aa:	f7ff f8ff 	bl	80034ac <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 80042ae:	4b8e      	ldr	r3, [pc, #568]	; (80044e8 <statemachine+0x800>)
 80042b0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80042b4:	e9cd 2300 	strd	r2, r3, [sp]
 80042b8:	4a8e      	ldr	r2, [pc, #568]	; (80044f4 <statemachine+0x80c>)
 80042ba:	210f      	movs	r1, #15
 80042bc:	69b8      	ldr	r0, [r7, #24]
 80042be:	f013 fbd5 	bl	8017a6c <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80042c2:	2138      	movs	r1, #56	; 0x38
 80042c4:	2020      	movs	r0, #32
 80042c6:	f7ff f917 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80042ca:	4a89      	ldr	r2, [pc, #548]	; (80044f0 <statemachine+0x808>)
 80042cc:	2301      	movs	r3, #1
 80042ce:	ca06      	ldmia	r2, {r1, r2}
 80042d0:	69b8      	ldr	r0, [r7, #24]
 80042d2:	f7ff f8eb 	bl	80034ac <ssd1306_WriteString>
				  						free(str);
 80042d6:	69b8      	ldr	r0, [r7, #24]
 80042d8:	f011 fcd6 	bl	8015c88 <free>
 80042dc:	e029      	b.n	8004332 <statemachine+0x64a>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 80042de:	2014      	movs	r0, #20
 80042e0:	f011 fcca 	bl	8015c78 <malloc>
 80042e4:	4603      	mov	r3, r0
 80042e6:	61fb      	str	r3, [r7, #28]
				  						ssd1306_SetCursor(32, 32);
 80042e8:	2120      	movs	r1, #32
 80042ea:	2020      	movs	r0, #32
 80042ec:	f7ff f904 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos1", Font_6x8, White);
 80042f0:	4a7f      	ldr	r2, [pc, #508]	; (80044f0 <statemachine+0x808>)
 80042f2:	2301      	movs	r3, #1
 80042f4:	ca06      	ldmia	r2, {r1, r2}
 80042f6:	4881      	ldr	r0, [pc, #516]	; (80044fc <statemachine+0x814>)
 80042f8:	f7ff f8d8 	bl	80034ac <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 80042fc:	212c      	movs	r1, #44	; 0x2c
 80042fe:	2020      	movs	r0, #32
 8004300:	f7ff f8fa 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8004304:	4a7a      	ldr	r2, [pc, #488]	; (80044f0 <statemachine+0x808>)
 8004306:	2301      	movs	r3, #1
 8004308:	ca06      	ldmia	r2, {r1, r2}
 800430a:	487d      	ldr	r0, [pc, #500]	; (8004500 <statemachine+0x818>)
 800430c:	f7ff f8ce 	bl	80034ac <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 54);
 8004310:	2136      	movs	r1, #54	; 0x36
 8004312:	2020      	movs	r0, #32
 8004314:	f7ff f8f0 	bl	80034f8 <ssd1306_SetCursor>
				  						batterygauge(vbat,35, 54,1);
 8004318:	4b7a      	ldr	r3, [pc, #488]	; (8004504 <statemachine+0x81c>)
 800431a:	edd3 7a00 	vldr	s15, [r3]
 800431e:	2201      	movs	r2, #1
 8004320:	2136      	movs	r1, #54	; 0x36
 8004322:	2023      	movs	r0, #35	; 0x23
 8004324:	eeb0 0a67 	vmov.f32	s0, s15
 8004328:	f7ff fb02 	bl	8003930 <batterygauge>
				  						free(str);
 800432c:	69f8      	ldr	r0, [r7, #28]
 800432e:	f011 fcab 	bl	8015c88 <free>
				  					}
				  if(BTN_B>=1){
 8004332:	4b75      	ldr	r3, [pc, #468]	; (8004508 <statemachine+0x820>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f340 81c8 	ble.w	80046cc <statemachine+0x9e4>
					  posstate++;
 800433c:	4b73      	ldr	r3, [pc, #460]	; (800450c <statemachine+0x824>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	3301      	adds	r3, #1
 8004342:	b2da      	uxtb	r2, r3
 8004344:	4b71      	ldr	r3, [pc, #452]	; (800450c <statemachine+0x824>)
 8004346:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 8004348:	4b6f      	ldr	r3, [pc, #444]	; (8004508 <statemachine+0x820>)
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]





				  break;
 800434e:	e1bd      	b.n	80046cc <statemachine+0x9e4>
			  case STATE_LAT:
				  if(myData.fix == 1){
 8004350:	4b65      	ldr	r3, [pc, #404]	; (80044e8 <statemachine+0x800>)
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	2b01      	cmp	r3, #1
 8004356:	d14b      	bne.n	80043f0 <statemachine+0x708>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8004358:	2014      	movs	r0, #20
 800435a:	f011 fc8d 	bl	8015c78 <malloc>
 800435e:	4603      	mov	r3, r0
 8004360:	623b      	str	r3, [r7, #32]
				  						ssd1306_SetCursor(32, 32);
 8004362:	2120      	movs	r1, #32
 8004364:	2020      	movs	r0, #32
 8004366:	f7ff f8c7 	bl	80034f8 <ssd1306_SetCursor>
				  						snprintf(str,15, "LatSide:");
 800436a:	4a69      	ldr	r2, [pc, #420]	; (8004510 <statemachine+0x828>)
 800436c:	210f      	movs	r1, #15
 800436e:	6a38      	ldr	r0, [r7, #32]
 8004370:	f013 fb7c 	bl	8017a6c <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8004374:	4a5e      	ldr	r2, [pc, #376]	; (80044f0 <statemachine+0x808>)
 8004376:	2301      	movs	r3, #1
 8004378:	ca06      	ldmia	r2, {r1, r2}
 800437a:	6a38      	ldr	r0, [r7, #32]
 800437c:	f7ff f896 	bl	80034ac <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8004380:	4b59      	ldr	r3, [pc, #356]	; (80044e8 <statemachine+0x800>)
 8004382:	7a1b      	ldrb	r3, [r3, #8]
 8004384:	4a63      	ldr	r2, [pc, #396]	; (8004514 <statemachine+0x82c>)
 8004386:	210f      	movs	r1, #15
 8004388:	6a38      	ldr	r0, [r7, #32]
 800438a:	f013 fb6f 	bl	8017a6c <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 800438e:	2128      	movs	r1, #40	; 0x28
 8004390:	2020      	movs	r0, #32
 8004392:	f7ff f8b1 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8004396:	4a56      	ldr	r2, [pc, #344]	; (80044f0 <statemachine+0x808>)
 8004398:	2301      	movs	r3, #1
 800439a:	ca06      	ldmia	r2, {r1, r2}
 800439c:	6a38      	ldr	r0, [r7, #32]
 800439e:	f7ff f885 	bl	80034ac <ssd1306_WriteString>
				  						snprintf(str,15, "Latitude:");
 80043a2:	4a52      	ldr	r2, [pc, #328]	; (80044ec <statemachine+0x804>)
 80043a4:	210f      	movs	r1, #15
 80043a6:	6a38      	ldr	r0, [r7, #32]
 80043a8:	f013 fb60 	bl	8017a6c <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 80043ac:	2130      	movs	r1, #48	; 0x30
 80043ae:	2020      	movs	r0, #32
 80043b0:	f7ff f8a2 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80043b4:	4a4e      	ldr	r2, [pc, #312]	; (80044f0 <statemachine+0x808>)
 80043b6:	2301      	movs	r3, #1
 80043b8:	ca06      	ldmia	r2, {r1, r2}
 80043ba:	6a38      	ldr	r0, [r7, #32]
 80043bc:	f7ff f876 	bl	80034ac <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);
 80043c0:	4b49      	ldr	r3, [pc, #292]	; (80044e8 <statemachine+0x800>)
 80043c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c6:	e9cd 2300 	strd	r2, r3, [sp]
 80043ca:	4a4a      	ldr	r2, [pc, #296]	; (80044f4 <statemachine+0x80c>)
 80043cc:	210f      	movs	r1, #15
 80043ce:	6a38      	ldr	r0, [r7, #32]
 80043d0:	f013 fb4c 	bl	8017a6c <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80043d4:	2138      	movs	r1, #56	; 0x38
 80043d6:	2020      	movs	r0, #32
 80043d8:	f7ff f88e 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80043dc:	4a44      	ldr	r2, [pc, #272]	; (80044f0 <statemachine+0x808>)
 80043de:	2301      	movs	r3, #1
 80043e0:	ca06      	ldmia	r2, {r1, r2}
 80043e2:	6a38      	ldr	r0, [r7, #32]
 80043e4:	f7ff f862 	bl	80034ac <ssd1306_WriteString>
				  						free(str);
 80043e8:	6a38      	ldr	r0, [r7, #32]
 80043ea:	f011 fc4d 	bl	8015c88 <free>
 80043ee:	e01b      	b.n	8004428 <statemachine+0x740>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 80043f0:	2014      	movs	r0, #20
 80043f2:	f011 fc41 	bl	8015c78 <malloc>
 80043f6:	4603      	mov	r3, r0
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
				  						ssd1306_SetCursor(32, 32);
 80043fa:	2120      	movs	r1, #32
 80043fc:	2020      	movs	r0, #32
 80043fe:	f7ff f87b 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos2", Font_6x8, White);
 8004402:	4a3b      	ldr	r2, [pc, #236]	; (80044f0 <statemachine+0x808>)
 8004404:	2301      	movs	r3, #1
 8004406:	ca06      	ldmia	r2, {r1, r2}
 8004408:	4843      	ldr	r0, [pc, #268]	; (8004518 <statemachine+0x830>)
 800440a:	f7ff f84f 	bl	80034ac <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 800440e:	212c      	movs	r1, #44	; 0x2c
 8004410:	2020      	movs	r0, #32
 8004412:	f7ff f871 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8004416:	4a36      	ldr	r2, [pc, #216]	; (80044f0 <statemachine+0x808>)
 8004418:	2301      	movs	r3, #1
 800441a:	ca06      	ldmia	r2, {r1, r2}
 800441c:	4838      	ldr	r0, [pc, #224]	; (8004500 <statemachine+0x818>)
 800441e:	f7ff f845 	bl	80034ac <ssd1306_WriteString>
				  						free(str);
 8004422:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004424:	f011 fc30 	bl	8015c88 <free>
				  					}
				  if(BTN_B>=1){
 8004428:	4b37      	ldr	r3, [pc, #220]	; (8004508 <statemachine+0x820>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	f340 814f 	ble.w	80046d0 <statemachine+0x9e8>
				  					  posstate++;
 8004432:	4b36      	ldr	r3, [pc, #216]	; (800450c <statemachine+0x824>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	3301      	adds	r3, #1
 8004438:	b2da      	uxtb	r2, r3
 800443a:	4b34      	ldr	r3, [pc, #208]	; (800450c <statemachine+0x824>)
 800443c:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 800443e:	4b32      	ldr	r3, [pc, #200]	; (8004508 <statemachine+0x820>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
				  				  }



				  break;
 8004444:	e144      	b.n	80046d0 <statemachine+0x9e8>
			  case STATE_LONG:
				  if(myData.fix == 1){
 8004446:	4b28      	ldr	r3, [pc, #160]	; (80044e8 <statemachine+0x800>)
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	2b01      	cmp	r3, #1
 800444c:	d168      	bne.n	8004520 <statemachine+0x838>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 800444e:	2014      	movs	r0, #20
 8004450:	f011 fc12 	bl	8015c78 <malloc>
 8004454:	4603      	mov	r3, r0
 8004456:	62bb      	str	r3, [r7, #40]	; 0x28
				  						ssd1306_SetCursor(32, 32);
 8004458:	2120      	movs	r1, #32
 800445a:	2020      	movs	r0, #32
 800445c:	f7ff f84c 	bl	80034f8 <ssd1306_SetCursor>
				  						snprintf(str,15, "LonSide:");
 8004460:	4a2e      	ldr	r2, [pc, #184]	; (800451c <statemachine+0x834>)
 8004462:	210f      	movs	r1, #15
 8004464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004466:	f013 fb01 	bl	8017a6c <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800446a:	4a21      	ldr	r2, [pc, #132]	; (80044f0 <statemachine+0x808>)
 800446c:	2301      	movs	r3, #1
 800446e:	ca06      	ldmia	r2, {r1, r2}
 8004470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004472:	f7ff f81b 	bl	80034ac <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8004476:	4b1c      	ldr	r3, [pc, #112]	; (80044e8 <statemachine+0x800>)
 8004478:	7e1b      	ldrb	r3, [r3, #24]
 800447a:	4a26      	ldr	r2, [pc, #152]	; (8004514 <statemachine+0x82c>)
 800447c:	210f      	movs	r1, #15
 800447e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004480:	f013 faf4 	bl	8017a6c <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8004484:	2128      	movs	r1, #40	; 0x28
 8004486:	2020      	movs	r0, #32
 8004488:	f7ff f836 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800448c:	4a18      	ldr	r2, [pc, #96]	; (80044f0 <statemachine+0x808>)
 800448e:	2301      	movs	r3, #1
 8004490:	ca06      	ldmia	r2, {r1, r2}
 8004492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004494:	f7ff f80a 	bl	80034ac <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8004498:	4a17      	ldr	r2, [pc, #92]	; (80044f8 <statemachine+0x810>)
 800449a:	210f      	movs	r1, #15
 800449c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800449e:	f013 fae5 	bl	8017a6c <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 80044a2:	2130      	movs	r1, #48	; 0x30
 80044a4:	2020      	movs	r0, #32
 80044a6:	f7ff f827 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80044aa:	4a11      	ldr	r2, [pc, #68]	; (80044f0 <statemachine+0x808>)
 80044ac:	2301      	movs	r3, #1
 80044ae:	ca06      	ldmia	r2, {r1, r2}
 80044b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044b2:	f7fe fffb 	bl	80034ac <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 80044b6:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <statemachine+0x800>)
 80044b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80044bc:	e9cd 2300 	strd	r2, r3, [sp]
 80044c0:	4a0c      	ldr	r2, [pc, #48]	; (80044f4 <statemachine+0x80c>)
 80044c2:	210f      	movs	r1, #15
 80044c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044c6:	f013 fad1 	bl	8017a6c <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80044ca:	2138      	movs	r1, #56	; 0x38
 80044cc:	2020      	movs	r0, #32
 80044ce:	f7ff f813 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80044d2:	4a07      	ldr	r2, [pc, #28]	; (80044f0 <statemachine+0x808>)
 80044d4:	2301      	movs	r3, #1
 80044d6:	ca06      	ldmia	r2, {r1, r2}
 80044d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044da:	f7fe ffe7 	bl	80034ac <ssd1306_WriteString>
				  						free(str);
 80044de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044e0:	f011 fbd2 	bl	8015c88 <free>
 80044e4:	e038      	b.n	8004558 <statemachine+0x870>
 80044e6:	bf00      	nop
 80044e8:	200006f8 	.word	0x200006f8
 80044ec:	0801ce18 	.word	0x0801ce18
 80044f0:	20000020 	.word	0x20000020
 80044f4:	0801ce24 	.word	0x0801ce24
 80044f8:	0801ce2c 	.word	0x0801ce2c
 80044fc:	0801ce38 	.word	0x0801ce38
 8004500:	0801cdf4 	.word	0x0801cdf4
 8004504:	20000770 	.word	0x20000770
 8004508:	2000073c 	.word	0x2000073c
 800450c:	200004ab 	.word	0x200004ab
 8004510:	0801ce40 	.word	0x0801ce40
 8004514:	0801ce4c 	.word	0x0801ce4c
 8004518:	0801ce50 	.word	0x0801ce50
 800451c:	0801ce58 	.word	0x0801ce58
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8004520:	2014      	movs	r0, #20
 8004522:	f011 fba9 	bl	8015c78 <malloc>
 8004526:	4603      	mov	r3, r0
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
				  						ssd1306_SetCursor(32, 32);
 800452a:	2120      	movs	r1, #32
 800452c:	2020      	movs	r0, #32
 800452e:	f7fe ffe3 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos3", Font_6x8, White);
 8004532:	4aa1      	ldr	r2, [pc, #644]	; (80047b8 <statemachine+0xad0>)
 8004534:	2301      	movs	r3, #1
 8004536:	ca06      	ldmia	r2, {r1, r2}
 8004538:	48a0      	ldr	r0, [pc, #640]	; (80047bc <statemachine+0xad4>)
 800453a:	f7fe ffb7 	bl	80034ac <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 800453e:	212c      	movs	r1, #44	; 0x2c
 8004540:	2020      	movs	r0, #32
 8004542:	f7fe ffd9 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8004546:	4a9c      	ldr	r2, [pc, #624]	; (80047b8 <statemachine+0xad0>)
 8004548:	2301      	movs	r3, #1
 800454a:	ca06      	ldmia	r2, {r1, r2}
 800454c:	489c      	ldr	r0, [pc, #624]	; (80047c0 <statemachine+0xad8>)
 800454e:	f7fe ffad 	bl	80034ac <ssd1306_WriteString>
				  						free(str);
 8004552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004554:	f011 fb98 	bl	8015c88 <free>
				  					}
				  if(BTN_B>=1){
 8004558:	4b9a      	ldr	r3, [pc, #616]	; (80047c4 <statemachine+0xadc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f340 80b9 	ble.w	80046d4 <statemachine+0x9ec>
				  					  posstate++;
 8004562:	4b99      	ldr	r3, [pc, #612]	; (80047c8 <statemachine+0xae0>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	3301      	adds	r3, #1
 8004568:	b2da      	uxtb	r2, r3
 800456a:	4b97      	ldr	r3, [pc, #604]	; (80047c8 <statemachine+0xae0>)
 800456c:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 800456e:	4b95      	ldr	r3, [pc, #596]	; (80047c4 <statemachine+0xadc>)
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]
				  				  }


				  break;
 8004574:	e0ae      	b.n	80046d4 <statemachine+0x9ec>
			  case STATE_ALT:
				  if(myData.fix == 1){
 8004576:	4b95      	ldr	r3, [pc, #596]	; (80047cc <statemachine+0xae4>)
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457a:	2b01      	cmp	r3, #1
 800457c:	d170      	bne.n	8004660 <statemachine+0x978>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 800457e:	2014      	movs	r0, #20
 8004580:	f011 fb7a 	bl	8015c78 <malloc>
 8004584:	4603      	mov	r3, r0
 8004586:	633b      	str	r3, [r7, #48]	; 0x30
				  						ssd1306_SetCursor(32, 32);
 8004588:	2120      	movs	r1, #32
 800458a:	2020      	movs	r0, #32
 800458c:	f7fe ffb4 	bl	80034f8 <ssd1306_SetCursor>
				  						snprintf(str,15, "altitude:");
 8004590:	4a8f      	ldr	r2, [pc, #572]	; (80047d0 <statemachine+0xae8>)
 8004592:	210f      	movs	r1, #15
 8004594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004596:	f013 fa69 	bl	8017a6c <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800459a:	4a87      	ldr	r2, [pc, #540]	; (80047b8 <statemachine+0xad0>)
 800459c:	2301      	movs	r3, #1
 800459e:	ca06      	ldmia	r2, {r1, r2}
 80045a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045a2:	f7fe ff83 	bl	80034ac <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80045a6:	4b89      	ldr	r3, [pc, #548]	; (80047cc <statemachine+0xae4>)
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fb ffcc 	bl	8000548 <__aeabi_f2d>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	e9cd 2300 	strd	r2, r3, [sp]
 80045b8:	4a86      	ldr	r2, [pc, #536]	; (80047d4 <statemachine+0xaec>)
 80045ba:	210f      	movs	r1, #15
 80045bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045be:	f013 fa55 	bl	8017a6c <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 80045c2:	2128      	movs	r1, #40	; 0x28
 80045c4:	2020      	movs	r0, #32
 80045c6:	f7fe ff97 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80045ca:	4a7b      	ldr	r2, [pc, #492]	; (80047b8 <statemachine+0xad0>)
 80045cc:	2301      	movs	r3, #1
 80045ce:	ca06      	ldmia	r2, {r1, r2}
 80045d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045d2:	f7fe ff6b 	bl	80034ac <ssd1306_WriteString>
				  						snprintf(str,15, "Pressure:");
 80045d6:	4a80      	ldr	r2, [pc, #512]	; (80047d8 <statemachine+0xaf0>)
 80045d8:	210f      	movs	r1, #15
 80045da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045dc:	f013 fa46 	bl	8017a6c <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 80045e0:	2130      	movs	r1, #48	; 0x30
 80045e2:	2020      	movs	r0, #32
 80045e4:	f7fe ff88 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80045e8:	4a73      	ldr	r2, [pc, #460]	; (80047b8 <statemachine+0xad0>)
 80045ea:	2301      	movs	r3, #1
 80045ec:	ca06      	ldmia	r2, {r1, r2}
 80045ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045f0:	f7fe ff5c 	bl	80034ac <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 80045f4:	4b75      	ldr	r3, [pc, #468]	; (80047cc <statemachine+0xae4>)
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fb ffa5 	bl	8000548 <__aeabi_f2d>
 80045fe:	a36c      	add	r3, pc, #432	; (adr r3, 80047b0 <statemachine+0xac8>)
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	f7fb fff8 	bl	80005f8 <__aeabi_dmul>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	f7fc faea 	bl	8000be8 <__aeabi_d2f>
 8004614:	4603      	mov	r3, r0
 8004616:	ee00 3a10 	vmov	s0, r3
 800461a:	f016 f945 	bl	801a8a8 <expf>
 800461e:	eef0 7a40 	vmov.f32	s15, s0
 8004622:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80047dc <statemachine+0xaf4>
 8004626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800462a:	ee17 0a90 	vmov	r0, s15
 800462e:	f7fb ff8b 	bl	8000548 <__aeabi_f2d>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	e9cd 2300 	strd	r2, r3, [sp]
 800463a:	4a69      	ldr	r2, [pc, #420]	; (80047e0 <statemachine+0xaf8>)
 800463c:	210f      	movs	r1, #15
 800463e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004640:	f013 fa14 	bl	8017a6c <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8004644:	2138      	movs	r1, #56	; 0x38
 8004646:	2020      	movs	r0, #32
 8004648:	f7fe ff56 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800464c:	4a5a      	ldr	r2, [pc, #360]	; (80047b8 <statemachine+0xad0>)
 800464e:	2301      	movs	r3, #1
 8004650:	ca06      	ldmia	r2, {r1, r2}
 8004652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004654:	f7fe ff2a 	bl	80034ac <ssd1306_WriteString>
				  						free(str);
 8004658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800465a:	f011 fb15 	bl	8015c88 <free>
 800465e:	e01b      	b.n	8004698 <statemachine+0x9b0>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8004660:	2014      	movs	r0, #20
 8004662:	f011 fb09 	bl	8015c78 <malloc>
 8004666:	4603      	mov	r3, r0
 8004668:	637b      	str	r3, [r7, #52]	; 0x34
				  						ssd1306_SetCursor(32, 32);
 800466a:	2120      	movs	r1, #32
 800466c:	2020      	movs	r0, #32
 800466e:	f7fe ff43 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos4", Font_6x8, White);
 8004672:	4a51      	ldr	r2, [pc, #324]	; (80047b8 <statemachine+0xad0>)
 8004674:	2301      	movs	r3, #1
 8004676:	ca06      	ldmia	r2, {r1, r2}
 8004678:	485a      	ldr	r0, [pc, #360]	; (80047e4 <statemachine+0xafc>)
 800467a:	f7fe ff17 	bl	80034ac <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 800467e:	212c      	movs	r1, #44	; 0x2c
 8004680:	2020      	movs	r0, #32
 8004682:	f7fe ff39 	bl	80034f8 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8004686:	4a4c      	ldr	r2, [pc, #304]	; (80047b8 <statemachine+0xad0>)
 8004688:	2301      	movs	r3, #1
 800468a:	ca06      	ldmia	r2, {r1, r2}
 800468c:	484c      	ldr	r0, [pc, #304]	; (80047c0 <statemachine+0xad8>)
 800468e:	f7fe ff0d 	bl	80034ac <ssd1306_WriteString>
				  						free(str);
 8004692:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004694:	f011 faf8 	bl	8015c88 <free>
				  					}
				  if(BTN_B>=1){
 8004698:	4b4a      	ldr	r3, [pc, #296]	; (80047c4 <statemachine+0xadc>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	dd1b      	ble.n	80046d8 <statemachine+0x9f0>
				  					posstate--;
 80046a0:	4b49      	ldr	r3, [pc, #292]	; (80047c8 <statemachine+0xae0>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	4b47      	ldr	r3, [pc, #284]	; (80047c8 <statemachine+0xae0>)
 80046aa:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 80046ac:	4b46      	ldr	r3, [pc, #280]	; (80047c8 <statemachine+0xae0>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	4b44      	ldr	r3, [pc, #272]	; (80047c8 <statemachine+0xae0>)
 80046b6:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 80046b8:	4b43      	ldr	r3, [pc, #268]	; (80047c8 <statemachine+0xae0>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	3b01      	subs	r3, #1
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	4b41      	ldr	r3, [pc, #260]	; (80047c8 <statemachine+0xae0>)
 80046c2:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 80046c4:	4b3f      	ldr	r3, [pc, #252]	; (80047c4 <statemachine+0xadc>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
				  				  }
				  break;
 80046ca:	e005      	b.n	80046d8 <statemachine+0x9f0>
				  break;
 80046cc:	bf00      	nop
 80046ce:	e004      	b.n	80046da <statemachine+0x9f2>
				  break;
 80046d0:	bf00      	nop
 80046d2:	e002      	b.n	80046da <statemachine+0x9f2>
				  break;
 80046d4:	bf00      	nop
 80046d6:	e000      	b.n	80046da <statemachine+0x9f2>
				  break;
 80046d8:	bf00      	nop
			  }

					if(BTN_A>=1){
 80046da:	4b43      	ldr	r3, [pc, #268]	; (80047e8 <statemachine+0xb00>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f341 81bc 	ble.w	8005a5c <statemachine+0x1d74>
							state++;
 80046e4:	4b41      	ldr	r3, [pc, #260]	; (80047ec <statemachine+0xb04>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	3301      	adds	r3, #1
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	4b3f      	ldr	r3, [pc, #252]	; (80047ec <statemachine+0xb04>)
 80046ee:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 80046f0:	4b3d      	ldr	r3, [pc, #244]	; (80047e8 <statemachine+0xb00>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 80046f6:	4b33      	ldr	r3, [pc, #204]	; (80047c4 <statemachine+0xadc>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]


						}
			  break;
 80046fc:	f001 b9ae 	b.w	8005a5c <statemachine+0x1d74>

		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 8004700:	2000      	movs	r0, #0
 8004702:	f7fe fdb7 	bl	8003274 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8004706:	493a      	ldr	r1, [pc, #232]	; (80047f0 <statemachine+0xb08>)
 8004708:	4830      	ldr	r0, [pc, #192]	; (80047cc <statemachine+0xae4>)
 800470a:	f7fd fe23 	bl	8002354 <nmea_parse>
			  int heure=0;
 800470e:	2300      	movs	r3, #0
 8004710:	65fb      	str	r3, [r7, #92]	; 0x5c
			  heure=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8004712:	4b2e      	ldr	r3, [pc, #184]	; (80047cc <statemachine+0xae4>)
 8004714:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004718:	f003 020f 	and.w	r2, r3, #15
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	461a      	mov	r2, r3
 8004726:	4b29      	ldr	r3, [pc, #164]	; (80047cc <statemachine+0xae4>)
 8004728:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	4413      	add	r3, r2
 8004732:	65fb      	str	r3, [r7, #92]	; 0x5c
			  if((heure+2)>=24){
 8004734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004736:	2b15      	cmp	r3, #21
 8004738:	dd03      	ble.n	8004742 <statemachine+0xa5a>
				  heure=heure-22;
 800473a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800473c:	3b16      	subs	r3, #22
 800473e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004740:	e002      	b.n	8004748 <statemachine+0xa60>
			  }
			  else{
				  heure=heure+2;
 8004742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004744:	3302      	adds	r3, #2
 8004746:	65fb      	str	r3, [r7, #92]	; 0x5c
			  }

			  if(myData.fix == 1){
 8004748:	4b20      	ldr	r3, [pc, #128]	; (80047cc <statemachine+0xae4>)
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	2b01      	cmp	r3, #1
 800474e:	f040 82e3 	bne.w	8004d18 <statemachine+0x1030>

				  switch(hrstate){
 8004752:	4b28      	ldr	r3, [pc, #160]	; (80047f4 <statemachine+0xb0c>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <statemachine+0xa7a>
 800475a:	2b01      	cmp	r3, #1
 800475c:	f000 808f 	beq.w	800487e <statemachine+0xb96>
 8004760:	e2f0      	b.n	8004d44 <statemachine+0x105c>
				  case STATE_DIGIT:
					  char * str = (char*)malloc(sizeof(char)*20);
 8004762:	2014      	movs	r0, #20
 8004764:	f011 fa88 	bl	8015c78 <malloc>
 8004768:	4603      	mov	r3, r0
 800476a:	63bb      	str	r3, [r7, #56]	; 0x38
					  ssd1306_SetCursor(32, 32);
 800476c:	2120      	movs	r1, #32
 800476e:	2020      	movs	r0, #32
 8004770:	f7fe fec2 	bl	80034f8 <ssd1306_SetCursor>
					  ssd1306_WriteString("hr GMT+2:", Font_6x8, White);
 8004774:	4a10      	ldr	r2, [pc, #64]	; (80047b8 <statemachine+0xad0>)
 8004776:	2301      	movs	r3, #1
 8004778:	ca06      	ldmia	r2, {r1, r2}
 800477a:	481f      	ldr	r0, [pc, #124]	; (80047f8 <statemachine+0xb10>)
 800477c:	f7fe fe96 	bl	80034ac <ssd1306_WriteString>
					 ssd1306_SetCursor(34, 42);
 8004780:	212a      	movs	r1, #42	; 0x2a
 8004782:	2022      	movs	r0, #34	; 0x22
 8004784:	f7fe feb8 	bl	80034f8 <ssd1306_SetCursor>
					 if(heure>=10){
 8004788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800478a:	2b09      	cmp	r3, #9
 800478c:	dd38      	ble.n	8004800 <statemachine+0xb18>
					snprintf(str,15, "%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 800478e:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <statemachine+0xae4>)
 8004790:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004794:	461a      	mov	r2, r3
 8004796:	4b0d      	ldr	r3, [pc, #52]	; (80047cc <statemachine+0xae4>)
 8004798:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800479c:	9301      	str	r3, [sp, #4]
 800479e:	9200      	str	r2, [sp, #0]
 80047a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047a2:	4a16      	ldr	r2, [pc, #88]	; (80047fc <statemachine+0xb14>)
 80047a4:	210f      	movs	r1, #15
 80047a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047a8:	f013 f960 	bl	8017a6c <sniprintf>
 80047ac:	e037      	b.n	800481e <statemachine+0xb36>
 80047ae:	bf00      	nop
 80047b0:	fb798882 	.word	0xfb798882
 80047b4:	bf1e1818 	.word	0xbf1e1818
 80047b8:	20000020 	.word	0x20000020
 80047bc:	0801ce64 	.word	0x0801ce64
 80047c0:	0801cdf4 	.word	0x0801cdf4
 80047c4:	2000073c 	.word	0x2000073c
 80047c8:	200004ab 	.word	0x200004ab
 80047cc:	200006f8 	.word	0x200006f8
 80047d0:	0801ce6c 	.word	0x0801ce6c
 80047d4:	0801ce78 	.word	0x0801ce78
 80047d8:	0801ce80 	.word	0x0801ce80
 80047dc:	447a0000 	.word	0x447a0000
 80047e0:	0801ce8c 	.word	0x0801ce8c
 80047e4:	0801ce98 	.word	0x0801ce98
 80047e8:	20000738 	.word	0x20000738
 80047ec:	200004a8 	.word	0x200004a8
 80047f0:	200004f4 	.word	0x200004f4
 80047f4:	200004a9 	.word	0x200004a9
 80047f8:	0801cea0 	.word	0x0801cea0
 80047fc:	0801ceac 	.word	0x0801ceac
					}
					else{
					 	snprintf(str,15, "0%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 8004800:	4bb5      	ldr	r3, [pc, #724]	; (8004ad8 <statemachine+0xdf0>)
 8004802:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004806:	461a      	mov	r2, r3
 8004808:	4bb3      	ldr	r3, [pc, #716]	; (8004ad8 <statemachine+0xdf0>)
 800480a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	9200      	str	r2, [sp, #0]
 8004812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004814:	4ab1      	ldr	r2, [pc, #708]	; (8004adc <statemachine+0xdf4>)
 8004816:	210f      	movs	r1, #15
 8004818:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800481a:	f013 f927 	bl	8017a6c <sniprintf>
					}
					ssd1306_WriteString(str, Font_7x10, White);
 800481e:	4ab0      	ldr	r2, [pc, #704]	; (8004ae0 <statemachine+0xdf8>)
 8004820:	2301      	movs	r3, #1
 8004822:	ca06      	ldmia	r2, {r1, r2}
 8004824:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004826:	f7fe fe41 	bl	80034ac <ssd1306_WriteString>
					ssd1306_SetCursor(34, 52);
 800482a:	2134      	movs	r1, #52	; 0x34
 800482c:	2022      	movs	r0, #34	; 0x22
 800482e:	f7fe fe63 	bl	80034f8 <ssd1306_SetCursor>
					snprintf(str,15, "%c%c sec",myData.lastMeasure[4],myData.lastMeasure[5]);
 8004832:	4ba9      	ldr	r3, [pc, #676]	; (8004ad8 <statemachine+0xdf0>)
 8004834:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004838:	461a      	mov	r2, r3
 800483a:	4ba7      	ldr	r3, [pc, #668]	; (8004ad8 <statemachine+0xdf0>)
 800483c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	4613      	mov	r3, r2
 8004844:	4aa7      	ldr	r2, [pc, #668]	; (8004ae4 <statemachine+0xdfc>)
 8004846:	210f      	movs	r1, #15
 8004848:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800484a:	f013 f90f 	bl	8017a6c <sniprintf>
					ssd1306_WriteString(str, Font_6x8, White);
 800484e:	4aa6      	ldr	r2, [pc, #664]	; (8004ae8 <statemachine+0xe00>)
 8004850:	2301      	movs	r3, #1
 8004852:	ca06      	ldmia	r2, {r1, r2}
 8004854:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004856:	f7fe fe29 	bl	80034ac <ssd1306_WriteString>
					free(str);
 800485a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800485c:	f011 fa14 	bl	8015c88 <free>
					if(BTN_B>=1){
 8004860:	4ba2      	ldr	r3, [pc, #648]	; (8004aec <statemachine+0xe04>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	f340 826a 	ble.w	8004d3e <statemachine+0x1056>
												hrstate++;
 800486a:	4ba1      	ldr	r3, [pc, #644]	; (8004af0 <statemachine+0xe08>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	3301      	adds	r3, #1
 8004870:	b2da      	uxtb	r2, r3
 8004872:	4b9f      	ldr	r3, [pc, #636]	; (8004af0 <statemachine+0xe08>)
 8004874:	701a      	strb	r2, [r3, #0]
												BTN_B=0;
 8004876:	4b9d      	ldr	r3, [pc, #628]	; (8004aec <statemachine+0xe04>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
											}




					  break;
 800487c:	e25f      	b.n	8004d3e <statemachine+0x1056>
				  case STATE_OLD:
					  if(heure>12){
 800487e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004880:	2b0c      	cmp	r3, #12
 8004882:	dd02      	ble.n	800488a <statemachine+0xba2>
						  heure=heure-12;
 8004884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004886:	3b0c      	subs	r3, #12
 8004888:	65fb      	str	r3, [r7, #92]	; 0x5c
					  }
					  int minute=0;
 800488a:	2300      	movs	r3, #0
 800488c:	63fb      	str	r3, [r7, #60]	; 0x3c
					  minute=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 800488e:	4b92      	ldr	r3, [pc, #584]	; (8004ad8 <statemachine+0xdf0>)
 8004890:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004894:	f003 020f 	and.w	r2, r3, #15
 8004898:	4613      	mov	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	461a      	mov	r2, r3
 80048a2:	4b8d      	ldr	r3, [pc, #564]	; (8004ad8 <statemachine+0xdf0>)
 80048a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	4413      	add	r3, r2
 80048ae:	63fb      	str	r3, [r7, #60]	; 0x3c
					  ssd1306_DrawCircle(64, 48, 12, White);
 80048b0:	2301      	movs	r3, #1
 80048b2:	220c      	movs	r2, #12
 80048b4:	2130      	movs	r1, #48	; 0x30
 80048b6:	2040      	movs	r0, #64	; 0x40
 80048b8:	f7fe fea2 	bl	8003600 <ssd1306_DrawCircle>
					  ssd1306_Line(64,48,64+floor(6*cos((3-heure)*M_PI/6)),48-floor(6*sin((3-heure)*M_PI/6)),White);
 80048bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048be:	f1c3 0303 	rsb	r3, r3, #3
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fb fe2e 	bl	8000524 <__aeabi_i2d>
 80048c8:	a381      	add	r3, pc, #516	; (adr r3, 8004ad0 <statemachine+0xde8>)
 80048ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ce:	f7fb fe93 	bl	80005f8 <__aeabi_dmul>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4610      	mov	r0, r2
 80048d8:	4619      	mov	r1, r3
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	4b85      	ldr	r3, [pc, #532]	; (8004af4 <statemachine+0xe0c>)
 80048e0:	f7fb ffb4 	bl	800084c <__aeabi_ddiv>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	ec43 2b17 	vmov	d7, r2, r3
 80048ec:	eeb0 0a47 	vmov.f32	s0, s14
 80048f0:	eef0 0a67 	vmov.f32	s1, s15
 80048f4:	f015 ff2c 	bl	801a750 <cos>
 80048f8:	ec51 0b10 	vmov	r0, r1, d0
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	4b7c      	ldr	r3, [pc, #496]	; (8004af4 <statemachine+0xe0c>)
 8004902:	f7fb fe79 	bl	80005f8 <__aeabi_dmul>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	ec43 2b17 	vmov	d7, r2, r3
 800490e:	eeb0 0a47 	vmov.f32	s0, s14
 8004912:	eef0 0a67 	vmov.f32	s1, s15
 8004916:	f016 f86f 	bl	801a9f8 <floor>
 800491a:	ec51 0b10 	vmov	r0, r1, d0
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	4b75      	ldr	r3, [pc, #468]	; (8004af8 <statemachine+0xe10>)
 8004924:	f7fb fcb2 	bl	800028c <__adddf3>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4610      	mov	r0, r2
 800492e:	4619      	mov	r1, r3
 8004930:	f7fc f93a 	bl	8000ba8 <__aeabi_d2uiz>
 8004934:	4603      	mov	r3, r0
 8004936:	b2dc      	uxtb	r4, r3
 8004938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800493a:	f1c3 0303 	rsb	r3, r3, #3
 800493e:	4618      	mov	r0, r3
 8004940:	f7fb fdf0 	bl	8000524 <__aeabi_i2d>
 8004944:	a362      	add	r3, pc, #392	; (adr r3, 8004ad0 <statemachine+0xde8>)
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	f7fb fe55 	bl	80005f8 <__aeabi_dmul>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4610      	mov	r0, r2
 8004954:	4619      	mov	r1, r3
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	4b66      	ldr	r3, [pc, #408]	; (8004af4 <statemachine+0xe0c>)
 800495c:	f7fb ff76 	bl	800084c <__aeabi_ddiv>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	ec43 2b17 	vmov	d7, r2, r3
 8004968:	eeb0 0a47 	vmov.f32	s0, s14
 800496c:	eef0 0a67 	vmov.f32	s1, s15
 8004970:	f015 ff42 	bl	801a7f8 <sin>
 8004974:	ec51 0b10 	vmov	r0, r1, d0
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	4b5d      	ldr	r3, [pc, #372]	; (8004af4 <statemachine+0xe0c>)
 800497e:	f7fb fe3b 	bl	80005f8 <__aeabi_dmul>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	ec43 2b17 	vmov	d7, r2, r3
 800498a:	eeb0 0a47 	vmov.f32	s0, s14
 800498e:	eef0 0a67 	vmov.f32	s1, s15
 8004992:	f016 f831 	bl	801a9f8 <floor>
 8004996:	ec53 2b10 	vmov	r2, r3, d0
 800499a:	f04f 0000 	mov.w	r0, #0
 800499e:	4957      	ldr	r1, [pc, #348]	; (8004afc <statemachine+0xe14>)
 80049a0:	f7fb fc72 	bl	8000288 <__aeabi_dsub>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4610      	mov	r0, r2
 80049aa:	4619      	mov	r1, r3
 80049ac:	f7fc f8fc 	bl	8000ba8 <__aeabi_d2uiz>
 80049b0:	4603      	mov	r3, r0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2201      	movs	r2, #1
 80049b6:	9200      	str	r2, [sp, #0]
 80049b8:	4622      	mov	r2, r4
 80049ba:	2130      	movs	r1, #48	; 0x30
 80049bc:	2040      	movs	r0, #64	; 0x40
 80049be:	f7fe fdb3 	bl	8003528 <ssd1306_Line>
					  ssd1306_Line(64,48,64+floor(12*cos((15-minute)*M_PI/30)),48-floor(12*sin((15-minute)*M_PI/30)),White);
 80049c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c4:	f1c3 030f 	rsb	r3, r3, #15
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fb fdab 	bl	8000524 <__aeabi_i2d>
 80049ce:	a340      	add	r3, pc, #256	; (adr r3, 8004ad0 <statemachine+0xde8>)
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f7fb fe10 	bl	80005f8 <__aeabi_dmul>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4610      	mov	r0, r2
 80049de:	4619      	mov	r1, r3
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	4b46      	ldr	r3, [pc, #280]	; (8004b00 <statemachine+0xe18>)
 80049e6:	f7fb ff31 	bl	800084c <__aeabi_ddiv>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	ec43 2b17 	vmov	d7, r2, r3
 80049f2:	eeb0 0a47 	vmov.f32	s0, s14
 80049f6:	eef0 0a67 	vmov.f32	s1, s15
 80049fa:	f015 fea9 	bl	801a750 <cos>
 80049fe:	ec51 0b10 	vmov	r0, r1, d0
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	4b3f      	ldr	r3, [pc, #252]	; (8004b04 <statemachine+0xe1c>)
 8004a08:	f7fb fdf6 	bl	80005f8 <__aeabi_dmul>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	ec43 2b17 	vmov	d7, r2, r3
 8004a14:	eeb0 0a47 	vmov.f32	s0, s14
 8004a18:	eef0 0a67 	vmov.f32	s1, s15
 8004a1c:	f015 ffec 	bl	801a9f8 <floor>
 8004a20:	ec51 0b10 	vmov	r0, r1, d0
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	4b33      	ldr	r3, [pc, #204]	; (8004af8 <statemachine+0xe10>)
 8004a2a:	f7fb fc2f 	bl	800028c <__adddf3>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4610      	mov	r0, r2
 8004a34:	4619      	mov	r1, r3
 8004a36:	f7fc f8b7 	bl	8000ba8 <__aeabi_d2uiz>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	b2dc      	uxtb	r4, r3
 8004a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a40:	f1c3 030f 	rsb	r3, r3, #15
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fb fd6d 	bl	8000524 <__aeabi_i2d>
 8004a4a:	a321      	add	r3, pc, #132	; (adr r3, 8004ad0 <statemachine+0xde8>)
 8004a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a50:	f7fb fdd2 	bl	80005f8 <__aeabi_dmul>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	4b27      	ldr	r3, [pc, #156]	; (8004b00 <statemachine+0xe18>)
 8004a62:	f7fb fef3 	bl	800084c <__aeabi_ddiv>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	ec43 2b17 	vmov	d7, r2, r3
 8004a6e:	eeb0 0a47 	vmov.f32	s0, s14
 8004a72:	eef0 0a67 	vmov.f32	s1, s15
 8004a76:	f015 febf 	bl	801a7f8 <sin>
 8004a7a:	ec51 0b10 	vmov	r0, r1, d0
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	4b20      	ldr	r3, [pc, #128]	; (8004b04 <statemachine+0xe1c>)
 8004a84:	f7fb fdb8 	bl	80005f8 <__aeabi_dmul>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	ec43 2b17 	vmov	d7, r2, r3
 8004a90:	eeb0 0a47 	vmov.f32	s0, s14
 8004a94:	eef0 0a67 	vmov.f32	s1, s15
 8004a98:	f015 ffae 	bl	801a9f8 <floor>
 8004a9c:	ec53 2b10 	vmov	r2, r3, d0
 8004aa0:	f04f 0000 	mov.w	r0, #0
 8004aa4:	4915      	ldr	r1, [pc, #84]	; (8004afc <statemachine+0xe14>)
 8004aa6:	f7fb fbef 	bl	8000288 <__aeabi_dsub>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4610      	mov	r0, r2
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	f7fc f879 	bl	8000ba8 <__aeabi_d2uiz>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2201      	movs	r2, #1
 8004abc:	9200      	str	r2, [sp, #0]
 8004abe:	4622      	mov	r2, r4
 8004ac0:	2130      	movs	r1, #48	; 0x30
 8004ac2:	2040      	movs	r0, #64	; 0x40
 8004ac4:	f7fe fd30 	bl	8003528 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 8004ac8:	2300      	movs	r3, #0
 8004aca:	65bb      	str	r3, [r7, #88]	; 0x58
 8004acc:	e112      	b.n	8004cf4 <statemachine+0x100c>
 8004ace:	bf00      	nop
 8004ad0:	54442d18 	.word	0x54442d18
 8004ad4:	400921fb 	.word	0x400921fb
 8004ad8:	200006f8 	.word	0x200006f8
 8004adc:	0801ceb4 	.word	0x0801ceb4
 8004ae0:	20000028 	.word	0x20000028
 8004ae4:	0801cec0 	.word	0x0801cec0
 8004ae8:	20000020 	.word	0x20000020
 8004aec:	2000073c 	.word	0x2000073c
 8004af0:	200004a9 	.word	0x200004a9
 8004af4:	40180000 	.word	0x40180000
 8004af8:	40500000 	.word	0x40500000
 8004afc:	40480000 	.word	0x40480000
 8004b00:	403e0000 	.word	0x403e0000
 8004b04:	40280000 	.word	0x40280000
						  ssd1306_Line(64+floor(10*cos((i)*M_PI/6)),48+floor(10*sin((i)*M_PI/6)),64+floor(12*cos((i)*M_PI/6)),48+floor(12*sin((i)*M_PI/6)),White);
 8004b08:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004b0a:	f7fb fd0b 	bl	8000524 <__aeabi_i2d>
 8004b0e:	a3c6      	add	r3, pc, #792	; (adr r3, 8004e28 <statemachine+0x1140>)
 8004b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b14:	f7fb fd70 	bl	80005f8 <__aeabi_dmul>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4619      	mov	r1, r3
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	4bc2      	ldr	r3, [pc, #776]	; (8004e30 <statemachine+0x1148>)
 8004b26:	f7fb fe91 	bl	800084c <__aeabi_ddiv>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	ec43 2b17 	vmov	d7, r2, r3
 8004b32:	eeb0 0a47 	vmov.f32	s0, s14
 8004b36:	eef0 0a67 	vmov.f32	s1, s15
 8004b3a:	f015 fe09 	bl	801a750 <cos>
 8004b3e:	ec51 0b10 	vmov	r0, r1, d0
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	4bbb      	ldr	r3, [pc, #748]	; (8004e34 <statemachine+0x114c>)
 8004b48:	f7fb fd56 	bl	80005f8 <__aeabi_dmul>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	ec43 2b17 	vmov	d7, r2, r3
 8004b54:	eeb0 0a47 	vmov.f32	s0, s14
 8004b58:	eef0 0a67 	vmov.f32	s1, s15
 8004b5c:	f015 ff4c 	bl	801a9f8 <floor>
 8004b60:	ec51 0b10 	vmov	r0, r1, d0
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	4bb3      	ldr	r3, [pc, #716]	; (8004e38 <statemachine+0x1150>)
 8004b6a:	f7fb fb8f 	bl	800028c <__adddf3>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4610      	mov	r0, r2
 8004b74:	4619      	mov	r1, r3
 8004b76:	f7fc f817 	bl	8000ba8 <__aeabi_d2uiz>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	b2dc      	uxtb	r4, r3
 8004b7e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004b80:	f7fb fcd0 	bl	8000524 <__aeabi_i2d>
 8004b84:	a3a8      	add	r3, pc, #672	; (adr r3, 8004e28 <statemachine+0x1140>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f7fb fd35 	bl	80005f8 <__aeabi_dmul>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4610      	mov	r0, r2
 8004b94:	4619      	mov	r1, r3
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	4ba5      	ldr	r3, [pc, #660]	; (8004e30 <statemachine+0x1148>)
 8004b9c:	f7fb fe56 	bl	800084c <__aeabi_ddiv>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	ec43 2b17 	vmov	d7, r2, r3
 8004ba8:	eeb0 0a47 	vmov.f32	s0, s14
 8004bac:	eef0 0a67 	vmov.f32	s1, s15
 8004bb0:	f015 fe22 	bl	801a7f8 <sin>
 8004bb4:	ec51 0b10 	vmov	r0, r1, d0
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	4b9d      	ldr	r3, [pc, #628]	; (8004e34 <statemachine+0x114c>)
 8004bbe:	f7fb fd1b 	bl	80005f8 <__aeabi_dmul>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	ec43 2b17 	vmov	d7, r2, r3
 8004bca:	eeb0 0a47 	vmov.f32	s0, s14
 8004bce:	eef0 0a67 	vmov.f32	s1, s15
 8004bd2:	f015 ff11 	bl	801a9f8 <floor>
 8004bd6:	ec51 0b10 	vmov	r0, r1, d0
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	4b97      	ldr	r3, [pc, #604]	; (8004e3c <statemachine+0x1154>)
 8004be0:	f7fb fb54 	bl	800028c <__adddf3>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4610      	mov	r0, r2
 8004bea:	4619      	mov	r1, r3
 8004bec:	f7fb ffdc 	bl	8000ba8 <__aeabi_d2uiz>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	b2dd      	uxtb	r5, r3
 8004bf4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004bf6:	f7fb fc95 	bl	8000524 <__aeabi_i2d>
 8004bfa:	a38b      	add	r3, pc, #556	; (adr r3, 8004e28 <statemachine+0x1140>)
 8004bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c00:	f7fb fcfa 	bl	80005f8 <__aeabi_dmul>
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	4610      	mov	r0, r2
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	4b87      	ldr	r3, [pc, #540]	; (8004e30 <statemachine+0x1148>)
 8004c12:	f7fb fe1b 	bl	800084c <__aeabi_ddiv>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	ec43 2b17 	vmov	d7, r2, r3
 8004c1e:	eeb0 0a47 	vmov.f32	s0, s14
 8004c22:	eef0 0a67 	vmov.f32	s1, s15
 8004c26:	f015 fd93 	bl	801a750 <cos>
 8004c2a:	ec51 0b10 	vmov	r0, r1, d0
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	4b83      	ldr	r3, [pc, #524]	; (8004e40 <statemachine+0x1158>)
 8004c34:	f7fb fce0 	bl	80005f8 <__aeabi_dmul>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	ec43 2b17 	vmov	d7, r2, r3
 8004c40:	eeb0 0a47 	vmov.f32	s0, s14
 8004c44:	eef0 0a67 	vmov.f32	s1, s15
 8004c48:	f015 fed6 	bl	801a9f8 <floor>
 8004c4c:	ec51 0b10 	vmov	r0, r1, d0
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	4b78      	ldr	r3, [pc, #480]	; (8004e38 <statemachine+0x1150>)
 8004c56:	f7fb fb19 	bl	800028c <__adddf3>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4610      	mov	r0, r2
 8004c60:	4619      	mov	r1, r3
 8004c62:	f7fb ffa1 	bl	8000ba8 <__aeabi_d2uiz>
 8004c66:	4603      	mov	r3, r0
 8004c68:	b2de      	uxtb	r6, r3
 8004c6a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004c6c:	f7fb fc5a 	bl	8000524 <__aeabi_i2d>
 8004c70:	a36d      	add	r3, pc, #436	; (adr r3, 8004e28 <statemachine+0x1140>)
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	f7fb fcbf 	bl	80005f8 <__aeabi_dmul>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4610      	mov	r0, r2
 8004c80:	4619      	mov	r1, r3
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	4b6a      	ldr	r3, [pc, #424]	; (8004e30 <statemachine+0x1148>)
 8004c88:	f7fb fde0 	bl	800084c <__aeabi_ddiv>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	ec43 2b17 	vmov	d7, r2, r3
 8004c94:	eeb0 0a47 	vmov.f32	s0, s14
 8004c98:	eef0 0a67 	vmov.f32	s1, s15
 8004c9c:	f015 fdac 	bl	801a7f8 <sin>
 8004ca0:	ec51 0b10 	vmov	r0, r1, d0
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	4b65      	ldr	r3, [pc, #404]	; (8004e40 <statemachine+0x1158>)
 8004caa:	f7fb fca5 	bl	80005f8 <__aeabi_dmul>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	ec43 2b17 	vmov	d7, r2, r3
 8004cb6:	eeb0 0a47 	vmov.f32	s0, s14
 8004cba:	eef0 0a67 	vmov.f32	s1, s15
 8004cbe:	f015 fe9b 	bl	801a9f8 <floor>
 8004cc2:	ec51 0b10 	vmov	r0, r1, d0
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	4b5c      	ldr	r3, [pc, #368]	; (8004e3c <statemachine+0x1154>)
 8004ccc:	f7fb fade 	bl	800028c <__adddf3>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	f7fb ff66 	bl	8000ba8 <__aeabi_d2uiz>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	9200      	str	r2, [sp, #0]
 8004ce4:	4632      	mov	r2, r6
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f7fe fc1d 	bl	8003528 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 8004cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cf6:	2b0c      	cmp	r3, #12
 8004cf8:	f77f af06 	ble.w	8004b08 <statemachine+0xe20>
					  }
					  if(BTN_B>=1){
 8004cfc:	4b51      	ldr	r3, [pc, #324]	; (8004e44 <statemachine+0x115c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	dd1e      	ble.n	8004d42 <statemachine+0x105a>
					  	hrstate--;
 8004d04:	4b50      	ldr	r3, [pc, #320]	; (8004e48 <statemachine+0x1160>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	4b4e      	ldr	r3, [pc, #312]	; (8004e48 <statemachine+0x1160>)
 8004d0e:	701a      	strb	r2, [r3, #0]
					  	BTN_B=0;
 8004d10:	4b4c      	ldr	r3, [pc, #304]	; (8004e44 <statemachine+0x115c>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
					  }


					  break;
 8004d16:	e014      	b.n	8004d42 <statemachine+0x105a>

				  }

			  			 					}
			  			 	else{ //if the GPS doesn't have a fix, print a message
			  			 						char *str = (char*)malloc(sizeof(char)*20);
 8004d18:	2014      	movs	r0, #20
 8004d1a:	f010 ffad 	bl	8015c78 <malloc>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	643b      	str	r3, [r7, #64]	; 0x40
			  			 						ssd1306_SetCursor(32, 44);
 8004d22:	212c      	movs	r1, #44	; 0x2c
 8004d24:	2020      	movs	r0, #32
 8004d26:	f7fe fbe7 	bl	80034f8 <ssd1306_SetCursor>
			  			 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8004d2a:	4a48      	ldr	r2, [pc, #288]	; (8004e4c <statemachine+0x1164>)
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	ca06      	ldmia	r2, {r1, r2}
 8004d30:	4847      	ldr	r0, [pc, #284]	; (8004e50 <statemachine+0x1168>)
 8004d32:	f7fe fbbb 	bl	80034ac <ssd1306_WriteString>
			  			 						free(str);
 8004d36:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d38:	f010 ffa6 	bl	8015c88 <free>
 8004d3c:	e002      	b.n	8004d44 <statemachine+0x105c>
					  break;
 8004d3e:	bf00      	nop
 8004d40:	e000      	b.n	8004d44 <statemachine+0x105c>
					  break;
 8004d42:	bf00      	nop
			  			 	}
				  if(BTN_A>=1){
 8004d44:	4b43      	ldr	r3, [pc, #268]	; (8004e54 <statemachine+0x116c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f340 8689 	ble.w	8005a60 <statemachine+0x1d78>
			  		state++;
 8004d4e:	4b42      	ldr	r3, [pc, #264]	; (8004e58 <statemachine+0x1170>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	3301      	adds	r3, #1
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	4b40      	ldr	r3, [pc, #256]	; (8004e58 <statemachine+0x1170>)
 8004d58:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8004d5a:	4b3e      	ldr	r3, [pc, #248]	; (8004e54 <statemachine+0x116c>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8004d60:	4b38      	ldr	r3, [pc, #224]	; (8004e44 <statemachine+0x115c>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 8004d66:	f000 be7b 	b.w	8005a60 <statemachine+0x1d78>
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	f7fe fa82 	bl	8003274 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8004d70:	493a      	ldr	r1, [pc, #232]	; (8004e5c <statemachine+0x1174>)
 8004d72:	483b      	ldr	r0, [pc, #236]	; (8004e60 <statemachine+0x1178>)
 8004d74:	f7fd faee 	bl	8002354 <nmea_parse>
			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 8004d78:	4b39      	ldr	r3, [pc, #228]	; (8004e60 <statemachine+0x1178>)
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d17b      	bne.n	8004e78 <statemachine+0x1190>
			 			 						char * str = (char*)malloc(sizeof(char)*20);
 8004d80:	2014      	movs	r0, #20
 8004d82:	f010 ff79 	bl	8015c78 <malloc>
 8004d86:	4603      	mov	r3, r0
 8004d88:	647b      	str	r3, [r7, #68]	; 0x44
			 			 						snprintf(str,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8004d8a:	4b35      	ldr	r3, [pc, #212]	; (8004e60 <statemachine+0x1178>)
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fb fbda 	bl	8000548 <__aeabi_f2d>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	e9cd 2300 	strd	r2, r3, [sp]
 8004d9c:	4a31      	ldr	r2, [pc, #196]	; (8004e64 <statemachine+0x117c>)
 8004d9e:	210f      	movs	r1, #15
 8004da0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004da2:	f012 fe63 	bl	8017a6c <sniprintf>
			 			 						ssd1306_SetCursor(32, 32);
 8004da6:	2120      	movs	r1, #32
 8004da8:	2020      	movs	r0, #32
 8004daa:	f7fe fba5 	bl	80034f8 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004dae:	4a27      	ldr	r2, [pc, #156]	; (8004e4c <statemachine+0x1164>)
 8004db0:	2301      	movs	r3, #1
 8004db2:	ca06      	ldmia	r2, {r1, r2}
 8004db4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004db6:	f7fe fb79 	bl	80034ac <ssd1306_WriteString>
			 			 						snprintf(str,20, "v=%0.2fV",vbat);
 8004dba:	4b2b      	ldr	r3, [pc, #172]	; (8004e68 <statemachine+0x1180>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fb fbc2 	bl	8000548 <__aeabi_f2d>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	e9cd 2300 	strd	r2, r3, [sp]
 8004dcc:	4a27      	ldr	r2, [pc, #156]	; (8004e6c <statemachine+0x1184>)
 8004dce:	2114      	movs	r1, #20
 8004dd0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004dd2:	f012 fe4b 	bl	8017a6c <sniprintf>
			 			 						ssd1306_SetCursor(32, 42);
 8004dd6:	212a      	movs	r1, #42	; 0x2a
 8004dd8:	2020      	movs	r0, #32
 8004dda:	f7fe fb8d 	bl	80034f8 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004dde:	4a1b      	ldr	r2, [pc, #108]	; (8004e4c <statemachine+0x1164>)
 8004de0:	2301      	movs	r3, #1
 8004de2:	ca06      	ldmia	r2, {r1, r2}
 8004de4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004de6:	f7fe fb61 	bl	80034ac <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 8004dea:	2132      	movs	r1, #50	; 0x32
 8004dec:	2020      	movs	r0, #32
 8004dee:	f7fe fb83 	bl	80034f8 <ssd1306_SetCursor>
			 			 						snprintf(str,15,  "T=%0.2fC",temp);
 8004df2:	4b1f      	ldr	r3, [pc, #124]	; (8004e70 <statemachine+0x1188>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fb fba6 	bl	8000548 <__aeabi_f2d>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	e9cd 2300 	strd	r2, r3, [sp]
 8004e04:	4a1b      	ldr	r2, [pc, #108]	; (8004e74 <statemachine+0x118c>)
 8004e06:	210f      	movs	r1, #15
 8004e08:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004e0a:	f012 fe2f 	bl	8017a6c <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004e0e:	4a0f      	ldr	r2, [pc, #60]	; (8004e4c <statemachine+0x1164>)
 8004e10:	2301      	movs	r3, #1
 8004e12:	ca06      	ldmia	r2, {r1, r2}
 8004e14:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004e16:	f7fe fb49 	bl	80034ac <ssd1306_WriteString>
			 			 						free(str);
 8004e1a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004e1c:	f010 ff34 	bl	8015c88 <free>
 8004e20:	e06c      	b.n	8004efc <statemachine+0x1214>
 8004e22:	bf00      	nop
 8004e24:	f3af 8000 	nop.w
 8004e28:	54442d18 	.word	0x54442d18
 8004e2c:	400921fb 	.word	0x400921fb
 8004e30:	40180000 	.word	0x40180000
 8004e34:	40240000 	.word	0x40240000
 8004e38:	40500000 	.word	0x40500000
 8004e3c:	40480000 	.word	0x40480000
 8004e40:	40280000 	.word	0x40280000
 8004e44:	2000073c 	.word	0x2000073c
 8004e48:	200004a9 	.word	0x200004a9
 8004e4c:	20000020 	.word	0x20000020
 8004e50:	0801cdf4 	.word	0x0801cdf4
 8004e54:	20000738 	.word	0x20000738
 8004e58:	200004a8 	.word	0x200004a8
 8004e5c:	200004f4 	.word	0x200004f4
 8004e60:	200006f8 	.word	0x200006f8
 8004e64:	0801cecc 	.word	0x0801cecc
 8004e68:	20000770 	.word	0x20000770
 8004e6c:	0801ced8 	.word	0x0801ced8
 8004e70:	20000768 	.word	0x20000768
 8004e74:	0801cee4 	.word	0x0801cee4
			 			 					}
			 			 	else{ //if the GPS doesn't have a fix, print a message
			 			 						char *str = (char*)malloc(sizeof(char)*20);
 8004e78:	2014      	movs	r0, #20
 8004e7a:	f010 fefd 	bl	8015c78 <malloc>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	64bb      	str	r3, [r7, #72]	; 0x48
			 			 						ssd1306_SetCursor(32, 32);
 8004e82:	2120      	movs	r1, #32
 8004e84:	2020      	movs	r0, #32
 8004e86:	f7fe fb37 	bl	80034f8 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("INFO", Font_6x8, White);
 8004e8a:	4a96      	ldr	r2, [pc, #600]	; (80050e4 <statemachine+0x13fc>)
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	ca06      	ldmia	r2, {r1, r2}
 8004e90:	4895      	ldr	r0, [pc, #596]	; (80050e8 <statemachine+0x1400>)
 8004e92:	f7fe fb0b 	bl	80034ac <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 41);
 8004e96:	2129      	movs	r1, #41	; 0x29
 8004e98:	2020      	movs	r0, #32
 8004e9a:	f7fe fb2d 	bl	80034f8 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "vbat=%0.2fV",vbat);
 8004e9e:	4b93      	ldr	r3, [pc, #588]	; (80050ec <statemachine+0x1404>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fb fb50 	bl	8000548 <__aeabi_f2d>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	e9cd 2300 	strd	r2, r3, [sp]
 8004eb0:	4a8f      	ldr	r2, [pc, #572]	; (80050f0 <statemachine+0x1408>)
 8004eb2:	210f      	movs	r1, #15
 8004eb4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004eb6:	f012 fdd9 	bl	8017a6c <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004eba:	4a8a      	ldr	r2, [pc, #552]	; (80050e4 <statemachine+0x13fc>)
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	ca06      	ldmia	r2, {r1, r2}
 8004ec0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004ec2:	f7fe faf3 	bl	80034ac <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 8004ec6:	2132      	movs	r1, #50	; 0x32
 8004ec8:	2020      	movs	r0, #32
 8004eca:	f7fe fb15 	bl	80034f8 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "T=%0.2fC",temp);
 8004ece:	4b89      	ldr	r3, [pc, #548]	; (80050f4 <statemachine+0x140c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fb fb38 	bl	8000548 <__aeabi_f2d>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	e9cd 2300 	strd	r2, r3, [sp]
 8004ee0:	4a85      	ldr	r2, [pc, #532]	; (80050f8 <statemachine+0x1410>)
 8004ee2:	210f      	movs	r1, #15
 8004ee4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004ee6:	f012 fdc1 	bl	8017a6c <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004eea:	4a7e      	ldr	r2, [pc, #504]	; (80050e4 <statemachine+0x13fc>)
 8004eec:	2301      	movs	r3, #1
 8004eee:	ca06      	ldmia	r2, {r1, r2}
 8004ef0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004ef2:	f7fe fadb 	bl	80034ac <ssd1306_WriteString>
			 			 						free(str);
 8004ef6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004ef8:	f010 fec6 	bl	8015c88 <free>
			 			 					}
			  if(BTN_A>=1){
 8004efc:	4b7f      	ldr	r3, [pc, #508]	; (80050fc <statemachine+0x1414>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f340 85af 	ble.w	8005a64 <statemachine+0x1d7c>
			  		state++;
 8004f06:	4b7e      	ldr	r3, [pc, #504]	; (8005100 <statemachine+0x1418>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	4b7c      	ldr	r3, [pc, #496]	; (8005100 <statemachine+0x1418>)
 8004f10:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8004f12:	4b7a      	ldr	r3, [pc, #488]	; (80050fc <statemachine+0x1414>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8004f18:	4b7a      	ldr	r3, [pc, #488]	; (8005104 <statemachine+0x141c>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 8004f1e:	f000 bda1 	b.w	8005a64 <statemachine+0x1d7c>

		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8004f22:	2000      	movs	r0, #0
 8004f24:	f7fe f9a6 	bl	8003274 <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 8004f28:	2120      	movs	r1, #32
 8004f2a:	2020      	movs	r0, #32
 8004f2c:	f7fe fae4 	bl	80034f8 <ssd1306_SetCursor>
			  char *str = (char*)malloc(sizeof(char)*20);
 8004f30:	2014      	movs	r0, #20
 8004f32:	f010 fea1 	bl	8015c78 <malloc>
 8004f36:	4603      	mov	r3, r0
 8004f38:	64fb      	str	r3, [r7, #76]	; 0x4c
			  ssd1306_WriteString("chrono", Font_6x8, White);
 8004f3a:	4a6a      	ldr	r2, [pc, #424]	; (80050e4 <statemachine+0x13fc>)
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	ca06      	ldmia	r2, {r1, r2}
 8004f40:	4871      	ldr	r0, [pc, #452]	; (8005108 <statemachine+0x1420>)
 8004f42:	f7fe fab3 	bl	80034ac <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 40);
 8004f46:	2128      	movs	r1, #40	; 0x28
 8004f48:	2020      	movs	r0, #32
 8004f4a:	f7fe fad5 	bl	80034f8 <ssd1306_SetCursor>

			  switch(chronostate){
 8004f4e:	4b6f      	ldr	r3, [pc, #444]	; (800510c <statemachine+0x1424>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d038      	beq.n	8004fc8 <statemachine+0x12e0>
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	dc4f      	bgt.n	8004ffa <statemachine+0x1312>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <statemachine+0x127c>
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d01d      	beq.n	8004f9e <statemachine+0x12b6>
 8004f62:	e04a      	b.n	8004ffa <statemachine+0x1312>
			  case STATE_RESET:
				  min=0;
 8004f64:	4b6a      	ldr	r3, [pc, #424]	; (8005110 <statemachine+0x1428>)
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8004f6c:	4b69      	ldr	r3, [pc, #420]	; (8005114 <statemachine+0x142c>)
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8004f74:	4b68      	ldr	r3, [pc, #416]	; (8005118 <statemachine+0x1430>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
				  	 if(BTN_B>=1){
 8004f7a:	4b62      	ldr	r3, [pc, #392]	; (8005104 <statemachine+0x141c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	dd36      	ble.n	8004ff0 <statemachine+0x1308>
				  		chronostate++;
 8004f82:	4b62      	ldr	r3, [pc, #392]	; (800510c <statemachine+0x1424>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	3301      	adds	r3, #1
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	4b60      	ldr	r3, [pc, #384]	; (800510c <statemachine+0x1424>)
 8004f8c:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8004f8e:	4b5d      	ldr	r3, [pc, #372]	; (8005104 <statemachine+0x141c>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8004f94:	4b61      	ldr	r3, [pc, #388]	; (800511c <statemachine+0x1434>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a61      	ldr	r2, [pc, #388]	; (8005120 <statemachine+0x1438>)
 8004f9a:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8004f9c:	e028      	b.n	8004ff0 <statemachine+0x1308>
			  case STATE_RUN:
				  calctime=uwTick-starttime;
 8004f9e:	4b5f      	ldr	r3, [pc, #380]	; (800511c <statemachine+0x1434>)
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4b5f      	ldr	r3, [pc, #380]	; (8005120 <statemachine+0x1438>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	4a5b      	ldr	r2, [pc, #364]	; (8005118 <statemachine+0x1430>)
 8004faa:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8004fac:	4b55      	ldr	r3, [pc, #340]	; (8005104 <statemachine+0x141c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	dd1f      	ble.n	8004ff4 <statemachine+0x130c>
				  		chronostate++;
 8004fb4:	4b55      	ldr	r3, [pc, #340]	; (800510c <statemachine+0x1424>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	4b53      	ldr	r3, [pc, #332]	; (800510c <statemachine+0x1424>)
 8004fbe:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8004fc0:	4b50      	ldr	r3, [pc, #320]	; (8005104 <statemachine+0x141c>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8004fc6:	e015      	b.n	8004ff4 <statemachine+0x130c>
			  case STATE_PAUSE:
				  if(BTN_B>=1){
 8004fc8:	4b4e      	ldr	r3, [pc, #312]	; (8005104 <statemachine+0x141c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	dd13      	ble.n	8004ff8 <statemachine+0x1310>
				  			chronostate--;
 8004fd0:	4b4e      	ldr	r3, [pc, #312]	; (800510c <statemachine+0x1424>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	4b4c      	ldr	r3, [pc, #304]	; (800510c <statemachine+0x1424>)
 8004fda:	701a      	strb	r2, [r3, #0]
				  			chronostate--;
 8004fdc:	4b4b      	ldr	r3, [pc, #300]	; (800510c <statemachine+0x1424>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	4b49      	ldr	r3, [pc, #292]	; (800510c <statemachine+0x1424>)
 8004fe6:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8004fe8:	4b46      	ldr	r3, [pc, #280]	; (8005104 <statemachine+0x141c>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
			 }

				  break;
 8004fee:	e003      	b.n	8004ff8 <statemachine+0x1310>
				  break;
 8004ff0:	bf00      	nop
 8004ff2:	e002      	b.n	8004ffa <statemachine+0x1312>
				  break;
 8004ff4:	bf00      	nop
 8004ff6:	e000      	b.n	8004ffa <statemachine+0x1312>
				  break;
 8004ff8:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8004ffa:	4b47      	ldr	r3, [pc, #284]	; (8005118 <statemachine+0x1430>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005006:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8005124 <statemachine+0x143c>
 800500a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800500e:	ee16 0a90 	vmov	r0, s13
 8005012:	f7fb fa99 	bl	8000548 <__aeabi_f2d>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	ec43 2b10 	vmov	d0, r2, r3
 800501e:	f015 fceb 	bl	801a9f8 <floor>
 8005022:	ec53 2b10 	vmov	r2, r3, d0
 8005026:	4610      	mov	r0, r2
 8005028:	4619      	mov	r1, r3
 800502a:	f7fb fddd 	bl	8000be8 <__aeabi_d2f>
 800502e:	4603      	mov	r3, r0
 8005030:	4a37      	ldr	r2, [pc, #220]	; (8005110 <statemachine+0x1428>)
 8005032:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8005034:	4b38      	ldr	r3, [pc, #224]	; (8005118 <statemachine+0x1430>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	ee07 3a90 	vmov	s15, r3
 800503c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005040:	4b33      	ldr	r3, [pc, #204]	; (8005110 <statemachine+0x1428>)
 8005042:	edd3 7a00 	vldr	s15, [r3]
 8005046:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005124 <statemachine+0x143c>
 800504a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800504e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005052:	eddf 6a35 	vldr	s13, [pc, #212]	; 8005128 <statemachine+0x1440>
 8005056:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800505a:	4b2e      	ldr	r3, [pc, #184]	; (8005114 <statemachine+0x142c>)
 800505c:	edc3 7a00 	vstr	s15, [r3]
			  snprintf(str,15, "%0.0fmin",min);
 8005060:	4b2b      	ldr	r3, [pc, #172]	; (8005110 <statemachine+0x1428>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4618      	mov	r0, r3
 8005066:	f7fb fa6f 	bl	8000548 <__aeabi_f2d>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	e9cd 2300 	strd	r2, r3, [sp]
 8005072:	4a2e      	ldr	r2, [pc, #184]	; (800512c <statemachine+0x1444>)
 8005074:	210f      	movs	r1, #15
 8005076:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005078:	f012 fcf8 	bl	8017a6c <sniprintf>
			  ssd1306_WriteString(str, Font_7x10, White);
 800507c:	4a2c      	ldr	r2, [pc, #176]	; (8005130 <statemachine+0x1448>)
 800507e:	2301      	movs	r3, #1
 8005080:	ca06      	ldmia	r2, {r1, r2}
 8005082:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005084:	f7fe fa12 	bl	80034ac <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8005088:	2132      	movs	r1, #50	; 0x32
 800508a:	2020      	movs	r0, #32
 800508c:	f7fe fa34 	bl	80034f8 <ssd1306_SetCursor>
			  snprintf(str,15, "%0.3fsec",seconde);
 8005090:	4b20      	ldr	r3, [pc, #128]	; (8005114 <statemachine+0x142c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4618      	mov	r0, r3
 8005096:	f7fb fa57 	bl	8000548 <__aeabi_f2d>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	e9cd 2300 	strd	r2, r3, [sp]
 80050a2:	4a24      	ldr	r2, [pc, #144]	; (8005134 <statemachine+0x144c>)
 80050a4:	210f      	movs	r1, #15
 80050a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80050a8:	f012 fce0 	bl	8017a6c <sniprintf>
			  ssd1306_WriteString(str, Font_6x8, White);
 80050ac:	4a0d      	ldr	r2, [pc, #52]	; (80050e4 <statemachine+0x13fc>)
 80050ae:	2301      	movs	r3, #1
 80050b0:	ca06      	ldmia	r2, {r1, r2}
 80050b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80050b4:	f7fe f9fa 	bl	80034ac <ssd1306_WriteString>
			  free(str);
 80050b8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80050ba:	f010 fde5 	bl	8015c88 <free>


			  if(BTN_A>=1){
 80050be:	4b0f      	ldr	r3, [pc, #60]	; (80050fc <statemachine+0x1414>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f340 84d0 	ble.w	8005a68 <statemachine+0x1d80>
			 	state++;
 80050c8:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <statemachine+0x1418>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	3301      	adds	r3, #1
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <statemachine+0x1418>)
 80050d2:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 80050d4:	4b09      	ldr	r3, [pc, #36]	; (80050fc <statemachine+0x1414>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 80050da:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <statemachine+0x141c>)
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]


	}
			  break;
 80050e0:	f000 bcc2 	b.w	8005a68 <statemachine+0x1d80>
 80050e4:	20000020 	.word	0x20000020
 80050e8:	0801cef0 	.word	0x0801cef0
 80050ec:	20000770 	.word	0x20000770
 80050f0:	0801cef8 	.word	0x0801cef8
 80050f4:	20000768 	.word	0x20000768
 80050f8:	0801cee4 	.word	0x0801cee4
 80050fc:	20000738 	.word	0x20000738
 8005100:	200004a8 	.word	0x200004a8
 8005104:	2000073c 	.word	0x2000073c
 8005108:	0801cf04 	.word	0x0801cf04
 800510c:	200004ac 	.word	0x200004ac
 8005110:	20000a28 	.word	0x20000a28
 8005114:	20000a24 	.word	0x20000a24
 8005118:	20000a30 	.word	0x20000a30
 800511c:	200011dc 	.word	0x200011dc
 8005120:	20000a2c 	.word	0x20000a2c
 8005124:	476a6000 	.word	0x476a6000
 8005128:	447a0000 	.word	0x447a0000
 800512c:	0801cf0c 	.word	0x0801cf0c
 8005130:	20000028 	.word	0x20000028
 8005134:	0801cf18 	.word	0x0801cf18

			  case STATE_BARO:



				  if(BTN_B>=1){
 8005138:	4b6f      	ldr	r3, [pc, #444]	; (80052f8 <statemachine+0x1610>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	dd0b      	ble.n	8005158 <statemachine+0x1470>
				  if(baroenableinit==0){
 8005140:	4b6e      	ldr	r3, [pc, #440]	; (80052fc <statemachine+0x1614>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d104      	bne.n	8005152 <statemachine+0x146a>
					  PADS_init();
 8005148:	f7fc f88a 	bl	8001260 <PADS_init>
					  baroenableinit=1;
 800514c:	4b6b      	ldr	r3, [pc, #428]	; (80052fc <statemachine+0x1614>)
 800514e:	2201      	movs	r2, #1
 8005150:	601a      	str	r2, [r3, #0]
				  }
				  BTN_B=0;
 8005152:	4b69      	ldr	r3, [pc, #420]	; (80052f8 <statemachine+0x1610>)
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
				  }
				  ssd1306_Fill(Black);
 8005158:	2000      	movs	r0, #0
 800515a:	f7fe f88b 	bl	8003274 <ssd1306_Fill>
				  ssd1306_SetCursor(32,32);
 800515e:	2120      	movs	r1, #32
 8005160:	2020      	movs	r0, #32
 8005162:	f7fe f9c9 	bl	80034f8 <ssd1306_SetCursor>
				  ssd1306_WriteString("baro",Font_6x8,White);
 8005166:	4a66      	ldr	r2, [pc, #408]	; (8005300 <statemachine+0x1618>)
 8005168:	2301      	movs	r3, #1
 800516a:	ca06      	ldmia	r2, {r1, r2}
 800516c:	4865      	ldr	r0, [pc, #404]	; (8005304 <statemachine+0x161c>)
 800516e:	f7fe f99d 	bl	80034ac <ssd1306_WriteString>
				  PADS_getPressure_int(&pads, &baropress);
 8005172:	4965      	ldr	r1, [pc, #404]	; (8005308 <statemachine+0x1620>)
 8005174:	4865      	ldr	r0, [pc, #404]	; (800530c <statemachine+0x1624>)
 8005176:	f7fc f833 	bl	80011e0 <PADS_getPressure_int>
				  PADS_getTemperature_int(&pads,&barotemp);
 800517a:	4965      	ldr	r1, [pc, #404]	; (8005310 <statemachine+0x1628>)
 800517c:	4863      	ldr	r0, [pc, #396]	; (800530c <statemachine+0x1624>)
 800517e:	f7fc f84e 	bl	800121e <PADS_getTemperature_int>
				  ssd1306_SetCursor(32,40);
 8005182:	2128      	movs	r1, #40	; 0x28
 8005184:	2020      	movs	r0, #32
 8005186:	f7fe f9b7 	bl	80034f8 <ssd1306_SetCursor>
				  snprintf((uint8_t *)bufferscreen,50,"P=%d",baropress);
 800518a:	4b5f      	ldr	r3, [pc, #380]	; (8005308 <statemachine+0x1620>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a61      	ldr	r2, [pc, #388]	; (8005314 <statemachine+0x162c>)
 8005190:	2132      	movs	r1, #50	; 0x32
 8005192:	4861      	ldr	r0, [pc, #388]	; (8005318 <statemachine+0x1630>)
 8005194:	f012 fc6a 	bl	8017a6c <sniprintf>
				  ssd1306_WriteString((uint8_t *)bufferscreen,Font_6x8,White);
 8005198:	4a59      	ldr	r2, [pc, #356]	; (8005300 <statemachine+0x1618>)
 800519a:	2301      	movs	r3, #1
 800519c:	ca06      	ldmia	r2, {r1, r2}
 800519e:	485e      	ldr	r0, [pc, #376]	; (8005318 <statemachine+0x1630>)
 80051a0:	f7fe f984 	bl	80034ac <ssd1306_WriteString>
				  ssd1306_SetCursor(32,48);
 80051a4:	2130      	movs	r1, #48	; 0x30
 80051a6:	2020      	movs	r0, #32
 80051a8:	f7fe f9a6 	bl	80034f8 <ssd1306_SetCursor>
				  snprintf((uint8_t *)bufferscreen,50,"T=%d",barotemp);
 80051ac:	4b58      	ldr	r3, [pc, #352]	; (8005310 <statemachine+0x1628>)
 80051ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051b2:	4a5a      	ldr	r2, [pc, #360]	; (800531c <statemachine+0x1634>)
 80051b4:	2132      	movs	r1, #50	; 0x32
 80051b6:	4858      	ldr	r0, [pc, #352]	; (8005318 <statemachine+0x1630>)
 80051b8:	f012 fc58 	bl	8017a6c <sniprintf>
				  ssd1306_WriteString((uint8_t *)bufferscreen,Font_6x8,White);
 80051bc:	4a50      	ldr	r2, [pc, #320]	; (8005300 <statemachine+0x1618>)
 80051be:	2301      	movs	r3, #1
 80051c0:	ca06      	ldmia	r2, {r1, r2}
 80051c2:	4855      	ldr	r0, [pc, #340]	; (8005318 <statemachine+0x1630>)
 80051c4:	f7fe f972 	bl	80034ac <ssd1306_WriteString>
				  altibaro=altitudecalc(0);
 80051c8:	2000      	movs	r0, #0
 80051ca:	f7fc f881 	bl	80012d0 <altitudecalc>
 80051ce:	ee07 0a90 	vmov	s15, r0
 80051d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051d6:	4b52      	ldr	r3, [pc, #328]	; (8005320 <statemachine+0x1638>)
 80051d8:	edc3 7a00 	vstr	s15, [r3]
				  ssd1306_SetCursor(32,56);
 80051dc:	2138      	movs	r1, #56	; 0x38
 80051de:	2020      	movs	r0, #32
 80051e0:	f7fe f98a 	bl	80034f8 <ssd1306_SetCursor>
				  snprintf((uint8_t *)bufferscreen,50,"h=%0.1fm",(float) altibaro);
 80051e4:	4b4e      	ldr	r3, [pc, #312]	; (8005320 <statemachine+0x1638>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fb f9ad 	bl	8000548 <__aeabi_f2d>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	e9cd 2300 	strd	r2, r3, [sp]
 80051f6:	4a4b      	ldr	r2, [pc, #300]	; (8005324 <statemachine+0x163c>)
 80051f8:	2132      	movs	r1, #50	; 0x32
 80051fa:	4847      	ldr	r0, [pc, #284]	; (8005318 <statemachine+0x1630>)
 80051fc:	f012 fc36 	bl	8017a6c <sniprintf>
				  ssd1306_WriteString((uint8_t *)bufferscreen,Font_6x8,White);
 8005200:	4a3f      	ldr	r2, [pc, #252]	; (8005300 <statemachine+0x1618>)
 8005202:	2301      	movs	r3, #1
 8005204:	ca06      	ldmia	r2, {r1, r2}
 8005206:	4844      	ldr	r0, [pc, #272]	; (8005318 <statemachine+0x1630>)
 8005208:	f7fe f950 	bl	80034ac <ssd1306_WriteString>

				  if(BTN_A>=1){
 800520c:	4b46      	ldr	r3, [pc, #280]	; (8005328 <statemachine+0x1640>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	f340 842b 	ble.w	8005a6c <statemachine+0x1d84>
				  			 	state++;
 8005216:	4b45      	ldr	r3, [pc, #276]	; (800532c <statemachine+0x1644>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	3301      	adds	r3, #1
 800521c:	b2da      	uxtb	r2, r3
 800521e:	4b43      	ldr	r3, [pc, #268]	; (800532c <statemachine+0x1644>)
 8005220:	701a      	strb	r2, [r3, #0]
				  			 	BTN_A=0;
 8005222:	4b41      	ldr	r3, [pc, #260]	; (8005328 <statemachine+0x1640>)
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
				  			 	BTN_B=0;
 8005228:	4b33      	ldr	r3, [pc, #204]	; (80052f8 <statemachine+0x1610>)
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]


				  	}
				  break;
 800522e:	f000 bc1d 	b.w	8005a6c <statemachine+0x1d84>

			  case STATE_BALISE:
				  ssd1306_Fill(Black);
 8005232:	2000      	movs	r0, #0
 8005234:	f7fe f81e 	bl	8003274 <ssd1306_Fill>
				  switch(balisestate){
 8005238:	4b3d      	ldr	r3, [pc, #244]	; (8005330 <statemachine+0x1648>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b02      	cmp	r3, #2
 800523e:	f000 818b 	beq.w	8005558 <statemachine+0x1870>
 8005242:	2b02      	cmp	r3, #2
 8005244:	f300 8414 	bgt.w	8005a70 <statemachine+0x1d88>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <statemachine+0x156c>
 800524c:	2b01      	cmp	r3, #1
 800524e:	d07d      	beq.n	800534c <statemachine+0x1664>


				  }


				  break;
 8005250:	f000 bc0e 	b.w	8005a70 <statemachine+0x1d88>
					  ssd1306_SetCursor(32,32);
 8005254:	2120      	movs	r1, #32
 8005256:	2020      	movs	r0, #32
 8005258:	f7fe f94e 	bl	80034f8 <ssd1306_SetCursor>
					  ssd1306_WriteString("Tracker",Font_6x8,White);
 800525c:	4a28      	ldr	r2, [pc, #160]	; (8005300 <statemachine+0x1618>)
 800525e:	2301      	movs	r3, #1
 8005260:	ca06      	ldmia	r2, {r1, r2}
 8005262:	4834      	ldr	r0, [pc, #208]	; (8005334 <statemachine+0x164c>)
 8005264:	f7fe f922 	bl	80034ac <ssd1306_WriteString>
					  snprintf((uint8_t*)bufferscreen,50, "off=%d",pageoffset);
 8005268:	4b33      	ldr	r3, [pc, #204]	; (8005338 <statemachine+0x1650>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a33      	ldr	r2, [pc, #204]	; (800533c <statemachine+0x1654>)
 800526e:	2132      	movs	r1, #50	; 0x32
 8005270:	4829      	ldr	r0, [pc, #164]	; (8005318 <statemachine+0x1630>)
 8005272:	f012 fbfb 	bl	8017a6c <sniprintf>
					  ssd1306_SetCursor(32,40);
 8005276:	2128      	movs	r1, #40	; 0x28
 8005278:	2020      	movs	r0, #32
 800527a:	f7fe f93d 	bl	80034f8 <ssd1306_SetCursor>
					  ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 800527e:	4a20      	ldr	r2, [pc, #128]	; (8005300 <statemachine+0x1618>)
 8005280:	2301      	movs	r3, #1
 8005282:	ca06      	ldmia	r2, {r1, r2}
 8005284:	4824      	ldr	r0, [pc, #144]	; (8005318 <statemachine+0x1630>)
 8005286:	f7fe f911 	bl	80034ac <ssd1306_WriteString>
					  snprintf((uint8_t*)bufferscreen,50, "page=%d",pagenumber);
 800528a:	4b2d      	ldr	r3, [pc, #180]	; (8005340 <statemachine+0x1658>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a2d      	ldr	r2, [pc, #180]	; (8005344 <statemachine+0x165c>)
 8005290:	2132      	movs	r1, #50	; 0x32
 8005292:	4821      	ldr	r0, [pc, #132]	; (8005318 <statemachine+0x1630>)
 8005294:	f012 fbea 	bl	8017a6c <sniprintf>
					  ssd1306_SetCursor(32,48);
 8005298:	2130      	movs	r1, #48	; 0x30
 800529a:	2020      	movs	r0, #32
 800529c:	f7fe f92c 	bl	80034f8 <ssd1306_SetCursor>
					  ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 80052a0:	4a17      	ldr	r2, [pc, #92]	; (8005300 <statemachine+0x1618>)
 80052a2:	2301      	movs	r3, #1
 80052a4:	ca06      	ldmia	r2, {r1, r2}
 80052a6:	481c      	ldr	r0, [pc, #112]	; (8005318 <statemachine+0x1630>)
 80052a8:	f7fe f900 	bl	80034ac <ssd1306_WriteString>
					  if(BTN_B>=1){
 80052ac:	4b12      	ldr	r3, [pc, #72]	; (80052f8 <statemachine+0x1610>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	dd0e      	ble.n	80052d2 <statemachine+0x15ea>
						balisestate++;
 80052b4:	4b1e      	ldr	r3, [pc, #120]	; (8005330 <statemachine+0x1648>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	3301      	adds	r3, #1
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	4b1c      	ldr	r3, [pc, #112]	; (8005330 <statemachine+0x1648>)
 80052be:	701a      	strb	r2, [r3, #0]
						BTN_B=0;
 80052c0:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <statemachine+0x1610>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
						BTN_A=0;
 80052c6:	4b18      	ldr	r3, [pc, #96]	; (8005328 <statemachine+0x1640>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim7);
 80052cc:	481e      	ldr	r0, [pc, #120]	; (8005348 <statemachine+0x1660>)
 80052ce:	f008 ff93 	bl	800e1f8 <HAL_TIM_Base_Start_IT>
					  if(BTN_A>=1){
 80052d2:	4b15      	ldr	r3, [pc, #84]	; (8005328 <statemachine+0x1640>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f340 8178 	ble.w	80055cc <statemachine+0x18e4>
					  				  			 	state++;
 80052dc:	4b13      	ldr	r3, [pc, #76]	; (800532c <statemachine+0x1644>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	3301      	adds	r3, #1
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	4b11      	ldr	r3, [pc, #68]	; (800532c <statemachine+0x1644>)
 80052e6:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 80052e8:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <statemachine+0x1640>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 80052ee:	4b02      	ldr	r3, [pc, #8]	; (80052f8 <statemachine+0x1610>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
					  break;
 80052f4:	e16a      	b.n	80055cc <statemachine+0x18e4>
 80052f6:	bf00      	nop
 80052f8:	2000073c 	.word	0x2000073c
 80052fc:	20000a70 	.word	0x20000a70
 8005300:	20000020 	.word	0x20000020
 8005304:	0801cf24 	.word	0x0801cf24
 8005308:	20000a68 	.word	0x20000a68
 800530c:	2000033c 	.word	0x2000033c
 8005310:	20000a6c 	.word	0x20000a6c
 8005314:	0801cf2c 	.word	0x0801cf2c
 8005318:	200009ac 	.word	0x200009ac
 800531c:	0801cf34 	.word	0x0801cf34
 8005320:	20000a74 	.word	0x20000a74
 8005324:	0801cf3c 	.word	0x0801cf3c
 8005328:	20000738 	.word	0x20000738
 800532c:	200004a8 	.word	0x200004a8
 8005330:	200004ae 	.word	0x200004ae
 8005334:	0801cf48 	.word	0x0801cf48
 8005338:	20000988 	.word	0x20000988
 800533c:	0801cf50 	.word	0x0801cf50
 8005340:	2000098c 	.word	0x2000098c
 8005344:	0801cf58 	.word	0x0801cf58
 8005348:	20001038 	.word	0x20001038
					  if(pagenumber+1>=MAX_WRITE_PAGE){
 800534c:	4ba4      	ldr	r3, [pc, #656]	; (80055e0 <statemachine+0x18f8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f246 32fd 	movw	r2, #25597	; 0x63fd
 8005354:	4293      	cmp	r3, r2
 8005356:	dd05      	ble.n	8005364 <statemachine+0x167c>
						  HAL_TIM_Base_Stop_IT(&htim7);
 8005358:	48a2      	ldr	r0, [pc, #648]	; (80055e4 <statemachine+0x18fc>)
 800535a:	f008 ffa1 	bl	800e2a0 <HAL_TIM_Base_Stop_IT>
						  balisestate=2;
 800535e:	4ba2      	ldr	r3, [pc, #648]	; (80055e8 <statemachine+0x1900>)
 8005360:	2202      	movs	r2, #2
 8005362:	701a      	strb	r2, [r3, #0]
					  if(enablewrite==1){
 8005364:	4ba1      	ldr	r3, [pc, #644]	; (80055ec <statemachine+0x1904>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d176      	bne.n	800545a <statemachine+0x1772>
						  oldlat=myData.latitude;
 800536c:	4ba0      	ldr	r3, [pc, #640]	; (80055f0 <statemachine+0x1908>)
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	49a0      	ldr	r1, [pc, #640]	; (80055f4 <statemachine+0x190c>)
 8005374:	e9c1 2300 	strd	r2, r3, [r1]
						  oldlong=myData.longitude;
 8005378:	4b9d      	ldr	r3, [pc, #628]	; (80055f0 <statemachine+0x1908>)
 800537a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800537e:	499e      	ldr	r1, [pc, #632]	; (80055f8 <statemachine+0x1910>)
 8005380:	e9c1 2300 	strd	r2, r3, [r1]
						  nmea_parse(&myData, DataBuffer);
 8005384:	499d      	ldr	r1, [pc, #628]	; (80055fc <statemachine+0x1914>)
 8005386:	489a      	ldr	r0, [pc, #616]	; (80055f0 <statemachine+0x1908>)
 8005388:	f7fc ffe4 	bl	8002354 <nmea_parse>
						  if(distancecalc(oldlat, myData.latitude,oldlong, myData.longitude)>= (10*myData.speed/7.2)){
 800538c:	4b99      	ldr	r3, [pc, #612]	; (80055f4 <statemachine+0x190c>)
 800538e:	ed93 7b00 	vldr	d7, [r3]
 8005392:	4b97      	ldr	r3, [pc, #604]	; (80055f0 <statemachine+0x1908>)
 8005394:	ed93 6b00 	vldr	d6, [r3]
 8005398:	4b97      	ldr	r3, [pc, #604]	; (80055f8 <statemachine+0x1910>)
 800539a:	ed93 5b00 	vldr	d5, [r3]
 800539e:	4b94      	ldr	r3, [pc, #592]	; (80055f0 <statemachine+0x1908>)
 80053a0:	ed93 4b04 	vldr	d4, [r3, #16]
 80053a4:	eeb0 3a44 	vmov.f32	s6, s8
 80053a8:	eef0 3a64 	vmov.f32	s7, s9
 80053ac:	eeb0 2a45 	vmov.f32	s4, s10
 80053b0:	eef0 2a65 	vmov.f32	s5, s11
 80053b4:	eeb0 1a46 	vmov.f32	s2, s12
 80053b8:	eef0 1a66 	vmov.f32	s3, s13
 80053bc:	eeb0 0a47 	vmov.f32	s0, s14
 80053c0:	eef0 0a67 	vmov.f32	s1, s15
 80053c4:	f7fd f878 	bl	80024b8 <distancecalc>
 80053c8:	ec55 4b10 	vmov	r4, r5, d0
 80053cc:	4b88      	ldr	r3, [pc, #544]	; (80055f0 <statemachine+0x1908>)
 80053ce:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80053d2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80053d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053da:	ee17 0a90 	vmov	r0, s15
 80053de:	f7fb f8b3 	bl	8000548 <__aeabi_f2d>
 80053e2:	a37d      	add	r3, pc, #500	; (adr r3, 80055d8 <statemachine+0x18f0>)
 80053e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e8:	f7fb fa30 	bl	800084c <__aeabi_ddiv>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4620      	mov	r0, r4
 80053f2:	4629      	mov	r1, r5
 80053f4:	f7fb fb86 	bl	8000b04 <__aeabi_dcmpge>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <statemachine+0x172e>
						    							  myData.latitude=oldlat;
 80053fe:	4b7d      	ldr	r3, [pc, #500]	; (80055f4 <statemachine+0x190c>)
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	497a      	ldr	r1, [pc, #488]	; (80055f0 <statemachine+0x1908>)
 8005406:	e9c1 2300 	strd	r2, r3, [r1]
						    							  myData.longitude=oldlong;
 800540a:	4b7b      	ldr	r3, [pc, #492]	; (80055f8 <statemachine+0x1910>)
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	4977      	ldr	r1, [pc, #476]	; (80055f0 <statemachine+0x1908>)
 8005412:	e9c1 2304 	strd	r2, r3, [r1, #16]
						  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8005416:	4b7a      	ldr	r3, [pc, #488]	; (8005600 <statemachine+0x1918>)
 8005418:	edd3 7a00 	vldr	s15, [r3]
 800541c:	4b79      	ldr	r3, [pc, #484]	; (8005604 <statemachine+0x191c>)
 800541e:	ed93 7a00 	vldr	s14, [r3]
 8005422:	4b73      	ldr	r3, [pc, #460]	; (80055f0 <statemachine+0x1908>)
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	4a72      	ldr	r2, [pc, #456]	; (80055f0 <statemachine+0x1908>)
 8005428:	edd2 6a08 	vldr	s13, [r2, #32]
 800542c:	eeb0 1a66 	vmov.f32	s2, s13
 8005430:	461a      	mov	r2, r3
 8005432:	496f      	ldr	r1, [pc, #444]	; (80055f0 <statemachine+0x1908>)
 8005434:	eef0 0a47 	vmov.f32	s1, s14
 8005438:	eeb0 0a67 	vmov.f32	s0, s15
 800543c:	4872      	ldr	r0, [pc, #456]	; (8005608 <statemachine+0x1920>)
 800543e:	f7fd fcd7 	bl	8002df0 <csvframe>
 8005442:	4603      	mov	r3, r0
 8005444:	4a71      	ldr	r2, [pc, #452]	; (800560c <statemachine+0x1924>)
 8005446:	6013      	str	r3, [r2, #0]
						  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8005448:	4b70      	ldr	r3, [pc, #448]	; (800560c <statemachine+0x1924>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4619      	mov	r1, r3
 800544e:	486e      	ldr	r0, [pc, #440]	; (8005608 <statemachine+0x1920>)
 8005450:	f7fd fde0 	bl	8003014 <writebuffertoflash>
						  enablewrite=0;
 8005454:	4b65      	ldr	r3, [pc, #404]	; (80055ec <statemachine+0x1904>)
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
					  if(doubledonnee==0){
 800545a:	4b6d      	ldr	r3, [pc, #436]	; (8005610 <statemachine+0x1928>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d111      	bne.n	8005486 <statemachine+0x179e>
					 	ssd1306_SetCursor(32,32);
 8005462:	2120      	movs	r1, #32
 8005464:	2020      	movs	r0, #32
 8005466:	f7fe f847 	bl	80034f8 <ssd1306_SetCursor>
					 	snprintf((uint8_t *)bufferscreen,50,"p=%d",pagenumber);
 800546a:	4b5d      	ldr	r3, [pc, #372]	; (80055e0 <statemachine+0x18f8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a69      	ldr	r2, [pc, #420]	; (8005614 <statemachine+0x192c>)
 8005470:	2132      	movs	r1, #50	; 0x32
 8005472:	4869      	ldr	r0, [pc, #420]	; (8005618 <statemachine+0x1930>)
 8005474:	f012 fafa 	bl	8017a6c <sniprintf>
					 	ssd1306_WriteString((uint8_t*)bufferscreen,Font_7x10,White);
 8005478:	4a68      	ldr	r2, [pc, #416]	; (800561c <statemachine+0x1934>)
 800547a:	2301      	movs	r3, #1
 800547c:	ca06      	ldmia	r2, {r1, r2}
 800547e:	4866      	ldr	r0, [pc, #408]	; (8005618 <statemachine+0x1930>)
 8005480:	f7fe f814 	bl	80034ac <ssd1306_WriteString>
 8005484:	e014      	b.n	80054b0 <statemachine+0x17c8>
					 	ssd1306_SetCursor(32,32);
 8005486:	2120      	movs	r1, #32
 8005488:	2020      	movs	r0, #32
 800548a:	f7fe f835 	bl	80034f8 <ssd1306_SetCursor>
					 	snprintf((uint8_t *)bufferscreen,50,"d=%0.1lfm",*distanceparcouru);
 800548e:	4b64      	ldr	r3, [pc, #400]	; (8005620 <statemachine+0x1938>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	e9cd 2300 	strd	r2, r3, [sp]
 800549a:	4a62      	ldr	r2, [pc, #392]	; (8005624 <statemachine+0x193c>)
 800549c:	2132      	movs	r1, #50	; 0x32
 800549e:	485e      	ldr	r0, [pc, #376]	; (8005618 <statemachine+0x1930>)
 80054a0:	f012 fae4 	bl	8017a6c <sniprintf>
					 	ssd1306_WriteString((uint8_t*)bufferscreen,Font_7x10,White);
 80054a4:	4a5d      	ldr	r2, [pc, #372]	; (800561c <statemachine+0x1934>)
 80054a6:	2301      	movs	r3, #1
 80054a8:	ca06      	ldmia	r2, {r1, r2}
 80054aa:	485b      	ldr	r0, [pc, #364]	; (8005618 <statemachine+0x1930>)
 80054ac:	f7fd fffe 	bl	80034ac <ssd1306_WriteString>
					 	ssd1306_SetCursor(32,42);
 80054b0:	212a      	movs	r1, #42	; 0x2a
 80054b2:	2020      	movs	r0, #32
 80054b4:	f7fe f820 	bl	80034f8 <ssd1306_SetCursor>
					 	snprintf((uint8_t *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 80054b8:	4b4d      	ldr	r3, [pc, #308]	; (80055f0 <statemachine+0x1908>)
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	4a5a      	ldr	r2, [pc, #360]	; (8005628 <statemachine+0x1940>)
 80054be:	2132      	movs	r1, #50	; 0x32
 80054c0:	4855      	ldr	r0, [pc, #340]	; (8005618 <statemachine+0x1930>)
 80054c2:	f012 fad3 	bl	8017a6c <sniprintf>
					 	ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 80054c6:	4a59      	ldr	r2, [pc, #356]	; (800562c <statemachine+0x1944>)
 80054c8:	2301      	movs	r3, #1
 80054ca:	ca06      	ldmia	r2, {r1, r2}
 80054cc:	4852      	ldr	r0, [pc, #328]	; (8005618 <statemachine+0x1930>)
 80054ce:	f7fd ffed 	bl	80034ac <ssd1306_WriteString>
					 	batterygauge(vbat,34, 50,1);
 80054d2:	4b4c      	ldr	r3, [pc, #304]	; (8005604 <statemachine+0x191c>)
 80054d4:	edd3 7a00 	vldr	s15, [r3]
 80054d8:	2201      	movs	r2, #1
 80054da:	2132      	movs	r1, #50	; 0x32
 80054dc:	2022      	movs	r0, #34	; 0x22
 80054de:	eeb0 0a67 	vmov.f32	s0, s15
 80054e2:	f7fe fa25 	bl	8003930 <batterygauge>
					 	ssd1306_SetCursor(60,50);
 80054e6:	2132      	movs	r1, #50	; 0x32
 80054e8:	203c      	movs	r0, #60	; 0x3c
 80054ea:	f7fe f805 	bl	80034f8 <ssd1306_SetCursor>
					 	snprintf((uint8_t *)bufferscreen,50, "%0.2fV",vbat);
 80054ee:	4b45      	ldr	r3, [pc, #276]	; (8005604 <statemachine+0x191c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fb f828 	bl	8000548 <__aeabi_f2d>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	e9cd 2300 	strd	r2, r3, [sp]
 8005500:	4a4b      	ldr	r2, [pc, #300]	; (8005630 <statemachine+0x1948>)
 8005502:	2132      	movs	r1, #50	; 0x32
 8005504:	4844      	ldr	r0, [pc, #272]	; (8005618 <statemachine+0x1930>)
 8005506:	f012 fab1 	bl	8017a6c <sniprintf>
					 	ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 800550a:	4a48      	ldr	r2, [pc, #288]	; (800562c <statemachine+0x1944>)
 800550c:	2301      	movs	r3, #1
 800550e:	ca06      	ldmia	r2, {r1, r2}
 8005510:	4841      	ldr	r0, [pc, #260]	; (8005618 <statemachine+0x1930>)
 8005512:	f7fd ffcb 	bl	80034ac <ssd1306_WriteString>
					 	if(cptdoubledonnee==3){
 8005516:	4b47      	ldr	r3, [pc, #284]	; (8005634 <statemachine+0x194c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b03      	cmp	r3, #3
 800551c:	d108      	bne.n	8005530 <statemachine+0x1848>
					 	  		doubledonnee=1-doubledonnee;
 800551e:	4b3c      	ldr	r3, [pc, #240]	; (8005610 <statemachine+0x1928>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f1c3 0301 	rsb	r3, r3, #1
 8005526:	4a3a      	ldr	r2, [pc, #232]	; (8005610 <statemachine+0x1928>)
 8005528:	6013      	str	r3, [r2, #0]
					 	  		cptdoubledonnee=0;
 800552a:	4b42      	ldr	r3, [pc, #264]	; (8005634 <statemachine+0x194c>)
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
					  if(BTN_B>=1){
 8005530:	4b41      	ldr	r3, [pc, #260]	; (8005638 <statemachine+0x1950>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	dd4b      	ble.n	80055d0 <statemachine+0x18e8>
					  						  balisestate--;
 8005538:	4b2b      	ldr	r3, [pc, #172]	; (80055e8 <statemachine+0x1900>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	3b01      	subs	r3, #1
 800553e:	b2da      	uxtb	r2, r3
 8005540:	4b29      	ldr	r3, [pc, #164]	; (80055e8 <statemachine+0x1900>)
 8005542:	701a      	strb	r2, [r3, #0]
					  						  BTN_B=0;
 8005544:	4b3c      	ldr	r3, [pc, #240]	; (8005638 <statemachine+0x1950>)
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
					  						  BTN_A=0;
 800554a:	4b3c      	ldr	r3, [pc, #240]	; (800563c <statemachine+0x1954>)
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]
					  						  HAL_TIM_Base_Stop_IT(&htim7);
 8005550:	4824      	ldr	r0, [pc, #144]	; (80055e4 <statemachine+0x18fc>)
 8005552:	f008 fea5 	bl	800e2a0 <HAL_TIM_Base_Stop_IT>
					  break;
 8005556:	e03b      	b.n	80055d0 <statemachine+0x18e8>
					  ssd1306_SetCursor(32,32);
 8005558:	2120      	movs	r1, #32
 800555a:	2020      	movs	r0, #32
 800555c:	f7fd ffcc 	bl	80034f8 <ssd1306_SetCursor>
					  ssd1306_WriteString("fin de",Font_6x8,White);
 8005560:	4a32      	ldr	r2, [pc, #200]	; (800562c <statemachine+0x1944>)
 8005562:	2301      	movs	r3, #1
 8005564:	ca06      	ldmia	r2, {r1, r2}
 8005566:	4836      	ldr	r0, [pc, #216]	; (8005640 <statemachine+0x1958>)
 8005568:	f7fd ffa0 	bl	80034ac <ssd1306_WriteString>
					  ssd1306_SetCursor(32,40);
 800556c:	2128      	movs	r1, #40	; 0x28
 800556e:	2020      	movs	r0, #32
 8005570:	f7fd ffc2 	bl	80034f8 <ssd1306_SetCursor>
					  ssd1306_WriteString("memoire",Font_6x8,White);
 8005574:	4a2d      	ldr	r2, [pc, #180]	; (800562c <statemachine+0x1944>)
 8005576:	2301      	movs	r3, #1
 8005578:	ca06      	ldmia	r2, {r1, r2}
 800557a:	4832      	ldr	r0, [pc, #200]	; (8005644 <statemachine+0x195c>)
 800557c:	f7fd ff96 	bl	80034ac <ssd1306_WriteString>
					  ssd1306_SetCursor(32,48);
 8005580:	2130      	movs	r1, #48	; 0x30
 8005582:	2020      	movs	r0, #32
 8005584:	f7fd ffb8 	bl	80034f8 <ssd1306_SetCursor>
					  snprintf((uint8_t *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 8005588:	4b2f      	ldr	r3, [pc, #188]	; (8005648 <statemachine+0x1960>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	4b14      	ldr	r3, [pc, #80]	; (80055e0 <statemachine+0x18f8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	4613      	mov	r3, r2
 8005594:	4a2d      	ldr	r2, [pc, #180]	; (800564c <statemachine+0x1964>)
 8005596:	2132      	movs	r1, #50	; 0x32
 8005598:	481f      	ldr	r0, [pc, #124]	; (8005618 <statemachine+0x1930>)
 800559a:	f012 fa67 	bl	8017a6c <sniprintf>
					  ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 800559e:	4a23      	ldr	r2, [pc, #140]	; (800562c <statemachine+0x1944>)
 80055a0:	2301      	movs	r3, #1
 80055a2:	ca06      	ldmia	r2, {r1, r2}
 80055a4:	481c      	ldr	r0, [pc, #112]	; (8005618 <statemachine+0x1930>)
 80055a6:	f7fd ff81 	bl	80034ac <ssd1306_WriteString>
					  if(BTN_A>=1){
 80055aa:	4b24      	ldr	r3, [pc, #144]	; (800563c <statemachine+0x1954>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	dd10      	ble.n	80055d4 <statemachine+0x18ec>
					  				  			 	state++;
 80055b2:	4b27      	ldr	r3, [pc, #156]	; (8005650 <statemachine+0x1968>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	3301      	adds	r3, #1
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	4b25      	ldr	r3, [pc, #148]	; (8005650 <statemachine+0x1968>)
 80055bc:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 80055be:	4b1f      	ldr	r3, [pc, #124]	; (800563c <statemachine+0x1954>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 80055c4:	4b1c      	ldr	r3, [pc, #112]	; (8005638 <statemachine+0x1950>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]
					  break;
 80055ca:	e003      	b.n	80055d4 <statemachine+0x18ec>
					  break;
 80055cc:	bf00      	nop
 80055ce:	e24f      	b.n	8005a70 <statemachine+0x1d88>
					  break;
 80055d0:	bf00      	nop
 80055d2:	e24d      	b.n	8005a70 <statemachine+0x1d88>
					  break;
 80055d4:	bf00      	nop
				  break;
 80055d6:	e24b      	b.n	8005a70 <statemachine+0x1d88>
 80055d8:	cccccccd 	.word	0xcccccccd
 80055dc:	401ccccc 	.word	0x401ccccc
 80055e0:	2000098c 	.word	0x2000098c
 80055e4:	20001038 	.word	0x20001038
 80055e8:	200004ae 	.word	0x200004ae
 80055ec:	20000a78 	.word	0x20000a78
 80055f0:	200006f8 	.word	0x200006f8
 80055f4:	20000a58 	.word	0x20000a58
 80055f8:	20000a60 	.word	0x20000a60
 80055fc:	200004f4 	.word	0x200004f4
 8005600:	20000768 	.word	0x20000768
 8005604:	20000770 	.word	0x20000770
 8005608:	20000788 	.word	0x20000788
 800560c:	20000a34 	.word	0x20000a34
 8005610:	20000a48 	.word	0x20000a48
 8005614:	0801cf60 	.word	0x0801cf60
 8005618:	200009ac 	.word	0x200009ac
 800561c:	20000028 	.word	0x20000028
 8005620:	20000a50 	.word	0x20000a50
 8005624:	0801cf68 	.word	0x0801cf68
 8005628:	0801cf74 	.word	0x0801cf74
 800562c:	20000020 	.word	0x20000020
 8005630:	0801cf7c 	.word	0x0801cf7c
 8005634:	20000a4c 	.word	0x20000a4c
 8005638:	2000073c 	.word	0x2000073c
 800563c:	20000738 	.word	0x20000738
 8005640:	0801cf84 	.word	0x0801cf84
 8005644:	0801cf8c 	.word	0x0801cf8c
 8005648:	20000988 	.word	0x20000988
 800564c:	0801cf94 	.word	0x0801cf94
 8005650:	200004a8 	.word	0x200004a8


			  case STATE_USB:
				  ssd1306_Fill(Black);
 8005654:	2000      	movs	r0, #0
 8005656:	f7fd fe0d 	bl	8003274 <ssd1306_Fill>
				  ssd1306_SetCursor(32,32);
 800565a:	2120      	movs	r1, #32
 800565c:	2020      	movs	r0, #32
 800565e:	f7fd ff4b 	bl	80034f8 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8005662:	4aaa      	ldr	r2, [pc, #680]	; (800590c <statemachine+0x1c24>)
 8005664:	2301      	movs	r3, #1
 8005666:	ca06      	ldmia	r2, {r1, r2}
 8005668:	48a9      	ldr	r0, [pc, #676]	; (8005910 <statemachine+0x1c28>)
 800566a:	f7fd ff1f 	bl	80034ac <ssd1306_WriteString>
				  switch(usbstate){
 800566e:	4ba9      	ldr	r3, [pc, #676]	; (8005914 <statemachine+0x1c2c>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b02      	cmp	r3, #2
 8005674:	f000 80cd 	beq.w	8005812 <statemachine+0x1b2a>
 8005678:	2b02      	cmp	r3, #2
 800567a:	f300 81fb 	bgt.w	8005a74 <statemachine+0x1d8c>
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <statemachine+0x19a0>
 8005682:	2b01      	cmp	r3, #1
 8005684:	d053      	beq.n	800572e <statemachine+0x1a46>
				 									  			 	BTN_A=0;
				 									  			 	BTN_B=0;
				 									  	}
				 					 break;
				 				  }
				  break;
 8005686:	e1f5      	b.n	8005a74 <statemachine+0x1d8c>
				 					  ssd1306_SetCursor(32,40);
 8005688:	2128      	movs	r1, #40	; 0x28
 800568a:	2020      	movs	r0, #32
 800568c:	f7fd ff34 	bl	80034f8 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8005690:	4a9e      	ldr	r2, [pc, #632]	; (800590c <statemachine+0x1c24>)
 8005692:	2301      	movs	r3, #1
 8005694:	ca06      	ldmia	r2, {r1, r2}
 8005696:	48a0      	ldr	r0, [pc, #640]	; (8005918 <statemachine+0x1c30>)
 8005698:	f7fd ff08 	bl	80034ac <ssd1306_WriteString>
				 					  usbtransmiten=0;
 800569c:	4b9f      	ldr	r3, [pc, #636]	; (800591c <statemachine+0x1c34>)
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 80056a2:	4b9f      	ldr	r3, [pc, #636]	; (8005920 <statemachine+0x1c38>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	dd0b      	ble.n	80056c2 <statemachine+0x19da>
				 						  usbstate++;
 80056aa:	4b9a      	ldr	r3, [pc, #616]	; (8005914 <statemachine+0x1c2c>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	3301      	adds	r3, #1
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	4b98      	ldr	r3, [pc, #608]	; (8005914 <statemachine+0x1c2c>)
 80056b4:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 80056b6:	4b9a      	ldr	r3, [pc, #616]	; (8005920 <statemachine+0x1c38>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 80056bc:	4b99      	ldr	r3, [pc, #612]	; (8005924 <statemachine+0x1c3c>)
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 80056c2:	4b98      	ldr	r3, [pc, #608]	; (8005924 <statemachine+0x1c3c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f340 81c0 	ble.w	8005a4c <statemachine+0x1d64>
				 									  			 	state--;
 80056cc:	4b96      	ldr	r3, [pc, #600]	; (8005928 <statemachine+0x1c40>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	4b94      	ldr	r3, [pc, #592]	; (8005928 <statemachine+0x1c40>)
 80056d6:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 80056d8:	4b93      	ldr	r3, [pc, #588]	; (8005928 <statemachine+0x1c40>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	3b01      	subs	r3, #1
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	4b91      	ldr	r3, [pc, #580]	; (8005928 <statemachine+0x1c40>)
 80056e2:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 80056e4:	4b90      	ldr	r3, [pc, #576]	; (8005928 <statemachine+0x1c40>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	4b8e      	ldr	r3, [pc, #568]	; (8005928 <statemachine+0x1c40>)
 80056ee:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 80056f0:	4b8d      	ldr	r3, [pc, #564]	; (8005928 <statemachine+0x1c40>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	4b8b      	ldr	r3, [pc, #556]	; (8005928 <statemachine+0x1c40>)
 80056fa:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 80056fc:	4b8a      	ldr	r3, [pc, #552]	; (8005928 <statemachine+0x1c40>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	3b01      	subs	r3, #1
 8005702:	b2da      	uxtb	r2, r3
 8005704:	4b88      	ldr	r3, [pc, #544]	; (8005928 <statemachine+0x1c40>)
 8005706:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8005708:	4b87      	ldr	r3, [pc, #540]	; (8005928 <statemachine+0x1c40>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	3b01      	subs	r3, #1
 800570e:	b2da      	uxtb	r2, r3
 8005710:	4b85      	ldr	r3, [pc, #532]	; (8005928 <statemachine+0x1c40>)
 8005712:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8005714:	4b84      	ldr	r3, [pc, #528]	; (8005928 <statemachine+0x1c40>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	3b01      	subs	r3, #1
 800571a:	b2da      	uxtb	r2, r3
 800571c:	4b82      	ldr	r3, [pc, #520]	; (8005928 <statemachine+0x1c40>)
 800571e:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8005720:	4b80      	ldr	r3, [pc, #512]	; (8005924 <statemachine+0x1c3c>)
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005726:	4b7e      	ldr	r3, [pc, #504]	; (8005920 <statemachine+0x1c38>)
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]
				 					  break;
 800572c:	e18e      	b.n	8005a4c <statemachine+0x1d64>
				 					 ssd1306_SetCursor(32,40);
 800572e:	2128      	movs	r1, #40	; 0x28
 8005730:	2020      	movs	r0, #32
 8005732:	f7fd fee1 	bl	80034f8 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8005736:	4a75      	ldr	r2, [pc, #468]	; (800590c <statemachine+0x1c24>)
 8005738:	2301      	movs	r3, #1
 800573a:	ca06      	ldmia	r2, {r1, r2}
 800573c:	487b      	ldr	r0, [pc, #492]	; (800592c <statemachine+0x1c44>)
 800573e:	f7fd feb5 	bl	80034ac <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,48);
 8005742:	2130      	movs	r1, #48	; 0x30
 8005744:	2020      	movs	r0, #32
 8005746:	f7fd fed7 	bl	80034f8 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 800574a:	4a70      	ldr	r2, [pc, #448]	; (800590c <statemachine+0x1c24>)
 800574c:	2301      	movs	r3, #1
 800574e:	ca06      	ldmia	r2, {r1, r2}
 8005750:	4877      	ldr	r0, [pc, #476]	; (8005930 <statemachine+0x1c48>)
 8005752:	f7fd feab 	bl	80034ac <ssd1306_WriteString>
				 					if(erasedisplay==1){
 8005756:	4b77      	ldr	r3, [pc, #476]	; (8005934 <statemachine+0x1c4c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d120      	bne.n	80057a0 <statemachine+0x1ab8>
				 						snprintf((uint8_t *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 800575e:	4b76      	ldr	r3, [pc, #472]	; (8005938 <statemachine+0x1c50>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800576a:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800593c <statemachine+0x1c54>
 800576e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005772:	ee16 0a90 	vmov	r0, s13
 8005776:	f7fa fee7 	bl	8000548 <__aeabi_f2d>
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	e9cd 2300 	strd	r2, r3, [sp]
 8005782:	4a6f      	ldr	r2, [pc, #444]	; (8005940 <statemachine+0x1c58>)
 8005784:	2132      	movs	r1, #50	; 0x32
 8005786:	486f      	ldr	r0, [pc, #444]	; (8005944 <statemachine+0x1c5c>)
 8005788:	f012 f970 	bl	8017a6c <sniprintf>
				 						ssd1306_SetCursor(32,56);
 800578c:	2138      	movs	r1, #56	; 0x38
 800578e:	2020      	movs	r0, #32
 8005790:	f7fd feb2 	bl	80034f8 <ssd1306_SetCursor>
				 						ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 8005794:	4a5d      	ldr	r2, [pc, #372]	; (800590c <statemachine+0x1c24>)
 8005796:	2301      	movs	r3, #1
 8005798:	ca06      	ldmia	r2, {r1, r2}
 800579a:	486a      	ldr	r0, [pc, #424]	; (8005944 <statemachine+0x1c5c>)
 800579c:	f7fd fe86 	bl	80034ac <ssd1306_WriteString>
				 					if(BTN_A>=1){
 80057a0:	4b60      	ldr	r3, [pc, #384]	; (8005924 <statemachine+0x1c3c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	dd22      	ble.n	80057ee <statemachine+0x1b06>
				 						erasetime=HAL_GetTick();
 80057a8:	f000 fe06 	bl	80063b8 <HAL_GetTick>
 80057ac:	4603      	mov	r3, r0
 80057ae:	461a      	mov	r2, r3
 80057b0:	4b61      	ldr	r3, [pc, #388]	; (8005938 <statemachine+0x1c50>)
 80057b2:	601a      	str	r2, [r3, #0]
				 						SPIF_EraseChip(&hspif1);
 80057b4:	4864      	ldr	r0, [pc, #400]	; (8005948 <statemachine+0x1c60>)
 80057b6:	f00f fbac 	bl	8014f12 <SPIF_EraseChip>
				 						erasetime=HAL_GetTick()-erasetime;
 80057ba:	f000 fdfd 	bl	80063b8 <HAL_GetTick>
 80057be:	4603      	mov	r3, r0
 80057c0:	4a5d      	ldr	r2, [pc, #372]	; (8005938 <statemachine+0x1c50>)
 80057c2:	6812      	ldr	r2, [r2, #0]
 80057c4:	1a9b      	subs	r3, r3, r2
 80057c6:	461a      	mov	r2, r3
 80057c8:	4b5b      	ldr	r3, [pc, #364]	; (8005938 <statemachine+0x1c50>)
 80057ca:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 80057cc:	4b59      	ldr	r3, [pc, #356]	; (8005934 <statemachine+0x1c4c>)
 80057ce:	2201      	movs	r2, #1
 80057d0:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 80057d2:	4b5e      	ldr	r3, [pc, #376]	; (800594c <statemachine+0x1c64>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 80057d8:	4b5d      	ldr	r3, [pc, #372]	; (8005950 <statemachine+0x1c68>)
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
				 						storeindex();
 80057de:	f7fd fb6d 	bl	8002ebc <storeindex>
				 						BTN_A=0;
 80057e2:	4b50      	ldr	r3, [pc, #320]	; (8005924 <statemachine+0x1c3c>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 80057e8:	4b4d      	ldr	r3, [pc, #308]	; (8005920 <statemachine+0x1c38>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 80057ee:	4b4c      	ldr	r3, [pc, #304]	; (8005920 <statemachine+0x1c38>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f340 812c 	ble.w	8005a50 <statemachine+0x1d68>
					 						usbstate++;
 80057f8:	4b46      	ldr	r3, [pc, #280]	; (8005914 <statemachine+0x1c2c>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	3301      	adds	r3, #1
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	4b44      	ldr	r3, [pc, #272]	; (8005914 <statemachine+0x1c2c>)
 8005802:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 8005804:	4b46      	ldr	r3, [pc, #280]	; (8005920 <statemachine+0x1c38>)
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 800580a:	4b46      	ldr	r3, [pc, #280]	; (8005924 <statemachine+0x1c3c>)
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
				 			  break;
 8005810:	e11e      	b.n	8005a50 <statemachine+0x1d68>
				 					ssd1306_Fill(Black);
 8005812:	2000      	movs	r0, #0
 8005814:	f7fd fd2e 	bl	8003274 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,40);
 8005818:	2128      	movs	r1, #40	; 0x28
 800581a:	2020      	movs	r0, #32
 800581c:	f7fd fe6c 	bl	80034f8 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 8005820:	4a3a      	ldr	r2, [pc, #232]	; (800590c <statemachine+0x1c24>)
 8005822:	2301      	movs	r3, #1
 8005824:	ca06      	ldmia	r2, {r1, r2}
 8005826:	484b      	ldr	r0, [pc, #300]	; (8005954 <statemachine+0x1c6c>)
 8005828:	f7fd fe40 	bl	80034ac <ssd1306_WriteString>
				 					if(pagenumber>0){
 800582c:	4b48      	ldr	r3, [pc, #288]	; (8005950 <statemachine+0x1c68>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	f340 80a9 	ble.w	8005988 <statemachine+0x1ca0>
				 					int i=0;
 8005836:	2300      	movs	r3, #0
 8005838:	657b      	str	r3, [r7, #84]	; 0x54
				 					if(usbtransmiten==0){
 800583a:	4b38      	ldr	r3, [pc, #224]	; (800591c <statemachine+0x1c34>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	f040 8090 	bne.w	8005964 <statemachine+0x1c7c>
				 						while(i<pagenumber){
 8005844:	e036      	b.n	80058b4 <statemachine+0x1bcc>
				 							ssd1306_Fill(Black);
 8005846:	2000      	movs	r0, #0
 8005848:	f7fd fd14 	bl	8003274 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 800584c:	2120      	movs	r1, #32
 800584e:	2020      	movs	r0, #32
 8005850:	f7fd fe52 	bl	80034f8 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8005854:	4a2d      	ldr	r2, [pc, #180]	; (800590c <statemachine+0x1c24>)
 8005856:	2301      	movs	r3, #1
 8005858:	ca06      	ldmia	r2, {r1, r2}
 800585a:	483e      	ldr	r0, [pc, #248]	; (8005954 <statemachine+0x1c6c>)
 800585c:	f7fd fe26 	bl	80034ac <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t *)flashread, 256, 0);
 8005860:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005862:	2300      	movs	r3, #0
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800586a:	4a3b      	ldr	r2, [pc, #236]	; (8005958 <statemachine+0x1c70>)
 800586c:	4836      	ldr	r0, [pc, #216]	; (8005948 <statemachine+0x1c60>)
 800586e:	f00f fc3b 	bl	80150e8 <SPIF_ReadPage>
				 							CDC_Transmit_FS((uint8_t * )flashread,256);
 8005872:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005876:	4838      	ldr	r0, [pc, #224]	; (8005958 <statemachine+0x1c70>)
 8005878:	f00f fd20 	bl	80152bc <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 800587c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800587e:	2264      	movs	r2, #100	; 0x64
 8005880:	fb02 f303 	mul.w	r3, r2, r3
 8005884:	ee07 3a90 	vmov	s15, r3
 8005888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800588c:	4b30      	ldr	r3, [pc, #192]	; (8005950 <statemachine+0x1c68>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	ee07 3a90 	vmov	s15, r3
 8005894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005898:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800589c:	eeb0 0a66 	vmov.f32	s0, s13
 80058a0:	f7fe f9c2 	bl	8003c28 <percentage>
				 							ssd1306_UpdateScreen();
 80058a4:	f7fd fcfe 	bl	80032a4 <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 80058a8:	207d      	movs	r0, #125	; 0x7d
 80058aa:	f000 fd91 	bl	80063d0 <HAL_Delay>
				 							i++;
 80058ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058b0:	3301      	adds	r3, #1
 80058b2:	657b      	str	r3, [r7, #84]	; 0x54
				 						while(i<pagenumber){
 80058b4:	4b26      	ldr	r3, [pc, #152]	; (8005950 <statemachine+0x1c68>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058ba:	429a      	cmp	r2, r3
 80058bc:	dbc3      	blt.n	8005846 <statemachine+0x1b5e>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t *)flashread, pageoffset, 0);
 80058be:	4b24      	ldr	r3, [pc, #144]	; (8005950 <statemachine+0x1c68>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4619      	mov	r1, r3
 80058c4:	4b21      	ldr	r3, [pc, #132]	; (800594c <statemachine+0x1c64>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	461a      	mov	r2, r3
 80058ca:	2300      	movs	r3, #0
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	4613      	mov	r3, r2
 80058d0:	4a21      	ldr	r2, [pc, #132]	; (8005958 <statemachine+0x1c70>)
 80058d2:	481d      	ldr	r0, [pc, #116]	; (8005948 <statemachine+0x1c60>)
 80058d4:	f00f fc08 	bl	80150e8 <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t * )flashread,pageoffset);
 80058d8:	4b1c      	ldr	r3, [pc, #112]	; (800594c <statemachine+0x1c64>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4619      	mov	r1, r3
 80058de:	481e      	ldr	r0, [pc, #120]	; (8005958 <statemachine+0x1c70>)
 80058e0:	f00f fcec 	bl	80152bc <CDC_Transmit_FS>
				 						HAL_Delay(125);
 80058e4:	207d      	movs	r0, #125	; 0x7d
 80058e6:	f000 fd73 	bl	80063d0 <HAL_Delay>
				 						int taillefin=0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	653b      	str	r3, [r7, #80]	; 0x50
										taillefin = snprintf((uint8_t *)usbbuffer,64,"kawakobeme\n\r");
 80058ee:	4a1b      	ldr	r2, [pc, #108]	; (800595c <statemachine+0x1c74>)
 80058f0:	2140      	movs	r1, #64	; 0x40
 80058f2:	481b      	ldr	r0, [pc, #108]	; (8005960 <statemachine+0x1c78>)
 80058f4:	f012 f8ba 	bl	8017a6c <sniprintf>
 80058f8:	6538      	str	r0, [r7, #80]	; 0x50
				 						CDC_Transmit_FS((uint8_t *)usbbuffer,taillefin);
 80058fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80058fc:	4818      	ldr	r0, [pc, #96]	; (8005960 <statemachine+0x1c78>)
 80058fe:	f00f fcdd 	bl	80152bc <CDC_Transmit_FS>
				 						usbtransmiten=1;
 8005902:	4b06      	ldr	r3, [pc, #24]	; (800591c <statemachine+0x1c34>)
 8005904:	2201      	movs	r2, #1
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	e030      	b.n	800596c <statemachine+0x1c84>
 800590a:	bf00      	nop
 800590c:	20000020 	.word	0x20000020
 8005910:	0801cf9c 	.word	0x0801cf9c
 8005914:	200004ad 	.word	0x200004ad
 8005918:	0801cfa0 	.word	0x0801cfa0
 800591c:	20000a40 	.word	0x20000a40
 8005920:	2000073c 	.word	0x2000073c
 8005924:	20000738 	.word	0x20000738
 8005928:	200004a8 	.word	0x200004a8
 800592c:	0801cfac 	.word	0x0801cfac
 8005930:	0801cfb4 	.word	0x0801cfb4
 8005934:	20000a3c 	.word	0x20000a3c
 8005938:	20000a38 	.word	0x20000a38
 800593c:	447a0000 	.word	0x447a0000
 8005940:	0801cfc0 	.word	0x0801cfc0
 8005944:	200009ac 	.word	0x200009ac
 8005948:	20000740 	.word	0x20000740
 800594c:	20000988 	.word	0x20000988
 8005950:	2000098c 	.word	0x2000098c
 8005954:	0801cfc8 	.word	0x0801cfc8
 8005958:	20000888 	.word	0x20000888
 800595c:	0801cfd0 	.word	0x0801cfd0
 8005960:	200009e0 	.word	0x200009e0
				 						usbpercent=1;
 8005964:	4b47      	ldr	r3, [pc, #284]	; (8005a84 <statemachine+0x1d9c>)
 8005966:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800596a:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 800596c:	2000      	movs	r0, #0
 800596e:	f7fd fc81 	bl	8003274 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,45);
 8005972:	212d      	movs	r1, #45	; 0x2d
 8005974:	2020      	movs	r0, #32
 8005976:	f7fd fdbf 	bl	80034f8 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 800597a:	4a43      	ldr	r2, [pc, #268]	; (8005a88 <statemachine+0x1da0>)
 800597c:	2301      	movs	r3, #1
 800597e:	ca06      	ldmia	r2, {r1, r2}
 8005980:	4842      	ldr	r0, [pc, #264]	; (8005a8c <statemachine+0x1da4>)
 8005982:	f7fd fd93 	bl	80034ac <ssd1306_WriteString>
 8005986:	e016      	b.n	80059b6 <statemachine+0x1cce>
				 							ssd1306_Fill(Black);
 8005988:	2000      	movs	r0, #0
 800598a:	f7fd fc73 	bl	8003274 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,40);
 800598e:	2128      	movs	r1, #40	; 0x28
 8005990:	2020      	movs	r0, #32
 8005992:	f7fd fdb1 	bl	80034f8 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8005996:	4a3e      	ldr	r2, [pc, #248]	; (8005a90 <statemachine+0x1da8>)
 8005998:	2301      	movs	r3, #1
 800599a:	ca06      	ldmia	r2, {r1, r2}
 800599c:	483d      	ldr	r0, [pc, #244]	; (8005a94 <statemachine+0x1dac>)
 800599e:	f7fd fd85 	bl	80034ac <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,48);
 80059a2:	2130      	movs	r1, #48	; 0x30
 80059a4:	2020      	movs	r0, #32
 80059a6:	f7fd fda7 	bl	80034f8 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_6x8,White);
 80059aa:	4a39      	ldr	r2, [pc, #228]	; (8005a90 <statemachine+0x1da8>)
 80059ac:	2301      	movs	r3, #1
 80059ae:	ca06      	ldmia	r2, {r1, r2}
 80059b0:	4839      	ldr	r0, [pc, #228]	; (8005a98 <statemachine+0x1db0>)
 80059b2:	f7fd fd7b 	bl	80034ac <ssd1306_WriteString>
				 					if(BTN_B>=1){
 80059b6:	4b39      	ldr	r3, [pc, #228]	; (8005a9c <statemachine+0x1db4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	dd11      	ble.n	80059e2 <statemachine+0x1cfa>
				 									 						usbstate--;
 80059be:	4b38      	ldr	r3, [pc, #224]	; (8005aa0 <statemachine+0x1db8>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	4b36      	ldr	r3, [pc, #216]	; (8005aa0 <statemachine+0x1db8>)
 80059c8:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 80059ca:	4b35      	ldr	r3, [pc, #212]	; (8005aa0 <statemachine+0x1db8>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	4b33      	ldr	r3, [pc, #204]	; (8005aa0 <statemachine+0x1db8>)
 80059d4:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 80059d6:	4b31      	ldr	r3, [pc, #196]	; (8005a9c <statemachine+0x1db4>)
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 80059dc:	4b31      	ldr	r3, [pc, #196]	; (8005aa4 <statemachine+0x1dbc>)
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 80059e2:	4b30      	ldr	r3, [pc, #192]	; (8005aa4 <statemachine+0x1dbc>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	dd34      	ble.n	8005a54 <statemachine+0x1d6c>
				 									  			 	state--;
 80059ea:	4b2f      	ldr	r3, [pc, #188]	; (8005aa8 <statemachine+0x1dc0>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	4b2d      	ldr	r3, [pc, #180]	; (8005aa8 <statemachine+0x1dc0>)
 80059f4:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 80059f6:	4b2c      	ldr	r3, [pc, #176]	; (8005aa8 <statemachine+0x1dc0>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	4b2a      	ldr	r3, [pc, #168]	; (8005aa8 <statemachine+0x1dc0>)
 8005a00:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8005a02:	4b29      	ldr	r3, [pc, #164]	; (8005aa8 <statemachine+0x1dc0>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	4b27      	ldr	r3, [pc, #156]	; (8005aa8 <statemachine+0x1dc0>)
 8005a0c:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8005a0e:	4b26      	ldr	r3, [pc, #152]	; (8005aa8 <statemachine+0x1dc0>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	4b24      	ldr	r3, [pc, #144]	; (8005aa8 <statemachine+0x1dc0>)
 8005a18:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8005a1a:	4b23      	ldr	r3, [pc, #140]	; (8005aa8 <statemachine+0x1dc0>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	4b21      	ldr	r3, [pc, #132]	; (8005aa8 <statemachine+0x1dc0>)
 8005a24:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8005a26:	4b20      	ldr	r3, [pc, #128]	; (8005aa8 <statemachine+0x1dc0>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	4b1e      	ldr	r3, [pc, #120]	; (8005aa8 <statemachine+0x1dc0>)
 8005a30:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8005a32:	4b1d      	ldr	r3, [pc, #116]	; (8005aa8 <statemachine+0x1dc0>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	4b1b      	ldr	r3, [pc, #108]	; (8005aa8 <statemachine+0x1dc0>)
 8005a3c:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8005a3e:	4b19      	ldr	r3, [pc, #100]	; (8005aa4 <statemachine+0x1dbc>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005a44:	4b15      	ldr	r3, [pc, #84]	; (8005a9c <statemachine+0x1db4>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
				 					 break;
 8005a4a:	e003      	b.n	8005a54 <statemachine+0x1d6c>
				 					  break;
 8005a4c:	bf00      	nop
 8005a4e:	e011      	b.n	8005a74 <statemachine+0x1d8c>
				 			  break;
 8005a50:	bf00      	nop
 8005a52:	e00f      	b.n	8005a74 <statemachine+0x1d8c>
				 					 break;
 8005a54:	bf00      	nop
				  break;
 8005a56:	e00d      	b.n	8005a74 <statemachine+0x1d8c>
				  break;
 8005a58:	bf00      	nop
 8005a5a:	e00c      	b.n	8005a76 <statemachine+0x1d8e>
			  break;
 8005a5c:	bf00      	nop
 8005a5e:	e00a      	b.n	8005a76 <statemachine+0x1d8e>
			  break;
 8005a60:	bf00      	nop
 8005a62:	e008      	b.n	8005a76 <statemachine+0x1d8e>
			  break;
 8005a64:	bf00      	nop
 8005a66:	e006      	b.n	8005a76 <statemachine+0x1d8e>
			  break;
 8005a68:	bf00      	nop
 8005a6a:	e004      	b.n	8005a76 <statemachine+0x1d8e>
				  break;
 8005a6c:	bf00      	nop
 8005a6e:	e002      	b.n	8005a76 <statemachine+0x1d8e>
				  break;
 8005a70:	bf00      	nop
 8005a72:	e000      	b.n	8005a76 <statemachine+0x1d8e>
				  break;
 8005a74:	bf00      	nop
	}
return ;
 8005a76:	bf00      	nop
 8005a78:	bf00      	nop
}
 8005a7a:	376c      	adds	r7, #108	; 0x6c
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	ecbd 8b02 	vpop	{d8}
 8005a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a84:	20000a44 	.word	0x20000a44
 8005a88:	20000028 	.word	0x20000028
 8005a8c:	0801cfe0 	.word	0x0801cfe0
 8005a90:	20000020 	.word	0x20000020
 8005a94:	0801cfc8 	.word	0x0801cfc8
 8005a98:	0801cfe8 	.word	0x0801cfe8
 8005a9c:	2000073c 	.word	0x2000073c
 8005aa0:	200004ad 	.word	0x200004ad
 8005aa4:	20000738 	.word	0x20000738
 8005aa8:	200004a8 	.word	0x200004a8

08005aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ab2:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <HAL_MspInit+0x44>)
 8005ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab6:	4a0e      	ldr	r2, [pc, #56]	; (8005af0 <HAL_MspInit+0x44>)
 8005ab8:	f043 0301 	orr.w	r3, r3, #1
 8005abc:	6613      	str	r3, [r2, #96]	; 0x60
 8005abe:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <HAL_MspInit+0x44>)
 8005ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	607b      	str	r3, [r7, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005aca:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <HAL_MspInit+0x44>)
 8005acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ace:	4a08      	ldr	r2, [pc, #32]	; (8005af0 <HAL_MspInit+0x44>)
 8005ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ad6:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <HAL_MspInit+0x44>)
 8005ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ade:	603b      	str	r3, [r7, #0]
 8005ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	40021000 	.word	0x40021000

08005af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005af8:	e7fe      	b.n	8005af8 <NMI_Handler+0x4>

08005afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005afa:	b480      	push	{r7}
 8005afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005afe:	e7fe      	b.n	8005afe <HardFault_Handler+0x4>

08005b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b04:	e7fe      	b.n	8005b04 <MemManage_Handler+0x4>

08005b06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b06:	b480      	push	{r7}
 8005b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b0a:	e7fe      	b.n	8005b0a <BusFault_Handler+0x4>

08005b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b10:	e7fe      	b.n	8005b10 <UsageFault_Handler+0x4>

08005b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b12:	b480      	push	{r7}
 8005b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b16:	bf00      	nop
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b24:	bf00      	nop
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b32:	bf00      	nop
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b40:	f000 fc26 	bl	8006390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b44:	bf00      	nop
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005b4c:	2002      	movs	r0, #2
 8005b4e:	f002 fc19 	bl	8008384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005b52:	bf00      	nop
 8005b54:	bd80      	pop	{r7, pc}
	...

08005b58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005b5c:	4802      	ldr	r0, [pc, #8]	; (8005b68 <DMA1_Channel1_IRQHandler+0x10>)
 8005b5e:	f002 f9a4 	bl	8007eaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005b62:	bf00      	nop
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	200003b8 	.word	0x200003b8

08005b6c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005b70:	4802      	ldr	r0, [pc, #8]	; (8005b7c <DMA1_Channel2_IRQHandler+0x10>)
 8005b72:	f002 f99a 	bl	8007eaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005b76:	bf00      	nop
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000b50 	.word	0x20000b50

08005b80 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005b84:	4802      	ldr	r0, [pc, #8]	; (8005b90 <DMA1_Channel3_IRQHandler+0x10>)
 8005b86:	f002 f990 	bl	8007eaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005b8a:	bf00      	nop
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000b98 	.word	0x20000b98

08005b94 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005b98:	4802      	ldr	r0, [pc, #8]	; (8005ba4 <ADC1_IRQHandler+0x10>)
 8005b9a:	f000 ffdd 	bl	8006b58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8005b9e:	bf00      	nop
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000354 	.word	0x20000354

08005ba8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005bac:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005bb0:	f002 fbe8 	bl	8008384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005bb4:	bf00      	nop
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005bbc:	4802      	ldr	r0, [pc, #8]	; (8005bc8 <SPI1_IRQHandler+0x10>)
 8005bbe:	f007 fe25 	bl	800d80c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005bc2:	bf00      	nop
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000aec 	.word	0x20000aec

08005bcc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */



  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005bd0:	4806      	ldr	r0, [pc, #24]	; (8005bec <TIM7_IRQHandler+0x20>)
 8005bd2:	f008 fb94 	bl	800e2fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  	cptdoubledonnee+=1;
 8005bd6:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <TIM7_IRQHandler+0x24>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	4a04      	ldr	r2, [pc, #16]	; (8005bf0 <TIM7_IRQHandler+0x24>)
 8005bde:	6013      	str	r3, [r2, #0]
  	enablewrite=1;
 8005be0:	4b04      	ldr	r3, [pc, #16]	; (8005bf4 <TIM7_IRQHandler+0x28>)
 8005be2:	2201      	movs	r2, #1
 8005be4:	601a      	str	r2, [r3, #0]



  /* USER CODE END TIM7_IRQn 1 */
}
 8005be6:	bf00      	nop
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20001038 	.word	0x20001038
 8005bf0:	20000a4c 	.word	0x20000a4c
 8005bf4:	20000a78 	.word	0x20000a78

08005bf8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005bfc:	4802      	ldr	r0, [pc, #8]	; (8005c08 <USB_IRQHandler+0x10>)
 8005bfe:	f003 fed5 	bl	80099ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8005c02:	bf00      	nop
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20001ec0 	.word	0x20001ec0

08005c0c <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 8005c10:	4802      	ldr	r0, [pc, #8]	; (8005c1c <DMA2_Channel7_IRQHandler+0x10>)
 8005c12:	f002 f94a 	bl	8007eaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8005c16:	bf00      	nop
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20001194 	.word	0x20001194

08005c20 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8005c24:	4802      	ldr	r0, [pc, #8]	; (8005c30 <LPUART1_IRQHandler+0x10>)
 8005c26:	f009 f87f 	bl	800ed28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8005c2a:	bf00      	nop
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20001084 	.word	0x20001084

08005c34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  return 1;
 8005c38:	2301      	movs	r3, #1
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <_kill>:

int _kill(int pid, int sig)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005c4e:	f012 f88b 	bl	8017d68 <__errno>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2216      	movs	r2, #22
 8005c56:	601a      	str	r2, [r3, #0]
  return -1;
 8005c58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <_exit>:

void _exit (int status)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff ffe7 	bl	8005c44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005c76:	e7fe      	b.n	8005c76 <_exit+0x12>

08005c78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	e00a      	b.n	8005ca0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005c8a:	f3af 8000 	nop.w
 8005c8e:	4601      	mov	r1, r0
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	60ba      	str	r2, [r7, #8]
 8005c96:	b2ca      	uxtb	r2, r1
 8005c98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	dbf0      	blt.n	8005c8a <_read+0x12>
  }

  return len;
 8005ca8:	687b      	ldr	r3, [r7, #4]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b086      	sub	sp, #24
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	e009      	b.n	8005cd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	60ba      	str	r2, [r7, #8]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	dbf1      	blt.n	8005cc4 <_write+0x12>
  }
  return len;
 8005ce0:	687b      	ldr	r3, [r7, #4]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <_close>:

int _close(int file)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005cf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d12:	605a      	str	r2, [r3, #4]
  return 0;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <_isatty>:

int _isatty(int file)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005d2a:	2301      	movs	r3, #1
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d5c:	4a14      	ldr	r2, [pc, #80]	; (8005db0 <_sbrk+0x5c>)
 8005d5e:	4b15      	ldr	r3, [pc, #84]	; (8005db4 <_sbrk+0x60>)
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d68:	4b13      	ldr	r3, [pc, #76]	; (8005db8 <_sbrk+0x64>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d70:	4b11      	ldr	r3, [pc, #68]	; (8005db8 <_sbrk+0x64>)
 8005d72:	4a12      	ldr	r2, [pc, #72]	; (8005dbc <_sbrk+0x68>)
 8005d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d76:	4b10      	ldr	r3, [pc, #64]	; (8005db8 <_sbrk+0x64>)
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d207      	bcs.n	8005d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d84:	f011 fff0 	bl	8017d68 <__errno>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	220c      	movs	r2, #12
 8005d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d92:	e009      	b.n	8005da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d94:	4b08      	ldr	r3, [pc, #32]	; (8005db8 <_sbrk+0x64>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d9a:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <_sbrk+0x64>)
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4413      	add	r3, r2
 8005da2:	4a05      	ldr	r2, [pc, #20]	; (8005db8 <_sbrk+0x64>)
 8005da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005da6:	68fb      	ldr	r3, [r7, #12]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20010000 	.word	0x20010000
 8005db4:	00000400 	.word	0x00000400
 8005db8:	20000fe8 	.word	0x20000fe8
 8005dbc:	20002528 	.word	0x20002528

08005dc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005dc4:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <SystemInit+0x20>)
 8005dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dca:	4a05      	ldr	r2, [pc, #20]	; (8005de0 <SystemInit+0x20>)
 8005dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005dd4:	bf00      	nop
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	e000ed00 	.word	0xe000ed00

08005de4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005dea:	f107 0310 	add.w	r3, r7, #16
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	605a      	str	r2, [r3, #4]
 8005df4:	609a      	str	r2, [r3, #8]
 8005df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005df8:	1d3b      	adds	r3, r7, #4
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	605a      	str	r2, [r3, #4]
 8005e00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005e02:	4b1e      	ldr	r3, [pc, #120]	; (8005e7c <MX_TIM2_Init+0x98>)
 8005e04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 8005e0a:	4b1c      	ldr	r3, [pc, #112]	; (8005e7c <MX_TIM2_Init+0x98>)
 8005e0c:	f240 128f 	movw	r2, #399	; 0x18f
 8005e10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e12:	4b1a      	ldr	r3, [pc, #104]	; (8005e7c <MX_TIM2_Init+0x98>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8005e18:	4b18      	ldr	r3, [pc, #96]	; (8005e7c <MX_TIM2_Init+0x98>)
 8005e1a:	f242 720f 	movw	r2, #9999	; 0x270f
 8005e1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e20:	4b16      	ldr	r3, [pc, #88]	; (8005e7c <MX_TIM2_Init+0x98>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e26:	4b15      	ldr	r3, [pc, #84]	; (8005e7c <MX_TIM2_Init+0x98>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005e2c:	4813      	ldr	r0, [pc, #76]	; (8005e7c <MX_TIM2_Init+0x98>)
 8005e2e:	f008 f93f 	bl	800e0b0 <HAL_TIM_Base_Init>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d001      	beq.n	8005e3c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8005e38:	f7fb ff6f 	bl	8001d1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005e42:	f107 0310 	add.w	r3, r7, #16
 8005e46:	4619      	mov	r1, r3
 8005e48:	480c      	ldr	r0, [pc, #48]	; (8005e7c <MX_TIM2_Init+0x98>)
 8005e4a:	f008 fb5a 	bl	800e502 <HAL_TIM_ConfigClockSource>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8005e54:	f7fb ff61 	bl	8001d1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005e58:	2320      	movs	r3, #32
 8005e5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005e60:	1d3b      	adds	r3, r7, #4
 8005e62:	4619      	mov	r1, r3
 8005e64:	4805      	ldr	r0, [pc, #20]	; (8005e7c <MX_TIM2_Init+0x98>)
 8005e66:	f008 fd45 	bl	800e8f4 <HAL_TIMEx_MasterConfigSynchronization>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8005e70:	f7fb ff53 	bl	8001d1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005e74:	bf00      	nop
 8005e76:	3720      	adds	r7, #32
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20000fec 	.word	0x20000fec

08005e80 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e86:	1d3b      	adds	r3, r7, #4
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	605a      	str	r2, [r3, #4]
 8005e8e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005e90:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <MX_TIM7_Init+0x68>)
 8005e92:	4a16      	ldr	r2, [pc, #88]	; (8005eec <MX_TIM7_Init+0x6c>)
 8005e94:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 20000-1;
 8005e96:	4b14      	ldr	r3, [pc, #80]	; (8005ee8 <MX_TIM7_Init+0x68>)
 8005e98:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005e9c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e9e:	4b12      	ldr	r3, [pc, #72]	; (8005ee8 <MX_TIM7_Init+0x68>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8005ea4:	4b10      	ldr	r3, [pc, #64]	; (8005ee8 <MX_TIM7_Init+0x68>)
 8005ea6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005eaa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005eac:	4b0e      	ldr	r3, [pc, #56]	; (8005ee8 <MX_TIM7_Init+0x68>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005eb2:	480d      	ldr	r0, [pc, #52]	; (8005ee8 <MX_TIM7_Init+0x68>)
 8005eb4:	f008 f8fc 	bl	800e0b0 <HAL_TIM_Base_Init>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8005ebe:	f7fb ff2c 	bl	8001d1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005eca:	1d3b      	adds	r3, r7, #4
 8005ecc:	4619      	mov	r1, r3
 8005ece:	4806      	ldr	r0, [pc, #24]	; (8005ee8 <MX_TIM7_Init+0x68>)
 8005ed0:	f008 fd10 	bl	800e8f4 <HAL_TIMEx_MasterConfigSynchronization>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8005eda:	f7fb ff1e 	bl	8001d1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20001038 	.word	0x20001038
 8005eec:	40001400 	.word	0x40001400

08005ef0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f00:	d10c      	bne.n	8005f1c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f02:	4b15      	ldr	r3, [pc, #84]	; (8005f58 <HAL_TIM_Base_MspInit+0x68>)
 8005f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f06:	4a14      	ldr	r2, [pc, #80]	; (8005f58 <HAL_TIM_Base_MspInit+0x68>)
 8005f08:	f043 0301 	orr.w	r3, r3, #1
 8005f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8005f0e:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <HAL_TIM_Base_MspInit+0x68>)
 8005f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8005f1a:	e018      	b.n	8005f4e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a0e      	ldr	r2, [pc, #56]	; (8005f5c <HAL_TIM_Base_MspInit+0x6c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d113      	bne.n	8005f4e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005f26:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <HAL_TIM_Base_MspInit+0x68>)
 8005f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f2a:	4a0b      	ldr	r2, [pc, #44]	; (8005f58 <HAL_TIM_Base_MspInit+0x68>)
 8005f2c:	f043 0320 	orr.w	r3, r3, #32
 8005f30:	6593      	str	r3, [r2, #88]	; 0x58
 8005f32:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <HAL_TIM_Base_MspInit+0x68>)
 8005f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	60bb      	str	r3, [r7, #8]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2100      	movs	r1, #0
 8005f42:	2037      	movs	r0, #55	; 0x37
 8005f44:	f001 fde3 	bl	8007b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005f48:	2037      	movs	r0, #55	; 0x37
 8005f4a:	f001 fdfc 	bl	8007b46 <HAL_NVIC_EnableIRQ>
}
 8005f4e:	bf00      	nop
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	40001400 	.word	0x40001400

08005f60 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005f64:	4b12      	ldr	r3, [pc, #72]	; (8005fb0 <MX_LPUART1_UART_Init+0x50>)
 8005f66:	4a13      	ldr	r2, [pc, #76]	; (8005fb4 <MX_LPUART1_UART_Init+0x54>)
 8005f68:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8005f6a:	4b11      	ldr	r3, [pc, #68]	; (8005fb0 <MX_LPUART1_UART_Init+0x50>)
 8005f6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005f70:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f72:	4b0f      	ldr	r3, [pc, #60]	; (8005fb0 <MX_LPUART1_UART_Init+0x50>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005f78:	4b0d      	ldr	r3, [pc, #52]	; (8005fb0 <MX_LPUART1_UART_Init+0x50>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005f7e:	4b0c      	ldr	r3, [pc, #48]	; (8005fb0 <MX_LPUART1_UART_Init+0x50>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005f84:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <MX_LPUART1_UART_Init+0x50>)
 8005f86:	220c      	movs	r2, #12
 8005f88:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f8a:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <MX_LPUART1_UART_Init+0x50>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f90:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <MX_LPUART1_UART_Init+0x50>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f96:	4b06      	ldr	r3, [pc, #24]	; (8005fb0 <MX_LPUART1_UART_Init+0x50>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005f9c:	4804      	ldr	r0, [pc, #16]	; (8005fb0 <MX_LPUART1_UART_Init+0x50>)
 8005f9e:	f008 fd2d 	bl	800e9fc <HAL_UART_Init>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8005fa8:	f7fb feb7 	bl	8001d1a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005fac:	bf00      	nop
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20001084 	.word	0x20001084
 8005fb4:	40008000 	.word	0x40008000

08005fb8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005fbc:	4b14      	ldr	r3, [pc, #80]	; (8006010 <MX_USART1_UART_Init+0x58>)
 8005fbe:	4a15      	ldr	r2, [pc, #84]	; (8006014 <MX_USART1_UART_Init+0x5c>)
 8005fc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005fc2:	4b13      	ldr	r3, [pc, #76]	; (8006010 <MX_USART1_UART_Init+0x58>)
 8005fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005fc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005fca:	4b11      	ldr	r3, [pc, #68]	; (8006010 <MX_USART1_UART_Init+0x58>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005fd0:	4b0f      	ldr	r3, [pc, #60]	; (8006010 <MX_USART1_UART_Init+0x58>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005fd6:	4b0e      	ldr	r3, [pc, #56]	; (8006010 <MX_USART1_UART_Init+0x58>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005fdc:	4b0c      	ldr	r3, [pc, #48]	; (8006010 <MX_USART1_UART_Init+0x58>)
 8005fde:	220c      	movs	r2, #12
 8005fe0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fe2:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <MX_USART1_UART_Init+0x58>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fe8:	4b09      	ldr	r3, [pc, #36]	; (8006010 <MX_USART1_UART_Init+0x58>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005fee:	4b08      	ldr	r3, [pc, #32]	; (8006010 <MX_USART1_UART_Init+0x58>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ff4:	4b06      	ldr	r3, [pc, #24]	; (8006010 <MX_USART1_UART_Init+0x58>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005ffa:	4805      	ldr	r0, [pc, #20]	; (8006010 <MX_USART1_UART_Init+0x58>)
 8005ffc:	f008 fcfe 	bl	800e9fc <HAL_UART_Init>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006006:	f7fb fe88 	bl	8001d1a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800600a:	bf00      	nop
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	2000110c 	.word	0x2000110c
 8006014:	40013800 	.word	0x40013800

08006018 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b0a0      	sub	sp, #128	; 0x80
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006020:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	605a      	str	r2, [r3, #4]
 800602a:	609a      	str	r2, [r3, #8]
 800602c:	60da      	str	r2, [r3, #12]
 800602e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006030:	f107 0318 	add.w	r3, r7, #24
 8006034:	2254      	movs	r2, #84	; 0x54
 8006036:	2100      	movs	r1, #0
 8006038:	4618      	mov	r0, r3
 800603a:	f011 fdae 	bl	8017b9a <memset>
  if(uartHandle->Instance==LPUART1)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a55      	ldr	r2, [pc, #340]	; (8006198 <HAL_UART_MspInit+0x180>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d168      	bne.n	800611a <HAL_UART_MspInit+0x102>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006048:	2320      	movs	r3, #32
 800604a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800604c:	2300      	movs	r3, #0
 800604e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006050:	f107 0318 	add.w	r3, r7, #24
 8006054:	4618      	mov	r0, r3
 8006056:	f005 ffab 	bl	800bfb0 <HAL_RCCEx_PeriphCLKConfig>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006060:	f7fb fe5b 	bl	8001d1a <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006064:	4b4d      	ldr	r3, [pc, #308]	; (800619c <HAL_UART_MspInit+0x184>)
 8006066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006068:	4a4c      	ldr	r2, [pc, #304]	; (800619c <HAL_UART_MspInit+0x184>)
 800606a:	f043 0301 	orr.w	r3, r3, #1
 800606e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8006070:	4b4a      	ldr	r3, [pc, #296]	; (800619c <HAL_UART_MspInit+0x184>)
 8006072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800607c:	4b47      	ldr	r3, [pc, #284]	; (800619c <HAL_UART_MspInit+0x184>)
 800607e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006080:	4a46      	ldr	r2, [pc, #280]	; (800619c <HAL_UART_MspInit+0x184>)
 8006082:	f043 0301 	orr.w	r3, r3, #1
 8006086:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006088:	4b44      	ldr	r3, [pc, #272]	; (800619c <HAL_UART_MspInit+0x184>)
 800608a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	613b      	str	r3, [r7, #16]
 8006092:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006094:	230c      	movs	r3, #12
 8006096:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006098:	2302      	movs	r3, #2
 800609a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800609c:	2300      	movs	r3, #0
 800609e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060a0:	2303      	movs	r3, #3
 80060a2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80060a4:	2308      	movs	r3, #8
 80060a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80060ac:	4619      	mov	r1, r3
 80060ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060b2:	f001 ffe5 	bl	8008080 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 80060b6:	4b3a      	ldr	r3, [pc, #232]	; (80061a0 <HAL_UART_MspInit+0x188>)
 80060b8:	4a3a      	ldr	r2, [pc, #232]	; (80061a4 <HAL_UART_MspInit+0x18c>)
 80060ba:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 80060bc:	4b38      	ldr	r3, [pc, #224]	; (80061a0 <HAL_UART_MspInit+0x188>)
 80060be:	2204      	movs	r2, #4
 80060c0:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060c2:	4b37      	ldr	r3, [pc, #220]	; (80061a0 <HAL_UART_MspInit+0x188>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060c8:	4b35      	ldr	r3, [pc, #212]	; (80061a0 <HAL_UART_MspInit+0x188>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 80060ce:	4b34      	ldr	r3, [pc, #208]	; (80061a0 <HAL_UART_MspInit+0x188>)
 80060d0:	2280      	movs	r2, #128	; 0x80
 80060d2:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060d4:	4b32      	ldr	r3, [pc, #200]	; (80061a0 <HAL_UART_MspInit+0x188>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060da:	4b31      	ldr	r3, [pc, #196]	; (80061a0 <HAL_UART_MspInit+0x188>)
 80060dc:	2200      	movs	r2, #0
 80060de:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_NORMAL;
 80060e0:	4b2f      	ldr	r3, [pc, #188]	; (80061a0 <HAL_UART_MspInit+0x188>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_LOW;
 80060e6:	4b2e      	ldr	r3, [pc, #184]	; (80061a0 <HAL_UART_MspInit+0x188>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 80060ec:	482c      	ldr	r0, [pc, #176]	; (80061a0 <HAL_UART_MspInit+0x188>)
 80060ee:	f001 fd45 	bl	8007b7c <HAL_DMA_Init>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80060f8:	f7fb fe0f 	bl	8001d1a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart_rx);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a28      	ldr	r2, [pc, #160]	; (80061a0 <HAL_UART_MspInit+0x188>)
 8006100:	675a      	str	r2, [r3, #116]	; 0x74
 8006102:	4a27      	ldr	r2, [pc, #156]	; (80061a0 <HAL_UART_MspInit+0x188>)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8006108:	2200      	movs	r2, #0
 800610a:	2100      	movs	r1, #0
 800610c:	2046      	movs	r0, #70	; 0x46
 800610e:	f001 fcfe 	bl	8007b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8006112:	2046      	movs	r0, #70	; 0x46
 8006114:	f001 fd17 	bl	8007b46 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006118:	e03a      	b.n	8006190 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART1)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a22      	ldr	r2, [pc, #136]	; (80061a8 <HAL_UART_MspInit+0x190>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d135      	bne.n	8006190 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006124:	2301      	movs	r3, #1
 8006126:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006128:	2300      	movs	r3, #0
 800612a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800612c:	f107 0318 	add.w	r3, r7, #24
 8006130:	4618      	mov	r0, r3
 8006132:	f005 ff3d 	bl	800bfb0 <HAL_RCCEx_PeriphCLKConfig>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <HAL_UART_MspInit+0x128>
      Error_Handler();
 800613c:	f7fb fded 	bl	8001d1a <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006140:	4b16      	ldr	r3, [pc, #88]	; (800619c <HAL_UART_MspInit+0x184>)
 8006142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006144:	4a15      	ldr	r2, [pc, #84]	; (800619c <HAL_UART_MspInit+0x184>)
 8006146:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800614a:	6613      	str	r3, [r2, #96]	; 0x60
 800614c:	4b13      	ldr	r3, [pc, #76]	; (800619c <HAL_UART_MspInit+0x184>)
 800614e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006154:	60fb      	str	r3, [r7, #12]
 8006156:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006158:	4b10      	ldr	r3, [pc, #64]	; (800619c <HAL_UART_MspInit+0x184>)
 800615a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800615c:	4a0f      	ldr	r2, [pc, #60]	; (800619c <HAL_UART_MspInit+0x184>)
 800615e:	f043 0302 	orr.w	r3, r3, #2
 8006162:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006164:	4b0d      	ldr	r3, [pc, #52]	; (800619c <HAL_UART_MspInit+0x184>)
 8006166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	60bb      	str	r3, [r7, #8]
 800616e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006170:	23c0      	movs	r3, #192	; 0xc0
 8006172:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006174:	2302      	movs	r3, #2
 8006176:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006178:	2300      	movs	r3, #0
 800617a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800617c:	2303      	movs	r3, #3
 800617e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006180:	2307      	movs	r3, #7
 8006182:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006184:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006188:	4619      	mov	r1, r3
 800618a:	4808      	ldr	r0, [pc, #32]	; (80061ac <HAL_UART_MspInit+0x194>)
 800618c:	f001 ff78 	bl	8008080 <HAL_GPIO_Init>
}
 8006190:	bf00      	nop
 8006192:	3780      	adds	r7, #128	; 0x80
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	40008000 	.word	0x40008000
 800619c:	40021000 	.word	0x40021000
 80061a0:	20001194 	.word	0x20001194
 80061a4:	40020480 	.word	0x40020480
 80061a8:	40013800 	.word	0x40013800
 80061ac:	48000400 	.word	0x48000400

080061b0 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80061b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 80061b8:	4b30      	ldr	r3, [pc, #192]	; (800627c <HAL_UART_RxCpltCallback+0xcc>)
 80061ba:	881a      	ldrh	r2, [r3, #0]
 80061bc:	4b30      	ldr	r3, [pc, #192]	; (8006280 <HAL_UART_RxCpltCallback+0xd0>)
 80061be:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 80061c0:	4b2f      	ldr	r3, [pc, #188]	; (8006280 <HAL_UART_RxCpltCallback+0xd0>)
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80061c8:	d922      	bls.n	8006210 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 80061ca:	4b2d      	ldr	r3, [pc, #180]	; (8006280 <HAL_UART_RxCpltCallback+0xd0>)
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80061d2:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 80061d4:	4b2a      	ldr	r3, [pc, #168]	; (8006280 <HAL_UART_RxCpltCallback+0xd0>)
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	4b2a      	ldr	r3, [pc, #168]	; (8006284 <HAL_UART_RxCpltCallback+0xd4>)
 80061dc:	4413      	add	r3, r2
 80061de:	89fa      	ldrh	r2, [r7, #14]
 80061e0:	4929      	ldr	r1, [pc, #164]	; (8006288 <HAL_UART_RxCpltCallback+0xd8>)
 80061e2:	4618      	mov	r0, r3
 80061e4:	f011 fdf5 	bl	8017dd2 <memcpy>

				oldPos = 0;  // point to the start of the buffer
 80061e8:	4b25      	ldr	r3, [pc, #148]	; (8006280 <HAL_UART_RxCpltCallback+0xd0>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 80061ee:	89fb      	ldrh	r3, [r7, #14]
 80061f0:	4a25      	ldr	r2, [pc, #148]	; (8006288 <HAL_UART_RxCpltCallback+0xd8>)
 80061f2:	1899      	adds	r1, r3, r2
 80061f4:	89fb      	ldrh	r3, [r7, #14]
 80061f6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80061fa:	461a      	mov	r2, r3
 80061fc:	4821      	ldr	r0, [pc, #132]	; (8006284 <HAL_UART_RxCpltCallback+0xd4>)
 80061fe:	f011 fde8 	bl	8017dd2 <memcpy>
				newPos = (64-datatocopy);  // update the position
 8006202:	89fb      	ldrh	r3, [r7, #14]
 8006204:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006208:	b29a      	uxth	r2, r3
 800620a:	4b1c      	ldr	r3, [pc, #112]	; (800627c <HAL_UART_RxCpltCallback+0xcc>)
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	e01e      	b.n	800624e <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8006210:	4b1b      	ldr	r3, [pc, #108]	; (8006280 <HAL_UART_RxCpltCallback+0xd0>)
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	4b1b      	ldr	r3, [pc, #108]	; (8006284 <HAL_UART_RxCpltCallback+0xd4>)
 8006218:	441a      	add	r2, r3
 800621a:	4b1b      	ldr	r3, [pc, #108]	; (8006288 <HAL_UART_RxCpltCallback+0xd8>)
 800621c:	4610      	mov	r0, r2
 800621e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8006222:	4602      	mov	r2, r0
 8006224:	4619      	mov	r1, r3
 8006226:	f8d1 c000 	ldr.w	ip, [r1]
 800622a:	684e      	ldr	r6, [r1, #4]
 800622c:	688d      	ldr	r5, [r1, #8]
 800622e:	68c9      	ldr	r1, [r1, #12]
 8006230:	f8c2 c000 	str.w	ip, [r2]
 8006234:	6056      	str	r6, [r2, #4]
 8006236:	6095      	str	r5, [r2, #8]
 8006238:	60d1      	str	r1, [r2, #12]
 800623a:	3310      	adds	r3, #16
 800623c:	3010      	adds	r0, #16
 800623e:	42a3      	cmp	r3, r4
 8006240:	d1ef      	bne.n	8006222 <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 8006242:	4b0f      	ldr	r3, [pc, #60]	; (8006280 <HAL_UART_RxCpltCallback+0xd0>)
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	3340      	adds	r3, #64	; 0x40
 8006248:	b29a      	uxth	r2, r3
 800624a:	4b0c      	ldr	r3, [pc, #48]	; (800627c <HAL_UART_RxCpltCallback+0xcc>)
 800624c:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 800624e:	2240      	movs	r2, #64	; 0x40
 8006250:	490d      	ldr	r1, [pc, #52]	; (8006288 <HAL_UART_RxCpltCallback+0xd8>)
 8006252:	480e      	ldr	r0, [pc, #56]	; (800628c <HAL_UART_RxCpltCallback+0xdc>)
 8006254:	f008 fc20 	bl	800ea98 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8006258:	4b0d      	ldr	r3, [pc, #52]	; (8006290 <HAL_UART_RxCpltCallback+0xe0>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	4b0c      	ldr	r3, [pc, #48]	; (8006290 <HAL_UART_RxCpltCallback+0xe0>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0204 	bic.w	r2, r2, #4
 8006266:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 8006268:	2240      	movs	r2, #64	; 0x40
 800626a:	4907      	ldr	r1, [pc, #28]	; (8006288 <HAL_UART_RxCpltCallback+0xd8>)
 800626c:	4807      	ldr	r0, [pc, #28]	; (800628c <HAL_UART_RxCpltCallback+0xdc>)
 800626e:	f008 fc13 	bl	800ea98 <HAL_UART_Receive_DMA>
}
 8006272:	bf00      	nop
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800627a:	bf00      	nop
 800627c:	200004b2 	.word	0x200004b2
 8006280:	200004b0 	.word	0x200004b0
 8006284:	200004f4 	.word	0x200004f4
 8006288:	200004b4 	.word	0x200004b4
 800628c:	20001084 	.word	0x20001084
 8006290:	20001194 	.word	0x20001194

08006294 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80062cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006298:	f7ff fd92 	bl	8005dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800629c:	480c      	ldr	r0, [pc, #48]	; (80062d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800629e:	490d      	ldr	r1, [pc, #52]	; (80062d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80062a0:	4a0d      	ldr	r2, [pc, #52]	; (80062d8 <LoopForever+0xe>)
  movs r3, #0
 80062a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80062a4:	e002      	b.n	80062ac <LoopCopyDataInit>

080062a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062aa:	3304      	adds	r3, #4

080062ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80062b0:	d3f9      	bcc.n	80062a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80062b2:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80062b4:	4c0a      	ldr	r4, [pc, #40]	; (80062e0 <LoopForever+0x16>)
  movs r3, #0
 80062b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062b8:	e001      	b.n	80062be <LoopFillZerobss>

080062ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062bc:	3204      	adds	r2, #4

080062be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062c0:	d3fb      	bcc.n	80062ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80062c2:	f011 fd57 	bl	8017d74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80062c6:	f7fb fc27 	bl	8001b18 <main>

080062ca <LoopForever>:

LoopForever:
    b LoopForever
 80062ca:	e7fe      	b.n	80062ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80062cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80062d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062d4:	20000320 	.word	0x20000320
  ldr r2, =_sidata
 80062d8:	0801f2e0 	.word	0x0801f2e0
  ldr r2, =_sbss
 80062dc:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 80062e0:	20002524 	.word	0x20002524

080062e4 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80062e4:	e7fe      	b.n	80062e4 <CAN1_RX0_IRQHandler>

080062e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b082      	sub	sp, #8
 80062ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062f0:	2003      	movs	r0, #3
 80062f2:	f001 fc01 	bl	8007af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80062f6:	200f      	movs	r0, #15
 80062f8:	f000 f80e 	bl	8006318 <HAL_InitTick>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d002      	beq.n	8006308 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	71fb      	strb	r3, [r7, #7]
 8006306:	e001      	b.n	800630c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006308:	f7ff fbd0 	bl	8005aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800630c:	79fb      	ldrb	r3, [r7, #7]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006324:	4b17      	ldr	r3, [pc, #92]	; (8006384 <HAL_InitTick+0x6c>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d023      	beq.n	8006374 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800632c:	4b16      	ldr	r3, [pc, #88]	; (8006388 <HAL_InitTick+0x70>)
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	4b14      	ldr	r3, [pc, #80]	; (8006384 <HAL_InitTick+0x6c>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	4619      	mov	r1, r3
 8006336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800633a:	fbb3 f3f1 	udiv	r3, r3, r1
 800633e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006342:	4618      	mov	r0, r3
 8006344:	f001 fc0d 	bl	8007b62 <HAL_SYSTICK_Config>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10f      	bne.n	800636e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b0f      	cmp	r3, #15
 8006352:	d809      	bhi.n	8006368 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006354:	2200      	movs	r2, #0
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	f04f 30ff 	mov.w	r0, #4294967295
 800635c:	f001 fbd7 	bl	8007b0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006360:	4a0a      	ldr	r2, [pc, #40]	; (800638c <HAL_InitTick+0x74>)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e007      	b.n	8006378 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	73fb      	strb	r3, [r7, #15]
 800636c:	e004      	b.n	8006378 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	73fb      	strb	r3, [r7, #15]
 8006372:	e001      	b.n	8006378 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006378:	7bfb      	ldrb	r3, [r7, #15]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000040 	.word	0x20000040
 8006388:	20000038 	.word	0x20000038
 800638c:	2000003c 	.word	0x2000003c

08006390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006394:	4b06      	ldr	r3, [pc, #24]	; (80063b0 <HAL_IncTick+0x20>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	461a      	mov	r2, r3
 800639a:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <HAL_IncTick+0x24>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4413      	add	r3, r2
 80063a0:	4a04      	ldr	r2, [pc, #16]	; (80063b4 <HAL_IncTick+0x24>)
 80063a2:	6013      	str	r3, [r2, #0]
}
 80063a4:	bf00      	nop
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	20000040 	.word	0x20000040
 80063b4:	200011dc 	.word	0x200011dc

080063b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80063b8:	b480      	push	{r7}
 80063ba:	af00      	add	r7, sp, #0
  return uwTick;
 80063bc:	4b03      	ldr	r3, [pc, #12]	; (80063cc <HAL_GetTick+0x14>)
 80063be:	681b      	ldr	r3, [r3, #0]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	200011dc 	.word	0x200011dc

080063d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80063d8:	f7ff ffee 	bl	80063b8 <HAL_GetTick>
 80063dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e8:	d005      	beq.n	80063f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80063ea:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <HAL_Delay+0x44>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4413      	add	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80063f6:	bf00      	nop
 80063f8:	f7ff ffde 	bl	80063b8 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	429a      	cmp	r2, r3
 8006406:	d8f7      	bhi.n	80063f8 <HAL_Delay+0x28>
  {
  }
}
 8006408:	bf00      	nop
 800640a:	bf00      	nop
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20000040 	.word	0x20000040

08006418 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	431a      	orrs	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	609a      	str	r2, [r3, #8]
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	431a      	orrs	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	609a      	str	r2, [r3, #8]
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006474:	4618      	mov	r0, r3
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3360      	adds	r3, #96	; 0x60
 8006492:	461a      	mov	r2, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	4b08      	ldr	r3, [pc, #32]	; (80064c4 <LL_ADC_SetOffset+0x44>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80064b8:	bf00      	nop
 80064ba:	371c      	adds	r7, #28
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	03fff000 	.word	0x03fff000

080064c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3360      	adds	r3, #96	; 0x60
 80064d6:	461a      	mov	r2, r3
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3360      	adds	r3, #96	; 0x60
 8006504:	461a      	mov	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	431a      	orrs	r2, r3
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800651e:	bf00      	nop
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800653e:	2301      	movs	r3, #1
 8006540:	e000      	b.n	8006544 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3330      	adds	r3, #48	; 0x30
 8006560:	461a      	mov	r2, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	0a1b      	lsrs	r3, r3, #8
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	f003 030c 	and.w	r3, r3, #12
 800656c:	4413      	add	r3, r2
 800656e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	211f      	movs	r1, #31
 800657c:	fa01 f303 	lsl.w	r3, r1, r3
 8006580:	43db      	mvns	r3, r3
 8006582:	401a      	ands	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	0e9b      	lsrs	r3, r3, #26
 8006588:	f003 011f 	and.w	r1, r3, #31
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f003 031f 	and.w	r3, r3, #31
 8006592:	fa01 f303 	lsl.w	r3, r1, r3
 8006596:	431a      	orrs	r2, r3
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800659c:	bf00      	nop
 800659e:	371c      	adds	r7, #28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80065bc:	2301      	movs	r3, #1
 80065be:	e000      	b.n	80065c2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b087      	sub	sp, #28
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3314      	adds	r3, #20
 80065de:	461a      	mov	r2, r3
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	0e5b      	lsrs	r3, r3, #25
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	f003 0304 	and.w	r3, r3, #4
 80065ea:	4413      	add	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	0d1b      	lsrs	r3, r3, #20
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	2107      	movs	r1, #7
 80065fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006600:	43db      	mvns	r3, r3
 8006602:	401a      	ands	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	0d1b      	lsrs	r3, r3, #20
 8006608:	f003 031f 	and.w	r3, r3, #31
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	fa01 f303 	lsl.w	r3, r1, r3
 8006612:	431a      	orrs	r2, r3
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006618:	bf00      	nop
 800661a:	371c      	adds	r7, #28
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800663c:	43db      	mvns	r3, r3
 800663e:	401a      	ands	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f003 0318 	and.w	r3, r3, #24
 8006646:	4908      	ldr	r1, [pc, #32]	; (8006668 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006648:	40d9      	lsrs	r1, r3
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	400b      	ands	r3, r1
 800664e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006652:	431a      	orrs	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	0007ffff 	.word	0x0007ffff

0800666c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800667c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6093      	str	r3, [r2, #8]
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066a4:	d101      	bne.n	80066aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e000      	b.n	80066ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80066c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80066cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066f4:	d101      	bne.n	80066fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80066f6:	2301      	movs	r3, #1
 80066f8:	e000      	b.n	80066fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006718:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800671c:	f043 0201 	orr.w	r2, r3, #1
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <LL_ADC_IsEnabled+0x18>
 8006744:	2301      	movs	r3, #1
 8006746:	e000      	b.n	800674a <LL_ADC_IsEnabled+0x1a>
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006756:	b480      	push	{r7}
 8006758:	b083      	sub	sp, #12
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006766:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800676a:	f043 0204 	orr.w	r2, r3, #4
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006772:	bf00      	nop
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 0304 	and.w	r3, r3, #4
 800678e:	2b04      	cmp	r3, #4
 8006790:	d101      	bne.n	8006796 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006792:	2301      	movs	r3, #1
 8006794:	e000      	b.n	8006798 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f003 0308 	and.w	r3, r3, #8
 80067b4:	2b08      	cmp	r3, #8
 80067b6:	d101      	bne.n	80067bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
	...

080067cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80067d8:	2300      	movs	r3, #0
 80067da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e126      	b.n	8006a34 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d109      	bne.n	8006808 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7fa fe31 	bl	800145c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff ff3f 	bl	8006690 <LL_ADC_IsDeepPowerDownEnabled>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d004      	beq.n	8006822 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff ff25 	bl	800666c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4618      	mov	r0, r3
 8006828:	f7ff ff5a 	bl	80066e0 <LL_ADC_IsInternalRegulatorEnabled>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d115      	bne.n	800685e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4618      	mov	r0, r3
 8006838:	f7ff ff3e 	bl	80066b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800683c:	4b7f      	ldr	r3, [pc, #508]	; (8006a3c <HAL_ADC_Init+0x270>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	099b      	lsrs	r3, r3, #6
 8006842:	4a7f      	ldr	r2, [pc, #508]	; (8006a40 <HAL_ADC_Init+0x274>)
 8006844:	fba2 2303 	umull	r2, r3, r2, r3
 8006848:	099b      	lsrs	r3, r3, #6
 800684a:	3301      	adds	r3, #1
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006850:	e002      	b.n	8006858 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3b01      	subs	r3, #1
 8006856:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f9      	bne.n	8006852 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff ff3c 	bl	80066e0 <LL_ADC_IsInternalRegulatorEnabled>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10d      	bne.n	800688a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006872:	f043 0210 	orr.w	r2, r3, #16
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687e:	f043 0201 	orr.w	r2, r3, #1
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4618      	mov	r0, r3
 8006890:	f7ff ff75 	bl	800677e <LL_ADC_REG_IsConversionOngoing>
 8006894:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689a:	f003 0310 	and.w	r3, r3, #16
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f040 80bf 	bne.w	8006a22 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f040 80bb 	bne.w	8006a22 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80068b4:	f043 0202 	orr.w	r2, r3, #2
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7ff ff35 	bl	8006730 <LL_ADC_IsEnabled>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068cc:	485d      	ldr	r0, [pc, #372]	; (8006a44 <HAL_ADC_Init+0x278>)
 80068ce:	f7ff ff2f 	bl	8006730 <LL_ADC_IsEnabled>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d105      	bne.n	80068e4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	4619      	mov	r1, r3
 80068de:	485a      	ldr	r0, [pc, #360]	; (8006a48 <HAL_ADC_Init+0x27c>)
 80068e0:	f7ff fd9a 	bl	8006418 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	7e5b      	ldrb	r3, [r3, #25]
 80068e8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80068ee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80068f4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80068fa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006902:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006904:	4313      	orrs	r3, r2
 8006906:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d106      	bne.n	8006920 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	3b01      	subs	r3, #1
 8006918:	045b      	lsls	r3, r3, #17
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	4313      	orrs	r3, r2
 800691e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006924:	2b00      	cmp	r3, #0
 8006926:	d009      	beq.n	800693c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	4313      	orrs	r3, r2
 800693a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	4b42      	ldr	r3, [pc, #264]	; (8006a4c <HAL_ADC_Init+0x280>)
 8006944:	4013      	ands	r3, r2
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	6812      	ldr	r2, [r2, #0]
 800694a:	69b9      	ldr	r1, [r7, #24]
 800694c:	430b      	orrs	r3, r1
 800694e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4618      	mov	r0, r3
 8006956:	f7ff ff25 	bl	80067a4 <LL_ADC_INJ_IsConversionOngoing>
 800695a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d13d      	bne.n	80069de <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d13a      	bne.n	80069de <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800696c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006974:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006976:	4313      	orrs	r3, r2
 8006978:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006984:	f023 0302 	bic.w	r3, r3, #2
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6812      	ldr	r2, [r2, #0]
 800698c:	69b9      	ldr	r1, [r7, #24]
 800698e:	430b      	orrs	r3, r1
 8006990:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006998:	2b01      	cmp	r3, #1
 800699a:	d118      	bne.n	80069ce <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80069a6:	f023 0304 	bic.w	r3, r3, #4
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80069b2:	4311      	orrs	r1, r2
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80069b8:	4311      	orrs	r1, r2
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80069be:	430a      	orrs	r2, r1
 80069c0:	431a      	orrs	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0201 	orr.w	r2, r2, #1
 80069ca:	611a      	str	r2, [r3, #16]
 80069cc:	e007      	b.n	80069de <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0201 	bic.w	r2, r2, #1
 80069dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d10c      	bne.n	8006a00 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ec:	f023 010f 	bic.w	r1, r3, #15
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	1e5a      	subs	r2, r3, #1
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	631a      	str	r2, [r3, #48]	; 0x30
 80069fe:	e007      	b.n	8006a10 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 020f 	bic.w	r2, r2, #15
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a14:	f023 0303 	bic.w	r3, r3, #3
 8006a18:	f043 0201 	orr.w	r2, r3, #1
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	655a      	str	r2, [r3, #84]	; 0x54
 8006a20:	e007      	b.n	8006a32 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a26:	f043 0210 	orr.w	r2, r3, #16
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006a32:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3720      	adds	r7, #32
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	20000038 	.word	0x20000038
 8006a40:	053e2d63 	.word	0x053e2d63
 8006a44:	50040000 	.word	0x50040000
 8006a48:	50040300 	.word	0x50040300
 8006a4c:	fff0c007 	.word	0xfff0c007

08006a50 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff fe8c 	bl	800677e <LL_ADC_REG_IsConversionOngoing>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d167      	bne.n	8006b3c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d101      	bne.n	8006a7a <HAL_ADC_Start_DMA+0x2a>
 8006a76:	2302      	movs	r3, #2
 8006a78:	e063      	b.n	8006b42 <HAL_ADC_Start_DMA+0xf2>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f000 fe1c 	bl	80076c0 <ADC_Enable>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006a8c:	7dfb      	ldrb	r3, [r7, #23]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d14f      	bne.n	8006b32 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006a9a:	f023 0301 	bic.w	r3, r3, #1
 8006a9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d006      	beq.n	8006ac0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab6:	f023 0206 	bic.w	r2, r3, #6
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	659a      	str	r2, [r3, #88]	; 0x58
 8006abe:	e002      	b.n	8006ac6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aca:	4a20      	ldr	r2, [pc, #128]	; (8006b4c <HAL_ADC_Start_DMA+0xfc>)
 8006acc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad2:	4a1f      	ldr	r2, [pc, #124]	; (8006b50 <HAL_ADC_Start_DMA+0x100>)
 8006ad4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ada:	4a1e      	ldr	r2, [pc, #120]	; (8006b54 <HAL_ADC_Start_DMA+0x104>)
 8006adc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	221c      	movs	r2, #28
 8006ae4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0210 	orr.w	r2, r2, #16
 8006afc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0201 	orr.w	r2, r2, #1
 8006b0c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3340      	adds	r3, #64	; 0x40
 8006b18:	4619      	mov	r1, r3
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f001 f8e5 	bl	8007cec <HAL_DMA_Start_IT>
 8006b22:	4603      	mov	r3, r0
 8006b24:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7ff fe13 	bl	8006756 <LL_ADC_REG_StartConversion>
 8006b30:	e006      	b.n	8006b40 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006b3a:	e001      	b.n	8006b40 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	080077cd 	.word	0x080077cd
 8006b50:	080078a5 	.word	0x080078a5
 8006b54:	080078c1 	.word	0x080078c1

08006b58 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006b60:	2300      	movs	r3, #0
 8006b62:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d017      	beq.n	8006bae <HAL_ADC_IRQHandler+0x56>
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d012      	beq.n	8006bae <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8c:	f003 0310 	and.w	r3, r3, #16
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d105      	bne.n	8006ba0 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b98:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fecf 	bl	8007944 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2202      	movs	r2, #2
 8006bac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d004      	beq.n	8006bc2 <HAL_ADC_IRQHandler+0x6a>
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f003 0304 	and.w	r3, r3, #4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d109      	bne.n	8006bd6 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d05e      	beq.n	8006c8a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d059      	beq.n	8006c8a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bda:	f003 0310 	and.w	r3, r3, #16
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d105      	bne.n	8006bee <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7ff fc99 	bl	800652a <LL_ADC_REG_IsTriggerSourceSWStart>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d03e      	beq.n	8006c7c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d135      	bne.n	8006c7c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	2b08      	cmp	r3, #8
 8006c1c:	d12e      	bne.n	8006c7c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff fdab 	bl	800677e <LL_ADC_REG_IsConversionOngoing>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d11a      	bne.n	8006c64 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 020c 	bic.w	r2, r2, #12
 8006c3c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d112      	bne.n	8006c7c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5a:	f043 0201 	orr.w	r2, r3, #1
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	655a      	str	r2, [r3, #84]	; 0x54
 8006c62:	e00b      	b.n	8006c7c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c68:	f043 0210 	orr.w	r2, r3, #16
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c74:	f043 0201 	orr.w	r2, r3, #1
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7fa fc63 	bl	8001548 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	220c      	movs	r2, #12
 8006c88:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	f003 0320 	and.w	r3, r3, #32
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d004      	beq.n	8006c9e <HAL_ADC_IRQHandler+0x146>
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d109      	bne.n	8006cb2 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d072      	beq.n	8006d8e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d06d      	beq.n	8006d8e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb6:	f003 0310 	and.w	r3, r3, #16
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d105      	bne.n	8006cca <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7ff fc6a 	bl	80065a8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006cd4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff fc25 	bl	800652a <LL_ADC_REG_IsTriggerSourceSWStart>
 8006ce0:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d047      	beq.n	8006d80 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d007      	beq.n	8006d0a <HAL_ADC_IRQHandler+0x1b2>
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d03f      	beq.n	8006d80 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d13a      	bne.n	8006d80 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d14:	2b40      	cmp	r3, #64	; 0x40
 8006d16:	d133      	bne.n	8006d80 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d12e      	bne.n	8006d80 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7ff fd3c 	bl	80067a4 <LL_ADC_INJ_IsConversionOngoing>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d11a      	bne.n	8006d68 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d40:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d112      	bne.n	8006d80 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5e:	f043 0201 	orr.w	r2, r3, #1
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	655a      	str	r2, [r3, #84]	; 0x54
 8006d66:	e00b      	b.n	8006d80 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6c:	f043 0210 	orr.w	r2, r3, #16
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d78:	f043 0201 	orr.w	r2, r3, #1
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fdb7 	bl	80078f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2260      	movs	r2, #96	; 0x60
 8006d8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d011      	beq.n	8006dbc <HAL_ADC_IRQHandler+0x264>
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00c      	beq.n	8006dbc <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f890 	bl	8006ed4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2280      	movs	r2, #128	; 0x80
 8006dba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d012      	beq.n	8006dec <HAL_ADC_IRQHandler+0x294>
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00d      	beq.n	8006dec <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fd9d 	bl	800791c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d012      	beq.n	8006e1c <HAL_ADC_IRQHandler+0x2c4>
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00d      	beq.n	8006e1c <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fd8f 	bl	8007930 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	f003 0310 	and.w	r3, r3, #16
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d02a      	beq.n	8006e7c <HAL_ADC_IRQHandler+0x324>
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f003 0310 	and.w	r3, r3, #16
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d025      	beq.n	8006e7c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d102      	bne.n	8006e3e <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	61fb      	str	r3, [r7, #28]
 8006e3c:	e008      	b.n	8006e50 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d10e      	bne.n	8006e74 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e66:	f043 0202 	orr.w	r2, r3, #2
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f83a 	bl	8006ee8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2210      	movs	r2, #16
 8006e7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d018      	beq.n	8006eb8 <HAL_ADC_IRQHandler+0x360>
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d013      	beq.n	8006eb8 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e94:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea0:	f043 0208 	orr.w	r2, r3, #8
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006eb0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fd28 	bl	8007908 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006eb8:	bf00      	nop
 8006eba:	3720      	adds	r7, #32
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b0b6      	sub	sp, #216	; 0xd8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d101      	bne.n	8006f1e <HAL_ADC_ConfigChannel+0x22>
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	e3bb      	b.n	8007696 <HAL_ADC_ConfigChannel+0x79a>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7ff fc27 	bl	800677e <LL_ADC_REG_IsConversionOngoing>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f040 83a0 	bne.w	8007678 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	2b05      	cmp	r3, #5
 8006f46:	d824      	bhi.n	8006f92 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	3b02      	subs	r3, #2
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d81b      	bhi.n	8006f8a <HAL_ADC_ConfigChannel+0x8e>
 8006f52:	a201      	add	r2, pc, #4	; (adr r2, 8006f58 <HAL_ADC_ConfigChannel+0x5c>)
 8006f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f58:	08006f69 	.word	0x08006f69
 8006f5c:	08006f71 	.word	0x08006f71
 8006f60:	08006f79 	.word	0x08006f79
 8006f64:	08006f81 	.word	0x08006f81
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8006f68:	230c      	movs	r3, #12
 8006f6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006f6e:	e010      	b.n	8006f92 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8006f70:	2312      	movs	r3, #18
 8006f72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006f76:	e00c      	b.n	8006f92 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8006f78:	2318      	movs	r3, #24
 8006f7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006f7e:	e008      	b.n	8006f92 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8006f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006f88:	e003      	b.n	8006f92 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8006f8a:	2306      	movs	r3, #6
 8006f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006f90:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6818      	ldr	r0, [r3, #0]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006fa0:	f7ff fad6 	bl	8006550 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff fbe8 	bl	800677e <LL_ADC_REG_IsConversionOngoing>
 8006fae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7ff fbf4 	bl	80067a4 <LL_ADC_INJ_IsConversionOngoing>
 8006fbc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006fc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f040 81a4 	bne.w	8007312 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006fca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f040 819f 	bne.w	8007312 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6818      	ldr	r0, [r3, #0]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	6819      	ldr	r1, [r3, #0]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	f7ff faf4 	bl	80065ce <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	695a      	ldr	r2, [r3, #20]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	08db      	lsrs	r3, r3, #3
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	005b      	lsls	r3, r3, #1
 8006ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	2b04      	cmp	r3, #4
 8007006:	d00a      	beq.n	800701e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6818      	ldr	r0, [r3, #0]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	6919      	ldr	r1, [r3, #16]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007018:	f7ff fa32 	bl	8006480 <LL_ADC_SetOffset>
 800701c:	e179      	b.n	8007312 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2100      	movs	r1, #0
 8007024:	4618      	mov	r0, r3
 8007026:	f7ff fa4f 	bl	80064c8 <LL_ADC_GetOffsetChannel>
 800702a:	4603      	mov	r3, r0
 800702c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10a      	bne.n	800704a <HAL_ADC_ConfigChannel+0x14e>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2100      	movs	r1, #0
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff fa44 	bl	80064c8 <LL_ADC_GetOffsetChannel>
 8007040:	4603      	mov	r3, r0
 8007042:	0e9b      	lsrs	r3, r3, #26
 8007044:	f003 021f 	and.w	r2, r3, #31
 8007048:	e01e      	b.n	8007088 <HAL_ADC_ConfigChannel+0x18c>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2100      	movs	r1, #0
 8007050:	4618      	mov	r0, r3
 8007052:	f7ff fa39 	bl	80064c8 <LL_ADC_GetOffsetChannel>
 8007056:	4603      	mov	r3, r0
 8007058:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800705c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007060:	fa93 f3a3 	rbit	r3, r3
 8007064:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007068:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800706c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007070:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8007078:	2320      	movs	r3, #32
 800707a:	e004      	b.n	8007086 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800707c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007080:	fab3 f383 	clz	r3, r3
 8007084:	b2db      	uxtb	r3, r3
 8007086:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007090:	2b00      	cmp	r3, #0
 8007092:	d105      	bne.n	80070a0 <HAL_ADC_ConfigChannel+0x1a4>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	0e9b      	lsrs	r3, r3, #26
 800709a:	f003 031f 	and.w	r3, r3, #31
 800709e:	e018      	b.n	80070d2 <HAL_ADC_ConfigChannel+0x1d6>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070ac:	fa93 f3a3 	rbit	r3, r3
 80070b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80070b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80070bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80070c4:	2320      	movs	r3, #32
 80070c6:	e004      	b.n	80070d2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80070c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80070cc:	fab3 f383 	clz	r3, r3
 80070d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d106      	bne.n	80070e4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2200      	movs	r2, #0
 80070dc:	2100      	movs	r1, #0
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff fa08 	bl	80064f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2101      	movs	r1, #1
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7ff f9ec 	bl	80064c8 <LL_ADC_GetOffsetChannel>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10a      	bne.n	8007110 <HAL_ADC_ConfigChannel+0x214>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2101      	movs	r1, #1
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff f9e1 	bl	80064c8 <LL_ADC_GetOffsetChannel>
 8007106:	4603      	mov	r3, r0
 8007108:	0e9b      	lsrs	r3, r3, #26
 800710a:	f003 021f 	and.w	r2, r3, #31
 800710e:	e01e      	b.n	800714e <HAL_ADC_ConfigChannel+0x252>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2101      	movs	r1, #1
 8007116:	4618      	mov	r0, r3
 8007118:	f7ff f9d6 	bl	80064c8 <LL_ADC_GetOffsetChannel>
 800711c:	4603      	mov	r3, r0
 800711e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007126:	fa93 f3a3 	rbit	r3, r3
 800712a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800712e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8007136:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800713e:	2320      	movs	r3, #32
 8007140:	e004      	b.n	800714c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8007142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007146:	fab3 f383 	clz	r3, r3
 800714a:	b2db      	uxtb	r3, r3
 800714c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007156:	2b00      	cmp	r3, #0
 8007158:	d105      	bne.n	8007166 <HAL_ADC_ConfigChannel+0x26a>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	0e9b      	lsrs	r3, r3, #26
 8007160:	f003 031f 	and.w	r3, r3, #31
 8007164:	e018      	b.n	8007198 <HAL_ADC_ConfigChannel+0x29c>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800716e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007172:	fa93 f3a3 	rbit	r3, r3
 8007176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800717a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800717e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8007182:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800718a:	2320      	movs	r3, #32
 800718c:	e004      	b.n	8007198 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800718e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007192:	fab3 f383 	clz	r3, r3
 8007196:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007198:	429a      	cmp	r2, r3
 800719a:	d106      	bne.n	80071aa <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2200      	movs	r2, #0
 80071a2:	2101      	movs	r1, #1
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7ff f9a5 	bl	80064f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2102      	movs	r1, #2
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7ff f989 	bl	80064c8 <LL_ADC_GetOffsetChannel>
 80071b6:	4603      	mov	r3, r0
 80071b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10a      	bne.n	80071d6 <HAL_ADC_ConfigChannel+0x2da>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2102      	movs	r1, #2
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7ff f97e 	bl	80064c8 <LL_ADC_GetOffsetChannel>
 80071cc:	4603      	mov	r3, r0
 80071ce:	0e9b      	lsrs	r3, r3, #26
 80071d0:	f003 021f 	and.w	r2, r3, #31
 80071d4:	e01e      	b.n	8007214 <HAL_ADC_ConfigChannel+0x318>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2102      	movs	r1, #2
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff f973 	bl	80064c8 <LL_ADC_GetOffsetChannel>
 80071e2:	4603      	mov	r3, r0
 80071e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071ec:	fa93 f3a3 	rbit	r3, r3
 80071f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80071f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80071fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8007204:	2320      	movs	r3, #32
 8007206:	e004      	b.n	8007212 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8007208:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800720c:	fab3 f383 	clz	r3, r3
 8007210:	b2db      	uxtb	r3, r3
 8007212:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800721c:	2b00      	cmp	r3, #0
 800721e:	d105      	bne.n	800722c <HAL_ADC_ConfigChannel+0x330>
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	0e9b      	lsrs	r3, r3, #26
 8007226:	f003 031f 	and.w	r3, r3, #31
 800722a:	e014      	b.n	8007256 <HAL_ADC_ConfigChannel+0x35a>
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007232:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007234:	fa93 f3a3 	rbit	r3, r3
 8007238:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800723a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800723c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8007240:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8007248:	2320      	movs	r3, #32
 800724a:	e004      	b.n	8007256 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800724c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007250:	fab3 f383 	clz	r3, r3
 8007254:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007256:	429a      	cmp	r2, r3
 8007258:	d106      	bne.n	8007268 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2200      	movs	r2, #0
 8007260:	2102      	movs	r1, #2
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff f946 	bl	80064f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2103      	movs	r1, #3
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff f92a 	bl	80064c8 <LL_ADC_GetOffsetChannel>
 8007274:	4603      	mov	r3, r0
 8007276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10a      	bne.n	8007294 <HAL_ADC_ConfigChannel+0x398>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2103      	movs	r1, #3
 8007284:	4618      	mov	r0, r3
 8007286:	f7ff f91f 	bl	80064c8 <LL_ADC_GetOffsetChannel>
 800728a:	4603      	mov	r3, r0
 800728c:	0e9b      	lsrs	r3, r3, #26
 800728e:	f003 021f 	and.w	r2, r3, #31
 8007292:	e017      	b.n	80072c4 <HAL_ADC_ConfigChannel+0x3c8>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2103      	movs	r1, #3
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff f914 	bl	80064c8 <LL_ADC_GetOffsetChannel>
 80072a0:	4603      	mov	r3, r0
 80072a2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072a6:	fa93 f3a3 	rbit	r3, r3
 80072aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80072ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ae:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80072b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80072b6:	2320      	movs	r3, #32
 80072b8:	e003      	b.n	80072c2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80072ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072bc:	fab3 f383 	clz	r3, r3
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d105      	bne.n	80072dc <HAL_ADC_ConfigChannel+0x3e0>
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	0e9b      	lsrs	r3, r3, #26
 80072d6:	f003 031f 	and.w	r3, r3, #31
 80072da:	e011      	b.n	8007300 <HAL_ADC_ConfigChannel+0x404>
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072e4:	fa93 f3a3 	rbit	r3, r3
 80072e8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80072ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072ec:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80072ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80072f4:	2320      	movs	r3, #32
 80072f6:	e003      	b.n	8007300 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80072f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072fa:	fab3 f383 	clz	r3, r3
 80072fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007300:	429a      	cmp	r2, r3
 8007302:	d106      	bne.n	8007312 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2200      	movs	r2, #0
 800730a:	2103      	movs	r1, #3
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff f8f1 	bl	80064f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4618      	mov	r0, r3
 8007318:	f7ff fa0a 	bl	8006730 <LL_ADC_IsEnabled>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	f040 8140 	bne.w	80075a4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6818      	ldr	r0, [r3, #0]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	6819      	ldr	r1, [r3, #0]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	461a      	mov	r2, r3
 8007332:	f7ff f977 	bl	8006624 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	4a8f      	ldr	r2, [pc, #572]	; (8007578 <HAL_ADC_ConfigChannel+0x67c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	f040 8131 	bne.w	80075a4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10b      	bne.n	800736a <HAL_ADC_ConfigChannel+0x46e>
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	0e9b      	lsrs	r3, r3, #26
 8007358:	3301      	adds	r3, #1
 800735a:	f003 031f 	and.w	r3, r3, #31
 800735e:	2b09      	cmp	r3, #9
 8007360:	bf94      	ite	ls
 8007362:	2301      	movls	r3, #1
 8007364:	2300      	movhi	r3, #0
 8007366:	b2db      	uxtb	r3, r3
 8007368:	e019      	b.n	800739e <HAL_ADC_ConfigChannel+0x4a2>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007372:	fa93 f3a3 	rbit	r3, r3
 8007376:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8007378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800737a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800737c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8007382:	2320      	movs	r3, #32
 8007384:	e003      	b.n	800738e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8007386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007388:	fab3 f383 	clz	r3, r3
 800738c:	b2db      	uxtb	r3, r3
 800738e:	3301      	adds	r3, #1
 8007390:	f003 031f 	and.w	r3, r3, #31
 8007394:	2b09      	cmp	r3, #9
 8007396:	bf94      	ite	ls
 8007398:	2301      	movls	r3, #1
 800739a:	2300      	movhi	r3, #0
 800739c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d079      	beq.n	8007496 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d107      	bne.n	80073be <HAL_ADC_ConfigChannel+0x4c2>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	0e9b      	lsrs	r3, r3, #26
 80073b4:	3301      	adds	r3, #1
 80073b6:	069b      	lsls	r3, r3, #26
 80073b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80073bc:	e015      	b.n	80073ea <HAL_ADC_ConfigChannel+0x4ee>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c6:	fa93 f3a3 	rbit	r3, r3
 80073ca:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80073cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ce:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80073d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80073d6:	2320      	movs	r3, #32
 80073d8:	e003      	b.n	80073e2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80073da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073dc:	fab3 f383 	clz	r3, r3
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	3301      	adds	r3, #1
 80073e4:	069b      	lsls	r3, r3, #26
 80073e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d109      	bne.n	800740a <HAL_ADC_ConfigChannel+0x50e>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	0e9b      	lsrs	r3, r3, #26
 80073fc:	3301      	adds	r3, #1
 80073fe:	f003 031f 	and.w	r3, r3, #31
 8007402:	2101      	movs	r1, #1
 8007404:	fa01 f303 	lsl.w	r3, r1, r3
 8007408:	e017      	b.n	800743a <HAL_ADC_ConfigChannel+0x53e>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007412:	fa93 f3a3 	rbit	r3, r3
 8007416:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8007418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800741a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800741c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8007422:	2320      	movs	r3, #32
 8007424:	e003      	b.n	800742e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8007426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007428:	fab3 f383 	clz	r3, r3
 800742c:	b2db      	uxtb	r3, r3
 800742e:	3301      	adds	r3, #1
 8007430:	f003 031f 	and.w	r3, r3, #31
 8007434:	2101      	movs	r1, #1
 8007436:	fa01 f303 	lsl.w	r3, r1, r3
 800743a:	ea42 0103 	orr.w	r1, r2, r3
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10a      	bne.n	8007460 <HAL_ADC_ConfigChannel+0x564>
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	0e9b      	lsrs	r3, r3, #26
 8007450:	3301      	adds	r3, #1
 8007452:	f003 021f 	and.w	r2, r3, #31
 8007456:	4613      	mov	r3, r2
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	4413      	add	r3, r2
 800745c:	051b      	lsls	r3, r3, #20
 800745e:	e018      	b.n	8007492 <HAL_ADC_ConfigChannel+0x596>
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007468:	fa93 f3a3 	rbit	r3, r3
 800746c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8007472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8007478:	2320      	movs	r3, #32
 800747a:	e003      	b.n	8007484 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800747c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747e:	fab3 f383 	clz	r3, r3
 8007482:	b2db      	uxtb	r3, r3
 8007484:	3301      	adds	r3, #1
 8007486:	f003 021f 	and.w	r2, r3, #31
 800748a:	4613      	mov	r3, r2
 800748c:	005b      	lsls	r3, r3, #1
 800748e:	4413      	add	r3, r2
 8007490:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007492:	430b      	orrs	r3, r1
 8007494:	e081      	b.n	800759a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d107      	bne.n	80074b2 <HAL_ADC_ConfigChannel+0x5b6>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	0e9b      	lsrs	r3, r3, #26
 80074a8:	3301      	adds	r3, #1
 80074aa:	069b      	lsls	r3, r3, #26
 80074ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80074b0:	e015      	b.n	80074de <HAL_ADC_ConfigChannel+0x5e2>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	fa93 f3a3 	rbit	r3, r3
 80074be:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80074c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80074ca:	2320      	movs	r3, #32
 80074cc:	e003      	b.n	80074d6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80074ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d0:	fab3 f383 	clz	r3, r3
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	3301      	adds	r3, #1
 80074d8:	069b      	lsls	r3, r3, #26
 80074da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d109      	bne.n	80074fe <HAL_ADC_ConfigChannel+0x602>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	0e9b      	lsrs	r3, r3, #26
 80074f0:	3301      	adds	r3, #1
 80074f2:	f003 031f 	and.w	r3, r3, #31
 80074f6:	2101      	movs	r1, #1
 80074f8:	fa01 f303 	lsl.w	r3, r1, r3
 80074fc:	e017      	b.n	800752e <HAL_ADC_ConfigChannel+0x632>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	fa93 f3a3 	rbit	r3, r3
 800750a:	61bb      	str	r3, [r7, #24]
  return result;
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8007516:	2320      	movs	r3, #32
 8007518:	e003      	b.n	8007522 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	fab3 f383 	clz	r3, r3
 8007520:	b2db      	uxtb	r3, r3
 8007522:	3301      	adds	r3, #1
 8007524:	f003 031f 	and.w	r3, r3, #31
 8007528:	2101      	movs	r1, #1
 800752a:	fa01 f303 	lsl.w	r3, r1, r3
 800752e:	ea42 0103 	orr.w	r1, r2, r3
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10d      	bne.n	800755a <HAL_ADC_ConfigChannel+0x65e>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	0e9b      	lsrs	r3, r3, #26
 8007544:	3301      	adds	r3, #1
 8007546:	f003 021f 	and.w	r2, r3, #31
 800754a:	4613      	mov	r3, r2
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	4413      	add	r3, r2
 8007550:	3b1e      	subs	r3, #30
 8007552:	051b      	lsls	r3, r3, #20
 8007554:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007558:	e01e      	b.n	8007598 <HAL_ADC_ConfigChannel+0x69c>
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	fa93 f3a3 	rbit	r3, r3
 8007566:	60fb      	str	r3, [r7, #12]
  return result;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d104      	bne.n	800757c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8007572:	2320      	movs	r3, #32
 8007574:	e006      	b.n	8007584 <HAL_ADC_ConfigChannel+0x688>
 8007576:	bf00      	nop
 8007578:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	fab3 f383 	clz	r3, r3
 8007582:	b2db      	uxtb	r3, r3
 8007584:	3301      	adds	r3, #1
 8007586:	f003 021f 	and.w	r2, r3, #31
 800758a:	4613      	mov	r3, r2
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	4413      	add	r3, r2
 8007590:	3b1e      	subs	r3, #30
 8007592:	051b      	lsls	r3, r3, #20
 8007594:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007598:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800759e:	4619      	mov	r1, r3
 80075a0:	f7ff f815 	bl	80065ce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	4b3d      	ldr	r3, [pc, #244]	; (80076a0 <HAL_ADC_ConfigChannel+0x7a4>)
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d06c      	beq.n	800768a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80075b0:	483c      	ldr	r0, [pc, #240]	; (80076a4 <HAL_ADC_ConfigChannel+0x7a8>)
 80075b2:	f7fe ff57 	bl	8006464 <LL_ADC_GetCommonPathInternalCh>
 80075b6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a3a      	ldr	r2, [pc, #232]	; (80076a8 <HAL_ADC_ConfigChannel+0x7ac>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d127      	bne.n	8007614 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80075c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80075c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d121      	bne.n	8007614 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a35      	ldr	r2, [pc, #212]	; (80076ac <HAL_ADC_ConfigChannel+0x7b0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d157      	bne.n	800768a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80075da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80075de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075e2:	4619      	mov	r1, r3
 80075e4:	482f      	ldr	r0, [pc, #188]	; (80076a4 <HAL_ADC_ConfigChannel+0x7a8>)
 80075e6:	f7fe ff2a 	bl	800643e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80075ea:	4b31      	ldr	r3, [pc, #196]	; (80076b0 <HAL_ADC_ConfigChannel+0x7b4>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	099b      	lsrs	r3, r3, #6
 80075f0:	4a30      	ldr	r2, [pc, #192]	; (80076b4 <HAL_ADC_ConfigChannel+0x7b8>)
 80075f2:	fba2 2303 	umull	r2, r3, r2, r3
 80075f6:	099b      	lsrs	r3, r3, #6
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	4613      	mov	r3, r2
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007604:	e002      	b.n	800760c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	3b01      	subs	r3, #1
 800760a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1f9      	bne.n	8007606 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007612:	e03a      	b.n	800768a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a27      	ldr	r2, [pc, #156]	; (80076b8 <HAL_ADC_ConfigChannel+0x7bc>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d113      	bne.n	8007646 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800761e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10d      	bne.n	8007646 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a1f      	ldr	r2, [pc, #124]	; (80076ac <HAL_ADC_ConfigChannel+0x7b0>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d12a      	bne.n	800768a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007638:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800763c:	4619      	mov	r1, r3
 800763e:	4819      	ldr	r0, [pc, #100]	; (80076a4 <HAL_ADC_ConfigChannel+0x7a8>)
 8007640:	f7fe fefd 	bl	800643e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007644:	e021      	b.n	800768a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a1c      	ldr	r2, [pc, #112]	; (80076bc <HAL_ADC_ConfigChannel+0x7c0>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d11c      	bne.n	800768a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007650:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d116      	bne.n	800768a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a12      	ldr	r2, [pc, #72]	; (80076ac <HAL_ADC_ConfigChannel+0x7b0>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d111      	bne.n	800768a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007666:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800766a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800766e:	4619      	mov	r1, r3
 8007670:	480c      	ldr	r0, [pc, #48]	; (80076a4 <HAL_ADC_ConfigChannel+0x7a8>)
 8007672:	f7fe fee4 	bl	800643e <LL_ADC_SetCommonPathInternalCh>
 8007676:	e008      	b.n	800768a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767c:	f043 0220 	orr.w	r2, r3, #32
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007692:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007696:	4618      	mov	r0, r3
 8007698:	37d8      	adds	r7, #216	; 0xd8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	80080000 	.word	0x80080000
 80076a4:	50040300 	.word	0x50040300
 80076a8:	c7520000 	.word	0xc7520000
 80076ac:	50040000 	.word	0x50040000
 80076b0:	20000038 	.word	0x20000038
 80076b4:	053e2d63 	.word	0x053e2d63
 80076b8:	cb840000 	.word	0xcb840000
 80076bc:	80000001 	.word	0x80000001

080076c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80076c8:	2300      	movs	r3, #0
 80076ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7ff f82d 	bl	8006730 <LL_ADC_IsEnabled>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d169      	bne.n	80077b0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689a      	ldr	r2, [r3, #8]
 80076e2:	4b36      	ldr	r3, [pc, #216]	; (80077bc <ADC_Enable+0xfc>)
 80076e4:	4013      	ands	r3, r2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00d      	beq.n	8007706 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ee:	f043 0210 	orr.w	r2, r3, #16
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076fa:	f043 0201 	orr.w	r2, r3, #1
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e055      	b.n	80077b2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4618      	mov	r0, r3
 800770c:	f7fe fffc 	bl	8006708 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007710:	482b      	ldr	r0, [pc, #172]	; (80077c0 <ADC_Enable+0x100>)
 8007712:	f7fe fea7 	bl	8006464 <LL_ADC_GetCommonPathInternalCh>
 8007716:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800771c:	2b00      	cmp	r3, #0
 800771e:	d013      	beq.n	8007748 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007720:	4b28      	ldr	r3, [pc, #160]	; (80077c4 <ADC_Enable+0x104>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	099b      	lsrs	r3, r3, #6
 8007726:	4a28      	ldr	r2, [pc, #160]	; (80077c8 <ADC_Enable+0x108>)
 8007728:	fba2 2303 	umull	r2, r3, r2, r3
 800772c:	099b      	lsrs	r3, r3, #6
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	4613      	mov	r3, r2
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	4413      	add	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800773a:	e002      	b.n	8007742 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	3b01      	subs	r3, #1
 8007740:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1f9      	bne.n	800773c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007748:	f7fe fe36 	bl	80063b8 <HAL_GetTick>
 800774c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800774e:	e028      	b.n	80077a2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4618      	mov	r0, r3
 8007756:	f7fe ffeb 	bl	8006730 <LL_ADC_IsEnabled>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d104      	bne.n	800776a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4618      	mov	r0, r3
 8007766:	f7fe ffcf 	bl	8006708 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800776a:	f7fe fe25 	bl	80063b8 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	2b02      	cmp	r3, #2
 8007776:	d914      	bls.n	80077a2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b01      	cmp	r3, #1
 8007784:	d00d      	beq.n	80077a2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800778a:	f043 0210 	orr.w	r2, r3, #16
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007796:	f043 0201 	orr.w	r2, r3, #1
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e007      	b.n	80077b2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d1cf      	bne.n	8007750 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	8000003f 	.word	0x8000003f
 80077c0:	50040300 	.word	0x50040300
 80077c4:	20000038 	.word	0x20000038
 80077c8:	053e2d63 	.word	0x053e2d63

080077cc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d14b      	bne.n	800787e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0308 	and.w	r3, r3, #8
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d021      	beq.n	8007844 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4618      	mov	r0, r3
 8007806:	f7fe fe90 	bl	800652a <LL_ADC_REG_IsTriggerSourceSWStart>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d032      	beq.n	8007876 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d12b      	bne.n	8007876 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007822:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d11f      	bne.n	8007876 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783a:	f043 0201 	orr.w	r2, r3, #1
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	655a      	str	r2, [r3, #84]	; 0x54
 8007842:	e018      	b.n	8007876 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d111      	bne.n	8007876 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d105      	bne.n	8007876 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786e:	f043 0201 	orr.w	r2, r3, #1
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f7f9 fe66 	bl	8001548 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800787c:	e00e      	b.n	800789c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007882:	f003 0310 	and.w	r3, r3, #16
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f7ff fb2c 	bl	8006ee8 <HAL_ADC_ErrorCallback>
}
 8007890:	e004      	b.n	800789c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	4798      	blx	r3
}
 800789c:	bf00      	nop
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f7ff fb04 	bl	8006ec0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80078b8:	bf00      	nop
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078cc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078de:	f043 0204 	orr.w	r2, r3, #4
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7ff fafe 	bl	8006ee8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80078ec:	bf00      	nop
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007968:	4b0c      	ldr	r3, [pc, #48]	; (800799c <__NVIC_SetPriorityGrouping+0x44>)
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007974:	4013      	ands	r3, r2
 8007976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800798a:	4a04      	ldr	r2, [pc, #16]	; (800799c <__NVIC_SetPriorityGrouping+0x44>)
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	60d3      	str	r3, [r2, #12]
}
 8007990:	bf00      	nop
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	e000ed00 	.word	0xe000ed00

080079a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80079a0:	b480      	push	{r7}
 80079a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079a4:	4b04      	ldr	r3, [pc, #16]	; (80079b8 <__NVIC_GetPriorityGrouping+0x18>)
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	0a1b      	lsrs	r3, r3, #8
 80079aa:	f003 0307 	and.w	r3, r3, #7
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	e000ed00 	.word	0xe000ed00

080079bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	4603      	mov	r3, r0
 80079c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	db0b      	blt.n	80079e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079ce:	79fb      	ldrb	r3, [r7, #7]
 80079d0:	f003 021f 	and.w	r2, r3, #31
 80079d4:	4907      	ldr	r1, [pc, #28]	; (80079f4 <__NVIC_EnableIRQ+0x38>)
 80079d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079da:	095b      	lsrs	r3, r3, #5
 80079dc:	2001      	movs	r0, #1
 80079de:	fa00 f202 	lsl.w	r2, r0, r2
 80079e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80079e6:	bf00      	nop
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	e000e100 	.word	0xe000e100

080079f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	4603      	mov	r3, r0
 8007a00:	6039      	str	r1, [r7, #0]
 8007a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	db0a      	blt.n	8007a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	490c      	ldr	r1, [pc, #48]	; (8007a44 <__NVIC_SetPriority+0x4c>)
 8007a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a16:	0112      	lsls	r2, r2, #4
 8007a18:	b2d2      	uxtb	r2, r2
 8007a1a:	440b      	add	r3, r1
 8007a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a20:	e00a      	b.n	8007a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	4908      	ldr	r1, [pc, #32]	; (8007a48 <__NVIC_SetPriority+0x50>)
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	f003 030f 	and.w	r3, r3, #15
 8007a2e:	3b04      	subs	r3, #4
 8007a30:	0112      	lsls	r2, r2, #4
 8007a32:	b2d2      	uxtb	r2, r2
 8007a34:	440b      	add	r3, r1
 8007a36:	761a      	strb	r2, [r3, #24]
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	e000e100 	.word	0xe000e100
 8007a48:	e000ed00 	.word	0xe000ed00

08007a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b089      	sub	sp, #36	; 0x24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	f1c3 0307 	rsb	r3, r3, #7
 8007a66:	2b04      	cmp	r3, #4
 8007a68:	bf28      	it	cs
 8007a6a:	2304      	movcs	r3, #4
 8007a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	3304      	adds	r3, #4
 8007a72:	2b06      	cmp	r3, #6
 8007a74:	d902      	bls.n	8007a7c <NVIC_EncodePriority+0x30>
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	3b03      	subs	r3, #3
 8007a7a:	e000      	b.n	8007a7e <NVIC_EncodePriority+0x32>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a80:	f04f 32ff 	mov.w	r2, #4294967295
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8a:	43da      	mvns	r2, r3
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	401a      	ands	r2, r3
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a94:	f04f 31ff 	mov.w	r1, #4294967295
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a9e:	43d9      	mvns	r1, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007aa4:	4313      	orrs	r3, r2
         );
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3724      	adds	r7, #36	; 0x24
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
	...

08007ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ac4:	d301      	bcc.n	8007aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e00f      	b.n	8007aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007aca:	4a0a      	ldr	r2, [pc, #40]	; (8007af4 <SysTick_Config+0x40>)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007ad2:	210f      	movs	r1, #15
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad8:	f7ff ff8e 	bl	80079f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007adc:	4b05      	ldr	r3, [pc, #20]	; (8007af4 <SysTick_Config+0x40>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007ae2:	4b04      	ldr	r3, [pc, #16]	; (8007af4 <SysTick_Config+0x40>)
 8007ae4:	2207      	movs	r2, #7
 8007ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	e000e010 	.word	0xe000e010

08007af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7ff ff29 	bl	8007958 <__NVIC_SetPriorityGrouping>
}
 8007b06:	bf00      	nop
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b086      	sub	sp, #24
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	4603      	mov	r3, r0
 8007b16:	60b9      	str	r1, [r7, #8]
 8007b18:	607a      	str	r2, [r7, #4]
 8007b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007b20:	f7ff ff3e 	bl	80079a0 <__NVIC_GetPriorityGrouping>
 8007b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	68b9      	ldr	r1, [r7, #8]
 8007b2a:	6978      	ldr	r0, [r7, #20]
 8007b2c:	f7ff ff8e 	bl	8007a4c <NVIC_EncodePriority>
 8007b30:	4602      	mov	r2, r0
 8007b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b36:	4611      	mov	r1, r2
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7ff ff5d 	bl	80079f8 <__NVIC_SetPriority>
}
 8007b3e:	bf00      	nop
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b082      	sub	sp, #8
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7ff ff31 	bl	80079bc <__NVIC_EnableIRQ>
}
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b082      	sub	sp, #8
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7ff ffa2 	bl	8007ab4 <SysTick_Config>
 8007b70:	4603      	mov	r3, r0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e098      	b.n	8007cc0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	461a      	mov	r2, r3
 8007b94:	4b4d      	ldr	r3, [pc, #308]	; (8007ccc <HAL_DMA_Init+0x150>)
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d80f      	bhi.n	8007bba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	4b4b      	ldr	r3, [pc, #300]	; (8007cd0 <HAL_DMA_Init+0x154>)
 8007ba2:	4413      	add	r3, r2
 8007ba4:	4a4b      	ldr	r2, [pc, #300]	; (8007cd4 <HAL_DMA_Init+0x158>)
 8007ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8007baa:	091b      	lsrs	r3, r3, #4
 8007bac:	009a      	lsls	r2, r3, #2
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a48      	ldr	r2, [pc, #288]	; (8007cd8 <HAL_DMA_Init+0x15c>)
 8007bb6:	641a      	str	r2, [r3, #64]	; 0x40
 8007bb8:	e00e      	b.n	8007bd8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	4b46      	ldr	r3, [pc, #280]	; (8007cdc <HAL_DMA_Init+0x160>)
 8007bc2:	4413      	add	r3, r2
 8007bc4:	4a43      	ldr	r2, [pc, #268]	; (8007cd4 <HAL_DMA_Init+0x158>)
 8007bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bca:	091b      	lsrs	r3, r3, #4
 8007bcc:	009a      	lsls	r2, r3, #2
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a42      	ldr	r2, [pc, #264]	; (8007ce0 <HAL_DMA_Init+0x164>)
 8007bd6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c32:	d039      	beq.n	8007ca8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c38:	4a27      	ldr	r2, [pc, #156]	; (8007cd8 <HAL_DMA_Init+0x15c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d11a      	bne.n	8007c74 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007c3e:	4b29      	ldr	r3, [pc, #164]	; (8007ce4 <HAL_DMA_Init+0x168>)
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c46:	f003 031c 	and.w	r3, r3, #28
 8007c4a:	210f      	movs	r1, #15
 8007c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c50:	43db      	mvns	r3, r3
 8007c52:	4924      	ldr	r1, [pc, #144]	; (8007ce4 <HAL_DMA_Init+0x168>)
 8007c54:	4013      	ands	r3, r2
 8007c56:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007c58:	4b22      	ldr	r3, [pc, #136]	; (8007ce4 <HAL_DMA_Init+0x168>)
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6859      	ldr	r1, [r3, #4]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c64:	f003 031c 	and.w	r3, r3, #28
 8007c68:	fa01 f303 	lsl.w	r3, r1, r3
 8007c6c:	491d      	ldr	r1, [pc, #116]	; (8007ce4 <HAL_DMA_Init+0x168>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	600b      	str	r3, [r1, #0]
 8007c72:	e019      	b.n	8007ca8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007c74:	4b1c      	ldr	r3, [pc, #112]	; (8007ce8 <HAL_DMA_Init+0x16c>)
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7c:	f003 031c 	and.w	r3, r3, #28
 8007c80:	210f      	movs	r1, #15
 8007c82:	fa01 f303 	lsl.w	r3, r1, r3
 8007c86:	43db      	mvns	r3, r3
 8007c88:	4917      	ldr	r1, [pc, #92]	; (8007ce8 <HAL_DMA_Init+0x16c>)
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007c8e:	4b16      	ldr	r3, [pc, #88]	; (8007ce8 <HAL_DMA_Init+0x16c>)
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6859      	ldr	r1, [r3, #4]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c9a:	f003 031c 	and.w	r3, r3, #28
 8007c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca2:	4911      	ldr	r1, [pc, #68]	; (8007ce8 <HAL_DMA_Init+0x16c>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	40020407 	.word	0x40020407
 8007cd0:	bffdfff8 	.word	0xbffdfff8
 8007cd4:	cccccccd 	.word	0xcccccccd
 8007cd8:	40020000 	.word	0x40020000
 8007cdc:	bffdfbf8 	.word	0xbffdfbf8
 8007ce0:	40020400 	.word	0x40020400
 8007ce4:	400200a8 	.word	0x400200a8
 8007ce8:	400204a8 	.word	0x400204a8

08007cec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
 8007cf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d101      	bne.n	8007d0c <HAL_DMA_Start_IT+0x20>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e04b      	b.n	8007da4 <HAL_DMA_Start_IT+0xb8>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d13a      	bne.n	8007d96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 0201 	bic.w	r2, r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	68b9      	ldr	r1, [r7, #8]
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f000 f96b 	bl	8008020 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d008      	beq.n	8007d64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f042 020e 	orr.w	r2, r2, #14
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	e00f      	b.n	8007d84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 0204 	bic.w	r2, r2, #4
 8007d72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 020a 	orr.w	r2, r2, #10
 8007d82:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f042 0201 	orr.w	r2, r2, #1
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	e005      	b.n	8007da2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007d9e:	2302      	movs	r3, #2
 8007da0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d008      	beq.n	8007dd6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2204      	movs	r2, #4
 8007dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e022      	b.n	8007e1c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f022 020e 	bic.w	r2, r2, #14
 8007de4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 0201 	bic.w	r2, r2, #1
 8007df4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfa:	f003 021c 	and.w	r2, r3, #28
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e02:	2101      	movs	r1, #1
 8007e04:	fa01 f202 	lsl.w	r2, r1, r2
 8007e08:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d005      	beq.n	8007e4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2204      	movs	r2, #4
 8007e44:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	73fb      	strb	r3, [r7, #15]
 8007e4a:	e029      	b.n	8007ea0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f022 020e 	bic.w	r2, r2, #14
 8007e5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 0201 	bic.w	r2, r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e70:	f003 021c 	and.w	r2, r3, #28
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e78:	2101      	movs	r1, #1
 8007e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8007e7e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d003      	beq.n	8007ea0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	4798      	blx	r3
    }
  }
  return status;
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec6:	f003 031c 	and.w	r3, r3, #28
 8007eca:	2204      	movs	r2, #4
 8007ecc:	409a      	lsls	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d026      	beq.n	8007f24 <HAL_DMA_IRQHandler+0x7a>
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	f003 0304 	and.w	r3, r3, #4
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d021      	beq.n	8007f24 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0320 	and.w	r3, r3, #32
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d107      	bne.n	8007efe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f022 0204 	bic.w	r2, r2, #4
 8007efc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f02:	f003 021c 	and.w	r2, r3, #28
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0a:	2104      	movs	r1, #4
 8007f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8007f10:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d071      	beq.n	8007ffe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007f22:	e06c      	b.n	8007ffe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f28:	f003 031c 	and.w	r3, r3, #28
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	409a      	lsls	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4013      	ands	r3, r2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d02e      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xec>
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d029      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0320 	and.w	r3, r3, #32
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10b      	bne.n	8007f68 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f022 020a 	bic.w	r2, r2, #10
 8007f5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6c:	f003 021c 	and.w	r2, r3, #28
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f74:	2102      	movs	r1, #2
 8007f76:	fa01 f202 	lsl.w	r2, r1, r2
 8007f7a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d038      	beq.n	8007ffe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007f94:	e033      	b.n	8007ffe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f9a:	f003 031c 	and.w	r3, r3, #28
 8007f9e:	2208      	movs	r2, #8
 8007fa0:	409a      	lsls	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d02a      	beq.n	8008000 <HAL_DMA_IRQHandler+0x156>
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f003 0308 	and.w	r3, r3, #8
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d025      	beq.n	8008000 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f022 020e 	bic.w	r2, r2, #14
 8007fc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc8:	f003 021c 	and.w	r2, r3, #28
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8007fd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d004      	beq.n	8008000 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007ffe:	bf00      	nop
 8008000:	bf00      	nop
}
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8008014:	4618      	mov	r0, r3
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008032:	f003 021c 	and.w	r2, r3, #28
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803a:	2101      	movs	r1, #1
 800803c:	fa01 f202 	lsl.w	r2, r1, r2
 8008040:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	2b10      	cmp	r3, #16
 8008050:	d108      	bne.n	8008064 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008062:	e007      	b.n	8008074 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	60da      	str	r2, [r3, #12]
}
 8008074:	bf00      	nop
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008080:	b480      	push	{r7}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800808a:	2300      	movs	r3, #0
 800808c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800808e:	e148      	b.n	8008322 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	2101      	movs	r1, #1
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	fa01 f303 	lsl.w	r3, r1, r3
 800809c:	4013      	ands	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 813a 	beq.w	800831c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f003 0303 	and.w	r3, r3, #3
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d005      	beq.n	80080c0 <HAL_GPIO_Init+0x40>
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f003 0303 	and.w	r3, r3, #3
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d130      	bne.n	8008122 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	2203      	movs	r2, #3
 80080cc:	fa02 f303 	lsl.w	r3, r2, r3
 80080d0:	43db      	mvns	r3, r3
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	4013      	ands	r3, r2
 80080d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	68da      	ldr	r2, [r3, #12]
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	fa02 f303 	lsl.w	r3, r2, r3
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80080f6:	2201      	movs	r2, #1
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	fa02 f303 	lsl.w	r3, r2, r3
 80080fe:	43db      	mvns	r3, r3
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	4013      	ands	r3, r2
 8008104:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	091b      	lsrs	r3, r3, #4
 800810c:	f003 0201 	and.w	r2, r3, #1
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	fa02 f303 	lsl.w	r3, r2, r3
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	4313      	orrs	r3, r2
 800811a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	2b03      	cmp	r3, #3
 800812c:	d017      	beq.n	800815e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	005b      	lsls	r3, r3, #1
 8008138:	2203      	movs	r2, #3
 800813a:	fa02 f303 	lsl.w	r3, r2, r3
 800813e:	43db      	mvns	r3, r3
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	4013      	ands	r3, r2
 8008144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	689a      	ldr	r2, [r3, #8]
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	005b      	lsls	r3, r3, #1
 800814e:	fa02 f303 	lsl.w	r3, r2, r3
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	4313      	orrs	r3, r2
 8008156:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f003 0303 	and.w	r3, r3, #3
 8008166:	2b02      	cmp	r3, #2
 8008168:	d123      	bne.n	80081b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	08da      	lsrs	r2, r3, #3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	3208      	adds	r2, #8
 8008172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008176:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	f003 0307 	and.w	r3, r3, #7
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	220f      	movs	r2, #15
 8008182:	fa02 f303 	lsl.w	r3, r2, r3
 8008186:	43db      	mvns	r3, r3
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	4013      	ands	r3, r2
 800818c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	691a      	ldr	r2, [r3, #16]
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f003 0307 	and.w	r3, r3, #7
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	fa02 f303 	lsl.w	r3, r2, r3
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	08da      	lsrs	r2, r3, #3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3208      	adds	r2, #8
 80081ac:	6939      	ldr	r1, [r7, #16]
 80081ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	005b      	lsls	r3, r3, #1
 80081bc:	2203      	movs	r2, #3
 80081be:	fa02 f303 	lsl.w	r3, r2, r3
 80081c2:	43db      	mvns	r3, r3
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	4013      	ands	r3, r2
 80081c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f003 0203 	and.w	r2, r3, #3
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	fa02 f303 	lsl.w	r3, r2, r3
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	4313      	orrs	r3, r2
 80081de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 8094 	beq.w	800831c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081f4:	4b52      	ldr	r3, [pc, #328]	; (8008340 <HAL_GPIO_Init+0x2c0>)
 80081f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081f8:	4a51      	ldr	r2, [pc, #324]	; (8008340 <HAL_GPIO_Init+0x2c0>)
 80081fa:	f043 0301 	orr.w	r3, r3, #1
 80081fe:	6613      	str	r3, [r2, #96]	; 0x60
 8008200:	4b4f      	ldr	r3, [pc, #316]	; (8008340 <HAL_GPIO_Init+0x2c0>)
 8008202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	60bb      	str	r3, [r7, #8]
 800820a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800820c:	4a4d      	ldr	r2, [pc, #308]	; (8008344 <HAL_GPIO_Init+0x2c4>)
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	089b      	lsrs	r3, r3, #2
 8008212:	3302      	adds	r3, #2
 8008214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008218:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f003 0303 	and.w	r3, r3, #3
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	220f      	movs	r2, #15
 8008224:	fa02 f303 	lsl.w	r3, r2, r3
 8008228:	43db      	mvns	r3, r3
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	4013      	ands	r3, r2
 800822e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008236:	d00d      	beq.n	8008254 <HAL_GPIO_Init+0x1d4>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a43      	ldr	r2, [pc, #268]	; (8008348 <HAL_GPIO_Init+0x2c8>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d007      	beq.n	8008250 <HAL_GPIO_Init+0x1d0>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a42      	ldr	r2, [pc, #264]	; (800834c <HAL_GPIO_Init+0x2cc>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d101      	bne.n	800824c <HAL_GPIO_Init+0x1cc>
 8008248:	2302      	movs	r3, #2
 800824a:	e004      	b.n	8008256 <HAL_GPIO_Init+0x1d6>
 800824c:	2307      	movs	r3, #7
 800824e:	e002      	b.n	8008256 <HAL_GPIO_Init+0x1d6>
 8008250:	2301      	movs	r3, #1
 8008252:	e000      	b.n	8008256 <HAL_GPIO_Init+0x1d6>
 8008254:	2300      	movs	r3, #0
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	f002 0203 	and.w	r2, r2, #3
 800825c:	0092      	lsls	r2, r2, #2
 800825e:	4093      	lsls	r3, r2
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	4313      	orrs	r3, r2
 8008264:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008266:	4937      	ldr	r1, [pc, #220]	; (8008344 <HAL_GPIO_Init+0x2c4>)
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	089b      	lsrs	r3, r3, #2
 800826c:	3302      	adds	r3, #2
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008274:	4b36      	ldr	r3, [pc, #216]	; (8008350 <HAL_GPIO_Init+0x2d0>)
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	43db      	mvns	r3, r3
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	4013      	ands	r3, r2
 8008282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d003      	beq.n	8008298 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4313      	orrs	r3, r2
 8008296:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008298:	4a2d      	ldr	r2, [pc, #180]	; (8008350 <HAL_GPIO_Init+0x2d0>)
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800829e:	4b2c      	ldr	r3, [pc, #176]	; (8008350 <HAL_GPIO_Init+0x2d0>)
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	43db      	mvns	r3, r3
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	4013      	ands	r3, r2
 80082ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4313      	orrs	r3, r2
 80082c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80082c2:	4a23      	ldr	r2, [pc, #140]	; (8008350 <HAL_GPIO_Init+0x2d0>)
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80082c8:	4b21      	ldr	r3, [pc, #132]	; (8008350 <HAL_GPIO_Init+0x2d0>)
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	43db      	mvns	r3, r3
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	4013      	ands	r3, r2
 80082d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d003      	beq.n	80082ec <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80082ec:	4a18      	ldr	r2, [pc, #96]	; (8008350 <HAL_GPIO_Init+0x2d0>)
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80082f2:	4b17      	ldr	r3, [pc, #92]	; (8008350 <HAL_GPIO_Init+0x2d0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	43db      	mvns	r3, r3
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	4013      	ands	r3, r2
 8008300:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d003      	beq.n	8008316 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	4313      	orrs	r3, r2
 8008314:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008316:	4a0e      	ldr	r2, [pc, #56]	; (8008350 <HAL_GPIO_Init+0x2d0>)
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	3301      	adds	r3, #1
 8008320:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	fa22 f303 	lsr.w	r3, r2, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	f47f aeaf 	bne.w	8008090 <HAL_GPIO_Init+0x10>
  }
}
 8008332:	bf00      	nop
 8008334:	bf00      	nop
 8008336:	371c      	adds	r7, #28
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	40021000 	.word	0x40021000
 8008344:	40010000 	.word	0x40010000
 8008348:	48000400 	.word	0x48000400
 800834c:	48000800 	.word	0x48000800
 8008350:	40010400 	.word	0x40010400

08008354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	460b      	mov	r3, r1
 800835e:	807b      	strh	r3, [r7, #2]
 8008360:	4613      	mov	r3, r2
 8008362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008364:	787b      	ldrb	r3, [r7, #1]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800836a:	887a      	ldrh	r2, [r7, #2]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008370:	e002      	b.n	8008378 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008372:	887a      	ldrh	r2, [r7, #2]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	4603      	mov	r3, r0
 800838c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800838e:	4b08      	ldr	r3, [pc, #32]	; (80083b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008390:	695a      	ldr	r2, [r3, #20]
 8008392:	88fb      	ldrh	r3, [r7, #6]
 8008394:	4013      	ands	r3, r2
 8008396:	2b00      	cmp	r3, #0
 8008398:	d006      	beq.n	80083a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800839a:	4a05      	ldr	r2, [pc, #20]	; (80083b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800839c:	88fb      	ldrh	r3, [r7, #6]
 800839e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80083a0:	88fb      	ldrh	r3, [r7, #6]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7f9 fb98 	bl	8001ad8 <HAL_GPIO_EXTI_Callback>
  }
}
 80083a8:	bf00      	nop
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	40010400 	.word	0x40010400

080083b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e08d      	b.n	80084e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d106      	bne.n	80083e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7f9 fabe 	bl	800195c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2224      	movs	r2, #36	; 0x24
 80083e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f022 0201 	bic.w	r2, r2, #1
 80083f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008404:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689a      	ldr	r2, [r3, #8]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008414:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d107      	bne.n	800842e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	689a      	ldr	r2, [r3, #8]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800842a:	609a      	str	r2, [r3, #8]
 800842c:	e006      	b.n	800843c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	689a      	ldr	r2, [r3, #8]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800843a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	2b02      	cmp	r3, #2
 8008442:	d108      	bne.n	8008456 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685a      	ldr	r2, [r3, #4]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008452:	605a      	str	r2, [r3, #4]
 8008454:	e007      	b.n	8008466 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008464:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	6812      	ldr	r2, [r2, #0]
 8008470:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008478:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68da      	ldr	r2, [r3, #12]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008488:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	691a      	ldr	r2, [r3, #16]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	69d9      	ldr	r1, [r3, #28]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a1a      	ldr	r2, [r3, #32]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	430a      	orrs	r2, r1
 80084b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f042 0201 	orr.w	r2, r2, #1
 80084c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2220      	movs	r2, #32
 80084ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
	...

080084ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b088      	sub	sp, #32
 80084f0:	af02      	add	r7, sp, #8
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	607a      	str	r2, [r7, #4]
 80084f6:	461a      	mov	r2, r3
 80084f8:	460b      	mov	r3, r1
 80084fa:	817b      	strh	r3, [r7, #10]
 80084fc:	4613      	mov	r3, r2
 80084fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b20      	cmp	r3, #32
 800850a:	f040 80fd 	bne.w	8008708 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008514:	2b01      	cmp	r3, #1
 8008516:	d101      	bne.n	800851c <HAL_I2C_Master_Transmit+0x30>
 8008518:	2302      	movs	r3, #2
 800851a:	e0f6      	b.n	800870a <HAL_I2C_Master_Transmit+0x21e>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008524:	f7fd ff48 	bl	80063b8 <HAL_GetTick>
 8008528:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	2319      	movs	r3, #25
 8008530:	2201      	movs	r2, #1
 8008532:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 fdea 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e0e1      	b.n	800870a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2221      	movs	r2, #33	; 0x21
 800854a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2210      	movs	r2, #16
 8008552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	893a      	ldrh	r2, [r7, #8]
 8008566:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008572:	b29b      	uxth	r3, r3
 8008574:	2bff      	cmp	r3, #255	; 0xff
 8008576:	d906      	bls.n	8008586 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	22ff      	movs	r2, #255	; 0xff
 800857c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800857e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008582:	617b      	str	r3, [r7, #20]
 8008584:	e007      	b.n	8008596 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800858a:	b29a      	uxth	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008590:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008594:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800859a:	2b00      	cmp	r3, #0
 800859c:	d024      	beq.n	80085e8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a2:	781a      	ldrb	r2, [r3, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	1c5a      	adds	r2, r3, #1
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	3b01      	subs	r3, #1
 80085bc:	b29a      	uxth	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085c6:	3b01      	subs	r3, #1
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	3301      	adds	r3, #1
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	8979      	ldrh	r1, [r7, #10]
 80085da:	4b4e      	ldr	r3, [pc, #312]	; (8008714 <HAL_I2C_Master_Transmit+0x228>)
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 ffd1 	bl	8009588 <I2C_TransferConfig>
 80085e6:	e066      	b.n	80086b6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	8979      	ldrh	r1, [r7, #10]
 80085f0:	4b48      	ldr	r3, [pc, #288]	; (8008714 <HAL_I2C_Master_Transmit+0x228>)
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f000 ffc6 	bl	8009588 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80085fc:	e05b      	b.n	80086b6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085fe:	693a      	ldr	r2, [r7, #16]
 8008600:	6a39      	ldr	r1, [r7, #32]
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f000 fdd3 	bl	80091ae <I2C_WaitOnTXISFlagUntilTimeout>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e07b      	b.n	800870a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008616:	781a      	ldrb	r2, [r3, #0]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008622:	1c5a      	adds	r2, r3, #1
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800862c:	b29b      	uxth	r3, r3
 800862e:	3b01      	subs	r3, #1
 8008630:	b29a      	uxth	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800863a:	3b01      	subs	r3, #1
 800863c:	b29a      	uxth	r2, r3
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008646:	b29b      	uxth	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d034      	beq.n	80086b6 <HAL_I2C_Master_Transmit+0x1ca>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008650:	2b00      	cmp	r3, #0
 8008652:	d130      	bne.n	80086b6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	2200      	movs	r2, #0
 800865c:	2180      	movs	r1, #128	; 0x80
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 fd56 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e04d      	b.n	800870a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008672:	b29b      	uxth	r3, r3
 8008674:	2bff      	cmp	r3, #255	; 0xff
 8008676:	d90e      	bls.n	8008696 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	22ff      	movs	r2, #255	; 0xff
 800867c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008682:	b2da      	uxtb	r2, r3
 8008684:	8979      	ldrh	r1, [r7, #10]
 8008686:	2300      	movs	r3, #0
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f000 ff7a 	bl	8009588 <I2C_TransferConfig>
 8008694:	e00f      	b.n	80086b6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800869a:	b29a      	uxth	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	8979      	ldrh	r1, [r7, #10]
 80086a8:	2300      	movs	r3, #0
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f000 ff69 	bl	8009588 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d19e      	bne.n	80085fe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	6a39      	ldr	r1, [r7, #32]
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 fdb9 	bl	800923c <I2C_WaitOnSTOPFlagUntilTimeout>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d001      	beq.n	80086d4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e01a      	b.n	800870a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2220      	movs	r2, #32
 80086da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6859      	ldr	r1, [r3, #4]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <HAL_I2C_Master_Transmit+0x22c>)
 80086e8:	400b      	ands	r3, r1
 80086ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2220      	movs	r2, #32
 80086f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	e000      	b.n	800870a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008708:	2302      	movs	r3, #2
  }
}
 800870a:	4618      	mov	r0, r3
 800870c:	3718      	adds	r7, #24
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	80002000 	.word	0x80002000
 8008718:	fe00e800 	.word	0xfe00e800

0800871c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b088      	sub	sp, #32
 8008720:	af02      	add	r7, sp, #8
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	607a      	str	r2, [r7, #4]
 8008726:	461a      	mov	r2, r3
 8008728:	460b      	mov	r3, r1
 800872a:	817b      	strh	r3, [r7, #10]
 800872c:	4613      	mov	r3, r2
 800872e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b20      	cmp	r3, #32
 800873a:	f040 80db 	bne.w	80088f4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008744:	2b01      	cmp	r3, #1
 8008746:	d101      	bne.n	800874c <HAL_I2C_Master_Receive+0x30>
 8008748:	2302      	movs	r3, #2
 800874a:	e0d4      	b.n	80088f6 <HAL_I2C_Master_Receive+0x1da>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008754:	f7fd fe30 	bl	80063b8 <HAL_GetTick>
 8008758:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	2319      	movs	r3, #25
 8008760:	2201      	movs	r2, #1
 8008762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f000 fcd2 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e0bf      	b.n	80088f6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2222      	movs	r2, #34	; 0x22
 800877a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2210      	movs	r2, #16
 8008782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	893a      	ldrh	r2, [r7, #8]
 8008796:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	2bff      	cmp	r3, #255	; 0xff
 80087a6:	d90e      	bls.n	80087c6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	22ff      	movs	r2, #255	; 0xff
 80087ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	8979      	ldrh	r1, [r7, #10]
 80087b6:	4b52      	ldr	r3, [pc, #328]	; (8008900 <HAL_I2C_Master_Receive+0x1e4>)
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f000 fee2 	bl	8009588 <I2C_TransferConfig>
 80087c4:	e06d      	b.n	80088a2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	8979      	ldrh	r1, [r7, #10]
 80087d8:	4b49      	ldr	r3, [pc, #292]	; (8008900 <HAL_I2C_Master_Receive+0x1e4>)
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f000 fed1 	bl	8009588 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80087e6:	e05c      	b.n	80088a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	6a39      	ldr	r1, [r7, #32]
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 fd69 	bl	80092c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e07c      	b.n	80088f6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008806:	b2d2      	uxtb	r2, r2
 8008808:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880e:	1c5a      	adds	r2, r3, #1
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008818:	3b01      	subs	r3, #1
 800881a:	b29a      	uxth	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008824:	b29b      	uxth	r3, r3
 8008826:	3b01      	subs	r3, #1
 8008828:	b29a      	uxth	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008832:	b29b      	uxth	r3, r3
 8008834:	2b00      	cmp	r3, #0
 8008836:	d034      	beq.n	80088a2 <HAL_I2C_Master_Receive+0x186>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800883c:	2b00      	cmp	r3, #0
 800883e:	d130      	bne.n	80088a2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	6a3b      	ldr	r3, [r7, #32]
 8008846:	2200      	movs	r2, #0
 8008848:	2180      	movs	r1, #128	; 0x80
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f000 fc60 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e04d      	b.n	80088f6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800885e:	b29b      	uxth	r3, r3
 8008860:	2bff      	cmp	r3, #255	; 0xff
 8008862:	d90e      	bls.n	8008882 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	22ff      	movs	r2, #255	; 0xff
 8008868:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800886e:	b2da      	uxtb	r2, r3
 8008870:	8979      	ldrh	r1, [r7, #10]
 8008872:	2300      	movs	r3, #0
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f000 fe84 	bl	8009588 <I2C_TransferConfig>
 8008880:	e00f      	b.n	80088a2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008886:	b29a      	uxth	r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008890:	b2da      	uxtb	r2, r3
 8008892:	8979      	ldrh	r1, [r7, #10]
 8008894:	2300      	movs	r3, #0
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 fe73 	bl	8009588 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d19d      	bne.n	80087e8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	6a39      	ldr	r1, [r7, #32]
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 fcc3 	bl	800923c <I2C_WaitOnSTOPFlagUntilTimeout>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e01a      	b.n	80088f6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2220      	movs	r2, #32
 80088c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6859      	ldr	r1, [r3, #4]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	4b0c      	ldr	r3, [pc, #48]	; (8008904 <HAL_I2C_Master_Receive+0x1e8>)
 80088d4:	400b      	ands	r3, r1
 80088d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2220      	movs	r2, #32
 80088dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	e000      	b.n	80088f6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80088f4:	2302      	movs	r3, #2
  }
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	80002400 	.word	0x80002400
 8008904:	fe00e800 	.word	0xfe00e800

08008908 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b088      	sub	sp, #32
 800890c:	af02      	add	r7, sp, #8
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	4608      	mov	r0, r1
 8008912:	4611      	mov	r1, r2
 8008914:	461a      	mov	r2, r3
 8008916:	4603      	mov	r3, r0
 8008918:	817b      	strh	r3, [r7, #10]
 800891a:	460b      	mov	r3, r1
 800891c:	813b      	strh	r3, [r7, #8]
 800891e:	4613      	mov	r3, r2
 8008920:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b20      	cmp	r3, #32
 800892c:	f040 80f9 	bne.w	8008b22 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <HAL_I2C_Mem_Write+0x34>
 8008936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008938:	2b00      	cmp	r3, #0
 800893a:	d105      	bne.n	8008948 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008942:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e0ed      	b.n	8008b24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800894e:	2b01      	cmp	r3, #1
 8008950:	d101      	bne.n	8008956 <HAL_I2C_Mem_Write+0x4e>
 8008952:	2302      	movs	r3, #2
 8008954:	e0e6      	b.n	8008b24 <HAL_I2C_Mem_Write+0x21c>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800895e:	f7fd fd2b 	bl	80063b8 <HAL_GetTick>
 8008962:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	2319      	movs	r3, #25
 800896a:	2201      	movs	r2, #1
 800896c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 fbcd 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e0d1      	b.n	8008b24 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2221      	movs	r2, #33	; 0x21
 8008984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2240      	movs	r2, #64	; 0x40
 800898c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6a3a      	ldr	r2, [r7, #32]
 800899a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80089a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80089a8:	88f8      	ldrh	r0, [r7, #6]
 80089aa:	893a      	ldrh	r2, [r7, #8]
 80089ac:	8979      	ldrh	r1, [r7, #10]
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	9301      	str	r3, [sp, #4]
 80089b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	4603      	mov	r3, r0
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 fadd 	bl	8008f78 <I2C_RequestMemoryWrite>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d005      	beq.n	80089d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e0a9      	b.n	8008b24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	2bff      	cmp	r3, #255	; 0xff
 80089d8:	d90e      	bls.n	80089f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	22ff      	movs	r2, #255	; 0xff
 80089de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	8979      	ldrh	r1, [r7, #10]
 80089e8:	2300      	movs	r3, #0
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 fdc9 	bl	8009588 <I2C_TransferConfig>
 80089f6:	e00f      	b.n	8008a18 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	8979      	ldrh	r1, [r7, #10]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 fdb8 	bl	8009588 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 fbc6 	bl	80091ae <I2C_WaitOnTXISFlagUntilTimeout>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e07b      	b.n	8008b24 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	781a      	ldrb	r2, [r3, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	1c5a      	adds	r2, r3, #1
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a54:	3b01      	subs	r3, #1
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d034      	beq.n	8008ad0 <HAL_I2C_Mem_Write+0x1c8>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d130      	bne.n	8008ad0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a74:	2200      	movs	r2, #0
 8008a76:	2180      	movs	r1, #128	; 0x80
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 fb49 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e04d      	b.n	8008b24 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	2bff      	cmp	r3, #255	; 0xff
 8008a90:	d90e      	bls.n	8008ab0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	22ff      	movs	r2, #255	; 0xff
 8008a96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	8979      	ldrh	r1, [r7, #10]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f000 fd6d 	bl	8009588 <I2C_TransferConfig>
 8008aae:	e00f      	b.n	8008ad0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	8979      	ldrh	r1, [r7, #10]
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 fd5c 	bl	8009588 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d19e      	bne.n	8008a18 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f000 fbac 	bl	800923c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e01a      	b.n	8008b24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2220      	movs	r2, #32
 8008af4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6859      	ldr	r1, [r3, #4]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	4b0a      	ldr	r3, [pc, #40]	; (8008b2c <HAL_I2C_Mem_Write+0x224>)
 8008b02:	400b      	ands	r3, r1
 8008b04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	e000      	b.n	8008b24 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008b22:	2302      	movs	r3, #2
  }
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	fe00e800 	.word	0xfe00e800

08008b30 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b088      	sub	sp, #32
 8008b34:	af02      	add	r7, sp, #8
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	4608      	mov	r0, r1
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	4603      	mov	r3, r0
 8008b40:	817b      	strh	r3, [r7, #10]
 8008b42:	460b      	mov	r3, r1
 8008b44:	813b      	strh	r3, [r7, #8]
 8008b46:	4613      	mov	r3, r2
 8008b48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b20      	cmp	r3, #32
 8008b54:	f040 80fd 	bne.w	8008d52 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <HAL_I2C_Mem_Read+0x34>
 8008b5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d105      	bne.n	8008b70 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e0f1      	b.n	8008d54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d101      	bne.n	8008b7e <HAL_I2C_Mem_Read+0x4e>
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	e0ea      	b.n	8008d54 <HAL_I2C_Mem_Read+0x224>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b86:	f7fd fc17 	bl	80063b8 <HAL_GetTick>
 8008b8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	2319      	movs	r3, #25
 8008b92:	2201      	movs	r2, #1
 8008b94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 fab9 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e0d5      	b.n	8008d54 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2222      	movs	r2, #34	; 0x22
 8008bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2240      	movs	r2, #64	; 0x40
 8008bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6a3a      	ldr	r2, [r7, #32]
 8008bc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008bd0:	88f8      	ldrh	r0, [r7, #6]
 8008bd2:	893a      	ldrh	r2, [r7, #8]
 8008bd4:	8979      	ldrh	r1, [r7, #10]
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	4603      	mov	r3, r0
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 fa1d 	bl	8009020 <I2C_RequestMemoryRead>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d005      	beq.n	8008bf8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e0ad      	b.n	8008d54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	2bff      	cmp	r3, #255	; 0xff
 8008c00:	d90e      	bls.n	8008c20 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	22ff      	movs	r2, #255	; 0xff
 8008c06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	8979      	ldrh	r1, [r7, #10]
 8008c10:	4b52      	ldr	r3, [pc, #328]	; (8008d5c <HAL_I2C_Mem_Read+0x22c>)
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f000 fcb5 	bl	8009588 <I2C_TransferConfig>
 8008c1e:	e00f      	b.n	8008c40 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	8979      	ldrh	r1, [r7, #10]
 8008c32:	4b4a      	ldr	r3, [pc, #296]	; (8008d5c <HAL_I2C_Mem_Read+0x22c>)
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f000 fca4 	bl	8009588 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c46:	2200      	movs	r2, #0
 8008c48:	2104      	movs	r1, #4
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f000 fa60 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e07c      	b.n	8008d54 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c64:	b2d2      	uxtb	r2, r2
 8008c66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6c:	1c5a      	adds	r2, r3, #1
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c76:	3b01      	subs	r3, #1
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	3b01      	subs	r3, #1
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d034      	beq.n	8008d00 <HAL_I2C_Mem_Read+0x1d0>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d130      	bne.n	8008d00 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	2180      	movs	r1, #128	; 0x80
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f000 fa31 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e04d      	b.n	8008d54 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	2bff      	cmp	r3, #255	; 0xff
 8008cc0:	d90e      	bls.n	8008ce0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	22ff      	movs	r2, #255	; 0xff
 8008cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	8979      	ldrh	r1, [r7, #10]
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f000 fc55 	bl	8009588 <I2C_TransferConfig>
 8008cde:	e00f      	b.n	8008d00 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	8979      	ldrh	r1, [r7, #10]
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f000 fc44 	bl	8009588 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d19a      	bne.n	8008c40 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 fa94 	bl	800923c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e01a      	b.n	8008d54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2220      	movs	r2, #32
 8008d24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6859      	ldr	r1, [r3, #4]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	4b0b      	ldr	r3, [pc, #44]	; (8008d60 <HAL_I2C_Mem_Read+0x230>)
 8008d32:	400b      	ands	r3, r1
 8008d34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2220      	movs	r2, #32
 8008d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e000      	b.n	8008d54 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008d52:	2302      	movs	r3, #2
  }
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3718      	adds	r7, #24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	80002400 	.word	0x80002400
 8008d60:	fe00e800 	.word	0xfe00e800

08008d64 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b08a      	sub	sp, #40	; 0x28
 8008d68:	af02      	add	r7, sp, #8
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	607a      	str	r2, [r7, #4]
 8008d6e:	603b      	str	r3, [r7, #0]
 8008d70:	460b      	mov	r3, r1
 8008d72:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8008d74:	2300      	movs	r3, #0
 8008d76:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b20      	cmp	r3, #32
 8008d82:	f040 80f3 	bne.w	8008f6c <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d94:	d101      	bne.n	8008d9a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8008d96:	2302      	movs	r3, #2
 8008d98:	e0e9      	b.n	8008f6e <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d101      	bne.n	8008da8 <HAL_I2C_IsDeviceReady+0x44>
 8008da4:	2302      	movs	r3, #2
 8008da6:	e0e2      	b.n	8008f6e <HAL_I2C_IsDeviceReady+0x20a>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2224      	movs	r2, #36	; 0x24
 8008db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d107      	bne.n	8008dd6 <HAL_I2C_IsDeviceReady+0x72>
 8008dc6:	897b      	ldrh	r3, [r7, #10]
 8008dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008dd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008dd4:	e006      	b.n	8008de4 <HAL_I2C_IsDeviceReady+0x80>
 8008dd6:	897b      	ldrh	r3, [r7, #10]
 8008dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ddc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008de0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	6812      	ldr	r2, [r2, #0]
 8008de8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8008dea:	f7fd fae5 	bl	80063b8 <HAL_GetTick>
 8008dee:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	f003 0320 	and.w	r3, r3, #32
 8008dfa:	2b20      	cmp	r3, #32
 8008dfc:	bf0c      	ite	eq
 8008dfe:	2301      	moveq	r3, #1
 8008e00:	2300      	movne	r3, #0
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	f003 0310 	and.w	r3, r3, #16
 8008e10:	2b10      	cmp	r3, #16
 8008e12:	bf0c      	ite	eq
 8008e14:	2301      	moveq	r3, #1
 8008e16:	2300      	movne	r3, #0
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008e1c:	e034      	b.n	8008e88 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e24:	d01a      	beq.n	8008e5c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008e26:	f7fd fac7 	bl	80063b8 <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	683a      	ldr	r2, [r7, #0]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d302      	bcc.n	8008e3c <HAL_I2C_IsDeviceReady+0xd8>
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10f      	bne.n	8008e5c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2220      	movs	r2, #32
 8008e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e48:	f043 0220 	orr.w	r2, r3, #32
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e088      	b.n	8008f6e <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	699b      	ldr	r3, [r3, #24]
 8008e62:	f003 0320 	and.w	r3, r3, #32
 8008e66:	2b20      	cmp	r3, #32
 8008e68:	bf0c      	ite	eq
 8008e6a:	2301      	moveq	r3, #1
 8008e6c:	2300      	movne	r3, #0
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	2b10      	cmp	r3, #16
 8008e7e:	bf0c      	ite	eq
 8008e80:	2301      	moveq	r3, #1
 8008e82:	2300      	movne	r3, #0
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008e88:	7ffb      	ldrb	r3, [r7, #31]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d102      	bne.n	8008e94 <HAL_I2C_IsDeviceReady+0x130>
 8008e8e:	7fbb      	ldrb	r3, [r7, #30]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d0c4      	beq.n	8008e1e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	699b      	ldr	r3, [r3, #24]
 8008e9a:	f003 0310 	and.w	r3, r3, #16
 8008e9e:	2b10      	cmp	r3, #16
 8008ea0:	d01a      	beq.n	8008ed8 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	2120      	movs	r1, #32
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f000 f92f 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e058      	b.n	8008f6e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	e04a      	b.n	8008f6e <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	2120      	movs	r1, #32
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f000 f914 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e03d      	b.n	8008f6e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2210      	movs	r2, #16
 8008ef8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2220      	movs	r2, #32
 8008f00:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d118      	bne.n	8008f3c <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	685a      	ldr	r2, [r3, #4]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f18:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2200      	movs	r2, #0
 8008f22:	2120      	movs	r1, #32
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 f8f3 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	e01c      	b.n	8008f6e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2220      	movs	r2, #32
 8008f3a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	f63f af39 	bhi.w	8008dbe <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2220      	movs	r2, #32
 8008f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f58:	f043 0220 	orr.w	r2, r3, #32
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e000      	b.n	8008f6e <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8008f6c:	2302      	movs	r3, #2
  }
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3720      	adds	r7, #32
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
	...

08008f78 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af02      	add	r7, sp, #8
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	4608      	mov	r0, r1
 8008f82:	4611      	mov	r1, r2
 8008f84:	461a      	mov	r2, r3
 8008f86:	4603      	mov	r3, r0
 8008f88:	817b      	strh	r3, [r7, #10]
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	813b      	strh	r3, [r7, #8]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008f92:	88fb      	ldrh	r3, [r7, #6]
 8008f94:	b2da      	uxtb	r2, r3
 8008f96:	8979      	ldrh	r1, [r7, #10]
 8008f98:	4b20      	ldr	r3, [pc, #128]	; (800901c <I2C_RequestMemoryWrite+0xa4>)
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f000 faf1 	bl	8009588 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fa6:	69fa      	ldr	r2, [r7, #28]
 8008fa8:	69b9      	ldr	r1, [r7, #24]
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 f8ff 	bl	80091ae <I2C_WaitOnTXISFlagUntilTimeout>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e02c      	b.n	8009014 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008fba:	88fb      	ldrh	r3, [r7, #6]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d105      	bne.n	8008fcc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008fc0:	893b      	ldrh	r3, [r7, #8]
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	629a      	str	r2, [r3, #40]	; 0x28
 8008fca:	e015      	b.n	8008ff8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008fcc:	893b      	ldrh	r3, [r7, #8]
 8008fce:	0a1b      	lsrs	r3, r3, #8
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fda:	69fa      	ldr	r2, [r7, #28]
 8008fdc:	69b9      	ldr	r1, [r7, #24]
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f000 f8e5 	bl	80091ae <I2C_WaitOnTXISFlagUntilTimeout>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e012      	b.n	8009014 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008fee:	893b      	ldrh	r3, [r7, #8]
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	2200      	movs	r2, #0
 8009000:	2180      	movs	r1, #128	; 0x80
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f000 f884 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e000      	b.n	8009014 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	80002000 	.word	0x80002000

08009020 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af02      	add	r7, sp, #8
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	4608      	mov	r0, r1
 800902a:	4611      	mov	r1, r2
 800902c:	461a      	mov	r2, r3
 800902e:	4603      	mov	r3, r0
 8009030:	817b      	strh	r3, [r7, #10]
 8009032:	460b      	mov	r3, r1
 8009034:	813b      	strh	r3, [r7, #8]
 8009036:	4613      	mov	r3, r2
 8009038:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800903a:	88fb      	ldrh	r3, [r7, #6]
 800903c:	b2da      	uxtb	r2, r3
 800903e:	8979      	ldrh	r1, [r7, #10]
 8009040:	4b20      	ldr	r3, [pc, #128]	; (80090c4 <I2C_RequestMemoryRead+0xa4>)
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	2300      	movs	r3, #0
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f000 fa9e 	bl	8009588 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800904c:	69fa      	ldr	r2, [r7, #28]
 800904e:	69b9      	ldr	r1, [r7, #24]
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f000 f8ac 	bl	80091ae <I2C_WaitOnTXISFlagUntilTimeout>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d001      	beq.n	8009060 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e02c      	b.n	80090ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009060:	88fb      	ldrh	r3, [r7, #6]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d105      	bne.n	8009072 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009066:	893b      	ldrh	r3, [r7, #8]
 8009068:	b2da      	uxtb	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	629a      	str	r2, [r3, #40]	; 0x28
 8009070:	e015      	b.n	800909e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009072:	893b      	ldrh	r3, [r7, #8]
 8009074:	0a1b      	lsrs	r3, r3, #8
 8009076:	b29b      	uxth	r3, r3
 8009078:	b2da      	uxtb	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009080:	69fa      	ldr	r2, [r7, #28]
 8009082:	69b9      	ldr	r1, [r7, #24]
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f000 f892 	bl	80091ae <I2C_WaitOnTXISFlagUntilTimeout>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d001      	beq.n	8009094 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e012      	b.n	80090ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009094:	893b      	ldrh	r3, [r7, #8]
 8009096:	b2da      	uxtb	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	2200      	movs	r2, #0
 80090a6:	2140      	movs	r1, #64	; 0x40
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f000 f831 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e000      	b.n	80090ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	80002000 	.word	0x80002000

080090c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	699b      	ldr	r3, [r3, #24]
 80090d6:	f003 0302 	and.w	r3, r3, #2
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d103      	bne.n	80090e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2200      	movs	r2, #0
 80090e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d007      	beq.n	8009104 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	699a      	ldr	r2, [r3, #24]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f042 0201 	orr.w	r2, r2, #1
 8009102:	619a      	str	r2, [r3, #24]
  }
}
 8009104:	bf00      	nop
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	603b      	str	r3, [r7, #0]
 800911c:	4613      	mov	r3, r2
 800911e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009120:	e031      	b.n	8009186 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009128:	d02d      	beq.n	8009186 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800912a:	f7fd f945 	bl	80063b8 <HAL_GetTick>
 800912e:	4602      	mov	r2, r0
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	683a      	ldr	r2, [r7, #0]
 8009136:	429a      	cmp	r2, r3
 8009138:	d302      	bcc.n	8009140 <I2C_WaitOnFlagUntilTimeout+0x30>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d122      	bne.n	8009186 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	699a      	ldr	r2, [r3, #24]
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	4013      	ands	r3, r2
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	429a      	cmp	r2, r3
 800914e:	bf0c      	ite	eq
 8009150:	2301      	moveq	r3, #1
 8009152:	2300      	movne	r3, #0
 8009154:	b2db      	uxtb	r3, r3
 8009156:	461a      	mov	r2, r3
 8009158:	79fb      	ldrb	r3, [r7, #7]
 800915a:	429a      	cmp	r2, r3
 800915c:	d113      	bne.n	8009186 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009162:	f043 0220 	orr.w	r2, r3, #32
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2220      	movs	r2, #32
 800916e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e00f      	b.n	80091a6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	699a      	ldr	r2, [r3, #24]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	4013      	ands	r3, r2
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	429a      	cmp	r2, r3
 8009194:	bf0c      	ite	eq
 8009196:	2301      	moveq	r3, #1
 8009198:	2300      	movne	r3, #0
 800919a:	b2db      	uxtb	r3, r3
 800919c:	461a      	mov	r2, r3
 800919e:	79fb      	ldrb	r3, [r7, #7]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d0be      	beq.n	8009122 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	60f8      	str	r0, [r7, #12]
 80091b6:	60b9      	str	r1, [r7, #8]
 80091b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80091ba:	e033      	b.n	8009224 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	68b9      	ldr	r1, [r7, #8]
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f000 f901 	bl	80093c8 <I2C_IsErrorOccurred>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d001      	beq.n	80091d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e031      	b.n	8009234 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d6:	d025      	beq.n	8009224 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091d8:	f7fd f8ee 	bl	80063b8 <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d302      	bcc.n	80091ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d11a      	bne.n	8009224 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	f003 0302 	and.w	r3, r3, #2
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d013      	beq.n	8009224 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009200:	f043 0220 	orr.w	r2, r3, #32
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2220      	movs	r2, #32
 800920c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e007      	b.n	8009234 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	f003 0302 	and.w	r3, r3, #2
 800922e:	2b02      	cmp	r3, #2
 8009230:	d1c4      	bne.n	80091bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009248:	e02f      	b.n	80092aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	68b9      	ldr	r1, [r7, #8]
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f000 f8ba 	bl	80093c8 <I2C_IsErrorOccurred>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e02d      	b.n	80092ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800925e:	f7fd f8ab 	bl	80063b8 <HAL_GetTick>
 8009262:	4602      	mov	r2, r0
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	429a      	cmp	r2, r3
 800926c:	d302      	bcc.n	8009274 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d11a      	bne.n	80092aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	f003 0320 	and.w	r3, r3, #32
 800927e:	2b20      	cmp	r3, #32
 8009280:	d013      	beq.n	80092aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009286:	f043 0220 	orr.w	r2, r3, #32
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2220      	movs	r2, #32
 8009292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e007      	b.n	80092ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	f003 0320 	and.w	r3, r3, #32
 80092b4:	2b20      	cmp	r3, #32
 80092b6:	d1c8      	bne.n	800924a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80092d0:	e06b      	b.n	80093aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	68b9      	ldr	r1, [r7, #8]
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f000 f876 	bl	80093c8 <I2C_IsErrorOccurred>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d001      	beq.n	80092e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e069      	b.n	80093ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	f003 0320 	and.w	r3, r3, #32
 80092f0:	2b20      	cmp	r3, #32
 80092f2:	d138      	bne.n	8009366 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	699b      	ldr	r3, [r3, #24]
 80092fa:	f003 0304 	and.w	r3, r3, #4
 80092fe:	2b04      	cmp	r3, #4
 8009300:	d105      	bne.n	800930e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	e055      	b.n	80093ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	f003 0310 	and.w	r3, r3, #16
 8009318:	2b10      	cmp	r3, #16
 800931a:	d107      	bne.n	800932c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2210      	movs	r2, #16
 8009322:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2204      	movs	r2, #4
 8009328:	645a      	str	r2, [r3, #68]	; 0x44
 800932a:	e002      	b.n	8009332 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2220      	movs	r2, #32
 8009338:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	6859      	ldr	r1, [r3, #4]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	4b1f      	ldr	r3, [pc, #124]	; (80093c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8009346:	400b      	ands	r3, r1
 8009348:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2220      	movs	r2, #32
 800934e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	e029      	b.n	80093ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009366:	f7fd f827 	bl	80063b8 <HAL_GetTick>
 800936a:	4602      	mov	r2, r0
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	429a      	cmp	r2, r3
 8009374:	d302      	bcc.n	800937c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d116      	bne.n	80093aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	f003 0304 	and.w	r3, r3, #4
 8009386:	2b04      	cmp	r3, #4
 8009388:	d00f      	beq.n	80093aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800938e:	f043 0220 	orr.w	r2, r3, #32
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2220      	movs	r2, #32
 800939a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e007      	b.n	80093ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	f003 0304 	and.w	r3, r3, #4
 80093b4:	2b04      	cmp	r3, #4
 80093b6:	d18c      	bne.n	80092d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	fe00e800 	.word	0xfe00e800

080093c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b08a      	sub	sp, #40	; 0x28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	f003 0310 	and.w	r3, r3, #16
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d068      	beq.n	80094c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2210      	movs	r2, #16
 80093fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80093fc:	e049      	b.n	8009492 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009404:	d045      	beq.n	8009492 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009406:	f7fc ffd7 	bl	80063b8 <HAL_GetTick>
 800940a:	4602      	mov	r2, r0
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	429a      	cmp	r2, r3
 8009414:	d302      	bcc.n	800941c <I2C_IsErrorOccurred+0x54>
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d13a      	bne.n	8009492 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009426:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800942e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	699b      	ldr	r3, [r3, #24]
 8009436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800943a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800943e:	d121      	bne.n	8009484 <I2C_IsErrorOccurred+0xbc>
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009446:	d01d      	beq.n	8009484 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009448:	7cfb      	ldrb	r3, [r7, #19]
 800944a:	2b20      	cmp	r3, #32
 800944c:	d01a      	beq.n	8009484 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	685a      	ldr	r2, [r3, #4]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800945c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800945e:	f7fc ffab 	bl	80063b8 <HAL_GetTick>
 8009462:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009464:	e00e      	b.n	8009484 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009466:	f7fc ffa7 	bl	80063b8 <HAL_GetTick>
 800946a:	4602      	mov	r2, r0
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	2b19      	cmp	r3, #25
 8009472:	d907      	bls.n	8009484 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	f043 0320 	orr.w	r3, r3, #32
 800947a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009482:	e006      	b.n	8009492 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	f003 0320 	and.w	r3, r3, #32
 800948e:	2b20      	cmp	r3, #32
 8009490:	d1e9      	bne.n	8009466 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	f003 0320 	and.w	r3, r3, #32
 800949c:	2b20      	cmp	r3, #32
 800949e:	d003      	beq.n	80094a8 <I2C_IsErrorOccurred+0xe0>
 80094a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d0aa      	beq.n	80093fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80094a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d103      	bne.n	80094b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2220      	movs	r2, #32
 80094b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	f043 0304 	orr.w	r3, r3, #4
 80094be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00b      	beq.n	80094f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80094d8:	6a3b      	ldr	r3, [r7, #32]
 80094da:	f043 0301 	orr.w	r3, r3, #1
 80094de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00b      	beq.n	8009512 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	f043 0308 	orr.w	r3, r3, #8
 8009500:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800950a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00b      	beq.n	8009534 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	f043 0302 	orr.w	r3, r3, #2
 8009522:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800952c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009538:	2b00      	cmp	r3, #0
 800953a:	d01c      	beq.n	8009576 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f7ff fdc3 	bl	80090c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6859      	ldr	r1, [r3, #4]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	4b0d      	ldr	r3, [pc, #52]	; (8009584 <I2C_IsErrorOccurred+0x1bc>)
 800954e:	400b      	ands	r3, r1
 8009550:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009556:	6a3b      	ldr	r3, [r7, #32]
 8009558:	431a      	orrs	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2220      	movs	r2, #32
 8009562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800957a:	4618      	mov	r0, r3
 800957c:	3728      	adds	r7, #40	; 0x28
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	fe00e800 	.word	0xfe00e800

08009588 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009588:	b480      	push	{r7}
 800958a:	b087      	sub	sp, #28
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	607b      	str	r3, [r7, #4]
 8009592:	460b      	mov	r3, r1
 8009594:	817b      	strh	r3, [r7, #10]
 8009596:	4613      	mov	r3, r2
 8009598:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800959a:	897b      	ldrh	r3, [r7, #10]
 800959c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80095a0:	7a7b      	ldrb	r3, [r7, #9]
 80095a2:	041b      	lsls	r3, r3, #16
 80095a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	6a3b      	ldr	r3, [r7, #32]
 80095c0:	0d5b      	lsrs	r3, r3, #21
 80095c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80095c6:	4b08      	ldr	r3, [pc, #32]	; (80095e8 <I2C_TransferConfig+0x60>)
 80095c8:	430b      	orrs	r3, r1
 80095ca:	43db      	mvns	r3, r3
 80095cc:	ea02 0103 	and.w	r1, r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	430a      	orrs	r2, r1
 80095d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80095da:	bf00      	nop
 80095dc:	371c      	adds	r7, #28
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	03ff63ff 	.word	0x03ff63ff

080095ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b20      	cmp	r3, #32
 8009600:	d138      	bne.n	8009674 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009608:	2b01      	cmp	r3, #1
 800960a:	d101      	bne.n	8009610 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800960c:	2302      	movs	r3, #2
 800960e:	e032      	b.n	8009676 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2224      	movs	r2, #36	; 0x24
 800961c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f022 0201 	bic.w	r2, r2, #1
 800962e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800963e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6819      	ldr	r1, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	683a      	ldr	r2, [r7, #0]
 800964c:	430a      	orrs	r2, r1
 800964e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f042 0201 	orr.w	r2, r2, #1
 800965e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2220      	movs	r2, #32
 8009664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	e000      	b.n	8009676 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009674:	2302      	movs	r3, #2
  }
}
 8009676:	4618      	mov	r0, r3
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009682:	b480      	push	{r7}
 8009684:	b085      	sub	sp, #20
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b20      	cmp	r3, #32
 8009696:	d139      	bne.n	800970c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d101      	bne.n	80096a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80096a2:	2302      	movs	r3, #2
 80096a4:	e033      	b.n	800970e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2224      	movs	r2, #36	; 0x24
 80096b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f022 0201 	bic.w	r2, r2, #1
 80096c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80096d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	021b      	lsls	r3, r3, #8
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	4313      	orrs	r3, r2
 80096de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f042 0201 	orr.w	r2, r2, #1
 80096f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2220      	movs	r2, #32
 80096fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	e000      	b.n	800970e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800970c:	2302      	movs	r3, #2
  }
}
 800970e:	4618      	mov	r0, r3
 8009710:	3714      	adds	r7, #20
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
	...

0800971c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009724:	4b0b      	ldr	r3, [pc, #44]	; (8009754 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009728:	4a0a      	ldr	r2, [pc, #40]	; (8009754 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800972a:	f043 0301 	orr.w	r3, r3, #1
 800972e:	6613      	str	r3, [r2, #96]	; 0x60
 8009730:	4b08      	ldr	r3, [pc, #32]	; (8009754 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009734:	f003 0301 	and.w	r3, r3, #1
 8009738:	60fb      	str	r3, [r7, #12]
 800973a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800973c:	4b06      	ldr	r3, [pc, #24]	; (8009758 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800973e:	685a      	ldr	r2, [r3, #4]
 8009740:	4905      	ldr	r1, [pc, #20]	; (8009758 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4313      	orrs	r3, r2
 8009746:	604b      	str	r3, [r1, #4]
}
 8009748:	bf00      	nop
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr
 8009754:	40021000 	.word	0x40021000
 8009758:	40010000 	.word	0x40010000

0800975c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800975c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800975e:	b08b      	sub	sp, #44	; 0x2c
 8009760:	af06      	add	r7, sp, #24
 8009762:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d101      	bne.n	800976e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e0f8      	b.n	8009960 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8009774:	b2db      	uxtb	r3, r3
 8009776:	2b00      	cmp	r3, #0
 8009778:	d106      	bne.n	8009788 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f00b fef4 	bl	8015570 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2203      	movs	r2, #3
 800978c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4618      	mov	r0, r3
 8009796:	f006 fc49 	bl	801002c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	603b      	str	r3, [r7, #0]
 80097a0:	687e      	ldr	r6, [r7, #4]
 80097a2:	466d      	mov	r5, sp
 80097a4:	f106 0410 	add.w	r4, r6, #16
 80097a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097ac:	6823      	ldr	r3, [r4, #0]
 80097ae:	602b      	str	r3, [r5, #0]
 80097b0:	1d33      	adds	r3, r6, #4
 80097b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097b4:	6838      	ldr	r0, [r7, #0]
 80097b6:	f006 fc11 	bl	800ffdc <USB_CoreInit>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d005      	beq.n	80097cc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2202      	movs	r2, #2
 80097c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e0c9      	b.n	8009960 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2100      	movs	r1, #0
 80097d2:	4618      	mov	r0, r3
 80097d4:	f006 fc45 	bl	8010062 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80097d8:	2300      	movs	r3, #0
 80097da:	73fb      	strb	r3, [r7, #15]
 80097dc:	e040      	b.n	8009860 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80097de:	7bfb      	ldrb	r3, [r7, #15]
 80097e0:	6879      	ldr	r1, [r7, #4]
 80097e2:	1c5a      	adds	r2, r3, #1
 80097e4:	4613      	mov	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	00db      	lsls	r3, r3, #3
 80097ec:	440b      	add	r3, r1
 80097ee:	3301      	adds	r3, #1
 80097f0:	2201      	movs	r2, #1
 80097f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80097f4:	7bfb      	ldrb	r3, [r7, #15]
 80097f6:	6879      	ldr	r1, [r7, #4]
 80097f8:	1c5a      	adds	r2, r3, #1
 80097fa:	4613      	mov	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	00db      	lsls	r3, r3, #3
 8009802:	440b      	add	r3, r1
 8009804:	7bfa      	ldrb	r2, [r7, #15]
 8009806:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009808:	7bfb      	ldrb	r3, [r7, #15]
 800980a:	6879      	ldr	r1, [r7, #4]
 800980c:	1c5a      	adds	r2, r3, #1
 800980e:	4613      	mov	r3, r2
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	4413      	add	r3, r2
 8009814:	00db      	lsls	r3, r3, #3
 8009816:	440b      	add	r3, r1
 8009818:	3303      	adds	r3, #3
 800981a:	2200      	movs	r2, #0
 800981c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800981e:	7bfa      	ldrb	r2, [r7, #15]
 8009820:	6879      	ldr	r1, [r7, #4]
 8009822:	4613      	mov	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4413      	add	r3, r2
 8009828:	00db      	lsls	r3, r3, #3
 800982a:	440b      	add	r3, r1
 800982c:	3338      	adds	r3, #56	; 0x38
 800982e:	2200      	movs	r2, #0
 8009830:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009832:	7bfa      	ldrb	r2, [r7, #15]
 8009834:	6879      	ldr	r1, [r7, #4]
 8009836:	4613      	mov	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	00db      	lsls	r3, r3, #3
 800983e:	440b      	add	r3, r1
 8009840:	333c      	adds	r3, #60	; 0x3c
 8009842:	2200      	movs	r2, #0
 8009844:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009846:	7bfa      	ldrb	r2, [r7, #15]
 8009848:	6879      	ldr	r1, [r7, #4]
 800984a:	4613      	mov	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	00db      	lsls	r3, r3, #3
 8009852:	440b      	add	r3, r1
 8009854:	3340      	adds	r3, #64	; 0x40
 8009856:	2200      	movs	r2, #0
 8009858:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800985a:	7bfb      	ldrb	r3, [r7, #15]
 800985c:	3301      	adds	r3, #1
 800985e:	73fb      	strb	r3, [r7, #15]
 8009860:	7bfa      	ldrb	r2, [r7, #15]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	429a      	cmp	r2, r3
 8009868:	d3b9      	bcc.n	80097de <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800986a:	2300      	movs	r3, #0
 800986c:	73fb      	strb	r3, [r7, #15]
 800986e:	e044      	b.n	80098fa <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009870:	7bfa      	ldrb	r2, [r7, #15]
 8009872:	6879      	ldr	r1, [r7, #4]
 8009874:	4613      	mov	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	00db      	lsls	r3, r3, #3
 800987c:	440b      	add	r3, r1
 800987e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8009882:	2200      	movs	r2, #0
 8009884:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009886:	7bfa      	ldrb	r2, [r7, #15]
 8009888:	6879      	ldr	r1, [r7, #4]
 800988a:	4613      	mov	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4413      	add	r3, r2
 8009890:	00db      	lsls	r3, r3, #3
 8009892:	440b      	add	r3, r1
 8009894:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009898:	7bfa      	ldrb	r2, [r7, #15]
 800989a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800989c:	7bfa      	ldrb	r2, [r7, #15]
 800989e:	6879      	ldr	r1, [r7, #4]
 80098a0:	4613      	mov	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4413      	add	r3, r2
 80098a6:	00db      	lsls	r3, r3, #3
 80098a8:	440b      	add	r3, r1
 80098aa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80098ae:	2200      	movs	r2, #0
 80098b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80098b2:	7bfa      	ldrb	r2, [r7, #15]
 80098b4:	6879      	ldr	r1, [r7, #4]
 80098b6:	4613      	mov	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4413      	add	r3, r2
 80098bc:	00db      	lsls	r3, r3, #3
 80098be:	440b      	add	r3, r1
 80098c0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80098c4:	2200      	movs	r2, #0
 80098c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80098c8:	7bfa      	ldrb	r2, [r7, #15]
 80098ca:	6879      	ldr	r1, [r7, #4]
 80098cc:	4613      	mov	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	4413      	add	r3, r2
 80098d2:	00db      	lsls	r3, r3, #3
 80098d4:	440b      	add	r3, r1
 80098d6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80098da:	2200      	movs	r2, #0
 80098dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80098de:	7bfa      	ldrb	r2, [r7, #15]
 80098e0:	6879      	ldr	r1, [r7, #4]
 80098e2:	4613      	mov	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	00db      	lsls	r3, r3, #3
 80098ea:	440b      	add	r3, r1
 80098ec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80098f0:	2200      	movs	r2, #0
 80098f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
 80098f6:	3301      	adds	r3, #1
 80098f8:	73fb      	strb	r3, [r7, #15]
 80098fa:	7bfa      	ldrb	r2, [r7, #15]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	429a      	cmp	r2, r3
 8009902:	d3b5      	bcc.n	8009870 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	603b      	str	r3, [r7, #0]
 800990a:	687e      	ldr	r6, [r7, #4]
 800990c:	466d      	mov	r5, sp
 800990e:	f106 0410 	add.w	r4, r6, #16
 8009912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	602b      	str	r3, [r5, #0]
 800991a:	1d33      	adds	r3, r6, #4
 800991c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800991e:	6838      	ldr	r0, [r7, #0]
 8009920:	f006 fbac 	bl	801007c <USB_DevInit>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d005      	beq.n	8009936 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2202      	movs	r2, #2
 800992e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e014      	b.n	8009960 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	69db      	ldr	r3, [r3, #28]
 800994a:	2b01      	cmp	r3, #1
 800994c:	d102      	bne.n	8009954 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f001 fc58 	bl	800b204 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4618      	mov	r0, r3
 800995a:	f008 fe3d 	bl	80125d8 <USB_DevDisconnect>

  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3714      	adds	r7, #20
 8009964:	46bd      	mov	sp, r7
 8009966:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009968 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009976:	2b01      	cmp	r3, #1
 8009978:	d101      	bne.n	800997e <HAL_PCD_Start+0x16>
 800997a:	2302      	movs	r3, #2
 800997c:	e012      	b.n	80099a4 <HAL_PCD_Start+0x3c>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4618      	mov	r0, r3
 800998c:	f006 fb37 	bl	800fffe <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4618      	mov	r0, r3
 8009996:	f008 fe08 	bl	80125aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4618      	mov	r0, r3
 80099ba:	f008 fe22 	bl	8012602 <USB_ReadInterrupts>
 80099be:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fb13 	bl	8009ff6 <PCD_EP_ISR_Handler>

    return;
 80099d0:	e110      	b.n	8009bf4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d013      	beq.n	8009a04 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099ee:	b292      	uxth	r2, r2
 80099f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f00b fe36 	bl	8015666 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80099fa:	2100      	movs	r1, #0
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f8fc 	bl	8009bfa <HAL_PCD_SetAddress>

    return;
 8009a02:	e0f7      	b.n	8009bf4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00c      	beq.n	8009a28 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009a20:	b292      	uxth	r2, r2
 8009a22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009a26:	e0e5      	b.n	8009bf4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00c      	beq.n	8009a4c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a44:	b292      	uxth	r2, r2
 8009a46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009a4a:	e0d3      	b.n	8009bf4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d034      	beq.n	8009ac0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f022 0204 	bic.w	r2, r2, #4
 8009a68:	b292      	uxth	r2, r2
 8009a6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 0208 	bic.w	r2, r2, #8
 8009a80:	b292      	uxth	r2, r2
 8009a82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d107      	bne.n	8009aa0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009a98:	2100      	movs	r1, #0
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f00c f894 	bl	8015bc8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f00b fe19 	bl	80156d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009ab8:	b292      	uxth	r2, r2
 8009aba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009abe:	e099      	b.n	8009bf4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d027      	beq.n	8009b1a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f042 0208 	orr.w	r2, r2, #8
 8009adc:	b292      	uxth	r2, r2
 8009ade:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009af4:	b292      	uxth	r2, r2
 8009af6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f042 0204 	orr.w	r2, r2, #4
 8009b0c:	b292      	uxth	r2, r2
 8009b0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f00b fdc6 	bl	80156a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009b18:	e06c      	b.n	8009bf4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d040      	beq.n	8009ba6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b36:	b292      	uxth	r2, r2
 8009b38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d12b      	bne.n	8009b9e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f042 0204 	orr.w	r2, r2, #4
 8009b58:	b292      	uxth	r2, r2
 8009b5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f042 0208 	orr.w	r2, r2, #8
 8009b70:	b292      	uxth	r2, r2
 8009b72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	089b      	lsrs	r3, r3, #2
 8009b8a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009b94:	2101      	movs	r1, #1
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f00c f816 	bl	8015bc8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8009b9c:	e02a      	b.n	8009bf4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f00b fd80 	bl	80156a4 <HAL_PCD_SuspendCallback>
    return;
 8009ba4:	e026      	b.n	8009bf4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00f      	beq.n	8009bd0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009bc2:	b292      	uxth	r2, r2
 8009bc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f00b fd3e 	bl	801564a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009bce:	e011      	b.n	8009bf4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00c      	beq.n	8009bf4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bec:	b292      	uxth	r2, r2
 8009bee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009bf2:	bf00      	nop
  }
}
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b082      	sub	sp, #8
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	460b      	mov	r3, r1
 8009c04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d101      	bne.n	8009c14 <HAL_PCD_SetAddress+0x1a>
 8009c10:	2302      	movs	r3, #2
 8009c12:	e013      	b.n	8009c3c <HAL_PCD_SetAddress+0x42>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	78fa      	ldrb	r2, [r7, #3]
 8009c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	78fa      	ldrb	r2, [r7, #3]
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f008 fca8 	bl	8012582 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	4608      	mov	r0, r1
 8009c4e:	4611      	mov	r1, r2
 8009c50:	461a      	mov	r2, r3
 8009c52:	4603      	mov	r3, r0
 8009c54:	70fb      	strb	r3, [r7, #3]
 8009c56:	460b      	mov	r3, r1
 8009c58:	803b      	strh	r3, [r7, #0]
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009c62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	da0e      	bge.n	8009c88 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c6a:	78fb      	ldrb	r3, [r7, #3]
 8009c6c:	f003 0307 	and.w	r3, r3, #7
 8009c70:	1c5a      	adds	r2, r3, #1
 8009c72:	4613      	mov	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	00db      	lsls	r3, r3, #3
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2201      	movs	r2, #1
 8009c84:	705a      	strb	r2, [r3, #1]
 8009c86:	e00e      	b.n	8009ca6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c88:	78fb      	ldrb	r3, [r7, #3]
 8009c8a:	f003 0207 	and.w	r2, r3, #7
 8009c8e:	4613      	mov	r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	00db      	lsls	r3, r3, #3
 8009c96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009ca6:	78fb      	ldrb	r3, [r7, #3]
 8009ca8:	f003 0307 	and.w	r3, r3, #7
 8009cac:	b2da      	uxtb	r2, r3
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009cb2:	883a      	ldrh	r2, [r7, #0]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	78ba      	ldrb	r2, [r7, #2]
 8009cbc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009cbe:	78bb      	ldrb	r3, [r7, #2]
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d102      	bne.n	8009cca <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d101      	bne.n	8009cd8 <HAL_PCD_EP_Open+0x94>
 8009cd4:	2302      	movs	r3, #2
 8009cd6:	e00e      	b.n	8009cf6 <HAL_PCD_EP_Open+0xb2>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68f9      	ldr	r1, [r7, #12]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f006 f9ea 	bl	80100c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8009cf4:	7afb      	ldrb	r3, [r7, #11]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b084      	sub	sp, #16
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	460b      	mov	r3, r1
 8009d08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009d0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	da0e      	bge.n	8009d30 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d12:	78fb      	ldrb	r3, [r7, #3]
 8009d14:	f003 0307 	and.w	r3, r3, #7
 8009d18:	1c5a      	adds	r2, r3, #1
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4413      	add	r3, r2
 8009d20:	00db      	lsls	r3, r3, #3
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	4413      	add	r3, r2
 8009d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	705a      	strb	r2, [r3, #1]
 8009d2e:	e00e      	b.n	8009d4e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d30:	78fb      	ldrb	r3, [r7, #3]
 8009d32:	f003 0207 	and.w	r2, r3, #7
 8009d36:	4613      	mov	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	4413      	add	r3, r2
 8009d3c:	00db      	lsls	r3, r3, #3
 8009d3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	4413      	add	r3, r2
 8009d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d4e:	78fb      	ldrb	r3, [r7, #3]
 8009d50:	f003 0307 	and.w	r3, r3, #7
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d101      	bne.n	8009d68 <HAL_PCD_EP_Close+0x6a>
 8009d64:	2302      	movs	r3, #2
 8009d66:	e00e      	b.n	8009d86 <HAL_PCD_EP_Close+0x88>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68f9      	ldr	r1, [r7, #12]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f006 fd66 	bl	8010848 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b086      	sub	sp, #24
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	60f8      	str	r0, [r7, #12]
 8009d96:	607a      	str	r2, [r7, #4]
 8009d98:	603b      	str	r3, [r7, #0]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d9e:	7afb      	ldrb	r3, [r7, #11]
 8009da0:	f003 0207 	and.w	r2, r3, #7
 8009da4:	4613      	mov	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	00db      	lsls	r3, r3, #3
 8009dac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	4413      	add	r3, r2
 8009db4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009dce:	7afb      	ldrb	r3, [r7, #11]
 8009dd0:	f003 0307 	and.w	r3, r3, #7
 8009dd4:	b2da      	uxtb	r2, r3
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	6979      	ldr	r1, [r7, #20]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f006 ff1e 	bl	8010c22 <USB_EPStartXfer>

  return HAL_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3718      	adds	r7, #24
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009dfc:	78fb      	ldrb	r3, [r7, #3]
 8009dfe:	f003 0207 	and.w	r2, r3, #7
 8009e02:	6879      	ldr	r1, [r7, #4]
 8009e04:	4613      	mov	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	00db      	lsls	r3, r3, #3
 8009e0c:	440b      	add	r3, r1
 8009e0e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8009e12:	681b      	ldr	r3, [r3, #0]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	607a      	str	r2, [r7, #4]
 8009e2a:	603b      	str	r3, [r7, #0]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e30:	7afb      	ldrb	r3, [r7, #11]
 8009e32:	f003 0307 	and.w	r3, r3, #7
 8009e36:	1c5a      	adds	r2, r3, #1
 8009e38:	4613      	mov	r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	4413      	add	r3, r2
 8009e3e:	00db      	lsls	r3, r3, #3
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	4413      	add	r3, r2
 8009e44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	2200      	movs	r2, #0
 8009e64:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e6c:	7afb      	ldrb	r3, [r7, #11]
 8009e6e:	f003 0307 	and.w	r3, r3, #7
 8009e72:	b2da      	uxtb	r2, r3
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6979      	ldr	r1, [r7, #20]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f006 fecf 	bl	8010c22 <USB_EPStartXfer>

  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3718      	adds	r7, #24
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b084      	sub	sp, #16
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	460b      	mov	r3, r1
 8009e98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009e9a:	78fb      	ldrb	r3, [r7, #3]
 8009e9c:	f003 0207 	and.w	r2, r3, #7
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d901      	bls.n	8009eac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e04c      	b.n	8009f46 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009eac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	da0e      	bge.n	8009ed2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009eb4:	78fb      	ldrb	r3, [r7, #3]
 8009eb6:	f003 0307 	and.w	r3, r3, #7
 8009eba:	1c5a      	adds	r2, r3, #1
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	00db      	lsls	r3, r3, #3
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	705a      	strb	r2, [r3, #1]
 8009ed0:	e00c      	b.n	8009eec <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009ed2:	78fa      	ldrb	r2, [r7, #3]
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	00db      	lsls	r3, r3, #3
 8009edc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ef2:	78fb      	ldrb	r3, [r7, #3]
 8009ef4:	f003 0307 	and.w	r3, r3, #7
 8009ef8:	b2da      	uxtb	r2, r3
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d101      	bne.n	8009f0c <HAL_PCD_EP_SetStall+0x7e>
 8009f08:	2302      	movs	r3, #2
 8009f0a:	e01c      	b.n	8009f46 <HAL_PCD_EP_SetStall+0xb8>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68f9      	ldr	r1, [r7, #12]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f008 fa32 	bl	8012384 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009f20:	78fb      	ldrb	r3, [r7, #3]
 8009f22:	f003 0307 	and.w	r3, r3, #7
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d108      	bne.n	8009f3c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009f34:	4619      	mov	r1, r3
 8009f36:	4610      	mov	r0, r2
 8009f38:	f008 fb73 	bl	8012622 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b084      	sub	sp, #16
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
 8009f56:	460b      	mov	r3, r1
 8009f58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009f5a:	78fb      	ldrb	r3, [r7, #3]
 8009f5c:	f003 020f 	and.w	r2, r3, #15
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d901      	bls.n	8009f6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e040      	b.n	8009fee <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009f6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	da0e      	bge.n	8009f92 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f74:	78fb      	ldrb	r3, [r7, #3]
 8009f76:	f003 0307 	and.w	r3, r3, #7
 8009f7a:	1c5a      	adds	r2, r3, #1
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	00db      	lsls	r3, r3, #3
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	4413      	add	r3, r2
 8009f88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	705a      	strb	r2, [r3, #1]
 8009f90:	e00e      	b.n	8009fb0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f92:	78fb      	ldrb	r3, [r7, #3]
 8009f94:	f003 0207 	and.w	r2, r3, #7
 8009f98:	4613      	mov	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4413      	add	r3, r2
 8009f9e:	00db      	lsls	r3, r3, #3
 8009fa0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009fb6:	78fb      	ldrb	r3, [r7, #3]
 8009fb8:	f003 0307 	and.w	r3, r3, #7
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d101      	bne.n	8009fd0 <HAL_PCD_EP_ClrStall+0x82>
 8009fcc:	2302      	movs	r3, #2
 8009fce:	e00e      	b.n	8009fee <HAL_PCD_EP_ClrStall+0xa0>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68f9      	ldr	r1, [r7, #12]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f008 fa21 	bl	8012426 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b096      	sub	sp, #88	; 0x58
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009ffe:	e3b1      	b.n	800a764 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a008:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a00c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a010:	b2db      	uxtb	r3, r3
 800a012:	f003 030f 	and.w	r3, r3, #15
 800a016:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800a01a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f040 8173 	bne.w	800a30a <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a024:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a028:	f003 0310 	and.w	r3, r3, #16
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d150      	bne.n	800a0d2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	881b      	ldrh	r3, [r3, #0]
 800a036:	b29b      	uxth	r3, r3
 800a038:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a03c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a040:	81fb      	strh	r3, [r7, #14]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	89fb      	ldrh	r3, [r7, #14]
 800a048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a04c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a050:	b29b      	uxth	r3, r3
 800a052:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	3328      	adds	r3, #40	; 0x28
 800a058:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a062:	b29b      	uxth	r3, r3
 800a064:	461a      	mov	r2, r3
 800a066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	00db      	lsls	r3, r3, #3
 800a06c:	4413      	add	r3, r2
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	6812      	ldr	r2, [r2, #0]
 800a072:	4413      	add	r3, r2
 800a074:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a078:	881b      	ldrh	r3, [r3, #0]
 800a07a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a07e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a080:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a084:	695a      	ldr	r2, [r3, #20]
 800a086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	441a      	add	r2, r3
 800a08c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a08e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a090:	2100      	movs	r1, #0
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f00b fabf 	bl	8015616 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 835f 	beq.w	800a764 <PCD_EP_ISR_Handler+0x76e>
 800a0a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f040 835a 	bne.w	800a764 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	b292      	uxth	r2, r2
 800a0c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a0d0:	e348      	b.n	800a764 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a0d8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	881b      	ldrh	r3, [r3, #0]
 800a0e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a0e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a0e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d032      	beq.n	800a156 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	00db      	lsls	r3, r3, #3
 800a102:	4413      	add	r3, r2
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	6812      	ldr	r2, [r2, #0]
 800a108:	4413      	add	r3, r2
 800a10a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a10e:	881b      	ldrh	r3, [r3, #0]
 800a110:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a116:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6818      	ldr	r0, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800a122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a124:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a128:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	f008 fac7 	bl	80126be <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	881b      	ldrh	r3, [r3, #0]
 800a136:	b29a      	uxth	r2, r3
 800a138:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a13c:	4013      	ands	r3, r2
 800a13e:	823b      	strh	r3, [r7, #16]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	8a3a      	ldrh	r2, [r7, #16]
 800a146:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a14a:	b292      	uxth	r2, r2
 800a14c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f00b fa34 	bl	80155bc <HAL_PCD_SetupStageCallback>
 800a154:	e306      	b.n	800a764 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a156:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f280 8302 	bge.w	800a764 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	881b      	ldrh	r3, [r3, #0]
 800a166:	b29a      	uxth	r2, r3
 800a168:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a16c:	4013      	ands	r3, r2
 800a16e:	83fb      	strh	r3, [r7, #30]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	8bfa      	ldrh	r2, [r7, #30]
 800a176:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a17a:	b292      	uxth	r2, r2
 800a17c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a186:	b29b      	uxth	r3, r3
 800a188:	461a      	mov	r2, r3
 800a18a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	00db      	lsls	r3, r3, #3
 800a190:	4413      	add	r3, r2
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	6812      	ldr	r2, [r2, #0]
 800a196:	4413      	add	r3, r2
 800a198:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a19c:	881b      	ldrh	r3, [r3, #0]
 800a19e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a1a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1a4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a1a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1a8:	69db      	ldr	r3, [r3, #28]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d019      	beq.n	800a1e2 <PCD_EP_ISR_Handler+0x1ec>
 800a1ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d015      	beq.n	800a1e2 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6818      	ldr	r0, [r3, #0]
 800a1ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1bc:	6959      	ldr	r1, [r3, #20]
 800a1be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1c0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a1c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1c4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	f008 fa79 	bl	80126be <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a1cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1ce:	695a      	ldr	r2, [r3, #20]
 800a1d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1d2:	69db      	ldr	r3, [r3, #28]
 800a1d4:	441a      	add	r2, r3
 800a1d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1d8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a1da:	2100      	movs	r1, #0
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f00b f9ff 	bl	80155e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	881b      	ldrh	r3, [r3, #0]
 800a1e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800a1ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a1f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f040 82b5 	bne.w	800a764 <PCD_EP_ISR_Handler+0x76e>
 800a1fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a1fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a202:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a206:	f000 82ad 	beq.w	800a764 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	61bb      	str	r3, [r7, #24]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a218:	b29b      	uxth	r3, r3
 800a21a:	461a      	mov	r2, r3
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	4413      	add	r3, r2
 800a220:	61bb      	str	r3, [r7, #24]
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a228:	617b      	str	r3, [r7, #20]
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	881b      	ldrh	r3, [r3, #0]
 800a22e:	b29b      	uxth	r3, r3
 800a230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a234:	b29a      	uxth	r2, r3
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	801a      	strh	r2, [r3, #0]
 800a23a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	2b3e      	cmp	r3, #62	; 0x3e
 800a240:	d91d      	bls.n	800a27e <PCD_EP_ISR_Handler+0x288>
 800a242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	095b      	lsrs	r3, r3, #5
 800a248:	647b      	str	r3, [r7, #68]	; 0x44
 800a24a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	f003 031f 	and.w	r3, r3, #31
 800a252:	2b00      	cmp	r3, #0
 800a254:	d102      	bne.n	800a25c <PCD_EP_ISR_Handler+0x266>
 800a256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a258:	3b01      	subs	r3, #1
 800a25a:	647b      	str	r3, [r7, #68]	; 0x44
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	881b      	ldrh	r3, [r3, #0]
 800a260:	b29a      	uxth	r2, r3
 800a262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a264:	b29b      	uxth	r3, r3
 800a266:	029b      	lsls	r3, r3, #10
 800a268:	b29b      	uxth	r3, r3
 800a26a:	4313      	orrs	r3, r2
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a276:	b29a      	uxth	r2, r3
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	801a      	strh	r2, [r3, #0]
 800a27c:	e026      	b.n	800a2cc <PCD_EP_ISR_Handler+0x2d6>
 800a27e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d10a      	bne.n	800a29c <PCD_EP_ISR_Handler+0x2a6>
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	881b      	ldrh	r3, [r3, #0]
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a294:	b29a      	uxth	r2, r3
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	801a      	strh	r2, [r3, #0]
 800a29a:	e017      	b.n	800a2cc <PCD_EP_ISR_Handler+0x2d6>
 800a29c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	085b      	lsrs	r3, r3, #1
 800a2a2:	647b      	str	r3, [r7, #68]	; 0x44
 800a2a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	f003 0301 	and.w	r3, r3, #1
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d002      	beq.n	800a2b6 <PCD_EP_ISR_Handler+0x2c0>
 800a2b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	647b      	str	r3, [r7, #68]	; 0x44
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	881b      	ldrh	r3, [r3, #0]
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	029b      	lsls	r3, r3, #10
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2dc:	827b      	strh	r3, [r7, #18]
 800a2de:	8a7b      	ldrh	r3, [r7, #18]
 800a2e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a2e4:	827b      	strh	r3, [r7, #18]
 800a2e6:	8a7b      	ldrh	r3, [r7, #18]
 800a2e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a2ec:	827b      	strh	r3, [r7, #18]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	8a7b      	ldrh	r3, [r7, #18]
 800a2f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a304:	b29b      	uxth	r3, r3
 800a306:	8013      	strh	r3, [r2, #0]
 800a308:	e22c      	b.n	800a764 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	461a      	mov	r2, r3
 800a310:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	881b      	ldrh	r3, [r3, #0]
 800a31a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a31e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a322:	2b00      	cmp	r3, #0
 800a324:	f280 80f6 	bge.w	800a514 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	461a      	mov	r2, r3
 800a32e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4413      	add	r3, r2
 800a336:	881b      	ldrh	r3, [r3, #0]
 800a338:	b29a      	uxth	r2, r3
 800a33a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a33e:	4013      	ands	r3, r2
 800a340:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	461a      	mov	r2, r3
 800a34a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4413      	add	r3, r2
 800a352:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800a356:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a35a:	b292      	uxth	r2, r2
 800a35c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a35e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800a362:	4613      	mov	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	4413      	add	r3, r2
 800a368:	00db      	lsls	r3, r3, #3
 800a36a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	4413      	add	r3, r2
 800a372:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a376:	7b1b      	ldrb	r3, [r3, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d123      	bne.n	800a3c4 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a384:	b29b      	uxth	r3, r3
 800a386:	461a      	mov	r2, r3
 800a388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	00db      	lsls	r3, r3, #3
 800a38e:	4413      	add	r3, r2
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	6812      	ldr	r2, [r2, #0]
 800a394:	4413      	add	r3, r2
 800a396:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a39a:	881b      	ldrh	r3, [r3, #0]
 800a39c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3a0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800a3a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 808e 	beq.w	800a4ca <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6818      	ldr	r0, [r3, #0]
 800a3b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3b4:	6959      	ldr	r1, [r3, #20]
 800a3b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3b8:	88da      	ldrh	r2, [r3, #6]
 800a3ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a3be:	f008 f97e 	bl	80126be <USB_ReadPMA>
 800a3c2:	e082      	b.n	800a4ca <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a3c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3c6:	78db      	ldrb	r3, [r3, #3]
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d10a      	bne.n	800a3e2 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a3cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 f9d3 	bl	800a780 <HAL_PCD_EP_DB_Receive>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800a3e0:	e073      	b.n	800a4ca <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	4413      	add	r3, r2
 800a3f0:	881b      	ldrh	r3, [r3, #0]
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3fc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	461a      	mov	r2, r3
 800a406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	441a      	add	r2, r3
 800a40e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a41a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a41e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a422:	b29b      	uxth	r3, r3
 800a424:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	461a      	mov	r2, r3
 800a42c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4413      	add	r3, r2
 800a434:	881b      	ldrh	r3, [r3, #0]
 800a436:	b29b      	uxth	r3, r3
 800a438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d022      	beq.n	800a486 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a448:	b29b      	uxth	r3, r3
 800a44a:	461a      	mov	r2, r3
 800a44c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	00db      	lsls	r3, r3, #3
 800a452:	4413      	add	r3, r2
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	6812      	ldr	r2, [r2, #0]
 800a458:	4413      	add	r3, r2
 800a45a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a45e:	881b      	ldrh	r3, [r3, #0]
 800a460:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a464:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a468:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d02c      	beq.n	800a4ca <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6818      	ldr	r0, [r3, #0]
 800a474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a476:	6959      	ldr	r1, [r3, #20]
 800a478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a47a:	891a      	ldrh	r2, [r3, #8]
 800a47c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a480:	f008 f91d 	bl	80126be <USB_ReadPMA>
 800a484:	e021      	b.n	800a4ca <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a48e:	b29b      	uxth	r3, r3
 800a490:	461a      	mov	r2, r3
 800a492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	00db      	lsls	r3, r3, #3
 800a498:	4413      	add	r3, r2
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	6812      	ldr	r2, [r2, #0]
 800a49e:	4413      	add	r3, r2
 800a4a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a4a4:	881b      	ldrh	r3, [r3, #0]
 800a4a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4aa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a4ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d009      	beq.n	800a4ca <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6818      	ldr	r0, [r3, #0]
 800a4ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4bc:	6959      	ldr	r1, [r3, #20]
 800a4be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4c0:	895a      	ldrh	r2, [r3, #10]
 800a4c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a4c6:	f008 f8fa 	bl	80126be <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a4ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4cc:	69da      	ldr	r2, [r3, #28]
 800a4ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a4d2:	441a      	add	r2, r3
 800a4d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a4d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4da:	695a      	ldr	r2, [r3, #20]
 800a4dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a4e0:	441a      	add	r2, r3
 800a4e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4e4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a4e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d005      	beq.n	800a4fa <PCD_EP_ISR_Handler+0x504>
 800a4ee:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800a4f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d206      	bcs.n	800a508 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a4fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	4619      	mov	r1, r3
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f00b f86d 	bl	80155e0 <HAL_PCD_DataOutStageCallback>
 800a506:	e005      	b.n	800a514 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a50e:	4618      	mov	r0, r3
 800a510:	f006 fb87 	bl	8010c22 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a514:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 8121 	beq.w	800a764 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 800a522:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a526:	1c5a      	adds	r2, r3, #1
 800a528:	4613      	mov	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4413      	add	r3, r2
 800a52e:	00db      	lsls	r3, r3, #3
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	4413      	add	r3, r2
 800a534:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	461a      	mov	r2, r3
 800a53c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4413      	add	r3, r2
 800a544:	881b      	ldrh	r3, [r3, #0]
 800a546:	b29b      	uxth	r3, r3
 800a548:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a54c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a550:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	461a      	mov	r2, r3
 800a55a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	441a      	add	r2, r3
 800a562:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a56a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a56e:	b29b      	uxth	r3, r3
 800a570:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a574:	78db      	ldrb	r3, [r3, #3]
 800a576:	2b01      	cmp	r3, #1
 800a578:	f040 80a2 	bne.w	800a6c0 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 800a57c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a57e:	2200      	movs	r2, #0
 800a580:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a584:	7b1b      	ldrb	r3, [r3, #12]
 800a586:	2b00      	cmp	r3, #0
 800a588:	f000 8093 	beq.w	800a6b2 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a58c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a594:	2b00      	cmp	r3, #0
 800a596:	d046      	beq.n	800a626 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a59a:	785b      	ldrb	r3, [r3, #1]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d126      	bne.n	800a5ee <PCD_EP_ISR_Handler+0x5f8>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b4:	4413      	add	r3, r2
 800a5b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a5b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	00da      	lsls	r2, r3, #3
 800a5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a5c6:	623b      	str	r3, [r7, #32]
 800a5c8:	6a3b      	ldr	r3, [r7, #32]
 800a5ca:	881b      	ldrh	r3, [r3, #0]
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	6a3b      	ldr	r3, [r7, #32]
 800a5d6:	801a      	strh	r2, [r3, #0]
 800a5d8:	6a3b      	ldr	r3, [r7, #32]
 800a5da:	881b      	ldrh	r3, [r3, #0]
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	6a3b      	ldr	r3, [r7, #32]
 800a5ea:	801a      	strh	r2, [r3, #0]
 800a5ec:	e061      	b.n	800a6b2 <PCD_EP_ISR_Handler+0x6bc>
 800a5ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5f0:	785b      	ldrb	r3, [r3, #1]
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d15d      	bne.n	800a6b2 <PCD_EP_ISR_Handler+0x6bc>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a604:	b29b      	uxth	r3, r3
 800a606:	461a      	mov	r2, r3
 800a608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60a:	4413      	add	r3, r2
 800a60c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a60e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	00da      	lsls	r2, r3, #3
 800a614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a616:	4413      	add	r3, r2
 800a618:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a61c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a620:	2200      	movs	r2, #0
 800a622:	801a      	strh	r2, [r3, #0]
 800a624:	e045      	b.n	800a6b2 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a62c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a62e:	785b      	ldrb	r3, [r3, #1]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d126      	bne.n	800a682 <PCD_EP_ISR_Handler+0x68c>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	637b      	str	r3, [r7, #52]	; 0x34
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a642:	b29b      	uxth	r3, r3
 800a644:	461a      	mov	r2, r3
 800a646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a648:	4413      	add	r3, r2
 800a64a:	637b      	str	r3, [r7, #52]	; 0x34
 800a64c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	00da      	lsls	r2, r3, #3
 800a652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a654:	4413      	add	r3, r2
 800a656:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a65a:	633b      	str	r3, [r7, #48]	; 0x30
 800a65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65e:	881b      	ldrh	r3, [r3, #0]
 800a660:	b29b      	uxth	r3, r3
 800a662:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a666:	b29a      	uxth	r2, r3
 800a668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66a:	801a      	strh	r2, [r3, #0]
 800a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66e:	881b      	ldrh	r3, [r3, #0]
 800a670:	b29b      	uxth	r3, r3
 800a672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67e:	801a      	strh	r2, [r3, #0]
 800a680:	e017      	b.n	800a6b2 <PCD_EP_ISR_Handler+0x6bc>
 800a682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a684:	785b      	ldrb	r3, [r3, #1]
 800a686:	2b01      	cmp	r3, #1
 800a688:	d113      	bne.n	800a6b2 <PCD_EP_ISR_Handler+0x6bc>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a692:	b29b      	uxth	r3, r3
 800a694:	461a      	mov	r2, r3
 800a696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a698:	4413      	add	r3, r2
 800a69a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a69c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	00da      	lsls	r2, r3, #3
 800a6a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a6aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a6b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f00a ffac 	bl	8015616 <HAL_PCD_DataInStageCallback>
 800a6be:	e051      	b.n	800a764 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800a6c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a6c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d144      	bne.n	800a756 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	00db      	lsls	r3, r3, #3
 800a6de:	4413      	add	r3, r2
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	6812      	ldr	r2, [r2, #0]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6ea:	881b      	ldrh	r3, [r3, #0]
 800a6ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800a6f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6f6:	699a      	ldr	r2, [r3, #24]
 800a6f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d907      	bls.n	800a710 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 800a700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a702:	699a      	ldr	r2, [r3, #24]
 800a704:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a708:	1ad2      	subs	r2, r2, r3
 800a70a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a70c:	619a      	str	r2, [r3, #24]
 800a70e:	e002      	b.n	800a716 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 800a710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a712:	2200      	movs	r2, #0
 800a714:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800a716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a718:	699b      	ldr	r3, [r3, #24]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d106      	bne.n	800a72c <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a71e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	4619      	mov	r1, r3
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f00a ff76 	bl	8015616 <HAL_PCD_DataInStageCallback>
 800a72a:	e01b      	b.n	800a764 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800a72c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a72e:	695a      	ldr	r2, [r3, #20]
 800a730:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a734:	441a      	add	r2, r3
 800a736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a738:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800a73a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a73c:	69da      	ldr	r2, [r3, #28]
 800a73e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a742:	441a      	add	r2, r3
 800a744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a746:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a74e:	4618      	mov	r0, r3
 800a750:	f006 fa67 	bl	8010c22 <USB_EPStartXfer>
 800a754:	e006      	b.n	800a764 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a756:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a75a:	461a      	mov	r2, r3
 800a75c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f917 	bl	800a992 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	b21b      	sxth	r3, r3
 800a770:	2b00      	cmp	r3, #0
 800a772:	f6ff ac45 	blt.w	800a000 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3758      	adds	r7, #88	; 0x58
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b088      	sub	sp, #32
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	4613      	mov	r3, r2
 800a78c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a78e:	88fb      	ldrh	r3, [r7, #6]
 800a790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a794:	2b00      	cmp	r3, #0
 800a796:	d07c      	beq.n	800a892 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	00db      	lsls	r3, r3, #3
 800a7aa:	4413      	add	r3, r2
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	6812      	ldr	r2, [r2, #0]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7bc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	699a      	ldr	r2, [r3, #24]
 800a7c2:	8b7b      	ldrh	r3, [r7, #26]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d306      	bcc.n	800a7d6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	699a      	ldr	r2, [r3, #24]
 800a7cc:	8b7b      	ldrh	r3, [r7, #26]
 800a7ce:	1ad2      	subs	r2, r2, r3
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	619a      	str	r2, [r3, #24]
 800a7d4:	e002      	b.n	800a7dc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d123      	bne.n	800a82c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	4413      	add	r3, r2
 800a7f2:	881b      	ldrh	r3, [r3, #0]
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7fe:	833b      	strh	r3, [r7, #24]
 800a800:	8b3b      	ldrh	r3, [r7, #24]
 800a802:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a806:	833b      	strh	r3, [r7, #24]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	461a      	mov	r2, r3
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	441a      	add	r2, r3
 800a816:	8b3b      	ldrh	r3, [r7, #24]
 800a818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a81c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a828:	b29b      	uxth	r3, r3
 800a82a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a82c:	88fb      	ldrh	r3, [r7, #6]
 800a82e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a832:	2b00      	cmp	r3, #0
 800a834:	d01f      	beq.n	800a876 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	461a      	mov	r2, r3
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	4413      	add	r3, r2
 800a844:	881b      	ldrh	r3, [r3, #0]
 800a846:	b29b      	uxth	r3, r3
 800a848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a84c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a850:	82fb      	strh	r3, [r7, #22]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	461a      	mov	r2, r3
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	441a      	add	r2, r3
 800a860:	8afb      	ldrh	r3, [r7, #22]
 800a862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a86a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a86e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a872:	b29b      	uxth	r3, r3
 800a874:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a876:	8b7b      	ldrh	r3, [r7, #26]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f000 8085 	beq.w	800a988 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6818      	ldr	r0, [r3, #0]
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	6959      	ldr	r1, [r3, #20]
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	891a      	ldrh	r2, [r3, #8]
 800a88a:	8b7b      	ldrh	r3, [r7, #26]
 800a88c:	f007 ff17 	bl	80126be <USB_ReadPMA>
 800a890:	e07a      	b.n	800a988 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	461a      	mov	r2, r3
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	00db      	lsls	r3, r3, #3
 800a8a4:	4413      	add	r3, r2
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	6812      	ldr	r2, [r2, #0]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a8b0:	881b      	ldrh	r3, [r3, #0]
 800a8b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8b6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	699a      	ldr	r2, [r3, #24]
 800a8bc:	8b7b      	ldrh	r3, [r7, #26]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d306      	bcc.n	800a8d0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	699a      	ldr	r2, [r3, #24]
 800a8c6:	8b7b      	ldrh	r3, [r7, #26]
 800a8c8:	1ad2      	subs	r2, r2, r3
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	619a      	str	r2, [r3, #24]
 800a8ce:	e002      	b.n	800a8d6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d123      	bne.n	800a926 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4413      	add	r3, r2
 800a8ec:	881b      	ldrh	r3, [r3, #0]
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8f8:	83fb      	strh	r3, [r7, #30]
 800a8fa:	8bfb      	ldrh	r3, [r7, #30]
 800a8fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a900:	83fb      	strh	r3, [r7, #30]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	461a      	mov	r2, r3
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	441a      	add	r2, r3
 800a910:	8bfb      	ldrh	r3, [r7, #30]
 800a912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a91a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a91e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a922:	b29b      	uxth	r3, r3
 800a924:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a926:	88fb      	ldrh	r3, [r7, #6]
 800a928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d11f      	bne.n	800a970 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	461a      	mov	r2, r3
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4413      	add	r3, r2
 800a93e:	881b      	ldrh	r3, [r3, #0]
 800a940:	b29b      	uxth	r3, r3
 800a942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a94a:	83bb      	strh	r3, [r7, #28]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	461a      	mov	r2, r3
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	441a      	add	r2, r3
 800a95a:	8bbb      	ldrh	r3, [r7, #28]
 800a95c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a968:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a970:	8b7b      	ldrh	r3, [r7, #26]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d008      	beq.n	800a988 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6818      	ldr	r0, [r3, #0]
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	6959      	ldr	r1, [r3, #20]
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	895a      	ldrh	r2, [r3, #10]
 800a982:	8b7b      	ldrh	r3, [r7, #26]
 800a984:	f007 fe9b 	bl	80126be <USB_ReadPMA>
    }
  }

  return count;
 800a988:	8b7b      	ldrh	r3, [r7, #26]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3720      	adds	r7, #32
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b0a4      	sub	sp, #144	; 0x90
 800a996:	af00      	add	r7, sp, #0
 800a998:	60f8      	str	r0, [r7, #12]
 800a99a:	60b9      	str	r1, [r7, #8]
 800a99c:	4613      	mov	r3, r2
 800a99e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a9a0:	88fb      	ldrh	r3, [r7, #6]
 800a9a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f000 81db 	beq.w	800ad62 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	00db      	lsls	r3, r3, #3
 800a9be:	4413      	add	r3, r2
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	6812      	ldr	r2, [r2, #0]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a9ca:	881b      	ldrh	r3, [r3, #0]
 800a9cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9d0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	699a      	ldr	r2, [r3, #24]
 800a9d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d907      	bls.n	800a9f0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	699a      	ldr	r2, [r3, #24]
 800a9e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a9e8:	1ad2      	subs	r2, r2, r3
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	619a      	str	r2, [r3, #24]
 800a9ee:	e002      	b.n	800a9f6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	f040 80b9 	bne.w	800ab72 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	785b      	ldrb	r3, [r3, #1]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d126      	bne.n	800aa56 <HAL_PCD_EP_DB_Transmit+0xc4>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	461a      	mov	r2, r3
 800aa1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1c:	4413      	add	r3, r2
 800aa1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	00da      	lsls	r2, r3, #3
 800aa26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa28:	4413      	add	r3, r2
 800aa2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3e:	801a      	strh	r2, [r3, #0]
 800aa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa42:	881b      	ldrh	r3, [r3, #0]
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa52:	801a      	strh	r2, [r3, #0]
 800aa54:	e01a      	b.n	800aa8c <HAL_PCD_EP_DB_Transmit+0xfa>
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	785b      	ldrb	r3, [r3, #1]
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d116      	bne.n	800aa8c <HAL_PCD_EP_DB_Transmit+0xfa>
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	637b      	str	r3, [r7, #52]	; 0x34
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	461a      	mov	r2, r3
 800aa70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa72:	4413      	add	r3, r2
 800aa74:	637b      	str	r3, [r7, #52]	; 0x34
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	00da      	lsls	r2, r3, #3
 800aa7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa7e:	4413      	add	r3, r2
 800aa80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa84:	633b      	str	r3, [r7, #48]	; 0x30
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	2200      	movs	r2, #0
 800aa8a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	627b      	str	r3, [r7, #36]	; 0x24
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	785b      	ldrb	r3, [r3, #1]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d126      	bne.n	800aae8 <HAL_PCD_EP_DB_Transmit+0x156>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	61fb      	str	r3, [r7, #28]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	461a      	mov	r2, r3
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	4413      	add	r3, r2
 800aab0:	61fb      	str	r3, [r7, #28]
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	00da      	lsls	r2, r3, #3
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	4413      	add	r3, r2
 800aabc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aac0:	61bb      	str	r3, [r7, #24]
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	881b      	ldrh	r3, [r3, #0]
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aacc:	b29a      	uxth	r2, r3
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	801a      	strh	r2, [r3, #0]
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	881b      	ldrh	r3, [r3, #0]
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aadc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	801a      	strh	r2, [r3, #0]
 800aae6:	e017      	b.n	800ab18 <HAL_PCD_EP_DB_Transmit+0x186>
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	785b      	ldrb	r3, [r3, #1]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d113      	bne.n	800ab18 <HAL_PCD_EP_DB_Transmit+0x186>
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	461a      	mov	r2, r3
 800aafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafe:	4413      	add	r3, r2
 800ab00:	627b      	str	r3, [r7, #36]	; 0x24
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	00da      	lsls	r2, r3, #3
 800ab08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0a:	4413      	add	r3, r2
 800ab0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab10:	623b      	str	r3, [r7, #32]
 800ab12:	6a3b      	ldr	r3, [r7, #32]
 800ab14:	2200      	movs	r2, #0
 800ab16:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f00a fd79 	bl	8015616 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ab24:	88fb      	ldrh	r3, [r7, #6]
 800ab26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f000 82fa 	beq.w	800b124 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	461a      	mov	r2, r3
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	881b      	ldrh	r3, [r3, #0]
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab4a:	82fb      	strh	r3, [r7, #22]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	461a      	mov	r2, r3
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	441a      	add	r2, r3
 800ab5a:	8afb      	ldrh	r3, [r7, #22]
 800ab5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	8013      	strh	r3, [r2, #0]
 800ab70:	e2d8      	b.n	800b124 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ab72:	88fb      	ldrh	r3, [r7, #6]
 800ab74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d021      	beq.n	800abc0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	461a      	mov	r2, r3
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4413      	add	r3, r2
 800ab8a:	881b      	ldrh	r3, [r3, #0]
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab96:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	441a      	add	r2, r3
 800aba8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800abac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	f040 82ac 	bne.w	800b124 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	695a      	ldr	r2, [r3, #20]
 800abd0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800abd4:	441a      	add	r2, r3
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	69da      	ldr	r2, [r3, #28]
 800abde:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800abe2:	441a      	add	r2, r3
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	6a1a      	ldr	r2, [r3, #32]
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	691b      	ldr	r3, [r3, #16]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d30b      	bcc.n	800ac0c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	691b      	ldr	r3, [r3, #16]
 800abf8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	6a1a      	ldr	r2, [r3, #32]
 800ac00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac04:	1ad2      	subs	r2, r2, r3
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	621a      	str	r2, [r3, #32]
 800ac0a:	e017      	b.n	800ac3c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	6a1b      	ldr	r3, [r3, #32]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d108      	bne.n	800ac26 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800ac14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ac18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ac24:	e00a      	b.n	800ac3c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	6a1b      	ldr	r3, [r3, #32]
 800ac32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	785b      	ldrb	r3, [r3, #1]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d165      	bne.n	800ad10 <HAL_PCD_EP_DB_Transmit+0x37e>
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	461a      	mov	r2, r3
 800ac56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac58:	4413      	add	r3, r2
 800ac5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	00da      	lsls	r2, r3, #3
 800ac62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac64:	4413      	add	r3, r2
 800ac66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac6a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6e:	881b      	ldrh	r3, [r3, #0]
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7a:	801a      	strh	r2, [r3, #0]
 800ac7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac80:	2b3e      	cmp	r3, #62	; 0x3e
 800ac82:	d91d      	bls.n	800acc0 <HAL_PCD_EP_DB_Transmit+0x32e>
 800ac84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac88:	095b      	lsrs	r3, r3, #5
 800ac8a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac90:	f003 031f 	and.w	r3, r3, #31
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d102      	bne.n	800ac9e <HAL_PCD_EP_DB_Transmit+0x30c>
 800ac98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca0:	881b      	ldrh	r3, [r3, #0]
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	029b      	lsls	r3, r3, #10
 800acaa:	b29b      	uxth	r3, r3
 800acac:	4313      	orrs	r3, r2
 800acae:	b29b      	uxth	r3, r3
 800acb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acb8:	b29a      	uxth	r2, r3
 800acba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acbc:	801a      	strh	r2, [r3, #0]
 800acbe:	e044      	b.n	800ad4a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800acc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d10a      	bne.n	800acde <HAL_PCD_EP_DB_Transmit+0x34c>
 800acc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acca:	881b      	ldrh	r3, [r3, #0]
 800accc:	b29b      	uxth	r3, r3
 800acce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acda:	801a      	strh	r2, [r3, #0]
 800acdc:	e035      	b.n	800ad4a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800acde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ace2:	085b      	lsrs	r3, r3, #1
 800ace4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ace6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acea:	f003 0301 	and.w	r3, r3, #1
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d002      	beq.n	800acf8 <HAL_PCD_EP_DB_Transmit+0x366>
 800acf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acf4:	3301      	adds	r3, #1
 800acf6:	64bb      	str	r3, [r7, #72]	; 0x48
 800acf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfa:	881b      	ldrh	r3, [r3, #0]
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	029b      	lsls	r3, r3, #10
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	4313      	orrs	r3, r2
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0c:	801a      	strh	r2, [r3, #0]
 800ad0e:	e01c      	b.n	800ad4a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	785b      	ldrb	r3, [r3, #1]
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d118      	bne.n	800ad4a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	647b      	str	r3, [r7, #68]	; 0x44
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	461a      	mov	r2, r3
 800ad2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad2c:	4413      	add	r3, r2
 800ad2e:	647b      	str	r3, [r7, #68]	; 0x44
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	00da      	lsls	r2, r3, #3
 800ad36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad38:	4413      	add	r3, r2
 800ad3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad3e:	643b      	str	r3, [r7, #64]	; 0x40
 800ad40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad44:	b29a      	uxth	r2, r3
 800ad46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad48:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6818      	ldr	r0, [r3, #0]
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	6959      	ldr	r1, [r3, #20]
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	891a      	ldrh	r2, [r3, #8]
 800ad56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	f007 fc6d 	bl	801263a <USB_WritePMA>
 800ad60:	e1e0      	b.n	800b124 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	00db      	lsls	r3, r3, #3
 800ad74:	4413      	add	r3, r2
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	6812      	ldr	r2, [r2, #0]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad80:	881b      	ldrh	r3, [r3, #0]
 800ad82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad86:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	699a      	ldr	r2, [r3, #24]
 800ad8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d307      	bcc.n	800ada6 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	699a      	ldr	r2, [r3, #24]
 800ad9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ad9e:	1ad2      	subs	r2, r2, r3
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	619a      	str	r2, [r3, #24]
 800ada4:	e002      	b.n	800adac <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	2200      	movs	r2, #0
 800adaa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	699b      	ldr	r3, [r3, #24]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f040 80c0 	bne.w	800af36 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	785b      	ldrb	r3, [r3, #1]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d126      	bne.n	800ae0c <HAL_PCD_EP_DB_Transmit+0x47a>
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adcc:	b29b      	uxth	r3, r3
 800adce:	461a      	mov	r2, r3
 800add0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800add2:	4413      	add	r3, r2
 800add4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	00da      	lsls	r2, r3, #3
 800addc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800adde:	4413      	add	r3, r2
 800ade0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ade4:	67bb      	str	r3, [r7, #120]	; 0x78
 800ade6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ade8:	881b      	ldrh	r3, [r3, #0]
 800adea:	b29b      	uxth	r3, r3
 800adec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adf4:	801a      	strh	r2, [r3, #0]
 800adf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adf8:	881b      	ldrh	r3, [r3, #0]
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae08:	801a      	strh	r2, [r3, #0]
 800ae0a:	e01a      	b.n	800ae42 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	785b      	ldrb	r3, [r3, #1]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d116      	bne.n	800ae42 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	667b      	str	r3, [r7, #100]	; 0x64
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	461a      	mov	r2, r3
 800ae26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae28:	4413      	add	r3, r2
 800ae2a:	667b      	str	r3, [r7, #100]	; 0x64
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	00da      	lsls	r2, r3, #3
 800ae32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae34:	4413      	add	r3, r2
 800ae36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae3a:	663b      	str	r3, [r7, #96]	; 0x60
 800ae3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae3e:	2200      	movs	r2, #0
 800ae40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	677b      	str	r3, [r7, #116]	; 0x74
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	785b      	ldrb	r3, [r3, #1]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d12b      	bne.n	800aea8 <HAL_PCD_EP_DB_Transmit+0x516>
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	461a      	mov	r2, r3
 800ae62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae64:	4413      	add	r3, r2
 800ae66:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	00da      	lsls	r2, r3, #3
 800ae6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae70:	4413      	add	r3, r2
 800ae72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ae7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae7e:	881b      	ldrh	r3, [r3, #0]
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae8c:	801a      	strh	r2, [r3, #0]
 800ae8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae92:	881b      	ldrh	r3, [r3, #0]
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aea4:	801a      	strh	r2, [r3, #0]
 800aea6:	e017      	b.n	800aed8 <HAL_PCD_EP_DB_Transmit+0x546>
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	785b      	ldrb	r3, [r3, #1]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d113      	bne.n	800aed8 <HAL_PCD_EP_DB_Transmit+0x546>
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	461a      	mov	r2, r3
 800aebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aebe:	4413      	add	r3, r2
 800aec0:	677b      	str	r3, [r7, #116]	; 0x74
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	00da      	lsls	r2, r3, #3
 800aec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aeca:	4413      	add	r3, r2
 800aecc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aed0:	673b      	str	r3, [r7, #112]	; 0x70
 800aed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aed4:	2200      	movs	r2, #0
 800aed6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	4619      	mov	r1, r3
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f00a fb99 	bl	8015616 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800aee4:	88fb      	ldrh	r3, [r7, #6]
 800aee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f040 811a 	bne.w	800b124 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	461a      	mov	r2, r3
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4413      	add	r3, r2
 800aefe:	881b      	ldrh	r3, [r3, #0]
 800af00:	b29b      	uxth	r3, r3
 800af02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af0a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	441a      	add	r2, r3
 800af1c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800af20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af30:	b29b      	uxth	r3, r3
 800af32:	8013      	strh	r3, [r2, #0]
 800af34:	e0f6      	b.n	800b124 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800af36:	88fb      	ldrh	r3, [r7, #6]
 800af38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d121      	bne.n	800af84 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	461a      	mov	r2, r3
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	881b      	ldrh	r3, [r3, #0]
 800af50:	b29b      	uxth	r3, r3
 800af52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af5a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	461a      	mov	r2, r3
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	441a      	add	r2, r3
 800af6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800af70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af80:	b29b      	uxth	r3, r3
 800af82:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	f040 80ca 	bne.w	800b124 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	695a      	ldr	r2, [r3, #20]
 800af94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800af98:	441a      	add	r2, r3
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	69da      	ldr	r2, [r3, #28]
 800afa2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800afa6:	441a      	add	r2, r3
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	6a1a      	ldr	r2, [r3, #32]
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d30b      	bcc.n	800afd0 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	691b      	ldr	r3, [r3, #16]
 800afbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	6a1a      	ldr	r2, [r3, #32]
 800afc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afc8:	1ad2      	subs	r2, r2, r3
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	621a      	str	r2, [r3, #32]
 800afce:	e017      	b.n	800b000 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	6a1b      	ldr	r3, [r3, #32]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d108      	bne.n	800afea <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800afd8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800afdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800afe8:	e00a      	b.n	800b000 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	6a1b      	ldr	r3, [r3, #32]
 800afee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	2200      	movs	r2, #0
 800aff6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	2200      	movs	r2, #0
 800affc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	657b      	str	r3, [r7, #84]	; 0x54
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	785b      	ldrb	r3, [r3, #1]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d165      	bne.n	800b0da <HAL_PCD_EP_DB_Transmit+0x748>
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	461a      	mov	r2, r3
 800b020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b022:	4413      	add	r3, r2
 800b024:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	00da      	lsls	r2, r3, #3
 800b02c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b02e:	4413      	add	r3, r2
 800b030:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b034:	65bb      	str	r3, [r7, #88]	; 0x58
 800b036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b038:	881b      	ldrh	r3, [r3, #0]
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b040:	b29a      	uxth	r2, r3
 800b042:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b044:	801a      	strh	r2, [r3, #0]
 800b046:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b04a:	2b3e      	cmp	r3, #62	; 0x3e
 800b04c:	d91d      	bls.n	800b08a <HAL_PCD_EP_DB_Transmit+0x6f8>
 800b04e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b052:	095b      	lsrs	r3, r3, #5
 800b054:	66bb      	str	r3, [r7, #104]	; 0x68
 800b056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b05a:	f003 031f 	and.w	r3, r3, #31
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d102      	bne.n	800b068 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800b062:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b064:	3b01      	subs	r3, #1
 800b066:	66bb      	str	r3, [r7, #104]	; 0x68
 800b068:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b06a:	881b      	ldrh	r3, [r3, #0]
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b070:	b29b      	uxth	r3, r3
 800b072:	029b      	lsls	r3, r3, #10
 800b074:	b29b      	uxth	r3, r3
 800b076:	4313      	orrs	r3, r2
 800b078:	b29b      	uxth	r3, r3
 800b07a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b07e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b082:	b29a      	uxth	r2, r3
 800b084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b086:	801a      	strh	r2, [r3, #0]
 800b088:	e041      	b.n	800b10e <HAL_PCD_EP_DB_Transmit+0x77c>
 800b08a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10a      	bne.n	800b0a8 <HAL_PCD_EP_DB_Transmit+0x716>
 800b092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b094:	881b      	ldrh	r3, [r3, #0]
 800b096:	b29b      	uxth	r3, r3
 800b098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b09c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0a0:	b29a      	uxth	r2, r3
 800b0a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b0a4:	801a      	strh	r2, [r3, #0]
 800b0a6:	e032      	b.n	800b10e <HAL_PCD_EP_DB_Transmit+0x77c>
 800b0a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0ac:	085b      	lsrs	r3, r3, #1
 800b0ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800b0b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0b4:	f003 0301 	and.w	r3, r3, #1
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d002      	beq.n	800b0c2 <HAL_PCD_EP_DB_Transmit+0x730>
 800b0bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b0be:	3301      	adds	r3, #1
 800b0c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800b0c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b0c4:	881b      	ldrh	r3, [r3, #0]
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	029b      	lsls	r3, r3, #10
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	b29a      	uxth	r2, r3
 800b0d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b0d6:	801a      	strh	r2, [r3, #0]
 800b0d8:	e019      	b.n	800b10e <HAL_PCD_EP_DB_Transmit+0x77c>
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	785b      	ldrb	r3, [r3, #1]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d115      	bne.n	800b10e <HAL_PCD_EP_DB_Transmit+0x77c>
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0f0:	4413      	add	r3, r2
 800b0f2:	657b      	str	r3, [r7, #84]	; 0x54
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	00da      	lsls	r2, r3, #3
 800b0fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0fc:	4413      	add	r3, r2
 800b0fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b102:	653b      	str	r3, [r7, #80]	; 0x50
 800b104:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b108:	b29a      	uxth	r2, r3
 800b10a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b10c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	6818      	ldr	r0, [r3, #0]
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	6959      	ldr	r1, [r3, #20]
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	895a      	ldrh	r2, [r3, #10]
 800b11a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b11e:	b29b      	uxth	r3, r3
 800b120:	f007 fa8b 	bl	801263a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	461a      	mov	r2, r3
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4413      	add	r3, r2
 800b132:	881b      	ldrh	r3, [r3, #0]
 800b134:	b29b      	uxth	r3, r3
 800b136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b13a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b13e:	82bb      	strh	r3, [r7, #20]
 800b140:	8abb      	ldrh	r3, [r7, #20]
 800b142:	f083 0310 	eor.w	r3, r3, #16
 800b146:	82bb      	strh	r3, [r7, #20]
 800b148:	8abb      	ldrh	r3, [r7, #20]
 800b14a:	f083 0320 	eor.w	r3, r3, #32
 800b14e:	82bb      	strh	r3, [r7, #20]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	461a      	mov	r2, r3
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	441a      	add	r2, r3
 800b15e:	8abb      	ldrh	r3, [r7, #20]
 800b160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b170:	b29b      	uxth	r3, r3
 800b172:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3790      	adds	r7, #144	; 0x90
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b17e:	b480      	push	{r7}
 800b180:	b087      	sub	sp, #28
 800b182:	af00      	add	r7, sp, #0
 800b184:	60f8      	str	r0, [r7, #12]
 800b186:	607b      	str	r3, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	817b      	strh	r3, [r7, #10]
 800b18c:	4613      	mov	r3, r2
 800b18e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b190:	897b      	ldrh	r3, [r7, #10]
 800b192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b196:	b29b      	uxth	r3, r3
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00b      	beq.n	800b1b4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b19c:	897b      	ldrh	r3, [r7, #10]
 800b19e:	f003 0307 	and.w	r3, r3, #7
 800b1a2:	1c5a      	adds	r2, r3, #1
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	4413      	add	r3, r2
 800b1aa:	00db      	lsls	r3, r3, #3
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	617b      	str	r3, [r7, #20]
 800b1b2:	e009      	b.n	800b1c8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b1b4:	897a      	ldrh	r2, [r7, #10]
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4413      	add	r3, r2
 800b1bc:	00db      	lsls	r3, r3, #3
 800b1be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b1c8:	893b      	ldrh	r3, [r7, #8]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d107      	bne.n	800b1de <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	80da      	strh	r2, [r3, #6]
 800b1dc:	e00b      	b.n	800b1f6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	0c1b      	lsrs	r3, r3, #16
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b1f6:	2300      	movs	r3, #0
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	371c      	adds	r7, #28
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b204:	b480      	push	{r7}
 800b206:	b085      	sub	sp, #20
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2201      	movs	r2, #1
 800b216:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b228:	b29b      	uxth	r3, r3
 800b22a:	f043 0301 	orr.w	r3, r3, #1
 800b22e:	b29a      	uxth	r2, r3
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	f043 0302 	orr.w	r3, r3, #2
 800b242:	b29a      	uxth	r2, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3714      	adds	r7, #20
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b258:	b480      	push	{r7}
 800b25a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b25c:	4b04      	ldr	r3, [pc, #16]	; (800b270 <HAL_PWREx_GetVoltageRange+0x18>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800b264:	4618      	mov	r0, r3
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	40007000 	.word	0x40007000

0800b274 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b282:	d130      	bne.n	800b2e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b284:	4b23      	ldr	r3, [pc, #140]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b28c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b290:	d038      	beq.n	800b304 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b292:	4b20      	ldr	r3, [pc, #128]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b29a:	4a1e      	ldr	r2, [pc, #120]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b29c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b2a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b2a2:	4b1d      	ldr	r3, [pc, #116]	; (800b318 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2232      	movs	r2, #50	; 0x32
 800b2a8:	fb02 f303 	mul.w	r3, r2, r3
 800b2ac:	4a1b      	ldr	r2, [pc, #108]	; (800b31c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b2b2:	0c9b      	lsrs	r3, r3, #18
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b2b8:	e002      	b.n	800b2c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b2c0:	4b14      	ldr	r3, [pc, #80]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b2c2:	695b      	ldr	r3, [r3, #20]
 800b2c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2cc:	d102      	bne.n	800b2d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d1f2      	bne.n	800b2ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b2d4:	4b0f      	ldr	r3, [pc, #60]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b2d6:	695b      	ldr	r3, [r3, #20]
 800b2d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2e0:	d110      	bne.n	800b304 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	e00f      	b.n	800b306 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b2e6:	4b0b      	ldr	r3, [pc, #44]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b2ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2f2:	d007      	beq.n	800b304 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b2f4:	4b07      	ldr	r3, [pc, #28]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b2fc:	4a05      	ldr	r2, [pc, #20]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b2fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b302:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b304:	2300      	movs	r3, #0
}
 800b306:	4618      	mov	r0, r3
 800b308:	3714      	adds	r7, #20
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	40007000 	.word	0x40007000
 800b318:	20000038 	.word	0x20000038
 800b31c:	431bde83 	.word	0x431bde83

0800b320 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800b320:	b480      	push	{r7}
 800b322:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800b324:	4b05      	ldr	r3, [pc, #20]	; (800b33c <HAL_PWREx_EnableVddUSB+0x1c>)
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	4a04      	ldr	r2, [pc, #16]	; (800b33c <HAL_PWREx_EnableVddUSB+0x1c>)
 800b32a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b32e:	6053      	str	r3, [r2, #4]
}
 800b330:	bf00      	nop
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	40007000 	.word	0x40007000

0800b340 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b088      	sub	sp, #32
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d102      	bne.n	800b354 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	f000 bc02 	b.w	800bb58 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b354:	4b96      	ldr	r3, [pc, #600]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	f003 030c 	and.w	r3, r3, #12
 800b35c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b35e:	4b94      	ldr	r3, [pc, #592]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	f003 0303 	and.w	r3, r3, #3
 800b366:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 0310 	and.w	r3, r3, #16
 800b370:	2b00      	cmp	r3, #0
 800b372:	f000 80e4 	beq.w	800b53e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d007      	beq.n	800b38c <HAL_RCC_OscConfig+0x4c>
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	2b0c      	cmp	r3, #12
 800b380:	f040 808b 	bne.w	800b49a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	2b01      	cmp	r3, #1
 800b388:	f040 8087 	bne.w	800b49a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b38c:	4b88      	ldr	r3, [pc, #544]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 0302 	and.w	r3, r3, #2
 800b394:	2b00      	cmp	r3, #0
 800b396:	d005      	beq.n	800b3a4 <HAL_RCC_OscConfig+0x64>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	699b      	ldr	r3, [r3, #24]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d101      	bne.n	800b3a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e3d9      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a1a      	ldr	r2, [r3, #32]
 800b3a8:	4b81      	ldr	r3, [pc, #516]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f003 0308 	and.w	r3, r3, #8
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d004      	beq.n	800b3be <HAL_RCC_OscConfig+0x7e>
 800b3b4:	4b7e      	ldr	r3, [pc, #504]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b3bc:	e005      	b.n	800b3ca <HAL_RCC_OscConfig+0x8a>
 800b3be:	4b7c      	ldr	r3, [pc, #496]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b3c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3c4:	091b      	lsrs	r3, r3, #4
 800b3c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d223      	bcs.n	800b416 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a1b      	ldr	r3, [r3, #32]
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f000 fd8c 	bl	800bef0 <RCC_SetFlashLatencyFromMSIRange>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e3ba      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b3e2:	4b73      	ldr	r3, [pc, #460]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a72      	ldr	r2, [pc, #456]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b3e8:	f043 0308 	orr.w	r3, r3, #8
 800b3ec:	6013      	str	r3, [r2, #0]
 800b3ee:	4b70      	ldr	r3, [pc, #448]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a1b      	ldr	r3, [r3, #32]
 800b3fa:	496d      	ldr	r1, [pc, #436]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b400:	4b6b      	ldr	r3, [pc, #428]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	69db      	ldr	r3, [r3, #28]
 800b40c:	021b      	lsls	r3, r3, #8
 800b40e:	4968      	ldr	r1, [pc, #416]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b410:	4313      	orrs	r3, r2
 800b412:	604b      	str	r3, [r1, #4]
 800b414:	e025      	b.n	800b462 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b416:	4b66      	ldr	r3, [pc, #408]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a65      	ldr	r2, [pc, #404]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b41c:	f043 0308 	orr.w	r3, r3, #8
 800b420:	6013      	str	r3, [r2, #0]
 800b422:	4b63      	ldr	r3, [pc, #396]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	4960      	ldr	r1, [pc, #384]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b430:	4313      	orrs	r3, r2
 800b432:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b434:	4b5e      	ldr	r3, [pc, #376]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	69db      	ldr	r3, [r3, #28]
 800b440:	021b      	lsls	r3, r3, #8
 800b442:	495b      	ldr	r1, [pc, #364]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b444:	4313      	orrs	r3, r2
 800b446:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d109      	bne.n	800b462 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	4618      	mov	r0, r3
 800b454:	f000 fd4c 	bl	800bef0 <RCC_SetFlashLatencyFromMSIRange>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d001      	beq.n	800b462 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	e37a      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b462:	f000 fc81 	bl	800bd68 <HAL_RCC_GetSysClockFreq>
 800b466:	4602      	mov	r2, r0
 800b468:	4b51      	ldr	r3, [pc, #324]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	091b      	lsrs	r3, r3, #4
 800b46e:	f003 030f 	and.w	r3, r3, #15
 800b472:	4950      	ldr	r1, [pc, #320]	; (800b5b4 <HAL_RCC_OscConfig+0x274>)
 800b474:	5ccb      	ldrb	r3, [r1, r3]
 800b476:	f003 031f 	and.w	r3, r3, #31
 800b47a:	fa22 f303 	lsr.w	r3, r2, r3
 800b47e:	4a4e      	ldr	r2, [pc, #312]	; (800b5b8 <HAL_RCC_OscConfig+0x278>)
 800b480:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b482:	4b4e      	ldr	r3, [pc, #312]	; (800b5bc <HAL_RCC_OscConfig+0x27c>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4618      	mov	r0, r3
 800b488:	f7fa ff46 	bl	8006318 <HAL_InitTick>
 800b48c:	4603      	mov	r3, r0
 800b48e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800b490:	7bfb      	ldrb	r3, [r7, #15]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d052      	beq.n	800b53c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800b496:	7bfb      	ldrb	r3, [r7, #15]
 800b498:	e35e      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	699b      	ldr	r3, [r3, #24]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d032      	beq.n	800b508 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b4a2:	4b43      	ldr	r3, [pc, #268]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a42      	ldr	r2, [pc, #264]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b4a8:	f043 0301 	orr.w	r3, r3, #1
 800b4ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b4ae:	f7fa ff83 	bl	80063b8 <HAL_GetTick>
 800b4b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b4b4:	e008      	b.n	800b4c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b4b6:	f7fa ff7f 	bl	80063b8 <HAL_GetTick>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	1ad3      	subs	r3, r2, r3
 800b4c0:	2b02      	cmp	r3, #2
 800b4c2:	d901      	bls.n	800b4c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800b4c4:	2303      	movs	r3, #3
 800b4c6:	e347      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b4c8:	4b39      	ldr	r3, [pc, #228]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f003 0302 	and.w	r3, r3, #2
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d0f0      	beq.n	800b4b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b4d4:	4b36      	ldr	r3, [pc, #216]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a35      	ldr	r2, [pc, #212]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b4da:	f043 0308 	orr.w	r3, r3, #8
 800b4de:	6013      	str	r3, [r2, #0]
 800b4e0:	4b33      	ldr	r3, [pc, #204]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a1b      	ldr	r3, [r3, #32]
 800b4ec:	4930      	ldr	r1, [pc, #192]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b4f2:	4b2f      	ldr	r3, [pc, #188]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	69db      	ldr	r3, [r3, #28]
 800b4fe:	021b      	lsls	r3, r3, #8
 800b500:	492b      	ldr	r1, [pc, #172]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b502:	4313      	orrs	r3, r2
 800b504:	604b      	str	r3, [r1, #4]
 800b506:	e01a      	b.n	800b53e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b508:	4b29      	ldr	r3, [pc, #164]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a28      	ldr	r2, [pc, #160]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b50e:	f023 0301 	bic.w	r3, r3, #1
 800b512:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b514:	f7fa ff50 	bl	80063b8 <HAL_GetTick>
 800b518:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b51a:	e008      	b.n	800b52e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b51c:	f7fa ff4c 	bl	80063b8 <HAL_GetTick>
 800b520:	4602      	mov	r2, r0
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	1ad3      	subs	r3, r2, r3
 800b526:	2b02      	cmp	r3, #2
 800b528:	d901      	bls.n	800b52e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800b52a:	2303      	movs	r3, #3
 800b52c:	e314      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b52e:	4b20      	ldr	r3, [pc, #128]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f003 0302 	and.w	r3, r3, #2
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1f0      	bne.n	800b51c <HAL_RCC_OscConfig+0x1dc>
 800b53a:	e000      	b.n	800b53e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b53c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f003 0301 	and.w	r3, r3, #1
 800b546:	2b00      	cmp	r3, #0
 800b548:	d073      	beq.n	800b632 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	2b08      	cmp	r3, #8
 800b54e:	d005      	beq.n	800b55c <HAL_RCC_OscConfig+0x21c>
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	2b0c      	cmp	r3, #12
 800b554:	d10e      	bne.n	800b574 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	2b03      	cmp	r3, #3
 800b55a:	d10b      	bne.n	800b574 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b55c:	4b14      	ldr	r3, [pc, #80]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b564:	2b00      	cmp	r3, #0
 800b566:	d063      	beq.n	800b630 <HAL_RCC_OscConfig+0x2f0>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d15f      	bne.n	800b630 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800b570:	2301      	movs	r3, #1
 800b572:	e2f1      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b57c:	d106      	bne.n	800b58c <HAL_RCC_OscConfig+0x24c>
 800b57e:	4b0c      	ldr	r3, [pc, #48]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a0b      	ldr	r2, [pc, #44]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b588:	6013      	str	r3, [r2, #0]
 800b58a:	e025      	b.n	800b5d8 <HAL_RCC_OscConfig+0x298>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b594:	d114      	bne.n	800b5c0 <HAL_RCC_OscConfig+0x280>
 800b596:	4b06      	ldr	r3, [pc, #24]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a05      	ldr	r2, [pc, #20]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b59c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b5a0:	6013      	str	r3, [r2, #0]
 800b5a2:	4b03      	ldr	r3, [pc, #12]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a02      	ldr	r2, [pc, #8]	; (800b5b0 <HAL_RCC_OscConfig+0x270>)
 800b5a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5ac:	6013      	str	r3, [r2, #0]
 800b5ae:	e013      	b.n	800b5d8 <HAL_RCC_OscConfig+0x298>
 800b5b0:	40021000 	.word	0x40021000
 800b5b4:	0801ebe4 	.word	0x0801ebe4
 800b5b8:	20000038 	.word	0x20000038
 800b5bc:	2000003c 	.word	0x2000003c
 800b5c0:	4ba0      	ldr	r3, [pc, #640]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a9f      	ldr	r2, [pc, #636]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b5c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5ca:	6013      	str	r3, [r2, #0]
 800b5cc:	4b9d      	ldr	r3, [pc, #628]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a9c      	ldr	r2, [pc, #624]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b5d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b5d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d013      	beq.n	800b608 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5e0:	f7fa feea 	bl	80063b8 <HAL_GetTick>
 800b5e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b5e6:	e008      	b.n	800b5fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5e8:	f7fa fee6 	bl	80063b8 <HAL_GetTick>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	2b64      	cmp	r3, #100	; 0x64
 800b5f4:	d901      	bls.n	800b5fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800b5f6:	2303      	movs	r3, #3
 800b5f8:	e2ae      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b5fa:	4b92      	ldr	r3, [pc, #584]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b602:	2b00      	cmp	r3, #0
 800b604:	d0f0      	beq.n	800b5e8 <HAL_RCC_OscConfig+0x2a8>
 800b606:	e014      	b.n	800b632 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b608:	f7fa fed6 	bl	80063b8 <HAL_GetTick>
 800b60c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b60e:	e008      	b.n	800b622 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b610:	f7fa fed2 	bl	80063b8 <HAL_GetTick>
 800b614:	4602      	mov	r2, r0
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	1ad3      	subs	r3, r2, r3
 800b61a:	2b64      	cmp	r3, #100	; 0x64
 800b61c:	d901      	bls.n	800b622 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b61e:	2303      	movs	r3, #3
 800b620:	e29a      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b622:	4b88      	ldr	r3, [pc, #544]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d1f0      	bne.n	800b610 <HAL_RCC_OscConfig+0x2d0>
 800b62e:	e000      	b.n	800b632 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f003 0302 	and.w	r3, r3, #2
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d060      	beq.n	800b700 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	2b04      	cmp	r3, #4
 800b642:	d005      	beq.n	800b650 <HAL_RCC_OscConfig+0x310>
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	2b0c      	cmp	r3, #12
 800b648:	d119      	bne.n	800b67e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d116      	bne.n	800b67e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b650:	4b7c      	ldr	r3, [pc, #496]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d005      	beq.n	800b668 <HAL_RCC_OscConfig+0x328>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d101      	bne.n	800b668 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	e277      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b668:	4b76      	ldr	r3, [pc, #472]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	691b      	ldr	r3, [r3, #16]
 800b674:	061b      	lsls	r3, r3, #24
 800b676:	4973      	ldr	r1, [pc, #460]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b678:	4313      	orrs	r3, r2
 800b67a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b67c:	e040      	b.n	800b700 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d023      	beq.n	800b6ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b686:	4b6f      	ldr	r3, [pc, #444]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a6e      	ldr	r2, [pc, #440]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b68c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b692:	f7fa fe91 	bl	80063b8 <HAL_GetTick>
 800b696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b698:	e008      	b.n	800b6ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b69a:	f7fa fe8d 	bl	80063b8 <HAL_GetTick>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	d901      	bls.n	800b6ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	e255      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b6ac:	4b65      	ldr	r3, [pc, #404]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d0f0      	beq.n	800b69a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6b8:	4b62      	ldr	r3, [pc, #392]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	061b      	lsls	r3, r3, #24
 800b6c6:	495f      	ldr	r1, [pc, #380]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	604b      	str	r3, [r1, #4]
 800b6cc:	e018      	b.n	800b700 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b6ce:	4b5d      	ldr	r3, [pc, #372]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a5c      	ldr	r2, [pc, #368]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b6d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6da:	f7fa fe6d 	bl	80063b8 <HAL_GetTick>
 800b6de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b6e0:	e008      	b.n	800b6f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b6e2:	f7fa fe69 	bl	80063b8 <HAL_GetTick>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	1ad3      	subs	r3, r2, r3
 800b6ec:	2b02      	cmp	r3, #2
 800b6ee:	d901      	bls.n	800b6f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b6f0:	2303      	movs	r3, #3
 800b6f2:	e231      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b6f4:	4b53      	ldr	r3, [pc, #332]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1f0      	bne.n	800b6e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 0308 	and.w	r3, r3, #8
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d03c      	beq.n	800b786 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	695b      	ldr	r3, [r3, #20]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d01c      	beq.n	800b74e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b714:	4b4b      	ldr	r3, [pc, #300]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b71a:	4a4a      	ldr	r2, [pc, #296]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b71c:	f043 0301 	orr.w	r3, r3, #1
 800b720:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b724:	f7fa fe48 	bl	80063b8 <HAL_GetTick>
 800b728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b72a:	e008      	b.n	800b73e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b72c:	f7fa fe44 	bl	80063b8 <HAL_GetTick>
 800b730:	4602      	mov	r2, r0
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	2b02      	cmp	r3, #2
 800b738:	d901      	bls.n	800b73e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b73a:	2303      	movs	r3, #3
 800b73c:	e20c      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b73e:	4b41      	ldr	r3, [pc, #260]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b744:	f003 0302 	and.w	r3, r3, #2
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d0ef      	beq.n	800b72c <HAL_RCC_OscConfig+0x3ec>
 800b74c:	e01b      	b.n	800b786 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b74e:	4b3d      	ldr	r3, [pc, #244]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b754:	4a3b      	ldr	r2, [pc, #236]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b756:	f023 0301 	bic.w	r3, r3, #1
 800b75a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b75e:	f7fa fe2b 	bl	80063b8 <HAL_GetTick>
 800b762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b764:	e008      	b.n	800b778 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b766:	f7fa fe27 	bl	80063b8 <HAL_GetTick>
 800b76a:	4602      	mov	r2, r0
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	1ad3      	subs	r3, r2, r3
 800b770:	2b02      	cmp	r3, #2
 800b772:	d901      	bls.n	800b778 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b774:	2303      	movs	r3, #3
 800b776:	e1ef      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b778:	4b32      	ldr	r3, [pc, #200]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b77a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b77e:	f003 0302 	and.w	r3, r3, #2
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1ef      	bne.n	800b766 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f003 0304 	and.w	r3, r3, #4
 800b78e:	2b00      	cmp	r3, #0
 800b790:	f000 80a6 	beq.w	800b8e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b794:	2300      	movs	r3, #0
 800b796:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b798:	4b2a      	ldr	r3, [pc, #168]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b79a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b79c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d10d      	bne.n	800b7c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b7a4:	4b27      	ldr	r3, [pc, #156]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b7a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7a8:	4a26      	ldr	r2, [pc, #152]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b7aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7ae:	6593      	str	r3, [r2, #88]	; 0x58
 800b7b0:	4b24      	ldr	r3, [pc, #144]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b7b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7b8:	60bb      	str	r3, [r7, #8]
 800b7ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b7c0:	4b21      	ldr	r3, [pc, #132]	; (800b848 <HAL_RCC_OscConfig+0x508>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d118      	bne.n	800b7fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b7cc:	4b1e      	ldr	r3, [pc, #120]	; (800b848 <HAL_RCC_OscConfig+0x508>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a1d      	ldr	r2, [pc, #116]	; (800b848 <HAL_RCC_OscConfig+0x508>)
 800b7d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b7d8:	f7fa fdee 	bl	80063b8 <HAL_GetTick>
 800b7dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b7de:	e008      	b.n	800b7f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7e0:	f7fa fdea 	bl	80063b8 <HAL_GetTick>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	1ad3      	subs	r3, r2, r3
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d901      	bls.n	800b7f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b7ee:	2303      	movs	r3, #3
 800b7f0:	e1b2      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b7f2:	4b15      	ldr	r3, [pc, #84]	; (800b848 <HAL_RCC_OscConfig+0x508>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d0f0      	beq.n	800b7e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d108      	bne.n	800b818 <HAL_RCC_OscConfig+0x4d8>
 800b806:	4b0f      	ldr	r3, [pc, #60]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b80c:	4a0d      	ldr	r2, [pc, #52]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b80e:	f043 0301 	orr.w	r3, r3, #1
 800b812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b816:	e029      	b.n	800b86c <HAL_RCC_OscConfig+0x52c>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	2b05      	cmp	r3, #5
 800b81e:	d115      	bne.n	800b84c <HAL_RCC_OscConfig+0x50c>
 800b820:	4b08      	ldr	r3, [pc, #32]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b826:	4a07      	ldr	r2, [pc, #28]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b828:	f043 0304 	orr.w	r3, r3, #4
 800b82c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b830:	4b04      	ldr	r3, [pc, #16]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b836:	4a03      	ldr	r2, [pc, #12]	; (800b844 <HAL_RCC_OscConfig+0x504>)
 800b838:	f043 0301 	orr.w	r3, r3, #1
 800b83c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b840:	e014      	b.n	800b86c <HAL_RCC_OscConfig+0x52c>
 800b842:	bf00      	nop
 800b844:	40021000 	.word	0x40021000
 800b848:	40007000 	.word	0x40007000
 800b84c:	4b9a      	ldr	r3, [pc, #616]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800b84e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b852:	4a99      	ldr	r2, [pc, #612]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800b854:	f023 0301 	bic.w	r3, r3, #1
 800b858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b85c:	4b96      	ldr	r3, [pc, #600]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800b85e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b862:	4a95      	ldr	r2, [pc, #596]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800b864:	f023 0304 	bic.w	r3, r3, #4
 800b868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d016      	beq.n	800b8a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b874:	f7fa fda0 	bl	80063b8 <HAL_GetTick>
 800b878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b87a:	e00a      	b.n	800b892 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b87c:	f7fa fd9c 	bl	80063b8 <HAL_GetTick>
 800b880:	4602      	mov	r2, r0
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	1ad3      	subs	r3, r2, r3
 800b886:	f241 3288 	movw	r2, #5000	; 0x1388
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d901      	bls.n	800b892 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800b88e:	2303      	movs	r3, #3
 800b890:	e162      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b892:	4b89      	ldr	r3, [pc, #548]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800b894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b898:	f003 0302 	and.w	r3, r3, #2
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d0ed      	beq.n	800b87c <HAL_RCC_OscConfig+0x53c>
 800b8a0:	e015      	b.n	800b8ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8a2:	f7fa fd89 	bl	80063b8 <HAL_GetTick>
 800b8a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b8a8:	e00a      	b.n	800b8c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8aa:	f7fa fd85 	bl	80063b8 <HAL_GetTick>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	1ad3      	subs	r3, r2, r3
 800b8b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d901      	bls.n	800b8c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	e14b      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b8c0:	4b7d      	ldr	r3, [pc, #500]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800b8c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8c6:	f003 0302 	and.w	r3, r3, #2
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1ed      	bne.n	800b8aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b8ce:	7ffb      	ldrb	r3, [r7, #31]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d105      	bne.n	800b8e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b8d4:	4b78      	ldr	r3, [pc, #480]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800b8d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8d8:	4a77      	ldr	r2, [pc, #476]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800b8da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f003 0320 	and.w	r3, r3, #32
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d03c      	beq.n	800b966 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d01c      	beq.n	800b92e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b8f4:	4b70      	ldr	r3, [pc, #448]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800b8f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b8fa:	4a6f      	ldr	r2, [pc, #444]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800b8fc:	f043 0301 	orr.w	r3, r3, #1
 800b900:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b904:	f7fa fd58 	bl	80063b8 <HAL_GetTick>
 800b908:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b90a:	e008      	b.n	800b91e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b90c:	f7fa fd54 	bl	80063b8 <HAL_GetTick>
 800b910:	4602      	mov	r2, r0
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	2b02      	cmp	r3, #2
 800b918:	d901      	bls.n	800b91e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800b91a:	2303      	movs	r3, #3
 800b91c:	e11c      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b91e:	4b66      	ldr	r3, [pc, #408]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800b920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b924:	f003 0302 	and.w	r3, r3, #2
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d0ef      	beq.n	800b90c <HAL_RCC_OscConfig+0x5cc>
 800b92c:	e01b      	b.n	800b966 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b92e:	4b62      	ldr	r3, [pc, #392]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800b930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b934:	4a60      	ldr	r2, [pc, #384]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800b936:	f023 0301 	bic.w	r3, r3, #1
 800b93a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b93e:	f7fa fd3b 	bl	80063b8 <HAL_GetTick>
 800b942:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b944:	e008      	b.n	800b958 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b946:	f7fa fd37 	bl	80063b8 <HAL_GetTick>
 800b94a:	4602      	mov	r2, r0
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	2b02      	cmp	r3, #2
 800b952:	d901      	bls.n	800b958 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800b954:	2303      	movs	r3, #3
 800b956:	e0ff      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b958:	4b57      	ldr	r3, [pc, #348]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800b95a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b95e:	f003 0302 	and.w	r3, r3, #2
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1ef      	bne.n	800b946 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f000 80f3 	beq.w	800bb56 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b974:	2b02      	cmp	r3, #2
 800b976:	f040 80c9 	bne.w	800bb0c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b97a:	4b4f      	ldr	r3, [pc, #316]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f003 0203 	and.w	r2, r3, #3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d12c      	bne.n	800b9e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b998:	3b01      	subs	r3, #1
 800b99a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d123      	bne.n	800b9e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d11b      	bne.n	800b9e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d113      	bne.n	800b9e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ca:	085b      	lsrs	r3, r3, #1
 800b9cc:	3b01      	subs	r3, #1
 800b9ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d109      	bne.n	800b9e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9de:	085b      	lsrs	r3, r3, #1
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d06b      	beq.n	800bac0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	2b0c      	cmp	r3, #12
 800b9ec:	d062      	beq.n	800bab4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b9ee:	4b32      	ldr	r3, [pc, #200]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e0ac      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b9fe:	4b2e      	ldr	r3, [pc, #184]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a2d      	ldr	r2, [pc, #180]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800ba04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba08:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ba0a:	f7fa fcd5 	bl	80063b8 <HAL_GetTick>
 800ba0e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ba10:	e008      	b.n	800ba24 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba12:	f7fa fcd1 	bl	80063b8 <HAL_GetTick>
 800ba16:	4602      	mov	r2, r0
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	d901      	bls.n	800ba24 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800ba20:	2303      	movs	r3, #3
 800ba22:	e099      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ba24:	4b24      	ldr	r3, [pc, #144]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1f0      	bne.n	800ba12 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ba30:	4b21      	ldr	r3, [pc, #132]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800ba32:	68da      	ldr	r2, [r3, #12]
 800ba34:	4b21      	ldr	r3, [pc, #132]	; (800babc <HAL_RCC_OscConfig+0x77c>)
 800ba36:	4013      	ands	r3, r2
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ba40:	3a01      	subs	r2, #1
 800ba42:	0112      	lsls	r2, r2, #4
 800ba44:	4311      	orrs	r1, r2
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ba4a:	0212      	lsls	r2, r2, #8
 800ba4c:	4311      	orrs	r1, r2
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ba52:	0852      	lsrs	r2, r2, #1
 800ba54:	3a01      	subs	r2, #1
 800ba56:	0552      	lsls	r2, r2, #21
 800ba58:	4311      	orrs	r1, r2
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ba5e:	0852      	lsrs	r2, r2, #1
 800ba60:	3a01      	subs	r2, #1
 800ba62:	0652      	lsls	r2, r2, #25
 800ba64:	4311      	orrs	r1, r2
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ba6a:	06d2      	lsls	r2, r2, #27
 800ba6c:	430a      	orrs	r2, r1
 800ba6e:	4912      	ldr	r1, [pc, #72]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800ba70:	4313      	orrs	r3, r2
 800ba72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ba74:	4b10      	ldr	r3, [pc, #64]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a0f      	ldr	r2, [pc, #60]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800ba7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ba7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ba80:	4b0d      	ldr	r3, [pc, #52]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	4a0c      	ldr	r2, [pc, #48]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800ba86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ba8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ba8c:	f7fa fc94 	bl	80063b8 <HAL_GetTick>
 800ba90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ba92:	e008      	b.n	800baa6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba94:	f7fa fc90 	bl	80063b8 <HAL_GetTick>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	1ad3      	subs	r3, r2, r3
 800ba9e:	2b02      	cmp	r3, #2
 800baa0:	d901      	bls.n	800baa6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800baa2:	2303      	movs	r3, #3
 800baa4:	e058      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800baa6:	4b04      	ldr	r3, [pc, #16]	; (800bab8 <HAL_RCC_OscConfig+0x778>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d0f0      	beq.n	800ba94 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bab2:	e050      	b.n	800bb56 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	e04f      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
 800bab8:	40021000 	.word	0x40021000
 800babc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bac0:	4b27      	ldr	r3, [pc, #156]	; (800bb60 <HAL_RCC_OscConfig+0x820>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d144      	bne.n	800bb56 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800bacc:	4b24      	ldr	r3, [pc, #144]	; (800bb60 <HAL_RCC_OscConfig+0x820>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a23      	ldr	r2, [pc, #140]	; (800bb60 <HAL_RCC_OscConfig+0x820>)
 800bad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bad6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bad8:	4b21      	ldr	r3, [pc, #132]	; (800bb60 <HAL_RCC_OscConfig+0x820>)
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	4a20      	ldr	r2, [pc, #128]	; (800bb60 <HAL_RCC_OscConfig+0x820>)
 800bade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bae2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bae4:	f7fa fc68 	bl	80063b8 <HAL_GetTick>
 800bae8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800baea:	e008      	b.n	800bafe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800baec:	f7fa fc64 	bl	80063b8 <HAL_GetTick>
 800baf0:	4602      	mov	r2, r0
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	1ad3      	subs	r3, r2, r3
 800baf6:	2b02      	cmp	r3, #2
 800baf8:	d901      	bls.n	800bafe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800bafa:	2303      	movs	r3, #3
 800bafc:	e02c      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bafe:	4b18      	ldr	r3, [pc, #96]	; (800bb60 <HAL_RCC_OscConfig+0x820>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d0f0      	beq.n	800baec <HAL_RCC_OscConfig+0x7ac>
 800bb0a:	e024      	b.n	800bb56 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	2b0c      	cmp	r3, #12
 800bb10:	d01f      	beq.n	800bb52 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb12:	4b13      	ldr	r3, [pc, #76]	; (800bb60 <HAL_RCC_OscConfig+0x820>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a12      	ldr	r2, [pc, #72]	; (800bb60 <HAL_RCC_OscConfig+0x820>)
 800bb18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bb1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb1e:	f7fa fc4b 	bl	80063b8 <HAL_GetTick>
 800bb22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bb24:	e008      	b.n	800bb38 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb26:	f7fa fc47 	bl	80063b8 <HAL_GetTick>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	1ad3      	subs	r3, r2, r3
 800bb30:	2b02      	cmp	r3, #2
 800bb32:	d901      	bls.n	800bb38 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800bb34:	2303      	movs	r3, #3
 800bb36:	e00f      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bb38:	4b09      	ldr	r3, [pc, #36]	; (800bb60 <HAL_RCC_OscConfig+0x820>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d1f0      	bne.n	800bb26 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800bb44:	4b06      	ldr	r3, [pc, #24]	; (800bb60 <HAL_RCC_OscConfig+0x820>)
 800bb46:	68da      	ldr	r2, [r3, #12]
 800bb48:	4905      	ldr	r1, [pc, #20]	; (800bb60 <HAL_RCC_OscConfig+0x820>)
 800bb4a:	4b06      	ldr	r3, [pc, #24]	; (800bb64 <HAL_RCC_OscConfig+0x824>)
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	60cb      	str	r3, [r1, #12]
 800bb50:	e001      	b.n	800bb56 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800bb52:	2301      	movs	r3, #1
 800bb54:	e000      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3720      	adds	r7, #32
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	40021000 	.word	0x40021000
 800bb64:	feeefffc 	.word	0xfeeefffc

0800bb68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d101      	bne.n	800bb7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e0e7      	b.n	800bd4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bb7c:	4b75      	ldr	r3, [pc, #468]	; (800bd54 <HAL_RCC_ClockConfig+0x1ec>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f003 0307 	and.w	r3, r3, #7
 800bb84:	683a      	ldr	r2, [r7, #0]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d910      	bls.n	800bbac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb8a:	4b72      	ldr	r3, [pc, #456]	; (800bd54 <HAL_RCC_ClockConfig+0x1ec>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f023 0207 	bic.w	r2, r3, #7
 800bb92:	4970      	ldr	r1, [pc, #448]	; (800bd54 <HAL_RCC_ClockConfig+0x1ec>)
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	4313      	orrs	r3, r2
 800bb98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb9a:	4b6e      	ldr	r3, [pc, #440]	; (800bd54 <HAL_RCC_ClockConfig+0x1ec>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 0307 	and.w	r3, r3, #7
 800bba2:	683a      	ldr	r2, [r7, #0]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d001      	beq.n	800bbac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e0cf      	b.n	800bd4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f003 0302 	and.w	r3, r3, #2
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d010      	beq.n	800bbda <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	689a      	ldr	r2, [r3, #8]
 800bbbc:	4b66      	ldr	r3, [pc, #408]	; (800bd58 <HAL_RCC_ClockConfig+0x1f0>)
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d908      	bls.n	800bbda <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bbc8:	4b63      	ldr	r3, [pc, #396]	; (800bd58 <HAL_RCC_ClockConfig+0x1f0>)
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	4960      	ldr	r1, [pc, #384]	; (800bd58 <HAL_RCC_ClockConfig+0x1f0>)
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f003 0301 	and.w	r3, r3, #1
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d04c      	beq.n	800bc80 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	2b03      	cmp	r3, #3
 800bbec:	d107      	bne.n	800bbfe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bbee:	4b5a      	ldr	r3, [pc, #360]	; (800bd58 <HAL_RCC_ClockConfig+0x1f0>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d121      	bne.n	800bc3e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e0a6      	b.n	800bd4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	2b02      	cmp	r3, #2
 800bc04:	d107      	bne.n	800bc16 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bc06:	4b54      	ldr	r3, [pc, #336]	; (800bd58 <HAL_RCC_ClockConfig+0x1f0>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d115      	bne.n	800bc3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800bc12:	2301      	movs	r3, #1
 800bc14:	e09a      	b.n	800bd4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d107      	bne.n	800bc2e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bc1e:	4b4e      	ldr	r3, [pc, #312]	; (800bd58 <HAL_RCC_ClockConfig+0x1f0>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f003 0302 	and.w	r3, r3, #2
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d109      	bne.n	800bc3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e08e      	b.n	800bd4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bc2e:	4b4a      	ldr	r3, [pc, #296]	; (800bd58 <HAL_RCC_ClockConfig+0x1f0>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d101      	bne.n	800bc3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e086      	b.n	800bd4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bc3e:	4b46      	ldr	r3, [pc, #280]	; (800bd58 <HAL_RCC_ClockConfig+0x1f0>)
 800bc40:	689b      	ldr	r3, [r3, #8]
 800bc42:	f023 0203 	bic.w	r2, r3, #3
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	4943      	ldr	r1, [pc, #268]	; (800bd58 <HAL_RCC_ClockConfig+0x1f0>)
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc50:	f7fa fbb2 	bl	80063b8 <HAL_GetTick>
 800bc54:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc56:	e00a      	b.n	800bc6e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc58:	f7fa fbae 	bl	80063b8 <HAL_GetTick>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	1ad3      	subs	r3, r2, r3
 800bc62:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d901      	bls.n	800bc6e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800bc6a:	2303      	movs	r3, #3
 800bc6c:	e06e      	b.n	800bd4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc6e:	4b3a      	ldr	r3, [pc, #232]	; (800bd58 <HAL_RCC_ClockConfig+0x1f0>)
 800bc70:	689b      	ldr	r3, [r3, #8]
 800bc72:	f003 020c 	and.w	r2, r3, #12
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d1eb      	bne.n	800bc58 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f003 0302 	and.w	r3, r3, #2
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d010      	beq.n	800bcae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	689a      	ldr	r2, [r3, #8]
 800bc90:	4b31      	ldr	r3, [pc, #196]	; (800bd58 <HAL_RCC_ClockConfig+0x1f0>)
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d208      	bcs.n	800bcae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc9c:	4b2e      	ldr	r3, [pc, #184]	; (800bd58 <HAL_RCC_ClockConfig+0x1f0>)
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	492b      	ldr	r1, [pc, #172]	; (800bd58 <HAL_RCC_ClockConfig+0x1f0>)
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bcae:	4b29      	ldr	r3, [pc, #164]	; (800bd54 <HAL_RCC_ClockConfig+0x1ec>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f003 0307 	and.w	r3, r3, #7
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d210      	bcs.n	800bcde <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcbc:	4b25      	ldr	r3, [pc, #148]	; (800bd54 <HAL_RCC_ClockConfig+0x1ec>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f023 0207 	bic.w	r2, r3, #7
 800bcc4:	4923      	ldr	r1, [pc, #140]	; (800bd54 <HAL_RCC_ClockConfig+0x1ec>)
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bccc:	4b21      	ldr	r3, [pc, #132]	; (800bd54 <HAL_RCC_ClockConfig+0x1ec>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f003 0307 	and.w	r3, r3, #7
 800bcd4:	683a      	ldr	r2, [r7, #0]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d001      	beq.n	800bcde <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e036      	b.n	800bd4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f003 0304 	and.w	r3, r3, #4
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d008      	beq.n	800bcfc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bcea:	4b1b      	ldr	r3, [pc, #108]	; (800bd58 <HAL_RCC_ClockConfig+0x1f0>)
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	4918      	ldr	r1, [pc, #96]	; (800bd58 <HAL_RCC_ClockConfig+0x1f0>)
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f003 0308 	and.w	r3, r3, #8
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d009      	beq.n	800bd1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bd08:	4b13      	ldr	r3, [pc, #76]	; (800bd58 <HAL_RCC_ClockConfig+0x1f0>)
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	00db      	lsls	r3, r3, #3
 800bd16:	4910      	ldr	r1, [pc, #64]	; (800bd58 <HAL_RCC_ClockConfig+0x1f0>)
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bd1c:	f000 f824 	bl	800bd68 <HAL_RCC_GetSysClockFreq>
 800bd20:	4602      	mov	r2, r0
 800bd22:	4b0d      	ldr	r3, [pc, #52]	; (800bd58 <HAL_RCC_ClockConfig+0x1f0>)
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	091b      	lsrs	r3, r3, #4
 800bd28:	f003 030f 	and.w	r3, r3, #15
 800bd2c:	490b      	ldr	r1, [pc, #44]	; (800bd5c <HAL_RCC_ClockConfig+0x1f4>)
 800bd2e:	5ccb      	ldrb	r3, [r1, r3]
 800bd30:	f003 031f 	and.w	r3, r3, #31
 800bd34:	fa22 f303 	lsr.w	r3, r2, r3
 800bd38:	4a09      	ldr	r2, [pc, #36]	; (800bd60 <HAL_RCC_ClockConfig+0x1f8>)
 800bd3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800bd3c:	4b09      	ldr	r3, [pc, #36]	; (800bd64 <HAL_RCC_ClockConfig+0x1fc>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7fa fae9 	bl	8006318 <HAL_InitTick>
 800bd46:	4603      	mov	r3, r0
 800bd48:	72fb      	strb	r3, [r7, #11]

  return status;
 800bd4a:	7afb      	ldrb	r3, [r7, #11]
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3710      	adds	r7, #16
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	40022000 	.word	0x40022000
 800bd58:	40021000 	.word	0x40021000
 800bd5c:	0801ebe4 	.word	0x0801ebe4
 800bd60:	20000038 	.word	0x20000038
 800bd64:	2000003c 	.word	0x2000003c

0800bd68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b089      	sub	sp, #36	; 0x24
 800bd6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	61fb      	str	r3, [r7, #28]
 800bd72:	2300      	movs	r3, #0
 800bd74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd76:	4b3e      	ldr	r3, [pc, #248]	; (800be70 <HAL_RCC_GetSysClockFreq+0x108>)
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	f003 030c 	and.w	r3, r3, #12
 800bd7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bd80:	4b3b      	ldr	r3, [pc, #236]	; (800be70 <HAL_RCC_GetSysClockFreq+0x108>)
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	f003 0303 	and.w	r3, r3, #3
 800bd88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d005      	beq.n	800bd9c <HAL_RCC_GetSysClockFreq+0x34>
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	2b0c      	cmp	r3, #12
 800bd94:	d121      	bne.n	800bdda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d11e      	bne.n	800bdda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800bd9c:	4b34      	ldr	r3, [pc, #208]	; (800be70 <HAL_RCC_GetSysClockFreq+0x108>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f003 0308 	and.w	r3, r3, #8
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d107      	bne.n	800bdb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800bda8:	4b31      	ldr	r3, [pc, #196]	; (800be70 <HAL_RCC_GetSysClockFreq+0x108>)
 800bdaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bdae:	0a1b      	lsrs	r3, r3, #8
 800bdb0:	f003 030f 	and.w	r3, r3, #15
 800bdb4:	61fb      	str	r3, [r7, #28]
 800bdb6:	e005      	b.n	800bdc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bdb8:	4b2d      	ldr	r3, [pc, #180]	; (800be70 <HAL_RCC_GetSysClockFreq+0x108>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	091b      	lsrs	r3, r3, #4
 800bdbe:	f003 030f 	and.w	r3, r3, #15
 800bdc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800bdc4:	4a2b      	ldr	r2, [pc, #172]	; (800be74 <HAL_RCC_GetSysClockFreq+0x10c>)
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdcc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d10d      	bne.n	800bdf0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bdd8:	e00a      	b.n	800bdf0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	2b04      	cmp	r3, #4
 800bdde:	d102      	bne.n	800bde6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bde0:	4b25      	ldr	r3, [pc, #148]	; (800be78 <HAL_RCC_GetSysClockFreq+0x110>)
 800bde2:	61bb      	str	r3, [r7, #24]
 800bde4:	e004      	b.n	800bdf0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	2b08      	cmp	r3, #8
 800bdea:	d101      	bne.n	800bdf0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bdec:	4b23      	ldr	r3, [pc, #140]	; (800be7c <HAL_RCC_GetSysClockFreq+0x114>)
 800bdee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	2b0c      	cmp	r3, #12
 800bdf4:	d134      	bne.n	800be60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bdf6:	4b1e      	ldr	r3, [pc, #120]	; (800be70 <HAL_RCC_GetSysClockFreq+0x108>)
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	f003 0303 	and.w	r3, r3, #3
 800bdfe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	2b02      	cmp	r3, #2
 800be04:	d003      	beq.n	800be0e <HAL_RCC_GetSysClockFreq+0xa6>
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	2b03      	cmp	r3, #3
 800be0a:	d003      	beq.n	800be14 <HAL_RCC_GetSysClockFreq+0xac>
 800be0c:	e005      	b.n	800be1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800be0e:	4b1a      	ldr	r3, [pc, #104]	; (800be78 <HAL_RCC_GetSysClockFreq+0x110>)
 800be10:	617b      	str	r3, [r7, #20]
      break;
 800be12:	e005      	b.n	800be20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800be14:	4b19      	ldr	r3, [pc, #100]	; (800be7c <HAL_RCC_GetSysClockFreq+0x114>)
 800be16:	617b      	str	r3, [r7, #20]
      break;
 800be18:	e002      	b.n	800be20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	617b      	str	r3, [r7, #20]
      break;
 800be1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800be20:	4b13      	ldr	r3, [pc, #76]	; (800be70 <HAL_RCC_GetSysClockFreq+0x108>)
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	091b      	lsrs	r3, r3, #4
 800be26:	f003 0307 	and.w	r3, r3, #7
 800be2a:	3301      	adds	r3, #1
 800be2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800be2e:	4b10      	ldr	r3, [pc, #64]	; (800be70 <HAL_RCC_GetSysClockFreq+0x108>)
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	0a1b      	lsrs	r3, r3, #8
 800be34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be38:	697a      	ldr	r2, [r7, #20]
 800be3a:	fb03 f202 	mul.w	r2, r3, r2
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	fbb2 f3f3 	udiv	r3, r2, r3
 800be44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800be46:	4b0a      	ldr	r3, [pc, #40]	; (800be70 <HAL_RCC_GetSysClockFreq+0x108>)
 800be48:	68db      	ldr	r3, [r3, #12]
 800be4a:	0e5b      	lsrs	r3, r3, #25
 800be4c:	f003 0303 	and.w	r3, r3, #3
 800be50:	3301      	adds	r3, #1
 800be52:	005b      	lsls	r3, r3, #1
 800be54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800be56:	697a      	ldr	r2, [r7, #20]
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800be60:	69bb      	ldr	r3, [r7, #24]
}
 800be62:	4618      	mov	r0, r3
 800be64:	3724      	adds	r7, #36	; 0x24
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop
 800be70:	40021000 	.word	0x40021000
 800be74:	0801ebfc 	.word	0x0801ebfc
 800be78:	00f42400 	.word	0x00f42400
 800be7c:	007a1200 	.word	0x007a1200

0800be80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800be80:	b480      	push	{r7}
 800be82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800be84:	4b03      	ldr	r3, [pc, #12]	; (800be94 <HAL_RCC_GetHCLKFreq+0x14>)
 800be86:	681b      	ldr	r3, [r3, #0]
}
 800be88:	4618      	mov	r0, r3
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	20000038 	.word	0x20000038

0800be98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800be9c:	f7ff fff0 	bl	800be80 <HAL_RCC_GetHCLKFreq>
 800bea0:	4602      	mov	r2, r0
 800bea2:	4b06      	ldr	r3, [pc, #24]	; (800bebc <HAL_RCC_GetPCLK1Freq+0x24>)
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	0a1b      	lsrs	r3, r3, #8
 800bea8:	f003 0307 	and.w	r3, r3, #7
 800beac:	4904      	ldr	r1, [pc, #16]	; (800bec0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800beae:	5ccb      	ldrb	r3, [r1, r3]
 800beb0:	f003 031f 	and.w	r3, r3, #31
 800beb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800beb8:	4618      	mov	r0, r3
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	40021000 	.word	0x40021000
 800bec0:	0801ebf4 	.word	0x0801ebf4

0800bec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800bec8:	f7ff ffda 	bl	800be80 <HAL_RCC_GetHCLKFreq>
 800becc:	4602      	mov	r2, r0
 800bece:	4b06      	ldr	r3, [pc, #24]	; (800bee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bed0:	689b      	ldr	r3, [r3, #8]
 800bed2:	0adb      	lsrs	r3, r3, #11
 800bed4:	f003 0307 	and.w	r3, r3, #7
 800bed8:	4904      	ldr	r1, [pc, #16]	; (800beec <HAL_RCC_GetPCLK2Freq+0x28>)
 800beda:	5ccb      	ldrb	r3, [r1, r3]
 800bedc:	f003 031f 	and.w	r3, r3, #31
 800bee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	40021000 	.word	0x40021000
 800beec:	0801ebf4 	.word	0x0801ebf4

0800bef0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b086      	sub	sp, #24
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800bef8:	2300      	movs	r3, #0
 800befa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800befc:	4b2a      	ldr	r3, [pc, #168]	; (800bfa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800befe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d003      	beq.n	800bf10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800bf08:	f7ff f9a6 	bl	800b258 <HAL_PWREx_GetVoltageRange>
 800bf0c:	6178      	str	r0, [r7, #20]
 800bf0e:	e014      	b.n	800bf3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800bf10:	4b25      	ldr	r3, [pc, #148]	; (800bfa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bf12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf14:	4a24      	ldr	r2, [pc, #144]	; (800bfa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bf16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf1a:	6593      	str	r3, [r2, #88]	; 0x58
 800bf1c:	4b22      	ldr	r3, [pc, #136]	; (800bfa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bf1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf24:	60fb      	str	r3, [r7, #12]
 800bf26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800bf28:	f7ff f996 	bl	800b258 <HAL_PWREx_GetVoltageRange>
 800bf2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800bf2e:	4b1e      	ldr	r3, [pc, #120]	; (800bfa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bf30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf32:	4a1d      	ldr	r2, [pc, #116]	; (800bfa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bf34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf40:	d10b      	bne.n	800bf5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b80      	cmp	r3, #128	; 0x80
 800bf46:	d919      	bls.n	800bf7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2ba0      	cmp	r3, #160	; 0xa0
 800bf4c:	d902      	bls.n	800bf54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800bf4e:	2302      	movs	r3, #2
 800bf50:	613b      	str	r3, [r7, #16]
 800bf52:	e013      	b.n	800bf7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800bf54:	2301      	movs	r3, #1
 800bf56:	613b      	str	r3, [r7, #16]
 800bf58:	e010      	b.n	800bf7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2b80      	cmp	r3, #128	; 0x80
 800bf5e:	d902      	bls.n	800bf66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800bf60:	2303      	movs	r3, #3
 800bf62:	613b      	str	r3, [r7, #16]
 800bf64:	e00a      	b.n	800bf7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2b80      	cmp	r3, #128	; 0x80
 800bf6a:	d102      	bne.n	800bf72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800bf6c:	2302      	movs	r3, #2
 800bf6e:	613b      	str	r3, [r7, #16]
 800bf70:	e004      	b.n	800bf7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b70      	cmp	r3, #112	; 0x70
 800bf76:	d101      	bne.n	800bf7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800bf78:	2301      	movs	r3, #1
 800bf7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800bf7c:	4b0b      	ldr	r3, [pc, #44]	; (800bfac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f023 0207 	bic.w	r2, r3, #7
 800bf84:	4909      	ldr	r1, [pc, #36]	; (800bfac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800bf8c:	4b07      	ldr	r3, [pc, #28]	; (800bfac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f003 0307 	and.w	r3, r3, #7
 800bf94:	693a      	ldr	r2, [r7, #16]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d001      	beq.n	800bf9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e000      	b.n	800bfa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3718      	adds	r7, #24
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	40021000 	.word	0x40021000
 800bfac:	40022000 	.word	0x40022000

0800bfb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b086      	sub	sp, #24
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bfb8:	2300      	movs	r3, #0
 800bfba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d031      	beq.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bfd4:	d01a      	beq.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800bfd6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bfda:	d814      	bhi.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d009      	beq.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800bfe0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bfe4:	d10f      	bne.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800bfe6:	4b5d      	ldr	r3, [pc, #372]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	4a5c      	ldr	r2, [pc, #368]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bfec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bff0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bff2:	e00c      	b.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	3304      	adds	r3, #4
 800bff8:	2100      	movs	r1, #0
 800bffa:	4618      	mov	r0, r3
 800bffc:	f000 f9ce 	bl	800c39c <RCCEx_PLLSAI1_Config>
 800c000:	4603      	mov	r3, r0
 800c002:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c004:	e003      	b.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c006:	2301      	movs	r3, #1
 800c008:	74fb      	strb	r3, [r7, #19]
      break;
 800c00a:	e000      	b.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800c00c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c00e:	7cfb      	ldrb	r3, [r7, #19]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d10b      	bne.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c014:	4b51      	ldr	r3, [pc, #324]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c01a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c022:	494e      	ldr	r1, [pc, #312]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c024:	4313      	orrs	r3, r2
 800c026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c02a:	e001      	b.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c02c:	7cfb      	ldrb	r3, [r7, #19]
 800c02e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c038:	2b00      	cmp	r3, #0
 800c03a:	f000 809e 	beq.w	800c17a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c03e:	2300      	movs	r3, #0
 800c040:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c042:	4b46      	ldr	r3, [pc, #280]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d101      	bne.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800c04e:	2301      	movs	r3, #1
 800c050:	e000      	b.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800c052:	2300      	movs	r3, #0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d00d      	beq.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c058:	4b40      	ldr	r3, [pc, #256]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c05a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c05c:	4a3f      	ldr	r2, [pc, #252]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c05e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c062:	6593      	str	r3, [r2, #88]	; 0x58
 800c064:	4b3d      	ldr	r3, [pc, #244]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c06c:	60bb      	str	r3, [r7, #8]
 800c06e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c070:	2301      	movs	r3, #1
 800c072:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c074:	4b3a      	ldr	r3, [pc, #232]	; (800c160 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a39      	ldr	r2, [pc, #228]	; (800c160 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c07a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c07e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c080:	f7fa f99a 	bl	80063b8 <HAL_GetTick>
 800c084:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c086:	e009      	b.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c088:	f7fa f996 	bl	80063b8 <HAL_GetTick>
 800c08c:	4602      	mov	r2, r0
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	2b02      	cmp	r3, #2
 800c094:	d902      	bls.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800c096:	2303      	movs	r3, #3
 800c098:	74fb      	strb	r3, [r7, #19]
        break;
 800c09a:	e005      	b.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c09c:	4b30      	ldr	r3, [pc, #192]	; (800c160 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d0ef      	beq.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800c0a8:	7cfb      	ldrb	r3, [r7, #19]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d15a      	bne.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c0ae:	4b2b      	ldr	r3, [pc, #172]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c0b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d01e      	beq.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0c4:	697a      	ldr	r2, [r7, #20]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d019      	beq.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c0ca:	4b24      	ldr	r3, [pc, #144]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c0cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c0d6:	4b21      	ldr	r3, [pc, #132]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c0d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0dc:	4a1f      	ldr	r2, [pc, #124]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c0de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c0e6:	4b1d      	ldr	r3, [pc, #116]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c0e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0ec:	4a1b      	ldr	r2, [pc, #108]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c0ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c0f6:	4a19      	ldr	r2, [pc, #100]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	f003 0301 	and.w	r3, r3, #1
 800c104:	2b00      	cmp	r3, #0
 800c106:	d016      	beq.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c108:	f7fa f956 	bl	80063b8 <HAL_GetTick>
 800c10c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c10e:	e00b      	b.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c110:	f7fa f952 	bl	80063b8 <HAL_GetTick>
 800c114:	4602      	mov	r2, r0
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	1ad3      	subs	r3, r2, r3
 800c11a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c11e:	4293      	cmp	r3, r2
 800c120:	d902      	bls.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800c122:	2303      	movs	r3, #3
 800c124:	74fb      	strb	r3, [r7, #19]
            break;
 800c126:	e006      	b.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c128:	4b0c      	ldr	r3, [pc, #48]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c12a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c12e:	f003 0302 	and.w	r3, r3, #2
 800c132:	2b00      	cmp	r3, #0
 800c134:	d0ec      	beq.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800c136:	7cfb      	ldrb	r3, [r7, #19]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d10b      	bne.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c13c:	4b07      	ldr	r3, [pc, #28]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c13e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c142:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c14a:	4904      	ldr	r1, [pc, #16]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c14c:	4313      	orrs	r3, r2
 800c14e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c152:	e009      	b.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c154:	7cfb      	ldrb	r3, [r7, #19]
 800c156:	74bb      	strb	r3, [r7, #18]
 800c158:	e006      	b.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800c15a:	bf00      	nop
 800c15c:	40021000 	.word	0x40021000
 800c160:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c164:	7cfb      	ldrb	r3, [r7, #19]
 800c166:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c168:	7c7b      	ldrb	r3, [r7, #17]
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d105      	bne.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c16e:	4b8a      	ldr	r3, [pc, #552]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c172:	4a89      	ldr	r2, [pc, #548]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c178:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f003 0301 	and.w	r3, r3, #1
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00a      	beq.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c186:	4b84      	ldr	r3, [pc, #528]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c18c:	f023 0203 	bic.w	r2, r3, #3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6a1b      	ldr	r3, [r3, #32]
 800c194:	4980      	ldr	r1, [pc, #512]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c196:	4313      	orrs	r3, r2
 800c198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f003 0302 	and.w	r3, r3, #2
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00a      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c1a8:	4b7b      	ldr	r3, [pc, #492]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c1aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1ae:	f023 020c 	bic.w	r2, r3, #12
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b6:	4978      	ldr	r1, [pc, #480]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f003 0320 	and.w	r3, r3, #32
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d00a      	beq.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c1ca:	4b73      	ldr	r3, [pc, #460]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c1cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d8:	496f      	ldr	r1, [pc, #444]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00a      	beq.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c1ec:	4b6a      	ldr	r3, [pc, #424]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c1ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1f2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1fa:	4967      	ldr	r1, [pc, #412]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00a      	beq.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c20e:	4b62      	ldr	r3, [pc, #392]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c214:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21c:	495e      	ldr	r1, [pc, #376]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c21e:	4313      	orrs	r3, r2
 800c220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00a      	beq.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c230:	4b59      	ldr	r3, [pc, #356]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c236:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c23e:	4956      	ldr	r1, [pc, #344]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c240:	4313      	orrs	r3, r2
 800c242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00a      	beq.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c252:	4b51      	ldr	r3, [pc, #324]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c258:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c260:	494d      	ldr	r1, [pc, #308]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c262:	4313      	orrs	r3, r2
 800c264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c270:	2b00      	cmp	r3, #0
 800c272:	d028      	beq.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c274:	4b48      	ldr	r3, [pc, #288]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c27a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c282:	4945      	ldr	r1, [pc, #276]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c284:	4313      	orrs	r3, r2
 800c286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c28e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c292:	d106      	bne.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c294:	4b40      	ldr	r3, [pc, #256]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	4a3f      	ldr	r2, [pc, #252]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c29a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c29e:	60d3      	str	r3, [r2, #12]
 800c2a0:	e011      	b.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c2aa:	d10c      	bne.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	3304      	adds	r3, #4
 800c2b0:	2101      	movs	r1, #1
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f000 f872 	bl	800c39c <RCCEx_PLLSAI1_Config>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c2bc:	7cfb      	ldrb	r3, [r7, #19]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d001      	beq.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800c2c2:	7cfb      	ldrb	r3, [r7, #19]
 800c2c4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d028      	beq.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c2d2:	4b31      	ldr	r3, [pc, #196]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c2d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2e0:	492d      	ldr	r1, [pc, #180]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2f0:	d106      	bne.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c2f2:	4b29      	ldr	r3, [pc, #164]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c2f4:	68db      	ldr	r3, [r3, #12]
 800c2f6:	4a28      	ldr	r2, [pc, #160]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c2f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2fc:	60d3      	str	r3, [r2, #12]
 800c2fe:	e011      	b.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c308:	d10c      	bne.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	3304      	adds	r3, #4
 800c30e:	2101      	movs	r1, #1
 800c310:	4618      	mov	r0, r3
 800c312:	f000 f843 	bl	800c39c <RCCEx_PLLSAI1_Config>
 800c316:	4603      	mov	r3, r0
 800c318:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c31a:	7cfb      	ldrb	r3, [r7, #19]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d001      	beq.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800c320:	7cfb      	ldrb	r3, [r7, #19]
 800c322:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d01c      	beq.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c330:	4b19      	ldr	r3, [pc, #100]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c336:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c33e:	4916      	ldr	r1, [pc, #88]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c340:	4313      	orrs	r3, r2
 800c342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c34a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c34e:	d10c      	bne.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	3304      	adds	r3, #4
 800c354:	2102      	movs	r1, #2
 800c356:	4618      	mov	r0, r3
 800c358:	f000 f820 	bl	800c39c <RCCEx_PLLSAI1_Config>
 800c35c:	4603      	mov	r3, r0
 800c35e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c360:	7cfb      	ldrb	r3, [r7, #19]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d001      	beq.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800c366:	7cfb      	ldrb	r3, [r7, #19]
 800c368:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c372:	2b00      	cmp	r3, #0
 800c374:	d00a      	beq.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c376:	4b08      	ldr	r3, [pc, #32]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c37c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c384:	4904      	ldr	r1, [pc, #16]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c386:	4313      	orrs	r3, r2
 800c388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c38c:	7cbb      	ldrb	r3, [r7, #18]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3718      	adds	r7, #24
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	40021000 	.word	0x40021000

0800c39c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c3aa:	4b74      	ldr	r3, [pc, #464]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	f003 0303 	and.w	r3, r3, #3
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d018      	beq.n	800c3e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c3b6:	4b71      	ldr	r3, [pc, #452]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	f003 0203 	and.w	r2, r3, #3
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d10d      	bne.n	800c3e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
       ||
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d009      	beq.n	800c3e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c3ce:	4b6b      	ldr	r3, [pc, #428]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	091b      	lsrs	r3, r3, #4
 800c3d4:	f003 0307 	and.w	r3, r3, #7
 800c3d8:	1c5a      	adds	r2, r3, #1
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	685b      	ldr	r3, [r3, #4]
       ||
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d047      	beq.n	800c472 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	73fb      	strb	r3, [r7, #15]
 800c3e6:	e044      	b.n	800c472 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2b03      	cmp	r3, #3
 800c3ee:	d018      	beq.n	800c422 <RCCEx_PLLSAI1_Config+0x86>
 800c3f0:	2b03      	cmp	r3, #3
 800c3f2:	d825      	bhi.n	800c440 <RCCEx_PLLSAI1_Config+0xa4>
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d002      	beq.n	800c3fe <RCCEx_PLLSAI1_Config+0x62>
 800c3f8:	2b02      	cmp	r3, #2
 800c3fa:	d009      	beq.n	800c410 <RCCEx_PLLSAI1_Config+0x74>
 800c3fc:	e020      	b.n	800c440 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c3fe:	4b5f      	ldr	r3, [pc, #380]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f003 0302 	and.w	r3, r3, #2
 800c406:	2b00      	cmp	r3, #0
 800c408:	d11d      	bne.n	800c446 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800c40a:	2301      	movs	r3, #1
 800c40c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c40e:	e01a      	b.n	800c446 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c410:	4b5a      	ldr	r3, [pc, #360]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d116      	bne.n	800c44a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800c41c:	2301      	movs	r3, #1
 800c41e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c420:	e013      	b.n	800c44a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c422:	4b56      	ldr	r3, [pc, #344]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d10f      	bne.n	800c44e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c42e:	4b53      	ldr	r3, [pc, #332]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c436:	2b00      	cmp	r3, #0
 800c438:	d109      	bne.n	800c44e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c43e:	e006      	b.n	800c44e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c440:	2301      	movs	r3, #1
 800c442:	73fb      	strb	r3, [r7, #15]
      break;
 800c444:	e004      	b.n	800c450 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c446:	bf00      	nop
 800c448:	e002      	b.n	800c450 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c44a:	bf00      	nop
 800c44c:	e000      	b.n	800c450 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c44e:	bf00      	nop
    }

    if(status == HAL_OK)
 800c450:	7bfb      	ldrb	r3, [r7, #15]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d10d      	bne.n	800c472 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c456:	4b49      	ldr	r3, [pc, #292]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c458:	68db      	ldr	r3, [r3, #12]
 800c45a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6819      	ldr	r1, [r3, #0]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	3b01      	subs	r3, #1
 800c468:	011b      	lsls	r3, r3, #4
 800c46a:	430b      	orrs	r3, r1
 800c46c:	4943      	ldr	r1, [pc, #268]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c46e:	4313      	orrs	r3, r2
 800c470:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c472:	7bfb      	ldrb	r3, [r7, #15]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d17c      	bne.n	800c572 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c478:	4b40      	ldr	r3, [pc, #256]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a3f      	ldr	r2, [pc, #252]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c47e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c484:	f7f9 ff98 	bl	80063b8 <HAL_GetTick>
 800c488:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c48a:	e009      	b.n	800c4a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c48c:	f7f9 ff94 	bl	80063b8 <HAL_GetTick>
 800c490:	4602      	mov	r2, r0
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	1ad3      	subs	r3, r2, r3
 800c496:	2b02      	cmp	r3, #2
 800c498:	d902      	bls.n	800c4a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c49a:	2303      	movs	r3, #3
 800c49c:	73fb      	strb	r3, [r7, #15]
        break;
 800c49e:	e005      	b.n	800c4ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c4a0:	4b36      	ldr	r3, [pc, #216]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d1ef      	bne.n	800c48c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c4ac:	7bfb      	ldrb	r3, [r7, #15]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d15f      	bne.n	800c572 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d110      	bne.n	800c4da <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c4b8:	4b30      	ldr	r3, [pc, #192]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c4ba:	691b      	ldr	r3, [r3, #16]
 800c4bc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800c4c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	6892      	ldr	r2, [r2, #8]
 800c4c8:	0211      	lsls	r1, r2, #8
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	68d2      	ldr	r2, [r2, #12]
 800c4ce:	06d2      	lsls	r2, r2, #27
 800c4d0:	430a      	orrs	r2, r1
 800c4d2:	492a      	ldr	r1, [pc, #168]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	610b      	str	r3, [r1, #16]
 800c4d8:	e027      	b.n	800c52a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d112      	bne.n	800c506 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c4e0:	4b26      	ldr	r3, [pc, #152]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c4e2:	691b      	ldr	r3, [r3, #16]
 800c4e4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c4e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	6892      	ldr	r2, [r2, #8]
 800c4f0:	0211      	lsls	r1, r2, #8
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	6912      	ldr	r2, [r2, #16]
 800c4f6:	0852      	lsrs	r2, r2, #1
 800c4f8:	3a01      	subs	r2, #1
 800c4fa:	0552      	lsls	r2, r2, #21
 800c4fc:	430a      	orrs	r2, r1
 800c4fe:	491f      	ldr	r1, [pc, #124]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c500:	4313      	orrs	r3, r2
 800c502:	610b      	str	r3, [r1, #16]
 800c504:	e011      	b.n	800c52a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c506:	4b1d      	ldr	r3, [pc, #116]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c508:	691b      	ldr	r3, [r3, #16]
 800c50a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800c50e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	6892      	ldr	r2, [r2, #8]
 800c516:	0211      	lsls	r1, r2, #8
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	6952      	ldr	r2, [r2, #20]
 800c51c:	0852      	lsrs	r2, r2, #1
 800c51e:	3a01      	subs	r2, #1
 800c520:	0652      	lsls	r2, r2, #25
 800c522:	430a      	orrs	r2, r1
 800c524:	4915      	ldr	r1, [pc, #84]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c526:	4313      	orrs	r3, r2
 800c528:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c52a:	4b14      	ldr	r3, [pc, #80]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4a13      	ldr	r2, [pc, #76]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c530:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c534:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c536:	f7f9 ff3f 	bl	80063b8 <HAL_GetTick>
 800c53a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c53c:	e009      	b.n	800c552 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c53e:	f7f9 ff3b 	bl	80063b8 <HAL_GetTick>
 800c542:	4602      	mov	r2, r0
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	1ad3      	subs	r3, r2, r3
 800c548:	2b02      	cmp	r3, #2
 800c54a:	d902      	bls.n	800c552 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800c54c:	2303      	movs	r3, #3
 800c54e:	73fb      	strb	r3, [r7, #15]
          break;
 800c550:	e005      	b.n	800c55e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c552:	4b0a      	ldr	r3, [pc, #40]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d0ef      	beq.n	800c53e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800c55e:	7bfb      	ldrb	r3, [r7, #15]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d106      	bne.n	800c572 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c564:	4b05      	ldr	r3, [pc, #20]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c566:	691a      	ldr	r2, [r3, #16]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	699b      	ldr	r3, [r3, #24]
 800c56c:	4903      	ldr	r1, [pc, #12]	; (800c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c56e:	4313      	orrs	r3, r2
 800c570:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c572:	7bfb      	ldrb	r3, [r7, #15]
}
 800c574:	4618      	mov	r0, r3
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	40021000 	.word	0x40021000

0800c580 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d101      	bne.n	800c592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c58e:	2301      	movs	r3, #1
 800c590:	e095      	b.n	800c6be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c596:	2b00      	cmp	r3, #0
 800c598:	d108      	bne.n	800c5ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c5a2:	d009      	beq.n	800c5b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	61da      	str	r2, [r3, #28]
 800c5aa:	e005      	b.n	800c5b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d106      	bne.n	800c5d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f7f6 fb48 	bl	8002c68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2202      	movs	r2, #2
 800c5dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c5f8:	d902      	bls.n	800c600 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	60fb      	str	r3, [r7, #12]
 800c5fe:	e002      	b.n	800c606 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c604:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c60e:	d007      	beq.n	800c620 <HAL_SPI_Init+0xa0>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c618:	d002      	beq.n	800c620 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c630:	431a      	orrs	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	691b      	ldr	r3, [r3, #16]
 800c636:	f003 0302 	and.w	r3, r3, #2
 800c63a:	431a      	orrs	r2, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	695b      	ldr	r3, [r3, #20]
 800c640:	f003 0301 	and.w	r3, r3, #1
 800c644:	431a      	orrs	r2, r3
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	699b      	ldr	r3, [r3, #24]
 800c64a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c64e:	431a      	orrs	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	69db      	ldr	r3, [r3, #28]
 800c654:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c658:	431a      	orrs	r2, r3
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a1b      	ldr	r3, [r3, #32]
 800c65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c662:	ea42 0103 	orr.w	r1, r2, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c66a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	430a      	orrs	r2, r1
 800c674:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	699b      	ldr	r3, [r3, #24]
 800c67a:	0c1b      	lsrs	r3, r3, #16
 800c67c:	f003 0204 	and.w	r2, r3, #4
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c684:	f003 0310 	and.w	r3, r3, #16
 800c688:	431a      	orrs	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c68e:	f003 0308 	and.w	r3, r3, #8
 800c692:	431a      	orrs	r2, r3
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c69c:	ea42 0103 	orr.w	r1, r2, r3
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	430a      	orrs	r2, r1
 800c6ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c6bc:	2300      	movs	r3, #0
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3710      	adds	r7, #16
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b088      	sub	sp, #32
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	60f8      	str	r0, [r7, #12]
 800c6ce:	60b9      	str	r1, [r7, #8]
 800c6d0:	603b      	str	r3, [r7, #0]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d101      	bne.n	800c6e8 <HAL_SPI_Transmit+0x22>
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	e15f      	b.n	800c9a8 <HAL_SPI_Transmit+0x2e2>
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c6f0:	f7f9 fe62 	bl	80063b8 <HAL_GetTick>
 800c6f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c6f6:	88fb      	ldrh	r3, [r7, #6]
 800c6f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c700:	b2db      	uxtb	r3, r3
 800c702:	2b01      	cmp	r3, #1
 800c704:	d002      	beq.n	800c70c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c706:	2302      	movs	r3, #2
 800c708:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c70a:	e148      	b.n	800c99e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d002      	beq.n	800c718 <HAL_SPI_Transmit+0x52>
 800c712:	88fb      	ldrh	r3, [r7, #6]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d102      	bne.n	800c71e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c718:	2301      	movs	r3, #1
 800c71a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c71c:	e13f      	b.n	800c99e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2203      	movs	r2, #3
 800c722:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2200      	movs	r2, #0
 800c72a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	68ba      	ldr	r2, [r7, #8]
 800c730:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	88fa      	ldrh	r2, [r7, #6]
 800c736:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	88fa      	ldrh	r2, [r7, #6]
 800c73c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2200      	movs	r2, #0
 800c742:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2200      	movs	r2, #0
 800c748:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2200      	movs	r2, #0
 800c750:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2200      	movs	r2, #0
 800c758:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2200      	movs	r2, #0
 800c75e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	689b      	ldr	r3, [r3, #8]
 800c764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c768:	d10f      	bne.n	800c78a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c778:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c788:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c794:	2b40      	cmp	r3, #64	; 0x40
 800c796:	d007      	beq.n	800c7a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	68db      	ldr	r3, [r3, #12]
 800c7ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c7b0:	d94f      	bls.n	800c852 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d002      	beq.n	800c7c0 <HAL_SPI_Transmit+0xfa>
 800c7ba:	8afb      	ldrh	r3, [r7, #22]
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d142      	bne.n	800c846 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7c4:	881a      	ldrh	r2, [r3, #0]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d0:	1c9a      	adds	r2, r3, #2
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	3b01      	subs	r3, #1
 800c7de:	b29a      	uxth	r2, r3
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c7e4:	e02f      	b.n	800c846 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	689b      	ldr	r3, [r3, #8]
 800c7ec:	f003 0302 	and.w	r3, r3, #2
 800c7f0:	2b02      	cmp	r3, #2
 800c7f2:	d112      	bne.n	800c81a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f8:	881a      	ldrh	r2, [r3, #0]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c804:	1c9a      	adds	r2, r3, #2
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c80e:	b29b      	uxth	r3, r3
 800c810:	3b01      	subs	r3, #1
 800c812:	b29a      	uxth	r2, r3
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c818:	e015      	b.n	800c846 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c81a:	f7f9 fdcd 	bl	80063b8 <HAL_GetTick>
 800c81e:	4602      	mov	r2, r0
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	1ad3      	subs	r3, r2, r3
 800c824:	683a      	ldr	r2, [r7, #0]
 800c826:	429a      	cmp	r2, r3
 800c828:	d803      	bhi.n	800c832 <HAL_SPI_Transmit+0x16c>
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c830:	d102      	bne.n	800c838 <HAL_SPI_Transmit+0x172>
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d106      	bne.n	800c846 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800c838:	2303      	movs	r3, #3
 800c83a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2201      	movs	r2, #1
 800c840:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c844:	e0ab      	b.n	800c99e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d1ca      	bne.n	800c7e6 <HAL_SPI_Transmit+0x120>
 800c850:	e080      	b.n	800c954 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d002      	beq.n	800c860 <HAL_SPI_Transmit+0x19a>
 800c85a:	8afb      	ldrh	r3, [r7, #22]
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d174      	bne.n	800c94a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c864:	b29b      	uxth	r3, r3
 800c866:	2b01      	cmp	r3, #1
 800c868:	d912      	bls.n	800c890 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c86e:	881a      	ldrh	r2, [r3, #0]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c87a:	1c9a      	adds	r2, r3, #2
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c884:	b29b      	uxth	r3, r3
 800c886:	3b02      	subs	r3, #2
 800c888:	b29a      	uxth	r2, r3
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c88e:	e05c      	b.n	800c94a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	330c      	adds	r3, #12
 800c89a:	7812      	ldrb	r2, [r2, #0]
 800c89c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a2:	1c5a      	adds	r2, r3, #1
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	b29a      	uxth	r2, r3
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c8b6:	e048      	b.n	800c94a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	689b      	ldr	r3, [r3, #8]
 800c8be:	f003 0302 	and.w	r3, r3, #2
 800c8c2:	2b02      	cmp	r3, #2
 800c8c4:	d12b      	bne.n	800c91e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d912      	bls.n	800c8f6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d4:	881a      	ldrh	r2, [r3, #0]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e0:	1c9a      	adds	r2, r3, #2
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	3b02      	subs	r3, #2
 800c8ee:	b29a      	uxth	r2, r3
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c8f4:	e029      	b.n	800c94a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	330c      	adds	r3, #12
 800c900:	7812      	ldrb	r2, [r2, #0]
 800c902:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c908:	1c5a      	adds	r2, r3, #1
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c912:	b29b      	uxth	r3, r3
 800c914:	3b01      	subs	r3, #1
 800c916:	b29a      	uxth	r2, r3
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c91c:	e015      	b.n	800c94a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c91e:	f7f9 fd4b 	bl	80063b8 <HAL_GetTick>
 800c922:	4602      	mov	r2, r0
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	1ad3      	subs	r3, r2, r3
 800c928:	683a      	ldr	r2, [r7, #0]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d803      	bhi.n	800c936 <HAL_SPI_Transmit+0x270>
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c934:	d102      	bne.n	800c93c <HAL_SPI_Transmit+0x276>
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d106      	bne.n	800c94a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800c93c:	2303      	movs	r3, #3
 800c93e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2201      	movs	r2, #1
 800c944:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c948:	e029      	b.n	800c99e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c94e:	b29b      	uxth	r3, r3
 800c950:	2b00      	cmp	r3, #0
 800c952:	d1b1      	bne.n	800c8b8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c954:	69ba      	ldr	r2, [r7, #24]
 800c956:	6839      	ldr	r1, [r7, #0]
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	f001 fb63 	bl	800e024 <SPI_EndRxTxTransaction>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	d002      	beq.n	800c96a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2220      	movs	r2, #32
 800c968:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	689b      	ldr	r3, [r3, #8]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d10a      	bne.n	800c988 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c972:	2300      	movs	r3, #0
 800c974:	613b      	str	r3, [r7, #16]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	613b      	str	r3, [r7, #16]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	613b      	str	r3, [r7, #16]
 800c986:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d002      	beq.n	800c996 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800c990:	2301      	movs	r3, #1
 800c992:	77fb      	strb	r3, [r7, #31]
 800c994:	e003      	b.n	800c99e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2201      	movs	r2, #1
 800c99a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c9a6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3720      	adds	r7, #32
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b088      	sub	sp, #32
 800c9b4:	af02      	add	r7, sp, #8
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	603b      	str	r3, [r7, #0]
 800c9bc:	4613      	mov	r3, r2
 800c9be:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d002      	beq.n	800c9d6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800c9d0:	2302      	movs	r3, #2
 800c9d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c9d4:	e11a      	b.n	800cc0c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	685b      	ldr	r3, [r3, #4]
 800c9da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c9de:	d112      	bne.n	800ca06 <HAL_SPI_Receive+0x56>
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d10e      	bne.n	800ca06 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2204      	movs	r2, #4
 800c9ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c9f0:	88fa      	ldrh	r2, [r7, #6]
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	68b9      	ldr	r1, [r7, #8]
 800c9fc:	68f8      	ldr	r0, [r7, #12]
 800c9fe:	f000 f90e 	bl	800cc1e <HAL_SPI_TransmitReceive>
 800ca02:	4603      	mov	r3, r0
 800ca04:	e107      	b.n	800cc16 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d101      	bne.n	800ca14 <HAL_SPI_Receive+0x64>
 800ca10:	2302      	movs	r3, #2
 800ca12:	e100      	b.n	800cc16 <HAL_SPI_Receive+0x266>
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ca1c:	f7f9 fccc 	bl	80063b8 <HAL_GetTick>
 800ca20:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <HAL_SPI_Receive+0x7e>
 800ca28:	88fb      	ldrh	r3, [r7, #6]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d102      	bne.n	800ca34 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ca32:	e0eb      	b.n	800cc0c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2204      	movs	r2, #4
 800ca38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	68ba      	ldr	r2, [r7, #8]
 800ca46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	88fa      	ldrh	r2, [r7, #6]
 800ca4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	88fa      	ldrh	r2, [r7, #6]
 800ca54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2200      	movs	r2, #0
 800ca62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2200      	movs	r2, #0
 800ca68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2200      	movs	r2, #0
 800ca74:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ca7e:	d908      	bls.n	800ca92 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	685a      	ldr	r2, [r3, #4]
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ca8e:	605a      	str	r2, [r3, #4]
 800ca90:	e007      	b.n	800caa2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	685a      	ldr	r2, [r3, #4]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800caa0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	689b      	ldr	r3, [r3, #8]
 800caa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caaa:	d10f      	bne.n	800cacc <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800caba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800caca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cad6:	2b40      	cmp	r3, #64	; 0x40
 800cad8:	d007      	beq.n	800caea <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cae8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	68db      	ldr	r3, [r3, #12]
 800caee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800caf2:	d86f      	bhi.n	800cbd4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800caf4:	e034      	b.n	800cb60 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	689b      	ldr	r3, [r3, #8]
 800cafc:	f003 0301 	and.w	r3, r3, #1
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d117      	bne.n	800cb34 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f103 020c 	add.w	r2, r3, #12
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb10:	7812      	ldrb	r2, [r2, #0]
 800cb12:	b2d2      	uxtb	r2, r2
 800cb14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb1a:	1c5a      	adds	r2, r3, #1
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	3b01      	subs	r3, #1
 800cb2a:	b29a      	uxth	r2, r3
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800cb32:	e015      	b.n	800cb60 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb34:	f7f9 fc40 	bl	80063b8 <HAL_GetTick>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	1ad3      	subs	r3, r2, r3
 800cb3e:	683a      	ldr	r2, [r7, #0]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d803      	bhi.n	800cb4c <HAL_SPI_Receive+0x19c>
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb4a:	d102      	bne.n	800cb52 <HAL_SPI_Receive+0x1a2>
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d106      	bne.n	800cb60 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800cb52:	2303      	movs	r3, #3
 800cb54:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2201      	movs	r2, #1
 800cb5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800cb5e:	e055      	b.n	800cc0c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d1c4      	bne.n	800caf6 <HAL_SPI_Receive+0x146>
 800cb6c:	e038      	b.n	800cbe0 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	689b      	ldr	r3, [r3, #8]
 800cb74:	f003 0301 	and.w	r3, r3, #1
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d115      	bne.n	800cba8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	68da      	ldr	r2, [r3, #12]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb86:	b292      	uxth	r2, r2
 800cb88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb8e:	1c9a      	adds	r2, r3, #2
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	b29a      	uxth	r2, r3
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800cba6:	e015      	b.n	800cbd4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cba8:	f7f9 fc06 	bl	80063b8 <HAL_GetTick>
 800cbac:	4602      	mov	r2, r0
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	1ad3      	subs	r3, r2, r3
 800cbb2:	683a      	ldr	r2, [r7, #0]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d803      	bhi.n	800cbc0 <HAL_SPI_Receive+0x210>
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbbe:	d102      	bne.n	800cbc6 <HAL_SPI_Receive+0x216>
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d106      	bne.n	800cbd4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800cbc6:	2303      	movs	r3, #3
 800cbc8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2201      	movs	r2, #1
 800cbce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800cbd2:	e01b      	b.n	800cc0c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d1c6      	bne.n	800cb6e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cbe0:	693a      	ldr	r2, [r7, #16]
 800cbe2:	6839      	ldr	r1, [r7, #0]
 800cbe4:	68f8      	ldr	r0, [r7, #12]
 800cbe6:	f001 f9c5 	bl	800df74 <SPI_EndRxTransaction>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d002      	beq.n	800cbf6 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2220      	movs	r2, #32
 800cbf4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d002      	beq.n	800cc04 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	75fb      	strb	r3, [r7, #23]
 800cc02:	e003      	b.n	800cc0c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2201      	movs	r2, #1
 800cc08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cc14:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3718      	adds	r7, #24
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b08a      	sub	sp, #40	; 0x28
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	60f8      	str	r0, [r7, #12]
 800cc26:	60b9      	str	r1, [r7, #8]
 800cc28:	607a      	str	r2, [r7, #4]
 800cc2a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800cc30:	2300      	movs	r3, #0
 800cc32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d101      	bne.n	800cc44 <HAL_SPI_TransmitReceive+0x26>
 800cc40:	2302      	movs	r3, #2
 800cc42:	e20a      	b.n	800d05a <HAL_SPI_TransmitReceive+0x43c>
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2201      	movs	r2, #1
 800cc48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cc4c:	f7f9 fbb4 	bl	80063b8 <HAL_GetTick>
 800cc50:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cc58:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800cc60:	887b      	ldrh	r3, [r7, #2]
 800cc62:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800cc64:	887b      	ldrh	r3, [r7, #2]
 800cc66:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cc68:	7efb      	ldrb	r3, [r7, #27]
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d00e      	beq.n	800cc8c <HAL_SPI_TransmitReceive+0x6e>
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc74:	d106      	bne.n	800cc84 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	689b      	ldr	r3, [r3, #8]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d102      	bne.n	800cc84 <HAL_SPI_TransmitReceive+0x66>
 800cc7e:	7efb      	ldrb	r3, [r7, #27]
 800cc80:	2b04      	cmp	r3, #4
 800cc82:	d003      	beq.n	800cc8c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800cc84:	2302      	movs	r3, #2
 800cc86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800cc8a:	e1e0      	b.n	800d04e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d005      	beq.n	800cc9e <HAL_SPI_TransmitReceive+0x80>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d002      	beq.n	800cc9e <HAL_SPI_TransmitReceive+0x80>
 800cc98:	887b      	ldrh	r3, [r7, #2]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d103      	bne.n	800cca6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800cca4:	e1d3      	b.n	800d04e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	2b04      	cmp	r3, #4
 800ccb0:	d003      	beq.n	800ccba <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2205      	movs	r2, #5
 800ccb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	887a      	ldrh	r2, [r7, #2]
 800ccca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	887a      	ldrh	r2, [r7, #2]
 800ccd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	68ba      	ldr	r2, [r7, #8]
 800ccda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	887a      	ldrh	r2, [r7, #2]
 800cce0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	887a      	ldrh	r2, [r7, #2]
 800cce6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2200      	movs	r2, #0
 800ccec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ccfc:	d802      	bhi.n	800cd04 <HAL_SPI_TransmitReceive+0xe6>
 800ccfe:	8a3b      	ldrh	r3, [r7, #16]
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d908      	bls.n	800cd16 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	685a      	ldr	r2, [r3, #4]
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cd12:	605a      	str	r2, [r3, #4]
 800cd14:	e007      	b.n	800cd26 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	685a      	ldr	r2, [r3, #4]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cd24:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd30:	2b40      	cmp	r3, #64	; 0x40
 800cd32:	d007      	beq.n	800cd44 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cd4c:	f240 8081 	bls.w	800ce52 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d002      	beq.n	800cd5e <HAL_SPI_TransmitReceive+0x140>
 800cd58:	8a7b      	ldrh	r3, [r7, #18]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d16d      	bne.n	800ce3a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd62:	881a      	ldrh	r2, [r3, #0]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd6e:	1c9a      	adds	r2, r3, #2
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cd82:	e05a      	b.n	800ce3a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	f003 0302 	and.w	r3, r3, #2
 800cd8e:	2b02      	cmp	r3, #2
 800cd90:	d11b      	bne.n	800cdca <HAL_SPI_TransmitReceive+0x1ac>
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d016      	beq.n	800cdca <HAL_SPI_TransmitReceive+0x1ac>
 800cd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d113      	bne.n	800cdca <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda6:	881a      	ldrh	r2, [r3, #0]
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb2:	1c9a      	adds	r2, r3, #2
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	b29a      	uxth	r2, r3
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	f003 0301 	and.w	r3, r3, #1
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d11c      	bne.n	800ce12 <HAL_SPI_TransmitReceive+0x1f4>
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cdde:	b29b      	uxth	r3, r3
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d016      	beq.n	800ce12 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	68da      	ldr	r2, [r3, #12]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdee:	b292      	uxth	r2, r2
 800cdf0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf6:	1c9a      	adds	r2, r3, #2
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	3b01      	subs	r3, #1
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ce12:	f7f9 fad1 	bl	80063b8 <HAL_GetTick>
 800ce16:	4602      	mov	r2, r0
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	1ad3      	subs	r3, r2, r3
 800ce1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d80b      	bhi.n	800ce3a <HAL_SPI_TransmitReceive+0x21c>
 800ce22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce28:	d007      	beq.n	800ce3a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2201      	movs	r2, #1
 800ce34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800ce38:	e109      	b.n	800d04e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d19f      	bne.n	800cd84 <HAL_SPI_TransmitReceive+0x166>
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ce4a:	b29b      	uxth	r3, r3
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d199      	bne.n	800cd84 <HAL_SPI_TransmitReceive+0x166>
 800ce50:	e0e3      	b.n	800d01a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d003      	beq.n	800ce62 <HAL_SPI_TransmitReceive+0x244>
 800ce5a:	8a7b      	ldrh	r3, [r7, #18]
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	f040 80cf 	bne.w	800d000 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	d912      	bls.n	800ce92 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce70:	881a      	ldrh	r2, [r3, #0]
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce7c:	1c9a      	adds	r2, r3, #2
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	3b02      	subs	r3, #2
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ce90:	e0b6      	b.n	800d000 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	330c      	adds	r3, #12
 800ce9c:	7812      	ldrb	r2, [r2, #0]
 800ce9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea4:	1c5a      	adds	r2, r3, #1
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ceb8:	e0a2      	b.n	800d000 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	689b      	ldr	r3, [r3, #8]
 800cec0:	f003 0302 	and.w	r3, r3, #2
 800cec4:	2b02      	cmp	r3, #2
 800cec6:	d134      	bne.n	800cf32 <HAL_SPI_TransmitReceive+0x314>
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cecc:	b29b      	uxth	r3, r3
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d02f      	beq.n	800cf32 <HAL_SPI_TransmitReceive+0x314>
 800ced2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d12c      	bne.n	800cf32 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cedc:	b29b      	uxth	r3, r3
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d912      	bls.n	800cf08 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee6:	881a      	ldrh	r2, [r3, #0]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef2:	1c9a      	adds	r2, r3, #2
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	3b02      	subs	r3, #2
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cf06:	e012      	b.n	800cf2e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	330c      	adds	r3, #12
 800cf12:	7812      	ldrb	r2, [r2, #0]
 800cf14:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf1a:	1c5a      	adds	r2, r3, #1
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	3b01      	subs	r3, #1
 800cf28:	b29a      	uxth	r2, r3
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	f003 0301 	and.w	r3, r3, #1
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d148      	bne.n	800cfd2 <HAL_SPI_TransmitReceive+0x3b4>
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d042      	beq.n	800cfd2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d923      	bls.n	800cfa0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	68da      	ldr	r2, [r3, #12]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf62:	b292      	uxth	r2, r2
 800cf64:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf6a:	1c9a      	adds	r2, r3, #2
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	3b02      	subs	r3, #2
 800cf7a:	b29a      	uxth	r2, r3
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cf88:	b29b      	uxth	r3, r3
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d81f      	bhi.n	800cfce <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	685a      	ldr	r2, [r3, #4]
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cf9c:	605a      	str	r2, [r3, #4]
 800cf9e:	e016      	b.n	800cfce <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f103 020c 	add.w	r2, r3, #12
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfac:	7812      	ldrb	r2, [r2, #0]
 800cfae:	b2d2      	uxtb	r2, r2
 800cfb0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfb6:	1c5a      	adds	r2, r3, #1
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800cfd2:	f7f9 f9f1 	bl	80063b8 <HAL_GetTick>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	69fb      	ldr	r3, [r7, #28]
 800cfda:	1ad3      	subs	r3, r2, r3
 800cfdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d803      	bhi.n	800cfea <HAL_SPI_TransmitReceive+0x3cc>
 800cfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfe8:	d102      	bne.n	800cff0 <HAL_SPI_TransmitReceive+0x3d2>
 800cfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d107      	bne.n	800d000 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800cff0:	2303      	movs	r3, #3
 800cff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2201      	movs	r2, #1
 800cffa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800cffe:	e026      	b.n	800d04e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d004:	b29b      	uxth	r3, r3
 800d006:	2b00      	cmp	r3, #0
 800d008:	f47f af57 	bne.w	800ceba <HAL_SPI_TransmitReceive+0x29c>
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d012:	b29b      	uxth	r3, r3
 800d014:	2b00      	cmp	r3, #0
 800d016:	f47f af50 	bne.w	800ceba <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d01a:	69fa      	ldr	r2, [r7, #28]
 800d01c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d01e:	68f8      	ldr	r0, [r7, #12]
 800d020:	f001 f800 	bl	800e024 <SPI_EndRxTxTransaction>
 800d024:	4603      	mov	r3, r0
 800d026:	2b00      	cmp	r3, #0
 800d028:	d005      	beq.n	800d036 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800d02a:	2301      	movs	r3, #1
 800d02c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2220      	movs	r2, #32
 800d034:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d003      	beq.n	800d046 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800d03e:	2301      	movs	r3, #1
 800d040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d044:	e003      	b.n	800d04e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2201      	movs	r2, #1
 800d04a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2200      	movs	r2, #0
 800d052:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d056:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3728      	adds	r7, #40	; 0x28
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
	...

0800d064 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b086      	sub	sp, #24
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	60b9      	str	r1, [r7, #8]
 800d06e:	4613      	mov	r3, r2
 800d070:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d072:	2300      	movs	r3, #0
 800d074:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d101      	bne.n	800d084 <HAL_SPI_Transmit_DMA+0x20>
 800d080:	2302      	movs	r3, #2
 800d082:	e0d4      	b.n	800d22e <HAL_SPI_Transmit_DMA+0x1ca>
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2201      	movs	r2, #1
 800d088:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d092:	b2db      	uxtb	r3, r3
 800d094:	2b01      	cmp	r3, #1
 800d096:	d002      	beq.n	800d09e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800d098:	2302      	movs	r3, #2
 800d09a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d09c:	e0c2      	b.n	800d224 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d002      	beq.n	800d0aa <HAL_SPI_Transmit_DMA+0x46>
 800d0a4:	88fb      	ldrh	r3, [r7, #6]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d102      	bne.n	800d0b0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d0ae:	e0b9      	b.n	800d224 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2203      	movs	r2, #3
 800d0b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	68ba      	ldr	r2, [r7, #8]
 800d0c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	88fa      	ldrh	r2, [r7, #6]
 800d0c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	88fa      	ldrh	r2, [r7, #6]
 800d0ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	689b      	ldr	r3, [r3, #8]
 800d0f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0fa:	d10f      	bne.n	800d11c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d10a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d11a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d120:	4a45      	ldr	r2, [pc, #276]	; (800d238 <HAL_SPI_Transmit_DMA+0x1d4>)
 800d122:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d128:	4a44      	ldr	r2, [pc, #272]	; (800d23c <HAL_SPI_Transmit_DMA+0x1d8>)
 800d12a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d130:	4a43      	ldr	r2, [pc, #268]	; (800d240 <HAL_SPI_Transmit_DMA+0x1dc>)
 800d132:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d138:	2200      	movs	r2, #0
 800d13a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	685a      	ldr	r2, [r3, #4]
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d14a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d154:	d82d      	bhi.n	800d1b2 <HAL_SPI_Transmit_DMA+0x14e>
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d15a:	699b      	ldr	r3, [r3, #24]
 800d15c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d160:	d127      	bne.n	800d1b2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d166:	b29b      	uxth	r3, r3
 800d168:	f003 0301 	and.w	r3, r3, #1
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d10f      	bne.n	800d190 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	685a      	ldr	r2, [r3, #4]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d17e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d184:	b29b      	uxth	r3, r3
 800d186:	085b      	lsrs	r3, r3, #1
 800d188:	b29a      	uxth	r2, r3
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d18e:	e010      	b.n	800d1b2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	685a      	ldr	r2, [r3, #4]
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d19e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d1a4:	b29b      	uxth	r3, r3
 800d1a6:	085b      	lsrs	r3, r3, #1
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	b29a      	uxth	r2, r3
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	330c      	adds	r3, #12
 800d1c2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d1c8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d1ca:	f7fa fd8f 	bl	8007cec <HAL_DMA_Start_IT>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d008      	beq.n	800d1e6 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1d8:	f043 0210 	orr.w	r2, r3, #16
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	75fb      	strb	r3, [r7, #23]

    goto error;
 800d1e4:	e01e      	b.n	800d224 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1f0:	2b40      	cmp	r3, #64	; 0x40
 800d1f2:	d007      	beq.n	800d204 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d202:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	685a      	ldr	r2, [r3, #4]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f042 0220 	orr.w	r2, r2, #32
 800d212:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	685a      	ldr	r2, [r3, #4]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f042 0202 	orr.w	r2, r2, #2
 800d222:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2200      	movs	r2, #0
 800d228:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d22c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3718      	adds	r7, #24
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	0800dc7b 	.word	0x0800dc7b
 800d23c:	0800da9d 	.word	0x0800da9d
 800d240:	0800dccf 	.word	0x0800dccf

0800d244 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b086      	sub	sp, #24
 800d248:	af00      	add	r7, sp, #0
 800d24a:	60f8      	str	r0, [r7, #12]
 800d24c:	60b9      	str	r1, [r7, #8]
 800d24e:	4613      	mov	r3, r2
 800d250:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d252:	2300      	movs	r3, #0
 800d254:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d002      	beq.n	800d268 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800d262:	2302      	movs	r3, #2
 800d264:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d266:	e0fe      	b.n	800d466 <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	689b      	ldr	r3, [r3, #8]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d110      	bne.n	800d292 <HAL_SPI_Receive_DMA+0x4e>
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d278:	d10b      	bne.n	800d292 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2204      	movs	r2, #4
 800d27e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800d282:	88fb      	ldrh	r3, [r7, #6]
 800d284:	68ba      	ldr	r2, [r7, #8]
 800d286:	68b9      	ldr	r1, [r7, #8]
 800d288:	68f8      	ldr	r0, [r7, #12]
 800d28a:	f000 f8fb 	bl	800d484 <HAL_SPI_TransmitReceive_DMA>
 800d28e:	4603      	mov	r3, r0
 800d290:	e0ee      	b.n	800d470 <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d101      	bne.n	800d2a0 <HAL_SPI_Receive_DMA+0x5c>
 800d29c:	2302      	movs	r3, #2
 800d29e:	e0e7      	b.n	800d470 <HAL_SPI_Receive_DMA+0x22c>
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d002      	beq.n	800d2b4 <HAL_SPI_Receive_DMA+0x70>
 800d2ae:	88fb      	ldrh	r3, [r7, #6]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d102      	bne.n	800d2ba <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d2b8:	e0d5      	b.n	800d466 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2204      	movs	r2, #4
 800d2be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	68ba      	ldr	r2, [r7, #8]
 800d2cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	88fa      	ldrh	r2, [r7, #6]
 800d2d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	88fa      	ldrh	r2, [r7, #6]
 800d2da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2fe:	d10f      	bne.n	800d320 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d30e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d31e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	685a      	ldr	r2, [r3, #4]
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d32e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d338:	d908      	bls.n	800d34c <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	685a      	ldr	r2, [r3, #4]
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d348:	605a      	str	r2, [r3, #4]
 800d34a:	e042      	b.n	800d3d2 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	685a      	ldr	r2, [r3, #4]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d35a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d360:	699b      	ldr	r3, [r3, #24]
 800d362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d366:	d134      	bne.n	800d3d2 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	685a      	ldr	r2, [r3, #4]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d376:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d37e:	b29b      	uxth	r3, r3
 800d380:	f003 0301 	and.w	r3, r3, #1
 800d384:	2b00      	cmp	r3, #0
 800d386:	d111      	bne.n	800d3ac <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	685a      	ldr	r2, [r3, #4]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d396:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d39e:	b29b      	uxth	r3, r3
 800d3a0:	085b      	lsrs	r3, r3, #1
 800d3a2:	b29a      	uxth	r2, r3
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d3aa:	e012      	b.n	800d3d2 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	685a      	ldr	r2, [r3, #4]
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d3ba:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	085b      	lsrs	r3, r3, #1
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3d6:	4a28      	ldr	r2, [pc, #160]	; (800d478 <HAL_SPI_Receive_DMA+0x234>)
 800d3d8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3de:	4a27      	ldr	r2, [pc, #156]	; (800d47c <HAL_SPI_Receive_DMA+0x238>)
 800d3e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3e6:	4a26      	ldr	r2, [pc, #152]	; (800d480 <HAL_SPI_Receive_DMA+0x23c>)
 800d3e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	330c      	adds	r3, #12
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d402:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d40a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d40c:	f7fa fc6e 	bl	8007cec <HAL_DMA_Start_IT>
 800d410:	4603      	mov	r3, r0
 800d412:	2b00      	cmp	r3, #0
 800d414:	d008      	beq.n	800d428 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d41a:	f043 0210 	orr.w	r2, r3, #16
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d422:	2301      	movs	r3, #1
 800d424:	75fb      	strb	r3, [r7, #23]

    goto error;
 800d426:	e01e      	b.n	800d466 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d432:	2b40      	cmp	r3, #64	; 0x40
 800d434:	d007      	beq.n	800d446 <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d444:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	685a      	ldr	r2, [r3, #4]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f042 0220 	orr.w	r2, r2, #32
 800d454:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	685a      	ldr	r2, [r3, #4]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f042 0201 	orr.w	r2, r2, #1
 800d464:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2200      	movs	r2, #0
 800d46a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d46e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d470:	4618      	mov	r0, r3
 800d472:	3718      	adds	r7, #24
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}
 800d478:	0800dc97 	.word	0x0800dc97
 800d47c:	0800db43 	.word	0x0800db43
 800d480:	0800dccf 	.word	0x0800dccf

0800d484 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b086      	sub	sp, #24
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	607a      	str	r2, [r7, #4]
 800d490:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d492:	2300      	movs	r3, #0
 800d494:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d101      	bne.n	800d4a4 <HAL_SPI_TransmitReceive_DMA+0x20>
 800d4a0:	2302      	movs	r3, #2
 800d4a2:	e164      	b.n	800d76e <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d4b2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800d4ba:	7dbb      	ldrb	r3, [r7, #22]
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d00d      	beq.n	800d4dc <HAL_SPI_TransmitReceive_DMA+0x58>
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d4c6:	d106      	bne.n	800d4d6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	689b      	ldr	r3, [r3, #8]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d102      	bne.n	800d4d6 <HAL_SPI_TransmitReceive_DMA+0x52>
 800d4d0:	7dbb      	ldrb	r3, [r7, #22]
 800d4d2:	2b04      	cmp	r3, #4
 800d4d4:	d002      	beq.n	800d4dc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800d4d6:	2302      	movs	r3, #2
 800d4d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d4da:	e143      	b.n	800d764 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d005      	beq.n	800d4ee <HAL_SPI_TransmitReceive_DMA+0x6a>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d002      	beq.n	800d4ee <HAL_SPI_TransmitReceive_DMA+0x6a>
 800d4e8:	887b      	ldrh	r3, [r7, #2]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d102      	bne.n	800d4f4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d4f2:	e137      	b.n	800d764 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	2b04      	cmp	r3, #4
 800d4fe:	d003      	beq.n	800d508 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2205      	movs	r2, #5
 800d504:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2200      	movs	r2, #0
 800d50c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	68ba      	ldr	r2, [r7, #8]
 800d512:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	887a      	ldrh	r2, [r7, #2]
 800d518:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	887a      	ldrh	r2, [r7, #2]
 800d51e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	887a      	ldrh	r2, [r7, #2]
 800d52a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	887a      	ldrh	r2, [r7, #2]
 800d532:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2200      	movs	r2, #0
 800d53a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2200      	movs	r2, #0
 800d540:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	685a      	ldr	r2, [r3, #4]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800d550:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d55a:	d908      	bls.n	800d56e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	685a      	ldr	r2, [r3, #4]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d56a:	605a      	str	r2, [r3, #4]
 800d56c:	e06f      	b.n	800d64e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	685a      	ldr	r2, [r3, #4]
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d57c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d582:	699b      	ldr	r3, [r3, #24]
 800d584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d588:	d126      	bne.n	800d5d8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d58e:	f003 0301 	and.w	r3, r3, #1
 800d592:	2b00      	cmp	r3, #0
 800d594:	d10f      	bne.n	800d5b6 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	685a      	ldr	r2, [r3, #4]
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d5a4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	085b      	lsrs	r3, r3, #1
 800d5ae:	b29a      	uxth	r2, r3
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d5b4:	e010      	b.n	800d5d8 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	685a      	ldr	r2, [r3, #4]
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d5c4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	085b      	lsrs	r3, r3, #1
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	b29a      	uxth	r2, r3
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5dc:	699b      	ldr	r3, [r3, #24]
 800d5de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d5e2:	d134      	bne.n	800d64e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	685a      	ldr	r2, [r3, #4]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d5f2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	f003 0301 	and.w	r3, r3, #1
 800d600:	2b00      	cmp	r3, #0
 800d602:	d111      	bne.n	800d628 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	685a      	ldr	r2, [r3, #4]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d612:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d61a:	b29b      	uxth	r3, r3
 800d61c:	085b      	lsrs	r3, r3, #1
 800d61e:	b29a      	uxth	r2, r3
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d626:	e012      	b.n	800d64e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	685a      	ldr	r2, [r3, #4]
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d636:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d63e:	b29b      	uxth	r3, r3
 800d640:	085b      	lsrs	r3, r3, #1
 800d642:	b29b      	uxth	r3, r3
 800d644:	3301      	adds	r3, #1
 800d646:	b29a      	uxth	r2, r3
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d654:	b2db      	uxtb	r3, r3
 800d656:	2b04      	cmp	r3, #4
 800d658:	d108      	bne.n	800d66c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d65e:	4a46      	ldr	r2, [pc, #280]	; (800d778 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 800d660:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d666:	4a45      	ldr	r2, [pc, #276]	; (800d77c <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800d668:	62da      	str	r2, [r3, #44]	; 0x2c
 800d66a:	e007      	b.n	800d67c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d670:	4a43      	ldr	r2, [pc, #268]	; (800d780 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800d672:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d678:	4a42      	ldr	r2, [pc, #264]	; (800d784 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800d67a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d680:	4a41      	ldr	r2, [pc, #260]	; (800d788 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800d682:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d688:	2200      	movs	r2, #0
 800d68a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	330c      	adds	r3, #12
 800d696:	4619      	mov	r1, r3
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d69c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d6a4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d6a6:	f7fa fb21 	bl	8007cec <HAL_DMA_Start_IT>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d008      	beq.n	800d6c2 <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6b4:	f043 0210 	orr.w	r2, r3, #16
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	75fb      	strb	r3, [r7, #23]

    goto error;
 800d6c0:	e050      	b.n	800d764 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	685a      	ldr	r2, [r3, #4]
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f042 0201 	orr.w	r2, r2, #1
 800d6d0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6de:	2200      	movs	r2, #0
 800d6e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	330c      	adds	r3, #12
 800d702:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d708:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d70a:	f7fa faef 	bl	8007cec <HAL_DMA_Start_IT>
 800d70e:	4603      	mov	r3, r0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d008      	beq.n	800d726 <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d718:	f043 0210 	orr.w	r2, r3, #16
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d720:	2301      	movs	r3, #1
 800d722:	75fb      	strb	r3, [r7, #23]

    goto error;
 800d724:	e01e      	b.n	800d764 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d730:	2b40      	cmp	r3, #64	; 0x40
 800d732:	d007      	beq.n	800d744 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d742:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	685a      	ldr	r2, [r3, #4]
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f042 0220 	orr.w	r2, r2, #32
 800d752:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	685a      	ldr	r2, [r3, #4]
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f042 0202 	orr.w	r2, r2, #2
 800d762:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2200      	movs	r2, #0
 800d768:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d76c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3718      	adds	r7, #24
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	0800dc97 	.word	0x0800dc97
 800d77c:	0800db43 	.word	0x0800db43
 800d780:	0800dcb3 	.word	0x0800dcb3
 800d784:	0800dbeb 	.word	0x0800dbeb
 800d788:	0800dccf 	.word	0x0800dccf

0800d78c <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d794:	2300      	movs	r3, #0
 800d796:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d00f      	beq.n	800d7c0 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7fa fb01 	bl	8007dac <HAL_DMA_Abort>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d007      	beq.n	800d7c0 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7b4:	f043 0210 	orr.w	r2, r3, #16
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800d7bc:	2301      	movs	r3, #1
 800d7be:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d00f      	beq.n	800d7e8 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7fa faed 	bl	8007dac <HAL_DMA_Abort>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d007      	beq.n	800d7e8 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7dc:	f043 0210 	orr.w	r2, r3, #16
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	685a      	ldr	r2, [r3, #4]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f022 0203 	bic.w	r2, r2, #3
 800d7f6:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 800d800:	7bfb      	ldrb	r3, [r7, #15]
}
 800d802:	4618      	mov	r0, r3
 800d804:	3710      	adds	r7, #16
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
	...

0800d80c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b088      	sub	sp, #32
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	689b      	ldr	r3, [r3, #8]
 800d822:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d824:	69bb      	ldr	r3, [r7, #24]
 800d826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d10e      	bne.n	800d84c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d834:	2b00      	cmp	r3, #0
 800d836:	d009      	beq.n	800d84c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d838:	69fb      	ldr	r3, [r7, #28]
 800d83a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d004      	beq.n	800d84c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	4798      	blx	r3
    return;
 800d84a:	e0ce      	b.n	800d9ea <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	f003 0302 	and.w	r3, r3, #2
 800d852:	2b00      	cmp	r3, #0
 800d854:	d009      	beq.n	800d86a <HAL_SPI_IRQHandler+0x5e>
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d004      	beq.n	800d86a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	4798      	blx	r3
    return;
 800d868:	e0bf      	b.n	800d9ea <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d86a:	69bb      	ldr	r3, [r7, #24]
 800d86c:	f003 0320 	and.w	r3, r3, #32
 800d870:	2b00      	cmp	r3, #0
 800d872:	d10a      	bne.n	800d88a <HAL_SPI_IRQHandler+0x7e>
 800d874:	69bb      	ldr	r3, [r7, #24]
 800d876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d105      	bne.n	800d88a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d884:	2b00      	cmp	r3, #0
 800d886:	f000 80b0 	beq.w	800d9ea <HAL_SPI_IRQHandler+0x1de>
 800d88a:	69fb      	ldr	r3, [r7, #28]
 800d88c:	f003 0320 	and.w	r3, r3, #32
 800d890:	2b00      	cmp	r3, #0
 800d892:	f000 80aa 	beq.w	800d9ea <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d023      	beq.n	800d8e8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	2b03      	cmp	r3, #3
 800d8aa:	d011      	beq.n	800d8d0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8b0:	f043 0204 	orr.w	r2, r3, #4
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	617b      	str	r3, [r7, #20]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	68db      	ldr	r3, [r3, #12]
 800d8c2:	617b      	str	r3, [r7, #20]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	617b      	str	r3, [r7, #20]
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	e00b      	b.n	800d8e8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	613b      	str	r3, [r7, #16]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	68db      	ldr	r3, [r3, #12]
 800d8da:	613b      	str	r3, [r7, #16]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	689b      	ldr	r3, [r3, #8]
 800d8e2:	613b      	str	r3, [r7, #16]
 800d8e4:	693b      	ldr	r3, [r7, #16]
        return;
 800d8e6:	e080      	b.n	800d9ea <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	f003 0320 	and.w	r3, r3, #32
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d014      	beq.n	800d91c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8f6:	f043 0201 	orr.w	r2, r3, #1
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d8fe:	2300      	movs	r3, #0
 800d900:	60fb      	str	r3, [r7, #12]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	689b      	ldr	r3, [r3, #8]
 800d908:	60fb      	str	r3, [r7, #12]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d918:	601a      	str	r2, [r3, #0]
 800d91a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d922:	2b00      	cmp	r3, #0
 800d924:	d00c      	beq.n	800d940 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d92a:	f043 0208 	orr.w	r2, r3, #8
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d932:	2300      	movs	r3, #0
 800d934:	60bb      	str	r3, [r7, #8]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	689b      	ldr	r3, [r3, #8]
 800d93c:	60bb      	str	r3, [r7, #8]
 800d93e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d944:	2b00      	cmp	r3, #0
 800d946:	d04f      	beq.n	800d9e8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	685a      	ldr	r2, [r3, #4]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d956:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2201      	movs	r2, #1
 800d95c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d960:	69fb      	ldr	r3, [r7, #28]
 800d962:	f003 0302 	and.w	r3, r3, #2
 800d966:	2b00      	cmp	r3, #0
 800d968:	d104      	bne.n	800d974 <HAL_SPI_IRQHandler+0x168>
 800d96a:	69fb      	ldr	r3, [r7, #28]
 800d96c:	f003 0301 	and.w	r3, r3, #1
 800d970:	2b00      	cmp	r3, #0
 800d972:	d034      	beq.n	800d9de <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	685a      	ldr	r2, [r3, #4]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f022 0203 	bic.w	r2, r2, #3
 800d982:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d011      	beq.n	800d9b0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d990:	4a17      	ldr	r2, [pc, #92]	; (800d9f0 <HAL_SPI_IRQHandler+0x1e4>)
 800d992:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d998:	4618      	mov	r0, r3
 800d99a:	f7fa fa45 	bl	8007e28 <HAL_DMA_Abort_IT>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d005      	beq.n	800d9b0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d016      	beq.n	800d9e6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9bc:	4a0c      	ldr	r2, [pc, #48]	; (800d9f0 <HAL_SPI_IRQHandler+0x1e4>)
 800d9be:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7fa fa2f 	bl	8007e28 <HAL_DMA_Abort_IT>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00a      	beq.n	800d9e6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800d9dc:	e003      	b.n	800d9e6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 f844 	bl	800da6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d9e4:	e000      	b.n	800d9e8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800d9e6:	bf00      	nop
    return;
 800d9e8:	bf00      	nop
  }
}
 800d9ea:	3720      	adds	r7, #32
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	0800dd0f 	.word	0x0800dd0f

0800d9f4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d9fc:	bf00      	nop
 800d9fe:	370c      	adds	r7, #12
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800da08:	b480      	push	{r7}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800da10:	bf00      	nop
 800da12:	370c      	adds	r7, #12
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800da24:	bf00      	nop
 800da26:	370c      	adds	r7, #12
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr

0800da30 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800da30:	b480      	push	{r7}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800da38:	bf00      	nop
 800da3a:	370c      	adds	r7, #12
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr

0800da44 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800da44:	b480      	push	{r7}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800da4c:	bf00      	nop
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr

0800da58 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800da60:	bf00      	nop
 800da62:	370c      	adds	r7, #12
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr

0800da6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b083      	sub	sp, #12
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800da74:	bf00      	nop
 800da76:	370c      	adds	r7, #12
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr

0800da80 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800da8e:	b2db      	uxtb	r3, r3
}
 800da90:	4618      	mov	r0, r3
 800da92:	370c      	adds	r7, #12
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b086      	sub	sp, #24
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daa8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800daaa:	f7f8 fc85 	bl	80063b8 <HAL_GetTick>
 800daae:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f003 0320 	and.w	r3, r3, #32
 800daba:	2b20      	cmp	r3, #32
 800dabc:	d03b      	beq.n	800db36 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	685a      	ldr	r2, [r3, #4]
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f022 0220 	bic.w	r2, r2, #32
 800dacc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	685a      	ldr	r2, [r3, #4]
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f022 0202 	bic.w	r2, r2, #2
 800dadc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800dade:	693a      	ldr	r2, [r7, #16]
 800dae0:	2164      	movs	r1, #100	; 0x64
 800dae2:	6978      	ldr	r0, [r7, #20]
 800dae4:	f000 fa9e 	bl	800e024 <SPI_EndRxTxTransaction>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d005      	beq.n	800dafa <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800daf2:	f043 0220 	orr.w	r2, r3, #32
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	689b      	ldr	r3, [r3, #8]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d10a      	bne.n	800db18 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800db02:	2300      	movs	r3, #0
 800db04:	60fb      	str	r3, [r7, #12]
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	60fb      	str	r3, [r7, #12]
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	689b      	ldr	r3, [r3, #8]
 800db14:	60fb      	str	r3, [r7, #12]
 800db16:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	2200      	movs	r2, #0
 800db1c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	2201      	movs	r2, #1
 800db22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d003      	beq.n	800db36 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800db2e:	6978      	ldr	r0, [r7, #20]
 800db30:	f7ff ff9c 	bl	800da6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800db34:	e002      	b.n	800db3c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800db36:	6978      	ldr	r0, [r7, #20]
 800db38:	f7ff ff5c 	bl	800d9f4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800db3c:	3718      	adds	r7, #24
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}

0800db42 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800db42:	b580      	push	{r7, lr}
 800db44:	b084      	sub	sp, #16
 800db46:	af00      	add	r7, sp, #0
 800db48:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db4e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db50:	f7f8 fc32 	bl	80063b8 <HAL_GetTick>
 800db54:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f003 0320 	and.w	r3, r3, #32
 800db60:	2b20      	cmp	r3, #32
 800db62:	d03c      	beq.n	800dbde <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	685a      	ldr	r2, [r3, #4]
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f022 0220 	bic.w	r2, r2, #32
 800db72:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	689b      	ldr	r3, [r3, #8]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d10d      	bne.n	800db98 <SPI_DMAReceiveCplt+0x56>
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800db84:	d108      	bne.n	800db98 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	685a      	ldr	r2, [r3, #4]
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f022 0203 	bic.w	r2, r2, #3
 800db94:	605a      	str	r2, [r3, #4]
 800db96:	e007      	b.n	800dba8 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	685a      	ldr	r2, [r3, #4]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f022 0201 	bic.w	r2, r2, #1
 800dba6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800dba8:	68ba      	ldr	r2, [r7, #8]
 800dbaa:	2164      	movs	r1, #100	; 0x64
 800dbac:	68f8      	ldr	r0, [r7, #12]
 800dbae:	f000 f9e1 	bl	800df74 <SPI_EndRxTransaction>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d002      	beq.n	800dbbe <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2220      	movs	r2, #32
 800dbbc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d003      	beq.n	800dbde <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800dbd6:	68f8      	ldr	r0, [r7, #12]
 800dbd8:	f7ff ff48 	bl	800da6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800dbdc:	e002      	b.n	800dbe4 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800dbde:	68f8      	ldr	r0, [r7, #12]
 800dbe0:	f7ff ff12 	bl	800da08 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dbe4:	3710      	adds	r7, #16
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dbea:	b580      	push	{r7, lr}
 800dbec:	b084      	sub	sp, #16
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dbf8:	f7f8 fbde 	bl	80063b8 <HAL_GetTick>
 800dbfc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f003 0320 	and.w	r3, r3, #32
 800dc08:	2b20      	cmp	r3, #32
 800dc0a:	d030      	beq.n	800dc6e <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	685a      	ldr	r2, [r3, #4]
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f022 0220 	bic.w	r2, r2, #32
 800dc1a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800dc1c:	68ba      	ldr	r2, [r7, #8]
 800dc1e:	2164      	movs	r1, #100	; 0x64
 800dc20:	68f8      	ldr	r0, [r7, #12]
 800dc22:	f000 f9ff 	bl	800e024 <SPI_EndRxTxTransaction>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d005      	beq.n	800dc38 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc30:	f043 0220 	orr.w	r2, r3, #32
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	685a      	ldr	r2, [r3, #4]
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f022 0203 	bic.w	r2, r2, #3
 800dc46:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2200      	movs	r2, #0
 800dc52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2201      	movs	r2, #1
 800dc5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d003      	beq.n	800dc6e <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800dc66:	68f8      	ldr	r0, [r7, #12]
 800dc68:	f7ff ff00 	bl	800da6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800dc6c:	e002      	b.n	800dc74 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800dc6e:	68f8      	ldr	r0, [r7, #12]
 800dc70:	f7ff fed4 	bl	800da1c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b084      	sub	sp, #16
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc86:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800dc88:	68f8      	ldr	r0, [r7, #12]
 800dc8a:	f7ff fed1 	bl	800da30 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dc8e:	bf00      	nop
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b084      	sub	sp, #16
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dca2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800dca4:	68f8      	ldr	r0, [r7, #12]
 800dca6:	f7ff fecd 	bl	800da44 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dcaa:	bf00      	nop
 800dcac:	3710      	adds	r7, #16
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b084      	sub	sp, #16
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcbe:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f7ff fec9 	bl	800da58 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dcc6:	bf00      	nop
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b084      	sub	sp, #16
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcda:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	685a      	ldr	r2, [r3, #4]
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f022 0203 	bic.w	r2, r2, #3
 800dcea:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcf0:	f043 0210 	orr.w	r2, r3, #16
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	f7ff feb3 	bl	800da6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dd06:	bf00      	nop
 800dd08:	3710      	adds	r7, #16
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b084      	sub	sp, #16
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd1a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2200      	movs	r2, #0
 800dd28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800dd2a:	68f8      	ldr	r0, [r7, #12]
 800dd2c:	f7ff fe9e 	bl	800da6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dd30:	bf00      	nop
 800dd32:	3710      	adds	r7, #16
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b088      	sub	sp, #32
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	60b9      	str	r1, [r7, #8]
 800dd42:	603b      	str	r3, [r7, #0]
 800dd44:	4613      	mov	r3, r2
 800dd46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800dd48:	f7f8 fb36 	bl	80063b8 <HAL_GetTick>
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd50:	1a9b      	subs	r3, r3, r2
 800dd52:	683a      	ldr	r2, [r7, #0]
 800dd54:	4413      	add	r3, r2
 800dd56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800dd58:	f7f8 fb2e 	bl	80063b8 <HAL_GetTick>
 800dd5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800dd5e:	4b39      	ldr	r3, [pc, #228]	; (800de44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	015b      	lsls	r3, r3, #5
 800dd64:	0d1b      	lsrs	r3, r3, #20
 800dd66:	69fa      	ldr	r2, [r7, #28]
 800dd68:	fb02 f303 	mul.w	r3, r2, r3
 800dd6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dd6e:	e054      	b.n	800de1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd76:	d050      	beq.n	800de1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dd78:	f7f8 fb1e 	bl	80063b8 <HAL_GetTick>
 800dd7c:	4602      	mov	r2, r0
 800dd7e:	69bb      	ldr	r3, [r7, #24]
 800dd80:	1ad3      	subs	r3, r2, r3
 800dd82:	69fa      	ldr	r2, [r7, #28]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d902      	bls.n	800dd8e <SPI_WaitFlagStateUntilTimeout+0x56>
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d13d      	bne.n	800de0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	685a      	ldr	r2, [r3, #4]
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dd9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dda6:	d111      	bne.n	800ddcc <SPI_WaitFlagStateUntilTimeout+0x94>
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	689b      	ldr	r3, [r3, #8]
 800ddac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddb0:	d004      	beq.n	800ddbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	689b      	ldr	r3, [r3, #8]
 800ddb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ddba:	d107      	bne.n	800ddcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ddca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ddd4:	d10f      	bne.n	800ddf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dde4:	601a      	str	r2, [r3, #0]
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ddf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2200      	movs	r2, #0
 800de02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800de06:	2303      	movs	r3, #3
 800de08:	e017      	b.n	800de3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d101      	bne.n	800de14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800de10:	2300      	movs	r3, #0
 800de12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	3b01      	subs	r3, #1
 800de18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	689a      	ldr	r2, [r3, #8]
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	4013      	ands	r3, r2
 800de24:	68ba      	ldr	r2, [r7, #8]
 800de26:	429a      	cmp	r2, r3
 800de28:	bf0c      	ite	eq
 800de2a:	2301      	moveq	r3, #1
 800de2c:	2300      	movne	r3, #0
 800de2e:	b2db      	uxtb	r3, r3
 800de30:	461a      	mov	r2, r3
 800de32:	79fb      	ldrb	r3, [r7, #7]
 800de34:	429a      	cmp	r2, r3
 800de36:	d19b      	bne.n	800dd70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800de38:	2300      	movs	r3, #0
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3720      	adds	r7, #32
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	20000038 	.word	0x20000038

0800de48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b08a      	sub	sp, #40	; 0x28
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	607a      	str	r2, [r7, #4]
 800de54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800de56:	2300      	movs	r3, #0
 800de58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800de5a:	f7f8 faad 	bl	80063b8 <HAL_GetTick>
 800de5e:	4602      	mov	r2, r0
 800de60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de62:	1a9b      	subs	r3, r3, r2
 800de64:	683a      	ldr	r2, [r7, #0]
 800de66:	4413      	add	r3, r2
 800de68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800de6a:	f7f8 faa5 	bl	80063b8 <HAL_GetTick>
 800de6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	330c      	adds	r3, #12
 800de76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800de78:	4b3d      	ldr	r3, [pc, #244]	; (800df70 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	4613      	mov	r3, r2
 800de7e:	009b      	lsls	r3, r3, #2
 800de80:	4413      	add	r3, r2
 800de82:	00da      	lsls	r2, r3, #3
 800de84:	1ad3      	subs	r3, r2, r3
 800de86:	0d1b      	lsrs	r3, r3, #20
 800de88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de8a:	fb02 f303 	mul.w	r3, r2, r3
 800de8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800de90:	e060      	b.n	800df54 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800de98:	d107      	bne.n	800deaa <SPI_WaitFifoStateUntilTimeout+0x62>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d104      	bne.n	800deaa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800dea8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deb0:	d050      	beq.n	800df54 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800deb2:	f7f8 fa81 	bl	80063b8 <HAL_GetTick>
 800deb6:	4602      	mov	r2, r0
 800deb8:	6a3b      	ldr	r3, [r7, #32]
 800deba:	1ad3      	subs	r3, r2, r3
 800debc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800debe:	429a      	cmp	r2, r3
 800dec0:	d902      	bls.n	800dec8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800dec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d13d      	bne.n	800df44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	685a      	ldr	r2, [r3, #4]
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ded6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dee0:	d111      	bne.n	800df06 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	689b      	ldr	r3, [r3, #8]
 800dee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800deea:	d004      	beq.n	800def6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	689b      	ldr	r3, [r3, #8]
 800def0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800def4:	d107      	bne.n	800df06 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	681a      	ldr	r2, [r3, #0]
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df0e:	d10f      	bne.n	800df30 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	681a      	ldr	r2, [r3, #0]
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800df1e:	601a      	str	r2, [r3, #0]
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800df2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2201      	movs	r2, #1
 800df34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2200      	movs	r2, #0
 800df3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800df40:	2303      	movs	r3, #3
 800df42:	e010      	b.n	800df66 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800df44:	69bb      	ldr	r3, [r7, #24]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d101      	bne.n	800df4e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800df4a:	2300      	movs	r3, #0
 800df4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800df4e:	69bb      	ldr	r3, [r7, #24]
 800df50:	3b01      	subs	r3, #1
 800df52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	689a      	ldr	r2, [r3, #8]
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	4013      	ands	r3, r2
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	429a      	cmp	r2, r3
 800df62:	d196      	bne.n	800de92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800df64:	2300      	movs	r3, #0
}
 800df66:	4618      	mov	r0, r3
 800df68:	3728      	adds	r7, #40	; 0x28
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	bf00      	nop
 800df70:	20000038 	.word	0x20000038

0800df74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b086      	sub	sp, #24
 800df78:	af02      	add	r7, sp, #8
 800df7a:	60f8      	str	r0, [r7, #12]
 800df7c:	60b9      	str	r1, [r7, #8]
 800df7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df88:	d111      	bne.n	800dfae <SPI_EndRxTransaction+0x3a>
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	689b      	ldr	r3, [r3, #8]
 800df8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df92:	d004      	beq.n	800df9e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	689b      	ldr	r3, [r3, #8]
 800df98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df9c:	d107      	bne.n	800dfae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dfac:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	9300      	str	r3, [sp, #0]
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	2180      	movs	r1, #128	; 0x80
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f7ff febd 	bl	800dd38 <SPI_WaitFlagStateUntilTimeout>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d007      	beq.n	800dfd4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfc8:	f043 0220 	orr.w	r2, r3, #32
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800dfd0:	2303      	movs	r3, #3
 800dfd2:	e023      	b.n	800e01c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dfdc:	d11d      	bne.n	800e01a <SPI_EndRxTransaction+0xa6>
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	689b      	ldr	r3, [r3, #8]
 800dfe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfe6:	d004      	beq.n	800dff2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	689b      	ldr	r3, [r3, #8]
 800dfec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dff0:	d113      	bne.n	800e01a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	9300      	str	r3, [sp, #0]
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	2200      	movs	r2, #0
 800dffa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800dffe:	68f8      	ldr	r0, [r7, #12]
 800e000:	f7ff ff22 	bl	800de48 <SPI_WaitFifoStateUntilTimeout>
 800e004:	4603      	mov	r3, r0
 800e006:	2b00      	cmp	r3, #0
 800e008:	d007      	beq.n	800e01a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e00e:	f043 0220 	orr.w	r2, r3, #32
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e016:	2303      	movs	r3, #3
 800e018:	e000      	b.n	800e01c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800e01a:	2300      	movs	r3, #0
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3710      	adds	r7, #16
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b086      	sub	sp, #24
 800e028:	af02      	add	r7, sp, #8
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	9300      	str	r3, [sp, #0]
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	2200      	movs	r2, #0
 800e038:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e03c:	68f8      	ldr	r0, [r7, #12]
 800e03e:	f7ff ff03 	bl	800de48 <SPI_WaitFifoStateUntilTimeout>
 800e042:	4603      	mov	r3, r0
 800e044:	2b00      	cmp	r3, #0
 800e046:	d007      	beq.n	800e058 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e04c:	f043 0220 	orr.w	r2, r3, #32
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e054:	2303      	movs	r3, #3
 800e056:	e027      	b.n	800e0a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	9300      	str	r3, [sp, #0]
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	2200      	movs	r2, #0
 800e060:	2180      	movs	r1, #128	; 0x80
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	f7ff fe68 	bl	800dd38 <SPI_WaitFlagStateUntilTimeout>
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d007      	beq.n	800e07e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e072:	f043 0220 	orr.w	r2, r3, #32
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e07a:	2303      	movs	r3, #3
 800e07c:	e014      	b.n	800e0a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	9300      	str	r3, [sp, #0]
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	2200      	movs	r2, #0
 800e086:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e08a:	68f8      	ldr	r0, [r7, #12]
 800e08c:	f7ff fedc 	bl	800de48 <SPI_WaitFifoStateUntilTimeout>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d007      	beq.n	800e0a6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e09a:	f043 0220 	orr.w	r2, r3, #32
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e0a2:	2303      	movs	r3, #3
 800e0a4:	e000      	b.n	800e0a8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800e0a6:	2300      	movs	r3, #0
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3710      	adds	r7, #16
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d101      	bne.n	800e0c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e049      	b.n	800e156 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0c8:	b2db      	uxtb	r3, r3
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d106      	bne.n	800e0dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f7f7 ff0a 	bl	8005ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2202      	movs	r2, #2
 800e0e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681a      	ldr	r2, [r3, #0]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	3304      	adds	r3, #4
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	4610      	mov	r0, r2
 800e0f0:	f000 fb02 	bl	800e6f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2201      	movs	r2, #1
 800e100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2201      	movs	r2, #1
 800e108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2201      	movs	r2, #1
 800e110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2201      	movs	r2, #1
 800e118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2201      	movs	r2, #1
 800e120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2201      	movs	r2, #1
 800e128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2201      	movs	r2, #1
 800e130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2201      	movs	r2, #1
 800e138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2201      	movs	r2, #1
 800e140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2201      	movs	r2, #1
 800e148:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2201      	movs	r2, #1
 800e150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e154:	2300      	movs	r3, #0
}
 800e156:	4618      	mov	r0, r3
 800e158:	3708      	adds	r7, #8
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
	...

0800e160 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e160:	b480      	push	{r7}
 800e162:	b085      	sub	sp, #20
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	2b01      	cmp	r3, #1
 800e172:	d001      	beq.n	800e178 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e174:	2301      	movs	r3, #1
 800e176:	e033      	b.n	800e1e0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2202      	movs	r2, #2
 800e17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4a19      	ldr	r2, [pc, #100]	; (800e1ec <HAL_TIM_Base_Start+0x8c>)
 800e186:	4293      	cmp	r3, r2
 800e188:	d009      	beq.n	800e19e <HAL_TIM_Base_Start+0x3e>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e192:	d004      	beq.n	800e19e <HAL_TIM_Base_Start+0x3e>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4a15      	ldr	r2, [pc, #84]	; (800e1f0 <HAL_TIM_Base_Start+0x90>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d115      	bne.n	800e1ca <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	689a      	ldr	r2, [r3, #8]
 800e1a4:	4b13      	ldr	r3, [pc, #76]	; (800e1f4 <HAL_TIM_Base_Start+0x94>)
 800e1a6:	4013      	ands	r3, r2
 800e1a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	2b06      	cmp	r3, #6
 800e1ae:	d015      	beq.n	800e1dc <HAL_TIM_Base_Start+0x7c>
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1b6:	d011      	beq.n	800e1dc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f042 0201 	orr.w	r2, r2, #1
 800e1c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1c8:	e008      	b.n	800e1dc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f042 0201 	orr.w	r2, r2, #1
 800e1d8:	601a      	str	r2, [r3, #0]
 800e1da:	e000      	b.n	800e1de <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e1de:	2300      	movs	r3, #0
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3714      	adds	r7, #20
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr
 800e1ec:	40012c00 	.word	0x40012c00
 800e1f0:	40014000 	.word	0x40014000
 800e1f4:	00010007 	.word	0x00010007

0800e1f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b085      	sub	sp, #20
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e206:	b2db      	uxtb	r3, r3
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d001      	beq.n	800e210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e20c:	2301      	movs	r3, #1
 800e20e:	e03b      	b.n	800e288 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2202      	movs	r2, #2
 800e214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	68da      	ldr	r2, [r3, #12]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f042 0201 	orr.w	r2, r2, #1
 800e226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4a19      	ldr	r2, [pc, #100]	; (800e294 <HAL_TIM_Base_Start_IT+0x9c>)
 800e22e:	4293      	cmp	r3, r2
 800e230:	d009      	beq.n	800e246 <HAL_TIM_Base_Start_IT+0x4e>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e23a:	d004      	beq.n	800e246 <HAL_TIM_Base_Start_IT+0x4e>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4a15      	ldr	r2, [pc, #84]	; (800e298 <HAL_TIM_Base_Start_IT+0xa0>)
 800e242:	4293      	cmp	r3, r2
 800e244:	d115      	bne.n	800e272 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	689a      	ldr	r2, [r3, #8]
 800e24c:	4b13      	ldr	r3, [pc, #76]	; (800e29c <HAL_TIM_Base_Start_IT+0xa4>)
 800e24e:	4013      	ands	r3, r2
 800e250:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2b06      	cmp	r3, #6
 800e256:	d015      	beq.n	800e284 <HAL_TIM_Base_Start_IT+0x8c>
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e25e:	d011      	beq.n	800e284 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f042 0201 	orr.w	r2, r2, #1
 800e26e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e270:	e008      	b.n	800e284 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f042 0201 	orr.w	r2, r2, #1
 800e280:	601a      	str	r2, [r3, #0]
 800e282:	e000      	b.n	800e286 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e284:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e286:	2300      	movs	r3, #0
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3714      	adds	r7, #20
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr
 800e294:	40012c00 	.word	0x40012c00
 800e298:	40014000 	.word	0x40014000
 800e29c:	00010007 	.word	0x00010007

0800e2a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b083      	sub	sp, #12
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	68da      	ldr	r2, [r3, #12]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f022 0201 	bic.w	r2, r2, #1
 800e2b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	6a1a      	ldr	r2, [r3, #32]
 800e2be:	f241 1311 	movw	r3, #4369	; 0x1111
 800e2c2:	4013      	ands	r3, r2
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10f      	bne.n	800e2e8 <HAL_TIM_Base_Stop_IT+0x48>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	6a1a      	ldr	r2, [r3, #32]
 800e2ce:	f240 4344 	movw	r3, #1092	; 0x444
 800e2d2:	4013      	ands	r3, r2
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d107      	bne.n	800e2e8 <HAL_TIM_Base_Stop_IT+0x48>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	681a      	ldr	r2, [r3, #0]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f022 0201 	bic.w	r2, r2, #1
 800e2e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e2f0:	2300      	movs	r3, #0
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	370c      	adds	r7, #12
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr

0800e2fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b084      	sub	sp, #16
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	68db      	ldr	r3, [r3, #12]
 800e30c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	691b      	ldr	r3, [r3, #16]
 800e314:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	f003 0302 	and.w	r3, r3, #2
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d020      	beq.n	800e362 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f003 0302 	and.w	r3, r3, #2
 800e326:	2b00      	cmp	r3, #0
 800e328:	d01b      	beq.n	800e362 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f06f 0202 	mvn.w	r2, #2
 800e332:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2201      	movs	r2, #1
 800e338:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	699b      	ldr	r3, [r3, #24]
 800e340:	f003 0303 	and.w	r3, r3, #3
 800e344:	2b00      	cmp	r3, #0
 800e346:	d003      	beq.n	800e350 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f000 f9b7 	bl	800e6bc <HAL_TIM_IC_CaptureCallback>
 800e34e:	e005      	b.n	800e35c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f000 f9a9 	bl	800e6a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f000 f9ba 	bl	800e6d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2200      	movs	r2, #0
 800e360:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	f003 0304 	and.w	r3, r3, #4
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d020      	beq.n	800e3ae <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f003 0304 	and.w	r3, r3, #4
 800e372:	2b00      	cmp	r3, #0
 800e374:	d01b      	beq.n	800e3ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f06f 0204 	mvn.w	r2, #4
 800e37e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2202      	movs	r2, #2
 800e384:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	699b      	ldr	r3, [r3, #24]
 800e38c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e390:	2b00      	cmp	r3, #0
 800e392:	d003      	beq.n	800e39c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 f991 	bl	800e6bc <HAL_TIM_IC_CaptureCallback>
 800e39a:	e005      	b.n	800e3a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f000 f983 	bl	800e6a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 f994 	bl	800e6d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	f003 0308 	and.w	r3, r3, #8
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d020      	beq.n	800e3fa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f003 0308 	and.w	r3, r3, #8
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d01b      	beq.n	800e3fa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f06f 0208 	mvn.w	r2, #8
 800e3ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2204      	movs	r2, #4
 800e3d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	69db      	ldr	r3, [r3, #28]
 800e3d8:	f003 0303 	and.w	r3, r3, #3
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d003      	beq.n	800e3e8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 f96b 	bl	800e6bc <HAL_TIM_IC_CaptureCallback>
 800e3e6:	e005      	b.n	800e3f4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f000 f95d 	bl	800e6a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f000 f96e 	bl	800e6d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	f003 0310 	and.w	r3, r3, #16
 800e400:	2b00      	cmp	r3, #0
 800e402:	d020      	beq.n	800e446 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f003 0310 	and.w	r3, r3, #16
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d01b      	beq.n	800e446 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f06f 0210 	mvn.w	r2, #16
 800e416:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2208      	movs	r2, #8
 800e41c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	69db      	ldr	r3, [r3, #28]
 800e424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d003      	beq.n	800e434 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f000 f945 	bl	800e6bc <HAL_TIM_IC_CaptureCallback>
 800e432:	e005      	b.n	800e440 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f000 f937 	bl	800e6a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 f948 	bl	800e6d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2200      	movs	r2, #0
 800e444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	f003 0301 	and.w	r3, r3, #1
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d00c      	beq.n	800e46a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f003 0301 	and.w	r3, r3, #1
 800e456:	2b00      	cmp	r3, #0
 800e458:	d007      	beq.n	800e46a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	f06f 0201 	mvn.w	r2, #1
 800e462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f000 f915 	bl	800e694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e470:	2b00      	cmp	r3, #0
 800e472:	d00c      	beq.n	800e48e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d007      	beq.n	800e48e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f000 faa3 	bl	800e9d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e494:	2b00      	cmp	r3, #0
 800e496:	d00c      	beq.n	800e4b2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d007      	beq.n	800e4b2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e4aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 fa9b 	bl	800e9e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d00c      	beq.n	800e4d6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d007      	beq.n	800e4d6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e4ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f000 f907 	bl	800e6e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	f003 0320 	and.w	r3, r3, #32
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d00c      	beq.n	800e4fa <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f003 0320 	and.w	r3, r3, #32
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d007      	beq.n	800e4fa <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f06f 0220 	mvn.w	r2, #32
 800e4f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f000 fa63 	bl	800e9c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e4fa:	bf00      	nop
 800e4fc:	3710      	adds	r7, #16
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}

0800e502 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e502:	b580      	push	{r7, lr}
 800e504:	b084      	sub	sp, #16
 800e506:	af00      	add	r7, sp, #0
 800e508:	6078      	str	r0, [r7, #4]
 800e50a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e50c:	2300      	movs	r3, #0
 800e50e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e516:	2b01      	cmp	r3, #1
 800e518:	d101      	bne.n	800e51e <HAL_TIM_ConfigClockSource+0x1c>
 800e51a:	2302      	movs	r3, #2
 800e51c:	e0b6      	b.n	800e68c <HAL_TIM_ConfigClockSource+0x18a>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2201      	movs	r2, #1
 800e522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2202      	movs	r2, #2
 800e52a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	689b      	ldr	r3, [r3, #8]
 800e534:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e53c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e540:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e548:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	68ba      	ldr	r2, [r7, #8]
 800e550:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e55a:	d03e      	beq.n	800e5da <HAL_TIM_ConfigClockSource+0xd8>
 800e55c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e560:	f200 8087 	bhi.w	800e672 <HAL_TIM_ConfigClockSource+0x170>
 800e564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e568:	f000 8086 	beq.w	800e678 <HAL_TIM_ConfigClockSource+0x176>
 800e56c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e570:	d87f      	bhi.n	800e672 <HAL_TIM_ConfigClockSource+0x170>
 800e572:	2b70      	cmp	r3, #112	; 0x70
 800e574:	d01a      	beq.n	800e5ac <HAL_TIM_ConfigClockSource+0xaa>
 800e576:	2b70      	cmp	r3, #112	; 0x70
 800e578:	d87b      	bhi.n	800e672 <HAL_TIM_ConfigClockSource+0x170>
 800e57a:	2b60      	cmp	r3, #96	; 0x60
 800e57c:	d050      	beq.n	800e620 <HAL_TIM_ConfigClockSource+0x11e>
 800e57e:	2b60      	cmp	r3, #96	; 0x60
 800e580:	d877      	bhi.n	800e672 <HAL_TIM_ConfigClockSource+0x170>
 800e582:	2b50      	cmp	r3, #80	; 0x50
 800e584:	d03c      	beq.n	800e600 <HAL_TIM_ConfigClockSource+0xfe>
 800e586:	2b50      	cmp	r3, #80	; 0x50
 800e588:	d873      	bhi.n	800e672 <HAL_TIM_ConfigClockSource+0x170>
 800e58a:	2b40      	cmp	r3, #64	; 0x40
 800e58c:	d058      	beq.n	800e640 <HAL_TIM_ConfigClockSource+0x13e>
 800e58e:	2b40      	cmp	r3, #64	; 0x40
 800e590:	d86f      	bhi.n	800e672 <HAL_TIM_ConfigClockSource+0x170>
 800e592:	2b30      	cmp	r3, #48	; 0x30
 800e594:	d064      	beq.n	800e660 <HAL_TIM_ConfigClockSource+0x15e>
 800e596:	2b30      	cmp	r3, #48	; 0x30
 800e598:	d86b      	bhi.n	800e672 <HAL_TIM_ConfigClockSource+0x170>
 800e59a:	2b20      	cmp	r3, #32
 800e59c:	d060      	beq.n	800e660 <HAL_TIM_ConfigClockSource+0x15e>
 800e59e:	2b20      	cmp	r3, #32
 800e5a0:	d867      	bhi.n	800e672 <HAL_TIM_ConfigClockSource+0x170>
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d05c      	beq.n	800e660 <HAL_TIM_ConfigClockSource+0x15e>
 800e5a6:	2b10      	cmp	r3, #16
 800e5a8:	d05a      	beq.n	800e660 <HAL_TIM_ConfigClockSource+0x15e>
 800e5aa:	e062      	b.n	800e672 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e5bc:	f000 f97a 	bl	800e8b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	689b      	ldr	r3, [r3, #8]
 800e5c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e5ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	68ba      	ldr	r2, [r7, #8]
 800e5d6:	609a      	str	r2, [r3, #8]
      break;
 800e5d8:	e04f      	b.n	800e67a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e5ea:	f000 f963 	bl	800e8b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	689a      	ldr	r2, [r3, #8]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e5fc:	609a      	str	r2, [r3, #8]
      break;
 800e5fe:	e03c      	b.n	800e67a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e60c:	461a      	mov	r2, r3
 800e60e:	f000 f8d7 	bl	800e7c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2150      	movs	r1, #80	; 0x50
 800e618:	4618      	mov	r0, r3
 800e61a:	f000 f930 	bl	800e87e <TIM_ITRx_SetConfig>
      break;
 800e61e:	e02c      	b.n	800e67a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e62c:	461a      	mov	r2, r3
 800e62e:	f000 f8f6 	bl	800e81e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	2160      	movs	r1, #96	; 0x60
 800e638:	4618      	mov	r0, r3
 800e63a:	f000 f920 	bl	800e87e <TIM_ITRx_SetConfig>
      break;
 800e63e:	e01c      	b.n	800e67a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e64c:	461a      	mov	r2, r3
 800e64e:	f000 f8b7 	bl	800e7c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	2140      	movs	r1, #64	; 0x40
 800e658:	4618      	mov	r0, r3
 800e65a:	f000 f910 	bl	800e87e <TIM_ITRx_SetConfig>
      break;
 800e65e:	e00c      	b.n	800e67a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681a      	ldr	r2, [r3, #0]
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	4619      	mov	r1, r3
 800e66a:	4610      	mov	r0, r2
 800e66c:	f000 f907 	bl	800e87e <TIM_ITRx_SetConfig>
      break;
 800e670:	e003      	b.n	800e67a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800e672:	2301      	movs	r3, #1
 800e674:	73fb      	strb	r3, [r7, #15]
      break;
 800e676:	e000      	b.n	800e67a <HAL_TIM_ConfigClockSource+0x178>
      break;
 800e678:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2201      	movs	r2, #1
 800e67e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2200      	movs	r2, #0
 800e686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3710      	adds	r7, #16
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e694:	b480      	push	{r7}
 800e696:	b083      	sub	sp, #12
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800e69c:	bf00      	nop
 800e69e:	370c      	adds	r7, #12
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b083      	sub	sp, #12
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e6b0:	bf00      	nop
 800e6b2:	370c      	adds	r7, #12
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr

0800e6bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e6c4:	bf00      	nop
 800e6c6:	370c      	adds	r7, #12
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e6d8:	bf00      	nop
 800e6da:	370c      	adds	r7, #12
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr

0800e6e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b083      	sub	sp, #12
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e6ec:	bf00      	nop
 800e6ee:	370c      	adds	r7, #12
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f6:	4770      	bx	lr

0800e6f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b085      	sub	sp, #20
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	4a2a      	ldr	r2, [pc, #168]	; (800e7b4 <TIM_Base_SetConfig+0xbc>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d003      	beq.n	800e718 <TIM_Base_SetConfig+0x20>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e716:	d108      	bne.n	800e72a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e71e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	685b      	ldr	r3, [r3, #4]
 800e724:	68fa      	ldr	r2, [r7, #12]
 800e726:	4313      	orrs	r3, r2
 800e728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	4a21      	ldr	r2, [pc, #132]	; (800e7b4 <TIM_Base_SetConfig+0xbc>)
 800e72e:	4293      	cmp	r3, r2
 800e730:	d00b      	beq.n	800e74a <TIM_Base_SetConfig+0x52>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e738:	d007      	beq.n	800e74a <TIM_Base_SetConfig+0x52>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	4a1e      	ldr	r2, [pc, #120]	; (800e7b8 <TIM_Base_SetConfig+0xc0>)
 800e73e:	4293      	cmp	r3, r2
 800e740:	d003      	beq.n	800e74a <TIM_Base_SetConfig+0x52>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	4a1d      	ldr	r2, [pc, #116]	; (800e7bc <TIM_Base_SetConfig+0xc4>)
 800e746:	4293      	cmp	r3, r2
 800e748:	d108      	bne.n	800e75c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	68db      	ldr	r3, [r3, #12]
 800e756:	68fa      	ldr	r2, [r7, #12]
 800e758:	4313      	orrs	r3, r2
 800e75a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	695b      	ldr	r3, [r3, #20]
 800e766:	4313      	orrs	r3, r2
 800e768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	68fa      	ldr	r2, [r7, #12]
 800e76e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	689a      	ldr	r2, [r3, #8]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	4a0c      	ldr	r2, [pc, #48]	; (800e7b4 <TIM_Base_SetConfig+0xbc>)
 800e784:	4293      	cmp	r3, r2
 800e786:	d007      	beq.n	800e798 <TIM_Base_SetConfig+0xa0>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	4a0b      	ldr	r2, [pc, #44]	; (800e7b8 <TIM_Base_SetConfig+0xc0>)
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d003      	beq.n	800e798 <TIM_Base_SetConfig+0xa0>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	4a0a      	ldr	r2, [pc, #40]	; (800e7bc <TIM_Base_SetConfig+0xc4>)
 800e794:	4293      	cmp	r3, r2
 800e796:	d103      	bne.n	800e7a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	691a      	ldr	r2, [r3, #16]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2201      	movs	r2, #1
 800e7a4:	615a      	str	r2, [r3, #20]
}
 800e7a6:	bf00      	nop
 800e7a8:	3714      	adds	r7, #20
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr
 800e7b2:	bf00      	nop
 800e7b4:	40012c00 	.word	0x40012c00
 800e7b8:	40014000 	.word	0x40014000
 800e7bc:	40014400 	.word	0x40014400

0800e7c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b087      	sub	sp, #28
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	60f8      	str	r0, [r7, #12]
 800e7c8:	60b9      	str	r1, [r7, #8]
 800e7ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	6a1b      	ldr	r3, [r3, #32]
 800e7d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	6a1b      	ldr	r3, [r3, #32]
 800e7d6:	f023 0201 	bic.w	r2, r3, #1
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	699b      	ldr	r3, [r3, #24]
 800e7e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e7ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	011b      	lsls	r3, r3, #4
 800e7f0:	693a      	ldr	r2, [r7, #16]
 800e7f2:	4313      	orrs	r3, r2
 800e7f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	f023 030a 	bic.w	r3, r3, #10
 800e7fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e7fe:	697a      	ldr	r2, [r7, #20]
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	4313      	orrs	r3, r2
 800e804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	693a      	ldr	r2, [r7, #16]
 800e80a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	697a      	ldr	r2, [r7, #20]
 800e810:	621a      	str	r2, [r3, #32]
}
 800e812:	bf00      	nop
 800e814:	371c      	adds	r7, #28
 800e816:	46bd      	mov	sp, r7
 800e818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81c:	4770      	bx	lr

0800e81e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e81e:	b480      	push	{r7}
 800e820:	b087      	sub	sp, #28
 800e822:	af00      	add	r7, sp, #0
 800e824:	60f8      	str	r0, [r7, #12]
 800e826:	60b9      	str	r1, [r7, #8]
 800e828:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	6a1b      	ldr	r3, [r3, #32]
 800e82e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6a1b      	ldr	r3, [r3, #32]
 800e834:	f023 0210 	bic.w	r2, r3, #16
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	699b      	ldr	r3, [r3, #24]
 800e840:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e848:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	031b      	lsls	r3, r3, #12
 800e84e:	693a      	ldr	r2, [r7, #16]
 800e850:	4313      	orrs	r3, r2
 800e852:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e85a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	011b      	lsls	r3, r3, #4
 800e860:	697a      	ldr	r2, [r7, #20]
 800e862:	4313      	orrs	r3, r2
 800e864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	693a      	ldr	r2, [r7, #16]
 800e86a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	697a      	ldr	r2, [r7, #20]
 800e870:	621a      	str	r2, [r3, #32]
}
 800e872:	bf00      	nop
 800e874:	371c      	adds	r7, #28
 800e876:	46bd      	mov	sp, r7
 800e878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87c:	4770      	bx	lr

0800e87e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e87e:	b480      	push	{r7}
 800e880:	b085      	sub	sp, #20
 800e882:	af00      	add	r7, sp, #0
 800e884:	6078      	str	r0, [r7, #4]
 800e886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	689b      	ldr	r3, [r3, #8]
 800e88c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e896:	683a      	ldr	r2, [r7, #0]
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	4313      	orrs	r3, r2
 800e89c:	f043 0307 	orr.w	r3, r3, #7
 800e8a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	68fa      	ldr	r2, [r7, #12]
 800e8a6:	609a      	str	r2, [r3, #8]
}
 800e8a8:	bf00      	nop
 800e8aa:	3714      	adds	r7, #20
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr

0800e8b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b087      	sub	sp, #28
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	60b9      	str	r1, [r7, #8]
 800e8be:	607a      	str	r2, [r7, #4]
 800e8c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	689b      	ldr	r3, [r3, #8]
 800e8c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e8ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	021a      	lsls	r2, r3, #8
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	431a      	orrs	r2, r3
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	697a      	ldr	r2, [r7, #20]
 800e8de:	4313      	orrs	r3, r2
 800e8e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	697a      	ldr	r2, [r7, #20]
 800e8e6:	609a      	str	r2, [r3, #8]
}
 800e8e8:	bf00      	nop
 800e8ea:	371c      	adds	r7, #28
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f2:	4770      	bx	lr

0800e8f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b085      	sub	sp, #20
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e904:	2b01      	cmp	r3, #1
 800e906:	d101      	bne.n	800e90c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e908:	2302      	movs	r3, #2
 800e90a:	e04f      	b.n	800e9ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2201      	movs	r2, #1
 800e910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2202      	movs	r2, #2
 800e918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	685b      	ldr	r3, [r3, #4]
 800e922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	689b      	ldr	r3, [r3, #8]
 800e92a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4a21      	ldr	r2, [pc, #132]	; (800e9b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e932:	4293      	cmp	r3, r2
 800e934:	d108      	bne.n	800e948 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e93c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	68fa      	ldr	r2, [r7, #12]
 800e944:	4313      	orrs	r3, r2
 800e946:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e94e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	68fa      	ldr	r2, [r7, #12]
 800e956:	4313      	orrs	r3, r2
 800e958:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	68fa      	ldr	r2, [r7, #12]
 800e960:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	4a14      	ldr	r2, [pc, #80]	; (800e9b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e968:	4293      	cmp	r3, r2
 800e96a:	d009      	beq.n	800e980 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e974:	d004      	beq.n	800e980 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	4a10      	ldr	r2, [pc, #64]	; (800e9bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d10c      	bne.n	800e99a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e986:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	689b      	ldr	r3, [r3, #8]
 800e98c:	68ba      	ldr	r2, [r7, #8]
 800e98e:	4313      	orrs	r3, r2
 800e990:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	68ba      	ldr	r2, [r7, #8]
 800e998:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2201      	movs	r2, #1
 800e99e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e9aa:	2300      	movs	r3, #0
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3714      	adds	r7, #20
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr
 800e9b8:	40012c00 	.word	0x40012c00
 800e9bc:	40014000 	.word	0x40014000

0800e9c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b083      	sub	sp, #12
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e9c8:	bf00      	nop
 800e9ca:	370c      	adds	r7, #12
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr

0800e9d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e9dc:	bf00      	nop
 800e9de:	370c      	adds	r7, #12
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e9f0:	bf00      	nop
 800e9f2:	370c      	adds	r7, #12
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d101      	bne.n	800ea0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	e040      	b.n	800ea90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d106      	bne.n	800ea24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f7f7 fafa 	bl	8006018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2224      	movs	r2, #36	; 0x24
 800ea28:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	681a      	ldr	r2, [r3, #0]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f022 0201 	bic.w	r2, r2, #1
 800ea38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d002      	beq.n	800ea48 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f000 feb0 	bl	800f7a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f000 fc81 	bl	800f350 <UART_SetConfig>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d101      	bne.n	800ea58 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800ea54:	2301      	movs	r3, #1
 800ea56:	e01b      	b.n	800ea90 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	685a      	ldr	r2, [r3, #4]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ea66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	689a      	ldr	r2, [r3, #8]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ea76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	681a      	ldr	r2, [r3, #0]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f042 0201 	orr.w	r2, r2, #1
 800ea86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f000 ff2f 	bl	800f8ec <UART_CheckIdleState>
 800ea8e:	4603      	mov	r3, r0
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3708      	adds	r7, #8
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b08a      	sub	sp, #40	; 0x28
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	60b9      	str	r1, [r7, #8]
 800eaa2:	4613      	mov	r3, r2
 800eaa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eaac:	2b20      	cmp	r3, #32
 800eaae:	d137      	bne.n	800eb20 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d002      	beq.n	800eabc <HAL_UART_Receive_DMA+0x24>
 800eab6:	88fb      	ldrh	r3, [r7, #6]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d101      	bne.n	800eac0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800eabc:	2301      	movs	r3, #1
 800eabe:	e030      	b.n	800eb22 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2200      	movs	r2, #0
 800eac4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	4a18      	ldr	r2, [pc, #96]	; (800eb2c <HAL_UART_Receive_DMA+0x94>)
 800eacc:	4293      	cmp	r3, r2
 800eace:	d01f      	beq.n	800eb10 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d018      	beq.n	800eb10 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	e853 3f00 	ldrex	r3, [r3]
 800eaea:	613b      	str	r3, [r7, #16]
   return(result);
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800eaf2:	627b      	str	r3, [r7, #36]	; 0x24
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	461a      	mov	r2, r3
 800eafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafc:	623b      	str	r3, [r7, #32]
 800eafe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb00:	69f9      	ldr	r1, [r7, #28]
 800eb02:	6a3a      	ldr	r2, [r7, #32]
 800eb04:	e841 2300 	strex	r3, r2, [r1]
 800eb08:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb0a:	69bb      	ldr	r3, [r7, #24]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d1e6      	bne.n	800eade <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800eb10:	88fb      	ldrh	r3, [r7, #6]
 800eb12:	461a      	mov	r2, r3
 800eb14:	68b9      	ldr	r1, [r7, #8]
 800eb16:	68f8      	ldr	r0, [r7, #12]
 800eb18:	f000 fff8 	bl	800fb0c <UART_Start_Receive_DMA>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	e000      	b.n	800eb22 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800eb20:	2302      	movs	r3, #2
  }
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3728      	adds	r7, #40	; 0x28
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	40008000 	.word	0x40008000

0800eb30 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b0a0      	sub	sp, #128	; 0x80
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb40:	e853 3f00 	ldrex	r3, [r3]
 800eb44:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800eb46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb48:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800eb4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	461a      	mov	r2, r3
 800eb54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eb56:	66bb      	str	r3, [r7, #104]	; 0x68
 800eb58:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb5a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800eb5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800eb5e:	e841 2300 	strex	r3, r2, [r1]
 800eb62:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800eb64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d1e6      	bne.n	800eb38 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	3308      	adds	r3, #8
 800eb70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb74:	e853 3f00 	ldrex	r3, [r3]
 800eb78:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800eb7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb7c:	f023 0301 	bic.w	r3, r3, #1
 800eb80:	67bb      	str	r3, [r7, #120]	; 0x78
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	3308      	adds	r3, #8
 800eb88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800eb8a:	657a      	str	r2, [r7, #84]	; 0x54
 800eb8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eb90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eb92:	e841 2300 	strex	r3, r2, [r1]
 800eb96:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800eb98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d1e5      	bne.n	800eb6a <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eba2:	2b01      	cmp	r3, #1
 800eba4:	d118      	bne.n	800ebd8 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebae:	e853 3f00 	ldrex	r3, [r3]
 800ebb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ebb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb6:	f023 0310 	bic.w	r3, r3, #16
 800ebba:	677b      	str	r3, [r7, #116]	; 0x74
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ebc4:	643b      	str	r3, [r7, #64]	; 0x40
 800ebc6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ebca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ebcc:	e841 2300 	strex	r3, r2, [r1]
 800ebd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ebd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d1e6      	bne.n	800eba6 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	689b      	ldr	r3, [r3, #8]
 800ebde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebe2:	2b80      	cmp	r3, #128	; 0x80
 800ebe4:	d137      	bne.n	800ec56 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	3308      	adds	r3, #8
 800ebec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebee:	6a3b      	ldr	r3, [r7, #32]
 800ebf0:	e853 3f00 	ldrex	r3, [r3]
 800ebf4:	61fb      	str	r3, [r7, #28]
   return(result);
 800ebf6:	69fb      	ldr	r3, [r7, #28]
 800ebf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ebfc:	673b      	str	r3, [r7, #112]	; 0x70
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	3308      	adds	r3, #8
 800ec04:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ec06:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ec08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec0e:	e841 2300 	strex	r3, r2, [r1]
 800ec12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d1e5      	bne.n	800ebe6 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d019      	beq.n	800ec56 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec26:	2200      	movs	r2, #0
 800ec28:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7f9 f8bc 	bl	8007dac <HAL_DMA_Abort>
 800ec34:	4603      	mov	r3, r0
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d00d      	beq.n	800ec56 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7f9 f9e2 	bl	8008008 <HAL_DMA_GetError>
 800ec44:	4603      	mov	r3, r0
 800ec46:	2b20      	cmp	r3, #32
 800ec48:	d105      	bne.n	800ec56 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2210      	movs	r2, #16
 800ec4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ec52:	2303      	movs	r3, #3
 800ec54:	e063      	b.n	800ed1e <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	689b      	ldr	r3, [r3, #8]
 800ec5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec60:	2b40      	cmp	r3, #64	; 0x40
 800ec62:	d137      	bne.n	800ecd4 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	3308      	adds	r3, #8
 800ec6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	e853 3f00 	ldrex	r3, [r3]
 800ec72:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	3308      	adds	r3, #8
 800ec82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ec84:	61ba      	str	r2, [r7, #24]
 800ec86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec88:	6979      	ldr	r1, [r7, #20]
 800ec8a:	69ba      	ldr	r2, [r7, #24]
 800ec8c:	e841 2300 	strex	r3, r2, [r1]
 800ec90:	613b      	str	r3, [r7, #16]
   return(result);
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d1e5      	bne.n	800ec64 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d019      	beq.n	800ecd4 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eca4:	2200      	movs	r2, #0
 800eca6:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecac:	4618      	mov	r0, r3
 800ecae:	f7f9 f87d 	bl	8007dac <HAL_DMA_Abort>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d00d      	beq.n	800ecd4 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7f9 f9a3 	bl	8008008 <HAL_DMA_GetError>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2b20      	cmp	r3, #32
 800ecc6:	d105      	bne.n	800ecd4 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2210      	movs	r2, #16
 800eccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ecd0:	2303      	movs	r3, #3
 800ecd2:	e024      	b.n	800ed1e <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2200      	movs	r2, #0
 800ece0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	220f      	movs	r2, #15
 800ecea:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	8b1b      	ldrh	r3, [r3, #24]
 800ecf2:	b29a      	uxth	r2, r3
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	f042 0208 	orr.w	r2, r2, #8
 800ecfc:	b292      	uxth	r2, r2
 800ecfe:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2220      	movs	r2, #32
 800ed04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2220      	movs	r2, #32
 800ed0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2200      	movs	r2, #0
 800ed12:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2200      	movs	r2, #0
 800ed18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ed1c:	2300      	movs	r3, #0
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3780      	adds	r7, #128	; 0x80
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}
	...

0800ed28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b0ba      	sub	sp, #232	; 0xe8
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	69db      	ldr	r3, [r3, #28]
 800ed36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	689b      	ldr	r3, [r3, #8]
 800ed4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ed4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ed52:	f640 030f 	movw	r3, #2063	; 0x80f
 800ed56:	4013      	ands	r3, r2
 800ed58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ed5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d115      	bne.n	800ed90 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ed64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed68:	f003 0320 	and.w	r3, r3, #32
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d00f      	beq.n	800ed90 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ed70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed74:	f003 0320 	and.w	r3, r3, #32
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d009      	beq.n	800ed90 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	f000 82ae 	beq.w	800f2e2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	4798      	blx	r3
      }
      return;
 800ed8e:	e2a8      	b.n	800f2e2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ed90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	f000 8117 	beq.w	800efc8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ed9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed9e:	f003 0301 	and.w	r3, r3, #1
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d106      	bne.n	800edb4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800eda6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800edaa:	4b85      	ldr	r3, [pc, #532]	; (800efc0 <HAL_UART_IRQHandler+0x298>)
 800edac:	4013      	ands	r3, r2
 800edae:	2b00      	cmp	r3, #0
 800edb0:	f000 810a 	beq.w	800efc8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800edb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edb8:	f003 0301 	and.w	r3, r3, #1
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d011      	beq.n	800ede4 <HAL_UART_IRQHandler+0xbc>
 800edc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00b      	beq.n	800ede4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	2201      	movs	r2, #1
 800edd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edda:	f043 0201 	orr.w	r2, r3, #1
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ede4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ede8:	f003 0302 	and.w	r3, r3, #2
 800edec:	2b00      	cmp	r3, #0
 800edee:	d011      	beq.n	800ee14 <HAL_UART_IRQHandler+0xec>
 800edf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800edf4:	f003 0301 	and.w	r3, r3, #1
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d00b      	beq.n	800ee14 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	2202      	movs	r2, #2
 800ee02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee0a:	f043 0204 	orr.w	r2, r3, #4
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ee14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee18:	f003 0304 	and.w	r3, r3, #4
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d011      	beq.n	800ee44 <HAL_UART_IRQHandler+0x11c>
 800ee20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee24:	f003 0301 	and.w	r3, r3, #1
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d00b      	beq.n	800ee44 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2204      	movs	r2, #4
 800ee32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee3a:	f043 0202 	orr.w	r2, r3, #2
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ee44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee48:	f003 0308 	and.w	r3, r3, #8
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d017      	beq.n	800ee80 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ee50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee54:	f003 0320 	and.w	r3, r3, #32
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d105      	bne.n	800ee68 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ee5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d00b      	beq.n	800ee80 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	2208      	movs	r2, #8
 800ee6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee76:	f043 0208 	orr.w	r2, r3, #8
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ee80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d012      	beq.n	800eeb2 <HAL_UART_IRQHandler+0x18a>
 800ee8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d00c      	beq.n	800eeb2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eea0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eea8:	f043 0220 	orr.w	r2, r3, #32
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	f000 8214 	beq.w	800f2e6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800eebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eec2:	f003 0320 	and.w	r3, r3, #32
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d00d      	beq.n	800eee6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800eeca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eece:	f003 0320 	and.w	r3, r3, #32
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d007      	beq.n	800eee6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d003      	beq.n	800eee6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eeec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	689b      	ldr	r3, [r3, #8]
 800eef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eefa:	2b40      	cmp	r3, #64	; 0x40
 800eefc:	d005      	beq.n	800ef0a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800eefe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ef02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d04f      	beq.n	800efaa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 fec4 	bl	800fc98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	689b      	ldr	r3, [r3, #8]
 800ef16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef1a:	2b40      	cmp	r3, #64	; 0x40
 800ef1c:	d141      	bne.n	800efa2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	3308      	adds	r3, #8
 800ef24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ef2c:	e853 3f00 	ldrex	r3, [r3]
 800ef30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ef34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ef38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	3308      	adds	r3, #8
 800ef46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ef4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ef4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ef56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ef5a:	e841 2300 	strex	r3, r2, [r1]
 800ef5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ef62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d1d9      	bne.n	800ef1e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d013      	beq.n	800ef9a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef76:	4a13      	ldr	r2, [pc, #76]	; (800efc4 <HAL_UART_IRQHandler+0x29c>)
 800ef78:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7f8 ff52 	bl	8007e28 <HAL_DMA_Abort_IT>
 800ef84:	4603      	mov	r3, r0
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d017      	beq.n	800efba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef90:	687a      	ldr	r2, [r7, #4]
 800ef92:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ef94:	4610      	mov	r0, r2
 800ef96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef98:	e00f      	b.n	800efba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f000 f9c2 	bl	800f324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800efa0:	e00b      	b.n	800efba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f000 f9be 	bl	800f324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800efa8:	e007      	b.n	800efba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 f9ba 	bl	800f324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2200      	movs	r2, #0
 800efb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800efb8:	e195      	b.n	800f2e6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800efba:	bf00      	nop
    return;
 800efbc:	e193      	b.n	800f2e6 <HAL_UART_IRQHandler+0x5be>
 800efbe:	bf00      	nop
 800efc0:	04000120 	.word	0x04000120
 800efc4:	0800ff49 	.word	0x0800ff49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800efcc:	2b01      	cmp	r3, #1
 800efce:	f040 814e 	bne.w	800f26e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800efd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efd6:	f003 0310 	and.w	r3, r3, #16
 800efda:	2b00      	cmp	r3, #0
 800efdc:	f000 8147 	beq.w	800f26e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800efe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800efe4:	f003 0310 	and.w	r3, r3, #16
 800efe8:	2b00      	cmp	r3, #0
 800efea:	f000 8140 	beq.w	800f26e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	2210      	movs	r2, #16
 800eff4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	689b      	ldr	r3, [r3, #8]
 800effc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f000:	2b40      	cmp	r3, #64	; 0x40
 800f002:	f040 80b8 	bne.w	800f176 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f012:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f016:	2b00      	cmp	r3, #0
 800f018:	f000 8167 	beq.w	800f2ea <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f022:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f026:	429a      	cmp	r2, r3
 800f028:	f080 815f 	bcs.w	800f2ea <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f032:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f003 0320 	and.w	r3, r3, #32
 800f042:	2b00      	cmp	r3, #0
 800f044:	f040 8086 	bne.w	800f154 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f050:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f054:	e853 3f00 	ldrex	r3, [r3]
 800f058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f05c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	461a      	mov	r2, r3
 800f06e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f076:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f07a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f07e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f082:	e841 2300 	strex	r3, r2, [r1]
 800f086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f08a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d1da      	bne.n	800f048 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	3308      	adds	r3, #8
 800f098:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f09a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f09c:	e853 3f00 	ldrex	r3, [r3]
 800f0a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f0a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f0a4:	f023 0301 	bic.w	r3, r3, #1
 800f0a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	3308      	adds	r3, #8
 800f0b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f0b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f0ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f0be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f0c2:	e841 2300 	strex	r3, r2, [r1]
 800f0c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f0c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d1e1      	bne.n	800f092 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	3308      	adds	r3, #8
 800f0d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0d8:	e853 3f00 	ldrex	r3, [r3]
 800f0dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f0de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	3308      	adds	r3, #8
 800f0ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f0f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f0f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f0f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f0fa:	e841 2300 	strex	r3, r2, [r1]
 800f0fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f102:	2b00      	cmp	r3, #0
 800f104:	d1e3      	bne.n	800f0ce <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2220      	movs	r2, #32
 800f10a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2200      	movs	r2, #0
 800f112:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f11a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f11c:	e853 3f00 	ldrex	r3, [r3]
 800f120:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f124:	f023 0310 	bic.w	r3, r3, #16
 800f128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	461a      	mov	r2, r3
 800f132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f136:	65bb      	str	r3, [r7, #88]	; 0x58
 800f138:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f13a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f13c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f13e:	e841 2300 	strex	r3, r2, [r1]
 800f142:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f146:	2b00      	cmp	r3, #0
 800f148:	d1e4      	bne.n	800f114 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f14e:	4618      	mov	r0, r3
 800f150:	f7f8 fe2c 	bl	8007dac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2202      	movs	r2, #2
 800f158:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f166:	b29b      	uxth	r3, r3
 800f168:	1ad3      	subs	r3, r2, r3
 800f16a:	b29b      	uxth	r3, r3
 800f16c:	4619      	mov	r1, r3
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f000 f8e2 	bl	800f338 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f174:	e0b9      	b.n	800f2ea <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f182:	b29b      	uxth	r3, r3
 800f184:	1ad3      	subs	r3, r2, r3
 800f186:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f190:	b29b      	uxth	r3, r3
 800f192:	2b00      	cmp	r3, #0
 800f194:	f000 80ab 	beq.w	800f2ee <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800f198:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	f000 80a6 	beq.w	800f2ee <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1aa:	e853 3f00 	ldrex	r3, [r3]
 800f1ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f1b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	461a      	mov	r2, r3
 800f1c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f1c4:	647b      	str	r3, [r7, #68]	; 0x44
 800f1c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f1ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f1cc:	e841 2300 	strex	r3, r2, [r1]
 800f1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f1d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d1e4      	bne.n	800f1a2 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	3308      	adds	r3, #8
 800f1de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e2:	e853 3f00 	ldrex	r3, [r3]
 800f1e6:	623b      	str	r3, [r7, #32]
   return(result);
 800f1e8:	6a3b      	ldr	r3, [r7, #32]
 800f1ea:	f023 0301 	bic.w	r3, r3, #1
 800f1ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	3308      	adds	r3, #8
 800f1f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f1fc:	633a      	str	r2, [r7, #48]	; 0x30
 800f1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f200:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f204:	e841 2300 	strex	r3, r2, [r1]
 800f208:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d1e3      	bne.n	800f1d8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2220      	movs	r2, #32
 800f214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2200      	movs	r2, #0
 800f21c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2200      	movs	r2, #0
 800f222:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	e853 3f00 	ldrex	r3, [r3]
 800f230:	60fb      	str	r3, [r7, #12]
   return(result);
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f023 0310 	bic.w	r3, r3, #16
 800f238:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	461a      	mov	r2, r3
 800f242:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f246:	61fb      	str	r3, [r7, #28]
 800f248:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f24a:	69b9      	ldr	r1, [r7, #24]
 800f24c:	69fa      	ldr	r2, [r7, #28]
 800f24e:	e841 2300 	strex	r3, r2, [r1]
 800f252:	617b      	str	r3, [r7, #20]
   return(result);
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d1e4      	bne.n	800f224 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2202      	movs	r2, #2
 800f25e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f260:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f264:	4619      	mov	r1, r3
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 f866 	bl	800f338 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f26c:	e03f      	b.n	800f2ee <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f26e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f276:	2b00      	cmp	r3, #0
 800f278:	d00e      	beq.n	800f298 <HAL_UART_IRQHandler+0x570>
 800f27a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f27e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f282:	2b00      	cmp	r3, #0
 800f284:	d008      	beq.n	800f298 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f28e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f000 fe99 	bl	800ffc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f296:	e02d      	b.n	800f2f4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800f298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f29c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d00e      	beq.n	800f2c2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800f2a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d008      	beq.n	800f2c2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d01c      	beq.n	800f2f2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	4798      	blx	r3
    }
    return;
 800f2c0:	e017      	b.n	800f2f2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f2c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d012      	beq.n	800f2f4 <HAL_UART_IRQHandler+0x5cc>
 800f2ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00c      	beq.n	800f2f4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 fe4a 	bl	800ff74 <UART_EndTransmit_IT>
    return;
 800f2e0:	e008      	b.n	800f2f4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800f2e2:	bf00      	nop
 800f2e4:	e006      	b.n	800f2f4 <HAL_UART_IRQHandler+0x5cc>
    return;
 800f2e6:	bf00      	nop
 800f2e8:	e004      	b.n	800f2f4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800f2ea:	bf00      	nop
 800f2ec:	e002      	b.n	800f2f4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800f2ee:	bf00      	nop
 800f2f0:	e000      	b.n	800f2f4 <HAL_UART_IRQHandler+0x5cc>
    return;
 800f2f2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800f2f4:	37e8      	adds	r7, #232	; 0xe8
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop

0800f2fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f304:	bf00      	nop
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f310:	b480      	push	{r7}
 800f312:	b083      	sub	sp, #12
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f318:	bf00      	nop
 800f31a:	370c      	adds	r7, #12
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f32c:	bf00      	nop
 800f32e:	370c      	adds	r7, #12
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr

0800f338 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f338:	b480      	push	{r7}
 800f33a:	b083      	sub	sp, #12
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	460b      	mov	r3, r1
 800f342:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f344:	bf00      	nop
 800f346:	370c      	adds	r7, #12
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr

0800f350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f354:	b08a      	sub	sp, #40	; 0x28
 800f356:	af00      	add	r7, sp, #0
 800f358:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f35a:	2300      	movs	r3, #0
 800f35c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	689a      	ldr	r2, [r3, #8]
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	691b      	ldr	r3, [r3, #16]
 800f368:	431a      	orrs	r2, r3
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	695b      	ldr	r3, [r3, #20]
 800f36e:	431a      	orrs	r2, r3
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	69db      	ldr	r3, [r3, #28]
 800f374:	4313      	orrs	r3, r2
 800f376:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	4bb4      	ldr	r3, [pc, #720]	; (800f650 <UART_SetConfig+0x300>)
 800f380:	4013      	ands	r3, r2
 800f382:	68fa      	ldr	r2, [r7, #12]
 800f384:	6812      	ldr	r2, [r2, #0]
 800f386:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f388:	430b      	orrs	r3, r1
 800f38a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	685b      	ldr	r3, [r3, #4]
 800f392:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	68da      	ldr	r2, [r3, #12]
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	430a      	orrs	r2, r1
 800f3a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	699b      	ldr	r3, [r3, #24]
 800f3a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4aa9      	ldr	r2, [pc, #676]	; (800f654 <UART_SetConfig+0x304>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d004      	beq.n	800f3bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	6a1b      	ldr	r3, [r3, #32]
 800f3b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	689b      	ldr	r3, [r3, #8]
 800f3c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3cc:	430a      	orrs	r2, r1
 800f3ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	4aa0      	ldr	r2, [pc, #640]	; (800f658 <UART_SetConfig+0x308>)
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	d126      	bne.n	800f428 <UART_SetConfig+0xd8>
 800f3da:	4ba0      	ldr	r3, [pc, #640]	; (800f65c <UART_SetConfig+0x30c>)
 800f3dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3e0:	f003 0303 	and.w	r3, r3, #3
 800f3e4:	2b03      	cmp	r3, #3
 800f3e6:	d81b      	bhi.n	800f420 <UART_SetConfig+0xd0>
 800f3e8:	a201      	add	r2, pc, #4	; (adr r2, 800f3f0 <UART_SetConfig+0xa0>)
 800f3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ee:	bf00      	nop
 800f3f0:	0800f401 	.word	0x0800f401
 800f3f4:	0800f411 	.word	0x0800f411
 800f3f8:	0800f409 	.word	0x0800f409
 800f3fc:	0800f419 	.word	0x0800f419
 800f400:	2301      	movs	r3, #1
 800f402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f406:	e080      	b.n	800f50a <UART_SetConfig+0x1ba>
 800f408:	2302      	movs	r3, #2
 800f40a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f40e:	e07c      	b.n	800f50a <UART_SetConfig+0x1ba>
 800f410:	2304      	movs	r3, #4
 800f412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f416:	e078      	b.n	800f50a <UART_SetConfig+0x1ba>
 800f418:	2308      	movs	r3, #8
 800f41a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f41e:	e074      	b.n	800f50a <UART_SetConfig+0x1ba>
 800f420:	2310      	movs	r3, #16
 800f422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f426:	e070      	b.n	800f50a <UART_SetConfig+0x1ba>
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	4a8c      	ldr	r2, [pc, #560]	; (800f660 <UART_SetConfig+0x310>)
 800f42e:	4293      	cmp	r3, r2
 800f430:	d138      	bne.n	800f4a4 <UART_SetConfig+0x154>
 800f432:	4b8a      	ldr	r3, [pc, #552]	; (800f65c <UART_SetConfig+0x30c>)
 800f434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f438:	f003 030c 	and.w	r3, r3, #12
 800f43c:	2b0c      	cmp	r3, #12
 800f43e:	d82d      	bhi.n	800f49c <UART_SetConfig+0x14c>
 800f440:	a201      	add	r2, pc, #4	; (adr r2, 800f448 <UART_SetConfig+0xf8>)
 800f442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f446:	bf00      	nop
 800f448:	0800f47d 	.word	0x0800f47d
 800f44c:	0800f49d 	.word	0x0800f49d
 800f450:	0800f49d 	.word	0x0800f49d
 800f454:	0800f49d 	.word	0x0800f49d
 800f458:	0800f48d 	.word	0x0800f48d
 800f45c:	0800f49d 	.word	0x0800f49d
 800f460:	0800f49d 	.word	0x0800f49d
 800f464:	0800f49d 	.word	0x0800f49d
 800f468:	0800f485 	.word	0x0800f485
 800f46c:	0800f49d 	.word	0x0800f49d
 800f470:	0800f49d 	.word	0x0800f49d
 800f474:	0800f49d 	.word	0x0800f49d
 800f478:	0800f495 	.word	0x0800f495
 800f47c:	2300      	movs	r3, #0
 800f47e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f482:	e042      	b.n	800f50a <UART_SetConfig+0x1ba>
 800f484:	2302      	movs	r3, #2
 800f486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f48a:	e03e      	b.n	800f50a <UART_SetConfig+0x1ba>
 800f48c:	2304      	movs	r3, #4
 800f48e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f492:	e03a      	b.n	800f50a <UART_SetConfig+0x1ba>
 800f494:	2308      	movs	r3, #8
 800f496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f49a:	e036      	b.n	800f50a <UART_SetConfig+0x1ba>
 800f49c:	2310      	movs	r3, #16
 800f49e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f4a2:	e032      	b.n	800f50a <UART_SetConfig+0x1ba>
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	4a6a      	ldr	r2, [pc, #424]	; (800f654 <UART_SetConfig+0x304>)
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d12a      	bne.n	800f504 <UART_SetConfig+0x1b4>
 800f4ae:	4b6b      	ldr	r3, [pc, #428]	; (800f65c <UART_SetConfig+0x30c>)
 800f4b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f4b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f4b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f4bc:	d01a      	beq.n	800f4f4 <UART_SetConfig+0x1a4>
 800f4be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f4c2:	d81b      	bhi.n	800f4fc <UART_SetConfig+0x1ac>
 800f4c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4c8:	d00c      	beq.n	800f4e4 <UART_SetConfig+0x194>
 800f4ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4ce:	d815      	bhi.n	800f4fc <UART_SetConfig+0x1ac>
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d003      	beq.n	800f4dc <UART_SetConfig+0x18c>
 800f4d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4d8:	d008      	beq.n	800f4ec <UART_SetConfig+0x19c>
 800f4da:	e00f      	b.n	800f4fc <UART_SetConfig+0x1ac>
 800f4dc:	2300      	movs	r3, #0
 800f4de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f4e2:	e012      	b.n	800f50a <UART_SetConfig+0x1ba>
 800f4e4:	2302      	movs	r3, #2
 800f4e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f4ea:	e00e      	b.n	800f50a <UART_SetConfig+0x1ba>
 800f4ec:	2304      	movs	r3, #4
 800f4ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f4f2:	e00a      	b.n	800f50a <UART_SetConfig+0x1ba>
 800f4f4:	2308      	movs	r3, #8
 800f4f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f4fa:	e006      	b.n	800f50a <UART_SetConfig+0x1ba>
 800f4fc:	2310      	movs	r3, #16
 800f4fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f502:	e002      	b.n	800f50a <UART_SetConfig+0x1ba>
 800f504:	2310      	movs	r3, #16
 800f506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	4a51      	ldr	r2, [pc, #324]	; (800f654 <UART_SetConfig+0x304>)
 800f510:	4293      	cmp	r3, r2
 800f512:	d17a      	bne.n	800f60a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f514:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f518:	2b08      	cmp	r3, #8
 800f51a:	d824      	bhi.n	800f566 <UART_SetConfig+0x216>
 800f51c:	a201      	add	r2, pc, #4	; (adr r2, 800f524 <UART_SetConfig+0x1d4>)
 800f51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f522:	bf00      	nop
 800f524:	0800f549 	.word	0x0800f549
 800f528:	0800f567 	.word	0x0800f567
 800f52c:	0800f551 	.word	0x0800f551
 800f530:	0800f567 	.word	0x0800f567
 800f534:	0800f557 	.word	0x0800f557
 800f538:	0800f567 	.word	0x0800f567
 800f53c:	0800f567 	.word	0x0800f567
 800f540:	0800f567 	.word	0x0800f567
 800f544:	0800f55f 	.word	0x0800f55f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f548:	f7fc fca6 	bl	800be98 <HAL_RCC_GetPCLK1Freq>
 800f54c:	61f8      	str	r0, [r7, #28]
        break;
 800f54e:	e010      	b.n	800f572 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f550:	4b44      	ldr	r3, [pc, #272]	; (800f664 <UART_SetConfig+0x314>)
 800f552:	61fb      	str	r3, [r7, #28]
        break;
 800f554:	e00d      	b.n	800f572 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f556:	f7fc fc07 	bl	800bd68 <HAL_RCC_GetSysClockFreq>
 800f55a:	61f8      	str	r0, [r7, #28]
        break;
 800f55c:	e009      	b.n	800f572 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f55e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f562:	61fb      	str	r3, [r7, #28]
        break;
 800f564:	e005      	b.n	800f572 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800f566:	2300      	movs	r3, #0
 800f568:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f56a:	2301      	movs	r3, #1
 800f56c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800f570:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	2b00      	cmp	r3, #0
 800f576:	f000 8107 	beq.w	800f788 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	685a      	ldr	r2, [r3, #4]
 800f57e:	4613      	mov	r3, r2
 800f580:	005b      	lsls	r3, r3, #1
 800f582:	4413      	add	r3, r2
 800f584:	69fa      	ldr	r2, [r7, #28]
 800f586:	429a      	cmp	r2, r3
 800f588:	d305      	bcc.n	800f596 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	685b      	ldr	r3, [r3, #4]
 800f58e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f590:	69fa      	ldr	r2, [r7, #28]
 800f592:	429a      	cmp	r2, r3
 800f594:	d903      	bls.n	800f59e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800f596:	2301      	movs	r3, #1
 800f598:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f59c:	e0f4      	b.n	800f788 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800f59e:	69fb      	ldr	r3, [r7, #28]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	461c      	mov	r4, r3
 800f5a4:	4615      	mov	r5, r2
 800f5a6:	f04f 0200 	mov.w	r2, #0
 800f5aa:	f04f 0300 	mov.w	r3, #0
 800f5ae:	022b      	lsls	r3, r5, #8
 800f5b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800f5b4:	0222      	lsls	r2, r4, #8
 800f5b6:	68f9      	ldr	r1, [r7, #12]
 800f5b8:	6849      	ldr	r1, [r1, #4]
 800f5ba:	0849      	lsrs	r1, r1, #1
 800f5bc:	2000      	movs	r0, #0
 800f5be:	4688      	mov	r8, r1
 800f5c0:	4681      	mov	r9, r0
 800f5c2:	eb12 0a08 	adds.w	sl, r2, r8
 800f5c6:	eb43 0b09 	adc.w	fp, r3, r9
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	603b      	str	r3, [r7, #0]
 800f5d2:	607a      	str	r2, [r7, #4]
 800f5d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5d8:	4650      	mov	r0, sl
 800f5da:	4659      	mov	r1, fp
 800f5dc:	f7f1 fb54 	bl	8000c88 <__aeabi_uldivmod>
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	460b      	mov	r3, r1
 800f5e4:	4613      	mov	r3, r2
 800f5e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f5e8:	69bb      	ldr	r3, [r7, #24]
 800f5ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f5ee:	d308      	bcc.n	800f602 <UART_SetConfig+0x2b2>
 800f5f0:	69bb      	ldr	r3, [r7, #24]
 800f5f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f5f6:	d204      	bcs.n	800f602 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	69ba      	ldr	r2, [r7, #24]
 800f5fe:	60da      	str	r2, [r3, #12]
 800f600:	e0c2      	b.n	800f788 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800f602:	2301      	movs	r3, #1
 800f604:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f608:	e0be      	b.n	800f788 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	69db      	ldr	r3, [r3, #28]
 800f60e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f612:	d16a      	bne.n	800f6ea <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800f614:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f618:	2b08      	cmp	r3, #8
 800f61a:	d834      	bhi.n	800f686 <UART_SetConfig+0x336>
 800f61c:	a201      	add	r2, pc, #4	; (adr r2, 800f624 <UART_SetConfig+0x2d4>)
 800f61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f622:	bf00      	nop
 800f624:	0800f649 	.word	0x0800f649
 800f628:	0800f669 	.word	0x0800f669
 800f62c:	0800f671 	.word	0x0800f671
 800f630:	0800f687 	.word	0x0800f687
 800f634:	0800f677 	.word	0x0800f677
 800f638:	0800f687 	.word	0x0800f687
 800f63c:	0800f687 	.word	0x0800f687
 800f640:	0800f687 	.word	0x0800f687
 800f644:	0800f67f 	.word	0x0800f67f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f648:	f7fc fc26 	bl	800be98 <HAL_RCC_GetPCLK1Freq>
 800f64c:	61f8      	str	r0, [r7, #28]
        break;
 800f64e:	e020      	b.n	800f692 <UART_SetConfig+0x342>
 800f650:	efff69f3 	.word	0xefff69f3
 800f654:	40008000 	.word	0x40008000
 800f658:	40013800 	.word	0x40013800
 800f65c:	40021000 	.word	0x40021000
 800f660:	40004400 	.word	0x40004400
 800f664:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f668:	f7fc fc2c 	bl	800bec4 <HAL_RCC_GetPCLK2Freq>
 800f66c:	61f8      	str	r0, [r7, #28]
        break;
 800f66e:	e010      	b.n	800f692 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f670:	4b4c      	ldr	r3, [pc, #304]	; (800f7a4 <UART_SetConfig+0x454>)
 800f672:	61fb      	str	r3, [r7, #28]
        break;
 800f674:	e00d      	b.n	800f692 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f676:	f7fc fb77 	bl	800bd68 <HAL_RCC_GetSysClockFreq>
 800f67a:	61f8      	str	r0, [r7, #28]
        break;
 800f67c:	e009      	b.n	800f692 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f67e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f682:	61fb      	str	r3, [r7, #28]
        break;
 800f684:	e005      	b.n	800f692 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800f686:	2300      	movs	r3, #0
 800f688:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f68a:	2301      	movs	r3, #1
 800f68c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800f690:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f692:	69fb      	ldr	r3, [r7, #28]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d077      	beq.n	800f788 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f698:	69fb      	ldr	r3, [r7, #28]
 800f69a:	005a      	lsls	r2, r3, #1
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	085b      	lsrs	r3, r3, #1
 800f6a2:	441a      	add	r2, r3
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f6ae:	69bb      	ldr	r3, [r7, #24]
 800f6b0:	2b0f      	cmp	r3, #15
 800f6b2:	d916      	bls.n	800f6e2 <UART_SetConfig+0x392>
 800f6b4:	69bb      	ldr	r3, [r7, #24]
 800f6b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6ba:	d212      	bcs.n	800f6e2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f6bc:	69bb      	ldr	r3, [r7, #24]
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	f023 030f 	bic.w	r3, r3, #15
 800f6c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f6c6:	69bb      	ldr	r3, [r7, #24]
 800f6c8:	085b      	lsrs	r3, r3, #1
 800f6ca:	b29b      	uxth	r3, r3
 800f6cc:	f003 0307 	and.w	r3, r3, #7
 800f6d0:	b29a      	uxth	r2, r3
 800f6d2:	8afb      	ldrh	r3, [r7, #22]
 800f6d4:	4313      	orrs	r3, r2
 800f6d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	8afa      	ldrh	r2, [r7, #22]
 800f6de:	60da      	str	r2, [r3, #12]
 800f6e0:	e052      	b.n	800f788 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f6e8:	e04e      	b.n	800f788 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f6ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f6ee:	2b08      	cmp	r3, #8
 800f6f0:	d827      	bhi.n	800f742 <UART_SetConfig+0x3f2>
 800f6f2:	a201      	add	r2, pc, #4	; (adr r2, 800f6f8 <UART_SetConfig+0x3a8>)
 800f6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6f8:	0800f71d 	.word	0x0800f71d
 800f6fc:	0800f725 	.word	0x0800f725
 800f700:	0800f72d 	.word	0x0800f72d
 800f704:	0800f743 	.word	0x0800f743
 800f708:	0800f733 	.word	0x0800f733
 800f70c:	0800f743 	.word	0x0800f743
 800f710:	0800f743 	.word	0x0800f743
 800f714:	0800f743 	.word	0x0800f743
 800f718:	0800f73b 	.word	0x0800f73b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f71c:	f7fc fbbc 	bl	800be98 <HAL_RCC_GetPCLK1Freq>
 800f720:	61f8      	str	r0, [r7, #28]
        break;
 800f722:	e014      	b.n	800f74e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f724:	f7fc fbce 	bl	800bec4 <HAL_RCC_GetPCLK2Freq>
 800f728:	61f8      	str	r0, [r7, #28]
        break;
 800f72a:	e010      	b.n	800f74e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f72c:	4b1d      	ldr	r3, [pc, #116]	; (800f7a4 <UART_SetConfig+0x454>)
 800f72e:	61fb      	str	r3, [r7, #28]
        break;
 800f730:	e00d      	b.n	800f74e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f732:	f7fc fb19 	bl	800bd68 <HAL_RCC_GetSysClockFreq>
 800f736:	61f8      	str	r0, [r7, #28]
        break;
 800f738:	e009      	b.n	800f74e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f73a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f73e:	61fb      	str	r3, [r7, #28]
        break;
 800f740:	e005      	b.n	800f74e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800f742:	2300      	movs	r3, #0
 800f744:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f746:	2301      	movs	r3, #1
 800f748:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800f74c:	bf00      	nop
    }

    if (pclk != 0U)
 800f74e:	69fb      	ldr	r3, [r7, #28]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d019      	beq.n	800f788 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	685b      	ldr	r3, [r3, #4]
 800f758:	085a      	lsrs	r2, r3, #1
 800f75a:	69fb      	ldr	r3, [r7, #28]
 800f75c:	441a      	add	r2, r3
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	fbb2 f3f3 	udiv	r3, r2, r3
 800f766:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f768:	69bb      	ldr	r3, [r7, #24]
 800f76a:	2b0f      	cmp	r3, #15
 800f76c:	d909      	bls.n	800f782 <UART_SetConfig+0x432>
 800f76e:	69bb      	ldr	r3, [r7, #24]
 800f770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f774:	d205      	bcs.n	800f782 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f776:	69bb      	ldr	r3, [r7, #24]
 800f778:	b29a      	uxth	r2, r3
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	60da      	str	r2, [r3, #12]
 800f780:	e002      	b.n	800f788 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800f782:	2301      	movs	r3, #1
 800f784:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2200      	movs	r2, #0
 800f78c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	2200      	movs	r2, #0
 800f792:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800f794:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800f798:	4618      	mov	r0, r3
 800f79a:	3728      	adds	r7, #40	; 0x28
 800f79c:	46bd      	mov	sp, r7
 800f79e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f7a2:	bf00      	nop
 800f7a4:	00f42400 	.word	0x00f42400

0800f7a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b083      	sub	sp, #12
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b4:	f003 0308 	and.w	r3, r3, #8
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d00a      	beq.n	800f7d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	430a      	orrs	r2, r1
 800f7d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d6:	f003 0301 	and.w	r3, r3, #1
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d00a      	beq.n	800f7f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	430a      	orrs	r2, r1
 800f7f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7f8:	f003 0302 	and.w	r3, r3, #2
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d00a      	beq.n	800f816 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	685b      	ldr	r3, [r3, #4]
 800f806:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	430a      	orrs	r2, r1
 800f814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f81a:	f003 0304 	and.w	r3, r3, #4
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d00a      	beq.n	800f838 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	430a      	orrs	r2, r1
 800f836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f83c:	f003 0310 	and.w	r3, r3, #16
 800f840:	2b00      	cmp	r3, #0
 800f842:	d00a      	beq.n	800f85a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	689b      	ldr	r3, [r3, #8]
 800f84a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	430a      	orrs	r2, r1
 800f858:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f85e:	f003 0320 	and.w	r3, r3, #32
 800f862:	2b00      	cmp	r3, #0
 800f864:	d00a      	beq.n	800f87c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	689b      	ldr	r3, [r3, #8]
 800f86c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	430a      	orrs	r2, r1
 800f87a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f884:	2b00      	cmp	r3, #0
 800f886:	d01a      	beq.n	800f8be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	685b      	ldr	r3, [r3, #4]
 800f88e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	430a      	orrs	r2, r1
 800f89c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f8a6:	d10a      	bne.n	800f8be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	685b      	ldr	r3, [r3, #4]
 800f8ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	430a      	orrs	r2, r1
 800f8bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d00a      	beq.n	800f8e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	685b      	ldr	r3, [r3, #4]
 800f8d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	430a      	orrs	r2, r1
 800f8de:	605a      	str	r2, [r3, #4]
  }
}
 800f8e0:	bf00      	nop
 800f8e2:	370c      	adds	r7, #12
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr

0800f8ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b098      	sub	sp, #96	; 0x60
 800f8f0:	af02      	add	r7, sp, #8
 800f8f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f8fc:	f7f6 fd5c 	bl	80063b8 <HAL_GetTick>
 800f900:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f003 0308 	and.w	r3, r3, #8
 800f90c:	2b08      	cmp	r3, #8
 800f90e:	d12e      	bne.n	800f96e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f914:	9300      	str	r3, [sp, #0]
 800f916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f918:	2200      	movs	r2, #0
 800f91a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 f88c 	bl	800fa3c <UART_WaitOnFlagUntilTimeout>
 800f924:	4603      	mov	r3, r0
 800f926:	2b00      	cmp	r3, #0
 800f928:	d021      	beq.n	800f96e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f932:	e853 3f00 	ldrex	r3, [r3]
 800f936:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f93a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f93e:	653b      	str	r3, [r7, #80]	; 0x50
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	461a      	mov	r2, r3
 800f946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f948:	647b      	str	r3, [r7, #68]	; 0x44
 800f94a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f94c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f94e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f950:	e841 2300 	strex	r3, r2, [r1]
 800f954:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d1e6      	bne.n	800f92a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2220      	movs	r2, #32
 800f960:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2200      	movs	r2, #0
 800f966:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f96a:	2303      	movs	r3, #3
 800f96c:	e062      	b.n	800fa34 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	f003 0304 	and.w	r3, r3, #4
 800f978:	2b04      	cmp	r3, #4
 800f97a:	d149      	bne.n	800fa10 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f97c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f980:	9300      	str	r3, [sp, #0]
 800f982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f984:	2200      	movs	r2, #0
 800f986:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f000 f856 	bl	800fa3c <UART_WaitOnFlagUntilTimeout>
 800f990:	4603      	mov	r3, r0
 800f992:	2b00      	cmp	r3, #0
 800f994:	d03c      	beq.n	800fa10 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99e:	e853 3f00 	ldrex	r3, [r3]
 800f9a2:	623b      	str	r3, [r7, #32]
   return(result);
 800f9a4:	6a3b      	ldr	r3, [r7, #32]
 800f9a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f9aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9b4:	633b      	str	r3, [r7, #48]	; 0x30
 800f9b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f9ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9bc:	e841 2300 	strex	r3, r2, [r1]
 800f9c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d1e6      	bne.n	800f996 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	3308      	adds	r3, #8
 800f9ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	e853 3f00 	ldrex	r3, [r3]
 800f9d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	f023 0301 	bic.w	r3, r3, #1
 800f9de:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	3308      	adds	r3, #8
 800f9e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9e8:	61fa      	str	r2, [r7, #28]
 800f9ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ec:	69b9      	ldr	r1, [r7, #24]
 800f9ee:	69fa      	ldr	r2, [r7, #28]
 800f9f0:	e841 2300 	strex	r3, r2, [r1]
 800f9f4:	617b      	str	r3, [r7, #20]
   return(result);
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d1e5      	bne.n	800f9c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2220      	movs	r2, #32
 800fa00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2200      	movs	r2, #0
 800fa08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa0c:	2303      	movs	r3, #3
 800fa0e:	e011      	b.n	800fa34 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2220      	movs	r2, #32
 800fa14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	2220      	movs	r2, #32
 800fa1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2200      	movs	r2, #0
 800fa22:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2200      	movs	r2, #0
 800fa28:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800fa32:	2300      	movs	r3, #0
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3758      	adds	r7, #88	; 0x58
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}

0800fa3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	60f8      	str	r0, [r7, #12]
 800fa44:	60b9      	str	r1, [r7, #8]
 800fa46:	603b      	str	r3, [r7, #0]
 800fa48:	4613      	mov	r3, r2
 800fa4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fa4c:	e049      	b.n	800fae2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fa4e:	69bb      	ldr	r3, [r7, #24]
 800fa50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa54:	d045      	beq.n	800fae2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fa56:	f7f6 fcaf 	bl	80063b8 <HAL_GetTick>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	1ad3      	subs	r3, r2, r3
 800fa60:	69ba      	ldr	r2, [r7, #24]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d302      	bcc.n	800fa6c <UART_WaitOnFlagUntilTimeout+0x30>
 800fa66:	69bb      	ldr	r3, [r7, #24]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d101      	bne.n	800fa70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fa6c:	2303      	movs	r3, #3
 800fa6e:	e048      	b.n	800fb02 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f003 0304 	and.w	r3, r3, #4
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d031      	beq.n	800fae2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	69db      	ldr	r3, [r3, #28]
 800fa84:	f003 0308 	and.w	r3, r3, #8
 800fa88:	2b08      	cmp	r3, #8
 800fa8a:	d110      	bne.n	800faae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	2208      	movs	r2, #8
 800fa92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fa94:	68f8      	ldr	r0, [r7, #12]
 800fa96:	f000 f8ff 	bl	800fc98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	2208      	movs	r2, #8
 800fa9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	2200      	movs	r2, #0
 800faa6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800faaa:	2301      	movs	r3, #1
 800faac:	e029      	b.n	800fb02 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	69db      	ldr	r3, [r3, #28]
 800fab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fabc:	d111      	bne.n	800fae2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fac6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fac8:	68f8      	ldr	r0, [r7, #12]
 800faca:	f000 f8e5 	bl	800fc98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	2220      	movs	r2, #32
 800fad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	2200      	movs	r2, #0
 800fada:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800fade:	2303      	movs	r3, #3
 800fae0:	e00f      	b.n	800fb02 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	69da      	ldr	r2, [r3, #28]
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	4013      	ands	r3, r2
 800faec:	68ba      	ldr	r2, [r7, #8]
 800faee:	429a      	cmp	r2, r3
 800faf0:	bf0c      	ite	eq
 800faf2:	2301      	moveq	r3, #1
 800faf4:	2300      	movne	r3, #0
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	461a      	mov	r2, r3
 800fafa:	79fb      	ldrb	r3, [r7, #7]
 800fafc:	429a      	cmp	r2, r3
 800fafe:	d0a6      	beq.n	800fa4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fb00:	2300      	movs	r3, #0
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3710      	adds	r7, #16
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
	...

0800fb0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b096      	sub	sp, #88	; 0x58
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	4613      	mov	r3, r2
 800fb18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	68ba      	ldr	r2, [r7, #8]
 800fb1e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	88fa      	ldrh	r2, [r7, #6]
 800fb24:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	2222      	movs	r2, #34	; 0x22
 800fb34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d028      	beq.n	800fb92 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb44:	4a3e      	ldr	r2, [pc, #248]	; (800fc40 <UART_Start_Receive_DMA+0x134>)
 800fb46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb4c:	4a3d      	ldr	r2, [pc, #244]	; (800fc44 <UART_Start_Receive_DMA+0x138>)
 800fb4e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb54:	4a3c      	ldr	r2, [pc, #240]	; (800fc48 <UART_Start_Receive_DMA+0x13c>)
 800fb56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	3324      	adds	r3, #36	; 0x24
 800fb6a:	4619      	mov	r1, r3
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb70:	461a      	mov	r2, r3
 800fb72:	88fb      	ldrh	r3, [r7, #6]
 800fb74:	f7f8 f8ba 	bl	8007cec <HAL_DMA_Start_IT>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d009      	beq.n	800fb92 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	2210      	movs	r2, #16
 800fb82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2220      	movs	r2, #32
 800fb8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800fb8e:	2301      	movs	r3, #1
 800fb90:	e051      	b.n	800fc36 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	691b      	ldr	r3, [r3, #16]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d018      	beq.n	800fbcc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fba2:	e853 3f00 	ldrex	r3, [r3]
 800fba6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fbae:	657b      	str	r3, [r7, #84]	; 0x54
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800fbba:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbbc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fbbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fbc0:	e841 2300 	strex	r3, r2, [r1]
 800fbc4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fbc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d1e6      	bne.n	800fb9a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	3308      	adds	r3, #8
 800fbd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd6:	e853 3f00 	ldrex	r3, [r3]
 800fbda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbde:	f043 0301 	orr.w	r3, r3, #1
 800fbe2:	653b      	str	r3, [r7, #80]	; 0x50
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	3308      	adds	r3, #8
 800fbea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fbec:	637a      	str	r2, [r7, #52]	; 0x34
 800fbee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fbf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbf4:	e841 2300 	strex	r3, r2, [r1]
 800fbf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d1e5      	bne.n	800fbcc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	3308      	adds	r3, #8
 800fc06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	e853 3f00 	ldrex	r3, [r3]
 800fc0e:	613b      	str	r3, [r7, #16]
   return(result);
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	3308      	adds	r3, #8
 800fc1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fc20:	623a      	str	r2, [r7, #32]
 800fc22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc24:	69f9      	ldr	r1, [r7, #28]
 800fc26:	6a3a      	ldr	r2, [r7, #32]
 800fc28:	e841 2300 	strex	r3, r2, [r1]
 800fc2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800fc2e:	69bb      	ldr	r3, [r7, #24]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d1e5      	bne.n	800fc00 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800fc34:	2300      	movs	r3, #0
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3758      	adds	r7, #88	; 0x58
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}
 800fc3e:	bf00      	nop
 800fc40:	0800fd61 	.word	0x0800fd61
 800fc44:	0800fe8d 	.word	0x0800fe8d
 800fc48:	0800fecb 	.word	0x0800fecb

0800fc4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b089      	sub	sp, #36	; 0x24
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	e853 3f00 	ldrex	r3, [r3]
 800fc60:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fc68:	61fb      	str	r3, [r7, #28]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	461a      	mov	r2, r3
 800fc70:	69fb      	ldr	r3, [r7, #28]
 800fc72:	61bb      	str	r3, [r7, #24]
 800fc74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc76:	6979      	ldr	r1, [r7, #20]
 800fc78:	69ba      	ldr	r2, [r7, #24]
 800fc7a:	e841 2300 	strex	r3, r2, [r1]
 800fc7e:	613b      	str	r3, [r7, #16]
   return(result);
 800fc80:	693b      	ldr	r3, [r7, #16]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d1e6      	bne.n	800fc54 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2220      	movs	r2, #32
 800fc8a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800fc8c:	bf00      	nop
 800fc8e:	3724      	adds	r7, #36	; 0x24
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr

0800fc98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc98:	b480      	push	{r7}
 800fc9a:	b095      	sub	sp, #84	; 0x54
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fca8:	e853 3f00 	ldrex	r3, [r3]
 800fcac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fcb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	461a      	mov	r2, r3
 800fcbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcbe:	643b      	str	r3, [r7, #64]	; 0x40
 800fcc0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fcc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fcc6:	e841 2300 	strex	r3, r2, [r1]
 800fcca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d1e6      	bne.n	800fca0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	3308      	adds	r3, #8
 800fcd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcda:	6a3b      	ldr	r3, [r7, #32]
 800fcdc:	e853 3f00 	ldrex	r3, [r3]
 800fce0:	61fb      	str	r3, [r7, #28]
   return(result);
 800fce2:	69fb      	ldr	r3, [r7, #28]
 800fce4:	f023 0301 	bic.w	r3, r3, #1
 800fce8:	64bb      	str	r3, [r7, #72]	; 0x48
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	3308      	adds	r3, #8
 800fcf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fcf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fcf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fcf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcfa:	e841 2300 	strex	r3, r2, [r1]
 800fcfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d1e5      	bne.n	800fcd2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fd0a:	2b01      	cmp	r3, #1
 800fd0c:	d118      	bne.n	800fd40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	e853 3f00 	ldrex	r3, [r3]
 800fd1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	f023 0310 	bic.w	r3, r3, #16
 800fd22:	647b      	str	r3, [r7, #68]	; 0x44
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	461a      	mov	r2, r3
 800fd2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd2c:	61bb      	str	r3, [r7, #24]
 800fd2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd30:	6979      	ldr	r1, [r7, #20]
 800fd32:	69ba      	ldr	r2, [r7, #24]
 800fd34:	e841 2300 	strex	r3, r2, [r1]
 800fd38:	613b      	str	r3, [r7, #16]
   return(result);
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d1e6      	bne.n	800fd0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2220      	movs	r2, #32
 800fd44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2200      	movs	r2, #0
 800fd52:	669a      	str	r2, [r3, #104]	; 0x68
}
 800fd54:	bf00      	nop
 800fd56:	3754      	adds	r7, #84	; 0x54
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr

0800fd60 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b09c      	sub	sp, #112	; 0x70
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd6c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f003 0320 	and.w	r3, r3, #32
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d171      	bne.n	800fe60 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800fd7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd7e:	2200      	movs	r2, #0
 800fd80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd8c:	e853 3f00 	ldrex	r3, [r3]
 800fd90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fd92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd98:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	461a      	mov	r2, r3
 800fda0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fda2:	65bb      	str	r3, [r7, #88]	; 0x58
 800fda4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fda6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fda8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fdaa:	e841 2300 	strex	r3, r2, [r1]
 800fdae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fdb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d1e6      	bne.n	800fd84 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fdb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	3308      	adds	r3, #8
 800fdbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc0:	e853 3f00 	ldrex	r3, [r3]
 800fdc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fdc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdc8:	f023 0301 	bic.w	r3, r3, #1
 800fdcc:	667b      	str	r3, [r7, #100]	; 0x64
 800fdce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	3308      	adds	r3, #8
 800fdd4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fdd6:	647a      	str	r2, [r7, #68]	; 0x44
 800fdd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fddc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fdde:	e841 2300 	strex	r3, r2, [r1]
 800fde2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fde4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d1e5      	bne.n	800fdb6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fdea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	3308      	adds	r3, #8
 800fdf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf4:	e853 3f00 	ldrex	r3, [r3]
 800fdf8:	623b      	str	r3, [r7, #32]
   return(result);
 800fdfa:	6a3b      	ldr	r3, [r7, #32]
 800fdfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe00:	663b      	str	r3, [r7, #96]	; 0x60
 800fe02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	3308      	adds	r3, #8
 800fe08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fe0a:	633a      	str	r2, [r7, #48]	; 0x30
 800fe0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe12:	e841 2300 	strex	r3, r2, [r1]
 800fe16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fe18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d1e5      	bne.n	800fdea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fe1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe20:	2220      	movs	r2, #32
 800fe22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d118      	bne.n	800fe60 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	e853 3f00 	ldrex	r3, [r3]
 800fe3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	f023 0310 	bic.w	r3, r3, #16
 800fe42:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fe44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	461a      	mov	r2, r3
 800fe4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe4c:	61fb      	str	r3, [r7, #28]
 800fe4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe50:	69b9      	ldr	r1, [r7, #24]
 800fe52:	69fa      	ldr	r2, [r7, #28]
 800fe54:	e841 2300 	strex	r3, r2, [r1]
 800fe58:	617b      	str	r3, [r7, #20]
   return(result);
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d1e6      	bne.n	800fe2e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fe60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe62:	2200      	movs	r2, #0
 800fe64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe6a:	2b01      	cmp	r3, #1
 800fe6c:	d107      	bne.n	800fe7e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fe6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fe74:	4619      	mov	r1, r3
 800fe76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fe78:	f7ff fa5e 	bl	800f338 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fe7c:	e002      	b.n	800fe84 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800fe7e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fe80:	f7f6 f996 	bl	80061b0 <HAL_UART_RxCpltCallback>
}
 800fe84:	bf00      	nop
 800fe86:	3770      	adds	r7, #112	; 0x70
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}

0800fe8c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b084      	sub	sp, #16
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe98:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	2201      	movs	r2, #1
 800fe9e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d109      	bne.n	800febc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800feae:	085b      	lsrs	r3, r3, #1
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	4619      	mov	r1, r3
 800feb4:	68f8      	ldr	r0, [r7, #12]
 800feb6:	f7ff fa3f 	bl	800f338 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800feba:	e002      	b.n	800fec2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800febc:	68f8      	ldr	r0, [r7, #12]
 800febe:	f7ff fa27 	bl	800f310 <HAL_UART_RxHalfCpltCallback>
}
 800fec2:	bf00      	nop
 800fec4:	3710      	adds	r7, #16
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}

0800feca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800feca:	b580      	push	{r7, lr}
 800fecc:	b086      	sub	sp, #24
 800fece:	af00      	add	r7, sp, #0
 800fed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fed6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fedc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fee4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	689b      	ldr	r3, [r3, #8]
 800feec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fef0:	2b80      	cmp	r3, #128	; 0x80
 800fef2:	d109      	bne.n	800ff08 <UART_DMAError+0x3e>
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	2b21      	cmp	r3, #33	; 0x21
 800fef8:	d106      	bne.n	800ff08 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	2200      	movs	r2, #0
 800fefe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800ff02:	6978      	ldr	r0, [r7, #20]
 800ff04:	f7ff fea2 	bl	800fc4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	689b      	ldr	r3, [r3, #8]
 800ff0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff12:	2b40      	cmp	r3, #64	; 0x40
 800ff14:	d109      	bne.n	800ff2a <UART_DMAError+0x60>
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	2b22      	cmp	r3, #34	; 0x22
 800ff1a:	d106      	bne.n	800ff2a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ff24:	6978      	ldr	r0, [r7, #20]
 800ff26:	f7ff feb7 	bl	800fc98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff30:	f043 0210 	orr.w	r2, r3, #16
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ff3a:	6978      	ldr	r0, [r7, #20]
 800ff3c:	f7ff f9f2 	bl	800f324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff40:	bf00      	nop
 800ff42:	3718      	adds	r7, #24
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}

0800ff48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b084      	sub	sp, #16
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	2200      	movs	r2, #0
 800ff62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ff66:	68f8      	ldr	r0, [r7, #12]
 800ff68:	f7ff f9dc 	bl	800f324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff6c:	bf00      	nop
 800ff6e:	3710      	adds	r7, #16
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}

0800ff74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b088      	sub	sp, #32
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	e853 3f00 	ldrex	r3, [r3]
 800ff88:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff90:	61fb      	str	r3, [r7, #28]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	461a      	mov	r2, r3
 800ff98:	69fb      	ldr	r3, [r7, #28]
 800ff9a:	61bb      	str	r3, [r7, #24]
 800ff9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff9e:	6979      	ldr	r1, [r7, #20]
 800ffa0:	69ba      	ldr	r2, [r7, #24]
 800ffa2:	e841 2300 	strex	r3, r2, [r1]
 800ffa6:	613b      	str	r3, [r7, #16]
   return(result);
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d1e6      	bne.n	800ff7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2220      	movs	r2, #32
 800ffb2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f7ff f99e 	bl	800f2fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ffc0:	bf00      	nop
 800ffc2:	3720      	adds	r7, #32
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b083      	sub	sp, #12
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ffd0:	bf00      	nop
 800ffd2:	370c      	adds	r7, #12
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr

0800ffdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ffdc:	b084      	sub	sp, #16
 800ffde:	b480      	push	{r7}
 800ffe0:	b083      	sub	sp, #12
 800ffe2:	af00      	add	r7, sp, #0
 800ffe4:	6078      	str	r0, [r7, #4]
 800ffe6:	f107 0014 	add.w	r0, r7, #20
 800ffea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ffee:	2300      	movs	r3, #0
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	370c      	adds	r7, #12
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	b004      	add	sp, #16
 800fffc:	4770      	bx	lr

0800fffe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800fffe:	b480      	push	{r7}
 8010000:	b085      	sub	sp, #20
 8010002:	af00      	add	r7, sp, #0
 8010004:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2200      	movs	r2, #0
 801000a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801000e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8010012:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	b29a      	uxth	r2, r3
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801001e:	2300      	movs	r3, #0
}
 8010020:	4618      	mov	r0, r3
 8010022:	3714      	adds	r7, #20
 8010024:	46bd      	mov	sp, r7
 8010026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002a:	4770      	bx	lr

0801002c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801002c:	b480      	push	{r7}
 801002e:	b085      	sub	sp, #20
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010034:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8010038:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8010040:	b29a      	uxth	r2, r3
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	b29b      	uxth	r3, r3
 8010046:	43db      	mvns	r3, r3
 8010048:	b29b      	uxth	r3, r3
 801004a:	4013      	ands	r3, r2
 801004c:	b29a      	uxth	r2, r3
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010054:	2300      	movs	r3, #0
}
 8010056:	4618      	mov	r0, r3
 8010058:	3714      	adds	r7, #20
 801005a:	46bd      	mov	sp, r7
 801005c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010060:	4770      	bx	lr

08010062 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8010062:	b480      	push	{r7}
 8010064:	b083      	sub	sp, #12
 8010066:	af00      	add	r7, sp, #0
 8010068:	6078      	str	r0, [r7, #4]
 801006a:	460b      	mov	r3, r1
 801006c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 801006e:	2300      	movs	r3, #0
}
 8010070:	4618      	mov	r0, r3
 8010072:	370c      	adds	r7, #12
 8010074:	46bd      	mov	sp, r7
 8010076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007a:	4770      	bx	lr

0801007c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801007c:	b084      	sub	sp, #16
 801007e:	b480      	push	{r7}
 8010080:	b083      	sub	sp, #12
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]
 8010086:	f107 0014 	add.w	r0, r7, #20
 801008a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2201      	movs	r2, #1
 8010092:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2200      	movs	r2, #0
 801009a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2200      	movs	r2, #0
 80100a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2200      	movs	r2, #0
 80100aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80100ae:	2300      	movs	r3, #0
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	370c      	adds	r7, #12
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	b004      	add	sp, #16
 80100bc:	4770      	bx	lr
	...

080100c0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b09d      	sub	sp, #116	; 0x74
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80100ca:	2300      	movs	r3, #0
 80100cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80100d0:	687a      	ldr	r2, [r7, #4]
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	009b      	lsls	r3, r3, #2
 80100d8:	4413      	add	r3, r2
 80100da:	881b      	ldrh	r3, [r3, #0]
 80100dc:	b29b      	uxth	r3, r3
 80100de:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80100e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80100e6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	78db      	ldrb	r3, [r3, #3]
 80100ee:	2b03      	cmp	r3, #3
 80100f0:	d81f      	bhi.n	8010132 <USB_ActivateEndpoint+0x72>
 80100f2:	a201      	add	r2, pc, #4	; (adr r2, 80100f8 <USB_ActivateEndpoint+0x38>)
 80100f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f8:	08010109 	.word	0x08010109
 80100fc:	08010125 	.word	0x08010125
 8010100:	0801013b 	.word	0x0801013b
 8010104:	08010117 	.word	0x08010117
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8010108:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801010c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010110:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010114:	e012      	b.n	801013c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8010116:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801011a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 801011e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010122:	e00b      	b.n	801013c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8010124:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010128:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801012c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010130:	e004      	b.n	801013c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8010132:	2301      	movs	r3, #1
 8010134:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8010138:	e000      	b.n	801013c <USB_ActivateEndpoint+0x7c>
      break;
 801013a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801013c:	687a      	ldr	r2, [r7, #4]
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	009b      	lsls	r3, r3, #2
 8010144:	441a      	add	r2, r3
 8010146:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801014a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801014e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801015a:	b29b      	uxth	r3, r3
 801015c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801015e:	687a      	ldr	r2, [r7, #4]
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	009b      	lsls	r3, r3, #2
 8010166:	4413      	add	r3, r2
 8010168:	881b      	ldrh	r3, [r3, #0]
 801016a:	b29b      	uxth	r3, r3
 801016c:	b21b      	sxth	r3, r3
 801016e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010176:	b21a      	sxth	r2, r3
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	b21b      	sxth	r3, r3
 801017e:	4313      	orrs	r3, r2
 8010180:	b21b      	sxth	r3, r3
 8010182:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8010186:	687a      	ldr	r2, [r7, #4]
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	009b      	lsls	r3, r3, #2
 801018e:	441a      	add	r2, r3
 8010190:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8010194:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010198:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801019c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80101a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	7b1b      	ldrb	r3, [r3, #12]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	f040 8178 	bne.w	80104a2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	785b      	ldrb	r3, [r3, #1]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	f000 8084 	beq.w	80102c4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	61bb      	str	r3, [r7, #24]
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80101c6:	b29b      	uxth	r3, r3
 80101c8:	461a      	mov	r2, r3
 80101ca:	69bb      	ldr	r3, [r7, #24]
 80101cc:	4413      	add	r3, r2
 80101ce:	61bb      	str	r3, [r7, #24]
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	00da      	lsls	r2, r3, #3
 80101d6:	69bb      	ldr	r3, [r7, #24]
 80101d8:	4413      	add	r3, r2
 80101da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80101de:	617b      	str	r3, [r7, #20]
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	88db      	ldrh	r3, [r3, #6]
 80101e4:	085b      	lsrs	r3, r3, #1
 80101e6:	b29b      	uxth	r3, r3
 80101e8:	005b      	lsls	r3, r3, #1
 80101ea:	b29a      	uxth	r2, r3
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	781b      	ldrb	r3, [r3, #0]
 80101f6:	009b      	lsls	r3, r3, #2
 80101f8:	4413      	add	r3, r2
 80101fa:	881b      	ldrh	r3, [r3, #0]
 80101fc:	827b      	strh	r3, [r7, #18]
 80101fe:	8a7b      	ldrh	r3, [r7, #18]
 8010200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010204:	2b00      	cmp	r3, #0
 8010206:	d01b      	beq.n	8010240 <USB_ActivateEndpoint+0x180>
 8010208:	687a      	ldr	r2, [r7, #4]
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	009b      	lsls	r3, r3, #2
 8010210:	4413      	add	r3, r2
 8010212:	881b      	ldrh	r3, [r3, #0]
 8010214:	b29b      	uxth	r3, r3
 8010216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801021a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801021e:	823b      	strh	r3, [r7, #16]
 8010220:	687a      	ldr	r2, [r7, #4]
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	781b      	ldrb	r3, [r3, #0]
 8010226:	009b      	lsls	r3, r3, #2
 8010228:	441a      	add	r2, r3
 801022a:	8a3b      	ldrh	r3, [r7, #16]
 801022c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010238:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801023c:	b29b      	uxth	r3, r3
 801023e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	78db      	ldrb	r3, [r3, #3]
 8010244:	2b01      	cmp	r3, #1
 8010246:	d020      	beq.n	801028a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010248:	687a      	ldr	r2, [r7, #4]
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	009b      	lsls	r3, r3, #2
 8010250:	4413      	add	r3, r2
 8010252:	881b      	ldrh	r3, [r3, #0]
 8010254:	b29b      	uxth	r3, r3
 8010256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801025a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801025e:	81bb      	strh	r3, [r7, #12]
 8010260:	89bb      	ldrh	r3, [r7, #12]
 8010262:	f083 0320 	eor.w	r3, r3, #32
 8010266:	81bb      	strh	r3, [r7, #12]
 8010268:	687a      	ldr	r2, [r7, #4]
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	009b      	lsls	r3, r3, #2
 8010270:	441a      	add	r2, r3
 8010272:	89bb      	ldrh	r3, [r7, #12]
 8010274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801027c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010284:	b29b      	uxth	r3, r3
 8010286:	8013      	strh	r3, [r2, #0]
 8010288:	e2d5      	b.n	8010836 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801028a:	687a      	ldr	r2, [r7, #4]
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	781b      	ldrb	r3, [r3, #0]
 8010290:	009b      	lsls	r3, r3, #2
 8010292:	4413      	add	r3, r2
 8010294:	881b      	ldrh	r3, [r3, #0]
 8010296:	b29b      	uxth	r3, r3
 8010298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801029c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80102a0:	81fb      	strh	r3, [r7, #14]
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	781b      	ldrb	r3, [r3, #0]
 80102a8:	009b      	lsls	r3, r3, #2
 80102aa:	441a      	add	r2, r3
 80102ac:	89fb      	ldrh	r3, [r7, #14]
 80102ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80102ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102be:	b29b      	uxth	r3, r3
 80102c0:	8013      	strh	r3, [r2, #0]
 80102c2:	e2b8      	b.n	8010836 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	633b      	str	r3, [r7, #48]	; 0x30
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80102ce:	b29b      	uxth	r3, r3
 80102d0:	461a      	mov	r2, r3
 80102d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d4:	4413      	add	r3, r2
 80102d6:	633b      	str	r3, [r7, #48]	; 0x30
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	00da      	lsls	r2, r3, #3
 80102de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e0:	4413      	add	r3, r2
 80102e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80102e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	88db      	ldrh	r3, [r3, #6]
 80102ec:	085b      	lsrs	r3, r3, #1
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	005b      	lsls	r3, r3, #1
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010302:	b29b      	uxth	r3, r3
 8010304:	461a      	mov	r2, r3
 8010306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010308:	4413      	add	r3, r2
 801030a:	62bb      	str	r3, [r7, #40]	; 0x28
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	00da      	lsls	r2, r3, #3
 8010312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010314:	4413      	add	r3, r2
 8010316:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801031a:	627b      	str	r3, [r7, #36]	; 0x24
 801031c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801031e:	881b      	ldrh	r3, [r3, #0]
 8010320:	b29b      	uxth	r3, r3
 8010322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010326:	b29a      	uxth	r2, r3
 8010328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032a:	801a      	strh	r2, [r3, #0]
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	691b      	ldr	r3, [r3, #16]
 8010330:	2b3e      	cmp	r3, #62	; 0x3e
 8010332:	d91d      	bls.n	8010370 <USB_ActivateEndpoint+0x2b0>
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	691b      	ldr	r3, [r3, #16]
 8010338:	095b      	lsrs	r3, r3, #5
 801033a:	66bb      	str	r3, [r7, #104]	; 0x68
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	691b      	ldr	r3, [r3, #16]
 8010340:	f003 031f 	and.w	r3, r3, #31
 8010344:	2b00      	cmp	r3, #0
 8010346:	d102      	bne.n	801034e <USB_ActivateEndpoint+0x28e>
 8010348:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801034a:	3b01      	subs	r3, #1
 801034c:	66bb      	str	r3, [r7, #104]	; 0x68
 801034e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010350:	881b      	ldrh	r3, [r3, #0]
 8010352:	b29a      	uxth	r2, r3
 8010354:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010356:	b29b      	uxth	r3, r3
 8010358:	029b      	lsls	r3, r3, #10
 801035a:	b29b      	uxth	r3, r3
 801035c:	4313      	orrs	r3, r2
 801035e:	b29b      	uxth	r3, r3
 8010360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010368:	b29a      	uxth	r2, r3
 801036a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036c:	801a      	strh	r2, [r3, #0]
 801036e:	e026      	b.n	80103be <USB_ActivateEndpoint+0x2fe>
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	691b      	ldr	r3, [r3, #16]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d10a      	bne.n	801038e <USB_ActivateEndpoint+0x2ce>
 8010378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037a:	881b      	ldrh	r3, [r3, #0]
 801037c:	b29b      	uxth	r3, r3
 801037e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010386:	b29a      	uxth	r2, r3
 8010388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038a:	801a      	strh	r2, [r3, #0]
 801038c:	e017      	b.n	80103be <USB_ActivateEndpoint+0x2fe>
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	691b      	ldr	r3, [r3, #16]
 8010392:	085b      	lsrs	r3, r3, #1
 8010394:	66bb      	str	r3, [r7, #104]	; 0x68
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	691b      	ldr	r3, [r3, #16]
 801039a:	f003 0301 	and.w	r3, r3, #1
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d002      	beq.n	80103a8 <USB_ActivateEndpoint+0x2e8>
 80103a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80103a4:	3301      	adds	r3, #1
 80103a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80103a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103aa:	881b      	ldrh	r3, [r3, #0]
 80103ac:	b29a      	uxth	r2, r3
 80103ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	029b      	lsls	r3, r3, #10
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	4313      	orrs	r3, r2
 80103b8:	b29a      	uxth	r2, r3
 80103ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103bc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	781b      	ldrb	r3, [r3, #0]
 80103c4:	009b      	lsls	r3, r3, #2
 80103c6:	4413      	add	r3, r2
 80103c8:	881b      	ldrh	r3, [r3, #0]
 80103ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80103cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d01b      	beq.n	801040e <USB_ActivateEndpoint+0x34e>
 80103d6:	687a      	ldr	r2, [r7, #4]
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	781b      	ldrb	r3, [r3, #0]
 80103dc:	009b      	lsls	r3, r3, #2
 80103de:	4413      	add	r3, r2
 80103e0:	881b      	ldrh	r3, [r3, #0]
 80103e2:	b29b      	uxth	r3, r3
 80103e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80103e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103ec:	843b      	strh	r3, [r7, #32]
 80103ee:	687a      	ldr	r2, [r7, #4]
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	781b      	ldrb	r3, [r3, #0]
 80103f4:	009b      	lsls	r3, r3, #2
 80103f6:	441a      	add	r2, r3
 80103f8:	8c3b      	ldrh	r3, [r7, #32]
 80103fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80103fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010402:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801040a:	b29b      	uxth	r3, r3
 801040c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d124      	bne.n	8010460 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010416:	687a      	ldr	r2, [r7, #4]
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	781b      	ldrb	r3, [r3, #0]
 801041c:	009b      	lsls	r3, r3, #2
 801041e:	4413      	add	r3, r2
 8010420:	881b      	ldrh	r3, [r3, #0]
 8010422:	b29b      	uxth	r3, r3
 8010424:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801042c:	83bb      	strh	r3, [r7, #28]
 801042e:	8bbb      	ldrh	r3, [r7, #28]
 8010430:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010434:	83bb      	strh	r3, [r7, #28]
 8010436:	8bbb      	ldrh	r3, [r7, #28]
 8010438:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801043c:	83bb      	strh	r3, [r7, #28]
 801043e:	687a      	ldr	r2, [r7, #4]
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	009b      	lsls	r3, r3, #2
 8010446:	441a      	add	r2, r3
 8010448:	8bbb      	ldrh	r3, [r7, #28]
 801044a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801044e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801045a:	b29b      	uxth	r3, r3
 801045c:	8013      	strh	r3, [r2, #0]
 801045e:	e1ea      	b.n	8010836 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8010460:	687a      	ldr	r2, [r7, #4]
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	009b      	lsls	r3, r3, #2
 8010468:	4413      	add	r3, r2
 801046a:	881b      	ldrh	r3, [r3, #0]
 801046c:	b29b      	uxth	r3, r3
 801046e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010476:	83fb      	strh	r3, [r7, #30]
 8010478:	8bfb      	ldrh	r3, [r7, #30]
 801047a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801047e:	83fb      	strh	r3, [r7, #30]
 8010480:	687a      	ldr	r2, [r7, #4]
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	781b      	ldrb	r3, [r3, #0]
 8010486:	009b      	lsls	r3, r3, #2
 8010488:	441a      	add	r2, r3
 801048a:	8bfb      	ldrh	r3, [r7, #30]
 801048c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801049c:	b29b      	uxth	r3, r3
 801049e:	8013      	strh	r3, [r2, #0]
 80104a0:	e1c9      	b.n	8010836 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	78db      	ldrb	r3, [r3, #3]
 80104a6:	2b02      	cmp	r3, #2
 80104a8:	d11e      	bne.n	80104e8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80104aa:	687a      	ldr	r2, [r7, #4]
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	781b      	ldrb	r3, [r3, #0]
 80104b0:	009b      	lsls	r3, r3, #2
 80104b2:	4413      	add	r3, r2
 80104b4:	881b      	ldrh	r3, [r3, #0]
 80104b6:	b29b      	uxth	r3, r3
 80104b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104c0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80104c4:	687a      	ldr	r2, [r7, #4]
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	781b      	ldrb	r3, [r3, #0]
 80104ca:	009b      	lsls	r3, r3, #2
 80104cc:	441a      	add	r2, r3
 80104ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80104d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80104da:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80104de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	8013      	strh	r3, [r2, #0]
 80104e6:	e01d      	b.n	8010524 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80104e8:	687a      	ldr	r2, [r7, #4]
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	781b      	ldrb	r3, [r3, #0]
 80104ee:	009b      	lsls	r3, r3, #2
 80104f0:	4413      	add	r3, r2
 80104f2:	881b      	ldrh	r3, [r3, #0]
 80104f4:	b29b      	uxth	r3, r3
 80104f6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80104fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104fe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8010502:	687a      	ldr	r2, [r7, #4]
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	781b      	ldrb	r3, [r3, #0]
 8010508:	009b      	lsls	r3, r3, #2
 801050a:	441a      	add	r2, r3
 801050c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801051c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010520:	b29b      	uxth	r3, r3
 8010522:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801052e:	b29b      	uxth	r3, r3
 8010530:	461a      	mov	r2, r3
 8010532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010534:	4413      	add	r3, r2
 8010536:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	00da      	lsls	r2, r3, #3
 801053e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010540:	4413      	add	r3, r2
 8010542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010546:	65bb      	str	r3, [r7, #88]	; 0x58
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	891b      	ldrh	r3, [r3, #8]
 801054c:	085b      	lsrs	r3, r3, #1
 801054e:	b29b      	uxth	r3, r3
 8010550:	005b      	lsls	r3, r3, #1
 8010552:	b29a      	uxth	r2, r3
 8010554:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010556:	801a      	strh	r2, [r3, #0]
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	657b      	str	r3, [r7, #84]	; 0x54
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010562:	b29b      	uxth	r3, r3
 8010564:	461a      	mov	r2, r3
 8010566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010568:	4413      	add	r3, r2
 801056a:	657b      	str	r3, [r7, #84]	; 0x54
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	00da      	lsls	r2, r3, #3
 8010572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010574:	4413      	add	r3, r2
 8010576:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801057a:	653b      	str	r3, [r7, #80]	; 0x50
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	895b      	ldrh	r3, [r3, #10]
 8010580:	085b      	lsrs	r3, r3, #1
 8010582:	b29b      	uxth	r3, r3
 8010584:	005b      	lsls	r3, r3, #1
 8010586:	b29a      	uxth	r2, r3
 8010588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801058a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	785b      	ldrb	r3, [r3, #1]
 8010590:	2b00      	cmp	r3, #0
 8010592:	f040 8093 	bne.w	80106bc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010596:	687a      	ldr	r2, [r7, #4]
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	009b      	lsls	r3, r3, #2
 801059e:	4413      	add	r3, r2
 80105a0:	881b      	ldrh	r3, [r3, #0]
 80105a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80105a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80105aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d01b      	beq.n	80105ea <USB_ActivateEndpoint+0x52a>
 80105b2:	687a      	ldr	r2, [r7, #4]
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	009b      	lsls	r3, r3, #2
 80105ba:	4413      	add	r3, r2
 80105bc:	881b      	ldrh	r3, [r3, #0]
 80105be:	b29b      	uxth	r3, r3
 80105c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80105c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80105ca:	687a      	ldr	r2, [r7, #4]
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	009b      	lsls	r3, r3, #2
 80105d2:	441a      	add	r2, r3
 80105d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80105d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80105da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80105de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80105e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105e6:	b29b      	uxth	r3, r3
 80105e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80105ea:	687a      	ldr	r2, [r7, #4]
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	009b      	lsls	r3, r3, #2
 80105f2:	4413      	add	r3, r2
 80105f4:	881b      	ldrh	r3, [r3, #0]
 80105f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80105f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80105fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d01b      	beq.n	801063a <USB_ActivateEndpoint+0x57a>
 8010602:	687a      	ldr	r2, [r7, #4]
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	781b      	ldrb	r3, [r3, #0]
 8010608:	009b      	lsls	r3, r3, #2
 801060a:	4413      	add	r3, r2
 801060c:	881b      	ldrh	r3, [r3, #0]
 801060e:	b29b      	uxth	r3, r3
 8010610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010618:	877b      	strh	r3, [r7, #58]	; 0x3a
 801061a:	687a      	ldr	r2, [r7, #4]
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	009b      	lsls	r3, r3, #2
 8010622:	441a      	add	r2, r3
 8010624:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801062a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801062e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010632:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010636:	b29b      	uxth	r3, r3
 8010638:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801063a:	687a      	ldr	r2, [r7, #4]
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	781b      	ldrb	r3, [r3, #0]
 8010640:	009b      	lsls	r3, r3, #2
 8010642:	4413      	add	r3, r2
 8010644:	881b      	ldrh	r3, [r3, #0]
 8010646:	b29b      	uxth	r3, r3
 8010648:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801064c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010650:	873b      	strh	r3, [r7, #56]	; 0x38
 8010652:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010654:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010658:	873b      	strh	r3, [r7, #56]	; 0x38
 801065a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801065c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010660:	873b      	strh	r3, [r7, #56]	; 0x38
 8010662:	687a      	ldr	r2, [r7, #4]
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	009b      	lsls	r3, r3, #2
 801066a:	441a      	add	r2, r3
 801066c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801066e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801067a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801067e:	b29b      	uxth	r3, r3
 8010680:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010682:	687a      	ldr	r2, [r7, #4]
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	009b      	lsls	r3, r3, #2
 801068a:	4413      	add	r3, r2
 801068c:	881b      	ldrh	r3, [r3, #0]
 801068e:	b29b      	uxth	r3, r3
 8010690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010698:	86fb      	strh	r3, [r7, #54]	; 0x36
 801069a:	687a      	ldr	r2, [r7, #4]
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	009b      	lsls	r3, r3, #2
 80106a2:	441a      	add	r2, r3
 80106a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80106a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80106aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80106ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80106b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106b6:	b29b      	uxth	r3, r3
 80106b8:	8013      	strh	r3, [r2, #0]
 80106ba:	e0bc      	b.n	8010836 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80106bc:	687a      	ldr	r2, [r7, #4]
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	009b      	lsls	r3, r3, #2
 80106c4:	4413      	add	r3, r2
 80106c6:	881b      	ldrh	r3, [r3, #0]
 80106c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80106cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80106d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d01d      	beq.n	8010714 <USB_ActivateEndpoint+0x654>
 80106d8:	687a      	ldr	r2, [r7, #4]
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	009b      	lsls	r3, r3, #2
 80106e0:	4413      	add	r3, r2
 80106e2:	881b      	ldrh	r3, [r3, #0]
 80106e4:	b29b      	uxth	r3, r3
 80106e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80106ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106ee:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80106f2:	687a      	ldr	r2, [r7, #4]
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	009b      	lsls	r3, r3, #2
 80106fa:	441a      	add	r2, r3
 80106fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8010700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010710:	b29b      	uxth	r3, r3
 8010712:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010714:	687a      	ldr	r2, [r7, #4]
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	781b      	ldrb	r3, [r3, #0]
 801071a:	009b      	lsls	r3, r3, #2
 801071c:	4413      	add	r3, r2
 801071e:	881b      	ldrh	r3, [r3, #0]
 8010720:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8010724:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8010728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801072c:	2b00      	cmp	r3, #0
 801072e:	d01d      	beq.n	801076c <USB_ActivateEndpoint+0x6ac>
 8010730:	687a      	ldr	r2, [r7, #4]
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	781b      	ldrb	r3, [r3, #0]
 8010736:	009b      	lsls	r3, r3, #2
 8010738:	4413      	add	r3, r2
 801073a:	881b      	ldrh	r3, [r3, #0]
 801073c:	b29b      	uxth	r3, r3
 801073e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010746:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801074a:	687a      	ldr	r2, [r7, #4]
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	781b      	ldrb	r3, [r3, #0]
 8010750:	009b      	lsls	r3, r3, #2
 8010752:	441a      	add	r2, r3
 8010754:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8010758:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801075c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010764:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010768:	b29b      	uxth	r3, r3
 801076a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	78db      	ldrb	r3, [r3, #3]
 8010770:	2b01      	cmp	r3, #1
 8010772:	d024      	beq.n	80107be <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010774:	687a      	ldr	r2, [r7, #4]
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	009b      	lsls	r3, r3, #2
 801077c:	4413      	add	r3, r2
 801077e:	881b      	ldrh	r3, [r3, #0]
 8010780:	b29b      	uxth	r3, r3
 8010782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801078a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801078e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010792:	f083 0320 	eor.w	r3, r3, #32
 8010796:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801079a:	687a      	ldr	r2, [r7, #4]
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	781b      	ldrb	r3, [r3, #0]
 80107a0:	009b      	lsls	r3, r3, #2
 80107a2:	441a      	add	r2, r3
 80107a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80107a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80107ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80107b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80107b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	8013      	strh	r3, [r2, #0]
 80107bc:	e01d      	b.n	80107fa <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80107be:	687a      	ldr	r2, [r7, #4]
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	781b      	ldrb	r3, [r3, #0]
 80107c4:	009b      	lsls	r3, r3, #2
 80107c6:	4413      	add	r3, r2
 80107c8:	881b      	ldrh	r3, [r3, #0]
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80107d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80107d8:	687a      	ldr	r2, [r7, #4]
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	781b      	ldrb	r3, [r3, #0]
 80107de:	009b      	lsls	r3, r3, #2
 80107e0:	441a      	add	r2, r3
 80107e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80107e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80107ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80107ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80107f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80107fa:	687a      	ldr	r2, [r7, #4]
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	009b      	lsls	r3, r3, #2
 8010802:	4413      	add	r3, r2
 8010804:	881b      	ldrh	r3, [r3, #0]
 8010806:	b29b      	uxth	r3, r3
 8010808:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801080c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010810:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010814:	687a      	ldr	r2, [r7, #4]
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	781b      	ldrb	r3, [r3, #0]
 801081a:	009b      	lsls	r3, r3, #2
 801081c:	441a      	add	r2, r3
 801081e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801082a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801082e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010832:	b29b      	uxth	r3, r3
 8010834:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8010836:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 801083a:	4618      	mov	r0, r3
 801083c:	3774      	adds	r7, #116	; 0x74
 801083e:	46bd      	mov	sp, r7
 8010840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010844:	4770      	bx	lr
 8010846:	bf00      	nop

08010848 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010848:	b480      	push	{r7}
 801084a:	b08d      	sub	sp, #52	; 0x34
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
 8010850:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	7b1b      	ldrb	r3, [r3, #12]
 8010856:	2b00      	cmp	r3, #0
 8010858:	f040 808e 	bne.w	8010978 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	785b      	ldrb	r3, [r3, #1]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d044      	beq.n	80108ee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010864:	687a      	ldr	r2, [r7, #4]
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	781b      	ldrb	r3, [r3, #0]
 801086a:	009b      	lsls	r3, r3, #2
 801086c:	4413      	add	r3, r2
 801086e:	881b      	ldrh	r3, [r3, #0]
 8010870:	81bb      	strh	r3, [r7, #12]
 8010872:	89bb      	ldrh	r3, [r7, #12]
 8010874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010878:	2b00      	cmp	r3, #0
 801087a:	d01b      	beq.n	80108b4 <USB_DeactivateEndpoint+0x6c>
 801087c:	687a      	ldr	r2, [r7, #4]
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	781b      	ldrb	r3, [r3, #0]
 8010882:	009b      	lsls	r3, r3, #2
 8010884:	4413      	add	r3, r2
 8010886:	881b      	ldrh	r3, [r3, #0]
 8010888:	b29b      	uxth	r3, r3
 801088a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801088e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010892:	817b      	strh	r3, [r7, #10]
 8010894:	687a      	ldr	r2, [r7, #4]
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	781b      	ldrb	r3, [r3, #0]
 801089a:	009b      	lsls	r3, r3, #2
 801089c:	441a      	add	r2, r3
 801089e:	897b      	ldrh	r3, [r7, #10]
 80108a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80108a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80108a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80108ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80108b0:	b29b      	uxth	r3, r3
 80108b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80108b4:	687a      	ldr	r2, [r7, #4]
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	009b      	lsls	r3, r3, #2
 80108bc:	4413      	add	r3, r2
 80108be:	881b      	ldrh	r3, [r3, #0]
 80108c0:	b29b      	uxth	r3, r3
 80108c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80108c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108ca:	813b      	strh	r3, [r7, #8]
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	781b      	ldrb	r3, [r3, #0]
 80108d2:	009b      	lsls	r3, r3, #2
 80108d4:	441a      	add	r2, r3
 80108d6:	893b      	ldrh	r3, [r7, #8]
 80108d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80108dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80108e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80108e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108e8:	b29b      	uxth	r3, r3
 80108ea:	8013      	strh	r3, [r2, #0]
 80108ec:	e192      	b.n	8010c14 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80108ee:	687a      	ldr	r2, [r7, #4]
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	781b      	ldrb	r3, [r3, #0]
 80108f4:	009b      	lsls	r3, r3, #2
 80108f6:	4413      	add	r3, r2
 80108f8:	881b      	ldrh	r3, [r3, #0]
 80108fa:	827b      	strh	r3, [r7, #18]
 80108fc:	8a7b      	ldrh	r3, [r7, #18]
 80108fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010902:	2b00      	cmp	r3, #0
 8010904:	d01b      	beq.n	801093e <USB_DeactivateEndpoint+0xf6>
 8010906:	687a      	ldr	r2, [r7, #4]
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	781b      	ldrb	r3, [r3, #0]
 801090c:	009b      	lsls	r3, r3, #2
 801090e:	4413      	add	r3, r2
 8010910:	881b      	ldrh	r3, [r3, #0]
 8010912:	b29b      	uxth	r3, r3
 8010914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801091c:	823b      	strh	r3, [r7, #16]
 801091e:	687a      	ldr	r2, [r7, #4]
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	781b      	ldrb	r3, [r3, #0]
 8010924:	009b      	lsls	r3, r3, #2
 8010926:	441a      	add	r2, r3
 8010928:	8a3b      	ldrh	r3, [r7, #16]
 801092a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801092e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010932:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801093a:	b29b      	uxth	r3, r3
 801093c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801093e:	687a      	ldr	r2, [r7, #4]
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	781b      	ldrb	r3, [r3, #0]
 8010944:	009b      	lsls	r3, r3, #2
 8010946:	4413      	add	r3, r2
 8010948:	881b      	ldrh	r3, [r3, #0]
 801094a:	b29b      	uxth	r3, r3
 801094c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010954:	81fb      	strh	r3, [r7, #14]
 8010956:	687a      	ldr	r2, [r7, #4]
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	441a      	add	r2, r3
 8010960:	89fb      	ldrh	r3, [r7, #14]
 8010962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801096a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801096e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010972:	b29b      	uxth	r3, r3
 8010974:	8013      	strh	r3, [r2, #0]
 8010976:	e14d      	b.n	8010c14 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	785b      	ldrb	r3, [r3, #1]
 801097c:	2b00      	cmp	r3, #0
 801097e:	f040 80a5 	bne.w	8010acc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010982:	687a      	ldr	r2, [r7, #4]
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	781b      	ldrb	r3, [r3, #0]
 8010988:	009b      	lsls	r3, r3, #2
 801098a:	4413      	add	r3, r2
 801098c:	881b      	ldrh	r3, [r3, #0]
 801098e:	843b      	strh	r3, [r7, #32]
 8010990:	8c3b      	ldrh	r3, [r7, #32]
 8010992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010996:	2b00      	cmp	r3, #0
 8010998:	d01b      	beq.n	80109d2 <USB_DeactivateEndpoint+0x18a>
 801099a:	687a      	ldr	r2, [r7, #4]
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	781b      	ldrb	r3, [r3, #0]
 80109a0:	009b      	lsls	r3, r3, #2
 80109a2:	4413      	add	r3, r2
 80109a4:	881b      	ldrh	r3, [r3, #0]
 80109a6:	b29b      	uxth	r3, r3
 80109a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80109ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109b0:	83fb      	strh	r3, [r7, #30]
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	009b      	lsls	r3, r3, #2
 80109ba:	441a      	add	r2, r3
 80109bc:	8bfb      	ldrh	r3, [r7, #30]
 80109be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80109c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80109c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80109ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109ce:	b29b      	uxth	r3, r3
 80109d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80109d2:	687a      	ldr	r2, [r7, #4]
 80109d4:	683b      	ldr	r3, [r7, #0]
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	009b      	lsls	r3, r3, #2
 80109da:	4413      	add	r3, r2
 80109dc:	881b      	ldrh	r3, [r3, #0]
 80109de:	83bb      	strh	r3, [r7, #28]
 80109e0:	8bbb      	ldrh	r3, [r7, #28]
 80109e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d01b      	beq.n	8010a22 <USB_DeactivateEndpoint+0x1da>
 80109ea:	687a      	ldr	r2, [r7, #4]
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	009b      	lsls	r3, r3, #2
 80109f2:	4413      	add	r3, r2
 80109f4:	881b      	ldrh	r3, [r3, #0]
 80109f6:	b29b      	uxth	r3, r3
 80109f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80109fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a00:	837b      	strh	r3, [r7, #26]
 8010a02:	687a      	ldr	r2, [r7, #4]
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	781b      	ldrb	r3, [r3, #0]
 8010a08:	009b      	lsls	r3, r3, #2
 8010a0a:	441a      	add	r2, r3
 8010a0c:	8b7b      	ldrh	r3, [r7, #26]
 8010a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010a1e:	b29b      	uxth	r3, r3
 8010a20:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8010a22:	687a      	ldr	r2, [r7, #4]
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	009b      	lsls	r3, r3, #2
 8010a2a:	4413      	add	r3, r2
 8010a2c:	881b      	ldrh	r3, [r3, #0]
 8010a2e:	b29b      	uxth	r3, r3
 8010a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a38:	833b      	strh	r3, [r7, #24]
 8010a3a:	687a      	ldr	r2, [r7, #4]
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	781b      	ldrb	r3, [r3, #0]
 8010a40:	009b      	lsls	r3, r3, #2
 8010a42:	441a      	add	r2, r3
 8010a44:	8b3b      	ldrh	r3, [r7, #24]
 8010a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010a56:	b29b      	uxth	r3, r3
 8010a58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010a5a:	687a      	ldr	r2, [r7, #4]
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	781b      	ldrb	r3, [r3, #0]
 8010a60:	009b      	lsls	r3, r3, #2
 8010a62:	4413      	add	r3, r2
 8010a64:	881b      	ldrh	r3, [r3, #0]
 8010a66:	b29b      	uxth	r3, r3
 8010a68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a70:	82fb      	strh	r3, [r7, #22]
 8010a72:	687a      	ldr	r2, [r7, #4]
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	009b      	lsls	r3, r3, #2
 8010a7a:	441a      	add	r2, r3
 8010a7c:	8afb      	ldrh	r3, [r7, #22]
 8010a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a8e:	b29b      	uxth	r3, r3
 8010a90:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010a92:	687a      	ldr	r2, [r7, #4]
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	781b      	ldrb	r3, [r3, #0]
 8010a98:	009b      	lsls	r3, r3, #2
 8010a9a:	4413      	add	r3, r2
 8010a9c:	881b      	ldrh	r3, [r3, #0]
 8010a9e:	b29b      	uxth	r3, r3
 8010aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010aa8:	82bb      	strh	r3, [r7, #20]
 8010aaa:	687a      	ldr	r2, [r7, #4]
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	781b      	ldrb	r3, [r3, #0]
 8010ab0:	009b      	lsls	r3, r3, #2
 8010ab2:	441a      	add	r2, r3
 8010ab4:	8abb      	ldrh	r3, [r7, #20]
 8010ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ac6:	b29b      	uxth	r3, r3
 8010ac8:	8013      	strh	r3, [r2, #0]
 8010aca:	e0a3      	b.n	8010c14 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010acc:	687a      	ldr	r2, [r7, #4]
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	009b      	lsls	r3, r3, #2
 8010ad4:	4413      	add	r3, r2
 8010ad6:	881b      	ldrh	r3, [r3, #0]
 8010ad8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010ada:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d01b      	beq.n	8010b1c <USB_DeactivateEndpoint+0x2d4>
 8010ae4:	687a      	ldr	r2, [r7, #4]
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	781b      	ldrb	r3, [r3, #0]
 8010aea:	009b      	lsls	r3, r3, #2
 8010aec:	4413      	add	r3, r2
 8010aee:	881b      	ldrh	r3, [r3, #0]
 8010af0:	b29b      	uxth	r3, r3
 8010af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010afa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010afc:	687a      	ldr	r2, [r7, #4]
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	009b      	lsls	r3, r3, #2
 8010b04:	441a      	add	r2, r3
 8010b06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b18:	b29b      	uxth	r3, r3
 8010b1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010b1c:	687a      	ldr	r2, [r7, #4]
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	781b      	ldrb	r3, [r3, #0]
 8010b22:	009b      	lsls	r3, r3, #2
 8010b24:	4413      	add	r3, r2
 8010b26:	881b      	ldrh	r3, [r3, #0]
 8010b28:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010b2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d01b      	beq.n	8010b6c <USB_DeactivateEndpoint+0x324>
 8010b34:	687a      	ldr	r2, [r7, #4]
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	781b      	ldrb	r3, [r3, #0]
 8010b3a:	009b      	lsls	r3, r3, #2
 8010b3c:	4413      	add	r3, r2
 8010b3e:	881b      	ldrh	r3, [r3, #0]
 8010b40:	b29b      	uxth	r3, r3
 8010b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b4a:	853b      	strh	r3, [r7, #40]	; 0x28
 8010b4c:	687a      	ldr	r2, [r7, #4]
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	009b      	lsls	r3, r3, #2
 8010b54:	441a      	add	r2, r3
 8010b56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8010b6c:	687a      	ldr	r2, [r7, #4]
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	781b      	ldrb	r3, [r3, #0]
 8010b72:	009b      	lsls	r3, r3, #2
 8010b74:	4413      	add	r3, r2
 8010b76:	881b      	ldrh	r3, [r3, #0]
 8010b78:	b29b      	uxth	r3, r3
 8010b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b82:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010b84:	687a      	ldr	r2, [r7, #4]
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	781b      	ldrb	r3, [r3, #0]
 8010b8a:	009b      	lsls	r3, r3, #2
 8010b8c:	441a      	add	r2, r3
 8010b8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ba0:	b29b      	uxth	r3, r3
 8010ba2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010ba4:	687a      	ldr	r2, [r7, #4]
 8010ba6:	683b      	ldr	r3, [r7, #0]
 8010ba8:	781b      	ldrb	r3, [r3, #0]
 8010baa:	009b      	lsls	r3, r3, #2
 8010bac:	4413      	add	r3, r2
 8010bae:	881b      	ldrh	r3, [r3, #0]
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010bba:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010bbc:	687a      	ldr	r2, [r7, #4]
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	009b      	lsls	r3, r3, #2
 8010bc4:	441a      	add	r2, r3
 8010bc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bd8:	b29b      	uxth	r3, r3
 8010bda:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010bdc:	687a      	ldr	r2, [r7, #4]
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	781b      	ldrb	r3, [r3, #0]
 8010be2:	009b      	lsls	r3, r3, #2
 8010be4:	4413      	add	r3, r2
 8010be6:	881b      	ldrh	r3, [r3, #0]
 8010be8:	b29b      	uxth	r3, r3
 8010bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010bf2:	847b      	strh	r3, [r7, #34]	; 0x22
 8010bf4:	687a      	ldr	r2, [r7, #4]
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	441a      	add	r2, r3
 8010bfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8010c14:	2300      	movs	r3, #0
}
 8010c16:	4618      	mov	r0, r3
 8010c18:	3734      	adds	r7, #52	; 0x34
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c20:	4770      	bx	lr

08010c22 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010c22:	b580      	push	{r7, lr}
 8010c24:	b0c2      	sub	sp, #264	; 0x108
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c30:	6018      	str	r0, [r3, #0]
 8010c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c3a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	785b      	ldrb	r3, [r3, #1]
 8010c48:	2b01      	cmp	r3, #1
 8010c4a:	f040 86b7 	bne.w	80119bc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8010c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	699a      	ldr	r2, [r3, #24]
 8010c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	691b      	ldr	r3, [r3, #16]
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d908      	bls.n	8010c7c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8010c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	691b      	ldr	r3, [r3, #16]
 8010c76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8010c7a:	e007      	b.n	8010c8c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8010c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	699b      	ldr	r3, [r3, #24]
 8010c88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	7b1b      	ldrb	r3, [r3, #12]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d13a      	bne.n	8010d12 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	6959      	ldr	r1, [r3, #20]
 8010ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	88da      	ldrh	r2, [r3, #6]
 8010cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cb8:	b29b      	uxth	r3, r3
 8010cba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010cbe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010cc2:	6800      	ldr	r0, [r0, #0]
 8010cc4:	f001 fcb9 	bl	801263a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ccc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	613b      	str	r3, [r7, #16]
 8010cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	461a      	mov	r2, r3
 8010ce6:	693b      	ldr	r3, [r7, #16]
 8010ce8:	4413      	add	r3, r2
 8010cea:	613b      	str	r3, [r7, #16]
 8010cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	781b      	ldrb	r3, [r3, #0]
 8010cf8:	00da      	lsls	r2, r3, #3
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	4413      	add	r3, r2
 8010cfe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010d02:	60fb      	str	r3, [r7, #12]
 8010d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d08:	b29a      	uxth	r2, r3
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	801a      	strh	r2, [r3, #0]
 8010d0e:	f000 be1f 	b.w	8011950 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8010d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	78db      	ldrb	r3, [r3, #3]
 8010d1e:	2b02      	cmp	r3, #2
 8010d20:	f040 8462 	bne.w	80115e8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8010d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	6a1a      	ldr	r2, [r3, #32]
 8010d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	691b      	ldr	r3, [r3, #16]
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	f240 83df 	bls.w	8011500 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d4a:	681a      	ldr	r2, [r3, #0]
 8010d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	781b      	ldrb	r3, [r3, #0]
 8010d58:	009b      	lsls	r3, r3, #2
 8010d5a:	4413      	add	r3, r2
 8010d5c:	881b      	ldrh	r3, [r3, #0]
 8010d5e:	b29b      	uxth	r3, r3
 8010d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d68:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8010d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d74:	681a      	ldr	r2, [r3, #0]
 8010d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	781b      	ldrb	r3, [r3, #0]
 8010d82:	009b      	lsls	r3, r3, #2
 8010d84:	441a      	add	r2, r3
 8010d86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d92:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8010d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d9a:	b29b      	uxth	r3, r3
 8010d9c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8010d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	6a1a      	ldr	r2, [r3, #32]
 8010daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010dae:	1ad2      	subs	r2, r2, r3
 8010db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010dc4:	681a      	ldr	r2, [r3, #0]
 8010dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	781b      	ldrb	r3, [r3, #0]
 8010dd2:	009b      	lsls	r3, r3, #2
 8010dd4:	4413      	add	r3, r2
 8010dd6:	881b      	ldrh	r3, [r3, #0]
 8010dd8:	b29b      	uxth	r3, r3
 8010dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	f000 81c7 	beq.w	8011172 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010de8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	633b      	str	r3, [r7, #48]	; 0x30
 8010df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	785b      	ldrb	r3, [r3, #1]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d177      	bne.n	8010ef0 <USB_EPStartXfer+0x2ce>
 8010e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e1a:	b29b      	uxth	r3, r3
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e20:	4413      	add	r3, r2
 8010e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	00da      	lsls	r2, r3, #3
 8010e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e34:	4413      	add	r3, r2
 8010e36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8010e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3e:	881b      	ldrh	r3, [r3, #0]
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010e46:	b29a      	uxth	r2, r3
 8010e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e4a:	801a      	strh	r2, [r3, #0]
 8010e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e50:	2b3e      	cmp	r3, #62	; 0x3e
 8010e52:	d921      	bls.n	8010e98 <USB_EPStartXfer+0x276>
 8010e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e58:	095b      	lsrs	r3, r3, #5
 8010e5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e62:	f003 031f 	and.w	r3, r3, #31
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d104      	bne.n	8010e74 <USB_EPStartXfer+0x252>
 8010e6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010e6e:	3b01      	subs	r3, #1
 8010e70:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e76:	881b      	ldrh	r3, [r3, #0]
 8010e78:	b29a      	uxth	r2, r3
 8010e7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010e7e:	b29b      	uxth	r3, r3
 8010e80:	029b      	lsls	r3, r3, #10
 8010e82:	b29b      	uxth	r3, r3
 8010e84:	4313      	orrs	r3, r2
 8010e86:	b29b      	uxth	r3, r3
 8010e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e90:	b29a      	uxth	r2, r3
 8010e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e94:	801a      	strh	r2, [r3, #0]
 8010e96:	e050      	b.n	8010f3a <USB_EPStartXfer+0x318>
 8010e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d10a      	bne.n	8010eb6 <USB_EPStartXfer+0x294>
 8010ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea2:	881b      	ldrh	r3, [r3, #0]
 8010ea4:	b29b      	uxth	r3, r3
 8010ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010eae:	b29a      	uxth	r2, r3
 8010eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb2:	801a      	strh	r2, [r3, #0]
 8010eb4:	e041      	b.n	8010f3a <USB_EPStartXfer+0x318>
 8010eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010eba:	085b      	lsrs	r3, r3, #1
 8010ebc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ec4:	f003 0301 	and.w	r3, r3, #1
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d004      	beq.n	8010ed6 <USB_EPStartXfer+0x2b4>
 8010ecc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed8:	881b      	ldrh	r3, [r3, #0]
 8010eda:	b29a      	uxth	r2, r3
 8010edc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	029b      	lsls	r3, r3, #10
 8010ee4:	b29b      	uxth	r3, r3
 8010ee6:	4313      	orrs	r3, r2
 8010ee8:	b29a      	uxth	r2, r3
 8010eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eec:	801a      	strh	r2, [r3, #0]
 8010eee:	e024      	b.n	8010f3a <USB_EPStartXfer+0x318>
 8010ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	785b      	ldrb	r3, [r3, #1]
 8010efc:	2b01      	cmp	r3, #1
 8010efe:	d11c      	bne.n	8010f3a <USB_EPStartXfer+0x318>
 8010f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	461a      	mov	r2, r3
 8010f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f14:	4413      	add	r3, r2
 8010f16:	633b      	str	r3, [r7, #48]	; 0x30
 8010f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	781b      	ldrb	r3, [r3, #0]
 8010f24:	00da      	lsls	r2, r3, #3
 8010f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f28:	4413      	add	r3, r2
 8010f2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f34:	b29a      	uxth	r2, r3
 8010f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	895b      	ldrh	r3, [r3, #10]
 8010f46:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	6959      	ldr	r1, [r3, #20]
 8010f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f5a:	b29b      	uxth	r3, r3
 8010f5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010f60:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010f64:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010f68:	6800      	ldr	r0, [r0, #0]
 8010f6a:	f001 fb66 	bl	801263a <USB_WritePMA>
            ep->xfer_buff += len;
 8010f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	695a      	ldr	r2, [r3, #20]
 8010f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f7e:	441a      	add	r2, r3
 8010f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	6a1a      	ldr	r2, [r3, #32]
 8010f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	691b      	ldr	r3, [r3, #16]
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	d90f      	bls.n	8010fc8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8010fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	6a1a      	ldr	r2, [r3, #32]
 8010fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fb8:	1ad2      	subs	r2, r2, r3
 8010fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	621a      	str	r2, [r3, #32]
 8010fc6:	e00e      	b.n	8010fe6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8010fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	6a1b      	ldr	r3, [r3, #32]
 8010fd4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	785b      	ldrb	r3, [r3, #1]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d177      	bne.n	80110e6 <USB_EPStartXfer+0x4c4>
 8010ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	61bb      	str	r3, [r7, #24]
 8011002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011010:	b29b      	uxth	r3, r3
 8011012:	461a      	mov	r2, r3
 8011014:	69bb      	ldr	r3, [r7, #24]
 8011016:	4413      	add	r3, r2
 8011018:	61bb      	str	r3, [r7, #24]
 801101a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801101e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	00da      	lsls	r2, r3, #3
 8011028:	69bb      	ldr	r3, [r7, #24]
 801102a:	4413      	add	r3, r2
 801102c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011030:	617b      	str	r3, [r7, #20]
 8011032:	697b      	ldr	r3, [r7, #20]
 8011034:	881b      	ldrh	r3, [r3, #0]
 8011036:	b29b      	uxth	r3, r3
 8011038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801103c:	b29a      	uxth	r2, r3
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	801a      	strh	r2, [r3, #0]
 8011042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011046:	2b3e      	cmp	r3, #62	; 0x3e
 8011048:	d921      	bls.n	801108e <USB_EPStartXfer+0x46c>
 801104a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801104e:	095b      	lsrs	r3, r3, #5
 8011050:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011058:	f003 031f 	and.w	r3, r3, #31
 801105c:	2b00      	cmp	r3, #0
 801105e:	d104      	bne.n	801106a <USB_EPStartXfer+0x448>
 8011060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011064:	3b01      	subs	r3, #1
 8011066:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801106a:	697b      	ldr	r3, [r7, #20]
 801106c:	881b      	ldrh	r3, [r3, #0]
 801106e:	b29a      	uxth	r2, r3
 8011070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011074:	b29b      	uxth	r3, r3
 8011076:	029b      	lsls	r3, r3, #10
 8011078:	b29b      	uxth	r3, r3
 801107a:	4313      	orrs	r3, r2
 801107c:	b29b      	uxth	r3, r3
 801107e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011086:	b29a      	uxth	r2, r3
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	801a      	strh	r2, [r3, #0]
 801108c:	e056      	b.n	801113c <USB_EPStartXfer+0x51a>
 801108e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011092:	2b00      	cmp	r3, #0
 8011094:	d10a      	bne.n	80110ac <USB_EPStartXfer+0x48a>
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	881b      	ldrh	r3, [r3, #0]
 801109a:	b29b      	uxth	r3, r3
 801109c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80110a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80110a4:	b29a      	uxth	r2, r3
 80110a6:	697b      	ldr	r3, [r7, #20]
 80110a8:	801a      	strh	r2, [r3, #0]
 80110aa:	e047      	b.n	801113c <USB_EPStartXfer+0x51a>
 80110ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110b0:	085b      	lsrs	r3, r3, #1
 80110b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80110b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110ba:	f003 0301 	and.w	r3, r3, #1
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d004      	beq.n	80110cc <USB_EPStartXfer+0x4aa>
 80110c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80110c6:	3301      	adds	r3, #1
 80110c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	881b      	ldrh	r3, [r3, #0]
 80110d0:	b29a      	uxth	r2, r3
 80110d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80110d6:	b29b      	uxth	r3, r3
 80110d8:	029b      	lsls	r3, r3, #10
 80110da:	b29b      	uxth	r3, r3
 80110dc:	4313      	orrs	r3, r2
 80110de:	b29a      	uxth	r2, r3
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	801a      	strh	r2, [r3, #0]
 80110e4:	e02a      	b.n	801113c <USB_EPStartXfer+0x51a>
 80110e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	785b      	ldrb	r3, [r3, #1]
 80110f2:	2b01      	cmp	r3, #1
 80110f4:	d122      	bne.n	801113c <USB_EPStartXfer+0x51a>
 80110f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	623b      	str	r3, [r7, #32]
 8011102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011110:	b29b      	uxth	r3, r3
 8011112:	461a      	mov	r2, r3
 8011114:	6a3b      	ldr	r3, [r7, #32]
 8011116:	4413      	add	r3, r2
 8011118:	623b      	str	r3, [r7, #32]
 801111a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801111e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	00da      	lsls	r2, r3, #3
 8011128:	6a3b      	ldr	r3, [r7, #32]
 801112a:	4413      	add	r3, r2
 801112c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011130:	61fb      	str	r3, [r7, #28]
 8011132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011136:	b29a      	uxth	r2, r3
 8011138:	69fb      	ldr	r3, [r7, #28]
 801113a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801113c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	891b      	ldrh	r3, [r3, #8]
 8011148:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801114c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	6959      	ldr	r1, [r3, #20]
 8011158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801115c:	b29b      	uxth	r3, r3
 801115e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011162:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011166:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801116a:	6800      	ldr	r0, [r0, #0]
 801116c:	f001 fa65 	bl	801263a <USB_WritePMA>
 8011170:	e3ee      	b.n	8011950 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	785b      	ldrb	r3, [r3, #1]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d177      	bne.n	8011272 <USB_EPStartXfer+0x650>
 8011182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011186:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	64bb      	str	r3, [r7, #72]	; 0x48
 801118e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011192:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801119c:	b29b      	uxth	r3, r3
 801119e:	461a      	mov	r2, r3
 80111a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111a2:	4413      	add	r3, r2
 80111a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80111a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	00da      	lsls	r2, r3, #3
 80111b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111b6:	4413      	add	r3, r2
 80111b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80111bc:	647b      	str	r3, [r7, #68]	; 0x44
 80111be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111c0:	881b      	ldrh	r3, [r3, #0]
 80111c2:	b29b      	uxth	r3, r3
 80111c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80111c8:	b29a      	uxth	r2, r3
 80111ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111cc:	801a      	strh	r2, [r3, #0]
 80111ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111d2:	2b3e      	cmp	r3, #62	; 0x3e
 80111d4:	d921      	bls.n	801121a <USB_EPStartXfer+0x5f8>
 80111d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111da:	095b      	lsrs	r3, r3, #5
 80111dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80111e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111e4:	f003 031f 	and.w	r3, r3, #31
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d104      	bne.n	80111f6 <USB_EPStartXfer+0x5d4>
 80111ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80111f0:	3b01      	subs	r3, #1
 80111f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80111f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111f8:	881b      	ldrh	r3, [r3, #0]
 80111fa:	b29a      	uxth	r2, r3
 80111fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011200:	b29b      	uxth	r3, r3
 8011202:	029b      	lsls	r3, r3, #10
 8011204:	b29b      	uxth	r3, r3
 8011206:	4313      	orrs	r3, r2
 8011208:	b29b      	uxth	r3, r3
 801120a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801120e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011212:	b29a      	uxth	r2, r3
 8011214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011216:	801a      	strh	r2, [r3, #0]
 8011218:	e056      	b.n	80112c8 <USB_EPStartXfer+0x6a6>
 801121a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801121e:	2b00      	cmp	r3, #0
 8011220:	d10a      	bne.n	8011238 <USB_EPStartXfer+0x616>
 8011222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011224:	881b      	ldrh	r3, [r3, #0]
 8011226:	b29b      	uxth	r3, r3
 8011228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801122c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011230:	b29a      	uxth	r2, r3
 8011232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011234:	801a      	strh	r2, [r3, #0]
 8011236:	e047      	b.n	80112c8 <USB_EPStartXfer+0x6a6>
 8011238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801123c:	085b      	lsrs	r3, r3, #1
 801123e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011246:	f003 0301 	and.w	r3, r3, #1
 801124a:	2b00      	cmp	r3, #0
 801124c:	d004      	beq.n	8011258 <USB_EPStartXfer+0x636>
 801124e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011252:	3301      	adds	r3, #1
 8011254:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801125a:	881b      	ldrh	r3, [r3, #0]
 801125c:	b29a      	uxth	r2, r3
 801125e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011262:	b29b      	uxth	r3, r3
 8011264:	029b      	lsls	r3, r3, #10
 8011266:	b29b      	uxth	r3, r3
 8011268:	4313      	orrs	r3, r2
 801126a:	b29a      	uxth	r2, r3
 801126c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801126e:	801a      	strh	r2, [r3, #0]
 8011270:	e02a      	b.n	80112c8 <USB_EPStartXfer+0x6a6>
 8011272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	785b      	ldrb	r3, [r3, #1]
 801127e:	2b01      	cmp	r3, #1
 8011280:	d122      	bne.n	80112c8 <USB_EPStartXfer+0x6a6>
 8011282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	653b      	str	r3, [r7, #80]	; 0x50
 801128e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801129c:	b29b      	uxth	r3, r3
 801129e:	461a      	mov	r2, r3
 80112a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112a2:	4413      	add	r3, r2
 80112a4:	653b      	str	r3, [r7, #80]	; 0x50
 80112a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	781b      	ldrb	r3, [r3, #0]
 80112b2:	00da      	lsls	r2, r3, #3
 80112b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112b6:	4413      	add	r3, r2
 80112b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80112bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80112be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112c2:	b29a      	uxth	r2, r3
 80112c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80112c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	891b      	ldrh	r3, [r3, #8]
 80112d4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80112d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	6959      	ldr	r1, [r3, #20]
 80112e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112e8:	b29b      	uxth	r3, r3
 80112ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80112ee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80112f2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80112f6:	6800      	ldr	r0, [r0, #0]
 80112f8:	f001 f99f 	bl	801263a <USB_WritePMA>
            ep->xfer_buff += len;
 80112fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	695a      	ldr	r2, [r3, #20]
 8011308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801130c:	441a      	add	r2, r3
 801130e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801131a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801131e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	6a1a      	ldr	r2, [r3, #32]
 8011326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801132a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	691b      	ldr	r3, [r3, #16]
 8011332:	429a      	cmp	r2, r3
 8011334:	d90f      	bls.n	8011356 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8011336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801133a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	6a1a      	ldr	r2, [r3, #32]
 8011342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011346:	1ad2      	subs	r2, r2, r3
 8011348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801134c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	621a      	str	r2, [r3, #32]
 8011354:	e00e      	b.n	8011374 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8011356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801135a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	6a1b      	ldr	r3, [r3, #32]
 8011362:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8011366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801136a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	2200      	movs	r2, #0
 8011372:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011378:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	643b      	str	r3, [r7, #64]	; 0x40
 8011380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	785b      	ldrb	r3, [r3, #1]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d177      	bne.n	8011480 <USB_EPStartXfer+0x85e>
 8011390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011394:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	63bb      	str	r3, [r7, #56]	; 0x38
 801139c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	461a      	mov	r2, r3
 80113ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b0:	4413      	add	r3, r2
 80113b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80113b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	00da      	lsls	r2, r3, #3
 80113c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113c4:	4413      	add	r3, r2
 80113c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80113ca:	637b      	str	r3, [r7, #52]	; 0x34
 80113cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113ce:	881b      	ldrh	r3, [r3, #0]
 80113d0:	b29b      	uxth	r3, r3
 80113d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80113d6:	b29a      	uxth	r2, r3
 80113d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113da:	801a      	strh	r2, [r3, #0]
 80113dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113e0:	2b3e      	cmp	r3, #62	; 0x3e
 80113e2:	d921      	bls.n	8011428 <USB_EPStartXfer+0x806>
 80113e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113e8:	095b      	lsrs	r3, r3, #5
 80113ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80113ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113f2:	f003 031f 	and.w	r3, r3, #31
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d104      	bne.n	8011404 <USB_EPStartXfer+0x7e2>
 80113fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80113fe:	3b01      	subs	r3, #1
 8011400:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011406:	881b      	ldrh	r3, [r3, #0]
 8011408:	b29a      	uxth	r2, r3
 801140a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801140e:	b29b      	uxth	r3, r3
 8011410:	029b      	lsls	r3, r3, #10
 8011412:	b29b      	uxth	r3, r3
 8011414:	4313      	orrs	r3, r2
 8011416:	b29b      	uxth	r3, r3
 8011418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801141c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011420:	b29a      	uxth	r2, r3
 8011422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011424:	801a      	strh	r2, [r3, #0]
 8011426:	e050      	b.n	80114ca <USB_EPStartXfer+0x8a8>
 8011428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801142c:	2b00      	cmp	r3, #0
 801142e:	d10a      	bne.n	8011446 <USB_EPStartXfer+0x824>
 8011430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011432:	881b      	ldrh	r3, [r3, #0]
 8011434:	b29b      	uxth	r3, r3
 8011436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801143a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801143e:	b29a      	uxth	r2, r3
 8011440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011442:	801a      	strh	r2, [r3, #0]
 8011444:	e041      	b.n	80114ca <USB_EPStartXfer+0x8a8>
 8011446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801144a:	085b      	lsrs	r3, r3, #1
 801144c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011454:	f003 0301 	and.w	r3, r3, #1
 8011458:	2b00      	cmp	r3, #0
 801145a:	d004      	beq.n	8011466 <USB_EPStartXfer+0x844>
 801145c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011460:	3301      	adds	r3, #1
 8011462:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011468:	881b      	ldrh	r3, [r3, #0]
 801146a:	b29a      	uxth	r2, r3
 801146c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011470:	b29b      	uxth	r3, r3
 8011472:	029b      	lsls	r3, r3, #10
 8011474:	b29b      	uxth	r3, r3
 8011476:	4313      	orrs	r3, r2
 8011478:	b29a      	uxth	r2, r3
 801147a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801147c:	801a      	strh	r2, [r3, #0]
 801147e:	e024      	b.n	80114ca <USB_EPStartXfer+0x8a8>
 8011480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	785b      	ldrb	r3, [r3, #1]
 801148c:	2b01      	cmp	r3, #1
 801148e:	d11c      	bne.n	80114ca <USB_EPStartXfer+0x8a8>
 8011490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011494:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801149e:	b29b      	uxth	r3, r3
 80114a0:	461a      	mov	r2, r3
 80114a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114a4:	4413      	add	r3, r2
 80114a6:	643b      	str	r3, [r7, #64]	; 0x40
 80114a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	781b      	ldrb	r3, [r3, #0]
 80114b4:	00da      	lsls	r2, r3, #3
 80114b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114b8:	4413      	add	r3, r2
 80114ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80114be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114c4:	b29a      	uxth	r2, r3
 80114c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80114ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	895b      	ldrh	r3, [r3, #10]
 80114d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80114da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	6959      	ldr	r1, [r3, #20]
 80114e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114ea:	b29b      	uxth	r3, r3
 80114ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80114f0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80114f4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80114f8:	6800      	ldr	r0, [r0, #0]
 80114fa:	f001 f89e 	bl	801263a <USB_WritePMA>
 80114fe:	e227      	b.n	8011950 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8011500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	6a1b      	ldr	r3, [r3, #32]
 801150c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8011510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011518:	681a      	ldr	r2, [r3, #0]
 801151a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801151e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	781b      	ldrb	r3, [r3, #0]
 8011526:	009b      	lsls	r3, r3, #2
 8011528:	4413      	add	r3, r2
 801152a:	881b      	ldrh	r3, [r3, #0]
 801152c:	b29b      	uxth	r3, r3
 801152e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8011532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011536:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801153a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801153e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011542:	681a      	ldr	r2, [r3, #0]
 8011544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	781b      	ldrb	r3, [r3, #0]
 8011550:	009b      	lsls	r3, r3, #2
 8011552:	441a      	add	r2, r3
 8011554:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801155c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011568:	b29b      	uxth	r3, r3
 801156a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801156c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011570:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801157c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011586:	b29b      	uxth	r3, r3
 8011588:	461a      	mov	r2, r3
 801158a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801158c:	4413      	add	r3, r2
 801158e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	781b      	ldrb	r3, [r3, #0]
 801159c:	00da      	lsls	r2, r3, #3
 801159e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115a0:	4413      	add	r3, r2
 80115a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80115a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80115a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115ac:	b29a      	uxth	r2, r3
 80115ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80115b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80115b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	891b      	ldrh	r3, [r3, #8]
 80115be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80115c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	6959      	ldr	r1, [r3, #20]
 80115ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115d2:	b29b      	uxth	r3, r3
 80115d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80115d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80115dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80115e0:	6800      	ldr	r0, [r0, #0]
 80115e2:	f001 f82a 	bl	801263a <USB_WritePMA>
 80115e6:	e1b3      	b.n	8011950 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80115e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	6a1a      	ldr	r2, [r3, #32]
 80115f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115f8:	1ad2      	subs	r2, r2, r3
 80115fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801160a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	781b      	ldrb	r3, [r3, #0]
 801161c:	009b      	lsls	r3, r3, #2
 801161e:	4413      	add	r3, r2
 8011620:	881b      	ldrh	r3, [r3, #0]
 8011622:	b29b      	uxth	r3, r3
 8011624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011628:	2b00      	cmp	r3, #0
 801162a:	f000 80c6 	beq.w	80117ba <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801162e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	673b      	str	r3, [r7, #112]	; 0x70
 801163a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801163e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	785b      	ldrb	r3, [r3, #1]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d177      	bne.n	801173a <USB_EPStartXfer+0xb18>
 801164a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801164e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	66bb      	str	r3, [r7, #104]	; 0x68
 8011656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801165a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011664:	b29b      	uxth	r3, r3
 8011666:	461a      	mov	r2, r3
 8011668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801166a:	4413      	add	r3, r2
 801166c:	66bb      	str	r3, [r7, #104]	; 0x68
 801166e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	781b      	ldrb	r3, [r3, #0]
 801167a:	00da      	lsls	r2, r3, #3
 801167c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801167e:	4413      	add	r3, r2
 8011680:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011684:	667b      	str	r3, [r7, #100]	; 0x64
 8011686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011688:	881b      	ldrh	r3, [r3, #0]
 801168a:	b29b      	uxth	r3, r3
 801168c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011690:	b29a      	uxth	r2, r3
 8011692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011694:	801a      	strh	r2, [r3, #0]
 8011696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801169a:	2b3e      	cmp	r3, #62	; 0x3e
 801169c:	d921      	bls.n	80116e2 <USB_EPStartXfer+0xac0>
 801169e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116a2:	095b      	lsrs	r3, r3, #5
 80116a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80116a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116ac:	f003 031f 	and.w	r3, r3, #31
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d104      	bne.n	80116be <USB_EPStartXfer+0xa9c>
 80116b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80116b8:	3b01      	subs	r3, #1
 80116ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80116be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80116c0:	881b      	ldrh	r3, [r3, #0]
 80116c2:	b29a      	uxth	r2, r3
 80116c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80116c8:	b29b      	uxth	r3, r3
 80116ca:	029b      	lsls	r3, r3, #10
 80116cc:	b29b      	uxth	r3, r3
 80116ce:	4313      	orrs	r3, r2
 80116d0:	b29b      	uxth	r3, r3
 80116d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80116da:	b29a      	uxth	r2, r3
 80116dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80116de:	801a      	strh	r2, [r3, #0]
 80116e0:	e050      	b.n	8011784 <USB_EPStartXfer+0xb62>
 80116e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d10a      	bne.n	8011700 <USB_EPStartXfer+0xade>
 80116ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80116ec:	881b      	ldrh	r3, [r3, #0]
 80116ee:	b29b      	uxth	r3, r3
 80116f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80116f8:	b29a      	uxth	r2, r3
 80116fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80116fc:	801a      	strh	r2, [r3, #0]
 80116fe:	e041      	b.n	8011784 <USB_EPStartXfer+0xb62>
 8011700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011704:	085b      	lsrs	r3, r3, #1
 8011706:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801170a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801170e:	f003 0301 	and.w	r3, r3, #1
 8011712:	2b00      	cmp	r3, #0
 8011714:	d004      	beq.n	8011720 <USB_EPStartXfer+0xafe>
 8011716:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801171a:	3301      	adds	r3, #1
 801171c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011722:	881b      	ldrh	r3, [r3, #0]
 8011724:	b29a      	uxth	r2, r3
 8011726:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801172a:	b29b      	uxth	r3, r3
 801172c:	029b      	lsls	r3, r3, #10
 801172e:	b29b      	uxth	r3, r3
 8011730:	4313      	orrs	r3, r2
 8011732:	b29a      	uxth	r2, r3
 8011734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011736:	801a      	strh	r2, [r3, #0]
 8011738:	e024      	b.n	8011784 <USB_EPStartXfer+0xb62>
 801173a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801173e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	785b      	ldrb	r3, [r3, #1]
 8011746:	2b01      	cmp	r3, #1
 8011748:	d11c      	bne.n	8011784 <USB_EPStartXfer+0xb62>
 801174a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801174e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011758:	b29b      	uxth	r3, r3
 801175a:	461a      	mov	r2, r3
 801175c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801175e:	4413      	add	r3, r2
 8011760:	673b      	str	r3, [r7, #112]	; 0x70
 8011762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	781b      	ldrb	r3, [r3, #0]
 801176e:	00da      	lsls	r2, r3, #3
 8011770:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011772:	4413      	add	r3, r2
 8011774:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011778:	66fb      	str	r3, [r7, #108]	; 0x6c
 801177a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801177e:	b29a      	uxth	r2, r3
 8011780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011782:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8011784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	895b      	ldrh	r3, [r3, #10]
 8011790:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	6959      	ldr	r1, [r3, #20]
 80117a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80117a4:	b29b      	uxth	r3, r3
 80117a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80117aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80117ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80117b2:	6800      	ldr	r0, [r0, #0]
 80117b4:	f000 ff41 	bl	801263a <USB_WritePMA>
 80117b8:	e0ca      	b.n	8011950 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80117ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	785b      	ldrb	r3, [r3, #1]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d177      	bne.n	80118ba <USB_EPStartXfer+0xc98>
 80117ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80117d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80117e4:	b29b      	uxth	r3, r3
 80117e6:	461a      	mov	r2, r3
 80117e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80117ea:	4413      	add	r3, r2
 80117ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80117ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	781b      	ldrb	r3, [r3, #0]
 80117fa:	00da      	lsls	r2, r3, #3
 80117fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80117fe:	4413      	add	r3, r2
 8011800:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011804:	67bb      	str	r3, [r7, #120]	; 0x78
 8011806:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011808:	881b      	ldrh	r3, [r3, #0]
 801180a:	b29b      	uxth	r3, r3
 801180c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011810:	b29a      	uxth	r2, r3
 8011812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011814:	801a      	strh	r2, [r3, #0]
 8011816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801181a:	2b3e      	cmp	r3, #62	; 0x3e
 801181c:	d921      	bls.n	8011862 <USB_EPStartXfer+0xc40>
 801181e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011822:	095b      	lsrs	r3, r3, #5
 8011824:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801182c:	f003 031f 	and.w	r3, r3, #31
 8011830:	2b00      	cmp	r3, #0
 8011832:	d104      	bne.n	801183e <USB_EPStartXfer+0xc1c>
 8011834:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011838:	3b01      	subs	r3, #1
 801183a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801183e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011840:	881b      	ldrh	r3, [r3, #0]
 8011842:	b29a      	uxth	r2, r3
 8011844:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011848:	b29b      	uxth	r3, r3
 801184a:	029b      	lsls	r3, r3, #10
 801184c:	b29b      	uxth	r3, r3
 801184e:	4313      	orrs	r3, r2
 8011850:	b29b      	uxth	r3, r3
 8011852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801185a:	b29a      	uxth	r2, r3
 801185c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801185e:	801a      	strh	r2, [r3, #0]
 8011860:	e05c      	b.n	801191c <USB_EPStartXfer+0xcfa>
 8011862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011866:	2b00      	cmp	r3, #0
 8011868:	d10a      	bne.n	8011880 <USB_EPStartXfer+0xc5e>
 801186a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801186c:	881b      	ldrh	r3, [r3, #0]
 801186e:	b29b      	uxth	r3, r3
 8011870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011878:	b29a      	uxth	r2, r3
 801187a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801187c:	801a      	strh	r2, [r3, #0]
 801187e:	e04d      	b.n	801191c <USB_EPStartXfer+0xcfa>
 8011880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011884:	085b      	lsrs	r3, r3, #1
 8011886:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801188a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801188e:	f003 0301 	and.w	r3, r3, #1
 8011892:	2b00      	cmp	r3, #0
 8011894:	d004      	beq.n	80118a0 <USB_EPStartXfer+0xc7e>
 8011896:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801189a:	3301      	adds	r3, #1
 801189c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80118a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80118a2:	881b      	ldrh	r3, [r3, #0]
 80118a4:	b29a      	uxth	r2, r3
 80118a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80118aa:	b29b      	uxth	r3, r3
 80118ac:	029b      	lsls	r3, r3, #10
 80118ae:	b29b      	uxth	r3, r3
 80118b0:	4313      	orrs	r3, r2
 80118b2:	b29a      	uxth	r2, r3
 80118b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80118b6:	801a      	strh	r2, [r3, #0]
 80118b8:	e030      	b.n	801191c <USB_EPStartXfer+0xcfa>
 80118ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	785b      	ldrb	r3, [r3, #1]
 80118c6:	2b01      	cmp	r3, #1
 80118c8:	d128      	bne.n	801191c <USB_EPStartXfer+0xcfa>
 80118ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80118d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80118e6:	b29b      	uxth	r3, r3
 80118e8:	461a      	mov	r2, r3
 80118ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80118ee:	4413      	add	r3, r2
 80118f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80118f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	781b      	ldrb	r3, [r3, #0]
 8011900:	00da      	lsls	r2, r3, #3
 8011902:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011906:	4413      	add	r3, r2
 8011908:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801190c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011914:	b29a      	uxth	r2, r3
 8011916:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801191a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801191c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	891b      	ldrh	r3, [r3, #8]
 8011928:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801192c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	6959      	ldr	r1, [r3, #20]
 8011938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801193c:	b29b      	uxth	r3, r3
 801193e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011942:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011946:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801194a:	6800      	ldr	r0, [r0, #0]
 801194c:	f000 fe75 	bl	801263a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011954:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011958:	681a      	ldr	r2, [r3, #0]
 801195a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801195e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	781b      	ldrb	r3, [r3, #0]
 8011966:	009b      	lsls	r3, r3, #2
 8011968:	4413      	add	r3, r2
 801196a:	881b      	ldrh	r3, [r3, #0]
 801196c:	b29b      	uxth	r3, r3
 801196e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011976:	817b      	strh	r3, [r7, #10]
 8011978:	897b      	ldrh	r3, [r7, #10]
 801197a:	f083 0310 	eor.w	r3, r3, #16
 801197e:	817b      	strh	r3, [r7, #10]
 8011980:	897b      	ldrh	r3, [r7, #10]
 8011982:	f083 0320 	eor.w	r3, r3, #32
 8011986:	817b      	strh	r3, [r7, #10]
 8011988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801198c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011990:	681a      	ldr	r2, [r3, #0]
 8011992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	781b      	ldrb	r3, [r3, #0]
 801199e:	009b      	lsls	r3, r3, #2
 80119a0:	441a      	add	r2, r3
 80119a2:	897b      	ldrh	r3, [r7, #10]
 80119a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80119a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80119ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80119b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119b4:	b29b      	uxth	r3, r3
 80119b6:	8013      	strh	r3, [r2, #0]
 80119b8:	f000 bcde 	b.w	8012378 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80119bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	7b1b      	ldrb	r3, [r3, #12]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	f040 80bb 	bne.w	8011b44 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80119ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	699a      	ldr	r2, [r3, #24]
 80119da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	691b      	ldr	r3, [r3, #16]
 80119e6:	429a      	cmp	r2, r3
 80119e8:	d917      	bls.n	8011a1a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80119ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	691b      	ldr	r3, [r3, #16]
 80119f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80119fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	699a      	ldr	r2, [r3, #24]
 8011a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a0a:	1ad2      	subs	r2, r2, r3
 8011a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	619a      	str	r2, [r3, #24]
 8011a18:	e00e      	b.n	8011a38 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8011a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	699b      	ldr	r3, [r3, #24]
 8011a26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8011a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	2200      	movs	r2, #0
 8011a36:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8011a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011a54:	b29b      	uxth	r3, r3
 8011a56:	461a      	mov	r2, r3
 8011a58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011a5c:	4413      	add	r3, r2
 8011a5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	00da      	lsls	r2, r3, #3
 8011a70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011a74:	4413      	add	r3, r2
 8011a76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011a7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011a7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011a82:	881b      	ldrh	r3, [r3, #0]
 8011a84:	b29b      	uxth	r3, r3
 8011a86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011a8a:	b29a      	uxth	r2, r3
 8011a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011a90:	801a      	strh	r2, [r3, #0]
 8011a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a96:	2b3e      	cmp	r3, #62	; 0x3e
 8011a98:	d924      	bls.n	8011ae4 <USB_EPStartXfer+0xec2>
 8011a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a9e:	095b      	lsrs	r3, r3, #5
 8011aa0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011aa8:	f003 031f 	and.w	r3, r3, #31
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d104      	bne.n	8011aba <USB_EPStartXfer+0xe98>
 8011ab0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011ab4:	3b01      	subs	r3, #1
 8011ab6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011abe:	881b      	ldrh	r3, [r3, #0]
 8011ac0:	b29a      	uxth	r2, r3
 8011ac2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	029b      	lsls	r3, r3, #10
 8011aca:	b29b      	uxth	r3, r3
 8011acc:	4313      	orrs	r3, r2
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011ad8:	b29a      	uxth	r2, r3
 8011ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011ade:	801a      	strh	r2, [r3, #0]
 8011ae0:	f000 bc10 	b.w	8012304 <USB_EPStartXfer+0x16e2>
 8011ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d10c      	bne.n	8011b06 <USB_EPStartXfer+0xee4>
 8011aec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011af0:	881b      	ldrh	r3, [r3, #0]
 8011af2:	b29b      	uxth	r3, r3
 8011af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011afc:	b29a      	uxth	r2, r3
 8011afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011b02:	801a      	strh	r2, [r3, #0]
 8011b04:	e3fe      	b.n	8012304 <USB_EPStartXfer+0x16e2>
 8011b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b0a:	085b      	lsrs	r3, r3, #1
 8011b0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b14:	f003 0301 	and.w	r3, r3, #1
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d004      	beq.n	8011b26 <USB_EPStartXfer+0xf04>
 8011b1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011b20:	3301      	adds	r3, #1
 8011b22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011b2a:	881b      	ldrh	r3, [r3, #0]
 8011b2c:	b29a      	uxth	r2, r3
 8011b2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011b32:	b29b      	uxth	r3, r3
 8011b34:	029b      	lsls	r3, r3, #10
 8011b36:	b29b      	uxth	r3, r3
 8011b38:	4313      	orrs	r3, r2
 8011b3a:	b29a      	uxth	r2, r3
 8011b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011b40:	801a      	strh	r2, [r3, #0]
 8011b42:	e3df      	b.n	8012304 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8011b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	78db      	ldrb	r3, [r3, #3]
 8011b50:	2b02      	cmp	r3, #2
 8011b52:	f040 8218 	bne.w	8011f86 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8011b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	785b      	ldrb	r3, [r3, #1]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	f040 809d 	bne.w	8011ca2 <USB_EPStartXfer+0x1080>
 8011b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011b84:	b29b      	uxth	r3, r3
 8011b86:	461a      	mov	r2, r3
 8011b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011b8c:	4413      	add	r3, r2
 8011b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	781b      	ldrb	r3, [r3, #0]
 8011b9e:	00da      	lsls	r2, r3, #3
 8011ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ba4:	4413      	add	r3, r2
 8011ba6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011baa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011bae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011bb2:	881b      	ldrh	r3, [r3, #0]
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011bba:	b29a      	uxth	r2, r3
 8011bbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011bc0:	801a      	strh	r2, [r3, #0]
 8011bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	691b      	ldr	r3, [r3, #16]
 8011bce:	2b3e      	cmp	r3, #62	; 0x3e
 8011bd0:	d92b      	bls.n	8011c2a <USB_EPStartXfer+0x1008>
 8011bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	691b      	ldr	r3, [r3, #16]
 8011bde:	095b      	lsrs	r3, r3, #5
 8011be0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	691b      	ldr	r3, [r3, #16]
 8011bf0:	f003 031f 	and.w	r3, r3, #31
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d104      	bne.n	8011c02 <USB_EPStartXfer+0xfe0>
 8011bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011bfc:	3b01      	subs	r3, #1
 8011bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011c02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011c06:	881b      	ldrh	r3, [r3, #0]
 8011c08:	b29a      	uxth	r2, r3
 8011c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c0e:	b29b      	uxth	r3, r3
 8011c10:	029b      	lsls	r3, r3, #10
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	4313      	orrs	r3, r2
 8011c16:	b29b      	uxth	r3, r3
 8011c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011c20:	b29a      	uxth	r2, r3
 8011c22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011c26:	801a      	strh	r2, [r3, #0]
 8011c28:	e070      	b.n	8011d0c <USB_EPStartXfer+0x10ea>
 8011c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	691b      	ldr	r3, [r3, #16]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d10c      	bne.n	8011c54 <USB_EPStartXfer+0x1032>
 8011c3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011c3e:	881b      	ldrh	r3, [r3, #0]
 8011c40:	b29b      	uxth	r3, r3
 8011c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011c4a:	b29a      	uxth	r2, r3
 8011c4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011c50:	801a      	strh	r2, [r3, #0]
 8011c52:	e05b      	b.n	8011d0c <USB_EPStartXfer+0x10ea>
 8011c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	691b      	ldr	r3, [r3, #16]
 8011c60:	085b      	lsrs	r3, r3, #1
 8011c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	691b      	ldr	r3, [r3, #16]
 8011c72:	f003 0301 	and.w	r3, r3, #1
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d004      	beq.n	8011c84 <USB_EPStartXfer+0x1062>
 8011c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c7e:	3301      	adds	r3, #1
 8011c80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011c84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011c88:	881b      	ldrh	r3, [r3, #0]
 8011c8a:	b29a      	uxth	r2, r3
 8011c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	029b      	lsls	r3, r3, #10
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	4313      	orrs	r3, r2
 8011c98:	b29a      	uxth	r2, r3
 8011c9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011c9e:	801a      	strh	r2, [r3, #0]
 8011ca0:	e034      	b.n	8011d0c <USB_EPStartXfer+0x10ea>
 8011ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	785b      	ldrb	r3, [r3, #1]
 8011cae:	2b01      	cmp	r3, #1
 8011cb0:	d12c      	bne.n	8011d0c <USB_EPStartXfer+0x10ea>
 8011cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011cce:	b29b      	uxth	r3, r3
 8011cd0:	461a      	mov	r2, r3
 8011cd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011cd6:	4413      	add	r3, r2
 8011cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	781b      	ldrb	r3, [r3, #0]
 8011ce8:	00da      	lsls	r2, r3, #3
 8011cea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011cee:	4413      	add	r3, r2
 8011cf0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	691b      	ldr	r3, [r3, #16]
 8011d04:	b29a      	uxth	r2, r3
 8011d06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011d0a:	801a      	strh	r2, [r3, #0]
 8011d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	785b      	ldrb	r3, [r3, #1]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	f040 809d 	bne.w	8011e66 <USB_EPStartXfer+0x1244>
 8011d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011d48:	b29b      	uxth	r3, r3
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011d50:	4413      	add	r3, r2
 8011d52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	781b      	ldrb	r3, [r3, #0]
 8011d62:	00da      	lsls	r2, r3, #3
 8011d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011d68:	4413      	add	r3, r2
 8011d6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011d6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011d72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011d76:	881b      	ldrh	r3, [r3, #0]
 8011d78:	b29b      	uxth	r3, r3
 8011d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011d7e:	b29a      	uxth	r2, r3
 8011d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011d84:	801a      	strh	r2, [r3, #0]
 8011d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	691b      	ldr	r3, [r3, #16]
 8011d92:	2b3e      	cmp	r3, #62	; 0x3e
 8011d94:	d92b      	bls.n	8011dee <USB_EPStartXfer+0x11cc>
 8011d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	691b      	ldr	r3, [r3, #16]
 8011da2:	095b      	lsrs	r3, r3, #5
 8011da4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	691b      	ldr	r3, [r3, #16]
 8011db4:	f003 031f 	and.w	r3, r3, #31
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d104      	bne.n	8011dc6 <USB_EPStartXfer+0x11a4>
 8011dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011dc0:	3b01      	subs	r3, #1
 8011dc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011dc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011dca:	881b      	ldrh	r3, [r3, #0]
 8011dcc:	b29a      	uxth	r2, r3
 8011dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011dd2:	b29b      	uxth	r3, r3
 8011dd4:	029b      	lsls	r3, r3, #10
 8011dd6:	b29b      	uxth	r3, r3
 8011dd8:	4313      	orrs	r3, r2
 8011dda:	b29b      	uxth	r3, r3
 8011ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011de4:	b29a      	uxth	r2, r3
 8011de6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011dea:	801a      	strh	r2, [r3, #0]
 8011dec:	e069      	b.n	8011ec2 <USB_EPStartXfer+0x12a0>
 8011dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	691b      	ldr	r3, [r3, #16]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d10c      	bne.n	8011e18 <USB_EPStartXfer+0x11f6>
 8011dfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011e02:	881b      	ldrh	r3, [r3, #0]
 8011e04:	b29b      	uxth	r3, r3
 8011e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e0e:	b29a      	uxth	r2, r3
 8011e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011e14:	801a      	strh	r2, [r3, #0]
 8011e16:	e054      	b.n	8011ec2 <USB_EPStartXfer+0x12a0>
 8011e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	691b      	ldr	r3, [r3, #16]
 8011e24:	085b      	lsrs	r3, r3, #1
 8011e26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	691b      	ldr	r3, [r3, #16]
 8011e36:	f003 0301 	and.w	r3, r3, #1
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d004      	beq.n	8011e48 <USB_EPStartXfer+0x1226>
 8011e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011e42:	3301      	adds	r3, #1
 8011e44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011e4c:	881b      	ldrh	r3, [r3, #0]
 8011e4e:	b29a      	uxth	r2, r3
 8011e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011e54:	b29b      	uxth	r3, r3
 8011e56:	029b      	lsls	r3, r3, #10
 8011e58:	b29b      	uxth	r3, r3
 8011e5a:	4313      	orrs	r3, r2
 8011e5c:	b29a      	uxth	r2, r3
 8011e5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011e62:	801a      	strh	r2, [r3, #0]
 8011e64:	e02d      	b.n	8011ec2 <USB_EPStartXfer+0x12a0>
 8011e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	785b      	ldrb	r3, [r3, #1]
 8011e72:	2b01      	cmp	r3, #1
 8011e74:	d125      	bne.n	8011ec2 <USB_EPStartXfer+0x12a0>
 8011e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011e84:	b29b      	uxth	r3, r3
 8011e86:	461a      	mov	r2, r3
 8011e88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011e8c:	4413      	add	r3, r2
 8011e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	781b      	ldrb	r3, [r3, #0]
 8011e9e:	00da      	lsls	r2, r3, #3
 8011ea0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011ea4:	4413      	add	r3, r2
 8011ea6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	691b      	ldr	r3, [r3, #16]
 8011eba:	b29a      	uxth	r2, r3
 8011ebc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011ec0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8011ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	69db      	ldr	r3, [r3, #28]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	f000 8218 	beq.w	8012304 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8011ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ed8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011edc:	681a      	ldr	r2, [r3, #0]
 8011ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	781b      	ldrb	r3, [r3, #0]
 8011eea:	009b      	lsls	r3, r3, #2
 8011eec:	4413      	add	r3, r2
 8011eee:	881b      	ldrh	r3, [r3, #0]
 8011ef0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011ef4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d005      	beq.n	8011f0c <USB_EPStartXfer+0x12ea>
 8011f00:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d10d      	bne.n	8011f28 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011f0c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	f040 81f5 	bne.w	8012304 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011f1a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	f040 81ee 	bne.w	8012304 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8011f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f30:	681a      	ldr	r2, [r3, #0]
 8011f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	781b      	ldrb	r3, [r3, #0]
 8011f3e:	009b      	lsls	r3, r3, #2
 8011f40:	4413      	add	r3, r2
 8011f42:	881b      	ldrh	r3, [r3, #0]
 8011f44:	b29b      	uxth	r3, r3
 8011f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f4e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8011f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f5a:	681a      	ldr	r2, [r3, #0]
 8011f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	781b      	ldrb	r3, [r3, #0]
 8011f68:	009b      	lsls	r3, r3, #2
 8011f6a:	441a      	add	r2, r3
 8011f6c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8011f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011f7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011f80:	b29b      	uxth	r3, r3
 8011f82:	8013      	strh	r3, [r2, #0]
 8011f84:	e1be      	b.n	8012304 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8011f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	78db      	ldrb	r3, [r3, #3]
 8011f92:	2b01      	cmp	r3, #1
 8011f94:	f040 81b4 	bne.w	8012300 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8011f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	699a      	ldr	r2, [r3, #24]
 8011fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	691b      	ldr	r3, [r3, #16]
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d917      	bls.n	8011fe4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8011fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	691b      	ldr	r3, [r3, #16]
 8011fc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8011fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	699a      	ldr	r2, [r3, #24]
 8011fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fd4:	1ad2      	subs	r2, r2, r3
 8011fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	619a      	str	r2, [r3, #24]
 8011fe2:	e00e      	b.n	8012002 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8011fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	699b      	ldr	r3, [r3, #24]
 8011ff0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8011ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	2200      	movs	r2, #0
 8012000:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8012002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	785b      	ldrb	r3, [r3, #1]
 801200e:	2b00      	cmp	r3, #0
 8012010:	f040 8085 	bne.w	801211e <USB_EPStartXfer+0x14fc>
 8012014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012018:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012026:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012030:	b29b      	uxth	r3, r3
 8012032:	461a      	mov	r2, r3
 8012034:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012038:	4413      	add	r3, r2
 801203a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801203e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	00da      	lsls	r2, r3, #3
 801204c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012050:	4413      	add	r3, r2
 8012052:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012056:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801205a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801205e:	881b      	ldrh	r3, [r3, #0]
 8012060:	b29b      	uxth	r3, r3
 8012062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012066:	b29a      	uxth	r2, r3
 8012068:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801206c:	801a      	strh	r2, [r3, #0]
 801206e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012072:	2b3e      	cmp	r3, #62	; 0x3e
 8012074:	d923      	bls.n	80120be <USB_EPStartXfer+0x149c>
 8012076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801207a:	095b      	lsrs	r3, r3, #5
 801207c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012084:	f003 031f 	and.w	r3, r3, #31
 8012088:	2b00      	cmp	r3, #0
 801208a:	d104      	bne.n	8012096 <USB_EPStartXfer+0x1474>
 801208c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012090:	3b01      	subs	r3, #1
 8012092:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012096:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801209a:	881b      	ldrh	r3, [r3, #0]
 801209c:	b29a      	uxth	r2, r3
 801209e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80120a2:	b29b      	uxth	r3, r3
 80120a4:	029b      	lsls	r3, r3, #10
 80120a6:	b29b      	uxth	r3, r3
 80120a8:	4313      	orrs	r3, r2
 80120aa:	b29b      	uxth	r3, r3
 80120ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120b4:	b29a      	uxth	r2, r3
 80120b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80120ba:	801a      	strh	r2, [r3, #0]
 80120bc:	e060      	b.n	8012180 <USB_EPStartXfer+0x155e>
 80120be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d10c      	bne.n	80120e0 <USB_EPStartXfer+0x14be>
 80120c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80120ca:	881b      	ldrh	r3, [r3, #0]
 80120cc:	b29b      	uxth	r3, r3
 80120ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120d6:	b29a      	uxth	r2, r3
 80120d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80120dc:	801a      	strh	r2, [r3, #0]
 80120de:	e04f      	b.n	8012180 <USB_EPStartXfer+0x155e>
 80120e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120e4:	085b      	lsrs	r3, r3, #1
 80120e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80120ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120ee:	f003 0301 	and.w	r3, r3, #1
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d004      	beq.n	8012100 <USB_EPStartXfer+0x14de>
 80120f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80120fa:	3301      	adds	r3, #1
 80120fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012100:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012104:	881b      	ldrh	r3, [r3, #0]
 8012106:	b29a      	uxth	r2, r3
 8012108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801210c:	b29b      	uxth	r3, r3
 801210e:	029b      	lsls	r3, r3, #10
 8012110:	b29b      	uxth	r3, r3
 8012112:	4313      	orrs	r3, r2
 8012114:	b29a      	uxth	r2, r3
 8012116:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801211a:	801a      	strh	r2, [r3, #0]
 801211c:	e030      	b.n	8012180 <USB_EPStartXfer+0x155e>
 801211e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	785b      	ldrb	r3, [r3, #1]
 801212a:	2b01      	cmp	r3, #1
 801212c:	d128      	bne.n	8012180 <USB_EPStartXfer+0x155e>
 801212e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012132:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801213c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012140:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801214a:	b29b      	uxth	r3, r3
 801214c:	461a      	mov	r2, r3
 801214e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012152:	4413      	add	r3, r2
 8012154:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801215c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	781b      	ldrb	r3, [r3, #0]
 8012164:	00da      	lsls	r2, r3, #3
 8012166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801216a:	4413      	add	r3, r2
 801216c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012178:	b29a      	uxth	r2, r3
 801217a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801217e:	801a      	strh	r2, [r3, #0]
 8012180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801218e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	785b      	ldrb	r3, [r3, #1]
 801219a:	2b00      	cmp	r3, #0
 801219c:	f040 8085 	bne.w	80122aa <USB_EPStartXfer+0x1688>
 80121a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80121ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80121bc:	b29b      	uxth	r3, r3
 80121be:	461a      	mov	r2, r3
 80121c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80121c4:	4413      	add	r3, r2
 80121c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80121ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	781b      	ldrb	r3, [r3, #0]
 80121d6:	00da      	lsls	r2, r3, #3
 80121d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80121dc:	4413      	add	r3, r2
 80121de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80121e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80121e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80121ea:	881b      	ldrh	r3, [r3, #0]
 80121ec:	b29b      	uxth	r3, r3
 80121ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80121f2:	b29a      	uxth	r2, r3
 80121f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80121f8:	801a      	strh	r2, [r3, #0]
 80121fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121fe:	2b3e      	cmp	r3, #62	; 0x3e
 8012200:	d923      	bls.n	801224a <USB_EPStartXfer+0x1628>
 8012202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012206:	095b      	lsrs	r3, r3, #5
 8012208:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801220c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012210:	f003 031f 	and.w	r3, r3, #31
 8012214:	2b00      	cmp	r3, #0
 8012216:	d104      	bne.n	8012222 <USB_EPStartXfer+0x1600>
 8012218:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801221c:	3b01      	subs	r3, #1
 801221e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012226:	881b      	ldrh	r3, [r3, #0]
 8012228:	b29a      	uxth	r2, r3
 801222a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801222e:	b29b      	uxth	r3, r3
 8012230:	029b      	lsls	r3, r3, #10
 8012232:	b29b      	uxth	r3, r3
 8012234:	4313      	orrs	r3, r2
 8012236:	b29b      	uxth	r3, r3
 8012238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801223c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012240:	b29a      	uxth	r2, r3
 8012242:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012246:	801a      	strh	r2, [r3, #0]
 8012248:	e05c      	b.n	8012304 <USB_EPStartXfer+0x16e2>
 801224a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801224e:	2b00      	cmp	r3, #0
 8012250:	d10c      	bne.n	801226c <USB_EPStartXfer+0x164a>
 8012252:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012256:	881b      	ldrh	r3, [r3, #0]
 8012258:	b29b      	uxth	r3, r3
 801225a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801225e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012262:	b29a      	uxth	r2, r3
 8012264:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012268:	801a      	strh	r2, [r3, #0]
 801226a:	e04b      	b.n	8012304 <USB_EPStartXfer+0x16e2>
 801226c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012270:	085b      	lsrs	r3, r3, #1
 8012272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801227a:	f003 0301 	and.w	r3, r3, #1
 801227e:	2b00      	cmp	r3, #0
 8012280:	d004      	beq.n	801228c <USB_EPStartXfer+0x166a>
 8012282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012286:	3301      	adds	r3, #1
 8012288:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801228c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012290:	881b      	ldrh	r3, [r3, #0]
 8012292:	b29a      	uxth	r2, r3
 8012294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012298:	b29b      	uxth	r3, r3
 801229a:	029b      	lsls	r3, r3, #10
 801229c:	b29b      	uxth	r3, r3
 801229e:	4313      	orrs	r3, r2
 80122a0:	b29a      	uxth	r2, r3
 80122a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80122a6:	801a      	strh	r2, [r3, #0]
 80122a8:	e02c      	b.n	8012304 <USB_EPStartXfer+0x16e2>
 80122aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	785b      	ldrb	r3, [r3, #1]
 80122b6:	2b01      	cmp	r3, #1
 80122b8:	d124      	bne.n	8012304 <USB_EPStartXfer+0x16e2>
 80122ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80122c8:	b29b      	uxth	r3, r3
 80122ca:	461a      	mov	r2, r3
 80122cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80122d0:	4413      	add	r3, r2
 80122d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80122d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	00da      	lsls	r2, r3, #3
 80122e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80122e8:	4413      	add	r3, r2
 80122ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80122ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80122f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122f6:	b29a      	uxth	r2, r3
 80122f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80122fc:	801a      	strh	r2, [r3, #0]
 80122fe:	e001      	b.n	8012304 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8012300:	2301      	movs	r3, #1
 8012302:	e03a      	b.n	801237a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012308:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801230c:	681a      	ldr	r2, [r3, #0]
 801230e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	781b      	ldrb	r3, [r3, #0]
 801231a:	009b      	lsls	r3, r3, #2
 801231c:	4413      	add	r3, r2
 801231e:	881b      	ldrh	r3, [r3, #0]
 8012320:	b29b      	uxth	r3, r3
 8012322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801232a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801232e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012332:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012336:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801233a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801233e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012342:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801234a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801234e:	681a      	ldr	r2, [r3, #0]
 8012350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	781b      	ldrb	r3, [r3, #0]
 801235c:	009b      	lsls	r3, r3, #2
 801235e:	441a      	add	r2, r3
 8012360:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801236c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012374:	b29b      	uxth	r3, r3
 8012376:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012378:	2300      	movs	r3, #0
}
 801237a:	4618      	mov	r0, r3
 801237c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}

08012384 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012384:	b480      	push	{r7}
 8012386:	b085      	sub	sp, #20
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
 801238c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801238e:	683b      	ldr	r3, [r7, #0]
 8012390:	785b      	ldrb	r3, [r3, #1]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d020      	beq.n	80123d8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012396:	687a      	ldr	r2, [r7, #4]
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	781b      	ldrb	r3, [r3, #0]
 801239c:	009b      	lsls	r3, r3, #2
 801239e:	4413      	add	r3, r2
 80123a0:	881b      	ldrh	r3, [r3, #0]
 80123a2:	b29b      	uxth	r3, r3
 80123a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80123a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80123ac:	81bb      	strh	r3, [r7, #12]
 80123ae:	89bb      	ldrh	r3, [r7, #12]
 80123b0:	f083 0310 	eor.w	r3, r3, #16
 80123b4:	81bb      	strh	r3, [r7, #12]
 80123b6:	687a      	ldr	r2, [r7, #4]
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	781b      	ldrb	r3, [r3, #0]
 80123bc:	009b      	lsls	r3, r3, #2
 80123be:	441a      	add	r2, r3
 80123c0:	89bb      	ldrh	r3, [r7, #12]
 80123c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80123c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80123ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80123ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123d2:	b29b      	uxth	r3, r3
 80123d4:	8013      	strh	r3, [r2, #0]
 80123d6:	e01f      	b.n	8012418 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80123d8:	687a      	ldr	r2, [r7, #4]
 80123da:	683b      	ldr	r3, [r7, #0]
 80123dc:	781b      	ldrb	r3, [r3, #0]
 80123de:	009b      	lsls	r3, r3, #2
 80123e0:	4413      	add	r3, r2
 80123e2:	881b      	ldrh	r3, [r3, #0]
 80123e4:	b29b      	uxth	r3, r3
 80123e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80123ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80123ee:	81fb      	strh	r3, [r7, #14]
 80123f0:	89fb      	ldrh	r3, [r7, #14]
 80123f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80123f6:	81fb      	strh	r3, [r7, #14]
 80123f8:	687a      	ldr	r2, [r7, #4]
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	781b      	ldrb	r3, [r3, #0]
 80123fe:	009b      	lsls	r3, r3, #2
 8012400:	441a      	add	r2, r3
 8012402:	89fb      	ldrh	r3, [r7, #14]
 8012404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801240c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012414:	b29b      	uxth	r3, r3
 8012416:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012418:	2300      	movs	r3, #0
}
 801241a:	4618      	mov	r0, r3
 801241c:	3714      	adds	r7, #20
 801241e:	46bd      	mov	sp, r7
 8012420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012424:	4770      	bx	lr

08012426 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012426:	b480      	push	{r7}
 8012428:	b087      	sub	sp, #28
 801242a:	af00      	add	r7, sp, #0
 801242c:	6078      	str	r0, [r7, #4]
 801242e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8012430:	683b      	ldr	r3, [r7, #0]
 8012432:	7b1b      	ldrb	r3, [r3, #12]
 8012434:	2b00      	cmp	r3, #0
 8012436:	f040 809d 	bne.w	8012574 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	785b      	ldrb	r3, [r3, #1]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d04c      	beq.n	80124dc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012442:	687a      	ldr	r2, [r7, #4]
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	781b      	ldrb	r3, [r3, #0]
 8012448:	009b      	lsls	r3, r3, #2
 801244a:	4413      	add	r3, r2
 801244c:	881b      	ldrh	r3, [r3, #0]
 801244e:	823b      	strh	r3, [r7, #16]
 8012450:	8a3b      	ldrh	r3, [r7, #16]
 8012452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012456:	2b00      	cmp	r3, #0
 8012458:	d01b      	beq.n	8012492 <USB_EPClearStall+0x6c>
 801245a:	687a      	ldr	r2, [r7, #4]
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	781b      	ldrb	r3, [r3, #0]
 8012460:	009b      	lsls	r3, r3, #2
 8012462:	4413      	add	r3, r2
 8012464:	881b      	ldrh	r3, [r3, #0]
 8012466:	b29b      	uxth	r3, r3
 8012468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801246c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012470:	81fb      	strh	r3, [r7, #14]
 8012472:	687a      	ldr	r2, [r7, #4]
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	781b      	ldrb	r3, [r3, #0]
 8012478:	009b      	lsls	r3, r3, #2
 801247a:	441a      	add	r2, r3
 801247c:	89fb      	ldrh	r3, [r7, #14]
 801247e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801248a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801248e:	b29b      	uxth	r3, r3
 8012490:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	78db      	ldrb	r3, [r3, #3]
 8012496:	2b01      	cmp	r3, #1
 8012498:	d06c      	beq.n	8012574 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801249a:	687a      	ldr	r2, [r7, #4]
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	781b      	ldrb	r3, [r3, #0]
 80124a0:	009b      	lsls	r3, r3, #2
 80124a2:	4413      	add	r3, r2
 80124a4:	881b      	ldrh	r3, [r3, #0]
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80124ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80124b0:	81bb      	strh	r3, [r7, #12]
 80124b2:	89bb      	ldrh	r3, [r7, #12]
 80124b4:	f083 0320 	eor.w	r3, r3, #32
 80124b8:	81bb      	strh	r3, [r7, #12]
 80124ba:	687a      	ldr	r2, [r7, #4]
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	781b      	ldrb	r3, [r3, #0]
 80124c0:	009b      	lsls	r3, r3, #2
 80124c2:	441a      	add	r2, r3
 80124c4:	89bb      	ldrh	r3, [r7, #12]
 80124c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80124ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80124ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80124d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124d6:	b29b      	uxth	r3, r3
 80124d8:	8013      	strh	r3, [r2, #0]
 80124da:	e04b      	b.n	8012574 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80124dc:	687a      	ldr	r2, [r7, #4]
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	781b      	ldrb	r3, [r3, #0]
 80124e2:	009b      	lsls	r3, r3, #2
 80124e4:	4413      	add	r3, r2
 80124e6:	881b      	ldrh	r3, [r3, #0]
 80124e8:	82fb      	strh	r3, [r7, #22]
 80124ea:	8afb      	ldrh	r3, [r7, #22]
 80124ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d01b      	beq.n	801252c <USB_EPClearStall+0x106>
 80124f4:	687a      	ldr	r2, [r7, #4]
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	781b      	ldrb	r3, [r3, #0]
 80124fa:	009b      	lsls	r3, r3, #2
 80124fc:	4413      	add	r3, r2
 80124fe:	881b      	ldrh	r3, [r3, #0]
 8012500:	b29b      	uxth	r3, r3
 8012502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801250a:	82bb      	strh	r3, [r7, #20]
 801250c:	687a      	ldr	r2, [r7, #4]
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	781b      	ldrb	r3, [r3, #0]
 8012512:	009b      	lsls	r3, r3, #2
 8012514:	441a      	add	r2, r3
 8012516:	8abb      	ldrh	r3, [r7, #20]
 8012518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801251c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012528:	b29b      	uxth	r3, r3
 801252a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801252c:	687a      	ldr	r2, [r7, #4]
 801252e:	683b      	ldr	r3, [r7, #0]
 8012530:	781b      	ldrb	r3, [r3, #0]
 8012532:	009b      	lsls	r3, r3, #2
 8012534:	4413      	add	r3, r2
 8012536:	881b      	ldrh	r3, [r3, #0]
 8012538:	b29b      	uxth	r3, r3
 801253a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801253e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012542:	827b      	strh	r3, [r7, #18]
 8012544:	8a7b      	ldrh	r3, [r7, #18]
 8012546:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801254a:	827b      	strh	r3, [r7, #18]
 801254c:	8a7b      	ldrh	r3, [r7, #18]
 801254e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012552:	827b      	strh	r3, [r7, #18]
 8012554:	687a      	ldr	r2, [r7, #4]
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	781b      	ldrb	r3, [r3, #0]
 801255a:	009b      	lsls	r3, r3, #2
 801255c:	441a      	add	r2, r3
 801255e:	8a7b      	ldrh	r3, [r7, #18]
 8012560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801256c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012570:	b29b      	uxth	r3, r3
 8012572:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8012574:	2300      	movs	r3, #0
}
 8012576:	4618      	mov	r0, r3
 8012578:	371c      	adds	r7, #28
 801257a:	46bd      	mov	sp, r7
 801257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012580:	4770      	bx	lr

08012582 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8012582:	b480      	push	{r7}
 8012584:	b083      	sub	sp, #12
 8012586:	af00      	add	r7, sp, #0
 8012588:	6078      	str	r0, [r7, #4]
 801258a:	460b      	mov	r3, r1
 801258c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 801258e:	78fb      	ldrb	r3, [r7, #3]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d103      	bne.n	801259c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	2280      	movs	r2, #128	; 0x80
 8012598:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 801259c:	2300      	movs	r3, #0
}
 801259e:	4618      	mov	r0, r3
 80125a0:	370c      	adds	r7, #12
 80125a2:	46bd      	mov	sp, r7
 80125a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a8:	4770      	bx	lr

080125aa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80125aa:	b480      	push	{r7}
 80125ac:	b083      	sub	sp, #12
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80125b8:	b29b      	uxth	r3, r3
 80125ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80125be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80125c2:	b29a      	uxth	r2, r3
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80125ca:	2300      	movs	r3, #0
}
 80125cc:	4618      	mov	r0, r3
 80125ce:	370c      	adds	r7, #12
 80125d0:	46bd      	mov	sp, r7
 80125d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d6:	4770      	bx	lr

080125d8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80125d8:	b480      	push	{r7}
 80125da:	b083      	sub	sp, #12
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80125ec:	b29a      	uxth	r2, r3
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80125f4:	2300      	movs	r3, #0
}
 80125f6:	4618      	mov	r0, r3
 80125f8:	370c      	adds	r7, #12
 80125fa:	46bd      	mov	sp, r7
 80125fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012600:	4770      	bx	lr

08012602 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8012602:	b480      	push	{r7}
 8012604:	b085      	sub	sp, #20
 8012606:	af00      	add	r7, sp, #0
 8012608:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8012610:	b29b      	uxth	r3, r3
 8012612:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8012614:	68fb      	ldr	r3, [r7, #12]
}
 8012616:	4618      	mov	r0, r3
 8012618:	3714      	adds	r7, #20
 801261a:	46bd      	mov	sp, r7
 801261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012620:	4770      	bx	lr

08012622 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8012622:	b480      	push	{r7}
 8012624:	b083      	sub	sp, #12
 8012626:	af00      	add	r7, sp, #0
 8012628:	6078      	str	r0, [r7, #4]
 801262a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 801262c:	2300      	movs	r3, #0
}
 801262e:	4618      	mov	r0, r3
 8012630:	370c      	adds	r7, #12
 8012632:	46bd      	mov	sp, r7
 8012634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012638:	4770      	bx	lr

0801263a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801263a:	b480      	push	{r7}
 801263c:	b08b      	sub	sp, #44	; 0x2c
 801263e:	af00      	add	r7, sp, #0
 8012640:	60f8      	str	r0, [r7, #12]
 8012642:	60b9      	str	r1, [r7, #8]
 8012644:	4611      	mov	r1, r2
 8012646:	461a      	mov	r2, r3
 8012648:	460b      	mov	r3, r1
 801264a:	80fb      	strh	r3, [r7, #6]
 801264c:	4613      	mov	r3, r2
 801264e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012650:	88bb      	ldrh	r3, [r7, #4]
 8012652:	3301      	adds	r3, #1
 8012654:	085b      	lsrs	r3, r3, #1
 8012656:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012660:	88fa      	ldrh	r2, [r7, #6]
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	4413      	add	r3, r2
 8012666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801266a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801266c:	69bb      	ldr	r3, [r7, #24]
 801266e:	627b      	str	r3, [r7, #36]	; 0x24
 8012670:	e01b      	b.n	80126aa <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8012672:	69fb      	ldr	r3, [r7, #28]
 8012674:	781b      	ldrb	r3, [r3, #0]
 8012676:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8012678:	69fb      	ldr	r3, [r7, #28]
 801267a:	3301      	adds	r3, #1
 801267c:	781b      	ldrb	r3, [r3, #0]
 801267e:	021b      	lsls	r3, r3, #8
 8012680:	b21a      	sxth	r2, r3
 8012682:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012686:	4313      	orrs	r3, r2
 8012688:	b21b      	sxth	r3, r3
 801268a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 801268c:	6a3b      	ldr	r3, [r7, #32]
 801268e:	8a7a      	ldrh	r2, [r7, #18]
 8012690:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012692:	6a3b      	ldr	r3, [r7, #32]
 8012694:	3302      	adds	r3, #2
 8012696:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8012698:	69fb      	ldr	r3, [r7, #28]
 801269a:	3301      	adds	r3, #1
 801269c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801269e:	69fb      	ldr	r3, [r7, #28]
 80126a0:	3301      	adds	r3, #1
 80126a2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80126a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a6:	3b01      	subs	r3, #1
 80126a8:	627b      	str	r3, [r7, #36]	; 0x24
 80126aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d1e0      	bne.n	8012672 <USB_WritePMA+0x38>
  }
}
 80126b0:	bf00      	nop
 80126b2:	bf00      	nop
 80126b4:	372c      	adds	r7, #44	; 0x2c
 80126b6:	46bd      	mov	sp, r7
 80126b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126bc:	4770      	bx	lr

080126be <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80126be:	b480      	push	{r7}
 80126c0:	b08b      	sub	sp, #44	; 0x2c
 80126c2:	af00      	add	r7, sp, #0
 80126c4:	60f8      	str	r0, [r7, #12]
 80126c6:	60b9      	str	r1, [r7, #8]
 80126c8:	4611      	mov	r1, r2
 80126ca:	461a      	mov	r2, r3
 80126cc:	460b      	mov	r3, r1
 80126ce:	80fb      	strh	r3, [r7, #6]
 80126d0:	4613      	mov	r3, r2
 80126d2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80126d4:	88bb      	ldrh	r3, [r7, #4]
 80126d6:	085b      	lsrs	r3, r3, #1
 80126d8:	b29b      	uxth	r3, r3
 80126da:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80126e0:	68bb      	ldr	r3, [r7, #8]
 80126e2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80126e4:	88fa      	ldrh	r2, [r7, #6]
 80126e6:	697b      	ldr	r3, [r7, #20]
 80126e8:	4413      	add	r3, r2
 80126ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80126ee:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80126f0:	69bb      	ldr	r3, [r7, #24]
 80126f2:	627b      	str	r3, [r7, #36]	; 0x24
 80126f4:	e018      	b.n	8012728 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80126f6:	6a3b      	ldr	r3, [r7, #32]
 80126f8:	881b      	ldrh	r3, [r3, #0]
 80126fa:	b29b      	uxth	r3, r3
 80126fc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80126fe:	6a3b      	ldr	r3, [r7, #32]
 8012700:	3302      	adds	r3, #2
 8012702:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012704:	693b      	ldr	r3, [r7, #16]
 8012706:	b2da      	uxtb	r2, r3
 8012708:	69fb      	ldr	r3, [r7, #28]
 801270a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801270c:	69fb      	ldr	r3, [r7, #28]
 801270e:	3301      	adds	r3, #1
 8012710:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8012712:	693b      	ldr	r3, [r7, #16]
 8012714:	0a1b      	lsrs	r3, r3, #8
 8012716:	b2da      	uxtb	r2, r3
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801271c:	69fb      	ldr	r3, [r7, #28]
 801271e:	3301      	adds	r3, #1
 8012720:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012724:	3b01      	subs	r3, #1
 8012726:	627b      	str	r3, [r7, #36]	; 0x24
 8012728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801272a:	2b00      	cmp	r3, #0
 801272c:	d1e3      	bne.n	80126f6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801272e:	88bb      	ldrh	r3, [r7, #4]
 8012730:	f003 0301 	and.w	r3, r3, #1
 8012734:	b29b      	uxth	r3, r3
 8012736:	2b00      	cmp	r3, #0
 8012738:	d007      	beq.n	801274a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 801273a:	6a3b      	ldr	r3, [r7, #32]
 801273c:	881b      	ldrh	r3, [r3, #0]
 801273e:	b29b      	uxth	r3, r3
 8012740:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012742:	693b      	ldr	r3, [r7, #16]
 8012744:	b2da      	uxtb	r2, r3
 8012746:	69fb      	ldr	r3, [r7, #28]
 8012748:	701a      	strb	r2, [r3, #0]
  }
}
 801274a:	bf00      	nop
 801274c:	372c      	adds	r7, #44	; 0x2c
 801274e:	46bd      	mov	sp, r7
 8012750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012754:	4770      	bx	lr
	...

08012758 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b084      	sub	sp, #16
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
 8012760:	460b      	mov	r3, r1
 8012762:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012764:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8012768:	f003 fa64 	bl	8015c34 <USBD_static_malloc>
 801276c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d109      	bne.n	8012788 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	32b0      	adds	r2, #176	; 0xb0
 801277e:	2100      	movs	r1, #0
 8012780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012784:	2302      	movs	r3, #2
 8012786:	e0d4      	b.n	8012932 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012788:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801278c:	2100      	movs	r1, #0
 801278e:	68f8      	ldr	r0, [r7, #12]
 8012790:	f005 fa03 	bl	8017b9a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	32b0      	adds	r2, #176	; 0xb0
 801279e:	68f9      	ldr	r1, [r7, #12]
 80127a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	32b0      	adds	r2, #176	; 0xb0
 80127ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	7c1b      	ldrb	r3, [r3, #16]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d138      	bne.n	8012832 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80127c0:	4b5e      	ldr	r3, [pc, #376]	; (801293c <USBD_CDC_Init+0x1e4>)
 80127c2:	7819      	ldrb	r1, [r3, #0]
 80127c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80127c8:	2202      	movs	r2, #2
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f003 f834 	bl	8015838 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80127d0:	4b5a      	ldr	r3, [pc, #360]	; (801293c <USBD_CDC_Init+0x1e4>)
 80127d2:	781b      	ldrb	r3, [r3, #0]
 80127d4:	f003 020f 	and.w	r2, r3, #15
 80127d8:	6879      	ldr	r1, [r7, #4]
 80127da:	4613      	mov	r3, r2
 80127dc:	009b      	lsls	r3, r3, #2
 80127de:	4413      	add	r3, r2
 80127e0:	009b      	lsls	r3, r3, #2
 80127e2:	440b      	add	r3, r1
 80127e4:	3324      	adds	r3, #36	; 0x24
 80127e6:	2201      	movs	r2, #1
 80127e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80127ea:	4b55      	ldr	r3, [pc, #340]	; (8012940 <USBD_CDC_Init+0x1e8>)
 80127ec:	7819      	ldrb	r1, [r3, #0]
 80127ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80127f2:	2202      	movs	r2, #2
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f003 f81f 	bl	8015838 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80127fa:	4b51      	ldr	r3, [pc, #324]	; (8012940 <USBD_CDC_Init+0x1e8>)
 80127fc:	781b      	ldrb	r3, [r3, #0]
 80127fe:	f003 020f 	and.w	r2, r3, #15
 8012802:	6879      	ldr	r1, [r7, #4]
 8012804:	4613      	mov	r3, r2
 8012806:	009b      	lsls	r3, r3, #2
 8012808:	4413      	add	r3, r2
 801280a:	009b      	lsls	r3, r3, #2
 801280c:	440b      	add	r3, r1
 801280e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012812:	2201      	movs	r2, #1
 8012814:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012816:	4b4b      	ldr	r3, [pc, #300]	; (8012944 <USBD_CDC_Init+0x1ec>)
 8012818:	781b      	ldrb	r3, [r3, #0]
 801281a:	f003 020f 	and.w	r2, r3, #15
 801281e:	6879      	ldr	r1, [r7, #4]
 8012820:	4613      	mov	r3, r2
 8012822:	009b      	lsls	r3, r3, #2
 8012824:	4413      	add	r3, r2
 8012826:	009b      	lsls	r3, r3, #2
 8012828:	440b      	add	r3, r1
 801282a:	3326      	adds	r3, #38	; 0x26
 801282c:	2210      	movs	r2, #16
 801282e:	801a      	strh	r2, [r3, #0]
 8012830:	e035      	b.n	801289e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012832:	4b42      	ldr	r3, [pc, #264]	; (801293c <USBD_CDC_Init+0x1e4>)
 8012834:	7819      	ldrb	r1, [r3, #0]
 8012836:	2340      	movs	r3, #64	; 0x40
 8012838:	2202      	movs	r2, #2
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f002 fffc 	bl	8015838 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012840:	4b3e      	ldr	r3, [pc, #248]	; (801293c <USBD_CDC_Init+0x1e4>)
 8012842:	781b      	ldrb	r3, [r3, #0]
 8012844:	f003 020f 	and.w	r2, r3, #15
 8012848:	6879      	ldr	r1, [r7, #4]
 801284a:	4613      	mov	r3, r2
 801284c:	009b      	lsls	r3, r3, #2
 801284e:	4413      	add	r3, r2
 8012850:	009b      	lsls	r3, r3, #2
 8012852:	440b      	add	r3, r1
 8012854:	3324      	adds	r3, #36	; 0x24
 8012856:	2201      	movs	r2, #1
 8012858:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801285a:	4b39      	ldr	r3, [pc, #228]	; (8012940 <USBD_CDC_Init+0x1e8>)
 801285c:	7819      	ldrb	r1, [r3, #0]
 801285e:	2340      	movs	r3, #64	; 0x40
 8012860:	2202      	movs	r2, #2
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f002 ffe8 	bl	8015838 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012868:	4b35      	ldr	r3, [pc, #212]	; (8012940 <USBD_CDC_Init+0x1e8>)
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	f003 020f 	and.w	r2, r3, #15
 8012870:	6879      	ldr	r1, [r7, #4]
 8012872:	4613      	mov	r3, r2
 8012874:	009b      	lsls	r3, r3, #2
 8012876:	4413      	add	r3, r2
 8012878:	009b      	lsls	r3, r3, #2
 801287a:	440b      	add	r3, r1
 801287c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012880:	2201      	movs	r2, #1
 8012882:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012884:	4b2f      	ldr	r3, [pc, #188]	; (8012944 <USBD_CDC_Init+0x1ec>)
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	f003 020f 	and.w	r2, r3, #15
 801288c:	6879      	ldr	r1, [r7, #4]
 801288e:	4613      	mov	r3, r2
 8012890:	009b      	lsls	r3, r3, #2
 8012892:	4413      	add	r3, r2
 8012894:	009b      	lsls	r3, r3, #2
 8012896:	440b      	add	r3, r1
 8012898:	3326      	adds	r3, #38	; 0x26
 801289a:	2210      	movs	r2, #16
 801289c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801289e:	4b29      	ldr	r3, [pc, #164]	; (8012944 <USBD_CDC_Init+0x1ec>)
 80128a0:	7819      	ldrb	r1, [r3, #0]
 80128a2:	2308      	movs	r3, #8
 80128a4:	2203      	movs	r2, #3
 80128a6:	6878      	ldr	r0, [r7, #4]
 80128a8:	f002 ffc6 	bl	8015838 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80128ac:	4b25      	ldr	r3, [pc, #148]	; (8012944 <USBD_CDC_Init+0x1ec>)
 80128ae:	781b      	ldrb	r3, [r3, #0]
 80128b0:	f003 020f 	and.w	r2, r3, #15
 80128b4:	6879      	ldr	r1, [r7, #4]
 80128b6:	4613      	mov	r3, r2
 80128b8:	009b      	lsls	r3, r3, #2
 80128ba:	4413      	add	r3, r2
 80128bc:	009b      	lsls	r3, r3, #2
 80128be:	440b      	add	r3, r1
 80128c0:	3324      	adds	r3, #36	; 0x24
 80128c2:	2201      	movs	r2, #1
 80128c4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	2200      	movs	r2, #0
 80128ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80128d4:	687a      	ldr	r2, [r7, #4]
 80128d6:	33b0      	adds	r3, #176	; 0xb0
 80128d8:	009b      	lsls	r3, r3, #2
 80128da:	4413      	add	r3, r2
 80128dc:	685b      	ldr	r3, [r3, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	2200      	movs	r2, #0
 80128e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	2200      	movs	r2, #0
 80128ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d101      	bne.n	8012900 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80128fc:	2302      	movs	r3, #2
 80128fe:	e018      	b.n	8012932 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	7c1b      	ldrb	r3, [r3, #16]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d10a      	bne.n	801291e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012908:	4b0d      	ldr	r3, [pc, #52]	; (8012940 <USBD_CDC_Init+0x1e8>)
 801290a:	7819      	ldrb	r1, [r3, #0]
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012916:	6878      	ldr	r0, [r7, #4]
 8012918:	f003 f90a 	bl	8015b30 <USBD_LL_PrepareReceive>
 801291c:	e008      	b.n	8012930 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801291e:	4b08      	ldr	r3, [pc, #32]	; (8012940 <USBD_CDC_Init+0x1e8>)
 8012920:	7819      	ldrb	r1, [r3, #0]
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012928:	2340      	movs	r3, #64	; 0x40
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f003 f900 	bl	8015b30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012930:	2300      	movs	r3, #0
}
 8012932:	4618      	mov	r0, r3
 8012934:	3710      	adds	r7, #16
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}
 801293a:	bf00      	nop
 801293c:	200000cb 	.word	0x200000cb
 8012940:	200000cc 	.word	0x200000cc
 8012944:	200000cd 	.word	0x200000cd

08012948 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b082      	sub	sp, #8
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
 8012950:	460b      	mov	r3, r1
 8012952:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012954:	4b3a      	ldr	r3, [pc, #232]	; (8012a40 <USBD_CDC_DeInit+0xf8>)
 8012956:	781b      	ldrb	r3, [r3, #0]
 8012958:	4619      	mov	r1, r3
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	f002 ffaa 	bl	80158b4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012960:	4b37      	ldr	r3, [pc, #220]	; (8012a40 <USBD_CDC_DeInit+0xf8>)
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	f003 020f 	and.w	r2, r3, #15
 8012968:	6879      	ldr	r1, [r7, #4]
 801296a:	4613      	mov	r3, r2
 801296c:	009b      	lsls	r3, r3, #2
 801296e:	4413      	add	r3, r2
 8012970:	009b      	lsls	r3, r3, #2
 8012972:	440b      	add	r3, r1
 8012974:	3324      	adds	r3, #36	; 0x24
 8012976:	2200      	movs	r2, #0
 8012978:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801297a:	4b32      	ldr	r3, [pc, #200]	; (8012a44 <USBD_CDC_DeInit+0xfc>)
 801297c:	781b      	ldrb	r3, [r3, #0]
 801297e:	4619      	mov	r1, r3
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f002 ff97 	bl	80158b4 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012986:	4b2f      	ldr	r3, [pc, #188]	; (8012a44 <USBD_CDC_DeInit+0xfc>)
 8012988:	781b      	ldrb	r3, [r3, #0]
 801298a:	f003 020f 	and.w	r2, r3, #15
 801298e:	6879      	ldr	r1, [r7, #4]
 8012990:	4613      	mov	r3, r2
 8012992:	009b      	lsls	r3, r3, #2
 8012994:	4413      	add	r3, r2
 8012996:	009b      	lsls	r3, r3, #2
 8012998:	440b      	add	r3, r1
 801299a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801299e:	2200      	movs	r2, #0
 80129a0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80129a2:	4b29      	ldr	r3, [pc, #164]	; (8012a48 <USBD_CDC_DeInit+0x100>)
 80129a4:	781b      	ldrb	r3, [r3, #0]
 80129a6:	4619      	mov	r1, r3
 80129a8:	6878      	ldr	r0, [r7, #4]
 80129aa:	f002 ff83 	bl	80158b4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80129ae:	4b26      	ldr	r3, [pc, #152]	; (8012a48 <USBD_CDC_DeInit+0x100>)
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	f003 020f 	and.w	r2, r3, #15
 80129b6:	6879      	ldr	r1, [r7, #4]
 80129b8:	4613      	mov	r3, r2
 80129ba:	009b      	lsls	r3, r3, #2
 80129bc:	4413      	add	r3, r2
 80129be:	009b      	lsls	r3, r3, #2
 80129c0:	440b      	add	r3, r1
 80129c2:	3324      	adds	r3, #36	; 0x24
 80129c4:	2200      	movs	r2, #0
 80129c6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80129c8:	4b1f      	ldr	r3, [pc, #124]	; (8012a48 <USBD_CDC_DeInit+0x100>)
 80129ca:	781b      	ldrb	r3, [r3, #0]
 80129cc:	f003 020f 	and.w	r2, r3, #15
 80129d0:	6879      	ldr	r1, [r7, #4]
 80129d2:	4613      	mov	r3, r2
 80129d4:	009b      	lsls	r3, r3, #2
 80129d6:	4413      	add	r3, r2
 80129d8:	009b      	lsls	r3, r3, #2
 80129da:	440b      	add	r3, r1
 80129dc:	3326      	adds	r3, #38	; 0x26
 80129de:	2200      	movs	r2, #0
 80129e0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	32b0      	adds	r2, #176	; 0xb0
 80129ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d01f      	beq.n	8012a34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80129fa:	687a      	ldr	r2, [r7, #4]
 80129fc:	33b0      	adds	r3, #176	; 0xb0
 80129fe:	009b      	lsls	r3, r3, #2
 8012a00:	4413      	add	r3, r2
 8012a02:	685b      	ldr	r3, [r3, #4]
 8012a04:	685b      	ldr	r3, [r3, #4]
 8012a06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	32b0      	adds	r2, #176	; 0xb0
 8012a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a16:	4618      	mov	r0, r3
 8012a18:	f003 f91a 	bl	8015c50 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	32b0      	adds	r2, #176	; 0xb0
 8012a26:	2100      	movs	r1, #0
 8012a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2200      	movs	r2, #0
 8012a30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012a34:	2300      	movs	r3, #0
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	3708      	adds	r7, #8
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}
 8012a3e:	bf00      	nop
 8012a40:	200000cb 	.word	0x200000cb
 8012a44:	200000cc 	.word	0x200000cc
 8012a48:	200000cd 	.word	0x200000cd

08012a4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b086      	sub	sp, #24
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
 8012a54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	32b0      	adds	r2, #176	; 0xb0
 8012a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012a66:	2300      	movs	r3, #0
 8012a68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012a72:	693b      	ldr	r3, [r7, #16]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d101      	bne.n	8012a7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012a78:	2303      	movs	r3, #3
 8012a7a:	e0bf      	b.n	8012bfc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d050      	beq.n	8012b2a <USBD_CDC_Setup+0xde>
 8012a88:	2b20      	cmp	r3, #32
 8012a8a:	f040 80af 	bne.w	8012bec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012a8e:	683b      	ldr	r3, [r7, #0]
 8012a90:	88db      	ldrh	r3, [r3, #6]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d03a      	beq.n	8012b0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012a96:	683b      	ldr	r3, [r7, #0]
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	b25b      	sxtb	r3, r3
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	da1b      	bge.n	8012ad8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012aa6:	687a      	ldr	r2, [r7, #4]
 8012aa8:	33b0      	adds	r3, #176	; 0xb0
 8012aaa:	009b      	lsls	r3, r3, #2
 8012aac:	4413      	add	r3, r2
 8012aae:	685b      	ldr	r3, [r3, #4]
 8012ab0:	689b      	ldr	r3, [r3, #8]
 8012ab2:	683a      	ldr	r2, [r7, #0]
 8012ab4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012ab6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012ab8:	683a      	ldr	r2, [r7, #0]
 8012aba:	88d2      	ldrh	r2, [r2, #6]
 8012abc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	88db      	ldrh	r3, [r3, #6]
 8012ac2:	2b07      	cmp	r3, #7
 8012ac4:	bf28      	it	cs
 8012ac6:	2307      	movcs	r3, #7
 8012ac8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012aca:	693b      	ldr	r3, [r7, #16]
 8012acc:	89fa      	ldrh	r2, [r7, #14]
 8012ace:	4619      	mov	r1, r3
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f001 fd21 	bl	8014518 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8012ad6:	e090      	b.n	8012bfa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	785a      	ldrb	r2, [r3, #1]
 8012adc:	693b      	ldr	r3, [r7, #16]
 8012ade:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8012ae2:	683b      	ldr	r3, [r7, #0]
 8012ae4:	88db      	ldrh	r3, [r3, #6]
 8012ae6:	2b3f      	cmp	r3, #63	; 0x3f
 8012ae8:	d803      	bhi.n	8012af2 <USBD_CDC_Setup+0xa6>
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	88db      	ldrh	r3, [r3, #6]
 8012aee:	b2da      	uxtb	r2, r3
 8012af0:	e000      	b.n	8012af4 <USBD_CDC_Setup+0xa8>
 8012af2:	2240      	movs	r2, #64	; 0x40
 8012af4:	693b      	ldr	r3, [r7, #16]
 8012af6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8012afa:	6939      	ldr	r1, [r7, #16]
 8012afc:	693b      	ldr	r3, [r7, #16]
 8012afe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8012b02:	461a      	mov	r2, r3
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f001 fd33 	bl	8014570 <USBD_CtlPrepareRx>
      break;
 8012b0a:	e076      	b.n	8012bfa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012b12:	687a      	ldr	r2, [r7, #4]
 8012b14:	33b0      	adds	r3, #176	; 0xb0
 8012b16:	009b      	lsls	r3, r3, #2
 8012b18:	4413      	add	r3, r2
 8012b1a:	685b      	ldr	r3, [r3, #4]
 8012b1c:	689b      	ldr	r3, [r3, #8]
 8012b1e:	683a      	ldr	r2, [r7, #0]
 8012b20:	7850      	ldrb	r0, [r2, #1]
 8012b22:	2200      	movs	r2, #0
 8012b24:	6839      	ldr	r1, [r7, #0]
 8012b26:	4798      	blx	r3
      break;
 8012b28:	e067      	b.n	8012bfa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012b2a:	683b      	ldr	r3, [r7, #0]
 8012b2c:	785b      	ldrb	r3, [r3, #1]
 8012b2e:	2b0b      	cmp	r3, #11
 8012b30:	d851      	bhi.n	8012bd6 <USBD_CDC_Setup+0x18a>
 8012b32:	a201      	add	r2, pc, #4	; (adr r2, 8012b38 <USBD_CDC_Setup+0xec>)
 8012b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b38:	08012b69 	.word	0x08012b69
 8012b3c:	08012be5 	.word	0x08012be5
 8012b40:	08012bd7 	.word	0x08012bd7
 8012b44:	08012bd7 	.word	0x08012bd7
 8012b48:	08012bd7 	.word	0x08012bd7
 8012b4c:	08012bd7 	.word	0x08012bd7
 8012b50:	08012bd7 	.word	0x08012bd7
 8012b54:	08012bd7 	.word	0x08012bd7
 8012b58:	08012bd7 	.word	0x08012bd7
 8012b5c:	08012bd7 	.word	0x08012bd7
 8012b60:	08012b93 	.word	0x08012b93
 8012b64:	08012bbd 	.word	0x08012bbd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b6e:	b2db      	uxtb	r3, r3
 8012b70:	2b03      	cmp	r3, #3
 8012b72:	d107      	bne.n	8012b84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012b74:	f107 030a 	add.w	r3, r7, #10
 8012b78:	2202      	movs	r2, #2
 8012b7a:	4619      	mov	r1, r3
 8012b7c:	6878      	ldr	r0, [r7, #4]
 8012b7e:	f001 fccb 	bl	8014518 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012b82:	e032      	b.n	8012bea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012b84:	6839      	ldr	r1, [r7, #0]
 8012b86:	6878      	ldr	r0, [r7, #4]
 8012b88:	f001 fc55 	bl	8014436 <USBD_CtlError>
            ret = USBD_FAIL;
 8012b8c:	2303      	movs	r3, #3
 8012b8e:	75fb      	strb	r3, [r7, #23]
          break;
 8012b90:	e02b      	b.n	8012bea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b98:	b2db      	uxtb	r3, r3
 8012b9a:	2b03      	cmp	r3, #3
 8012b9c:	d107      	bne.n	8012bae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012b9e:	f107 030d 	add.w	r3, r7, #13
 8012ba2:	2201      	movs	r2, #1
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	6878      	ldr	r0, [r7, #4]
 8012ba8:	f001 fcb6 	bl	8014518 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012bac:	e01d      	b.n	8012bea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012bae:	6839      	ldr	r1, [r7, #0]
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f001 fc40 	bl	8014436 <USBD_CtlError>
            ret = USBD_FAIL;
 8012bb6:	2303      	movs	r3, #3
 8012bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8012bba:	e016      	b.n	8012bea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012bc2:	b2db      	uxtb	r3, r3
 8012bc4:	2b03      	cmp	r3, #3
 8012bc6:	d00f      	beq.n	8012be8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8012bc8:	6839      	ldr	r1, [r7, #0]
 8012bca:	6878      	ldr	r0, [r7, #4]
 8012bcc:	f001 fc33 	bl	8014436 <USBD_CtlError>
            ret = USBD_FAIL;
 8012bd0:	2303      	movs	r3, #3
 8012bd2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012bd4:	e008      	b.n	8012be8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012bd6:	6839      	ldr	r1, [r7, #0]
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	f001 fc2c 	bl	8014436 <USBD_CtlError>
          ret = USBD_FAIL;
 8012bde:	2303      	movs	r3, #3
 8012be0:	75fb      	strb	r3, [r7, #23]
          break;
 8012be2:	e002      	b.n	8012bea <USBD_CDC_Setup+0x19e>
          break;
 8012be4:	bf00      	nop
 8012be6:	e008      	b.n	8012bfa <USBD_CDC_Setup+0x1ae>
          break;
 8012be8:	bf00      	nop
      }
      break;
 8012bea:	e006      	b.n	8012bfa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012bec:	6839      	ldr	r1, [r7, #0]
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f001 fc21 	bl	8014436 <USBD_CtlError>
      ret = USBD_FAIL;
 8012bf4:	2303      	movs	r3, #3
 8012bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8012bf8:	bf00      	nop
  }

  return (uint8_t)ret;
 8012bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	3718      	adds	r7, #24
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}

08012c04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b084      	sub	sp, #16
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
 8012c0c:	460b      	mov	r3, r1
 8012c0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012c16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	32b0      	adds	r2, #176	; 0xb0
 8012c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d101      	bne.n	8012c2e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8012c2a:	2303      	movs	r3, #3
 8012c2c:	e065      	b.n	8012cfa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	32b0      	adds	r2, #176	; 0xb0
 8012c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012c3e:	78fb      	ldrb	r3, [r7, #3]
 8012c40:	f003 020f 	and.w	r2, r3, #15
 8012c44:	6879      	ldr	r1, [r7, #4]
 8012c46:	4613      	mov	r3, r2
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	4413      	add	r3, r2
 8012c4c:	009b      	lsls	r3, r3, #2
 8012c4e:	440b      	add	r3, r1
 8012c50:	3318      	adds	r3, #24
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d02f      	beq.n	8012cb8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8012c58:	78fb      	ldrb	r3, [r7, #3]
 8012c5a:	f003 020f 	and.w	r2, r3, #15
 8012c5e:	6879      	ldr	r1, [r7, #4]
 8012c60:	4613      	mov	r3, r2
 8012c62:	009b      	lsls	r3, r3, #2
 8012c64:	4413      	add	r3, r2
 8012c66:	009b      	lsls	r3, r3, #2
 8012c68:	440b      	add	r3, r1
 8012c6a:	3318      	adds	r3, #24
 8012c6c:	681a      	ldr	r2, [r3, #0]
 8012c6e:	78fb      	ldrb	r3, [r7, #3]
 8012c70:	f003 010f 	and.w	r1, r3, #15
 8012c74:	68f8      	ldr	r0, [r7, #12]
 8012c76:	460b      	mov	r3, r1
 8012c78:	009b      	lsls	r3, r3, #2
 8012c7a:	440b      	add	r3, r1
 8012c7c:	00db      	lsls	r3, r3, #3
 8012c7e:	4403      	add	r3, r0
 8012c80:	3338      	adds	r3, #56	; 0x38
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	fbb2 f1f3 	udiv	r1, r2, r3
 8012c88:	fb01 f303 	mul.w	r3, r1, r3
 8012c8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d112      	bne.n	8012cb8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8012c92:	78fb      	ldrb	r3, [r7, #3]
 8012c94:	f003 020f 	and.w	r2, r3, #15
 8012c98:	6879      	ldr	r1, [r7, #4]
 8012c9a:	4613      	mov	r3, r2
 8012c9c:	009b      	lsls	r3, r3, #2
 8012c9e:	4413      	add	r3, r2
 8012ca0:	009b      	lsls	r3, r3, #2
 8012ca2:	440b      	add	r3, r1
 8012ca4:	3318      	adds	r3, #24
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012caa:	78f9      	ldrb	r1, [r7, #3]
 8012cac:	2300      	movs	r3, #0
 8012cae:	2200      	movs	r2, #0
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f002 ff05 	bl	8015ac0 <USBD_LL_Transmit>
 8012cb6:	e01f      	b.n	8012cf8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8012cb8:	68bb      	ldr	r3, [r7, #8]
 8012cba:	2200      	movs	r2, #0
 8012cbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012cc6:	687a      	ldr	r2, [r7, #4]
 8012cc8:	33b0      	adds	r3, #176	; 0xb0
 8012cca:	009b      	lsls	r3, r3, #2
 8012ccc:	4413      	add	r3, r2
 8012cce:	685b      	ldr	r3, [r3, #4]
 8012cd0:	691b      	ldr	r3, [r3, #16]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d010      	beq.n	8012cf8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012cdc:	687a      	ldr	r2, [r7, #4]
 8012cde:	33b0      	adds	r3, #176	; 0xb0
 8012ce0:	009b      	lsls	r3, r3, #2
 8012ce2:	4413      	add	r3, r2
 8012ce4:	685b      	ldr	r3, [r3, #4]
 8012ce6:	691b      	ldr	r3, [r3, #16]
 8012ce8:	68ba      	ldr	r2, [r7, #8]
 8012cea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8012cee:	68ba      	ldr	r2, [r7, #8]
 8012cf0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8012cf4:	78fa      	ldrb	r2, [r7, #3]
 8012cf6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012cf8:	2300      	movs	r3, #0
}
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	3710      	adds	r7, #16
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd80      	pop	{r7, pc}

08012d02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012d02:	b580      	push	{r7, lr}
 8012d04:	b084      	sub	sp, #16
 8012d06:	af00      	add	r7, sp, #0
 8012d08:	6078      	str	r0, [r7, #4]
 8012d0a:	460b      	mov	r3, r1
 8012d0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	32b0      	adds	r2, #176	; 0xb0
 8012d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	32b0      	adds	r2, #176	; 0xb0
 8012d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d101      	bne.n	8012d34 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8012d30:	2303      	movs	r3, #3
 8012d32:	e01a      	b.n	8012d6a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012d34:	78fb      	ldrb	r3, [r7, #3]
 8012d36:	4619      	mov	r1, r3
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	f002 ff31 	bl	8015ba0 <USBD_LL_GetRxDataSize>
 8012d3e:	4602      	mov	r2, r0
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012d4c:	687a      	ldr	r2, [r7, #4]
 8012d4e:	33b0      	adds	r3, #176	; 0xb0
 8012d50:	009b      	lsls	r3, r3, #2
 8012d52:	4413      	add	r3, r2
 8012d54:	685b      	ldr	r3, [r3, #4]
 8012d56:	68db      	ldr	r3, [r3, #12]
 8012d58:	68fa      	ldr	r2, [r7, #12]
 8012d5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8012d5e:	68fa      	ldr	r2, [r7, #12]
 8012d60:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8012d64:	4611      	mov	r1, r2
 8012d66:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012d68:	2300      	movs	r3, #0
}
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	3710      	adds	r7, #16
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd80      	pop	{r7, pc}

08012d72 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012d72:	b580      	push	{r7, lr}
 8012d74:	b084      	sub	sp, #16
 8012d76:	af00      	add	r7, sp, #0
 8012d78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	32b0      	adds	r2, #176	; 0xb0
 8012d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d101      	bne.n	8012d94 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012d90:	2303      	movs	r3, #3
 8012d92:	e025      	b.n	8012de0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012d9a:	687a      	ldr	r2, [r7, #4]
 8012d9c:	33b0      	adds	r3, #176	; 0xb0
 8012d9e:	009b      	lsls	r3, r3, #2
 8012da0:	4413      	add	r3, r2
 8012da2:	685b      	ldr	r3, [r3, #4]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d01a      	beq.n	8012dde <USBD_CDC_EP0_RxReady+0x6c>
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8012dae:	2bff      	cmp	r3, #255	; 0xff
 8012db0:	d015      	beq.n	8012dde <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012db8:	687a      	ldr	r2, [r7, #4]
 8012dba:	33b0      	adds	r3, #176	; 0xb0
 8012dbc:	009b      	lsls	r3, r3, #2
 8012dbe:	4413      	add	r3, r2
 8012dc0:	685b      	ldr	r3, [r3, #4]
 8012dc2:	689b      	ldr	r3, [r3, #8]
 8012dc4:	68fa      	ldr	r2, [r7, #12]
 8012dc6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8012dca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8012dcc:	68fa      	ldr	r2, [r7, #12]
 8012dce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012dd2:	b292      	uxth	r2, r2
 8012dd4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	22ff      	movs	r2, #255	; 0xff
 8012dda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8012dde:	2300      	movs	r3, #0
}
 8012de0:	4618      	mov	r0, r3
 8012de2:	3710      	adds	r7, #16
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}

08012de8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b086      	sub	sp, #24
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012df0:	2182      	movs	r1, #130	; 0x82
 8012df2:	4818      	ldr	r0, [pc, #96]	; (8012e54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012df4:	f000 fcbd 	bl	8013772 <USBD_GetEpDesc>
 8012df8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012dfa:	2101      	movs	r1, #1
 8012dfc:	4815      	ldr	r0, [pc, #84]	; (8012e54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012dfe:	f000 fcb8 	bl	8013772 <USBD_GetEpDesc>
 8012e02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012e04:	2181      	movs	r1, #129	; 0x81
 8012e06:	4813      	ldr	r0, [pc, #76]	; (8012e54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012e08:	f000 fcb3 	bl	8013772 <USBD_GetEpDesc>
 8012e0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012e0e:	697b      	ldr	r3, [r7, #20]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d002      	beq.n	8012e1a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	2210      	movs	r2, #16
 8012e18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d006      	beq.n	8012e2e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012e20:	693b      	ldr	r3, [r7, #16]
 8012e22:	2200      	movs	r2, #0
 8012e24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012e28:	711a      	strb	r2, [r3, #4]
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d006      	beq.n	8012e42 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	2200      	movs	r2, #0
 8012e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012e3c:	711a      	strb	r2, [r3, #4]
 8012e3e:	2200      	movs	r2, #0
 8012e40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	2243      	movs	r2, #67	; 0x43
 8012e46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012e48:	4b02      	ldr	r3, [pc, #8]	; (8012e54 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3718      	adds	r7, #24
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}
 8012e52:	bf00      	nop
 8012e54:	20000088 	.word	0x20000088

08012e58 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b086      	sub	sp, #24
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012e60:	2182      	movs	r1, #130	; 0x82
 8012e62:	4818      	ldr	r0, [pc, #96]	; (8012ec4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012e64:	f000 fc85 	bl	8013772 <USBD_GetEpDesc>
 8012e68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012e6a:	2101      	movs	r1, #1
 8012e6c:	4815      	ldr	r0, [pc, #84]	; (8012ec4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012e6e:	f000 fc80 	bl	8013772 <USBD_GetEpDesc>
 8012e72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012e74:	2181      	movs	r1, #129	; 0x81
 8012e76:	4813      	ldr	r0, [pc, #76]	; (8012ec4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012e78:	f000 fc7b 	bl	8013772 <USBD_GetEpDesc>
 8012e7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d002      	beq.n	8012e8a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8012e84:	697b      	ldr	r3, [r7, #20]
 8012e86:	2210      	movs	r2, #16
 8012e88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012e8a:	693b      	ldr	r3, [r7, #16]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d006      	beq.n	8012e9e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012e90:	693b      	ldr	r3, [r7, #16]
 8012e92:	2200      	movs	r2, #0
 8012e94:	711a      	strb	r2, [r3, #4]
 8012e96:	2200      	movs	r2, #0
 8012e98:	f042 0202 	orr.w	r2, r2, #2
 8012e9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d006      	beq.n	8012eb2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	711a      	strb	r2, [r3, #4]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	f042 0202 	orr.w	r2, r2, #2
 8012eb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	2243      	movs	r2, #67	; 0x43
 8012eb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012eb8:	4b02      	ldr	r3, [pc, #8]	; (8012ec4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3718      	adds	r7, #24
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}
 8012ec2:	bf00      	nop
 8012ec4:	20000088 	.word	0x20000088

08012ec8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b086      	sub	sp, #24
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012ed0:	2182      	movs	r1, #130	; 0x82
 8012ed2:	4818      	ldr	r0, [pc, #96]	; (8012f34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012ed4:	f000 fc4d 	bl	8013772 <USBD_GetEpDesc>
 8012ed8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012eda:	2101      	movs	r1, #1
 8012edc:	4815      	ldr	r0, [pc, #84]	; (8012f34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012ede:	f000 fc48 	bl	8013772 <USBD_GetEpDesc>
 8012ee2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012ee4:	2181      	movs	r1, #129	; 0x81
 8012ee6:	4813      	ldr	r0, [pc, #76]	; (8012f34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012ee8:	f000 fc43 	bl	8013772 <USBD_GetEpDesc>
 8012eec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d002      	beq.n	8012efa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	2210      	movs	r2, #16
 8012ef8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012efa:	693b      	ldr	r3, [r7, #16]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d006      	beq.n	8012f0e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012f00:	693b      	ldr	r3, [r7, #16]
 8012f02:	2200      	movs	r2, #0
 8012f04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012f08:	711a      	strb	r2, [r3, #4]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d006      	beq.n	8012f22 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	2200      	movs	r2, #0
 8012f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012f1c:	711a      	strb	r2, [r3, #4]
 8012f1e:	2200      	movs	r2, #0
 8012f20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	2243      	movs	r2, #67	; 0x43
 8012f26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012f28:	4b02      	ldr	r3, [pc, #8]	; (8012f34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	3718      	adds	r7, #24
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}
 8012f32:	bf00      	nop
 8012f34:	20000088 	.word	0x20000088

08012f38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012f38:	b480      	push	{r7}
 8012f3a:	b083      	sub	sp, #12
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	220a      	movs	r2, #10
 8012f44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8012f46:	4b03      	ldr	r3, [pc, #12]	; (8012f54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012f48:	4618      	mov	r0, r3
 8012f4a:	370c      	adds	r7, #12
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f52:	4770      	bx	lr
 8012f54:	20000044 	.word	0x20000044

08012f58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012f58:	b480      	push	{r7}
 8012f5a:	b083      	sub	sp, #12
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
 8012f60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d101      	bne.n	8012f6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012f68:	2303      	movs	r3, #3
 8012f6a:	e009      	b.n	8012f80 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012f72:	687a      	ldr	r2, [r7, #4]
 8012f74:	33b0      	adds	r3, #176	; 0xb0
 8012f76:	009b      	lsls	r3, r3, #2
 8012f78:	4413      	add	r3, r2
 8012f7a:	683a      	ldr	r2, [r7, #0]
 8012f7c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8012f7e:	2300      	movs	r3, #0
}
 8012f80:	4618      	mov	r0, r3
 8012f82:	370c      	adds	r7, #12
 8012f84:	46bd      	mov	sp, r7
 8012f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8a:	4770      	bx	lr

08012f8c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012f8c:	b480      	push	{r7}
 8012f8e:	b087      	sub	sp, #28
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	60f8      	str	r0, [r7, #12]
 8012f94:	60b9      	str	r1, [r7, #8]
 8012f96:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	32b0      	adds	r2, #176	; 0xb0
 8012fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fa6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012fa8:	697b      	ldr	r3, [r7, #20]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d101      	bne.n	8012fb2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012fae:	2303      	movs	r3, #3
 8012fb0:	e008      	b.n	8012fc4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	68ba      	ldr	r2, [r7, #8]
 8012fb6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8012fba:	697b      	ldr	r3, [r7, #20]
 8012fbc:	687a      	ldr	r2, [r7, #4]
 8012fbe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8012fc2:	2300      	movs	r3, #0
}
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	371c      	adds	r7, #28
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fce:	4770      	bx	lr

08012fd0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012fd0:	b480      	push	{r7}
 8012fd2:	b085      	sub	sp, #20
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
 8012fd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	32b0      	adds	r2, #176	; 0xb0
 8012fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fe8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d101      	bne.n	8012ff4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8012ff0:	2303      	movs	r3, #3
 8012ff2:	e004      	b.n	8012ffe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	683a      	ldr	r2, [r7, #0]
 8012ff8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8012ffc:	2300      	movs	r3, #0
}
 8012ffe:	4618      	mov	r0, r3
 8013000:	3714      	adds	r7, #20
 8013002:	46bd      	mov	sp, r7
 8013004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013008:	4770      	bx	lr
	...

0801300c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b084      	sub	sp, #16
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	32b0      	adds	r2, #176	; 0xb0
 801301e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013022:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013024:	2301      	movs	r3, #1
 8013026:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013028:	68bb      	ldr	r3, [r7, #8]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d101      	bne.n	8013032 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801302e:	2303      	movs	r3, #3
 8013030:	e025      	b.n	801307e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013032:	68bb      	ldr	r3, [r7, #8]
 8013034:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013038:	2b00      	cmp	r3, #0
 801303a:	d11f      	bne.n	801307c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801303c:	68bb      	ldr	r3, [r7, #8]
 801303e:	2201      	movs	r2, #1
 8013040:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013044:	4b10      	ldr	r3, [pc, #64]	; (8013088 <USBD_CDC_TransmitPacket+0x7c>)
 8013046:	781b      	ldrb	r3, [r3, #0]
 8013048:	f003 020f 	and.w	r2, r3, #15
 801304c:	68bb      	ldr	r3, [r7, #8]
 801304e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8013052:	6878      	ldr	r0, [r7, #4]
 8013054:	4613      	mov	r3, r2
 8013056:	009b      	lsls	r3, r3, #2
 8013058:	4413      	add	r3, r2
 801305a:	009b      	lsls	r3, r3, #2
 801305c:	4403      	add	r3, r0
 801305e:	3318      	adds	r3, #24
 8013060:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013062:	4b09      	ldr	r3, [pc, #36]	; (8013088 <USBD_CDC_TransmitPacket+0x7c>)
 8013064:	7819      	ldrb	r1, [r3, #0]
 8013066:	68bb      	ldr	r3, [r7, #8]
 8013068:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801306c:	68bb      	ldr	r3, [r7, #8]
 801306e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f002 fd24 	bl	8015ac0 <USBD_LL_Transmit>

    ret = USBD_OK;
 8013078:	2300      	movs	r3, #0
 801307a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801307c:	7bfb      	ldrb	r3, [r7, #15]
}
 801307e:	4618      	mov	r0, r3
 8013080:	3710      	adds	r7, #16
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	200000cb 	.word	0x200000cb

0801308c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b084      	sub	sp, #16
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	32b0      	adds	r2, #176	; 0xb0
 801309e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130a2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	32b0      	adds	r2, #176	; 0xb0
 80130ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d101      	bne.n	80130ba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80130b6:	2303      	movs	r3, #3
 80130b8:	e018      	b.n	80130ec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	7c1b      	ldrb	r3, [r3, #16]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d10a      	bne.n	80130d8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80130c2:	4b0c      	ldr	r3, [pc, #48]	; (80130f4 <USBD_CDC_ReceivePacket+0x68>)
 80130c4:	7819      	ldrb	r1, [r3, #0]
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80130cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	f002 fd2d 	bl	8015b30 <USBD_LL_PrepareReceive>
 80130d6:	e008      	b.n	80130ea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80130d8:	4b06      	ldr	r3, [pc, #24]	; (80130f4 <USBD_CDC_ReceivePacket+0x68>)
 80130da:	7819      	ldrb	r1, [r3, #0]
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80130e2:	2340      	movs	r3, #64	; 0x40
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f002 fd23 	bl	8015b30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80130ea:	2300      	movs	r3, #0
}
 80130ec:	4618      	mov	r0, r3
 80130ee:	3710      	adds	r7, #16
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd80      	pop	{r7, pc}
 80130f4:	200000cc 	.word	0x200000cc

080130f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b086      	sub	sp, #24
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	60f8      	str	r0, [r7, #12]
 8013100:	60b9      	str	r1, [r7, #8]
 8013102:	4613      	mov	r3, r2
 8013104:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d101      	bne.n	8013110 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801310c:	2303      	movs	r3, #3
 801310e:	e01f      	b.n	8013150 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	2200      	movs	r2, #0
 8013114:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	2200      	movs	r2, #0
 801311c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	2200      	movs	r2, #0
 8013124:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d003      	beq.n	8013136 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	68ba      	ldr	r2, [r7, #8]
 8013132:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	2201      	movs	r2, #1
 801313a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	79fa      	ldrb	r2, [r7, #7]
 8013142:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013144:	68f8      	ldr	r0, [r7, #12]
 8013146:	f002 fae3 	bl	8015710 <USBD_LL_Init>
 801314a:	4603      	mov	r3, r0
 801314c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801314e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013150:	4618      	mov	r0, r3
 8013152:	3718      	adds	r7, #24
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}

08013158 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b084      	sub	sp, #16
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
 8013160:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013162:	2300      	movs	r3, #0
 8013164:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013166:	683b      	ldr	r3, [r7, #0]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d101      	bne.n	8013170 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801316c:	2303      	movs	r3, #3
 801316e:	e025      	b.n	80131bc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	683a      	ldr	r2, [r7, #0]
 8013174:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	32ae      	adds	r2, #174	; 0xae
 8013182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013188:	2b00      	cmp	r3, #0
 801318a:	d00f      	beq.n	80131ac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	32ae      	adds	r2, #174	; 0xae
 8013196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801319c:	f107 020e 	add.w	r2, r7, #14
 80131a0:	4610      	mov	r0, r2
 80131a2:	4798      	blx	r3
 80131a4:	4602      	mov	r2, r0
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80131b2:	1c5a      	adds	r2, r3, #1
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80131ba:	2300      	movs	r3, #0
}
 80131bc:	4618      	mov	r0, r3
 80131be:	3710      	adds	r7, #16
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd80      	pop	{r7, pc}

080131c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b082      	sub	sp, #8
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80131cc:	6878      	ldr	r0, [r7, #4]
 80131ce:	f002 fb01 	bl	80157d4 <USBD_LL_Start>
 80131d2:	4603      	mov	r3, r0
}
 80131d4:	4618      	mov	r0, r3
 80131d6:	3708      	adds	r7, #8
 80131d8:	46bd      	mov	sp, r7
 80131da:	bd80      	pop	{r7, pc}

080131dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80131dc:	b480      	push	{r7}
 80131de:	b083      	sub	sp, #12
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80131e4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	370c      	adds	r7, #12
 80131ea:	46bd      	mov	sp, r7
 80131ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f0:	4770      	bx	lr

080131f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80131f2:	b580      	push	{r7, lr}
 80131f4:	b084      	sub	sp, #16
 80131f6:	af00      	add	r7, sp, #0
 80131f8:	6078      	str	r0, [r7, #4]
 80131fa:	460b      	mov	r3, r1
 80131fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80131fe:	2300      	movs	r3, #0
 8013200:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013208:	2b00      	cmp	r3, #0
 801320a:	d009      	beq.n	8013220 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	78fa      	ldrb	r2, [r7, #3]
 8013216:	4611      	mov	r1, r2
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	4798      	blx	r3
 801321c:	4603      	mov	r3, r0
 801321e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013220:	7bfb      	ldrb	r3, [r7, #15]
}
 8013222:	4618      	mov	r0, r3
 8013224:	3710      	adds	r7, #16
 8013226:	46bd      	mov	sp, r7
 8013228:	bd80      	pop	{r7, pc}

0801322a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801322a:	b580      	push	{r7, lr}
 801322c:	b084      	sub	sp, #16
 801322e:	af00      	add	r7, sp, #0
 8013230:	6078      	str	r0, [r7, #4]
 8013232:	460b      	mov	r3, r1
 8013234:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013236:	2300      	movs	r3, #0
 8013238:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013240:	685b      	ldr	r3, [r3, #4]
 8013242:	78fa      	ldrb	r2, [r7, #3]
 8013244:	4611      	mov	r1, r2
 8013246:	6878      	ldr	r0, [r7, #4]
 8013248:	4798      	blx	r3
 801324a:	4603      	mov	r3, r0
 801324c:	2b00      	cmp	r3, #0
 801324e:	d001      	beq.n	8013254 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013250:	2303      	movs	r3, #3
 8013252:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013254:	7bfb      	ldrb	r3, [r7, #15]
}
 8013256:	4618      	mov	r0, r3
 8013258:	3710      	adds	r7, #16
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}

0801325e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801325e:	b580      	push	{r7, lr}
 8013260:	b084      	sub	sp, #16
 8013262:	af00      	add	r7, sp, #0
 8013264:	6078      	str	r0, [r7, #4]
 8013266:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801326e:	6839      	ldr	r1, [r7, #0]
 8013270:	4618      	mov	r0, r3
 8013272:	f001 f8a6 	bl	80143c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	2201      	movs	r2, #1
 801327a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013284:	461a      	mov	r2, r3
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013292:	f003 031f 	and.w	r3, r3, #31
 8013296:	2b02      	cmp	r3, #2
 8013298:	d01a      	beq.n	80132d0 <USBD_LL_SetupStage+0x72>
 801329a:	2b02      	cmp	r3, #2
 801329c:	d822      	bhi.n	80132e4 <USBD_LL_SetupStage+0x86>
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d002      	beq.n	80132a8 <USBD_LL_SetupStage+0x4a>
 80132a2:	2b01      	cmp	r3, #1
 80132a4:	d00a      	beq.n	80132bc <USBD_LL_SetupStage+0x5e>
 80132a6:	e01d      	b.n	80132e4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80132ae:	4619      	mov	r1, r3
 80132b0:	6878      	ldr	r0, [r7, #4]
 80132b2:	f000 fad3 	bl	801385c <USBD_StdDevReq>
 80132b6:	4603      	mov	r3, r0
 80132b8:	73fb      	strb	r3, [r7, #15]
      break;
 80132ba:	e020      	b.n	80132fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80132c2:	4619      	mov	r1, r3
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f000 fb3b 	bl	8013940 <USBD_StdItfReq>
 80132ca:	4603      	mov	r3, r0
 80132cc:	73fb      	strb	r3, [r7, #15]
      break;
 80132ce:	e016      	b.n	80132fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80132d6:	4619      	mov	r1, r3
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f000 fb9d 	bl	8013a18 <USBD_StdEPReq>
 80132de:	4603      	mov	r3, r0
 80132e0:	73fb      	strb	r3, [r7, #15]
      break;
 80132e2:	e00c      	b.n	80132fe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80132ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80132ee:	b2db      	uxtb	r3, r3
 80132f0:	4619      	mov	r1, r3
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f002 fb14 	bl	8015920 <USBD_LL_StallEP>
 80132f8:	4603      	mov	r3, r0
 80132fa:	73fb      	strb	r3, [r7, #15]
      break;
 80132fc:	bf00      	nop
  }

  return ret;
 80132fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8013300:	4618      	mov	r0, r3
 8013302:	3710      	adds	r7, #16
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}

08013308 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b086      	sub	sp, #24
 801330c:	af00      	add	r7, sp, #0
 801330e:	60f8      	str	r0, [r7, #12]
 8013310:	460b      	mov	r3, r1
 8013312:	607a      	str	r2, [r7, #4]
 8013314:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013316:	2300      	movs	r3, #0
 8013318:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801331a:	7afb      	ldrb	r3, [r7, #11]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d16e      	bne.n	80133fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013326:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801332e:	2b03      	cmp	r3, #3
 8013330:	f040 8098 	bne.w	8013464 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013334:	693b      	ldr	r3, [r7, #16]
 8013336:	689a      	ldr	r2, [r3, #8]
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	68db      	ldr	r3, [r3, #12]
 801333c:	429a      	cmp	r2, r3
 801333e:	d913      	bls.n	8013368 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013340:	693b      	ldr	r3, [r7, #16]
 8013342:	689a      	ldr	r2, [r3, #8]
 8013344:	693b      	ldr	r3, [r7, #16]
 8013346:	68db      	ldr	r3, [r3, #12]
 8013348:	1ad2      	subs	r2, r2, r3
 801334a:	693b      	ldr	r3, [r7, #16]
 801334c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	68da      	ldr	r2, [r3, #12]
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	689b      	ldr	r3, [r3, #8]
 8013356:	4293      	cmp	r3, r2
 8013358:	bf28      	it	cs
 801335a:	4613      	movcs	r3, r2
 801335c:	461a      	mov	r2, r3
 801335e:	6879      	ldr	r1, [r7, #4]
 8013360:	68f8      	ldr	r0, [r7, #12]
 8013362:	f001 f922 	bl	80145aa <USBD_CtlContinueRx>
 8013366:	e07d      	b.n	8013464 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801336e:	f003 031f 	and.w	r3, r3, #31
 8013372:	2b02      	cmp	r3, #2
 8013374:	d014      	beq.n	80133a0 <USBD_LL_DataOutStage+0x98>
 8013376:	2b02      	cmp	r3, #2
 8013378:	d81d      	bhi.n	80133b6 <USBD_LL_DataOutStage+0xae>
 801337a:	2b00      	cmp	r3, #0
 801337c:	d002      	beq.n	8013384 <USBD_LL_DataOutStage+0x7c>
 801337e:	2b01      	cmp	r3, #1
 8013380:	d003      	beq.n	801338a <USBD_LL_DataOutStage+0x82>
 8013382:	e018      	b.n	80133b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013384:	2300      	movs	r3, #0
 8013386:	75bb      	strb	r3, [r7, #22]
            break;
 8013388:	e018      	b.n	80133bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013390:	b2db      	uxtb	r3, r3
 8013392:	4619      	mov	r1, r3
 8013394:	68f8      	ldr	r0, [r7, #12]
 8013396:	f000 f9d2 	bl	801373e <USBD_CoreFindIF>
 801339a:	4603      	mov	r3, r0
 801339c:	75bb      	strb	r3, [r7, #22]
            break;
 801339e:	e00d      	b.n	80133bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80133a6:	b2db      	uxtb	r3, r3
 80133a8:	4619      	mov	r1, r3
 80133aa:	68f8      	ldr	r0, [r7, #12]
 80133ac:	f000 f9d4 	bl	8013758 <USBD_CoreFindEP>
 80133b0:	4603      	mov	r3, r0
 80133b2:	75bb      	strb	r3, [r7, #22]
            break;
 80133b4:	e002      	b.n	80133bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80133b6:	2300      	movs	r3, #0
 80133b8:	75bb      	strb	r3, [r7, #22]
            break;
 80133ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80133bc:	7dbb      	ldrb	r3, [r7, #22]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d119      	bne.n	80133f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80133c8:	b2db      	uxtb	r3, r3
 80133ca:	2b03      	cmp	r3, #3
 80133cc:	d113      	bne.n	80133f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80133ce:	7dba      	ldrb	r2, [r7, #22]
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	32ae      	adds	r2, #174	; 0xae
 80133d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133d8:	691b      	ldr	r3, [r3, #16]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d00b      	beq.n	80133f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80133de:	7dba      	ldrb	r2, [r7, #22]
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80133e6:	7dba      	ldrb	r2, [r7, #22]
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	32ae      	adds	r2, #174	; 0xae
 80133ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133f0:	691b      	ldr	r3, [r3, #16]
 80133f2:	68f8      	ldr	r0, [r7, #12]
 80133f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80133f6:	68f8      	ldr	r0, [r7, #12]
 80133f8:	f001 f8e8 	bl	80145cc <USBD_CtlSendStatus>
 80133fc:	e032      	b.n	8013464 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80133fe:	7afb      	ldrb	r3, [r7, #11]
 8013400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013404:	b2db      	uxtb	r3, r3
 8013406:	4619      	mov	r1, r3
 8013408:	68f8      	ldr	r0, [r7, #12]
 801340a:	f000 f9a5 	bl	8013758 <USBD_CoreFindEP>
 801340e:	4603      	mov	r3, r0
 8013410:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013412:	7dbb      	ldrb	r3, [r7, #22]
 8013414:	2bff      	cmp	r3, #255	; 0xff
 8013416:	d025      	beq.n	8013464 <USBD_LL_DataOutStage+0x15c>
 8013418:	7dbb      	ldrb	r3, [r7, #22]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d122      	bne.n	8013464 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013424:	b2db      	uxtb	r3, r3
 8013426:	2b03      	cmp	r3, #3
 8013428:	d117      	bne.n	801345a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801342a:	7dba      	ldrb	r2, [r7, #22]
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	32ae      	adds	r2, #174	; 0xae
 8013430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013434:	699b      	ldr	r3, [r3, #24]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d00f      	beq.n	801345a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801343a:	7dba      	ldrb	r2, [r7, #22]
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013442:	7dba      	ldrb	r2, [r7, #22]
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	32ae      	adds	r2, #174	; 0xae
 8013448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801344c:	699b      	ldr	r3, [r3, #24]
 801344e:	7afa      	ldrb	r2, [r7, #11]
 8013450:	4611      	mov	r1, r2
 8013452:	68f8      	ldr	r0, [r7, #12]
 8013454:	4798      	blx	r3
 8013456:	4603      	mov	r3, r0
 8013458:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801345a:	7dfb      	ldrb	r3, [r7, #23]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d001      	beq.n	8013464 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013460:	7dfb      	ldrb	r3, [r7, #23]
 8013462:	e000      	b.n	8013466 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013464:	2300      	movs	r3, #0
}
 8013466:	4618      	mov	r0, r3
 8013468:	3718      	adds	r7, #24
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}

0801346e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801346e:	b580      	push	{r7, lr}
 8013470:	b086      	sub	sp, #24
 8013472:	af00      	add	r7, sp, #0
 8013474:	60f8      	str	r0, [r7, #12]
 8013476:	460b      	mov	r3, r1
 8013478:	607a      	str	r2, [r7, #4]
 801347a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801347c:	7afb      	ldrb	r3, [r7, #11]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d16f      	bne.n	8013562 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	3314      	adds	r3, #20
 8013486:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801348e:	2b02      	cmp	r3, #2
 8013490:	d15a      	bne.n	8013548 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013492:	693b      	ldr	r3, [r7, #16]
 8013494:	689a      	ldr	r2, [r3, #8]
 8013496:	693b      	ldr	r3, [r7, #16]
 8013498:	68db      	ldr	r3, [r3, #12]
 801349a:	429a      	cmp	r2, r3
 801349c:	d914      	bls.n	80134c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	689a      	ldr	r2, [r3, #8]
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	68db      	ldr	r3, [r3, #12]
 80134a6:	1ad2      	subs	r2, r2, r3
 80134a8:	693b      	ldr	r3, [r7, #16]
 80134aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80134ac:	693b      	ldr	r3, [r7, #16]
 80134ae:	689b      	ldr	r3, [r3, #8]
 80134b0:	461a      	mov	r2, r3
 80134b2:	6879      	ldr	r1, [r7, #4]
 80134b4:	68f8      	ldr	r0, [r7, #12]
 80134b6:	f001 f84a 	bl	801454e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80134ba:	2300      	movs	r3, #0
 80134bc:	2200      	movs	r2, #0
 80134be:	2100      	movs	r1, #0
 80134c0:	68f8      	ldr	r0, [r7, #12]
 80134c2:	f002 fb35 	bl	8015b30 <USBD_LL_PrepareReceive>
 80134c6:	e03f      	b.n	8013548 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80134c8:	693b      	ldr	r3, [r7, #16]
 80134ca:	68da      	ldr	r2, [r3, #12]
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	689b      	ldr	r3, [r3, #8]
 80134d0:	429a      	cmp	r2, r3
 80134d2:	d11c      	bne.n	801350e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80134d4:	693b      	ldr	r3, [r7, #16]
 80134d6:	685a      	ldr	r2, [r3, #4]
 80134d8:	693b      	ldr	r3, [r7, #16]
 80134da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80134dc:	429a      	cmp	r2, r3
 80134de:	d316      	bcc.n	801350e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80134e0:	693b      	ldr	r3, [r7, #16]
 80134e2:	685a      	ldr	r2, [r3, #4]
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80134ea:	429a      	cmp	r2, r3
 80134ec:	d20f      	bcs.n	801350e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80134ee:	2200      	movs	r2, #0
 80134f0:	2100      	movs	r1, #0
 80134f2:	68f8      	ldr	r0, [r7, #12]
 80134f4:	f001 f82b 	bl	801454e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	2200      	movs	r2, #0
 80134fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013500:	2300      	movs	r3, #0
 8013502:	2200      	movs	r2, #0
 8013504:	2100      	movs	r1, #0
 8013506:	68f8      	ldr	r0, [r7, #12]
 8013508:	f002 fb12 	bl	8015b30 <USBD_LL_PrepareReceive>
 801350c:	e01c      	b.n	8013548 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013514:	b2db      	uxtb	r3, r3
 8013516:	2b03      	cmp	r3, #3
 8013518:	d10f      	bne.n	801353a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013520:	68db      	ldr	r3, [r3, #12]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d009      	beq.n	801353a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	2200      	movs	r2, #0
 801352a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013534:	68db      	ldr	r3, [r3, #12]
 8013536:	68f8      	ldr	r0, [r7, #12]
 8013538:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801353a:	2180      	movs	r1, #128	; 0x80
 801353c:	68f8      	ldr	r0, [r7, #12]
 801353e:	f002 f9ef 	bl	8015920 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013542:	68f8      	ldr	r0, [r7, #12]
 8013544:	f001 f855 	bl	80145f2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801354e:	2b00      	cmp	r3, #0
 8013550:	d03a      	beq.n	80135c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013552:	68f8      	ldr	r0, [r7, #12]
 8013554:	f7ff fe42 	bl	80131dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	2200      	movs	r2, #0
 801355c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013560:	e032      	b.n	80135c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013562:	7afb      	ldrb	r3, [r7, #11]
 8013564:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013568:	b2db      	uxtb	r3, r3
 801356a:	4619      	mov	r1, r3
 801356c:	68f8      	ldr	r0, [r7, #12]
 801356e:	f000 f8f3 	bl	8013758 <USBD_CoreFindEP>
 8013572:	4603      	mov	r3, r0
 8013574:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013576:	7dfb      	ldrb	r3, [r7, #23]
 8013578:	2bff      	cmp	r3, #255	; 0xff
 801357a:	d025      	beq.n	80135c8 <USBD_LL_DataInStage+0x15a>
 801357c:	7dfb      	ldrb	r3, [r7, #23]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d122      	bne.n	80135c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013588:	b2db      	uxtb	r3, r3
 801358a:	2b03      	cmp	r3, #3
 801358c:	d11c      	bne.n	80135c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801358e:	7dfa      	ldrb	r2, [r7, #23]
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	32ae      	adds	r2, #174	; 0xae
 8013594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013598:	695b      	ldr	r3, [r3, #20]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d014      	beq.n	80135c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801359e:	7dfa      	ldrb	r2, [r7, #23]
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80135a6:	7dfa      	ldrb	r2, [r7, #23]
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	32ae      	adds	r2, #174	; 0xae
 80135ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135b0:	695b      	ldr	r3, [r3, #20]
 80135b2:	7afa      	ldrb	r2, [r7, #11]
 80135b4:	4611      	mov	r1, r2
 80135b6:	68f8      	ldr	r0, [r7, #12]
 80135b8:	4798      	blx	r3
 80135ba:	4603      	mov	r3, r0
 80135bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80135be:	7dbb      	ldrb	r3, [r7, #22]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d001      	beq.n	80135c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80135c4:	7dbb      	ldrb	r3, [r7, #22]
 80135c6:	e000      	b.n	80135ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80135c8:	2300      	movs	r3, #0
}
 80135ca:	4618      	mov	r0, r3
 80135cc:	3718      	adds	r7, #24
 80135ce:	46bd      	mov	sp, r7
 80135d0:	bd80      	pop	{r7, pc}

080135d2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80135d2:	b580      	push	{r7, lr}
 80135d4:	b084      	sub	sp, #16
 80135d6:	af00      	add	r7, sp, #0
 80135d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80135da:	2300      	movs	r3, #0
 80135dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	2201      	movs	r2, #1
 80135e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	2200      	movs	r2, #0
 80135ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2200      	movs	r2, #0
 80135f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	2200      	movs	r2, #0
 80135f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	2200      	movs	r2, #0
 8013600:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801360a:	2b00      	cmp	r3, #0
 801360c:	d014      	beq.n	8013638 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013614:	685b      	ldr	r3, [r3, #4]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d00e      	beq.n	8013638 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013620:	685b      	ldr	r3, [r3, #4]
 8013622:	687a      	ldr	r2, [r7, #4]
 8013624:	6852      	ldr	r2, [r2, #4]
 8013626:	b2d2      	uxtb	r2, r2
 8013628:	4611      	mov	r1, r2
 801362a:	6878      	ldr	r0, [r7, #4]
 801362c:	4798      	blx	r3
 801362e:	4603      	mov	r3, r0
 8013630:	2b00      	cmp	r3, #0
 8013632:	d001      	beq.n	8013638 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013634:	2303      	movs	r3, #3
 8013636:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013638:	2340      	movs	r3, #64	; 0x40
 801363a:	2200      	movs	r2, #0
 801363c:	2100      	movs	r1, #0
 801363e:	6878      	ldr	r0, [r7, #4]
 8013640:	f002 f8fa 	bl	8015838 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2201      	movs	r2, #1
 8013648:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2240      	movs	r2, #64	; 0x40
 8013650:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013654:	2340      	movs	r3, #64	; 0x40
 8013656:	2200      	movs	r2, #0
 8013658:	2180      	movs	r1, #128	; 0x80
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	f002 f8ec 	bl	8015838 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	2201      	movs	r2, #1
 8013664:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	2240      	movs	r2, #64	; 0x40
 801366a:	621a      	str	r2, [r3, #32]

  return ret;
 801366c:	7bfb      	ldrb	r3, [r7, #15]
}
 801366e:	4618      	mov	r0, r3
 8013670:	3710      	adds	r7, #16
 8013672:	46bd      	mov	sp, r7
 8013674:	bd80      	pop	{r7, pc}

08013676 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013676:	b480      	push	{r7}
 8013678:	b083      	sub	sp, #12
 801367a:	af00      	add	r7, sp, #0
 801367c:	6078      	str	r0, [r7, #4]
 801367e:	460b      	mov	r3, r1
 8013680:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	78fa      	ldrb	r2, [r7, #3]
 8013686:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013688:	2300      	movs	r3, #0
}
 801368a:	4618      	mov	r0, r3
 801368c:	370c      	adds	r7, #12
 801368e:	46bd      	mov	sp, r7
 8013690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013694:	4770      	bx	lr

08013696 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013696:	b480      	push	{r7}
 8013698:	b083      	sub	sp, #12
 801369a:	af00      	add	r7, sp, #0
 801369c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136a4:	b2db      	uxtb	r3, r3
 80136a6:	2b04      	cmp	r3, #4
 80136a8:	d006      	beq.n	80136b8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136b0:	b2da      	uxtb	r2, r3
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	2204      	movs	r2, #4
 80136bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80136c0:	2300      	movs	r3, #0
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	370c      	adds	r7, #12
 80136c6:	46bd      	mov	sp, r7
 80136c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136cc:	4770      	bx	lr

080136ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80136ce:	b480      	push	{r7}
 80136d0:	b083      	sub	sp, #12
 80136d2:	af00      	add	r7, sp, #0
 80136d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136dc:	b2db      	uxtb	r3, r3
 80136de:	2b04      	cmp	r3, #4
 80136e0:	d106      	bne.n	80136f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80136e8:	b2da      	uxtb	r2, r3
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80136f0:	2300      	movs	r3, #0
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	370c      	adds	r7, #12
 80136f6:	46bd      	mov	sp, r7
 80136f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fc:	4770      	bx	lr

080136fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80136fe:	b580      	push	{r7, lr}
 8013700:	b082      	sub	sp, #8
 8013702:	af00      	add	r7, sp, #0
 8013704:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801370c:	b2db      	uxtb	r3, r3
 801370e:	2b03      	cmp	r3, #3
 8013710:	d110      	bne.n	8013734 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013718:	2b00      	cmp	r3, #0
 801371a:	d00b      	beq.n	8013734 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013722:	69db      	ldr	r3, [r3, #28]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d005      	beq.n	8013734 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801372e:	69db      	ldr	r3, [r3, #28]
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013734:	2300      	movs	r3, #0
}
 8013736:	4618      	mov	r0, r3
 8013738:	3708      	adds	r7, #8
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}

0801373e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801373e:	b480      	push	{r7}
 8013740:	b083      	sub	sp, #12
 8013742:	af00      	add	r7, sp, #0
 8013744:	6078      	str	r0, [r7, #4]
 8013746:	460b      	mov	r3, r1
 8013748:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801374a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801374c:	4618      	mov	r0, r3
 801374e:	370c      	adds	r7, #12
 8013750:	46bd      	mov	sp, r7
 8013752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013756:	4770      	bx	lr

08013758 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013758:	b480      	push	{r7}
 801375a:	b083      	sub	sp, #12
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	460b      	mov	r3, r1
 8013762:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013764:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013766:	4618      	mov	r0, r3
 8013768:	370c      	adds	r7, #12
 801376a:	46bd      	mov	sp, r7
 801376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013770:	4770      	bx	lr

08013772 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013772:	b580      	push	{r7, lr}
 8013774:	b086      	sub	sp, #24
 8013776:	af00      	add	r7, sp, #0
 8013778:	6078      	str	r0, [r7, #4]
 801377a:	460b      	mov	r3, r1
 801377c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013786:	2300      	movs	r3, #0
 8013788:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	885b      	ldrh	r3, [r3, #2]
 801378e:	b29a      	uxth	r2, r3
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	781b      	ldrb	r3, [r3, #0]
 8013794:	b29b      	uxth	r3, r3
 8013796:	429a      	cmp	r2, r3
 8013798:	d920      	bls.n	80137dc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	781b      	ldrb	r3, [r3, #0]
 801379e:	b29b      	uxth	r3, r3
 80137a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80137a2:	e013      	b.n	80137cc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80137a4:	f107 030a 	add.w	r3, r7, #10
 80137a8:	4619      	mov	r1, r3
 80137aa:	6978      	ldr	r0, [r7, #20]
 80137ac:	f000 f81b 	bl	80137e6 <USBD_GetNextDesc>
 80137b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	785b      	ldrb	r3, [r3, #1]
 80137b6:	2b05      	cmp	r3, #5
 80137b8:	d108      	bne.n	80137cc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80137ba:	697b      	ldr	r3, [r7, #20]
 80137bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80137be:	693b      	ldr	r3, [r7, #16]
 80137c0:	789b      	ldrb	r3, [r3, #2]
 80137c2:	78fa      	ldrb	r2, [r7, #3]
 80137c4:	429a      	cmp	r2, r3
 80137c6:	d008      	beq.n	80137da <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80137c8:	2300      	movs	r3, #0
 80137ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	885b      	ldrh	r3, [r3, #2]
 80137d0:	b29a      	uxth	r2, r3
 80137d2:	897b      	ldrh	r3, [r7, #10]
 80137d4:	429a      	cmp	r2, r3
 80137d6:	d8e5      	bhi.n	80137a4 <USBD_GetEpDesc+0x32>
 80137d8:	e000      	b.n	80137dc <USBD_GetEpDesc+0x6a>
          break;
 80137da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80137dc:	693b      	ldr	r3, [r7, #16]
}
 80137de:	4618      	mov	r0, r3
 80137e0:	3718      	adds	r7, #24
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd80      	pop	{r7, pc}

080137e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80137e6:	b480      	push	{r7}
 80137e8:	b085      	sub	sp, #20
 80137ea:	af00      	add	r7, sp, #0
 80137ec:	6078      	str	r0, [r7, #4]
 80137ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80137f4:	683b      	ldr	r3, [r7, #0]
 80137f6:	881a      	ldrh	r2, [r3, #0]
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	781b      	ldrb	r3, [r3, #0]
 80137fc:	b29b      	uxth	r3, r3
 80137fe:	4413      	add	r3, r2
 8013800:	b29a      	uxth	r2, r3
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	781b      	ldrb	r3, [r3, #0]
 801380a:	461a      	mov	r2, r3
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	4413      	add	r3, r2
 8013810:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013812:	68fb      	ldr	r3, [r7, #12]
}
 8013814:	4618      	mov	r0, r3
 8013816:	3714      	adds	r7, #20
 8013818:	46bd      	mov	sp, r7
 801381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801381e:	4770      	bx	lr

08013820 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013820:	b480      	push	{r7}
 8013822:	b087      	sub	sp, #28
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	781b      	ldrb	r3, [r3, #0]
 8013830:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	3301      	adds	r3, #1
 8013836:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013838:	697b      	ldr	r3, [r7, #20]
 801383a:	781b      	ldrb	r3, [r3, #0]
 801383c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801383e:	8a3b      	ldrh	r3, [r7, #16]
 8013840:	021b      	lsls	r3, r3, #8
 8013842:	b21a      	sxth	r2, r3
 8013844:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013848:	4313      	orrs	r3, r2
 801384a:	b21b      	sxth	r3, r3
 801384c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801384e:	89fb      	ldrh	r3, [r7, #14]
}
 8013850:	4618      	mov	r0, r3
 8013852:	371c      	adds	r7, #28
 8013854:	46bd      	mov	sp, r7
 8013856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385a:	4770      	bx	lr

0801385c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b084      	sub	sp, #16
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
 8013864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013866:	2300      	movs	r3, #0
 8013868:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	781b      	ldrb	r3, [r3, #0]
 801386e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013872:	2b40      	cmp	r3, #64	; 0x40
 8013874:	d005      	beq.n	8013882 <USBD_StdDevReq+0x26>
 8013876:	2b40      	cmp	r3, #64	; 0x40
 8013878:	d857      	bhi.n	801392a <USBD_StdDevReq+0xce>
 801387a:	2b00      	cmp	r3, #0
 801387c:	d00f      	beq.n	801389e <USBD_StdDevReq+0x42>
 801387e:	2b20      	cmp	r3, #32
 8013880:	d153      	bne.n	801392a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	32ae      	adds	r2, #174	; 0xae
 801388c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013890:	689b      	ldr	r3, [r3, #8]
 8013892:	6839      	ldr	r1, [r7, #0]
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	4798      	blx	r3
 8013898:	4603      	mov	r3, r0
 801389a:	73fb      	strb	r3, [r7, #15]
      break;
 801389c:	e04a      	b.n	8013934 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801389e:	683b      	ldr	r3, [r7, #0]
 80138a0:	785b      	ldrb	r3, [r3, #1]
 80138a2:	2b09      	cmp	r3, #9
 80138a4:	d83b      	bhi.n	801391e <USBD_StdDevReq+0xc2>
 80138a6:	a201      	add	r2, pc, #4	; (adr r2, 80138ac <USBD_StdDevReq+0x50>)
 80138a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138ac:	08013901 	.word	0x08013901
 80138b0:	08013915 	.word	0x08013915
 80138b4:	0801391f 	.word	0x0801391f
 80138b8:	0801390b 	.word	0x0801390b
 80138bc:	0801391f 	.word	0x0801391f
 80138c0:	080138df 	.word	0x080138df
 80138c4:	080138d5 	.word	0x080138d5
 80138c8:	0801391f 	.word	0x0801391f
 80138cc:	080138f7 	.word	0x080138f7
 80138d0:	080138e9 	.word	0x080138e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80138d4:	6839      	ldr	r1, [r7, #0]
 80138d6:	6878      	ldr	r0, [r7, #4]
 80138d8:	f000 fa3c 	bl	8013d54 <USBD_GetDescriptor>
          break;
 80138dc:	e024      	b.n	8013928 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80138de:	6839      	ldr	r1, [r7, #0]
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f000 fbcb 	bl	801407c <USBD_SetAddress>
          break;
 80138e6:	e01f      	b.n	8013928 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80138e8:	6839      	ldr	r1, [r7, #0]
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f000 fc0a 	bl	8014104 <USBD_SetConfig>
 80138f0:	4603      	mov	r3, r0
 80138f2:	73fb      	strb	r3, [r7, #15]
          break;
 80138f4:	e018      	b.n	8013928 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80138f6:	6839      	ldr	r1, [r7, #0]
 80138f8:	6878      	ldr	r0, [r7, #4]
 80138fa:	f000 fcad 	bl	8014258 <USBD_GetConfig>
          break;
 80138fe:	e013      	b.n	8013928 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013900:	6839      	ldr	r1, [r7, #0]
 8013902:	6878      	ldr	r0, [r7, #4]
 8013904:	f000 fcde 	bl	80142c4 <USBD_GetStatus>
          break;
 8013908:	e00e      	b.n	8013928 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801390a:	6839      	ldr	r1, [r7, #0]
 801390c:	6878      	ldr	r0, [r7, #4]
 801390e:	f000 fd0d 	bl	801432c <USBD_SetFeature>
          break;
 8013912:	e009      	b.n	8013928 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013914:	6839      	ldr	r1, [r7, #0]
 8013916:	6878      	ldr	r0, [r7, #4]
 8013918:	f000 fd31 	bl	801437e <USBD_ClrFeature>
          break;
 801391c:	e004      	b.n	8013928 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801391e:	6839      	ldr	r1, [r7, #0]
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f000 fd88 	bl	8014436 <USBD_CtlError>
          break;
 8013926:	bf00      	nop
      }
      break;
 8013928:	e004      	b.n	8013934 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801392a:	6839      	ldr	r1, [r7, #0]
 801392c:	6878      	ldr	r0, [r7, #4]
 801392e:	f000 fd82 	bl	8014436 <USBD_CtlError>
      break;
 8013932:	bf00      	nop
  }

  return ret;
 8013934:	7bfb      	ldrb	r3, [r7, #15]
}
 8013936:	4618      	mov	r0, r3
 8013938:	3710      	adds	r7, #16
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}
 801393e:	bf00      	nop

08013940 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b084      	sub	sp, #16
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801394a:	2300      	movs	r3, #0
 801394c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801394e:	683b      	ldr	r3, [r7, #0]
 8013950:	781b      	ldrb	r3, [r3, #0]
 8013952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013956:	2b40      	cmp	r3, #64	; 0x40
 8013958:	d005      	beq.n	8013966 <USBD_StdItfReq+0x26>
 801395a:	2b40      	cmp	r3, #64	; 0x40
 801395c:	d852      	bhi.n	8013a04 <USBD_StdItfReq+0xc4>
 801395e:	2b00      	cmp	r3, #0
 8013960:	d001      	beq.n	8013966 <USBD_StdItfReq+0x26>
 8013962:	2b20      	cmp	r3, #32
 8013964:	d14e      	bne.n	8013a04 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801396c:	b2db      	uxtb	r3, r3
 801396e:	3b01      	subs	r3, #1
 8013970:	2b02      	cmp	r3, #2
 8013972:	d840      	bhi.n	80139f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013974:	683b      	ldr	r3, [r7, #0]
 8013976:	889b      	ldrh	r3, [r3, #4]
 8013978:	b2db      	uxtb	r3, r3
 801397a:	2b01      	cmp	r3, #1
 801397c:	d836      	bhi.n	80139ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	889b      	ldrh	r3, [r3, #4]
 8013982:	b2db      	uxtb	r3, r3
 8013984:	4619      	mov	r1, r3
 8013986:	6878      	ldr	r0, [r7, #4]
 8013988:	f7ff fed9 	bl	801373e <USBD_CoreFindIF>
 801398c:	4603      	mov	r3, r0
 801398e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013990:	7bbb      	ldrb	r3, [r7, #14]
 8013992:	2bff      	cmp	r3, #255	; 0xff
 8013994:	d01d      	beq.n	80139d2 <USBD_StdItfReq+0x92>
 8013996:	7bbb      	ldrb	r3, [r7, #14]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d11a      	bne.n	80139d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801399c:	7bba      	ldrb	r2, [r7, #14]
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	32ae      	adds	r2, #174	; 0xae
 80139a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139a6:	689b      	ldr	r3, [r3, #8]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d00f      	beq.n	80139cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80139ac:	7bba      	ldrb	r2, [r7, #14]
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80139b4:	7bba      	ldrb	r2, [r7, #14]
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	32ae      	adds	r2, #174	; 0xae
 80139ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139be:	689b      	ldr	r3, [r3, #8]
 80139c0:	6839      	ldr	r1, [r7, #0]
 80139c2:	6878      	ldr	r0, [r7, #4]
 80139c4:	4798      	blx	r3
 80139c6:	4603      	mov	r3, r0
 80139c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80139ca:	e004      	b.n	80139d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80139cc:	2303      	movs	r3, #3
 80139ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80139d0:	e001      	b.n	80139d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80139d2:	2303      	movs	r3, #3
 80139d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80139d6:	683b      	ldr	r3, [r7, #0]
 80139d8:	88db      	ldrh	r3, [r3, #6]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d110      	bne.n	8013a00 <USBD_StdItfReq+0xc0>
 80139de:	7bfb      	ldrb	r3, [r7, #15]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d10d      	bne.n	8013a00 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80139e4:	6878      	ldr	r0, [r7, #4]
 80139e6:	f000 fdf1 	bl	80145cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80139ea:	e009      	b.n	8013a00 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80139ec:	6839      	ldr	r1, [r7, #0]
 80139ee:	6878      	ldr	r0, [r7, #4]
 80139f0:	f000 fd21 	bl	8014436 <USBD_CtlError>
          break;
 80139f4:	e004      	b.n	8013a00 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80139f6:	6839      	ldr	r1, [r7, #0]
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f000 fd1c 	bl	8014436 <USBD_CtlError>
          break;
 80139fe:	e000      	b.n	8013a02 <USBD_StdItfReq+0xc2>
          break;
 8013a00:	bf00      	nop
      }
      break;
 8013a02:	e004      	b.n	8013a0e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013a04:	6839      	ldr	r1, [r7, #0]
 8013a06:	6878      	ldr	r0, [r7, #4]
 8013a08:	f000 fd15 	bl	8014436 <USBD_CtlError>
      break;
 8013a0c:	bf00      	nop
  }

  return ret;
 8013a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	3710      	adds	r7, #16
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}

08013a18 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b084      	sub	sp, #16
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
 8013a20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013a22:	2300      	movs	r3, #0
 8013a24:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8013a26:	683b      	ldr	r3, [r7, #0]
 8013a28:	889b      	ldrh	r3, [r3, #4]
 8013a2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	781b      	ldrb	r3, [r3, #0]
 8013a30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013a34:	2b40      	cmp	r3, #64	; 0x40
 8013a36:	d007      	beq.n	8013a48 <USBD_StdEPReq+0x30>
 8013a38:	2b40      	cmp	r3, #64	; 0x40
 8013a3a:	f200 817f 	bhi.w	8013d3c <USBD_StdEPReq+0x324>
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d02a      	beq.n	8013a98 <USBD_StdEPReq+0x80>
 8013a42:	2b20      	cmp	r3, #32
 8013a44:	f040 817a 	bne.w	8013d3c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013a48:	7bbb      	ldrb	r3, [r7, #14]
 8013a4a:	4619      	mov	r1, r3
 8013a4c:	6878      	ldr	r0, [r7, #4]
 8013a4e:	f7ff fe83 	bl	8013758 <USBD_CoreFindEP>
 8013a52:	4603      	mov	r3, r0
 8013a54:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013a56:	7b7b      	ldrb	r3, [r7, #13]
 8013a58:	2bff      	cmp	r3, #255	; 0xff
 8013a5a:	f000 8174 	beq.w	8013d46 <USBD_StdEPReq+0x32e>
 8013a5e:	7b7b      	ldrb	r3, [r7, #13]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	f040 8170 	bne.w	8013d46 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013a66:	7b7a      	ldrb	r2, [r7, #13]
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013a6e:	7b7a      	ldrb	r2, [r7, #13]
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	32ae      	adds	r2, #174	; 0xae
 8013a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a78:	689b      	ldr	r3, [r3, #8]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	f000 8163 	beq.w	8013d46 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013a80:	7b7a      	ldrb	r2, [r7, #13]
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	32ae      	adds	r2, #174	; 0xae
 8013a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a8a:	689b      	ldr	r3, [r3, #8]
 8013a8c:	6839      	ldr	r1, [r7, #0]
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	4798      	blx	r3
 8013a92:	4603      	mov	r3, r0
 8013a94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013a96:	e156      	b.n	8013d46 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	785b      	ldrb	r3, [r3, #1]
 8013a9c:	2b03      	cmp	r3, #3
 8013a9e:	d008      	beq.n	8013ab2 <USBD_StdEPReq+0x9a>
 8013aa0:	2b03      	cmp	r3, #3
 8013aa2:	f300 8145 	bgt.w	8013d30 <USBD_StdEPReq+0x318>
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	f000 809b 	beq.w	8013be2 <USBD_StdEPReq+0x1ca>
 8013aac:	2b01      	cmp	r3, #1
 8013aae:	d03c      	beq.n	8013b2a <USBD_StdEPReq+0x112>
 8013ab0:	e13e      	b.n	8013d30 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ab8:	b2db      	uxtb	r3, r3
 8013aba:	2b02      	cmp	r3, #2
 8013abc:	d002      	beq.n	8013ac4 <USBD_StdEPReq+0xac>
 8013abe:	2b03      	cmp	r3, #3
 8013ac0:	d016      	beq.n	8013af0 <USBD_StdEPReq+0xd8>
 8013ac2:	e02c      	b.n	8013b1e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013ac4:	7bbb      	ldrb	r3, [r7, #14]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d00d      	beq.n	8013ae6 <USBD_StdEPReq+0xce>
 8013aca:	7bbb      	ldrb	r3, [r7, #14]
 8013acc:	2b80      	cmp	r3, #128	; 0x80
 8013ace:	d00a      	beq.n	8013ae6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013ad0:	7bbb      	ldrb	r3, [r7, #14]
 8013ad2:	4619      	mov	r1, r3
 8013ad4:	6878      	ldr	r0, [r7, #4]
 8013ad6:	f001 ff23 	bl	8015920 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013ada:	2180      	movs	r1, #128	; 0x80
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	f001 ff1f 	bl	8015920 <USBD_LL_StallEP>
 8013ae2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013ae4:	e020      	b.n	8013b28 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8013ae6:	6839      	ldr	r1, [r7, #0]
 8013ae8:	6878      	ldr	r0, [r7, #4]
 8013aea:	f000 fca4 	bl	8014436 <USBD_CtlError>
              break;
 8013aee:	e01b      	b.n	8013b28 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013af0:	683b      	ldr	r3, [r7, #0]
 8013af2:	885b      	ldrh	r3, [r3, #2]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d10e      	bne.n	8013b16 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013af8:	7bbb      	ldrb	r3, [r7, #14]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d00b      	beq.n	8013b16 <USBD_StdEPReq+0xfe>
 8013afe:	7bbb      	ldrb	r3, [r7, #14]
 8013b00:	2b80      	cmp	r3, #128	; 0x80
 8013b02:	d008      	beq.n	8013b16 <USBD_StdEPReq+0xfe>
 8013b04:	683b      	ldr	r3, [r7, #0]
 8013b06:	88db      	ldrh	r3, [r3, #6]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d104      	bne.n	8013b16 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013b0c:	7bbb      	ldrb	r3, [r7, #14]
 8013b0e:	4619      	mov	r1, r3
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f001 ff05 	bl	8015920 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013b16:	6878      	ldr	r0, [r7, #4]
 8013b18:	f000 fd58 	bl	80145cc <USBD_CtlSendStatus>

              break;
 8013b1c:	e004      	b.n	8013b28 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8013b1e:	6839      	ldr	r1, [r7, #0]
 8013b20:	6878      	ldr	r0, [r7, #4]
 8013b22:	f000 fc88 	bl	8014436 <USBD_CtlError>
              break;
 8013b26:	bf00      	nop
          }
          break;
 8013b28:	e107      	b.n	8013d3a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b30:	b2db      	uxtb	r3, r3
 8013b32:	2b02      	cmp	r3, #2
 8013b34:	d002      	beq.n	8013b3c <USBD_StdEPReq+0x124>
 8013b36:	2b03      	cmp	r3, #3
 8013b38:	d016      	beq.n	8013b68 <USBD_StdEPReq+0x150>
 8013b3a:	e04b      	b.n	8013bd4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013b3c:	7bbb      	ldrb	r3, [r7, #14]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d00d      	beq.n	8013b5e <USBD_StdEPReq+0x146>
 8013b42:	7bbb      	ldrb	r3, [r7, #14]
 8013b44:	2b80      	cmp	r3, #128	; 0x80
 8013b46:	d00a      	beq.n	8013b5e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013b48:	7bbb      	ldrb	r3, [r7, #14]
 8013b4a:	4619      	mov	r1, r3
 8013b4c:	6878      	ldr	r0, [r7, #4]
 8013b4e:	f001 fee7 	bl	8015920 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013b52:	2180      	movs	r1, #128	; 0x80
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	f001 fee3 	bl	8015920 <USBD_LL_StallEP>
 8013b5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013b5c:	e040      	b.n	8013be0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013b5e:	6839      	ldr	r1, [r7, #0]
 8013b60:	6878      	ldr	r0, [r7, #4]
 8013b62:	f000 fc68 	bl	8014436 <USBD_CtlError>
              break;
 8013b66:	e03b      	b.n	8013be0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	885b      	ldrh	r3, [r3, #2]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d136      	bne.n	8013bde <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013b70:	7bbb      	ldrb	r3, [r7, #14]
 8013b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d004      	beq.n	8013b84 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013b7a:	7bbb      	ldrb	r3, [r7, #14]
 8013b7c:	4619      	mov	r1, r3
 8013b7e:	6878      	ldr	r0, [r7, #4]
 8013b80:	f001 ff04 	bl	801598c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f000 fd21 	bl	80145cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013b8a:	7bbb      	ldrb	r3, [r7, #14]
 8013b8c:	4619      	mov	r1, r3
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f7ff fde2 	bl	8013758 <USBD_CoreFindEP>
 8013b94:	4603      	mov	r3, r0
 8013b96:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013b98:	7b7b      	ldrb	r3, [r7, #13]
 8013b9a:	2bff      	cmp	r3, #255	; 0xff
 8013b9c:	d01f      	beq.n	8013bde <USBD_StdEPReq+0x1c6>
 8013b9e:	7b7b      	ldrb	r3, [r7, #13]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d11c      	bne.n	8013bde <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8013ba4:	7b7a      	ldrb	r2, [r7, #13]
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013bac:	7b7a      	ldrb	r2, [r7, #13]
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	32ae      	adds	r2, #174	; 0xae
 8013bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bb6:	689b      	ldr	r3, [r3, #8]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d010      	beq.n	8013bde <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013bbc:	7b7a      	ldrb	r2, [r7, #13]
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	32ae      	adds	r2, #174	; 0xae
 8013bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bc6:	689b      	ldr	r3, [r3, #8]
 8013bc8:	6839      	ldr	r1, [r7, #0]
 8013bca:	6878      	ldr	r0, [r7, #4]
 8013bcc:	4798      	blx	r3
 8013bce:	4603      	mov	r3, r0
 8013bd0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8013bd2:	e004      	b.n	8013bde <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8013bd4:	6839      	ldr	r1, [r7, #0]
 8013bd6:	6878      	ldr	r0, [r7, #4]
 8013bd8:	f000 fc2d 	bl	8014436 <USBD_CtlError>
              break;
 8013bdc:	e000      	b.n	8013be0 <USBD_StdEPReq+0x1c8>
              break;
 8013bde:	bf00      	nop
          }
          break;
 8013be0:	e0ab      	b.n	8013d3a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013be8:	b2db      	uxtb	r3, r3
 8013bea:	2b02      	cmp	r3, #2
 8013bec:	d002      	beq.n	8013bf4 <USBD_StdEPReq+0x1dc>
 8013bee:	2b03      	cmp	r3, #3
 8013bf0:	d032      	beq.n	8013c58 <USBD_StdEPReq+0x240>
 8013bf2:	e097      	b.n	8013d24 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013bf4:	7bbb      	ldrb	r3, [r7, #14]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d007      	beq.n	8013c0a <USBD_StdEPReq+0x1f2>
 8013bfa:	7bbb      	ldrb	r3, [r7, #14]
 8013bfc:	2b80      	cmp	r3, #128	; 0x80
 8013bfe:	d004      	beq.n	8013c0a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013c00:	6839      	ldr	r1, [r7, #0]
 8013c02:	6878      	ldr	r0, [r7, #4]
 8013c04:	f000 fc17 	bl	8014436 <USBD_CtlError>
                break;
 8013c08:	e091      	b.n	8013d2e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013c0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	da0b      	bge.n	8013c2a <USBD_StdEPReq+0x212>
 8013c12:	7bbb      	ldrb	r3, [r7, #14]
 8013c14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013c18:	4613      	mov	r3, r2
 8013c1a:	009b      	lsls	r3, r3, #2
 8013c1c:	4413      	add	r3, r2
 8013c1e:	009b      	lsls	r3, r3, #2
 8013c20:	3310      	adds	r3, #16
 8013c22:	687a      	ldr	r2, [r7, #4]
 8013c24:	4413      	add	r3, r2
 8013c26:	3304      	adds	r3, #4
 8013c28:	e00b      	b.n	8013c42 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013c2a:	7bbb      	ldrb	r3, [r7, #14]
 8013c2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013c30:	4613      	mov	r3, r2
 8013c32:	009b      	lsls	r3, r3, #2
 8013c34:	4413      	add	r3, r2
 8013c36:	009b      	lsls	r3, r3, #2
 8013c38:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013c3c:	687a      	ldr	r2, [r7, #4]
 8013c3e:	4413      	add	r3, r2
 8013c40:	3304      	adds	r3, #4
 8013c42:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	2200      	movs	r2, #0
 8013c48:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013c4a:	68bb      	ldr	r3, [r7, #8]
 8013c4c:	2202      	movs	r2, #2
 8013c4e:	4619      	mov	r1, r3
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f000 fc61 	bl	8014518 <USBD_CtlSendData>
              break;
 8013c56:	e06a      	b.n	8013d2e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013c58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	da11      	bge.n	8013c84 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013c60:	7bbb      	ldrb	r3, [r7, #14]
 8013c62:	f003 020f 	and.w	r2, r3, #15
 8013c66:	6879      	ldr	r1, [r7, #4]
 8013c68:	4613      	mov	r3, r2
 8013c6a:	009b      	lsls	r3, r3, #2
 8013c6c:	4413      	add	r3, r2
 8013c6e:	009b      	lsls	r3, r3, #2
 8013c70:	440b      	add	r3, r1
 8013c72:	3324      	adds	r3, #36	; 0x24
 8013c74:	881b      	ldrh	r3, [r3, #0]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d117      	bne.n	8013caa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013c7a:	6839      	ldr	r1, [r7, #0]
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f000 fbda 	bl	8014436 <USBD_CtlError>
                  break;
 8013c82:	e054      	b.n	8013d2e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013c84:	7bbb      	ldrb	r3, [r7, #14]
 8013c86:	f003 020f 	and.w	r2, r3, #15
 8013c8a:	6879      	ldr	r1, [r7, #4]
 8013c8c:	4613      	mov	r3, r2
 8013c8e:	009b      	lsls	r3, r3, #2
 8013c90:	4413      	add	r3, r2
 8013c92:	009b      	lsls	r3, r3, #2
 8013c94:	440b      	add	r3, r1
 8013c96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013c9a:	881b      	ldrh	r3, [r3, #0]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d104      	bne.n	8013caa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013ca0:	6839      	ldr	r1, [r7, #0]
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f000 fbc7 	bl	8014436 <USBD_CtlError>
                  break;
 8013ca8:	e041      	b.n	8013d2e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013caa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	da0b      	bge.n	8013cca <USBD_StdEPReq+0x2b2>
 8013cb2:	7bbb      	ldrb	r3, [r7, #14]
 8013cb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013cb8:	4613      	mov	r3, r2
 8013cba:	009b      	lsls	r3, r3, #2
 8013cbc:	4413      	add	r3, r2
 8013cbe:	009b      	lsls	r3, r3, #2
 8013cc0:	3310      	adds	r3, #16
 8013cc2:	687a      	ldr	r2, [r7, #4]
 8013cc4:	4413      	add	r3, r2
 8013cc6:	3304      	adds	r3, #4
 8013cc8:	e00b      	b.n	8013ce2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013cca:	7bbb      	ldrb	r3, [r7, #14]
 8013ccc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013cd0:	4613      	mov	r3, r2
 8013cd2:	009b      	lsls	r3, r3, #2
 8013cd4:	4413      	add	r3, r2
 8013cd6:	009b      	lsls	r3, r3, #2
 8013cd8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013cdc:	687a      	ldr	r2, [r7, #4]
 8013cde:	4413      	add	r3, r2
 8013ce0:	3304      	adds	r3, #4
 8013ce2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013ce4:	7bbb      	ldrb	r3, [r7, #14]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d002      	beq.n	8013cf0 <USBD_StdEPReq+0x2d8>
 8013cea:	7bbb      	ldrb	r3, [r7, #14]
 8013cec:	2b80      	cmp	r3, #128	; 0x80
 8013cee:	d103      	bne.n	8013cf8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013cf0:	68bb      	ldr	r3, [r7, #8]
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	601a      	str	r2, [r3, #0]
 8013cf6:	e00e      	b.n	8013d16 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013cf8:	7bbb      	ldrb	r3, [r7, #14]
 8013cfa:	4619      	mov	r1, r3
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f001 fe7b 	bl	80159f8 <USBD_LL_IsStallEP>
 8013d02:	4603      	mov	r3, r0
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d003      	beq.n	8013d10 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013d08:	68bb      	ldr	r3, [r7, #8]
 8013d0a:	2201      	movs	r2, #1
 8013d0c:	601a      	str	r2, [r3, #0]
 8013d0e:	e002      	b.n	8013d16 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	2200      	movs	r2, #0
 8013d14:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013d16:	68bb      	ldr	r3, [r7, #8]
 8013d18:	2202      	movs	r2, #2
 8013d1a:	4619      	mov	r1, r3
 8013d1c:	6878      	ldr	r0, [r7, #4]
 8013d1e:	f000 fbfb 	bl	8014518 <USBD_CtlSendData>
              break;
 8013d22:	e004      	b.n	8013d2e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013d24:	6839      	ldr	r1, [r7, #0]
 8013d26:	6878      	ldr	r0, [r7, #4]
 8013d28:	f000 fb85 	bl	8014436 <USBD_CtlError>
              break;
 8013d2c:	bf00      	nop
          }
          break;
 8013d2e:	e004      	b.n	8013d3a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013d30:	6839      	ldr	r1, [r7, #0]
 8013d32:	6878      	ldr	r0, [r7, #4]
 8013d34:	f000 fb7f 	bl	8014436 <USBD_CtlError>
          break;
 8013d38:	bf00      	nop
      }
      break;
 8013d3a:	e005      	b.n	8013d48 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013d3c:	6839      	ldr	r1, [r7, #0]
 8013d3e:	6878      	ldr	r0, [r7, #4]
 8013d40:	f000 fb79 	bl	8014436 <USBD_CtlError>
      break;
 8013d44:	e000      	b.n	8013d48 <USBD_StdEPReq+0x330>
      break;
 8013d46:	bf00      	nop
  }

  return ret;
 8013d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	3710      	adds	r7, #16
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	bd80      	pop	{r7, pc}
	...

08013d54 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b084      	sub	sp, #16
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
 8013d5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013d62:	2300      	movs	r3, #0
 8013d64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013d66:	2300      	movs	r3, #0
 8013d68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	885b      	ldrh	r3, [r3, #2]
 8013d6e:	0a1b      	lsrs	r3, r3, #8
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	3b01      	subs	r3, #1
 8013d74:	2b0e      	cmp	r3, #14
 8013d76:	f200 8152 	bhi.w	801401e <USBD_GetDescriptor+0x2ca>
 8013d7a:	a201      	add	r2, pc, #4	; (adr r2, 8013d80 <USBD_GetDescriptor+0x2c>)
 8013d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d80:	08013df1 	.word	0x08013df1
 8013d84:	08013e09 	.word	0x08013e09
 8013d88:	08013e49 	.word	0x08013e49
 8013d8c:	0801401f 	.word	0x0801401f
 8013d90:	0801401f 	.word	0x0801401f
 8013d94:	08013fbf 	.word	0x08013fbf
 8013d98:	08013feb 	.word	0x08013feb
 8013d9c:	0801401f 	.word	0x0801401f
 8013da0:	0801401f 	.word	0x0801401f
 8013da4:	0801401f 	.word	0x0801401f
 8013da8:	0801401f 	.word	0x0801401f
 8013dac:	0801401f 	.word	0x0801401f
 8013db0:	0801401f 	.word	0x0801401f
 8013db4:	0801401f 	.word	0x0801401f
 8013db8:	08013dbd 	.word	0x08013dbd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dc2:	69db      	ldr	r3, [r3, #28]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d00b      	beq.n	8013de0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dce:	69db      	ldr	r3, [r3, #28]
 8013dd0:	687a      	ldr	r2, [r7, #4]
 8013dd2:	7c12      	ldrb	r2, [r2, #16]
 8013dd4:	f107 0108 	add.w	r1, r7, #8
 8013dd8:	4610      	mov	r0, r2
 8013dda:	4798      	blx	r3
 8013ddc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013dde:	e126      	b.n	801402e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013de0:	6839      	ldr	r1, [r7, #0]
 8013de2:	6878      	ldr	r0, [r7, #4]
 8013de4:	f000 fb27 	bl	8014436 <USBD_CtlError>
        err++;
 8013de8:	7afb      	ldrb	r3, [r7, #11]
 8013dea:	3301      	adds	r3, #1
 8013dec:	72fb      	strb	r3, [r7, #11]
      break;
 8013dee:	e11e      	b.n	801402e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	687a      	ldr	r2, [r7, #4]
 8013dfa:	7c12      	ldrb	r2, [r2, #16]
 8013dfc:	f107 0108 	add.w	r1, r7, #8
 8013e00:	4610      	mov	r0, r2
 8013e02:	4798      	blx	r3
 8013e04:	60f8      	str	r0, [r7, #12]
      break;
 8013e06:	e112      	b.n	801402e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	7c1b      	ldrb	r3, [r3, #16]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d10d      	bne.n	8013e2c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e18:	f107 0208 	add.w	r2, r7, #8
 8013e1c:	4610      	mov	r0, r2
 8013e1e:	4798      	blx	r3
 8013e20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	3301      	adds	r3, #1
 8013e26:	2202      	movs	r2, #2
 8013e28:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013e2a:	e100      	b.n	801402e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e34:	f107 0208 	add.w	r2, r7, #8
 8013e38:	4610      	mov	r0, r2
 8013e3a:	4798      	blx	r3
 8013e3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	3301      	adds	r3, #1
 8013e42:	2202      	movs	r2, #2
 8013e44:	701a      	strb	r2, [r3, #0]
      break;
 8013e46:	e0f2      	b.n	801402e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	885b      	ldrh	r3, [r3, #2]
 8013e4c:	b2db      	uxtb	r3, r3
 8013e4e:	2b05      	cmp	r3, #5
 8013e50:	f200 80ac 	bhi.w	8013fac <USBD_GetDescriptor+0x258>
 8013e54:	a201      	add	r2, pc, #4	; (adr r2, 8013e5c <USBD_GetDescriptor+0x108>)
 8013e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e5a:	bf00      	nop
 8013e5c:	08013e75 	.word	0x08013e75
 8013e60:	08013ea9 	.word	0x08013ea9
 8013e64:	08013edd 	.word	0x08013edd
 8013e68:	08013f11 	.word	0x08013f11
 8013e6c:	08013f45 	.word	0x08013f45
 8013e70:	08013f79 	.word	0x08013f79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e7a:	685b      	ldr	r3, [r3, #4]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d00b      	beq.n	8013e98 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e86:	685b      	ldr	r3, [r3, #4]
 8013e88:	687a      	ldr	r2, [r7, #4]
 8013e8a:	7c12      	ldrb	r2, [r2, #16]
 8013e8c:	f107 0108 	add.w	r1, r7, #8
 8013e90:	4610      	mov	r0, r2
 8013e92:	4798      	blx	r3
 8013e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e96:	e091      	b.n	8013fbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e98:	6839      	ldr	r1, [r7, #0]
 8013e9a:	6878      	ldr	r0, [r7, #4]
 8013e9c:	f000 facb 	bl	8014436 <USBD_CtlError>
            err++;
 8013ea0:	7afb      	ldrb	r3, [r7, #11]
 8013ea2:	3301      	adds	r3, #1
 8013ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8013ea6:	e089      	b.n	8013fbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013eae:	689b      	ldr	r3, [r3, #8]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d00b      	beq.n	8013ecc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013eba:	689b      	ldr	r3, [r3, #8]
 8013ebc:	687a      	ldr	r2, [r7, #4]
 8013ebe:	7c12      	ldrb	r2, [r2, #16]
 8013ec0:	f107 0108 	add.w	r1, r7, #8
 8013ec4:	4610      	mov	r0, r2
 8013ec6:	4798      	blx	r3
 8013ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013eca:	e077      	b.n	8013fbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013ecc:	6839      	ldr	r1, [r7, #0]
 8013ece:	6878      	ldr	r0, [r7, #4]
 8013ed0:	f000 fab1 	bl	8014436 <USBD_CtlError>
            err++;
 8013ed4:	7afb      	ldrb	r3, [r7, #11]
 8013ed6:	3301      	adds	r3, #1
 8013ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8013eda:	e06f      	b.n	8013fbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ee2:	68db      	ldr	r3, [r3, #12]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d00b      	beq.n	8013f00 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013eee:	68db      	ldr	r3, [r3, #12]
 8013ef0:	687a      	ldr	r2, [r7, #4]
 8013ef2:	7c12      	ldrb	r2, [r2, #16]
 8013ef4:	f107 0108 	add.w	r1, r7, #8
 8013ef8:	4610      	mov	r0, r2
 8013efa:	4798      	blx	r3
 8013efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013efe:	e05d      	b.n	8013fbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013f00:	6839      	ldr	r1, [r7, #0]
 8013f02:	6878      	ldr	r0, [r7, #4]
 8013f04:	f000 fa97 	bl	8014436 <USBD_CtlError>
            err++;
 8013f08:	7afb      	ldrb	r3, [r7, #11]
 8013f0a:	3301      	adds	r3, #1
 8013f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8013f0e:	e055      	b.n	8013fbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f16:	691b      	ldr	r3, [r3, #16]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d00b      	beq.n	8013f34 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f22:	691b      	ldr	r3, [r3, #16]
 8013f24:	687a      	ldr	r2, [r7, #4]
 8013f26:	7c12      	ldrb	r2, [r2, #16]
 8013f28:	f107 0108 	add.w	r1, r7, #8
 8013f2c:	4610      	mov	r0, r2
 8013f2e:	4798      	blx	r3
 8013f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013f32:	e043      	b.n	8013fbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013f34:	6839      	ldr	r1, [r7, #0]
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f000 fa7d 	bl	8014436 <USBD_CtlError>
            err++;
 8013f3c:	7afb      	ldrb	r3, [r7, #11]
 8013f3e:	3301      	adds	r3, #1
 8013f40:	72fb      	strb	r3, [r7, #11]
          break;
 8013f42:	e03b      	b.n	8013fbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f4a:	695b      	ldr	r3, [r3, #20]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d00b      	beq.n	8013f68 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f56:	695b      	ldr	r3, [r3, #20]
 8013f58:	687a      	ldr	r2, [r7, #4]
 8013f5a:	7c12      	ldrb	r2, [r2, #16]
 8013f5c:	f107 0108 	add.w	r1, r7, #8
 8013f60:	4610      	mov	r0, r2
 8013f62:	4798      	blx	r3
 8013f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013f66:	e029      	b.n	8013fbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013f68:	6839      	ldr	r1, [r7, #0]
 8013f6a:	6878      	ldr	r0, [r7, #4]
 8013f6c:	f000 fa63 	bl	8014436 <USBD_CtlError>
            err++;
 8013f70:	7afb      	ldrb	r3, [r7, #11]
 8013f72:	3301      	adds	r3, #1
 8013f74:	72fb      	strb	r3, [r7, #11]
          break;
 8013f76:	e021      	b.n	8013fbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f7e:	699b      	ldr	r3, [r3, #24]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d00b      	beq.n	8013f9c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f8a:	699b      	ldr	r3, [r3, #24]
 8013f8c:	687a      	ldr	r2, [r7, #4]
 8013f8e:	7c12      	ldrb	r2, [r2, #16]
 8013f90:	f107 0108 	add.w	r1, r7, #8
 8013f94:	4610      	mov	r0, r2
 8013f96:	4798      	blx	r3
 8013f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013f9a:	e00f      	b.n	8013fbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013f9c:	6839      	ldr	r1, [r7, #0]
 8013f9e:	6878      	ldr	r0, [r7, #4]
 8013fa0:	f000 fa49 	bl	8014436 <USBD_CtlError>
            err++;
 8013fa4:	7afb      	ldrb	r3, [r7, #11]
 8013fa6:	3301      	adds	r3, #1
 8013fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8013faa:	e007      	b.n	8013fbc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013fac:	6839      	ldr	r1, [r7, #0]
 8013fae:	6878      	ldr	r0, [r7, #4]
 8013fb0:	f000 fa41 	bl	8014436 <USBD_CtlError>
          err++;
 8013fb4:	7afb      	ldrb	r3, [r7, #11]
 8013fb6:	3301      	adds	r3, #1
 8013fb8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8013fba:	bf00      	nop
      }
      break;
 8013fbc:	e037      	b.n	801402e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	7c1b      	ldrb	r3, [r3, #16]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d109      	bne.n	8013fda <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013fce:	f107 0208 	add.w	r2, r7, #8
 8013fd2:	4610      	mov	r0, r2
 8013fd4:	4798      	blx	r3
 8013fd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013fd8:	e029      	b.n	801402e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013fda:	6839      	ldr	r1, [r7, #0]
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	f000 fa2a 	bl	8014436 <USBD_CtlError>
        err++;
 8013fe2:	7afb      	ldrb	r3, [r7, #11]
 8013fe4:	3301      	adds	r3, #1
 8013fe6:	72fb      	strb	r3, [r7, #11]
      break;
 8013fe8:	e021      	b.n	801402e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	7c1b      	ldrb	r3, [r3, #16]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d10d      	bne.n	801400e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ffa:	f107 0208 	add.w	r2, r7, #8
 8013ffe:	4610      	mov	r0, r2
 8014000:	4798      	blx	r3
 8014002:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	3301      	adds	r3, #1
 8014008:	2207      	movs	r2, #7
 801400a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801400c:	e00f      	b.n	801402e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801400e:	6839      	ldr	r1, [r7, #0]
 8014010:	6878      	ldr	r0, [r7, #4]
 8014012:	f000 fa10 	bl	8014436 <USBD_CtlError>
        err++;
 8014016:	7afb      	ldrb	r3, [r7, #11]
 8014018:	3301      	adds	r3, #1
 801401a:	72fb      	strb	r3, [r7, #11]
      break;
 801401c:	e007      	b.n	801402e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801401e:	6839      	ldr	r1, [r7, #0]
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f000 fa08 	bl	8014436 <USBD_CtlError>
      err++;
 8014026:	7afb      	ldrb	r3, [r7, #11]
 8014028:	3301      	adds	r3, #1
 801402a:	72fb      	strb	r3, [r7, #11]
      break;
 801402c:	bf00      	nop
  }

  if (err != 0U)
 801402e:	7afb      	ldrb	r3, [r7, #11]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d11e      	bne.n	8014072 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014034:	683b      	ldr	r3, [r7, #0]
 8014036:	88db      	ldrh	r3, [r3, #6]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d016      	beq.n	801406a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801403c:	893b      	ldrh	r3, [r7, #8]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d00e      	beq.n	8014060 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	88da      	ldrh	r2, [r3, #6]
 8014046:	893b      	ldrh	r3, [r7, #8]
 8014048:	4293      	cmp	r3, r2
 801404a:	bf28      	it	cs
 801404c:	4613      	movcs	r3, r2
 801404e:	b29b      	uxth	r3, r3
 8014050:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014052:	893b      	ldrh	r3, [r7, #8]
 8014054:	461a      	mov	r2, r3
 8014056:	68f9      	ldr	r1, [r7, #12]
 8014058:	6878      	ldr	r0, [r7, #4]
 801405a:	f000 fa5d 	bl	8014518 <USBD_CtlSendData>
 801405e:	e009      	b.n	8014074 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014060:	6839      	ldr	r1, [r7, #0]
 8014062:	6878      	ldr	r0, [r7, #4]
 8014064:	f000 f9e7 	bl	8014436 <USBD_CtlError>
 8014068:	e004      	b.n	8014074 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801406a:	6878      	ldr	r0, [r7, #4]
 801406c:	f000 faae 	bl	80145cc <USBD_CtlSendStatus>
 8014070:	e000      	b.n	8014074 <USBD_GetDescriptor+0x320>
    return;
 8014072:	bf00      	nop
  }
}
 8014074:	3710      	adds	r7, #16
 8014076:	46bd      	mov	sp, r7
 8014078:	bd80      	pop	{r7, pc}
 801407a:	bf00      	nop

0801407c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b084      	sub	sp, #16
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014086:	683b      	ldr	r3, [r7, #0]
 8014088:	889b      	ldrh	r3, [r3, #4]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d131      	bne.n	80140f2 <USBD_SetAddress+0x76>
 801408e:	683b      	ldr	r3, [r7, #0]
 8014090:	88db      	ldrh	r3, [r3, #6]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d12d      	bne.n	80140f2 <USBD_SetAddress+0x76>
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	885b      	ldrh	r3, [r3, #2]
 801409a:	2b7f      	cmp	r3, #127	; 0x7f
 801409c:	d829      	bhi.n	80140f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801409e:	683b      	ldr	r3, [r7, #0]
 80140a0:	885b      	ldrh	r3, [r3, #2]
 80140a2:	b2db      	uxtb	r3, r3
 80140a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80140a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140b0:	b2db      	uxtb	r3, r3
 80140b2:	2b03      	cmp	r3, #3
 80140b4:	d104      	bne.n	80140c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80140b6:	6839      	ldr	r1, [r7, #0]
 80140b8:	6878      	ldr	r0, [r7, #4]
 80140ba:	f000 f9bc 	bl	8014436 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140be:	e01d      	b.n	80140fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	7bfa      	ldrb	r2, [r7, #15]
 80140c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80140c8:	7bfb      	ldrb	r3, [r7, #15]
 80140ca:	4619      	mov	r1, r3
 80140cc:	6878      	ldr	r0, [r7, #4]
 80140ce:	f001 fcc1 	bl	8015a54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80140d2:	6878      	ldr	r0, [r7, #4]
 80140d4:	f000 fa7a 	bl	80145cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80140d8:	7bfb      	ldrb	r3, [r7, #15]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d004      	beq.n	80140e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	2202      	movs	r2, #2
 80140e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140e6:	e009      	b.n	80140fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2201      	movs	r2, #1
 80140ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140f0:	e004      	b.n	80140fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80140f2:	6839      	ldr	r1, [r7, #0]
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	f000 f99e 	bl	8014436 <USBD_CtlError>
  }
}
 80140fa:	bf00      	nop
 80140fc:	bf00      	nop
 80140fe:	3710      	adds	r7, #16
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}

08014104 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b084      	sub	sp, #16
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
 801410c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801410e:	2300      	movs	r3, #0
 8014110:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	885b      	ldrh	r3, [r3, #2]
 8014116:	b2da      	uxtb	r2, r3
 8014118:	4b4e      	ldr	r3, [pc, #312]	; (8014254 <USBD_SetConfig+0x150>)
 801411a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801411c:	4b4d      	ldr	r3, [pc, #308]	; (8014254 <USBD_SetConfig+0x150>)
 801411e:	781b      	ldrb	r3, [r3, #0]
 8014120:	2b01      	cmp	r3, #1
 8014122:	d905      	bls.n	8014130 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014124:	6839      	ldr	r1, [r7, #0]
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	f000 f985 	bl	8014436 <USBD_CtlError>
    return USBD_FAIL;
 801412c:	2303      	movs	r3, #3
 801412e:	e08c      	b.n	801424a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014136:	b2db      	uxtb	r3, r3
 8014138:	2b02      	cmp	r3, #2
 801413a:	d002      	beq.n	8014142 <USBD_SetConfig+0x3e>
 801413c:	2b03      	cmp	r3, #3
 801413e:	d029      	beq.n	8014194 <USBD_SetConfig+0x90>
 8014140:	e075      	b.n	801422e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014142:	4b44      	ldr	r3, [pc, #272]	; (8014254 <USBD_SetConfig+0x150>)
 8014144:	781b      	ldrb	r3, [r3, #0]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d020      	beq.n	801418c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801414a:	4b42      	ldr	r3, [pc, #264]	; (8014254 <USBD_SetConfig+0x150>)
 801414c:	781b      	ldrb	r3, [r3, #0]
 801414e:	461a      	mov	r2, r3
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014154:	4b3f      	ldr	r3, [pc, #252]	; (8014254 <USBD_SetConfig+0x150>)
 8014156:	781b      	ldrb	r3, [r3, #0]
 8014158:	4619      	mov	r1, r3
 801415a:	6878      	ldr	r0, [r7, #4]
 801415c:	f7ff f849 	bl	80131f2 <USBD_SetClassConfig>
 8014160:	4603      	mov	r3, r0
 8014162:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014164:	7bfb      	ldrb	r3, [r7, #15]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d008      	beq.n	801417c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801416a:	6839      	ldr	r1, [r7, #0]
 801416c:	6878      	ldr	r0, [r7, #4]
 801416e:	f000 f962 	bl	8014436 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	2202      	movs	r2, #2
 8014176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801417a:	e065      	b.n	8014248 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801417c:	6878      	ldr	r0, [r7, #4]
 801417e:	f000 fa25 	bl	80145cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	2203      	movs	r2, #3
 8014186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801418a:	e05d      	b.n	8014248 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801418c:	6878      	ldr	r0, [r7, #4]
 801418e:	f000 fa1d 	bl	80145cc <USBD_CtlSendStatus>
      break;
 8014192:	e059      	b.n	8014248 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014194:	4b2f      	ldr	r3, [pc, #188]	; (8014254 <USBD_SetConfig+0x150>)
 8014196:	781b      	ldrb	r3, [r3, #0]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d112      	bne.n	80141c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	2202      	movs	r2, #2
 80141a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80141a4:	4b2b      	ldr	r3, [pc, #172]	; (8014254 <USBD_SetConfig+0x150>)
 80141a6:	781b      	ldrb	r3, [r3, #0]
 80141a8:	461a      	mov	r2, r3
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80141ae:	4b29      	ldr	r3, [pc, #164]	; (8014254 <USBD_SetConfig+0x150>)
 80141b0:	781b      	ldrb	r3, [r3, #0]
 80141b2:	4619      	mov	r1, r3
 80141b4:	6878      	ldr	r0, [r7, #4]
 80141b6:	f7ff f838 	bl	801322a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80141ba:	6878      	ldr	r0, [r7, #4]
 80141bc:	f000 fa06 	bl	80145cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80141c0:	e042      	b.n	8014248 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80141c2:	4b24      	ldr	r3, [pc, #144]	; (8014254 <USBD_SetConfig+0x150>)
 80141c4:	781b      	ldrb	r3, [r3, #0]
 80141c6:	461a      	mov	r2, r3
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	685b      	ldr	r3, [r3, #4]
 80141cc:	429a      	cmp	r2, r3
 80141ce:	d02a      	beq.n	8014226 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	685b      	ldr	r3, [r3, #4]
 80141d4:	b2db      	uxtb	r3, r3
 80141d6:	4619      	mov	r1, r3
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	f7ff f826 	bl	801322a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80141de:	4b1d      	ldr	r3, [pc, #116]	; (8014254 <USBD_SetConfig+0x150>)
 80141e0:	781b      	ldrb	r3, [r3, #0]
 80141e2:	461a      	mov	r2, r3
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80141e8:	4b1a      	ldr	r3, [pc, #104]	; (8014254 <USBD_SetConfig+0x150>)
 80141ea:	781b      	ldrb	r3, [r3, #0]
 80141ec:	4619      	mov	r1, r3
 80141ee:	6878      	ldr	r0, [r7, #4]
 80141f0:	f7fe ffff 	bl	80131f2 <USBD_SetClassConfig>
 80141f4:	4603      	mov	r3, r0
 80141f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80141f8:	7bfb      	ldrb	r3, [r7, #15]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d00f      	beq.n	801421e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80141fe:	6839      	ldr	r1, [r7, #0]
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f000 f918 	bl	8014436 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	685b      	ldr	r3, [r3, #4]
 801420a:	b2db      	uxtb	r3, r3
 801420c:	4619      	mov	r1, r3
 801420e:	6878      	ldr	r0, [r7, #4]
 8014210:	f7ff f80b 	bl	801322a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	2202      	movs	r2, #2
 8014218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801421c:	e014      	b.n	8014248 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f000 f9d4 	bl	80145cc <USBD_CtlSendStatus>
      break;
 8014224:	e010      	b.n	8014248 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f000 f9d0 	bl	80145cc <USBD_CtlSendStatus>
      break;
 801422c:	e00c      	b.n	8014248 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801422e:	6839      	ldr	r1, [r7, #0]
 8014230:	6878      	ldr	r0, [r7, #4]
 8014232:	f000 f900 	bl	8014436 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014236:	4b07      	ldr	r3, [pc, #28]	; (8014254 <USBD_SetConfig+0x150>)
 8014238:	781b      	ldrb	r3, [r3, #0]
 801423a:	4619      	mov	r1, r3
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f7fe fff4 	bl	801322a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014242:	2303      	movs	r3, #3
 8014244:	73fb      	strb	r3, [r7, #15]
      break;
 8014246:	bf00      	nop
  }

  return ret;
 8014248:	7bfb      	ldrb	r3, [r7, #15]
}
 801424a:	4618      	mov	r0, r3
 801424c:	3710      	adds	r7, #16
 801424e:	46bd      	mov	sp, r7
 8014250:	bd80      	pop	{r7, pc}
 8014252:	bf00      	nop
 8014254:	200011e0 	.word	0x200011e0

08014258 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b082      	sub	sp, #8
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
 8014260:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014262:	683b      	ldr	r3, [r7, #0]
 8014264:	88db      	ldrh	r3, [r3, #6]
 8014266:	2b01      	cmp	r3, #1
 8014268:	d004      	beq.n	8014274 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801426a:	6839      	ldr	r1, [r7, #0]
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f000 f8e2 	bl	8014436 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014272:	e023      	b.n	80142bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801427a:	b2db      	uxtb	r3, r3
 801427c:	2b02      	cmp	r3, #2
 801427e:	dc02      	bgt.n	8014286 <USBD_GetConfig+0x2e>
 8014280:	2b00      	cmp	r3, #0
 8014282:	dc03      	bgt.n	801428c <USBD_GetConfig+0x34>
 8014284:	e015      	b.n	80142b2 <USBD_GetConfig+0x5a>
 8014286:	2b03      	cmp	r3, #3
 8014288:	d00b      	beq.n	80142a2 <USBD_GetConfig+0x4a>
 801428a:	e012      	b.n	80142b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	2200      	movs	r2, #0
 8014290:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	3308      	adds	r3, #8
 8014296:	2201      	movs	r2, #1
 8014298:	4619      	mov	r1, r3
 801429a:	6878      	ldr	r0, [r7, #4]
 801429c:	f000 f93c 	bl	8014518 <USBD_CtlSendData>
        break;
 80142a0:	e00c      	b.n	80142bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	3304      	adds	r3, #4
 80142a6:	2201      	movs	r2, #1
 80142a8:	4619      	mov	r1, r3
 80142aa:	6878      	ldr	r0, [r7, #4]
 80142ac:	f000 f934 	bl	8014518 <USBD_CtlSendData>
        break;
 80142b0:	e004      	b.n	80142bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80142b2:	6839      	ldr	r1, [r7, #0]
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f000 f8be 	bl	8014436 <USBD_CtlError>
        break;
 80142ba:	bf00      	nop
}
 80142bc:	bf00      	nop
 80142be:	3708      	adds	r7, #8
 80142c0:	46bd      	mov	sp, r7
 80142c2:	bd80      	pop	{r7, pc}

080142c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b082      	sub	sp, #8
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
 80142cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80142d4:	b2db      	uxtb	r3, r3
 80142d6:	3b01      	subs	r3, #1
 80142d8:	2b02      	cmp	r3, #2
 80142da:	d81e      	bhi.n	801431a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	88db      	ldrh	r3, [r3, #6]
 80142e0:	2b02      	cmp	r3, #2
 80142e2:	d004      	beq.n	80142ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80142e4:	6839      	ldr	r1, [r7, #0]
 80142e6:	6878      	ldr	r0, [r7, #4]
 80142e8:	f000 f8a5 	bl	8014436 <USBD_CtlError>
        break;
 80142ec:	e01a      	b.n	8014324 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2201      	movs	r2, #1
 80142f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d005      	beq.n	801430a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	68db      	ldr	r3, [r3, #12]
 8014302:	f043 0202 	orr.w	r2, r3, #2
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	330c      	adds	r3, #12
 801430e:	2202      	movs	r2, #2
 8014310:	4619      	mov	r1, r3
 8014312:	6878      	ldr	r0, [r7, #4]
 8014314:	f000 f900 	bl	8014518 <USBD_CtlSendData>
      break;
 8014318:	e004      	b.n	8014324 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801431a:	6839      	ldr	r1, [r7, #0]
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	f000 f88a 	bl	8014436 <USBD_CtlError>
      break;
 8014322:	bf00      	nop
  }
}
 8014324:	bf00      	nop
 8014326:	3708      	adds	r7, #8
 8014328:	46bd      	mov	sp, r7
 801432a:	bd80      	pop	{r7, pc}

0801432c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b082      	sub	sp, #8
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
 8014334:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	885b      	ldrh	r3, [r3, #2]
 801433a:	2b01      	cmp	r3, #1
 801433c:	d107      	bne.n	801434e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	2201      	movs	r2, #1
 8014342:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014346:	6878      	ldr	r0, [r7, #4]
 8014348:	f000 f940 	bl	80145cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801434c:	e013      	b.n	8014376 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	885b      	ldrh	r3, [r3, #2]
 8014352:	2b02      	cmp	r3, #2
 8014354:	d10b      	bne.n	801436e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	889b      	ldrh	r3, [r3, #4]
 801435a:	0a1b      	lsrs	r3, r3, #8
 801435c:	b29b      	uxth	r3, r3
 801435e:	b2da      	uxtb	r2, r3
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014366:	6878      	ldr	r0, [r7, #4]
 8014368:	f000 f930 	bl	80145cc <USBD_CtlSendStatus>
}
 801436c:	e003      	b.n	8014376 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801436e:	6839      	ldr	r1, [r7, #0]
 8014370:	6878      	ldr	r0, [r7, #4]
 8014372:	f000 f860 	bl	8014436 <USBD_CtlError>
}
 8014376:	bf00      	nop
 8014378:	3708      	adds	r7, #8
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}

0801437e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801437e:	b580      	push	{r7, lr}
 8014380:	b082      	sub	sp, #8
 8014382:	af00      	add	r7, sp, #0
 8014384:	6078      	str	r0, [r7, #4]
 8014386:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801438e:	b2db      	uxtb	r3, r3
 8014390:	3b01      	subs	r3, #1
 8014392:	2b02      	cmp	r3, #2
 8014394:	d80b      	bhi.n	80143ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014396:	683b      	ldr	r3, [r7, #0]
 8014398:	885b      	ldrh	r3, [r3, #2]
 801439a:	2b01      	cmp	r3, #1
 801439c:	d10c      	bne.n	80143b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2200      	movs	r2, #0
 80143a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80143a6:	6878      	ldr	r0, [r7, #4]
 80143a8:	f000 f910 	bl	80145cc <USBD_CtlSendStatus>
      }
      break;
 80143ac:	e004      	b.n	80143b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80143ae:	6839      	ldr	r1, [r7, #0]
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	f000 f840 	bl	8014436 <USBD_CtlError>
      break;
 80143b6:	e000      	b.n	80143ba <USBD_ClrFeature+0x3c>
      break;
 80143b8:	bf00      	nop
  }
}
 80143ba:	bf00      	nop
 80143bc:	3708      	adds	r7, #8
 80143be:	46bd      	mov	sp, r7
 80143c0:	bd80      	pop	{r7, pc}

080143c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80143c2:	b580      	push	{r7, lr}
 80143c4:	b084      	sub	sp, #16
 80143c6:	af00      	add	r7, sp, #0
 80143c8:	6078      	str	r0, [r7, #4]
 80143ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80143cc:	683b      	ldr	r3, [r7, #0]
 80143ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	781a      	ldrb	r2, [r3, #0]
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	3301      	adds	r3, #1
 80143dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	781a      	ldrb	r2, [r3, #0]
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	3301      	adds	r3, #1
 80143ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80143ec:	68f8      	ldr	r0, [r7, #12]
 80143ee:	f7ff fa17 	bl	8013820 <SWAPBYTE>
 80143f2:	4603      	mov	r3, r0
 80143f4:	461a      	mov	r2, r3
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	3301      	adds	r3, #1
 80143fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	3301      	adds	r3, #1
 8014404:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014406:	68f8      	ldr	r0, [r7, #12]
 8014408:	f7ff fa0a 	bl	8013820 <SWAPBYTE>
 801440c:	4603      	mov	r3, r0
 801440e:	461a      	mov	r2, r3
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	3301      	adds	r3, #1
 8014418:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	3301      	adds	r3, #1
 801441e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014420:	68f8      	ldr	r0, [r7, #12]
 8014422:	f7ff f9fd 	bl	8013820 <SWAPBYTE>
 8014426:	4603      	mov	r3, r0
 8014428:	461a      	mov	r2, r3
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	80da      	strh	r2, [r3, #6]
}
 801442e:	bf00      	nop
 8014430:	3710      	adds	r7, #16
 8014432:	46bd      	mov	sp, r7
 8014434:	bd80      	pop	{r7, pc}

08014436 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014436:	b580      	push	{r7, lr}
 8014438:	b082      	sub	sp, #8
 801443a:	af00      	add	r7, sp, #0
 801443c:	6078      	str	r0, [r7, #4]
 801443e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014440:	2180      	movs	r1, #128	; 0x80
 8014442:	6878      	ldr	r0, [r7, #4]
 8014444:	f001 fa6c 	bl	8015920 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014448:	2100      	movs	r1, #0
 801444a:	6878      	ldr	r0, [r7, #4]
 801444c:	f001 fa68 	bl	8015920 <USBD_LL_StallEP>
}
 8014450:	bf00      	nop
 8014452:	3708      	adds	r7, #8
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}

08014458 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b086      	sub	sp, #24
 801445c:	af00      	add	r7, sp, #0
 801445e:	60f8      	str	r0, [r7, #12]
 8014460:	60b9      	str	r1, [r7, #8]
 8014462:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014464:	2300      	movs	r3, #0
 8014466:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d036      	beq.n	80144dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014472:	6938      	ldr	r0, [r7, #16]
 8014474:	f000 f836 	bl	80144e4 <USBD_GetLen>
 8014478:	4603      	mov	r3, r0
 801447a:	3301      	adds	r3, #1
 801447c:	b29b      	uxth	r3, r3
 801447e:	005b      	lsls	r3, r3, #1
 8014480:	b29a      	uxth	r2, r3
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014486:	7dfb      	ldrb	r3, [r7, #23]
 8014488:	68ba      	ldr	r2, [r7, #8]
 801448a:	4413      	add	r3, r2
 801448c:	687a      	ldr	r2, [r7, #4]
 801448e:	7812      	ldrb	r2, [r2, #0]
 8014490:	701a      	strb	r2, [r3, #0]
  idx++;
 8014492:	7dfb      	ldrb	r3, [r7, #23]
 8014494:	3301      	adds	r3, #1
 8014496:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014498:	7dfb      	ldrb	r3, [r7, #23]
 801449a:	68ba      	ldr	r2, [r7, #8]
 801449c:	4413      	add	r3, r2
 801449e:	2203      	movs	r2, #3
 80144a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80144a2:	7dfb      	ldrb	r3, [r7, #23]
 80144a4:	3301      	adds	r3, #1
 80144a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80144a8:	e013      	b.n	80144d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80144aa:	7dfb      	ldrb	r3, [r7, #23]
 80144ac:	68ba      	ldr	r2, [r7, #8]
 80144ae:	4413      	add	r3, r2
 80144b0:	693a      	ldr	r2, [r7, #16]
 80144b2:	7812      	ldrb	r2, [r2, #0]
 80144b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	3301      	adds	r3, #1
 80144ba:	613b      	str	r3, [r7, #16]
    idx++;
 80144bc:	7dfb      	ldrb	r3, [r7, #23]
 80144be:	3301      	adds	r3, #1
 80144c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80144c2:	7dfb      	ldrb	r3, [r7, #23]
 80144c4:	68ba      	ldr	r2, [r7, #8]
 80144c6:	4413      	add	r3, r2
 80144c8:	2200      	movs	r2, #0
 80144ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80144cc:	7dfb      	ldrb	r3, [r7, #23]
 80144ce:	3301      	adds	r3, #1
 80144d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80144d2:	693b      	ldr	r3, [r7, #16]
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d1e7      	bne.n	80144aa <USBD_GetString+0x52>
 80144da:	e000      	b.n	80144de <USBD_GetString+0x86>
    return;
 80144dc:	bf00      	nop
  }
}
 80144de:	3718      	adds	r7, #24
 80144e0:	46bd      	mov	sp, r7
 80144e2:	bd80      	pop	{r7, pc}

080144e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80144e4:	b480      	push	{r7}
 80144e6:	b085      	sub	sp, #20
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80144ec:	2300      	movs	r3, #0
 80144ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80144f4:	e005      	b.n	8014502 <USBD_GetLen+0x1e>
  {
    len++;
 80144f6:	7bfb      	ldrb	r3, [r7, #15]
 80144f8:	3301      	adds	r3, #1
 80144fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80144fc:	68bb      	ldr	r3, [r7, #8]
 80144fe:	3301      	adds	r3, #1
 8014500:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	781b      	ldrb	r3, [r3, #0]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d1f5      	bne.n	80144f6 <USBD_GetLen+0x12>
  }

  return len;
 801450a:	7bfb      	ldrb	r3, [r7, #15]
}
 801450c:	4618      	mov	r0, r3
 801450e:	3714      	adds	r7, #20
 8014510:	46bd      	mov	sp, r7
 8014512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014516:	4770      	bx	lr

08014518 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b084      	sub	sp, #16
 801451c:	af00      	add	r7, sp, #0
 801451e:	60f8      	str	r0, [r7, #12]
 8014520:	60b9      	str	r1, [r7, #8]
 8014522:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	2202      	movs	r2, #2
 8014528:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	687a      	ldr	r2, [r7, #4]
 8014530:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	687a      	ldr	r2, [r7, #4]
 8014536:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	68ba      	ldr	r2, [r7, #8]
 801453c:	2100      	movs	r1, #0
 801453e:	68f8      	ldr	r0, [r7, #12]
 8014540:	f001 fabe 	bl	8015ac0 <USBD_LL_Transmit>

  return USBD_OK;
 8014544:	2300      	movs	r3, #0
}
 8014546:	4618      	mov	r0, r3
 8014548:	3710      	adds	r7, #16
 801454a:	46bd      	mov	sp, r7
 801454c:	bd80      	pop	{r7, pc}

0801454e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801454e:	b580      	push	{r7, lr}
 8014550:	b084      	sub	sp, #16
 8014552:	af00      	add	r7, sp, #0
 8014554:	60f8      	str	r0, [r7, #12]
 8014556:	60b9      	str	r1, [r7, #8]
 8014558:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	68ba      	ldr	r2, [r7, #8]
 801455e:	2100      	movs	r1, #0
 8014560:	68f8      	ldr	r0, [r7, #12]
 8014562:	f001 faad 	bl	8015ac0 <USBD_LL_Transmit>

  return USBD_OK;
 8014566:	2300      	movs	r3, #0
}
 8014568:	4618      	mov	r0, r3
 801456a:	3710      	adds	r7, #16
 801456c:	46bd      	mov	sp, r7
 801456e:	bd80      	pop	{r7, pc}

08014570 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b084      	sub	sp, #16
 8014574:	af00      	add	r7, sp, #0
 8014576:	60f8      	str	r0, [r7, #12]
 8014578:	60b9      	str	r1, [r7, #8]
 801457a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	2203      	movs	r2, #3
 8014580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	687a      	ldr	r2, [r7, #4]
 8014588:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	687a      	ldr	r2, [r7, #4]
 8014590:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	68ba      	ldr	r2, [r7, #8]
 8014598:	2100      	movs	r1, #0
 801459a:	68f8      	ldr	r0, [r7, #12]
 801459c:	f001 fac8 	bl	8015b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80145a0:	2300      	movs	r3, #0
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	3710      	adds	r7, #16
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}

080145aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80145aa:	b580      	push	{r7, lr}
 80145ac:	b084      	sub	sp, #16
 80145ae:	af00      	add	r7, sp, #0
 80145b0:	60f8      	str	r0, [r7, #12]
 80145b2:	60b9      	str	r1, [r7, #8]
 80145b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	68ba      	ldr	r2, [r7, #8]
 80145ba:	2100      	movs	r1, #0
 80145bc:	68f8      	ldr	r0, [r7, #12]
 80145be:	f001 fab7 	bl	8015b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80145c2:	2300      	movs	r3, #0
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	3710      	adds	r7, #16
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}

080145cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b082      	sub	sp, #8
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2204      	movs	r2, #4
 80145d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80145dc:	2300      	movs	r3, #0
 80145de:	2200      	movs	r2, #0
 80145e0:	2100      	movs	r1, #0
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f001 fa6c 	bl	8015ac0 <USBD_LL_Transmit>

  return USBD_OK;
 80145e8:	2300      	movs	r3, #0
}
 80145ea:	4618      	mov	r0, r3
 80145ec:	3708      	adds	r7, #8
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd80      	pop	{r7, pc}

080145f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80145f2:	b580      	push	{r7, lr}
 80145f4:	b082      	sub	sp, #8
 80145f6:	af00      	add	r7, sp, #0
 80145f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	2205      	movs	r2, #5
 80145fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014602:	2300      	movs	r3, #0
 8014604:	2200      	movs	r2, #0
 8014606:	2100      	movs	r1, #0
 8014608:	6878      	ldr	r0, [r7, #4]
 801460a:	f001 fa91 	bl	8015b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801460e:	2300      	movs	r3, #0
}
 8014610:	4618      	mov	r0, r3
 8014612:	3708      	adds	r7, #8
 8014614:	46bd      	mov	sp, r7
 8014616:	bd80      	pop	{r7, pc}

08014618 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b082      	sub	sp, #8
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8014620:	6878      	ldr	r0, [r7, #4]
 8014622:	f7f1 fed5 	bl	80063d0 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8014626:	bf00      	nop
 8014628:	3708      	adds	r7, #8
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}

0801462e <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 801462e:	b580      	push	{r7, lr}
 8014630:	b082      	sub	sp, #8
 8014632:	af00      	add	r7, sp, #0
 8014634:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8014636:	e002      	b.n	801463e <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8014638:	2001      	movs	r0, #1
 801463a:	f7ff ffed 	bl	8014618 <SPIF_Delay>
  while (Handle->Lock)
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	7b1b      	ldrb	r3, [r3, #12]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d1f8      	bne.n	8014638 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	2201      	movs	r2, #1
 801464a:	731a      	strb	r2, [r3, #12]
}
 801464c:	bf00      	nop
 801464e:	3708      	adds	r7, #8
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}

08014654 <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8014654:	b480      	push	{r7}
 8014656:	b083      	sub	sp, #12
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2200      	movs	r2, #0
 8014660:	731a      	strb	r2, [r3, #12]
}
 8014662:	bf00      	nop
 8014664:	370c      	adds	r7, #12
 8014666:	46bd      	mov	sp, r7
 8014668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466c:	4770      	bx	lr

0801466e <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 801466e:	b580      	push	{r7, lr}
 8014670:	b084      	sub	sp, #16
 8014672:	af00      	add	r7, sp, #0
 8014674:	6078      	str	r0, [r7, #4]
 8014676:	460b      	mov	r3, r1
 8014678:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	6858      	ldr	r0, [r3, #4]
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	691b      	ldr	r3, [r3, #16]
 8014682:	b29b      	uxth	r3, r3
 8014684:	78fa      	ldrb	r2, [r7, #3]
 8014686:	4619      	mov	r1, r3
 8014688:	f7f3 fe64 	bl	8008354 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 801468c:	2300      	movs	r3, #0
 801468e:	60fb      	str	r3, [r7, #12]
 8014690:	e002      	b.n	8014698 <SPIF_CsPin+0x2a>
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	3301      	adds	r3, #1
 8014696:	60fb      	str	r3, [r7, #12]
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	2b09      	cmp	r3, #9
 801469c:	ddf9      	ble.n	8014692 <SPIF_CsPin+0x24>
}
 801469e:	bf00      	nop
 80146a0:	bf00      	nop
 80146a2:	3710      	adds	r7, #16
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}

080146a8 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b086      	sub	sp, #24
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	60f8      	str	r0, [r7, #12]
 80146b0:	60b9      	str	r1, [r7, #8]
 80146b2:	607a      	str	r2, [r7, #4]
 80146b4:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80146b6:	2300      	movs	r3, #0
 80146b8:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 80146ba:	f7f1 fe7d 	bl	80063b8 <HAL_GetTick>
 80146be:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_TransmitReceive_DMA(Handle->HSpi, Tx, Rx, Size) != HAL_OK)
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	6818      	ldr	r0, [r3, #0]
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	b29b      	uxth	r3, r3
 80146c8:	687a      	ldr	r2, [r7, #4]
 80146ca:	68b9      	ldr	r1, [r7, #8]
 80146cc:	f7f8 feda 	bl	800d484 <HAL_SPI_TransmitReceive_DMA>
 80146d0:	4603      	mov	r3, r0
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d11a      	bne.n	801470c <SPIF_TransmitReceive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 80146d6:	2001      	movs	r0, #1
 80146d8:	f7ff ff9e 	bl	8014618 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 80146dc:	f7f1 fe6c 	bl	80063b8 <HAL_GetTick>
 80146e0:	4602      	mov	r2, r0
 80146e2:	693b      	ldr	r3, [r7, #16]
 80146e4:	1ad3      	subs	r3, r2, r3
 80146e6:	6a3a      	ldr	r2, [r7, #32]
 80146e8:	429a      	cmp	r2, r3
 80146ea:	d805      	bhi.n	80146f8 <SPIF_TransmitReceive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	4618      	mov	r0, r3
 80146f2:	f7f9 f84b 	bl	800d78c <HAL_SPI_DMAStop>
        break;
 80146f6:	e009      	b.n	801470c <SPIF_TransmitReceive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	4618      	mov	r0, r3
 80146fe:	f7f9 f9bf 	bl	800da80 <HAL_SPI_GetState>
 8014702:	4603      	mov	r3, r0
 8014704:	2b01      	cmp	r3, #1
 8014706:	d1e6      	bne.n	80146d6 <SPIF_TransmitReceive+0x2e>
      {
        retVal = true;
 8014708:	2301      	movs	r3, #1
 801470a:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 801470c:	7dfb      	ldrb	r3, [r7, #23]
}
 801470e:	4618      	mov	r0, r3
 8014710:	3718      	adds	r7, #24
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}

08014716 <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8014716:	b580      	push	{r7, lr}
 8014718:	b086      	sub	sp, #24
 801471a:	af00      	add	r7, sp, #0
 801471c:	60f8      	str	r0, [r7, #12]
 801471e:	60b9      	str	r1, [r7, #8]
 8014720:	607a      	str	r2, [r7, #4]
 8014722:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8014724:	2300      	movs	r3, #0
 8014726:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8014728:	f7f1 fe46 	bl	80063b8 <HAL_GetTick>
 801472c:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Transmit_DMA(Handle->HSpi, Tx, Size) != HAL_OK)
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	687a      	ldr	r2, [r7, #4]
 8014734:	b292      	uxth	r2, r2
 8014736:	68b9      	ldr	r1, [r7, #8]
 8014738:	4618      	mov	r0, r3
 801473a:	f7f8 fc93 	bl	800d064 <HAL_SPI_Transmit_DMA>
 801473e:	4603      	mov	r3, r0
 8014740:	2b00      	cmp	r3, #0
 8014742:	d11a      	bne.n	801477a <SPIF_Transmit+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8014744:	2001      	movs	r0, #1
 8014746:	f7ff ff67 	bl	8014618 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 801474a:	f7f1 fe35 	bl	80063b8 <HAL_GetTick>
 801474e:	4602      	mov	r2, r0
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	1ad3      	subs	r3, r2, r3
 8014754:	683a      	ldr	r2, [r7, #0]
 8014756:	429a      	cmp	r2, r3
 8014758:	d805      	bhi.n	8014766 <SPIF_Transmit+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	4618      	mov	r0, r3
 8014760:	f7f9 f814 	bl	800d78c <HAL_SPI_DMAStop>
        break;
 8014764:	e009      	b.n	801477a <SPIF_Transmit+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	4618      	mov	r0, r3
 801476c:	f7f9 f988 	bl	800da80 <HAL_SPI_GetState>
 8014770:	4603      	mov	r3, r0
 8014772:	2b01      	cmp	r3, #1
 8014774:	d1e6      	bne.n	8014744 <SPIF_Transmit+0x2e>
      {
        retVal = true;
 8014776:	2301      	movs	r3, #1
 8014778:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 801477a:	7dfb      	ldrb	r3, [r7, #23]
}
 801477c:	4618      	mov	r0, r3
 801477e:	3718      	adds	r7, #24
 8014780:	46bd      	mov	sp, r7
 8014782:	bd80      	pop	{r7, pc}

08014784 <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b086      	sub	sp, #24
 8014788:	af00      	add	r7, sp, #0
 801478a:	60f8      	str	r0, [r7, #12]
 801478c:	60b9      	str	r1, [r7, #8]
 801478e:	607a      	str	r2, [r7, #4]
 8014790:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8014792:	2300      	movs	r3, #0
 8014794:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8014796:	f7f1 fe0f 	bl	80063b8 <HAL_GetTick>
 801479a:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Receive_DMA(Handle->HSpi, Rx, Size) != HAL_OK)
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	687a      	ldr	r2, [r7, #4]
 80147a2:	b292      	uxth	r2, r2
 80147a4:	68b9      	ldr	r1, [r7, #8]
 80147a6:	4618      	mov	r0, r3
 80147a8:	f7f8 fd4c 	bl	800d244 <HAL_SPI_Receive_DMA>
 80147ac:	4603      	mov	r3, r0
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d11a      	bne.n	80147e8 <SPIF_Receive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 80147b2:	2001      	movs	r0, #1
 80147b4:	f7ff ff30 	bl	8014618 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 80147b8:	f7f1 fdfe 	bl	80063b8 <HAL_GetTick>
 80147bc:	4602      	mov	r2, r0
 80147be:	693b      	ldr	r3, [r7, #16]
 80147c0:	1ad3      	subs	r3, r2, r3
 80147c2:	683a      	ldr	r2, [r7, #0]
 80147c4:	429a      	cmp	r2, r3
 80147c6:	d805      	bhi.n	80147d4 <SPIF_Receive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	4618      	mov	r0, r3
 80147ce:	f7f8 ffdd 	bl	800d78c <HAL_SPI_DMAStop>
        break;
 80147d2:	e009      	b.n	80147e8 <SPIF_Receive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	4618      	mov	r0, r3
 80147da:	f7f9 f951 	bl	800da80 <HAL_SPI_GetState>
 80147de:	4603      	mov	r3, r0
 80147e0:	2b01      	cmp	r3, #1
 80147e2:	d1e6      	bne.n	80147b2 <SPIF_Receive+0x2e>
      {
        retVal = true;
 80147e4:	2301      	movs	r3, #1
 80147e6:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 80147e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3718      	adds	r7, #24
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}

080147f2 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 80147f2:	b580      	push	{r7, lr}
 80147f4:	b084      	sub	sp, #16
 80147f6:	af00      	add	r7, sp, #0
 80147f8:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 80147fa:	2301      	movs	r3, #1
 80147fc:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 80147fe:	2306      	movs	r3, #6
 8014800:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8014802:	2100      	movs	r1, #0
 8014804:	6878      	ldr	r0, [r7, #4]
 8014806:	f7ff ff32 	bl	801466e <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 801480a:	f107 010c 	add.w	r1, r7, #12
 801480e:	2364      	movs	r3, #100	; 0x64
 8014810:	2201      	movs	r2, #1
 8014812:	6878      	ldr	r0, [r7, #4]
 8014814:	f7ff ff7f 	bl	8014716 <SPIF_Transmit>
 8014818:	4603      	mov	r3, r0
 801481a:	f083 0301 	eor.w	r3, r3, #1
 801481e:	b2db      	uxtb	r3, r3
 8014820:	2b00      	cmp	r3, #0
 8014822:	d001      	beq.n	8014828 <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 8014824:	2300      	movs	r3, #0
 8014826:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8014828:	2101      	movs	r1, #1
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f7ff ff1f 	bl	801466e <SPIF_CsPin>
  return retVal;
 8014830:	7bfb      	ldrb	r3, [r7, #15]
}
 8014832:	4618      	mov	r0, r3
 8014834:	3710      	adds	r7, #16
 8014836:	46bd      	mov	sp, r7
 8014838:	bd80      	pop	{r7, pc}

0801483a <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 801483a:	b580      	push	{r7, lr}
 801483c:	b084      	sub	sp, #16
 801483e:	af00      	add	r7, sp, #0
 8014840:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8014842:	2301      	movs	r3, #1
 8014844:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 8014846:	2304      	movs	r3, #4
 8014848:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 801484a:	2100      	movs	r1, #0
 801484c:	6878      	ldr	r0, [r7, #4]
 801484e:	f7ff ff0e 	bl	801466e <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8014852:	f107 010c 	add.w	r1, r7, #12
 8014856:	2364      	movs	r3, #100	; 0x64
 8014858:	2201      	movs	r2, #1
 801485a:	6878      	ldr	r0, [r7, #4]
 801485c:	f7ff ff5b 	bl	8014716 <SPIF_Transmit>
 8014860:	4603      	mov	r3, r0
 8014862:	f083 0301 	eor.w	r3, r3, #1
 8014866:	b2db      	uxtb	r3, r3
 8014868:	2b00      	cmp	r3, #0
 801486a:	d001      	beq.n	8014870 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 801486c:	2300      	movs	r3, #0
 801486e:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8014870:	2101      	movs	r1, #1
 8014872:	6878      	ldr	r0, [r7, #4]
 8014874:	f7ff fefb 	bl	801466e <SPIF_CsPin>
  return retVal;
 8014878:	7bfb      	ldrb	r3, [r7, #15]
}
 801487a:	4618      	mov	r0, r3
 801487c:	3710      	adds	r7, #16
 801487e:	46bd      	mov	sp, r7
 8014880:	bd80      	pop	{r7, pc}

08014882 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8014882:	b580      	push	{r7, lr}
 8014884:	b086      	sub	sp, #24
 8014886:	af02      	add	r7, sp, #8
 8014888:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 801488a:	2300      	movs	r3, #0
 801488c:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 801488e:	f24a 5305 	movw	r3, #42245	; 0xa505
 8014892:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 8014894:	2100      	movs	r1, #0
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f7ff fee9 	bl	801466e <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 801489c:	f107 0208 	add.w	r2, r7, #8
 80148a0:	f107 010c 	add.w	r1, r7, #12
 80148a4:	2364      	movs	r3, #100	; 0x64
 80148a6:	9300      	str	r3, [sp, #0]
 80148a8:	2302      	movs	r3, #2
 80148aa:	6878      	ldr	r0, [r7, #4]
 80148ac:	f7ff fefc 	bl	80146a8 <SPIF_TransmitReceive>
 80148b0:	4603      	mov	r3, r0
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d001      	beq.n	80148ba <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 80148b6:	7a7b      	ldrb	r3, [r7, #9]
 80148b8:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 80148ba:	2101      	movs	r1, #1
 80148bc:	6878      	ldr	r0, [r7, #4]
 80148be:	f7ff fed6 	bl	801466e <SPIF_CsPin>
  return retVal;
 80148c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80148c4:	4618      	mov	r0, r3
 80148c6:	3710      	adds	r7, #16
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd80      	pop	{r7, pc}

080148cc <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b084      	sub	sp, #16
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
 80148d4:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 80148d6:	2300      	movs	r3, #0
 80148d8:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 80148da:	f7f1 fd6d 	bl	80063b8 <HAL_GetTick>
 80148de:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 80148e0:	2001      	movs	r0, #1
 80148e2:	f7ff fe99 	bl	8014618 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 80148e6:	f7f1 fd67 	bl	80063b8 <HAL_GetTick>
 80148ea:	4602      	mov	r2, r0
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	1ad3      	subs	r3, r2, r3
 80148f0:	683a      	ldr	r2, [r7, #0]
 80148f2:	429a      	cmp	r2, r3
 80148f4:	d90a      	bls.n	801490c <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 80148f6:	6878      	ldr	r0, [r7, #4]
 80148f8:	f7ff ffc3 	bl	8014882 <SPIF_ReadReg1>
 80148fc:	4603      	mov	r3, r0
 80148fe:	f003 0301 	and.w	r3, r3, #1
 8014902:	2b00      	cmp	r3, #0
 8014904:	d1ec      	bne.n	80148e0 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 8014906:	2301      	movs	r3, #1
 8014908:	73fb      	strb	r3, [r7, #15]
      break;
 801490a:	e000      	b.n	801490e <SPIF_WaitForWriting+0x42>
      break;
 801490c:	bf00      	nop
    }
  }
  return retVal;
 801490e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014910:	4618      	mov	r0, r3
 8014912:	3710      	adds	r7, #16
 8014914:	46bd      	mov	sp, r7
 8014916:	bd80      	pop	{r7, pc}

08014918 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8014918:	b580      	push	{r7, lr}
 801491a:	b088      	sub	sp, #32
 801491c:	af02      	add	r7, sp, #8
 801491e:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8014920:	f06f 0360 	mvn.w	r3, #96	; 0x60
 8014924:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 8014926:	2300      	movs	r3, #0
 8014928:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 801492a:	2100      	movs	r1, #0
 801492c:	6878      	ldr	r0, [r7, #4]
 801492e:	f7ff fe9e 	bl	801466e <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 8014932:	f107 020c 	add.w	r2, r7, #12
 8014936:	f107 0110 	add.w	r1, r7, #16
 801493a:	2364      	movs	r3, #100	; 0x64
 801493c:	9300      	str	r3, [sp, #0]
 801493e:	2304      	movs	r3, #4
 8014940:	6878      	ldr	r0, [r7, #4]
 8014942:	f7ff feb1 	bl	80146a8 <SPIF_TransmitReceive>
 8014946:	4603      	mov	r3, r0
 8014948:	f083 0301 	eor.w	r3, r3, #1
 801494c:	b2db      	uxtb	r3, r3
 801494e:	2b00      	cmp	r3, #0
 8014950:	d004      	beq.n	801495c <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 8014952:	2101      	movs	r1, #1
 8014954:	6878      	ldr	r0, [r7, #4]
 8014956:	f7ff fe8a 	bl	801466e <SPIF_CsPin>
      break;
 801495a:	e16f      	b.n	8014c3c <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 801495c:	2101      	movs	r1, #1
 801495e:	6878      	ldr	r0, [r7, #4]
 8014960:	f7ff fe85 	bl	801466e <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8014964:	7b7a      	ldrb	r2, [r7, #13]
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 801496a:	7bba      	ldrb	r2, [r7, #14]
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8014970:	7bfa      	ldrb	r2, [r7, #15]
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	7a1b      	ldrb	r3, [r3, #8]
 801497a:	2bef      	cmp	r3, #239	; 0xef
 801497c:	f000 80f0 	beq.w	8014b60 <SPIF_FindChip+0x248>
 8014980:	2bef      	cmp	r3, #239	; 0xef
 8014982:	f300 80e9 	bgt.w	8014b58 <SPIF_FindChip+0x240>
 8014986:	2bc8      	cmp	r3, #200	; 0xc8
 8014988:	f300 80e6 	bgt.w	8014b58 <SPIF_FindChip+0x240>
 801498c:	2b85      	cmp	r3, #133	; 0x85
 801498e:	da0c      	bge.n	80149aa <SPIF_FindChip+0x92>
 8014990:	2b62      	cmp	r3, #98	; 0x62
 8014992:	f000 80e7 	beq.w	8014b64 <SPIF_FindChip+0x24c>
 8014996:	2b62      	cmp	r3, #98	; 0x62
 8014998:	f300 80de 	bgt.w	8014b58 <SPIF_FindChip+0x240>
 801499c:	2b20      	cmp	r3, #32
 801499e:	f300 80d9 	bgt.w	8014b54 <SPIF_FindChip+0x23c>
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	f300 8090 	bgt.w	8014ac8 <SPIF_FindChip+0x1b0>
 80149a8:	e0d6      	b.n	8014b58 <SPIF_FindChip+0x240>
 80149aa:	3b85      	subs	r3, #133	; 0x85
 80149ac:	2b43      	cmp	r3, #67	; 0x43
 80149ae:	f200 80d3 	bhi.w	8014b58 <SPIF_FindChip+0x240>
 80149b2:	a201      	add	r2, pc, #4	; (adr r2, 80149b8 <SPIF_FindChip+0xa0>)
 80149b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149b8:	08014b69 	.word	0x08014b69
 80149bc:	08014b59 	.word	0x08014b59
 80149c0:	08014b59 	.word	0x08014b59
 80149c4:	08014b59 	.word	0x08014b59
 80149c8:	08014b69 	.word	0x08014b69
 80149cc:	08014b59 	.word	0x08014b59
 80149d0:	08014b59 	.word	0x08014b59
 80149d4:	08014b69 	.word	0x08014b69
 80149d8:	08014b59 	.word	0x08014b59
 80149dc:	08014b59 	.word	0x08014b59
 80149e0:	08014b59 	.word	0x08014b59
 80149e4:	08014b59 	.word	0x08014b59
 80149e8:	08014b59 	.word	0x08014b59
 80149ec:	08014b59 	.word	0x08014b59
 80149f0:	08014b59 	.word	0x08014b59
 80149f4:	08014b59 	.word	0x08014b59
 80149f8:	08014b59 	.word	0x08014b59
 80149fc:	08014b59 	.word	0x08014b59
 8014a00:	08014b59 	.word	0x08014b59
 8014a04:	08014b59 	.word	0x08014b59
 8014a08:	08014b59 	.word	0x08014b59
 8014a0c:	08014b59 	.word	0x08014b59
 8014a10:	08014b59 	.word	0x08014b59
 8014a14:	08014b59 	.word	0x08014b59
 8014a18:	08014b69 	.word	0x08014b69
 8014a1c:	08014b59 	.word	0x08014b59
 8014a20:	08014b59 	.word	0x08014b59
 8014a24:	08014b59 	.word	0x08014b59
 8014a28:	08014b69 	.word	0x08014b69
 8014a2c:	08014b59 	.word	0x08014b59
 8014a30:	08014b59 	.word	0x08014b59
 8014a34:	08014b59 	.word	0x08014b59
 8014a38:	08014b59 	.word	0x08014b59
 8014a3c:	08014b59 	.word	0x08014b59
 8014a40:	08014b59 	.word	0x08014b59
 8014a44:	08014b59 	.word	0x08014b59
 8014a48:	08014b59 	.word	0x08014b59
 8014a4c:	08014b59 	.word	0x08014b59
 8014a50:	08014b59 	.word	0x08014b59
 8014a54:	08014b59 	.word	0x08014b59
 8014a58:	08014b69 	.word	0x08014b69
 8014a5c:	08014b59 	.word	0x08014b59
 8014a60:	08014b59 	.word	0x08014b59
 8014a64:	08014b59 	.word	0x08014b59
 8014a68:	08014b59 	.word	0x08014b59
 8014a6c:	08014b59 	.word	0x08014b59
 8014a70:	08014b59 	.word	0x08014b59
 8014a74:	08014b59 	.word	0x08014b59
 8014a78:	08014b59 	.word	0x08014b59
 8014a7c:	08014b59 	.word	0x08014b59
 8014a80:	08014b59 	.word	0x08014b59
 8014a84:	08014b59 	.word	0x08014b59
 8014a88:	08014b59 	.word	0x08014b59
 8014a8c:	08014b59 	.word	0x08014b59
 8014a90:	08014b59 	.word	0x08014b59
 8014a94:	08014b59 	.word	0x08014b59
 8014a98:	08014b59 	.word	0x08014b59
 8014a9c:	08014b59 	.word	0x08014b59
 8014aa0:	08014b69 	.word	0x08014b69
 8014aa4:	08014b59 	.word	0x08014b59
 8014aa8:	08014b59 	.word	0x08014b59
 8014aac:	08014b69 	.word	0x08014b69
 8014ab0:	08014b59 	.word	0x08014b59
 8014ab4:	08014b59 	.word	0x08014b59
 8014ab8:	08014b59 	.word	0x08014b59
 8014abc:	08014b59 	.word	0x08014b59
 8014ac0:	08014b59 	.word	0x08014b59
 8014ac4:	08014b69 	.word	0x08014b69
 8014ac8:	3b01      	subs	r3, #1
 8014aca:	2b1f      	cmp	r3, #31
 8014acc:	d844      	bhi.n	8014b58 <SPIF_FindChip+0x240>
 8014ace:	a201      	add	r2, pc, #4	; (adr r2, 8014ad4 <SPIF_FindChip+0x1bc>)
 8014ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ad4:	08014b6d 	.word	0x08014b6d
 8014ad8:	08014b59 	.word	0x08014b59
 8014adc:	08014b59 	.word	0x08014b59
 8014ae0:	08014b6d 	.word	0x08014b6d
 8014ae4:	08014b59 	.word	0x08014b59
 8014ae8:	08014b59 	.word	0x08014b59
 8014aec:	08014b59 	.word	0x08014b59
 8014af0:	08014b59 	.word	0x08014b59
 8014af4:	08014b59 	.word	0x08014b59
 8014af8:	08014b59 	.word	0x08014b59
 8014afc:	08014b59 	.word	0x08014b59
 8014b00:	08014b59 	.word	0x08014b59
 8014b04:	08014b59 	.word	0x08014b59
 8014b08:	08014b59 	.word	0x08014b59
 8014b0c:	08014b59 	.word	0x08014b59
 8014b10:	08014b59 	.word	0x08014b59
 8014b14:	08014b59 	.word	0x08014b59
 8014b18:	08014b59 	.word	0x08014b59
 8014b1c:	08014b59 	.word	0x08014b59
 8014b20:	08014b59 	.word	0x08014b59
 8014b24:	08014b59 	.word	0x08014b59
 8014b28:	08014b59 	.word	0x08014b59
 8014b2c:	08014b59 	.word	0x08014b59
 8014b30:	08014b59 	.word	0x08014b59
 8014b34:	08014b59 	.word	0x08014b59
 8014b38:	08014b59 	.word	0x08014b59
 8014b3c:	08014b59 	.word	0x08014b59
 8014b40:	08014b6d 	.word	0x08014b6d
 8014b44:	08014b59 	.word	0x08014b59
 8014b48:	08014b59 	.word	0x08014b59
 8014b4c:	08014b59 	.word	0x08014b59
 8014b50:	08014b6d 	.word	0x08014b6d
 8014b54:	2b37      	cmp	r3, #55	; 0x37
 8014b56:	d00b      	beq.n	8014b70 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 8014b5e:	e008      	b.n	8014b72 <SPIF_FindChip+0x25a>
      break;
 8014b60:	bf00      	nop
 8014b62:	e006      	b.n	8014b72 <SPIF_FindChip+0x25a>
      break;
 8014b64:	bf00      	nop
 8014b66:	e004      	b.n	8014b72 <SPIF_FindChip+0x25a>
      break;
 8014b68:	bf00      	nop
 8014b6a:	e002      	b.n	8014b72 <SPIF_FindChip+0x25a>
      break;
 8014b6c:	bf00      	nop
 8014b6e:	e000      	b.n	8014b72 <SPIF_FindChip+0x25a>
      break;
 8014b70:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	7a5b      	ldrb	r3, [r3, #9]
 8014b76:	3b11      	subs	r3, #17
 8014b78:	2b0f      	cmp	r3, #15
 8014b7a:	d84e      	bhi.n	8014c1a <SPIF_FindChip+0x302>
 8014b7c:	a201      	add	r2, pc, #4	; (adr r2, 8014b84 <SPIF_FindChip+0x26c>)
 8014b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b82:	bf00      	nop
 8014b84:	08014bc5 	.word	0x08014bc5
 8014b88:	08014bcd 	.word	0x08014bcd
 8014b8c:	08014bd5 	.word	0x08014bd5
 8014b90:	08014bdd 	.word	0x08014bdd
 8014b94:	08014be5 	.word	0x08014be5
 8014b98:	08014bed 	.word	0x08014bed
 8014b9c:	08014bf5 	.word	0x08014bf5
 8014ba0:	08014bfd 	.word	0x08014bfd
 8014ba4:	08014c07 	.word	0x08014c07
 8014ba8:	08014c1b 	.word	0x08014c1b
 8014bac:	08014c1b 	.word	0x08014c1b
 8014bb0:	08014c1b 	.word	0x08014c1b
 8014bb4:	08014c1b 	.word	0x08014c1b
 8014bb8:	08014c1b 	.word	0x08014c1b
 8014bbc:	08014c1b 	.word	0x08014c1b
 8014bc0:	08014c11 	.word	0x08014c11
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	2202      	movs	r2, #2
 8014bc8:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 8014bca:	e02a      	b.n	8014c22 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	2204      	movs	r2, #4
 8014bd0:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 8014bd2:	e026      	b.n	8014c22 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	2208      	movs	r2, #8
 8014bd8:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 8014bda:	e022      	b.n	8014c22 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	2210      	movs	r2, #16
 8014be0:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 8014be2:	e01e      	b.n	8014c22 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2220      	movs	r2, #32
 8014be8:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 8014bea:	e01a      	b.n	8014c22 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	2240      	movs	r2, #64	; 0x40
 8014bf0:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 8014bf2:	e016      	b.n	8014c22 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	2280      	movs	r2, #128	; 0x80
 8014bf8:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 8014bfa:	e012      	b.n	8014c22 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014c02:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 8014c04:	e00d      	b.n	8014c22 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014c0c:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 8014c0e:	e008      	b.n	8014c22 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014c16:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 8014c18:	e003      	b.n	8014c22 <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	2200      	movs	r2, #0
 8014c1e:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 8014c20:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	69db      	ldr	r3, [r3, #28]
 8014c26:	011a      	lsls	r2, r3, #4
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	699b      	ldr	r3, [r3, #24]
 8014c30:	031b      	lsls	r3, r3, #12
 8014c32:	0a1a      	lsrs	r2, r3, #8
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 8014c38:	2301      	movs	r3, #1
 8014c3a:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8014c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c3e:	4618      	mov	r0, r3
 8014c40:	3718      	adds	r7, #24
 8014c42:	46bd      	mov	sp, r7
 8014c44:	bd80      	pop	{r7, pc}
 8014c46:	bf00      	nop

08014c48 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b08a      	sub	sp, #40	; 0x28
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	60f8      	str	r0, [r7, #12]
 8014c50:	60b9      	str	r1, [r7, #8]
 8014c52:	607a      	str	r2, [r7, #4]
 8014c54:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8014c56:	2300      	movs	r3, #0
 8014c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	623b      	str	r3, [r7, #32]
 8014c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c62:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8014c66:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	695b      	ldr	r3, [r3, #20]
 8014c6c:	68ba      	ldr	r2, [r7, #8]
 8014c6e:	429a      	cmp	r2, r3
 8014c70:	f080 8084 	bcs.w	8014d7c <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 8014c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c76:	2bff      	cmp	r3, #255	; 0xff
 8014c78:	f200 8082 	bhi.w	8014d80 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 8014c7c:	683a      	ldr	r2, [r7, #0]
 8014c7e:	69fb      	ldr	r3, [r7, #28]
 8014c80:	429a      	cmp	r2, r3
 8014c82:	d901      	bls.n	8014c88 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 8014c84:	69fb      	ldr	r3, [r7, #28]
 8014c86:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 8014c88:	68bb      	ldr	r3, [r7, #8]
 8014c8a:	021b      	lsls	r3, r3, #8
 8014c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c8e:	4413      	add	r3, r2
 8014c90:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 8014c92:	68f8      	ldr	r0, [r7, #12]
 8014c94:	f7ff fdad 	bl	80147f2 <SPIF_WriteEnable>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	f083 0301 	eor.w	r3, r3, #1
 8014c9e:	b2db      	uxtb	r3, r3
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d16f      	bne.n	8014d84 <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8014ca4:	2100      	movs	r1, #0
 8014ca6:	68f8      	ldr	r0, [r7, #12]
 8014ca8:	f7ff fce1 	bl	801466e <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	69db      	ldr	r3, [r3, #28]
 8014cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014cb4:	d322      	bcc.n	8014cfc <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 8014cb6:	2312      	movs	r3, #18
 8014cb8:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 8014cba:	6a3b      	ldr	r3, [r7, #32]
 8014cbc:	0e1b      	lsrs	r3, r3, #24
 8014cbe:	b2db      	uxtb	r3, r3
 8014cc0:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 8014cc2:	6a3b      	ldr	r3, [r7, #32]
 8014cc4:	0c1b      	lsrs	r3, r3, #16
 8014cc6:	b2db      	uxtb	r3, r3
 8014cc8:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 8014cca:	6a3b      	ldr	r3, [r7, #32]
 8014ccc:	0a1b      	lsrs	r3, r3, #8
 8014cce:	b2db      	uxtb	r3, r3
 8014cd0:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 8014cd2:	6a3b      	ldr	r3, [r7, #32]
 8014cd4:	b2db      	uxtb	r3, r3
 8014cd6:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8014cd8:	f107 0114 	add.w	r1, r7, #20
 8014cdc:	2364      	movs	r3, #100	; 0x64
 8014cde:	2205      	movs	r2, #5
 8014ce0:	68f8      	ldr	r0, [r7, #12]
 8014ce2:	f7ff fd18 	bl	8014716 <SPIF_Transmit>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	f083 0301 	eor.w	r3, r3, #1
 8014cec:	b2db      	uxtb	r3, r3
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d023      	beq.n	8014d3a <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8014cf2:	2101      	movs	r1, #1
 8014cf4:	68f8      	ldr	r0, [r7, #12]
 8014cf6:	f7ff fcba 	bl	801466e <SPIF_CsPin>
        break;
 8014cfa:	e044      	b.n	8014d86 <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 8014cfc:	2302      	movs	r3, #2
 8014cfe:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 8014d00:	6a3b      	ldr	r3, [r7, #32]
 8014d02:	0c1b      	lsrs	r3, r3, #16
 8014d04:	b2db      	uxtb	r3, r3
 8014d06:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 8014d08:	6a3b      	ldr	r3, [r7, #32]
 8014d0a:	0a1b      	lsrs	r3, r3, #8
 8014d0c:	b2db      	uxtb	r3, r3
 8014d0e:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 8014d10:	6a3b      	ldr	r3, [r7, #32]
 8014d12:	b2db      	uxtb	r3, r3
 8014d14:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8014d16:	f107 0114 	add.w	r1, r7, #20
 8014d1a:	2364      	movs	r3, #100	; 0x64
 8014d1c:	2204      	movs	r2, #4
 8014d1e:	68f8      	ldr	r0, [r7, #12]
 8014d20:	f7ff fcf9 	bl	8014716 <SPIF_Transmit>
 8014d24:	4603      	mov	r3, r0
 8014d26:	f083 0301 	eor.w	r3, r3, #1
 8014d2a:	b2db      	uxtb	r3, r3
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d004      	beq.n	8014d3a <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8014d30:	2101      	movs	r1, #1
 8014d32:	68f8      	ldr	r0, [r7, #12]
 8014d34:	f7ff fc9b 	bl	801466e <SPIF_CsPin>
        break;
 8014d38:	e025      	b.n	8014d86 <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 8014d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014d3e:	683a      	ldr	r2, [r7, #0]
 8014d40:	6879      	ldr	r1, [r7, #4]
 8014d42:	68f8      	ldr	r0, [r7, #12]
 8014d44:	f7ff fce7 	bl	8014716 <SPIF_Transmit>
 8014d48:	4603      	mov	r3, r0
 8014d4a:	f083 0301 	eor.w	r3, r3, #1
 8014d4e:	b2db      	uxtb	r3, r3
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d004      	beq.n	8014d5e <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 8014d54:	2101      	movs	r1, #1
 8014d56:	68f8      	ldr	r0, [r7, #12]
 8014d58:	f7ff fc89 	bl	801466e <SPIF_CsPin>
      break;
 8014d5c:	e013      	b.n	8014d86 <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 8014d5e:	2101      	movs	r1, #1
 8014d60:	68f8      	ldr	r0, [r7, #12]
 8014d62:	f7ff fc84 	bl	801466e <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 8014d66:	2164      	movs	r1, #100	; 0x64
 8014d68:	68f8      	ldr	r0, [r7, #12]
 8014d6a:	f7ff fdaf 	bl	80148cc <SPIF_WaitForWriting>
 8014d6e:	4603      	mov	r3, r0
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d008      	beq.n	8014d86 <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 8014d74:	2301      	movs	r3, #1
 8014d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014d7a:	e004      	b.n	8014d86 <SPIF_WriteFn+0x13e>
      break;
 8014d7c:	bf00      	nop
 8014d7e:	e002      	b.n	8014d86 <SPIF_WriteFn+0x13e>
      break;
 8014d80:	bf00      	nop
 8014d82:	e000      	b.n	8014d86 <SPIF_WriteFn+0x13e>
      break;
 8014d84:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8014d86:	68f8      	ldr	r0, [r7, #12]
 8014d88:	f7ff fd57 	bl	801483a <SPIF_WriteDisable>
  return retVal;
 8014d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8014d90:	4618      	mov	r0, r3
 8014d92:	3728      	adds	r7, #40	; 0x28
 8014d94:	46bd      	mov	sp, r7
 8014d96:	bd80      	pop	{r7, pc}

08014d98 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b086      	sub	sp, #24
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	60f8      	str	r0, [r7, #12]
 8014da0:	60b9      	str	r1, [r7, #8]
 8014da2:	607a      	str	r2, [r7, #4]
 8014da4:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8014da6:	2300      	movs	r3, #0
 8014da8:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 8014daa:	2100      	movs	r1, #0
 8014dac:	68f8      	ldr	r0, [r7, #12]
 8014dae:	f7ff fc5e 	bl	801466e <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	69db      	ldr	r3, [r3, #28]
 8014db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014dba:	d322      	bcc.n	8014e02 <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 8014dbc:	2313      	movs	r3, #19
 8014dbe:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 8014dc0:	68bb      	ldr	r3, [r7, #8]
 8014dc2:	0e1b      	lsrs	r3, r3, #24
 8014dc4:	b2db      	uxtb	r3, r3
 8014dc6:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 8014dc8:	68bb      	ldr	r3, [r7, #8]
 8014dca:	0c1b      	lsrs	r3, r3, #16
 8014dcc:	b2db      	uxtb	r3, r3
 8014dce:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 8014dd0:	68bb      	ldr	r3, [r7, #8]
 8014dd2:	0a1b      	lsrs	r3, r3, #8
 8014dd4:	b2db      	uxtb	r3, r3
 8014dd6:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 8014dd8:	68bb      	ldr	r3, [r7, #8]
 8014dda:	b2db      	uxtb	r3, r3
 8014ddc:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8014dde:	f107 0110 	add.w	r1, r7, #16
 8014de2:	2364      	movs	r3, #100	; 0x64
 8014de4:	2205      	movs	r2, #5
 8014de6:	68f8      	ldr	r0, [r7, #12]
 8014de8:	f7ff fc95 	bl	8014716 <SPIF_Transmit>
 8014dec:	4603      	mov	r3, r0
 8014dee:	f083 0301 	eor.w	r3, r3, #1
 8014df2:	b2db      	uxtb	r3, r3
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d023      	beq.n	8014e40 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8014df8:	2101      	movs	r1, #1
 8014dfa:	68f8      	ldr	r0, [r7, #12]
 8014dfc:	f7ff fc37 	bl	801466e <SPIF_CsPin>
        break;
 8014e00:	e036      	b.n	8014e70 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 8014e02:	2303      	movs	r3, #3
 8014e04:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 8014e06:	68bb      	ldr	r3, [r7, #8]
 8014e08:	0c1b      	lsrs	r3, r3, #16
 8014e0a:	b2db      	uxtb	r3, r3
 8014e0c:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 8014e0e:	68bb      	ldr	r3, [r7, #8]
 8014e10:	0a1b      	lsrs	r3, r3, #8
 8014e12:	b2db      	uxtb	r3, r3
 8014e14:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 8014e16:	68bb      	ldr	r3, [r7, #8]
 8014e18:	b2db      	uxtb	r3, r3
 8014e1a:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8014e1c:	f107 0110 	add.w	r1, r7, #16
 8014e20:	2364      	movs	r3, #100	; 0x64
 8014e22:	2204      	movs	r2, #4
 8014e24:	68f8      	ldr	r0, [r7, #12]
 8014e26:	f7ff fc76 	bl	8014716 <SPIF_Transmit>
 8014e2a:	4603      	mov	r3, r0
 8014e2c:	f083 0301 	eor.w	r3, r3, #1
 8014e30:	b2db      	uxtb	r3, r3
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d004      	beq.n	8014e40 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8014e36:	2101      	movs	r1, #1
 8014e38:	68f8      	ldr	r0, [r7, #12]
 8014e3a:	f7ff fc18 	bl	801466e <SPIF_CsPin>
        break;
 8014e3e:	e017      	b.n	8014e70 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8014e40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8014e44:	683a      	ldr	r2, [r7, #0]
 8014e46:	6879      	ldr	r1, [r7, #4]
 8014e48:	68f8      	ldr	r0, [r7, #12]
 8014e4a:	f7ff fc9b 	bl	8014784 <SPIF_Receive>
 8014e4e:	4603      	mov	r3, r0
 8014e50:	f083 0301 	eor.w	r3, r3, #1
 8014e54:	b2db      	uxtb	r3, r3
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d004      	beq.n	8014e64 <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 8014e5a:	2101      	movs	r1, #1
 8014e5c:	68f8      	ldr	r0, [r7, #12]
 8014e5e:	f7ff fc06 	bl	801466e <SPIF_CsPin>
      break;
 8014e62:	e005      	b.n	8014e70 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 8014e64:	2101      	movs	r1, #1
 8014e66:	68f8      	ldr	r0, [r7, #12]
 8014e68:	f7ff fc01 	bl	801466e <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8014e6c:	2301      	movs	r3, #1
 8014e6e:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8014e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e72:	4618      	mov	r0, r3
 8014e74:	3718      	adds	r7, #24
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}

08014e7a <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 8014e7a:	b580      	push	{r7, lr}
 8014e7c:	b086      	sub	sp, #24
 8014e7e:	af00      	add	r7, sp, #0
 8014e80:	60f8      	str	r0, [r7, #12]
 8014e82:	60b9      	str	r1, [r7, #8]
 8014e84:	607a      	str	r2, [r7, #4]
 8014e86:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 8014e88:	2300      	movs	r3, #0
 8014e8a:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d03a      	beq.n	8014f08 <SPIF_Init+0x8e>
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d037      	beq.n	8014f08 <SPIF_Init+0x8e>
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d034      	beq.n	8014f08 <SPIF_Init+0x8e>
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	7a9b      	ldrb	r3, [r3, #10]
 8014ea2:	2b01      	cmp	r3, #1
 8014ea4:	d030      	beq.n	8014f08 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 8014ea6:	2220      	movs	r2, #32
 8014ea8:	2100      	movs	r1, #0
 8014eaa:	68f8      	ldr	r0, [r7, #12]
 8014eac:	f002 fe75 	bl	8017b9a <memset>
    Handle->HSpi = HSpi;
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	68ba      	ldr	r2, [r7, #8]
 8014eb4:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	687a      	ldr	r2, [r7, #4]
 8014eba:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 8014ebc:	887a      	ldrh	r2, [r7, #2]
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 8014ec2:	2101      	movs	r1, #1
 8014ec4:	68f8      	ldr	r0, [r7, #12]
 8014ec6:	f7ff fbd2 	bl	801466e <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 8014eca:	e002      	b.n	8014ed2 <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 8014ecc:	2001      	movs	r0, #1
 8014ece:	f7ff fba3 	bl	8014618 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 8014ed2:	f7f1 fa71 	bl	80063b8 <HAL_GetTick>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	2b13      	cmp	r3, #19
 8014eda:	d9f7      	bls.n	8014ecc <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 8014edc:	68f8      	ldr	r0, [r7, #12]
 8014ede:	f7ff fcac 	bl	801483a <SPIF_WriteDisable>
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	f083 0301 	eor.w	r3, r3, #1
 8014ee8:	b2db      	uxtb	r3, r3
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d10b      	bne.n	8014f06 <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 8014eee:	68f8      	ldr	r0, [r7, #12]
 8014ef0:	f7ff fd12 	bl	8014918 <SPIF_FindChip>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 8014ef8:	7dfb      	ldrb	r3, [r7, #23]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d004      	beq.n	8014f08 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	2201      	movs	r2, #1
 8014f02:	729a      	strb	r2, [r3, #10]
 8014f04:	e000      	b.n	8014f08 <SPIF_Init+0x8e>
      break;
 8014f06:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8014f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	3718      	adds	r7, #24
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd80      	pop	{r7, pc}

08014f12 <SPIF_EraseChip>:
  * @param  *Handle: Pointer to SPIF_HandleTypeDef structure
  *
  * @retval bool: true or false
  */
bool SPIF_EraseChip(SPIF_HandleTypeDef *Handle)
{
 8014f12:	b580      	push	{r7, lr}
 8014f14:	b084      	sub	sp, #16
 8014f16:	af00      	add	r7, sp, #0
 8014f18:	6078      	str	r0, [r7, #4]
  SPIF_Lock(Handle);
 8014f1a:	6878      	ldr	r0, [r7, #4]
 8014f1c:	f7ff fb87 	bl	801462e <SPIF_Lock>
  bool retVal = false;
 8014f20:	2300      	movs	r3, #0
 8014f22:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_CHIPERASE1};
 8014f24:	2360      	movs	r3, #96	; 0x60
 8014f26:	733b      	strb	r3, [r7, #12]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseChip() START\r\n");
    if (SPIF_WriteEnable(Handle) == false)
 8014f28:	6878      	ldr	r0, [r7, #4]
 8014f2a:	f7ff fc62 	bl	80147f2 <SPIF_WriteEnable>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	f083 0301 	eor.w	r3, r3, #1
 8014f34:	b2db      	uxtb	r3, r3
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d129      	bne.n	8014f8e <SPIF_EraseChip+0x7c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8014f3a:	2100      	movs	r1, #0
 8014f3c:	6878      	ldr	r0, [r7, #4]
 8014f3e:	f7ff fb96 	bl	801466e <SPIF_CsPin>
    if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8014f42:	f107 010c 	add.w	r1, r7, #12
 8014f46:	2364      	movs	r3, #100	; 0x64
 8014f48:	2201      	movs	r2, #1
 8014f4a:	6878      	ldr	r0, [r7, #4]
 8014f4c:	f7ff fbe3 	bl	8014716 <SPIF_Transmit>
 8014f50:	4603      	mov	r3, r0
 8014f52:	f083 0301 	eor.w	r3, r3, #1
 8014f56:	b2db      	uxtb	r3, r3
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d004      	beq.n	8014f66 <SPIF_EraseChip+0x54>
    {
      SPIF_CsPin(Handle, 1);
 8014f5c:	2101      	movs	r1, #1
 8014f5e:	6878      	ldr	r0, [r7, #4]
 8014f60:	f7ff fb85 	bl	801466e <SPIF_CsPin>
      break;
 8014f64:	e014      	b.n	8014f90 <SPIF_EraseChip+0x7e>
    }
    SPIF_CsPin(Handle, 1);
 8014f66:	2101      	movs	r1, #1
 8014f68:	6878      	ldr	r0, [r7, #4]
 8014f6a:	f7ff fb80 	bl	801466e <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, Handle->BlockCnt * 1000))
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	69db      	ldr	r3, [r3, #28]
 8014f72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014f76:	fb02 f303 	mul.w	r3, r2, r3
 8014f7a:	4619      	mov	r1, r3
 8014f7c:	6878      	ldr	r0, [r7, #4]
 8014f7e:	f7ff fca5 	bl	80148cc <SPIF_WaitForWriting>
 8014f82:	4603      	mov	r3, r0
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d003      	beq.n	8014f90 <SPIF_EraseChip+0x7e>
    {
      dprintf("SPIF_EraseChip() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 8014f88:	2301      	movs	r3, #1
 8014f8a:	73fb      	strb	r3, [r7, #15]
 8014f8c:	e000      	b.n	8014f90 <SPIF_EraseChip+0x7e>
      break;
 8014f8e:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8014f90:	6878      	ldr	r0, [r7, #4]
 8014f92:	f7ff fc52 	bl	801483a <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8014f96:	6878      	ldr	r0, [r7, #4]
 8014f98:	f7ff fb5c 	bl	8014654 <SPIF_UnLock>
  return retVal;
 8014f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	3710      	adds	r7, #16
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	bd80      	pop	{r7, pc}

08014fa6 <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 8014fa6:	b580      	push	{r7, lr}
 8014fa8:	b086      	sub	sp, #24
 8014faa:	af00      	add	r7, sp, #0
 8014fac:	6078      	str	r0, [r7, #4]
 8014fae:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8014fb0:	6878      	ldr	r0, [r7, #4]
 8014fb2:	f7ff fb3c 	bl	801462e <SPIF_Lock>
  bool retVal = false;
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 8014fba:	683b      	ldr	r3, [r7, #0]
 8014fbc:	031b      	lsls	r3, r3, #12
 8014fbe:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	699b      	ldr	r3, [r3, #24]
 8014fc4:	683a      	ldr	r2, [r7, #0]
 8014fc6:	429a      	cmp	r2, r3
 8014fc8:	d262      	bcs.n	8015090 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	f7ff fc11 	bl	80147f2 <SPIF_WriteEnable>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	f083 0301 	eor.w	r3, r3, #1
 8014fd6:	b2db      	uxtb	r3, r3
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d15b      	bne.n	8015094 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8014fdc:	2100      	movs	r1, #0
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f7ff fb45 	bl	801466e <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	69db      	ldr	r3, [r3, #28]
 8014fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014fec:	d322      	bcc.n	8015034 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 8014fee:	2321      	movs	r3, #33	; 0x21
 8014ff0:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 8014ff2:	693b      	ldr	r3, [r7, #16]
 8014ff4:	0e1b      	lsrs	r3, r3, #24
 8014ff6:	b2db      	uxtb	r3, r3
 8014ff8:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 8014ffa:	693b      	ldr	r3, [r7, #16]
 8014ffc:	0c1b      	lsrs	r3, r3, #16
 8014ffe:	b2db      	uxtb	r3, r3
 8015000:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 8015002:	693b      	ldr	r3, [r7, #16]
 8015004:	0a1b      	lsrs	r3, r3, #8
 8015006:	b2db      	uxtb	r3, r3
 8015008:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 801500a:	693b      	ldr	r3, [r7, #16]
 801500c:	b2db      	uxtb	r3, r3
 801500e:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8015010:	f107 0108 	add.w	r1, r7, #8
 8015014:	2364      	movs	r3, #100	; 0x64
 8015016:	2205      	movs	r2, #5
 8015018:	6878      	ldr	r0, [r7, #4]
 801501a:	f7ff fb7c 	bl	8014716 <SPIF_Transmit>
 801501e:	4603      	mov	r3, r0
 8015020:	f083 0301 	eor.w	r3, r3, #1
 8015024:	b2db      	uxtb	r3, r3
 8015026:	2b00      	cmp	r3, #0
 8015028:	d023      	beq.n	8015072 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 801502a:	2101      	movs	r1, #1
 801502c:	6878      	ldr	r0, [r7, #4]
 801502e:	f7ff fb1e 	bl	801466e <SPIF_CsPin>
        break;
 8015032:	e030      	b.n	8015096 <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 8015034:	2320      	movs	r3, #32
 8015036:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 8015038:	693b      	ldr	r3, [r7, #16]
 801503a:	0c1b      	lsrs	r3, r3, #16
 801503c:	b2db      	uxtb	r3, r3
 801503e:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 8015040:	693b      	ldr	r3, [r7, #16]
 8015042:	0a1b      	lsrs	r3, r3, #8
 8015044:	b2db      	uxtb	r3, r3
 8015046:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 8015048:	693b      	ldr	r3, [r7, #16]
 801504a:	b2db      	uxtb	r3, r3
 801504c:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 801504e:	f107 0108 	add.w	r1, r7, #8
 8015052:	2364      	movs	r3, #100	; 0x64
 8015054:	2204      	movs	r2, #4
 8015056:	6878      	ldr	r0, [r7, #4]
 8015058:	f7ff fb5d 	bl	8014716 <SPIF_Transmit>
 801505c:	4603      	mov	r3, r0
 801505e:	f083 0301 	eor.w	r3, r3, #1
 8015062:	b2db      	uxtb	r3, r3
 8015064:	2b00      	cmp	r3, #0
 8015066:	d004      	beq.n	8015072 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8015068:	2101      	movs	r1, #1
 801506a:	6878      	ldr	r0, [r7, #4]
 801506c:	f7ff faff 	bl	801466e <SPIF_CsPin>
        break;
 8015070:	e011      	b.n	8015096 <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 8015072:	2101      	movs	r1, #1
 8015074:	6878      	ldr	r0, [r7, #4]
 8015076:	f7ff fafa 	bl	801466e <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 801507a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801507e:	6878      	ldr	r0, [r7, #4]
 8015080:	f7ff fc24 	bl	80148cc <SPIF_WaitForWriting>
 8015084:	4603      	mov	r3, r0
 8015086:	2b00      	cmp	r3, #0
 8015088:	d005      	beq.n	8015096 <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 801508a:	2301      	movs	r3, #1
 801508c:	75fb      	strb	r3, [r7, #23]
 801508e:	e002      	b.n	8015096 <SPIF_EraseSector+0xf0>
      break;
 8015090:	bf00      	nop
 8015092:	e000      	b.n	8015096 <SPIF_EraseSector+0xf0>
      break;
 8015094:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8015096:	6878      	ldr	r0, [r7, #4]
 8015098:	f7ff fbcf 	bl	801483a <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 801509c:	6878      	ldr	r0, [r7, #4]
 801509e:	f7ff fad9 	bl	8014654 <SPIF_UnLock>
  return retVal;
 80150a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80150a4:	4618      	mov	r0, r3
 80150a6:	3718      	adds	r7, #24
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}

080150ac <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b088      	sub	sp, #32
 80150b0:	af02      	add	r7, sp, #8
 80150b2:	60f8      	str	r0, [r7, #12]
 80150b4:	60b9      	str	r1, [r7, #8]
 80150b6:	607a      	str	r2, [r7, #4]
 80150b8:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 80150ba:	68f8      	ldr	r0, [r7, #12]
 80150bc:	f7ff fab7 	bl	801462e <SPIF_Lock>
  bool retVal = false;
 80150c0:	2300      	movs	r3, #0
 80150c2:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 80150c4:	6a3b      	ldr	r3, [r7, #32]
 80150c6:	9300      	str	r3, [sp, #0]
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	687a      	ldr	r2, [r7, #4]
 80150cc:	68b9      	ldr	r1, [r7, #8]
 80150ce:	68f8      	ldr	r0, [r7, #12]
 80150d0:	f7ff fdba 	bl	8014c48 <SPIF_WriteFn>
 80150d4:	4603      	mov	r3, r0
 80150d6:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 80150d8:	68f8      	ldr	r0, [r7, #12]
 80150da:	f7ff fabb 	bl	8014654 <SPIF_UnLock>
  return retVal;
 80150de:	7dfb      	ldrb	r3, [r7, #23]
}
 80150e0:	4618      	mov	r0, r3
 80150e2:	3718      	adds	r7, #24
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}

080150e8 <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b088      	sub	sp, #32
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	60f8      	str	r0, [r7, #12]
 80150f0:	60b9      	str	r1, [r7, #8]
 80150f2:	607a      	str	r2, [r7, #4]
 80150f4:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 80150f6:	68f8      	ldr	r0, [r7, #12]
 80150f8:	f7ff fa99 	bl	801462e <SPIF_Lock>
  bool retVal = false;
 80150fc:	2300      	movs	r3, #0
 80150fe:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	021b      	lsls	r3, r3, #8
 8015104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015106:	4413      	add	r3, r2
 8015108:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 801510a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801510c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8015110:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 8015112:	683a      	ldr	r2, [r7, #0]
 8015114:	697b      	ldr	r3, [r7, #20]
 8015116:	429a      	cmp	r2, r3
 8015118:	d901      	bls.n	801511e <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 801511a:	697b      	ldr	r3, [r7, #20]
 801511c:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	687a      	ldr	r2, [r7, #4]
 8015122:	69b9      	ldr	r1, [r7, #24]
 8015124:	68f8      	ldr	r0, [r7, #12]
 8015126:	f7ff fe37 	bl	8014d98 <SPIF_ReadFn>
 801512a:	4603      	mov	r3, r0
 801512c:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 801512e:	68f8      	ldr	r0, [r7, #12]
 8015130:	f7ff fa90 	bl	8014654 <SPIF_UnLock>
  return retVal;
 8015134:	7ffb      	ldrb	r3, [r7, #31]
}
 8015136:	4618      	mov	r0, r3
 8015138:	3720      	adds	r7, #32
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}
	...

08015140 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015140:	b580      	push	{r7, lr}
 8015142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015144:	2200      	movs	r2, #0
 8015146:	4912      	ldr	r1, [pc, #72]	; (8015190 <MX_USB_DEVICE_Init+0x50>)
 8015148:	4812      	ldr	r0, [pc, #72]	; (8015194 <MX_USB_DEVICE_Init+0x54>)
 801514a:	f7fd ffd5 	bl	80130f8 <USBD_Init>
 801514e:	4603      	mov	r3, r0
 8015150:	2b00      	cmp	r3, #0
 8015152:	d001      	beq.n	8015158 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015154:	f7ec fde1 	bl	8001d1a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015158:	490f      	ldr	r1, [pc, #60]	; (8015198 <MX_USB_DEVICE_Init+0x58>)
 801515a:	480e      	ldr	r0, [pc, #56]	; (8015194 <MX_USB_DEVICE_Init+0x54>)
 801515c:	f7fd fffc 	bl	8013158 <USBD_RegisterClass>
 8015160:	4603      	mov	r3, r0
 8015162:	2b00      	cmp	r3, #0
 8015164:	d001      	beq.n	801516a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015166:	f7ec fdd8 	bl	8001d1a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801516a:	490c      	ldr	r1, [pc, #48]	; (801519c <MX_USB_DEVICE_Init+0x5c>)
 801516c:	4809      	ldr	r0, [pc, #36]	; (8015194 <MX_USB_DEVICE_Init+0x54>)
 801516e:	f7fd fef3 	bl	8012f58 <USBD_CDC_RegisterInterface>
 8015172:	4603      	mov	r3, r0
 8015174:	2b00      	cmp	r3, #0
 8015176:	d001      	beq.n	801517c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015178:	f7ec fdcf 	bl	8001d1a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801517c:	4805      	ldr	r0, [pc, #20]	; (8015194 <MX_USB_DEVICE_Init+0x54>)
 801517e:	f7fe f821 	bl	80131c4 <USBD_Start>
 8015182:	4603      	mov	r3, r0
 8015184:	2b00      	cmp	r3, #0
 8015186:	d001      	beq.n	801518c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015188:	f7ec fdc7 	bl	8001d1a <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801518c:	bf00      	nop
 801518e:	bd80      	pop	{r7, pc}
 8015190:	200000e4 	.word	0x200000e4
 8015194:	200011e4 	.word	0x200011e4
 8015198:	20000050 	.word	0x20000050
 801519c:	200000d0 	.word	0x200000d0

080151a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80151a4:	2200      	movs	r2, #0
 80151a6:	4905      	ldr	r1, [pc, #20]	; (80151bc <CDC_Init_FS+0x1c>)
 80151a8:	4805      	ldr	r0, [pc, #20]	; (80151c0 <CDC_Init_FS+0x20>)
 80151aa:	f7fd feef 	bl	8012f8c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80151ae:	4905      	ldr	r1, [pc, #20]	; (80151c4 <CDC_Init_FS+0x24>)
 80151b0:	4803      	ldr	r0, [pc, #12]	; (80151c0 <CDC_Init_FS+0x20>)
 80151b2:	f7fd ff0d 	bl	8012fd0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80151b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80151b8:	4618      	mov	r0, r3
 80151ba:	bd80      	pop	{r7, pc}
 80151bc:	200018c0 	.word	0x200018c0
 80151c0:	200011e4 	.word	0x200011e4
 80151c4:	200014c0 	.word	0x200014c0

080151c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80151c8:	b480      	push	{r7}
 80151ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80151cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80151ce:	4618      	mov	r0, r3
 80151d0:	46bd      	mov	sp, r7
 80151d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d6:	4770      	bx	lr

080151d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80151d8:	b480      	push	{r7}
 80151da:	b083      	sub	sp, #12
 80151dc:	af00      	add	r7, sp, #0
 80151de:	4603      	mov	r3, r0
 80151e0:	6039      	str	r1, [r7, #0]
 80151e2:	71fb      	strb	r3, [r7, #7]
 80151e4:	4613      	mov	r3, r2
 80151e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80151e8:	79fb      	ldrb	r3, [r7, #7]
 80151ea:	2b23      	cmp	r3, #35	; 0x23
 80151ec:	d84a      	bhi.n	8015284 <CDC_Control_FS+0xac>
 80151ee:	a201      	add	r2, pc, #4	; (adr r2, 80151f4 <CDC_Control_FS+0x1c>)
 80151f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151f4:	08015285 	.word	0x08015285
 80151f8:	08015285 	.word	0x08015285
 80151fc:	08015285 	.word	0x08015285
 8015200:	08015285 	.word	0x08015285
 8015204:	08015285 	.word	0x08015285
 8015208:	08015285 	.word	0x08015285
 801520c:	08015285 	.word	0x08015285
 8015210:	08015285 	.word	0x08015285
 8015214:	08015285 	.word	0x08015285
 8015218:	08015285 	.word	0x08015285
 801521c:	08015285 	.word	0x08015285
 8015220:	08015285 	.word	0x08015285
 8015224:	08015285 	.word	0x08015285
 8015228:	08015285 	.word	0x08015285
 801522c:	08015285 	.word	0x08015285
 8015230:	08015285 	.word	0x08015285
 8015234:	08015285 	.word	0x08015285
 8015238:	08015285 	.word	0x08015285
 801523c:	08015285 	.word	0x08015285
 8015240:	08015285 	.word	0x08015285
 8015244:	08015285 	.word	0x08015285
 8015248:	08015285 	.word	0x08015285
 801524c:	08015285 	.word	0x08015285
 8015250:	08015285 	.word	0x08015285
 8015254:	08015285 	.word	0x08015285
 8015258:	08015285 	.word	0x08015285
 801525c:	08015285 	.word	0x08015285
 8015260:	08015285 	.word	0x08015285
 8015264:	08015285 	.word	0x08015285
 8015268:	08015285 	.word	0x08015285
 801526c:	08015285 	.word	0x08015285
 8015270:	08015285 	.word	0x08015285
 8015274:	08015285 	.word	0x08015285
 8015278:	08015285 	.word	0x08015285
 801527c:	08015285 	.word	0x08015285
 8015280:	08015285 	.word	0x08015285
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015284:	bf00      	nop
  }

  return (USBD_OK);
 8015286:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015288:	4618      	mov	r0, r3
 801528a:	370c      	adds	r7, #12
 801528c:	46bd      	mov	sp, r7
 801528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015292:	4770      	bx	lr

08015294 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015294:	b580      	push	{r7, lr}
 8015296:	b082      	sub	sp, #8
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
 801529c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801529e:	6879      	ldr	r1, [r7, #4]
 80152a0:	4805      	ldr	r0, [pc, #20]	; (80152b8 <CDC_Receive_FS+0x24>)
 80152a2:	f7fd fe95 	bl	8012fd0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80152a6:	4804      	ldr	r0, [pc, #16]	; (80152b8 <CDC_Receive_FS+0x24>)
 80152a8:	f7fd fef0 	bl	801308c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80152ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80152ae:	4618      	mov	r0, r3
 80152b0:	3708      	adds	r7, #8
 80152b2:	46bd      	mov	sp, r7
 80152b4:	bd80      	pop	{r7, pc}
 80152b6:	bf00      	nop
 80152b8:	200011e4 	.word	0x200011e4

080152bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b084      	sub	sp, #16
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
 80152c4:	460b      	mov	r3, r1
 80152c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80152c8:	2300      	movs	r3, #0
 80152ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80152cc:	4b0d      	ldr	r3, [pc, #52]	; (8015304 <CDC_Transmit_FS+0x48>)
 80152ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80152d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80152d4:	68bb      	ldr	r3, [r7, #8]
 80152d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d001      	beq.n	80152e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80152de:	2301      	movs	r3, #1
 80152e0:	e00b      	b.n	80152fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80152e2:	887b      	ldrh	r3, [r7, #2]
 80152e4:	461a      	mov	r2, r3
 80152e6:	6879      	ldr	r1, [r7, #4]
 80152e8:	4806      	ldr	r0, [pc, #24]	; (8015304 <CDC_Transmit_FS+0x48>)
 80152ea:	f7fd fe4f 	bl	8012f8c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80152ee:	4805      	ldr	r0, [pc, #20]	; (8015304 <CDC_Transmit_FS+0x48>)
 80152f0:	f7fd fe8c 	bl	801300c <USBD_CDC_TransmitPacket>
 80152f4:	4603      	mov	r3, r0
 80152f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80152f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	3710      	adds	r7, #16
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}
 8015302:	bf00      	nop
 8015304:	200011e4 	.word	0x200011e4

08015308 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015308:	b480      	push	{r7}
 801530a:	b087      	sub	sp, #28
 801530c:	af00      	add	r7, sp, #0
 801530e:	60f8      	str	r0, [r7, #12]
 8015310:	60b9      	str	r1, [r7, #8]
 8015312:	4613      	mov	r3, r2
 8015314:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015316:	2300      	movs	r3, #0
 8015318:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801531a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801531e:	4618      	mov	r0, r3
 8015320:	371c      	adds	r7, #28
 8015322:	46bd      	mov	sp, r7
 8015324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015328:	4770      	bx	lr
	...

0801532c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801532c:	b480      	push	{r7}
 801532e:	b083      	sub	sp, #12
 8015330:	af00      	add	r7, sp, #0
 8015332:	4603      	mov	r3, r0
 8015334:	6039      	str	r1, [r7, #0]
 8015336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015338:	683b      	ldr	r3, [r7, #0]
 801533a:	2212      	movs	r2, #18
 801533c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801533e:	4b03      	ldr	r3, [pc, #12]	; (801534c <USBD_FS_DeviceDescriptor+0x20>)
}
 8015340:	4618      	mov	r0, r3
 8015342:	370c      	adds	r7, #12
 8015344:	46bd      	mov	sp, r7
 8015346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534a:	4770      	bx	lr
 801534c:	20000104 	.word	0x20000104

08015350 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015350:	b480      	push	{r7}
 8015352:	b083      	sub	sp, #12
 8015354:	af00      	add	r7, sp, #0
 8015356:	4603      	mov	r3, r0
 8015358:	6039      	str	r1, [r7, #0]
 801535a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801535c:	683b      	ldr	r3, [r7, #0]
 801535e:	2204      	movs	r2, #4
 8015360:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015362:	4b03      	ldr	r3, [pc, #12]	; (8015370 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015364:	4618      	mov	r0, r3
 8015366:	370c      	adds	r7, #12
 8015368:	46bd      	mov	sp, r7
 801536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536e:	4770      	bx	lr
 8015370:	20000124 	.word	0x20000124

08015374 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b082      	sub	sp, #8
 8015378:	af00      	add	r7, sp, #0
 801537a:	4603      	mov	r3, r0
 801537c:	6039      	str	r1, [r7, #0]
 801537e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015380:	79fb      	ldrb	r3, [r7, #7]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d105      	bne.n	8015392 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015386:	683a      	ldr	r2, [r7, #0]
 8015388:	4907      	ldr	r1, [pc, #28]	; (80153a8 <USBD_FS_ProductStrDescriptor+0x34>)
 801538a:	4808      	ldr	r0, [pc, #32]	; (80153ac <USBD_FS_ProductStrDescriptor+0x38>)
 801538c:	f7ff f864 	bl	8014458 <USBD_GetString>
 8015390:	e004      	b.n	801539c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015392:	683a      	ldr	r2, [r7, #0]
 8015394:	4904      	ldr	r1, [pc, #16]	; (80153a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8015396:	4805      	ldr	r0, [pc, #20]	; (80153ac <USBD_FS_ProductStrDescriptor+0x38>)
 8015398:	f7ff f85e 	bl	8014458 <USBD_GetString>
  }
  return USBD_StrDesc;
 801539c:	4b02      	ldr	r3, [pc, #8]	; (80153a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801539e:	4618      	mov	r0, r3
 80153a0:	3708      	adds	r7, #8
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd80      	pop	{r7, pc}
 80153a6:	bf00      	nop
 80153a8:	20001cc0 	.word	0x20001cc0
 80153ac:	0801cff0 	.word	0x0801cff0

080153b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b082      	sub	sp, #8
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	4603      	mov	r3, r0
 80153b8:	6039      	str	r1, [r7, #0]
 80153ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80153bc:	683a      	ldr	r2, [r7, #0]
 80153be:	4904      	ldr	r1, [pc, #16]	; (80153d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80153c0:	4804      	ldr	r0, [pc, #16]	; (80153d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80153c2:	f7ff f849 	bl	8014458 <USBD_GetString>
  return USBD_StrDesc;
 80153c6:	4b02      	ldr	r3, [pc, #8]	; (80153d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80153c8:	4618      	mov	r0, r3
 80153ca:	3708      	adds	r7, #8
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bd80      	pop	{r7, pc}
 80153d0:	20001cc0 	.word	0x20001cc0
 80153d4:	0801cffc 	.word	0x0801cffc

080153d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b082      	sub	sp, #8
 80153dc:	af00      	add	r7, sp, #0
 80153de:	4603      	mov	r3, r0
 80153e0:	6039      	str	r1, [r7, #0]
 80153e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80153e4:	683b      	ldr	r3, [r7, #0]
 80153e6:	221a      	movs	r2, #26
 80153e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80153ea:	f000 f855 	bl	8015498 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80153ee:	4b02      	ldr	r3, [pc, #8]	; (80153f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80153f0:	4618      	mov	r0, r3
 80153f2:	3708      	adds	r7, #8
 80153f4:	46bd      	mov	sp, r7
 80153f6:	bd80      	pop	{r7, pc}
 80153f8:	20000128 	.word	0x20000128

080153fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b082      	sub	sp, #8
 8015400:	af00      	add	r7, sp, #0
 8015402:	4603      	mov	r3, r0
 8015404:	6039      	str	r1, [r7, #0]
 8015406:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015408:	79fb      	ldrb	r3, [r7, #7]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d105      	bne.n	801541a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801540e:	683a      	ldr	r2, [r7, #0]
 8015410:	4907      	ldr	r1, [pc, #28]	; (8015430 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015412:	4808      	ldr	r0, [pc, #32]	; (8015434 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015414:	f7ff f820 	bl	8014458 <USBD_GetString>
 8015418:	e004      	b.n	8015424 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801541a:	683a      	ldr	r2, [r7, #0]
 801541c:	4904      	ldr	r1, [pc, #16]	; (8015430 <USBD_FS_ConfigStrDescriptor+0x34>)
 801541e:	4805      	ldr	r0, [pc, #20]	; (8015434 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015420:	f7ff f81a 	bl	8014458 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015424:	4b02      	ldr	r3, [pc, #8]	; (8015430 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015426:	4618      	mov	r0, r3
 8015428:	3708      	adds	r7, #8
 801542a:	46bd      	mov	sp, r7
 801542c:	bd80      	pop	{r7, pc}
 801542e:	bf00      	nop
 8015430:	20001cc0 	.word	0x20001cc0
 8015434:	0801d010 	.word	0x0801d010

08015438 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b082      	sub	sp, #8
 801543c:	af00      	add	r7, sp, #0
 801543e:	4603      	mov	r3, r0
 8015440:	6039      	str	r1, [r7, #0]
 8015442:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015444:	79fb      	ldrb	r3, [r7, #7]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d105      	bne.n	8015456 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801544a:	683a      	ldr	r2, [r7, #0]
 801544c:	4907      	ldr	r1, [pc, #28]	; (801546c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801544e:	4808      	ldr	r0, [pc, #32]	; (8015470 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015450:	f7ff f802 	bl	8014458 <USBD_GetString>
 8015454:	e004      	b.n	8015460 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015456:	683a      	ldr	r2, [r7, #0]
 8015458:	4904      	ldr	r1, [pc, #16]	; (801546c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801545a:	4805      	ldr	r0, [pc, #20]	; (8015470 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801545c:	f7fe fffc 	bl	8014458 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015460:	4b02      	ldr	r3, [pc, #8]	; (801546c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015462:	4618      	mov	r0, r3
 8015464:	3708      	adds	r7, #8
 8015466:	46bd      	mov	sp, r7
 8015468:	bd80      	pop	{r7, pc}
 801546a:	bf00      	nop
 801546c:	20001cc0 	.word	0x20001cc0
 8015470:	0801d01c 	.word	0x0801d01c

08015474 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015474:	b480      	push	{r7}
 8015476:	b083      	sub	sp, #12
 8015478:	af00      	add	r7, sp, #0
 801547a:	4603      	mov	r3, r0
 801547c:	6039      	str	r1, [r7, #0]
 801547e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8015480:	683b      	ldr	r3, [r7, #0]
 8015482:	220c      	movs	r2, #12
 8015484:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8015486:	4b03      	ldr	r3, [pc, #12]	; (8015494 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8015488:	4618      	mov	r0, r3
 801548a:	370c      	adds	r7, #12
 801548c:	46bd      	mov	sp, r7
 801548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015492:	4770      	bx	lr
 8015494:	20000118 	.word	0x20000118

08015498 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015498:	b580      	push	{r7, lr}
 801549a:	b084      	sub	sp, #16
 801549c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801549e:	4b0f      	ldr	r3, [pc, #60]	; (80154dc <Get_SerialNum+0x44>)
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80154a4:	4b0e      	ldr	r3, [pc, #56]	; (80154e0 <Get_SerialNum+0x48>)
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80154aa:	4b0e      	ldr	r3, [pc, #56]	; (80154e4 <Get_SerialNum+0x4c>)
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80154b0:	68fa      	ldr	r2, [r7, #12]
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	4413      	add	r3, r2
 80154b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d009      	beq.n	80154d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80154be:	2208      	movs	r2, #8
 80154c0:	4909      	ldr	r1, [pc, #36]	; (80154e8 <Get_SerialNum+0x50>)
 80154c2:	68f8      	ldr	r0, [r7, #12]
 80154c4:	f000 f814 	bl	80154f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80154c8:	2204      	movs	r2, #4
 80154ca:	4908      	ldr	r1, [pc, #32]	; (80154ec <Get_SerialNum+0x54>)
 80154cc:	68b8      	ldr	r0, [r7, #8]
 80154ce:	f000 f80f 	bl	80154f0 <IntToUnicode>
  }
}
 80154d2:	bf00      	nop
 80154d4:	3710      	adds	r7, #16
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd80      	pop	{r7, pc}
 80154da:	bf00      	nop
 80154dc:	1fff7590 	.word	0x1fff7590
 80154e0:	1fff7594 	.word	0x1fff7594
 80154e4:	1fff7598 	.word	0x1fff7598
 80154e8:	2000012a 	.word	0x2000012a
 80154ec:	2000013a 	.word	0x2000013a

080154f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80154f0:	b480      	push	{r7}
 80154f2:	b087      	sub	sp, #28
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	60f8      	str	r0, [r7, #12]
 80154f8:	60b9      	str	r1, [r7, #8]
 80154fa:	4613      	mov	r3, r2
 80154fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80154fe:	2300      	movs	r3, #0
 8015500:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015502:	2300      	movs	r3, #0
 8015504:	75fb      	strb	r3, [r7, #23]
 8015506:	e027      	b.n	8015558 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	0f1b      	lsrs	r3, r3, #28
 801550c:	2b09      	cmp	r3, #9
 801550e:	d80b      	bhi.n	8015528 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	0f1b      	lsrs	r3, r3, #28
 8015514:	b2da      	uxtb	r2, r3
 8015516:	7dfb      	ldrb	r3, [r7, #23]
 8015518:	005b      	lsls	r3, r3, #1
 801551a:	4619      	mov	r1, r3
 801551c:	68bb      	ldr	r3, [r7, #8]
 801551e:	440b      	add	r3, r1
 8015520:	3230      	adds	r2, #48	; 0x30
 8015522:	b2d2      	uxtb	r2, r2
 8015524:	701a      	strb	r2, [r3, #0]
 8015526:	e00a      	b.n	801553e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	0f1b      	lsrs	r3, r3, #28
 801552c:	b2da      	uxtb	r2, r3
 801552e:	7dfb      	ldrb	r3, [r7, #23]
 8015530:	005b      	lsls	r3, r3, #1
 8015532:	4619      	mov	r1, r3
 8015534:	68bb      	ldr	r3, [r7, #8]
 8015536:	440b      	add	r3, r1
 8015538:	3237      	adds	r2, #55	; 0x37
 801553a:	b2d2      	uxtb	r2, r2
 801553c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	011b      	lsls	r3, r3, #4
 8015542:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015544:	7dfb      	ldrb	r3, [r7, #23]
 8015546:	005b      	lsls	r3, r3, #1
 8015548:	3301      	adds	r3, #1
 801554a:	68ba      	ldr	r2, [r7, #8]
 801554c:	4413      	add	r3, r2
 801554e:	2200      	movs	r2, #0
 8015550:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015552:	7dfb      	ldrb	r3, [r7, #23]
 8015554:	3301      	adds	r3, #1
 8015556:	75fb      	strb	r3, [r7, #23]
 8015558:	7dfa      	ldrb	r2, [r7, #23]
 801555a:	79fb      	ldrb	r3, [r7, #7]
 801555c:	429a      	cmp	r2, r3
 801555e:	d3d3      	bcc.n	8015508 <IntToUnicode+0x18>
  }
}
 8015560:	bf00      	nop
 8015562:	bf00      	nop
 8015564:	371c      	adds	r7, #28
 8015566:	46bd      	mov	sp, r7
 8015568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556c:	4770      	bx	lr
	...

08015570 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b084      	sub	sp, #16
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	4a0d      	ldr	r2, [pc, #52]	; (80155b4 <HAL_PCD_MspInit+0x44>)
 801557e:	4293      	cmp	r3, r2
 8015580:	d113      	bne.n	80155aa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015582:	4b0d      	ldr	r3, [pc, #52]	; (80155b8 <HAL_PCD_MspInit+0x48>)
 8015584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015586:	4a0c      	ldr	r2, [pc, #48]	; (80155b8 <HAL_PCD_MspInit+0x48>)
 8015588:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801558c:	6593      	str	r3, [r2, #88]	; 0x58
 801558e:	4b0a      	ldr	r3, [pc, #40]	; (80155b8 <HAL_PCD_MspInit+0x48>)
 8015590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015592:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015596:	60fb      	str	r3, [r7, #12]
 8015598:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801559a:	2200      	movs	r2, #0
 801559c:	2100      	movs	r1, #0
 801559e:	2043      	movs	r0, #67	; 0x43
 80155a0:	f7f2 fab5 	bl	8007b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80155a4:	2043      	movs	r0, #67	; 0x43
 80155a6:	f7f2 face 	bl	8007b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80155aa:	bf00      	nop
 80155ac:	3710      	adds	r7, #16
 80155ae:	46bd      	mov	sp, r7
 80155b0:	bd80      	pop	{r7, pc}
 80155b2:	bf00      	nop
 80155b4:	40006800 	.word	0x40006800
 80155b8:	40021000 	.word	0x40021000

080155bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b082      	sub	sp, #8
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80155d0:	4619      	mov	r1, r3
 80155d2:	4610      	mov	r0, r2
 80155d4:	f7fd fe43 	bl	801325e <USBD_LL_SetupStage>
}
 80155d8:	bf00      	nop
 80155da:	3708      	adds	r7, #8
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}

080155e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b082      	sub	sp, #8
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
 80155e8:	460b      	mov	r3, r1
 80155ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 80155f2:	78fa      	ldrb	r2, [r7, #3]
 80155f4:	6879      	ldr	r1, [r7, #4]
 80155f6:	4613      	mov	r3, r2
 80155f8:	009b      	lsls	r3, r3, #2
 80155fa:	4413      	add	r3, r2
 80155fc:	00db      	lsls	r3, r3, #3
 80155fe:	440b      	add	r3, r1
 8015600:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8015604:	681a      	ldr	r2, [r3, #0]
 8015606:	78fb      	ldrb	r3, [r7, #3]
 8015608:	4619      	mov	r1, r3
 801560a:	f7fd fe7d 	bl	8013308 <USBD_LL_DataOutStage>
}
 801560e:	bf00      	nop
 8015610:	3708      	adds	r7, #8
 8015612:	46bd      	mov	sp, r7
 8015614:	bd80      	pop	{r7, pc}

08015616 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015616:	b580      	push	{r7, lr}
 8015618:	b082      	sub	sp, #8
 801561a:	af00      	add	r7, sp, #0
 801561c:	6078      	str	r0, [r7, #4]
 801561e:	460b      	mov	r3, r1
 8015620:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8015628:	78fa      	ldrb	r2, [r7, #3]
 801562a:	6879      	ldr	r1, [r7, #4]
 801562c:	4613      	mov	r3, r2
 801562e:	009b      	lsls	r3, r3, #2
 8015630:	4413      	add	r3, r2
 8015632:	00db      	lsls	r3, r3, #3
 8015634:	440b      	add	r3, r1
 8015636:	333c      	adds	r3, #60	; 0x3c
 8015638:	681a      	ldr	r2, [r3, #0]
 801563a:	78fb      	ldrb	r3, [r7, #3]
 801563c:	4619      	mov	r1, r3
 801563e:	f7fd ff16 	bl	801346e <USBD_LL_DataInStage>
}
 8015642:	bf00      	nop
 8015644:	3708      	adds	r7, #8
 8015646:	46bd      	mov	sp, r7
 8015648:	bd80      	pop	{r7, pc}

0801564a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801564a:	b580      	push	{r7, lr}
 801564c:	b082      	sub	sp, #8
 801564e:	af00      	add	r7, sp, #0
 8015650:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8015658:	4618      	mov	r0, r3
 801565a:	f7fe f850 	bl	80136fe <USBD_LL_SOF>
}
 801565e:	bf00      	nop
 8015660:	3708      	adds	r7, #8
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}

08015666 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015666:	b580      	push	{r7, lr}
 8015668:	b084      	sub	sp, #16
 801566a:	af00      	add	r7, sp, #0
 801566c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801566e:	2301      	movs	r3, #1
 8015670:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	689b      	ldr	r3, [r3, #8]
 8015676:	2b02      	cmp	r3, #2
 8015678:	d001      	beq.n	801567e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801567a:	f7ec fb4e 	bl	8001d1a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8015684:	7bfa      	ldrb	r2, [r7, #15]
 8015686:	4611      	mov	r1, r2
 8015688:	4618      	mov	r0, r3
 801568a:	f7fd fff4 	bl	8013676 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8015694:	4618      	mov	r0, r3
 8015696:	f7fd ff9c 	bl	80135d2 <USBD_LL_Reset>
}
 801569a:	bf00      	nop
 801569c:	3710      	adds	r7, #16
 801569e:	46bd      	mov	sp, r7
 80156a0:	bd80      	pop	{r7, pc}
	...

080156a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b082      	sub	sp, #8
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80156b2:	4618      	mov	r0, r3
 80156b4:	f7fd ffef 	bl	8013696 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	699b      	ldr	r3, [r3, #24]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d005      	beq.n	80156cc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80156c0:	4b04      	ldr	r3, [pc, #16]	; (80156d4 <HAL_PCD_SuspendCallback+0x30>)
 80156c2:	691b      	ldr	r3, [r3, #16]
 80156c4:	4a03      	ldr	r2, [pc, #12]	; (80156d4 <HAL_PCD_SuspendCallback+0x30>)
 80156c6:	f043 0306 	orr.w	r3, r3, #6
 80156ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80156cc:	bf00      	nop
 80156ce:	3708      	adds	r7, #8
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd80      	pop	{r7, pc}
 80156d4:	e000ed00 	.word	0xe000ed00

080156d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b082      	sub	sp, #8
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	699b      	ldr	r3, [r3, #24]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d007      	beq.n	80156f8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80156e8:	4b08      	ldr	r3, [pc, #32]	; (801570c <HAL_PCD_ResumeCallback+0x34>)
 80156ea:	691b      	ldr	r3, [r3, #16]
 80156ec:	4a07      	ldr	r2, [pc, #28]	; (801570c <HAL_PCD_ResumeCallback+0x34>)
 80156ee:	f023 0306 	bic.w	r3, r3, #6
 80156f2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80156f4:	f000 fab6 	bl	8015c64 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80156fe:	4618      	mov	r0, r3
 8015700:	f7fd ffe5 	bl	80136ce <USBD_LL_Resume>
}
 8015704:	bf00      	nop
 8015706:	3708      	adds	r7, #8
 8015708:	46bd      	mov	sp, r7
 801570a:	bd80      	pop	{r7, pc}
 801570c:	e000ed00 	.word	0xe000ed00

08015710 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b082      	sub	sp, #8
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8015718:	f7f5 fe02 	bl	800b320 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801571c:	4a2b      	ldr	r2, [pc, #172]	; (80157cc <USBD_LL_Init+0xbc>)
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	4a29      	ldr	r2, [pc, #164]	; (80157cc <USBD_LL_Init+0xbc>)
 8015728:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 801572c:	4b27      	ldr	r3, [pc, #156]	; (80157cc <USBD_LL_Init+0xbc>)
 801572e:	4a28      	ldr	r2, [pc, #160]	; (80157d0 <USBD_LL_Init+0xc0>)
 8015730:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8015732:	4b26      	ldr	r3, [pc, #152]	; (80157cc <USBD_LL_Init+0xbc>)
 8015734:	2208      	movs	r2, #8
 8015736:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8015738:	4b24      	ldr	r3, [pc, #144]	; (80157cc <USBD_LL_Init+0xbc>)
 801573a:	2202      	movs	r2, #2
 801573c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801573e:	4b23      	ldr	r3, [pc, #140]	; (80157cc <USBD_LL_Init+0xbc>)
 8015740:	2202      	movs	r2, #2
 8015742:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8015744:	4b21      	ldr	r3, [pc, #132]	; (80157cc <USBD_LL_Init+0xbc>)
 8015746:	2200      	movs	r2, #0
 8015748:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801574a:	4b20      	ldr	r3, [pc, #128]	; (80157cc <USBD_LL_Init+0xbc>)
 801574c:	2200      	movs	r2, #0
 801574e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8015750:	4b1e      	ldr	r3, [pc, #120]	; (80157cc <USBD_LL_Init+0xbc>)
 8015752:	2200      	movs	r2, #0
 8015754:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015756:	4b1d      	ldr	r3, [pc, #116]	; (80157cc <USBD_LL_Init+0xbc>)
 8015758:	2200      	movs	r2, #0
 801575a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801575c:	481b      	ldr	r0, [pc, #108]	; (80157cc <USBD_LL_Init+0xbc>)
 801575e:	f7f3 fffd 	bl	800975c <HAL_PCD_Init>
 8015762:	4603      	mov	r3, r0
 8015764:	2b00      	cmp	r3, #0
 8015766:	d001      	beq.n	801576c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8015768:	f7ec fad7 	bl	8001d1a <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015772:	2318      	movs	r3, #24
 8015774:	2200      	movs	r2, #0
 8015776:	2100      	movs	r1, #0
 8015778:	f7f5 fd01 	bl	800b17e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015782:	2358      	movs	r3, #88	; 0x58
 8015784:	2200      	movs	r2, #0
 8015786:	2180      	movs	r1, #128	; 0x80
 8015788:	f7f5 fcf9 	bl	800b17e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015792:	23c0      	movs	r3, #192	; 0xc0
 8015794:	2200      	movs	r2, #0
 8015796:	2181      	movs	r1, #129	; 0x81
 8015798:	f7f5 fcf1 	bl	800b17e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80157a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80157a6:	2200      	movs	r2, #0
 80157a8:	2101      	movs	r1, #1
 80157aa:	f7f5 fce8 	bl	800b17e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80157b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80157b8:	2200      	movs	r2, #0
 80157ba:	2182      	movs	r1, #130	; 0x82
 80157bc:	f7f5 fcdf 	bl	800b17e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80157c0:	2300      	movs	r3, #0
}
 80157c2:	4618      	mov	r0, r3
 80157c4:	3708      	adds	r7, #8
 80157c6:	46bd      	mov	sp, r7
 80157c8:	bd80      	pop	{r7, pc}
 80157ca:	bf00      	nop
 80157cc:	20001ec0 	.word	0x20001ec0
 80157d0:	40006800 	.word	0x40006800

080157d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b084      	sub	sp, #16
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157dc:	2300      	movs	r3, #0
 80157de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157e0:	2300      	movs	r3, #0
 80157e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80157ea:	4618      	mov	r0, r3
 80157ec:	f7f4 f8bc 	bl	8009968 <HAL_PCD_Start>
 80157f0:	4603      	mov	r3, r0
 80157f2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80157f4:	7bbb      	ldrb	r3, [r7, #14]
 80157f6:	2b03      	cmp	r3, #3
 80157f8:	d816      	bhi.n	8015828 <USBD_LL_Start+0x54>
 80157fa:	a201      	add	r2, pc, #4	; (adr r2, 8015800 <USBD_LL_Start+0x2c>)
 80157fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015800:	08015811 	.word	0x08015811
 8015804:	08015817 	.word	0x08015817
 8015808:	0801581d 	.word	0x0801581d
 801580c:	08015823 	.word	0x08015823
    case HAL_OK :
      usb_status = USBD_OK;
 8015810:	2300      	movs	r3, #0
 8015812:	73fb      	strb	r3, [r7, #15]
    break;
 8015814:	e00b      	b.n	801582e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015816:	2303      	movs	r3, #3
 8015818:	73fb      	strb	r3, [r7, #15]
    break;
 801581a:	e008      	b.n	801582e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801581c:	2301      	movs	r3, #1
 801581e:	73fb      	strb	r3, [r7, #15]
    break;
 8015820:	e005      	b.n	801582e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015822:	2303      	movs	r3, #3
 8015824:	73fb      	strb	r3, [r7, #15]
    break;
 8015826:	e002      	b.n	801582e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8015828:	2303      	movs	r3, #3
 801582a:	73fb      	strb	r3, [r7, #15]
    break;
 801582c:	bf00      	nop
  }
  return usb_status;
 801582e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015830:	4618      	mov	r0, r3
 8015832:	3710      	adds	r7, #16
 8015834:	46bd      	mov	sp, r7
 8015836:	bd80      	pop	{r7, pc}

08015838 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b084      	sub	sp, #16
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
 8015840:	4608      	mov	r0, r1
 8015842:	4611      	mov	r1, r2
 8015844:	461a      	mov	r2, r3
 8015846:	4603      	mov	r3, r0
 8015848:	70fb      	strb	r3, [r7, #3]
 801584a:	460b      	mov	r3, r1
 801584c:	70bb      	strb	r3, [r7, #2]
 801584e:	4613      	mov	r3, r2
 8015850:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015852:	2300      	movs	r3, #0
 8015854:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015856:	2300      	movs	r3, #0
 8015858:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015860:	78bb      	ldrb	r3, [r7, #2]
 8015862:	883a      	ldrh	r2, [r7, #0]
 8015864:	78f9      	ldrb	r1, [r7, #3]
 8015866:	f7f4 f9ed 	bl	8009c44 <HAL_PCD_EP_Open>
 801586a:	4603      	mov	r3, r0
 801586c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801586e:	7bbb      	ldrb	r3, [r7, #14]
 8015870:	2b03      	cmp	r3, #3
 8015872:	d817      	bhi.n	80158a4 <USBD_LL_OpenEP+0x6c>
 8015874:	a201      	add	r2, pc, #4	; (adr r2, 801587c <USBD_LL_OpenEP+0x44>)
 8015876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801587a:	bf00      	nop
 801587c:	0801588d 	.word	0x0801588d
 8015880:	08015893 	.word	0x08015893
 8015884:	08015899 	.word	0x08015899
 8015888:	0801589f 	.word	0x0801589f
    case HAL_OK :
      usb_status = USBD_OK;
 801588c:	2300      	movs	r3, #0
 801588e:	73fb      	strb	r3, [r7, #15]
    break;
 8015890:	e00b      	b.n	80158aa <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015892:	2303      	movs	r3, #3
 8015894:	73fb      	strb	r3, [r7, #15]
    break;
 8015896:	e008      	b.n	80158aa <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015898:	2301      	movs	r3, #1
 801589a:	73fb      	strb	r3, [r7, #15]
    break;
 801589c:	e005      	b.n	80158aa <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801589e:	2303      	movs	r3, #3
 80158a0:	73fb      	strb	r3, [r7, #15]
    break;
 80158a2:	e002      	b.n	80158aa <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80158a4:	2303      	movs	r3, #3
 80158a6:	73fb      	strb	r3, [r7, #15]
    break;
 80158a8:	bf00      	nop
  }
  return usb_status;
 80158aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80158ac:	4618      	mov	r0, r3
 80158ae:	3710      	adds	r7, #16
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bd80      	pop	{r7, pc}

080158b4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b084      	sub	sp, #16
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
 80158bc:	460b      	mov	r3, r1
 80158be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158c0:	2300      	movs	r3, #0
 80158c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158c4:	2300      	movs	r3, #0
 80158c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80158ce:	78fa      	ldrb	r2, [r7, #3]
 80158d0:	4611      	mov	r1, r2
 80158d2:	4618      	mov	r0, r3
 80158d4:	f7f4 fa13 	bl	8009cfe <HAL_PCD_EP_Close>
 80158d8:	4603      	mov	r3, r0
 80158da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80158dc:	7bbb      	ldrb	r3, [r7, #14]
 80158de:	2b03      	cmp	r3, #3
 80158e0:	d816      	bhi.n	8015910 <USBD_LL_CloseEP+0x5c>
 80158e2:	a201      	add	r2, pc, #4	; (adr r2, 80158e8 <USBD_LL_CloseEP+0x34>)
 80158e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158e8:	080158f9 	.word	0x080158f9
 80158ec:	080158ff 	.word	0x080158ff
 80158f0:	08015905 	.word	0x08015905
 80158f4:	0801590b 	.word	0x0801590b
    case HAL_OK :
      usb_status = USBD_OK;
 80158f8:	2300      	movs	r3, #0
 80158fa:	73fb      	strb	r3, [r7, #15]
    break;
 80158fc:	e00b      	b.n	8015916 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80158fe:	2303      	movs	r3, #3
 8015900:	73fb      	strb	r3, [r7, #15]
    break;
 8015902:	e008      	b.n	8015916 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015904:	2301      	movs	r3, #1
 8015906:	73fb      	strb	r3, [r7, #15]
    break;
 8015908:	e005      	b.n	8015916 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801590a:	2303      	movs	r3, #3
 801590c:	73fb      	strb	r3, [r7, #15]
    break;
 801590e:	e002      	b.n	8015916 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8015910:	2303      	movs	r3, #3
 8015912:	73fb      	strb	r3, [r7, #15]
    break;
 8015914:	bf00      	nop
  }
  return usb_status;
 8015916:	7bfb      	ldrb	r3, [r7, #15]
}
 8015918:	4618      	mov	r0, r3
 801591a:	3710      	adds	r7, #16
 801591c:	46bd      	mov	sp, r7
 801591e:	bd80      	pop	{r7, pc}

08015920 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015920:	b580      	push	{r7, lr}
 8015922:	b084      	sub	sp, #16
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
 8015928:	460b      	mov	r3, r1
 801592a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801592c:	2300      	movs	r3, #0
 801592e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015930:	2300      	movs	r3, #0
 8015932:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801593a:	78fa      	ldrb	r2, [r7, #3]
 801593c:	4611      	mov	r1, r2
 801593e:	4618      	mov	r0, r3
 8015940:	f7f4 faa5 	bl	8009e8e <HAL_PCD_EP_SetStall>
 8015944:	4603      	mov	r3, r0
 8015946:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8015948:	7bbb      	ldrb	r3, [r7, #14]
 801594a:	2b03      	cmp	r3, #3
 801594c:	d816      	bhi.n	801597c <USBD_LL_StallEP+0x5c>
 801594e:	a201      	add	r2, pc, #4	; (adr r2, 8015954 <USBD_LL_StallEP+0x34>)
 8015950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015954:	08015965 	.word	0x08015965
 8015958:	0801596b 	.word	0x0801596b
 801595c:	08015971 	.word	0x08015971
 8015960:	08015977 	.word	0x08015977
    case HAL_OK :
      usb_status = USBD_OK;
 8015964:	2300      	movs	r3, #0
 8015966:	73fb      	strb	r3, [r7, #15]
    break;
 8015968:	e00b      	b.n	8015982 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801596a:	2303      	movs	r3, #3
 801596c:	73fb      	strb	r3, [r7, #15]
    break;
 801596e:	e008      	b.n	8015982 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015970:	2301      	movs	r3, #1
 8015972:	73fb      	strb	r3, [r7, #15]
    break;
 8015974:	e005      	b.n	8015982 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015976:	2303      	movs	r3, #3
 8015978:	73fb      	strb	r3, [r7, #15]
    break;
 801597a:	e002      	b.n	8015982 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801597c:	2303      	movs	r3, #3
 801597e:	73fb      	strb	r3, [r7, #15]
    break;
 8015980:	bf00      	nop
  }
  return usb_status;
 8015982:	7bfb      	ldrb	r3, [r7, #15]
}
 8015984:	4618      	mov	r0, r3
 8015986:	3710      	adds	r7, #16
 8015988:	46bd      	mov	sp, r7
 801598a:	bd80      	pop	{r7, pc}

0801598c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b084      	sub	sp, #16
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
 8015994:	460b      	mov	r3, r1
 8015996:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015998:	2300      	movs	r3, #0
 801599a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801599c:	2300      	movs	r3, #0
 801599e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80159a6:	78fa      	ldrb	r2, [r7, #3]
 80159a8:	4611      	mov	r1, r2
 80159aa:	4618      	mov	r0, r3
 80159ac:	f7f4 facf 	bl	8009f4e <HAL_PCD_EP_ClrStall>
 80159b0:	4603      	mov	r3, r0
 80159b2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80159b4:	7bbb      	ldrb	r3, [r7, #14]
 80159b6:	2b03      	cmp	r3, #3
 80159b8:	d816      	bhi.n	80159e8 <USBD_LL_ClearStallEP+0x5c>
 80159ba:	a201      	add	r2, pc, #4	; (adr r2, 80159c0 <USBD_LL_ClearStallEP+0x34>)
 80159bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159c0:	080159d1 	.word	0x080159d1
 80159c4:	080159d7 	.word	0x080159d7
 80159c8:	080159dd 	.word	0x080159dd
 80159cc:	080159e3 	.word	0x080159e3
    case HAL_OK :
      usb_status = USBD_OK;
 80159d0:	2300      	movs	r3, #0
 80159d2:	73fb      	strb	r3, [r7, #15]
    break;
 80159d4:	e00b      	b.n	80159ee <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80159d6:	2303      	movs	r3, #3
 80159d8:	73fb      	strb	r3, [r7, #15]
    break;
 80159da:	e008      	b.n	80159ee <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80159dc:	2301      	movs	r3, #1
 80159de:	73fb      	strb	r3, [r7, #15]
    break;
 80159e0:	e005      	b.n	80159ee <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80159e2:	2303      	movs	r3, #3
 80159e4:	73fb      	strb	r3, [r7, #15]
    break;
 80159e6:	e002      	b.n	80159ee <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80159e8:	2303      	movs	r3, #3
 80159ea:	73fb      	strb	r3, [r7, #15]
    break;
 80159ec:	bf00      	nop
  }
  return usb_status;
 80159ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80159f0:	4618      	mov	r0, r3
 80159f2:	3710      	adds	r7, #16
 80159f4:	46bd      	mov	sp, r7
 80159f6:	bd80      	pop	{r7, pc}

080159f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159f8:	b480      	push	{r7}
 80159fa:	b085      	sub	sp, #20
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
 8015a00:	460b      	mov	r3, r1
 8015a02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015a0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	da0c      	bge.n	8015a2e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015a14:	78fb      	ldrb	r3, [r7, #3]
 8015a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a1a:	68f9      	ldr	r1, [r7, #12]
 8015a1c:	1c5a      	adds	r2, r3, #1
 8015a1e:	4613      	mov	r3, r2
 8015a20:	009b      	lsls	r3, r3, #2
 8015a22:	4413      	add	r3, r2
 8015a24:	00db      	lsls	r3, r3, #3
 8015a26:	440b      	add	r3, r1
 8015a28:	3302      	adds	r3, #2
 8015a2a:	781b      	ldrb	r3, [r3, #0]
 8015a2c:	e00b      	b.n	8015a46 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015a2e:	78fb      	ldrb	r3, [r7, #3]
 8015a30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a34:	68f9      	ldr	r1, [r7, #12]
 8015a36:	4613      	mov	r3, r2
 8015a38:	009b      	lsls	r3, r3, #2
 8015a3a:	4413      	add	r3, r2
 8015a3c:	00db      	lsls	r3, r3, #3
 8015a3e:	440b      	add	r3, r1
 8015a40:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8015a44:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015a46:	4618      	mov	r0, r3
 8015a48:	3714      	adds	r7, #20
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a50:	4770      	bx	lr
	...

08015a54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b084      	sub	sp, #16
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
 8015a5c:	460b      	mov	r3, r1
 8015a5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a60:	2300      	movs	r3, #0
 8015a62:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a64:	2300      	movs	r3, #0
 8015a66:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015a6e:	78fa      	ldrb	r2, [r7, #3]
 8015a70:	4611      	mov	r1, r2
 8015a72:	4618      	mov	r0, r3
 8015a74:	f7f4 f8c1 	bl	8009bfa <HAL_PCD_SetAddress>
 8015a78:	4603      	mov	r3, r0
 8015a7a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8015a7c:	7bbb      	ldrb	r3, [r7, #14]
 8015a7e:	2b03      	cmp	r3, #3
 8015a80:	d816      	bhi.n	8015ab0 <USBD_LL_SetUSBAddress+0x5c>
 8015a82:	a201      	add	r2, pc, #4	; (adr r2, 8015a88 <USBD_LL_SetUSBAddress+0x34>)
 8015a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a88:	08015a99 	.word	0x08015a99
 8015a8c:	08015a9f 	.word	0x08015a9f
 8015a90:	08015aa5 	.word	0x08015aa5
 8015a94:	08015aab 	.word	0x08015aab
    case HAL_OK :
      usb_status = USBD_OK;
 8015a98:	2300      	movs	r3, #0
 8015a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8015a9c:	e00b      	b.n	8015ab6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015a9e:	2303      	movs	r3, #3
 8015aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8015aa2:	e008      	b.n	8015ab6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015aa4:	2301      	movs	r3, #1
 8015aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8015aa8:	e005      	b.n	8015ab6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015aaa:	2303      	movs	r3, #3
 8015aac:	73fb      	strb	r3, [r7, #15]
    break;
 8015aae:	e002      	b.n	8015ab6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8015ab0:	2303      	movs	r3, #3
 8015ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8015ab4:	bf00      	nop
  }
  return usb_status;
 8015ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ab8:	4618      	mov	r0, r3
 8015aba:	3710      	adds	r7, #16
 8015abc:	46bd      	mov	sp, r7
 8015abe:	bd80      	pop	{r7, pc}

08015ac0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b086      	sub	sp, #24
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	60f8      	str	r0, [r7, #12]
 8015ac8:	607a      	str	r2, [r7, #4]
 8015aca:	603b      	str	r3, [r7, #0]
 8015acc:	460b      	mov	r3, r1
 8015ace:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015ade:	7af9      	ldrb	r1, [r7, #11]
 8015ae0:	683b      	ldr	r3, [r7, #0]
 8015ae2:	687a      	ldr	r2, [r7, #4]
 8015ae4:	f7f4 f99c 	bl	8009e20 <HAL_PCD_EP_Transmit>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8015aec:	7dbb      	ldrb	r3, [r7, #22]
 8015aee:	2b03      	cmp	r3, #3
 8015af0:	d816      	bhi.n	8015b20 <USBD_LL_Transmit+0x60>
 8015af2:	a201      	add	r2, pc, #4	; (adr r2, 8015af8 <USBD_LL_Transmit+0x38>)
 8015af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015af8:	08015b09 	.word	0x08015b09
 8015afc:	08015b0f 	.word	0x08015b0f
 8015b00:	08015b15 	.word	0x08015b15
 8015b04:	08015b1b 	.word	0x08015b1b
    case HAL_OK :
      usb_status = USBD_OK;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	75fb      	strb	r3, [r7, #23]
    break;
 8015b0c:	e00b      	b.n	8015b26 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015b0e:	2303      	movs	r3, #3
 8015b10:	75fb      	strb	r3, [r7, #23]
    break;
 8015b12:	e008      	b.n	8015b26 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015b14:	2301      	movs	r3, #1
 8015b16:	75fb      	strb	r3, [r7, #23]
    break;
 8015b18:	e005      	b.n	8015b26 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015b1a:	2303      	movs	r3, #3
 8015b1c:	75fb      	strb	r3, [r7, #23]
    break;
 8015b1e:	e002      	b.n	8015b26 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8015b20:	2303      	movs	r3, #3
 8015b22:	75fb      	strb	r3, [r7, #23]
    break;
 8015b24:	bf00      	nop
  }
  return usb_status;
 8015b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b28:	4618      	mov	r0, r3
 8015b2a:	3718      	adds	r7, #24
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	bd80      	pop	{r7, pc}

08015b30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b086      	sub	sp, #24
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	60f8      	str	r0, [r7, #12]
 8015b38:	607a      	str	r2, [r7, #4]
 8015b3a:	603b      	str	r3, [r7, #0]
 8015b3c:	460b      	mov	r3, r1
 8015b3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b40:	2300      	movs	r3, #0
 8015b42:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b44:	2300      	movs	r3, #0
 8015b46:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015b4e:	7af9      	ldrb	r1, [r7, #11]
 8015b50:	683b      	ldr	r3, [r7, #0]
 8015b52:	687a      	ldr	r2, [r7, #4]
 8015b54:	f7f4 f91b 	bl	8009d8e <HAL_PCD_EP_Receive>
 8015b58:	4603      	mov	r3, r0
 8015b5a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8015b5c:	7dbb      	ldrb	r3, [r7, #22]
 8015b5e:	2b03      	cmp	r3, #3
 8015b60:	d816      	bhi.n	8015b90 <USBD_LL_PrepareReceive+0x60>
 8015b62:	a201      	add	r2, pc, #4	; (adr r2, 8015b68 <USBD_LL_PrepareReceive+0x38>)
 8015b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b68:	08015b79 	.word	0x08015b79
 8015b6c:	08015b7f 	.word	0x08015b7f
 8015b70:	08015b85 	.word	0x08015b85
 8015b74:	08015b8b 	.word	0x08015b8b
    case HAL_OK :
      usb_status = USBD_OK;
 8015b78:	2300      	movs	r3, #0
 8015b7a:	75fb      	strb	r3, [r7, #23]
    break;
 8015b7c:	e00b      	b.n	8015b96 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015b7e:	2303      	movs	r3, #3
 8015b80:	75fb      	strb	r3, [r7, #23]
    break;
 8015b82:	e008      	b.n	8015b96 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015b84:	2301      	movs	r3, #1
 8015b86:	75fb      	strb	r3, [r7, #23]
    break;
 8015b88:	e005      	b.n	8015b96 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015b8a:	2303      	movs	r3, #3
 8015b8c:	75fb      	strb	r3, [r7, #23]
    break;
 8015b8e:	e002      	b.n	8015b96 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8015b90:	2303      	movs	r3, #3
 8015b92:	75fb      	strb	r3, [r7, #23]
    break;
 8015b94:	bf00      	nop
  }
  return usb_status;
 8015b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b98:	4618      	mov	r0, r3
 8015b9a:	3718      	adds	r7, #24
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bd80      	pop	{r7, pc}

08015ba0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b082      	sub	sp, #8
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
 8015ba8:	460b      	mov	r3, r1
 8015baa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015bb2:	78fa      	ldrb	r2, [r7, #3]
 8015bb4:	4611      	mov	r1, r2
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	f7f4 f91a 	bl	8009df0 <HAL_PCD_EP_GetRxCount>
 8015bbc:	4603      	mov	r3, r0
}
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	3708      	adds	r7, #8
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bd80      	pop	{r7, pc}
	...

08015bc8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b082      	sub	sp, #8
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	6078      	str	r0, [r7, #4]
 8015bd0:	460b      	mov	r3, r1
 8015bd2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8015bd4:	78fb      	ldrb	r3, [r7, #3]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d002      	beq.n	8015be0 <HAL_PCDEx_LPM_Callback+0x18>
 8015bda:	2b01      	cmp	r3, #1
 8015bdc:	d013      	beq.n	8015c06 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8015bde:	e023      	b.n	8015c28 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	699b      	ldr	r3, [r3, #24]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d007      	beq.n	8015bf8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015be8:	f000 f83c 	bl	8015c64 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015bec:	4b10      	ldr	r3, [pc, #64]	; (8015c30 <HAL_PCDEx_LPM_Callback+0x68>)
 8015bee:	691b      	ldr	r3, [r3, #16]
 8015bf0:	4a0f      	ldr	r2, [pc, #60]	; (8015c30 <HAL_PCDEx_LPM_Callback+0x68>)
 8015bf2:	f023 0306 	bic.w	r3, r3, #6
 8015bf6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f7fd fd65 	bl	80136ce <USBD_LL_Resume>
    break;
 8015c04:	e010      	b.n	8015c28 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f7fd fd42 	bl	8013696 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	699b      	ldr	r3, [r3, #24]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d005      	beq.n	8015c26 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015c1a:	4b05      	ldr	r3, [pc, #20]	; (8015c30 <HAL_PCDEx_LPM_Callback+0x68>)
 8015c1c:	691b      	ldr	r3, [r3, #16]
 8015c1e:	4a04      	ldr	r2, [pc, #16]	; (8015c30 <HAL_PCDEx_LPM_Callback+0x68>)
 8015c20:	f043 0306 	orr.w	r3, r3, #6
 8015c24:	6113      	str	r3, [r2, #16]
    break;
 8015c26:	bf00      	nop
}
 8015c28:	bf00      	nop
 8015c2a:	3708      	adds	r7, #8
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	bd80      	pop	{r7, pc}
 8015c30:	e000ed00 	.word	0xe000ed00

08015c34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015c34:	b480      	push	{r7}
 8015c36:	b083      	sub	sp, #12
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015c3c:	4b03      	ldr	r3, [pc, #12]	; (8015c4c <USBD_static_malloc+0x18>)
}
 8015c3e:	4618      	mov	r0, r3
 8015c40:	370c      	adds	r7, #12
 8015c42:	46bd      	mov	sp, r7
 8015c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c48:	4770      	bx	lr
 8015c4a:	bf00      	nop
 8015c4c:	200021b8 	.word	0x200021b8

08015c50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015c50:	b480      	push	{r7}
 8015c52:	b083      	sub	sp, #12
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]

}
 8015c58:	bf00      	nop
 8015c5a:	370c      	adds	r7, #12
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c62:	4770      	bx	lr

08015c64 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015c68:	f7eb ffd6 	bl	8001c18 <SystemClock_Config>
}
 8015c6c:	bf00      	nop
 8015c6e:	bd80      	pop	{r7, pc}

08015c70 <atoi>:
 8015c70:	220a      	movs	r2, #10
 8015c72:	2100      	movs	r1, #0
 8015c74:	f000 bfb8 	b.w	8016be8 <strtol>

08015c78 <malloc>:
 8015c78:	4b02      	ldr	r3, [pc, #8]	; (8015c84 <malloc+0xc>)
 8015c7a:	4601      	mov	r1, r0
 8015c7c:	6818      	ldr	r0, [r3, #0]
 8015c7e:	f000 b82b 	b.w	8015cd8 <_malloc_r>
 8015c82:	bf00      	nop
 8015c84:	20000308 	.word	0x20000308

08015c88 <free>:
 8015c88:	4b02      	ldr	r3, [pc, #8]	; (8015c94 <free+0xc>)
 8015c8a:	4601      	mov	r1, r0
 8015c8c:	6818      	ldr	r0, [r3, #0]
 8015c8e:	f002 bf55 	b.w	8018b3c <_free_r>
 8015c92:	bf00      	nop
 8015c94:	20000308 	.word	0x20000308

08015c98 <sbrk_aligned>:
 8015c98:	b570      	push	{r4, r5, r6, lr}
 8015c9a:	4e0e      	ldr	r6, [pc, #56]	; (8015cd4 <sbrk_aligned+0x3c>)
 8015c9c:	460c      	mov	r4, r1
 8015c9e:	6831      	ldr	r1, [r6, #0]
 8015ca0:	4605      	mov	r5, r0
 8015ca2:	b911      	cbnz	r1, 8015caa <sbrk_aligned+0x12>
 8015ca4:	f002 f83e 	bl	8017d24 <_sbrk_r>
 8015ca8:	6030      	str	r0, [r6, #0]
 8015caa:	4621      	mov	r1, r4
 8015cac:	4628      	mov	r0, r5
 8015cae:	f002 f839 	bl	8017d24 <_sbrk_r>
 8015cb2:	1c43      	adds	r3, r0, #1
 8015cb4:	d00a      	beq.n	8015ccc <sbrk_aligned+0x34>
 8015cb6:	1cc4      	adds	r4, r0, #3
 8015cb8:	f024 0403 	bic.w	r4, r4, #3
 8015cbc:	42a0      	cmp	r0, r4
 8015cbe:	d007      	beq.n	8015cd0 <sbrk_aligned+0x38>
 8015cc0:	1a21      	subs	r1, r4, r0
 8015cc2:	4628      	mov	r0, r5
 8015cc4:	f002 f82e 	bl	8017d24 <_sbrk_r>
 8015cc8:	3001      	adds	r0, #1
 8015cca:	d101      	bne.n	8015cd0 <sbrk_aligned+0x38>
 8015ccc:	f04f 34ff 	mov.w	r4, #4294967295
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	bd70      	pop	{r4, r5, r6, pc}
 8015cd4:	200023dc 	.word	0x200023dc

08015cd8 <_malloc_r>:
 8015cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015cdc:	1ccd      	adds	r5, r1, #3
 8015cde:	f025 0503 	bic.w	r5, r5, #3
 8015ce2:	3508      	adds	r5, #8
 8015ce4:	2d0c      	cmp	r5, #12
 8015ce6:	bf38      	it	cc
 8015ce8:	250c      	movcc	r5, #12
 8015cea:	2d00      	cmp	r5, #0
 8015cec:	4607      	mov	r7, r0
 8015cee:	db01      	blt.n	8015cf4 <_malloc_r+0x1c>
 8015cf0:	42a9      	cmp	r1, r5
 8015cf2:	d905      	bls.n	8015d00 <_malloc_r+0x28>
 8015cf4:	230c      	movs	r3, #12
 8015cf6:	603b      	str	r3, [r7, #0]
 8015cf8:	2600      	movs	r6, #0
 8015cfa:	4630      	mov	r0, r6
 8015cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015dd4 <_malloc_r+0xfc>
 8015d04:	f000 f868 	bl	8015dd8 <__malloc_lock>
 8015d08:	f8d8 3000 	ldr.w	r3, [r8]
 8015d0c:	461c      	mov	r4, r3
 8015d0e:	bb5c      	cbnz	r4, 8015d68 <_malloc_r+0x90>
 8015d10:	4629      	mov	r1, r5
 8015d12:	4638      	mov	r0, r7
 8015d14:	f7ff ffc0 	bl	8015c98 <sbrk_aligned>
 8015d18:	1c43      	adds	r3, r0, #1
 8015d1a:	4604      	mov	r4, r0
 8015d1c:	d155      	bne.n	8015dca <_malloc_r+0xf2>
 8015d1e:	f8d8 4000 	ldr.w	r4, [r8]
 8015d22:	4626      	mov	r6, r4
 8015d24:	2e00      	cmp	r6, #0
 8015d26:	d145      	bne.n	8015db4 <_malloc_r+0xdc>
 8015d28:	2c00      	cmp	r4, #0
 8015d2a:	d048      	beq.n	8015dbe <_malloc_r+0xe6>
 8015d2c:	6823      	ldr	r3, [r4, #0]
 8015d2e:	4631      	mov	r1, r6
 8015d30:	4638      	mov	r0, r7
 8015d32:	eb04 0903 	add.w	r9, r4, r3
 8015d36:	f001 fff5 	bl	8017d24 <_sbrk_r>
 8015d3a:	4581      	cmp	r9, r0
 8015d3c:	d13f      	bne.n	8015dbe <_malloc_r+0xe6>
 8015d3e:	6821      	ldr	r1, [r4, #0]
 8015d40:	1a6d      	subs	r5, r5, r1
 8015d42:	4629      	mov	r1, r5
 8015d44:	4638      	mov	r0, r7
 8015d46:	f7ff ffa7 	bl	8015c98 <sbrk_aligned>
 8015d4a:	3001      	adds	r0, #1
 8015d4c:	d037      	beq.n	8015dbe <_malloc_r+0xe6>
 8015d4e:	6823      	ldr	r3, [r4, #0]
 8015d50:	442b      	add	r3, r5
 8015d52:	6023      	str	r3, [r4, #0]
 8015d54:	f8d8 3000 	ldr.w	r3, [r8]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d038      	beq.n	8015dce <_malloc_r+0xf6>
 8015d5c:	685a      	ldr	r2, [r3, #4]
 8015d5e:	42a2      	cmp	r2, r4
 8015d60:	d12b      	bne.n	8015dba <_malloc_r+0xe2>
 8015d62:	2200      	movs	r2, #0
 8015d64:	605a      	str	r2, [r3, #4]
 8015d66:	e00f      	b.n	8015d88 <_malloc_r+0xb0>
 8015d68:	6822      	ldr	r2, [r4, #0]
 8015d6a:	1b52      	subs	r2, r2, r5
 8015d6c:	d41f      	bmi.n	8015dae <_malloc_r+0xd6>
 8015d6e:	2a0b      	cmp	r2, #11
 8015d70:	d917      	bls.n	8015da2 <_malloc_r+0xca>
 8015d72:	1961      	adds	r1, r4, r5
 8015d74:	42a3      	cmp	r3, r4
 8015d76:	6025      	str	r5, [r4, #0]
 8015d78:	bf18      	it	ne
 8015d7a:	6059      	strne	r1, [r3, #4]
 8015d7c:	6863      	ldr	r3, [r4, #4]
 8015d7e:	bf08      	it	eq
 8015d80:	f8c8 1000 	streq.w	r1, [r8]
 8015d84:	5162      	str	r2, [r4, r5]
 8015d86:	604b      	str	r3, [r1, #4]
 8015d88:	4638      	mov	r0, r7
 8015d8a:	f104 060b 	add.w	r6, r4, #11
 8015d8e:	f000 f829 	bl	8015de4 <__malloc_unlock>
 8015d92:	f026 0607 	bic.w	r6, r6, #7
 8015d96:	1d23      	adds	r3, r4, #4
 8015d98:	1af2      	subs	r2, r6, r3
 8015d9a:	d0ae      	beq.n	8015cfa <_malloc_r+0x22>
 8015d9c:	1b9b      	subs	r3, r3, r6
 8015d9e:	50a3      	str	r3, [r4, r2]
 8015da0:	e7ab      	b.n	8015cfa <_malloc_r+0x22>
 8015da2:	42a3      	cmp	r3, r4
 8015da4:	6862      	ldr	r2, [r4, #4]
 8015da6:	d1dd      	bne.n	8015d64 <_malloc_r+0x8c>
 8015da8:	f8c8 2000 	str.w	r2, [r8]
 8015dac:	e7ec      	b.n	8015d88 <_malloc_r+0xb0>
 8015dae:	4623      	mov	r3, r4
 8015db0:	6864      	ldr	r4, [r4, #4]
 8015db2:	e7ac      	b.n	8015d0e <_malloc_r+0x36>
 8015db4:	4634      	mov	r4, r6
 8015db6:	6876      	ldr	r6, [r6, #4]
 8015db8:	e7b4      	b.n	8015d24 <_malloc_r+0x4c>
 8015dba:	4613      	mov	r3, r2
 8015dbc:	e7cc      	b.n	8015d58 <_malloc_r+0x80>
 8015dbe:	230c      	movs	r3, #12
 8015dc0:	603b      	str	r3, [r7, #0]
 8015dc2:	4638      	mov	r0, r7
 8015dc4:	f000 f80e 	bl	8015de4 <__malloc_unlock>
 8015dc8:	e797      	b.n	8015cfa <_malloc_r+0x22>
 8015dca:	6025      	str	r5, [r4, #0]
 8015dcc:	e7dc      	b.n	8015d88 <_malloc_r+0xb0>
 8015dce:	605b      	str	r3, [r3, #4]
 8015dd0:	deff      	udf	#255	; 0xff
 8015dd2:	bf00      	nop
 8015dd4:	200023d8 	.word	0x200023d8

08015dd8 <__malloc_lock>:
 8015dd8:	4801      	ldr	r0, [pc, #4]	; (8015de0 <__malloc_lock+0x8>)
 8015dda:	f001 bff0 	b.w	8017dbe <__retarget_lock_acquire_recursive>
 8015dde:	bf00      	nop
 8015de0:	20002520 	.word	0x20002520

08015de4 <__malloc_unlock>:
 8015de4:	4801      	ldr	r0, [pc, #4]	; (8015dec <__malloc_unlock+0x8>)
 8015de6:	f001 bfeb 	b.w	8017dc0 <__retarget_lock_release_recursive>
 8015dea:	bf00      	nop
 8015dec:	20002520 	.word	0x20002520

08015df0 <sulp>:
 8015df0:	b570      	push	{r4, r5, r6, lr}
 8015df2:	4604      	mov	r4, r0
 8015df4:	460d      	mov	r5, r1
 8015df6:	ec45 4b10 	vmov	d0, r4, r5
 8015dfa:	4616      	mov	r6, r2
 8015dfc:	f003 fdc0 	bl	8019980 <__ulp>
 8015e00:	ec51 0b10 	vmov	r0, r1, d0
 8015e04:	b17e      	cbz	r6, 8015e26 <sulp+0x36>
 8015e06:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015e0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	dd09      	ble.n	8015e26 <sulp+0x36>
 8015e12:	051b      	lsls	r3, r3, #20
 8015e14:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015e18:	2400      	movs	r4, #0
 8015e1a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015e1e:	4622      	mov	r2, r4
 8015e20:	462b      	mov	r3, r5
 8015e22:	f7ea fbe9 	bl	80005f8 <__aeabi_dmul>
 8015e26:	bd70      	pop	{r4, r5, r6, pc}

08015e28 <_strtod_l>:
 8015e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e2c:	ed2d 8b02 	vpush	{d8}
 8015e30:	b09b      	sub	sp, #108	; 0x6c
 8015e32:	4604      	mov	r4, r0
 8015e34:	9213      	str	r2, [sp, #76]	; 0x4c
 8015e36:	2200      	movs	r2, #0
 8015e38:	9216      	str	r2, [sp, #88]	; 0x58
 8015e3a:	460d      	mov	r5, r1
 8015e3c:	f04f 0800 	mov.w	r8, #0
 8015e40:	f04f 0900 	mov.w	r9, #0
 8015e44:	460a      	mov	r2, r1
 8015e46:	9215      	str	r2, [sp, #84]	; 0x54
 8015e48:	7811      	ldrb	r1, [r2, #0]
 8015e4a:	292b      	cmp	r1, #43	; 0x2b
 8015e4c:	d04c      	beq.n	8015ee8 <_strtod_l+0xc0>
 8015e4e:	d83a      	bhi.n	8015ec6 <_strtod_l+0x9e>
 8015e50:	290d      	cmp	r1, #13
 8015e52:	d834      	bhi.n	8015ebe <_strtod_l+0x96>
 8015e54:	2908      	cmp	r1, #8
 8015e56:	d834      	bhi.n	8015ec2 <_strtod_l+0x9a>
 8015e58:	2900      	cmp	r1, #0
 8015e5a:	d03d      	beq.n	8015ed8 <_strtod_l+0xb0>
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	920a      	str	r2, [sp, #40]	; 0x28
 8015e60:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8015e62:	7832      	ldrb	r2, [r6, #0]
 8015e64:	2a30      	cmp	r2, #48	; 0x30
 8015e66:	f040 80b4 	bne.w	8015fd2 <_strtod_l+0x1aa>
 8015e6a:	7872      	ldrb	r2, [r6, #1]
 8015e6c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8015e70:	2a58      	cmp	r2, #88	; 0x58
 8015e72:	d170      	bne.n	8015f56 <_strtod_l+0x12e>
 8015e74:	9302      	str	r3, [sp, #8]
 8015e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e78:	9301      	str	r3, [sp, #4]
 8015e7a:	ab16      	add	r3, sp, #88	; 0x58
 8015e7c:	9300      	str	r3, [sp, #0]
 8015e7e:	4a8e      	ldr	r2, [pc, #568]	; (80160b8 <_strtod_l+0x290>)
 8015e80:	ab17      	add	r3, sp, #92	; 0x5c
 8015e82:	a915      	add	r1, sp, #84	; 0x54
 8015e84:	4620      	mov	r0, r4
 8015e86:	f002 ff0d 	bl	8018ca4 <__gethex>
 8015e8a:	f010 070f 	ands.w	r7, r0, #15
 8015e8e:	4605      	mov	r5, r0
 8015e90:	d005      	beq.n	8015e9e <_strtod_l+0x76>
 8015e92:	2f06      	cmp	r7, #6
 8015e94:	d12a      	bne.n	8015eec <_strtod_l+0xc4>
 8015e96:	3601      	adds	r6, #1
 8015e98:	2300      	movs	r3, #0
 8015e9a:	9615      	str	r6, [sp, #84]	; 0x54
 8015e9c:	930a      	str	r3, [sp, #40]	; 0x28
 8015e9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	f040 857f 	bne.w	80169a4 <_strtod_l+0xb7c>
 8015ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ea8:	b1db      	cbz	r3, 8015ee2 <_strtod_l+0xba>
 8015eaa:	4642      	mov	r2, r8
 8015eac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015eb0:	ec43 2b10 	vmov	d0, r2, r3
 8015eb4:	b01b      	add	sp, #108	; 0x6c
 8015eb6:	ecbd 8b02 	vpop	{d8}
 8015eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ebe:	2920      	cmp	r1, #32
 8015ec0:	d1cc      	bne.n	8015e5c <_strtod_l+0x34>
 8015ec2:	3201      	adds	r2, #1
 8015ec4:	e7bf      	b.n	8015e46 <_strtod_l+0x1e>
 8015ec6:	292d      	cmp	r1, #45	; 0x2d
 8015ec8:	d1c8      	bne.n	8015e5c <_strtod_l+0x34>
 8015eca:	2101      	movs	r1, #1
 8015ecc:	910a      	str	r1, [sp, #40]	; 0x28
 8015ece:	1c51      	adds	r1, r2, #1
 8015ed0:	9115      	str	r1, [sp, #84]	; 0x54
 8015ed2:	7852      	ldrb	r2, [r2, #1]
 8015ed4:	2a00      	cmp	r2, #0
 8015ed6:	d1c3      	bne.n	8015e60 <_strtod_l+0x38>
 8015ed8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015eda:	9515      	str	r5, [sp, #84]	; 0x54
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	f040 855f 	bne.w	80169a0 <_strtod_l+0xb78>
 8015ee2:	4642      	mov	r2, r8
 8015ee4:	464b      	mov	r3, r9
 8015ee6:	e7e3      	b.n	8015eb0 <_strtod_l+0x88>
 8015ee8:	2100      	movs	r1, #0
 8015eea:	e7ef      	b.n	8015ecc <_strtod_l+0xa4>
 8015eec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015eee:	b13a      	cbz	r2, 8015f00 <_strtod_l+0xd8>
 8015ef0:	2135      	movs	r1, #53	; 0x35
 8015ef2:	a818      	add	r0, sp, #96	; 0x60
 8015ef4:	f003 fe41 	bl	8019b7a <__copybits>
 8015ef8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015efa:	4620      	mov	r0, r4
 8015efc:	f003 fa14 	bl	8019328 <_Bfree>
 8015f00:	3f01      	subs	r7, #1
 8015f02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015f04:	2f04      	cmp	r7, #4
 8015f06:	d806      	bhi.n	8015f16 <_strtod_l+0xee>
 8015f08:	e8df f007 	tbb	[pc, r7]
 8015f0c:	201d0314 	.word	0x201d0314
 8015f10:	14          	.byte	0x14
 8015f11:	00          	.byte	0x00
 8015f12:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8015f16:	05e9      	lsls	r1, r5, #23
 8015f18:	bf48      	it	mi
 8015f1a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8015f1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015f22:	0d1b      	lsrs	r3, r3, #20
 8015f24:	051b      	lsls	r3, r3, #20
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d1b9      	bne.n	8015e9e <_strtod_l+0x76>
 8015f2a:	f001 ff1d 	bl	8017d68 <__errno>
 8015f2e:	2322      	movs	r3, #34	; 0x22
 8015f30:	6003      	str	r3, [r0, #0]
 8015f32:	e7b4      	b.n	8015e9e <_strtod_l+0x76>
 8015f34:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8015f38:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015f3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015f40:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8015f44:	e7e7      	b.n	8015f16 <_strtod_l+0xee>
 8015f46:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80160c0 <_strtod_l+0x298>
 8015f4a:	e7e4      	b.n	8015f16 <_strtod_l+0xee>
 8015f4c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8015f50:	f04f 38ff 	mov.w	r8, #4294967295
 8015f54:	e7df      	b.n	8015f16 <_strtod_l+0xee>
 8015f56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f58:	1c5a      	adds	r2, r3, #1
 8015f5a:	9215      	str	r2, [sp, #84]	; 0x54
 8015f5c:	785b      	ldrb	r3, [r3, #1]
 8015f5e:	2b30      	cmp	r3, #48	; 0x30
 8015f60:	d0f9      	beq.n	8015f56 <_strtod_l+0x12e>
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d09b      	beq.n	8015e9e <_strtod_l+0x76>
 8015f66:	2301      	movs	r3, #1
 8015f68:	f04f 0a00 	mov.w	sl, #0
 8015f6c:	9304      	str	r3, [sp, #16]
 8015f6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f70:	930b      	str	r3, [sp, #44]	; 0x2c
 8015f72:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015f76:	46d3      	mov	fp, sl
 8015f78:	220a      	movs	r2, #10
 8015f7a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015f7c:	7806      	ldrb	r6, [r0, #0]
 8015f7e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015f82:	b2d9      	uxtb	r1, r3
 8015f84:	2909      	cmp	r1, #9
 8015f86:	d926      	bls.n	8015fd6 <_strtod_l+0x1ae>
 8015f88:	494c      	ldr	r1, [pc, #304]	; (80160bc <_strtod_l+0x294>)
 8015f8a:	2201      	movs	r2, #1
 8015f8c:	f001 fe0d 	bl	8017baa <strncmp>
 8015f90:	2800      	cmp	r0, #0
 8015f92:	d030      	beq.n	8015ff6 <_strtod_l+0x1ce>
 8015f94:	2000      	movs	r0, #0
 8015f96:	4632      	mov	r2, r6
 8015f98:	9005      	str	r0, [sp, #20]
 8015f9a:	465e      	mov	r6, fp
 8015f9c:	4603      	mov	r3, r0
 8015f9e:	2a65      	cmp	r2, #101	; 0x65
 8015fa0:	d001      	beq.n	8015fa6 <_strtod_l+0x17e>
 8015fa2:	2a45      	cmp	r2, #69	; 0x45
 8015fa4:	d113      	bne.n	8015fce <_strtod_l+0x1a6>
 8015fa6:	b91e      	cbnz	r6, 8015fb0 <_strtod_l+0x188>
 8015fa8:	9a04      	ldr	r2, [sp, #16]
 8015faa:	4302      	orrs	r2, r0
 8015fac:	d094      	beq.n	8015ed8 <_strtod_l+0xb0>
 8015fae:	2600      	movs	r6, #0
 8015fb0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015fb2:	1c6a      	adds	r2, r5, #1
 8015fb4:	9215      	str	r2, [sp, #84]	; 0x54
 8015fb6:	786a      	ldrb	r2, [r5, #1]
 8015fb8:	2a2b      	cmp	r2, #43	; 0x2b
 8015fba:	d074      	beq.n	80160a6 <_strtod_l+0x27e>
 8015fbc:	2a2d      	cmp	r2, #45	; 0x2d
 8015fbe:	d078      	beq.n	80160b2 <_strtod_l+0x28a>
 8015fc0:	f04f 0c00 	mov.w	ip, #0
 8015fc4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015fc8:	2909      	cmp	r1, #9
 8015fca:	d97f      	bls.n	80160cc <_strtod_l+0x2a4>
 8015fcc:	9515      	str	r5, [sp, #84]	; 0x54
 8015fce:	2700      	movs	r7, #0
 8015fd0:	e09e      	b.n	8016110 <_strtod_l+0x2e8>
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	e7c8      	b.n	8015f68 <_strtod_l+0x140>
 8015fd6:	f1bb 0f08 	cmp.w	fp, #8
 8015fda:	bfd8      	it	le
 8015fdc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8015fde:	f100 0001 	add.w	r0, r0, #1
 8015fe2:	bfda      	itte	le
 8015fe4:	fb02 3301 	mlale	r3, r2, r1, r3
 8015fe8:	9309      	strle	r3, [sp, #36]	; 0x24
 8015fea:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8015fee:	f10b 0b01 	add.w	fp, fp, #1
 8015ff2:	9015      	str	r0, [sp, #84]	; 0x54
 8015ff4:	e7c1      	b.n	8015f7a <_strtod_l+0x152>
 8015ff6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ff8:	1c5a      	adds	r2, r3, #1
 8015ffa:	9215      	str	r2, [sp, #84]	; 0x54
 8015ffc:	785a      	ldrb	r2, [r3, #1]
 8015ffe:	f1bb 0f00 	cmp.w	fp, #0
 8016002:	d037      	beq.n	8016074 <_strtod_l+0x24c>
 8016004:	9005      	str	r0, [sp, #20]
 8016006:	465e      	mov	r6, fp
 8016008:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801600c:	2b09      	cmp	r3, #9
 801600e:	d912      	bls.n	8016036 <_strtod_l+0x20e>
 8016010:	2301      	movs	r3, #1
 8016012:	e7c4      	b.n	8015f9e <_strtod_l+0x176>
 8016014:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016016:	1c5a      	adds	r2, r3, #1
 8016018:	9215      	str	r2, [sp, #84]	; 0x54
 801601a:	785a      	ldrb	r2, [r3, #1]
 801601c:	3001      	adds	r0, #1
 801601e:	2a30      	cmp	r2, #48	; 0x30
 8016020:	d0f8      	beq.n	8016014 <_strtod_l+0x1ec>
 8016022:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8016026:	2b08      	cmp	r3, #8
 8016028:	f200 84c1 	bhi.w	80169ae <_strtod_l+0xb86>
 801602c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801602e:	9005      	str	r0, [sp, #20]
 8016030:	2000      	movs	r0, #0
 8016032:	930b      	str	r3, [sp, #44]	; 0x2c
 8016034:	4606      	mov	r6, r0
 8016036:	3a30      	subs	r2, #48	; 0x30
 8016038:	f100 0301 	add.w	r3, r0, #1
 801603c:	d014      	beq.n	8016068 <_strtod_l+0x240>
 801603e:	9905      	ldr	r1, [sp, #20]
 8016040:	4419      	add	r1, r3
 8016042:	9105      	str	r1, [sp, #20]
 8016044:	4633      	mov	r3, r6
 8016046:	eb00 0c06 	add.w	ip, r0, r6
 801604a:	210a      	movs	r1, #10
 801604c:	4563      	cmp	r3, ip
 801604e:	d113      	bne.n	8016078 <_strtod_l+0x250>
 8016050:	1833      	adds	r3, r6, r0
 8016052:	2b08      	cmp	r3, #8
 8016054:	f106 0601 	add.w	r6, r6, #1
 8016058:	4406      	add	r6, r0
 801605a:	dc1a      	bgt.n	8016092 <_strtod_l+0x26a>
 801605c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801605e:	230a      	movs	r3, #10
 8016060:	fb03 2301 	mla	r3, r3, r1, r2
 8016064:	9309      	str	r3, [sp, #36]	; 0x24
 8016066:	2300      	movs	r3, #0
 8016068:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801606a:	1c51      	adds	r1, r2, #1
 801606c:	9115      	str	r1, [sp, #84]	; 0x54
 801606e:	7852      	ldrb	r2, [r2, #1]
 8016070:	4618      	mov	r0, r3
 8016072:	e7c9      	b.n	8016008 <_strtod_l+0x1e0>
 8016074:	4658      	mov	r0, fp
 8016076:	e7d2      	b.n	801601e <_strtod_l+0x1f6>
 8016078:	2b08      	cmp	r3, #8
 801607a:	f103 0301 	add.w	r3, r3, #1
 801607e:	dc03      	bgt.n	8016088 <_strtod_l+0x260>
 8016080:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016082:	434f      	muls	r7, r1
 8016084:	9709      	str	r7, [sp, #36]	; 0x24
 8016086:	e7e1      	b.n	801604c <_strtod_l+0x224>
 8016088:	2b10      	cmp	r3, #16
 801608a:	bfd8      	it	le
 801608c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8016090:	e7dc      	b.n	801604c <_strtod_l+0x224>
 8016092:	2e10      	cmp	r6, #16
 8016094:	bfdc      	itt	le
 8016096:	230a      	movle	r3, #10
 8016098:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801609c:	e7e3      	b.n	8016066 <_strtod_l+0x23e>
 801609e:	2300      	movs	r3, #0
 80160a0:	9305      	str	r3, [sp, #20]
 80160a2:	2301      	movs	r3, #1
 80160a4:	e780      	b.n	8015fa8 <_strtod_l+0x180>
 80160a6:	f04f 0c00 	mov.w	ip, #0
 80160aa:	1caa      	adds	r2, r5, #2
 80160ac:	9215      	str	r2, [sp, #84]	; 0x54
 80160ae:	78aa      	ldrb	r2, [r5, #2]
 80160b0:	e788      	b.n	8015fc4 <_strtod_l+0x19c>
 80160b2:	f04f 0c01 	mov.w	ip, #1
 80160b6:	e7f8      	b.n	80160aa <_strtod_l+0x282>
 80160b8:	0801ec30 	.word	0x0801ec30
 80160bc:	0801ec2c 	.word	0x0801ec2c
 80160c0:	7ff00000 	.word	0x7ff00000
 80160c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80160c6:	1c51      	adds	r1, r2, #1
 80160c8:	9115      	str	r1, [sp, #84]	; 0x54
 80160ca:	7852      	ldrb	r2, [r2, #1]
 80160cc:	2a30      	cmp	r2, #48	; 0x30
 80160ce:	d0f9      	beq.n	80160c4 <_strtod_l+0x29c>
 80160d0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80160d4:	2908      	cmp	r1, #8
 80160d6:	f63f af7a 	bhi.w	8015fce <_strtod_l+0x1a6>
 80160da:	3a30      	subs	r2, #48	; 0x30
 80160dc:	9208      	str	r2, [sp, #32]
 80160de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80160e0:	920c      	str	r2, [sp, #48]	; 0x30
 80160e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80160e4:	1c57      	adds	r7, r2, #1
 80160e6:	9715      	str	r7, [sp, #84]	; 0x54
 80160e8:	7852      	ldrb	r2, [r2, #1]
 80160ea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80160ee:	f1be 0f09 	cmp.w	lr, #9
 80160f2:	d938      	bls.n	8016166 <_strtod_l+0x33e>
 80160f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80160f6:	1a7f      	subs	r7, r7, r1
 80160f8:	2f08      	cmp	r7, #8
 80160fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80160fe:	dc03      	bgt.n	8016108 <_strtod_l+0x2e0>
 8016100:	9908      	ldr	r1, [sp, #32]
 8016102:	428f      	cmp	r7, r1
 8016104:	bfa8      	it	ge
 8016106:	460f      	movge	r7, r1
 8016108:	f1bc 0f00 	cmp.w	ip, #0
 801610c:	d000      	beq.n	8016110 <_strtod_l+0x2e8>
 801610e:	427f      	negs	r7, r7
 8016110:	2e00      	cmp	r6, #0
 8016112:	d14f      	bne.n	80161b4 <_strtod_l+0x38c>
 8016114:	9904      	ldr	r1, [sp, #16]
 8016116:	4301      	orrs	r1, r0
 8016118:	f47f aec1 	bne.w	8015e9e <_strtod_l+0x76>
 801611c:	2b00      	cmp	r3, #0
 801611e:	f47f aedb 	bne.w	8015ed8 <_strtod_l+0xb0>
 8016122:	2a69      	cmp	r2, #105	; 0x69
 8016124:	d029      	beq.n	801617a <_strtod_l+0x352>
 8016126:	dc26      	bgt.n	8016176 <_strtod_l+0x34e>
 8016128:	2a49      	cmp	r2, #73	; 0x49
 801612a:	d026      	beq.n	801617a <_strtod_l+0x352>
 801612c:	2a4e      	cmp	r2, #78	; 0x4e
 801612e:	f47f aed3 	bne.w	8015ed8 <_strtod_l+0xb0>
 8016132:	499b      	ldr	r1, [pc, #620]	; (80163a0 <_strtod_l+0x578>)
 8016134:	a815      	add	r0, sp, #84	; 0x54
 8016136:	f002 fff5 	bl	8019124 <__match>
 801613a:	2800      	cmp	r0, #0
 801613c:	f43f aecc 	beq.w	8015ed8 <_strtod_l+0xb0>
 8016140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016142:	781b      	ldrb	r3, [r3, #0]
 8016144:	2b28      	cmp	r3, #40	; 0x28
 8016146:	d12f      	bne.n	80161a8 <_strtod_l+0x380>
 8016148:	4996      	ldr	r1, [pc, #600]	; (80163a4 <_strtod_l+0x57c>)
 801614a:	aa18      	add	r2, sp, #96	; 0x60
 801614c:	a815      	add	r0, sp, #84	; 0x54
 801614e:	f002 fffd 	bl	801914c <__hexnan>
 8016152:	2805      	cmp	r0, #5
 8016154:	d128      	bne.n	80161a8 <_strtod_l+0x380>
 8016156:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016158:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801615c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8016160:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8016164:	e69b      	b.n	8015e9e <_strtod_l+0x76>
 8016166:	9f08      	ldr	r7, [sp, #32]
 8016168:	210a      	movs	r1, #10
 801616a:	fb01 2107 	mla	r1, r1, r7, r2
 801616e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8016172:	9208      	str	r2, [sp, #32]
 8016174:	e7b5      	b.n	80160e2 <_strtod_l+0x2ba>
 8016176:	2a6e      	cmp	r2, #110	; 0x6e
 8016178:	e7d9      	b.n	801612e <_strtod_l+0x306>
 801617a:	498b      	ldr	r1, [pc, #556]	; (80163a8 <_strtod_l+0x580>)
 801617c:	a815      	add	r0, sp, #84	; 0x54
 801617e:	f002 ffd1 	bl	8019124 <__match>
 8016182:	2800      	cmp	r0, #0
 8016184:	f43f aea8 	beq.w	8015ed8 <_strtod_l+0xb0>
 8016188:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801618a:	4988      	ldr	r1, [pc, #544]	; (80163ac <_strtod_l+0x584>)
 801618c:	3b01      	subs	r3, #1
 801618e:	a815      	add	r0, sp, #84	; 0x54
 8016190:	9315      	str	r3, [sp, #84]	; 0x54
 8016192:	f002 ffc7 	bl	8019124 <__match>
 8016196:	b910      	cbnz	r0, 801619e <_strtod_l+0x376>
 8016198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801619a:	3301      	adds	r3, #1
 801619c:	9315      	str	r3, [sp, #84]	; 0x54
 801619e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80163bc <_strtod_l+0x594>
 80161a2:	f04f 0800 	mov.w	r8, #0
 80161a6:	e67a      	b.n	8015e9e <_strtod_l+0x76>
 80161a8:	4881      	ldr	r0, [pc, #516]	; (80163b0 <_strtod_l+0x588>)
 80161aa:	f001 fe21 	bl	8017df0 <nan>
 80161ae:	ec59 8b10 	vmov	r8, r9, d0
 80161b2:	e674      	b.n	8015e9e <_strtod_l+0x76>
 80161b4:	9b05      	ldr	r3, [sp, #20]
 80161b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80161b8:	1afb      	subs	r3, r7, r3
 80161ba:	f1bb 0f00 	cmp.w	fp, #0
 80161be:	bf08      	it	eq
 80161c0:	46b3      	moveq	fp, r6
 80161c2:	2e10      	cmp	r6, #16
 80161c4:	9308      	str	r3, [sp, #32]
 80161c6:	4635      	mov	r5, r6
 80161c8:	bfa8      	it	ge
 80161ca:	2510      	movge	r5, #16
 80161cc:	f7ea f99a 	bl	8000504 <__aeabi_ui2d>
 80161d0:	2e09      	cmp	r6, #9
 80161d2:	4680      	mov	r8, r0
 80161d4:	4689      	mov	r9, r1
 80161d6:	dd13      	ble.n	8016200 <_strtod_l+0x3d8>
 80161d8:	4b76      	ldr	r3, [pc, #472]	; (80163b4 <_strtod_l+0x58c>)
 80161da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80161de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80161e2:	f7ea fa09 	bl	80005f8 <__aeabi_dmul>
 80161e6:	4680      	mov	r8, r0
 80161e8:	4650      	mov	r0, sl
 80161ea:	4689      	mov	r9, r1
 80161ec:	f7ea f98a 	bl	8000504 <__aeabi_ui2d>
 80161f0:	4602      	mov	r2, r0
 80161f2:	460b      	mov	r3, r1
 80161f4:	4640      	mov	r0, r8
 80161f6:	4649      	mov	r1, r9
 80161f8:	f7ea f848 	bl	800028c <__adddf3>
 80161fc:	4680      	mov	r8, r0
 80161fe:	4689      	mov	r9, r1
 8016200:	2e0f      	cmp	r6, #15
 8016202:	dc38      	bgt.n	8016276 <_strtod_l+0x44e>
 8016204:	9b08      	ldr	r3, [sp, #32]
 8016206:	2b00      	cmp	r3, #0
 8016208:	f43f ae49 	beq.w	8015e9e <_strtod_l+0x76>
 801620c:	dd24      	ble.n	8016258 <_strtod_l+0x430>
 801620e:	2b16      	cmp	r3, #22
 8016210:	dc0b      	bgt.n	801622a <_strtod_l+0x402>
 8016212:	4968      	ldr	r1, [pc, #416]	; (80163b4 <_strtod_l+0x58c>)
 8016214:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016218:	e9d1 0100 	ldrd	r0, r1, [r1]
 801621c:	4642      	mov	r2, r8
 801621e:	464b      	mov	r3, r9
 8016220:	f7ea f9ea 	bl	80005f8 <__aeabi_dmul>
 8016224:	4680      	mov	r8, r0
 8016226:	4689      	mov	r9, r1
 8016228:	e639      	b.n	8015e9e <_strtod_l+0x76>
 801622a:	9a08      	ldr	r2, [sp, #32]
 801622c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8016230:	4293      	cmp	r3, r2
 8016232:	db20      	blt.n	8016276 <_strtod_l+0x44e>
 8016234:	4c5f      	ldr	r4, [pc, #380]	; (80163b4 <_strtod_l+0x58c>)
 8016236:	f1c6 060f 	rsb	r6, r6, #15
 801623a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801623e:	4642      	mov	r2, r8
 8016240:	464b      	mov	r3, r9
 8016242:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016246:	f7ea f9d7 	bl	80005f8 <__aeabi_dmul>
 801624a:	9b08      	ldr	r3, [sp, #32]
 801624c:	1b9e      	subs	r6, r3, r6
 801624e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8016252:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016256:	e7e3      	b.n	8016220 <_strtod_l+0x3f8>
 8016258:	9b08      	ldr	r3, [sp, #32]
 801625a:	3316      	adds	r3, #22
 801625c:	db0b      	blt.n	8016276 <_strtod_l+0x44e>
 801625e:	9b05      	ldr	r3, [sp, #20]
 8016260:	1bdf      	subs	r7, r3, r7
 8016262:	4b54      	ldr	r3, [pc, #336]	; (80163b4 <_strtod_l+0x58c>)
 8016264:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8016268:	e9d7 2300 	ldrd	r2, r3, [r7]
 801626c:	4640      	mov	r0, r8
 801626e:	4649      	mov	r1, r9
 8016270:	f7ea faec 	bl	800084c <__aeabi_ddiv>
 8016274:	e7d6      	b.n	8016224 <_strtod_l+0x3fc>
 8016276:	9b08      	ldr	r3, [sp, #32]
 8016278:	1b75      	subs	r5, r6, r5
 801627a:	441d      	add	r5, r3
 801627c:	2d00      	cmp	r5, #0
 801627e:	dd70      	ble.n	8016362 <_strtod_l+0x53a>
 8016280:	f015 030f 	ands.w	r3, r5, #15
 8016284:	d00a      	beq.n	801629c <_strtod_l+0x474>
 8016286:	494b      	ldr	r1, [pc, #300]	; (80163b4 <_strtod_l+0x58c>)
 8016288:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801628c:	4642      	mov	r2, r8
 801628e:	464b      	mov	r3, r9
 8016290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016294:	f7ea f9b0 	bl	80005f8 <__aeabi_dmul>
 8016298:	4680      	mov	r8, r0
 801629a:	4689      	mov	r9, r1
 801629c:	f035 050f 	bics.w	r5, r5, #15
 80162a0:	d04d      	beq.n	801633e <_strtod_l+0x516>
 80162a2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80162a6:	dd22      	ble.n	80162ee <_strtod_l+0x4c6>
 80162a8:	2500      	movs	r5, #0
 80162aa:	46ab      	mov	fp, r5
 80162ac:	9509      	str	r5, [sp, #36]	; 0x24
 80162ae:	9505      	str	r5, [sp, #20]
 80162b0:	2322      	movs	r3, #34	; 0x22
 80162b2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80163bc <_strtod_l+0x594>
 80162b6:	6023      	str	r3, [r4, #0]
 80162b8:	f04f 0800 	mov.w	r8, #0
 80162bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162be:	2b00      	cmp	r3, #0
 80162c0:	f43f aded 	beq.w	8015e9e <_strtod_l+0x76>
 80162c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80162c6:	4620      	mov	r0, r4
 80162c8:	f003 f82e 	bl	8019328 <_Bfree>
 80162cc:	9905      	ldr	r1, [sp, #20]
 80162ce:	4620      	mov	r0, r4
 80162d0:	f003 f82a 	bl	8019328 <_Bfree>
 80162d4:	4659      	mov	r1, fp
 80162d6:	4620      	mov	r0, r4
 80162d8:	f003 f826 	bl	8019328 <_Bfree>
 80162dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162de:	4620      	mov	r0, r4
 80162e0:	f003 f822 	bl	8019328 <_Bfree>
 80162e4:	4629      	mov	r1, r5
 80162e6:	4620      	mov	r0, r4
 80162e8:	f003 f81e 	bl	8019328 <_Bfree>
 80162ec:	e5d7      	b.n	8015e9e <_strtod_l+0x76>
 80162ee:	4b32      	ldr	r3, [pc, #200]	; (80163b8 <_strtod_l+0x590>)
 80162f0:	9304      	str	r3, [sp, #16]
 80162f2:	2300      	movs	r3, #0
 80162f4:	112d      	asrs	r5, r5, #4
 80162f6:	4640      	mov	r0, r8
 80162f8:	4649      	mov	r1, r9
 80162fa:	469a      	mov	sl, r3
 80162fc:	2d01      	cmp	r5, #1
 80162fe:	dc21      	bgt.n	8016344 <_strtod_l+0x51c>
 8016300:	b10b      	cbz	r3, 8016306 <_strtod_l+0x4de>
 8016302:	4680      	mov	r8, r0
 8016304:	4689      	mov	r9, r1
 8016306:	492c      	ldr	r1, [pc, #176]	; (80163b8 <_strtod_l+0x590>)
 8016308:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801630c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016310:	4642      	mov	r2, r8
 8016312:	464b      	mov	r3, r9
 8016314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016318:	f7ea f96e 	bl	80005f8 <__aeabi_dmul>
 801631c:	4b27      	ldr	r3, [pc, #156]	; (80163bc <_strtod_l+0x594>)
 801631e:	460a      	mov	r2, r1
 8016320:	400b      	ands	r3, r1
 8016322:	4927      	ldr	r1, [pc, #156]	; (80163c0 <_strtod_l+0x598>)
 8016324:	428b      	cmp	r3, r1
 8016326:	4680      	mov	r8, r0
 8016328:	d8be      	bhi.n	80162a8 <_strtod_l+0x480>
 801632a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801632e:	428b      	cmp	r3, r1
 8016330:	bf86      	itte	hi
 8016332:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80163c4 <_strtod_l+0x59c>
 8016336:	f04f 38ff 	movhi.w	r8, #4294967295
 801633a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801633e:	2300      	movs	r3, #0
 8016340:	9304      	str	r3, [sp, #16]
 8016342:	e07b      	b.n	801643c <_strtod_l+0x614>
 8016344:	07ea      	lsls	r2, r5, #31
 8016346:	d505      	bpl.n	8016354 <_strtod_l+0x52c>
 8016348:	9b04      	ldr	r3, [sp, #16]
 801634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801634e:	f7ea f953 	bl	80005f8 <__aeabi_dmul>
 8016352:	2301      	movs	r3, #1
 8016354:	9a04      	ldr	r2, [sp, #16]
 8016356:	3208      	adds	r2, #8
 8016358:	f10a 0a01 	add.w	sl, sl, #1
 801635c:	106d      	asrs	r5, r5, #1
 801635e:	9204      	str	r2, [sp, #16]
 8016360:	e7cc      	b.n	80162fc <_strtod_l+0x4d4>
 8016362:	d0ec      	beq.n	801633e <_strtod_l+0x516>
 8016364:	426d      	negs	r5, r5
 8016366:	f015 020f 	ands.w	r2, r5, #15
 801636a:	d00a      	beq.n	8016382 <_strtod_l+0x55a>
 801636c:	4b11      	ldr	r3, [pc, #68]	; (80163b4 <_strtod_l+0x58c>)
 801636e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016372:	4640      	mov	r0, r8
 8016374:	4649      	mov	r1, r9
 8016376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801637a:	f7ea fa67 	bl	800084c <__aeabi_ddiv>
 801637e:	4680      	mov	r8, r0
 8016380:	4689      	mov	r9, r1
 8016382:	112d      	asrs	r5, r5, #4
 8016384:	d0db      	beq.n	801633e <_strtod_l+0x516>
 8016386:	2d1f      	cmp	r5, #31
 8016388:	dd1e      	ble.n	80163c8 <_strtod_l+0x5a0>
 801638a:	2500      	movs	r5, #0
 801638c:	46ab      	mov	fp, r5
 801638e:	9509      	str	r5, [sp, #36]	; 0x24
 8016390:	9505      	str	r5, [sp, #20]
 8016392:	2322      	movs	r3, #34	; 0x22
 8016394:	f04f 0800 	mov.w	r8, #0
 8016398:	f04f 0900 	mov.w	r9, #0
 801639c:	6023      	str	r3, [r4, #0]
 801639e:	e78d      	b.n	80162bc <_strtod_l+0x494>
 80163a0:	0801ed8e 	.word	0x0801ed8e
 80163a4:	0801ec44 	.word	0x0801ec44
 80163a8:	0801ed86 	.word	0x0801ed86
 80163ac:	0801ee72 	.word	0x0801ee72
 80163b0:	0801ee6e 	.word	0x0801ee6e
 80163b4:	0801efc8 	.word	0x0801efc8
 80163b8:	0801efa0 	.word	0x0801efa0
 80163bc:	7ff00000 	.word	0x7ff00000
 80163c0:	7ca00000 	.word	0x7ca00000
 80163c4:	7fefffff 	.word	0x7fefffff
 80163c8:	f015 0310 	ands.w	r3, r5, #16
 80163cc:	bf18      	it	ne
 80163ce:	236a      	movne	r3, #106	; 0x6a
 80163d0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8016774 <_strtod_l+0x94c>
 80163d4:	9304      	str	r3, [sp, #16]
 80163d6:	4640      	mov	r0, r8
 80163d8:	4649      	mov	r1, r9
 80163da:	2300      	movs	r3, #0
 80163dc:	07ea      	lsls	r2, r5, #31
 80163de:	d504      	bpl.n	80163ea <_strtod_l+0x5c2>
 80163e0:	e9da 2300 	ldrd	r2, r3, [sl]
 80163e4:	f7ea f908 	bl	80005f8 <__aeabi_dmul>
 80163e8:	2301      	movs	r3, #1
 80163ea:	106d      	asrs	r5, r5, #1
 80163ec:	f10a 0a08 	add.w	sl, sl, #8
 80163f0:	d1f4      	bne.n	80163dc <_strtod_l+0x5b4>
 80163f2:	b10b      	cbz	r3, 80163f8 <_strtod_l+0x5d0>
 80163f4:	4680      	mov	r8, r0
 80163f6:	4689      	mov	r9, r1
 80163f8:	9b04      	ldr	r3, [sp, #16]
 80163fa:	b1bb      	cbz	r3, 801642c <_strtod_l+0x604>
 80163fc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8016400:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016404:	2b00      	cmp	r3, #0
 8016406:	4649      	mov	r1, r9
 8016408:	dd10      	ble.n	801642c <_strtod_l+0x604>
 801640a:	2b1f      	cmp	r3, #31
 801640c:	f340 811e 	ble.w	801664c <_strtod_l+0x824>
 8016410:	2b34      	cmp	r3, #52	; 0x34
 8016412:	bfde      	ittt	le
 8016414:	f04f 33ff 	movle.w	r3, #4294967295
 8016418:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801641c:	4093      	lslle	r3, r2
 801641e:	f04f 0800 	mov.w	r8, #0
 8016422:	bfcc      	ite	gt
 8016424:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8016428:	ea03 0901 	andle.w	r9, r3, r1
 801642c:	2200      	movs	r2, #0
 801642e:	2300      	movs	r3, #0
 8016430:	4640      	mov	r0, r8
 8016432:	4649      	mov	r1, r9
 8016434:	f7ea fb48 	bl	8000ac8 <__aeabi_dcmpeq>
 8016438:	2800      	cmp	r0, #0
 801643a:	d1a6      	bne.n	801638a <_strtod_l+0x562>
 801643c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801643e:	9300      	str	r3, [sp, #0]
 8016440:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016442:	4633      	mov	r3, r6
 8016444:	465a      	mov	r2, fp
 8016446:	4620      	mov	r0, r4
 8016448:	f002 ffd6 	bl	80193f8 <__s2b>
 801644c:	9009      	str	r0, [sp, #36]	; 0x24
 801644e:	2800      	cmp	r0, #0
 8016450:	f43f af2a 	beq.w	80162a8 <_strtod_l+0x480>
 8016454:	9a08      	ldr	r2, [sp, #32]
 8016456:	9b05      	ldr	r3, [sp, #20]
 8016458:	2a00      	cmp	r2, #0
 801645a:	eba3 0307 	sub.w	r3, r3, r7
 801645e:	bfa8      	it	ge
 8016460:	2300      	movge	r3, #0
 8016462:	930c      	str	r3, [sp, #48]	; 0x30
 8016464:	2500      	movs	r5, #0
 8016466:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801646a:	9312      	str	r3, [sp, #72]	; 0x48
 801646c:	46ab      	mov	fp, r5
 801646e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016470:	4620      	mov	r0, r4
 8016472:	6859      	ldr	r1, [r3, #4]
 8016474:	f002 ff18 	bl	80192a8 <_Balloc>
 8016478:	9005      	str	r0, [sp, #20]
 801647a:	2800      	cmp	r0, #0
 801647c:	f43f af18 	beq.w	80162b0 <_strtod_l+0x488>
 8016480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016482:	691a      	ldr	r2, [r3, #16]
 8016484:	3202      	adds	r2, #2
 8016486:	f103 010c 	add.w	r1, r3, #12
 801648a:	0092      	lsls	r2, r2, #2
 801648c:	300c      	adds	r0, #12
 801648e:	f001 fca0 	bl	8017dd2 <memcpy>
 8016492:	ec49 8b10 	vmov	d0, r8, r9
 8016496:	aa18      	add	r2, sp, #96	; 0x60
 8016498:	a917      	add	r1, sp, #92	; 0x5c
 801649a:	4620      	mov	r0, r4
 801649c:	f003 fae0 	bl	8019a60 <__d2b>
 80164a0:	ec49 8b18 	vmov	d8, r8, r9
 80164a4:	9016      	str	r0, [sp, #88]	; 0x58
 80164a6:	2800      	cmp	r0, #0
 80164a8:	f43f af02 	beq.w	80162b0 <_strtod_l+0x488>
 80164ac:	2101      	movs	r1, #1
 80164ae:	4620      	mov	r0, r4
 80164b0:	f003 f83a 	bl	8019528 <__i2b>
 80164b4:	4683      	mov	fp, r0
 80164b6:	2800      	cmp	r0, #0
 80164b8:	f43f aefa 	beq.w	80162b0 <_strtod_l+0x488>
 80164bc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80164be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80164c0:	2e00      	cmp	r6, #0
 80164c2:	bfab      	itete	ge
 80164c4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80164c6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80164c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80164ca:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80164ce:	bfac      	ite	ge
 80164d0:	eb06 0a03 	addge.w	sl, r6, r3
 80164d4:	1b9f      	sublt	r7, r3, r6
 80164d6:	9b04      	ldr	r3, [sp, #16]
 80164d8:	1af6      	subs	r6, r6, r3
 80164da:	4416      	add	r6, r2
 80164dc:	4ba0      	ldr	r3, [pc, #640]	; (8016760 <_strtod_l+0x938>)
 80164de:	3e01      	subs	r6, #1
 80164e0:	429e      	cmp	r6, r3
 80164e2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80164e6:	f280 80c4 	bge.w	8016672 <_strtod_l+0x84a>
 80164ea:	1b9b      	subs	r3, r3, r6
 80164ec:	2b1f      	cmp	r3, #31
 80164ee:	eba2 0203 	sub.w	r2, r2, r3
 80164f2:	f04f 0101 	mov.w	r1, #1
 80164f6:	f300 80b0 	bgt.w	801665a <_strtod_l+0x832>
 80164fa:	fa01 f303 	lsl.w	r3, r1, r3
 80164fe:	930e      	str	r3, [sp, #56]	; 0x38
 8016500:	2300      	movs	r3, #0
 8016502:	930d      	str	r3, [sp, #52]	; 0x34
 8016504:	eb0a 0602 	add.w	r6, sl, r2
 8016508:	9b04      	ldr	r3, [sp, #16]
 801650a:	45b2      	cmp	sl, r6
 801650c:	4417      	add	r7, r2
 801650e:	441f      	add	r7, r3
 8016510:	4653      	mov	r3, sl
 8016512:	bfa8      	it	ge
 8016514:	4633      	movge	r3, r6
 8016516:	42bb      	cmp	r3, r7
 8016518:	bfa8      	it	ge
 801651a:	463b      	movge	r3, r7
 801651c:	2b00      	cmp	r3, #0
 801651e:	bfc2      	ittt	gt
 8016520:	1af6      	subgt	r6, r6, r3
 8016522:	1aff      	subgt	r7, r7, r3
 8016524:	ebaa 0a03 	subgt.w	sl, sl, r3
 8016528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801652a:	2b00      	cmp	r3, #0
 801652c:	dd17      	ble.n	801655e <_strtod_l+0x736>
 801652e:	4659      	mov	r1, fp
 8016530:	461a      	mov	r2, r3
 8016532:	4620      	mov	r0, r4
 8016534:	f003 f8b8 	bl	80196a8 <__pow5mult>
 8016538:	4683      	mov	fp, r0
 801653a:	2800      	cmp	r0, #0
 801653c:	f43f aeb8 	beq.w	80162b0 <_strtod_l+0x488>
 8016540:	4601      	mov	r1, r0
 8016542:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016544:	4620      	mov	r0, r4
 8016546:	f003 f805 	bl	8019554 <__multiply>
 801654a:	900b      	str	r0, [sp, #44]	; 0x2c
 801654c:	2800      	cmp	r0, #0
 801654e:	f43f aeaf 	beq.w	80162b0 <_strtod_l+0x488>
 8016552:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016554:	4620      	mov	r0, r4
 8016556:	f002 fee7 	bl	8019328 <_Bfree>
 801655a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801655c:	9316      	str	r3, [sp, #88]	; 0x58
 801655e:	2e00      	cmp	r6, #0
 8016560:	f300 808c 	bgt.w	801667c <_strtod_l+0x854>
 8016564:	9b08      	ldr	r3, [sp, #32]
 8016566:	2b00      	cmp	r3, #0
 8016568:	dd08      	ble.n	801657c <_strtod_l+0x754>
 801656a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801656c:	9905      	ldr	r1, [sp, #20]
 801656e:	4620      	mov	r0, r4
 8016570:	f003 f89a 	bl	80196a8 <__pow5mult>
 8016574:	9005      	str	r0, [sp, #20]
 8016576:	2800      	cmp	r0, #0
 8016578:	f43f ae9a 	beq.w	80162b0 <_strtod_l+0x488>
 801657c:	2f00      	cmp	r7, #0
 801657e:	dd08      	ble.n	8016592 <_strtod_l+0x76a>
 8016580:	9905      	ldr	r1, [sp, #20]
 8016582:	463a      	mov	r2, r7
 8016584:	4620      	mov	r0, r4
 8016586:	f003 f8e9 	bl	801975c <__lshift>
 801658a:	9005      	str	r0, [sp, #20]
 801658c:	2800      	cmp	r0, #0
 801658e:	f43f ae8f 	beq.w	80162b0 <_strtod_l+0x488>
 8016592:	f1ba 0f00 	cmp.w	sl, #0
 8016596:	dd08      	ble.n	80165aa <_strtod_l+0x782>
 8016598:	4659      	mov	r1, fp
 801659a:	4652      	mov	r2, sl
 801659c:	4620      	mov	r0, r4
 801659e:	f003 f8dd 	bl	801975c <__lshift>
 80165a2:	4683      	mov	fp, r0
 80165a4:	2800      	cmp	r0, #0
 80165a6:	f43f ae83 	beq.w	80162b0 <_strtod_l+0x488>
 80165aa:	9a05      	ldr	r2, [sp, #20]
 80165ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 80165ae:	4620      	mov	r0, r4
 80165b0:	f003 f95c 	bl	801986c <__mdiff>
 80165b4:	4605      	mov	r5, r0
 80165b6:	2800      	cmp	r0, #0
 80165b8:	f43f ae7a 	beq.w	80162b0 <_strtod_l+0x488>
 80165bc:	68c3      	ldr	r3, [r0, #12]
 80165be:	930b      	str	r3, [sp, #44]	; 0x2c
 80165c0:	2300      	movs	r3, #0
 80165c2:	60c3      	str	r3, [r0, #12]
 80165c4:	4659      	mov	r1, fp
 80165c6:	f003 f935 	bl	8019834 <__mcmp>
 80165ca:	2800      	cmp	r0, #0
 80165cc:	da60      	bge.n	8016690 <_strtod_l+0x868>
 80165ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80165d0:	ea53 0308 	orrs.w	r3, r3, r8
 80165d4:	f040 8084 	bne.w	80166e0 <_strtod_l+0x8b8>
 80165d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d17f      	bne.n	80166e0 <_strtod_l+0x8b8>
 80165e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80165e4:	0d1b      	lsrs	r3, r3, #20
 80165e6:	051b      	lsls	r3, r3, #20
 80165e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80165ec:	d978      	bls.n	80166e0 <_strtod_l+0x8b8>
 80165ee:	696b      	ldr	r3, [r5, #20]
 80165f0:	b913      	cbnz	r3, 80165f8 <_strtod_l+0x7d0>
 80165f2:	692b      	ldr	r3, [r5, #16]
 80165f4:	2b01      	cmp	r3, #1
 80165f6:	dd73      	ble.n	80166e0 <_strtod_l+0x8b8>
 80165f8:	4629      	mov	r1, r5
 80165fa:	2201      	movs	r2, #1
 80165fc:	4620      	mov	r0, r4
 80165fe:	f003 f8ad 	bl	801975c <__lshift>
 8016602:	4659      	mov	r1, fp
 8016604:	4605      	mov	r5, r0
 8016606:	f003 f915 	bl	8019834 <__mcmp>
 801660a:	2800      	cmp	r0, #0
 801660c:	dd68      	ble.n	80166e0 <_strtod_l+0x8b8>
 801660e:	9904      	ldr	r1, [sp, #16]
 8016610:	4a54      	ldr	r2, [pc, #336]	; (8016764 <_strtod_l+0x93c>)
 8016612:	464b      	mov	r3, r9
 8016614:	2900      	cmp	r1, #0
 8016616:	f000 8084 	beq.w	8016722 <_strtod_l+0x8fa>
 801661a:	ea02 0109 	and.w	r1, r2, r9
 801661e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016622:	dc7e      	bgt.n	8016722 <_strtod_l+0x8fa>
 8016624:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016628:	f77f aeb3 	ble.w	8016392 <_strtod_l+0x56a>
 801662c:	4b4e      	ldr	r3, [pc, #312]	; (8016768 <_strtod_l+0x940>)
 801662e:	4640      	mov	r0, r8
 8016630:	4649      	mov	r1, r9
 8016632:	2200      	movs	r2, #0
 8016634:	f7e9 ffe0 	bl	80005f8 <__aeabi_dmul>
 8016638:	4b4a      	ldr	r3, [pc, #296]	; (8016764 <_strtod_l+0x93c>)
 801663a:	400b      	ands	r3, r1
 801663c:	4680      	mov	r8, r0
 801663e:	4689      	mov	r9, r1
 8016640:	2b00      	cmp	r3, #0
 8016642:	f47f ae3f 	bne.w	80162c4 <_strtod_l+0x49c>
 8016646:	2322      	movs	r3, #34	; 0x22
 8016648:	6023      	str	r3, [r4, #0]
 801664a:	e63b      	b.n	80162c4 <_strtod_l+0x49c>
 801664c:	f04f 32ff 	mov.w	r2, #4294967295
 8016650:	fa02 f303 	lsl.w	r3, r2, r3
 8016654:	ea03 0808 	and.w	r8, r3, r8
 8016658:	e6e8      	b.n	801642c <_strtod_l+0x604>
 801665a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801665e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016662:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016666:	36e2      	adds	r6, #226	; 0xe2
 8016668:	fa01 f306 	lsl.w	r3, r1, r6
 801666c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8016670:	e748      	b.n	8016504 <_strtod_l+0x6dc>
 8016672:	2100      	movs	r1, #0
 8016674:	2301      	movs	r3, #1
 8016676:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801667a:	e743      	b.n	8016504 <_strtod_l+0x6dc>
 801667c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801667e:	4632      	mov	r2, r6
 8016680:	4620      	mov	r0, r4
 8016682:	f003 f86b 	bl	801975c <__lshift>
 8016686:	9016      	str	r0, [sp, #88]	; 0x58
 8016688:	2800      	cmp	r0, #0
 801668a:	f47f af6b 	bne.w	8016564 <_strtod_l+0x73c>
 801668e:	e60f      	b.n	80162b0 <_strtod_l+0x488>
 8016690:	46ca      	mov	sl, r9
 8016692:	d171      	bne.n	8016778 <_strtod_l+0x950>
 8016694:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016696:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801669a:	b352      	cbz	r2, 80166f2 <_strtod_l+0x8ca>
 801669c:	4a33      	ldr	r2, [pc, #204]	; (801676c <_strtod_l+0x944>)
 801669e:	4293      	cmp	r3, r2
 80166a0:	d12a      	bne.n	80166f8 <_strtod_l+0x8d0>
 80166a2:	9b04      	ldr	r3, [sp, #16]
 80166a4:	4641      	mov	r1, r8
 80166a6:	b1fb      	cbz	r3, 80166e8 <_strtod_l+0x8c0>
 80166a8:	4b2e      	ldr	r3, [pc, #184]	; (8016764 <_strtod_l+0x93c>)
 80166aa:	ea09 0303 	and.w	r3, r9, r3
 80166ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80166b2:	f04f 32ff 	mov.w	r2, #4294967295
 80166b6:	d81a      	bhi.n	80166ee <_strtod_l+0x8c6>
 80166b8:	0d1b      	lsrs	r3, r3, #20
 80166ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80166be:	fa02 f303 	lsl.w	r3, r2, r3
 80166c2:	4299      	cmp	r1, r3
 80166c4:	d118      	bne.n	80166f8 <_strtod_l+0x8d0>
 80166c6:	4b2a      	ldr	r3, [pc, #168]	; (8016770 <_strtod_l+0x948>)
 80166c8:	459a      	cmp	sl, r3
 80166ca:	d102      	bne.n	80166d2 <_strtod_l+0x8aa>
 80166cc:	3101      	adds	r1, #1
 80166ce:	f43f adef 	beq.w	80162b0 <_strtod_l+0x488>
 80166d2:	4b24      	ldr	r3, [pc, #144]	; (8016764 <_strtod_l+0x93c>)
 80166d4:	ea0a 0303 	and.w	r3, sl, r3
 80166d8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80166dc:	f04f 0800 	mov.w	r8, #0
 80166e0:	9b04      	ldr	r3, [sp, #16]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d1a2      	bne.n	801662c <_strtod_l+0x804>
 80166e6:	e5ed      	b.n	80162c4 <_strtod_l+0x49c>
 80166e8:	f04f 33ff 	mov.w	r3, #4294967295
 80166ec:	e7e9      	b.n	80166c2 <_strtod_l+0x89a>
 80166ee:	4613      	mov	r3, r2
 80166f0:	e7e7      	b.n	80166c2 <_strtod_l+0x89a>
 80166f2:	ea53 0308 	orrs.w	r3, r3, r8
 80166f6:	d08a      	beq.n	801660e <_strtod_l+0x7e6>
 80166f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80166fa:	b1e3      	cbz	r3, 8016736 <_strtod_l+0x90e>
 80166fc:	ea13 0f0a 	tst.w	r3, sl
 8016700:	d0ee      	beq.n	80166e0 <_strtod_l+0x8b8>
 8016702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016704:	9a04      	ldr	r2, [sp, #16]
 8016706:	4640      	mov	r0, r8
 8016708:	4649      	mov	r1, r9
 801670a:	b1c3      	cbz	r3, 801673e <_strtod_l+0x916>
 801670c:	f7ff fb70 	bl	8015df0 <sulp>
 8016710:	4602      	mov	r2, r0
 8016712:	460b      	mov	r3, r1
 8016714:	ec51 0b18 	vmov	r0, r1, d8
 8016718:	f7e9 fdb8 	bl	800028c <__adddf3>
 801671c:	4680      	mov	r8, r0
 801671e:	4689      	mov	r9, r1
 8016720:	e7de      	b.n	80166e0 <_strtod_l+0x8b8>
 8016722:	4013      	ands	r3, r2
 8016724:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016728:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801672c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8016730:	f04f 38ff 	mov.w	r8, #4294967295
 8016734:	e7d4      	b.n	80166e0 <_strtod_l+0x8b8>
 8016736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016738:	ea13 0f08 	tst.w	r3, r8
 801673c:	e7e0      	b.n	8016700 <_strtod_l+0x8d8>
 801673e:	f7ff fb57 	bl	8015df0 <sulp>
 8016742:	4602      	mov	r2, r0
 8016744:	460b      	mov	r3, r1
 8016746:	ec51 0b18 	vmov	r0, r1, d8
 801674a:	f7e9 fd9d 	bl	8000288 <__aeabi_dsub>
 801674e:	2200      	movs	r2, #0
 8016750:	2300      	movs	r3, #0
 8016752:	4680      	mov	r8, r0
 8016754:	4689      	mov	r9, r1
 8016756:	f7ea f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 801675a:	2800      	cmp	r0, #0
 801675c:	d0c0      	beq.n	80166e0 <_strtod_l+0x8b8>
 801675e:	e618      	b.n	8016392 <_strtod_l+0x56a>
 8016760:	fffffc02 	.word	0xfffffc02
 8016764:	7ff00000 	.word	0x7ff00000
 8016768:	39500000 	.word	0x39500000
 801676c:	000fffff 	.word	0x000fffff
 8016770:	7fefffff 	.word	0x7fefffff
 8016774:	0801ec58 	.word	0x0801ec58
 8016778:	4659      	mov	r1, fp
 801677a:	4628      	mov	r0, r5
 801677c:	f003 f9ca 	bl	8019b14 <__ratio>
 8016780:	ec57 6b10 	vmov	r6, r7, d0
 8016784:	ee10 0a10 	vmov	r0, s0
 8016788:	2200      	movs	r2, #0
 801678a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801678e:	4639      	mov	r1, r7
 8016790:	f7ea f9ae 	bl	8000af0 <__aeabi_dcmple>
 8016794:	2800      	cmp	r0, #0
 8016796:	d071      	beq.n	801687c <_strtod_l+0xa54>
 8016798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801679a:	2b00      	cmp	r3, #0
 801679c:	d17c      	bne.n	8016898 <_strtod_l+0xa70>
 801679e:	f1b8 0f00 	cmp.w	r8, #0
 80167a2:	d15a      	bne.n	801685a <_strtod_l+0xa32>
 80167a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d15d      	bne.n	8016868 <_strtod_l+0xa40>
 80167ac:	4b90      	ldr	r3, [pc, #576]	; (80169f0 <_strtod_l+0xbc8>)
 80167ae:	2200      	movs	r2, #0
 80167b0:	4630      	mov	r0, r6
 80167b2:	4639      	mov	r1, r7
 80167b4:	f7ea f992 	bl	8000adc <__aeabi_dcmplt>
 80167b8:	2800      	cmp	r0, #0
 80167ba:	d15c      	bne.n	8016876 <_strtod_l+0xa4e>
 80167bc:	4630      	mov	r0, r6
 80167be:	4639      	mov	r1, r7
 80167c0:	4b8c      	ldr	r3, [pc, #560]	; (80169f4 <_strtod_l+0xbcc>)
 80167c2:	2200      	movs	r2, #0
 80167c4:	f7e9 ff18 	bl	80005f8 <__aeabi_dmul>
 80167c8:	4606      	mov	r6, r0
 80167ca:	460f      	mov	r7, r1
 80167cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80167d0:	9606      	str	r6, [sp, #24]
 80167d2:	9307      	str	r3, [sp, #28]
 80167d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80167d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80167dc:	4b86      	ldr	r3, [pc, #536]	; (80169f8 <_strtod_l+0xbd0>)
 80167de:	ea0a 0303 	and.w	r3, sl, r3
 80167e2:	930d      	str	r3, [sp, #52]	; 0x34
 80167e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80167e6:	4b85      	ldr	r3, [pc, #532]	; (80169fc <_strtod_l+0xbd4>)
 80167e8:	429a      	cmp	r2, r3
 80167ea:	f040 8090 	bne.w	801690e <_strtod_l+0xae6>
 80167ee:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80167f2:	ec49 8b10 	vmov	d0, r8, r9
 80167f6:	f003 f8c3 	bl	8019980 <__ulp>
 80167fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80167fe:	ec51 0b10 	vmov	r0, r1, d0
 8016802:	f7e9 fef9 	bl	80005f8 <__aeabi_dmul>
 8016806:	4642      	mov	r2, r8
 8016808:	464b      	mov	r3, r9
 801680a:	f7e9 fd3f 	bl	800028c <__adddf3>
 801680e:	460b      	mov	r3, r1
 8016810:	4979      	ldr	r1, [pc, #484]	; (80169f8 <_strtod_l+0xbd0>)
 8016812:	4a7b      	ldr	r2, [pc, #492]	; (8016a00 <_strtod_l+0xbd8>)
 8016814:	4019      	ands	r1, r3
 8016816:	4291      	cmp	r1, r2
 8016818:	4680      	mov	r8, r0
 801681a:	d944      	bls.n	80168a6 <_strtod_l+0xa7e>
 801681c:	ee18 2a90 	vmov	r2, s17
 8016820:	4b78      	ldr	r3, [pc, #480]	; (8016a04 <_strtod_l+0xbdc>)
 8016822:	429a      	cmp	r2, r3
 8016824:	d104      	bne.n	8016830 <_strtod_l+0xa08>
 8016826:	ee18 3a10 	vmov	r3, s16
 801682a:	3301      	adds	r3, #1
 801682c:	f43f ad40 	beq.w	80162b0 <_strtod_l+0x488>
 8016830:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8016a04 <_strtod_l+0xbdc>
 8016834:	f04f 38ff 	mov.w	r8, #4294967295
 8016838:	9916      	ldr	r1, [sp, #88]	; 0x58
 801683a:	4620      	mov	r0, r4
 801683c:	f002 fd74 	bl	8019328 <_Bfree>
 8016840:	9905      	ldr	r1, [sp, #20]
 8016842:	4620      	mov	r0, r4
 8016844:	f002 fd70 	bl	8019328 <_Bfree>
 8016848:	4659      	mov	r1, fp
 801684a:	4620      	mov	r0, r4
 801684c:	f002 fd6c 	bl	8019328 <_Bfree>
 8016850:	4629      	mov	r1, r5
 8016852:	4620      	mov	r0, r4
 8016854:	f002 fd68 	bl	8019328 <_Bfree>
 8016858:	e609      	b.n	801646e <_strtod_l+0x646>
 801685a:	f1b8 0f01 	cmp.w	r8, #1
 801685e:	d103      	bne.n	8016868 <_strtod_l+0xa40>
 8016860:	f1b9 0f00 	cmp.w	r9, #0
 8016864:	f43f ad95 	beq.w	8016392 <_strtod_l+0x56a>
 8016868:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80169c0 <_strtod_l+0xb98>
 801686c:	4f60      	ldr	r7, [pc, #384]	; (80169f0 <_strtod_l+0xbc8>)
 801686e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016872:	2600      	movs	r6, #0
 8016874:	e7ae      	b.n	80167d4 <_strtod_l+0x9ac>
 8016876:	4f5f      	ldr	r7, [pc, #380]	; (80169f4 <_strtod_l+0xbcc>)
 8016878:	2600      	movs	r6, #0
 801687a:	e7a7      	b.n	80167cc <_strtod_l+0x9a4>
 801687c:	4b5d      	ldr	r3, [pc, #372]	; (80169f4 <_strtod_l+0xbcc>)
 801687e:	4630      	mov	r0, r6
 8016880:	4639      	mov	r1, r7
 8016882:	2200      	movs	r2, #0
 8016884:	f7e9 feb8 	bl	80005f8 <__aeabi_dmul>
 8016888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801688a:	4606      	mov	r6, r0
 801688c:	460f      	mov	r7, r1
 801688e:	2b00      	cmp	r3, #0
 8016890:	d09c      	beq.n	80167cc <_strtod_l+0x9a4>
 8016892:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8016896:	e79d      	b.n	80167d4 <_strtod_l+0x9ac>
 8016898:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80169c8 <_strtod_l+0xba0>
 801689c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80168a0:	ec57 6b17 	vmov	r6, r7, d7
 80168a4:	e796      	b.n	80167d4 <_strtod_l+0x9ac>
 80168a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80168aa:	9b04      	ldr	r3, [sp, #16]
 80168ac:	46ca      	mov	sl, r9
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d1c2      	bne.n	8016838 <_strtod_l+0xa10>
 80168b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80168b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80168b8:	0d1b      	lsrs	r3, r3, #20
 80168ba:	051b      	lsls	r3, r3, #20
 80168bc:	429a      	cmp	r2, r3
 80168be:	d1bb      	bne.n	8016838 <_strtod_l+0xa10>
 80168c0:	4630      	mov	r0, r6
 80168c2:	4639      	mov	r1, r7
 80168c4:	f7ea f9f8 	bl	8000cb8 <__aeabi_d2lz>
 80168c8:	f7e9 fe68 	bl	800059c <__aeabi_l2d>
 80168cc:	4602      	mov	r2, r0
 80168ce:	460b      	mov	r3, r1
 80168d0:	4630      	mov	r0, r6
 80168d2:	4639      	mov	r1, r7
 80168d4:	f7e9 fcd8 	bl	8000288 <__aeabi_dsub>
 80168d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80168da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80168de:	ea43 0308 	orr.w	r3, r3, r8
 80168e2:	4313      	orrs	r3, r2
 80168e4:	4606      	mov	r6, r0
 80168e6:	460f      	mov	r7, r1
 80168e8:	d054      	beq.n	8016994 <_strtod_l+0xb6c>
 80168ea:	a339      	add	r3, pc, #228	; (adr r3, 80169d0 <_strtod_l+0xba8>)
 80168ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168f0:	f7ea f8f4 	bl	8000adc <__aeabi_dcmplt>
 80168f4:	2800      	cmp	r0, #0
 80168f6:	f47f ace5 	bne.w	80162c4 <_strtod_l+0x49c>
 80168fa:	a337      	add	r3, pc, #220	; (adr r3, 80169d8 <_strtod_l+0xbb0>)
 80168fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016900:	4630      	mov	r0, r6
 8016902:	4639      	mov	r1, r7
 8016904:	f7ea f908 	bl	8000b18 <__aeabi_dcmpgt>
 8016908:	2800      	cmp	r0, #0
 801690a:	d095      	beq.n	8016838 <_strtod_l+0xa10>
 801690c:	e4da      	b.n	80162c4 <_strtod_l+0x49c>
 801690e:	9b04      	ldr	r3, [sp, #16]
 8016910:	b333      	cbz	r3, 8016960 <_strtod_l+0xb38>
 8016912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016914:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016918:	d822      	bhi.n	8016960 <_strtod_l+0xb38>
 801691a:	a331      	add	r3, pc, #196	; (adr r3, 80169e0 <_strtod_l+0xbb8>)
 801691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016920:	4630      	mov	r0, r6
 8016922:	4639      	mov	r1, r7
 8016924:	f7ea f8e4 	bl	8000af0 <__aeabi_dcmple>
 8016928:	b1a0      	cbz	r0, 8016954 <_strtod_l+0xb2c>
 801692a:	4639      	mov	r1, r7
 801692c:	4630      	mov	r0, r6
 801692e:	f7ea f93b 	bl	8000ba8 <__aeabi_d2uiz>
 8016932:	2801      	cmp	r0, #1
 8016934:	bf38      	it	cc
 8016936:	2001      	movcc	r0, #1
 8016938:	f7e9 fde4 	bl	8000504 <__aeabi_ui2d>
 801693c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801693e:	4606      	mov	r6, r0
 8016940:	460f      	mov	r7, r1
 8016942:	bb23      	cbnz	r3, 801698e <_strtod_l+0xb66>
 8016944:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016948:	9010      	str	r0, [sp, #64]	; 0x40
 801694a:	9311      	str	r3, [sp, #68]	; 0x44
 801694c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016950:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8016954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016956:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016958:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801695c:	1a9b      	subs	r3, r3, r2
 801695e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016960:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016964:	eeb0 0a48 	vmov.f32	s0, s16
 8016968:	eef0 0a68 	vmov.f32	s1, s17
 801696c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016970:	f003 f806 	bl	8019980 <__ulp>
 8016974:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016978:	ec53 2b10 	vmov	r2, r3, d0
 801697c:	f7e9 fe3c 	bl	80005f8 <__aeabi_dmul>
 8016980:	ec53 2b18 	vmov	r2, r3, d8
 8016984:	f7e9 fc82 	bl	800028c <__adddf3>
 8016988:	4680      	mov	r8, r0
 801698a:	4689      	mov	r9, r1
 801698c:	e78d      	b.n	80168aa <_strtod_l+0xa82>
 801698e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016992:	e7db      	b.n	801694c <_strtod_l+0xb24>
 8016994:	a314      	add	r3, pc, #80	; (adr r3, 80169e8 <_strtod_l+0xbc0>)
 8016996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801699a:	f7ea f89f 	bl	8000adc <__aeabi_dcmplt>
 801699e:	e7b3      	b.n	8016908 <_strtod_l+0xae0>
 80169a0:	2300      	movs	r3, #0
 80169a2:	930a      	str	r3, [sp, #40]	; 0x28
 80169a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80169a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80169a8:	6013      	str	r3, [r2, #0]
 80169aa:	f7ff ba7c 	b.w	8015ea6 <_strtod_l+0x7e>
 80169ae:	2a65      	cmp	r2, #101	; 0x65
 80169b0:	f43f ab75 	beq.w	801609e <_strtod_l+0x276>
 80169b4:	2a45      	cmp	r2, #69	; 0x45
 80169b6:	f43f ab72 	beq.w	801609e <_strtod_l+0x276>
 80169ba:	2301      	movs	r3, #1
 80169bc:	f7ff bbaa 	b.w	8016114 <_strtod_l+0x2ec>
 80169c0:	00000000 	.word	0x00000000
 80169c4:	bff00000 	.word	0xbff00000
 80169c8:	00000000 	.word	0x00000000
 80169cc:	3ff00000 	.word	0x3ff00000
 80169d0:	94a03595 	.word	0x94a03595
 80169d4:	3fdfffff 	.word	0x3fdfffff
 80169d8:	35afe535 	.word	0x35afe535
 80169dc:	3fe00000 	.word	0x3fe00000
 80169e0:	ffc00000 	.word	0xffc00000
 80169e4:	41dfffff 	.word	0x41dfffff
 80169e8:	94a03595 	.word	0x94a03595
 80169ec:	3fcfffff 	.word	0x3fcfffff
 80169f0:	3ff00000 	.word	0x3ff00000
 80169f4:	3fe00000 	.word	0x3fe00000
 80169f8:	7ff00000 	.word	0x7ff00000
 80169fc:	7fe00000 	.word	0x7fe00000
 8016a00:	7c9fffff 	.word	0x7c9fffff
 8016a04:	7fefffff 	.word	0x7fefffff

08016a08 <_strtod_r>:
 8016a08:	4b01      	ldr	r3, [pc, #4]	; (8016a10 <_strtod_r+0x8>)
 8016a0a:	f7ff ba0d 	b.w	8015e28 <_strtod_l>
 8016a0e:	bf00      	nop
 8016a10:	20000150 	.word	0x20000150

08016a14 <strtof>:
 8016a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a18:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8016adc <strtof+0xc8>
 8016a1c:	4b2a      	ldr	r3, [pc, #168]	; (8016ac8 <strtof+0xb4>)
 8016a1e:	460a      	mov	r2, r1
 8016a20:	ed2d 8b02 	vpush	{d8}
 8016a24:	4601      	mov	r1, r0
 8016a26:	f8d8 0000 	ldr.w	r0, [r8]
 8016a2a:	f7ff f9fd 	bl	8015e28 <_strtod_l>
 8016a2e:	ec55 4b10 	vmov	r4, r5, d0
 8016a32:	ee10 2a10 	vmov	r2, s0
 8016a36:	ee10 0a10 	vmov	r0, s0
 8016a3a:	462b      	mov	r3, r5
 8016a3c:	4629      	mov	r1, r5
 8016a3e:	f7ea f875 	bl	8000b2c <__aeabi_dcmpun>
 8016a42:	b190      	cbz	r0, 8016a6a <strtof+0x56>
 8016a44:	2d00      	cmp	r5, #0
 8016a46:	4821      	ldr	r0, [pc, #132]	; (8016acc <strtof+0xb8>)
 8016a48:	da09      	bge.n	8016a5e <strtof+0x4a>
 8016a4a:	f001 f9d9 	bl	8017e00 <nanf>
 8016a4e:	eeb1 8a40 	vneg.f32	s16, s0
 8016a52:	eeb0 0a48 	vmov.f32	s0, s16
 8016a56:	ecbd 8b02 	vpop	{d8}
 8016a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a5e:	ecbd 8b02 	vpop	{d8}
 8016a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a66:	f001 b9cb 	b.w	8017e00 <nanf>
 8016a6a:	4620      	mov	r0, r4
 8016a6c:	4629      	mov	r1, r5
 8016a6e:	f7ea f8bb 	bl	8000be8 <__aeabi_d2f>
 8016a72:	ee08 0a10 	vmov	s16, r0
 8016a76:	eddf 7a16 	vldr	s15, [pc, #88]	; 8016ad0 <strtof+0xbc>
 8016a7a:	eeb0 7ac8 	vabs.f32	s14, s16
 8016a7e:	eeb4 7a67 	vcmp.f32	s14, s15
 8016a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a86:	dd11      	ble.n	8016aac <strtof+0x98>
 8016a88:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8016a8c:	4b11      	ldr	r3, [pc, #68]	; (8016ad4 <strtof+0xc0>)
 8016a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8016a92:	4620      	mov	r0, r4
 8016a94:	4639      	mov	r1, r7
 8016a96:	f7ea f849 	bl	8000b2c <__aeabi_dcmpun>
 8016a9a:	b980      	cbnz	r0, 8016abe <strtof+0xaa>
 8016a9c:	4b0d      	ldr	r3, [pc, #52]	; (8016ad4 <strtof+0xc0>)
 8016a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8016aa2:	4620      	mov	r0, r4
 8016aa4:	4639      	mov	r1, r7
 8016aa6:	f7ea f823 	bl	8000af0 <__aeabi_dcmple>
 8016aaa:	b940      	cbnz	r0, 8016abe <strtof+0xaa>
 8016aac:	ee18 3a10 	vmov	r3, s16
 8016ab0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8016ab4:	d1cd      	bne.n	8016a52 <strtof+0x3e>
 8016ab6:	4b08      	ldr	r3, [pc, #32]	; (8016ad8 <strtof+0xc4>)
 8016ab8:	402b      	ands	r3, r5
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d0c9      	beq.n	8016a52 <strtof+0x3e>
 8016abe:	f8d8 3000 	ldr.w	r3, [r8]
 8016ac2:	2222      	movs	r2, #34	; 0x22
 8016ac4:	601a      	str	r2, [r3, #0]
 8016ac6:	e7c4      	b.n	8016a52 <strtof+0x3e>
 8016ac8:	20000150 	.word	0x20000150
 8016acc:	0801ee6e 	.word	0x0801ee6e
 8016ad0:	7f7fffff 	.word	0x7f7fffff
 8016ad4:	7fefffff 	.word	0x7fefffff
 8016ad8:	7ff00000 	.word	0x7ff00000
 8016adc:	20000308 	.word	0x20000308

08016ae0 <_strtol_l.constprop.0>:
 8016ae0:	2b01      	cmp	r3, #1
 8016ae2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ae6:	d001      	beq.n	8016aec <_strtol_l.constprop.0+0xc>
 8016ae8:	2b24      	cmp	r3, #36	; 0x24
 8016aea:	d906      	bls.n	8016afa <_strtol_l.constprop.0+0x1a>
 8016aec:	f001 f93c 	bl	8017d68 <__errno>
 8016af0:	2316      	movs	r3, #22
 8016af2:	6003      	str	r3, [r0, #0]
 8016af4:	2000      	movs	r0, #0
 8016af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016afa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016be0 <_strtol_l.constprop.0+0x100>
 8016afe:	460d      	mov	r5, r1
 8016b00:	462e      	mov	r6, r5
 8016b02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016b06:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8016b0a:	f017 0708 	ands.w	r7, r7, #8
 8016b0e:	d1f7      	bne.n	8016b00 <_strtol_l.constprop.0+0x20>
 8016b10:	2c2d      	cmp	r4, #45	; 0x2d
 8016b12:	d132      	bne.n	8016b7a <_strtol_l.constprop.0+0x9a>
 8016b14:	782c      	ldrb	r4, [r5, #0]
 8016b16:	2701      	movs	r7, #1
 8016b18:	1cb5      	adds	r5, r6, #2
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d05b      	beq.n	8016bd6 <_strtol_l.constprop.0+0xf6>
 8016b1e:	2b10      	cmp	r3, #16
 8016b20:	d109      	bne.n	8016b36 <_strtol_l.constprop.0+0x56>
 8016b22:	2c30      	cmp	r4, #48	; 0x30
 8016b24:	d107      	bne.n	8016b36 <_strtol_l.constprop.0+0x56>
 8016b26:	782c      	ldrb	r4, [r5, #0]
 8016b28:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016b2c:	2c58      	cmp	r4, #88	; 0x58
 8016b2e:	d14d      	bne.n	8016bcc <_strtol_l.constprop.0+0xec>
 8016b30:	786c      	ldrb	r4, [r5, #1]
 8016b32:	2310      	movs	r3, #16
 8016b34:	3502      	adds	r5, #2
 8016b36:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016b3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8016b3e:	f04f 0e00 	mov.w	lr, #0
 8016b42:	fbb8 f9f3 	udiv	r9, r8, r3
 8016b46:	4676      	mov	r6, lr
 8016b48:	fb03 8a19 	mls	sl, r3, r9, r8
 8016b4c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016b50:	f1bc 0f09 	cmp.w	ip, #9
 8016b54:	d816      	bhi.n	8016b84 <_strtol_l.constprop.0+0xa4>
 8016b56:	4664      	mov	r4, ip
 8016b58:	42a3      	cmp	r3, r4
 8016b5a:	dd24      	ble.n	8016ba6 <_strtol_l.constprop.0+0xc6>
 8016b5c:	f1be 3fff 	cmp.w	lr, #4294967295
 8016b60:	d008      	beq.n	8016b74 <_strtol_l.constprop.0+0x94>
 8016b62:	45b1      	cmp	r9, r6
 8016b64:	d31c      	bcc.n	8016ba0 <_strtol_l.constprop.0+0xc0>
 8016b66:	d101      	bne.n	8016b6c <_strtol_l.constprop.0+0x8c>
 8016b68:	45a2      	cmp	sl, r4
 8016b6a:	db19      	blt.n	8016ba0 <_strtol_l.constprop.0+0xc0>
 8016b6c:	fb06 4603 	mla	r6, r6, r3, r4
 8016b70:	f04f 0e01 	mov.w	lr, #1
 8016b74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016b78:	e7e8      	b.n	8016b4c <_strtol_l.constprop.0+0x6c>
 8016b7a:	2c2b      	cmp	r4, #43	; 0x2b
 8016b7c:	bf04      	itt	eq
 8016b7e:	782c      	ldrbeq	r4, [r5, #0]
 8016b80:	1cb5      	addeq	r5, r6, #2
 8016b82:	e7ca      	b.n	8016b1a <_strtol_l.constprop.0+0x3a>
 8016b84:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016b88:	f1bc 0f19 	cmp.w	ip, #25
 8016b8c:	d801      	bhi.n	8016b92 <_strtol_l.constprop.0+0xb2>
 8016b8e:	3c37      	subs	r4, #55	; 0x37
 8016b90:	e7e2      	b.n	8016b58 <_strtol_l.constprop.0+0x78>
 8016b92:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016b96:	f1bc 0f19 	cmp.w	ip, #25
 8016b9a:	d804      	bhi.n	8016ba6 <_strtol_l.constprop.0+0xc6>
 8016b9c:	3c57      	subs	r4, #87	; 0x57
 8016b9e:	e7db      	b.n	8016b58 <_strtol_l.constprop.0+0x78>
 8016ba0:	f04f 3eff 	mov.w	lr, #4294967295
 8016ba4:	e7e6      	b.n	8016b74 <_strtol_l.constprop.0+0x94>
 8016ba6:	f1be 3fff 	cmp.w	lr, #4294967295
 8016baa:	d105      	bne.n	8016bb8 <_strtol_l.constprop.0+0xd8>
 8016bac:	2322      	movs	r3, #34	; 0x22
 8016bae:	6003      	str	r3, [r0, #0]
 8016bb0:	4646      	mov	r6, r8
 8016bb2:	b942      	cbnz	r2, 8016bc6 <_strtol_l.constprop.0+0xe6>
 8016bb4:	4630      	mov	r0, r6
 8016bb6:	e79e      	b.n	8016af6 <_strtol_l.constprop.0+0x16>
 8016bb8:	b107      	cbz	r7, 8016bbc <_strtol_l.constprop.0+0xdc>
 8016bba:	4276      	negs	r6, r6
 8016bbc:	2a00      	cmp	r2, #0
 8016bbe:	d0f9      	beq.n	8016bb4 <_strtol_l.constprop.0+0xd4>
 8016bc0:	f1be 0f00 	cmp.w	lr, #0
 8016bc4:	d000      	beq.n	8016bc8 <_strtol_l.constprop.0+0xe8>
 8016bc6:	1e69      	subs	r1, r5, #1
 8016bc8:	6011      	str	r1, [r2, #0]
 8016bca:	e7f3      	b.n	8016bb4 <_strtol_l.constprop.0+0xd4>
 8016bcc:	2430      	movs	r4, #48	; 0x30
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d1b1      	bne.n	8016b36 <_strtol_l.constprop.0+0x56>
 8016bd2:	2308      	movs	r3, #8
 8016bd4:	e7af      	b.n	8016b36 <_strtol_l.constprop.0+0x56>
 8016bd6:	2c30      	cmp	r4, #48	; 0x30
 8016bd8:	d0a5      	beq.n	8016b26 <_strtol_l.constprop.0+0x46>
 8016bda:	230a      	movs	r3, #10
 8016bdc:	e7ab      	b.n	8016b36 <_strtol_l.constprop.0+0x56>
 8016bde:	bf00      	nop
 8016be0:	0801ec81 	.word	0x0801ec81

08016be4 <_strtol_r>:
 8016be4:	f7ff bf7c 	b.w	8016ae0 <_strtol_l.constprop.0>

08016be8 <strtol>:
 8016be8:	4613      	mov	r3, r2
 8016bea:	460a      	mov	r2, r1
 8016bec:	4601      	mov	r1, r0
 8016bee:	4802      	ldr	r0, [pc, #8]	; (8016bf8 <strtol+0x10>)
 8016bf0:	6800      	ldr	r0, [r0, #0]
 8016bf2:	f7ff bf75 	b.w	8016ae0 <_strtol_l.constprop.0>
 8016bf6:	bf00      	nop
 8016bf8:	20000308 	.word	0x20000308

08016bfc <__cvt>:
 8016bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016c00:	ec55 4b10 	vmov	r4, r5, d0
 8016c04:	2d00      	cmp	r5, #0
 8016c06:	460e      	mov	r6, r1
 8016c08:	4619      	mov	r1, r3
 8016c0a:	462b      	mov	r3, r5
 8016c0c:	bfbb      	ittet	lt
 8016c0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016c12:	461d      	movlt	r5, r3
 8016c14:	2300      	movge	r3, #0
 8016c16:	232d      	movlt	r3, #45	; 0x2d
 8016c18:	700b      	strb	r3, [r1, #0]
 8016c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016c20:	4691      	mov	r9, r2
 8016c22:	f023 0820 	bic.w	r8, r3, #32
 8016c26:	bfbc      	itt	lt
 8016c28:	4622      	movlt	r2, r4
 8016c2a:	4614      	movlt	r4, r2
 8016c2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016c30:	d005      	beq.n	8016c3e <__cvt+0x42>
 8016c32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016c36:	d100      	bne.n	8016c3a <__cvt+0x3e>
 8016c38:	3601      	adds	r6, #1
 8016c3a:	2102      	movs	r1, #2
 8016c3c:	e000      	b.n	8016c40 <__cvt+0x44>
 8016c3e:	2103      	movs	r1, #3
 8016c40:	ab03      	add	r3, sp, #12
 8016c42:	9301      	str	r3, [sp, #4]
 8016c44:	ab02      	add	r3, sp, #8
 8016c46:	9300      	str	r3, [sp, #0]
 8016c48:	ec45 4b10 	vmov	d0, r4, r5
 8016c4c:	4653      	mov	r3, sl
 8016c4e:	4632      	mov	r2, r6
 8016c50:	f001 f982 	bl	8017f58 <_dtoa_r>
 8016c54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016c58:	4607      	mov	r7, r0
 8016c5a:	d102      	bne.n	8016c62 <__cvt+0x66>
 8016c5c:	f019 0f01 	tst.w	r9, #1
 8016c60:	d022      	beq.n	8016ca8 <__cvt+0xac>
 8016c62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016c66:	eb07 0906 	add.w	r9, r7, r6
 8016c6a:	d110      	bne.n	8016c8e <__cvt+0x92>
 8016c6c:	783b      	ldrb	r3, [r7, #0]
 8016c6e:	2b30      	cmp	r3, #48	; 0x30
 8016c70:	d10a      	bne.n	8016c88 <__cvt+0x8c>
 8016c72:	2200      	movs	r2, #0
 8016c74:	2300      	movs	r3, #0
 8016c76:	4620      	mov	r0, r4
 8016c78:	4629      	mov	r1, r5
 8016c7a:	f7e9 ff25 	bl	8000ac8 <__aeabi_dcmpeq>
 8016c7e:	b918      	cbnz	r0, 8016c88 <__cvt+0x8c>
 8016c80:	f1c6 0601 	rsb	r6, r6, #1
 8016c84:	f8ca 6000 	str.w	r6, [sl]
 8016c88:	f8da 3000 	ldr.w	r3, [sl]
 8016c8c:	4499      	add	r9, r3
 8016c8e:	2200      	movs	r2, #0
 8016c90:	2300      	movs	r3, #0
 8016c92:	4620      	mov	r0, r4
 8016c94:	4629      	mov	r1, r5
 8016c96:	f7e9 ff17 	bl	8000ac8 <__aeabi_dcmpeq>
 8016c9a:	b108      	cbz	r0, 8016ca0 <__cvt+0xa4>
 8016c9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8016ca0:	2230      	movs	r2, #48	; 0x30
 8016ca2:	9b03      	ldr	r3, [sp, #12]
 8016ca4:	454b      	cmp	r3, r9
 8016ca6:	d307      	bcc.n	8016cb8 <__cvt+0xbc>
 8016ca8:	9b03      	ldr	r3, [sp, #12]
 8016caa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016cac:	1bdb      	subs	r3, r3, r7
 8016cae:	4638      	mov	r0, r7
 8016cb0:	6013      	str	r3, [r2, #0]
 8016cb2:	b004      	add	sp, #16
 8016cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cb8:	1c59      	adds	r1, r3, #1
 8016cba:	9103      	str	r1, [sp, #12]
 8016cbc:	701a      	strb	r2, [r3, #0]
 8016cbe:	e7f0      	b.n	8016ca2 <__cvt+0xa6>

08016cc0 <__exponent>:
 8016cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	2900      	cmp	r1, #0
 8016cc6:	bfb8      	it	lt
 8016cc8:	4249      	neglt	r1, r1
 8016cca:	f803 2b02 	strb.w	r2, [r3], #2
 8016cce:	bfb4      	ite	lt
 8016cd0:	222d      	movlt	r2, #45	; 0x2d
 8016cd2:	222b      	movge	r2, #43	; 0x2b
 8016cd4:	2909      	cmp	r1, #9
 8016cd6:	7042      	strb	r2, [r0, #1]
 8016cd8:	dd2a      	ble.n	8016d30 <__exponent+0x70>
 8016cda:	f10d 0207 	add.w	r2, sp, #7
 8016cde:	4617      	mov	r7, r2
 8016ce0:	260a      	movs	r6, #10
 8016ce2:	4694      	mov	ip, r2
 8016ce4:	fb91 f5f6 	sdiv	r5, r1, r6
 8016ce8:	fb06 1415 	mls	r4, r6, r5, r1
 8016cec:	3430      	adds	r4, #48	; 0x30
 8016cee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8016cf2:	460c      	mov	r4, r1
 8016cf4:	2c63      	cmp	r4, #99	; 0x63
 8016cf6:	f102 32ff 	add.w	r2, r2, #4294967295
 8016cfa:	4629      	mov	r1, r5
 8016cfc:	dcf1      	bgt.n	8016ce2 <__exponent+0x22>
 8016cfe:	3130      	adds	r1, #48	; 0x30
 8016d00:	f1ac 0402 	sub.w	r4, ip, #2
 8016d04:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016d08:	1c41      	adds	r1, r0, #1
 8016d0a:	4622      	mov	r2, r4
 8016d0c:	42ba      	cmp	r2, r7
 8016d0e:	d30a      	bcc.n	8016d26 <__exponent+0x66>
 8016d10:	f10d 0209 	add.w	r2, sp, #9
 8016d14:	eba2 020c 	sub.w	r2, r2, ip
 8016d18:	42bc      	cmp	r4, r7
 8016d1a:	bf88      	it	hi
 8016d1c:	2200      	movhi	r2, #0
 8016d1e:	4413      	add	r3, r2
 8016d20:	1a18      	subs	r0, r3, r0
 8016d22:	b003      	add	sp, #12
 8016d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d26:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016d2a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8016d2e:	e7ed      	b.n	8016d0c <__exponent+0x4c>
 8016d30:	2330      	movs	r3, #48	; 0x30
 8016d32:	3130      	adds	r1, #48	; 0x30
 8016d34:	7083      	strb	r3, [r0, #2]
 8016d36:	70c1      	strb	r1, [r0, #3]
 8016d38:	1d03      	adds	r3, r0, #4
 8016d3a:	e7f1      	b.n	8016d20 <__exponent+0x60>

08016d3c <_printf_float>:
 8016d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d40:	ed2d 8b02 	vpush	{d8}
 8016d44:	b08d      	sub	sp, #52	; 0x34
 8016d46:	460c      	mov	r4, r1
 8016d48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016d4c:	4616      	mov	r6, r2
 8016d4e:	461f      	mov	r7, r3
 8016d50:	4605      	mov	r5, r0
 8016d52:	f000 ffaf 	bl	8017cb4 <_localeconv_r>
 8016d56:	f8d0 a000 	ldr.w	sl, [r0]
 8016d5a:	4650      	mov	r0, sl
 8016d5c:	f7e9 fa88 	bl	8000270 <strlen>
 8016d60:	2300      	movs	r3, #0
 8016d62:	930a      	str	r3, [sp, #40]	; 0x28
 8016d64:	6823      	ldr	r3, [r4, #0]
 8016d66:	9305      	str	r3, [sp, #20]
 8016d68:	f8d8 3000 	ldr.w	r3, [r8]
 8016d6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016d70:	3307      	adds	r3, #7
 8016d72:	f023 0307 	bic.w	r3, r3, #7
 8016d76:	f103 0208 	add.w	r2, r3, #8
 8016d7a:	f8c8 2000 	str.w	r2, [r8]
 8016d7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016d82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016d86:	9307      	str	r3, [sp, #28]
 8016d88:	f8cd 8018 	str.w	r8, [sp, #24]
 8016d8c:	ee08 0a10 	vmov	s16, r0
 8016d90:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8016d94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016d98:	4b9e      	ldr	r3, [pc, #632]	; (8017014 <_printf_float+0x2d8>)
 8016d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8016d9e:	f7e9 fec5 	bl	8000b2c <__aeabi_dcmpun>
 8016da2:	bb88      	cbnz	r0, 8016e08 <_printf_float+0xcc>
 8016da4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016da8:	4b9a      	ldr	r3, [pc, #616]	; (8017014 <_printf_float+0x2d8>)
 8016daa:	f04f 32ff 	mov.w	r2, #4294967295
 8016dae:	f7e9 fe9f 	bl	8000af0 <__aeabi_dcmple>
 8016db2:	bb48      	cbnz	r0, 8016e08 <_printf_float+0xcc>
 8016db4:	2200      	movs	r2, #0
 8016db6:	2300      	movs	r3, #0
 8016db8:	4640      	mov	r0, r8
 8016dba:	4649      	mov	r1, r9
 8016dbc:	f7e9 fe8e 	bl	8000adc <__aeabi_dcmplt>
 8016dc0:	b110      	cbz	r0, 8016dc8 <_printf_float+0x8c>
 8016dc2:	232d      	movs	r3, #45	; 0x2d
 8016dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016dc8:	4a93      	ldr	r2, [pc, #588]	; (8017018 <_printf_float+0x2dc>)
 8016dca:	4b94      	ldr	r3, [pc, #592]	; (801701c <_printf_float+0x2e0>)
 8016dcc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016dd0:	bf94      	ite	ls
 8016dd2:	4690      	movls	r8, r2
 8016dd4:	4698      	movhi	r8, r3
 8016dd6:	2303      	movs	r3, #3
 8016dd8:	6123      	str	r3, [r4, #16]
 8016dda:	9b05      	ldr	r3, [sp, #20]
 8016ddc:	f023 0304 	bic.w	r3, r3, #4
 8016de0:	6023      	str	r3, [r4, #0]
 8016de2:	f04f 0900 	mov.w	r9, #0
 8016de6:	9700      	str	r7, [sp, #0]
 8016de8:	4633      	mov	r3, r6
 8016dea:	aa0b      	add	r2, sp, #44	; 0x2c
 8016dec:	4621      	mov	r1, r4
 8016dee:	4628      	mov	r0, r5
 8016df0:	f000 f9da 	bl	80171a8 <_printf_common>
 8016df4:	3001      	adds	r0, #1
 8016df6:	f040 8090 	bne.w	8016f1a <_printf_float+0x1de>
 8016dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8016dfe:	b00d      	add	sp, #52	; 0x34
 8016e00:	ecbd 8b02 	vpop	{d8}
 8016e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e08:	4642      	mov	r2, r8
 8016e0a:	464b      	mov	r3, r9
 8016e0c:	4640      	mov	r0, r8
 8016e0e:	4649      	mov	r1, r9
 8016e10:	f7e9 fe8c 	bl	8000b2c <__aeabi_dcmpun>
 8016e14:	b140      	cbz	r0, 8016e28 <_printf_float+0xec>
 8016e16:	464b      	mov	r3, r9
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	bfbc      	itt	lt
 8016e1c:	232d      	movlt	r3, #45	; 0x2d
 8016e1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016e22:	4a7f      	ldr	r2, [pc, #508]	; (8017020 <_printf_float+0x2e4>)
 8016e24:	4b7f      	ldr	r3, [pc, #508]	; (8017024 <_printf_float+0x2e8>)
 8016e26:	e7d1      	b.n	8016dcc <_printf_float+0x90>
 8016e28:	6863      	ldr	r3, [r4, #4]
 8016e2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016e2e:	9206      	str	r2, [sp, #24]
 8016e30:	1c5a      	adds	r2, r3, #1
 8016e32:	d13f      	bne.n	8016eb4 <_printf_float+0x178>
 8016e34:	2306      	movs	r3, #6
 8016e36:	6063      	str	r3, [r4, #4]
 8016e38:	9b05      	ldr	r3, [sp, #20]
 8016e3a:	6861      	ldr	r1, [r4, #4]
 8016e3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016e40:	2300      	movs	r3, #0
 8016e42:	9303      	str	r3, [sp, #12]
 8016e44:	ab0a      	add	r3, sp, #40	; 0x28
 8016e46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016e4a:	ab09      	add	r3, sp, #36	; 0x24
 8016e4c:	ec49 8b10 	vmov	d0, r8, r9
 8016e50:	9300      	str	r3, [sp, #0]
 8016e52:	6022      	str	r2, [r4, #0]
 8016e54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016e58:	4628      	mov	r0, r5
 8016e5a:	f7ff fecf 	bl	8016bfc <__cvt>
 8016e5e:	9b06      	ldr	r3, [sp, #24]
 8016e60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016e62:	2b47      	cmp	r3, #71	; 0x47
 8016e64:	4680      	mov	r8, r0
 8016e66:	d108      	bne.n	8016e7a <_printf_float+0x13e>
 8016e68:	1cc8      	adds	r0, r1, #3
 8016e6a:	db02      	blt.n	8016e72 <_printf_float+0x136>
 8016e6c:	6863      	ldr	r3, [r4, #4]
 8016e6e:	4299      	cmp	r1, r3
 8016e70:	dd41      	ble.n	8016ef6 <_printf_float+0x1ba>
 8016e72:	f1ab 0302 	sub.w	r3, fp, #2
 8016e76:	fa5f fb83 	uxtb.w	fp, r3
 8016e7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016e7e:	d820      	bhi.n	8016ec2 <_printf_float+0x186>
 8016e80:	3901      	subs	r1, #1
 8016e82:	465a      	mov	r2, fp
 8016e84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016e88:	9109      	str	r1, [sp, #36]	; 0x24
 8016e8a:	f7ff ff19 	bl	8016cc0 <__exponent>
 8016e8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016e90:	1813      	adds	r3, r2, r0
 8016e92:	2a01      	cmp	r2, #1
 8016e94:	4681      	mov	r9, r0
 8016e96:	6123      	str	r3, [r4, #16]
 8016e98:	dc02      	bgt.n	8016ea0 <_printf_float+0x164>
 8016e9a:	6822      	ldr	r2, [r4, #0]
 8016e9c:	07d2      	lsls	r2, r2, #31
 8016e9e:	d501      	bpl.n	8016ea4 <_printf_float+0x168>
 8016ea0:	3301      	adds	r3, #1
 8016ea2:	6123      	str	r3, [r4, #16]
 8016ea4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d09c      	beq.n	8016de6 <_printf_float+0xaa>
 8016eac:	232d      	movs	r3, #45	; 0x2d
 8016eae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016eb2:	e798      	b.n	8016de6 <_printf_float+0xaa>
 8016eb4:	9a06      	ldr	r2, [sp, #24]
 8016eb6:	2a47      	cmp	r2, #71	; 0x47
 8016eb8:	d1be      	bne.n	8016e38 <_printf_float+0xfc>
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d1bc      	bne.n	8016e38 <_printf_float+0xfc>
 8016ebe:	2301      	movs	r3, #1
 8016ec0:	e7b9      	b.n	8016e36 <_printf_float+0xfa>
 8016ec2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016ec6:	d118      	bne.n	8016efa <_printf_float+0x1be>
 8016ec8:	2900      	cmp	r1, #0
 8016eca:	6863      	ldr	r3, [r4, #4]
 8016ecc:	dd0b      	ble.n	8016ee6 <_printf_float+0x1aa>
 8016ece:	6121      	str	r1, [r4, #16]
 8016ed0:	b913      	cbnz	r3, 8016ed8 <_printf_float+0x19c>
 8016ed2:	6822      	ldr	r2, [r4, #0]
 8016ed4:	07d0      	lsls	r0, r2, #31
 8016ed6:	d502      	bpl.n	8016ede <_printf_float+0x1a2>
 8016ed8:	3301      	adds	r3, #1
 8016eda:	440b      	add	r3, r1
 8016edc:	6123      	str	r3, [r4, #16]
 8016ede:	65a1      	str	r1, [r4, #88]	; 0x58
 8016ee0:	f04f 0900 	mov.w	r9, #0
 8016ee4:	e7de      	b.n	8016ea4 <_printf_float+0x168>
 8016ee6:	b913      	cbnz	r3, 8016eee <_printf_float+0x1b2>
 8016ee8:	6822      	ldr	r2, [r4, #0]
 8016eea:	07d2      	lsls	r2, r2, #31
 8016eec:	d501      	bpl.n	8016ef2 <_printf_float+0x1b6>
 8016eee:	3302      	adds	r3, #2
 8016ef0:	e7f4      	b.n	8016edc <_printf_float+0x1a0>
 8016ef2:	2301      	movs	r3, #1
 8016ef4:	e7f2      	b.n	8016edc <_printf_float+0x1a0>
 8016ef6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016efc:	4299      	cmp	r1, r3
 8016efe:	db05      	blt.n	8016f0c <_printf_float+0x1d0>
 8016f00:	6823      	ldr	r3, [r4, #0]
 8016f02:	6121      	str	r1, [r4, #16]
 8016f04:	07d8      	lsls	r0, r3, #31
 8016f06:	d5ea      	bpl.n	8016ede <_printf_float+0x1a2>
 8016f08:	1c4b      	adds	r3, r1, #1
 8016f0a:	e7e7      	b.n	8016edc <_printf_float+0x1a0>
 8016f0c:	2900      	cmp	r1, #0
 8016f0e:	bfd4      	ite	le
 8016f10:	f1c1 0202 	rsble	r2, r1, #2
 8016f14:	2201      	movgt	r2, #1
 8016f16:	4413      	add	r3, r2
 8016f18:	e7e0      	b.n	8016edc <_printf_float+0x1a0>
 8016f1a:	6823      	ldr	r3, [r4, #0]
 8016f1c:	055a      	lsls	r2, r3, #21
 8016f1e:	d407      	bmi.n	8016f30 <_printf_float+0x1f4>
 8016f20:	6923      	ldr	r3, [r4, #16]
 8016f22:	4642      	mov	r2, r8
 8016f24:	4631      	mov	r1, r6
 8016f26:	4628      	mov	r0, r5
 8016f28:	47b8      	blx	r7
 8016f2a:	3001      	adds	r0, #1
 8016f2c:	d12c      	bne.n	8016f88 <_printf_float+0x24c>
 8016f2e:	e764      	b.n	8016dfa <_printf_float+0xbe>
 8016f30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016f34:	f240 80e0 	bls.w	80170f8 <_printf_float+0x3bc>
 8016f38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016f3c:	2200      	movs	r2, #0
 8016f3e:	2300      	movs	r3, #0
 8016f40:	f7e9 fdc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8016f44:	2800      	cmp	r0, #0
 8016f46:	d034      	beq.n	8016fb2 <_printf_float+0x276>
 8016f48:	4a37      	ldr	r2, [pc, #220]	; (8017028 <_printf_float+0x2ec>)
 8016f4a:	2301      	movs	r3, #1
 8016f4c:	4631      	mov	r1, r6
 8016f4e:	4628      	mov	r0, r5
 8016f50:	47b8      	blx	r7
 8016f52:	3001      	adds	r0, #1
 8016f54:	f43f af51 	beq.w	8016dfa <_printf_float+0xbe>
 8016f58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016f5c:	429a      	cmp	r2, r3
 8016f5e:	db02      	blt.n	8016f66 <_printf_float+0x22a>
 8016f60:	6823      	ldr	r3, [r4, #0]
 8016f62:	07d8      	lsls	r0, r3, #31
 8016f64:	d510      	bpl.n	8016f88 <_printf_float+0x24c>
 8016f66:	ee18 3a10 	vmov	r3, s16
 8016f6a:	4652      	mov	r2, sl
 8016f6c:	4631      	mov	r1, r6
 8016f6e:	4628      	mov	r0, r5
 8016f70:	47b8      	blx	r7
 8016f72:	3001      	adds	r0, #1
 8016f74:	f43f af41 	beq.w	8016dfa <_printf_float+0xbe>
 8016f78:	f04f 0800 	mov.w	r8, #0
 8016f7c:	f104 091a 	add.w	r9, r4, #26
 8016f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f82:	3b01      	subs	r3, #1
 8016f84:	4543      	cmp	r3, r8
 8016f86:	dc09      	bgt.n	8016f9c <_printf_float+0x260>
 8016f88:	6823      	ldr	r3, [r4, #0]
 8016f8a:	079b      	lsls	r3, r3, #30
 8016f8c:	f100 8107 	bmi.w	801719e <_printf_float+0x462>
 8016f90:	68e0      	ldr	r0, [r4, #12]
 8016f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f94:	4298      	cmp	r0, r3
 8016f96:	bfb8      	it	lt
 8016f98:	4618      	movlt	r0, r3
 8016f9a:	e730      	b.n	8016dfe <_printf_float+0xc2>
 8016f9c:	2301      	movs	r3, #1
 8016f9e:	464a      	mov	r2, r9
 8016fa0:	4631      	mov	r1, r6
 8016fa2:	4628      	mov	r0, r5
 8016fa4:	47b8      	blx	r7
 8016fa6:	3001      	adds	r0, #1
 8016fa8:	f43f af27 	beq.w	8016dfa <_printf_float+0xbe>
 8016fac:	f108 0801 	add.w	r8, r8, #1
 8016fb0:	e7e6      	b.n	8016f80 <_printf_float+0x244>
 8016fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	dc39      	bgt.n	801702c <_printf_float+0x2f0>
 8016fb8:	4a1b      	ldr	r2, [pc, #108]	; (8017028 <_printf_float+0x2ec>)
 8016fba:	2301      	movs	r3, #1
 8016fbc:	4631      	mov	r1, r6
 8016fbe:	4628      	mov	r0, r5
 8016fc0:	47b8      	blx	r7
 8016fc2:	3001      	adds	r0, #1
 8016fc4:	f43f af19 	beq.w	8016dfa <_printf_float+0xbe>
 8016fc8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016fcc:	4313      	orrs	r3, r2
 8016fce:	d102      	bne.n	8016fd6 <_printf_float+0x29a>
 8016fd0:	6823      	ldr	r3, [r4, #0]
 8016fd2:	07d9      	lsls	r1, r3, #31
 8016fd4:	d5d8      	bpl.n	8016f88 <_printf_float+0x24c>
 8016fd6:	ee18 3a10 	vmov	r3, s16
 8016fda:	4652      	mov	r2, sl
 8016fdc:	4631      	mov	r1, r6
 8016fde:	4628      	mov	r0, r5
 8016fe0:	47b8      	blx	r7
 8016fe2:	3001      	adds	r0, #1
 8016fe4:	f43f af09 	beq.w	8016dfa <_printf_float+0xbe>
 8016fe8:	f04f 0900 	mov.w	r9, #0
 8016fec:	f104 0a1a 	add.w	sl, r4, #26
 8016ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ff2:	425b      	negs	r3, r3
 8016ff4:	454b      	cmp	r3, r9
 8016ff6:	dc01      	bgt.n	8016ffc <_printf_float+0x2c0>
 8016ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ffa:	e792      	b.n	8016f22 <_printf_float+0x1e6>
 8016ffc:	2301      	movs	r3, #1
 8016ffe:	4652      	mov	r2, sl
 8017000:	4631      	mov	r1, r6
 8017002:	4628      	mov	r0, r5
 8017004:	47b8      	blx	r7
 8017006:	3001      	adds	r0, #1
 8017008:	f43f aef7 	beq.w	8016dfa <_printf_float+0xbe>
 801700c:	f109 0901 	add.w	r9, r9, #1
 8017010:	e7ee      	b.n	8016ff0 <_printf_float+0x2b4>
 8017012:	bf00      	nop
 8017014:	7fefffff 	.word	0x7fefffff
 8017018:	0801ed81 	.word	0x0801ed81
 801701c:	0801ed85 	.word	0x0801ed85
 8017020:	0801ed89 	.word	0x0801ed89
 8017024:	0801ed8d 	.word	0x0801ed8d
 8017028:	0801ed91 	.word	0x0801ed91
 801702c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801702e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017030:	429a      	cmp	r2, r3
 8017032:	bfa8      	it	ge
 8017034:	461a      	movge	r2, r3
 8017036:	2a00      	cmp	r2, #0
 8017038:	4691      	mov	r9, r2
 801703a:	dc37      	bgt.n	80170ac <_printf_float+0x370>
 801703c:	f04f 0b00 	mov.w	fp, #0
 8017040:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017044:	f104 021a 	add.w	r2, r4, #26
 8017048:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801704a:	9305      	str	r3, [sp, #20]
 801704c:	eba3 0309 	sub.w	r3, r3, r9
 8017050:	455b      	cmp	r3, fp
 8017052:	dc33      	bgt.n	80170bc <_printf_float+0x380>
 8017054:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017058:	429a      	cmp	r2, r3
 801705a:	db3b      	blt.n	80170d4 <_printf_float+0x398>
 801705c:	6823      	ldr	r3, [r4, #0]
 801705e:	07da      	lsls	r2, r3, #31
 8017060:	d438      	bmi.n	80170d4 <_printf_float+0x398>
 8017062:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8017066:	eba2 0903 	sub.w	r9, r2, r3
 801706a:	9b05      	ldr	r3, [sp, #20]
 801706c:	1ad2      	subs	r2, r2, r3
 801706e:	4591      	cmp	r9, r2
 8017070:	bfa8      	it	ge
 8017072:	4691      	movge	r9, r2
 8017074:	f1b9 0f00 	cmp.w	r9, #0
 8017078:	dc35      	bgt.n	80170e6 <_printf_float+0x3aa>
 801707a:	f04f 0800 	mov.w	r8, #0
 801707e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017082:	f104 0a1a 	add.w	sl, r4, #26
 8017086:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801708a:	1a9b      	subs	r3, r3, r2
 801708c:	eba3 0309 	sub.w	r3, r3, r9
 8017090:	4543      	cmp	r3, r8
 8017092:	f77f af79 	ble.w	8016f88 <_printf_float+0x24c>
 8017096:	2301      	movs	r3, #1
 8017098:	4652      	mov	r2, sl
 801709a:	4631      	mov	r1, r6
 801709c:	4628      	mov	r0, r5
 801709e:	47b8      	blx	r7
 80170a0:	3001      	adds	r0, #1
 80170a2:	f43f aeaa 	beq.w	8016dfa <_printf_float+0xbe>
 80170a6:	f108 0801 	add.w	r8, r8, #1
 80170aa:	e7ec      	b.n	8017086 <_printf_float+0x34a>
 80170ac:	4613      	mov	r3, r2
 80170ae:	4631      	mov	r1, r6
 80170b0:	4642      	mov	r2, r8
 80170b2:	4628      	mov	r0, r5
 80170b4:	47b8      	blx	r7
 80170b6:	3001      	adds	r0, #1
 80170b8:	d1c0      	bne.n	801703c <_printf_float+0x300>
 80170ba:	e69e      	b.n	8016dfa <_printf_float+0xbe>
 80170bc:	2301      	movs	r3, #1
 80170be:	4631      	mov	r1, r6
 80170c0:	4628      	mov	r0, r5
 80170c2:	9205      	str	r2, [sp, #20]
 80170c4:	47b8      	blx	r7
 80170c6:	3001      	adds	r0, #1
 80170c8:	f43f ae97 	beq.w	8016dfa <_printf_float+0xbe>
 80170cc:	9a05      	ldr	r2, [sp, #20]
 80170ce:	f10b 0b01 	add.w	fp, fp, #1
 80170d2:	e7b9      	b.n	8017048 <_printf_float+0x30c>
 80170d4:	ee18 3a10 	vmov	r3, s16
 80170d8:	4652      	mov	r2, sl
 80170da:	4631      	mov	r1, r6
 80170dc:	4628      	mov	r0, r5
 80170de:	47b8      	blx	r7
 80170e0:	3001      	adds	r0, #1
 80170e2:	d1be      	bne.n	8017062 <_printf_float+0x326>
 80170e4:	e689      	b.n	8016dfa <_printf_float+0xbe>
 80170e6:	9a05      	ldr	r2, [sp, #20]
 80170e8:	464b      	mov	r3, r9
 80170ea:	4442      	add	r2, r8
 80170ec:	4631      	mov	r1, r6
 80170ee:	4628      	mov	r0, r5
 80170f0:	47b8      	blx	r7
 80170f2:	3001      	adds	r0, #1
 80170f4:	d1c1      	bne.n	801707a <_printf_float+0x33e>
 80170f6:	e680      	b.n	8016dfa <_printf_float+0xbe>
 80170f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80170fa:	2a01      	cmp	r2, #1
 80170fc:	dc01      	bgt.n	8017102 <_printf_float+0x3c6>
 80170fe:	07db      	lsls	r3, r3, #31
 8017100:	d53a      	bpl.n	8017178 <_printf_float+0x43c>
 8017102:	2301      	movs	r3, #1
 8017104:	4642      	mov	r2, r8
 8017106:	4631      	mov	r1, r6
 8017108:	4628      	mov	r0, r5
 801710a:	47b8      	blx	r7
 801710c:	3001      	adds	r0, #1
 801710e:	f43f ae74 	beq.w	8016dfa <_printf_float+0xbe>
 8017112:	ee18 3a10 	vmov	r3, s16
 8017116:	4652      	mov	r2, sl
 8017118:	4631      	mov	r1, r6
 801711a:	4628      	mov	r0, r5
 801711c:	47b8      	blx	r7
 801711e:	3001      	adds	r0, #1
 8017120:	f43f ae6b 	beq.w	8016dfa <_printf_float+0xbe>
 8017124:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017128:	2200      	movs	r2, #0
 801712a:	2300      	movs	r3, #0
 801712c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8017130:	f7e9 fcca 	bl	8000ac8 <__aeabi_dcmpeq>
 8017134:	b9d8      	cbnz	r0, 801716e <_printf_float+0x432>
 8017136:	f10a 33ff 	add.w	r3, sl, #4294967295
 801713a:	f108 0201 	add.w	r2, r8, #1
 801713e:	4631      	mov	r1, r6
 8017140:	4628      	mov	r0, r5
 8017142:	47b8      	blx	r7
 8017144:	3001      	adds	r0, #1
 8017146:	d10e      	bne.n	8017166 <_printf_float+0x42a>
 8017148:	e657      	b.n	8016dfa <_printf_float+0xbe>
 801714a:	2301      	movs	r3, #1
 801714c:	4652      	mov	r2, sl
 801714e:	4631      	mov	r1, r6
 8017150:	4628      	mov	r0, r5
 8017152:	47b8      	blx	r7
 8017154:	3001      	adds	r0, #1
 8017156:	f43f ae50 	beq.w	8016dfa <_printf_float+0xbe>
 801715a:	f108 0801 	add.w	r8, r8, #1
 801715e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017160:	3b01      	subs	r3, #1
 8017162:	4543      	cmp	r3, r8
 8017164:	dcf1      	bgt.n	801714a <_printf_float+0x40e>
 8017166:	464b      	mov	r3, r9
 8017168:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801716c:	e6da      	b.n	8016f24 <_printf_float+0x1e8>
 801716e:	f04f 0800 	mov.w	r8, #0
 8017172:	f104 0a1a 	add.w	sl, r4, #26
 8017176:	e7f2      	b.n	801715e <_printf_float+0x422>
 8017178:	2301      	movs	r3, #1
 801717a:	4642      	mov	r2, r8
 801717c:	e7df      	b.n	801713e <_printf_float+0x402>
 801717e:	2301      	movs	r3, #1
 8017180:	464a      	mov	r2, r9
 8017182:	4631      	mov	r1, r6
 8017184:	4628      	mov	r0, r5
 8017186:	47b8      	blx	r7
 8017188:	3001      	adds	r0, #1
 801718a:	f43f ae36 	beq.w	8016dfa <_printf_float+0xbe>
 801718e:	f108 0801 	add.w	r8, r8, #1
 8017192:	68e3      	ldr	r3, [r4, #12]
 8017194:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017196:	1a5b      	subs	r3, r3, r1
 8017198:	4543      	cmp	r3, r8
 801719a:	dcf0      	bgt.n	801717e <_printf_float+0x442>
 801719c:	e6f8      	b.n	8016f90 <_printf_float+0x254>
 801719e:	f04f 0800 	mov.w	r8, #0
 80171a2:	f104 0919 	add.w	r9, r4, #25
 80171a6:	e7f4      	b.n	8017192 <_printf_float+0x456>

080171a8 <_printf_common>:
 80171a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171ac:	4616      	mov	r6, r2
 80171ae:	4699      	mov	r9, r3
 80171b0:	688a      	ldr	r2, [r1, #8]
 80171b2:	690b      	ldr	r3, [r1, #16]
 80171b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80171b8:	4293      	cmp	r3, r2
 80171ba:	bfb8      	it	lt
 80171bc:	4613      	movlt	r3, r2
 80171be:	6033      	str	r3, [r6, #0]
 80171c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80171c4:	4607      	mov	r7, r0
 80171c6:	460c      	mov	r4, r1
 80171c8:	b10a      	cbz	r2, 80171ce <_printf_common+0x26>
 80171ca:	3301      	adds	r3, #1
 80171cc:	6033      	str	r3, [r6, #0]
 80171ce:	6823      	ldr	r3, [r4, #0]
 80171d0:	0699      	lsls	r1, r3, #26
 80171d2:	bf42      	ittt	mi
 80171d4:	6833      	ldrmi	r3, [r6, #0]
 80171d6:	3302      	addmi	r3, #2
 80171d8:	6033      	strmi	r3, [r6, #0]
 80171da:	6825      	ldr	r5, [r4, #0]
 80171dc:	f015 0506 	ands.w	r5, r5, #6
 80171e0:	d106      	bne.n	80171f0 <_printf_common+0x48>
 80171e2:	f104 0a19 	add.w	sl, r4, #25
 80171e6:	68e3      	ldr	r3, [r4, #12]
 80171e8:	6832      	ldr	r2, [r6, #0]
 80171ea:	1a9b      	subs	r3, r3, r2
 80171ec:	42ab      	cmp	r3, r5
 80171ee:	dc26      	bgt.n	801723e <_printf_common+0x96>
 80171f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80171f4:	1e13      	subs	r3, r2, #0
 80171f6:	6822      	ldr	r2, [r4, #0]
 80171f8:	bf18      	it	ne
 80171fa:	2301      	movne	r3, #1
 80171fc:	0692      	lsls	r2, r2, #26
 80171fe:	d42b      	bmi.n	8017258 <_printf_common+0xb0>
 8017200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017204:	4649      	mov	r1, r9
 8017206:	4638      	mov	r0, r7
 8017208:	47c0      	blx	r8
 801720a:	3001      	adds	r0, #1
 801720c:	d01e      	beq.n	801724c <_printf_common+0xa4>
 801720e:	6823      	ldr	r3, [r4, #0]
 8017210:	6922      	ldr	r2, [r4, #16]
 8017212:	f003 0306 	and.w	r3, r3, #6
 8017216:	2b04      	cmp	r3, #4
 8017218:	bf02      	ittt	eq
 801721a:	68e5      	ldreq	r5, [r4, #12]
 801721c:	6833      	ldreq	r3, [r6, #0]
 801721e:	1aed      	subeq	r5, r5, r3
 8017220:	68a3      	ldr	r3, [r4, #8]
 8017222:	bf0c      	ite	eq
 8017224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017228:	2500      	movne	r5, #0
 801722a:	4293      	cmp	r3, r2
 801722c:	bfc4      	itt	gt
 801722e:	1a9b      	subgt	r3, r3, r2
 8017230:	18ed      	addgt	r5, r5, r3
 8017232:	2600      	movs	r6, #0
 8017234:	341a      	adds	r4, #26
 8017236:	42b5      	cmp	r5, r6
 8017238:	d11a      	bne.n	8017270 <_printf_common+0xc8>
 801723a:	2000      	movs	r0, #0
 801723c:	e008      	b.n	8017250 <_printf_common+0xa8>
 801723e:	2301      	movs	r3, #1
 8017240:	4652      	mov	r2, sl
 8017242:	4649      	mov	r1, r9
 8017244:	4638      	mov	r0, r7
 8017246:	47c0      	blx	r8
 8017248:	3001      	adds	r0, #1
 801724a:	d103      	bne.n	8017254 <_printf_common+0xac>
 801724c:	f04f 30ff 	mov.w	r0, #4294967295
 8017250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017254:	3501      	adds	r5, #1
 8017256:	e7c6      	b.n	80171e6 <_printf_common+0x3e>
 8017258:	18e1      	adds	r1, r4, r3
 801725a:	1c5a      	adds	r2, r3, #1
 801725c:	2030      	movs	r0, #48	; 0x30
 801725e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017262:	4422      	add	r2, r4
 8017264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801726c:	3302      	adds	r3, #2
 801726e:	e7c7      	b.n	8017200 <_printf_common+0x58>
 8017270:	2301      	movs	r3, #1
 8017272:	4622      	mov	r2, r4
 8017274:	4649      	mov	r1, r9
 8017276:	4638      	mov	r0, r7
 8017278:	47c0      	blx	r8
 801727a:	3001      	adds	r0, #1
 801727c:	d0e6      	beq.n	801724c <_printf_common+0xa4>
 801727e:	3601      	adds	r6, #1
 8017280:	e7d9      	b.n	8017236 <_printf_common+0x8e>
	...

08017284 <_printf_i>:
 8017284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017288:	7e0f      	ldrb	r7, [r1, #24]
 801728a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801728c:	2f78      	cmp	r7, #120	; 0x78
 801728e:	4691      	mov	r9, r2
 8017290:	4680      	mov	r8, r0
 8017292:	460c      	mov	r4, r1
 8017294:	469a      	mov	sl, r3
 8017296:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801729a:	d807      	bhi.n	80172ac <_printf_i+0x28>
 801729c:	2f62      	cmp	r7, #98	; 0x62
 801729e:	d80a      	bhi.n	80172b6 <_printf_i+0x32>
 80172a0:	2f00      	cmp	r7, #0
 80172a2:	f000 80d4 	beq.w	801744e <_printf_i+0x1ca>
 80172a6:	2f58      	cmp	r7, #88	; 0x58
 80172a8:	f000 80c0 	beq.w	801742c <_printf_i+0x1a8>
 80172ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80172b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80172b4:	e03a      	b.n	801732c <_printf_i+0xa8>
 80172b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80172ba:	2b15      	cmp	r3, #21
 80172bc:	d8f6      	bhi.n	80172ac <_printf_i+0x28>
 80172be:	a101      	add	r1, pc, #4	; (adr r1, 80172c4 <_printf_i+0x40>)
 80172c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80172c4:	0801731d 	.word	0x0801731d
 80172c8:	08017331 	.word	0x08017331
 80172cc:	080172ad 	.word	0x080172ad
 80172d0:	080172ad 	.word	0x080172ad
 80172d4:	080172ad 	.word	0x080172ad
 80172d8:	080172ad 	.word	0x080172ad
 80172dc:	08017331 	.word	0x08017331
 80172e0:	080172ad 	.word	0x080172ad
 80172e4:	080172ad 	.word	0x080172ad
 80172e8:	080172ad 	.word	0x080172ad
 80172ec:	080172ad 	.word	0x080172ad
 80172f0:	08017435 	.word	0x08017435
 80172f4:	0801735d 	.word	0x0801735d
 80172f8:	080173ef 	.word	0x080173ef
 80172fc:	080172ad 	.word	0x080172ad
 8017300:	080172ad 	.word	0x080172ad
 8017304:	08017457 	.word	0x08017457
 8017308:	080172ad 	.word	0x080172ad
 801730c:	0801735d 	.word	0x0801735d
 8017310:	080172ad 	.word	0x080172ad
 8017314:	080172ad 	.word	0x080172ad
 8017318:	080173f7 	.word	0x080173f7
 801731c:	682b      	ldr	r3, [r5, #0]
 801731e:	1d1a      	adds	r2, r3, #4
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	602a      	str	r2, [r5, #0]
 8017324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801732c:	2301      	movs	r3, #1
 801732e:	e09f      	b.n	8017470 <_printf_i+0x1ec>
 8017330:	6820      	ldr	r0, [r4, #0]
 8017332:	682b      	ldr	r3, [r5, #0]
 8017334:	0607      	lsls	r7, r0, #24
 8017336:	f103 0104 	add.w	r1, r3, #4
 801733a:	6029      	str	r1, [r5, #0]
 801733c:	d501      	bpl.n	8017342 <_printf_i+0xbe>
 801733e:	681e      	ldr	r6, [r3, #0]
 8017340:	e003      	b.n	801734a <_printf_i+0xc6>
 8017342:	0646      	lsls	r6, r0, #25
 8017344:	d5fb      	bpl.n	801733e <_printf_i+0xba>
 8017346:	f9b3 6000 	ldrsh.w	r6, [r3]
 801734a:	2e00      	cmp	r6, #0
 801734c:	da03      	bge.n	8017356 <_printf_i+0xd2>
 801734e:	232d      	movs	r3, #45	; 0x2d
 8017350:	4276      	negs	r6, r6
 8017352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017356:	485a      	ldr	r0, [pc, #360]	; (80174c0 <_printf_i+0x23c>)
 8017358:	230a      	movs	r3, #10
 801735a:	e012      	b.n	8017382 <_printf_i+0xfe>
 801735c:	682b      	ldr	r3, [r5, #0]
 801735e:	6820      	ldr	r0, [r4, #0]
 8017360:	1d19      	adds	r1, r3, #4
 8017362:	6029      	str	r1, [r5, #0]
 8017364:	0605      	lsls	r5, r0, #24
 8017366:	d501      	bpl.n	801736c <_printf_i+0xe8>
 8017368:	681e      	ldr	r6, [r3, #0]
 801736a:	e002      	b.n	8017372 <_printf_i+0xee>
 801736c:	0641      	lsls	r1, r0, #25
 801736e:	d5fb      	bpl.n	8017368 <_printf_i+0xe4>
 8017370:	881e      	ldrh	r6, [r3, #0]
 8017372:	4853      	ldr	r0, [pc, #332]	; (80174c0 <_printf_i+0x23c>)
 8017374:	2f6f      	cmp	r7, #111	; 0x6f
 8017376:	bf0c      	ite	eq
 8017378:	2308      	moveq	r3, #8
 801737a:	230a      	movne	r3, #10
 801737c:	2100      	movs	r1, #0
 801737e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017382:	6865      	ldr	r5, [r4, #4]
 8017384:	60a5      	str	r5, [r4, #8]
 8017386:	2d00      	cmp	r5, #0
 8017388:	bfa2      	ittt	ge
 801738a:	6821      	ldrge	r1, [r4, #0]
 801738c:	f021 0104 	bicge.w	r1, r1, #4
 8017390:	6021      	strge	r1, [r4, #0]
 8017392:	b90e      	cbnz	r6, 8017398 <_printf_i+0x114>
 8017394:	2d00      	cmp	r5, #0
 8017396:	d04b      	beq.n	8017430 <_printf_i+0x1ac>
 8017398:	4615      	mov	r5, r2
 801739a:	fbb6 f1f3 	udiv	r1, r6, r3
 801739e:	fb03 6711 	mls	r7, r3, r1, r6
 80173a2:	5dc7      	ldrb	r7, [r0, r7]
 80173a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80173a8:	4637      	mov	r7, r6
 80173aa:	42bb      	cmp	r3, r7
 80173ac:	460e      	mov	r6, r1
 80173ae:	d9f4      	bls.n	801739a <_printf_i+0x116>
 80173b0:	2b08      	cmp	r3, #8
 80173b2:	d10b      	bne.n	80173cc <_printf_i+0x148>
 80173b4:	6823      	ldr	r3, [r4, #0]
 80173b6:	07de      	lsls	r6, r3, #31
 80173b8:	d508      	bpl.n	80173cc <_printf_i+0x148>
 80173ba:	6923      	ldr	r3, [r4, #16]
 80173bc:	6861      	ldr	r1, [r4, #4]
 80173be:	4299      	cmp	r1, r3
 80173c0:	bfde      	ittt	le
 80173c2:	2330      	movle	r3, #48	; 0x30
 80173c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80173c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80173cc:	1b52      	subs	r2, r2, r5
 80173ce:	6122      	str	r2, [r4, #16]
 80173d0:	f8cd a000 	str.w	sl, [sp]
 80173d4:	464b      	mov	r3, r9
 80173d6:	aa03      	add	r2, sp, #12
 80173d8:	4621      	mov	r1, r4
 80173da:	4640      	mov	r0, r8
 80173dc:	f7ff fee4 	bl	80171a8 <_printf_common>
 80173e0:	3001      	adds	r0, #1
 80173e2:	d14a      	bne.n	801747a <_printf_i+0x1f6>
 80173e4:	f04f 30ff 	mov.w	r0, #4294967295
 80173e8:	b004      	add	sp, #16
 80173ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173ee:	6823      	ldr	r3, [r4, #0]
 80173f0:	f043 0320 	orr.w	r3, r3, #32
 80173f4:	6023      	str	r3, [r4, #0]
 80173f6:	4833      	ldr	r0, [pc, #204]	; (80174c4 <_printf_i+0x240>)
 80173f8:	2778      	movs	r7, #120	; 0x78
 80173fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80173fe:	6823      	ldr	r3, [r4, #0]
 8017400:	6829      	ldr	r1, [r5, #0]
 8017402:	061f      	lsls	r7, r3, #24
 8017404:	f851 6b04 	ldr.w	r6, [r1], #4
 8017408:	d402      	bmi.n	8017410 <_printf_i+0x18c>
 801740a:	065f      	lsls	r7, r3, #25
 801740c:	bf48      	it	mi
 801740e:	b2b6      	uxthmi	r6, r6
 8017410:	07df      	lsls	r7, r3, #31
 8017412:	bf48      	it	mi
 8017414:	f043 0320 	orrmi.w	r3, r3, #32
 8017418:	6029      	str	r1, [r5, #0]
 801741a:	bf48      	it	mi
 801741c:	6023      	strmi	r3, [r4, #0]
 801741e:	b91e      	cbnz	r6, 8017428 <_printf_i+0x1a4>
 8017420:	6823      	ldr	r3, [r4, #0]
 8017422:	f023 0320 	bic.w	r3, r3, #32
 8017426:	6023      	str	r3, [r4, #0]
 8017428:	2310      	movs	r3, #16
 801742a:	e7a7      	b.n	801737c <_printf_i+0xf8>
 801742c:	4824      	ldr	r0, [pc, #144]	; (80174c0 <_printf_i+0x23c>)
 801742e:	e7e4      	b.n	80173fa <_printf_i+0x176>
 8017430:	4615      	mov	r5, r2
 8017432:	e7bd      	b.n	80173b0 <_printf_i+0x12c>
 8017434:	682b      	ldr	r3, [r5, #0]
 8017436:	6826      	ldr	r6, [r4, #0]
 8017438:	6961      	ldr	r1, [r4, #20]
 801743a:	1d18      	adds	r0, r3, #4
 801743c:	6028      	str	r0, [r5, #0]
 801743e:	0635      	lsls	r5, r6, #24
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	d501      	bpl.n	8017448 <_printf_i+0x1c4>
 8017444:	6019      	str	r1, [r3, #0]
 8017446:	e002      	b.n	801744e <_printf_i+0x1ca>
 8017448:	0670      	lsls	r0, r6, #25
 801744a:	d5fb      	bpl.n	8017444 <_printf_i+0x1c0>
 801744c:	8019      	strh	r1, [r3, #0]
 801744e:	2300      	movs	r3, #0
 8017450:	6123      	str	r3, [r4, #16]
 8017452:	4615      	mov	r5, r2
 8017454:	e7bc      	b.n	80173d0 <_printf_i+0x14c>
 8017456:	682b      	ldr	r3, [r5, #0]
 8017458:	1d1a      	adds	r2, r3, #4
 801745a:	602a      	str	r2, [r5, #0]
 801745c:	681d      	ldr	r5, [r3, #0]
 801745e:	6862      	ldr	r2, [r4, #4]
 8017460:	2100      	movs	r1, #0
 8017462:	4628      	mov	r0, r5
 8017464:	f7e8 feb4 	bl	80001d0 <memchr>
 8017468:	b108      	cbz	r0, 801746e <_printf_i+0x1ea>
 801746a:	1b40      	subs	r0, r0, r5
 801746c:	6060      	str	r0, [r4, #4]
 801746e:	6863      	ldr	r3, [r4, #4]
 8017470:	6123      	str	r3, [r4, #16]
 8017472:	2300      	movs	r3, #0
 8017474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017478:	e7aa      	b.n	80173d0 <_printf_i+0x14c>
 801747a:	6923      	ldr	r3, [r4, #16]
 801747c:	462a      	mov	r2, r5
 801747e:	4649      	mov	r1, r9
 8017480:	4640      	mov	r0, r8
 8017482:	47d0      	blx	sl
 8017484:	3001      	adds	r0, #1
 8017486:	d0ad      	beq.n	80173e4 <_printf_i+0x160>
 8017488:	6823      	ldr	r3, [r4, #0]
 801748a:	079b      	lsls	r3, r3, #30
 801748c:	d413      	bmi.n	80174b6 <_printf_i+0x232>
 801748e:	68e0      	ldr	r0, [r4, #12]
 8017490:	9b03      	ldr	r3, [sp, #12]
 8017492:	4298      	cmp	r0, r3
 8017494:	bfb8      	it	lt
 8017496:	4618      	movlt	r0, r3
 8017498:	e7a6      	b.n	80173e8 <_printf_i+0x164>
 801749a:	2301      	movs	r3, #1
 801749c:	4632      	mov	r2, r6
 801749e:	4649      	mov	r1, r9
 80174a0:	4640      	mov	r0, r8
 80174a2:	47d0      	blx	sl
 80174a4:	3001      	adds	r0, #1
 80174a6:	d09d      	beq.n	80173e4 <_printf_i+0x160>
 80174a8:	3501      	adds	r5, #1
 80174aa:	68e3      	ldr	r3, [r4, #12]
 80174ac:	9903      	ldr	r1, [sp, #12]
 80174ae:	1a5b      	subs	r3, r3, r1
 80174b0:	42ab      	cmp	r3, r5
 80174b2:	dcf2      	bgt.n	801749a <_printf_i+0x216>
 80174b4:	e7eb      	b.n	801748e <_printf_i+0x20a>
 80174b6:	2500      	movs	r5, #0
 80174b8:	f104 0619 	add.w	r6, r4, #25
 80174bc:	e7f5      	b.n	80174aa <_printf_i+0x226>
 80174be:	bf00      	nop
 80174c0:	0801ed93 	.word	0x0801ed93
 80174c4:	0801eda4 	.word	0x0801eda4

080174c8 <_scanf_float>:
 80174c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174cc:	b087      	sub	sp, #28
 80174ce:	4617      	mov	r7, r2
 80174d0:	9303      	str	r3, [sp, #12]
 80174d2:	688b      	ldr	r3, [r1, #8]
 80174d4:	1e5a      	subs	r2, r3, #1
 80174d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80174da:	bf83      	ittte	hi
 80174dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80174e0:	195b      	addhi	r3, r3, r5
 80174e2:	9302      	strhi	r3, [sp, #8]
 80174e4:	2300      	movls	r3, #0
 80174e6:	bf86      	itte	hi
 80174e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80174ec:	608b      	strhi	r3, [r1, #8]
 80174ee:	9302      	strls	r3, [sp, #8]
 80174f0:	680b      	ldr	r3, [r1, #0]
 80174f2:	468b      	mov	fp, r1
 80174f4:	2500      	movs	r5, #0
 80174f6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80174fa:	f84b 3b1c 	str.w	r3, [fp], #28
 80174fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017502:	4680      	mov	r8, r0
 8017504:	460c      	mov	r4, r1
 8017506:	465e      	mov	r6, fp
 8017508:	46aa      	mov	sl, r5
 801750a:	46a9      	mov	r9, r5
 801750c:	9501      	str	r5, [sp, #4]
 801750e:	68a2      	ldr	r2, [r4, #8]
 8017510:	b152      	cbz	r2, 8017528 <_scanf_float+0x60>
 8017512:	683b      	ldr	r3, [r7, #0]
 8017514:	781b      	ldrb	r3, [r3, #0]
 8017516:	2b4e      	cmp	r3, #78	; 0x4e
 8017518:	d864      	bhi.n	80175e4 <_scanf_float+0x11c>
 801751a:	2b40      	cmp	r3, #64	; 0x40
 801751c:	d83c      	bhi.n	8017598 <_scanf_float+0xd0>
 801751e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8017522:	b2c8      	uxtb	r0, r1
 8017524:	280e      	cmp	r0, #14
 8017526:	d93a      	bls.n	801759e <_scanf_float+0xd6>
 8017528:	f1b9 0f00 	cmp.w	r9, #0
 801752c:	d003      	beq.n	8017536 <_scanf_float+0x6e>
 801752e:	6823      	ldr	r3, [r4, #0]
 8017530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017534:	6023      	str	r3, [r4, #0]
 8017536:	f10a 3aff 	add.w	sl, sl, #4294967295
 801753a:	f1ba 0f01 	cmp.w	sl, #1
 801753e:	f200 8113 	bhi.w	8017768 <_scanf_float+0x2a0>
 8017542:	455e      	cmp	r6, fp
 8017544:	f200 8105 	bhi.w	8017752 <_scanf_float+0x28a>
 8017548:	2501      	movs	r5, #1
 801754a:	4628      	mov	r0, r5
 801754c:	b007      	add	sp, #28
 801754e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017552:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8017556:	2a0d      	cmp	r2, #13
 8017558:	d8e6      	bhi.n	8017528 <_scanf_float+0x60>
 801755a:	a101      	add	r1, pc, #4	; (adr r1, 8017560 <_scanf_float+0x98>)
 801755c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017560:	0801769f 	.word	0x0801769f
 8017564:	08017529 	.word	0x08017529
 8017568:	08017529 	.word	0x08017529
 801756c:	08017529 	.word	0x08017529
 8017570:	080176ff 	.word	0x080176ff
 8017574:	080176d7 	.word	0x080176d7
 8017578:	08017529 	.word	0x08017529
 801757c:	08017529 	.word	0x08017529
 8017580:	080176ad 	.word	0x080176ad
 8017584:	08017529 	.word	0x08017529
 8017588:	08017529 	.word	0x08017529
 801758c:	08017529 	.word	0x08017529
 8017590:	08017529 	.word	0x08017529
 8017594:	08017665 	.word	0x08017665
 8017598:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801759c:	e7db      	b.n	8017556 <_scanf_float+0x8e>
 801759e:	290e      	cmp	r1, #14
 80175a0:	d8c2      	bhi.n	8017528 <_scanf_float+0x60>
 80175a2:	a001      	add	r0, pc, #4	; (adr r0, 80175a8 <_scanf_float+0xe0>)
 80175a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80175a8:	08017657 	.word	0x08017657
 80175ac:	08017529 	.word	0x08017529
 80175b0:	08017657 	.word	0x08017657
 80175b4:	080176eb 	.word	0x080176eb
 80175b8:	08017529 	.word	0x08017529
 80175bc:	08017605 	.word	0x08017605
 80175c0:	08017641 	.word	0x08017641
 80175c4:	08017641 	.word	0x08017641
 80175c8:	08017641 	.word	0x08017641
 80175cc:	08017641 	.word	0x08017641
 80175d0:	08017641 	.word	0x08017641
 80175d4:	08017641 	.word	0x08017641
 80175d8:	08017641 	.word	0x08017641
 80175dc:	08017641 	.word	0x08017641
 80175e0:	08017641 	.word	0x08017641
 80175e4:	2b6e      	cmp	r3, #110	; 0x6e
 80175e6:	d809      	bhi.n	80175fc <_scanf_float+0x134>
 80175e8:	2b60      	cmp	r3, #96	; 0x60
 80175ea:	d8b2      	bhi.n	8017552 <_scanf_float+0x8a>
 80175ec:	2b54      	cmp	r3, #84	; 0x54
 80175ee:	d077      	beq.n	80176e0 <_scanf_float+0x218>
 80175f0:	2b59      	cmp	r3, #89	; 0x59
 80175f2:	d199      	bne.n	8017528 <_scanf_float+0x60>
 80175f4:	2d07      	cmp	r5, #7
 80175f6:	d197      	bne.n	8017528 <_scanf_float+0x60>
 80175f8:	2508      	movs	r5, #8
 80175fa:	e029      	b.n	8017650 <_scanf_float+0x188>
 80175fc:	2b74      	cmp	r3, #116	; 0x74
 80175fe:	d06f      	beq.n	80176e0 <_scanf_float+0x218>
 8017600:	2b79      	cmp	r3, #121	; 0x79
 8017602:	e7f6      	b.n	80175f2 <_scanf_float+0x12a>
 8017604:	6821      	ldr	r1, [r4, #0]
 8017606:	05c8      	lsls	r0, r1, #23
 8017608:	d51a      	bpl.n	8017640 <_scanf_float+0x178>
 801760a:	9b02      	ldr	r3, [sp, #8]
 801760c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017610:	6021      	str	r1, [r4, #0]
 8017612:	f109 0901 	add.w	r9, r9, #1
 8017616:	b11b      	cbz	r3, 8017620 <_scanf_float+0x158>
 8017618:	3b01      	subs	r3, #1
 801761a:	3201      	adds	r2, #1
 801761c:	9302      	str	r3, [sp, #8]
 801761e:	60a2      	str	r2, [r4, #8]
 8017620:	68a3      	ldr	r3, [r4, #8]
 8017622:	3b01      	subs	r3, #1
 8017624:	60a3      	str	r3, [r4, #8]
 8017626:	6923      	ldr	r3, [r4, #16]
 8017628:	3301      	adds	r3, #1
 801762a:	6123      	str	r3, [r4, #16]
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	3b01      	subs	r3, #1
 8017630:	2b00      	cmp	r3, #0
 8017632:	607b      	str	r3, [r7, #4]
 8017634:	f340 8084 	ble.w	8017740 <_scanf_float+0x278>
 8017638:	683b      	ldr	r3, [r7, #0]
 801763a:	3301      	adds	r3, #1
 801763c:	603b      	str	r3, [r7, #0]
 801763e:	e766      	b.n	801750e <_scanf_float+0x46>
 8017640:	eb1a 0f05 	cmn.w	sl, r5
 8017644:	f47f af70 	bne.w	8017528 <_scanf_float+0x60>
 8017648:	6822      	ldr	r2, [r4, #0]
 801764a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801764e:	6022      	str	r2, [r4, #0]
 8017650:	f806 3b01 	strb.w	r3, [r6], #1
 8017654:	e7e4      	b.n	8017620 <_scanf_float+0x158>
 8017656:	6822      	ldr	r2, [r4, #0]
 8017658:	0610      	lsls	r0, r2, #24
 801765a:	f57f af65 	bpl.w	8017528 <_scanf_float+0x60>
 801765e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017662:	e7f4      	b.n	801764e <_scanf_float+0x186>
 8017664:	f1ba 0f00 	cmp.w	sl, #0
 8017668:	d10e      	bne.n	8017688 <_scanf_float+0x1c0>
 801766a:	f1b9 0f00 	cmp.w	r9, #0
 801766e:	d10e      	bne.n	801768e <_scanf_float+0x1c6>
 8017670:	6822      	ldr	r2, [r4, #0]
 8017672:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017676:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801767a:	d108      	bne.n	801768e <_scanf_float+0x1c6>
 801767c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017680:	6022      	str	r2, [r4, #0]
 8017682:	f04f 0a01 	mov.w	sl, #1
 8017686:	e7e3      	b.n	8017650 <_scanf_float+0x188>
 8017688:	f1ba 0f02 	cmp.w	sl, #2
 801768c:	d055      	beq.n	801773a <_scanf_float+0x272>
 801768e:	2d01      	cmp	r5, #1
 8017690:	d002      	beq.n	8017698 <_scanf_float+0x1d0>
 8017692:	2d04      	cmp	r5, #4
 8017694:	f47f af48 	bne.w	8017528 <_scanf_float+0x60>
 8017698:	3501      	adds	r5, #1
 801769a:	b2ed      	uxtb	r5, r5
 801769c:	e7d8      	b.n	8017650 <_scanf_float+0x188>
 801769e:	f1ba 0f01 	cmp.w	sl, #1
 80176a2:	f47f af41 	bne.w	8017528 <_scanf_float+0x60>
 80176a6:	f04f 0a02 	mov.w	sl, #2
 80176aa:	e7d1      	b.n	8017650 <_scanf_float+0x188>
 80176ac:	b97d      	cbnz	r5, 80176ce <_scanf_float+0x206>
 80176ae:	f1b9 0f00 	cmp.w	r9, #0
 80176b2:	f47f af3c 	bne.w	801752e <_scanf_float+0x66>
 80176b6:	6822      	ldr	r2, [r4, #0]
 80176b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80176bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80176c0:	f47f af39 	bne.w	8017536 <_scanf_float+0x6e>
 80176c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80176c8:	6022      	str	r2, [r4, #0]
 80176ca:	2501      	movs	r5, #1
 80176cc:	e7c0      	b.n	8017650 <_scanf_float+0x188>
 80176ce:	2d03      	cmp	r5, #3
 80176d0:	d0e2      	beq.n	8017698 <_scanf_float+0x1d0>
 80176d2:	2d05      	cmp	r5, #5
 80176d4:	e7de      	b.n	8017694 <_scanf_float+0x1cc>
 80176d6:	2d02      	cmp	r5, #2
 80176d8:	f47f af26 	bne.w	8017528 <_scanf_float+0x60>
 80176dc:	2503      	movs	r5, #3
 80176de:	e7b7      	b.n	8017650 <_scanf_float+0x188>
 80176e0:	2d06      	cmp	r5, #6
 80176e2:	f47f af21 	bne.w	8017528 <_scanf_float+0x60>
 80176e6:	2507      	movs	r5, #7
 80176e8:	e7b2      	b.n	8017650 <_scanf_float+0x188>
 80176ea:	6822      	ldr	r2, [r4, #0]
 80176ec:	0591      	lsls	r1, r2, #22
 80176ee:	f57f af1b 	bpl.w	8017528 <_scanf_float+0x60>
 80176f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80176f6:	6022      	str	r2, [r4, #0]
 80176f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80176fc:	e7a8      	b.n	8017650 <_scanf_float+0x188>
 80176fe:	6822      	ldr	r2, [r4, #0]
 8017700:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8017704:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8017708:	d006      	beq.n	8017718 <_scanf_float+0x250>
 801770a:	0550      	lsls	r0, r2, #21
 801770c:	f57f af0c 	bpl.w	8017528 <_scanf_float+0x60>
 8017710:	f1b9 0f00 	cmp.w	r9, #0
 8017714:	f43f af0f 	beq.w	8017536 <_scanf_float+0x6e>
 8017718:	0591      	lsls	r1, r2, #22
 801771a:	bf58      	it	pl
 801771c:	9901      	ldrpl	r1, [sp, #4]
 801771e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017722:	bf58      	it	pl
 8017724:	eba9 0101 	subpl.w	r1, r9, r1
 8017728:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801772c:	bf58      	it	pl
 801772e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8017732:	6022      	str	r2, [r4, #0]
 8017734:	f04f 0900 	mov.w	r9, #0
 8017738:	e78a      	b.n	8017650 <_scanf_float+0x188>
 801773a:	f04f 0a03 	mov.w	sl, #3
 801773e:	e787      	b.n	8017650 <_scanf_float+0x188>
 8017740:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017744:	4639      	mov	r1, r7
 8017746:	4640      	mov	r0, r8
 8017748:	4798      	blx	r3
 801774a:	2800      	cmp	r0, #0
 801774c:	f43f aedf 	beq.w	801750e <_scanf_float+0x46>
 8017750:	e6ea      	b.n	8017528 <_scanf_float+0x60>
 8017752:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017756:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801775a:	463a      	mov	r2, r7
 801775c:	4640      	mov	r0, r8
 801775e:	4798      	blx	r3
 8017760:	6923      	ldr	r3, [r4, #16]
 8017762:	3b01      	subs	r3, #1
 8017764:	6123      	str	r3, [r4, #16]
 8017766:	e6ec      	b.n	8017542 <_scanf_float+0x7a>
 8017768:	1e6b      	subs	r3, r5, #1
 801776a:	2b06      	cmp	r3, #6
 801776c:	d825      	bhi.n	80177ba <_scanf_float+0x2f2>
 801776e:	2d02      	cmp	r5, #2
 8017770:	d836      	bhi.n	80177e0 <_scanf_float+0x318>
 8017772:	455e      	cmp	r6, fp
 8017774:	f67f aee8 	bls.w	8017548 <_scanf_float+0x80>
 8017778:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801777c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017780:	463a      	mov	r2, r7
 8017782:	4640      	mov	r0, r8
 8017784:	4798      	blx	r3
 8017786:	6923      	ldr	r3, [r4, #16]
 8017788:	3b01      	subs	r3, #1
 801778a:	6123      	str	r3, [r4, #16]
 801778c:	e7f1      	b.n	8017772 <_scanf_float+0x2aa>
 801778e:	9802      	ldr	r0, [sp, #8]
 8017790:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017794:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8017798:	9002      	str	r0, [sp, #8]
 801779a:	463a      	mov	r2, r7
 801779c:	4640      	mov	r0, r8
 801779e:	4798      	blx	r3
 80177a0:	6923      	ldr	r3, [r4, #16]
 80177a2:	3b01      	subs	r3, #1
 80177a4:	6123      	str	r3, [r4, #16]
 80177a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80177aa:	fa5f fa8a 	uxtb.w	sl, sl
 80177ae:	f1ba 0f02 	cmp.w	sl, #2
 80177b2:	d1ec      	bne.n	801778e <_scanf_float+0x2c6>
 80177b4:	3d03      	subs	r5, #3
 80177b6:	b2ed      	uxtb	r5, r5
 80177b8:	1b76      	subs	r6, r6, r5
 80177ba:	6823      	ldr	r3, [r4, #0]
 80177bc:	05da      	lsls	r2, r3, #23
 80177be:	d52f      	bpl.n	8017820 <_scanf_float+0x358>
 80177c0:	055b      	lsls	r3, r3, #21
 80177c2:	d510      	bpl.n	80177e6 <_scanf_float+0x31e>
 80177c4:	455e      	cmp	r6, fp
 80177c6:	f67f aebf 	bls.w	8017548 <_scanf_float+0x80>
 80177ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80177ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80177d2:	463a      	mov	r2, r7
 80177d4:	4640      	mov	r0, r8
 80177d6:	4798      	blx	r3
 80177d8:	6923      	ldr	r3, [r4, #16]
 80177da:	3b01      	subs	r3, #1
 80177dc:	6123      	str	r3, [r4, #16]
 80177de:	e7f1      	b.n	80177c4 <_scanf_float+0x2fc>
 80177e0:	46aa      	mov	sl, r5
 80177e2:	9602      	str	r6, [sp, #8]
 80177e4:	e7df      	b.n	80177a6 <_scanf_float+0x2de>
 80177e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80177ea:	6923      	ldr	r3, [r4, #16]
 80177ec:	2965      	cmp	r1, #101	; 0x65
 80177ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80177f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80177f6:	6123      	str	r3, [r4, #16]
 80177f8:	d00c      	beq.n	8017814 <_scanf_float+0x34c>
 80177fa:	2945      	cmp	r1, #69	; 0x45
 80177fc:	d00a      	beq.n	8017814 <_scanf_float+0x34c>
 80177fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017802:	463a      	mov	r2, r7
 8017804:	4640      	mov	r0, r8
 8017806:	4798      	blx	r3
 8017808:	6923      	ldr	r3, [r4, #16]
 801780a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801780e:	3b01      	subs	r3, #1
 8017810:	1eb5      	subs	r5, r6, #2
 8017812:	6123      	str	r3, [r4, #16]
 8017814:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017818:	463a      	mov	r2, r7
 801781a:	4640      	mov	r0, r8
 801781c:	4798      	blx	r3
 801781e:	462e      	mov	r6, r5
 8017820:	6825      	ldr	r5, [r4, #0]
 8017822:	f015 0510 	ands.w	r5, r5, #16
 8017826:	d158      	bne.n	80178da <_scanf_float+0x412>
 8017828:	7035      	strb	r5, [r6, #0]
 801782a:	6823      	ldr	r3, [r4, #0]
 801782c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017834:	d11c      	bne.n	8017870 <_scanf_float+0x3a8>
 8017836:	9b01      	ldr	r3, [sp, #4]
 8017838:	454b      	cmp	r3, r9
 801783a:	eba3 0209 	sub.w	r2, r3, r9
 801783e:	d124      	bne.n	801788a <_scanf_float+0x3c2>
 8017840:	2200      	movs	r2, #0
 8017842:	4659      	mov	r1, fp
 8017844:	4640      	mov	r0, r8
 8017846:	f7ff f8df 	bl	8016a08 <_strtod_r>
 801784a:	9b03      	ldr	r3, [sp, #12]
 801784c:	6821      	ldr	r1, [r4, #0]
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	f011 0f02 	tst.w	r1, #2
 8017854:	ec57 6b10 	vmov	r6, r7, d0
 8017858:	f103 0204 	add.w	r2, r3, #4
 801785c:	d020      	beq.n	80178a0 <_scanf_float+0x3d8>
 801785e:	9903      	ldr	r1, [sp, #12]
 8017860:	600a      	str	r2, [r1, #0]
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	e9c3 6700 	strd	r6, r7, [r3]
 8017868:	68e3      	ldr	r3, [r4, #12]
 801786a:	3301      	adds	r3, #1
 801786c:	60e3      	str	r3, [r4, #12]
 801786e:	e66c      	b.n	801754a <_scanf_float+0x82>
 8017870:	9b04      	ldr	r3, [sp, #16]
 8017872:	2b00      	cmp	r3, #0
 8017874:	d0e4      	beq.n	8017840 <_scanf_float+0x378>
 8017876:	9905      	ldr	r1, [sp, #20]
 8017878:	230a      	movs	r3, #10
 801787a:	462a      	mov	r2, r5
 801787c:	3101      	adds	r1, #1
 801787e:	4640      	mov	r0, r8
 8017880:	f7ff f9b0 	bl	8016be4 <_strtol_r>
 8017884:	9b04      	ldr	r3, [sp, #16]
 8017886:	9e05      	ldr	r6, [sp, #20]
 8017888:	1ac2      	subs	r2, r0, r3
 801788a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801788e:	429e      	cmp	r6, r3
 8017890:	bf28      	it	cs
 8017892:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8017896:	4912      	ldr	r1, [pc, #72]	; (80178e0 <_scanf_float+0x418>)
 8017898:	4630      	mov	r0, r6
 801789a:	f000 f91b 	bl	8017ad4 <siprintf>
 801789e:	e7cf      	b.n	8017840 <_scanf_float+0x378>
 80178a0:	f011 0f04 	tst.w	r1, #4
 80178a4:	9903      	ldr	r1, [sp, #12]
 80178a6:	600a      	str	r2, [r1, #0]
 80178a8:	d1db      	bne.n	8017862 <_scanf_float+0x39a>
 80178aa:	f8d3 8000 	ldr.w	r8, [r3]
 80178ae:	ee10 2a10 	vmov	r2, s0
 80178b2:	ee10 0a10 	vmov	r0, s0
 80178b6:	463b      	mov	r3, r7
 80178b8:	4639      	mov	r1, r7
 80178ba:	f7e9 f937 	bl	8000b2c <__aeabi_dcmpun>
 80178be:	b128      	cbz	r0, 80178cc <_scanf_float+0x404>
 80178c0:	4808      	ldr	r0, [pc, #32]	; (80178e4 <_scanf_float+0x41c>)
 80178c2:	f000 fa9d 	bl	8017e00 <nanf>
 80178c6:	ed88 0a00 	vstr	s0, [r8]
 80178ca:	e7cd      	b.n	8017868 <_scanf_float+0x3a0>
 80178cc:	4630      	mov	r0, r6
 80178ce:	4639      	mov	r1, r7
 80178d0:	f7e9 f98a 	bl	8000be8 <__aeabi_d2f>
 80178d4:	f8c8 0000 	str.w	r0, [r8]
 80178d8:	e7c6      	b.n	8017868 <_scanf_float+0x3a0>
 80178da:	2500      	movs	r5, #0
 80178dc:	e635      	b.n	801754a <_scanf_float+0x82>
 80178de:	bf00      	nop
 80178e0:	0801edb5 	.word	0x0801edb5
 80178e4:	0801ee6e 	.word	0x0801ee6e

080178e8 <std>:
 80178e8:	2300      	movs	r3, #0
 80178ea:	b510      	push	{r4, lr}
 80178ec:	4604      	mov	r4, r0
 80178ee:	e9c0 3300 	strd	r3, r3, [r0]
 80178f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80178f6:	6083      	str	r3, [r0, #8]
 80178f8:	8181      	strh	r1, [r0, #12]
 80178fa:	6643      	str	r3, [r0, #100]	; 0x64
 80178fc:	81c2      	strh	r2, [r0, #14]
 80178fe:	6183      	str	r3, [r0, #24]
 8017900:	4619      	mov	r1, r3
 8017902:	2208      	movs	r2, #8
 8017904:	305c      	adds	r0, #92	; 0x5c
 8017906:	f000 f948 	bl	8017b9a <memset>
 801790a:	4b0d      	ldr	r3, [pc, #52]	; (8017940 <std+0x58>)
 801790c:	6263      	str	r3, [r4, #36]	; 0x24
 801790e:	4b0d      	ldr	r3, [pc, #52]	; (8017944 <std+0x5c>)
 8017910:	62a3      	str	r3, [r4, #40]	; 0x28
 8017912:	4b0d      	ldr	r3, [pc, #52]	; (8017948 <std+0x60>)
 8017914:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017916:	4b0d      	ldr	r3, [pc, #52]	; (801794c <std+0x64>)
 8017918:	6323      	str	r3, [r4, #48]	; 0x30
 801791a:	4b0d      	ldr	r3, [pc, #52]	; (8017950 <std+0x68>)
 801791c:	6224      	str	r4, [r4, #32]
 801791e:	429c      	cmp	r4, r3
 8017920:	d006      	beq.n	8017930 <std+0x48>
 8017922:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017926:	4294      	cmp	r4, r2
 8017928:	d002      	beq.n	8017930 <std+0x48>
 801792a:	33d0      	adds	r3, #208	; 0xd0
 801792c:	429c      	cmp	r4, r3
 801792e:	d105      	bne.n	801793c <std+0x54>
 8017930:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017938:	f000 ba40 	b.w	8017dbc <__retarget_lock_init_recursive>
 801793c:	bd10      	pop	{r4, pc}
 801793e:	bf00      	nop
 8017940:	08017b15 	.word	0x08017b15
 8017944:	08017b37 	.word	0x08017b37
 8017948:	08017b6f 	.word	0x08017b6f
 801794c:	08017b93 	.word	0x08017b93
 8017950:	200023e0 	.word	0x200023e0

08017954 <stdio_exit_handler>:
 8017954:	4a02      	ldr	r2, [pc, #8]	; (8017960 <stdio_exit_handler+0xc>)
 8017956:	4903      	ldr	r1, [pc, #12]	; (8017964 <stdio_exit_handler+0x10>)
 8017958:	4803      	ldr	r0, [pc, #12]	; (8017968 <stdio_exit_handler+0x14>)
 801795a:	f000 b869 	b.w	8017a30 <_fwalk_sglue>
 801795e:	bf00      	nop
 8017960:	20000144 	.word	0x20000144
 8017964:	08019fd9 	.word	0x08019fd9
 8017968:	200002bc 	.word	0x200002bc

0801796c <cleanup_stdio>:
 801796c:	6841      	ldr	r1, [r0, #4]
 801796e:	4b0c      	ldr	r3, [pc, #48]	; (80179a0 <cleanup_stdio+0x34>)
 8017970:	4299      	cmp	r1, r3
 8017972:	b510      	push	{r4, lr}
 8017974:	4604      	mov	r4, r0
 8017976:	d001      	beq.n	801797c <cleanup_stdio+0x10>
 8017978:	f002 fb2e 	bl	8019fd8 <_fflush_r>
 801797c:	68a1      	ldr	r1, [r4, #8]
 801797e:	4b09      	ldr	r3, [pc, #36]	; (80179a4 <cleanup_stdio+0x38>)
 8017980:	4299      	cmp	r1, r3
 8017982:	d002      	beq.n	801798a <cleanup_stdio+0x1e>
 8017984:	4620      	mov	r0, r4
 8017986:	f002 fb27 	bl	8019fd8 <_fflush_r>
 801798a:	68e1      	ldr	r1, [r4, #12]
 801798c:	4b06      	ldr	r3, [pc, #24]	; (80179a8 <cleanup_stdio+0x3c>)
 801798e:	4299      	cmp	r1, r3
 8017990:	d004      	beq.n	801799c <cleanup_stdio+0x30>
 8017992:	4620      	mov	r0, r4
 8017994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017998:	f002 bb1e 	b.w	8019fd8 <_fflush_r>
 801799c:	bd10      	pop	{r4, pc}
 801799e:	bf00      	nop
 80179a0:	200023e0 	.word	0x200023e0
 80179a4:	20002448 	.word	0x20002448
 80179a8:	200024b0 	.word	0x200024b0

080179ac <global_stdio_init.part.0>:
 80179ac:	b510      	push	{r4, lr}
 80179ae:	4b0b      	ldr	r3, [pc, #44]	; (80179dc <global_stdio_init.part.0+0x30>)
 80179b0:	4c0b      	ldr	r4, [pc, #44]	; (80179e0 <global_stdio_init.part.0+0x34>)
 80179b2:	4a0c      	ldr	r2, [pc, #48]	; (80179e4 <global_stdio_init.part.0+0x38>)
 80179b4:	601a      	str	r2, [r3, #0]
 80179b6:	4620      	mov	r0, r4
 80179b8:	2200      	movs	r2, #0
 80179ba:	2104      	movs	r1, #4
 80179bc:	f7ff ff94 	bl	80178e8 <std>
 80179c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80179c4:	2201      	movs	r2, #1
 80179c6:	2109      	movs	r1, #9
 80179c8:	f7ff ff8e 	bl	80178e8 <std>
 80179cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80179d0:	2202      	movs	r2, #2
 80179d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179d6:	2112      	movs	r1, #18
 80179d8:	f7ff bf86 	b.w	80178e8 <std>
 80179dc:	20002518 	.word	0x20002518
 80179e0:	200023e0 	.word	0x200023e0
 80179e4:	08017955 	.word	0x08017955

080179e8 <__sfp_lock_acquire>:
 80179e8:	4801      	ldr	r0, [pc, #4]	; (80179f0 <__sfp_lock_acquire+0x8>)
 80179ea:	f000 b9e8 	b.w	8017dbe <__retarget_lock_acquire_recursive>
 80179ee:	bf00      	nop
 80179f0:	20002521 	.word	0x20002521

080179f4 <__sfp_lock_release>:
 80179f4:	4801      	ldr	r0, [pc, #4]	; (80179fc <__sfp_lock_release+0x8>)
 80179f6:	f000 b9e3 	b.w	8017dc0 <__retarget_lock_release_recursive>
 80179fa:	bf00      	nop
 80179fc:	20002521 	.word	0x20002521

08017a00 <__sinit>:
 8017a00:	b510      	push	{r4, lr}
 8017a02:	4604      	mov	r4, r0
 8017a04:	f7ff fff0 	bl	80179e8 <__sfp_lock_acquire>
 8017a08:	6a23      	ldr	r3, [r4, #32]
 8017a0a:	b11b      	cbz	r3, 8017a14 <__sinit+0x14>
 8017a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a10:	f7ff bff0 	b.w	80179f4 <__sfp_lock_release>
 8017a14:	4b04      	ldr	r3, [pc, #16]	; (8017a28 <__sinit+0x28>)
 8017a16:	6223      	str	r3, [r4, #32]
 8017a18:	4b04      	ldr	r3, [pc, #16]	; (8017a2c <__sinit+0x2c>)
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d1f5      	bne.n	8017a0c <__sinit+0xc>
 8017a20:	f7ff ffc4 	bl	80179ac <global_stdio_init.part.0>
 8017a24:	e7f2      	b.n	8017a0c <__sinit+0xc>
 8017a26:	bf00      	nop
 8017a28:	0801796d 	.word	0x0801796d
 8017a2c:	20002518 	.word	0x20002518

08017a30 <_fwalk_sglue>:
 8017a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a34:	4607      	mov	r7, r0
 8017a36:	4688      	mov	r8, r1
 8017a38:	4614      	mov	r4, r2
 8017a3a:	2600      	movs	r6, #0
 8017a3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017a40:	f1b9 0901 	subs.w	r9, r9, #1
 8017a44:	d505      	bpl.n	8017a52 <_fwalk_sglue+0x22>
 8017a46:	6824      	ldr	r4, [r4, #0]
 8017a48:	2c00      	cmp	r4, #0
 8017a4a:	d1f7      	bne.n	8017a3c <_fwalk_sglue+0xc>
 8017a4c:	4630      	mov	r0, r6
 8017a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a52:	89ab      	ldrh	r3, [r5, #12]
 8017a54:	2b01      	cmp	r3, #1
 8017a56:	d907      	bls.n	8017a68 <_fwalk_sglue+0x38>
 8017a58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017a5c:	3301      	adds	r3, #1
 8017a5e:	d003      	beq.n	8017a68 <_fwalk_sglue+0x38>
 8017a60:	4629      	mov	r1, r5
 8017a62:	4638      	mov	r0, r7
 8017a64:	47c0      	blx	r8
 8017a66:	4306      	orrs	r6, r0
 8017a68:	3568      	adds	r5, #104	; 0x68
 8017a6a:	e7e9      	b.n	8017a40 <_fwalk_sglue+0x10>

08017a6c <sniprintf>:
 8017a6c:	b40c      	push	{r2, r3}
 8017a6e:	b530      	push	{r4, r5, lr}
 8017a70:	4b17      	ldr	r3, [pc, #92]	; (8017ad0 <sniprintf+0x64>)
 8017a72:	1e0c      	subs	r4, r1, #0
 8017a74:	681d      	ldr	r5, [r3, #0]
 8017a76:	b09d      	sub	sp, #116	; 0x74
 8017a78:	da08      	bge.n	8017a8c <sniprintf+0x20>
 8017a7a:	238b      	movs	r3, #139	; 0x8b
 8017a7c:	602b      	str	r3, [r5, #0]
 8017a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8017a82:	b01d      	add	sp, #116	; 0x74
 8017a84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a88:	b002      	add	sp, #8
 8017a8a:	4770      	bx	lr
 8017a8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017a90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017a94:	bf14      	ite	ne
 8017a96:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017a9a:	4623      	moveq	r3, r4
 8017a9c:	9304      	str	r3, [sp, #16]
 8017a9e:	9307      	str	r3, [sp, #28]
 8017aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017aa4:	9002      	str	r0, [sp, #8]
 8017aa6:	9006      	str	r0, [sp, #24]
 8017aa8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017aac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017aae:	ab21      	add	r3, sp, #132	; 0x84
 8017ab0:	a902      	add	r1, sp, #8
 8017ab2:	4628      	mov	r0, r5
 8017ab4:	9301      	str	r3, [sp, #4]
 8017ab6:	f002 f90b 	bl	8019cd0 <_svfiprintf_r>
 8017aba:	1c43      	adds	r3, r0, #1
 8017abc:	bfbc      	itt	lt
 8017abe:	238b      	movlt	r3, #139	; 0x8b
 8017ac0:	602b      	strlt	r3, [r5, #0]
 8017ac2:	2c00      	cmp	r4, #0
 8017ac4:	d0dd      	beq.n	8017a82 <sniprintf+0x16>
 8017ac6:	9b02      	ldr	r3, [sp, #8]
 8017ac8:	2200      	movs	r2, #0
 8017aca:	701a      	strb	r2, [r3, #0]
 8017acc:	e7d9      	b.n	8017a82 <sniprintf+0x16>
 8017ace:	bf00      	nop
 8017ad0:	20000308 	.word	0x20000308

08017ad4 <siprintf>:
 8017ad4:	b40e      	push	{r1, r2, r3}
 8017ad6:	b500      	push	{lr}
 8017ad8:	b09c      	sub	sp, #112	; 0x70
 8017ada:	ab1d      	add	r3, sp, #116	; 0x74
 8017adc:	9002      	str	r0, [sp, #8]
 8017ade:	9006      	str	r0, [sp, #24]
 8017ae0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017ae4:	4809      	ldr	r0, [pc, #36]	; (8017b0c <siprintf+0x38>)
 8017ae6:	9107      	str	r1, [sp, #28]
 8017ae8:	9104      	str	r1, [sp, #16]
 8017aea:	4909      	ldr	r1, [pc, #36]	; (8017b10 <siprintf+0x3c>)
 8017aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8017af0:	9105      	str	r1, [sp, #20]
 8017af2:	6800      	ldr	r0, [r0, #0]
 8017af4:	9301      	str	r3, [sp, #4]
 8017af6:	a902      	add	r1, sp, #8
 8017af8:	f002 f8ea 	bl	8019cd0 <_svfiprintf_r>
 8017afc:	9b02      	ldr	r3, [sp, #8]
 8017afe:	2200      	movs	r2, #0
 8017b00:	701a      	strb	r2, [r3, #0]
 8017b02:	b01c      	add	sp, #112	; 0x70
 8017b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b08:	b003      	add	sp, #12
 8017b0a:	4770      	bx	lr
 8017b0c:	20000308 	.word	0x20000308
 8017b10:	ffff0208 	.word	0xffff0208

08017b14 <__sread>:
 8017b14:	b510      	push	{r4, lr}
 8017b16:	460c      	mov	r4, r1
 8017b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b1c:	f000 f8f0 	bl	8017d00 <_read_r>
 8017b20:	2800      	cmp	r0, #0
 8017b22:	bfab      	itete	ge
 8017b24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017b26:	89a3      	ldrhlt	r3, [r4, #12]
 8017b28:	181b      	addge	r3, r3, r0
 8017b2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017b2e:	bfac      	ite	ge
 8017b30:	6563      	strge	r3, [r4, #84]	; 0x54
 8017b32:	81a3      	strhlt	r3, [r4, #12]
 8017b34:	bd10      	pop	{r4, pc}

08017b36 <__swrite>:
 8017b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b3a:	461f      	mov	r7, r3
 8017b3c:	898b      	ldrh	r3, [r1, #12]
 8017b3e:	05db      	lsls	r3, r3, #23
 8017b40:	4605      	mov	r5, r0
 8017b42:	460c      	mov	r4, r1
 8017b44:	4616      	mov	r6, r2
 8017b46:	d505      	bpl.n	8017b54 <__swrite+0x1e>
 8017b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b4c:	2302      	movs	r3, #2
 8017b4e:	2200      	movs	r2, #0
 8017b50:	f000 f8c4 	bl	8017cdc <_lseek_r>
 8017b54:	89a3      	ldrh	r3, [r4, #12]
 8017b56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017b5e:	81a3      	strh	r3, [r4, #12]
 8017b60:	4632      	mov	r2, r6
 8017b62:	463b      	mov	r3, r7
 8017b64:	4628      	mov	r0, r5
 8017b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b6a:	f000 b8eb 	b.w	8017d44 <_write_r>

08017b6e <__sseek>:
 8017b6e:	b510      	push	{r4, lr}
 8017b70:	460c      	mov	r4, r1
 8017b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b76:	f000 f8b1 	bl	8017cdc <_lseek_r>
 8017b7a:	1c43      	adds	r3, r0, #1
 8017b7c:	89a3      	ldrh	r3, [r4, #12]
 8017b7e:	bf15      	itete	ne
 8017b80:	6560      	strne	r0, [r4, #84]	; 0x54
 8017b82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017b86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017b8a:	81a3      	strheq	r3, [r4, #12]
 8017b8c:	bf18      	it	ne
 8017b8e:	81a3      	strhne	r3, [r4, #12]
 8017b90:	bd10      	pop	{r4, pc}

08017b92 <__sclose>:
 8017b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b96:	f000 b891 	b.w	8017cbc <_close_r>

08017b9a <memset>:
 8017b9a:	4402      	add	r2, r0
 8017b9c:	4603      	mov	r3, r0
 8017b9e:	4293      	cmp	r3, r2
 8017ba0:	d100      	bne.n	8017ba4 <memset+0xa>
 8017ba2:	4770      	bx	lr
 8017ba4:	f803 1b01 	strb.w	r1, [r3], #1
 8017ba8:	e7f9      	b.n	8017b9e <memset+0x4>

08017baa <strncmp>:
 8017baa:	b510      	push	{r4, lr}
 8017bac:	b16a      	cbz	r2, 8017bca <strncmp+0x20>
 8017bae:	3901      	subs	r1, #1
 8017bb0:	1884      	adds	r4, r0, r2
 8017bb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017bb6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017bba:	429a      	cmp	r2, r3
 8017bbc:	d103      	bne.n	8017bc6 <strncmp+0x1c>
 8017bbe:	42a0      	cmp	r0, r4
 8017bc0:	d001      	beq.n	8017bc6 <strncmp+0x1c>
 8017bc2:	2a00      	cmp	r2, #0
 8017bc4:	d1f5      	bne.n	8017bb2 <strncmp+0x8>
 8017bc6:	1ad0      	subs	r0, r2, r3
 8017bc8:	bd10      	pop	{r4, pc}
 8017bca:	4610      	mov	r0, r2
 8017bcc:	e7fc      	b.n	8017bc8 <strncmp+0x1e>
	...

08017bd0 <strtok>:
 8017bd0:	4b16      	ldr	r3, [pc, #88]	; (8017c2c <strtok+0x5c>)
 8017bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017bd4:	681e      	ldr	r6, [r3, #0]
 8017bd6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8017bd8:	4605      	mov	r5, r0
 8017bda:	b9fc      	cbnz	r4, 8017c1c <strtok+0x4c>
 8017bdc:	2050      	movs	r0, #80	; 0x50
 8017bde:	9101      	str	r1, [sp, #4]
 8017be0:	f7fe f84a 	bl	8015c78 <malloc>
 8017be4:	9901      	ldr	r1, [sp, #4]
 8017be6:	6470      	str	r0, [r6, #68]	; 0x44
 8017be8:	4602      	mov	r2, r0
 8017bea:	b920      	cbnz	r0, 8017bf6 <strtok+0x26>
 8017bec:	4b10      	ldr	r3, [pc, #64]	; (8017c30 <strtok+0x60>)
 8017bee:	4811      	ldr	r0, [pc, #68]	; (8017c34 <strtok+0x64>)
 8017bf0:	215b      	movs	r1, #91	; 0x5b
 8017bf2:	f000 f90b 	bl	8017e0c <__assert_func>
 8017bf6:	e9c0 4400 	strd	r4, r4, [r0]
 8017bfa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8017bfe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8017c02:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8017c06:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8017c0a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8017c0e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8017c12:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8017c16:	6184      	str	r4, [r0, #24]
 8017c18:	7704      	strb	r4, [r0, #28]
 8017c1a:	6244      	str	r4, [r0, #36]	; 0x24
 8017c1c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8017c1e:	2301      	movs	r3, #1
 8017c20:	4628      	mov	r0, r5
 8017c22:	b002      	add	sp, #8
 8017c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c28:	f000 b806 	b.w	8017c38 <__strtok_r>
 8017c2c:	20000308 	.word	0x20000308
 8017c30:	0801edba 	.word	0x0801edba
 8017c34:	0801edd1 	.word	0x0801edd1

08017c38 <__strtok_r>:
 8017c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c3a:	b908      	cbnz	r0, 8017c40 <__strtok_r+0x8>
 8017c3c:	6810      	ldr	r0, [r2, #0]
 8017c3e:	b188      	cbz	r0, 8017c64 <__strtok_r+0x2c>
 8017c40:	4604      	mov	r4, r0
 8017c42:	4620      	mov	r0, r4
 8017c44:	f814 5b01 	ldrb.w	r5, [r4], #1
 8017c48:	460f      	mov	r7, r1
 8017c4a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8017c4e:	b91e      	cbnz	r6, 8017c58 <__strtok_r+0x20>
 8017c50:	b965      	cbnz	r5, 8017c6c <__strtok_r+0x34>
 8017c52:	6015      	str	r5, [r2, #0]
 8017c54:	4628      	mov	r0, r5
 8017c56:	e005      	b.n	8017c64 <__strtok_r+0x2c>
 8017c58:	42b5      	cmp	r5, r6
 8017c5a:	d1f6      	bne.n	8017c4a <__strtok_r+0x12>
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d1f0      	bne.n	8017c42 <__strtok_r+0xa>
 8017c60:	6014      	str	r4, [r2, #0]
 8017c62:	7003      	strb	r3, [r0, #0]
 8017c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c66:	461c      	mov	r4, r3
 8017c68:	e00c      	b.n	8017c84 <__strtok_r+0x4c>
 8017c6a:	b915      	cbnz	r5, 8017c72 <__strtok_r+0x3a>
 8017c6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017c70:	460e      	mov	r6, r1
 8017c72:	f816 5b01 	ldrb.w	r5, [r6], #1
 8017c76:	42ab      	cmp	r3, r5
 8017c78:	d1f7      	bne.n	8017c6a <__strtok_r+0x32>
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d0f3      	beq.n	8017c66 <__strtok_r+0x2e>
 8017c7e:	2300      	movs	r3, #0
 8017c80:	f804 3c01 	strb.w	r3, [r4, #-1]
 8017c84:	6014      	str	r4, [r2, #0]
 8017c86:	e7ed      	b.n	8017c64 <__strtok_r+0x2c>

08017c88 <strstr>:
 8017c88:	780a      	ldrb	r2, [r1, #0]
 8017c8a:	b570      	push	{r4, r5, r6, lr}
 8017c8c:	b96a      	cbnz	r2, 8017caa <strstr+0x22>
 8017c8e:	bd70      	pop	{r4, r5, r6, pc}
 8017c90:	429a      	cmp	r2, r3
 8017c92:	d109      	bne.n	8017ca8 <strstr+0x20>
 8017c94:	460c      	mov	r4, r1
 8017c96:	4605      	mov	r5, r0
 8017c98:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d0f6      	beq.n	8017c8e <strstr+0x6>
 8017ca0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017ca4:	429e      	cmp	r6, r3
 8017ca6:	d0f7      	beq.n	8017c98 <strstr+0x10>
 8017ca8:	3001      	adds	r0, #1
 8017caa:	7803      	ldrb	r3, [r0, #0]
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d1ef      	bne.n	8017c90 <strstr+0x8>
 8017cb0:	4618      	mov	r0, r3
 8017cb2:	e7ec      	b.n	8017c8e <strstr+0x6>

08017cb4 <_localeconv_r>:
 8017cb4:	4800      	ldr	r0, [pc, #0]	; (8017cb8 <_localeconv_r+0x4>)
 8017cb6:	4770      	bx	lr
 8017cb8:	20000240 	.word	0x20000240

08017cbc <_close_r>:
 8017cbc:	b538      	push	{r3, r4, r5, lr}
 8017cbe:	4d06      	ldr	r5, [pc, #24]	; (8017cd8 <_close_r+0x1c>)
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	4604      	mov	r4, r0
 8017cc4:	4608      	mov	r0, r1
 8017cc6:	602b      	str	r3, [r5, #0]
 8017cc8:	f7ee f80f 	bl	8005cea <_close>
 8017ccc:	1c43      	adds	r3, r0, #1
 8017cce:	d102      	bne.n	8017cd6 <_close_r+0x1a>
 8017cd0:	682b      	ldr	r3, [r5, #0]
 8017cd2:	b103      	cbz	r3, 8017cd6 <_close_r+0x1a>
 8017cd4:	6023      	str	r3, [r4, #0]
 8017cd6:	bd38      	pop	{r3, r4, r5, pc}
 8017cd8:	2000251c 	.word	0x2000251c

08017cdc <_lseek_r>:
 8017cdc:	b538      	push	{r3, r4, r5, lr}
 8017cde:	4d07      	ldr	r5, [pc, #28]	; (8017cfc <_lseek_r+0x20>)
 8017ce0:	4604      	mov	r4, r0
 8017ce2:	4608      	mov	r0, r1
 8017ce4:	4611      	mov	r1, r2
 8017ce6:	2200      	movs	r2, #0
 8017ce8:	602a      	str	r2, [r5, #0]
 8017cea:	461a      	mov	r2, r3
 8017cec:	f7ee f824 	bl	8005d38 <_lseek>
 8017cf0:	1c43      	adds	r3, r0, #1
 8017cf2:	d102      	bne.n	8017cfa <_lseek_r+0x1e>
 8017cf4:	682b      	ldr	r3, [r5, #0]
 8017cf6:	b103      	cbz	r3, 8017cfa <_lseek_r+0x1e>
 8017cf8:	6023      	str	r3, [r4, #0]
 8017cfa:	bd38      	pop	{r3, r4, r5, pc}
 8017cfc:	2000251c 	.word	0x2000251c

08017d00 <_read_r>:
 8017d00:	b538      	push	{r3, r4, r5, lr}
 8017d02:	4d07      	ldr	r5, [pc, #28]	; (8017d20 <_read_r+0x20>)
 8017d04:	4604      	mov	r4, r0
 8017d06:	4608      	mov	r0, r1
 8017d08:	4611      	mov	r1, r2
 8017d0a:	2200      	movs	r2, #0
 8017d0c:	602a      	str	r2, [r5, #0]
 8017d0e:	461a      	mov	r2, r3
 8017d10:	f7ed ffb2 	bl	8005c78 <_read>
 8017d14:	1c43      	adds	r3, r0, #1
 8017d16:	d102      	bne.n	8017d1e <_read_r+0x1e>
 8017d18:	682b      	ldr	r3, [r5, #0]
 8017d1a:	b103      	cbz	r3, 8017d1e <_read_r+0x1e>
 8017d1c:	6023      	str	r3, [r4, #0]
 8017d1e:	bd38      	pop	{r3, r4, r5, pc}
 8017d20:	2000251c 	.word	0x2000251c

08017d24 <_sbrk_r>:
 8017d24:	b538      	push	{r3, r4, r5, lr}
 8017d26:	4d06      	ldr	r5, [pc, #24]	; (8017d40 <_sbrk_r+0x1c>)
 8017d28:	2300      	movs	r3, #0
 8017d2a:	4604      	mov	r4, r0
 8017d2c:	4608      	mov	r0, r1
 8017d2e:	602b      	str	r3, [r5, #0]
 8017d30:	f7ee f810 	bl	8005d54 <_sbrk>
 8017d34:	1c43      	adds	r3, r0, #1
 8017d36:	d102      	bne.n	8017d3e <_sbrk_r+0x1a>
 8017d38:	682b      	ldr	r3, [r5, #0]
 8017d3a:	b103      	cbz	r3, 8017d3e <_sbrk_r+0x1a>
 8017d3c:	6023      	str	r3, [r4, #0]
 8017d3e:	bd38      	pop	{r3, r4, r5, pc}
 8017d40:	2000251c 	.word	0x2000251c

08017d44 <_write_r>:
 8017d44:	b538      	push	{r3, r4, r5, lr}
 8017d46:	4d07      	ldr	r5, [pc, #28]	; (8017d64 <_write_r+0x20>)
 8017d48:	4604      	mov	r4, r0
 8017d4a:	4608      	mov	r0, r1
 8017d4c:	4611      	mov	r1, r2
 8017d4e:	2200      	movs	r2, #0
 8017d50:	602a      	str	r2, [r5, #0]
 8017d52:	461a      	mov	r2, r3
 8017d54:	f7ed ffad 	bl	8005cb2 <_write>
 8017d58:	1c43      	adds	r3, r0, #1
 8017d5a:	d102      	bne.n	8017d62 <_write_r+0x1e>
 8017d5c:	682b      	ldr	r3, [r5, #0]
 8017d5e:	b103      	cbz	r3, 8017d62 <_write_r+0x1e>
 8017d60:	6023      	str	r3, [r4, #0]
 8017d62:	bd38      	pop	{r3, r4, r5, pc}
 8017d64:	2000251c 	.word	0x2000251c

08017d68 <__errno>:
 8017d68:	4b01      	ldr	r3, [pc, #4]	; (8017d70 <__errno+0x8>)
 8017d6a:	6818      	ldr	r0, [r3, #0]
 8017d6c:	4770      	bx	lr
 8017d6e:	bf00      	nop
 8017d70:	20000308 	.word	0x20000308

08017d74 <__libc_init_array>:
 8017d74:	b570      	push	{r4, r5, r6, lr}
 8017d76:	4d0d      	ldr	r5, [pc, #52]	; (8017dac <__libc_init_array+0x38>)
 8017d78:	4c0d      	ldr	r4, [pc, #52]	; (8017db0 <__libc_init_array+0x3c>)
 8017d7a:	1b64      	subs	r4, r4, r5
 8017d7c:	10a4      	asrs	r4, r4, #2
 8017d7e:	2600      	movs	r6, #0
 8017d80:	42a6      	cmp	r6, r4
 8017d82:	d109      	bne.n	8017d98 <__libc_init_array+0x24>
 8017d84:	4d0b      	ldr	r5, [pc, #44]	; (8017db4 <__libc_init_array+0x40>)
 8017d86:	4c0c      	ldr	r4, [pc, #48]	; (8017db8 <__libc_init_array+0x44>)
 8017d88:	f004 ffda 	bl	801cd40 <_init>
 8017d8c:	1b64      	subs	r4, r4, r5
 8017d8e:	10a4      	asrs	r4, r4, #2
 8017d90:	2600      	movs	r6, #0
 8017d92:	42a6      	cmp	r6, r4
 8017d94:	d105      	bne.n	8017da2 <__libc_init_array+0x2e>
 8017d96:	bd70      	pop	{r4, r5, r6, pc}
 8017d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d9c:	4798      	blx	r3
 8017d9e:	3601      	adds	r6, #1
 8017da0:	e7ee      	b.n	8017d80 <__libc_init_array+0xc>
 8017da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8017da6:	4798      	blx	r3
 8017da8:	3601      	adds	r6, #1
 8017daa:	e7f2      	b.n	8017d92 <__libc_init_array+0x1e>
 8017dac:	0801f2d8 	.word	0x0801f2d8
 8017db0:	0801f2d8 	.word	0x0801f2d8
 8017db4:	0801f2d8 	.word	0x0801f2d8
 8017db8:	0801f2dc 	.word	0x0801f2dc

08017dbc <__retarget_lock_init_recursive>:
 8017dbc:	4770      	bx	lr

08017dbe <__retarget_lock_acquire_recursive>:
 8017dbe:	4770      	bx	lr

08017dc0 <__retarget_lock_release_recursive>:
 8017dc0:	4770      	bx	lr

08017dc2 <strcpy>:
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017dc8:	f803 2b01 	strb.w	r2, [r3], #1
 8017dcc:	2a00      	cmp	r2, #0
 8017dce:	d1f9      	bne.n	8017dc4 <strcpy+0x2>
 8017dd0:	4770      	bx	lr

08017dd2 <memcpy>:
 8017dd2:	440a      	add	r2, r1
 8017dd4:	4291      	cmp	r1, r2
 8017dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8017dda:	d100      	bne.n	8017dde <memcpy+0xc>
 8017ddc:	4770      	bx	lr
 8017dde:	b510      	push	{r4, lr}
 8017de0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017de4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017de8:	4291      	cmp	r1, r2
 8017dea:	d1f9      	bne.n	8017de0 <memcpy+0xe>
 8017dec:	bd10      	pop	{r4, pc}
	...

08017df0 <nan>:
 8017df0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017df8 <nan+0x8>
 8017df4:	4770      	bx	lr
 8017df6:	bf00      	nop
 8017df8:	00000000 	.word	0x00000000
 8017dfc:	7ff80000 	.word	0x7ff80000

08017e00 <nanf>:
 8017e00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017e08 <nanf+0x8>
 8017e04:	4770      	bx	lr
 8017e06:	bf00      	nop
 8017e08:	7fc00000 	.word	0x7fc00000

08017e0c <__assert_func>:
 8017e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017e0e:	4614      	mov	r4, r2
 8017e10:	461a      	mov	r2, r3
 8017e12:	4b09      	ldr	r3, [pc, #36]	; (8017e38 <__assert_func+0x2c>)
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	4605      	mov	r5, r0
 8017e18:	68d8      	ldr	r0, [r3, #12]
 8017e1a:	b14c      	cbz	r4, 8017e30 <__assert_func+0x24>
 8017e1c:	4b07      	ldr	r3, [pc, #28]	; (8017e3c <__assert_func+0x30>)
 8017e1e:	9100      	str	r1, [sp, #0]
 8017e20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017e24:	4906      	ldr	r1, [pc, #24]	; (8017e40 <__assert_func+0x34>)
 8017e26:	462b      	mov	r3, r5
 8017e28:	f002 f8fe 	bl	801a028 <fiprintf>
 8017e2c:	f002 f928 	bl	801a080 <abort>
 8017e30:	4b04      	ldr	r3, [pc, #16]	; (8017e44 <__assert_func+0x38>)
 8017e32:	461c      	mov	r4, r3
 8017e34:	e7f3      	b.n	8017e1e <__assert_func+0x12>
 8017e36:	bf00      	nop
 8017e38:	20000308 	.word	0x20000308
 8017e3c:	0801ee33 	.word	0x0801ee33
 8017e40:	0801ee40 	.word	0x0801ee40
 8017e44:	0801ee6e 	.word	0x0801ee6e

08017e48 <quorem>:
 8017e48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e4c:	6903      	ldr	r3, [r0, #16]
 8017e4e:	690c      	ldr	r4, [r1, #16]
 8017e50:	42a3      	cmp	r3, r4
 8017e52:	4607      	mov	r7, r0
 8017e54:	db7e      	blt.n	8017f54 <quorem+0x10c>
 8017e56:	3c01      	subs	r4, #1
 8017e58:	f101 0814 	add.w	r8, r1, #20
 8017e5c:	f100 0514 	add.w	r5, r0, #20
 8017e60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017e64:	9301      	str	r3, [sp, #4]
 8017e66:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017e6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017e6e:	3301      	adds	r3, #1
 8017e70:	429a      	cmp	r2, r3
 8017e72:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017e76:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017e7a:	fbb2 f6f3 	udiv	r6, r2, r3
 8017e7e:	d331      	bcc.n	8017ee4 <quorem+0x9c>
 8017e80:	f04f 0e00 	mov.w	lr, #0
 8017e84:	4640      	mov	r0, r8
 8017e86:	46ac      	mov	ip, r5
 8017e88:	46f2      	mov	sl, lr
 8017e8a:	f850 2b04 	ldr.w	r2, [r0], #4
 8017e8e:	b293      	uxth	r3, r2
 8017e90:	fb06 e303 	mla	r3, r6, r3, lr
 8017e94:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017e98:	0c1a      	lsrs	r2, r3, #16
 8017e9a:	b29b      	uxth	r3, r3
 8017e9c:	ebaa 0303 	sub.w	r3, sl, r3
 8017ea0:	f8dc a000 	ldr.w	sl, [ip]
 8017ea4:	fa13 f38a 	uxtah	r3, r3, sl
 8017ea8:	fb06 220e 	mla	r2, r6, lr, r2
 8017eac:	9300      	str	r3, [sp, #0]
 8017eae:	9b00      	ldr	r3, [sp, #0]
 8017eb0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017eb4:	b292      	uxth	r2, r2
 8017eb6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017eba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017ebe:	f8bd 3000 	ldrh.w	r3, [sp]
 8017ec2:	4581      	cmp	r9, r0
 8017ec4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017ec8:	f84c 3b04 	str.w	r3, [ip], #4
 8017ecc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017ed0:	d2db      	bcs.n	8017e8a <quorem+0x42>
 8017ed2:	f855 300b 	ldr.w	r3, [r5, fp]
 8017ed6:	b92b      	cbnz	r3, 8017ee4 <quorem+0x9c>
 8017ed8:	9b01      	ldr	r3, [sp, #4]
 8017eda:	3b04      	subs	r3, #4
 8017edc:	429d      	cmp	r5, r3
 8017ede:	461a      	mov	r2, r3
 8017ee0:	d32c      	bcc.n	8017f3c <quorem+0xf4>
 8017ee2:	613c      	str	r4, [r7, #16]
 8017ee4:	4638      	mov	r0, r7
 8017ee6:	f001 fca5 	bl	8019834 <__mcmp>
 8017eea:	2800      	cmp	r0, #0
 8017eec:	db22      	blt.n	8017f34 <quorem+0xec>
 8017eee:	3601      	adds	r6, #1
 8017ef0:	4629      	mov	r1, r5
 8017ef2:	2000      	movs	r0, #0
 8017ef4:	f858 2b04 	ldr.w	r2, [r8], #4
 8017ef8:	f8d1 c000 	ldr.w	ip, [r1]
 8017efc:	b293      	uxth	r3, r2
 8017efe:	1ac3      	subs	r3, r0, r3
 8017f00:	0c12      	lsrs	r2, r2, #16
 8017f02:	fa13 f38c 	uxtah	r3, r3, ip
 8017f06:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8017f0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017f0e:	b29b      	uxth	r3, r3
 8017f10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017f14:	45c1      	cmp	r9, r8
 8017f16:	f841 3b04 	str.w	r3, [r1], #4
 8017f1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017f1e:	d2e9      	bcs.n	8017ef4 <quorem+0xac>
 8017f20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017f24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017f28:	b922      	cbnz	r2, 8017f34 <quorem+0xec>
 8017f2a:	3b04      	subs	r3, #4
 8017f2c:	429d      	cmp	r5, r3
 8017f2e:	461a      	mov	r2, r3
 8017f30:	d30a      	bcc.n	8017f48 <quorem+0x100>
 8017f32:	613c      	str	r4, [r7, #16]
 8017f34:	4630      	mov	r0, r6
 8017f36:	b003      	add	sp, #12
 8017f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f3c:	6812      	ldr	r2, [r2, #0]
 8017f3e:	3b04      	subs	r3, #4
 8017f40:	2a00      	cmp	r2, #0
 8017f42:	d1ce      	bne.n	8017ee2 <quorem+0x9a>
 8017f44:	3c01      	subs	r4, #1
 8017f46:	e7c9      	b.n	8017edc <quorem+0x94>
 8017f48:	6812      	ldr	r2, [r2, #0]
 8017f4a:	3b04      	subs	r3, #4
 8017f4c:	2a00      	cmp	r2, #0
 8017f4e:	d1f0      	bne.n	8017f32 <quorem+0xea>
 8017f50:	3c01      	subs	r4, #1
 8017f52:	e7eb      	b.n	8017f2c <quorem+0xe4>
 8017f54:	2000      	movs	r0, #0
 8017f56:	e7ee      	b.n	8017f36 <quorem+0xee>

08017f58 <_dtoa_r>:
 8017f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f5c:	ed2d 8b04 	vpush	{d8-d9}
 8017f60:	69c5      	ldr	r5, [r0, #28]
 8017f62:	b093      	sub	sp, #76	; 0x4c
 8017f64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017f68:	ec57 6b10 	vmov	r6, r7, d0
 8017f6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017f70:	9107      	str	r1, [sp, #28]
 8017f72:	4604      	mov	r4, r0
 8017f74:	920a      	str	r2, [sp, #40]	; 0x28
 8017f76:	930d      	str	r3, [sp, #52]	; 0x34
 8017f78:	b975      	cbnz	r5, 8017f98 <_dtoa_r+0x40>
 8017f7a:	2010      	movs	r0, #16
 8017f7c:	f7fd fe7c 	bl	8015c78 <malloc>
 8017f80:	4602      	mov	r2, r0
 8017f82:	61e0      	str	r0, [r4, #28]
 8017f84:	b920      	cbnz	r0, 8017f90 <_dtoa_r+0x38>
 8017f86:	4bae      	ldr	r3, [pc, #696]	; (8018240 <_dtoa_r+0x2e8>)
 8017f88:	21ef      	movs	r1, #239	; 0xef
 8017f8a:	48ae      	ldr	r0, [pc, #696]	; (8018244 <_dtoa_r+0x2ec>)
 8017f8c:	f7ff ff3e 	bl	8017e0c <__assert_func>
 8017f90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017f94:	6005      	str	r5, [r0, #0]
 8017f96:	60c5      	str	r5, [r0, #12]
 8017f98:	69e3      	ldr	r3, [r4, #28]
 8017f9a:	6819      	ldr	r1, [r3, #0]
 8017f9c:	b151      	cbz	r1, 8017fb4 <_dtoa_r+0x5c>
 8017f9e:	685a      	ldr	r2, [r3, #4]
 8017fa0:	604a      	str	r2, [r1, #4]
 8017fa2:	2301      	movs	r3, #1
 8017fa4:	4093      	lsls	r3, r2
 8017fa6:	608b      	str	r3, [r1, #8]
 8017fa8:	4620      	mov	r0, r4
 8017faa:	f001 f9bd 	bl	8019328 <_Bfree>
 8017fae:	69e3      	ldr	r3, [r4, #28]
 8017fb0:	2200      	movs	r2, #0
 8017fb2:	601a      	str	r2, [r3, #0]
 8017fb4:	1e3b      	subs	r3, r7, #0
 8017fb6:	bfbb      	ittet	lt
 8017fb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017fbc:	9303      	strlt	r3, [sp, #12]
 8017fbe:	2300      	movge	r3, #0
 8017fc0:	2201      	movlt	r2, #1
 8017fc2:	bfac      	ite	ge
 8017fc4:	f8c8 3000 	strge.w	r3, [r8]
 8017fc8:	f8c8 2000 	strlt.w	r2, [r8]
 8017fcc:	4b9e      	ldr	r3, [pc, #632]	; (8018248 <_dtoa_r+0x2f0>)
 8017fce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017fd2:	ea33 0308 	bics.w	r3, r3, r8
 8017fd6:	d11b      	bne.n	8018010 <_dtoa_r+0xb8>
 8017fd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017fda:	f242 730f 	movw	r3, #9999	; 0x270f
 8017fde:	6013      	str	r3, [r2, #0]
 8017fe0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8017fe4:	4333      	orrs	r3, r6
 8017fe6:	f000 8593 	beq.w	8018b10 <_dtoa_r+0xbb8>
 8017fea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017fec:	b963      	cbnz	r3, 8018008 <_dtoa_r+0xb0>
 8017fee:	4b97      	ldr	r3, [pc, #604]	; (801824c <_dtoa_r+0x2f4>)
 8017ff0:	e027      	b.n	8018042 <_dtoa_r+0xea>
 8017ff2:	4b97      	ldr	r3, [pc, #604]	; (8018250 <_dtoa_r+0x2f8>)
 8017ff4:	9300      	str	r3, [sp, #0]
 8017ff6:	3308      	adds	r3, #8
 8017ff8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017ffa:	6013      	str	r3, [r2, #0]
 8017ffc:	9800      	ldr	r0, [sp, #0]
 8017ffe:	b013      	add	sp, #76	; 0x4c
 8018000:	ecbd 8b04 	vpop	{d8-d9}
 8018004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018008:	4b90      	ldr	r3, [pc, #576]	; (801824c <_dtoa_r+0x2f4>)
 801800a:	9300      	str	r3, [sp, #0]
 801800c:	3303      	adds	r3, #3
 801800e:	e7f3      	b.n	8017ff8 <_dtoa_r+0xa0>
 8018010:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018014:	2200      	movs	r2, #0
 8018016:	ec51 0b17 	vmov	r0, r1, d7
 801801a:	eeb0 8a47 	vmov.f32	s16, s14
 801801e:	eef0 8a67 	vmov.f32	s17, s15
 8018022:	2300      	movs	r3, #0
 8018024:	f7e8 fd50 	bl	8000ac8 <__aeabi_dcmpeq>
 8018028:	4681      	mov	r9, r0
 801802a:	b160      	cbz	r0, 8018046 <_dtoa_r+0xee>
 801802c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801802e:	2301      	movs	r3, #1
 8018030:	6013      	str	r3, [r2, #0]
 8018032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018034:	2b00      	cmp	r3, #0
 8018036:	f000 8568 	beq.w	8018b0a <_dtoa_r+0xbb2>
 801803a:	4b86      	ldr	r3, [pc, #536]	; (8018254 <_dtoa_r+0x2fc>)
 801803c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801803e:	6013      	str	r3, [r2, #0]
 8018040:	3b01      	subs	r3, #1
 8018042:	9300      	str	r3, [sp, #0]
 8018044:	e7da      	b.n	8017ffc <_dtoa_r+0xa4>
 8018046:	aa10      	add	r2, sp, #64	; 0x40
 8018048:	a911      	add	r1, sp, #68	; 0x44
 801804a:	4620      	mov	r0, r4
 801804c:	eeb0 0a48 	vmov.f32	s0, s16
 8018050:	eef0 0a68 	vmov.f32	s1, s17
 8018054:	f001 fd04 	bl	8019a60 <__d2b>
 8018058:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801805c:	4682      	mov	sl, r0
 801805e:	2d00      	cmp	r5, #0
 8018060:	d07f      	beq.n	8018162 <_dtoa_r+0x20a>
 8018062:	ee18 3a90 	vmov	r3, s17
 8018066:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801806a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801806e:	ec51 0b18 	vmov	r0, r1, d8
 8018072:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018076:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801807a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801807e:	4619      	mov	r1, r3
 8018080:	2200      	movs	r2, #0
 8018082:	4b75      	ldr	r3, [pc, #468]	; (8018258 <_dtoa_r+0x300>)
 8018084:	f7e8 f900 	bl	8000288 <__aeabi_dsub>
 8018088:	a367      	add	r3, pc, #412	; (adr r3, 8018228 <_dtoa_r+0x2d0>)
 801808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801808e:	f7e8 fab3 	bl	80005f8 <__aeabi_dmul>
 8018092:	a367      	add	r3, pc, #412	; (adr r3, 8018230 <_dtoa_r+0x2d8>)
 8018094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018098:	f7e8 f8f8 	bl	800028c <__adddf3>
 801809c:	4606      	mov	r6, r0
 801809e:	4628      	mov	r0, r5
 80180a0:	460f      	mov	r7, r1
 80180a2:	f7e8 fa3f 	bl	8000524 <__aeabi_i2d>
 80180a6:	a364      	add	r3, pc, #400	; (adr r3, 8018238 <_dtoa_r+0x2e0>)
 80180a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ac:	f7e8 faa4 	bl	80005f8 <__aeabi_dmul>
 80180b0:	4602      	mov	r2, r0
 80180b2:	460b      	mov	r3, r1
 80180b4:	4630      	mov	r0, r6
 80180b6:	4639      	mov	r1, r7
 80180b8:	f7e8 f8e8 	bl	800028c <__adddf3>
 80180bc:	4606      	mov	r6, r0
 80180be:	460f      	mov	r7, r1
 80180c0:	f7e8 fd4a 	bl	8000b58 <__aeabi_d2iz>
 80180c4:	2200      	movs	r2, #0
 80180c6:	4683      	mov	fp, r0
 80180c8:	2300      	movs	r3, #0
 80180ca:	4630      	mov	r0, r6
 80180cc:	4639      	mov	r1, r7
 80180ce:	f7e8 fd05 	bl	8000adc <__aeabi_dcmplt>
 80180d2:	b148      	cbz	r0, 80180e8 <_dtoa_r+0x190>
 80180d4:	4658      	mov	r0, fp
 80180d6:	f7e8 fa25 	bl	8000524 <__aeabi_i2d>
 80180da:	4632      	mov	r2, r6
 80180dc:	463b      	mov	r3, r7
 80180de:	f7e8 fcf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80180e2:	b908      	cbnz	r0, 80180e8 <_dtoa_r+0x190>
 80180e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80180e8:	f1bb 0f16 	cmp.w	fp, #22
 80180ec:	d857      	bhi.n	801819e <_dtoa_r+0x246>
 80180ee:	4b5b      	ldr	r3, [pc, #364]	; (801825c <_dtoa_r+0x304>)
 80180f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80180f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180f8:	ec51 0b18 	vmov	r0, r1, d8
 80180fc:	f7e8 fcee 	bl	8000adc <__aeabi_dcmplt>
 8018100:	2800      	cmp	r0, #0
 8018102:	d04e      	beq.n	80181a2 <_dtoa_r+0x24a>
 8018104:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018108:	2300      	movs	r3, #0
 801810a:	930c      	str	r3, [sp, #48]	; 0x30
 801810c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801810e:	1b5b      	subs	r3, r3, r5
 8018110:	1e5a      	subs	r2, r3, #1
 8018112:	bf45      	ittet	mi
 8018114:	f1c3 0301 	rsbmi	r3, r3, #1
 8018118:	9305      	strmi	r3, [sp, #20]
 801811a:	2300      	movpl	r3, #0
 801811c:	2300      	movmi	r3, #0
 801811e:	9206      	str	r2, [sp, #24]
 8018120:	bf54      	ite	pl
 8018122:	9305      	strpl	r3, [sp, #20]
 8018124:	9306      	strmi	r3, [sp, #24]
 8018126:	f1bb 0f00 	cmp.w	fp, #0
 801812a:	db3c      	blt.n	80181a6 <_dtoa_r+0x24e>
 801812c:	9b06      	ldr	r3, [sp, #24]
 801812e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8018132:	445b      	add	r3, fp
 8018134:	9306      	str	r3, [sp, #24]
 8018136:	2300      	movs	r3, #0
 8018138:	9308      	str	r3, [sp, #32]
 801813a:	9b07      	ldr	r3, [sp, #28]
 801813c:	2b09      	cmp	r3, #9
 801813e:	d868      	bhi.n	8018212 <_dtoa_r+0x2ba>
 8018140:	2b05      	cmp	r3, #5
 8018142:	bfc4      	itt	gt
 8018144:	3b04      	subgt	r3, #4
 8018146:	9307      	strgt	r3, [sp, #28]
 8018148:	9b07      	ldr	r3, [sp, #28]
 801814a:	f1a3 0302 	sub.w	r3, r3, #2
 801814e:	bfcc      	ite	gt
 8018150:	2500      	movgt	r5, #0
 8018152:	2501      	movle	r5, #1
 8018154:	2b03      	cmp	r3, #3
 8018156:	f200 8085 	bhi.w	8018264 <_dtoa_r+0x30c>
 801815a:	e8df f003 	tbb	[pc, r3]
 801815e:	3b2e      	.short	0x3b2e
 8018160:	5839      	.short	0x5839
 8018162:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8018166:	441d      	add	r5, r3
 8018168:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801816c:	2b20      	cmp	r3, #32
 801816e:	bfc1      	itttt	gt
 8018170:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018174:	fa08 f803 	lslgt.w	r8, r8, r3
 8018178:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801817c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8018180:	bfd6      	itet	le
 8018182:	f1c3 0320 	rsble	r3, r3, #32
 8018186:	ea48 0003 	orrgt.w	r0, r8, r3
 801818a:	fa06 f003 	lslle.w	r0, r6, r3
 801818e:	f7e8 f9b9 	bl	8000504 <__aeabi_ui2d>
 8018192:	2201      	movs	r2, #1
 8018194:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8018198:	3d01      	subs	r5, #1
 801819a:	920e      	str	r2, [sp, #56]	; 0x38
 801819c:	e76f      	b.n	801807e <_dtoa_r+0x126>
 801819e:	2301      	movs	r3, #1
 80181a0:	e7b3      	b.n	801810a <_dtoa_r+0x1b2>
 80181a2:	900c      	str	r0, [sp, #48]	; 0x30
 80181a4:	e7b2      	b.n	801810c <_dtoa_r+0x1b4>
 80181a6:	9b05      	ldr	r3, [sp, #20]
 80181a8:	eba3 030b 	sub.w	r3, r3, fp
 80181ac:	9305      	str	r3, [sp, #20]
 80181ae:	f1cb 0300 	rsb	r3, fp, #0
 80181b2:	9308      	str	r3, [sp, #32]
 80181b4:	2300      	movs	r3, #0
 80181b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80181b8:	e7bf      	b.n	801813a <_dtoa_r+0x1e2>
 80181ba:	2300      	movs	r3, #0
 80181bc:	9309      	str	r3, [sp, #36]	; 0x24
 80181be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	dc52      	bgt.n	801826a <_dtoa_r+0x312>
 80181c4:	2301      	movs	r3, #1
 80181c6:	9301      	str	r3, [sp, #4]
 80181c8:	9304      	str	r3, [sp, #16]
 80181ca:	461a      	mov	r2, r3
 80181cc:	920a      	str	r2, [sp, #40]	; 0x28
 80181ce:	e00b      	b.n	80181e8 <_dtoa_r+0x290>
 80181d0:	2301      	movs	r3, #1
 80181d2:	e7f3      	b.n	80181bc <_dtoa_r+0x264>
 80181d4:	2300      	movs	r3, #0
 80181d6:	9309      	str	r3, [sp, #36]	; 0x24
 80181d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181da:	445b      	add	r3, fp
 80181dc:	9301      	str	r3, [sp, #4]
 80181de:	3301      	adds	r3, #1
 80181e0:	2b01      	cmp	r3, #1
 80181e2:	9304      	str	r3, [sp, #16]
 80181e4:	bfb8      	it	lt
 80181e6:	2301      	movlt	r3, #1
 80181e8:	69e0      	ldr	r0, [r4, #28]
 80181ea:	2100      	movs	r1, #0
 80181ec:	2204      	movs	r2, #4
 80181ee:	f102 0614 	add.w	r6, r2, #20
 80181f2:	429e      	cmp	r6, r3
 80181f4:	d93d      	bls.n	8018272 <_dtoa_r+0x31a>
 80181f6:	6041      	str	r1, [r0, #4]
 80181f8:	4620      	mov	r0, r4
 80181fa:	f001 f855 	bl	80192a8 <_Balloc>
 80181fe:	9000      	str	r0, [sp, #0]
 8018200:	2800      	cmp	r0, #0
 8018202:	d139      	bne.n	8018278 <_dtoa_r+0x320>
 8018204:	4b16      	ldr	r3, [pc, #88]	; (8018260 <_dtoa_r+0x308>)
 8018206:	4602      	mov	r2, r0
 8018208:	f240 11af 	movw	r1, #431	; 0x1af
 801820c:	e6bd      	b.n	8017f8a <_dtoa_r+0x32>
 801820e:	2301      	movs	r3, #1
 8018210:	e7e1      	b.n	80181d6 <_dtoa_r+0x27e>
 8018212:	2501      	movs	r5, #1
 8018214:	2300      	movs	r3, #0
 8018216:	9307      	str	r3, [sp, #28]
 8018218:	9509      	str	r5, [sp, #36]	; 0x24
 801821a:	f04f 33ff 	mov.w	r3, #4294967295
 801821e:	9301      	str	r3, [sp, #4]
 8018220:	9304      	str	r3, [sp, #16]
 8018222:	2200      	movs	r2, #0
 8018224:	2312      	movs	r3, #18
 8018226:	e7d1      	b.n	80181cc <_dtoa_r+0x274>
 8018228:	636f4361 	.word	0x636f4361
 801822c:	3fd287a7 	.word	0x3fd287a7
 8018230:	8b60c8b3 	.word	0x8b60c8b3
 8018234:	3fc68a28 	.word	0x3fc68a28
 8018238:	509f79fb 	.word	0x509f79fb
 801823c:	3fd34413 	.word	0x3fd34413
 8018240:	0801edba 	.word	0x0801edba
 8018244:	0801ee7c 	.word	0x0801ee7c
 8018248:	7ff00000 	.word	0x7ff00000
 801824c:	0801ee78 	.word	0x0801ee78
 8018250:	0801ee6f 	.word	0x0801ee6f
 8018254:	0801ed92 	.word	0x0801ed92
 8018258:	3ff80000 	.word	0x3ff80000
 801825c:	0801efc8 	.word	0x0801efc8
 8018260:	0801eed4 	.word	0x0801eed4
 8018264:	2301      	movs	r3, #1
 8018266:	9309      	str	r3, [sp, #36]	; 0x24
 8018268:	e7d7      	b.n	801821a <_dtoa_r+0x2c2>
 801826a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801826c:	9301      	str	r3, [sp, #4]
 801826e:	9304      	str	r3, [sp, #16]
 8018270:	e7ba      	b.n	80181e8 <_dtoa_r+0x290>
 8018272:	3101      	adds	r1, #1
 8018274:	0052      	lsls	r2, r2, #1
 8018276:	e7ba      	b.n	80181ee <_dtoa_r+0x296>
 8018278:	69e3      	ldr	r3, [r4, #28]
 801827a:	9a00      	ldr	r2, [sp, #0]
 801827c:	601a      	str	r2, [r3, #0]
 801827e:	9b04      	ldr	r3, [sp, #16]
 8018280:	2b0e      	cmp	r3, #14
 8018282:	f200 80a8 	bhi.w	80183d6 <_dtoa_r+0x47e>
 8018286:	2d00      	cmp	r5, #0
 8018288:	f000 80a5 	beq.w	80183d6 <_dtoa_r+0x47e>
 801828c:	f1bb 0f00 	cmp.w	fp, #0
 8018290:	dd38      	ble.n	8018304 <_dtoa_r+0x3ac>
 8018292:	4bc0      	ldr	r3, [pc, #768]	; (8018594 <_dtoa_r+0x63c>)
 8018294:	f00b 020f 	and.w	r2, fp, #15
 8018298:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801829c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80182a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80182a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80182a8:	d019      	beq.n	80182de <_dtoa_r+0x386>
 80182aa:	4bbb      	ldr	r3, [pc, #748]	; (8018598 <_dtoa_r+0x640>)
 80182ac:	ec51 0b18 	vmov	r0, r1, d8
 80182b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80182b4:	f7e8 faca 	bl	800084c <__aeabi_ddiv>
 80182b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80182bc:	f008 080f 	and.w	r8, r8, #15
 80182c0:	2503      	movs	r5, #3
 80182c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8018598 <_dtoa_r+0x640>
 80182c6:	f1b8 0f00 	cmp.w	r8, #0
 80182ca:	d10a      	bne.n	80182e2 <_dtoa_r+0x38a>
 80182cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80182d0:	4632      	mov	r2, r6
 80182d2:	463b      	mov	r3, r7
 80182d4:	f7e8 faba 	bl	800084c <__aeabi_ddiv>
 80182d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80182dc:	e02b      	b.n	8018336 <_dtoa_r+0x3de>
 80182de:	2502      	movs	r5, #2
 80182e0:	e7ef      	b.n	80182c2 <_dtoa_r+0x36a>
 80182e2:	f018 0f01 	tst.w	r8, #1
 80182e6:	d008      	beq.n	80182fa <_dtoa_r+0x3a2>
 80182e8:	4630      	mov	r0, r6
 80182ea:	4639      	mov	r1, r7
 80182ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80182f0:	f7e8 f982 	bl	80005f8 <__aeabi_dmul>
 80182f4:	3501      	adds	r5, #1
 80182f6:	4606      	mov	r6, r0
 80182f8:	460f      	mov	r7, r1
 80182fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80182fe:	f109 0908 	add.w	r9, r9, #8
 8018302:	e7e0      	b.n	80182c6 <_dtoa_r+0x36e>
 8018304:	f000 809f 	beq.w	8018446 <_dtoa_r+0x4ee>
 8018308:	f1cb 0600 	rsb	r6, fp, #0
 801830c:	4ba1      	ldr	r3, [pc, #644]	; (8018594 <_dtoa_r+0x63c>)
 801830e:	4fa2      	ldr	r7, [pc, #648]	; (8018598 <_dtoa_r+0x640>)
 8018310:	f006 020f 	and.w	r2, r6, #15
 8018314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801831c:	ec51 0b18 	vmov	r0, r1, d8
 8018320:	f7e8 f96a 	bl	80005f8 <__aeabi_dmul>
 8018324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018328:	1136      	asrs	r6, r6, #4
 801832a:	2300      	movs	r3, #0
 801832c:	2502      	movs	r5, #2
 801832e:	2e00      	cmp	r6, #0
 8018330:	d17e      	bne.n	8018430 <_dtoa_r+0x4d8>
 8018332:	2b00      	cmp	r3, #0
 8018334:	d1d0      	bne.n	80182d8 <_dtoa_r+0x380>
 8018336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018338:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801833c:	2b00      	cmp	r3, #0
 801833e:	f000 8084 	beq.w	801844a <_dtoa_r+0x4f2>
 8018342:	4b96      	ldr	r3, [pc, #600]	; (801859c <_dtoa_r+0x644>)
 8018344:	2200      	movs	r2, #0
 8018346:	4640      	mov	r0, r8
 8018348:	4649      	mov	r1, r9
 801834a:	f7e8 fbc7 	bl	8000adc <__aeabi_dcmplt>
 801834e:	2800      	cmp	r0, #0
 8018350:	d07b      	beq.n	801844a <_dtoa_r+0x4f2>
 8018352:	9b04      	ldr	r3, [sp, #16]
 8018354:	2b00      	cmp	r3, #0
 8018356:	d078      	beq.n	801844a <_dtoa_r+0x4f2>
 8018358:	9b01      	ldr	r3, [sp, #4]
 801835a:	2b00      	cmp	r3, #0
 801835c:	dd39      	ble.n	80183d2 <_dtoa_r+0x47a>
 801835e:	4b90      	ldr	r3, [pc, #576]	; (80185a0 <_dtoa_r+0x648>)
 8018360:	2200      	movs	r2, #0
 8018362:	4640      	mov	r0, r8
 8018364:	4649      	mov	r1, r9
 8018366:	f7e8 f947 	bl	80005f8 <__aeabi_dmul>
 801836a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801836e:	9e01      	ldr	r6, [sp, #4]
 8018370:	f10b 37ff 	add.w	r7, fp, #4294967295
 8018374:	3501      	adds	r5, #1
 8018376:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801837a:	4628      	mov	r0, r5
 801837c:	f7e8 f8d2 	bl	8000524 <__aeabi_i2d>
 8018380:	4642      	mov	r2, r8
 8018382:	464b      	mov	r3, r9
 8018384:	f7e8 f938 	bl	80005f8 <__aeabi_dmul>
 8018388:	4b86      	ldr	r3, [pc, #536]	; (80185a4 <_dtoa_r+0x64c>)
 801838a:	2200      	movs	r2, #0
 801838c:	f7e7 ff7e 	bl	800028c <__adddf3>
 8018390:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8018394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018398:	9303      	str	r3, [sp, #12]
 801839a:	2e00      	cmp	r6, #0
 801839c:	d158      	bne.n	8018450 <_dtoa_r+0x4f8>
 801839e:	4b82      	ldr	r3, [pc, #520]	; (80185a8 <_dtoa_r+0x650>)
 80183a0:	2200      	movs	r2, #0
 80183a2:	4640      	mov	r0, r8
 80183a4:	4649      	mov	r1, r9
 80183a6:	f7e7 ff6f 	bl	8000288 <__aeabi_dsub>
 80183aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80183ae:	4680      	mov	r8, r0
 80183b0:	4689      	mov	r9, r1
 80183b2:	f7e8 fbb1 	bl	8000b18 <__aeabi_dcmpgt>
 80183b6:	2800      	cmp	r0, #0
 80183b8:	f040 8296 	bne.w	80188e8 <_dtoa_r+0x990>
 80183bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80183c0:	4640      	mov	r0, r8
 80183c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80183c6:	4649      	mov	r1, r9
 80183c8:	f7e8 fb88 	bl	8000adc <__aeabi_dcmplt>
 80183cc:	2800      	cmp	r0, #0
 80183ce:	f040 8289 	bne.w	80188e4 <_dtoa_r+0x98c>
 80183d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80183d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80183d8:	2b00      	cmp	r3, #0
 80183da:	f2c0 814e 	blt.w	801867a <_dtoa_r+0x722>
 80183de:	f1bb 0f0e 	cmp.w	fp, #14
 80183e2:	f300 814a 	bgt.w	801867a <_dtoa_r+0x722>
 80183e6:	4b6b      	ldr	r3, [pc, #428]	; (8018594 <_dtoa_r+0x63c>)
 80183e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80183ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80183f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	f280 80dc 	bge.w	80185b0 <_dtoa_r+0x658>
 80183f8:	9b04      	ldr	r3, [sp, #16]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	f300 80d8 	bgt.w	80185b0 <_dtoa_r+0x658>
 8018400:	f040 826f 	bne.w	80188e2 <_dtoa_r+0x98a>
 8018404:	4b68      	ldr	r3, [pc, #416]	; (80185a8 <_dtoa_r+0x650>)
 8018406:	2200      	movs	r2, #0
 8018408:	4640      	mov	r0, r8
 801840a:	4649      	mov	r1, r9
 801840c:	f7e8 f8f4 	bl	80005f8 <__aeabi_dmul>
 8018410:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018414:	f7e8 fb76 	bl	8000b04 <__aeabi_dcmpge>
 8018418:	9e04      	ldr	r6, [sp, #16]
 801841a:	4637      	mov	r7, r6
 801841c:	2800      	cmp	r0, #0
 801841e:	f040 8245 	bne.w	80188ac <_dtoa_r+0x954>
 8018422:	9d00      	ldr	r5, [sp, #0]
 8018424:	2331      	movs	r3, #49	; 0x31
 8018426:	f805 3b01 	strb.w	r3, [r5], #1
 801842a:	f10b 0b01 	add.w	fp, fp, #1
 801842e:	e241      	b.n	80188b4 <_dtoa_r+0x95c>
 8018430:	07f2      	lsls	r2, r6, #31
 8018432:	d505      	bpl.n	8018440 <_dtoa_r+0x4e8>
 8018434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018438:	f7e8 f8de 	bl	80005f8 <__aeabi_dmul>
 801843c:	3501      	adds	r5, #1
 801843e:	2301      	movs	r3, #1
 8018440:	1076      	asrs	r6, r6, #1
 8018442:	3708      	adds	r7, #8
 8018444:	e773      	b.n	801832e <_dtoa_r+0x3d6>
 8018446:	2502      	movs	r5, #2
 8018448:	e775      	b.n	8018336 <_dtoa_r+0x3de>
 801844a:	9e04      	ldr	r6, [sp, #16]
 801844c:	465f      	mov	r7, fp
 801844e:	e792      	b.n	8018376 <_dtoa_r+0x41e>
 8018450:	9900      	ldr	r1, [sp, #0]
 8018452:	4b50      	ldr	r3, [pc, #320]	; (8018594 <_dtoa_r+0x63c>)
 8018454:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018458:	4431      	add	r1, r6
 801845a:	9102      	str	r1, [sp, #8]
 801845c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801845e:	eeb0 9a47 	vmov.f32	s18, s14
 8018462:	eef0 9a67 	vmov.f32	s19, s15
 8018466:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801846a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801846e:	2900      	cmp	r1, #0
 8018470:	d044      	beq.n	80184fc <_dtoa_r+0x5a4>
 8018472:	494e      	ldr	r1, [pc, #312]	; (80185ac <_dtoa_r+0x654>)
 8018474:	2000      	movs	r0, #0
 8018476:	f7e8 f9e9 	bl	800084c <__aeabi_ddiv>
 801847a:	ec53 2b19 	vmov	r2, r3, d9
 801847e:	f7e7 ff03 	bl	8000288 <__aeabi_dsub>
 8018482:	9d00      	ldr	r5, [sp, #0]
 8018484:	ec41 0b19 	vmov	d9, r0, r1
 8018488:	4649      	mov	r1, r9
 801848a:	4640      	mov	r0, r8
 801848c:	f7e8 fb64 	bl	8000b58 <__aeabi_d2iz>
 8018490:	4606      	mov	r6, r0
 8018492:	f7e8 f847 	bl	8000524 <__aeabi_i2d>
 8018496:	4602      	mov	r2, r0
 8018498:	460b      	mov	r3, r1
 801849a:	4640      	mov	r0, r8
 801849c:	4649      	mov	r1, r9
 801849e:	f7e7 fef3 	bl	8000288 <__aeabi_dsub>
 80184a2:	3630      	adds	r6, #48	; 0x30
 80184a4:	f805 6b01 	strb.w	r6, [r5], #1
 80184a8:	ec53 2b19 	vmov	r2, r3, d9
 80184ac:	4680      	mov	r8, r0
 80184ae:	4689      	mov	r9, r1
 80184b0:	f7e8 fb14 	bl	8000adc <__aeabi_dcmplt>
 80184b4:	2800      	cmp	r0, #0
 80184b6:	d164      	bne.n	8018582 <_dtoa_r+0x62a>
 80184b8:	4642      	mov	r2, r8
 80184ba:	464b      	mov	r3, r9
 80184bc:	4937      	ldr	r1, [pc, #220]	; (801859c <_dtoa_r+0x644>)
 80184be:	2000      	movs	r0, #0
 80184c0:	f7e7 fee2 	bl	8000288 <__aeabi_dsub>
 80184c4:	ec53 2b19 	vmov	r2, r3, d9
 80184c8:	f7e8 fb08 	bl	8000adc <__aeabi_dcmplt>
 80184cc:	2800      	cmp	r0, #0
 80184ce:	f040 80b6 	bne.w	801863e <_dtoa_r+0x6e6>
 80184d2:	9b02      	ldr	r3, [sp, #8]
 80184d4:	429d      	cmp	r5, r3
 80184d6:	f43f af7c 	beq.w	80183d2 <_dtoa_r+0x47a>
 80184da:	4b31      	ldr	r3, [pc, #196]	; (80185a0 <_dtoa_r+0x648>)
 80184dc:	ec51 0b19 	vmov	r0, r1, d9
 80184e0:	2200      	movs	r2, #0
 80184e2:	f7e8 f889 	bl	80005f8 <__aeabi_dmul>
 80184e6:	4b2e      	ldr	r3, [pc, #184]	; (80185a0 <_dtoa_r+0x648>)
 80184e8:	ec41 0b19 	vmov	d9, r0, r1
 80184ec:	2200      	movs	r2, #0
 80184ee:	4640      	mov	r0, r8
 80184f0:	4649      	mov	r1, r9
 80184f2:	f7e8 f881 	bl	80005f8 <__aeabi_dmul>
 80184f6:	4680      	mov	r8, r0
 80184f8:	4689      	mov	r9, r1
 80184fa:	e7c5      	b.n	8018488 <_dtoa_r+0x530>
 80184fc:	ec51 0b17 	vmov	r0, r1, d7
 8018500:	f7e8 f87a 	bl	80005f8 <__aeabi_dmul>
 8018504:	9b02      	ldr	r3, [sp, #8]
 8018506:	9d00      	ldr	r5, [sp, #0]
 8018508:	930f      	str	r3, [sp, #60]	; 0x3c
 801850a:	ec41 0b19 	vmov	d9, r0, r1
 801850e:	4649      	mov	r1, r9
 8018510:	4640      	mov	r0, r8
 8018512:	f7e8 fb21 	bl	8000b58 <__aeabi_d2iz>
 8018516:	4606      	mov	r6, r0
 8018518:	f7e8 f804 	bl	8000524 <__aeabi_i2d>
 801851c:	3630      	adds	r6, #48	; 0x30
 801851e:	4602      	mov	r2, r0
 8018520:	460b      	mov	r3, r1
 8018522:	4640      	mov	r0, r8
 8018524:	4649      	mov	r1, r9
 8018526:	f7e7 feaf 	bl	8000288 <__aeabi_dsub>
 801852a:	f805 6b01 	strb.w	r6, [r5], #1
 801852e:	9b02      	ldr	r3, [sp, #8]
 8018530:	429d      	cmp	r5, r3
 8018532:	4680      	mov	r8, r0
 8018534:	4689      	mov	r9, r1
 8018536:	f04f 0200 	mov.w	r2, #0
 801853a:	d124      	bne.n	8018586 <_dtoa_r+0x62e>
 801853c:	4b1b      	ldr	r3, [pc, #108]	; (80185ac <_dtoa_r+0x654>)
 801853e:	ec51 0b19 	vmov	r0, r1, d9
 8018542:	f7e7 fea3 	bl	800028c <__adddf3>
 8018546:	4602      	mov	r2, r0
 8018548:	460b      	mov	r3, r1
 801854a:	4640      	mov	r0, r8
 801854c:	4649      	mov	r1, r9
 801854e:	f7e8 fae3 	bl	8000b18 <__aeabi_dcmpgt>
 8018552:	2800      	cmp	r0, #0
 8018554:	d173      	bne.n	801863e <_dtoa_r+0x6e6>
 8018556:	ec53 2b19 	vmov	r2, r3, d9
 801855a:	4914      	ldr	r1, [pc, #80]	; (80185ac <_dtoa_r+0x654>)
 801855c:	2000      	movs	r0, #0
 801855e:	f7e7 fe93 	bl	8000288 <__aeabi_dsub>
 8018562:	4602      	mov	r2, r0
 8018564:	460b      	mov	r3, r1
 8018566:	4640      	mov	r0, r8
 8018568:	4649      	mov	r1, r9
 801856a:	f7e8 fab7 	bl	8000adc <__aeabi_dcmplt>
 801856e:	2800      	cmp	r0, #0
 8018570:	f43f af2f 	beq.w	80183d2 <_dtoa_r+0x47a>
 8018574:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8018576:	1e6b      	subs	r3, r5, #1
 8018578:	930f      	str	r3, [sp, #60]	; 0x3c
 801857a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801857e:	2b30      	cmp	r3, #48	; 0x30
 8018580:	d0f8      	beq.n	8018574 <_dtoa_r+0x61c>
 8018582:	46bb      	mov	fp, r7
 8018584:	e04a      	b.n	801861c <_dtoa_r+0x6c4>
 8018586:	4b06      	ldr	r3, [pc, #24]	; (80185a0 <_dtoa_r+0x648>)
 8018588:	f7e8 f836 	bl	80005f8 <__aeabi_dmul>
 801858c:	4680      	mov	r8, r0
 801858e:	4689      	mov	r9, r1
 8018590:	e7bd      	b.n	801850e <_dtoa_r+0x5b6>
 8018592:	bf00      	nop
 8018594:	0801efc8 	.word	0x0801efc8
 8018598:	0801efa0 	.word	0x0801efa0
 801859c:	3ff00000 	.word	0x3ff00000
 80185a0:	40240000 	.word	0x40240000
 80185a4:	401c0000 	.word	0x401c0000
 80185a8:	40140000 	.word	0x40140000
 80185ac:	3fe00000 	.word	0x3fe00000
 80185b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80185b4:	9d00      	ldr	r5, [sp, #0]
 80185b6:	4642      	mov	r2, r8
 80185b8:	464b      	mov	r3, r9
 80185ba:	4630      	mov	r0, r6
 80185bc:	4639      	mov	r1, r7
 80185be:	f7e8 f945 	bl	800084c <__aeabi_ddiv>
 80185c2:	f7e8 fac9 	bl	8000b58 <__aeabi_d2iz>
 80185c6:	9001      	str	r0, [sp, #4]
 80185c8:	f7e7 ffac 	bl	8000524 <__aeabi_i2d>
 80185cc:	4642      	mov	r2, r8
 80185ce:	464b      	mov	r3, r9
 80185d0:	f7e8 f812 	bl	80005f8 <__aeabi_dmul>
 80185d4:	4602      	mov	r2, r0
 80185d6:	460b      	mov	r3, r1
 80185d8:	4630      	mov	r0, r6
 80185da:	4639      	mov	r1, r7
 80185dc:	f7e7 fe54 	bl	8000288 <__aeabi_dsub>
 80185e0:	9e01      	ldr	r6, [sp, #4]
 80185e2:	9f04      	ldr	r7, [sp, #16]
 80185e4:	3630      	adds	r6, #48	; 0x30
 80185e6:	f805 6b01 	strb.w	r6, [r5], #1
 80185ea:	9e00      	ldr	r6, [sp, #0]
 80185ec:	1bae      	subs	r6, r5, r6
 80185ee:	42b7      	cmp	r7, r6
 80185f0:	4602      	mov	r2, r0
 80185f2:	460b      	mov	r3, r1
 80185f4:	d134      	bne.n	8018660 <_dtoa_r+0x708>
 80185f6:	f7e7 fe49 	bl	800028c <__adddf3>
 80185fa:	4642      	mov	r2, r8
 80185fc:	464b      	mov	r3, r9
 80185fe:	4606      	mov	r6, r0
 8018600:	460f      	mov	r7, r1
 8018602:	f7e8 fa89 	bl	8000b18 <__aeabi_dcmpgt>
 8018606:	b9c8      	cbnz	r0, 801863c <_dtoa_r+0x6e4>
 8018608:	4642      	mov	r2, r8
 801860a:	464b      	mov	r3, r9
 801860c:	4630      	mov	r0, r6
 801860e:	4639      	mov	r1, r7
 8018610:	f7e8 fa5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8018614:	b110      	cbz	r0, 801861c <_dtoa_r+0x6c4>
 8018616:	9b01      	ldr	r3, [sp, #4]
 8018618:	07db      	lsls	r3, r3, #31
 801861a:	d40f      	bmi.n	801863c <_dtoa_r+0x6e4>
 801861c:	4651      	mov	r1, sl
 801861e:	4620      	mov	r0, r4
 8018620:	f000 fe82 	bl	8019328 <_Bfree>
 8018624:	2300      	movs	r3, #0
 8018626:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018628:	702b      	strb	r3, [r5, #0]
 801862a:	f10b 0301 	add.w	r3, fp, #1
 801862e:	6013      	str	r3, [r2, #0]
 8018630:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018632:	2b00      	cmp	r3, #0
 8018634:	f43f ace2 	beq.w	8017ffc <_dtoa_r+0xa4>
 8018638:	601d      	str	r5, [r3, #0]
 801863a:	e4df      	b.n	8017ffc <_dtoa_r+0xa4>
 801863c:	465f      	mov	r7, fp
 801863e:	462b      	mov	r3, r5
 8018640:	461d      	mov	r5, r3
 8018642:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018646:	2a39      	cmp	r2, #57	; 0x39
 8018648:	d106      	bne.n	8018658 <_dtoa_r+0x700>
 801864a:	9a00      	ldr	r2, [sp, #0]
 801864c:	429a      	cmp	r2, r3
 801864e:	d1f7      	bne.n	8018640 <_dtoa_r+0x6e8>
 8018650:	9900      	ldr	r1, [sp, #0]
 8018652:	2230      	movs	r2, #48	; 0x30
 8018654:	3701      	adds	r7, #1
 8018656:	700a      	strb	r2, [r1, #0]
 8018658:	781a      	ldrb	r2, [r3, #0]
 801865a:	3201      	adds	r2, #1
 801865c:	701a      	strb	r2, [r3, #0]
 801865e:	e790      	b.n	8018582 <_dtoa_r+0x62a>
 8018660:	4ba3      	ldr	r3, [pc, #652]	; (80188f0 <_dtoa_r+0x998>)
 8018662:	2200      	movs	r2, #0
 8018664:	f7e7 ffc8 	bl	80005f8 <__aeabi_dmul>
 8018668:	2200      	movs	r2, #0
 801866a:	2300      	movs	r3, #0
 801866c:	4606      	mov	r6, r0
 801866e:	460f      	mov	r7, r1
 8018670:	f7e8 fa2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8018674:	2800      	cmp	r0, #0
 8018676:	d09e      	beq.n	80185b6 <_dtoa_r+0x65e>
 8018678:	e7d0      	b.n	801861c <_dtoa_r+0x6c4>
 801867a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801867c:	2a00      	cmp	r2, #0
 801867e:	f000 80ca 	beq.w	8018816 <_dtoa_r+0x8be>
 8018682:	9a07      	ldr	r2, [sp, #28]
 8018684:	2a01      	cmp	r2, #1
 8018686:	f300 80ad 	bgt.w	80187e4 <_dtoa_r+0x88c>
 801868a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801868c:	2a00      	cmp	r2, #0
 801868e:	f000 80a5 	beq.w	80187dc <_dtoa_r+0x884>
 8018692:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018696:	9e08      	ldr	r6, [sp, #32]
 8018698:	9d05      	ldr	r5, [sp, #20]
 801869a:	9a05      	ldr	r2, [sp, #20]
 801869c:	441a      	add	r2, r3
 801869e:	9205      	str	r2, [sp, #20]
 80186a0:	9a06      	ldr	r2, [sp, #24]
 80186a2:	2101      	movs	r1, #1
 80186a4:	441a      	add	r2, r3
 80186a6:	4620      	mov	r0, r4
 80186a8:	9206      	str	r2, [sp, #24]
 80186aa:	f000 ff3d 	bl	8019528 <__i2b>
 80186ae:	4607      	mov	r7, r0
 80186b0:	b165      	cbz	r5, 80186cc <_dtoa_r+0x774>
 80186b2:	9b06      	ldr	r3, [sp, #24]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	dd09      	ble.n	80186cc <_dtoa_r+0x774>
 80186b8:	42ab      	cmp	r3, r5
 80186ba:	9a05      	ldr	r2, [sp, #20]
 80186bc:	bfa8      	it	ge
 80186be:	462b      	movge	r3, r5
 80186c0:	1ad2      	subs	r2, r2, r3
 80186c2:	9205      	str	r2, [sp, #20]
 80186c4:	9a06      	ldr	r2, [sp, #24]
 80186c6:	1aed      	subs	r5, r5, r3
 80186c8:	1ad3      	subs	r3, r2, r3
 80186ca:	9306      	str	r3, [sp, #24]
 80186cc:	9b08      	ldr	r3, [sp, #32]
 80186ce:	b1f3      	cbz	r3, 801870e <_dtoa_r+0x7b6>
 80186d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	f000 80a3 	beq.w	801881e <_dtoa_r+0x8c6>
 80186d8:	2e00      	cmp	r6, #0
 80186da:	dd10      	ble.n	80186fe <_dtoa_r+0x7a6>
 80186dc:	4639      	mov	r1, r7
 80186de:	4632      	mov	r2, r6
 80186e0:	4620      	mov	r0, r4
 80186e2:	f000 ffe1 	bl	80196a8 <__pow5mult>
 80186e6:	4652      	mov	r2, sl
 80186e8:	4601      	mov	r1, r0
 80186ea:	4607      	mov	r7, r0
 80186ec:	4620      	mov	r0, r4
 80186ee:	f000 ff31 	bl	8019554 <__multiply>
 80186f2:	4651      	mov	r1, sl
 80186f4:	4680      	mov	r8, r0
 80186f6:	4620      	mov	r0, r4
 80186f8:	f000 fe16 	bl	8019328 <_Bfree>
 80186fc:	46c2      	mov	sl, r8
 80186fe:	9b08      	ldr	r3, [sp, #32]
 8018700:	1b9a      	subs	r2, r3, r6
 8018702:	d004      	beq.n	801870e <_dtoa_r+0x7b6>
 8018704:	4651      	mov	r1, sl
 8018706:	4620      	mov	r0, r4
 8018708:	f000 ffce 	bl	80196a8 <__pow5mult>
 801870c:	4682      	mov	sl, r0
 801870e:	2101      	movs	r1, #1
 8018710:	4620      	mov	r0, r4
 8018712:	f000 ff09 	bl	8019528 <__i2b>
 8018716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018718:	2b00      	cmp	r3, #0
 801871a:	4606      	mov	r6, r0
 801871c:	f340 8081 	ble.w	8018822 <_dtoa_r+0x8ca>
 8018720:	461a      	mov	r2, r3
 8018722:	4601      	mov	r1, r0
 8018724:	4620      	mov	r0, r4
 8018726:	f000 ffbf 	bl	80196a8 <__pow5mult>
 801872a:	9b07      	ldr	r3, [sp, #28]
 801872c:	2b01      	cmp	r3, #1
 801872e:	4606      	mov	r6, r0
 8018730:	dd7a      	ble.n	8018828 <_dtoa_r+0x8d0>
 8018732:	f04f 0800 	mov.w	r8, #0
 8018736:	6933      	ldr	r3, [r6, #16]
 8018738:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801873c:	6918      	ldr	r0, [r3, #16]
 801873e:	f000 fea5 	bl	801948c <__hi0bits>
 8018742:	f1c0 0020 	rsb	r0, r0, #32
 8018746:	9b06      	ldr	r3, [sp, #24]
 8018748:	4418      	add	r0, r3
 801874a:	f010 001f 	ands.w	r0, r0, #31
 801874e:	f000 8094 	beq.w	801887a <_dtoa_r+0x922>
 8018752:	f1c0 0320 	rsb	r3, r0, #32
 8018756:	2b04      	cmp	r3, #4
 8018758:	f340 8085 	ble.w	8018866 <_dtoa_r+0x90e>
 801875c:	9b05      	ldr	r3, [sp, #20]
 801875e:	f1c0 001c 	rsb	r0, r0, #28
 8018762:	4403      	add	r3, r0
 8018764:	9305      	str	r3, [sp, #20]
 8018766:	9b06      	ldr	r3, [sp, #24]
 8018768:	4403      	add	r3, r0
 801876a:	4405      	add	r5, r0
 801876c:	9306      	str	r3, [sp, #24]
 801876e:	9b05      	ldr	r3, [sp, #20]
 8018770:	2b00      	cmp	r3, #0
 8018772:	dd05      	ble.n	8018780 <_dtoa_r+0x828>
 8018774:	4651      	mov	r1, sl
 8018776:	461a      	mov	r2, r3
 8018778:	4620      	mov	r0, r4
 801877a:	f000 ffef 	bl	801975c <__lshift>
 801877e:	4682      	mov	sl, r0
 8018780:	9b06      	ldr	r3, [sp, #24]
 8018782:	2b00      	cmp	r3, #0
 8018784:	dd05      	ble.n	8018792 <_dtoa_r+0x83a>
 8018786:	4631      	mov	r1, r6
 8018788:	461a      	mov	r2, r3
 801878a:	4620      	mov	r0, r4
 801878c:	f000 ffe6 	bl	801975c <__lshift>
 8018790:	4606      	mov	r6, r0
 8018792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018794:	2b00      	cmp	r3, #0
 8018796:	d072      	beq.n	801887e <_dtoa_r+0x926>
 8018798:	4631      	mov	r1, r6
 801879a:	4650      	mov	r0, sl
 801879c:	f001 f84a 	bl	8019834 <__mcmp>
 80187a0:	2800      	cmp	r0, #0
 80187a2:	da6c      	bge.n	801887e <_dtoa_r+0x926>
 80187a4:	2300      	movs	r3, #0
 80187a6:	4651      	mov	r1, sl
 80187a8:	220a      	movs	r2, #10
 80187aa:	4620      	mov	r0, r4
 80187ac:	f000 fdde 	bl	801936c <__multadd>
 80187b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80187b6:	4682      	mov	sl, r0
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	f000 81b0 	beq.w	8018b1e <_dtoa_r+0xbc6>
 80187be:	2300      	movs	r3, #0
 80187c0:	4639      	mov	r1, r7
 80187c2:	220a      	movs	r2, #10
 80187c4:	4620      	mov	r0, r4
 80187c6:	f000 fdd1 	bl	801936c <__multadd>
 80187ca:	9b01      	ldr	r3, [sp, #4]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	4607      	mov	r7, r0
 80187d0:	f300 8096 	bgt.w	8018900 <_dtoa_r+0x9a8>
 80187d4:	9b07      	ldr	r3, [sp, #28]
 80187d6:	2b02      	cmp	r3, #2
 80187d8:	dc59      	bgt.n	801888e <_dtoa_r+0x936>
 80187da:	e091      	b.n	8018900 <_dtoa_r+0x9a8>
 80187dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80187de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80187e2:	e758      	b.n	8018696 <_dtoa_r+0x73e>
 80187e4:	9b04      	ldr	r3, [sp, #16]
 80187e6:	1e5e      	subs	r6, r3, #1
 80187e8:	9b08      	ldr	r3, [sp, #32]
 80187ea:	42b3      	cmp	r3, r6
 80187ec:	bfbf      	itttt	lt
 80187ee:	9b08      	ldrlt	r3, [sp, #32]
 80187f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80187f2:	9608      	strlt	r6, [sp, #32]
 80187f4:	1af3      	sublt	r3, r6, r3
 80187f6:	bfb4      	ite	lt
 80187f8:	18d2      	addlt	r2, r2, r3
 80187fa:	1b9e      	subge	r6, r3, r6
 80187fc:	9b04      	ldr	r3, [sp, #16]
 80187fe:	bfbc      	itt	lt
 8018800:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8018802:	2600      	movlt	r6, #0
 8018804:	2b00      	cmp	r3, #0
 8018806:	bfb7      	itett	lt
 8018808:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801880c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8018810:	1a9d      	sublt	r5, r3, r2
 8018812:	2300      	movlt	r3, #0
 8018814:	e741      	b.n	801869a <_dtoa_r+0x742>
 8018816:	9e08      	ldr	r6, [sp, #32]
 8018818:	9d05      	ldr	r5, [sp, #20]
 801881a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801881c:	e748      	b.n	80186b0 <_dtoa_r+0x758>
 801881e:	9a08      	ldr	r2, [sp, #32]
 8018820:	e770      	b.n	8018704 <_dtoa_r+0x7ac>
 8018822:	9b07      	ldr	r3, [sp, #28]
 8018824:	2b01      	cmp	r3, #1
 8018826:	dc19      	bgt.n	801885c <_dtoa_r+0x904>
 8018828:	9b02      	ldr	r3, [sp, #8]
 801882a:	b9bb      	cbnz	r3, 801885c <_dtoa_r+0x904>
 801882c:	9b03      	ldr	r3, [sp, #12]
 801882e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018832:	b99b      	cbnz	r3, 801885c <_dtoa_r+0x904>
 8018834:	9b03      	ldr	r3, [sp, #12]
 8018836:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801883a:	0d1b      	lsrs	r3, r3, #20
 801883c:	051b      	lsls	r3, r3, #20
 801883e:	b183      	cbz	r3, 8018862 <_dtoa_r+0x90a>
 8018840:	9b05      	ldr	r3, [sp, #20]
 8018842:	3301      	adds	r3, #1
 8018844:	9305      	str	r3, [sp, #20]
 8018846:	9b06      	ldr	r3, [sp, #24]
 8018848:	3301      	adds	r3, #1
 801884a:	9306      	str	r3, [sp, #24]
 801884c:	f04f 0801 	mov.w	r8, #1
 8018850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018852:	2b00      	cmp	r3, #0
 8018854:	f47f af6f 	bne.w	8018736 <_dtoa_r+0x7de>
 8018858:	2001      	movs	r0, #1
 801885a:	e774      	b.n	8018746 <_dtoa_r+0x7ee>
 801885c:	f04f 0800 	mov.w	r8, #0
 8018860:	e7f6      	b.n	8018850 <_dtoa_r+0x8f8>
 8018862:	4698      	mov	r8, r3
 8018864:	e7f4      	b.n	8018850 <_dtoa_r+0x8f8>
 8018866:	d082      	beq.n	801876e <_dtoa_r+0x816>
 8018868:	9a05      	ldr	r2, [sp, #20]
 801886a:	331c      	adds	r3, #28
 801886c:	441a      	add	r2, r3
 801886e:	9205      	str	r2, [sp, #20]
 8018870:	9a06      	ldr	r2, [sp, #24]
 8018872:	441a      	add	r2, r3
 8018874:	441d      	add	r5, r3
 8018876:	9206      	str	r2, [sp, #24]
 8018878:	e779      	b.n	801876e <_dtoa_r+0x816>
 801887a:	4603      	mov	r3, r0
 801887c:	e7f4      	b.n	8018868 <_dtoa_r+0x910>
 801887e:	9b04      	ldr	r3, [sp, #16]
 8018880:	2b00      	cmp	r3, #0
 8018882:	dc37      	bgt.n	80188f4 <_dtoa_r+0x99c>
 8018884:	9b07      	ldr	r3, [sp, #28]
 8018886:	2b02      	cmp	r3, #2
 8018888:	dd34      	ble.n	80188f4 <_dtoa_r+0x99c>
 801888a:	9b04      	ldr	r3, [sp, #16]
 801888c:	9301      	str	r3, [sp, #4]
 801888e:	9b01      	ldr	r3, [sp, #4]
 8018890:	b963      	cbnz	r3, 80188ac <_dtoa_r+0x954>
 8018892:	4631      	mov	r1, r6
 8018894:	2205      	movs	r2, #5
 8018896:	4620      	mov	r0, r4
 8018898:	f000 fd68 	bl	801936c <__multadd>
 801889c:	4601      	mov	r1, r0
 801889e:	4606      	mov	r6, r0
 80188a0:	4650      	mov	r0, sl
 80188a2:	f000 ffc7 	bl	8019834 <__mcmp>
 80188a6:	2800      	cmp	r0, #0
 80188a8:	f73f adbb 	bgt.w	8018422 <_dtoa_r+0x4ca>
 80188ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80188ae:	9d00      	ldr	r5, [sp, #0]
 80188b0:	ea6f 0b03 	mvn.w	fp, r3
 80188b4:	f04f 0800 	mov.w	r8, #0
 80188b8:	4631      	mov	r1, r6
 80188ba:	4620      	mov	r0, r4
 80188bc:	f000 fd34 	bl	8019328 <_Bfree>
 80188c0:	2f00      	cmp	r7, #0
 80188c2:	f43f aeab 	beq.w	801861c <_dtoa_r+0x6c4>
 80188c6:	f1b8 0f00 	cmp.w	r8, #0
 80188ca:	d005      	beq.n	80188d8 <_dtoa_r+0x980>
 80188cc:	45b8      	cmp	r8, r7
 80188ce:	d003      	beq.n	80188d8 <_dtoa_r+0x980>
 80188d0:	4641      	mov	r1, r8
 80188d2:	4620      	mov	r0, r4
 80188d4:	f000 fd28 	bl	8019328 <_Bfree>
 80188d8:	4639      	mov	r1, r7
 80188da:	4620      	mov	r0, r4
 80188dc:	f000 fd24 	bl	8019328 <_Bfree>
 80188e0:	e69c      	b.n	801861c <_dtoa_r+0x6c4>
 80188e2:	2600      	movs	r6, #0
 80188e4:	4637      	mov	r7, r6
 80188e6:	e7e1      	b.n	80188ac <_dtoa_r+0x954>
 80188e8:	46bb      	mov	fp, r7
 80188ea:	4637      	mov	r7, r6
 80188ec:	e599      	b.n	8018422 <_dtoa_r+0x4ca>
 80188ee:	bf00      	nop
 80188f0:	40240000 	.word	0x40240000
 80188f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	f000 80c8 	beq.w	8018a8c <_dtoa_r+0xb34>
 80188fc:	9b04      	ldr	r3, [sp, #16]
 80188fe:	9301      	str	r3, [sp, #4]
 8018900:	2d00      	cmp	r5, #0
 8018902:	dd05      	ble.n	8018910 <_dtoa_r+0x9b8>
 8018904:	4639      	mov	r1, r7
 8018906:	462a      	mov	r2, r5
 8018908:	4620      	mov	r0, r4
 801890a:	f000 ff27 	bl	801975c <__lshift>
 801890e:	4607      	mov	r7, r0
 8018910:	f1b8 0f00 	cmp.w	r8, #0
 8018914:	d05b      	beq.n	80189ce <_dtoa_r+0xa76>
 8018916:	6879      	ldr	r1, [r7, #4]
 8018918:	4620      	mov	r0, r4
 801891a:	f000 fcc5 	bl	80192a8 <_Balloc>
 801891e:	4605      	mov	r5, r0
 8018920:	b928      	cbnz	r0, 801892e <_dtoa_r+0x9d6>
 8018922:	4b83      	ldr	r3, [pc, #524]	; (8018b30 <_dtoa_r+0xbd8>)
 8018924:	4602      	mov	r2, r0
 8018926:	f240 21ef 	movw	r1, #751	; 0x2ef
 801892a:	f7ff bb2e 	b.w	8017f8a <_dtoa_r+0x32>
 801892e:	693a      	ldr	r2, [r7, #16]
 8018930:	3202      	adds	r2, #2
 8018932:	0092      	lsls	r2, r2, #2
 8018934:	f107 010c 	add.w	r1, r7, #12
 8018938:	300c      	adds	r0, #12
 801893a:	f7ff fa4a 	bl	8017dd2 <memcpy>
 801893e:	2201      	movs	r2, #1
 8018940:	4629      	mov	r1, r5
 8018942:	4620      	mov	r0, r4
 8018944:	f000 ff0a 	bl	801975c <__lshift>
 8018948:	9b00      	ldr	r3, [sp, #0]
 801894a:	3301      	adds	r3, #1
 801894c:	9304      	str	r3, [sp, #16]
 801894e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018952:	4413      	add	r3, r2
 8018954:	9308      	str	r3, [sp, #32]
 8018956:	9b02      	ldr	r3, [sp, #8]
 8018958:	f003 0301 	and.w	r3, r3, #1
 801895c:	46b8      	mov	r8, r7
 801895e:	9306      	str	r3, [sp, #24]
 8018960:	4607      	mov	r7, r0
 8018962:	9b04      	ldr	r3, [sp, #16]
 8018964:	4631      	mov	r1, r6
 8018966:	3b01      	subs	r3, #1
 8018968:	4650      	mov	r0, sl
 801896a:	9301      	str	r3, [sp, #4]
 801896c:	f7ff fa6c 	bl	8017e48 <quorem>
 8018970:	4641      	mov	r1, r8
 8018972:	9002      	str	r0, [sp, #8]
 8018974:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8018978:	4650      	mov	r0, sl
 801897a:	f000 ff5b 	bl	8019834 <__mcmp>
 801897e:	463a      	mov	r2, r7
 8018980:	9005      	str	r0, [sp, #20]
 8018982:	4631      	mov	r1, r6
 8018984:	4620      	mov	r0, r4
 8018986:	f000 ff71 	bl	801986c <__mdiff>
 801898a:	68c2      	ldr	r2, [r0, #12]
 801898c:	4605      	mov	r5, r0
 801898e:	bb02      	cbnz	r2, 80189d2 <_dtoa_r+0xa7a>
 8018990:	4601      	mov	r1, r0
 8018992:	4650      	mov	r0, sl
 8018994:	f000 ff4e 	bl	8019834 <__mcmp>
 8018998:	4602      	mov	r2, r0
 801899a:	4629      	mov	r1, r5
 801899c:	4620      	mov	r0, r4
 801899e:	9209      	str	r2, [sp, #36]	; 0x24
 80189a0:	f000 fcc2 	bl	8019328 <_Bfree>
 80189a4:	9b07      	ldr	r3, [sp, #28]
 80189a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80189a8:	9d04      	ldr	r5, [sp, #16]
 80189aa:	ea43 0102 	orr.w	r1, r3, r2
 80189ae:	9b06      	ldr	r3, [sp, #24]
 80189b0:	4319      	orrs	r1, r3
 80189b2:	d110      	bne.n	80189d6 <_dtoa_r+0xa7e>
 80189b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80189b8:	d029      	beq.n	8018a0e <_dtoa_r+0xab6>
 80189ba:	9b05      	ldr	r3, [sp, #20]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	dd02      	ble.n	80189c6 <_dtoa_r+0xa6e>
 80189c0:	9b02      	ldr	r3, [sp, #8]
 80189c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80189c6:	9b01      	ldr	r3, [sp, #4]
 80189c8:	f883 9000 	strb.w	r9, [r3]
 80189cc:	e774      	b.n	80188b8 <_dtoa_r+0x960>
 80189ce:	4638      	mov	r0, r7
 80189d0:	e7ba      	b.n	8018948 <_dtoa_r+0x9f0>
 80189d2:	2201      	movs	r2, #1
 80189d4:	e7e1      	b.n	801899a <_dtoa_r+0xa42>
 80189d6:	9b05      	ldr	r3, [sp, #20]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	db04      	blt.n	80189e6 <_dtoa_r+0xa8e>
 80189dc:	9907      	ldr	r1, [sp, #28]
 80189de:	430b      	orrs	r3, r1
 80189e0:	9906      	ldr	r1, [sp, #24]
 80189e2:	430b      	orrs	r3, r1
 80189e4:	d120      	bne.n	8018a28 <_dtoa_r+0xad0>
 80189e6:	2a00      	cmp	r2, #0
 80189e8:	dded      	ble.n	80189c6 <_dtoa_r+0xa6e>
 80189ea:	4651      	mov	r1, sl
 80189ec:	2201      	movs	r2, #1
 80189ee:	4620      	mov	r0, r4
 80189f0:	f000 feb4 	bl	801975c <__lshift>
 80189f4:	4631      	mov	r1, r6
 80189f6:	4682      	mov	sl, r0
 80189f8:	f000 ff1c 	bl	8019834 <__mcmp>
 80189fc:	2800      	cmp	r0, #0
 80189fe:	dc03      	bgt.n	8018a08 <_dtoa_r+0xab0>
 8018a00:	d1e1      	bne.n	80189c6 <_dtoa_r+0xa6e>
 8018a02:	f019 0f01 	tst.w	r9, #1
 8018a06:	d0de      	beq.n	80189c6 <_dtoa_r+0xa6e>
 8018a08:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018a0c:	d1d8      	bne.n	80189c0 <_dtoa_r+0xa68>
 8018a0e:	9a01      	ldr	r2, [sp, #4]
 8018a10:	2339      	movs	r3, #57	; 0x39
 8018a12:	7013      	strb	r3, [r2, #0]
 8018a14:	462b      	mov	r3, r5
 8018a16:	461d      	mov	r5, r3
 8018a18:	3b01      	subs	r3, #1
 8018a1a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018a1e:	2a39      	cmp	r2, #57	; 0x39
 8018a20:	d06c      	beq.n	8018afc <_dtoa_r+0xba4>
 8018a22:	3201      	adds	r2, #1
 8018a24:	701a      	strb	r2, [r3, #0]
 8018a26:	e747      	b.n	80188b8 <_dtoa_r+0x960>
 8018a28:	2a00      	cmp	r2, #0
 8018a2a:	dd07      	ble.n	8018a3c <_dtoa_r+0xae4>
 8018a2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018a30:	d0ed      	beq.n	8018a0e <_dtoa_r+0xab6>
 8018a32:	9a01      	ldr	r2, [sp, #4]
 8018a34:	f109 0301 	add.w	r3, r9, #1
 8018a38:	7013      	strb	r3, [r2, #0]
 8018a3a:	e73d      	b.n	80188b8 <_dtoa_r+0x960>
 8018a3c:	9b04      	ldr	r3, [sp, #16]
 8018a3e:	9a08      	ldr	r2, [sp, #32]
 8018a40:	f803 9c01 	strb.w	r9, [r3, #-1]
 8018a44:	4293      	cmp	r3, r2
 8018a46:	d043      	beq.n	8018ad0 <_dtoa_r+0xb78>
 8018a48:	4651      	mov	r1, sl
 8018a4a:	2300      	movs	r3, #0
 8018a4c:	220a      	movs	r2, #10
 8018a4e:	4620      	mov	r0, r4
 8018a50:	f000 fc8c 	bl	801936c <__multadd>
 8018a54:	45b8      	cmp	r8, r7
 8018a56:	4682      	mov	sl, r0
 8018a58:	f04f 0300 	mov.w	r3, #0
 8018a5c:	f04f 020a 	mov.w	r2, #10
 8018a60:	4641      	mov	r1, r8
 8018a62:	4620      	mov	r0, r4
 8018a64:	d107      	bne.n	8018a76 <_dtoa_r+0xb1e>
 8018a66:	f000 fc81 	bl	801936c <__multadd>
 8018a6a:	4680      	mov	r8, r0
 8018a6c:	4607      	mov	r7, r0
 8018a6e:	9b04      	ldr	r3, [sp, #16]
 8018a70:	3301      	adds	r3, #1
 8018a72:	9304      	str	r3, [sp, #16]
 8018a74:	e775      	b.n	8018962 <_dtoa_r+0xa0a>
 8018a76:	f000 fc79 	bl	801936c <__multadd>
 8018a7a:	4639      	mov	r1, r7
 8018a7c:	4680      	mov	r8, r0
 8018a7e:	2300      	movs	r3, #0
 8018a80:	220a      	movs	r2, #10
 8018a82:	4620      	mov	r0, r4
 8018a84:	f000 fc72 	bl	801936c <__multadd>
 8018a88:	4607      	mov	r7, r0
 8018a8a:	e7f0      	b.n	8018a6e <_dtoa_r+0xb16>
 8018a8c:	9b04      	ldr	r3, [sp, #16]
 8018a8e:	9301      	str	r3, [sp, #4]
 8018a90:	9d00      	ldr	r5, [sp, #0]
 8018a92:	4631      	mov	r1, r6
 8018a94:	4650      	mov	r0, sl
 8018a96:	f7ff f9d7 	bl	8017e48 <quorem>
 8018a9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8018a9e:	9b00      	ldr	r3, [sp, #0]
 8018aa0:	f805 9b01 	strb.w	r9, [r5], #1
 8018aa4:	1aea      	subs	r2, r5, r3
 8018aa6:	9b01      	ldr	r3, [sp, #4]
 8018aa8:	4293      	cmp	r3, r2
 8018aaa:	dd07      	ble.n	8018abc <_dtoa_r+0xb64>
 8018aac:	4651      	mov	r1, sl
 8018aae:	2300      	movs	r3, #0
 8018ab0:	220a      	movs	r2, #10
 8018ab2:	4620      	mov	r0, r4
 8018ab4:	f000 fc5a 	bl	801936c <__multadd>
 8018ab8:	4682      	mov	sl, r0
 8018aba:	e7ea      	b.n	8018a92 <_dtoa_r+0xb3a>
 8018abc:	9b01      	ldr	r3, [sp, #4]
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	bfc8      	it	gt
 8018ac2:	461d      	movgt	r5, r3
 8018ac4:	9b00      	ldr	r3, [sp, #0]
 8018ac6:	bfd8      	it	le
 8018ac8:	2501      	movle	r5, #1
 8018aca:	441d      	add	r5, r3
 8018acc:	f04f 0800 	mov.w	r8, #0
 8018ad0:	4651      	mov	r1, sl
 8018ad2:	2201      	movs	r2, #1
 8018ad4:	4620      	mov	r0, r4
 8018ad6:	f000 fe41 	bl	801975c <__lshift>
 8018ada:	4631      	mov	r1, r6
 8018adc:	4682      	mov	sl, r0
 8018ade:	f000 fea9 	bl	8019834 <__mcmp>
 8018ae2:	2800      	cmp	r0, #0
 8018ae4:	dc96      	bgt.n	8018a14 <_dtoa_r+0xabc>
 8018ae6:	d102      	bne.n	8018aee <_dtoa_r+0xb96>
 8018ae8:	f019 0f01 	tst.w	r9, #1
 8018aec:	d192      	bne.n	8018a14 <_dtoa_r+0xabc>
 8018aee:	462b      	mov	r3, r5
 8018af0:	461d      	mov	r5, r3
 8018af2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018af6:	2a30      	cmp	r2, #48	; 0x30
 8018af8:	d0fa      	beq.n	8018af0 <_dtoa_r+0xb98>
 8018afa:	e6dd      	b.n	80188b8 <_dtoa_r+0x960>
 8018afc:	9a00      	ldr	r2, [sp, #0]
 8018afe:	429a      	cmp	r2, r3
 8018b00:	d189      	bne.n	8018a16 <_dtoa_r+0xabe>
 8018b02:	f10b 0b01 	add.w	fp, fp, #1
 8018b06:	2331      	movs	r3, #49	; 0x31
 8018b08:	e796      	b.n	8018a38 <_dtoa_r+0xae0>
 8018b0a:	4b0a      	ldr	r3, [pc, #40]	; (8018b34 <_dtoa_r+0xbdc>)
 8018b0c:	f7ff ba99 	b.w	8018042 <_dtoa_r+0xea>
 8018b10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	f47f aa6d 	bne.w	8017ff2 <_dtoa_r+0x9a>
 8018b18:	4b07      	ldr	r3, [pc, #28]	; (8018b38 <_dtoa_r+0xbe0>)
 8018b1a:	f7ff ba92 	b.w	8018042 <_dtoa_r+0xea>
 8018b1e:	9b01      	ldr	r3, [sp, #4]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	dcb5      	bgt.n	8018a90 <_dtoa_r+0xb38>
 8018b24:	9b07      	ldr	r3, [sp, #28]
 8018b26:	2b02      	cmp	r3, #2
 8018b28:	f73f aeb1 	bgt.w	801888e <_dtoa_r+0x936>
 8018b2c:	e7b0      	b.n	8018a90 <_dtoa_r+0xb38>
 8018b2e:	bf00      	nop
 8018b30:	0801eed4 	.word	0x0801eed4
 8018b34:	0801ed91 	.word	0x0801ed91
 8018b38:	0801ee6f 	.word	0x0801ee6f

08018b3c <_free_r>:
 8018b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b3e:	2900      	cmp	r1, #0
 8018b40:	d044      	beq.n	8018bcc <_free_r+0x90>
 8018b42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b46:	9001      	str	r0, [sp, #4]
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	f1a1 0404 	sub.w	r4, r1, #4
 8018b4e:	bfb8      	it	lt
 8018b50:	18e4      	addlt	r4, r4, r3
 8018b52:	f7fd f941 	bl	8015dd8 <__malloc_lock>
 8018b56:	4a1e      	ldr	r2, [pc, #120]	; (8018bd0 <_free_r+0x94>)
 8018b58:	9801      	ldr	r0, [sp, #4]
 8018b5a:	6813      	ldr	r3, [r2, #0]
 8018b5c:	b933      	cbnz	r3, 8018b6c <_free_r+0x30>
 8018b5e:	6063      	str	r3, [r4, #4]
 8018b60:	6014      	str	r4, [r2, #0]
 8018b62:	b003      	add	sp, #12
 8018b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018b68:	f7fd b93c 	b.w	8015de4 <__malloc_unlock>
 8018b6c:	42a3      	cmp	r3, r4
 8018b6e:	d908      	bls.n	8018b82 <_free_r+0x46>
 8018b70:	6825      	ldr	r5, [r4, #0]
 8018b72:	1961      	adds	r1, r4, r5
 8018b74:	428b      	cmp	r3, r1
 8018b76:	bf01      	itttt	eq
 8018b78:	6819      	ldreq	r1, [r3, #0]
 8018b7a:	685b      	ldreq	r3, [r3, #4]
 8018b7c:	1949      	addeq	r1, r1, r5
 8018b7e:	6021      	streq	r1, [r4, #0]
 8018b80:	e7ed      	b.n	8018b5e <_free_r+0x22>
 8018b82:	461a      	mov	r2, r3
 8018b84:	685b      	ldr	r3, [r3, #4]
 8018b86:	b10b      	cbz	r3, 8018b8c <_free_r+0x50>
 8018b88:	42a3      	cmp	r3, r4
 8018b8a:	d9fa      	bls.n	8018b82 <_free_r+0x46>
 8018b8c:	6811      	ldr	r1, [r2, #0]
 8018b8e:	1855      	adds	r5, r2, r1
 8018b90:	42a5      	cmp	r5, r4
 8018b92:	d10b      	bne.n	8018bac <_free_r+0x70>
 8018b94:	6824      	ldr	r4, [r4, #0]
 8018b96:	4421      	add	r1, r4
 8018b98:	1854      	adds	r4, r2, r1
 8018b9a:	42a3      	cmp	r3, r4
 8018b9c:	6011      	str	r1, [r2, #0]
 8018b9e:	d1e0      	bne.n	8018b62 <_free_r+0x26>
 8018ba0:	681c      	ldr	r4, [r3, #0]
 8018ba2:	685b      	ldr	r3, [r3, #4]
 8018ba4:	6053      	str	r3, [r2, #4]
 8018ba6:	440c      	add	r4, r1
 8018ba8:	6014      	str	r4, [r2, #0]
 8018baa:	e7da      	b.n	8018b62 <_free_r+0x26>
 8018bac:	d902      	bls.n	8018bb4 <_free_r+0x78>
 8018bae:	230c      	movs	r3, #12
 8018bb0:	6003      	str	r3, [r0, #0]
 8018bb2:	e7d6      	b.n	8018b62 <_free_r+0x26>
 8018bb4:	6825      	ldr	r5, [r4, #0]
 8018bb6:	1961      	adds	r1, r4, r5
 8018bb8:	428b      	cmp	r3, r1
 8018bba:	bf04      	itt	eq
 8018bbc:	6819      	ldreq	r1, [r3, #0]
 8018bbe:	685b      	ldreq	r3, [r3, #4]
 8018bc0:	6063      	str	r3, [r4, #4]
 8018bc2:	bf04      	itt	eq
 8018bc4:	1949      	addeq	r1, r1, r5
 8018bc6:	6021      	streq	r1, [r4, #0]
 8018bc8:	6054      	str	r4, [r2, #4]
 8018bca:	e7ca      	b.n	8018b62 <_free_r+0x26>
 8018bcc:	b003      	add	sp, #12
 8018bce:	bd30      	pop	{r4, r5, pc}
 8018bd0:	200023d8 	.word	0x200023d8

08018bd4 <rshift>:
 8018bd4:	6903      	ldr	r3, [r0, #16]
 8018bd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018bda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018bde:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018be2:	f100 0414 	add.w	r4, r0, #20
 8018be6:	dd45      	ble.n	8018c74 <rshift+0xa0>
 8018be8:	f011 011f 	ands.w	r1, r1, #31
 8018bec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018bf0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018bf4:	d10c      	bne.n	8018c10 <rshift+0x3c>
 8018bf6:	f100 0710 	add.w	r7, r0, #16
 8018bfa:	4629      	mov	r1, r5
 8018bfc:	42b1      	cmp	r1, r6
 8018bfe:	d334      	bcc.n	8018c6a <rshift+0x96>
 8018c00:	1a9b      	subs	r3, r3, r2
 8018c02:	009b      	lsls	r3, r3, #2
 8018c04:	1eea      	subs	r2, r5, #3
 8018c06:	4296      	cmp	r6, r2
 8018c08:	bf38      	it	cc
 8018c0a:	2300      	movcc	r3, #0
 8018c0c:	4423      	add	r3, r4
 8018c0e:	e015      	b.n	8018c3c <rshift+0x68>
 8018c10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018c14:	f1c1 0820 	rsb	r8, r1, #32
 8018c18:	40cf      	lsrs	r7, r1
 8018c1a:	f105 0e04 	add.w	lr, r5, #4
 8018c1e:	46a1      	mov	r9, r4
 8018c20:	4576      	cmp	r6, lr
 8018c22:	46f4      	mov	ip, lr
 8018c24:	d815      	bhi.n	8018c52 <rshift+0x7e>
 8018c26:	1a9a      	subs	r2, r3, r2
 8018c28:	0092      	lsls	r2, r2, #2
 8018c2a:	3a04      	subs	r2, #4
 8018c2c:	3501      	adds	r5, #1
 8018c2e:	42ae      	cmp	r6, r5
 8018c30:	bf38      	it	cc
 8018c32:	2200      	movcc	r2, #0
 8018c34:	18a3      	adds	r3, r4, r2
 8018c36:	50a7      	str	r7, [r4, r2]
 8018c38:	b107      	cbz	r7, 8018c3c <rshift+0x68>
 8018c3a:	3304      	adds	r3, #4
 8018c3c:	1b1a      	subs	r2, r3, r4
 8018c3e:	42a3      	cmp	r3, r4
 8018c40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018c44:	bf08      	it	eq
 8018c46:	2300      	moveq	r3, #0
 8018c48:	6102      	str	r2, [r0, #16]
 8018c4a:	bf08      	it	eq
 8018c4c:	6143      	streq	r3, [r0, #20]
 8018c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c52:	f8dc c000 	ldr.w	ip, [ip]
 8018c56:	fa0c fc08 	lsl.w	ip, ip, r8
 8018c5a:	ea4c 0707 	orr.w	r7, ip, r7
 8018c5e:	f849 7b04 	str.w	r7, [r9], #4
 8018c62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018c66:	40cf      	lsrs	r7, r1
 8018c68:	e7da      	b.n	8018c20 <rshift+0x4c>
 8018c6a:	f851 cb04 	ldr.w	ip, [r1], #4
 8018c6e:	f847 cf04 	str.w	ip, [r7, #4]!
 8018c72:	e7c3      	b.n	8018bfc <rshift+0x28>
 8018c74:	4623      	mov	r3, r4
 8018c76:	e7e1      	b.n	8018c3c <rshift+0x68>

08018c78 <__hexdig_fun>:
 8018c78:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018c7c:	2b09      	cmp	r3, #9
 8018c7e:	d802      	bhi.n	8018c86 <__hexdig_fun+0xe>
 8018c80:	3820      	subs	r0, #32
 8018c82:	b2c0      	uxtb	r0, r0
 8018c84:	4770      	bx	lr
 8018c86:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018c8a:	2b05      	cmp	r3, #5
 8018c8c:	d801      	bhi.n	8018c92 <__hexdig_fun+0x1a>
 8018c8e:	3847      	subs	r0, #71	; 0x47
 8018c90:	e7f7      	b.n	8018c82 <__hexdig_fun+0xa>
 8018c92:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018c96:	2b05      	cmp	r3, #5
 8018c98:	d801      	bhi.n	8018c9e <__hexdig_fun+0x26>
 8018c9a:	3827      	subs	r0, #39	; 0x27
 8018c9c:	e7f1      	b.n	8018c82 <__hexdig_fun+0xa>
 8018c9e:	2000      	movs	r0, #0
 8018ca0:	4770      	bx	lr
	...

08018ca4 <__gethex>:
 8018ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ca8:	4617      	mov	r7, r2
 8018caa:	680a      	ldr	r2, [r1, #0]
 8018cac:	b085      	sub	sp, #20
 8018cae:	f102 0b02 	add.w	fp, r2, #2
 8018cb2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018cb6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018cba:	4681      	mov	r9, r0
 8018cbc:	468a      	mov	sl, r1
 8018cbe:	9302      	str	r3, [sp, #8]
 8018cc0:	32fe      	adds	r2, #254	; 0xfe
 8018cc2:	eb02 030b 	add.w	r3, r2, fp
 8018cc6:	46d8      	mov	r8, fp
 8018cc8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8018ccc:	9301      	str	r3, [sp, #4]
 8018cce:	2830      	cmp	r0, #48	; 0x30
 8018cd0:	d0f7      	beq.n	8018cc2 <__gethex+0x1e>
 8018cd2:	f7ff ffd1 	bl	8018c78 <__hexdig_fun>
 8018cd6:	4604      	mov	r4, r0
 8018cd8:	2800      	cmp	r0, #0
 8018cda:	d138      	bne.n	8018d4e <__gethex+0xaa>
 8018cdc:	49a7      	ldr	r1, [pc, #668]	; (8018f7c <__gethex+0x2d8>)
 8018cde:	2201      	movs	r2, #1
 8018ce0:	4640      	mov	r0, r8
 8018ce2:	f7fe ff62 	bl	8017baa <strncmp>
 8018ce6:	4606      	mov	r6, r0
 8018ce8:	2800      	cmp	r0, #0
 8018cea:	d169      	bne.n	8018dc0 <__gethex+0x11c>
 8018cec:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018cf0:	465d      	mov	r5, fp
 8018cf2:	f7ff ffc1 	bl	8018c78 <__hexdig_fun>
 8018cf6:	2800      	cmp	r0, #0
 8018cf8:	d064      	beq.n	8018dc4 <__gethex+0x120>
 8018cfa:	465a      	mov	r2, fp
 8018cfc:	7810      	ldrb	r0, [r2, #0]
 8018cfe:	2830      	cmp	r0, #48	; 0x30
 8018d00:	4690      	mov	r8, r2
 8018d02:	f102 0201 	add.w	r2, r2, #1
 8018d06:	d0f9      	beq.n	8018cfc <__gethex+0x58>
 8018d08:	f7ff ffb6 	bl	8018c78 <__hexdig_fun>
 8018d0c:	2301      	movs	r3, #1
 8018d0e:	fab0 f480 	clz	r4, r0
 8018d12:	0964      	lsrs	r4, r4, #5
 8018d14:	465e      	mov	r6, fp
 8018d16:	9301      	str	r3, [sp, #4]
 8018d18:	4642      	mov	r2, r8
 8018d1a:	4615      	mov	r5, r2
 8018d1c:	3201      	adds	r2, #1
 8018d1e:	7828      	ldrb	r0, [r5, #0]
 8018d20:	f7ff ffaa 	bl	8018c78 <__hexdig_fun>
 8018d24:	2800      	cmp	r0, #0
 8018d26:	d1f8      	bne.n	8018d1a <__gethex+0x76>
 8018d28:	4994      	ldr	r1, [pc, #592]	; (8018f7c <__gethex+0x2d8>)
 8018d2a:	2201      	movs	r2, #1
 8018d2c:	4628      	mov	r0, r5
 8018d2e:	f7fe ff3c 	bl	8017baa <strncmp>
 8018d32:	b978      	cbnz	r0, 8018d54 <__gethex+0xb0>
 8018d34:	b946      	cbnz	r6, 8018d48 <__gethex+0xa4>
 8018d36:	1c6e      	adds	r6, r5, #1
 8018d38:	4632      	mov	r2, r6
 8018d3a:	4615      	mov	r5, r2
 8018d3c:	3201      	adds	r2, #1
 8018d3e:	7828      	ldrb	r0, [r5, #0]
 8018d40:	f7ff ff9a 	bl	8018c78 <__hexdig_fun>
 8018d44:	2800      	cmp	r0, #0
 8018d46:	d1f8      	bne.n	8018d3a <__gethex+0x96>
 8018d48:	1b73      	subs	r3, r6, r5
 8018d4a:	009e      	lsls	r6, r3, #2
 8018d4c:	e004      	b.n	8018d58 <__gethex+0xb4>
 8018d4e:	2400      	movs	r4, #0
 8018d50:	4626      	mov	r6, r4
 8018d52:	e7e1      	b.n	8018d18 <__gethex+0x74>
 8018d54:	2e00      	cmp	r6, #0
 8018d56:	d1f7      	bne.n	8018d48 <__gethex+0xa4>
 8018d58:	782b      	ldrb	r3, [r5, #0]
 8018d5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018d5e:	2b50      	cmp	r3, #80	; 0x50
 8018d60:	d13d      	bne.n	8018dde <__gethex+0x13a>
 8018d62:	786b      	ldrb	r3, [r5, #1]
 8018d64:	2b2b      	cmp	r3, #43	; 0x2b
 8018d66:	d02f      	beq.n	8018dc8 <__gethex+0x124>
 8018d68:	2b2d      	cmp	r3, #45	; 0x2d
 8018d6a:	d031      	beq.n	8018dd0 <__gethex+0x12c>
 8018d6c:	1c69      	adds	r1, r5, #1
 8018d6e:	f04f 0b00 	mov.w	fp, #0
 8018d72:	7808      	ldrb	r0, [r1, #0]
 8018d74:	f7ff ff80 	bl	8018c78 <__hexdig_fun>
 8018d78:	1e42      	subs	r2, r0, #1
 8018d7a:	b2d2      	uxtb	r2, r2
 8018d7c:	2a18      	cmp	r2, #24
 8018d7e:	d82e      	bhi.n	8018dde <__gethex+0x13a>
 8018d80:	f1a0 0210 	sub.w	r2, r0, #16
 8018d84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018d88:	f7ff ff76 	bl	8018c78 <__hexdig_fun>
 8018d8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8018d90:	fa5f fc8c 	uxtb.w	ip, ip
 8018d94:	f1bc 0f18 	cmp.w	ip, #24
 8018d98:	d91d      	bls.n	8018dd6 <__gethex+0x132>
 8018d9a:	f1bb 0f00 	cmp.w	fp, #0
 8018d9e:	d000      	beq.n	8018da2 <__gethex+0xfe>
 8018da0:	4252      	negs	r2, r2
 8018da2:	4416      	add	r6, r2
 8018da4:	f8ca 1000 	str.w	r1, [sl]
 8018da8:	b1dc      	cbz	r4, 8018de2 <__gethex+0x13e>
 8018daa:	9b01      	ldr	r3, [sp, #4]
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	bf14      	ite	ne
 8018db0:	f04f 0800 	movne.w	r8, #0
 8018db4:	f04f 0806 	moveq.w	r8, #6
 8018db8:	4640      	mov	r0, r8
 8018dba:	b005      	add	sp, #20
 8018dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dc0:	4645      	mov	r5, r8
 8018dc2:	4626      	mov	r6, r4
 8018dc4:	2401      	movs	r4, #1
 8018dc6:	e7c7      	b.n	8018d58 <__gethex+0xb4>
 8018dc8:	f04f 0b00 	mov.w	fp, #0
 8018dcc:	1ca9      	adds	r1, r5, #2
 8018dce:	e7d0      	b.n	8018d72 <__gethex+0xce>
 8018dd0:	f04f 0b01 	mov.w	fp, #1
 8018dd4:	e7fa      	b.n	8018dcc <__gethex+0x128>
 8018dd6:	230a      	movs	r3, #10
 8018dd8:	fb03 0002 	mla	r0, r3, r2, r0
 8018ddc:	e7d0      	b.n	8018d80 <__gethex+0xdc>
 8018dde:	4629      	mov	r1, r5
 8018de0:	e7e0      	b.n	8018da4 <__gethex+0x100>
 8018de2:	eba5 0308 	sub.w	r3, r5, r8
 8018de6:	3b01      	subs	r3, #1
 8018de8:	4621      	mov	r1, r4
 8018dea:	2b07      	cmp	r3, #7
 8018dec:	dc0a      	bgt.n	8018e04 <__gethex+0x160>
 8018dee:	4648      	mov	r0, r9
 8018df0:	f000 fa5a 	bl	80192a8 <_Balloc>
 8018df4:	4604      	mov	r4, r0
 8018df6:	b940      	cbnz	r0, 8018e0a <__gethex+0x166>
 8018df8:	4b61      	ldr	r3, [pc, #388]	; (8018f80 <__gethex+0x2dc>)
 8018dfa:	4602      	mov	r2, r0
 8018dfc:	21e4      	movs	r1, #228	; 0xe4
 8018dfe:	4861      	ldr	r0, [pc, #388]	; (8018f84 <__gethex+0x2e0>)
 8018e00:	f7ff f804 	bl	8017e0c <__assert_func>
 8018e04:	3101      	adds	r1, #1
 8018e06:	105b      	asrs	r3, r3, #1
 8018e08:	e7ef      	b.n	8018dea <__gethex+0x146>
 8018e0a:	f100 0a14 	add.w	sl, r0, #20
 8018e0e:	2300      	movs	r3, #0
 8018e10:	495a      	ldr	r1, [pc, #360]	; (8018f7c <__gethex+0x2d8>)
 8018e12:	f8cd a004 	str.w	sl, [sp, #4]
 8018e16:	469b      	mov	fp, r3
 8018e18:	45a8      	cmp	r8, r5
 8018e1a:	d342      	bcc.n	8018ea2 <__gethex+0x1fe>
 8018e1c:	9801      	ldr	r0, [sp, #4]
 8018e1e:	f840 bb04 	str.w	fp, [r0], #4
 8018e22:	eba0 000a 	sub.w	r0, r0, sl
 8018e26:	1080      	asrs	r0, r0, #2
 8018e28:	6120      	str	r0, [r4, #16]
 8018e2a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8018e2e:	4658      	mov	r0, fp
 8018e30:	f000 fb2c 	bl	801948c <__hi0bits>
 8018e34:	683d      	ldr	r5, [r7, #0]
 8018e36:	eba8 0000 	sub.w	r0, r8, r0
 8018e3a:	42a8      	cmp	r0, r5
 8018e3c:	dd59      	ble.n	8018ef2 <__gethex+0x24e>
 8018e3e:	eba0 0805 	sub.w	r8, r0, r5
 8018e42:	4641      	mov	r1, r8
 8018e44:	4620      	mov	r0, r4
 8018e46:	f000 febb 	bl	8019bc0 <__any_on>
 8018e4a:	4683      	mov	fp, r0
 8018e4c:	b1b8      	cbz	r0, 8018e7e <__gethex+0x1da>
 8018e4e:	f108 33ff 	add.w	r3, r8, #4294967295
 8018e52:	1159      	asrs	r1, r3, #5
 8018e54:	f003 021f 	and.w	r2, r3, #31
 8018e58:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8018e5c:	f04f 0b01 	mov.w	fp, #1
 8018e60:	fa0b f202 	lsl.w	r2, fp, r2
 8018e64:	420a      	tst	r2, r1
 8018e66:	d00a      	beq.n	8018e7e <__gethex+0x1da>
 8018e68:	455b      	cmp	r3, fp
 8018e6a:	dd06      	ble.n	8018e7a <__gethex+0x1d6>
 8018e6c:	f1a8 0102 	sub.w	r1, r8, #2
 8018e70:	4620      	mov	r0, r4
 8018e72:	f000 fea5 	bl	8019bc0 <__any_on>
 8018e76:	2800      	cmp	r0, #0
 8018e78:	d138      	bne.n	8018eec <__gethex+0x248>
 8018e7a:	f04f 0b02 	mov.w	fp, #2
 8018e7e:	4641      	mov	r1, r8
 8018e80:	4620      	mov	r0, r4
 8018e82:	f7ff fea7 	bl	8018bd4 <rshift>
 8018e86:	4446      	add	r6, r8
 8018e88:	68bb      	ldr	r3, [r7, #8]
 8018e8a:	42b3      	cmp	r3, r6
 8018e8c:	da41      	bge.n	8018f12 <__gethex+0x26e>
 8018e8e:	4621      	mov	r1, r4
 8018e90:	4648      	mov	r0, r9
 8018e92:	f000 fa49 	bl	8019328 <_Bfree>
 8018e96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018e98:	2300      	movs	r3, #0
 8018e9a:	6013      	str	r3, [r2, #0]
 8018e9c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8018ea0:	e78a      	b.n	8018db8 <__gethex+0x114>
 8018ea2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8018ea6:	2a2e      	cmp	r2, #46	; 0x2e
 8018ea8:	d014      	beq.n	8018ed4 <__gethex+0x230>
 8018eaa:	2b20      	cmp	r3, #32
 8018eac:	d106      	bne.n	8018ebc <__gethex+0x218>
 8018eae:	9b01      	ldr	r3, [sp, #4]
 8018eb0:	f843 bb04 	str.w	fp, [r3], #4
 8018eb4:	f04f 0b00 	mov.w	fp, #0
 8018eb8:	9301      	str	r3, [sp, #4]
 8018eba:	465b      	mov	r3, fp
 8018ebc:	7828      	ldrb	r0, [r5, #0]
 8018ebe:	9303      	str	r3, [sp, #12]
 8018ec0:	f7ff feda 	bl	8018c78 <__hexdig_fun>
 8018ec4:	9b03      	ldr	r3, [sp, #12]
 8018ec6:	f000 000f 	and.w	r0, r0, #15
 8018eca:	4098      	lsls	r0, r3
 8018ecc:	ea4b 0b00 	orr.w	fp, fp, r0
 8018ed0:	3304      	adds	r3, #4
 8018ed2:	e7a1      	b.n	8018e18 <__gethex+0x174>
 8018ed4:	45a8      	cmp	r8, r5
 8018ed6:	d8e8      	bhi.n	8018eaa <__gethex+0x206>
 8018ed8:	2201      	movs	r2, #1
 8018eda:	4628      	mov	r0, r5
 8018edc:	9303      	str	r3, [sp, #12]
 8018ede:	f7fe fe64 	bl	8017baa <strncmp>
 8018ee2:	4926      	ldr	r1, [pc, #152]	; (8018f7c <__gethex+0x2d8>)
 8018ee4:	9b03      	ldr	r3, [sp, #12]
 8018ee6:	2800      	cmp	r0, #0
 8018ee8:	d1df      	bne.n	8018eaa <__gethex+0x206>
 8018eea:	e795      	b.n	8018e18 <__gethex+0x174>
 8018eec:	f04f 0b03 	mov.w	fp, #3
 8018ef0:	e7c5      	b.n	8018e7e <__gethex+0x1da>
 8018ef2:	da0b      	bge.n	8018f0c <__gethex+0x268>
 8018ef4:	eba5 0800 	sub.w	r8, r5, r0
 8018ef8:	4621      	mov	r1, r4
 8018efa:	4642      	mov	r2, r8
 8018efc:	4648      	mov	r0, r9
 8018efe:	f000 fc2d 	bl	801975c <__lshift>
 8018f02:	eba6 0608 	sub.w	r6, r6, r8
 8018f06:	4604      	mov	r4, r0
 8018f08:	f100 0a14 	add.w	sl, r0, #20
 8018f0c:	f04f 0b00 	mov.w	fp, #0
 8018f10:	e7ba      	b.n	8018e88 <__gethex+0x1e4>
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	42b3      	cmp	r3, r6
 8018f16:	dd73      	ble.n	8019000 <__gethex+0x35c>
 8018f18:	1b9e      	subs	r6, r3, r6
 8018f1a:	42b5      	cmp	r5, r6
 8018f1c:	dc34      	bgt.n	8018f88 <__gethex+0x2e4>
 8018f1e:	68fb      	ldr	r3, [r7, #12]
 8018f20:	2b02      	cmp	r3, #2
 8018f22:	d023      	beq.n	8018f6c <__gethex+0x2c8>
 8018f24:	2b03      	cmp	r3, #3
 8018f26:	d025      	beq.n	8018f74 <__gethex+0x2d0>
 8018f28:	2b01      	cmp	r3, #1
 8018f2a:	d115      	bne.n	8018f58 <__gethex+0x2b4>
 8018f2c:	42b5      	cmp	r5, r6
 8018f2e:	d113      	bne.n	8018f58 <__gethex+0x2b4>
 8018f30:	2d01      	cmp	r5, #1
 8018f32:	d10b      	bne.n	8018f4c <__gethex+0x2a8>
 8018f34:	9a02      	ldr	r2, [sp, #8]
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	6013      	str	r3, [r2, #0]
 8018f3a:	2301      	movs	r3, #1
 8018f3c:	6123      	str	r3, [r4, #16]
 8018f3e:	f8ca 3000 	str.w	r3, [sl]
 8018f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018f44:	f04f 0862 	mov.w	r8, #98	; 0x62
 8018f48:	601c      	str	r4, [r3, #0]
 8018f4a:	e735      	b.n	8018db8 <__gethex+0x114>
 8018f4c:	1e69      	subs	r1, r5, #1
 8018f4e:	4620      	mov	r0, r4
 8018f50:	f000 fe36 	bl	8019bc0 <__any_on>
 8018f54:	2800      	cmp	r0, #0
 8018f56:	d1ed      	bne.n	8018f34 <__gethex+0x290>
 8018f58:	4621      	mov	r1, r4
 8018f5a:	4648      	mov	r0, r9
 8018f5c:	f000 f9e4 	bl	8019328 <_Bfree>
 8018f60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018f62:	2300      	movs	r3, #0
 8018f64:	6013      	str	r3, [r2, #0]
 8018f66:	f04f 0850 	mov.w	r8, #80	; 0x50
 8018f6a:	e725      	b.n	8018db8 <__gethex+0x114>
 8018f6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d1f2      	bne.n	8018f58 <__gethex+0x2b4>
 8018f72:	e7df      	b.n	8018f34 <__gethex+0x290>
 8018f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d1dc      	bne.n	8018f34 <__gethex+0x290>
 8018f7a:	e7ed      	b.n	8018f58 <__gethex+0x2b4>
 8018f7c:	0801ec2c 	.word	0x0801ec2c
 8018f80:	0801eed4 	.word	0x0801eed4
 8018f84:	0801eee5 	.word	0x0801eee5
 8018f88:	f106 38ff 	add.w	r8, r6, #4294967295
 8018f8c:	f1bb 0f00 	cmp.w	fp, #0
 8018f90:	d133      	bne.n	8018ffa <__gethex+0x356>
 8018f92:	f1b8 0f00 	cmp.w	r8, #0
 8018f96:	d004      	beq.n	8018fa2 <__gethex+0x2fe>
 8018f98:	4641      	mov	r1, r8
 8018f9a:	4620      	mov	r0, r4
 8018f9c:	f000 fe10 	bl	8019bc0 <__any_on>
 8018fa0:	4683      	mov	fp, r0
 8018fa2:	ea4f 1268 	mov.w	r2, r8, asr #5
 8018fa6:	2301      	movs	r3, #1
 8018fa8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018fac:	f008 081f 	and.w	r8, r8, #31
 8018fb0:	fa03 f308 	lsl.w	r3, r3, r8
 8018fb4:	4213      	tst	r3, r2
 8018fb6:	4631      	mov	r1, r6
 8018fb8:	4620      	mov	r0, r4
 8018fba:	bf18      	it	ne
 8018fbc:	f04b 0b02 	orrne.w	fp, fp, #2
 8018fc0:	1bad      	subs	r5, r5, r6
 8018fc2:	f7ff fe07 	bl	8018bd4 <rshift>
 8018fc6:	687e      	ldr	r6, [r7, #4]
 8018fc8:	f04f 0802 	mov.w	r8, #2
 8018fcc:	f1bb 0f00 	cmp.w	fp, #0
 8018fd0:	d04a      	beq.n	8019068 <__gethex+0x3c4>
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	2b02      	cmp	r3, #2
 8018fd6:	d016      	beq.n	8019006 <__gethex+0x362>
 8018fd8:	2b03      	cmp	r3, #3
 8018fda:	d018      	beq.n	801900e <__gethex+0x36a>
 8018fdc:	2b01      	cmp	r3, #1
 8018fde:	d109      	bne.n	8018ff4 <__gethex+0x350>
 8018fe0:	f01b 0f02 	tst.w	fp, #2
 8018fe4:	d006      	beq.n	8018ff4 <__gethex+0x350>
 8018fe6:	f8da 3000 	ldr.w	r3, [sl]
 8018fea:	ea4b 0b03 	orr.w	fp, fp, r3
 8018fee:	f01b 0f01 	tst.w	fp, #1
 8018ff2:	d10f      	bne.n	8019014 <__gethex+0x370>
 8018ff4:	f048 0810 	orr.w	r8, r8, #16
 8018ff8:	e036      	b.n	8019068 <__gethex+0x3c4>
 8018ffa:	f04f 0b01 	mov.w	fp, #1
 8018ffe:	e7d0      	b.n	8018fa2 <__gethex+0x2fe>
 8019000:	f04f 0801 	mov.w	r8, #1
 8019004:	e7e2      	b.n	8018fcc <__gethex+0x328>
 8019006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019008:	f1c3 0301 	rsb	r3, r3, #1
 801900c:	930f      	str	r3, [sp, #60]	; 0x3c
 801900e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019010:	2b00      	cmp	r3, #0
 8019012:	d0ef      	beq.n	8018ff4 <__gethex+0x350>
 8019014:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019018:	f104 0214 	add.w	r2, r4, #20
 801901c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8019020:	9301      	str	r3, [sp, #4]
 8019022:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8019026:	2300      	movs	r3, #0
 8019028:	4694      	mov	ip, r2
 801902a:	f852 1b04 	ldr.w	r1, [r2], #4
 801902e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8019032:	d01e      	beq.n	8019072 <__gethex+0x3ce>
 8019034:	3101      	adds	r1, #1
 8019036:	f8cc 1000 	str.w	r1, [ip]
 801903a:	f1b8 0f02 	cmp.w	r8, #2
 801903e:	f104 0214 	add.w	r2, r4, #20
 8019042:	d13d      	bne.n	80190c0 <__gethex+0x41c>
 8019044:	683b      	ldr	r3, [r7, #0]
 8019046:	3b01      	subs	r3, #1
 8019048:	42ab      	cmp	r3, r5
 801904a:	d10b      	bne.n	8019064 <__gethex+0x3c0>
 801904c:	1169      	asrs	r1, r5, #5
 801904e:	2301      	movs	r3, #1
 8019050:	f005 051f 	and.w	r5, r5, #31
 8019054:	fa03 f505 	lsl.w	r5, r3, r5
 8019058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801905c:	421d      	tst	r5, r3
 801905e:	bf18      	it	ne
 8019060:	f04f 0801 	movne.w	r8, #1
 8019064:	f048 0820 	orr.w	r8, r8, #32
 8019068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801906a:	601c      	str	r4, [r3, #0]
 801906c:	9b02      	ldr	r3, [sp, #8]
 801906e:	601e      	str	r6, [r3, #0]
 8019070:	e6a2      	b.n	8018db8 <__gethex+0x114>
 8019072:	4290      	cmp	r0, r2
 8019074:	f842 3c04 	str.w	r3, [r2, #-4]
 8019078:	d8d6      	bhi.n	8019028 <__gethex+0x384>
 801907a:	68a2      	ldr	r2, [r4, #8]
 801907c:	4593      	cmp	fp, r2
 801907e:	db17      	blt.n	80190b0 <__gethex+0x40c>
 8019080:	6861      	ldr	r1, [r4, #4]
 8019082:	4648      	mov	r0, r9
 8019084:	3101      	adds	r1, #1
 8019086:	f000 f90f 	bl	80192a8 <_Balloc>
 801908a:	4682      	mov	sl, r0
 801908c:	b918      	cbnz	r0, 8019096 <__gethex+0x3f2>
 801908e:	4b1b      	ldr	r3, [pc, #108]	; (80190fc <__gethex+0x458>)
 8019090:	4602      	mov	r2, r0
 8019092:	2184      	movs	r1, #132	; 0x84
 8019094:	e6b3      	b.n	8018dfe <__gethex+0x15a>
 8019096:	6922      	ldr	r2, [r4, #16]
 8019098:	3202      	adds	r2, #2
 801909a:	f104 010c 	add.w	r1, r4, #12
 801909e:	0092      	lsls	r2, r2, #2
 80190a0:	300c      	adds	r0, #12
 80190a2:	f7fe fe96 	bl	8017dd2 <memcpy>
 80190a6:	4621      	mov	r1, r4
 80190a8:	4648      	mov	r0, r9
 80190aa:	f000 f93d 	bl	8019328 <_Bfree>
 80190ae:	4654      	mov	r4, sl
 80190b0:	6922      	ldr	r2, [r4, #16]
 80190b2:	1c51      	adds	r1, r2, #1
 80190b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80190b8:	6121      	str	r1, [r4, #16]
 80190ba:	2101      	movs	r1, #1
 80190bc:	6151      	str	r1, [r2, #20]
 80190be:	e7bc      	b.n	801903a <__gethex+0x396>
 80190c0:	6921      	ldr	r1, [r4, #16]
 80190c2:	4559      	cmp	r1, fp
 80190c4:	dd0b      	ble.n	80190de <__gethex+0x43a>
 80190c6:	2101      	movs	r1, #1
 80190c8:	4620      	mov	r0, r4
 80190ca:	f7ff fd83 	bl	8018bd4 <rshift>
 80190ce:	68bb      	ldr	r3, [r7, #8]
 80190d0:	3601      	adds	r6, #1
 80190d2:	42b3      	cmp	r3, r6
 80190d4:	f6ff aedb 	blt.w	8018e8e <__gethex+0x1ea>
 80190d8:	f04f 0801 	mov.w	r8, #1
 80190dc:	e7c2      	b.n	8019064 <__gethex+0x3c0>
 80190de:	f015 051f 	ands.w	r5, r5, #31
 80190e2:	d0f9      	beq.n	80190d8 <__gethex+0x434>
 80190e4:	9b01      	ldr	r3, [sp, #4]
 80190e6:	441a      	add	r2, r3
 80190e8:	f1c5 0520 	rsb	r5, r5, #32
 80190ec:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80190f0:	f000 f9cc 	bl	801948c <__hi0bits>
 80190f4:	42a8      	cmp	r0, r5
 80190f6:	dbe6      	blt.n	80190c6 <__gethex+0x422>
 80190f8:	e7ee      	b.n	80190d8 <__gethex+0x434>
 80190fa:	bf00      	nop
 80190fc:	0801eed4 	.word	0x0801eed4

08019100 <L_shift>:
 8019100:	f1c2 0208 	rsb	r2, r2, #8
 8019104:	0092      	lsls	r2, r2, #2
 8019106:	b570      	push	{r4, r5, r6, lr}
 8019108:	f1c2 0620 	rsb	r6, r2, #32
 801910c:	6843      	ldr	r3, [r0, #4]
 801910e:	6804      	ldr	r4, [r0, #0]
 8019110:	fa03 f506 	lsl.w	r5, r3, r6
 8019114:	432c      	orrs	r4, r5
 8019116:	40d3      	lsrs	r3, r2
 8019118:	6004      	str	r4, [r0, #0]
 801911a:	f840 3f04 	str.w	r3, [r0, #4]!
 801911e:	4288      	cmp	r0, r1
 8019120:	d3f4      	bcc.n	801910c <L_shift+0xc>
 8019122:	bd70      	pop	{r4, r5, r6, pc}

08019124 <__match>:
 8019124:	b530      	push	{r4, r5, lr}
 8019126:	6803      	ldr	r3, [r0, #0]
 8019128:	3301      	adds	r3, #1
 801912a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801912e:	b914      	cbnz	r4, 8019136 <__match+0x12>
 8019130:	6003      	str	r3, [r0, #0]
 8019132:	2001      	movs	r0, #1
 8019134:	bd30      	pop	{r4, r5, pc}
 8019136:	f813 2b01 	ldrb.w	r2, [r3], #1
 801913a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801913e:	2d19      	cmp	r5, #25
 8019140:	bf98      	it	ls
 8019142:	3220      	addls	r2, #32
 8019144:	42a2      	cmp	r2, r4
 8019146:	d0f0      	beq.n	801912a <__match+0x6>
 8019148:	2000      	movs	r0, #0
 801914a:	e7f3      	b.n	8019134 <__match+0x10>

0801914c <__hexnan>:
 801914c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019150:	680b      	ldr	r3, [r1, #0]
 8019152:	6801      	ldr	r1, [r0, #0]
 8019154:	115e      	asrs	r6, r3, #5
 8019156:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801915a:	f013 031f 	ands.w	r3, r3, #31
 801915e:	b087      	sub	sp, #28
 8019160:	bf18      	it	ne
 8019162:	3604      	addne	r6, #4
 8019164:	2500      	movs	r5, #0
 8019166:	1f37      	subs	r7, r6, #4
 8019168:	4682      	mov	sl, r0
 801916a:	4690      	mov	r8, r2
 801916c:	9301      	str	r3, [sp, #4]
 801916e:	f846 5c04 	str.w	r5, [r6, #-4]
 8019172:	46b9      	mov	r9, r7
 8019174:	463c      	mov	r4, r7
 8019176:	9502      	str	r5, [sp, #8]
 8019178:	46ab      	mov	fp, r5
 801917a:	784a      	ldrb	r2, [r1, #1]
 801917c:	1c4b      	adds	r3, r1, #1
 801917e:	9303      	str	r3, [sp, #12]
 8019180:	b342      	cbz	r2, 80191d4 <__hexnan+0x88>
 8019182:	4610      	mov	r0, r2
 8019184:	9105      	str	r1, [sp, #20]
 8019186:	9204      	str	r2, [sp, #16]
 8019188:	f7ff fd76 	bl	8018c78 <__hexdig_fun>
 801918c:	2800      	cmp	r0, #0
 801918e:	d14f      	bne.n	8019230 <__hexnan+0xe4>
 8019190:	9a04      	ldr	r2, [sp, #16]
 8019192:	9905      	ldr	r1, [sp, #20]
 8019194:	2a20      	cmp	r2, #32
 8019196:	d818      	bhi.n	80191ca <__hexnan+0x7e>
 8019198:	9b02      	ldr	r3, [sp, #8]
 801919a:	459b      	cmp	fp, r3
 801919c:	dd13      	ble.n	80191c6 <__hexnan+0x7a>
 801919e:	454c      	cmp	r4, r9
 80191a0:	d206      	bcs.n	80191b0 <__hexnan+0x64>
 80191a2:	2d07      	cmp	r5, #7
 80191a4:	dc04      	bgt.n	80191b0 <__hexnan+0x64>
 80191a6:	462a      	mov	r2, r5
 80191a8:	4649      	mov	r1, r9
 80191aa:	4620      	mov	r0, r4
 80191ac:	f7ff ffa8 	bl	8019100 <L_shift>
 80191b0:	4544      	cmp	r4, r8
 80191b2:	d950      	bls.n	8019256 <__hexnan+0x10a>
 80191b4:	2300      	movs	r3, #0
 80191b6:	f1a4 0904 	sub.w	r9, r4, #4
 80191ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80191be:	f8cd b008 	str.w	fp, [sp, #8]
 80191c2:	464c      	mov	r4, r9
 80191c4:	461d      	mov	r5, r3
 80191c6:	9903      	ldr	r1, [sp, #12]
 80191c8:	e7d7      	b.n	801917a <__hexnan+0x2e>
 80191ca:	2a29      	cmp	r2, #41	; 0x29
 80191cc:	d155      	bne.n	801927a <__hexnan+0x12e>
 80191ce:	3102      	adds	r1, #2
 80191d0:	f8ca 1000 	str.w	r1, [sl]
 80191d4:	f1bb 0f00 	cmp.w	fp, #0
 80191d8:	d04f      	beq.n	801927a <__hexnan+0x12e>
 80191da:	454c      	cmp	r4, r9
 80191dc:	d206      	bcs.n	80191ec <__hexnan+0xa0>
 80191de:	2d07      	cmp	r5, #7
 80191e0:	dc04      	bgt.n	80191ec <__hexnan+0xa0>
 80191e2:	462a      	mov	r2, r5
 80191e4:	4649      	mov	r1, r9
 80191e6:	4620      	mov	r0, r4
 80191e8:	f7ff ff8a 	bl	8019100 <L_shift>
 80191ec:	4544      	cmp	r4, r8
 80191ee:	d934      	bls.n	801925a <__hexnan+0x10e>
 80191f0:	f1a8 0204 	sub.w	r2, r8, #4
 80191f4:	4623      	mov	r3, r4
 80191f6:	f853 1b04 	ldr.w	r1, [r3], #4
 80191fa:	f842 1f04 	str.w	r1, [r2, #4]!
 80191fe:	429f      	cmp	r7, r3
 8019200:	d2f9      	bcs.n	80191f6 <__hexnan+0xaa>
 8019202:	1b3b      	subs	r3, r7, r4
 8019204:	f023 0303 	bic.w	r3, r3, #3
 8019208:	3304      	adds	r3, #4
 801920a:	3e03      	subs	r6, #3
 801920c:	3401      	adds	r4, #1
 801920e:	42a6      	cmp	r6, r4
 8019210:	bf38      	it	cc
 8019212:	2304      	movcc	r3, #4
 8019214:	4443      	add	r3, r8
 8019216:	2200      	movs	r2, #0
 8019218:	f843 2b04 	str.w	r2, [r3], #4
 801921c:	429f      	cmp	r7, r3
 801921e:	d2fb      	bcs.n	8019218 <__hexnan+0xcc>
 8019220:	683b      	ldr	r3, [r7, #0]
 8019222:	b91b      	cbnz	r3, 801922c <__hexnan+0xe0>
 8019224:	4547      	cmp	r7, r8
 8019226:	d126      	bne.n	8019276 <__hexnan+0x12a>
 8019228:	2301      	movs	r3, #1
 801922a:	603b      	str	r3, [r7, #0]
 801922c:	2005      	movs	r0, #5
 801922e:	e025      	b.n	801927c <__hexnan+0x130>
 8019230:	3501      	adds	r5, #1
 8019232:	2d08      	cmp	r5, #8
 8019234:	f10b 0b01 	add.w	fp, fp, #1
 8019238:	dd06      	ble.n	8019248 <__hexnan+0xfc>
 801923a:	4544      	cmp	r4, r8
 801923c:	d9c3      	bls.n	80191c6 <__hexnan+0x7a>
 801923e:	2300      	movs	r3, #0
 8019240:	f844 3c04 	str.w	r3, [r4, #-4]
 8019244:	2501      	movs	r5, #1
 8019246:	3c04      	subs	r4, #4
 8019248:	6822      	ldr	r2, [r4, #0]
 801924a:	f000 000f 	and.w	r0, r0, #15
 801924e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8019252:	6020      	str	r0, [r4, #0]
 8019254:	e7b7      	b.n	80191c6 <__hexnan+0x7a>
 8019256:	2508      	movs	r5, #8
 8019258:	e7b5      	b.n	80191c6 <__hexnan+0x7a>
 801925a:	9b01      	ldr	r3, [sp, #4]
 801925c:	2b00      	cmp	r3, #0
 801925e:	d0df      	beq.n	8019220 <__hexnan+0xd4>
 8019260:	f1c3 0320 	rsb	r3, r3, #32
 8019264:	f04f 32ff 	mov.w	r2, #4294967295
 8019268:	40da      	lsrs	r2, r3
 801926a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801926e:	4013      	ands	r3, r2
 8019270:	f846 3c04 	str.w	r3, [r6, #-4]
 8019274:	e7d4      	b.n	8019220 <__hexnan+0xd4>
 8019276:	3f04      	subs	r7, #4
 8019278:	e7d2      	b.n	8019220 <__hexnan+0xd4>
 801927a:	2004      	movs	r0, #4
 801927c:	b007      	add	sp, #28
 801927e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019282 <__ascii_mbtowc>:
 8019282:	b082      	sub	sp, #8
 8019284:	b901      	cbnz	r1, 8019288 <__ascii_mbtowc+0x6>
 8019286:	a901      	add	r1, sp, #4
 8019288:	b142      	cbz	r2, 801929c <__ascii_mbtowc+0x1a>
 801928a:	b14b      	cbz	r3, 80192a0 <__ascii_mbtowc+0x1e>
 801928c:	7813      	ldrb	r3, [r2, #0]
 801928e:	600b      	str	r3, [r1, #0]
 8019290:	7812      	ldrb	r2, [r2, #0]
 8019292:	1e10      	subs	r0, r2, #0
 8019294:	bf18      	it	ne
 8019296:	2001      	movne	r0, #1
 8019298:	b002      	add	sp, #8
 801929a:	4770      	bx	lr
 801929c:	4610      	mov	r0, r2
 801929e:	e7fb      	b.n	8019298 <__ascii_mbtowc+0x16>
 80192a0:	f06f 0001 	mvn.w	r0, #1
 80192a4:	e7f8      	b.n	8019298 <__ascii_mbtowc+0x16>
	...

080192a8 <_Balloc>:
 80192a8:	b570      	push	{r4, r5, r6, lr}
 80192aa:	69c6      	ldr	r6, [r0, #28]
 80192ac:	4604      	mov	r4, r0
 80192ae:	460d      	mov	r5, r1
 80192b0:	b976      	cbnz	r6, 80192d0 <_Balloc+0x28>
 80192b2:	2010      	movs	r0, #16
 80192b4:	f7fc fce0 	bl	8015c78 <malloc>
 80192b8:	4602      	mov	r2, r0
 80192ba:	61e0      	str	r0, [r4, #28]
 80192bc:	b920      	cbnz	r0, 80192c8 <_Balloc+0x20>
 80192be:	4b18      	ldr	r3, [pc, #96]	; (8019320 <_Balloc+0x78>)
 80192c0:	4818      	ldr	r0, [pc, #96]	; (8019324 <_Balloc+0x7c>)
 80192c2:	216b      	movs	r1, #107	; 0x6b
 80192c4:	f7fe fda2 	bl	8017e0c <__assert_func>
 80192c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80192cc:	6006      	str	r6, [r0, #0]
 80192ce:	60c6      	str	r6, [r0, #12]
 80192d0:	69e6      	ldr	r6, [r4, #28]
 80192d2:	68f3      	ldr	r3, [r6, #12]
 80192d4:	b183      	cbz	r3, 80192f8 <_Balloc+0x50>
 80192d6:	69e3      	ldr	r3, [r4, #28]
 80192d8:	68db      	ldr	r3, [r3, #12]
 80192da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80192de:	b9b8      	cbnz	r0, 8019310 <_Balloc+0x68>
 80192e0:	2101      	movs	r1, #1
 80192e2:	fa01 f605 	lsl.w	r6, r1, r5
 80192e6:	1d72      	adds	r2, r6, #5
 80192e8:	0092      	lsls	r2, r2, #2
 80192ea:	4620      	mov	r0, r4
 80192ec:	f000 fecf 	bl	801a08e <_calloc_r>
 80192f0:	b160      	cbz	r0, 801930c <_Balloc+0x64>
 80192f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80192f6:	e00e      	b.n	8019316 <_Balloc+0x6e>
 80192f8:	2221      	movs	r2, #33	; 0x21
 80192fa:	2104      	movs	r1, #4
 80192fc:	4620      	mov	r0, r4
 80192fe:	f000 fec6 	bl	801a08e <_calloc_r>
 8019302:	69e3      	ldr	r3, [r4, #28]
 8019304:	60f0      	str	r0, [r6, #12]
 8019306:	68db      	ldr	r3, [r3, #12]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d1e4      	bne.n	80192d6 <_Balloc+0x2e>
 801930c:	2000      	movs	r0, #0
 801930e:	bd70      	pop	{r4, r5, r6, pc}
 8019310:	6802      	ldr	r2, [r0, #0]
 8019312:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019316:	2300      	movs	r3, #0
 8019318:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801931c:	e7f7      	b.n	801930e <_Balloc+0x66>
 801931e:	bf00      	nop
 8019320:	0801edba 	.word	0x0801edba
 8019324:	0801ef45 	.word	0x0801ef45

08019328 <_Bfree>:
 8019328:	b570      	push	{r4, r5, r6, lr}
 801932a:	69c6      	ldr	r6, [r0, #28]
 801932c:	4605      	mov	r5, r0
 801932e:	460c      	mov	r4, r1
 8019330:	b976      	cbnz	r6, 8019350 <_Bfree+0x28>
 8019332:	2010      	movs	r0, #16
 8019334:	f7fc fca0 	bl	8015c78 <malloc>
 8019338:	4602      	mov	r2, r0
 801933a:	61e8      	str	r0, [r5, #28]
 801933c:	b920      	cbnz	r0, 8019348 <_Bfree+0x20>
 801933e:	4b09      	ldr	r3, [pc, #36]	; (8019364 <_Bfree+0x3c>)
 8019340:	4809      	ldr	r0, [pc, #36]	; (8019368 <_Bfree+0x40>)
 8019342:	218f      	movs	r1, #143	; 0x8f
 8019344:	f7fe fd62 	bl	8017e0c <__assert_func>
 8019348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801934c:	6006      	str	r6, [r0, #0]
 801934e:	60c6      	str	r6, [r0, #12]
 8019350:	b13c      	cbz	r4, 8019362 <_Bfree+0x3a>
 8019352:	69eb      	ldr	r3, [r5, #28]
 8019354:	6862      	ldr	r2, [r4, #4]
 8019356:	68db      	ldr	r3, [r3, #12]
 8019358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801935c:	6021      	str	r1, [r4, #0]
 801935e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019362:	bd70      	pop	{r4, r5, r6, pc}
 8019364:	0801edba 	.word	0x0801edba
 8019368:	0801ef45 	.word	0x0801ef45

0801936c <__multadd>:
 801936c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019370:	690d      	ldr	r5, [r1, #16]
 8019372:	4607      	mov	r7, r0
 8019374:	460c      	mov	r4, r1
 8019376:	461e      	mov	r6, r3
 8019378:	f101 0c14 	add.w	ip, r1, #20
 801937c:	2000      	movs	r0, #0
 801937e:	f8dc 3000 	ldr.w	r3, [ip]
 8019382:	b299      	uxth	r1, r3
 8019384:	fb02 6101 	mla	r1, r2, r1, r6
 8019388:	0c1e      	lsrs	r6, r3, #16
 801938a:	0c0b      	lsrs	r3, r1, #16
 801938c:	fb02 3306 	mla	r3, r2, r6, r3
 8019390:	b289      	uxth	r1, r1
 8019392:	3001      	adds	r0, #1
 8019394:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019398:	4285      	cmp	r5, r0
 801939a:	f84c 1b04 	str.w	r1, [ip], #4
 801939e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80193a2:	dcec      	bgt.n	801937e <__multadd+0x12>
 80193a4:	b30e      	cbz	r6, 80193ea <__multadd+0x7e>
 80193a6:	68a3      	ldr	r3, [r4, #8]
 80193a8:	42ab      	cmp	r3, r5
 80193aa:	dc19      	bgt.n	80193e0 <__multadd+0x74>
 80193ac:	6861      	ldr	r1, [r4, #4]
 80193ae:	4638      	mov	r0, r7
 80193b0:	3101      	adds	r1, #1
 80193b2:	f7ff ff79 	bl	80192a8 <_Balloc>
 80193b6:	4680      	mov	r8, r0
 80193b8:	b928      	cbnz	r0, 80193c6 <__multadd+0x5a>
 80193ba:	4602      	mov	r2, r0
 80193bc:	4b0c      	ldr	r3, [pc, #48]	; (80193f0 <__multadd+0x84>)
 80193be:	480d      	ldr	r0, [pc, #52]	; (80193f4 <__multadd+0x88>)
 80193c0:	21ba      	movs	r1, #186	; 0xba
 80193c2:	f7fe fd23 	bl	8017e0c <__assert_func>
 80193c6:	6922      	ldr	r2, [r4, #16]
 80193c8:	3202      	adds	r2, #2
 80193ca:	f104 010c 	add.w	r1, r4, #12
 80193ce:	0092      	lsls	r2, r2, #2
 80193d0:	300c      	adds	r0, #12
 80193d2:	f7fe fcfe 	bl	8017dd2 <memcpy>
 80193d6:	4621      	mov	r1, r4
 80193d8:	4638      	mov	r0, r7
 80193da:	f7ff ffa5 	bl	8019328 <_Bfree>
 80193de:	4644      	mov	r4, r8
 80193e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80193e4:	3501      	adds	r5, #1
 80193e6:	615e      	str	r6, [r3, #20]
 80193e8:	6125      	str	r5, [r4, #16]
 80193ea:	4620      	mov	r0, r4
 80193ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193f0:	0801eed4 	.word	0x0801eed4
 80193f4:	0801ef45 	.word	0x0801ef45

080193f8 <__s2b>:
 80193f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80193fc:	460c      	mov	r4, r1
 80193fe:	4615      	mov	r5, r2
 8019400:	461f      	mov	r7, r3
 8019402:	2209      	movs	r2, #9
 8019404:	3308      	adds	r3, #8
 8019406:	4606      	mov	r6, r0
 8019408:	fb93 f3f2 	sdiv	r3, r3, r2
 801940c:	2100      	movs	r1, #0
 801940e:	2201      	movs	r2, #1
 8019410:	429a      	cmp	r2, r3
 8019412:	db09      	blt.n	8019428 <__s2b+0x30>
 8019414:	4630      	mov	r0, r6
 8019416:	f7ff ff47 	bl	80192a8 <_Balloc>
 801941a:	b940      	cbnz	r0, 801942e <__s2b+0x36>
 801941c:	4602      	mov	r2, r0
 801941e:	4b19      	ldr	r3, [pc, #100]	; (8019484 <__s2b+0x8c>)
 8019420:	4819      	ldr	r0, [pc, #100]	; (8019488 <__s2b+0x90>)
 8019422:	21d3      	movs	r1, #211	; 0xd3
 8019424:	f7fe fcf2 	bl	8017e0c <__assert_func>
 8019428:	0052      	lsls	r2, r2, #1
 801942a:	3101      	adds	r1, #1
 801942c:	e7f0      	b.n	8019410 <__s2b+0x18>
 801942e:	9b08      	ldr	r3, [sp, #32]
 8019430:	6143      	str	r3, [r0, #20]
 8019432:	2d09      	cmp	r5, #9
 8019434:	f04f 0301 	mov.w	r3, #1
 8019438:	6103      	str	r3, [r0, #16]
 801943a:	dd16      	ble.n	801946a <__s2b+0x72>
 801943c:	f104 0909 	add.w	r9, r4, #9
 8019440:	46c8      	mov	r8, r9
 8019442:	442c      	add	r4, r5
 8019444:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019448:	4601      	mov	r1, r0
 801944a:	3b30      	subs	r3, #48	; 0x30
 801944c:	220a      	movs	r2, #10
 801944e:	4630      	mov	r0, r6
 8019450:	f7ff ff8c 	bl	801936c <__multadd>
 8019454:	45a0      	cmp	r8, r4
 8019456:	d1f5      	bne.n	8019444 <__s2b+0x4c>
 8019458:	f1a5 0408 	sub.w	r4, r5, #8
 801945c:	444c      	add	r4, r9
 801945e:	1b2d      	subs	r5, r5, r4
 8019460:	1963      	adds	r3, r4, r5
 8019462:	42bb      	cmp	r3, r7
 8019464:	db04      	blt.n	8019470 <__s2b+0x78>
 8019466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801946a:	340a      	adds	r4, #10
 801946c:	2509      	movs	r5, #9
 801946e:	e7f6      	b.n	801945e <__s2b+0x66>
 8019470:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019474:	4601      	mov	r1, r0
 8019476:	3b30      	subs	r3, #48	; 0x30
 8019478:	220a      	movs	r2, #10
 801947a:	4630      	mov	r0, r6
 801947c:	f7ff ff76 	bl	801936c <__multadd>
 8019480:	e7ee      	b.n	8019460 <__s2b+0x68>
 8019482:	bf00      	nop
 8019484:	0801eed4 	.word	0x0801eed4
 8019488:	0801ef45 	.word	0x0801ef45

0801948c <__hi0bits>:
 801948c:	0c03      	lsrs	r3, r0, #16
 801948e:	041b      	lsls	r3, r3, #16
 8019490:	b9d3      	cbnz	r3, 80194c8 <__hi0bits+0x3c>
 8019492:	0400      	lsls	r0, r0, #16
 8019494:	2310      	movs	r3, #16
 8019496:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801949a:	bf04      	itt	eq
 801949c:	0200      	lsleq	r0, r0, #8
 801949e:	3308      	addeq	r3, #8
 80194a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80194a4:	bf04      	itt	eq
 80194a6:	0100      	lsleq	r0, r0, #4
 80194a8:	3304      	addeq	r3, #4
 80194aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80194ae:	bf04      	itt	eq
 80194b0:	0080      	lsleq	r0, r0, #2
 80194b2:	3302      	addeq	r3, #2
 80194b4:	2800      	cmp	r0, #0
 80194b6:	db05      	blt.n	80194c4 <__hi0bits+0x38>
 80194b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80194bc:	f103 0301 	add.w	r3, r3, #1
 80194c0:	bf08      	it	eq
 80194c2:	2320      	moveq	r3, #32
 80194c4:	4618      	mov	r0, r3
 80194c6:	4770      	bx	lr
 80194c8:	2300      	movs	r3, #0
 80194ca:	e7e4      	b.n	8019496 <__hi0bits+0xa>

080194cc <__lo0bits>:
 80194cc:	6803      	ldr	r3, [r0, #0]
 80194ce:	f013 0207 	ands.w	r2, r3, #7
 80194d2:	d00c      	beq.n	80194ee <__lo0bits+0x22>
 80194d4:	07d9      	lsls	r1, r3, #31
 80194d6:	d422      	bmi.n	801951e <__lo0bits+0x52>
 80194d8:	079a      	lsls	r2, r3, #30
 80194da:	bf49      	itett	mi
 80194dc:	085b      	lsrmi	r3, r3, #1
 80194de:	089b      	lsrpl	r3, r3, #2
 80194e0:	6003      	strmi	r3, [r0, #0]
 80194e2:	2201      	movmi	r2, #1
 80194e4:	bf5c      	itt	pl
 80194e6:	6003      	strpl	r3, [r0, #0]
 80194e8:	2202      	movpl	r2, #2
 80194ea:	4610      	mov	r0, r2
 80194ec:	4770      	bx	lr
 80194ee:	b299      	uxth	r1, r3
 80194f0:	b909      	cbnz	r1, 80194f6 <__lo0bits+0x2a>
 80194f2:	0c1b      	lsrs	r3, r3, #16
 80194f4:	2210      	movs	r2, #16
 80194f6:	b2d9      	uxtb	r1, r3
 80194f8:	b909      	cbnz	r1, 80194fe <__lo0bits+0x32>
 80194fa:	3208      	adds	r2, #8
 80194fc:	0a1b      	lsrs	r3, r3, #8
 80194fe:	0719      	lsls	r1, r3, #28
 8019500:	bf04      	itt	eq
 8019502:	091b      	lsreq	r3, r3, #4
 8019504:	3204      	addeq	r2, #4
 8019506:	0799      	lsls	r1, r3, #30
 8019508:	bf04      	itt	eq
 801950a:	089b      	lsreq	r3, r3, #2
 801950c:	3202      	addeq	r2, #2
 801950e:	07d9      	lsls	r1, r3, #31
 8019510:	d403      	bmi.n	801951a <__lo0bits+0x4e>
 8019512:	085b      	lsrs	r3, r3, #1
 8019514:	f102 0201 	add.w	r2, r2, #1
 8019518:	d003      	beq.n	8019522 <__lo0bits+0x56>
 801951a:	6003      	str	r3, [r0, #0]
 801951c:	e7e5      	b.n	80194ea <__lo0bits+0x1e>
 801951e:	2200      	movs	r2, #0
 8019520:	e7e3      	b.n	80194ea <__lo0bits+0x1e>
 8019522:	2220      	movs	r2, #32
 8019524:	e7e1      	b.n	80194ea <__lo0bits+0x1e>
	...

08019528 <__i2b>:
 8019528:	b510      	push	{r4, lr}
 801952a:	460c      	mov	r4, r1
 801952c:	2101      	movs	r1, #1
 801952e:	f7ff febb 	bl	80192a8 <_Balloc>
 8019532:	4602      	mov	r2, r0
 8019534:	b928      	cbnz	r0, 8019542 <__i2b+0x1a>
 8019536:	4b05      	ldr	r3, [pc, #20]	; (801954c <__i2b+0x24>)
 8019538:	4805      	ldr	r0, [pc, #20]	; (8019550 <__i2b+0x28>)
 801953a:	f240 1145 	movw	r1, #325	; 0x145
 801953e:	f7fe fc65 	bl	8017e0c <__assert_func>
 8019542:	2301      	movs	r3, #1
 8019544:	6144      	str	r4, [r0, #20]
 8019546:	6103      	str	r3, [r0, #16]
 8019548:	bd10      	pop	{r4, pc}
 801954a:	bf00      	nop
 801954c:	0801eed4 	.word	0x0801eed4
 8019550:	0801ef45 	.word	0x0801ef45

08019554 <__multiply>:
 8019554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019558:	4691      	mov	r9, r2
 801955a:	690a      	ldr	r2, [r1, #16]
 801955c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019560:	429a      	cmp	r2, r3
 8019562:	bfb8      	it	lt
 8019564:	460b      	movlt	r3, r1
 8019566:	460c      	mov	r4, r1
 8019568:	bfbc      	itt	lt
 801956a:	464c      	movlt	r4, r9
 801956c:	4699      	movlt	r9, r3
 801956e:	6927      	ldr	r7, [r4, #16]
 8019570:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019574:	68a3      	ldr	r3, [r4, #8]
 8019576:	6861      	ldr	r1, [r4, #4]
 8019578:	eb07 060a 	add.w	r6, r7, sl
 801957c:	42b3      	cmp	r3, r6
 801957e:	b085      	sub	sp, #20
 8019580:	bfb8      	it	lt
 8019582:	3101      	addlt	r1, #1
 8019584:	f7ff fe90 	bl	80192a8 <_Balloc>
 8019588:	b930      	cbnz	r0, 8019598 <__multiply+0x44>
 801958a:	4602      	mov	r2, r0
 801958c:	4b44      	ldr	r3, [pc, #272]	; (80196a0 <__multiply+0x14c>)
 801958e:	4845      	ldr	r0, [pc, #276]	; (80196a4 <__multiply+0x150>)
 8019590:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8019594:	f7fe fc3a 	bl	8017e0c <__assert_func>
 8019598:	f100 0514 	add.w	r5, r0, #20
 801959c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80195a0:	462b      	mov	r3, r5
 80195a2:	2200      	movs	r2, #0
 80195a4:	4543      	cmp	r3, r8
 80195a6:	d321      	bcc.n	80195ec <__multiply+0x98>
 80195a8:	f104 0314 	add.w	r3, r4, #20
 80195ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80195b0:	f109 0314 	add.w	r3, r9, #20
 80195b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80195b8:	9202      	str	r2, [sp, #8]
 80195ba:	1b3a      	subs	r2, r7, r4
 80195bc:	3a15      	subs	r2, #21
 80195be:	f022 0203 	bic.w	r2, r2, #3
 80195c2:	3204      	adds	r2, #4
 80195c4:	f104 0115 	add.w	r1, r4, #21
 80195c8:	428f      	cmp	r7, r1
 80195ca:	bf38      	it	cc
 80195cc:	2204      	movcc	r2, #4
 80195ce:	9201      	str	r2, [sp, #4]
 80195d0:	9a02      	ldr	r2, [sp, #8]
 80195d2:	9303      	str	r3, [sp, #12]
 80195d4:	429a      	cmp	r2, r3
 80195d6:	d80c      	bhi.n	80195f2 <__multiply+0x9e>
 80195d8:	2e00      	cmp	r6, #0
 80195da:	dd03      	ble.n	80195e4 <__multiply+0x90>
 80195dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d05b      	beq.n	801969c <__multiply+0x148>
 80195e4:	6106      	str	r6, [r0, #16]
 80195e6:	b005      	add	sp, #20
 80195e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195ec:	f843 2b04 	str.w	r2, [r3], #4
 80195f0:	e7d8      	b.n	80195a4 <__multiply+0x50>
 80195f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80195f6:	f1ba 0f00 	cmp.w	sl, #0
 80195fa:	d024      	beq.n	8019646 <__multiply+0xf2>
 80195fc:	f104 0e14 	add.w	lr, r4, #20
 8019600:	46a9      	mov	r9, r5
 8019602:	f04f 0c00 	mov.w	ip, #0
 8019606:	f85e 2b04 	ldr.w	r2, [lr], #4
 801960a:	f8d9 1000 	ldr.w	r1, [r9]
 801960e:	fa1f fb82 	uxth.w	fp, r2
 8019612:	b289      	uxth	r1, r1
 8019614:	fb0a 110b 	mla	r1, sl, fp, r1
 8019618:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801961c:	f8d9 2000 	ldr.w	r2, [r9]
 8019620:	4461      	add	r1, ip
 8019622:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019626:	fb0a c20b 	mla	r2, sl, fp, ip
 801962a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801962e:	b289      	uxth	r1, r1
 8019630:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019634:	4577      	cmp	r7, lr
 8019636:	f849 1b04 	str.w	r1, [r9], #4
 801963a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801963e:	d8e2      	bhi.n	8019606 <__multiply+0xb2>
 8019640:	9a01      	ldr	r2, [sp, #4]
 8019642:	f845 c002 	str.w	ip, [r5, r2]
 8019646:	9a03      	ldr	r2, [sp, #12]
 8019648:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801964c:	3304      	adds	r3, #4
 801964e:	f1b9 0f00 	cmp.w	r9, #0
 8019652:	d021      	beq.n	8019698 <__multiply+0x144>
 8019654:	6829      	ldr	r1, [r5, #0]
 8019656:	f104 0c14 	add.w	ip, r4, #20
 801965a:	46ae      	mov	lr, r5
 801965c:	f04f 0a00 	mov.w	sl, #0
 8019660:	f8bc b000 	ldrh.w	fp, [ip]
 8019664:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019668:	fb09 220b 	mla	r2, r9, fp, r2
 801966c:	4452      	add	r2, sl
 801966e:	b289      	uxth	r1, r1
 8019670:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019674:	f84e 1b04 	str.w	r1, [lr], #4
 8019678:	f85c 1b04 	ldr.w	r1, [ip], #4
 801967c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019680:	f8be 1000 	ldrh.w	r1, [lr]
 8019684:	fb09 110a 	mla	r1, r9, sl, r1
 8019688:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801968c:	4567      	cmp	r7, ip
 801968e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019692:	d8e5      	bhi.n	8019660 <__multiply+0x10c>
 8019694:	9a01      	ldr	r2, [sp, #4]
 8019696:	50a9      	str	r1, [r5, r2]
 8019698:	3504      	adds	r5, #4
 801969a:	e799      	b.n	80195d0 <__multiply+0x7c>
 801969c:	3e01      	subs	r6, #1
 801969e:	e79b      	b.n	80195d8 <__multiply+0x84>
 80196a0:	0801eed4 	.word	0x0801eed4
 80196a4:	0801ef45 	.word	0x0801ef45

080196a8 <__pow5mult>:
 80196a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80196ac:	4615      	mov	r5, r2
 80196ae:	f012 0203 	ands.w	r2, r2, #3
 80196b2:	4606      	mov	r6, r0
 80196b4:	460f      	mov	r7, r1
 80196b6:	d007      	beq.n	80196c8 <__pow5mult+0x20>
 80196b8:	4c25      	ldr	r4, [pc, #148]	; (8019750 <__pow5mult+0xa8>)
 80196ba:	3a01      	subs	r2, #1
 80196bc:	2300      	movs	r3, #0
 80196be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80196c2:	f7ff fe53 	bl	801936c <__multadd>
 80196c6:	4607      	mov	r7, r0
 80196c8:	10ad      	asrs	r5, r5, #2
 80196ca:	d03d      	beq.n	8019748 <__pow5mult+0xa0>
 80196cc:	69f4      	ldr	r4, [r6, #28]
 80196ce:	b97c      	cbnz	r4, 80196f0 <__pow5mult+0x48>
 80196d0:	2010      	movs	r0, #16
 80196d2:	f7fc fad1 	bl	8015c78 <malloc>
 80196d6:	4602      	mov	r2, r0
 80196d8:	61f0      	str	r0, [r6, #28]
 80196da:	b928      	cbnz	r0, 80196e8 <__pow5mult+0x40>
 80196dc:	4b1d      	ldr	r3, [pc, #116]	; (8019754 <__pow5mult+0xac>)
 80196de:	481e      	ldr	r0, [pc, #120]	; (8019758 <__pow5mult+0xb0>)
 80196e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80196e4:	f7fe fb92 	bl	8017e0c <__assert_func>
 80196e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80196ec:	6004      	str	r4, [r0, #0]
 80196ee:	60c4      	str	r4, [r0, #12]
 80196f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80196f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80196f8:	b94c      	cbnz	r4, 801970e <__pow5mult+0x66>
 80196fa:	f240 2171 	movw	r1, #625	; 0x271
 80196fe:	4630      	mov	r0, r6
 8019700:	f7ff ff12 	bl	8019528 <__i2b>
 8019704:	2300      	movs	r3, #0
 8019706:	f8c8 0008 	str.w	r0, [r8, #8]
 801970a:	4604      	mov	r4, r0
 801970c:	6003      	str	r3, [r0, #0]
 801970e:	f04f 0900 	mov.w	r9, #0
 8019712:	07eb      	lsls	r3, r5, #31
 8019714:	d50a      	bpl.n	801972c <__pow5mult+0x84>
 8019716:	4639      	mov	r1, r7
 8019718:	4622      	mov	r2, r4
 801971a:	4630      	mov	r0, r6
 801971c:	f7ff ff1a 	bl	8019554 <__multiply>
 8019720:	4639      	mov	r1, r7
 8019722:	4680      	mov	r8, r0
 8019724:	4630      	mov	r0, r6
 8019726:	f7ff fdff 	bl	8019328 <_Bfree>
 801972a:	4647      	mov	r7, r8
 801972c:	106d      	asrs	r5, r5, #1
 801972e:	d00b      	beq.n	8019748 <__pow5mult+0xa0>
 8019730:	6820      	ldr	r0, [r4, #0]
 8019732:	b938      	cbnz	r0, 8019744 <__pow5mult+0x9c>
 8019734:	4622      	mov	r2, r4
 8019736:	4621      	mov	r1, r4
 8019738:	4630      	mov	r0, r6
 801973a:	f7ff ff0b 	bl	8019554 <__multiply>
 801973e:	6020      	str	r0, [r4, #0]
 8019740:	f8c0 9000 	str.w	r9, [r0]
 8019744:	4604      	mov	r4, r0
 8019746:	e7e4      	b.n	8019712 <__pow5mult+0x6a>
 8019748:	4638      	mov	r0, r7
 801974a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801974e:	bf00      	nop
 8019750:	0801f090 	.word	0x0801f090
 8019754:	0801edba 	.word	0x0801edba
 8019758:	0801ef45 	.word	0x0801ef45

0801975c <__lshift>:
 801975c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019760:	460c      	mov	r4, r1
 8019762:	6849      	ldr	r1, [r1, #4]
 8019764:	6923      	ldr	r3, [r4, #16]
 8019766:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801976a:	68a3      	ldr	r3, [r4, #8]
 801976c:	4607      	mov	r7, r0
 801976e:	4691      	mov	r9, r2
 8019770:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019774:	f108 0601 	add.w	r6, r8, #1
 8019778:	42b3      	cmp	r3, r6
 801977a:	db0b      	blt.n	8019794 <__lshift+0x38>
 801977c:	4638      	mov	r0, r7
 801977e:	f7ff fd93 	bl	80192a8 <_Balloc>
 8019782:	4605      	mov	r5, r0
 8019784:	b948      	cbnz	r0, 801979a <__lshift+0x3e>
 8019786:	4602      	mov	r2, r0
 8019788:	4b28      	ldr	r3, [pc, #160]	; (801982c <__lshift+0xd0>)
 801978a:	4829      	ldr	r0, [pc, #164]	; (8019830 <__lshift+0xd4>)
 801978c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8019790:	f7fe fb3c 	bl	8017e0c <__assert_func>
 8019794:	3101      	adds	r1, #1
 8019796:	005b      	lsls	r3, r3, #1
 8019798:	e7ee      	b.n	8019778 <__lshift+0x1c>
 801979a:	2300      	movs	r3, #0
 801979c:	f100 0114 	add.w	r1, r0, #20
 80197a0:	f100 0210 	add.w	r2, r0, #16
 80197a4:	4618      	mov	r0, r3
 80197a6:	4553      	cmp	r3, sl
 80197a8:	db33      	blt.n	8019812 <__lshift+0xb6>
 80197aa:	6920      	ldr	r0, [r4, #16]
 80197ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80197b0:	f104 0314 	add.w	r3, r4, #20
 80197b4:	f019 091f 	ands.w	r9, r9, #31
 80197b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80197bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80197c0:	d02b      	beq.n	801981a <__lshift+0xbe>
 80197c2:	f1c9 0e20 	rsb	lr, r9, #32
 80197c6:	468a      	mov	sl, r1
 80197c8:	2200      	movs	r2, #0
 80197ca:	6818      	ldr	r0, [r3, #0]
 80197cc:	fa00 f009 	lsl.w	r0, r0, r9
 80197d0:	4310      	orrs	r0, r2
 80197d2:	f84a 0b04 	str.w	r0, [sl], #4
 80197d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80197da:	459c      	cmp	ip, r3
 80197dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80197e0:	d8f3      	bhi.n	80197ca <__lshift+0x6e>
 80197e2:	ebac 0304 	sub.w	r3, ip, r4
 80197e6:	3b15      	subs	r3, #21
 80197e8:	f023 0303 	bic.w	r3, r3, #3
 80197ec:	3304      	adds	r3, #4
 80197ee:	f104 0015 	add.w	r0, r4, #21
 80197f2:	4584      	cmp	ip, r0
 80197f4:	bf38      	it	cc
 80197f6:	2304      	movcc	r3, #4
 80197f8:	50ca      	str	r2, [r1, r3]
 80197fa:	b10a      	cbz	r2, 8019800 <__lshift+0xa4>
 80197fc:	f108 0602 	add.w	r6, r8, #2
 8019800:	3e01      	subs	r6, #1
 8019802:	4638      	mov	r0, r7
 8019804:	612e      	str	r6, [r5, #16]
 8019806:	4621      	mov	r1, r4
 8019808:	f7ff fd8e 	bl	8019328 <_Bfree>
 801980c:	4628      	mov	r0, r5
 801980e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019812:	f842 0f04 	str.w	r0, [r2, #4]!
 8019816:	3301      	adds	r3, #1
 8019818:	e7c5      	b.n	80197a6 <__lshift+0x4a>
 801981a:	3904      	subs	r1, #4
 801981c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019820:	f841 2f04 	str.w	r2, [r1, #4]!
 8019824:	459c      	cmp	ip, r3
 8019826:	d8f9      	bhi.n	801981c <__lshift+0xc0>
 8019828:	e7ea      	b.n	8019800 <__lshift+0xa4>
 801982a:	bf00      	nop
 801982c:	0801eed4 	.word	0x0801eed4
 8019830:	0801ef45 	.word	0x0801ef45

08019834 <__mcmp>:
 8019834:	b530      	push	{r4, r5, lr}
 8019836:	6902      	ldr	r2, [r0, #16]
 8019838:	690c      	ldr	r4, [r1, #16]
 801983a:	1b12      	subs	r2, r2, r4
 801983c:	d10e      	bne.n	801985c <__mcmp+0x28>
 801983e:	f100 0314 	add.w	r3, r0, #20
 8019842:	3114      	adds	r1, #20
 8019844:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019848:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801984c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019850:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019854:	42a5      	cmp	r5, r4
 8019856:	d003      	beq.n	8019860 <__mcmp+0x2c>
 8019858:	d305      	bcc.n	8019866 <__mcmp+0x32>
 801985a:	2201      	movs	r2, #1
 801985c:	4610      	mov	r0, r2
 801985e:	bd30      	pop	{r4, r5, pc}
 8019860:	4283      	cmp	r3, r0
 8019862:	d3f3      	bcc.n	801984c <__mcmp+0x18>
 8019864:	e7fa      	b.n	801985c <__mcmp+0x28>
 8019866:	f04f 32ff 	mov.w	r2, #4294967295
 801986a:	e7f7      	b.n	801985c <__mcmp+0x28>

0801986c <__mdiff>:
 801986c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019870:	460c      	mov	r4, r1
 8019872:	4606      	mov	r6, r0
 8019874:	4611      	mov	r1, r2
 8019876:	4620      	mov	r0, r4
 8019878:	4690      	mov	r8, r2
 801987a:	f7ff ffdb 	bl	8019834 <__mcmp>
 801987e:	1e05      	subs	r5, r0, #0
 8019880:	d110      	bne.n	80198a4 <__mdiff+0x38>
 8019882:	4629      	mov	r1, r5
 8019884:	4630      	mov	r0, r6
 8019886:	f7ff fd0f 	bl	80192a8 <_Balloc>
 801988a:	b930      	cbnz	r0, 801989a <__mdiff+0x2e>
 801988c:	4b3a      	ldr	r3, [pc, #232]	; (8019978 <__mdiff+0x10c>)
 801988e:	4602      	mov	r2, r0
 8019890:	f240 2137 	movw	r1, #567	; 0x237
 8019894:	4839      	ldr	r0, [pc, #228]	; (801997c <__mdiff+0x110>)
 8019896:	f7fe fab9 	bl	8017e0c <__assert_func>
 801989a:	2301      	movs	r3, #1
 801989c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80198a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198a4:	bfa4      	itt	ge
 80198a6:	4643      	movge	r3, r8
 80198a8:	46a0      	movge	r8, r4
 80198aa:	4630      	mov	r0, r6
 80198ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80198b0:	bfa6      	itte	ge
 80198b2:	461c      	movge	r4, r3
 80198b4:	2500      	movge	r5, #0
 80198b6:	2501      	movlt	r5, #1
 80198b8:	f7ff fcf6 	bl	80192a8 <_Balloc>
 80198bc:	b920      	cbnz	r0, 80198c8 <__mdiff+0x5c>
 80198be:	4b2e      	ldr	r3, [pc, #184]	; (8019978 <__mdiff+0x10c>)
 80198c0:	4602      	mov	r2, r0
 80198c2:	f240 2145 	movw	r1, #581	; 0x245
 80198c6:	e7e5      	b.n	8019894 <__mdiff+0x28>
 80198c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80198cc:	6926      	ldr	r6, [r4, #16]
 80198ce:	60c5      	str	r5, [r0, #12]
 80198d0:	f104 0914 	add.w	r9, r4, #20
 80198d4:	f108 0514 	add.w	r5, r8, #20
 80198d8:	f100 0e14 	add.w	lr, r0, #20
 80198dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80198e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80198e4:	f108 0210 	add.w	r2, r8, #16
 80198e8:	46f2      	mov	sl, lr
 80198ea:	2100      	movs	r1, #0
 80198ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80198f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80198f4:	fa11 f88b 	uxtah	r8, r1, fp
 80198f8:	b299      	uxth	r1, r3
 80198fa:	0c1b      	lsrs	r3, r3, #16
 80198fc:	eba8 0801 	sub.w	r8, r8, r1
 8019900:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019904:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019908:	fa1f f888 	uxth.w	r8, r8
 801990c:	1419      	asrs	r1, r3, #16
 801990e:	454e      	cmp	r6, r9
 8019910:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019914:	f84a 3b04 	str.w	r3, [sl], #4
 8019918:	d8e8      	bhi.n	80198ec <__mdiff+0x80>
 801991a:	1b33      	subs	r3, r6, r4
 801991c:	3b15      	subs	r3, #21
 801991e:	f023 0303 	bic.w	r3, r3, #3
 8019922:	3304      	adds	r3, #4
 8019924:	3415      	adds	r4, #21
 8019926:	42a6      	cmp	r6, r4
 8019928:	bf38      	it	cc
 801992a:	2304      	movcc	r3, #4
 801992c:	441d      	add	r5, r3
 801992e:	4473      	add	r3, lr
 8019930:	469e      	mov	lr, r3
 8019932:	462e      	mov	r6, r5
 8019934:	4566      	cmp	r6, ip
 8019936:	d30e      	bcc.n	8019956 <__mdiff+0xea>
 8019938:	f10c 0203 	add.w	r2, ip, #3
 801993c:	1b52      	subs	r2, r2, r5
 801993e:	f022 0203 	bic.w	r2, r2, #3
 8019942:	3d03      	subs	r5, #3
 8019944:	45ac      	cmp	ip, r5
 8019946:	bf38      	it	cc
 8019948:	2200      	movcc	r2, #0
 801994a:	4413      	add	r3, r2
 801994c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019950:	b17a      	cbz	r2, 8019972 <__mdiff+0x106>
 8019952:	6107      	str	r7, [r0, #16]
 8019954:	e7a4      	b.n	80198a0 <__mdiff+0x34>
 8019956:	f856 8b04 	ldr.w	r8, [r6], #4
 801995a:	fa11 f288 	uxtah	r2, r1, r8
 801995e:	1414      	asrs	r4, r2, #16
 8019960:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019964:	b292      	uxth	r2, r2
 8019966:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801996a:	f84e 2b04 	str.w	r2, [lr], #4
 801996e:	1421      	asrs	r1, r4, #16
 8019970:	e7e0      	b.n	8019934 <__mdiff+0xc8>
 8019972:	3f01      	subs	r7, #1
 8019974:	e7ea      	b.n	801994c <__mdiff+0xe0>
 8019976:	bf00      	nop
 8019978:	0801eed4 	.word	0x0801eed4
 801997c:	0801ef45 	.word	0x0801ef45

08019980 <__ulp>:
 8019980:	b082      	sub	sp, #8
 8019982:	ed8d 0b00 	vstr	d0, [sp]
 8019986:	9a01      	ldr	r2, [sp, #4]
 8019988:	4b0f      	ldr	r3, [pc, #60]	; (80199c8 <__ulp+0x48>)
 801998a:	4013      	ands	r3, r2
 801998c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8019990:	2b00      	cmp	r3, #0
 8019992:	dc08      	bgt.n	80199a6 <__ulp+0x26>
 8019994:	425b      	negs	r3, r3
 8019996:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801999a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801999e:	da04      	bge.n	80199aa <__ulp+0x2a>
 80199a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80199a4:	4113      	asrs	r3, r2
 80199a6:	2200      	movs	r2, #0
 80199a8:	e008      	b.n	80199bc <__ulp+0x3c>
 80199aa:	f1a2 0314 	sub.w	r3, r2, #20
 80199ae:	2b1e      	cmp	r3, #30
 80199b0:	bfda      	itte	le
 80199b2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80199b6:	40da      	lsrle	r2, r3
 80199b8:	2201      	movgt	r2, #1
 80199ba:	2300      	movs	r3, #0
 80199bc:	4619      	mov	r1, r3
 80199be:	4610      	mov	r0, r2
 80199c0:	ec41 0b10 	vmov	d0, r0, r1
 80199c4:	b002      	add	sp, #8
 80199c6:	4770      	bx	lr
 80199c8:	7ff00000 	.word	0x7ff00000

080199cc <__b2d>:
 80199cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199d0:	6906      	ldr	r6, [r0, #16]
 80199d2:	f100 0814 	add.w	r8, r0, #20
 80199d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80199da:	1f37      	subs	r7, r6, #4
 80199dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80199e0:	4610      	mov	r0, r2
 80199e2:	f7ff fd53 	bl	801948c <__hi0bits>
 80199e6:	f1c0 0320 	rsb	r3, r0, #32
 80199ea:	280a      	cmp	r0, #10
 80199ec:	600b      	str	r3, [r1, #0]
 80199ee:	491b      	ldr	r1, [pc, #108]	; (8019a5c <__b2d+0x90>)
 80199f0:	dc15      	bgt.n	8019a1e <__b2d+0x52>
 80199f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80199f6:	fa22 f30c 	lsr.w	r3, r2, ip
 80199fa:	45b8      	cmp	r8, r7
 80199fc:	ea43 0501 	orr.w	r5, r3, r1
 8019a00:	bf34      	ite	cc
 8019a02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019a06:	2300      	movcs	r3, #0
 8019a08:	3015      	adds	r0, #21
 8019a0a:	fa02 f000 	lsl.w	r0, r2, r0
 8019a0e:	fa23 f30c 	lsr.w	r3, r3, ip
 8019a12:	4303      	orrs	r3, r0
 8019a14:	461c      	mov	r4, r3
 8019a16:	ec45 4b10 	vmov	d0, r4, r5
 8019a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a1e:	45b8      	cmp	r8, r7
 8019a20:	bf3a      	itte	cc
 8019a22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019a26:	f1a6 0708 	subcc.w	r7, r6, #8
 8019a2a:	2300      	movcs	r3, #0
 8019a2c:	380b      	subs	r0, #11
 8019a2e:	d012      	beq.n	8019a56 <__b2d+0x8a>
 8019a30:	f1c0 0120 	rsb	r1, r0, #32
 8019a34:	fa23 f401 	lsr.w	r4, r3, r1
 8019a38:	4082      	lsls	r2, r0
 8019a3a:	4322      	orrs	r2, r4
 8019a3c:	4547      	cmp	r7, r8
 8019a3e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8019a42:	bf8c      	ite	hi
 8019a44:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8019a48:	2200      	movls	r2, #0
 8019a4a:	4083      	lsls	r3, r0
 8019a4c:	40ca      	lsrs	r2, r1
 8019a4e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019a52:	4313      	orrs	r3, r2
 8019a54:	e7de      	b.n	8019a14 <__b2d+0x48>
 8019a56:	ea42 0501 	orr.w	r5, r2, r1
 8019a5a:	e7db      	b.n	8019a14 <__b2d+0x48>
 8019a5c:	3ff00000 	.word	0x3ff00000

08019a60 <__d2b>:
 8019a60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019a64:	460f      	mov	r7, r1
 8019a66:	2101      	movs	r1, #1
 8019a68:	ec59 8b10 	vmov	r8, r9, d0
 8019a6c:	4616      	mov	r6, r2
 8019a6e:	f7ff fc1b 	bl	80192a8 <_Balloc>
 8019a72:	4604      	mov	r4, r0
 8019a74:	b930      	cbnz	r0, 8019a84 <__d2b+0x24>
 8019a76:	4602      	mov	r2, r0
 8019a78:	4b24      	ldr	r3, [pc, #144]	; (8019b0c <__d2b+0xac>)
 8019a7a:	4825      	ldr	r0, [pc, #148]	; (8019b10 <__d2b+0xb0>)
 8019a7c:	f240 310f 	movw	r1, #783	; 0x30f
 8019a80:	f7fe f9c4 	bl	8017e0c <__assert_func>
 8019a84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019a88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019a8c:	bb2d      	cbnz	r5, 8019ada <__d2b+0x7a>
 8019a8e:	9301      	str	r3, [sp, #4]
 8019a90:	f1b8 0300 	subs.w	r3, r8, #0
 8019a94:	d026      	beq.n	8019ae4 <__d2b+0x84>
 8019a96:	4668      	mov	r0, sp
 8019a98:	9300      	str	r3, [sp, #0]
 8019a9a:	f7ff fd17 	bl	80194cc <__lo0bits>
 8019a9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019aa2:	b1e8      	cbz	r0, 8019ae0 <__d2b+0x80>
 8019aa4:	f1c0 0320 	rsb	r3, r0, #32
 8019aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8019aac:	430b      	orrs	r3, r1
 8019aae:	40c2      	lsrs	r2, r0
 8019ab0:	6163      	str	r3, [r4, #20]
 8019ab2:	9201      	str	r2, [sp, #4]
 8019ab4:	9b01      	ldr	r3, [sp, #4]
 8019ab6:	61a3      	str	r3, [r4, #24]
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	bf14      	ite	ne
 8019abc:	2202      	movne	r2, #2
 8019abe:	2201      	moveq	r2, #1
 8019ac0:	6122      	str	r2, [r4, #16]
 8019ac2:	b1bd      	cbz	r5, 8019af4 <__d2b+0x94>
 8019ac4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019ac8:	4405      	add	r5, r0
 8019aca:	603d      	str	r5, [r7, #0]
 8019acc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019ad0:	6030      	str	r0, [r6, #0]
 8019ad2:	4620      	mov	r0, r4
 8019ad4:	b003      	add	sp, #12
 8019ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019ade:	e7d6      	b.n	8019a8e <__d2b+0x2e>
 8019ae0:	6161      	str	r1, [r4, #20]
 8019ae2:	e7e7      	b.n	8019ab4 <__d2b+0x54>
 8019ae4:	a801      	add	r0, sp, #4
 8019ae6:	f7ff fcf1 	bl	80194cc <__lo0bits>
 8019aea:	9b01      	ldr	r3, [sp, #4]
 8019aec:	6163      	str	r3, [r4, #20]
 8019aee:	3020      	adds	r0, #32
 8019af0:	2201      	movs	r2, #1
 8019af2:	e7e5      	b.n	8019ac0 <__d2b+0x60>
 8019af4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019af8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019afc:	6038      	str	r0, [r7, #0]
 8019afe:	6918      	ldr	r0, [r3, #16]
 8019b00:	f7ff fcc4 	bl	801948c <__hi0bits>
 8019b04:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019b08:	e7e2      	b.n	8019ad0 <__d2b+0x70>
 8019b0a:	bf00      	nop
 8019b0c:	0801eed4 	.word	0x0801eed4
 8019b10:	0801ef45 	.word	0x0801ef45

08019b14 <__ratio>:
 8019b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b18:	4688      	mov	r8, r1
 8019b1a:	4669      	mov	r1, sp
 8019b1c:	4681      	mov	r9, r0
 8019b1e:	f7ff ff55 	bl	80199cc <__b2d>
 8019b22:	a901      	add	r1, sp, #4
 8019b24:	4640      	mov	r0, r8
 8019b26:	ec55 4b10 	vmov	r4, r5, d0
 8019b2a:	f7ff ff4f 	bl	80199cc <__b2d>
 8019b2e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019b32:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019b36:	eba3 0c02 	sub.w	ip, r3, r2
 8019b3a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019b3e:	1a9b      	subs	r3, r3, r2
 8019b40:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019b44:	ec51 0b10 	vmov	r0, r1, d0
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	bfd6      	itet	le
 8019b4c:	460a      	movle	r2, r1
 8019b4e:	462a      	movgt	r2, r5
 8019b50:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019b54:	468b      	mov	fp, r1
 8019b56:	462f      	mov	r7, r5
 8019b58:	bfd4      	ite	le
 8019b5a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019b5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019b62:	4620      	mov	r0, r4
 8019b64:	ee10 2a10 	vmov	r2, s0
 8019b68:	465b      	mov	r3, fp
 8019b6a:	4639      	mov	r1, r7
 8019b6c:	f7e6 fe6e 	bl	800084c <__aeabi_ddiv>
 8019b70:	ec41 0b10 	vmov	d0, r0, r1
 8019b74:	b003      	add	sp, #12
 8019b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019b7a <__copybits>:
 8019b7a:	3901      	subs	r1, #1
 8019b7c:	b570      	push	{r4, r5, r6, lr}
 8019b7e:	1149      	asrs	r1, r1, #5
 8019b80:	6914      	ldr	r4, [r2, #16]
 8019b82:	3101      	adds	r1, #1
 8019b84:	f102 0314 	add.w	r3, r2, #20
 8019b88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019b8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019b90:	1f05      	subs	r5, r0, #4
 8019b92:	42a3      	cmp	r3, r4
 8019b94:	d30c      	bcc.n	8019bb0 <__copybits+0x36>
 8019b96:	1aa3      	subs	r3, r4, r2
 8019b98:	3b11      	subs	r3, #17
 8019b9a:	f023 0303 	bic.w	r3, r3, #3
 8019b9e:	3211      	adds	r2, #17
 8019ba0:	42a2      	cmp	r2, r4
 8019ba2:	bf88      	it	hi
 8019ba4:	2300      	movhi	r3, #0
 8019ba6:	4418      	add	r0, r3
 8019ba8:	2300      	movs	r3, #0
 8019baa:	4288      	cmp	r0, r1
 8019bac:	d305      	bcc.n	8019bba <__copybits+0x40>
 8019bae:	bd70      	pop	{r4, r5, r6, pc}
 8019bb0:	f853 6b04 	ldr.w	r6, [r3], #4
 8019bb4:	f845 6f04 	str.w	r6, [r5, #4]!
 8019bb8:	e7eb      	b.n	8019b92 <__copybits+0x18>
 8019bba:	f840 3b04 	str.w	r3, [r0], #4
 8019bbe:	e7f4      	b.n	8019baa <__copybits+0x30>

08019bc0 <__any_on>:
 8019bc0:	f100 0214 	add.w	r2, r0, #20
 8019bc4:	6900      	ldr	r0, [r0, #16]
 8019bc6:	114b      	asrs	r3, r1, #5
 8019bc8:	4298      	cmp	r0, r3
 8019bca:	b510      	push	{r4, lr}
 8019bcc:	db11      	blt.n	8019bf2 <__any_on+0x32>
 8019bce:	dd0a      	ble.n	8019be6 <__any_on+0x26>
 8019bd0:	f011 011f 	ands.w	r1, r1, #31
 8019bd4:	d007      	beq.n	8019be6 <__any_on+0x26>
 8019bd6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019bda:	fa24 f001 	lsr.w	r0, r4, r1
 8019bde:	fa00 f101 	lsl.w	r1, r0, r1
 8019be2:	428c      	cmp	r4, r1
 8019be4:	d10b      	bne.n	8019bfe <__any_on+0x3e>
 8019be6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019bea:	4293      	cmp	r3, r2
 8019bec:	d803      	bhi.n	8019bf6 <__any_on+0x36>
 8019bee:	2000      	movs	r0, #0
 8019bf0:	bd10      	pop	{r4, pc}
 8019bf2:	4603      	mov	r3, r0
 8019bf4:	e7f7      	b.n	8019be6 <__any_on+0x26>
 8019bf6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019bfa:	2900      	cmp	r1, #0
 8019bfc:	d0f5      	beq.n	8019bea <__any_on+0x2a>
 8019bfe:	2001      	movs	r0, #1
 8019c00:	e7f6      	b.n	8019bf0 <__any_on+0x30>

08019c02 <__ascii_wctomb>:
 8019c02:	b149      	cbz	r1, 8019c18 <__ascii_wctomb+0x16>
 8019c04:	2aff      	cmp	r2, #255	; 0xff
 8019c06:	bf85      	ittet	hi
 8019c08:	238a      	movhi	r3, #138	; 0x8a
 8019c0a:	6003      	strhi	r3, [r0, #0]
 8019c0c:	700a      	strbls	r2, [r1, #0]
 8019c0e:	f04f 30ff 	movhi.w	r0, #4294967295
 8019c12:	bf98      	it	ls
 8019c14:	2001      	movls	r0, #1
 8019c16:	4770      	bx	lr
 8019c18:	4608      	mov	r0, r1
 8019c1a:	4770      	bx	lr

08019c1c <__ssputs_r>:
 8019c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c20:	688e      	ldr	r6, [r1, #8]
 8019c22:	461f      	mov	r7, r3
 8019c24:	42be      	cmp	r6, r7
 8019c26:	680b      	ldr	r3, [r1, #0]
 8019c28:	4682      	mov	sl, r0
 8019c2a:	460c      	mov	r4, r1
 8019c2c:	4690      	mov	r8, r2
 8019c2e:	d82c      	bhi.n	8019c8a <__ssputs_r+0x6e>
 8019c30:	898a      	ldrh	r2, [r1, #12]
 8019c32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019c36:	d026      	beq.n	8019c86 <__ssputs_r+0x6a>
 8019c38:	6965      	ldr	r5, [r4, #20]
 8019c3a:	6909      	ldr	r1, [r1, #16]
 8019c3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019c40:	eba3 0901 	sub.w	r9, r3, r1
 8019c44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019c48:	1c7b      	adds	r3, r7, #1
 8019c4a:	444b      	add	r3, r9
 8019c4c:	106d      	asrs	r5, r5, #1
 8019c4e:	429d      	cmp	r5, r3
 8019c50:	bf38      	it	cc
 8019c52:	461d      	movcc	r5, r3
 8019c54:	0553      	lsls	r3, r2, #21
 8019c56:	d527      	bpl.n	8019ca8 <__ssputs_r+0x8c>
 8019c58:	4629      	mov	r1, r5
 8019c5a:	f7fc f83d 	bl	8015cd8 <_malloc_r>
 8019c5e:	4606      	mov	r6, r0
 8019c60:	b360      	cbz	r0, 8019cbc <__ssputs_r+0xa0>
 8019c62:	6921      	ldr	r1, [r4, #16]
 8019c64:	464a      	mov	r2, r9
 8019c66:	f7fe f8b4 	bl	8017dd2 <memcpy>
 8019c6a:	89a3      	ldrh	r3, [r4, #12]
 8019c6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c74:	81a3      	strh	r3, [r4, #12]
 8019c76:	6126      	str	r6, [r4, #16]
 8019c78:	6165      	str	r5, [r4, #20]
 8019c7a:	444e      	add	r6, r9
 8019c7c:	eba5 0509 	sub.w	r5, r5, r9
 8019c80:	6026      	str	r6, [r4, #0]
 8019c82:	60a5      	str	r5, [r4, #8]
 8019c84:	463e      	mov	r6, r7
 8019c86:	42be      	cmp	r6, r7
 8019c88:	d900      	bls.n	8019c8c <__ssputs_r+0x70>
 8019c8a:	463e      	mov	r6, r7
 8019c8c:	6820      	ldr	r0, [r4, #0]
 8019c8e:	4632      	mov	r2, r6
 8019c90:	4641      	mov	r1, r8
 8019c92:	f000 f9db 	bl	801a04c <memmove>
 8019c96:	68a3      	ldr	r3, [r4, #8]
 8019c98:	1b9b      	subs	r3, r3, r6
 8019c9a:	60a3      	str	r3, [r4, #8]
 8019c9c:	6823      	ldr	r3, [r4, #0]
 8019c9e:	4433      	add	r3, r6
 8019ca0:	6023      	str	r3, [r4, #0]
 8019ca2:	2000      	movs	r0, #0
 8019ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ca8:	462a      	mov	r2, r5
 8019caa:	f000 fa06 	bl	801a0ba <_realloc_r>
 8019cae:	4606      	mov	r6, r0
 8019cb0:	2800      	cmp	r0, #0
 8019cb2:	d1e0      	bne.n	8019c76 <__ssputs_r+0x5a>
 8019cb4:	6921      	ldr	r1, [r4, #16]
 8019cb6:	4650      	mov	r0, sl
 8019cb8:	f7fe ff40 	bl	8018b3c <_free_r>
 8019cbc:	230c      	movs	r3, #12
 8019cbe:	f8ca 3000 	str.w	r3, [sl]
 8019cc2:	89a3      	ldrh	r3, [r4, #12]
 8019cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019cc8:	81a3      	strh	r3, [r4, #12]
 8019cca:	f04f 30ff 	mov.w	r0, #4294967295
 8019cce:	e7e9      	b.n	8019ca4 <__ssputs_r+0x88>

08019cd0 <_svfiprintf_r>:
 8019cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cd4:	4698      	mov	r8, r3
 8019cd6:	898b      	ldrh	r3, [r1, #12]
 8019cd8:	061b      	lsls	r3, r3, #24
 8019cda:	b09d      	sub	sp, #116	; 0x74
 8019cdc:	4607      	mov	r7, r0
 8019cde:	460d      	mov	r5, r1
 8019ce0:	4614      	mov	r4, r2
 8019ce2:	d50e      	bpl.n	8019d02 <_svfiprintf_r+0x32>
 8019ce4:	690b      	ldr	r3, [r1, #16]
 8019ce6:	b963      	cbnz	r3, 8019d02 <_svfiprintf_r+0x32>
 8019ce8:	2140      	movs	r1, #64	; 0x40
 8019cea:	f7fb fff5 	bl	8015cd8 <_malloc_r>
 8019cee:	6028      	str	r0, [r5, #0]
 8019cf0:	6128      	str	r0, [r5, #16]
 8019cf2:	b920      	cbnz	r0, 8019cfe <_svfiprintf_r+0x2e>
 8019cf4:	230c      	movs	r3, #12
 8019cf6:	603b      	str	r3, [r7, #0]
 8019cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8019cfc:	e0d0      	b.n	8019ea0 <_svfiprintf_r+0x1d0>
 8019cfe:	2340      	movs	r3, #64	; 0x40
 8019d00:	616b      	str	r3, [r5, #20]
 8019d02:	2300      	movs	r3, #0
 8019d04:	9309      	str	r3, [sp, #36]	; 0x24
 8019d06:	2320      	movs	r3, #32
 8019d08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019d0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019d10:	2330      	movs	r3, #48	; 0x30
 8019d12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019eb8 <_svfiprintf_r+0x1e8>
 8019d16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019d1a:	f04f 0901 	mov.w	r9, #1
 8019d1e:	4623      	mov	r3, r4
 8019d20:	469a      	mov	sl, r3
 8019d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019d26:	b10a      	cbz	r2, 8019d2c <_svfiprintf_r+0x5c>
 8019d28:	2a25      	cmp	r2, #37	; 0x25
 8019d2a:	d1f9      	bne.n	8019d20 <_svfiprintf_r+0x50>
 8019d2c:	ebba 0b04 	subs.w	fp, sl, r4
 8019d30:	d00b      	beq.n	8019d4a <_svfiprintf_r+0x7a>
 8019d32:	465b      	mov	r3, fp
 8019d34:	4622      	mov	r2, r4
 8019d36:	4629      	mov	r1, r5
 8019d38:	4638      	mov	r0, r7
 8019d3a:	f7ff ff6f 	bl	8019c1c <__ssputs_r>
 8019d3e:	3001      	adds	r0, #1
 8019d40:	f000 80a9 	beq.w	8019e96 <_svfiprintf_r+0x1c6>
 8019d44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d46:	445a      	add	r2, fp
 8019d48:	9209      	str	r2, [sp, #36]	; 0x24
 8019d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	f000 80a1 	beq.w	8019e96 <_svfiprintf_r+0x1c6>
 8019d54:	2300      	movs	r3, #0
 8019d56:	f04f 32ff 	mov.w	r2, #4294967295
 8019d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d5e:	f10a 0a01 	add.w	sl, sl, #1
 8019d62:	9304      	str	r3, [sp, #16]
 8019d64:	9307      	str	r3, [sp, #28]
 8019d66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019d6a:	931a      	str	r3, [sp, #104]	; 0x68
 8019d6c:	4654      	mov	r4, sl
 8019d6e:	2205      	movs	r2, #5
 8019d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d74:	4850      	ldr	r0, [pc, #320]	; (8019eb8 <_svfiprintf_r+0x1e8>)
 8019d76:	f7e6 fa2b 	bl	80001d0 <memchr>
 8019d7a:	9a04      	ldr	r2, [sp, #16]
 8019d7c:	b9d8      	cbnz	r0, 8019db6 <_svfiprintf_r+0xe6>
 8019d7e:	06d0      	lsls	r0, r2, #27
 8019d80:	bf44      	itt	mi
 8019d82:	2320      	movmi	r3, #32
 8019d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d88:	0711      	lsls	r1, r2, #28
 8019d8a:	bf44      	itt	mi
 8019d8c:	232b      	movmi	r3, #43	; 0x2b
 8019d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d92:	f89a 3000 	ldrb.w	r3, [sl]
 8019d96:	2b2a      	cmp	r3, #42	; 0x2a
 8019d98:	d015      	beq.n	8019dc6 <_svfiprintf_r+0xf6>
 8019d9a:	9a07      	ldr	r2, [sp, #28]
 8019d9c:	4654      	mov	r4, sl
 8019d9e:	2000      	movs	r0, #0
 8019da0:	f04f 0c0a 	mov.w	ip, #10
 8019da4:	4621      	mov	r1, r4
 8019da6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019daa:	3b30      	subs	r3, #48	; 0x30
 8019dac:	2b09      	cmp	r3, #9
 8019dae:	d94d      	bls.n	8019e4c <_svfiprintf_r+0x17c>
 8019db0:	b1b0      	cbz	r0, 8019de0 <_svfiprintf_r+0x110>
 8019db2:	9207      	str	r2, [sp, #28]
 8019db4:	e014      	b.n	8019de0 <_svfiprintf_r+0x110>
 8019db6:	eba0 0308 	sub.w	r3, r0, r8
 8019dba:	fa09 f303 	lsl.w	r3, r9, r3
 8019dbe:	4313      	orrs	r3, r2
 8019dc0:	9304      	str	r3, [sp, #16]
 8019dc2:	46a2      	mov	sl, r4
 8019dc4:	e7d2      	b.n	8019d6c <_svfiprintf_r+0x9c>
 8019dc6:	9b03      	ldr	r3, [sp, #12]
 8019dc8:	1d19      	adds	r1, r3, #4
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	9103      	str	r1, [sp, #12]
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	bfbb      	ittet	lt
 8019dd2:	425b      	neglt	r3, r3
 8019dd4:	f042 0202 	orrlt.w	r2, r2, #2
 8019dd8:	9307      	strge	r3, [sp, #28]
 8019dda:	9307      	strlt	r3, [sp, #28]
 8019ddc:	bfb8      	it	lt
 8019dde:	9204      	strlt	r2, [sp, #16]
 8019de0:	7823      	ldrb	r3, [r4, #0]
 8019de2:	2b2e      	cmp	r3, #46	; 0x2e
 8019de4:	d10c      	bne.n	8019e00 <_svfiprintf_r+0x130>
 8019de6:	7863      	ldrb	r3, [r4, #1]
 8019de8:	2b2a      	cmp	r3, #42	; 0x2a
 8019dea:	d134      	bne.n	8019e56 <_svfiprintf_r+0x186>
 8019dec:	9b03      	ldr	r3, [sp, #12]
 8019dee:	1d1a      	adds	r2, r3, #4
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	9203      	str	r2, [sp, #12]
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	bfb8      	it	lt
 8019df8:	f04f 33ff 	movlt.w	r3, #4294967295
 8019dfc:	3402      	adds	r4, #2
 8019dfe:	9305      	str	r3, [sp, #20]
 8019e00:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8019ec8 <_svfiprintf_r+0x1f8>
 8019e04:	7821      	ldrb	r1, [r4, #0]
 8019e06:	2203      	movs	r2, #3
 8019e08:	4650      	mov	r0, sl
 8019e0a:	f7e6 f9e1 	bl	80001d0 <memchr>
 8019e0e:	b138      	cbz	r0, 8019e20 <_svfiprintf_r+0x150>
 8019e10:	9b04      	ldr	r3, [sp, #16]
 8019e12:	eba0 000a 	sub.w	r0, r0, sl
 8019e16:	2240      	movs	r2, #64	; 0x40
 8019e18:	4082      	lsls	r2, r0
 8019e1a:	4313      	orrs	r3, r2
 8019e1c:	3401      	adds	r4, #1
 8019e1e:	9304      	str	r3, [sp, #16]
 8019e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e24:	4825      	ldr	r0, [pc, #148]	; (8019ebc <_svfiprintf_r+0x1ec>)
 8019e26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019e2a:	2206      	movs	r2, #6
 8019e2c:	f7e6 f9d0 	bl	80001d0 <memchr>
 8019e30:	2800      	cmp	r0, #0
 8019e32:	d038      	beq.n	8019ea6 <_svfiprintf_r+0x1d6>
 8019e34:	4b22      	ldr	r3, [pc, #136]	; (8019ec0 <_svfiprintf_r+0x1f0>)
 8019e36:	bb1b      	cbnz	r3, 8019e80 <_svfiprintf_r+0x1b0>
 8019e38:	9b03      	ldr	r3, [sp, #12]
 8019e3a:	3307      	adds	r3, #7
 8019e3c:	f023 0307 	bic.w	r3, r3, #7
 8019e40:	3308      	adds	r3, #8
 8019e42:	9303      	str	r3, [sp, #12]
 8019e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e46:	4433      	add	r3, r6
 8019e48:	9309      	str	r3, [sp, #36]	; 0x24
 8019e4a:	e768      	b.n	8019d1e <_svfiprintf_r+0x4e>
 8019e4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019e50:	460c      	mov	r4, r1
 8019e52:	2001      	movs	r0, #1
 8019e54:	e7a6      	b.n	8019da4 <_svfiprintf_r+0xd4>
 8019e56:	2300      	movs	r3, #0
 8019e58:	3401      	adds	r4, #1
 8019e5a:	9305      	str	r3, [sp, #20]
 8019e5c:	4619      	mov	r1, r3
 8019e5e:	f04f 0c0a 	mov.w	ip, #10
 8019e62:	4620      	mov	r0, r4
 8019e64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e68:	3a30      	subs	r2, #48	; 0x30
 8019e6a:	2a09      	cmp	r2, #9
 8019e6c:	d903      	bls.n	8019e76 <_svfiprintf_r+0x1a6>
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d0c6      	beq.n	8019e00 <_svfiprintf_r+0x130>
 8019e72:	9105      	str	r1, [sp, #20]
 8019e74:	e7c4      	b.n	8019e00 <_svfiprintf_r+0x130>
 8019e76:	fb0c 2101 	mla	r1, ip, r1, r2
 8019e7a:	4604      	mov	r4, r0
 8019e7c:	2301      	movs	r3, #1
 8019e7e:	e7f0      	b.n	8019e62 <_svfiprintf_r+0x192>
 8019e80:	ab03      	add	r3, sp, #12
 8019e82:	9300      	str	r3, [sp, #0]
 8019e84:	462a      	mov	r2, r5
 8019e86:	4b0f      	ldr	r3, [pc, #60]	; (8019ec4 <_svfiprintf_r+0x1f4>)
 8019e88:	a904      	add	r1, sp, #16
 8019e8a:	4638      	mov	r0, r7
 8019e8c:	f7fc ff56 	bl	8016d3c <_printf_float>
 8019e90:	1c42      	adds	r2, r0, #1
 8019e92:	4606      	mov	r6, r0
 8019e94:	d1d6      	bne.n	8019e44 <_svfiprintf_r+0x174>
 8019e96:	89ab      	ldrh	r3, [r5, #12]
 8019e98:	065b      	lsls	r3, r3, #25
 8019e9a:	f53f af2d 	bmi.w	8019cf8 <_svfiprintf_r+0x28>
 8019e9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019ea0:	b01d      	add	sp, #116	; 0x74
 8019ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ea6:	ab03      	add	r3, sp, #12
 8019ea8:	9300      	str	r3, [sp, #0]
 8019eaa:	462a      	mov	r2, r5
 8019eac:	4b05      	ldr	r3, [pc, #20]	; (8019ec4 <_svfiprintf_r+0x1f4>)
 8019eae:	a904      	add	r1, sp, #16
 8019eb0:	4638      	mov	r0, r7
 8019eb2:	f7fd f9e7 	bl	8017284 <_printf_i>
 8019eb6:	e7eb      	b.n	8019e90 <_svfiprintf_r+0x1c0>
 8019eb8:	0801f09c 	.word	0x0801f09c
 8019ebc:	0801f0a6 	.word	0x0801f0a6
 8019ec0:	08016d3d 	.word	0x08016d3d
 8019ec4:	08019c1d 	.word	0x08019c1d
 8019ec8:	0801f0a2 	.word	0x0801f0a2

08019ecc <__sflush_r>:
 8019ecc:	898a      	ldrh	r2, [r1, #12]
 8019ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ed2:	4605      	mov	r5, r0
 8019ed4:	0710      	lsls	r0, r2, #28
 8019ed6:	460c      	mov	r4, r1
 8019ed8:	d458      	bmi.n	8019f8c <__sflush_r+0xc0>
 8019eda:	684b      	ldr	r3, [r1, #4]
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	dc05      	bgt.n	8019eec <__sflush_r+0x20>
 8019ee0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	dc02      	bgt.n	8019eec <__sflush_r+0x20>
 8019ee6:	2000      	movs	r0, #0
 8019ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019eee:	2e00      	cmp	r6, #0
 8019ef0:	d0f9      	beq.n	8019ee6 <__sflush_r+0x1a>
 8019ef2:	2300      	movs	r3, #0
 8019ef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019ef8:	682f      	ldr	r7, [r5, #0]
 8019efa:	6a21      	ldr	r1, [r4, #32]
 8019efc:	602b      	str	r3, [r5, #0]
 8019efe:	d032      	beq.n	8019f66 <__sflush_r+0x9a>
 8019f00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019f02:	89a3      	ldrh	r3, [r4, #12]
 8019f04:	075a      	lsls	r2, r3, #29
 8019f06:	d505      	bpl.n	8019f14 <__sflush_r+0x48>
 8019f08:	6863      	ldr	r3, [r4, #4]
 8019f0a:	1ac0      	subs	r0, r0, r3
 8019f0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019f0e:	b10b      	cbz	r3, 8019f14 <__sflush_r+0x48>
 8019f10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019f12:	1ac0      	subs	r0, r0, r3
 8019f14:	2300      	movs	r3, #0
 8019f16:	4602      	mov	r2, r0
 8019f18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019f1a:	6a21      	ldr	r1, [r4, #32]
 8019f1c:	4628      	mov	r0, r5
 8019f1e:	47b0      	blx	r6
 8019f20:	1c43      	adds	r3, r0, #1
 8019f22:	89a3      	ldrh	r3, [r4, #12]
 8019f24:	d106      	bne.n	8019f34 <__sflush_r+0x68>
 8019f26:	6829      	ldr	r1, [r5, #0]
 8019f28:	291d      	cmp	r1, #29
 8019f2a:	d82b      	bhi.n	8019f84 <__sflush_r+0xb8>
 8019f2c:	4a29      	ldr	r2, [pc, #164]	; (8019fd4 <__sflush_r+0x108>)
 8019f2e:	410a      	asrs	r2, r1
 8019f30:	07d6      	lsls	r6, r2, #31
 8019f32:	d427      	bmi.n	8019f84 <__sflush_r+0xb8>
 8019f34:	2200      	movs	r2, #0
 8019f36:	6062      	str	r2, [r4, #4]
 8019f38:	04d9      	lsls	r1, r3, #19
 8019f3a:	6922      	ldr	r2, [r4, #16]
 8019f3c:	6022      	str	r2, [r4, #0]
 8019f3e:	d504      	bpl.n	8019f4a <__sflush_r+0x7e>
 8019f40:	1c42      	adds	r2, r0, #1
 8019f42:	d101      	bne.n	8019f48 <__sflush_r+0x7c>
 8019f44:	682b      	ldr	r3, [r5, #0]
 8019f46:	b903      	cbnz	r3, 8019f4a <__sflush_r+0x7e>
 8019f48:	6560      	str	r0, [r4, #84]	; 0x54
 8019f4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019f4c:	602f      	str	r7, [r5, #0]
 8019f4e:	2900      	cmp	r1, #0
 8019f50:	d0c9      	beq.n	8019ee6 <__sflush_r+0x1a>
 8019f52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019f56:	4299      	cmp	r1, r3
 8019f58:	d002      	beq.n	8019f60 <__sflush_r+0x94>
 8019f5a:	4628      	mov	r0, r5
 8019f5c:	f7fe fdee 	bl	8018b3c <_free_r>
 8019f60:	2000      	movs	r0, #0
 8019f62:	6360      	str	r0, [r4, #52]	; 0x34
 8019f64:	e7c0      	b.n	8019ee8 <__sflush_r+0x1c>
 8019f66:	2301      	movs	r3, #1
 8019f68:	4628      	mov	r0, r5
 8019f6a:	47b0      	blx	r6
 8019f6c:	1c41      	adds	r1, r0, #1
 8019f6e:	d1c8      	bne.n	8019f02 <__sflush_r+0x36>
 8019f70:	682b      	ldr	r3, [r5, #0]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d0c5      	beq.n	8019f02 <__sflush_r+0x36>
 8019f76:	2b1d      	cmp	r3, #29
 8019f78:	d001      	beq.n	8019f7e <__sflush_r+0xb2>
 8019f7a:	2b16      	cmp	r3, #22
 8019f7c:	d101      	bne.n	8019f82 <__sflush_r+0xb6>
 8019f7e:	602f      	str	r7, [r5, #0]
 8019f80:	e7b1      	b.n	8019ee6 <__sflush_r+0x1a>
 8019f82:	89a3      	ldrh	r3, [r4, #12]
 8019f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f88:	81a3      	strh	r3, [r4, #12]
 8019f8a:	e7ad      	b.n	8019ee8 <__sflush_r+0x1c>
 8019f8c:	690f      	ldr	r7, [r1, #16]
 8019f8e:	2f00      	cmp	r7, #0
 8019f90:	d0a9      	beq.n	8019ee6 <__sflush_r+0x1a>
 8019f92:	0793      	lsls	r3, r2, #30
 8019f94:	680e      	ldr	r6, [r1, #0]
 8019f96:	bf08      	it	eq
 8019f98:	694b      	ldreq	r3, [r1, #20]
 8019f9a:	600f      	str	r7, [r1, #0]
 8019f9c:	bf18      	it	ne
 8019f9e:	2300      	movne	r3, #0
 8019fa0:	eba6 0807 	sub.w	r8, r6, r7
 8019fa4:	608b      	str	r3, [r1, #8]
 8019fa6:	f1b8 0f00 	cmp.w	r8, #0
 8019faa:	dd9c      	ble.n	8019ee6 <__sflush_r+0x1a>
 8019fac:	6a21      	ldr	r1, [r4, #32]
 8019fae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019fb0:	4643      	mov	r3, r8
 8019fb2:	463a      	mov	r2, r7
 8019fb4:	4628      	mov	r0, r5
 8019fb6:	47b0      	blx	r6
 8019fb8:	2800      	cmp	r0, #0
 8019fba:	dc06      	bgt.n	8019fca <__sflush_r+0xfe>
 8019fbc:	89a3      	ldrh	r3, [r4, #12]
 8019fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019fc2:	81a3      	strh	r3, [r4, #12]
 8019fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8019fc8:	e78e      	b.n	8019ee8 <__sflush_r+0x1c>
 8019fca:	4407      	add	r7, r0
 8019fcc:	eba8 0800 	sub.w	r8, r8, r0
 8019fd0:	e7e9      	b.n	8019fa6 <__sflush_r+0xda>
 8019fd2:	bf00      	nop
 8019fd4:	dfbffffe 	.word	0xdfbffffe

08019fd8 <_fflush_r>:
 8019fd8:	b538      	push	{r3, r4, r5, lr}
 8019fda:	690b      	ldr	r3, [r1, #16]
 8019fdc:	4605      	mov	r5, r0
 8019fde:	460c      	mov	r4, r1
 8019fe0:	b913      	cbnz	r3, 8019fe8 <_fflush_r+0x10>
 8019fe2:	2500      	movs	r5, #0
 8019fe4:	4628      	mov	r0, r5
 8019fe6:	bd38      	pop	{r3, r4, r5, pc}
 8019fe8:	b118      	cbz	r0, 8019ff2 <_fflush_r+0x1a>
 8019fea:	6a03      	ldr	r3, [r0, #32]
 8019fec:	b90b      	cbnz	r3, 8019ff2 <_fflush_r+0x1a>
 8019fee:	f7fd fd07 	bl	8017a00 <__sinit>
 8019ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d0f3      	beq.n	8019fe2 <_fflush_r+0xa>
 8019ffa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019ffc:	07d0      	lsls	r0, r2, #31
 8019ffe:	d404      	bmi.n	801a00a <_fflush_r+0x32>
 801a000:	0599      	lsls	r1, r3, #22
 801a002:	d402      	bmi.n	801a00a <_fflush_r+0x32>
 801a004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a006:	f7fd feda 	bl	8017dbe <__retarget_lock_acquire_recursive>
 801a00a:	4628      	mov	r0, r5
 801a00c:	4621      	mov	r1, r4
 801a00e:	f7ff ff5d 	bl	8019ecc <__sflush_r>
 801a012:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a014:	07da      	lsls	r2, r3, #31
 801a016:	4605      	mov	r5, r0
 801a018:	d4e4      	bmi.n	8019fe4 <_fflush_r+0xc>
 801a01a:	89a3      	ldrh	r3, [r4, #12]
 801a01c:	059b      	lsls	r3, r3, #22
 801a01e:	d4e1      	bmi.n	8019fe4 <_fflush_r+0xc>
 801a020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a022:	f7fd fecd 	bl	8017dc0 <__retarget_lock_release_recursive>
 801a026:	e7dd      	b.n	8019fe4 <_fflush_r+0xc>

0801a028 <fiprintf>:
 801a028:	b40e      	push	{r1, r2, r3}
 801a02a:	b503      	push	{r0, r1, lr}
 801a02c:	4601      	mov	r1, r0
 801a02e:	ab03      	add	r3, sp, #12
 801a030:	4805      	ldr	r0, [pc, #20]	; (801a048 <fiprintf+0x20>)
 801a032:	f853 2b04 	ldr.w	r2, [r3], #4
 801a036:	6800      	ldr	r0, [r0, #0]
 801a038:	9301      	str	r3, [sp, #4]
 801a03a:	f000 f897 	bl	801a16c <_vfiprintf_r>
 801a03e:	b002      	add	sp, #8
 801a040:	f85d eb04 	ldr.w	lr, [sp], #4
 801a044:	b003      	add	sp, #12
 801a046:	4770      	bx	lr
 801a048:	20000308 	.word	0x20000308

0801a04c <memmove>:
 801a04c:	4288      	cmp	r0, r1
 801a04e:	b510      	push	{r4, lr}
 801a050:	eb01 0402 	add.w	r4, r1, r2
 801a054:	d902      	bls.n	801a05c <memmove+0x10>
 801a056:	4284      	cmp	r4, r0
 801a058:	4623      	mov	r3, r4
 801a05a:	d807      	bhi.n	801a06c <memmove+0x20>
 801a05c:	1e43      	subs	r3, r0, #1
 801a05e:	42a1      	cmp	r1, r4
 801a060:	d008      	beq.n	801a074 <memmove+0x28>
 801a062:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a066:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a06a:	e7f8      	b.n	801a05e <memmove+0x12>
 801a06c:	4402      	add	r2, r0
 801a06e:	4601      	mov	r1, r0
 801a070:	428a      	cmp	r2, r1
 801a072:	d100      	bne.n	801a076 <memmove+0x2a>
 801a074:	bd10      	pop	{r4, pc}
 801a076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a07a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a07e:	e7f7      	b.n	801a070 <memmove+0x24>

0801a080 <abort>:
 801a080:	b508      	push	{r3, lr}
 801a082:	2006      	movs	r0, #6
 801a084:	f000 fa4a 	bl	801a51c <raise>
 801a088:	2001      	movs	r0, #1
 801a08a:	f7eb fdeb 	bl	8005c64 <_exit>

0801a08e <_calloc_r>:
 801a08e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a090:	fba1 2402 	umull	r2, r4, r1, r2
 801a094:	b94c      	cbnz	r4, 801a0aa <_calloc_r+0x1c>
 801a096:	4611      	mov	r1, r2
 801a098:	9201      	str	r2, [sp, #4]
 801a09a:	f7fb fe1d 	bl	8015cd8 <_malloc_r>
 801a09e:	9a01      	ldr	r2, [sp, #4]
 801a0a0:	4605      	mov	r5, r0
 801a0a2:	b930      	cbnz	r0, 801a0b2 <_calloc_r+0x24>
 801a0a4:	4628      	mov	r0, r5
 801a0a6:	b003      	add	sp, #12
 801a0a8:	bd30      	pop	{r4, r5, pc}
 801a0aa:	220c      	movs	r2, #12
 801a0ac:	6002      	str	r2, [r0, #0]
 801a0ae:	2500      	movs	r5, #0
 801a0b0:	e7f8      	b.n	801a0a4 <_calloc_r+0x16>
 801a0b2:	4621      	mov	r1, r4
 801a0b4:	f7fd fd71 	bl	8017b9a <memset>
 801a0b8:	e7f4      	b.n	801a0a4 <_calloc_r+0x16>

0801a0ba <_realloc_r>:
 801a0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0be:	4680      	mov	r8, r0
 801a0c0:	4614      	mov	r4, r2
 801a0c2:	460e      	mov	r6, r1
 801a0c4:	b921      	cbnz	r1, 801a0d0 <_realloc_r+0x16>
 801a0c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a0ca:	4611      	mov	r1, r2
 801a0cc:	f7fb be04 	b.w	8015cd8 <_malloc_r>
 801a0d0:	b92a      	cbnz	r2, 801a0de <_realloc_r+0x24>
 801a0d2:	f7fe fd33 	bl	8018b3c <_free_r>
 801a0d6:	4625      	mov	r5, r4
 801a0d8:	4628      	mov	r0, r5
 801a0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0de:	f000 fa39 	bl	801a554 <_malloc_usable_size_r>
 801a0e2:	4284      	cmp	r4, r0
 801a0e4:	4607      	mov	r7, r0
 801a0e6:	d802      	bhi.n	801a0ee <_realloc_r+0x34>
 801a0e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a0ec:	d812      	bhi.n	801a114 <_realloc_r+0x5a>
 801a0ee:	4621      	mov	r1, r4
 801a0f0:	4640      	mov	r0, r8
 801a0f2:	f7fb fdf1 	bl	8015cd8 <_malloc_r>
 801a0f6:	4605      	mov	r5, r0
 801a0f8:	2800      	cmp	r0, #0
 801a0fa:	d0ed      	beq.n	801a0d8 <_realloc_r+0x1e>
 801a0fc:	42bc      	cmp	r4, r7
 801a0fe:	4622      	mov	r2, r4
 801a100:	4631      	mov	r1, r6
 801a102:	bf28      	it	cs
 801a104:	463a      	movcs	r2, r7
 801a106:	f7fd fe64 	bl	8017dd2 <memcpy>
 801a10a:	4631      	mov	r1, r6
 801a10c:	4640      	mov	r0, r8
 801a10e:	f7fe fd15 	bl	8018b3c <_free_r>
 801a112:	e7e1      	b.n	801a0d8 <_realloc_r+0x1e>
 801a114:	4635      	mov	r5, r6
 801a116:	e7df      	b.n	801a0d8 <_realloc_r+0x1e>

0801a118 <__sfputc_r>:
 801a118:	6893      	ldr	r3, [r2, #8]
 801a11a:	3b01      	subs	r3, #1
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	b410      	push	{r4}
 801a120:	6093      	str	r3, [r2, #8]
 801a122:	da08      	bge.n	801a136 <__sfputc_r+0x1e>
 801a124:	6994      	ldr	r4, [r2, #24]
 801a126:	42a3      	cmp	r3, r4
 801a128:	db01      	blt.n	801a12e <__sfputc_r+0x16>
 801a12a:	290a      	cmp	r1, #10
 801a12c:	d103      	bne.n	801a136 <__sfputc_r+0x1e>
 801a12e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a132:	f000 b935 	b.w	801a3a0 <__swbuf_r>
 801a136:	6813      	ldr	r3, [r2, #0]
 801a138:	1c58      	adds	r0, r3, #1
 801a13a:	6010      	str	r0, [r2, #0]
 801a13c:	7019      	strb	r1, [r3, #0]
 801a13e:	4608      	mov	r0, r1
 801a140:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a144:	4770      	bx	lr

0801a146 <__sfputs_r>:
 801a146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a148:	4606      	mov	r6, r0
 801a14a:	460f      	mov	r7, r1
 801a14c:	4614      	mov	r4, r2
 801a14e:	18d5      	adds	r5, r2, r3
 801a150:	42ac      	cmp	r4, r5
 801a152:	d101      	bne.n	801a158 <__sfputs_r+0x12>
 801a154:	2000      	movs	r0, #0
 801a156:	e007      	b.n	801a168 <__sfputs_r+0x22>
 801a158:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a15c:	463a      	mov	r2, r7
 801a15e:	4630      	mov	r0, r6
 801a160:	f7ff ffda 	bl	801a118 <__sfputc_r>
 801a164:	1c43      	adds	r3, r0, #1
 801a166:	d1f3      	bne.n	801a150 <__sfputs_r+0xa>
 801a168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a16c <_vfiprintf_r>:
 801a16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a170:	460d      	mov	r5, r1
 801a172:	b09d      	sub	sp, #116	; 0x74
 801a174:	4614      	mov	r4, r2
 801a176:	4698      	mov	r8, r3
 801a178:	4606      	mov	r6, r0
 801a17a:	b118      	cbz	r0, 801a184 <_vfiprintf_r+0x18>
 801a17c:	6a03      	ldr	r3, [r0, #32]
 801a17e:	b90b      	cbnz	r3, 801a184 <_vfiprintf_r+0x18>
 801a180:	f7fd fc3e 	bl	8017a00 <__sinit>
 801a184:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a186:	07d9      	lsls	r1, r3, #31
 801a188:	d405      	bmi.n	801a196 <_vfiprintf_r+0x2a>
 801a18a:	89ab      	ldrh	r3, [r5, #12]
 801a18c:	059a      	lsls	r2, r3, #22
 801a18e:	d402      	bmi.n	801a196 <_vfiprintf_r+0x2a>
 801a190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a192:	f7fd fe14 	bl	8017dbe <__retarget_lock_acquire_recursive>
 801a196:	89ab      	ldrh	r3, [r5, #12]
 801a198:	071b      	lsls	r3, r3, #28
 801a19a:	d501      	bpl.n	801a1a0 <_vfiprintf_r+0x34>
 801a19c:	692b      	ldr	r3, [r5, #16]
 801a19e:	b99b      	cbnz	r3, 801a1c8 <_vfiprintf_r+0x5c>
 801a1a0:	4629      	mov	r1, r5
 801a1a2:	4630      	mov	r0, r6
 801a1a4:	f000 f93a 	bl	801a41c <__swsetup_r>
 801a1a8:	b170      	cbz	r0, 801a1c8 <_vfiprintf_r+0x5c>
 801a1aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a1ac:	07dc      	lsls	r4, r3, #31
 801a1ae:	d504      	bpl.n	801a1ba <_vfiprintf_r+0x4e>
 801a1b0:	f04f 30ff 	mov.w	r0, #4294967295
 801a1b4:	b01d      	add	sp, #116	; 0x74
 801a1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1ba:	89ab      	ldrh	r3, [r5, #12]
 801a1bc:	0598      	lsls	r0, r3, #22
 801a1be:	d4f7      	bmi.n	801a1b0 <_vfiprintf_r+0x44>
 801a1c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a1c2:	f7fd fdfd 	bl	8017dc0 <__retarget_lock_release_recursive>
 801a1c6:	e7f3      	b.n	801a1b0 <_vfiprintf_r+0x44>
 801a1c8:	2300      	movs	r3, #0
 801a1ca:	9309      	str	r3, [sp, #36]	; 0x24
 801a1cc:	2320      	movs	r3, #32
 801a1ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a1d2:	f8cd 800c 	str.w	r8, [sp, #12]
 801a1d6:	2330      	movs	r3, #48	; 0x30
 801a1d8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a38c <_vfiprintf_r+0x220>
 801a1dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a1e0:	f04f 0901 	mov.w	r9, #1
 801a1e4:	4623      	mov	r3, r4
 801a1e6:	469a      	mov	sl, r3
 801a1e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a1ec:	b10a      	cbz	r2, 801a1f2 <_vfiprintf_r+0x86>
 801a1ee:	2a25      	cmp	r2, #37	; 0x25
 801a1f0:	d1f9      	bne.n	801a1e6 <_vfiprintf_r+0x7a>
 801a1f2:	ebba 0b04 	subs.w	fp, sl, r4
 801a1f6:	d00b      	beq.n	801a210 <_vfiprintf_r+0xa4>
 801a1f8:	465b      	mov	r3, fp
 801a1fa:	4622      	mov	r2, r4
 801a1fc:	4629      	mov	r1, r5
 801a1fe:	4630      	mov	r0, r6
 801a200:	f7ff ffa1 	bl	801a146 <__sfputs_r>
 801a204:	3001      	adds	r0, #1
 801a206:	f000 80a9 	beq.w	801a35c <_vfiprintf_r+0x1f0>
 801a20a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a20c:	445a      	add	r2, fp
 801a20e:	9209      	str	r2, [sp, #36]	; 0x24
 801a210:	f89a 3000 	ldrb.w	r3, [sl]
 801a214:	2b00      	cmp	r3, #0
 801a216:	f000 80a1 	beq.w	801a35c <_vfiprintf_r+0x1f0>
 801a21a:	2300      	movs	r3, #0
 801a21c:	f04f 32ff 	mov.w	r2, #4294967295
 801a220:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a224:	f10a 0a01 	add.w	sl, sl, #1
 801a228:	9304      	str	r3, [sp, #16]
 801a22a:	9307      	str	r3, [sp, #28]
 801a22c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a230:	931a      	str	r3, [sp, #104]	; 0x68
 801a232:	4654      	mov	r4, sl
 801a234:	2205      	movs	r2, #5
 801a236:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a23a:	4854      	ldr	r0, [pc, #336]	; (801a38c <_vfiprintf_r+0x220>)
 801a23c:	f7e5 ffc8 	bl	80001d0 <memchr>
 801a240:	9a04      	ldr	r2, [sp, #16]
 801a242:	b9d8      	cbnz	r0, 801a27c <_vfiprintf_r+0x110>
 801a244:	06d1      	lsls	r1, r2, #27
 801a246:	bf44      	itt	mi
 801a248:	2320      	movmi	r3, #32
 801a24a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a24e:	0713      	lsls	r3, r2, #28
 801a250:	bf44      	itt	mi
 801a252:	232b      	movmi	r3, #43	; 0x2b
 801a254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a258:	f89a 3000 	ldrb.w	r3, [sl]
 801a25c:	2b2a      	cmp	r3, #42	; 0x2a
 801a25e:	d015      	beq.n	801a28c <_vfiprintf_r+0x120>
 801a260:	9a07      	ldr	r2, [sp, #28]
 801a262:	4654      	mov	r4, sl
 801a264:	2000      	movs	r0, #0
 801a266:	f04f 0c0a 	mov.w	ip, #10
 801a26a:	4621      	mov	r1, r4
 801a26c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a270:	3b30      	subs	r3, #48	; 0x30
 801a272:	2b09      	cmp	r3, #9
 801a274:	d94d      	bls.n	801a312 <_vfiprintf_r+0x1a6>
 801a276:	b1b0      	cbz	r0, 801a2a6 <_vfiprintf_r+0x13a>
 801a278:	9207      	str	r2, [sp, #28]
 801a27a:	e014      	b.n	801a2a6 <_vfiprintf_r+0x13a>
 801a27c:	eba0 0308 	sub.w	r3, r0, r8
 801a280:	fa09 f303 	lsl.w	r3, r9, r3
 801a284:	4313      	orrs	r3, r2
 801a286:	9304      	str	r3, [sp, #16]
 801a288:	46a2      	mov	sl, r4
 801a28a:	e7d2      	b.n	801a232 <_vfiprintf_r+0xc6>
 801a28c:	9b03      	ldr	r3, [sp, #12]
 801a28e:	1d19      	adds	r1, r3, #4
 801a290:	681b      	ldr	r3, [r3, #0]
 801a292:	9103      	str	r1, [sp, #12]
 801a294:	2b00      	cmp	r3, #0
 801a296:	bfbb      	ittet	lt
 801a298:	425b      	neglt	r3, r3
 801a29a:	f042 0202 	orrlt.w	r2, r2, #2
 801a29e:	9307      	strge	r3, [sp, #28]
 801a2a0:	9307      	strlt	r3, [sp, #28]
 801a2a2:	bfb8      	it	lt
 801a2a4:	9204      	strlt	r2, [sp, #16]
 801a2a6:	7823      	ldrb	r3, [r4, #0]
 801a2a8:	2b2e      	cmp	r3, #46	; 0x2e
 801a2aa:	d10c      	bne.n	801a2c6 <_vfiprintf_r+0x15a>
 801a2ac:	7863      	ldrb	r3, [r4, #1]
 801a2ae:	2b2a      	cmp	r3, #42	; 0x2a
 801a2b0:	d134      	bne.n	801a31c <_vfiprintf_r+0x1b0>
 801a2b2:	9b03      	ldr	r3, [sp, #12]
 801a2b4:	1d1a      	adds	r2, r3, #4
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	9203      	str	r2, [sp, #12]
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	bfb8      	it	lt
 801a2be:	f04f 33ff 	movlt.w	r3, #4294967295
 801a2c2:	3402      	adds	r4, #2
 801a2c4:	9305      	str	r3, [sp, #20]
 801a2c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a39c <_vfiprintf_r+0x230>
 801a2ca:	7821      	ldrb	r1, [r4, #0]
 801a2cc:	2203      	movs	r2, #3
 801a2ce:	4650      	mov	r0, sl
 801a2d0:	f7e5 ff7e 	bl	80001d0 <memchr>
 801a2d4:	b138      	cbz	r0, 801a2e6 <_vfiprintf_r+0x17a>
 801a2d6:	9b04      	ldr	r3, [sp, #16]
 801a2d8:	eba0 000a 	sub.w	r0, r0, sl
 801a2dc:	2240      	movs	r2, #64	; 0x40
 801a2de:	4082      	lsls	r2, r0
 801a2e0:	4313      	orrs	r3, r2
 801a2e2:	3401      	adds	r4, #1
 801a2e4:	9304      	str	r3, [sp, #16]
 801a2e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2ea:	4829      	ldr	r0, [pc, #164]	; (801a390 <_vfiprintf_r+0x224>)
 801a2ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a2f0:	2206      	movs	r2, #6
 801a2f2:	f7e5 ff6d 	bl	80001d0 <memchr>
 801a2f6:	2800      	cmp	r0, #0
 801a2f8:	d03f      	beq.n	801a37a <_vfiprintf_r+0x20e>
 801a2fa:	4b26      	ldr	r3, [pc, #152]	; (801a394 <_vfiprintf_r+0x228>)
 801a2fc:	bb1b      	cbnz	r3, 801a346 <_vfiprintf_r+0x1da>
 801a2fe:	9b03      	ldr	r3, [sp, #12]
 801a300:	3307      	adds	r3, #7
 801a302:	f023 0307 	bic.w	r3, r3, #7
 801a306:	3308      	adds	r3, #8
 801a308:	9303      	str	r3, [sp, #12]
 801a30a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a30c:	443b      	add	r3, r7
 801a30e:	9309      	str	r3, [sp, #36]	; 0x24
 801a310:	e768      	b.n	801a1e4 <_vfiprintf_r+0x78>
 801a312:	fb0c 3202 	mla	r2, ip, r2, r3
 801a316:	460c      	mov	r4, r1
 801a318:	2001      	movs	r0, #1
 801a31a:	e7a6      	b.n	801a26a <_vfiprintf_r+0xfe>
 801a31c:	2300      	movs	r3, #0
 801a31e:	3401      	adds	r4, #1
 801a320:	9305      	str	r3, [sp, #20]
 801a322:	4619      	mov	r1, r3
 801a324:	f04f 0c0a 	mov.w	ip, #10
 801a328:	4620      	mov	r0, r4
 801a32a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a32e:	3a30      	subs	r2, #48	; 0x30
 801a330:	2a09      	cmp	r2, #9
 801a332:	d903      	bls.n	801a33c <_vfiprintf_r+0x1d0>
 801a334:	2b00      	cmp	r3, #0
 801a336:	d0c6      	beq.n	801a2c6 <_vfiprintf_r+0x15a>
 801a338:	9105      	str	r1, [sp, #20]
 801a33a:	e7c4      	b.n	801a2c6 <_vfiprintf_r+0x15a>
 801a33c:	fb0c 2101 	mla	r1, ip, r1, r2
 801a340:	4604      	mov	r4, r0
 801a342:	2301      	movs	r3, #1
 801a344:	e7f0      	b.n	801a328 <_vfiprintf_r+0x1bc>
 801a346:	ab03      	add	r3, sp, #12
 801a348:	9300      	str	r3, [sp, #0]
 801a34a:	462a      	mov	r2, r5
 801a34c:	4b12      	ldr	r3, [pc, #72]	; (801a398 <_vfiprintf_r+0x22c>)
 801a34e:	a904      	add	r1, sp, #16
 801a350:	4630      	mov	r0, r6
 801a352:	f7fc fcf3 	bl	8016d3c <_printf_float>
 801a356:	4607      	mov	r7, r0
 801a358:	1c78      	adds	r0, r7, #1
 801a35a:	d1d6      	bne.n	801a30a <_vfiprintf_r+0x19e>
 801a35c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a35e:	07d9      	lsls	r1, r3, #31
 801a360:	d405      	bmi.n	801a36e <_vfiprintf_r+0x202>
 801a362:	89ab      	ldrh	r3, [r5, #12]
 801a364:	059a      	lsls	r2, r3, #22
 801a366:	d402      	bmi.n	801a36e <_vfiprintf_r+0x202>
 801a368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a36a:	f7fd fd29 	bl	8017dc0 <__retarget_lock_release_recursive>
 801a36e:	89ab      	ldrh	r3, [r5, #12]
 801a370:	065b      	lsls	r3, r3, #25
 801a372:	f53f af1d 	bmi.w	801a1b0 <_vfiprintf_r+0x44>
 801a376:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a378:	e71c      	b.n	801a1b4 <_vfiprintf_r+0x48>
 801a37a:	ab03      	add	r3, sp, #12
 801a37c:	9300      	str	r3, [sp, #0]
 801a37e:	462a      	mov	r2, r5
 801a380:	4b05      	ldr	r3, [pc, #20]	; (801a398 <_vfiprintf_r+0x22c>)
 801a382:	a904      	add	r1, sp, #16
 801a384:	4630      	mov	r0, r6
 801a386:	f7fc ff7d 	bl	8017284 <_printf_i>
 801a38a:	e7e4      	b.n	801a356 <_vfiprintf_r+0x1ea>
 801a38c:	0801f09c 	.word	0x0801f09c
 801a390:	0801f0a6 	.word	0x0801f0a6
 801a394:	08016d3d 	.word	0x08016d3d
 801a398:	0801a147 	.word	0x0801a147
 801a39c:	0801f0a2 	.word	0x0801f0a2

0801a3a0 <__swbuf_r>:
 801a3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3a2:	460e      	mov	r6, r1
 801a3a4:	4614      	mov	r4, r2
 801a3a6:	4605      	mov	r5, r0
 801a3a8:	b118      	cbz	r0, 801a3b2 <__swbuf_r+0x12>
 801a3aa:	6a03      	ldr	r3, [r0, #32]
 801a3ac:	b90b      	cbnz	r3, 801a3b2 <__swbuf_r+0x12>
 801a3ae:	f7fd fb27 	bl	8017a00 <__sinit>
 801a3b2:	69a3      	ldr	r3, [r4, #24]
 801a3b4:	60a3      	str	r3, [r4, #8]
 801a3b6:	89a3      	ldrh	r3, [r4, #12]
 801a3b8:	071a      	lsls	r2, r3, #28
 801a3ba:	d525      	bpl.n	801a408 <__swbuf_r+0x68>
 801a3bc:	6923      	ldr	r3, [r4, #16]
 801a3be:	b31b      	cbz	r3, 801a408 <__swbuf_r+0x68>
 801a3c0:	6823      	ldr	r3, [r4, #0]
 801a3c2:	6922      	ldr	r2, [r4, #16]
 801a3c4:	1a98      	subs	r0, r3, r2
 801a3c6:	6963      	ldr	r3, [r4, #20]
 801a3c8:	b2f6      	uxtb	r6, r6
 801a3ca:	4283      	cmp	r3, r0
 801a3cc:	4637      	mov	r7, r6
 801a3ce:	dc04      	bgt.n	801a3da <__swbuf_r+0x3a>
 801a3d0:	4621      	mov	r1, r4
 801a3d2:	4628      	mov	r0, r5
 801a3d4:	f7ff fe00 	bl	8019fd8 <_fflush_r>
 801a3d8:	b9e0      	cbnz	r0, 801a414 <__swbuf_r+0x74>
 801a3da:	68a3      	ldr	r3, [r4, #8]
 801a3dc:	3b01      	subs	r3, #1
 801a3de:	60a3      	str	r3, [r4, #8]
 801a3e0:	6823      	ldr	r3, [r4, #0]
 801a3e2:	1c5a      	adds	r2, r3, #1
 801a3e4:	6022      	str	r2, [r4, #0]
 801a3e6:	701e      	strb	r6, [r3, #0]
 801a3e8:	6962      	ldr	r2, [r4, #20]
 801a3ea:	1c43      	adds	r3, r0, #1
 801a3ec:	429a      	cmp	r2, r3
 801a3ee:	d004      	beq.n	801a3fa <__swbuf_r+0x5a>
 801a3f0:	89a3      	ldrh	r3, [r4, #12]
 801a3f2:	07db      	lsls	r3, r3, #31
 801a3f4:	d506      	bpl.n	801a404 <__swbuf_r+0x64>
 801a3f6:	2e0a      	cmp	r6, #10
 801a3f8:	d104      	bne.n	801a404 <__swbuf_r+0x64>
 801a3fa:	4621      	mov	r1, r4
 801a3fc:	4628      	mov	r0, r5
 801a3fe:	f7ff fdeb 	bl	8019fd8 <_fflush_r>
 801a402:	b938      	cbnz	r0, 801a414 <__swbuf_r+0x74>
 801a404:	4638      	mov	r0, r7
 801a406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a408:	4621      	mov	r1, r4
 801a40a:	4628      	mov	r0, r5
 801a40c:	f000 f806 	bl	801a41c <__swsetup_r>
 801a410:	2800      	cmp	r0, #0
 801a412:	d0d5      	beq.n	801a3c0 <__swbuf_r+0x20>
 801a414:	f04f 37ff 	mov.w	r7, #4294967295
 801a418:	e7f4      	b.n	801a404 <__swbuf_r+0x64>
	...

0801a41c <__swsetup_r>:
 801a41c:	b538      	push	{r3, r4, r5, lr}
 801a41e:	4b2a      	ldr	r3, [pc, #168]	; (801a4c8 <__swsetup_r+0xac>)
 801a420:	4605      	mov	r5, r0
 801a422:	6818      	ldr	r0, [r3, #0]
 801a424:	460c      	mov	r4, r1
 801a426:	b118      	cbz	r0, 801a430 <__swsetup_r+0x14>
 801a428:	6a03      	ldr	r3, [r0, #32]
 801a42a:	b90b      	cbnz	r3, 801a430 <__swsetup_r+0x14>
 801a42c:	f7fd fae8 	bl	8017a00 <__sinit>
 801a430:	89a3      	ldrh	r3, [r4, #12]
 801a432:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a436:	0718      	lsls	r0, r3, #28
 801a438:	d422      	bmi.n	801a480 <__swsetup_r+0x64>
 801a43a:	06d9      	lsls	r1, r3, #27
 801a43c:	d407      	bmi.n	801a44e <__swsetup_r+0x32>
 801a43e:	2309      	movs	r3, #9
 801a440:	602b      	str	r3, [r5, #0]
 801a442:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a446:	81a3      	strh	r3, [r4, #12]
 801a448:	f04f 30ff 	mov.w	r0, #4294967295
 801a44c:	e034      	b.n	801a4b8 <__swsetup_r+0x9c>
 801a44e:	0758      	lsls	r0, r3, #29
 801a450:	d512      	bpl.n	801a478 <__swsetup_r+0x5c>
 801a452:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a454:	b141      	cbz	r1, 801a468 <__swsetup_r+0x4c>
 801a456:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a45a:	4299      	cmp	r1, r3
 801a45c:	d002      	beq.n	801a464 <__swsetup_r+0x48>
 801a45e:	4628      	mov	r0, r5
 801a460:	f7fe fb6c 	bl	8018b3c <_free_r>
 801a464:	2300      	movs	r3, #0
 801a466:	6363      	str	r3, [r4, #52]	; 0x34
 801a468:	89a3      	ldrh	r3, [r4, #12]
 801a46a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a46e:	81a3      	strh	r3, [r4, #12]
 801a470:	2300      	movs	r3, #0
 801a472:	6063      	str	r3, [r4, #4]
 801a474:	6923      	ldr	r3, [r4, #16]
 801a476:	6023      	str	r3, [r4, #0]
 801a478:	89a3      	ldrh	r3, [r4, #12]
 801a47a:	f043 0308 	orr.w	r3, r3, #8
 801a47e:	81a3      	strh	r3, [r4, #12]
 801a480:	6923      	ldr	r3, [r4, #16]
 801a482:	b94b      	cbnz	r3, 801a498 <__swsetup_r+0x7c>
 801a484:	89a3      	ldrh	r3, [r4, #12]
 801a486:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a48a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a48e:	d003      	beq.n	801a498 <__swsetup_r+0x7c>
 801a490:	4621      	mov	r1, r4
 801a492:	4628      	mov	r0, r5
 801a494:	f000 f88c 	bl	801a5b0 <__smakebuf_r>
 801a498:	89a0      	ldrh	r0, [r4, #12]
 801a49a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a49e:	f010 0301 	ands.w	r3, r0, #1
 801a4a2:	d00a      	beq.n	801a4ba <__swsetup_r+0x9e>
 801a4a4:	2300      	movs	r3, #0
 801a4a6:	60a3      	str	r3, [r4, #8]
 801a4a8:	6963      	ldr	r3, [r4, #20]
 801a4aa:	425b      	negs	r3, r3
 801a4ac:	61a3      	str	r3, [r4, #24]
 801a4ae:	6923      	ldr	r3, [r4, #16]
 801a4b0:	b943      	cbnz	r3, 801a4c4 <__swsetup_r+0xa8>
 801a4b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a4b6:	d1c4      	bne.n	801a442 <__swsetup_r+0x26>
 801a4b8:	bd38      	pop	{r3, r4, r5, pc}
 801a4ba:	0781      	lsls	r1, r0, #30
 801a4bc:	bf58      	it	pl
 801a4be:	6963      	ldrpl	r3, [r4, #20]
 801a4c0:	60a3      	str	r3, [r4, #8]
 801a4c2:	e7f4      	b.n	801a4ae <__swsetup_r+0x92>
 801a4c4:	2000      	movs	r0, #0
 801a4c6:	e7f7      	b.n	801a4b8 <__swsetup_r+0x9c>
 801a4c8:	20000308 	.word	0x20000308

0801a4cc <_raise_r>:
 801a4cc:	291f      	cmp	r1, #31
 801a4ce:	b538      	push	{r3, r4, r5, lr}
 801a4d0:	4604      	mov	r4, r0
 801a4d2:	460d      	mov	r5, r1
 801a4d4:	d904      	bls.n	801a4e0 <_raise_r+0x14>
 801a4d6:	2316      	movs	r3, #22
 801a4d8:	6003      	str	r3, [r0, #0]
 801a4da:	f04f 30ff 	mov.w	r0, #4294967295
 801a4de:	bd38      	pop	{r3, r4, r5, pc}
 801a4e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a4e2:	b112      	cbz	r2, 801a4ea <_raise_r+0x1e>
 801a4e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a4e8:	b94b      	cbnz	r3, 801a4fe <_raise_r+0x32>
 801a4ea:	4620      	mov	r0, r4
 801a4ec:	f000 f830 	bl	801a550 <_getpid_r>
 801a4f0:	462a      	mov	r2, r5
 801a4f2:	4601      	mov	r1, r0
 801a4f4:	4620      	mov	r0, r4
 801a4f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a4fa:	f000 b817 	b.w	801a52c <_kill_r>
 801a4fe:	2b01      	cmp	r3, #1
 801a500:	d00a      	beq.n	801a518 <_raise_r+0x4c>
 801a502:	1c59      	adds	r1, r3, #1
 801a504:	d103      	bne.n	801a50e <_raise_r+0x42>
 801a506:	2316      	movs	r3, #22
 801a508:	6003      	str	r3, [r0, #0]
 801a50a:	2001      	movs	r0, #1
 801a50c:	e7e7      	b.n	801a4de <_raise_r+0x12>
 801a50e:	2400      	movs	r4, #0
 801a510:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a514:	4628      	mov	r0, r5
 801a516:	4798      	blx	r3
 801a518:	2000      	movs	r0, #0
 801a51a:	e7e0      	b.n	801a4de <_raise_r+0x12>

0801a51c <raise>:
 801a51c:	4b02      	ldr	r3, [pc, #8]	; (801a528 <raise+0xc>)
 801a51e:	4601      	mov	r1, r0
 801a520:	6818      	ldr	r0, [r3, #0]
 801a522:	f7ff bfd3 	b.w	801a4cc <_raise_r>
 801a526:	bf00      	nop
 801a528:	20000308 	.word	0x20000308

0801a52c <_kill_r>:
 801a52c:	b538      	push	{r3, r4, r5, lr}
 801a52e:	4d07      	ldr	r5, [pc, #28]	; (801a54c <_kill_r+0x20>)
 801a530:	2300      	movs	r3, #0
 801a532:	4604      	mov	r4, r0
 801a534:	4608      	mov	r0, r1
 801a536:	4611      	mov	r1, r2
 801a538:	602b      	str	r3, [r5, #0]
 801a53a:	f7eb fb83 	bl	8005c44 <_kill>
 801a53e:	1c43      	adds	r3, r0, #1
 801a540:	d102      	bne.n	801a548 <_kill_r+0x1c>
 801a542:	682b      	ldr	r3, [r5, #0]
 801a544:	b103      	cbz	r3, 801a548 <_kill_r+0x1c>
 801a546:	6023      	str	r3, [r4, #0]
 801a548:	bd38      	pop	{r3, r4, r5, pc}
 801a54a:	bf00      	nop
 801a54c:	2000251c 	.word	0x2000251c

0801a550 <_getpid_r>:
 801a550:	f7eb bb70 	b.w	8005c34 <_getpid>

0801a554 <_malloc_usable_size_r>:
 801a554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a558:	1f18      	subs	r0, r3, #4
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	bfbc      	itt	lt
 801a55e:	580b      	ldrlt	r3, [r1, r0]
 801a560:	18c0      	addlt	r0, r0, r3
 801a562:	4770      	bx	lr

0801a564 <__swhatbuf_r>:
 801a564:	b570      	push	{r4, r5, r6, lr}
 801a566:	460c      	mov	r4, r1
 801a568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a56c:	2900      	cmp	r1, #0
 801a56e:	b096      	sub	sp, #88	; 0x58
 801a570:	4615      	mov	r5, r2
 801a572:	461e      	mov	r6, r3
 801a574:	da0d      	bge.n	801a592 <__swhatbuf_r+0x2e>
 801a576:	89a3      	ldrh	r3, [r4, #12]
 801a578:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a57c:	f04f 0100 	mov.w	r1, #0
 801a580:	bf0c      	ite	eq
 801a582:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a586:	2340      	movne	r3, #64	; 0x40
 801a588:	2000      	movs	r0, #0
 801a58a:	6031      	str	r1, [r6, #0]
 801a58c:	602b      	str	r3, [r5, #0]
 801a58e:	b016      	add	sp, #88	; 0x58
 801a590:	bd70      	pop	{r4, r5, r6, pc}
 801a592:	466a      	mov	r2, sp
 801a594:	f000 f848 	bl	801a628 <_fstat_r>
 801a598:	2800      	cmp	r0, #0
 801a59a:	dbec      	blt.n	801a576 <__swhatbuf_r+0x12>
 801a59c:	9901      	ldr	r1, [sp, #4]
 801a59e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a5a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a5a6:	4259      	negs	r1, r3
 801a5a8:	4159      	adcs	r1, r3
 801a5aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a5ae:	e7eb      	b.n	801a588 <__swhatbuf_r+0x24>

0801a5b0 <__smakebuf_r>:
 801a5b0:	898b      	ldrh	r3, [r1, #12]
 801a5b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a5b4:	079d      	lsls	r5, r3, #30
 801a5b6:	4606      	mov	r6, r0
 801a5b8:	460c      	mov	r4, r1
 801a5ba:	d507      	bpl.n	801a5cc <__smakebuf_r+0x1c>
 801a5bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a5c0:	6023      	str	r3, [r4, #0]
 801a5c2:	6123      	str	r3, [r4, #16]
 801a5c4:	2301      	movs	r3, #1
 801a5c6:	6163      	str	r3, [r4, #20]
 801a5c8:	b002      	add	sp, #8
 801a5ca:	bd70      	pop	{r4, r5, r6, pc}
 801a5cc:	ab01      	add	r3, sp, #4
 801a5ce:	466a      	mov	r2, sp
 801a5d0:	f7ff ffc8 	bl	801a564 <__swhatbuf_r>
 801a5d4:	9900      	ldr	r1, [sp, #0]
 801a5d6:	4605      	mov	r5, r0
 801a5d8:	4630      	mov	r0, r6
 801a5da:	f7fb fb7d 	bl	8015cd8 <_malloc_r>
 801a5de:	b948      	cbnz	r0, 801a5f4 <__smakebuf_r+0x44>
 801a5e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a5e4:	059a      	lsls	r2, r3, #22
 801a5e6:	d4ef      	bmi.n	801a5c8 <__smakebuf_r+0x18>
 801a5e8:	f023 0303 	bic.w	r3, r3, #3
 801a5ec:	f043 0302 	orr.w	r3, r3, #2
 801a5f0:	81a3      	strh	r3, [r4, #12]
 801a5f2:	e7e3      	b.n	801a5bc <__smakebuf_r+0xc>
 801a5f4:	89a3      	ldrh	r3, [r4, #12]
 801a5f6:	6020      	str	r0, [r4, #0]
 801a5f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a5fc:	81a3      	strh	r3, [r4, #12]
 801a5fe:	9b00      	ldr	r3, [sp, #0]
 801a600:	6163      	str	r3, [r4, #20]
 801a602:	9b01      	ldr	r3, [sp, #4]
 801a604:	6120      	str	r0, [r4, #16]
 801a606:	b15b      	cbz	r3, 801a620 <__smakebuf_r+0x70>
 801a608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a60c:	4630      	mov	r0, r6
 801a60e:	f000 f81d 	bl	801a64c <_isatty_r>
 801a612:	b128      	cbz	r0, 801a620 <__smakebuf_r+0x70>
 801a614:	89a3      	ldrh	r3, [r4, #12]
 801a616:	f023 0303 	bic.w	r3, r3, #3
 801a61a:	f043 0301 	orr.w	r3, r3, #1
 801a61e:	81a3      	strh	r3, [r4, #12]
 801a620:	89a3      	ldrh	r3, [r4, #12]
 801a622:	431d      	orrs	r5, r3
 801a624:	81a5      	strh	r5, [r4, #12]
 801a626:	e7cf      	b.n	801a5c8 <__smakebuf_r+0x18>

0801a628 <_fstat_r>:
 801a628:	b538      	push	{r3, r4, r5, lr}
 801a62a:	4d07      	ldr	r5, [pc, #28]	; (801a648 <_fstat_r+0x20>)
 801a62c:	2300      	movs	r3, #0
 801a62e:	4604      	mov	r4, r0
 801a630:	4608      	mov	r0, r1
 801a632:	4611      	mov	r1, r2
 801a634:	602b      	str	r3, [r5, #0]
 801a636:	f7eb fb64 	bl	8005d02 <_fstat>
 801a63a:	1c43      	adds	r3, r0, #1
 801a63c:	d102      	bne.n	801a644 <_fstat_r+0x1c>
 801a63e:	682b      	ldr	r3, [r5, #0]
 801a640:	b103      	cbz	r3, 801a644 <_fstat_r+0x1c>
 801a642:	6023      	str	r3, [r4, #0]
 801a644:	bd38      	pop	{r3, r4, r5, pc}
 801a646:	bf00      	nop
 801a648:	2000251c 	.word	0x2000251c

0801a64c <_isatty_r>:
 801a64c:	b538      	push	{r3, r4, r5, lr}
 801a64e:	4d06      	ldr	r5, [pc, #24]	; (801a668 <_isatty_r+0x1c>)
 801a650:	2300      	movs	r3, #0
 801a652:	4604      	mov	r4, r0
 801a654:	4608      	mov	r0, r1
 801a656:	602b      	str	r3, [r5, #0]
 801a658:	f7eb fb63 	bl	8005d22 <_isatty>
 801a65c:	1c43      	adds	r3, r0, #1
 801a65e:	d102      	bne.n	801a666 <_isatty_r+0x1a>
 801a660:	682b      	ldr	r3, [r5, #0]
 801a662:	b103      	cbz	r3, 801a666 <_isatty_r+0x1a>
 801a664:	6023      	str	r3, [r4, #0]
 801a666:	bd38      	pop	{r3, r4, r5, pc}
 801a668:	2000251c 	.word	0x2000251c

0801a66c <pow>:
 801a66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a66e:	ed2d 8b02 	vpush	{d8}
 801a672:	eeb0 8a40 	vmov.f32	s16, s0
 801a676:	eef0 8a60 	vmov.f32	s17, s1
 801a67a:	ec55 4b11 	vmov	r4, r5, d1
 801a67e:	f000 fbc3 	bl	801ae08 <__ieee754_pow>
 801a682:	4622      	mov	r2, r4
 801a684:	462b      	mov	r3, r5
 801a686:	4620      	mov	r0, r4
 801a688:	4629      	mov	r1, r5
 801a68a:	ec57 6b10 	vmov	r6, r7, d0
 801a68e:	f7e6 fa4d 	bl	8000b2c <__aeabi_dcmpun>
 801a692:	2800      	cmp	r0, #0
 801a694:	d13b      	bne.n	801a70e <pow+0xa2>
 801a696:	ec51 0b18 	vmov	r0, r1, d8
 801a69a:	2200      	movs	r2, #0
 801a69c:	2300      	movs	r3, #0
 801a69e:	f7e6 fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 801a6a2:	b1b8      	cbz	r0, 801a6d4 <pow+0x68>
 801a6a4:	2200      	movs	r2, #0
 801a6a6:	2300      	movs	r3, #0
 801a6a8:	4620      	mov	r0, r4
 801a6aa:	4629      	mov	r1, r5
 801a6ac:	f7e6 fa0c 	bl	8000ac8 <__aeabi_dcmpeq>
 801a6b0:	2800      	cmp	r0, #0
 801a6b2:	d146      	bne.n	801a742 <pow+0xd6>
 801a6b4:	ec45 4b10 	vmov	d0, r4, r5
 801a6b8:	f000 f92c 	bl	801a914 <finite>
 801a6bc:	b338      	cbz	r0, 801a70e <pow+0xa2>
 801a6be:	2200      	movs	r2, #0
 801a6c0:	2300      	movs	r3, #0
 801a6c2:	4620      	mov	r0, r4
 801a6c4:	4629      	mov	r1, r5
 801a6c6:	f7e6 fa09 	bl	8000adc <__aeabi_dcmplt>
 801a6ca:	b300      	cbz	r0, 801a70e <pow+0xa2>
 801a6cc:	f7fd fb4c 	bl	8017d68 <__errno>
 801a6d0:	2322      	movs	r3, #34	; 0x22
 801a6d2:	e01b      	b.n	801a70c <pow+0xa0>
 801a6d4:	ec47 6b10 	vmov	d0, r6, r7
 801a6d8:	f000 f91c 	bl	801a914 <finite>
 801a6dc:	b9e0      	cbnz	r0, 801a718 <pow+0xac>
 801a6de:	eeb0 0a48 	vmov.f32	s0, s16
 801a6e2:	eef0 0a68 	vmov.f32	s1, s17
 801a6e6:	f000 f915 	bl	801a914 <finite>
 801a6ea:	b1a8      	cbz	r0, 801a718 <pow+0xac>
 801a6ec:	ec45 4b10 	vmov	d0, r4, r5
 801a6f0:	f000 f910 	bl	801a914 <finite>
 801a6f4:	b180      	cbz	r0, 801a718 <pow+0xac>
 801a6f6:	4632      	mov	r2, r6
 801a6f8:	463b      	mov	r3, r7
 801a6fa:	4630      	mov	r0, r6
 801a6fc:	4639      	mov	r1, r7
 801a6fe:	f7e6 fa15 	bl	8000b2c <__aeabi_dcmpun>
 801a702:	2800      	cmp	r0, #0
 801a704:	d0e2      	beq.n	801a6cc <pow+0x60>
 801a706:	f7fd fb2f 	bl	8017d68 <__errno>
 801a70a:	2321      	movs	r3, #33	; 0x21
 801a70c:	6003      	str	r3, [r0, #0]
 801a70e:	ecbd 8b02 	vpop	{d8}
 801a712:	ec47 6b10 	vmov	d0, r6, r7
 801a716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a718:	2200      	movs	r2, #0
 801a71a:	2300      	movs	r3, #0
 801a71c:	4630      	mov	r0, r6
 801a71e:	4639      	mov	r1, r7
 801a720:	f7e6 f9d2 	bl	8000ac8 <__aeabi_dcmpeq>
 801a724:	2800      	cmp	r0, #0
 801a726:	d0f2      	beq.n	801a70e <pow+0xa2>
 801a728:	eeb0 0a48 	vmov.f32	s0, s16
 801a72c:	eef0 0a68 	vmov.f32	s1, s17
 801a730:	f000 f8f0 	bl	801a914 <finite>
 801a734:	2800      	cmp	r0, #0
 801a736:	d0ea      	beq.n	801a70e <pow+0xa2>
 801a738:	ec45 4b10 	vmov	d0, r4, r5
 801a73c:	f000 f8ea 	bl	801a914 <finite>
 801a740:	e7c3      	b.n	801a6ca <pow+0x5e>
 801a742:	4f01      	ldr	r7, [pc, #4]	; (801a748 <pow+0xdc>)
 801a744:	2600      	movs	r6, #0
 801a746:	e7e2      	b.n	801a70e <pow+0xa2>
 801a748:	3ff00000 	.word	0x3ff00000
 801a74c:	00000000 	.word	0x00000000

0801a750 <cos>:
 801a750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a752:	ec53 2b10 	vmov	r2, r3, d0
 801a756:	4826      	ldr	r0, [pc, #152]	; (801a7f0 <cos+0xa0>)
 801a758:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a75c:	4281      	cmp	r1, r0
 801a75e:	dc06      	bgt.n	801a76e <cos+0x1e>
 801a760:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801a7e8 <cos+0x98>
 801a764:	b005      	add	sp, #20
 801a766:	f85d eb04 	ldr.w	lr, [sp], #4
 801a76a:	f000 b9c5 	b.w	801aaf8 <__kernel_cos>
 801a76e:	4821      	ldr	r0, [pc, #132]	; (801a7f4 <cos+0xa4>)
 801a770:	4281      	cmp	r1, r0
 801a772:	dd09      	ble.n	801a788 <cos+0x38>
 801a774:	ee10 0a10 	vmov	r0, s0
 801a778:	4619      	mov	r1, r3
 801a77a:	f7e5 fd85 	bl	8000288 <__aeabi_dsub>
 801a77e:	ec41 0b10 	vmov	d0, r0, r1
 801a782:	b005      	add	sp, #20
 801a784:	f85d fb04 	ldr.w	pc, [sp], #4
 801a788:	4668      	mov	r0, sp
 801a78a:	f001 f869 	bl	801b860 <__ieee754_rem_pio2>
 801a78e:	f000 0003 	and.w	r0, r0, #3
 801a792:	2801      	cmp	r0, #1
 801a794:	d00b      	beq.n	801a7ae <cos+0x5e>
 801a796:	2802      	cmp	r0, #2
 801a798:	d016      	beq.n	801a7c8 <cos+0x78>
 801a79a:	b9e0      	cbnz	r0, 801a7d6 <cos+0x86>
 801a79c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a7a0:	ed9d 0b00 	vldr	d0, [sp]
 801a7a4:	f000 f9a8 	bl	801aaf8 <__kernel_cos>
 801a7a8:	ec51 0b10 	vmov	r0, r1, d0
 801a7ac:	e7e7      	b.n	801a77e <cos+0x2e>
 801a7ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a7b2:	ed9d 0b00 	vldr	d0, [sp]
 801a7b6:	f000 fa67 	bl	801ac88 <__kernel_sin>
 801a7ba:	ec53 2b10 	vmov	r2, r3, d0
 801a7be:	ee10 0a10 	vmov	r0, s0
 801a7c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a7c6:	e7da      	b.n	801a77e <cos+0x2e>
 801a7c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a7cc:	ed9d 0b00 	vldr	d0, [sp]
 801a7d0:	f000 f992 	bl	801aaf8 <__kernel_cos>
 801a7d4:	e7f1      	b.n	801a7ba <cos+0x6a>
 801a7d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a7da:	ed9d 0b00 	vldr	d0, [sp]
 801a7de:	2001      	movs	r0, #1
 801a7e0:	f000 fa52 	bl	801ac88 <__kernel_sin>
 801a7e4:	e7e0      	b.n	801a7a8 <cos+0x58>
 801a7e6:	bf00      	nop
	...
 801a7f0:	3fe921fb 	.word	0x3fe921fb
 801a7f4:	7fefffff 	.word	0x7fefffff

0801a7f8 <sin>:
 801a7f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a7fa:	ec53 2b10 	vmov	r2, r3, d0
 801a7fe:	4828      	ldr	r0, [pc, #160]	; (801a8a0 <sin+0xa8>)
 801a800:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a804:	4281      	cmp	r1, r0
 801a806:	dc07      	bgt.n	801a818 <sin+0x20>
 801a808:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801a898 <sin+0xa0>
 801a80c:	2000      	movs	r0, #0
 801a80e:	b005      	add	sp, #20
 801a810:	f85d eb04 	ldr.w	lr, [sp], #4
 801a814:	f000 ba38 	b.w	801ac88 <__kernel_sin>
 801a818:	4822      	ldr	r0, [pc, #136]	; (801a8a4 <sin+0xac>)
 801a81a:	4281      	cmp	r1, r0
 801a81c:	dd09      	ble.n	801a832 <sin+0x3a>
 801a81e:	ee10 0a10 	vmov	r0, s0
 801a822:	4619      	mov	r1, r3
 801a824:	f7e5 fd30 	bl	8000288 <__aeabi_dsub>
 801a828:	ec41 0b10 	vmov	d0, r0, r1
 801a82c:	b005      	add	sp, #20
 801a82e:	f85d fb04 	ldr.w	pc, [sp], #4
 801a832:	4668      	mov	r0, sp
 801a834:	f001 f814 	bl	801b860 <__ieee754_rem_pio2>
 801a838:	f000 0003 	and.w	r0, r0, #3
 801a83c:	2801      	cmp	r0, #1
 801a83e:	d00c      	beq.n	801a85a <sin+0x62>
 801a840:	2802      	cmp	r0, #2
 801a842:	d011      	beq.n	801a868 <sin+0x70>
 801a844:	b9f0      	cbnz	r0, 801a884 <sin+0x8c>
 801a846:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a84a:	ed9d 0b00 	vldr	d0, [sp]
 801a84e:	2001      	movs	r0, #1
 801a850:	f000 fa1a 	bl	801ac88 <__kernel_sin>
 801a854:	ec51 0b10 	vmov	r0, r1, d0
 801a858:	e7e6      	b.n	801a828 <sin+0x30>
 801a85a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a85e:	ed9d 0b00 	vldr	d0, [sp]
 801a862:	f000 f949 	bl	801aaf8 <__kernel_cos>
 801a866:	e7f5      	b.n	801a854 <sin+0x5c>
 801a868:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a86c:	ed9d 0b00 	vldr	d0, [sp]
 801a870:	2001      	movs	r0, #1
 801a872:	f000 fa09 	bl	801ac88 <__kernel_sin>
 801a876:	ec53 2b10 	vmov	r2, r3, d0
 801a87a:	ee10 0a10 	vmov	r0, s0
 801a87e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a882:	e7d1      	b.n	801a828 <sin+0x30>
 801a884:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a888:	ed9d 0b00 	vldr	d0, [sp]
 801a88c:	f000 f934 	bl	801aaf8 <__kernel_cos>
 801a890:	e7f1      	b.n	801a876 <sin+0x7e>
 801a892:	bf00      	nop
 801a894:	f3af 8000 	nop.w
	...
 801a8a0:	3fe921fb 	.word	0x3fe921fb
 801a8a4:	7fefffff 	.word	0x7fefffff

0801a8a8 <expf>:
 801a8a8:	b508      	push	{r3, lr}
 801a8aa:	ed2d 8b02 	vpush	{d8}
 801a8ae:	eef0 8a40 	vmov.f32	s17, s0
 801a8b2:	f001 fa19 	bl	801bce8 <__ieee754_expf>
 801a8b6:	eeb0 8a40 	vmov.f32	s16, s0
 801a8ba:	eeb0 0a68 	vmov.f32	s0, s17
 801a8be:	f000 f885 	bl	801a9cc <finitef>
 801a8c2:	b160      	cbz	r0, 801a8de <expf+0x36>
 801a8c4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801a904 <expf+0x5c>
 801a8c8:	eef4 8ae7 	vcmpe.f32	s17, s15
 801a8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8d0:	dd0a      	ble.n	801a8e8 <expf+0x40>
 801a8d2:	f7fd fa49 	bl	8017d68 <__errno>
 801a8d6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801a908 <expf+0x60>
 801a8da:	2322      	movs	r3, #34	; 0x22
 801a8dc:	6003      	str	r3, [r0, #0]
 801a8de:	eeb0 0a48 	vmov.f32	s0, s16
 801a8e2:	ecbd 8b02 	vpop	{d8}
 801a8e6:	bd08      	pop	{r3, pc}
 801a8e8:	eddf 7a08 	vldr	s15, [pc, #32]	; 801a90c <expf+0x64>
 801a8ec:	eef4 8ae7 	vcmpe.f32	s17, s15
 801a8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8f4:	d5f3      	bpl.n	801a8de <expf+0x36>
 801a8f6:	f7fd fa37 	bl	8017d68 <__errno>
 801a8fa:	2322      	movs	r3, #34	; 0x22
 801a8fc:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801a910 <expf+0x68>
 801a900:	6003      	str	r3, [r0, #0]
 801a902:	e7ec      	b.n	801a8de <expf+0x36>
 801a904:	42b17217 	.word	0x42b17217
 801a908:	7f800000 	.word	0x7f800000
 801a90c:	c2cff1b5 	.word	0xc2cff1b5
 801a910:	00000000 	.word	0x00000000

0801a914 <finite>:
 801a914:	b082      	sub	sp, #8
 801a916:	ed8d 0b00 	vstr	d0, [sp]
 801a91a:	9801      	ldr	r0, [sp, #4]
 801a91c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a920:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a924:	0fc0      	lsrs	r0, r0, #31
 801a926:	b002      	add	sp, #8
 801a928:	4770      	bx	lr

0801a92a <fmin>:
 801a92a:	b508      	push	{r3, lr}
 801a92c:	ed2d 8b04 	vpush	{d8-d9}
 801a930:	eeb0 8a40 	vmov.f32	s16, s0
 801a934:	eef0 8a60 	vmov.f32	s17, s1
 801a938:	eeb0 9a41 	vmov.f32	s18, s2
 801a93c:	eef0 9a61 	vmov.f32	s19, s3
 801a940:	f000 f81a 	bl	801a978 <__fpclassifyd>
 801a944:	b168      	cbz	r0, 801a962 <fmin+0x38>
 801a946:	eeb0 0a49 	vmov.f32	s0, s18
 801a94a:	eef0 0a69 	vmov.f32	s1, s19
 801a94e:	f000 f813 	bl	801a978 <__fpclassifyd>
 801a952:	b150      	cbz	r0, 801a96a <fmin+0x40>
 801a954:	ec53 2b19 	vmov	r2, r3, d9
 801a958:	ec51 0b18 	vmov	r0, r1, d8
 801a95c:	f7e6 f8be 	bl	8000adc <__aeabi_dcmplt>
 801a960:	b918      	cbnz	r0, 801a96a <fmin+0x40>
 801a962:	eeb0 8a49 	vmov.f32	s16, s18
 801a966:	eef0 8a69 	vmov.f32	s17, s19
 801a96a:	eeb0 0a48 	vmov.f32	s0, s16
 801a96e:	eef0 0a68 	vmov.f32	s1, s17
 801a972:	ecbd 8b04 	vpop	{d8-d9}
 801a976:	bd08      	pop	{r3, pc}

0801a978 <__fpclassifyd>:
 801a978:	ec51 0b10 	vmov	r0, r1, d0
 801a97c:	b510      	push	{r4, lr}
 801a97e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 801a982:	460b      	mov	r3, r1
 801a984:	d019      	beq.n	801a9ba <__fpclassifyd+0x42>
 801a986:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 801a98a:	490e      	ldr	r1, [pc, #56]	; (801a9c4 <__fpclassifyd+0x4c>)
 801a98c:	428a      	cmp	r2, r1
 801a98e:	d90e      	bls.n	801a9ae <__fpclassifyd+0x36>
 801a990:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 801a994:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 801a998:	428a      	cmp	r2, r1
 801a99a:	d908      	bls.n	801a9ae <__fpclassifyd+0x36>
 801a99c:	4a0a      	ldr	r2, [pc, #40]	; (801a9c8 <__fpclassifyd+0x50>)
 801a99e:	4213      	tst	r3, r2
 801a9a0:	d007      	beq.n	801a9b2 <__fpclassifyd+0x3a>
 801a9a2:	4294      	cmp	r4, r2
 801a9a4:	d107      	bne.n	801a9b6 <__fpclassifyd+0x3e>
 801a9a6:	fab0 f080 	clz	r0, r0
 801a9aa:	0940      	lsrs	r0, r0, #5
 801a9ac:	bd10      	pop	{r4, pc}
 801a9ae:	2004      	movs	r0, #4
 801a9b0:	e7fc      	b.n	801a9ac <__fpclassifyd+0x34>
 801a9b2:	2003      	movs	r0, #3
 801a9b4:	e7fa      	b.n	801a9ac <__fpclassifyd+0x34>
 801a9b6:	2000      	movs	r0, #0
 801a9b8:	e7f8      	b.n	801a9ac <__fpclassifyd+0x34>
 801a9ba:	2800      	cmp	r0, #0
 801a9bc:	d1ee      	bne.n	801a99c <__fpclassifyd+0x24>
 801a9be:	2002      	movs	r0, #2
 801a9c0:	e7f4      	b.n	801a9ac <__fpclassifyd+0x34>
 801a9c2:	bf00      	nop
 801a9c4:	7fdfffff 	.word	0x7fdfffff
 801a9c8:	7ff00000 	.word	0x7ff00000

0801a9cc <finitef>:
 801a9cc:	b082      	sub	sp, #8
 801a9ce:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a9d2:	9801      	ldr	r0, [sp, #4]
 801a9d4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a9d8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801a9dc:	bfac      	ite	ge
 801a9de:	2000      	movge	r0, #0
 801a9e0:	2001      	movlt	r0, #1
 801a9e2:	b002      	add	sp, #8
 801a9e4:	4770      	bx	lr

0801a9e6 <cosl>:
 801a9e6:	f7ff beb3 	b.w	801a750 <cos>

0801a9ea <sinl>:
 801a9ea:	f7ff bf05 	b.w	801a7f8 <sin>

0801a9ee <acosl>:
 801a9ee:	f001 b93d 	b.w	801bc6c <acos>
 801a9f2:	0000      	movs	r0, r0
 801a9f4:	0000      	movs	r0, r0
	...

0801a9f8 <floor>:
 801a9f8:	ec51 0b10 	vmov	r0, r1, d0
 801a9fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801aa00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa04:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801aa08:	2e13      	cmp	r6, #19
 801aa0a:	ee10 5a10 	vmov	r5, s0
 801aa0e:	ee10 8a10 	vmov	r8, s0
 801aa12:	460c      	mov	r4, r1
 801aa14:	dc31      	bgt.n	801aa7a <floor+0x82>
 801aa16:	2e00      	cmp	r6, #0
 801aa18:	da14      	bge.n	801aa44 <floor+0x4c>
 801aa1a:	a333      	add	r3, pc, #204	; (adr r3, 801aae8 <floor+0xf0>)
 801aa1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa20:	f7e5 fc34 	bl	800028c <__adddf3>
 801aa24:	2200      	movs	r2, #0
 801aa26:	2300      	movs	r3, #0
 801aa28:	f7e6 f876 	bl	8000b18 <__aeabi_dcmpgt>
 801aa2c:	b138      	cbz	r0, 801aa3e <floor+0x46>
 801aa2e:	2c00      	cmp	r4, #0
 801aa30:	da53      	bge.n	801aada <floor+0xe2>
 801aa32:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801aa36:	4325      	orrs	r5, r4
 801aa38:	d052      	beq.n	801aae0 <floor+0xe8>
 801aa3a:	4c2d      	ldr	r4, [pc, #180]	; (801aaf0 <floor+0xf8>)
 801aa3c:	2500      	movs	r5, #0
 801aa3e:	4621      	mov	r1, r4
 801aa40:	4628      	mov	r0, r5
 801aa42:	e024      	b.n	801aa8e <floor+0x96>
 801aa44:	4f2b      	ldr	r7, [pc, #172]	; (801aaf4 <floor+0xfc>)
 801aa46:	4137      	asrs	r7, r6
 801aa48:	ea01 0307 	and.w	r3, r1, r7
 801aa4c:	4303      	orrs	r3, r0
 801aa4e:	d01e      	beq.n	801aa8e <floor+0x96>
 801aa50:	a325      	add	r3, pc, #148	; (adr r3, 801aae8 <floor+0xf0>)
 801aa52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa56:	f7e5 fc19 	bl	800028c <__adddf3>
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	2300      	movs	r3, #0
 801aa5e:	f7e6 f85b 	bl	8000b18 <__aeabi_dcmpgt>
 801aa62:	2800      	cmp	r0, #0
 801aa64:	d0eb      	beq.n	801aa3e <floor+0x46>
 801aa66:	2c00      	cmp	r4, #0
 801aa68:	bfbe      	ittt	lt
 801aa6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801aa6e:	4133      	asrlt	r3, r6
 801aa70:	18e4      	addlt	r4, r4, r3
 801aa72:	ea24 0407 	bic.w	r4, r4, r7
 801aa76:	2500      	movs	r5, #0
 801aa78:	e7e1      	b.n	801aa3e <floor+0x46>
 801aa7a:	2e33      	cmp	r6, #51	; 0x33
 801aa7c:	dd0b      	ble.n	801aa96 <floor+0x9e>
 801aa7e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801aa82:	d104      	bne.n	801aa8e <floor+0x96>
 801aa84:	ee10 2a10 	vmov	r2, s0
 801aa88:	460b      	mov	r3, r1
 801aa8a:	f7e5 fbff 	bl	800028c <__adddf3>
 801aa8e:	ec41 0b10 	vmov	d0, r0, r1
 801aa92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa96:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801aa9a:	f04f 37ff 	mov.w	r7, #4294967295
 801aa9e:	40df      	lsrs	r7, r3
 801aaa0:	4238      	tst	r0, r7
 801aaa2:	d0f4      	beq.n	801aa8e <floor+0x96>
 801aaa4:	a310      	add	r3, pc, #64	; (adr r3, 801aae8 <floor+0xf0>)
 801aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaaa:	f7e5 fbef 	bl	800028c <__adddf3>
 801aaae:	2200      	movs	r2, #0
 801aab0:	2300      	movs	r3, #0
 801aab2:	f7e6 f831 	bl	8000b18 <__aeabi_dcmpgt>
 801aab6:	2800      	cmp	r0, #0
 801aab8:	d0c1      	beq.n	801aa3e <floor+0x46>
 801aaba:	2c00      	cmp	r4, #0
 801aabc:	da0a      	bge.n	801aad4 <floor+0xdc>
 801aabe:	2e14      	cmp	r6, #20
 801aac0:	d101      	bne.n	801aac6 <floor+0xce>
 801aac2:	3401      	adds	r4, #1
 801aac4:	e006      	b.n	801aad4 <floor+0xdc>
 801aac6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801aaca:	2301      	movs	r3, #1
 801aacc:	40b3      	lsls	r3, r6
 801aace:	441d      	add	r5, r3
 801aad0:	45a8      	cmp	r8, r5
 801aad2:	d8f6      	bhi.n	801aac2 <floor+0xca>
 801aad4:	ea25 0507 	bic.w	r5, r5, r7
 801aad8:	e7b1      	b.n	801aa3e <floor+0x46>
 801aada:	2500      	movs	r5, #0
 801aadc:	462c      	mov	r4, r5
 801aade:	e7ae      	b.n	801aa3e <floor+0x46>
 801aae0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801aae4:	e7ab      	b.n	801aa3e <floor+0x46>
 801aae6:	bf00      	nop
 801aae8:	8800759c 	.word	0x8800759c
 801aaec:	7e37e43c 	.word	0x7e37e43c
 801aaf0:	bff00000 	.word	0xbff00000
 801aaf4:	000fffff 	.word	0x000fffff

0801aaf8 <__kernel_cos>:
 801aaf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aafc:	ec57 6b10 	vmov	r6, r7, d0
 801ab00:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801ab04:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801ab08:	ed8d 1b00 	vstr	d1, [sp]
 801ab0c:	da07      	bge.n	801ab1e <__kernel_cos+0x26>
 801ab0e:	ee10 0a10 	vmov	r0, s0
 801ab12:	4639      	mov	r1, r7
 801ab14:	f7e6 f820 	bl	8000b58 <__aeabi_d2iz>
 801ab18:	2800      	cmp	r0, #0
 801ab1a:	f000 8088 	beq.w	801ac2e <__kernel_cos+0x136>
 801ab1e:	4632      	mov	r2, r6
 801ab20:	463b      	mov	r3, r7
 801ab22:	4630      	mov	r0, r6
 801ab24:	4639      	mov	r1, r7
 801ab26:	f7e5 fd67 	bl	80005f8 <__aeabi_dmul>
 801ab2a:	4b51      	ldr	r3, [pc, #324]	; (801ac70 <__kernel_cos+0x178>)
 801ab2c:	2200      	movs	r2, #0
 801ab2e:	4604      	mov	r4, r0
 801ab30:	460d      	mov	r5, r1
 801ab32:	f7e5 fd61 	bl	80005f8 <__aeabi_dmul>
 801ab36:	a340      	add	r3, pc, #256	; (adr r3, 801ac38 <__kernel_cos+0x140>)
 801ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab3c:	4682      	mov	sl, r0
 801ab3e:	468b      	mov	fp, r1
 801ab40:	4620      	mov	r0, r4
 801ab42:	4629      	mov	r1, r5
 801ab44:	f7e5 fd58 	bl	80005f8 <__aeabi_dmul>
 801ab48:	a33d      	add	r3, pc, #244	; (adr r3, 801ac40 <__kernel_cos+0x148>)
 801ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab4e:	f7e5 fb9d 	bl	800028c <__adddf3>
 801ab52:	4622      	mov	r2, r4
 801ab54:	462b      	mov	r3, r5
 801ab56:	f7e5 fd4f 	bl	80005f8 <__aeabi_dmul>
 801ab5a:	a33b      	add	r3, pc, #236	; (adr r3, 801ac48 <__kernel_cos+0x150>)
 801ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab60:	f7e5 fb92 	bl	8000288 <__aeabi_dsub>
 801ab64:	4622      	mov	r2, r4
 801ab66:	462b      	mov	r3, r5
 801ab68:	f7e5 fd46 	bl	80005f8 <__aeabi_dmul>
 801ab6c:	a338      	add	r3, pc, #224	; (adr r3, 801ac50 <__kernel_cos+0x158>)
 801ab6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab72:	f7e5 fb8b 	bl	800028c <__adddf3>
 801ab76:	4622      	mov	r2, r4
 801ab78:	462b      	mov	r3, r5
 801ab7a:	f7e5 fd3d 	bl	80005f8 <__aeabi_dmul>
 801ab7e:	a336      	add	r3, pc, #216	; (adr r3, 801ac58 <__kernel_cos+0x160>)
 801ab80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab84:	f7e5 fb80 	bl	8000288 <__aeabi_dsub>
 801ab88:	4622      	mov	r2, r4
 801ab8a:	462b      	mov	r3, r5
 801ab8c:	f7e5 fd34 	bl	80005f8 <__aeabi_dmul>
 801ab90:	a333      	add	r3, pc, #204	; (adr r3, 801ac60 <__kernel_cos+0x168>)
 801ab92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab96:	f7e5 fb79 	bl	800028c <__adddf3>
 801ab9a:	4622      	mov	r2, r4
 801ab9c:	462b      	mov	r3, r5
 801ab9e:	f7e5 fd2b 	bl	80005f8 <__aeabi_dmul>
 801aba2:	4622      	mov	r2, r4
 801aba4:	462b      	mov	r3, r5
 801aba6:	f7e5 fd27 	bl	80005f8 <__aeabi_dmul>
 801abaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 801abae:	4604      	mov	r4, r0
 801abb0:	460d      	mov	r5, r1
 801abb2:	4630      	mov	r0, r6
 801abb4:	4639      	mov	r1, r7
 801abb6:	f7e5 fd1f 	bl	80005f8 <__aeabi_dmul>
 801abba:	460b      	mov	r3, r1
 801abbc:	4602      	mov	r2, r0
 801abbe:	4629      	mov	r1, r5
 801abc0:	4620      	mov	r0, r4
 801abc2:	f7e5 fb61 	bl	8000288 <__aeabi_dsub>
 801abc6:	4b2b      	ldr	r3, [pc, #172]	; (801ac74 <__kernel_cos+0x17c>)
 801abc8:	4598      	cmp	r8, r3
 801abca:	4606      	mov	r6, r0
 801abcc:	460f      	mov	r7, r1
 801abce:	dc10      	bgt.n	801abf2 <__kernel_cos+0xfa>
 801abd0:	4602      	mov	r2, r0
 801abd2:	460b      	mov	r3, r1
 801abd4:	4650      	mov	r0, sl
 801abd6:	4659      	mov	r1, fp
 801abd8:	f7e5 fb56 	bl	8000288 <__aeabi_dsub>
 801abdc:	460b      	mov	r3, r1
 801abde:	4926      	ldr	r1, [pc, #152]	; (801ac78 <__kernel_cos+0x180>)
 801abe0:	4602      	mov	r2, r0
 801abe2:	2000      	movs	r0, #0
 801abe4:	f7e5 fb50 	bl	8000288 <__aeabi_dsub>
 801abe8:	ec41 0b10 	vmov	d0, r0, r1
 801abec:	b003      	add	sp, #12
 801abee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abf2:	4b22      	ldr	r3, [pc, #136]	; (801ac7c <__kernel_cos+0x184>)
 801abf4:	4920      	ldr	r1, [pc, #128]	; (801ac78 <__kernel_cos+0x180>)
 801abf6:	4598      	cmp	r8, r3
 801abf8:	bfcc      	ite	gt
 801abfa:	4d21      	ldrgt	r5, [pc, #132]	; (801ac80 <__kernel_cos+0x188>)
 801abfc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801ac00:	2400      	movs	r4, #0
 801ac02:	4622      	mov	r2, r4
 801ac04:	462b      	mov	r3, r5
 801ac06:	2000      	movs	r0, #0
 801ac08:	f7e5 fb3e 	bl	8000288 <__aeabi_dsub>
 801ac0c:	4622      	mov	r2, r4
 801ac0e:	4680      	mov	r8, r0
 801ac10:	4689      	mov	r9, r1
 801ac12:	462b      	mov	r3, r5
 801ac14:	4650      	mov	r0, sl
 801ac16:	4659      	mov	r1, fp
 801ac18:	f7e5 fb36 	bl	8000288 <__aeabi_dsub>
 801ac1c:	4632      	mov	r2, r6
 801ac1e:	463b      	mov	r3, r7
 801ac20:	f7e5 fb32 	bl	8000288 <__aeabi_dsub>
 801ac24:	4602      	mov	r2, r0
 801ac26:	460b      	mov	r3, r1
 801ac28:	4640      	mov	r0, r8
 801ac2a:	4649      	mov	r1, r9
 801ac2c:	e7da      	b.n	801abe4 <__kernel_cos+0xec>
 801ac2e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801ac68 <__kernel_cos+0x170>
 801ac32:	e7db      	b.n	801abec <__kernel_cos+0xf4>
 801ac34:	f3af 8000 	nop.w
 801ac38:	be8838d4 	.word	0xbe8838d4
 801ac3c:	bda8fae9 	.word	0xbda8fae9
 801ac40:	bdb4b1c4 	.word	0xbdb4b1c4
 801ac44:	3e21ee9e 	.word	0x3e21ee9e
 801ac48:	809c52ad 	.word	0x809c52ad
 801ac4c:	3e927e4f 	.word	0x3e927e4f
 801ac50:	19cb1590 	.word	0x19cb1590
 801ac54:	3efa01a0 	.word	0x3efa01a0
 801ac58:	16c15177 	.word	0x16c15177
 801ac5c:	3f56c16c 	.word	0x3f56c16c
 801ac60:	5555554c 	.word	0x5555554c
 801ac64:	3fa55555 	.word	0x3fa55555
 801ac68:	00000000 	.word	0x00000000
 801ac6c:	3ff00000 	.word	0x3ff00000
 801ac70:	3fe00000 	.word	0x3fe00000
 801ac74:	3fd33332 	.word	0x3fd33332
 801ac78:	3ff00000 	.word	0x3ff00000
 801ac7c:	3fe90000 	.word	0x3fe90000
 801ac80:	3fd20000 	.word	0x3fd20000
 801ac84:	00000000 	.word	0x00000000

0801ac88 <__kernel_sin>:
 801ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac8c:	ed2d 8b04 	vpush	{d8-d9}
 801ac90:	eeb0 8a41 	vmov.f32	s16, s2
 801ac94:	eef0 8a61 	vmov.f32	s17, s3
 801ac98:	ec55 4b10 	vmov	r4, r5, d0
 801ac9c:	b083      	sub	sp, #12
 801ac9e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801aca2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801aca6:	9001      	str	r0, [sp, #4]
 801aca8:	da06      	bge.n	801acb8 <__kernel_sin+0x30>
 801acaa:	ee10 0a10 	vmov	r0, s0
 801acae:	4629      	mov	r1, r5
 801acb0:	f7e5 ff52 	bl	8000b58 <__aeabi_d2iz>
 801acb4:	2800      	cmp	r0, #0
 801acb6:	d051      	beq.n	801ad5c <__kernel_sin+0xd4>
 801acb8:	4622      	mov	r2, r4
 801acba:	462b      	mov	r3, r5
 801acbc:	4620      	mov	r0, r4
 801acbe:	4629      	mov	r1, r5
 801acc0:	f7e5 fc9a 	bl	80005f8 <__aeabi_dmul>
 801acc4:	4682      	mov	sl, r0
 801acc6:	468b      	mov	fp, r1
 801acc8:	4602      	mov	r2, r0
 801acca:	460b      	mov	r3, r1
 801accc:	4620      	mov	r0, r4
 801acce:	4629      	mov	r1, r5
 801acd0:	f7e5 fc92 	bl	80005f8 <__aeabi_dmul>
 801acd4:	a341      	add	r3, pc, #260	; (adr r3, 801addc <__kernel_sin+0x154>)
 801acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acda:	4680      	mov	r8, r0
 801acdc:	4689      	mov	r9, r1
 801acde:	4650      	mov	r0, sl
 801ace0:	4659      	mov	r1, fp
 801ace2:	f7e5 fc89 	bl	80005f8 <__aeabi_dmul>
 801ace6:	a33f      	add	r3, pc, #252	; (adr r3, 801ade4 <__kernel_sin+0x15c>)
 801ace8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acec:	f7e5 facc 	bl	8000288 <__aeabi_dsub>
 801acf0:	4652      	mov	r2, sl
 801acf2:	465b      	mov	r3, fp
 801acf4:	f7e5 fc80 	bl	80005f8 <__aeabi_dmul>
 801acf8:	a33c      	add	r3, pc, #240	; (adr r3, 801adec <__kernel_sin+0x164>)
 801acfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acfe:	f7e5 fac5 	bl	800028c <__adddf3>
 801ad02:	4652      	mov	r2, sl
 801ad04:	465b      	mov	r3, fp
 801ad06:	f7e5 fc77 	bl	80005f8 <__aeabi_dmul>
 801ad0a:	a33a      	add	r3, pc, #232	; (adr r3, 801adf4 <__kernel_sin+0x16c>)
 801ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad10:	f7e5 faba 	bl	8000288 <__aeabi_dsub>
 801ad14:	4652      	mov	r2, sl
 801ad16:	465b      	mov	r3, fp
 801ad18:	f7e5 fc6e 	bl	80005f8 <__aeabi_dmul>
 801ad1c:	a337      	add	r3, pc, #220	; (adr r3, 801adfc <__kernel_sin+0x174>)
 801ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad22:	f7e5 fab3 	bl	800028c <__adddf3>
 801ad26:	9b01      	ldr	r3, [sp, #4]
 801ad28:	4606      	mov	r6, r0
 801ad2a:	460f      	mov	r7, r1
 801ad2c:	b9eb      	cbnz	r3, 801ad6a <__kernel_sin+0xe2>
 801ad2e:	4602      	mov	r2, r0
 801ad30:	460b      	mov	r3, r1
 801ad32:	4650      	mov	r0, sl
 801ad34:	4659      	mov	r1, fp
 801ad36:	f7e5 fc5f 	bl	80005f8 <__aeabi_dmul>
 801ad3a:	a325      	add	r3, pc, #148	; (adr r3, 801add0 <__kernel_sin+0x148>)
 801ad3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad40:	f7e5 faa2 	bl	8000288 <__aeabi_dsub>
 801ad44:	4642      	mov	r2, r8
 801ad46:	464b      	mov	r3, r9
 801ad48:	f7e5 fc56 	bl	80005f8 <__aeabi_dmul>
 801ad4c:	4602      	mov	r2, r0
 801ad4e:	460b      	mov	r3, r1
 801ad50:	4620      	mov	r0, r4
 801ad52:	4629      	mov	r1, r5
 801ad54:	f7e5 fa9a 	bl	800028c <__adddf3>
 801ad58:	4604      	mov	r4, r0
 801ad5a:	460d      	mov	r5, r1
 801ad5c:	ec45 4b10 	vmov	d0, r4, r5
 801ad60:	b003      	add	sp, #12
 801ad62:	ecbd 8b04 	vpop	{d8-d9}
 801ad66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad6a:	4b1b      	ldr	r3, [pc, #108]	; (801add8 <__kernel_sin+0x150>)
 801ad6c:	ec51 0b18 	vmov	r0, r1, d8
 801ad70:	2200      	movs	r2, #0
 801ad72:	f7e5 fc41 	bl	80005f8 <__aeabi_dmul>
 801ad76:	4632      	mov	r2, r6
 801ad78:	ec41 0b19 	vmov	d9, r0, r1
 801ad7c:	463b      	mov	r3, r7
 801ad7e:	4640      	mov	r0, r8
 801ad80:	4649      	mov	r1, r9
 801ad82:	f7e5 fc39 	bl	80005f8 <__aeabi_dmul>
 801ad86:	4602      	mov	r2, r0
 801ad88:	460b      	mov	r3, r1
 801ad8a:	ec51 0b19 	vmov	r0, r1, d9
 801ad8e:	f7e5 fa7b 	bl	8000288 <__aeabi_dsub>
 801ad92:	4652      	mov	r2, sl
 801ad94:	465b      	mov	r3, fp
 801ad96:	f7e5 fc2f 	bl	80005f8 <__aeabi_dmul>
 801ad9a:	ec53 2b18 	vmov	r2, r3, d8
 801ad9e:	f7e5 fa73 	bl	8000288 <__aeabi_dsub>
 801ada2:	a30b      	add	r3, pc, #44	; (adr r3, 801add0 <__kernel_sin+0x148>)
 801ada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ada8:	4606      	mov	r6, r0
 801adaa:	460f      	mov	r7, r1
 801adac:	4640      	mov	r0, r8
 801adae:	4649      	mov	r1, r9
 801adb0:	f7e5 fc22 	bl	80005f8 <__aeabi_dmul>
 801adb4:	4602      	mov	r2, r0
 801adb6:	460b      	mov	r3, r1
 801adb8:	4630      	mov	r0, r6
 801adba:	4639      	mov	r1, r7
 801adbc:	f7e5 fa66 	bl	800028c <__adddf3>
 801adc0:	4602      	mov	r2, r0
 801adc2:	460b      	mov	r3, r1
 801adc4:	4620      	mov	r0, r4
 801adc6:	4629      	mov	r1, r5
 801adc8:	f7e5 fa5e 	bl	8000288 <__aeabi_dsub>
 801adcc:	e7c4      	b.n	801ad58 <__kernel_sin+0xd0>
 801adce:	bf00      	nop
 801add0:	55555549 	.word	0x55555549
 801add4:	3fc55555 	.word	0x3fc55555
 801add8:	3fe00000 	.word	0x3fe00000
 801addc:	5acfd57c 	.word	0x5acfd57c
 801ade0:	3de5d93a 	.word	0x3de5d93a
 801ade4:	8a2b9ceb 	.word	0x8a2b9ceb
 801ade8:	3e5ae5e6 	.word	0x3e5ae5e6
 801adec:	57b1fe7d 	.word	0x57b1fe7d
 801adf0:	3ec71de3 	.word	0x3ec71de3
 801adf4:	19c161d5 	.word	0x19c161d5
 801adf8:	3f2a01a0 	.word	0x3f2a01a0
 801adfc:	1110f8a6 	.word	0x1110f8a6
 801ae00:	3f811111 	.word	0x3f811111
 801ae04:	00000000 	.word	0x00000000

0801ae08 <__ieee754_pow>:
 801ae08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae0c:	ed2d 8b06 	vpush	{d8-d10}
 801ae10:	b089      	sub	sp, #36	; 0x24
 801ae12:	ed8d 1b00 	vstr	d1, [sp]
 801ae16:	e9dd 2900 	ldrd	r2, r9, [sp]
 801ae1a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801ae1e:	ea58 0102 	orrs.w	r1, r8, r2
 801ae22:	ec57 6b10 	vmov	r6, r7, d0
 801ae26:	d115      	bne.n	801ae54 <__ieee754_pow+0x4c>
 801ae28:	19b3      	adds	r3, r6, r6
 801ae2a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801ae2e:	4152      	adcs	r2, r2
 801ae30:	4299      	cmp	r1, r3
 801ae32:	4b89      	ldr	r3, [pc, #548]	; (801b058 <__ieee754_pow+0x250>)
 801ae34:	4193      	sbcs	r3, r2
 801ae36:	f080 84d1 	bcs.w	801b7dc <__ieee754_pow+0x9d4>
 801ae3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ae3e:	4630      	mov	r0, r6
 801ae40:	4639      	mov	r1, r7
 801ae42:	f7e5 fa23 	bl	800028c <__adddf3>
 801ae46:	ec41 0b10 	vmov	d0, r0, r1
 801ae4a:	b009      	add	sp, #36	; 0x24
 801ae4c:	ecbd 8b06 	vpop	{d8-d10}
 801ae50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae54:	4b81      	ldr	r3, [pc, #516]	; (801b05c <__ieee754_pow+0x254>)
 801ae56:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801ae5a:	429c      	cmp	r4, r3
 801ae5c:	ee10 aa10 	vmov	sl, s0
 801ae60:	463d      	mov	r5, r7
 801ae62:	dc06      	bgt.n	801ae72 <__ieee754_pow+0x6a>
 801ae64:	d101      	bne.n	801ae6a <__ieee754_pow+0x62>
 801ae66:	2e00      	cmp	r6, #0
 801ae68:	d1e7      	bne.n	801ae3a <__ieee754_pow+0x32>
 801ae6a:	4598      	cmp	r8, r3
 801ae6c:	dc01      	bgt.n	801ae72 <__ieee754_pow+0x6a>
 801ae6e:	d10f      	bne.n	801ae90 <__ieee754_pow+0x88>
 801ae70:	b172      	cbz	r2, 801ae90 <__ieee754_pow+0x88>
 801ae72:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801ae76:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801ae7a:	ea55 050a 	orrs.w	r5, r5, sl
 801ae7e:	d1dc      	bne.n	801ae3a <__ieee754_pow+0x32>
 801ae80:	e9dd 3200 	ldrd	r3, r2, [sp]
 801ae84:	18db      	adds	r3, r3, r3
 801ae86:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801ae8a:	4152      	adcs	r2, r2
 801ae8c:	429d      	cmp	r5, r3
 801ae8e:	e7d0      	b.n	801ae32 <__ieee754_pow+0x2a>
 801ae90:	2d00      	cmp	r5, #0
 801ae92:	da3b      	bge.n	801af0c <__ieee754_pow+0x104>
 801ae94:	4b72      	ldr	r3, [pc, #456]	; (801b060 <__ieee754_pow+0x258>)
 801ae96:	4598      	cmp	r8, r3
 801ae98:	dc51      	bgt.n	801af3e <__ieee754_pow+0x136>
 801ae9a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801ae9e:	4598      	cmp	r8, r3
 801aea0:	f340 84ab 	ble.w	801b7fa <__ieee754_pow+0x9f2>
 801aea4:	ea4f 5328 	mov.w	r3, r8, asr #20
 801aea8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801aeac:	2b14      	cmp	r3, #20
 801aeae:	dd0f      	ble.n	801aed0 <__ieee754_pow+0xc8>
 801aeb0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801aeb4:	fa22 f103 	lsr.w	r1, r2, r3
 801aeb8:	fa01 f303 	lsl.w	r3, r1, r3
 801aebc:	4293      	cmp	r3, r2
 801aebe:	f040 849c 	bne.w	801b7fa <__ieee754_pow+0x9f2>
 801aec2:	f001 0101 	and.w	r1, r1, #1
 801aec6:	f1c1 0302 	rsb	r3, r1, #2
 801aeca:	9304      	str	r3, [sp, #16]
 801aecc:	b182      	cbz	r2, 801aef0 <__ieee754_pow+0xe8>
 801aece:	e05f      	b.n	801af90 <__ieee754_pow+0x188>
 801aed0:	2a00      	cmp	r2, #0
 801aed2:	d15b      	bne.n	801af8c <__ieee754_pow+0x184>
 801aed4:	f1c3 0314 	rsb	r3, r3, #20
 801aed8:	fa48 f103 	asr.w	r1, r8, r3
 801aedc:	fa01 f303 	lsl.w	r3, r1, r3
 801aee0:	4543      	cmp	r3, r8
 801aee2:	f040 8487 	bne.w	801b7f4 <__ieee754_pow+0x9ec>
 801aee6:	f001 0101 	and.w	r1, r1, #1
 801aeea:	f1c1 0302 	rsb	r3, r1, #2
 801aeee:	9304      	str	r3, [sp, #16]
 801aef0:	4b5c      	ldr	r3, [pc, #368]	; (801b064 <__ieee754_pow+0x25c>)
 801aef2:	4598      	cmp	r8, r3
 801aef4:	d132      	bne.n	801af5c <__ieee754_pow+0x154>
 801aef6:	f1b9 0f00 	cmp.w	r9, #0
 801aefa:	f280 8477 	bge.w	801b7ec <__ieee754_pow+0x9e4>
 801aefe:	4959      	ldr	r1, [pc, #356]	; (801b064 <__ieee754_pow+0x25c>)
 801af00:	4632      	mov	r2, r6
 801af02:	463b      	mov	r3, r7
 801af04:	2000      	movs	r0, #0
 801af06:	f7e5 fca1 	bl	800084c <__aeabi_ddiv>
 801af0a:	e79c      	b.n	801ae46 <__ieee754_pow+0x3e>
 801af0c:	2300      	movs	r3, #0
 801af0e:	9304      	str	r3, [sp, #16]
 801af10:	2a00      	cmp	r2, #0
 801af12:	d13d      	bne.n	801af90 <__ieee754_pow+0x188>
 801af14:	4b51      	ldr	r3, [pc, #324]	; (801b05c <__ieee754_pow+0x254>)
 801af16:	4598      	cmp	r8, r3
 801af18:	d1ea      	bne.n	801aef0 <__ieee754_pow+0xe8>
 801af1a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801af1e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801af22:	ea53 030a 	orrs.w	r3, r3, sl
 801af26:	f000 8459 	beq.w	801b7dc <__ieee754_pow+0x9d4>
 801af2a:	4b4f      	ldr	r3, [pc, #316]	; (801b068 <__ieee754_pow+0x260>)
 801af2c:	429c      	cmp	r4, r3
 801af2e:	dd08      	ble.n	801af42 <__ieee754_pow+0x13a>
 801af30:	f1b9 0f00 	cmp.w	r9, #0
 801af34:	f2c0 8456 	blt.w	801b7e4 <__ieee754_pow+0x9dc>
 801af38:	e9dd 0100 	ldrd	r0, r1, [sp]
 801af3c:	e783      	b.n	801ae46 <__ieee754_pow+0x3e>
 801af3e:	2302      	movs	r3, #2
 801af40:	e7e5      	b.n	801af0e <__ieee754_pow+0x106>
 801af42:	f1b9 0f00 	cmp.w	r9, #0
 801af46:	f04f 0000 	mov.w	r0, #0
 801af4a:	f04f 0100 	mov.w	r1, #0
 801af4e:	f6bf af7a 	bge.w	801ae46 <__ieee754_pow+0x3e>
 801af52:	e9dd 0300 	ldrd	r0, r3, [sp]
 801af56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801af5a:	e774      	b.n	801ae46 <__ieee754_pow+0x3e>
 801af5c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801af60:	d106      	bne.n	801af70 <__ieee754_pow+0x168>
 801af62:	4632      	mov	r2, r6
 801af64:	463b      	mov	r3, r7
 801af66:	4630      	mov	r0, r6
 801af68:	4639      	mov	r1, r7
 801af6a:	f7e5 fb45 	bl	80005f8 <__aeabi_dmul>
 801af6e:	e76a      	b.n	801ae46 <__ieee754_pow+0x3e>
 801af70:	4b3e      	ldr	r3, [pc, #248]	; (801b06c <__ieee754_pow+0x264>)
 801af72:	4599      	cmp	r9, r3
 801af74:	d10c      	bne.n	801af90 <__ieee754_pow+0x188>
 801af76:	2d00      	cmp	r5, #0
 801af78:	db0a      	blt.n	801af90 <__ieee754_pow+0x188>
 801af7a:	ec47 6b10 	vmov	d0, r6, r7
 801af7e:	b009      	add	sp, #36	; 0x24
 801af80:	ecbd 8b06 	vpop	{d8-d10}
 801af84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af88:	f001 b84e 	b.w	801c028 <__ieee754_sqrt>
 801af8c:	2300      	movs	r3, #0
 801af8e:	9304      	str	r3, [sp, #16]
 801af90:	ec47 6b10 	vmov	d0, r6, r7
 801af94:	f000 fe9e 	bl	801bcd4 <fabs>
 801af98:	ec51 0b10 	vmov	r0, r1, d0
 801af9c:	f1ba 0f00 	cmp.w	sl, #0
 801afa0:	d129      	bne.n	801aff6 <__ieee754_pow+0x1ee>
 801afa2:	b124      	cbz	r4, 801afae <__ieee754_pow+0x1a6>
 801afa4:	4b2f      	ldr	r3, [pc, #188]	; (801b064 <__ieee754_pow+0x25c>)
 801afa6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801afaa:	429a      	cmp	r2, r3
 801afac:	d123      	bne.n	801aff6 <__ieee754_pow+0x1ee>
 801afae:	f1b9 0f00 	cmp.w	r9, #0
 801afb2:	da05      	bge.n	801afc0 <__ieee754_pow+0x1b8>
 801afb4:	4602      	mov	r2, r0
 801afb6:	460b      	mov	r3, r1
 801afb8:	2000      	movs	r0, #0
 801afba:	492a      	ldr	r1, [pc, #168]	; (801b064 <__ieee754_pow+0x25c>)
 801afbc:	f7e5 fc46 	bl	800084c <__aeabi_ddiv>
 801afc0:	2d00      	cmp	r5, #0
 801afc2:	f6bf af40 	bge.w	801ae46 <__ieee754_pow+0x3e>
 801afc6:	9b04      	ldr	r3, [sp, #16]
 801afc8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801afcc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801afd0:	431c      	orrs	r4, r3
 801afd2:	d108      	bne.n	801afe6 <__ieee754_pow+0x1de>
 801afd4:	4602      	mov	r2, r0
 801afd6:	460b      	mov	r3, r1
 801afd8:	4610      	mov	r0, r2
 801afda:	4619      	mov	r1, r3
 801afdc:	f7e5 f954 	bl	8000288 <__aeabi_dsub>
 801afe0:	4602      	mov	r2, r0
 801afe2:	460b      	mov	r3, r1
 801afe4:	e78f      	b.n	801af06 <__ieee754_pow+0xfe>
 801afe6:	9b04      	ldr	r3, [sp, #16]
 801afe8:	2b01      	cmp	r3, #1
 801afea:	f47f af2c 	bne.w	801ae46 <__ieee754_pow+0x3e>
 801afee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aff2:	4619      	mov	r1, r3
 801aff4:	e727      	b.n	801ae46 <__ieee754_pow+0x3e>
 801aff6:	0feb      	lsrs	r3, r5, #31
 801aff8:	3b01      	subs	r3, #1
 801affa:	9306      	str	r3, [sp, #24]
 801affc:	9a06      	ldr	r2, [sp, #24]
 801affe:	9b04      	ldr	r3, [sp, #16]
 801b000:	4313      	orrs	r3, r2
 801b002:	d102      	bne.n	801b00a <__ieee754_pow+0x202>
 801b004:	4632      	mov	r2, r6
 801b006:	463b      	mov	r3, r7
 801b008:	e7e6      	b.n	801afd8 <__ieee754_pow+0x1d0>
 801b00a:	4b19      	ldr	r3, [pc, #100]	; (801b070 <__ieee754_pow+0x268>)
 801b00c:	4598      	cmp	r8, r3
 801b00e:	f340 80fb 	ble.w	801b208 <__ieee754_pow+0x400>
 801b012:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801b016:	4598      	cmp	r8, r3
 801b018:	4b13      	ldr	r3, [pc, #76]	; (801b068 <__ieee754_pow+0x260>)
 801b01a:	dd0c      	ble.n	801b036 <__ieee754_pow+0x22e>
 801b01c:	429c      	cmp	r4, r3
 801b01e:	dc0f      	bgt.n	801b040 <__ieee754_pow+0x238>
 801b020:	f1b9 0f00 	cmp.w	r9, #0
 801b024:	da0f      	bge.n	801b046 <__ieee754_pow+0x23e>
 801b026:	2000      	movs	r0, #0
 801b028:	b009      	add	sp, #36	; 0x24
 801b02a:	ecbd 8b06 	vpop	{d8-d10}
 801b02e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b032:	f000 bfce 	b.w	801bfd2 <__math_oflow>
 801b036:	429c      	cmp	r4, r3
 801b038:	dbf2      	blt.n	801b020 <__ieee754_pow+0x218>
 801b03a:	4b0a      	ldr	r3, [pc, #40]	; (801b064 <__ieee754_pow+0x25c>)
 801b03c:	429c      	cmp	r4, r3
 801b03e:	dd19      	ble.n	801b074 <__ieee754_pow+0x26c>
 801b040:	f1b9 0f00 	cmp.w	r9, #0
 801b044:	dcef      	bgt.n	801b026 <__ieee754_pow+0x21e>
 801b046:	2000      	movs	r0, #0
 801b048:	b009      	add	sp, #36	; 0x24
 801b04a:	ecbd 8b06 	vpop	{d8-d10}
 801b04e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b052:	f000 bfb5 	b.w	801bfc0 <__math_uflow>
 801b056:	bf00      	nop
 801b058:	fff00000 	.word	0xfff00000
 801b05c:	7ff00000 	.word	0x7ff00000
 801b060:	433fffff 	.word	0x433fffff
 801b064:	3ff00000 	.word	0x3ff00000
 801b068:	3fefffff 	.word	0x3fefffff
 801b06c:	3fe00000 	.word	0x3fe00000
 801b070:	41e00000 	.word	0x41e00000
 801b074:	4b60      	ldr	r3, [pc, #384]	; (801b1f8 <__ieee754_pow+0x3f0>)
 801b076:	2200      	movs	r2, #0
 801b078:	f7e5 f906 	bl	8000288 <__aeabi_dsub>
 801b07c:	a354      	add	r3, pc, #336	; (adr r3, 801b1d0 <__ieee754_pow+0x3c8>)
 801b07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b082:	4604      	mov	r4, r0
 801b084:	460d      	mov	r5, r1
 801b086:	f7e5 fab7 	bl	80005f8 <__aeabi_dmul>
 801b08a:	a353      	add	r3, pc, #332	; (adr r3, 801b1d8 <__ieee754_pow+0x3d0>)
 801b08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b090:	4606      	mov	r6, r0
 801b092:	460f      	mov	r7, r1
 801b094:	4620      	mov	r0, r4
 801b096:	4629      	mov	r1, r5
 801b098:	f7e5 faae 	bl	80005f8 <__aeabi_dmul>
 801b09c:	4b57      	ldr	r3, [pc, #348]	; (801b1fc <__ieee754_pow+0x3f4>)
 801b09e:	4682      	mov	sl, r0
 801b0a0:	468b      	mov	fp, r1
 801b0a2:	2200      	movs	r2, #0
 801b0a4:	4620      	mov	r0, r4
 801b0a6:	4629      	mov	r1, r5
 801b0a8:	f7e5 faa6 	bl	80005f8 <__aeabi_dmul>
 801b0ac:	4602      	mov	r2, r0
 801b0ae:	460b      	mov	r3, r1
 801b0b0:	a14b      	add	r1, pc, #300	; (adr r1, 801b1e0 <__ieee754_pow+0x3d8>)
 801b0b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b0b6:	f7e5 f8e7 	bl	8000288 <__aeabi_dsub>
 801b0ba:	4622      	mov	r2, r4
 801b0bc:	462b      	mov	r3, r5
 801b0be:	f7e5 fa9b 	bl	80005f8 <__aeabi_dmul>
 801b0c2:	4602      	mov	r2, r0
 801b0c4:	460b      	mov	r3, r1
 801b0c6:	2000      	movs	r0, #0
 801b0c8:	494d      	ldr	r1, [pc, #308]	; (801b200 <__ieee754_pow+0x3f8>)
 801b0ca:	f7e5 f8dd 	bl	8000288 <__aeabi_dsub>
 801b0ce:	4622      	mov	r2, r4
 801b0d0:	4680      	mov	r8, r0
 801b0d2:	4689      	mov	r9, r1
 801b0d4:	462b      	mov	r3, r5
 801b0d6:	4620      	mov	r0, r4
 801b0d8:	4629      	mov	r1, r5
 801b0da:	f7e5 fa8d 	bl	80005f8 <__aeabi_dmul>
 801b0de:	4602      	mov	r2, r0
 801b0e0:	460b      	mov	r3, r1
 801b0e2:	4640      	mov	r0, r8
 801b0e4:	4649      	mov	r1, r9
 801b0e6:	f7e5 fa87 	bl	80005f8 <__aeabi_dmul>
 801b0ea:	a33f      	add	r3, pc, #252	; (adr r3, 801b1e8 <__ieee754_pow+0x3e0>)
 801b0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0f0:	f7e5 fa82 	bl	80005f8 <__aeabi_dmul>
 801b0f4:	4602      	mov	r2, r0
 801b0f6:	460b      	mov	r3, r1
 801b0f8:	4650      	mov	r0, sl
 801b0fa:	4659      	mov	r1, fp
 801b0fc:	f7e5 f8c4 	bl	8000288 <__aeabi_dsub>
 801b100:	4602      	mov	r2, r0
 801b102:	460b      	mov	r3, r1
 801b104:	4680      	mov	r8, r0
 801b106:	4689      	mov	r9, r1
 801b108:	4630      	mov	r0, r6
 801b10a:	4639      	mov	r1, r7
 801b10c:	f7e5 f8be 	bl	800028c <__adddf3>
 801b110:	2000      	movs	r0, #0
 801b112:	4632      	mov	r2, r6
 801b114:	463b      	mov	r3, r7
 801b116:	4604      	mov	r4, r0
 801b118:	460d      	mov	r5, r1
 801b11a:	f7e5 f8b5 	bl	8000288 <__aeabi_dsub>
 801b11e:	4602      	mov	r2, r0
 801b120:	460b      	mov	r3, r1
 801b122:	4640      	mov	r0, r8
 801b124:	4649      	mov	r1, r9
 801b126:	f7e5 f8af 	bl	8000288 <__aeabi_dsub>
 801b12a:	9b04      	ldr	r3, [sp, #16]
 801b12c:	9a06      	ldr	r2, [sp, #24]
 801b12e:	3b01      	subs	r3, #1
 801b130:	4313      	orrs	r3, r2
 801b132:	4682      	mov	sl, r0
 801b134:	468b      	mov	fp, r1
 801b136:	f040 81e7 	bne.w	801b508 <__ieee754_pow+0x700>
 801b13a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801b1f0 <__ieee754_pow+0x3e8>
 801b13e:	eeb0 8a47 	vmov.f32	s16, s14
 801b142:	eef0 8a67 	vmov.f32	s17, s15
 801b146:	e9dd 6700 	ldrd	r6, r7, [sp]
 801b14a:	2600      	movs	r6, #0
 801b14c:	4632      	mov	r2, r6
 801b14e:	463b      	mov	r3, r7
 801b150:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b154:	f7e5 f898 	bl	8000288 <__aeabi_dsub>
 801b158:	4622      	mov	r2, r4
 801b15a:	462b      	mov	r3, r5
 801b15c:	f7e5 fa4c 	bl	80005f8 <__aeabi_dmul>
 801b160:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b164:	4680      	mov	r8, r0
 801b166:	4689      	mov	r9, r1
 801b168:	4650      	mov	r0, sl
 801b16a:	4659      	mov	r1, fp
 801b16c:	f7e5 fa44 	bl	80005f8 <__aeabi_dmul>
 801b170:	4602      	mov	r2, r0
 801b172:	460b      	mov	r3, r1
 801b174:	4640      	mov	r0, r8
 801b176:	4649      	mov	r1, r9
 801b178:	f7e5 f888 	bl	800028c <__adddf3>
 801b17c:	4632      	mov	r2, r6
 801b17e:	463b      	mov	r3, r7
 801b180:	4680      	mov	r8, r0
 801b182:	4689      	mov	r9, r1
 801b184:	4620      	mov	r0, r4
 801b186:	4629      	mov	r1, r5
 801b188:	f7e5 fa36 	bl	80005f8 <__aeabi_dmul>
 801b18c:	460b      	mov	r3, r1
 801b18e:	4604      	mov	r4, r0
 801b190:	460d      	mov	r5, r1
 801b192:	4602      	mov	r2, r0
 801b194:	4649      	mov	r1, r9
 801b196:	4640      	mov	r0, r8
 801b198:	f7e5 f878 	bl	800028c <__adddf3>
 801b19c:	4b19      	ldr	r3, [pc, #100]	; (801b204 <__ieee754_pow+0x3fc>)
 801b19e:	4299      	cmp	r1, r3
 801b1a0:	ec45 4b19 	vmov	d9, r4, r5
 801b1a4:	4606      	mov	r6, r0
 801b1a6:	460f      	mov	r7, r1
 801b1a8:	468b      	mov	fp, r1
 801b1aa:	f340 82f0 	ble.w	801b78e <__ieee754_pow+0x986>
 801b1ae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801b1b2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801b1b6:	4303      	orrs	r3, r0
 801b1b8:	f000 81e4 	beq.w	801b584 <__ieee754_pow+0x77c>
 801b1bc:	ec51 0b18 	vmov	r0, r1, d8
 801b1c0:	2200      	movs	r2, #0
 801b1c2:	2300      	movs	r3, #0
 801b1c4:	f7e5 fc8a 	bl	8000adc <__aeabi_dcmplt>
 801b1c8:	3800      	subs	r0, #0
 801b1ca:	bf18      	it	ne
 801b1cc:	2001      	movne	r0, #1
 801b1ce:	e72b      	b.n	801b028 <__ieee754_pow+0x220>
 801b1d0:	60000000 	.word	0x60000000
 801b1d4:	3ff71547 	.word	0x3ff71547
 801b1d8:	f85ddf44 	.word	0xf85ddf44
 801b1dc:	3e54ae0b 	.word	0x3e54ae0b
 801b1e0:	55555555 	.word	0x55555555
 801b1e4:	3fd55555 	.word	0x3fd55555
 801b1e8:	652b82fe 	.word	0x652b82fe
 801b1ec:	3ff71547 	.word	0x3ff71547
 801b1f0:	00000000 	.word	0x00000000
 801b1f4:	bff00000 	.word	0xbff00000
 801b1f8:	3ff00000 	.word	0x3ff00000
 801b1fc:	3fd00000 	.word	0x3fd00000
 801b200:	3fe00000 	.word	0x3fe00000
 801b204:	408fffff 	.word	0x408fffff
 801b208:	4bd5      	ldr	r3, [pc, #852]	; (801b560 <__ieee754_pow+0x758>)
 801b20a:	402b      	ands	r3, r5
 801b20c:	2200      	movs	r2, #0
 801b20e:	b92b      	cbnz	r3, 801b21c <__ieee754_pow+0x414>
 801b210:	4bd4      	ldr	r3, [pc, #848]	; (801b564 <__ieee754_pow+0x75c>)
 801b212:	f7e5 f9f1 	bl	80005f8 <__aeabi_dmul>
 801b216:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801b21a:	460c      	mov	r4, r1
 801b21c:	1523      	asrs	r3, r4, #20
 801b21e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b222:	4413      	add	r3, r2
 801b224:	9305      	str	r3, [sp, #20]
 801b226:	4bd0      	ldr	r3, [pc, #832]	; (801b568 <__ieee754_pow+0x760>)
 801b228:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801b22c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801b230:	429c      	cmp	r4, r3
 801b232:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801b236:	dd08      	ble.n	801b24a <__ieee754_pow+0x442>
 801b238:	4bcc      	ldr	r3, [pc, #816]	; (801b56c <__ieee754_pow+0x764>)
 801b23a:	429c      	cmp	r4, r3
 801b23c:	f340 8162 	ble.w	801b504 <__ieee754_pow+0x6fc>
 801b240:	9b05      	ldr	r3, [sp, #20]
 801b242:	3301      	adds	r3, #1
 801b244:	9305      	str	r3, [sp, #20]
 801b246:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801b24a:	2400      	movs	r4, #0
 801b24c:	00e3      	lsls	r3, r4, #3
 801b24e:	9307      	str	r3, [sp, #28]
 801b250:	4bc7      	ldr	r3, [pc, #796]	; (801b570 <__ieee754_pow+0x768>)
 801b252:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b256:	ed93 7b00 	vldr	d7, [r3]
 801b25a:	4629      	mov	r1, r5
 801b25c:	ec53 2b17 	vmov	r2, r3, d7
 801b260:	eeb0 9a47 	vmov.f32	s18, s14
 801b264:	eef0 9a67 	vmov.f32	s19, s15
 801b268:	4682      	mov	sl, r0
 801b26a:	f7e5 f80d 	bl	8000288 <__aeabi_dsub>
 801b26e:	4652      	mov	r2, sl
 801b270:	4606      	mov	r6, r0
 801b272:	460f      	mov	r7, r1
 801b274:	462b      	mov	r3, r5
 801b276:	ec51 0b19 	vmov	r0, r1, d9
 801b27a:	f7e5 f807 	bl	800028c <__adddf3>
 801b27e:	4602      	mov	r2, r0
 801b280:	460b      	mov	r3, r1
 801b282:	2000      	movs	r0, #0
 801b284:	49bb      	ldr	r1, [pc, #748]	; (801b574 <__ieee754_pow+0x76c>)
 801b286:	f7e5 fae1 	bl	800084c <__aeabi_ddiv>
 801b28a:	ec41 0b1a 	vmov	d10, r0, r1
 801b28e:	4602      	mov	r2, r0
 801b290:	460b      	mov	r3, r1
 801b292:	4630      	mov	r0, r6
 801b294:	4639      	mov	r1, r7
 801b296:	f7e5 f9af 	bl	80005f8 <__aeabi_dmul>
 801b29a:	2300      	movs	r3, #0
 801b29c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b2a0:	9302      	str	r3, [sp, #8]
 801b2a2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801b2a6:	46ab      	mov	fp, r5
 801b2a8:	106d      	asrs	r5, r5, #1
 801b2aa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801b2ae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801b2b2:	ec41 0b18 	vmov	d8, r0, r1
 801b2b6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801b2ba:	2200      	movs	r2, #0
 801b2bc:	4640      	mov	r0, r8
 801b2be:	4649      	mov	r1, r9
 801b2c0:	4614      	mov	r4, r2
 801b2c2:	461d      	mov	r5, r3
 801b2c4:	f7e5 f998 	bl	80005f8 <__aeabi_dmul>
 801b2c8:	4602      	mov	r2, r0
 801b2ca:	460b      	mov	r3, r1
 801b2cc:	4630      	mov	r0, r6
 801b2ce:	4639      	mov	r1, r7
 801b2d0:	f7e4 ffda 	bl	8000288 <__aeabi_dsub>
 801b2d4:	ec53 2b19 	vmov	r2, r3, d9
 801b2d8:	4606      	mov	r6, r0
 801b2da:	460f      	mov	r7, r1
 801b2dc:	4620      	mov	r0, r4
 801b2de:	4629      	mov	r1, r5
 801b2e0:	f7e4 ffd2 	bl	8000288 <__aeabi_dsub>
 801b2e4:	4602      	mov	r2, r0
 801b2e6:	460b      	mov	r3, r1
 801b2e8:	4650      	mov	r0, sl
 801b2ea:	4659      	mov	r1, fp
 801b2ec:	f7e4 ffcc 	bl	8000288 <__aeabi_dsub>
 801b2f0:	4642      	mov	r2, r8
 801b2f2:	464b      	mov	r3, r9
 801b2f4:	f7e5 f980 	bl	80005f8 <__aeabi_dmul>
 801b2f8:	4602      	mov	r2, r0
 801b2fa:	460b      	mov	r3, r1
 801b2fc:	4630      	mov	r0, r6
 801b2fe:	4639      	mov	r1, r7
 801b300:	f7e4 ffc2 	bl	8000288 <__aeabi_dsub>
 801b304:	ec53 2b1a 	vmov	r2, r3, d10
 801b308:	f7e5 f976 	bl	80005f8 <__aeabi_dmul>
 801b30c:	ec53 2b18 	vmov	r2, r3, d8
 801b310:	ec41 0b19 	vmov	d9, r0, r1
 801b314:	ec51 0b18 	vmov	r0, r1, d8
 801b318:	f7e5 f96e 	bl	80005f8 <__aeabi_dmul>
 801b31c:	a37c      	add	r3, pc, #496	; (adr r3, 801b510 <__ieee754_pow+0x708>)
 801b31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b322:	4604      	mov	r4, r0
 801b324:	460d      	mov	r5, r1
 801b326:	f7e5 f967 	bl	80005f8 <__aeabi_dmul>
 801b32a:	a37b      	add	r3, pc, #492	; (adr r3, 801b518 <__ieee754_pow+0x710>)
 801b32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b330:	f7e4 ffac 	bl	800028c <__adddf3>
 801b334:	4622      	mov	r2, r4
 801b336:	462b      	mov	r3, r5
 801b338:	f7e5 f95e 	bl	80005f8 <__aeabi_dmul>
 801b33c:	a378      	add	r3, pc, #480	; (adr r3, 801b520 <__ieee754_pow+0x718>)
 801b33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b342:	f7e4 ffa3 	bl	800028c <__adddf3>
 801b346:	4622      	mov	r2, r4
 801b348:	462b      	mov	r3, r5
 801b34a:	f7e5 f955 	bl	80005f8 <__aeabi_dmul>
 801b34e:	a376      	add	r3, pc, #472	; (adr r3, 801b528 <__ieee754_pow+0x720>)
 801b350:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b354:	f7e4 ff9a 	bl	800028c <__adddf3>
 801b358:	4622      	mov	r2, r4
 801b35a:	462b      	mov	r3, r5
 801b35c:	f7e5 f94c 	bl	80005f8 <__aeabi_dmul>
 801b360:	a373      	add	r3, pc, #460	; (adr r3, 801b530 <__ieee754_pow+0x728>)
 801b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b366:	f7e4 ff91 	bl	800028c <__adddf3>
 801b36a:	4622      	mov	r2, r4
 801b36c:	462b      	mov	r3, r5
 801b36e:	f7e5 f943 	bl	80005f8 <__aeabi_dmul>
 801b372:	a371      	add	r3, pc, #452	; (adr r3, 801b538 <__ieee754_pow+0x730>)
 801b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b378:	f7e4 ff88 	bl	800028c <__adddf3>
 801b37c:	4622      	mov	r2, r4
 801b37e:	4606      	mov	r6, r0
 801b380:	460f      	mov	r7, r1
 801b382:	462b      	mov	r3, r5
 801b384:	4620      	mov	r0, r4
 801b386:	4629      	mov	r1, r5
 801b388:	f7e5 f936 	bl	80005f8 <__aeabi_dmul>
 801b38c:	4602      	mov	r2, r0
 801b38e:	460b      	mov	r3, r1
 801b390:	4630      	mov	r0, r6
 801b392:	4639      	mov	r1, r7
 801b394:	f7e5 f930 	bl	80005f8 <__aeabi_dmul>
 801b398:	4642      	mov	r2, r8
 801b39a:	4604      	mov	r4, r0
 801b39c:	460d      	mov	r5, r1
 801b39e:	464b      	mov	r3, r9
 801b3a0:	ec51 0b18 	vmov	r0, r1, d8
 801b3a4:	f7e4 ff72 	bl	800028c <__adddf3>
 801b3a8:	ec53 2b19 	vmov	r2, r3, d9
 801b3ac:	f7e5 f924 	bl	80005f8 <__aeabi_dmul>
 801b3b0:	4622      	mov	r2, r4
 801b3b2:	462b      	mov	r3, r5
 801b3b4:	f7e4 ff6a 	bl	800028c <__adddf3>
 801b3b8:	4642      	mov	r2, r8
 801b3ba:	4682      	mov	sl, r0
 801b3bc:	468b      	mov	fp, r1
 801b3be:	464b      	mov	r3, r9
 801b3c0:	4640      	mov	r0, r8
 801b3c2:	4649      	mov	r1, r9
 801b3c4:	f7e5 f918 	bl	80005f8 <__aeabi_dmul>
 801b3c8:	4b6b      	ldr	r3, [pc, #428]	; (801b578 <__ieee754_pow+0x770>)
 801b3ca:	2200      	movs	r2, #0
 801b3cc:	4606      	mov	r6, r0
 801b3ce:	460f      	mov	r7, r1
 801b3d0:	f7e4 ff5c 	bl	800028c <__adddf3>
 801b3d4:	4652      	mov	r2, sl
 801b3d6:	465b      	mov	r3, fp
 801b3d8:	f7e4 ff58 	bl	800028c <__adddf3>
 801b3dc:	2000      	movs	r0, #0
 801b3de:	4604      	mov	r4, r0
 801b3e0:	460d      	mov	r5, r1
 801b3e2:	4602      	mov	r2, r0
 801b3e4:	460b      	mov	r3, r1
 801b3e6:	4640      	mov	r0, r8
 801b3e8:	4649      	mov	r1, r9
 801b3ea:	f7e5 f905 	bl	80005f8 <__aeabi_dmul>
 801b3ee:	4b62      	ldr	r3, [pc, #392]	; (801b578 <__ieee754_pow+0x770>)
 801b3f0:	4680      	mov	r8, r0
 801b3f2:	4689      	mov	r9, r1
 801b3f4:	2200      	movs	r2, #0
 801b3f6:	4620      	mov	r0, r4
 801b3f8:	4629      	mov	r1, r5
 801b3fa:	f7e4 ff45 	bl	8000288 <__aeabi_dsub>
 801b3fe:	4632      	mov	r2, r6
 801b400:	463b      	mov	r3, r7
 801b402:	f7e4 ff41 	bl	8000288 <__aeabi_dsub>
 801b406:	4602      	mov	r2, r0
 801b408:	460b      	mov	r3, r1
 801b40a:	4650      	mov	r0, sl
 801b40c:	4659      	mov	r1, fp
 801b40e:	f7e4 ff3b 	bl	8000288 <__aeabi_dsub>
 801b412:	ec53 2b18 	vmov	r2, r3, d8
 801b416:	f7e5 f8ef 	bl	80005f8 <__aeabi_dmul>
 801b41a:	4622      	mov	r2, r4
 801b41c:	4606      	mov	r6, r0
 801b41e:	460f      	mov	r7, r1
 801b420:	462b      	mov	r3, r5
 801b422:	ec51 0b19 	vmov	r0, r1, d9
 801b426:	f7e5 f8e7 	bl	80005f8 <__aeabi_dmul>
 801b42a:	4602      	mov	r2, r0
 801b42c:	460b      	mov	r3, r1
 801b42e:	4630      	mov	r0, r6
 801b430:	4639      	mov	r1, r7
 801b432:	f7e4 ff2b 	bl	800028c <__adddf3>
 801b436:	4606      	mov	r6, r0
 801b438:	460f      	mov	r7, r1
 801b43a:	4602      	mov	r2, r0
 801b43c:	460b      	mov	r3, r1
 801b43e:	4640      	mov	r0, r8
 801b440:	4649      	mov	r1, r9
 801b442:	f7e4 ff23 	bl	800028c <__adddf3>
 801b446:	a33e      	add	r3, pc, #248	; (adr r3, 801b540 <__ieee754_pow+0x738>)
 801b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b44c:	2000      	movs	r0, #0
 801b44e:	4604      	mov	r4, r0
 801b450:	460d      	mov	r5, r1
 801b452:	f7e5 f8d1 	bl	80005f8 <__aeabi_dmul>
 801b456:	4642      	mov	r2, r8
 801b458:	ec41 0b18 	vmov	d8, r0, r1
 801b45c:	464b      	mov	r3, r9
 801b45e:	4620      	mov	r0, r4
 801b460:	4629      	mov	r1, r5
 801b462:	f7e4 ff11 	bl	8000288 <__aeabi_dsub>
 801b466:	4602      	mov	r2, r0
 801b468:	460b      	mov	r3, r1
 801b46a:	4630      	mov	r0, r6
 801b46c:	4639      	mov	r1, r7
 801b46e:	f7e4 ff0b 	bl	8000288 <__aeabi_dsub>
 801b472:	a335      	add	r3, pc, #212	; (adr r3, 801b548 <__ieee754_pow+0x740>)
 801b474:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b478:	f7e5 f8be 	bl	80005f8 <__aeabi_dmul>
 801b47c:	a334      	add	r3, pc, #208	; (adr r3, 801b550 <__ieee754_pow+0x748>)
 801b47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b482:	4606      	mov	r6, r0
 801b484:	460f      	mov	r7, r1
 801b486:	4620      	mov	r0, r4
 801b488:	4629      	mov	r1, r5
 801b48a:	f7e5 f8b5 	bl	80005f8 <__aeabi_dmul>
 801b48e:	4602      	mov	r2, r0
 801b490:	460b      	mov	r3, r1
 801b492:	4630      	mov	r0, r6
 801b494:	4639      	mov	r1, r7
 801b496:	f7e4 fef9 	bl	800028c <__adddf3>
 801b49a:	9a07      	ldr	r2, [sp, #28]
 801b49c:	4b37      	ldr	r3, [pc, #220]	; (801b57c <__ieee754_pow+0x774>)
 801b49e:	4413      	add	r3, r2
 801b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4a4:	f7e4 fef2 	bl	800028c <__adddf3>
 801b4a8:	4682      	mov	sl, r0
 801b4aa:	9805      	ldr	r0, [sp, #20]
 801b4ac:	468b      	mov	fp, r1
 801b4ae:	f7e5 f839 	bl	8000524 <__aeabi_i2d>
 801b4b2:	9a07      	ldr	r2, [sp, #28]
 801b4b4:	4b32      	ldr	r3, [pc, #200]	; (801b580 <__ieee754_pow+0x778>)
 801b4b6:	4413      	add	r3, r2
 801b4b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b4bc:	4606      	mov	r6, r0
 801b4be:	460f      	mov	r7, r1
 801b4c0:	4652      	mov	r2, sl
 801b4c2:	465b      	mov	r3, fp
 801b4c4:	ec51 0b18 	vmov	r0, r1, d8
 801b4c8:	f7e4 fee0 	bl	800028c <__adddf3>
 801b4cc:	4642      	mov	r2, r8
 801b4ce:	464b      	mov	r3, r9
 801b4d0:	f7e4 fedc 	bl	800028c <__adddf3>
 801b4d4:	4632      	mov	r2, r6
 801b4d6:	463b      	mov	r3, r7
 801b4d8:	f7e4 fed8 	bl	800028c <__adddf3>
 801b4dc:	2000      	movs	r0, #0
 801b4de:	4632      	mov	r2, r6
 801b4e0:	463b      	mov	r3, r7
 801b4e2:	4604      	mov	r4, r0
 801b4e4:	460d      	mov	r5, r1
 801b4e6:	f7e4 fecf 	bl	8000288 <__aeabi_dsub>
 801b4ea:	4642      	mov	r2, r8
 801b4ec:	464b      	mov	r3, r9
 801b4ee:	f7e4 fecb 	bl	8000288 <__aeabi_dsub>
 801b4f2:	ec53 2b18 	vmov	r2, r3, d8
 801b4f6:	f7e4 fec7 	bl	8000288 <__aeabi_dsub>
 801b4fa:	4602      	mov	r2, r0
 801b4fc:	460b      	mov	r3, r1
 801b4fe:	4650      	mov	r0, sl
 801b500:	4659      	mov	r1, fp
 801b502:	e610      	b.n	801b126 <__ieee754_pow+0x31e>
 801b504:	2401      	movs	r4, #1
 801b506:	e6a1      	b.n	801b24c <__ieee754_pow+0x444>
 801b508:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801b558 <__ieee754_pow+0x750>
 801b50c:	e617      	b.n	801b13e <__ieee754_pow+0x336>
 801b50e:	bf00      	nop
 801b510:	4a454eef 	.word	0x4a454eef
 801b514:	3fca7e28 	.word	0x3fca7e28
 801b518:	93c9db65 	.word	0x93c9db65
 801b51c:	3fcd864a 	.word	0x3fcd864a
 801b520:	a91d4101 	.word	0xa91d4101
 801b524:	3fd17460 	.word	0x3fd17460
 801b528:	518f264d 	.word	0x518f264d
 801b52c:	3fd55555 	.word	0x3fd55555
 801b530:	db6fabff 	.word	0xdb6fabff
 801b534:	3fdb6db6 	.word	0x3fdb6db6
 801b538:	33333303 	.word	0x33333303
 801b53c:	3fe33333 	.word	0x3fe33333
 801b540:	e0000000 	.word	0xe0000000
 801b544:	3feec709 	.word	0x3feec709
 801b548:	dc3a03fd 	.word	0xdc3a03fd
 801b54c:	3feec709 	.word	0x3feec709
 801b550:	145b01f5 	.word	0x145b01f5
 801b554:	be3e2fe0 	.word	0xbe3e2fe0
 801b558:	00000000 	.word	0x00000000
 801b55c:	3ff00000 	.word	0x3ff00000
 801b560:	7ff00000 	.word	0x7ff00000
 801b564:	43400000 	.word	0x43400000
 801b568:	0003988e 	.word	0x0003988e
 801b56c:	000bb679 	.word	0x000bb679
 801b570:	0801f0b0 	.word	0x0801f0b0
 801b574:	3ff00000 	.word	0x3ff00000
 801b578:	40080000 	.word	0x40080000
 801b57c:	0801f0d0 	.word	0x0801f0d0
 801b580:	0801f0c0 	.word	0x0801f0c0
 801b584:	a3b3      	add	r3, pc, #716	; (adr r3, 801b854 <__ieee754_pow+0xa4c>)
 801b586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b58a:	4640      	mov	r0, r8
 801b58c:	4649      	mov	r1, r9
 801b58e:	f7e4 fe7d 	bl	800028c <__adddf3>
 801b592:	4622      	mov	r2, r4
 801b594:	ec41 0b1a 	vmov	d10, r0, r1
 801b598:	462b      	mov	r3, r5
 801b59a:	4630      	mov	r0, r6
 801b59c:	4639      	mov	r1, r7
 801b59e:	f7e4 fe73 	bl	8000288 <__aeabi_dsub>
 801b5a2:	4602      	mov	r2, r0
 801b5a4:	460b      	mov	r3, r1
 801b5a6:	ec51 0b1a 	vmov	r0, r1, d10
 801b5aa:	f7e5 fab5 	bl	8000b18 <__aeabi_dcmpgt>
 801b5ae:	2800      	cmp	r0, #0
 801b5b0:	f47f ae04 	bne.w	801b1bc <__ieee754_pow+0x3b4>
 801b5b4:	4aa2      	ldr	r2, [pc, #648]	; (801b840 <__ieee754_pow+0xa38>)
 801b5b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b5ba:	4293      	cmp	r3, r2
 801b5bc:	f340 8107 	ble.w	801b7ce <__ieee754_pow+0x9c6>
 801b5c0:	151b      	asrs	r3, r3, #20
 801b5c2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801b5c6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801b5ca:	fa4a fa03 	asr.w	sl, sl, r3
 801b5ce:	44da      	add	sl, fp
 801b5d0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801b5d4:	489b      	ldr	r0, [pc, #620]	; (801b844 <__ieee754_pow+0xa3c>)
 801b5d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801b5da:	4108      	asrs	r0, r1
 801b5dc:	ea00 030a 	and.w	r3, r0, sl
 801b5e0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801b5e4:	f1c1 0114 	rsb	r1, r1, #20
 801b5e8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801b5ec:	fa4a fa01 	asr.w	sl, sl, r1
 801b5f0:	f1bb 0f00 	cmp.w	fp, #0
 801b5f4:	f04f 0200 	mov.w	r2, #0
 801b5f8:	4620      	mov	r0, r4
 801b5fa:	4629      	mov	r1, r5
 801b5fc:	bfb8      	it	lt
 801b5fe:	f1ca 0a00 	rsblt	sl, sl, #0
 801b602:	f7e4 fe41 	bl	8000288 <__aeabi_dsub>
 801b606:	ec41 0b19 	vmov	d9, r0, r1
 801b60a:	4642      	mov	r2, r8
 801b60c:	464b      	mov	r3, r9
 801b60e:	ec51 0b19 	vmov	r0, r1, d9
 801b612:	f7e4 fe3b 	bl	800028c <__adddf3>
 801b616:	a37a      	add	r3, pc, #488	; (adr r3, 801b800 <__ieee754_pow+0x9f8>)
 801b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b61c:	2000      	movs	r0, #0
 801b61e:	4604      	mov	r4, r0
 801b620:	460d      	mov	r5, r1
 801b622:	f7e4 ffe9 	bl	80005f8 <__aeabi_dmul>
 801b626:	ec53 2b19 	vmov	r2, r3, d9
 801b62a:	4606      	mov	r6, r0
 801b62c:	460f      	mov	r7, r1
 801b62e:	4620      	mov	r0, r4
 801b630:	4629      	mov	r1, r5
 801b632:	f7e4 fe29 	bl	8000288 <__aeabi_dsub>
 801b636:	4602      	mov	r2, r0
 801b638:	460b      	mov	r3, r1
 801b63a:	4640      	mov	r0, r8
 801b63c:	4649      	mov	r1, r9
 801b63e:	f7e4 fe23 	bl	8000288 <__aeabi_dsub>
 801b642:	a371      	add	r3, pc, #452	; (adr r3, 801b808 <__ieee754_pow+0xa00>)
 801b644:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b648:	f7e4 ffd6 	bl	80005f8 <__aeabi_dmul>
 801b64c:	a370      	add	r3, pc, #448	; (adr r3, 801b810 <__ieee754_pow+0xa08>)
 801b64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b652:	4680      	mov	r8, r0
 801b654:	4689      	mov	r9, r1
 801b656:	4620      	mov	r0, r4
 801b658:	4629      	mov	r1, r5
 801b65a:	f7e4 ffcd 	bl	80005f8 <__aeabi_dmul>
 801b65e:	4602      	mov	r2, r0
 801b660:	460b      	mov	r3, r1
 801b662:	4640      	mov	r0, r8
 801b664:	4649      	mov	r1, r9
 801b666:	f7e4 fe11 	bl	800028c <__adddf3>
 801b66a:	4604      	mov	r4, r0
 801b66c:	460d      	mov	r5, r1
 801b66e:	4602      	mov	r2, r0
 801b670:	460b      	mov	r3, r1
 801b672:	4630      	mov	r0, r6
 801b674:	4639      	mov	r1, r7
 801b676:	f7e4 fe09 	bl	800028c <__adddf3>
 801b67a:	4632      	mov	r2, r6
 801b67c:	463b      	mov	r3, r7
 801b67e:	4680      	mov	r8, r0
 801b680:	4689      	mov	r9, r1
 801b682:	f7e4 fe01 	bl	8000288 <__aeabi_dsub>
 801b686:	4602      	mov	r2, r0
 801b688:	460b      	mov	r3, r1
 801b68a:	4620      	mov	r0, r4
 801b68c:	4629      	mov	r1, r5
 801b68e:	f7e4 fdfb 	bl	8000288 <__aeabi_dsub>
 801b692:	4642      	mov	r2, r8
 801b694:	4606      	mov	r6, r0
 801b696:	460f      	mov	r7, r1
 801b698:	464b      	mov	r3, r9
 801b69a:	4640      	mov	r0, r8
 801b69c:	4649      	mov	r1, r9
 801b69e:	f7e4 ffab 	bl	80005f8 <__aeabi_dmul>
 801b6a2:	a35d      	add	r3, pc, #372	; (adr r3, 801b818 <__ieee754_pow+0xa10>)
 801b6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6a8:	4604      	mov	r4, r0
 801b6aa:	460d      	mov	r5, r1
 801b6ac:	f7e4 ffa4 	bl	80005f8 <__aeabi_dmul>
 801b6b0:	a35b      	add	r3, pc, #364	; (adr r3, 801b820 <__ieee754_pow+0xa18>)
 801b6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6b6:	f7e4 fde7 	bl	8000288 <__aeabi_dsub>
 801b6ba:	4622      	mov	r2, r4
 801b6bc:	462b      	mov	r3, r5
 801b6be:	f7e4 ff9b 	bl	80005f8 <__aeabi_dmul>
 801b6c2:	a359      	add	r3, pc, #356	; (adr r3, 801b828 <__ieee754_pow+0xa20>)
 801b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6c8:	f7e4 fde0 	bl	800028c <__adddf3>
 801b6cc:	4622      	mov	r2, r4
 801b6ce:	462b      	mov	r3, r5
 801b6d0:	f7e4 ff92 	bl	80005f8 <__aeabi_dmul>
 801b6d4:	a356      	add	r3, pc, #344	; (adr r3, 801b830 <__ieee754_pow+0xa28>)
 801b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6da:	f7e4 fdd5 	bl	8000288 <__aeabi_dsub>
 801b6de:	4622      	mov	r2, r4
 801b6e0:	462b      	mov	r3, r5
 801b6e2:	f7e4 ff89 	bl	80005f8 <__aeabi_dmul>
 801b6e6:	a354      	add	r3, pc, #336	; (adr r3, 801b838 <__ieee754_pow+0xa30>)
 801b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6ec:	f7e4 fdce 	bl	800028c <__adddf3>
 801b6f0:	4622      	mov	r2, r4
 801b6f2:	462b      	mov	r3, r5
 801b6f4:	f7e4 ff80 	bl	80005f8 <__aeabi_dmul>
 801b6f8:	4602      	mov	r2, r0
 801b6fa:	460b      	mov	r3, r1
 801b6fc:	4640      	mov	r0, r8
 801b6fe:	4649      	mov	r1, r9
 801b700:	f7e4 fdc2 	bl	8000288 <__aeabi_dsub>
 801b704:	4604      	mov	r4, r0
 801b706:	460d      	mov	r5, r1
 801b708:	4602      	mov	r2, r0
 801b70a:	460b      	mov	r3, r1
 801b70c:	4640      	mov	r0, r8
 801b70e:	4649      	mov	r1, r9
 801b710:	f7e4 ff72 	bl	80005f8 <__aeabi_dmul>
 801b714:	2200      	movs	r2, #0
 801b716:	ec41 0b19 	vmov	d9, r0, r1
 801b71a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b71e:	4620      	mov	r0, r4
 801b720:	4629      	mov	r1, r5
 801b722:	f7e4 fdb1 	bl	8000288 <__aeabi_dsub>
 801b726:	4602      	mov	r2, r0
 801b728:	460b      	mov	r3, r1
 801b72a:	ec51 0b19 	vmov	r0, r1, d9
 801b72e:	f7e5 f88d 	bl	800084c <__aeabi_ddiv>
 801b732:	4632      	mov	r2, r6
 801b734:	4604      	mov	r4, r0
 801b736:	460d      	mov	r5, r1
 801b738:	463b      	mov	r3, r7
 801b73a:	4640      	mov	r0, r8
 801b73c:	4649      	mov	r1, r9
 801b73e:	f7e4 ff5b 	bl	80005f8 <__aeabi_dmul>
 801b742:	4632      	mov	r2, r6
 801b744:	463b      	mov	r3, r7
 801b746:	f7e4 fda1 	bl	800028c <__adddf3>
 801b74a:	4602      	mov	r2, r0
 801b74c:	460b      	mov	r3, r1
 801b74e:	4620      	mov	r0, r4
 801b750:	4629      	mov	r1, r5
 801b752:	f7e4 fd99 	bl	8000288 <__aeabi_dsub>
 801b756:	4642      	mov	r2, r8
 801b758:	464b      	mov	r3, r9
 801b75a:	f7e4 fd95 	bl	8000288 <__aeabi_dsub>
 801b75e:	460b      	mov	r3, r1
 801b760:	4602      	mov	r2, r0
 801b762:	4939      	ldr	r1, [pc, #228]	; (801b848 <__ieee754_pow+0xa40>)
 801b764:	2000      	movs	r0, #0
 801b766:	f7e4 fd8f 	bl	8000288 <__aeabi_dsub>
 801b76a:	ec41 0b10 	vmov	d0, r0, r1
 801b76e:	ee10 3a90 	vmov	r3, s1
 801b772:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801b776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b77a:	da2b      	bge.n	801b7d4 <__ieee754_pow+0x9cc>
 801b77c:	4650      	mov	r0, sl
 801b77e:	f000 fb83 	bl	801be88 <scalbn>
 801b782:	ec51 0b10 	vmov	r0, r1, d0
 801b786:	ec53 2b18 	vmov	r2, r3, d8
 801b78a:	f7ff bbee 	b.w	801af6a <__ieee754_pow+0x162>
 801b78e:	4b2f      	ldr	r3, [pc, #188]	; (801b84c <__ieee754_pow+0xa44>)
 801b790:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801b794:	429e      	cmp	r6, r3
 801b796:	f77f af0d 	ble.w	801b5b4 <__ieee754_pow+0x7ac>
 801b79a:	4b2d      	ldr	r3, [pc, #180]	; (801b850 <__ieee754_pow+0xa48>)
 801b79c:	440b      	add	r3, r1
 801b79e:	4303      	orrs	r3, r0
 801b7a0:	d009      	beq.n	801b7b6 <__ieee754_pow+0x9ae>
 801b7a2:	ec51 0b18 	vmov	r0, r1, d8
 801b7a6:	2200      	movs	r2, #0
 801b7a8:	2300      	movs	r3, #0
 801b7aa:	f7e5 f997 	bl	8000adc <__aeabi_dcmplt>
 801b7ae:	3800      	subs	r0, #0
 801b7b0:	bf18      	it	ne
 801b7b2:	2001      	movne	r0, #1
 801b7b4:	e448      	b.n	801b048 <__ieee754_pow+0x240>
 801b7b6:	4622      	mov	r2, r4
 801b7b8:	462b      	mov	r3, r5
 801b7ba:	f7e4 fd65 	bl	8000288 <__aeabi_dsub>
 801b7be:	4642      	mov	r2, r8
 801b7c0:	464b      	mov	r3, r9
 801b7c2:	f7e5 f99f 	bl	8000b04 <__aeabi_dcmpge>
 801b7c6:	2800      	cmp	r0, #0
 801b7c8:	f43f aef4 	beq.w	801b5b4 <__ieee754_pow+0x7ac>
 801b7cc:	e7e9      	b.n	801b7a2 <__ieee754_pow+0x99a>
 801b7ce:	f04f 0a00 	mov.w	sl, #0
 801b7d2:	e71a      	b.n	801b60a <__ieee754_pow+0x802>
 801b7d4:	ec51 0b10 	vmov	r0, r1, d0
 801b7d8:	4619      	mov	r1, r3
 801b7da:	e7d4      	b.n	801b786 <__ieee754_pow+0x97e>
 801b7dc:	491a      	ldr	r1, [pc, #104]	; (801b848 <__ieee754_pow+0xa40>)
 801b7de:	2000      	movs	r0, #0
 801b7e0:	f7ff bb31 	b.w	801ae46 <__ieee754_pow+0x3e>
 801b7e4:	2000      	movs	r0, #0
 801b7e6:	2100      	movs	r1, #0
 801b7e8:	f7ff bb2d 	b.w	801ae46 <__ieee754_pow+0x3e>
 801b7ec:	4630      	mov	r0, r6
 801b7ee:	4639      	mov	r1, r7
 801b7f0:	f7ff bb29 	b.w	801ae46 <__ieee754_pow+0x3e>
 801b7f4:	9204      	str	r2, [sp, #16]
 801b7f6:	f7ff bb7b 	b.w	801aef0 <__ieee754_pow+0xe8>
 801b7fa:	2300      	movs	r3, #0
 801b7fc:	f7ff bb65 	b.w	801aeca <__ieee754_pow+0xc2>
 801b800:	00000000 	.word	0x00000000
 801b804:	3fe62e43 	.word	0x3fe62e43
 801b808:	fefa39ef 	.word	0xfefa39ef
 801b80c:	3fe62e42 	.word	0x3fe62e42
 801b810:	0ca86c39 	.word	0x0ca86c39
 801b814:	be205c61 	.word	0xbe205c61
 801b818:	72bea4d0 	.word	0x72bea4d0
 801b81c:	3e663769 	.word	0x3e663769
 801b820:	c5d26bf1 	.word	0xc5d26bf1
 801b824:	3ebbbd41 	.word	0x3ebbbd41
 801b828:	af25de2c 	.word	0xaf25de2c
 801b82c:	3f11566a 	.word	0x3f11566a
 801b830:	16bebd93 	.word	0x16bebd93
 801b834:	3f66c16c 	.word	0x3f66c16c
 801b838:	5555553e 	.word	0x5555553e
 801b83c:	3fc55555 	.word	0x3fc55555
 801b840:	3fe00000 	.word	0x3fe00000
 801b844:	fff00000 	.word	0xfff00000
 801b848:	3ff00000 	.word	0x3ff00000
 801b84c:	4090cbff 	.word	0x4090cbff
 801b850:	3f6f3400 	.word	0x3f6f3400
 801b854:	652b82fe 	.word	0x652b82fe
 801b858:	3c971547 	.word	0x3c971547
 801b85c:	00000000 	.word	0x00000000

0801b860 <__ieee754_rem_pio2>:
 801b860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b864:	ed2d 8b02 	vpush	{d8}
 801b868:	ec55 4b10 	vmov	r4, r5, d0
 801b86c:	4bca      	ldr	r3, [pc, #808]	; (801bb98 <__ieee754_rem_pio2+0x338>)
 801b86e:	b08b      	sub	sp, #44	; 0x2c
 801b870:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801b874:	4598      	cmp	r8, r3
 801b876:	4682      	mov	sl, r0
 801b878:	9502      	str	r5, [sp, #8]
 801b87a:	dc08      	bgt.n	801b88e <__ieee754_rem_pio2+0x2e>
 801b87c:	2200      	movs	r2, #0
 801b87e:	2300      	movs	r3, #0
 801b880:	ed80 0b00 	vstr	d0, [r0]
 801b884:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801b888:	f04f 0b00 	mov.w	fp, #0
 801b88c:	e028      	b.n	801b8e0 <__ieee754_rem_pio2+0x80>
 801b88e:	4bc3      	ldr	r3, [pc, #780]	; (801bb9c <__ieee754_rem_pio2+0x33c>)
 801b890:	4598      	cmp	r8, r3
 801b892:	dc78      	bgt.n	801b986 <__ieee754_rem_pio2+0x126>
 801b894:	9b02      	ldr	r3, [sp, #8]
 801b896:	4ec2      	ldr	r6, [pc, #776]	; (801bba0 <__ieee754_rem_pio2+0x340>)
 801b898:	2b00      	cmp	r3, #0
 801b89a:	ee10 0a10 	vmov	r0, s0
 801b89e:	a3b0      	add	r3, pc, #704	; (adr r3, 801bb60 <__ieee754_rem_pio2+0x300>)
 801b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8a4:	4629      	mov	r1, r5
 801b8a6:	dd39      	ble.n	801b91c <__ieee754_rem_pio2+0xbc>
 801b8a8:	f7e4 fcee 	bl	8000288 <__aeabi_dsub>
 801b8ac:	45b0      	cmp	r8, r6
 801b8ae:	4604      	mov	r4, r0
 801b8b0:	460d      	mov	r5, r1
 801b8b2:	d01b      	beq.n	801b8ec <__ieee754_rem_pio2+0x8c>
 801b8b4:	a3ac      	add	r3, pc, #688	; (adr r3, 801bb68 <__ieee754_rem_pio2+0x308>)
 801b8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8ba:	f7e4 fce5 	bl	8000288 <__aeabi_dsub>
 801b8be:	4602      	mov	r2, r0
 801b8c0:	460b      	mov	r3, r1
 801b8c2:	e9ca 2300 	strd	r2, r3, [sl]
 801b8c6:	4620      	mov	r0, r4
 801b8c8:	4629      	mov	r1, r5
 801b8ca:	f7e4 fcdd 	bl	8000288 <__aeabi_dsub>
 801b8ce:	a3a6      	add	r3, pc, #664	; (adr r3, 801bb68 <__ieee754_rem_pio2+0x308>)
 801b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8d4:	f7e4 fcd8 	bl	8000288 <__aeabi_dsub>
 801b8d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b8dc:	f04f 0b01 	mov.w	fp, #1
 801b8e0:	4658      	mov	r0, fp
 801b8e2:	b00b      	add	sp, #44	; 0x2c
 801b8e4:	ecbd 8b02 	vpop	{d8}
 801b8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8ec:	a3a0      	add	r3, pc, #640	; (adr r3, 801bb70 <__ieee754_rem_pio2+0x310>)
 801b8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8f2:	f7e4 fcc9 	bl	8000288 <__aeabi_dsub>
 801b8f6:	a3a0      	add	r3, pc, #640	; (adr r3, 801bb78 <__ieee754_rem_pio2+0x318>)
 801b8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8fc:	4604      	mov	r4, r0
 801b8fe:	460d      	mov	r5, r1
 801b900:	f7e4 fcc2 	bl	8000288 <__aeabi_dsub>
 801b904:	4602      	mov	r2, r0
 801b906:	460b      	mov	r3, r1
 801b908:	e9ca 2300 	strd	r2, r3, [sl]
 801b90c:	4620      	mov	r0, r4
 801b90e:	4629      	mov	r1, r5
 801b910:	f7e4 fcba 	bl	8000288 <__aeabi_dsub>
 801b914:	a398      	add	r3, pc, #608	; (adr r3, 801bb78 <__ieee754_rem_pio2+0x318>)
 801b916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b91a:	e7db      	b.n	801b8d4 <__ieee754_rem_pio2+0x74>
 801b91c:	f7e4 fcb6 	bl	800028c <__adddf3>
 801b920:	45b0      	cmp	r8, r6
 801b922:	4604      	mov	r4, r0
 801b924:	460d      	mov	r5, r1
 801b926:	d016      	beq.n	801b956 <__ieee754_rem_pio2+0xf6>
 801b928:	a38f      	add	r3, pc, #572	; (adr r3, 801bb68 <__ieee754_rem_pio2+0x308>)
 801b92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b92e:	f7e4 fcad 	bl	800028c <__adddf3>
 801b932:	4602      	mov	r2, r0
 801b934:	460b      	mov	r3, r1
 801b936:	e9ca 2300 	strd	r2, r3, [sl]
 801b93a:	4620      	mov	r0, r4
 801b93c:	4629      	mov	r1, r5
 801b93e:	f7e4 fca3 	bl	8000288 <__aeabi_dsub>
 801b942:	a389      	add	r3, pc, #548	; (adr r3, 801bb68 <__ieee754_rem_pio2+0x308>)
 801b944:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b948:	f7e4 fca0 	bl	800028c <__adddf3>
 801b94c:	f04f 3bff 	mov.w	fp, #4294967295
 801b950:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b954:	e7c4      	b.n	801b8e0 <__ieee754_rem_pio2+0x80>
 801b956:	a386      	add	r3, pc, #536	; (adr r3, 801bb70 <__ieee754_rem_pio2+0x310>)
 801b958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b95c:	f7e4 fc96 	bl	800028c <__adddf3>
 801b960:	a385      	add	r3, pc, #532	; (adr r3, 801bb78 <__ieee754_rem_pio2+0x318>)
 801b962:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b966:	4604      	mov	r4, r0
 801b968:	460d      	mov	r5, r1
 801b96a:	f7e4 fc8f 	bl	800028c <__adddf3>
 801b96e:	4602      	mov	r2, r0
 801b970:	460b      	mov	r3, r1
 801b972:	e9ca 2300 	strd	r2, r3, [sl]
 801b976:	4620      	mov	r0, r4
 801b978:	4629      	mov	r1, r5
 801b97a:	f7e4 fc85 	bl	8000288 <__aeabi_dsub>
 801b97e:	a37e      	add	r3, pc, #504	; (adr r3, 801bb78 <__ieee754_rem_pio2+0x318>)
 801b980:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b984:	e7e0      	b.n	801b948 <__ieee754_rem_pio2+0xe8>
 801b986:	4b87      	ldr	r3, [pc, #540]	; (801bba4 <__ieee754_rem_pio2+0x344>)
 801b988:	4598      	cmp	r8, r3
 801b98a:	f300 80d8 	bgt.w	801bb3e <__ieee754_rem_pio2+0x2de>
 801b98e:	f000 f9a1 	bl	801bcd4 <fabs>
 801b992:	ec55 4b10 	vmov	r4, r5, d0
 801b996:	ee10 0a10 	vmov	r0, s0
 801b99a:	a379      	add	r3, pc, #484	; (adr r3, 801bb80 <__ieee754_rem_pio2+0x320>)
 801b99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9a0:	4629      	mov	r1, r5
 801b9a2:	f7e4 fe29 	bl	80005f8 <__aeabi_dmul>
 801b9a6:	4b80      	ldr	r3, [pc, #512]	; (801bba8 <__ieee754_rem_pio2+0x348>)
 801b9a8:	2200      	movs	r2, #0
 801b9aa:	f7e4 fc6f 	bl	800028c <__adddf3>
 801b9ae:	f7e5 f8d3 	bl	8000b58 <__aeabi_d2iz>
 801b9b2:	4683      	mov	fp, r0
 801b9b4:	f7e4 fdb6 	bl	8000524 <__aeabi_i2d>
 801b9b8:	4602      	mov	r2, r0
 801b9ba:	460b      	mov	r3, r1
 801b9bc:	ec43 2b18 	vmov	d8, r2, r3
 801b9c0:	a367      	add	r3, pc, #412	; (adr r3, 801bb60 <__ieee754_rem_pio2+0x300>)
 801b9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9c6:	f7e4 fe17 	bl	80005f8 <__aeabi_dmul>
 801b9ca:	4602      	mov	r2, r0
 801b9cc:	460b      	mov	r3, r1
 801b9ce:	4620      	mov	r0, r4
 801b9d0:	4629      	mov	r1, r5
 801b9d2:	f7e4 fc59 	bl	8000288 <__aeabi_dsub>
 801b9d6:	a364      	add	r3, pc, #400	; (adr r3, 801bb68 <__ieee754_rem_pio2+0x308>)
 801b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9dc:	4606      	mov	r6, r0
 801b9de:	460f      	mov	r7, r1
 801b9e0:	ec51 0b18 	vmov	r0, r1, d8
 801b9e4:	f7e4 fe08 	bl	80005f8 <__aeabi_dmul>
 801b9e8:	f1bb 0f1f 	cmp.w	fp, #31
 801b9ec:	4604      	mov	r4, r0
 801b9ee:	460d      	mov	r5, r1
 801b9f0:	dc0d      	bgt.n	801ba0e <__ieee754_rem_pio2+0x1ae>
 801b9f2:	4b6e      	ldr	r3, [pc, #440]	; (801bbac <__ieee754_rem_pio2+0x34c>)
 801b9f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 801b9f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b9fc:	4543      	cmp	r3, r8
 801b9fe:	d006      	beq.n	801ba0e <__ieee754_rem_pio2+0x1ae>
 801ba00:	4622      	mov	r2, r4
 801ba02:	462b      	mov	r3, r5
 801ba04:	4630      	mov	r0, r6
 801ba06:	4639      	mov	r1, r7
 801ba08:	f7e4 fc3e 	bl	8000288 <__aeabi_dsub>
 801ba0c:	e00e      	b.n	801ba2c <__ieee754_rem_pio2+0x1cc>
 801ba0e:	462b      	mov	r3, r5
 801ba10:	4622      	mov	r2, r4
 801ba12:	4630      	mov	r0, r6
 801ba14:	4639      	mov	r1, r7
 801ba16:	f7e4 fc37 	bl	8000288 <__aeabi_dsub>
 801ba1a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801ba1e:	9303      	str	r3, [sp, #12]
 801ba20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ba24:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801ba28:	2b10      	cmp	r3, #16
 801ba2a:	dc02      	bgt.n	801ba32 <__ieee754_rem_pio2+0x1d2>
 801ba2c:	e9ca 0100 	strd	r0, r1, [sl]
 801ba30:	e039      	b.n	801baa6 <__ieee754_rem_pio2+0x246>
 801ba32:	a34f      	add	r3, pc, #316	; (adr r3, 801bb70 <__ieee754_rem_pio2+0x310>)
 801ba34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba38:	ec51 0b18 	vmov	r0, r1, d8
 801ba3c:	f7e4 fddc 	bl	80005f8 <__aeabi_dmul>
 801ba40:	4604      	mov	r4, r0
 801ba42:	460d      	mov	r5, r1
 801ba44:	4602      	mov	r2, r0
 801ba46:	460b      	mov	r3, r1
 801ba48:	4630      	mov	r0, r6
 801ba4a:	4639      	mov	r1, r7
 801ba4c:	f7e4 fc1c 	bl	8000288 <__aeabi_dsub>
 801ba50:	4602      	mov	r2, r0
 801ba52:	460b      	mov	r3, r1
 801ba54:	4680      	mov	r8, r0
 801ba56:	4689      	mov	r9, r1
 801ba58:	4630      	mov	r0, r6
 801ba5a:	4639      	mov	r1, r7
 801ba5c:	f7e4 fc14 	bl	8000288 <__aeabi_dsub>
 801ba60:	4622      	mov	r2, r4
 801ba62:	462b      	mov	r3, r5
 801ba64:	f7e4 fc10 	bl	8000288 <__aeabi_dsub>
 801ba68:	a343      	add	r3, pc, #268	; (adr r3, 801bb78 <__ieee754_rem_pio2+0x318>)
 801ba6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba6e:	4604      	mov	r4, r0
 801ba70:	460d      	mov	r5, r1
 801ba72:	ec51 0b18 	vmov	r0, r1, d8
 801ba76:	f7e4 fdbf 	bl	80005f8 <__aeabi_dmul>
 801ba7a:	4622      	mov	r2, r4
 801ba7c:	462b      	mov	r3, r5
 801ba7e:	f7e4 fc03 	bl	8000288 <__aeabi_dsub>
 801ba82:	4602      	mov	r2, r0
 801ba84:	460b      	mov	r3, r1
 801ba86:	4604      	mov	r4, r0
 801ba88:	460d      	mov	r5, r1
 801ba8a:	4640      	mov	r0, r8
 801ba8c:	4649      	mov	r1, r9
 801ba8e:	f7e4 fbfb 	bl	8000288 <__aeabi_dsub>
 801ba92:	9a03      	ldr	r2, [sp, #12]
 801ba94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ba98:	1ad3      	subs	r3, r2, r3
 801ba9a:	2b31      	cmp	r3, #49	; 0x31
 801ba9c:	dc24      	bgt.n	801bae8 <__ieee754_rem_pio2+0x288>
 801ba9e:	e9ca 0100 	strd	r0, r1, [sl]
 801baa2:	4646      	mov	r6, r8
 801baa4:	464f      	mov	r7, r9
 801baa6:	e9da 8900 	ldrd	r8, r9, [sl]
 801baaa:	4630      	mov	r0, r6
 801baac:	4642      	mov	r2, r8
 801baae:	464b      	mov	r3, r9
 801bab0:	4639      	mov	r1, r7
 801bab2:	f7e4 fbe9 	bl	8000288 <__aeabi_dsub>
 801bab6:	462b      	mov	r3, r5
 801bab8:	4622      	mov	r2, r4
 801baba:	f7e4 fbe5 	bl	8000288 <__aeabi_dsub>
 801babe:	9b02      	ldr	r3, [sp, #8]
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801bac6:	f6bf af0b 	bge.w	801b8e0 <__ieee754_rem_pio2+0x80>
 801baca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801bace:	f8ca 3004 	str.w	r3, [sl, #4]
 801bad2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bad6:	f8ca 8000 	str.w	r8, [sl]
 801bada:	f8ca 0008 	str.w	r0, [sl, #8]
 801bade:	f8ca 300c 	str.w	r3, [sl, #12]
 801bae2:	f1cb 0b00 	rsb	fp, fp, #0
 801bae6:	e6fb      	b.n	801b8e0 <__ieee754_rem_pio2+0x80>
 801bae8:	a327      	add	r3, pc, #156	; (adr r3, 801bb88 <__ieee754_rem_pio2+0x328>)
 801baea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baee:	ec51 0b18 	vmov	r0, r1, d8
 801baf2:	f7e4 fd81 	bl	80005f8 <__aeabi_dmul>
 801baf6:	4604      	mov	r4, r0
 801baf8:	460d      	mov	r5, r1
 801bafa:	4602      	mov	r2, r0
 801bafc:	460b      	mov	r3, r1
 801bafe:	4640      	mov	r0, r8
 801bb00:	4649      	mov	r1, r9
 801bb02:	f7e4 fbc1 	bl	8000288 <__aeabi_dsub>
 801bb06:	4602      	mov	r2, r0
 801bb08:	460b      	mov	r3, r1
 801bb0a:	4606      	mov	r6, r0
 801bb0c:	460f      	mov	r7, r1
 801bb0e:	4640      	mov	r0, r8
 801bb10:	4649      	mov	r1, r9
 801bb12:	f7e4 fbb9 	bl	8000288 <__aeabi_dsub>
 801bb16:	4622      	mov	r2, r4
 801bb18:	462b      	mov	r3, r5
 801bb1a:	f7e4 fbb5 	bl	8000288 <__aeabi_dsub>
 801bb1e:	a31c      	add	r3, pc, #112	; (adr r3, 801bb90 <__ieee754_rem_pio2+0x330>)
 801bb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb24:	4604      	mov	r4, r0
 801bb26:	460d      	mov	r5, r1
 801bb28:	ec51 0b18 	vmov	r0, r1, d8
 801bb2c:	f7e4 fd64 	bl	80005f8 <__aeabi_dmul>
 801bb30:	4622      	mov	r2, r4
 801bb32:	462b      	mov	r3, r5
 801bb34:	f7e4 fba8 	bl	8000288 <__aeabi_dsub>
 801bb38:	4604      	mov	r4, r0
 801bb3a:	460d      	mov	r5, r1
 801bb3c:	e760      	b.n	801ba00 <__ieee754_rem_pio2+0x1a0>
 801bb3e:	4b1c      	ldr	r3, [pc, #112]	; (801bbb0 <__ieee754_rem_pio2+0x350>)
 801bb40:	4598      	cmp	r8, r3
 801bb42:	dd37      	ble.n	801bbb4 <__ieee754_rem_pio2+0x354>
 801bb44:	ee10 2a10 	vmov	r2, s0
 801bb48:	462b      	mov	r3, r5
 801bb4a:	4620      	mov	r0, r4
 801bb4c:	4629      	mov	r1, r5
 801bb4e:	f7e4 fb9b 	bl	8000288 <__aeabi_dsub>
 801bb52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801bb56:	e9ca 0100 	strd	r0, r1, [sl]
 801bb5a:	e695      	b.n	801b888 <__ieee754_rem_pio2+0x28>
 801bb5c:	f3af 8000 	nop.w
 801bb60:	54400000 	.word	0x54400000
 801bb64:	3ff921fb 	.word	0x3ff921fb
 801bb68:	1a626331 	.word	0x1a626331
 801bb6c:	3dd0b461 	.word	0x3dd0b461
 801bb70:	1a600000 	.word	0x1a600000
 801bb74:	3dd0b461 	.word	0x3dd0b461
 801bb78:	2e037073 	.word	0x2e037073
 801bb7c:	3ba3198a 	.word	0x3ba3198a
 801bb80:	6dc9c883 	.word	0x6dc9c883
 801bb84:	3fe45f30 	.word	0x3fe45f30
 801bb88:	2e000000 	.word	0x2e000000
 801bb8c:	3ba3198a 	.word	0x3ba3198a
 801bb90:	252049c1 	.word	0x252049c1
 801bb94:	397b839a 	.word	0x397b839a
 801bb98:	3fe921fb 	.word	0x3fe921fb
 801bb9c:	4002d97b 	.word	0x4002d97b
 801bba0:	3ff921fb 	.word	0x3ff921fb
 801bba4:	413921fb 	.word	0x413921fb
 801bba8:	3fe00000 	.word	0x3fe00000
 801bbac:	0801f0e0 	.word	0x0801f0e0
 801bbb0:	7fefffff 	.word	0x7fefffff
 801bbb4:	ea4f 5628 	mov.w	r6, r8, asr #20
 801bbb8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801bbbc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 801bbc0:	4620      	mov	r0, r4
 801bbc2:	460d      	mov	r5, r1
 801bbc4:	f7e4 ffc8 	bl	8000b58 <__aeabi_d2iz>
 801bbc8:	f7e4 fcac 	bl	8000524 <__aeabi_i2d>
 801bbcc:	4602      	mov	r2, r0
 801bbce:	460b      	mov	r3, r1
 801bbd0:	4620      	mov	r0, r4
 801bbd2:	4629      	mov	r1, r5
 801bbd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801bbd8:	f7e4 fb56 	bl	8000288 <__aeabi_dsub>
 801bbdc:	4b21      	ldr	r3, [pc, #132]	; (801bc64 <__ieee754_rem_pio2+0x404>)
 801bbde:	2200      	movs	r2, #0
 801bbe0:	f7e4 fd0a 	bl	80005f8 <__aeabi_dmul>
 801bbe4:	460d      	mov	r5, r1
 801bbe6:	4604      	mov	r4, r0
 801bbe8:	f7e4 ffb6 	bl	8000b58 <__aeabi_d2iz>
 801bbec:	f7e4 fc9a 	bl	8000524 <__aeabi_i2d>
 801bbf0:	4602      	mov	r2, r0
 801bbf2:	460b      	mov	r3, r1
 801bbf4:	4620      	mov	r0, r4
 801bbf6:	4629      	mov	r1, r5
 801bbf8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801bbfc:	f7e4 fb44 	bl	8000288 <__aeabi_dsub>
 801bc00:	4b18      	ldr	r3, [pc, #96]	; (801bc64 <__ieee754_rem_pio2+0x404>)
 801bc02:	2200      	movs	r2, #0
 801bc04:	f7e4 fcf8 	bl	80005f8 <__aeabi_dmul>
 801bc08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801bc0c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801bc10:	2703      	movs	r7, #3
 801bc12:	2400      	movs	r4, #0
 801bc14:	2500      	movs	r5, #0
 801bc16:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801bc1a:	4622      	mov	r2, r4
 801bc1c:	462b      	mov	r3, r5
 801bc1e:	46b9      	mov	r9, r7
 801bc20:	3f01      	subs	r7, #1
 801bc22:	f7e4 ff51 	bl	8000ac8 <__aeabi_dcmpeq>
 801bc26:	2800      	cmp	r0, #0
 801bc28:	d1f5      	bne.n	801bc16 <__ieee754_rem_pio2+0x3b6>
 801bc2a:	4b0f      	ldr	r3, [pc, #60]	; (801bc68 <__ieee754_rem_pio2+0x408>)
 801bc2c:	9301      	str	r3, [sp, #4]
 801bc2e:	2302      	movs	r3, #2
 801bc30:	9300      	str	r3, [sp, #0]
 801bc32:	4632      	mov	r2, r6
 801bc34:	464b      	mov	r3, r9
 801bc36:	4651      	mov	r1, sl
 801bc38:	a804      	add	r0, sp, #16
 801bc3a:	f000 fad1 	bl	801c1e0 <__kernel_rem_pio2>
 801bc3e:	9b02      	ldr	r3, [sp, #8]
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	4683      	mov	fp, r0
 801bc44:	f6bf ae4c 	bge.w	801b8e0 <__ieee754_rem_pio2+0x80>
 801bc48:	e9da 2100 	ldrd	r2, r1, [sl]
 801bc4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bc50:	e9ca 2300 	strd	r2, r3, [sl]
 801bc54:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801bc58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bc5c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801bc60:	e73f      	b.n	801bae2 <__ieee754_rem_pio2+0x282>
 801bc62:	bf00      	nop
 801bc64:	41700000 	.word	0x41700000
 801bc68:	0801f160 	.word	0x0801f160

0801bc6c <acos>:
 801bc6c:	b538      	push	{r3, r4, r5, lr}
 801bc6e:	ed2d 8b02 	vpush	{d8}
 801bc72:	ec55 4b10 	vmov	r4, r5, d0
 801bc76:	f000 fe03 	bl	801c880 <__ieee754_acos>
 801bc7a:	4622      	mov	r2, r4
 801bc7c:	462b      	mov	r3, r5
 801bc7e:	4620      	mov	r0, r4
 801bc80:	4629      	mov	r1, r5
 801bc82:	eeb0 8a40 	vmov.f32	s16, s0
 801bc86:	eef0 8a60 	vmov.f32	s17, s1
 801bc8a:	f7e4 ff4f 	bl	8000b2c <__aeabi_dcmpun>
 801bc8e:	b9a8      	cbnz	r0, 801bcbc <acos+0x50>
 801bc90:	ec45 4b10 	vmov	d0, r4, r5
 801bc94:	f000 f81e 	bl	801bcd4 <fabs>
 801bc98:	4b0c      	ldr	r3, [pc, #48]	; (801bccc <acos+0x60>)
 801bc9a:	ec51 0b10 	vmov	r0, r1, d0
 801bc9e:	2200      	movs	r2, #0
 801bca0:	f7e4 ff3a 	bl	8000b18 <__aeabi_dcmpgt>
 801bca4:	b150      	cbz	r0, 801bcbc <acos+0x50>
 801bca6:	f7fc f85f 	bl	8017d68 <__errno>
 801bcaa:	ecbd 8b02 	vpop	{d8}
 801bcae:	2321      	movs	r3, #33	; 0x21
 801bcb0:	6003      	str	r3, [r0, #0]
 801bcb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bcb6:	4806      	ldr	r0, [pc, #24]	; (801bcd0 <acos+0x64>)
 801bcb8:	f7fc b89a 	b.w	8017df0 <nan>
 801bcbc:	eeb0 0a48 	vmov.f32	s0, s16
 801bcc0:	eef0 0a68 	vmov.f32	s1, s17
 801bcc4:	ecbd 8b02 	vpop	{d8}
 801bcc8:	bd38      	pop	{r3, r4, r5, pc}
 801bcca:	bf00      	nop
 801bccc:	3ff00000 	.word	0x3ff00000
 801bcd0:	0801ee6e 	.word	0x0801ee6e

0801bcd4 <fabs>:
 801bcd4:	ec51 0b10 	vmov	r0, r1, d0
 801bcd8:	ee10 2a10 	vmov	r2, s0
 801bcdc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bce0:	ec43 2b10 	vmov	d0, r2, r3
 801bce4:	4770      	bx	lr
	...

0801bce8 <__ieee754_expf>:
 801bce8:	ee10 2a10 	vmov	r2, s0
 801bcec:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801bcf0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801bcf4:	d902      	bls.n	801bcfc <__ieee754_expf+0x14>
 801bcf6:	ee30 0a00 	vadd.f32	s0, s0, s0
 801bcfa:	4770      	bx	lr
 801bcfc:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801bd00:	d106      	bne.n	801bd10 <__ieee754_expf+0x28>
 801bd02:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801be3c <__ieee754_expf+0x154>
 801bd06:	2900      	cmp	r1, #0
 801bd08:	bf18      	it	ne
 801bd0a:	eeb0 0a67 	vmovne.f32	s0, s15
 801bd0e:	4770      	bx	lr
 801bd10:	484b      	ldr	r0, [pc, #300]	; (801be40 <__ieee754_expf+0x158>)
 801bd12:	4282      	cmp	r2, r0
 801bd14:	dd02      	ble.n	801bd1c <__ieee754_expf+0x34>
 801bd16:	2000      	movs	r0, #0
 801bd18:	f000 b980 	b.w	801c01c <__math_oflowf>
 801bd1c:	2a00      	cmp	r2, #0
 801bd1e:	da05      	bge.n	801bd2c <__ieee754_expf+0x44>
 801bd20:	4a48      	ldr	r2, [pc, #288]	; (801be44 <__ieee754_expf+0x15c>)
 801bd22:	4293      	cmp	r3, r2
 801bd24:	d902      	bls.n	801bd2c <__ieee754_expf+0x44>
 801bd26:	2000      	movs	r0, #0
 801bd28:	f000 b972 	b.w	801c010 <__math_uflowf>
 801bd2c:	4a46      	ldr	r2, [pc, #280]	; (801be48 <__ieee754_expf+0x160>)
 801bd2e:	4293      	cmp	r3, r2
 801bd30:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801bd34:	d952      	bls.n	801bddc <__ieee754_expf+0xf4>
 801bd36:	4a45      	ldr	r2, [pc, #276]	; (801be4c <__ieee754_expf+0x164>)
 801bd38:	4293      	cmp	r3, r2
 801bd3a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801bd3e:	d834      	bhi.n	801bdaa <__ieee754_expf+0xc2>
 801bd40:	4b43      	ldr	r3, [pc, #268]	; (801be50 <__ieee754_expf+0x168>)
 801bd42:	4413      	add	r3, r2
 801bd44:	ed93 7a00 	vldr	s14, [r3]
 801bd48:	4b42      	ldr	r3, [pc, #264]	; (801be54 <__ieee754_expf+0x16c>)
 801bd4a:	4413      	add	r3, r2
 801bd4c:	ee30 7a47 	vsub.f32	s14, s0, s14
 801bd50:	f1c1 0201 	rsb	r2, r1, #1
 801bd54:	edd3 7a00 	vldr	s15, [r3]
 801bd58:	1a52      	subs	r2, r2, r1
 801bd5a:	ee37 0a67 	vsub.f32	s0, s14, s15
 801bd5e:	ee20 6a00 	vmul.f32	s12, s0, s0
 801bd62:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801be58 <__ieee754_expf+0x170>
 801bd66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801be5c <__ieee754_expf+0x174>
 801bd6a:	eee6 6a05 	vfma.f32	s13, s12, s10
 801bd6e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801be60 <__ieee754_expf+0x178>
 801bd72:	eea6 5a86 	vfma.f32	s10, s13, s12
 801bd76:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801be64 <__ieee754_expf+0x17c>
 801bd7a:	eee5 6a06 	vfma.f32	s13, s10, s12
 801bd7e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801be68 <__ieee754_expf+0x180>
 801bd82:	eea6 5a86 	vfma.f32	s10, s13, s12
 801bd86:	eef0 6a40 	vmov.f32	s13, s0
 801bd8a:	eee5 6a46 	vfms.f32	s13, s10, s12
 801bd8e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801bd92:	ee20 5a26 	vmul.f32	s10, s0, s13
 801bd96:	bb92      	cbnz	r2, 801bdfe <__ieee754_expf+0x116>
 801bd98:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801bd9c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801bda0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801bda4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801bda8:	4770      	bx	lr
 801bdaa:	4b30      	ldr	r3, [pc, #192]	; (801be6c <__ieee754_expf+0x184>)
 801bdac:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801be70 <__ieee754_expf+0x188>
 801bdb0:	eddf 6a30 	vldr	s13, [pc, #192]	; 801be74 <__ieee754_expf+0x18c>
 801bdb4:	4413      	add	r3, r2
 801bdb6:	edd3 7a00 	vldr	s15, [r3]
 801bdba:	eee0 7a07 	vfma.f32	s15, s0, s14
 801bdbe:	eeb0 7a40 	vmov.f32	s14, s0
 801bdc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bdc6:	ee17 2a90 	vmov	r2, s15
 801bdca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bdce:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801bdd2:	eddf 6a29 	vldr	s13, [pc, #164]	; 801be78 <__ieee754_expf+0x190>
 801bdd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bdda:	e7be      	b.n	801bd5a <__ieee754_expf+0x72>
 801bddc:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 801bde0:	d20b      	bcs.n	801bdfa <__ieee754_expf+0x112>
 801bde2:	eddf 6a26 	vldr	s13, [pc, #152]	; 801be7c <__ieee754_expf+0x194>
 801bde6:	ee70 6a26 	vadd.f32	s13, s0, s13
 801bdea:	eef4 6ae5 	vcmpe.f32	s13, s11
 801bdee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdf2:	dd02      	ble.n	801bdfa <__ieee754_expf+0x112>
 801bdf4:	ee30 0a25 	vadd.f32	s0, s0, s11
 801bdf8:	4770      	bx	lr
 801bdfa:	2200      	movs	r2, #0
 801bdfc:	e7af      	b.n	801bd5e <__ieee754_expf+0x76>
 801bdfe:	ee36 6a66 	vsub.f32	s12, s12, s13
 801be02:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801be06:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801be0a:	bfb8      	it	lt
 801be0c:	3264      	addlt	r2, #100	; 0x64
 801be0e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801be12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801be16:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801be1a:	ee17 3a90 	vmov	r3, s15
 801be1e:	bfab      	itete	ge
 801be20:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801be24:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801be28:	ee00 3a10 	vmovge	s0, r3
 801be2c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 801be80 <__ieee754_expf+0x198>
 801be30:	bfbc      	itt	lt
 801be32:	ee00 3a10 	vmovlt	s0, r3
 801be36:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801be3a:	4770      	bx	lr
 801be3c:	00000000 	.word	0x00000000
 801be40:	42b17217 	.word	0x42b17217
 801be44:	42cff1b5 	.word	0x42cff1b5
 801be48:	3eb17218 	.word	0x3eb17218
 801be4c:	3f851591 	.word	0x3f851591
 801be50:	0801f270 	.word	0x0801f270
 801be54:	0801f278 	.word	0x0801f278
 801be58:	3331bb4c 	.word	0x3331bb4c
 801be5c:	b5ddea0e 	.word	0xb5ddea0e
 801be60:	388ab355 	.word	0x388ab355
 801be64:	bb360b61 	.word	0xbb360b61
 801be68:	3e2aaaab 	.word	0x3e2aaaab
 801be6c:	0801f268 	.word	0x0801f268
 801be70:	3fb8aa3b 	.word	0x3fb8aa3b
 801be74:	3f317180 	.word	0x3f317180
 801be78:	3717f7d1 	.word	0x3717f7d1
 801be7c:	7149f2ca 	.word	0x7149f2ca
 801be80:	0d800000 	.word	0x0d800000
 801be84:	00000000 	.word	0x00000000

0801be88 <scalbn>:
 801be88:	b570      	push	{r4, r5, r6, lr}
 801be8a:	ec55 4b10 	vmov	r4, r5, d0
 801be8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801be92:	4606      	mov	r6, r0
 801be94:	462b      	mov	r3, r5
 801be96:	b999      	cbnz	r1, 801bec0 <scalbn+0x38>
 801be98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801be9c:	4323      	orrs	r3, r4
 801be9e:	d03f      	beq.n	801bf20 <scalbn+0x98>
 801bea0:	4b35      	ldr	r3, [pc, #212]	; (801bf78 <scalbn+0xf0>)
 801bea2:	4629      	mov	r1, r5
 801bea4:	ee10 0a10 	vmov	r0, s0
 801bea8:	2200      	movs	r2, #0
 801beaa:	f7e4 fba5 	bl	80005f8 <__aeabi_dmul>
 801beae:	4b33      	ldr	r3, [pc, #204]	; (801bf7c <scalbn+0xf4>)
 801beb0:	429e      	cmp	r6, r3
 801beb2:	4604      	mov	r4, r0
 801beb4:	460d      	mov	r5, r1
 801beb6:	da10      	bge.n	801beda <scalbn+0x52>
 801beb8:	a327      	add	r3, pc, #156	; (adr r3, 801bf58 <scalbn+0xd0>)
 801beba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bebe:	e01f      	b.n	801bf00 <scalbn+0x78>
 801bec0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801bec4:	4291      	cmp	r1, r2
 801bec6:	d10c      	bne.n	801bee2 <scalbn+0x5a>
 801bec8:	ee10 2a10 	vmov	r2, s0
 801becc:	4620      	mov	r0, r4
 801bece:	4629      	mov	r1, r5
 801bed0:	f7e4 f9dc 	bl	800028c <__adddf3>
 801bed4:	4604      	mov	r4, r0
 801bed6:	460d      	mov	r5, r1
 801bed8:	e022      	b.n	801bf20 <scalbn+0x98>
 801beda:	460b      	mov	r3, r1
 801bedc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801bee0:	3936      	subs	r1, #54	; 0x36
 801bee2:	f24c 3250 	movw	r2, #50000	; 0xc350
 801bee6:	4296      	cmp	r6, r2
 801bee8:	dd0d      	ble.n	801bf06 <scalbn+0x7e>
 801beea:	2d00      	cmp	r5, #0
 801beec:	a11c      	add	r1, pc, #112	; (adr r1, 801bf60 <scalbn+0xd8>)
 801beee:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bef2:	da02      	bge.n	801befa <scalbn+0x72>
 801bef4:	a11c      	add	r1, pc, #112	; (adr r1, 801bf68 <scalbn+0xe0>)
 801bef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801befa:	a319      	add	r3, pc, #100	; (adr r3, 801bf60 <scalbn+0xd8>)
 801befc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf00:	f7e4 fb7a 	bl	80005f8 <__aeabi_dmul>
 801bf04:	e7e6      	b.n	801bed4 <scalbn+0x4c>
 801bf06:	1872      	adds	r2, r6, r1
 801bf08:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801bf0c:	428a      	cmp	r2, r1
 801bf0e:	dcec      	bgt.n	801beea <scalbn+0x62>
 801bf10:	2a00      	cmp	r2, #0
 801bf12:	dd08      	ble.n	801bf26 <scalbn+0x9e>
 801bf14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bf18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801bf1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801bf20:	ec45 4b10 	vmov	d0, r4, r5
 801bf24:	bd70      	pop	{r4, r5, r6, pc}
 801bf26:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801bf2a:	da08      	bge.n	801bf3e <scalbn+0xb6>
 801bf2c:	2d00      	cmp	r5, #0
 801bf2e:	a10a      	add	r1, pc, #40	; (adr r1, 801bf58 <scalbn+0xd0>)
 801bf30:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf34:	dac0      	bge.n	801beb8 <scalbn+0x30>
 801bf36:	a10e      	add	r1, pc, #56	; (adr r1, 801bf70 <scalbn+0xe8>)
 801bf38:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf3c:	e7bc      	b.n	801beb8 <scalbn+0x30>
 801bf3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bf42:	3236      	adds	r2, #54	; 0x36
 801bf44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801bf48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801bf4c:	4620      	mov	r0, r4
 801bf4e:	4b0c      	ldr	r3, [pc, #48]	; (801bf80 <scalbn+0xf8>)
 801bf50:	2200      	movs	r2, #0
 801bf52:	e7d5      	b.n	801bf00 <scalbn+0x78>
 801bf54:	f3af 8000 	nop.w
 801bf58:	c2f8f359 	.word	0xc2f8f359
 801bf5c:	01a56e1f 	.word	0x01a56e1f
 801bf60:	8800759c 	.word	0x8800759c
 801bf64:	7e37e43c 	.word	0x7e37e43c
 801bf68:	8800759c 	.word	0x8800759c
 801bf6c:	fe37e43c 	.word	0xfe37e43c
 801bf70:	c2f8f359 	.word	0xc2f8f359
 801bf74:	81a56e1f 	.word	0x81a56e1f
 801bf78:	43500000 	.word	0x43500000
 801bf7c:	ffff3cb0 	.word	0xffff3cb0
 801bf80:	3c900000 	.word	0x3c900000

0801bf84 <with_errno>:
 801bf84:	b570      	push	{r4, r5, r6, lr}
 801bf86:	4604      	mov	r4, r0
 801bf88:	460d      	mov	r5, r1
 801bf8a:	4616      	mov	r6, r2
 801bf8c:	f7fb feec 	bl	8017d68 <__errno>
 801bf90:	4629      	mov	r1, r5
 801bf92:	6006      	str	r6, [r0, #0]
 801bf94:	4620      	mov	r0, r4
 801bf96:	bd70      	pop	{r4, r5, r6, pc}

0801bf98 <xflow>:
 801bf98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bf9a:	4614      	mov	r4, r2
 801bf9c:	461d      	mov	r5, r3
 801bf9e:	b108      	cbz	r0, 801bfa4 <xflow+0xc>
 801bfa0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801bfa4:	e9cd 2300 	strd	r2, r3, [sp]
 801bfa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bfac:	4620      	mov	r0, r4
 801bfae:	4629      	mov	r1, r5
 801bfb0:	f7e4 fb22 	bl	80005f8 <__aeabi_dmul>
 801bfb4:	2222      	movs	r2, #34	; 0x22
 801bfb6:	b003      	add	sp, #12
 801bfb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bfbc:	f7ff bfe2 	b.w	801bf84 <with_errno>

0801bfc0 <__math_uflow>:
 801bfc0:	b508      	push	{r3, lr}
 801bfc2:	2200      	movs	r2, #0
 801bfc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801bfc8:	f7ff ffe6 	bl	801bf98 <xflow>
 801bfcc:	ec41 0b10 	vmov	d0, r0, r1
 801bfd0:	bd08      	pop	{r3, pc}

0801bfd2 <__math_oflow>:
 801bfd2:	b508      	push	{r3, lr}
 801bfd4:	2200      	movs	r2, #0
 801bfd6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801bfda:	f7ff ffdd 	bl	801bf98 <xflow>
 801bfde:	ec41 0b10 	vmov	d0, r0, r1
 801bfe2:	bd08      	pop	{r3, pc}

0801bfe4 <with_errnof>:
 801bfe4:	b513      	push	{r0, r1, r4, lr}
 801bfe6:	4604      	mov	r4, r0
 801bfe8:	ed8d 0a01 	vstr	s0, [sp, #4]
 801bfec:	f7fb febc 	bl	8017d68 <__errno>
 801bff0:	ed9d 0a01 	vldr	s0, [sp, #4]
 801bff4:	6004      	str	r4, [r0, #0]
 801bff6:	b002      	add	sp, #8
 801bff8:	bd10      	pop	{r4, pc}

0801bffa <xflowf>:
 801bffa:	b130      	cbz	r0, 801c00a <xflowf+0x10>
 801bffc:	eef1 7a40 	vneg.f32	s15, s0
 801c000:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c004:	2022      	movs	r0, #34	; 0x22
 801c006:	f7ff bfed 	b.w	801bfe4 <with_errnof>
 801c00a:	eef0 7a40 	vmov.f32	s15, s0
 801c00e:	e7f7      	b.n	801c000 <xflowf+0x6>

0801c010 <__math_uflowf>:
 801c010:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c018 <__math_uflowf+0x8>
 801c014:	f7ff bff1 	b.w	801bffa <xflowf>
 801c018:	10000000 	.word	0x10000000

0801c01c <__math_oflowf>:
 801c01c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c024 <__math_oflowf+0x8>
 801c020:	f7ff bfeb 	b.w	801bffa <xflowf>
 801c024:	70000000 	.word	0x70000000

0801c028 <__ieee754_sqrt>:
 801c028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c02c:	ec55 4b10 	vmov	r4, r5, d0
 801c030:	4e67      	ldr	r6, [pc, #412]	; (801c1d0 <__ieee754_sqrt+0x1a8>)
 801c032:	43ae      	bics	r6, r5
 801c034:	ee10 0a10 	vmov	r0, s0
 801c038:	ee10 2a10 	vmov	r2, s0
 801c03c:	4629      	mov	r1, r5
 801c03e:	462b      	mov	r3, r5
 801c040:	d10d      	bne.n	801c05e <__ieee754_sqrt+0x36>
 801c042:	f7e4 fad9 	bl	80005f8 <__aeabi_dmul>
 801c046:	4602      	mov	r2, r0
 801c048:	460b      	mov	r3, r1
 801c04a:	4620      	mov	r0, r4
 801c04c:	4629      	mov	r1, r5
 801c04e:	f7e4 f91d 	bl	800028c <__adddf3>
 801c052:	4604      	mov	r4, r0
 801c054:	460d      	mov	r5, r1
 801c056:	ec45 4b10 	vmov	d0, r4, r5
 801c05a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c05e:	2d00      	cmp	r5, #0
 801c060:	dc0b      	bgt.n	801c07a <__ieee754_sqrt+0x52>
 801c062:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c066:	4326      	orrs	r6, r4
 801c068:	d0f5      	beq.n	801c056 <__ieee754_sqrt+0x2e>
 801c06a:	b135      	cbz	r5, 801c07a <__ieee754_sqrt+0x52>
 801c06c:	f7e4 f90c 	bl	8000288 <__aeabi_dsub>
 801c070:	4602      	mov	r2, r0
 801c072:	460b      	mov	r3, r1
 801c074:	f7e4 fbea 	bl	800084c <__aeabi_ddiv>
 801c078:	e7eb      	b.n	801c052 <__ieee754_sqrt+0x2a>
 801c07a:	1509      	asrs	r1, r1, #20
 801c07c:	f000 808d 	beq.w	801c19a <__ieee754_sqrt+0x172>
 801c080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c084:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801c088:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c08c:	07c9      	lsls	r1, r1, #31
 801c08e:	bf5c      	itt	pl
 801c090:	005b      	lslpl	r3, r3, #1
 801c092:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801c096:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c09a:	bf58      	it	pl
 801c09c:	0052      	lslpl	r2, r2, #1
 801c09e:	2500      	movs	r5, #0
 801c0a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801c0a4:	1076      	asrs	r6, r6, #1
 801c0a6:	0052      	lsls	r2, r2, #1
 801c0a8:	f04f 0e16 	mov.w	lr, #22
 801c0ac:	46ac      	mov	ip, r5
 801c0ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801c0b2:	eb0c 0001 	add.w	r0, ip, r1
 801c0b6:	4298      	cmp	r0, r3
 801c0b8:	bfde      	ittt	le
 801c0ba:	1a1b      	suble	r3, r3, r0
 801c0bc:	eb00 0c01 	addle.w	ip, r0, r1
 801c0c0:	186d      	addle	r5, r5, r1
 801c0c2:	005b      	lsls	r3, r3, #1
 801c0c4:	f1be 0e01 	subs.w	lr, lr, #1
 801c0c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801c0cc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801c0d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801c0d4:	d1ed      	bne.n	801c0b2 <__ieee754_sqrt+0x8a>
 801c0d6:	4674      	mov	r4, lr
 801c0d8:	2720      	movs	r7, #32
 801c0da:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801c0de:	4563      	cmp	r3, ip
 801c0e0:	eb01 000e 	add.w	r0, r1, lr
 801c0e4:	dc02      	bgt.n	801c0ec <__ieee754_sqrt+0xc4>
 801c0e6:	d113      	bne.n	801c110 <__ieee754_sqrt+0xe8>
 801c0e8:	4290      	cmp	r0, r2
 801c0ea:	d811      	bhi.n	801c110 <__ieee754_sqrt+0xe8>
 801c0ec:	2800      	cmp	r0, #0
 801c0ee:	eb00 0e01 	add.w	lr, r0, r1
 801c0f2:	da57      	bge.n	801c1a4 <__ieee754_sqrt+0x17c>
 801c0f4:	f1be 0f00 	cmp.w	lr, #0
 801c0f8:	db54      	blt.n	801c1a4 <__ieee754_sqrt+0x17c>
 801c0fa:	f10c 0801 	add.w	r8, ip, #1
 801c0fe:	eba3 030c 	sub.w	r3, r3, ip
 801c102:	4290      	cmp	r0, r2
 801c104:	bf88      	it	hi
 801c106:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801c10a:	1a12      	subs	r2, r2, r0
 801c10c:	440c      	add	r4, r1
 801c10e:	46c4      	mov	ip, r8
 801c110:	005b      	lsls	r3, r3, #1
 801c112:	3f01      	subs	r7, #1
 801c114:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801c118:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801c11c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801c120:	d1dd      	bne.n	801c0de <__ieee754_sqrt+0xb6>
 801c122:	4313      	orrs	r3, r2
 801c124:	d01b      	beq.n	801c15e <__ieee754_sqrt+0x136>
 801c126:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801c1d4 <__ieee754_sqrt+0x1ac>
 801c12a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801c1d8 <__ieee754_sqrt+0x1b0>
 801c12e:	e9da 0100 	ldrd	r0, r1, [sl]
 801c132:	e9db 2300 	ldrd	r2, r3, [fp]
 801c136:	f7e4 f8a7 	bl	8000288 <__aeabi_dsub>
 801c13a:	e9da 8900 	ldrd	r8, r9, [sl]
 801c13e:	4602      	mov	r2, r0
 801c140:	460b      	mov	r3, r1
 801c142:	4640      	mov	r0, r8
 801c144:	4649      	mov	r1, r9
 801c146:	f7e4 fcd3 	bl	8000af0 <__aeabi_dcmple>
 801c14a:	b140      	cbz	r0, 801c15e <__ieee754_sqrt+0x136>
 801c14c:	f1b4 3fff 	cmp.w	r4, #4294967295
 801c150:	e9da 0100 	ldrd	r0, r1, [sl]
 801c154:	e9db 2300 	ldrd	r2, r3, [fp]
 801c158:	d126      	bne.n	801c1a8 <__ieee754_sqrt+0x180>
 801c15a:	3501      	adds	r5, #1
 801c15c:	463c      	mov	r4, r7
 801c15e:	106a      	asrs	r2, r5, #1
 801c160:	0863      	lsrs	r3, r4, #1
 801c162:	07e9      	lsls	r1, r5, #31
 801c164:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801c168:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801c16c:	bf48      	it	mi
 801c16e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801c172:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801c176:	461c      	mov	r4, r3
 801c178:	e76d      	b.n	801c056 <__ieee754_sqrt+0x2e>
 801c17a:	0ad3      	lsrs	r3, r2, #11
 801c17c:	3815      	subs	r0, #21
 801c17e:	0552      	lsls	r2, r2, #21
 801c180:	2b00      	cmp	r3, #0
 801c182:	d0fa      	beq.n	801c17a <__ieee754_sqrt+0x152>
 801c184:	02dc      	lsls	r4, r3, #11
 801c186:	d50a      	bpl.n	801c19e <__ieee754_sqrt+0x176>
 801c188:	f1c1 0420 	rsb	r4, r1, #32
 801c18c:	fa22 f404 	lsr.w	r4, r2, r4
 801c190:	1e4d      	subs	r5, r1, #1
 801c192:	408a      	lsls	r2, r1
 801c194:	4323      	orrs	r3, r4
 801c196:	1b41      	subs	r1, r0, r5
 801c198:	e772      	b.n	801c080 <__ieee754_sqrt+0x58>
 801c19a:	4608      	mov	r0, r1
 801c19c:	e7f0      	b.n	801c180 <__ieee754_sqrt+0x158>
 801c19e:	005b      	lsls	r3, r3, #1
 801c1a0:	3101      	adds	r1, #1
 801c1a2:	e7ef      	b.n	801c184 <__ieee754_sqrt+0x15c>
 801c1a4:	46e0      	mov	r8, ip
 801c1a6:	e7aa      	b.n	801c0fe <__ieee754_sqrt+0xd6>
 801c1a8:	f7e4 f870 	bl	800028c <__adddf3>
 801c1ac:	e9da 8900 	ldrd	r8, r9, [sl]
 801c1b0:	4602      	mov	r2, r0
 801c1b2:	460b      	mov	r3, r1
 801c1b4:	4640      	mov	r0, r8
 801c1b6:	4649      	mov	r1, r9
 801c1b8:	f7e4 fc90 	bl	8000adc <__aeabi_dcmplt>
 801c1bc:	b120      	cbz	r0, 801c1c8 <__ieee754_sqrt+0x1a0>
 801c1be:	1ca0      	adds	r0, r4, #2
 801c1c0:	bf08      	it	eq
 801c1c2:	3501      	addeq	r5, #1
 801c1c4:	3402      	adds	r4, #2
 801c1c6:	e7ca      	b.n	801c15e <__ieee754_sqrt+0x136>
 801c1c8:	3401      	adds	r4, #1
 801c1ca:	f024 0401 	bic.w	r4, r4, #1
 801c1ce:	e7c6      	b.n	801c15e <__ieee754_sqrt+0x136>
 801c1d0:	7ff00000 	.word	0x7ff00000
 801c1d4:	20000310 	.word	0x20000310
 801c1d8:	20000318 	.word	0x20000318
 801c1dc:	00000000 	.word	0x00000000

0801c1e0 <__kernel_rem_pio2>:
 801c1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1e4:	ed2d 8b02 	vpush	{d8}
 801c1e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801c1ec:	f112 0f14 	cmn.w	r2, #20
 801c1f0:	9306      	str	r3, [sp, #24]
 801c1f2:	9104      	str	r1, [sp, #16]
 801c1f4:	4bc2      	ldr	r3, [pc, #776]	; (801c500 <__kernel_rem_pio2+0x320>)
 801c1f6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801c1f8:	9009      	str	r0, [sp, #36]	; 0x24
 801c1fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c1fe:	9300      	str	r3, [sp, #0]
 801c200:	9b06      	ldr	r3, [sp, #24]
 801c202:	f103 33ff 	add.w	r3, r3, #4294967295
 801c206:	bfa8      	it	ge
 801c208:	1ed4      	subge	r4, r2, #3
 801c20a:	9305      	str	r3, [sp, #20]
 801c20c:	bfb2      	itee	lt
 801c20e:	2400      	movlt	r4, #0
 801c210:	2318      	movge	r3, #24
 801c212:	fb94 f4f3 	sdivge	r4, r4, r3
 801c216:	f06f 0317 	mvn.w	r3, #23
 801c21a:	fb04 3303 	mla	r3, r4, r3, r3
 801c21e:	eb03 0a02 	add.w	sl, r3, r2
 801c222:	9b00      	ldr	r3, [sp, #0]
 801c224:	9a05      	ldr	r2, [sp, #20]
 801c226:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 801c4f0 <__kernel_rem_pio2+0x310>
 801c22a:	eb03 0802 	add.w	r8, r3, r2
 801c22e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801c230:	1aa7      	subs	r7, r4, r2
 801c232:	ae20      	add	r6, sp, #128	; 0x80
 801c234:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801c238:	2500      	movs	r5, #0
 801c23a:	4545      	cmp	r5, r8
 801c23c:	dd13      	ble.n	801c266 <__kernel_rem_pio2+0x86>
 801c23e:	9b06      	ldr	r3, [sp, #24]
 801c240:	aa20      	add	r2, sp, #128	; 0x80
 801c242:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801c246:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801c24a:	f04f 0800 	mov.w	r8, #0
 801c24e:	9b00      	ldr	r3, [sp, #0]
 801c250:	4598      	cmp	r8, r3
 801c252:	dc31      	bgt.n	801c2b8 <__kernel_rem_pio2+0xd8>
 801c254:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 801c4f0 <__kernel_rem_pio2+0x310>
 801c258:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c25c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c260:	462f      	mov	r7, r5
 801c262:	2600      	movs	r6, #0
 801c264:	e01b      	b.n	801c29e <__kernel_rem_pio2+0xbe>
 801c266:	42ef      	cmn	r7, r5
 801c268:	d407      	bmi.n	801c27a <__kernel_rem_pio2+0x9a>
 801c26a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801c26e:	f7e4 f959 	bl	8000524 <__aeabi_i2d>
 801c272:	e8e6 0102 	strd	r0, r1, [r6], #8
 801c276:	3501      	adds	r5, #1
 801c278:	e7df      	b.n	801c23a <__kernel_rem_pio2+0x5a>
 801c27a:	ec51 0b18 	vmov	r0, r1, d8
 801c27e:	e7f8      	b.n	801c272 <__kernel_rem_pio2+0x92>
 801c280:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c284:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801c288:	f7e4 f9b6 	bl	80005f8 <__aeabi_dmul>
 801c28c:	4602      	mov	r2, r0
 801c28e:	460b      	mov	r3, r1
 801c290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c294:	f7e3 fffa 	bl	800028c <__adddf3>
 801c298:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c29c:	3601      	adds	r6, #1
 801c29e:	9b05      	ldr	r3, [sp, #20]
 801c2a0:	429e      	cmp	r6, r3
 801c2a2:	f1a7 0708 	sub.w	r7, r7, #8
 801c2a6:	ddeb      	ble.n	801c280 <__kernel_rem_pio2+0xa0>
 801c2a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c2ac:	f108 0801 	add.w	r8, r8, #1
 801c2b0:	ecab 7b02 	vstmia	fp!, {d7}
 801c2b4:	3508      	adds	r5, #8
 801c2b6:	e7ca      	b.n	801c24e <__kernel_rem_pio2+0x6e>
 801c2b8:	9b00      	ldr	r3, [sp, #0]
 801c2ba:	aa0c      	add	r2, sp, #48	; 0x30
 801c2bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c2c0:	930b      	str	r3, [sp, #44]	; 0x2c
 801c2c2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801c2c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801c2c8:	9c00      	ldr	r4, [sp, #0]
 801c2ca:	930a      	str	r3, [sp, #40]	; 0x28
 801c2cc:	00e3      	lsls	r3, r4, #3
 801c2ce:	9308      	str	r3, [sp, #32]
 801c2d0:	ab98      	add	r3, sp, #608	; 0x260
 801c2d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c2d6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801c2da:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801c2de:	ab70      	add	r3, sp, #448	; 0x1c0
 801c2e0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801c2e4:	46c3      	mov	fp, r8
 801c2e6:	46a1      	mov	r9, r4
 801c2e8:	f1b9 0f00 	cmp.w	r9, #0
 801c2ec:	f1a5 0508 	sub.w	r5, r5, #8
 801c2f0:	dc77      	bgt.n	801c3e2 <__kernel_rem_pio2+0x202>
 801c2f2:	ec47 6b10 	vmov	d0, r6, r7
 801c2f6:	4650      	mov	r0, sl
 801c2f8:	f7ff fdc6 	bl	801be88 <scalbn>
 801c2fc:	ec57 6b10 	vmov	r6, r7, d0
 801c300:	2200      	movs	r2, #0
 801c302:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801c306:	ee10 0a10 	vmov	r0, s0
 801c30a:	4639      	mov	r1, r7
 801c30c:	f7e4 f974 	bl	80005f8 <__aeabi_dmul>
 801c310:	ec41 0b10 	vmov	d0, r0, r1
 801c314:	f7fe fb70 	bl	801a9f8 <floor>
 801c318:	4b7a      	ldr	r3, [pc, #488]	; (801c504 <__kernel_rem_pio2+0x324>)
 801c31a:	ec51 0b10 	vmov	r0, r1, d0
 801c31e:	2200      	movs	r2, #0
 801c320:	f7e4 f96a 	bl	80005f8 <__aeabi_dmul>
 801c324:	4602      	mov	r2, r0
 801c326:	460b      	mov	r3, r1
 801c328:	4630      	mov	r0, r6
 801c32a:	4639      	mov	r1, r7
 801c32c:	f7e3 ffac 	bl	8000288 <__aeabi_dsub>
 801c330:	460f      	mov	r7, r1
 801c332:	4606      	mov	r6, r0
 801c334:	f7e4 fc10 	bl	8000b58 <__aeabi_d2iz>
 801c338:	9002      	str	r0, [sp, #8]
 801c33a:	f7e4 f8f3 	bl	8000524 <__aeabi_i2d>
 801c33e:	4602      	mov	r2, r0
 801c340:	460b      	mov	r3, r1
 801c342:	4630      	mov	r0, r6
 801c344:	4639      	mov	r1, r7
 801c346:	f7e3 ff9f 	bl	8000288 <__aeabi_dsub>
 801c34a:	f1ba 0f00 	cmp.w	sl, #0
 801c34e:	4606      	mov	r6, r0
 801c350:	460f      	mov	r7, r1
 801c352:	dd6d      	ble.n	801c430 <__kernel_rem_pio2+0x250>
 801c354:	1e61      	subs	r1, r4, #1
 801c356:	ab0c      	add	r3, sp, #48	; 0x30
 801c358:	9d02      	ldr	r5, [sp, #8]
 801c35a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c35e:	f1ca 0018 	rsb	r0, sl, #24
 801c362:	fa43 f200 	asr.w	r2, r3, r0
 801c366:	4415      	add	r5, r2
 801c368:	4082      	lsls	r2, r0
 801c36a:	1a9b      	subs	r3, r3, r2
 801c36c:	aa0c      	add	r2, sp, #48	; 0x30
 801c36e:	9502      	str	r5, [sp, #8]
 801c370:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c374:	f1ca 0217 	rsb	r2, sl, #23
 801c378:	fa43 fb02 	asr.w	fp, r3, r2
 801c37c:	f1bb 0f00 	cmp.w	fp, #0
 801c380:	dd65      	ble.n	801c44e <__kernel_rem_pio2+0x26e>
 801c382:	9b02      	ldr	r3, [sp, #8]
 801c384:	2200      	movs	r2, #0
 801c386:	3301      	adds	r3, #1
 801c388:	9302      	str	r3, [sp, #8]
 801c38a:	4615      	mov	r5, r2
 801c38c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801c390:	4294      	cmp	r4, r2
 801c392:	f300 809f 	bgt.w	801c4d4 <__kernel_rem_pio2+0x2f4>
 801c396:	f1ba 0f00 	cmp.w	sl, #0
 801c39a:	dd07      	ble.n	801c3ac <__kernel_rem_pio2+0x1cc>
 801c39c:	f1ba 0f01 	cmp.w	sl, #1
 801c3a0:	f000 80c1 	beq.w	801c526 <__kernel_rem_pio2+0x346>
 801c3a4:	f1ba 0f02 	cmp.w	sl, #2
 801c3a8:	f000 80c7 	beq.w	801c53a <__kernel_rem_pio2+0x35a>
 801c3ac:	f1bb 0f02 	cmp.w	fp, #2
 801c3b0:	d14d      	bne.n	801c44e <__kernel_rem_pio2+0x26e>
 801c3b2:	4632      	mov	r2, r6
 801c3b4:	463b      	mov	r3, r7
 801c3b6:	4954      	ldr	r1, [pc, #336]	; (801c508 <__kernel_rem_pio2+0x328>)
 801c3b8:	2000      	movs	r0, #0
 801c3ba:	f7e3 ff65 	bl	8000288 <__aeabi_dsub>
 801c3be:	4606      	mov	r6, r0
 801c3c0:	460f      	mov	r7, r1
 801c3c2:	2d00      	cmp	r5, #0
 801c3c4:	d043      	beq.n	801c44e <__kernel_rem_pio2+0x26e>
 801c3c6:	4650      	mov	r0, sl
 801c3c8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 801c4f8 <__kernel_rem_pio2+0x318>
 801c3cc:	f7ff fd5c 	bl	801be88 <scalbn>
 801c3d0:	4630      	mov	r0, r6
 801c3d2:	4639      	mov	r1, r7
 801c3d4:	ec53 2b10 	vmov	r2, r3, d0
 801c3d8:	f7e3 ff56 	bl	8000288 <__aeabi_dsub>
 801c3dc:	4606      	mov	r6, r0
 801c3de:	460f      	mov	r7, r1
 801c3e0:	e035      	b.n	801c44e <__kernel_rem_pio2+0x26e>
 801c3e2:	4b4a      	ldr	r3, [pc, #296]	; (801c50c <__kernel_rem_pio2+0x32c>)
 801c3e4:	2200      	movs	r2, #0
 801c3e6:	4630      	mov	r0, r6
 801c3e8:	4639      	mov	r1, r7
 801c3ea:	f7e4 f905 	bl	80005f8 <__aeabi_dmul>
 801c3ee:	f7e4 fbb3 	bl	8000b58 <__aeabi_d2iz>
 801c3f2:	f7e4 f897 	bl	8000524 <__aeabi_i2d>
 801c3f6:	4602      	mov	r2, r0
 801c3f8:	460b      	mov	r3, r1
 801c3fa:	ec43 2b18 	vmov	d8, r2, r3
 801c3fe:	4b44      	ldr	r3, [pc, #272]	; (801c510 <__kernel_rem_pio2+0x330>)
 801c400:	2200      	movs	r2, #0
 801c402:	f7e4 f8f9 	bl	80005f8 <__aeabi_dmul>
 801c406:	4602      	mov	r2, r0
 801c408:	460b      	mov	r3, r1
 801c40a:	4630      	mov	r0, r6
 801c40c:	4639      	mov	r1, r7
 801c40e:	f7e3 ff3b 	bl	8000288 <__aeabi_dsub>
 801c412:	f7e4 fba1 	bl	8000b58 <__aeabi_d2iz>
 801c416:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c41a:	f84b 0b04 	str.w	r0, [fp], #4
 801c41e:	ec51 0b18 	vmov	r0, r1, d8
 801c422:	f7e3 ff33 	bl	800028c <__adddf3>
 801c426:	f109 39ff 	add.w	r9, r9, #4294967295
 801c42a:	4606      	mov	r6, r0
 801c42c:	460f      	mov	r7, r1
 801c42e:	e75b      	b.n	801c2e8 <__kernel_rem_pio2+0x108>
 801c430:	d106      	bne.n	801c440 <__kernel_rem_pio2+0x260>
 801c432:	1e63      	subs	r3, r4, #1
 801c434:	aa0c      	add	r2, sp, #48	; 0x30
 801c436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c43a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801c43e:	e79d      	b.n	801c37c <__kernel_rem_pio2+0x19c>
 801c440:	4b34      	ldr	r3, [pc, #208]	; (801c514 <__kernel_rem_pio2+0x334>)
 801c442:	2200      	movs	r2, #0
 801c444:	f7e4 fb5e 	bl	8000b04 <__aeabi_dcmpge>
 801c448:	2800      	cmp	r0, #0
 801c44a:	d140      	bne.n	801c4ce <__kernel_rem_pio2+0x2ee>
 801c44c:	4683      	mov	fp, r0
 801c44e:	2200      	movs	r2, #0
 801c450:	2300      	movs	r3, #0
 801c452:	4630      	mov	r0, r6
 801c454:	4639      	mov	r1, r7
 801c456:	f7e4 fb37 	bl	8000ac8 <__aeabi_dcmpeq>
 801c45a:	2800      	cmp	r0, #0
 801c45c:	f000 80c1 	beq.w	801c5e2 <__kernel_rem_pio2+0x402>
 801c460:	1e65      	subs	r5, r4, #1
 801c462:	462b      	mov	r3, r5
 801c464:	2200      	movs	r2, #0
 801c466:	9900      	ldr	r1, [sp, #0]
 801c468:	428b      	cmp	r3, r1
 801c46a:	da6d      	bge.n	801c548 <__kernel_rem_pio2+0x368>
 801c46c:	2a00      	cmp	r2, #0
 801c46e:	f000 808a 	beq.w	801c586 <__kernel_rem_pio2+0x3a6>
 801c472:	ab0c      	add	r3, sp, #48	; 0x30
 801c474:	f1aa 0a18 	sub.w	sl, sl, #24
 801c478:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	f000 80ae 	beq.w	801c5de <__kernel_rem_pio2+0x3fe>
 801c482:	4650      	mov	r0, sl
 801c484:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 801c4f8 <__kernel_rem_pio2+0x318>
 801c488:	f7ff fcfe 	bl	801be88 <scalbn>
 801c48c:	1c6b      	adds	r3, r5, #1
 801c48e:	00da      	lsls	r2, r3, #3
 801c490:	9205      	str	r2, [sp, #20]
 801c492:	ec57 6b10 	vmov	r6, r7, d0
 801c496:	aa70      	add	r2, sp, #448	; 0x1c0
 801c498:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801c50c <__kernel_rem_pio2+0x32c>
 801c49c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 801c4a0:	462c      	mov	r4, r5
 801c4a2:	f04f 0800 	mov.w	r8, #0
 801c4a6:	2c00      	cmp	r4, #0
 801c4a8:	f280 80d4 	bge.w	801c654 <__kernel_rem_pio2+0x474>
 801c4ac:	462c      	mov	r4, r5
 801c4ae:	2c00      	cmp	r4, #0
 801c4b0:	f2c0 8102 	blt.w	801c6b8 <__kernel_rem_pio2+0x4d8>
 801c4b4:	4b18      	ldr	r3, [pc, #96]	; (801c518 <__kernel_rem_pio2+0x338>)
 801c4b6:	461e      	mov	r6, r3
 801c4b8:	ab70      	add	r3, sp, #448	; 0x1c0
 801c4ba:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801c4be:	1b2b      	subs	r3, r5, r4
 801c4c0:	f04f 0900 	mov.w	r9, #0
 801c4c4:	f04f 0a00 	mov.w	sl, #0
 801c4c8:	2700      	movs	r7, #0
 801c4ca:	9306      	str	r3, [sp, #24]
 801c4cc:	e0e6      	b.n	801c69c <__kernel_rem_pio2+0x4bc>
 801c4ce:	f04f 0b02 	mov.w	fp, #2
 801c4d2:	e756      	b.n	801c382 <__kernel_rem_pio2+0x1a2>
 801c4d4:	f8d8 3000 	ldr.w	r3, [r8]
 801c4d8:	bb05      	cbnz	r5, 801c51c <__kernel_rem_pio2+0x33c>
 801c4da:	b123      	cbz	r3, 801c4e6 <__kernel_rem_pio2+0x306>
 801c4dc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801c4e0:	f8c8 3000 	str.w	r3, [r8]
 801c4e4:	2301      	movs	r3, #1
 801c4e6:	3201      	adds	r2, #1
 801c4e8:	f108 0804 	add.w	r8, r8, #4
 801c4ec:	461d      	mov	r5, r3
 801c4ee:	e74f      	b.n	801c390 <__kernel_rem_pio2+0x1b0>
	...
 801c4fc:	3ff00000 	.word	0x3ff00000
 801c500:	0801f2c0 	.word	0x0801f2c0
 801c504:	40200000 	.word	0x40200000
 801c508:	3ff00000 	.word	0x3ff00000
 801c50c:	3e700000 	.word	0x3e700000
 801c510:	41700000 	.word	0x41700000
 801c514:	3fe00000 	.word	0x3fe00000
 801c518:	0801f280 	.word	0x0801f280
 801c51c:	1acb      	subs	r3, r1, r3
 801c51e:	f8c8 3000 	str.w	r3, [r8]
 801c522:	462b      	mov	r3, r5
 801c524:	e7df      	b.n	801c4e6 <__kernel_rem_pio2+0x306>
 801c526:	1e62      	subs	r2, r4, #1
 801c528:	ab0c      	add	r3, sp, #48	; 0x30
 801c52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c52e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801c532:	a90c      	add	r1, sp, #48	; 0x30
 801c534:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801c538:	e738      	b.n	801c3ac <__kernel_rem_pio2+0x1cc>
 801c53a:	1e62      	subs	r2, r4, #1
 801c53c:	ab0c      	add	r3, sp, #48	; 0x30
 801c53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c542:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c546:	e7f4      	b.n	801c532 <__kernel_rem_pio2+0x352>
 801c548:	a90c      	add	r1, sp, #48	; 0x30
 801c54a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801c54e:	3b01      	subs	r3, #1
 801c550:	430a      	orrs	r2, r1
 801c552:	e788      	b.n	801c466 <__kernel_rem_pio2+0x286>
 801c554:	3301      	adds	r3, #1
 801c556:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801c55a:	2900      	cmp	r1, #0
 801c55c:	d0fa      	beq.n	801c554 <__kernel_rem_pio2+0x374>
 801c55e:	9a08      	ldr	r2, [sp, #32]
 801c560:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801c564:	446a      	add	r2, sp
 801c566:	3a98      	subs	r2, #152	; 0x98
 801c568:	9208      	str	r2, [sp, #32]
 801c56a:	9a06      	ldr	r2, [sp, #24]
 801c56c:	a920      	add	r1, sp, #128	; 0x80
 801c56e:	18a2      	adds	r2, r4, r2
 801c570:	18e3      	adds	r3, r4, r3
 801c572:	f104 0801 	add.w	r8, r4, #1
 801c576:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801c57a:	9302      	str	r3, [sp, #8]
 801c57c:	9b02      	ldr	r3, [sp, #8]
 801c57e:	4543      	cmp	r3, r8
 801c580:	da04      	bge.n	801c58c <__kernel_rem_pio2+0x3ac>
 801c582:	461c      	mov	r4, r3
 801c584:	e6a2      	b.n	801c2cc <__kernel_rem_pio2+0xec>
 801c586:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c588:	2301      	movs	r3, #1
 801c58a:	e7e4      	b.n	801c556 <__kernel_rem_pio2+0x376>
 801c58c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c58e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801c592:	f7e3 ffc7 	bl	8000524 <__aeabi_i2d>
 801c596:	e8e5 0102 	strd	r0, r1, [r5], #8
 801c59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c59c:	46ab      	mov	fp, r5
 801c59e:	461c      	mov	r4, r3
 801c5a0:	f04f 0900 	mov.w	r9, #0
 801c5a4:	2600      	movs	r6, #0
 801c5a6:	2700      	movs	r7, #0
 801c5a8:	9b05      	ldr	r3, [sp, #20]
 801c5aa:	4599      	cmp	r9, r3
 801c5ac:	dd06      	ble.n	801c5bc <__kernel_rem_pio2+0x3dc>
 801c5ae:	9b08      	ldr	r3, [sp, #32]
 801c5b0:	e8e3 6702 	strd	r6, r7, [r3], #8
 801c5b4:	f108 0801 	add.w	r8, r8, #1
 801c5b8:	9308      	str	r3, [sp, #32]
 801c5ba:	e7df      	b.n	801c57c <__kernel_rem_pio2+0x39c>
 801c5bc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801c5c0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801c5c4:	f7e4 f818 	bl	80005f8 <__aeabi_dmul>
 801c5c8:	4602      	mov	r2, r0
 801c5ca:	460b      	mov	r3, r1
 801c5cc:	4630      	mov	r0, r6
 801c5ce:	4639      	mov	r1, r7
 801c5d0:	f7e3 fe5c 	bl	800028c <__adddf3>
 801c5d4:	f109 0901 	add.w	r9, r9, #1
 801c5d8:	4606      	mov	r6, r0
 801c5da:	460f      	mov	r7, r1
 801c5dc:	e7e4      	b.n	801c5a8 <__kernel_rem_pio2+0x3c8>
 801c5de:	3d01      	subs	r5, #1
 801c5e0:	e747      	b.n	801c472 <__kernel_rem_pio2+0x292>
 801c5e2:	ec47 6b10 	vmov	d0, r6, r7
 801c5e6:	f1ca 0000 	rsb	r0, sl, #0
 801c5ea:	f7ff fc4d 	bl	801be88 <scalbn>
 801c5ee:	ec57 6b10 	vmov	r6, r7, d0
 801c5f2:	4ba0      	ldr	r3, [pc, #640]	; (801c874 <__kernel_rem_pio2+0x694>)
 801c5f4:	ee10 0a10 	vmov	r0, s0
 801c5f8:	2200      	movs	r2, #0
 801c5fa:	4639      	mov	r1, r7
 801c5fc:	f7e4 fa82 	bl	8000b04 <__aeabi_dcmpge>
 801c600:	b1f8      	cbz	r0, 801c642 <__kernel_rem_pio2+0x462>
 801c602:	4b9d      	ldr	r3, [pc, #628]	; (801c878 <__kernel_rem_pio2+0x698>)
 801c604:	2200      	movs	r2, #0
 801c606:	4630      	mov	r0, r6
 801c608:	4639      	mov	r1, r7
 801c60a:	f7e3 fff5 	bl	80005f8 <__aeabi_dmul>
 801c60e:	f7e4 faa3 	bl	8000b58 <__aeabi_d2iz>
 801c612:	4680      	mov	r8, r0
 801c614:	f7e3 ff86 	bl	8000524 <__aeabi_i2d>
 801c618:	4b96      	ldr	r3, [pc, #600]	; (801c874 <__kernel_rem_pio2+0x694>)
 801c61a:	2200      	movs	r2, #0
 801c61c:	f7e3 ffec 	bl	80005f8 <__aeabi_dmul>
 801c620:	460b      	mov	r3, r1
 801c622:	4602      	mov	r2, r0
 801c624:	4639      	mov	r1, r7
 801c626:	4630      	mov	r0, r6
 801c628:	f7e3 fe2e 	bl	8000288 <__aeabi_dsub>
 801c62c:	f7e4 fa94 	bl	8000b58 <__aeabi_d2iz>
 801c630:	1c65      	adds	r5, r4, #1
 801c632:	ab0c      	add	r3, sp, #48	; 0x30
 801c634:	f10a 0a18 	add.w	sl, sl, #24
 801c638:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801c63c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801c640:	e71f      	b.n	801c482 <__kernel_rem_pio2+0x2a2>
 801c642:	4630      	mov	r0, r6
 801c644:	4639      	mov	r1, r7
 801c646:	f7e4 fa87 	bl	8000b58 <__aeabi_d2iz>
 801c64a:	ab0c      	add	r3, sp, #48	; 0x30
 801c64c:	4625      	mov	r5, r4
 801c64e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801c652:	e716      	b.n	801c482 <__kernel_rem_pio2+0x2a2>
 801c654:	ab0c      	add	r3, sp, #48	; 0x30
 801c656:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801c65a:	f7e3 ff63 	bl	8000524 <__aeabi_i2d>
 801c65e:	4632      	mov	r2, r6
 801c660:	463b      	mov	r3, r7
 801c662:	f7e3 ffc9 	bl	80005f8 <__aeabi_dmul>
 801c666:	4642      	mov	r2, r8
 801c668:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801c66c:	464b      	mov	r3, r9
 801c66e:	4630      	mov	r0, r6
 801c670:	4639      	mov	r1, r7
 801c672:	f7e3 ffc1 	bl	80005f8 <__aeabi_dmul>
 801c676:	3c01      	subs	r4, #1
 801c678:	4606      	mov	r6, r0
 801c67a:	460f      	mov	r7, r1
 801c67c:	e713      	b.n	801c4a6 <__kernel_rem_pio2+0x2c6>
 801c67e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801c682:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801c686:	f7e3 ffb7 	bl	80005f8 <__aeabi_dmul>
 801c68a:	4602      	mov	r2, r0
 801c68c:	460b      	mov	r3, r1
 801c68e:	4648      	mov	r0, r9
 801c690:	4651      	mov	r1, sl
 801c692:	f7e3 fdfb 	bl	800028c <__adddf3>
 801c696:	3701      	adds	r7, #1
 801c698:	4681      	mov	r9, r0
 801c69a:	468a      	mov	sl, r1
 801c69c:	9b00      	ldr	r3, [sp, #0]
 801c69e:	429f      	cmp	r7, r3
 801c6a0:	dc02      	bgt.n	801c6a8 <__kernel_rem_pio2+0x4c8>
 801c6a2:	9b06      	ldr	r3, [sp, #24]
 801c6a4:	429f      	cmp	r7, r3
 801c6a6:	ddea      	ble.n	801c67e <__kernel_rem_pio2+0x49e>
 801c6a8:	9a06      	ldr	r2, [sp, #24]
 801c6aa:	ab48      	add	r3, sp, #288	; 0x120
 801c6ac:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 801c6b0:	e9c6 9a00 	strd	r9, sl, [r6]
 801c6b4:	3c01      	subs	r4, #1
 801c6b6:	e6fa      	b.n	801c4ae <__kernel_rem_pio2+0x2ce>
 801c6b8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801c6ba:	2b02      	cmp	r3, #2
 801c6bc:	dc0b      	bgt.n	801c6d6 <__kernel_rem_pio2+0x4f6>
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	dc39      	bgt.n	801c736 <__kernel_rem_pio2+0x556>
 801c6c2:	d05d      	beq.n	801c780 <__kernel_rem_pio2+0x5a0>
 801c6c4:	9b02      	ldr	r3, [sp, #8]
 801c6c6:	f003 0007 	and.w	r0, r3, #7
 801c6ca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801c6ce:	ecbd 8b02 	vpop	{d8}
 801c6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6d6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801c6d8:	2b03      	cmp	r3, #3
 801c6da:	d1f3      	bne.n	801c6c4 <__kernel_rem_pio2+0x4e4>
 801c6dc:	9b05      	ldr	r3, [sp, #20]
 801c6de:	9500      	str	r5, [sp, #0]
 801c6e0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801c6e4:	eb0d 0403 	add.w	r4, sp, r3
 801c6e8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801c6ec:	46a2      	mov	sl, r4
 801c6ee:	9b00      	ldr	r3, [sp, #0]
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	f1aa 0a08 	sub.w	sl, sl, #8
 801c6f6:	dc69      	bgt.n	801c7cc <__kernel_rem_pio2+0x5ec>
 801c6f8:	46aa      	mov	sl, r5
 801c6fa:	f1ba 0f01 	cmp.w	sl, #1
 801c6fe:	f1a4 0408 	sub.w	r4, r4, #8
 801c702:	f300 8083 	bgt.w	801c80c <__kernel_rem_pio2+0x62c>
 801c706:	9c05      	ldr	r4, [sp, #20]
 801c708:	ab48      	add	r3, sp, #288	; 0x120
 801c70a:	441c      	add	r4, r3
 801c70c:	2000      	movs	r0, #0
 801c70e:	2100      	movs	r1, #0
 801c710:	2d01      	cmp	r5, #1
 801c712:	f300 809a 	bgt.w	801c84a <__kernel_rem_pio2+0x66a>
 801c716:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801c71a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801c71e:	f1bb 0f00 	cmp.w	fp, #0
 801c722:	f040 8098 	bne.w	801c856 <__kernel_rem_pio2+0x676>
 801c726:	9b04      	ldr	r3, [sp, #16]
 801c728:	e9c3 7800 	strd	r7, r8, [r3]
 801c72c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801c730:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801c734:	e7c6      	b.n	801c6c4 <__kernel_rem_pio2+0x4e4>
 801c736:	9e05      	ldr	r6, [sp, #20]
 801c738:	ab48      	add	r3, sp, #288	; 0x120
 801c73a:	441e      	add	r6, r3
 801c73c:	462c      	mov	r4, r5
 801c73e:	2000      	movs	r0, #0
 801c740:	2100      	movs	r1, #0
 801c742:	2c00      	cmp	r4, #0
 801c744:	da33      	bge.n	801c7ae <__kernel_rem_pio2+0x5ce>
 801c746:	f1bb 0f00 	cmp.w	fp, #0
 801c74a:	d036      	beq.n	801c7ba <__kernel_rem_pio2+0x5da>
 801c74c:	4602      	mov	r2, r0
 801c74e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c752:	9c04      	ldr	r4, [sp, #16]
 801c754:	e9c4 2300 	strd	r2, r3, [r4]
 801c758:	4602      	mov	r2, r0
 801c75a:	460b      	mov	r3, r1
 801c75c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801c760:	f7e3 fd92 	bl	8000288 <__aeabi_dsub>
 801c764:	ae4a      	add	r6, sp, #296	; 0x128
 801c766:	2401      	movs	r4, #1
 801c768:	42a5      	cmp	r5, r4
 801c76a:	da29      	bge.n	801c7c0 <__kernel_rem_pio2+0x5e0>
 801c76c:	f1bb 0f00 	cmp.w	fp, #0
 801c770:	d002      	beq.n	801c778 <__kernel_rem_pio2+0x598>
 801c772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c776:	4619      	mov	r1, r3
 801c778:	9b04      	ldr	r3, [sp, #16]
 801c77a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801c77e:	e7a1      	b.n	801c6c4 <__kernel_rem_pio2+0x4e4>
 801c780:	9c05      	ldr	r4, [sp, #20]
 801c782:	ab48      	add	r3, sp, #288	; 0x120
 801c784:	441c      	add	r4, r3
 801c786:	2000      	movs	r0, #0
 801c788:	2100      	movs	r1, #0
 801c78a:	2d00      	cmp	r5, #0
 801c78c:	da09      	bge.n	801c7a2 <__kernel_rem_pio2+0x5c2>
 801c78e:	f1bb 0f00 	cmp.w	fp, #0
 801c792:	d002      	beq.n	801c79a <__kernel_rem_pio2+0x5ba>
 801c794:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c798:	4619      	mov	r1, r3
 801c79a:	9b04      	ldr	r3, [sp, #16]
 801c79c:	e9c3 0100 	strd	r0, r1, [r3]
 801c7a0:	e790      	b.n	801c6c4 <__kernel_rem_pio2+0x4e4>
 801c7a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801c7a6:	f7e3 fd71 	bl	800028c <__adddf3>
 801c7aa:	3d01      	subs	r5, #1
 801c7ac:	e7ed      	b.n	801c78a <__kernel_rem_pio2+0x5aa>
 801c7ae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801c7b2:	f7e3 fd6b 	bl	800028c <__adddf3>
 801c7b6:	3c01      	subs	r4, #1
 801c7b8:	e7c3      	b.n	801c742 <__kernel_rem_pio2+0x562>
 801c7ba:	4602      	mov	r2, r0
 801c7bc:	460b      	mov	r3, r1
 801c7be:	e7c8      	b.n	801c752 <__kernel_rem_pio2+0x572>
 801c7c0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801c7c4:	f7e3 fd62 	bl	800028c <__adddf3>
 801c7c8:	3401      	adds	r4, #1
 801c7ca:	e7cd      	b.n	801c768 <__kernel_rem_pio2+0x588>
 801c7cc:	e9da 8900 	ldrd	r8, r9, [sl]
 801c7d0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801c7d4:	9b00      	ldr	r3, [sp, #0]
 801c7d6:	3b01      	subs	r3, #1
 801c7d8:	9300      	str	r3, [sp, #0]
 801c7da:	4632      	mov	r2, r6
 801c7dc:	463b      	mov	r3, r7
 801c7de:	4640      	mov	r0, r8
 801c7e0:	4649      	mov	r1, r9
 801c7e2:	f7e3 fd53 	bl	800028c <__adddf3>
 801c7e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c7ea:	4602      	mov	r2, r0
 801c7ec:	460b      	mov	r3, r1
 801c7ee:	4640      	mov	r0, r8
 801c7f0:	4649      	mov	r1, r9
 801c7f2:	f7e3 fd49 	bl	8000288 <__aeabi_dsub>
 801c7f6:	4632      	mov	r2, r6
 801c7f8:	463b      	mov	r3, r7
 801c7fa:	f7e3 fd47 	bl	800028c <__adddf3>
 801c7fe:	ed9d 7b06 	vldr	d7, [sp, #24]
 801c802:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801c806:	ed8a 7b00 	vstr	d7, [sl]
 801c80a:	e770      	b.n	801c6ee <__kernel_rem_pio2+0x50e>
 801c80c:	e9d4 8900 	ldrd	r8, r9, [r4]
 801c810:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801c814:	4640      	mov	r0, r8
 801c816:	4632      	mov	r2, r6
 801c818:	463b      	mov	r3, r7
 801c81a:	4649      	mov	r1, r9
 801c81c:	f7e3 fd36 	bl	800028c <__adddf3>
 801c820:	e9cd 0100 	strd	r0, r1, [sp]
 801c824:	4602      	mov	r2, r0
 801c826:	460b      	mov	r3, r1
 801c828:	4640      	mov	r0, r8
 801c82a:	4649      	mov	r1, r9
 801c82c:	f7e3 fd2c 	bl	8000288 <__aeabi_dsub>
 801c830:	4632      	mov	r2, r6
 801c832:	463b      	mov	r3, r7
 801c834:	f7e3 fd2a 	bl	800028c <__adddf3>
 801c838:	ed9d 7b00 	vldr	d7, [sp]
 801c83c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c840:	ed84 7b00 	vstr	d7, [r4]
 801c844:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c848:	e757      	b.n	801c6fa <__kernel_rem_pio2+0x51a>
 801c84a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801c84e:	f7e3 fd1d 	bl	800028c <__adddf3>
 801c852:	3d01      	subs	r5, #1
 801c854:	e75c      	b.n	801c710 <__kernel_rem_pio2+0x530>
 801c856:	9b04      	ldr	r3, [sp, #16]
 801c858:	9a04      	ldr	r2, [sp, #16]
 801c85a:	601f      	str	r7, [r3, #0]
 801c85c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801c860:	605c      	str	r4, [r3, #4]
 801c862:	609d      	str	r5, [r3, #8]
 801c864:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801c868:	60d3      	str	r3, [r2, #12]
 801c86a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c86e:	6110      	str	r0, [r2, #16]
 801c870:	6153      	str	r3, [r2, #20]
 801c872:	e727      	b.n	801c6c4 <__kernel_rem_pio2+0x4e4>
 801c874:	41700000 	.word	0x41700000
 801c878:	3e700000 	.word	0x3e700000
 801c87c:	00000000 	.word	0x00000000

0801c880 <__ieee754_acos>:
 801c880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c884:	ec55 4b10 	vmov	r4, r5, d0
 801c888:	49b7      	ldr	r1, [pc, #732]	; (801cb68 <__ieee754_acos+0x2e8>)
 801c88a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c88e:	428b      	cmp	r3, r1
 801c890:	dd1b      	ble.n	801c8ca <__ieee754_acos+0x4a>
 801c892:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801c896:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801c89a:	4323      	orrs	r3, r4
 801c89c:	d106      	bne.n	801c8ac <__ieee754_acos+0x2c>
 801c89e:	2d00      	cmp	r5, #0
 801c8a0:	f300 8211 	bgt.w	801ccc6 <__ieee754_acos+0x446>
 801c8a4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 801cb00 <__ieee754_acos+0x280>
 801c8a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8ac:	ee10 2a10 	vmov	r2, s0
 801c8b0:	462b      	mov	r3, r5
 801c8b2:	ee10 0a10 	vmov	r0, s0
 801c8b6:	4629      	mov	r1, r5
 801c8b8:	f7e3 fce6 	bl	8000288 <__aeabi_dsub>
 801c8bc:	4602      	mov	r2, r0
 801c8be:	460b      	mov	r3, r1
 801c8c0:	f7e3 ffc4 	bl	800084c <__aeabi_ddiv>
 801c8c4:	ec41 0b10 	vmov	d0, r0, r1
 801c8c8:	e7ee      	b.n	801c8a8 <__ieee754_acos+0x28>
 801c8ca:	49a8      	ldr	r1, [pc, #672]	; (801cb6c <__ieee754_acos+0x2ec>)
 801c8cc:	428b      	cmp	r3, r1
 801c8ce:	f300 8087 	bgt.w	801c9e0 <__ieee754_acos+0x160>
 801c8d2:	4aa7      	ldr	r2, [pc, #668]	; (801cb70 <__ieee754_acos+0x2f0>)
 801c8d4:	4293      	cmp	r3, r2
 801c8d6:	f340 81f9 	ble.w	801cccc <__ieee754_acos+0x44c>
 801c8da:	ee10 2a10 	vmov	r2, s0
 801c8de:	ee10 0a10 	vmov	r0, s0
 801c8e2:	462b      	mov	r3, r5
 801c8e4:	4629      	mov	r1, r5
 801c8e6:	f7e3 fe87 	bl	80005f8 <__aeabi_dmul>
 801c8ea:	a387      	add	r3, pc, #540	; (adr r3, 801cb08 <__ieee754_acos+0x288>)
 801c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8f0:	4606      	mov	r6, r0
 801c8f2:	460f      	mov	r7, r1
 801c8f4:	f7e3 fe80 	bl	80005f8 <__aeabi_dmul>
 801c8f8:	a385      	add	r3, pc, #532	; (adr r3, 801cb10 <__ieee754_acos+0x290>)
 801c8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8fe:	f7e3 fcc5 	bl	800028c <__adddf3>
 801c902:	4632      	mov	r2, r6
 801c904:	463b      	mov	r3, r7
 801c906:	f7e3 fe77 	bl	80005f8 <__aeabi_dmul>
 801c90a:	a383      	add	r3, pc, #524	; (adr r3, 801cb18 <__ieee754_acos+0x298>)
 801c90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c910:	f7e3 fcba 	bl	8000288 <__aeabi_dsub>
 801c914:	4632      	mov	r2, r6
 801c916:	463b      	mov	r3, r7
 801c918:	f7e3 fe6e 	bl	80005f8 <__aeabi_dmul>
 801c91c:	a380      	add	r3, pc, #512	; (adr r3, 801cb20 <__ieee754_acos+0x2a0>)
 801c91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c922:	f7e3 fcb3 	bl	800028c <__adddf3>
 801c926:	4632      	mov	r2, r6
 801c928:	463b      	mov	r3, r7
 801c92a:	f7e3 fe65 	bl	80005f8 <__aeabi_dmul>
 801c92e:	a37e      	add	r3, pc, #504	; (adr r3, 801cb28 <__ieee754_acos+0x2a8>)
 801c930:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c934:	f7e3 fca8 	bl	8000288 <__aeabi_dsub>
 801c938:	4632      	mov	r2, r6
 801c93a:	463b      	mov	r3, r7
 801c93c:	f7e3 fe5c 	bl	80005f8 <__aeabi_dmul>
 801c940:	a37b      	add	r3, pc, #492	; (adr r3, 801cb30 <__ieee754_acos+0x2b0>)
 801c942:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c946:	f7e3 fca1 	bl	800028c <__adddf3>
 801c94a:	4632      	mov	r2, r6
 801c94c:	463b      	mov	r3, r7
 801c94e:	f7e3 fe53 	bl	80005f8 <__aeabi_dmul>
 801c952:	a379      	add	r3, pc, #484	; (adr r3, 801cb38 <__ieee754_acos+0x2b8>)
 801c954:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c958:	4680      	mov	r8, r0
 801c95a:	4689      	mov	r9, r1
 801c95c:	4630      	mov	r0, r6
 801c95e:	4639      	mov	r1, r7
 801c960:	f7e3 fe4a 	bl	80005f8 <__aeabi_dmul>
 801c964:	a376      	add	r3, pc, #472	; (adr r3, 801cb40 <__ieee754_acos+0x2c0>)
 801c966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c96a:	f7e3 fc8d 	bl	8000288 <__aeabi_dsub>
 801c96e:	4632      	mov	r2, r6
 801c970:	463b      	mov	r3, r7
 801c972:	f7e3 fe41 	bl	80005f8 <__aeabi_dmul>
 801c976:	a374      	add	r3, pc, #464	; (adr r3, 801cb48 <__ieee754_acos+0x2c8>)
 801c978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c97c:	f7e3 fc86 	bl	800028c <__adddf3>
 801c980:	4632      	mov	r2, r6
 801c982:	463b      	mov	r3, r7
 801c984:	f7e3 fe38 	bl	80005f8 <__aeabi_dmul>
 801c988:	a371      	add	r3, pc, #452	; (adr r3, 801cb50 <__ieee754_acos+0x2d0>)
 801c98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c98e:	f7e3 fc7b 	bl	8000288 <__aeabi_dsub>
 801c992:	4632      	mov	r2, r6
 801c994:	463b      	mov	r3, r7
 801c996:	f7e3 fe2f 	bl	80005f8 <__aeabi_dmul>
 801c99a:	4b76      	ldr	r3, [pc, #472]	; (801cb74 <__ieee754_acos+0x2f4>)
 801c99c:	2200      	movs	r2, #0
 801c99e:	f7e3 fc75 	bl	800028c <__adddf3>
 801c9a2:	4602      	mov	r2, r0
 801c9a4:	460b      	mov	r3, r1
 801c9a6:	4640      	mov	r0, r8
 801c9a8:	4649      	mov	r1, r9
 801c9aa:	f7e3 ff4f 	bl	800084c <__aeabi_ddiv>
 801c9ae:	4622      	mov	r2, r4
 801c9b0:	462b      	mov	r3, r5
 801c9b2:	f7e3 fe21 	bl	80005f8 <__aeabi_dmul>
 801c9b6:	4602      	mov	r2, r0
 801c9b8:	460b      	mov	r3, r1
 801c9ba:	a167      	add	r1, pc, #412	; (adr r1, 801cb58 <__ieee754_acos+0x2d8>)
 801c9bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c9c0:	f7e3 fc62 	bl	8000288 <__aeabi_dsub>
 801c9c4:	4602      	mov	r2, r0
 801c9c6:	460b      	mov	r3, r1
 801c9c8:	4620      	mov	r0, r4
 801c9ca:	4629      	mov	r1, r5
 801c9cc:	f7e3 fc5c 	bl	8000288 <__aeabi_dsub>
 801c9d0:	4602      	mov	r2, r0
 801c9d2:	460b      	mov	r3, r1
 801c9d4:	a162      	add	r1, pc, #392	; (adr r1, 801cb60 <__ieee754_acos+0x2e0>)
 801c9d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c9da:	f7e3 fc55 	bl	8000288 <__aeabi_dsub>
 801c9de:	e771      	b.n	801c8c4 <__ieee754_acos+0x44>
 801c9e0:	2d00      	cmp	r5, #0
 801c9e2:	f280 80cb 	bge.w	801cb7c <__ieee754_acos+0x2fc>
 801c9e6:	ee10 0a10 	vmov	r0, s0
 801c9ea:	4b62      	ldr	r3, [pc, #392]	; (801cb74 <__ieee754_acos+0x2f4>)
 801c9ec:	2200      	movs	r2, #0
 801c9ee:	4629      	mov	r1, r5
 801c9f0:	f7e3 fc4c 	bl	800028c <__adddf3>
 801c9f4:	4b60      	ldr	r3, [pc, #384]	; (801cb78 <__ieee754_acos+0x2f8>)
 801c9f6:	2200      	movs	r2, #0
 801c9f8:	f7e3 fdfe 	bl	80005f8 <__aeabi_dmul>
 801c9fc:	a342      	add	r3, pc, #264	; (adr r3, 801cb08 <__ieee754_acos+0x288>)
 801c9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca02:	4604      	mov	r4, r0
 801ca04:	460d      	mov	r5, r1
 801ca06:	f7e3 fdf7 	bl	80005f8 <__aeabi_dmul>
 801ca0a:	a341      	add	r3, pc, #260	; (adr r3, 801cb10 <__ieee754_acos+0x290>)
 801ca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca10:	f7e3 fc3c 	bl	800028c <__adddf3>
 801ca14:	4622      	mov	r2, r4
 801ca16:	462b      	mov	r3, r5
 801ca18:	f7e3 fdee 	bl	80005f8 <__aeabi_dmul>
 801ca1c:	a33e      	add	r3, pc, #248	; (adr r3, 801cb18 <__ieee754_acos+0x298>)
 801ca1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca22:	f7e3 fc31 	bl	8000288 <__aeabi_dsub>
 801ca26:	4622      	mov	r2, r4
 801ca28:	462b      	mov	r3, r5
 801ca2a:	f7e3 fde5 	bl	80005f8 <__aeabi_dmul>
 801ca2e:	a33c      	add	r3, pc, #240	; (adr r3, 801cb20 <__ieee754_acos+0x2a0>)
 801ca30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca34:	f7e3 fc2a 	bl	800028c <__adddf3>
 801ca38:	4622      	mov	r2, r4
 801ca3a:	462b      	mov	r3, r5
 801ca3c:	f7e3 fddc 	bl	80005f8 <__aeabi_dmul>
 801ca40:	a339      	add	r3, pc, #228	; (adr r3, 801cb28 <__ieee754_acos+0x2a8>)
 801ca42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca46:	f7e3 fc1f 	bl	8000288 <__aeabi_dsub>
 801ca4a:	4622      	mov	r2, r4
 801ca4c:	462b      	mov	r3, r5
 801ca4e:	f7e3 fdd3 	bl	80005f8 <__aeabi_dmul>
 801ca52:	a337      	add	r3, pc, #220	; (adr r3, 801cb30 <__ieee754_acos+0x2b0>)
 801ca54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca58:	f7e3 fc18 	bl	800028c <__adddf3>
 801ca5c:	4622      	mov	r2, r4
 801ca5e:	462b      	mov	r3, r5
 801ca60:	f7e3 fdca 	bl	80005f8 <__aeabi_dmul>
 801ca64:	ec45 4b10 	vmov	d0, r4, r5
 801ca68:	4680      	mov	r8, r0
 801ca6a:	4689      	mov	r9, r1
 801ca6c:	f7ff fadc 	bl	801c028 <__ieee754_sqrt>
 801ca70:	a331      	add	r3, pc, #196	; (adr r3, 801cb38 <__ieee754_acos+0x2b8>)
 801ca72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca76:	4620      	mov	r0, r4
 801ca78:	4629      	mov	r1, r5
 801ca7a:	ec57 6b10 	vmov	r6, r7, d0
 801ca7e:	f7e3 fdbb 	bl	80005f8 <__aeabi_dmul>
 801ca82:	a32f      	add	r3, pc, #188	; (adr r3, 801cb40 <__ieee754_acos+0x2c0>)
 801ca84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca88:	f7e3 fbfe 	bl	8000288 <__aeabi_dsub>
 801ca8c:	4622      	mov	r2, r4
 801ca8e:	462b      	mov	r3, r5
 801ca90:	f7e3 fdb2 	bl	80005f8 <__aeabi_dmul>
 801ca94:	a32c      	add	r3, pc, #176	; (adr r3, 801cb48 <__ieee754_acos+0x2c8>)
 801ca96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca9a:	f7e3 fbf7 	bl	800028c <__adddf3>
 801ca9e:	4622      	mov	r2, r4
 801caa0:	462b      	mov	r3, r5
 801caa2:	f7e3 fda9 	bl	80005f8 <__aeabi_dmul>
 801caa6:	a32a      	add	r3, pc, #168	; (adr r3, 801cb50 <__ieee754_acos+0x2d0>)
 801caa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caac:	f7e3 fbec 	bl	8000288 <__aeabi_dsub>
 801cab0:	4622      	mov	r2, r4
 801cab2:	462b      	mov	r3, r5
 801cab4:	f7e3 fda0 	bl	80005f8 <__aeabi_dmul>
 801cab8:	4b2e      	ldr	r3, [pc, #184]	; (801cb74 <__ieee754_acos+0x2f4>)
 801caba:	2200      	movs	r2, #0
 801cabc:	f7e3 fbe6 	bl	800028c <__adddf3>
 801cac0:	4602      	mov	r2, r0
 801cac2:	460b      	mov	r3, r1
 801cac4:	4640      	mov	r0, r8
 801cac6:	4649      	mov	r1, r9
 801cac8:	f7e3 fec0 	bl	800084c <__aeabi_ddiv>
 801cacc:	4632      	mov	r2, r6
 801cace:	463b      	mov	r3, r7
 801cad0:	f7e3 fd92 	bl	80005f8 <__aeabi_dmul>
 801cad4:	a320      	add	r3, pc, #128	; (adr r3, 801cb58 <__ieee754_acos+0x2d8>)
 801cad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cada:	f7e3 fbd5 	bl	8000288 <__aeabi_dsub>
 801cade:	4632      	mov	r2, r6
 801cae0:	463b      	mov	r3, r7
 801cae2:	f7e3 fbd3 	bl	800028c <__adddf3>
 801cae6:	4602      	mov	r2, r0
 801cae8:	460b      	mov	r3, r1
 801caea:	f7e3 fbcf 	bl	800028c <__adddf3>
 801caee:	4602      	mov	r2, r0
 801caf0:	460b      	mov	r3, r1
 801caf2:	a103      	add	r1, pc, #12	; (adr r1, 801cb00 <__ieee754_acos+0x280>)
 801caf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801caf8:	e76f      	b.n	801c9da <__ieee754_acos+0x15a>
 801cafa:	bf00      	nop
 801cafc:	f3af 8000 	nop.w
 801cb00:	54442d18 	.word	0x54442d18
 801cb04:	400921fb 	.word	0x400921fb
 801cb08:	0dfdf709 	.word	0x0dfdf709
 801cb0c:	3f023de1 	.word	0x3f023de1
 801cb10:	7501b288 	.word	0x7501b288
 801cb14:	3f49efe0 	.word	0x3f49efe0
 801cb18:	b5688f3b 	.word	0xb5688f3b
 801cb1c:	3fa48228 	.word	0x3fa48228
 801cb20:	0e884455 	.word	0x0e884455
 801cb24:	3fc9c155 	.word	0x3fc9c155
 801cb28:	03eb6f7d 	.word	0x03eb6f7d
 801cb2c:	3fd4d612 	.word	0x3fd4d612
 801cb30:	55555555 	.word	0x55555555
 801cb34:	3fc55555 	.word	0x3fc55555
 801cb38:	b12e9282 	.word	0xb12e9282
 801cb3c:	3fb3b8c5 	.word	0x3fb3b8c5
 801cb40:	1b8d0159 	.word	0x1b8d0159
 801cb44:	3fe6066c 	.word	0x3fe6066c
 801cb48:	9c598ac8 	.word	0x9c598ac8
 801cb4c:	40002ae5 	.word	0x40002ae5
 801cb50:	1c8a2d4b 	.word	0x1c8a2d4b
 801cb54:	40033a27 	.word	0x40033a27
 801cb58:	33145c07 	.word	0x33145c07
 801cb5c:	3c91a626 	.word	0x3c91a626
 801cb60:	54442d18 	.word	0x54442d18
 801cb64:	3ff921fb 	.word	0x3ff921fb
 801cb68:	3fefffff 	.word	0x3fefffff
 801cb6c:	3fdfffff 	.word	0x3fdfffff
 801cb70:	3c600000 	.word	0x3c600000
 801cb74:	3ff00000 	.word	0x3ff00000
 801cb78:	3fe00000 	.word	0x3fe00000
 801cb7c:	ee10 2a10 	vmov	r2, s0
 801cb80:	462b      	mov	r3, r5
 801cb82:	496d      	ldr	r1, [pc, #436]	; (801cd38 <__ieee754_acos+0x4b8>)
 801cb84:	2000      	movs	r0, #0
 801cb86:	f7e3 fb7f 	bl	8000288 <__aeabi_dsub>
 801cb8a:	4b6c      	ldr	r3, [pc, #432]	; (801cd3c <__ieee754_acos+0x4bc>)
 801cb8c:	2200      	movs	r2, #0
 801cb8e:	f7e3 fd33 	bl	80005f8 <__aeabi_dmul>
 801cb92:	4604      	mov	r4, r0
 801cb94:	460d      	mov	r5, r1
 801cb96:	ec45 4b10 	vmov	d0, r4, r5
 801cb9a:	f7ff fa45 	bl	801c028 <__ieee754_sqrt>
 801cb9e:	a34e      	add	r3, pc, #312	; (adr r3, 801ccd8 <__ieee754_acos+0x458>)
 801cba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cba4:	4620      	mov	r0, r4
 801cba6:	4629      	mov	r1, r5
 801cba8:	ec59 8b10 	vmov	r8, r9, d0
 801cbac:	f7e3 fd24 	bl	80005f8 <__aeabi_dmul>
 801cbb0:	a34b      	add	r3, pc, #300	; (adr r3, 801cce0 <__ieee754_acos+0x460>)
 801cbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbb6:	f7e3 fb69 	bl	800028c <__adddf3>
 801cbba:	4622      	mov	r2, r4
 801cbbc:	462b      	mov	r3, r5
 801cbbe:	f7e3 fd1b 	bl	80005f8 <__aeabi_dmul>
 801cbc2:	a349      	add	r3, pc, #292	; (adr r3, 801cce8 <__ieee754_acos+0x468>)
 801cbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbc8:	f7e3 fb5e 	bl	8000288 <__aeabi_dsub>
 801cbcc:	4622      	mov	r2, r4
 801cbce:	462b      	mov	r3, r5
 801cbd0:	f7e3 fd12 	bl	80005f8 <__aeabi_dmul>
 801cbd4:	a346      	add	r3, pc, #280	; (adr r3, 801ccf0 <__ieee754_acos+0x470>)
 801cbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbda:	f7e3 fb57 	bl	800028c <__adddf3>
 801cbde:	4622      	mov	r2, r4
 801cbe0:	462b      	mov	r3, r5
 801cbe2:	f7e3 fd09 	bl	80005f8 <__aeabi_dmul>
 801cbe6:	a344      	add	r3, pc, #272	; (adr r3, 801ccf8 <__ieee754_acos+0x478>)
 801cbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbec:	f7e3 fb4c 	bl	8000288 <__aeabi_dsub>
 801cbf0:	4622      	mov	r2, r4
 801cbf2:	462b      	mov	r3, r5
 801cbf4:	f7e3 fd00 	bl	80005f8 <__aeabi_dmul>
 801cbf8:	a341      	add	r3, pc, #260	; (adr r3, 801cd00 <__ieee754_acos+0x480>)
 801cbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbfe:	f7e3 fb45 	bl	800028c <__adddf3>
 801cc02:	4622      	mov	r2, r4
 801cc04:	462b      	mov	r3, r5
 801cc06:	f7e3 fcf7 	bl	80005f8 <__aeabi_dmul>
 801cc0a:	a33f      	add	r3, pc, #252	; (adr r3, 801cd08 <__ieee754_acos+0x488>)
 801cc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc10:	4682      	mov	sl, r0
 801cc12:	468b      	mov	fp, r1
 801cc14:	4620      	mov	r0, r4
 801cc16:	4629      	mov	r1, r5
 801cc18:	f7e3 fcee 	bl	80005f8 <__aeabi_dmul>
 801cc1c:	a33c      	add	r3, pc, #240	; (adr r3, 801cd10 <__ieee754_acos+0x490>)
 801cc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc22:	f7e3 fb31 	bl	8000288 <__aeabi_dsub>
 801cc26:	4622      	mov	r2, r4
 801cc28:	462b      	mov	r3, r5
 801cc2a:	f7e3 fce5 	bl	80005f8 <__aeabi_dmul>
 801cc2e:	a33a      	add	r3, pc, #232	; (adr r3, 801cd18 <__ieee754_acos+0x498>)
 801cc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc34:	f7e3 fb2a 	bl	800028c <__adddf3>
 801cc38:	4622      	mov	r2, r4
 801cc3a:	462b      	mov	r3, r5
 801cc3c:	f7e3 fcdc 	bl	80005f8 <__aeabi_dmul>
 801cc40:	a337      	add	r3, pc, #220	; (adr r3, 801cd20 <__ieee754_acos+0x4a0>)
 801cc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc46:	f7e3 fb1f 	bl	8000288 <__aeabi_dsub>
 801cc4a:	4622      	mov	r2, r4
 801cc4c:	462b      	mov	r3, r5
 801cc4e:	f7e3 fcd3 	bl	80005f8 <__aeabi_dmul>
 801cc52:	4b39      	ldr	r3, [pc, #228]	; (801cd38 <__ieee754_acos+0x4b8>)
 801cc54:	2200      	movs	r2, #0
 801cc56:	f7e3 fb19 	bl	800028c <__adddf3>
 801cc5a:	4602      	mov	r2, r0
 801cc5c:	460b      	mov	r3, r1
 801cc5e:	4650      	mov	r0, sl
 801cc60:	4659      	mov	r1, fp
 801cc62:	f7e3 fdf3 	bl	800084c <__aeabi_ddiv>
 801cc66:	4642      	mov	r2, r8
 801cc68:	464b      	mov	r3, r9
 801cc6a:	f7e3 fcc5 	bl	80005f8 <__aeabi_dmul>
 801cc6e:	2600      	movs	r6, #0
 801cc70:	4682      	mov	sl, r0
 801cc72:	468b      	mov	fp, r1
 801cc74:	4632      	mov	r2, r6
 801cc76:	464b      	mov	r3, r9
 801cc78:	4630      	mov	r0, r6
 801cc7a:	4649      	mov	r1, r9
 801cc7c:	f7e3 fcbc 	bl	80005f8 <__aeabi_dmul>
 801cc80:	4602      	mov	r2, r0
 801cc82:	460b      	mov	r3, r1
 801cc84:	4620      	mov	r0, r4
 801cc86:	4629      	mov	r1, r5
 801cc88:	f7e3 fafe 	bl	8000288 <__aeabi_dsub>
 801cc8c:	4632      	mov	r2, r6
 801cc8e:	4604      	mov	r4, r0
 801cc90:	460d      	mov	r5, r1
 801cc92:	464b      	mov	r3, r9
 801cc94:	4640      	mov	r0, r8
 801cc96:	4649      	mov	r1, r9
 801cc98:	f7e3 faf8 	bl	800028c <__adddf3>
 801cc9c:	4602      	mov	r2, r0
 801cc9e:	460b      	mov	r3, r1
 801cca0:	4620      	mov	r0, r4
 801cca2:	4629      	mov	r1, r5
 801cca4:	f7e3 fdd2 	bl	800084c <__aeabi_ddiv>
 801cca8:	4602      	mov	r2, r0
 801ccaa:	460b      	mov	r3, r1
 801ccac:	4650      	mov	r0, sl
 801ccae:	4659      	mov	r1, fp
 801ccb0:	f7e3 faec 	bl	800028c <__adddf3>
 801ccb4:	4632      	mov	r2, r6
 801ccb6:	464b      	mov	r3, r9
 801ccb8:	f7e3 fae8 	bl	800028c <__adddf3>
 801ccbc:	4602      	mov	r2, r0
 801ccbe:	460b      	mov	r3, r1
 801ccc0:	f7e3 fae4 	bl	800028c <__adddf3>
 801ccc4:	e5fe      	b.n	801c8c4 <__ieee754_acos+0x44>
 801ccc6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801cd28 <__ieee754_acos+0x4a8>
 801ccca:	e5ed      	b.n	801c8a8 <__ieee754_acos+0x28>
 801cccc:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801cd30 <__ieee754_acos+0x4b0>
 801ccd0:	e5ea      	b.n	801c8a8 <__ieee754_acos+0x28>
 801ccd2:	bf00      	nop
 801ccd4:	f3af 8000 	nop.w
 801ccd8:	0dfdf709 	.word	0x0dfdf709
 801ccdc:	3f023de1 	.word	0x3f023de1
 801cce0:	7501b288 	.word	0x7501b288
 801cce4:	3f49efe0 	.word	0x3f49efe0
 801cce8:	b5688f3b 	.word	0xb5688f3b
 801ccec:	3fa48228 	.word	0x3fa48228
 801ccf0:	0e884455 	.word	0x0e884455
 801ccf4:	3fc9c155 	.word	0x3fc9c155
 801ccf8:	03eb6f7d 	.word	0x03eb6f7d
 801ccfc:	3fd4d612 	.word	0x3fd4d612
 801cd00:	55555555 	.word	0x55555555
 801cd04:	3fc55555 	.word	0x3fc55555
 801cd08:	b12e9282 	.word	0xb12e9282
 801cd0c:	3fb3b8c5 	.word	0x3fb3b8c5
 801cd10:	1b8d0159 	.word	0x1b8d0159
 801cd14:	3fe6066c 	.word	0x3fe6066c
 801cd18:	9c598ac8 	.word	0x9c598ac8
 801cd1c:	40002ae5 	.word	0x40002ae5
 801cd20:	1c8a2d4b 	.word	0x1c8a2d4b
 801cd24:	40033a27 	.word	0x40033a27
	...
 801cd30:	54442d18 	.word	0x54442d18
 801cd34:	3ff921fb 	.word	0x3ff921fb
 801cd38:	3ff00000 	.word	0x3ff00000
 801cd3c:	3fe00000 	.word	0x3fe00000

0801cd40 <_init>:
 801cd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd42:	bf00      	nop
 801cd44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cd46:	bc08      	pop	{r3}
 801cd48:	469e      	mov	lr, r3
 801cd4a:	4770      	bx	lr

0801cd4c <_fini>:
 801cd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd4e:	bf00      	nop
 801cd50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cd52:	bc08      	pop	{r3}
 801cd54:	469e      	mov	lr, r3
 801cd56:	4770      	bx	lr
