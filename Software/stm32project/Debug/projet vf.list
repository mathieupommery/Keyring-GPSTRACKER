
projet vf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b880  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002578  0801ba10  0801ba10  0002ba10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801df88  0801df88  00030320  2**0
                  CONTENTS
  4 .ARM          00000008  0801df88  0801df88  0002df88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801df90  0801df90  00030320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801df90  0801df90  0002df90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801df94  0801df94  0002df94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000320  20000000  0801df98  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002124  20000320  0801e2b8  00030320  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002444  0801e2b8  00032444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030320  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f7e4  00000000  00000000  00030393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000068e3  00000000  00000000  0005fb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002680  00000000  00000000  00066460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d87  00000000  00000000  00068ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002aa28  00000000  00000000  0006a867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032b8a  00000000  00000000  0009528f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea2f1  00000000  00000000  000c7e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000bf44  00000000  00000000  001b210c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001be050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000320 	.word	0x20000320
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b9f8 	.word	0x0801b9f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000324 	.word	0x20000324
 80001cc:	0801b9f8 	.word	0x0801b9f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <PADS_ReadReg>:
 */
static inline int8_t PADS_ReadReg(WE_sensorInterface_t* sensorInterface,
                                  uint8_t regAdr,
                                  uint16_t numBytesToRead,
                                  uint8_t *data)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	72fb      	strb	r3, [r7, #11]
 8000ffe:	4613      	mov	r3, r2
 8001000:	813b      	strh	r3, [r7, #8]
  return WE_ReadReg(sensorInterface, regAdr, numBytesToRead, data);
 8001002:	893a      	ldrh	r2, [r7, #8]
 8001004:	7af9      	ldrb	r1, [r7, #11]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f001 fb41 	bl	8002690 <WE_ReadReg>
 800100e:	4603      	mov	r3, r0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <PADS_WriteReg>:
 */
static inline int8_t PADS_WriteReg(WE_sensorInterface_t* sensorInterface,
                                   uint8_t regAdr,
                                   uint16_t numBytesToWrite,
                                   uint8_t *data)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	72fb      	strb	r3, [r7, #11]
 8001026:	4613      	mov	r3, r2
 8001028:	813b      	strh	r3, [r7, #8]
  return WE_WriteReg(sensorInterface, regAdr, numBytesToWrite, data);
 800102a:	893a      	ldrh	r2, [r7, #8]
 800102c:	7af9      	ldrb	r1, [r7, #11]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f001 fc39 	bl	80028a8 <WE_WriteReg>
 8001036:	4603      	mov	r3, r0
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <PADS_getDefaultInterface>:
 * @brief Returns the default sensor interface configuration.
 * @param[out] sensorInterface Sensor interface configuration (output parameter)
 * @return Error code
 */
int8_t PADS_getDefaultInterface(WE_sensorInterface_t* sensorInterface)
{
 8001040:	b4b0      	push	{r4, r5, r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  *sensorInterface = padsDefaultSensorInterface;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a07      	ldr	r2, [pc, #28]	; (8001068 <PADS_getDefaultInterface+0x28>)
 800104c:	461c      	mov	r4, r3
 800104e:	4615      	mov	r5, r2
 8001050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001054:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001058:	e884 0003 	stmia.w	r4, {r0, r1}
  return WE_SUCCESS;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bcb0      	pop	{r4, r5, r7}
 8001066:	4770      	bx	lr
 8001068:	20000000 	.word	0x20000000

0800106c <PADS_getDeviceID>:
 * @param[in] sensorInterface Pointer to sensor interface
 * @param[out] deviceID The returned device ID.
 * @retval Error code
 */
int8_t PADS_getDeviceID(WE_sensorInterface_t* sensorInterface, uint8_t *deviceID)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  return PADS_ReadReg(sensorInterface, PADS_DEVICE_ID_REG, 1, deviceID);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2201      	movs	r2, #1
 800107a:	210f      	movs	r1, #15
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffb7 	bl	8000ff0 <PADS_ReadReg>
 8001082:	4603      	mov	r3, r0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <PADS_softReset>:
 * @param[in] sensorInterface Pointer to sensor interface
 * @param[in] swReset Software reset state
 * @retval Error code
 */
int8_t PADS_softReset(WE_sensorInterface_t* sensorInterface, PADS_state_t swReset)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	70fb      	strb	r3, [r7, #3]
  PADS_ctrl2_t ctrl2;

  if (WE_FAIL == PADS_ReadReg(sensorInterface, PADS_CTRL_2_REG, 1, (uint8_t *) &ctrl2))
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2201      	movs	r2, #1
 800109e:	2111      	movs	r1, #17
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ffa5 	bl	8000ff0 <PADS_ReadReg>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d102      	bne.n	80010b4 <PADS_softReset+0x28>
  {
    return WE_FAIL;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	e00f      	b.n	80010d4 <PADS_softReset+0x48>
  }

  ctrl2.softwareReset = swReset;
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	7b3b      	ldrb	r3, [r7, #12]
 80010be:	f362 0382 	bfi	r3, r2, #2, #1
 80010c2:	733b      	strb	r3, [r7, #12]

  return PADS_WriteReg(sensorInterface, PADS_CTRL_2_REG, 1, (uint8_t *) &ctrl2);
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2201      	movs	r2, #1
 80010ca:	2111      	movs	r1, #17
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ffa3 	bl	8001018 <PADS_WriteReg>
 80010d2:	4603      	mov	r3, r0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <PADS_getSoftResetState>:
 * @param[in] sensorInterface Pointer to sensor interface
 * @param[out] swReset The returned software reset state.
 * @retval Error code
 */
int8_t PADS_getSoftResetState(WE_sensorInterface_t* sensorInterface, PADS_state_t *swReset)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  PADS_ctrl2_t ctrl2;

  if (WE_FAIL == PADS_ReadReg(sensorInterface, PADS_CTRL_2_REG, 1, (uint8_t *) &ctrl2))
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	2201      	movs	r2, #1
 80010ec:	2111      	movs	r1, #17
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ff7e 	bl	8000ff0 <PADS_ReadReg>
 80010f4:	4603      	mov	r3, r0
 80010f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fa:	d102      	bne.n	8001102 <PADS_getSoftResetState+0x26>
  {
    return WE_FAIL;
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	e007      	b.n	8001112 <PADS_getSoftResetState+0x36>
  }
  *swReset = (PADS_state_t) ctrl2.softwareReset;
 8001102:	7b3b      	ldrb	r3, [r7, #12]
 8001104:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	461a      	mov	r2, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	701a      	strb	r2, [r3, #0]

  return WE_SUCCESS;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <PADS_getRawPressure>:
 * @param[in] sensorInterface Pointer to sensor interface
 * @param[out] rawPres The returned raw pressure
 * @retval Error code
 */
int8_t PADS_getRawPressure(WE_sensorInterface_t* sensorInterface, int32_t *rawPres)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint8_t tmp[3] = {0};
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <PADS_getRawPressure+0x70>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	81bb      	strh	r3, [r7, #12]
 800112c:	2300      	movs	r3, #0
 800112e:	73bb      	strb	r3, [r7, #14]

  if (WE_FAIL == PADS_ReadReg(sensorInterface, PADS_DATA_P_XL_REG, 3, tmp))
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2203      	movs	r2, #3
 8001136:	2128      	movs	r1, #40	; 0x28
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff59 	bl	8000ff0 <PADS_ReadReg>
 800113e:	4603      	mov	r3, r0
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d102      	bne.n	800114c <PADS_getRawPressure+0x30>
  {
    return WE_FAIL;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	e01b      	b.n	8001184 <PADS_getRawPressure+0x68>
  }

  *rawPres = (int32_t) (tmp[2] << 24);
 800114c:	7bbb      	ldrb	r3, [r7, #14]
 800114e:	061a      	lsls	r2, r3, #24
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	601a      	str	r2, [r3, #0]
  *rawPres |= (int32_t) (tmp[1] << 16);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	7b7b      	ldrb	r3, [r7, #13]
 800115a:	041b      	lsls	r3, r3, #16
 800115c:	431a      	orrs	r2, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	601a      	str	r2, [r3, #0]
  *rawPres |= (int32_t) (tmp[0] << 8);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	7b3b      	ldrb	r3, [r7, #12]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	431a      	orrs	r2, r3
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	601a      	str	r2, [r3, #0]
  *rawPres /= 256;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	da00      	bge.n	800117a <PADS_getRawPressure+0x5e>
 8001178:	33ff      	adds	r3, #255	; 0xff
 800117a:	121b      	asrs	r3, r3, #8
 800117c:	461a      	mov	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	601a      	str	r2, [r3, #0]

  return WE_SUCCESS;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	0801ba10 	.word	0x0801ba10

08001190 <PADS_getRawTemperature>:
 * @param[in] sensorInterface Pointer to sensor interface
 * @param[out] rawTemp The returned raw temperature
 * @retval Error code
 */
int8_t PADS_getRawTemperature(WE_sensorInterface_t* sensorInterface, int16_t *rawTemp)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint8_t tmp[2] = {0};
 800119a:	2300      	movs	r3, #0
 800119c:	81bb      	strh	r3, [r7, #12]

  if (WE_FAIL == PADS_ReadReg(sensorInterface, PADS_DATA_T_L_REG, 2, tmp))
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	2202      	movs	r2, #2
 80011a4:	212b      	movs	r1, #43	; 0x2b
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ff22 	bl	8000ff0 <PADS_ReadReg>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b2:	d102      	bne.n	80011ba <PADS_getRawTemperature+0x2a>
  {
    return WE_FAIL;
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	e00e      	b.n	80011d8 <PADS_getRawTemperature+0x48>
  }

  *rawTemp = (int16_t) (tmp[1] << 8);
 80011ba:	7b7b      	ldrb	r3, [r7, #13]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21a      	sxth	r2, r3
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	801a      	strh	r2, [r3, #0]
  *rawTemp |= (int16_t) tmp[0];
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011ca:	7b3b      	ldrb	r3, [r7, #12]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	801a      	strh	r2, [r3, #0]

  return WE_SUCCESS;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <PADS_getPressure_int>:
 * @param[in] sensorInterface Pointer to sensor interface
 * @param[out] pressPa The returned pressure measurement
 * @retval Error code
 */
int8_t PADS_getPressure_int(WE_sensorInterface_t* sensorInterface, int32_t *pressPa)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  int32_t rawPressure = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  if (PADS_getRawPressure(sensorInterface, &rawPressure) == WE_SUCCESS)
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4619      	mov	r1, r3
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff91 	bl	800111c <PADS_getRawPressure>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d108      	bne.n	8001212 <PADS_getPressure_int+0x32>
  {
    *pressPa = PADS_convertPressure_int(rawPressure);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f819 	bl	800123a <PADS_convertPressure_int>
 8001208:	4602      	mov	r2, r0
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    return WE_FAIL;
  }
  return WE_SUCCESS;
 800120e:	2300      	movs	r3, #0
 8001210:	e001      	b.n	8001216 <PADS_getPressure_int+0x36>
    return WE_FAIL;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <PADS_getTemperature_int>:
 * @param[in] sensorInterface Pointer to sensor interface
 * @param[out] temperature The returned temperature measurement
 * @retval Error code
 */
int8_t PADS_getTemperature_int(WE_sensorInterface_t* sensorInterface, int16_t *temperature)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
  return PADS_getRawTemperature(sensorInterface, temperature);
 8001228:	6839      	ldr	r1, [r7, #0]
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffb0 	bl	8001190 <PADS_getRawTemperature>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <PADS_convertPressure_int>:
 * In that case, the function PADS_convertDifferentialPressure_int() should be used.
 *
 * @retval Pressure in [Pa]
 */
int32_t PADS_convertPressure_int(int32_t rawPres)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  return (rawPres * 100) / 4096;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2264      	movs	r2, #100	; 0x64
 8001246:	fb02 f303 	mul.w	r3, r2, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	da01      	bge.n	8001252 <PADS_convertPressure_int+0x18>
 800124e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001252:	131b      	asrs	r3, r3, #12
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <PADS_init>:
WE_sensorInterface_t pads;

/* Sensor initialization function */

void PADS_init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
  /* Initialize sensor interface (i2c with PADS address, burst mode deactivated) */
  PADS_getDefaultInterface(&pads);
 8001266:	4818      	ldr	r0, [pc, #96]	; (80012c8 <PADS_init+0x68>)
 8001268:	f7ff feea 	bl	8001040 <PADS_getDefaultInterface>
  pads.interfaceType = WE_i2c;
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <PADS_init+0x68>)
 800126e:	2200      	movs	r2, #0
 8001270:	705a      	strb	r2, [r3, #1]
  pads.handle = &hi2c1;
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <PADS_init+0x68>)
 8001274:	4a15      	ldr	r2, [pc, #84]	; (80012cc <PADS_init+0x6c>)
 8001276:	615a      	str	r2, [r3, #20]

  /* Wait for boot */
  HAL_Delay(50);
 8001278:	2032      	movs	r0, #50	; 0x32
 800127a:	f004 ff91 	bl	80061a0 <HAL_Delay>
  while (WE_SUCCESS != WE_isSensorInterfaceReady(&pads))
 800127e:	bf00      	nop
 8001280:	4811      	ldr	r0, [pc, #68]	; (80012c8 <PADS_init+0x68>)
 8001282:	f001 fbdb 	bl	8002a3c <WE_isSensorInterfaceReady>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f9      	bne.n	8001280 <PADS_init+0x20>
  {
  }
  HAL_Delay(5);
 800128c:	2005      	movs	r0, #5
 800128e:	f004 ff87 	bl	80061a0 <HAL_Delay>

  uint8_t deviceIdValue = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	71fb      	strb	r3, [r7, #7]
  if (WE_SUCCESS == PADS_getDeviceID(&pads, &deviceIdValue))
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	4619      	mov	r1, r3
 800129a:	480b      	ldr	r0, [pc, #44]	; (80012c8 <PADS_init+0x68>)
 800129c:	f7ff fee6 	bl	800106c <PADS_getDeviceID>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
  }
  else
  {
  }

  PADS_softReset(&pads, PADS_enable);
 80012a4:	2101      	movs	r1, #1
 80012a6:	4808      	ldr	r0, [pc, #32]	; (80012c8 <PADS_init+0x68>)
 80012a8:	f7ff fef0 	bl	800108c <PADS_softReset>
  PADS_state_t swReset;
  do
  {
    PADS_getSoftResetState(&pads, &swReset);
 80012ac:	1dbb      	adds	r3, r7, #6
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <PADS_init+0x68>)
 80012b2:	f7ff ff13 	bl	80010dc <PADS_getSoftResetState>
  } while (swReset);
 80012b6:	79bb      	ldrb	r3, [r7, #6]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f7      	bne.n	80012ac <PADS_init+0x4c>

}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000033c 	.word	0x2000033c
 80012cc:	20000400 	.word	0x20000400

080012d0 <altitudecalc>:


float altitudecalc(int pression){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

	return (float)(288.15/0.0065)*(1-pow((pression/101325),0.1903));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <altitudecalc+0x78>)
 80012dc:	fb82 1203 	smull	r1, r2, r2, r3
 80012e0:	1392      	asrs	r2, r2, #14
 80012e2:	17db      	asrs	r3, r3, #31
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f91c 	bl	8000524 <__aeabi_i2d>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8001338 <altitudecalc+0x68>
 80012f4:	ec43 2b10 	vmov	d0, r2, r3
 80012f8:	f018 f814 	bl	8019324 <pow>
 80012fc:	ec53 2b10 	vmov	r2, r3, d0
 8001300:	f04f 0000 	mov.w	r0, #0
 8001304:	4911      	ldr	r1, [pc, #68]	; (800134c <altitudecalc+0x7c>)
 8001306:	f7fe ffbf 	bl	8000288 <__aeabi_dsub>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	a30b      	add	r3, pc, #44	; (adr r3, 8001340 <altitudecalc+0x70>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff f96e 	bl	80005f8 <__aeabi_dmul>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fc60 	bl	8000be8 <__aeabi_d2f>
 8001328:	4603      	mov	r3, r0
 800132a:	ee07 3a90 	vmov	s15, r3



}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	1a36e2eb 	.word	0x1a36e2eb
 800133c:	3fc85bc0 	.word	0x3fc85bc0
 8001340:	a0000000 	.word	0xa0000000
 8001344:	40e5a558 	.word	0x40e5a558
 8001348:	29650205 	.word	0x29650205
 800134c:	3ff00000 	.word	0x3ff00000

08001350 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001356:	463b      	mov	r3, r7
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001366:	4b38      	ldr	r3, [pc, #224]	; (8001448 <MX_ADC1_Init+0xf8>)
 8001368:	4a38      	ldr	r2, [pc, #224]	; (800144c <MX_ADC1_Init+0xfc>)
 800136a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800136c:	4b36      	ldr	r3, [pc, #216]	; (8001448 <MX_ADC1_Init+0xf8>)
 800136e:	2200      	movs	r2, #0
 8001370:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001372:	4b35      	ldr	r3, [pc, #212]	; (8001448 <MX_ADC1_Init+0xf8>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001378:	4b33      	ldr	r3, [pc, #204]	; (8001448 <MX_ADC1_Init+0xf8>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800137e:	4b32      	ldr	r3, [pc, #200]	; (8001448 <MX_ADC1_Init+0xf8>)
 8001380:	2201      	movs	r2, #1
 8001382:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001384:	4b30      	ldr	r3, [pc, #192]	; (8001448 <MX_ADC1_Init+0xf8>)
 8001386:	2204      	movs	r2, #4
 8001388:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800138a:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <MX_ADC1_Init+0xf8>)
 800138c:	2200      	movs	r2, #0
 800138e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001390:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <MX_ADC1_Init+0xf8>)
 8001392:	2201      	movs	r2, #1
 8001394:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001396:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <MX_ADC1_Init+0xf8>)
 8001398:	2203      	movs	r2, #3
 800139a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800139c:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <MX_ADC1_Init+0xf8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80013a4:	4b28      	ldr	r3, [pc, #160]	; (8001448 <MX_ADC1_Init+0xf8>)
 80013a6:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013ac:	4b26      	ldr	r3, [pc, #152]	; (8001448 <MX_ADC1_Init+0xf8>)
 80013ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013b4:	4b24      	ldr	r3, [pc, #144]	; (8001448 <MX_ADC1_Init+0xf8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <MX_ADC1_Init+0xf8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <MX_ADC1_Init+0xf8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013ca:	481f      	ldr	r0, [pc, #124]	; (8001448 <MX_ADC1_Init+0xf8>)
 80013cc:	f005 f8e6 	bl	800659c <HAL_ADC_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80013d6:	f000 fcc2 	bl	8001d5e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <MX_ADC1_Init+0x100>)
 80013dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013de:	2306      	movs	r3, #6
 80013e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80013e2:	2307      	movs	r3, #7
 80013e4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013e6:	237f      	movs	r3, #127	; 0x7f
 80013e8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013ea:	2304      	movs	r3, #4
 80013ec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f2:	463b      	mov	r3, r7
 80013f4:	4619      	mov	r1, r3
 80013f6:	4814      	ldr	r0, [pc, #80]	; (8001448 <MX_ADC1_Init+0xf8>)
 80013f8:	f005 fc68 	bl	8006ccc <HAL_ADC_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001402:	f000 fcac 	bl	8001d5e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_ADC1_Init+0x104>)
 8001408:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800140a:	230c      	movs	r3, #12
 800140c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140e:	463b      	mov	r3, r7
 8001410:	4619      	mov	r1, r3
 8001412:	480d      	ldr	r0, [pc, #52]	; (8001448 <MX_ADC1_Init+0xf8>)
 8001414:	f005 fc5a 	bl	8006ccc <HAL_ADC_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800141e:	f000 fc9e 	bl	8001d5e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <MX_ADC1_Init+0x108>)
 8001424:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001426:	2312      	movs	r3, #18
 8001428:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142a:	463b      	mov	r3, r7
 800142c:	4619      	mov	r1, r3
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <MX_ADC1_Init+0xf8>)
 8001430:	f005 fc4c 	bl	8006ccc <HAL_ADC_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800143a:	f000 fc90 	bl	8001d5e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000354 	.word	0x20000354
 800144c:	50040000 	.word	0x50040000
 8001450:	80000001 	.word	0x80000001
 8001454:	c7520000 	.word	0xc7520000
 8001458:	25b00200 	.word	0x25b00200

0800145c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a2f      	ldr	r2, [pc, #188]	; (8001538 <HAL_ADC_MspInit+0xdc>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d157      	bne.n	800152e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800147e:	4b2f      	ldr	r3, [pc, #188]	; (800153c <HAL_ADC_MspInit+0xe0>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4a2e      	ldr	r2, [pc, #184]	; (800153c <HAL_ADC_MspInit+0xe0>)
 8001484:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4b2c      	ldr	r3, [pc, #176]	; (800153c <HAL_ADC_MspInit+0xe0>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	4b29      	ldr	r3, [pc, #164]	; (800153c <HAL_ADC_MspInit+0xe0>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	4a28      	ldr	r2, [pc, #160]	; (800153c <HAL_ADC_MspInit+0xe0>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <HAL_ADC_MspInit+0xe0>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014ae:	2310      	movs	r3, #16
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014b2:	230b      	movs	r3, #11
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c4:	f006 fcc4 	bl	8007e50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 80014ca:	4a1e      	ldr	r2, [pc, #120]	; (8001544 <HAL_ADC_MspInit+0xe8>)
 80014cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 80014e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 80014f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014fc:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001502:	480f      	ldr	r0, [pc, #60]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 8001504:	f006 fa22 	bl	800794c <HAL_DMA_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800150e:	f000 fc26 	bl	8001d5e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 8001516:	64da      	str	r2, [r3, #76]	; 0x4c
 8001518:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_ADC_MspInit+0xe4>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	2012      	movs	r0, #18
 8001524:	f006 f9db 	bl	80078de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001528:	2012      	movs	r0, #18
 800152a:	f006 f9f4 	bl	8007916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	50040000 	.word	0x50040000
 800153c:	40021000 	.word	0x40021000
 8001540:	200003b8 	.word	0x200003b8
 8001544:	40020008 	.word	0x40020008

08001548 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001548:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a54      	ldr	r2, [pc, #336]	; (80016a8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001558:	4293      	cmp	r3, r2
 800155a:	f040 8091 	bne.w	8001680 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 800155e:	4b53      	ldr	r3, [pc, #332]	; (80016ac <HAL_ADC_ConvCpltCallback+0x164>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ffde 	bl	8000524 <__aeabi_i2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	a14a      	add	r1, pc, #296	; (adr r1, 8001698 <HAL_ADC_ConvCpltCallback+0x150>)
 800156e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001572:	f7ff f96b 	bl	800084c <__aeabi_ddiv>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fb33 	bl	8000be8 <__aeabi_d2f>
 8001582:	4603      	mov	r3, r0
 8001584:	4a4a      	ldr	r2, [pc, #296]	; (80016b0 <HAL_ADC_ConvCpltCallback+0x168>)
 8001586:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001588:	4b4a      	ldr	r3, [pc, #296]	; (80016b4 <HAL_ADC_ConvCpltCallback+0x16c>)
 800158a:	ed93 7a00 	vldr	s14, [r3]
 800158e:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <HAL_ADC_ConvCpltCallback+0x170>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001598:	ee17 0a90 	vmov	r0, s15
 800159c:	f7fe ffd4 	bl	8000548 <__aeabi_f2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	f04f 0000 	mov.w	r0, #0
 80015a8:	4944      	ldr	r1, [pc, #272]	; (80016bc <HAL_ADC_ConvCpltCallback+0x174>)
 80015aa:	f7ff f94f 	bl	800084c <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4690      	mov	r8, r2
 80015b4:	4699      	mov	r9, r3
 80015b6:	4b3d      	ldr	r3, [pc, #244]	; (80016ac <HAL_ADC_ConvCpltCallback+0x164>)
 80015b8:	885b      	ldrh	r3, [r3, #2]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe ffb2 	bl	8000524 <__aeabi_i2d>
 80015c0:	4604      	mov	r4, r0
 80015c2:	460d      	mov	r5, r1
 80015c4:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <HAL_ADC_ConvCpltCallback+0x168>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ffbd 	bl	8000548 <__aeabi_f2d>
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <HAL_ADC_ConvCpltCallback+0x178>)
 80015d4:	f7ff f93a 	bl	800084c <__aeabi_ddiv>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7ff f80a 	bl	80005f8 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4614      	mov	r4, r2
 80015ea:	461d      	mov	r5, r3
 80015ec:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <HAL_ADC_ConvCpltCallback+0x170>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ffa9 	bl	8000548 <__aeabi_f2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4620      	mov	r0, r4
 80015fc:	4629      	mov	r1, r5
 80015fe:	f7fe fe43 	bl	8000288 <__aeabi_dsub>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4640      	mov	r0, r8
 8001608:	4649      	mov	r1, r9
 800160a:	f7fe fff5 	bl	80005f8 <__aeabi_dmul>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	f7ff fae7 	bl	8000be8 <__aeabi_d2f>
 800161a:	ee07 0a10 	vmov	s14, r0
 800161e:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001626:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001628:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <HAL_ADC_ConvCpltCallback+0x164>)
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff77 	bl	8000524 <__aeabi_i2d>
 8001636:	a31a      	add	r3, pc, #104	; (adr r3, 80016a0 <HAL_ADC_ConvCpltCallback+0x158>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7ff f906 	bl	800084c <__aeabi_ddiv>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	f7fe fe1e 	bl	800028c <__adddf3>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4614      	mov	r4, r2
 8001656:	461d      	mov	r5, r3
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_ADC_ConvCpltCallback+0x168>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff73 	bl	8000548 <__aeabi_f2d>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4620      	mov	r0, r4
 8001668:	4629      	mov	r1, r5
 800166a:	f7fe ffc5 	bl	80005f8 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff fab7 	bl	8000be8 <__aeabi_d2f>
 800167a:	4603      	mov	r3, r0
 800167c:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <HAL_ADC_ConvCpltCallback+0x180>)
 800167e:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001680:	2203      	movs	r2, #3
 8001682:	490a      	ldr	r1, [pc, #40]	; (80016ac <HAL_ADC_ConvCpltCallback+0x164>)
 8001684:	4811      	ldr	r0, [pc, #68]	; (80016cc <HAL_ADC_ConvCpltCallback+0x184>)
 8001686:	f005 f8cb 	bl	8006820 <HAL_ADC_Start_DMA>



}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001694:	f3af 8000 	nop.w
 8001698:	d70a3d70 	.word	0xd70a3d70
 800169c:	40b36323 	.word	0x40b36323
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40affe00 	.word	0x40affe00
 80016a8:	50040000 	.word	0x50040000
 80016ac:	20000760 	.word	0x20000760
 80016b0:	2000076c 	.word	0x2000076c
 80016b4:	20000018 	.word	0x20000018
 80016b8:	2000001c 	.word	0x2000001c
 80016bc:	40590000 	.word	0x40590000
 80016c0:	40080000 	.word	0x40080000
 80016c4:	20000768 	.word	0x20000768
 80016c8:	20000770 	.word	0x20000770
 80016cc:	20000354 	.word	0x20000354

080016d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_DMA_Init+0x60>)
 80016d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016da:	4a15      	ldr	r2, [pc, #84]	; (8001730 <MX_DMA_Init+0x60>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6493      	str	r3, [r2, #72]	; 0x48
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <MX_DMA_Init+0x60>)
 80016e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <MX_DMA_Init+0x60>)
 80016f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <MX_DMA_Init+0x60>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6493      	str	r3, [r2, #72]	; 0x48
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <MX_DMA_Init+0x60>)
 80016fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	200b      	movs	r0, #11
 800170c:	f006 f8e7 	bl	80078de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001710:	200b      	movs	r0, #11
 8001712:	f006 f900 	bl	8007916 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2045      	movs	r0, #69	; 0x45
 800171c:	f006 f8df 	bl	80078de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8001720:	2045      	movs	r0, #69	; 0x45
 8001722:	f006 f8f8 	bl	8007916 <HAL_NVIC_EnableIRQ>

}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000

08001734 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	4b38      	ldr	r3, [pc, #224]	; (800182c <MX_GPIO_Init+0xf8>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	4a37      	ldr	r2, [pc, #220]	; (800182c <MX_GPIO_Init+0xf8>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001756:	4b35      	ldr	r3, [pc, #212]	; (800182c <MX_GPIO_Init+0xf8>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	4b32      	ldr	r3, [pc, #200]	; (800182c <MX_GPIO_Init+0xf8>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	4a31      	ldr	r2, [pc, #196]	; (800182c <MX_GPIO_Init+0xf8>)
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176e:	4b2f      	ldr	r3, [pc, #188]	; (800182c <MX_GPIO_Init+0xf8>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2102      	movs	r1, #2
 800177e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001782:	f006 fccf 	bl	8008124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	2101      	movs	r1, #1
 800178a:	4829      	ldr	r0, [pc, #164]	; (8001830 <MX_GPIO_Init+0xfc>)
 800178c:	f006 fcca 	bl	8008124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001790:	2302      	movs	r3, #2
 8001792:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001794:	2301      	movs	r3, #1
 8001796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	4619      	mov	r1, r3
 80017a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017aa:	f006 fb51 	bl	8007e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80017ae:	2301      	movs	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b2:	2301      	movs	r3, #1
 80017b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	4619      	mov	r1, r3
 80017c4:	481a      	ldr	r0, [pc, #104]	; (8001830 <MX_GPIO_Init+0xfc>)
 80017c6:	f006 fb43 	bl	8007e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017ca:	2302      	movs	r3, #2
 80017cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	4619      	mov	r1, r3
 80017de:	4814      	ldr	r0, [pc, #80]	; (8001830 <MX_GPIO_Init+0xfc>)
 80017e0:	f006 fb36 	bl	8007e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	4619      	mov	r1, r3
 80017fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fe:	f006 fb27 	bl	8007e50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2101      	movs	r1, #1
 8001806:	2007      	movs	r0, #7
 8001808:	f006 f869 	bl	80078de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800180c:	2007      	movs	r0, #7
 800180e:	f006 f882 	bl	8007916 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2101      	movs	r1, #1
 8001816:	2017      	movs	r0, #23
 8001818:	f006 f861 	bl	80078de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800181c:	2017      	movs	r0, #23
 800181e:	f006 f87a 	bl	8007916 <HAL_NVIC_EnableIRQ>

}
 8001822:	bf00      	nop
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	48000400 	.word	0x48000400

08001834 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <MX_I2C1_Init+0x74>)
 800183a:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <MX_I2C1_Init+0x78>)
 800183c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00202538;
 800183e:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001840:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <MX_I2C1_Init+0x7c>)
 8001842:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001844:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <MX_I2C1_Init+0x74>)
 800184c:	2201      	movs	r2, #1
 800184e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001856:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001858:	2200      	movs	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <MX_I2C1_Init+0x74>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001864:	2200      	movs	r2, #0
 8001866:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_I2C1_Init+0x74>)
 800186a:	2200      	movs	r2, #0
 800186c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800186e:	480e      	ldr	r0, [pc, #56]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001870:	f006 fc88 	bl	8008184 <HAL_I2C_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800187a:	f000 fa70 	bl	8001d5e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800187e:	2100      	movs	r1, #0
 8001880:	4809      	ldr	r0, [pc, #36]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001882:	f007 fd9b 	bl	80093bc <HAL_I2CEx_ConfigAnalogFilter>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800188c:	f000 fa67 	bl	8001d5e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001890:	2100      	movs	r1, #0
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001894:	f007 fddd 	bl	8009452 <HAL_I2CEx_ConfigDigitalFilter>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800189e:	f000 fa5e 	bl	8001d5e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000400 	.word	0x20000400
 80018ac:	40005400 	.word	0x40005400
 80018b0:	00202538 	.word	0x00202538

080018b4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018b8:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <MX_I2C3_Init+0x7c>)
 80018ba:	4a1e      	ldr	r2, [pc, #120]	; (8001934 <MX_I2C3_Init+0x80>)
 80018bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100618;
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <MX_I2C3_Init+0x7c>)
 80018c0:	4a1d      	ldr	r2, [pc, #116]	; (8001938 <MX_I2C3_Init+0x84>)
 80018c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <MX_I2C3_Init+0x7c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <MX_I2C3_Init+0x7c>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <MX_I2C3_Init+0x7c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <MX_I2C3_Init+0x7c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <MX_I2C3_Init+0x7c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <MX_I2C3_Init+0x7c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_I2C3_Init+0x7c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018ee:	4810      	ldr	r0, [pc, #64]	; (8001930 <MX_I2C3_Init+0x7c>)
 80018f0:	f006 fc48 	bl	8008184 <HAL_I2C_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80018fa:	f000 fa30 	bl	8001d5e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018fe:	2100      	movs	r1, #0
 8001900:	480b      	ldr	r0, [pc, #44]	; (8001930 <MX_I2C3_Init+0x7c>)
 8001902:	f007 fd5b 	bl	80093bc <HAL_I2CEx_ConfigAnalogFilter>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800190c:	f000 fa27 	bl	8001d5e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001910:	2100      	movs	r1, #0
 8001912:	4807      	ldr	r0, [pc, #28]	; (8001930 <MX_I2C3_Init+0x7c>)
 8001914:	f007 fd9d 	bl	8009452 <HAL_I2CEx_ConfigDigitalFilter>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800191e:	f000 fa1e 	bl	8001d5e <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8001922:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001926:	f007 fde1 	bl	80094ec <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000454 	.word	0x20000454
 8001934:	40005c00 	.word	0x40005c00
 8001938:	00100618 	.word	0x00100618

0800193c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b0a2      	sub	sp, #136	; 0x88
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001954:	f107 0320 	add.w	r3, r7, #32
 8001958:	2254      	movs	r2, #84	; 0x54
 800195a:	2100      	movs	r1, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f014 ff78 	bl	8016852 <memset>
  if(i2cHandle->Instance==I2C1)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a50      	ldr	r2, [pc, #320]	; (8001aa8 <HAL_I2C_MspInit+0x16c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d13a      	bne.n	80019e2 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800196c:	2340      	movs	r3, #64	; 0x40
 800196e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001970:	2300      	movs	r3, #0
 8001972:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001974:	f107 0320 	add.w	r3, r7, #32
 8001978:	4618      	mov	r0, r3
 800197a:	f00a fa01 	bl	800bd80 <HAL_RCCEx_PeriphCLKConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001984:	f000 f9eb 	bl	8001d5e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	4b48      	ldr	r3, [pc, #288]	; (8001aac <HAL_I2C_MspInit+0x170>)
 800198a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198c:	4a47      	ldr	r2, [pc, #284]	; (8001aac <HAL_I2C_MspInit+0x170>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001994:	4b45      	ldr	r3, [pc, #276]	; (8001aac <HAL_I2C_MspInit+0x170>)
 8001996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019a0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019a4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a6:	2312      	movs	r3, #18
 80019a8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019b4:	2304      	movs	r3, #4
 80019b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019be:	4619      	mov	r1, r3
 80019c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c4:	f006 fa44 	bl	8007e50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c8:	4b38      	ldr	r3, [pc, #224]	; (8001aac <HAL_I2C_MspInit+0x170>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019cc:	4a37      	ldr	r2, [pc, #220]	; (8001aac <HAL_I2C_MspInit+0x170>)
 80019ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d2:	6593      	str	r3, [r2, #88]	; 0x58
 80019d4:	4b35      	ldr	r3, [pc, #212]	; (8001aac <HAL_I2C_MspInit+0x170>)
 80019d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80019e0:	e05d      	b.n	8001a9e <HAL_I2C_MspInit+0x162>
  else if(i2cHandle->Instance==I2C3)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a32      	ldr	r2, [pc, #200]	; (8001ab0 <HAL_I2C_MspInit+0x174>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d158      	bne.n	8001a9e <HAL_I2C_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80019ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 80019f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f8:	f107 0320 	add.w	r3, r7, #32
 80019fc:	4618      	mov	r0, r3
 80019fe:	f00a f9bf 	bl	800bd80 <HAL_RCCEx_PeriphCLKConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001a08:	f000 f9a9 	bl	8001d5e <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0c:	4b27      	ldr	r3, [pc, #156]	; (8001aac <HAL_I2C_MspInit+0x170>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a10:	4a26      	ldr	r2, [pc, #152]	; (8001aac <HAL_I2C_MspInit+0x170>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a18:	4b24      	ldr	r3, [pc, #144]	; (8001aac <HAL_I2C_MspInit+0x170>)
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a24:	4b21      	ldr	r3, [pc, #132]	; (8001aac <HAL_I2C_MspInit+0x170>)
 8001a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a28:	4a20      	ldr	r2, [pc, #128]	; (8001aac <HAL_I2C_MspInit+0x170>)
 8001a2a:	f043 0302 	orr.w	r3, r3, #2
 8001a2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a30:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <HAL_I2C_MspInit+0x170>)
 8001a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a40:	2312      	movs	r3, #18
 8001a42:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5e:	f006 f9f7 	bl	8007e50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a62:	2310      	movs	r3, #16
 8001a64:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a66:	2312      	movs	r3, #18
 8001a68:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a74:	2304      	movs	r3, #4
 8001a76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a7e:	4619      	mov	r1, r3
 8001a80:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <HAL_I2C_MspInit+0x178>)
 8001a82:	f006 f9e5 	bl	8007e50 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_I2C_MspInit+0x170>)
 8001a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8a:	4a08      	ldr	r2, [pc, #32]	; (8001aac <HAL_I2C_MspInit+0x170>)
 8001a8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a90:	6593      	str	r3, [r2, #88]	; 0x58
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_I2C_MspInit+0x170>)
 8001a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
}
 8001a9e:	bf00      	nop
 8001aa0:	3788      	adds	r7, #136	; 0x88
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40005c00 	.word	0x40005c00
 8001ab4:	48000400 	.word	0x48000400

08001ab8 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_8){
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac8:	d104      	bne.n	8001ad4 <HAL_GPIO_EXTI_Callback+0x1c>
//		ssd1306_SetCursor(33, 44);
//		ssd1306_WriteString("btna", Font_6x8, White);
//		ssd1306_UpdateScreen();
		BTN_A++;//sert à reconnaitre lorsque le bouto na est appuyer, cette variable est mise à 1 par un e interruption.
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_GPIO_EXTI_Callback+0x38>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <HAL_GPIO_EXTI_Callback+0x38>)
 8001ad2:	6013      	str	r3, [r2, #0]


	}
	if(GPIO_Pin==GPIO_PIN_1){
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d104      	bne.n	8001ae4 <HAL_GPIO_EXTI_Callback+0x2c>
		//ssd1306_SetCursor(33, 44);
		//ssd1306_WriteString("btnb", Font_6x8, White);
		//ssd1306_UpdateScreen();
		BTN_B++;//de meme pour le bouton b
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001ae2:	6013      	str	r3, [r2, #0]

	}
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	20000738 	.word	0x20000738
 8001af4:	2000073c 	.word	0x2000073c

08001af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001afe:	f004 fada 	bl	80060b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b02:	f000 f8ab 	bl	8001c5c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001b06:	f000 f8fc 	bl	8001d02 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0a:	f7ff fe13 	bl	8001734 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b0e:	f7ff fddf 	bl	80016d0 <MX_DMA_Init>
  MX_I2C3_Init();
 8001b12:	f7ff fecf 	bl	80018b4 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8001b16:	f004 f90b 	bl	8005d30 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001b1a:	f7ff fc19 	bl	8001350 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001b1e:	f004 f89b 	bl	8005c58 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8001b22:	f012 f967 	bl	8013df4 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001b26:	f7ff fe85 	bl	8001834 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001b2a:	f004 f92d 	bl	8005d88 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001b2e:	f001 f86b 	bl	8002c08 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



	ssd1306_Init();
 8001b32:	f001 fae1 	bl	80030f8 <ssd1306_Init>

	HAL_Delay(100);
 8001b36:	2064      	movs	r0, #100	; 0x64
 8001b38:	f004 fb32 	bl	80061a0 <HAL_Delay>
	ssd1306_Fill(Black);
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f001 fb45 	bl	80031cc <ssd1306_Fill>

	ssd1306_DrawBitmap(32, 32, startimg, 64, 64, White);
 8001b42:	2301      	movs	r3, #1
 8001b44:	9301      	str	r3, [sp, #4]
 8001b46:	2340      	movs	r3, #64	; 0x40
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2340      	movs	r3, #64	; 0x40
 8001b4c:	4a31      	ldr	r2, [pc, #196]	; (8001c14 <main+0x11c>)
 8001b4e:	2120      	movs	r1, #32
 8001b50:	2020      	movs	r0, #32
 8001b52:	f001 fe0d 	bl	8003770 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001b56:	f001 fb51 	bl	80031fc <ssd1306_UpdateScreen>

	HAL_Delay(500);
 8001b5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b5e:	f004 fb1f 	bl	80061a0 <HAL_Delay>

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001b62:	2203      	movs	r2, #3
 8001b64:	492c      	ldr	r1, [pc, #176]	; (8001c18 <main+0x120>)
 8001b66:	482d      	ldr	r0, [pc, #180]	; (8001c1c <main+0x124>)
 8001b68:	f004 fe5a 	bl	8006820 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 8001b6c:	482c      	ldr	r0, [pc, #176]	; (8001c20 <main+0x128>)
 8001b6e:	f00b fb75 	bl	800d25c <HAL_TIM_Base_Start>

	HAL_UART_Abort(&hlpuart1);
 8001b72:	482c      	ldr	r0, [pc, #176]	; (8001c24 <main+0x12c>)
 8001b74:	f00b fe86 	bl	800d884 <HAL_UART_Abort>
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8001b78:	2240      	movs	r2, #64	; 0x40
 8001b7a:	492b      	ldr	r1, [pc, #172]	; (8001c28 <main+0x130>)
 8001b7c:	4829      	ldr	r0, [pc, #164]	; (8001c24 <main+0x12c>)
 8001b7e:	f00b fe35 	bl	800d7ec <HAL_UART_Receive_DMA>

	memset(flashread,'1',256);
 8001b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b86:	2131      	movs	r1, #49	; 0x31
 8001b88:	4828      	ldr	r0, [pc, #160]	; (8001c2c <main+0x134>)
 8001b8a:	f014 fe62 	bl	8016852 <memset>
	memset(flashwrite,'\0',256);
 8001b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b92:	2100      	movs	r1, #0
 8001b94:	4826      	ldr	r0, [pc, #152]	; (8001c30 <main+0x138>)
 8001b96:	f014 fe5c 	bl	8016852 <memset>
	memset((uint8_t *)bufferscreen ,'\0',50);
 8001b9a:	2232      	movs	r2, #50	; 0x32
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4825      	ldr	r0, [pc, #148]	; (8001c34 <main+0x13c>)
 8001ba0:	f014 fe57 	bl	8016852 <memset>

	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_0);
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	4a24      	ldr	r2, [pc, #144]	; (8001c38 <main+0x140>)
 8001ba8:	4924      	ldr	r1, [pc, #144]	; (8001c3c <main+0x144>)
 8001baa:	4825      	ldr	r0, [pc, #148]	; (8001c40 <main+0x148>)
 8001bac:	f011 ffbf 	bl	8013b2e <SPIF_Init>

	ssd1306_Fill(Black);
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f001 fb0b 	bl	80031cc <ssd1306_Fill>

	getindex();
 8001bb6:	f001 f96b 	bl	8002e90 <getindex>

	snprintf((uint8_t*)str,20, "off=%d",pageoffset);
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <main+0x14c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a22      	ldr	r2, [pc, #136]	; (8001c48 <main+0x150>)
 8001bc0:	2114      	movs	r1, #20
 8001bc2:	4822      	ldr	r0, [pc, #136]	; (8001c4c <main+0x154>)
 8001bc4:	f014 fdae 	bl	8016724 <sniprintf>
	ssd1306_SetCursor(32,40);
 8001bc8:	2128      	movs	r1, #40	; 0x28
 8001bca:	2020      	movs	r0, #32
 8001bcc:	f001 fc40 	bl	8003450 <ssd1306_SetCursor>
	ssd1306_WriteString((uint8_t*)str,Font_6x8,White);
 8001bd0:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <main+0x158>)
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	ca06      	ldmia	r2, {r1, r2}
 8001bd6:	481d      	ldr	r0, [pc, #116]	; (8001c4c <main+0x154>)
 8001bd8:	f001 fc14 	bl	8003404 <ssd1306_WriteString>
	snprintf((uint8_t*)str,20, "page=%d",pagenumber);
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <main+0x15c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <main+0x160>)
 8001be2:	2114      	movs	r1, #20
 8001be4:	4819      	ldr	r0, [pc, #100]	; (8001c4c <main+0x154>)
 8001be6:	f014 fd9d 	bl	8016724 <sniprintf>
	ssd1306_SetCursor(32,48);
 8001bea:	2130      	movs	r1, #48	; 0x30
 8001bec:	2020      	movs	r0, #32
 8001bee:	f001 fc2f 	bl	8003450 <ssd1306_SetCursor>
	ssd1306_WriteString((uint8_t*)str,Font_6x8,White);
 8001bf2:	4a17      	ldr	r2, [pc, #92]	; (8001c50 <main+0x158>)
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	ca06      	ldmia	r2, {r1, r2}
 8001bf8:	4814      	ldr	r0, [pc, #80]	; (8001c4c <main+0x154>)
 8001bfa:	f001 fc03 	bl	8003404 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001bfe:	f001 fafd 	bl	80031fc <ssd1306_UpdateScreen>

	HAL_Delay(1000);
 8001c02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c06:	f004 facb 	bl	80061a0 <HAL_Delay>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		statemachine();
 8001c0a:	f002 f819 	bl	8003c40 <statemachine>
		ssd1306_UpdateScreen();
 8001c0e:	f001 faf5 	bl	80031fc <ssd1306_UpdateScreen>
		statemachine();
 8001c12:	e7fa      	b.n	8001c0a <main+0x112>
 8001c14:	0801bce4 	.word	0x0801bce4
 8001c18:	20000760 	.word	0x20000760
 8001c1c:	20000354 	.word	0x20000354
 8001c20:	20000f58 	.word	0x20000f58
 8001c24:	20000fa4 	.word	0x20000fa4
 8001c28:	200004b4 	.word	0x200004b4
 8001c2c:	20000888 	.word	0x20000888
 8001c30:	20000788 	.word	0x20000788
 8001c34:	200009ac 	.word	0x200009ac
 8001c38:	48000400 	.word	0x48000400
 8001c3c:	20000ae8 	.word	0x20000ae8
 8001c40:	20000740 	.word	0x20000740
 8001c44:	20000988 	.word	0x20000988
 8001c48:	0801ba14 	.word	0x0801ba14
 8001c4c:	20000774 	.word	0x20000774
 8001c50:	20000020 	.word	0x20000020
 8001c54:	2000098c 	.word	0x2000098c
 8001c58:	0801ba1c 	.word	0x0801ba1c

08001c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b096      	sub	sp, #88	; 0x58
 8001c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	2244      	movs	r2, #68	; 0x44
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f014 fdf1 	bl	8016852 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c70:	463b      	mov	r3, r7
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c82:	f009 f9df 	bl	800b044 <HAL_PWREx_ControlVoltageScaling>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c8c:	f000 f867 	bl	8001d5e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001c90:	2310      	movs	r3, #16
 8001c92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c94:	2301      	movs	r3, #1
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c9c:	2360      	movs	r3, #96	; 0x60
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001cac:	2314      	movs	r3, #20
 8001cae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001cb0:	2307      	movs	r3, #7
 8001cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f009 fa25 	bl	800b110 <HAL_RCC_OscConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001ccc:	f000 f847 	bl	8001d5e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd0:	230f      	movs	r3, #15
 8001cd2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cdc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001ce0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	2102      	movs	r1, #2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f009 fe24 	bl	800b938 <HAL_RCC_ClockConfig>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001cf6:	f000 f832 	bl	8001d5e <Error_Handler>
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	3758      	adds	r7, #88	; 0x58
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b096      	sub	sp, #88	; 0x58
 8001d06:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	2254      	movs	r2, #84	; 0x54
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f014 fd9f 	bl	8016852 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001d14:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001d1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001d20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d24:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001d26:	2301      	movs	r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001d2e:	2318      	movs	r3, #24
 8001d30:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001d32:	2307      	movs	r3, #7
 8001d34:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001d36:	2302      	movs	r3, #2
 8001d38:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001d3e:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001d42:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	4618      	mov	r0, r3
 8001d48:	f00a f81a 	bl	800bd80 <HAL_RCCEx_PeriphCLKConfig>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001d52:	f000 f804 	bl	8001d5e <Error_Handler>
  }
}
 8001d56:	bf00      	nop
 8001d58:	3758      	adds	r7, #88	; 0x58
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d62:	b672      	cpsid	i
}
 8001d64:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d66:	e7fe      	b.n	8001d66 <Error_Handler+0x8>

08001d68 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7fe fa7d 	bl	8000270 <strlen>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d801      	bhi.n	8001d80 <gps_checksum+0x18>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e038      	b.n	8001df2 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7fe fa75 	bl	8000270 <strlen>
 8001d86:	4603      	mov	r3, r0
 8001d88:	3b04      	subs	r3, #4
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe fa6c 	bl	8000270 <strlen>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	3b03      	subs	r3, #3
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	4413      	add	r3, r2
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	e00a      	b.n	8001dc4 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	4413      	add	r3, r2
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	4053      	eors	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7fe fa53 	bl	8000270 <strlen>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	1f5a      	subs	r2, r3, #5
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d8ec      	bhi.n	8001dae <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8001dd4:	f107 0308 	add.w	r3, r7, #8
 8001dd8:	2210      	movs	r2, #16
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f013 fd5f 	bl	80158a0 <strtol>
 8001de2:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d101      	bne.n	8001df0 <gps_checksum+0x88>
        return 1;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8001df0:	2300      	movs	r3, #0
    }
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b0b7      	sub	sp, #220	; 0xdc
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8001e0c:	f107 0320 	add.w	r3, r7, #32
 8001e10:	2264      	movs	r2, #100	; 0x64
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f014 fd1c 	bl	8016852 <memset>
    char *marker = strtok(inputString, ",");
 8001e1a:	49c2      	ldr	r1, [pc, #776]	; (8002124 <nmea_GPGGA+0x328>)
 8001e1c:	6838      	ldr	r0, [r7, #0]
 8001e1e:	f014 fd33 	bl	8016888 <strtok>
 8001e22:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001e26:	e027      	b.n	8001e78 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001e28:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001e2c:	f7fe fa20 	bl	8000270 <strlen>
 8001e30:	4603      	mov	r3, r0
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001e38:	1c63      	adds	r3, r4, #1
 8001e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001e3e:	4610      	mov	r0, r2
 8001e40:	f012 fd74 	bl	801492c <malloc>
 8001e44:	4603      	mov	r3, r0
 8001e46:	461a      	mov	r2, r3
 8001e48:	00a3      	lsls	r3, r4, #2
 8001e4a:	33d8      	adds	r3, #216	; 0xd8
 8001e4c:	443b      	add	r3, r7
 8001e4e:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001e52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e56:	3b01      	subs	r3, #1
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	33d8      	adds	r3, #216	; 0xd8
 8001e5c:	443b      	add	r3, r7
 8001e5e:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001e62:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f014 fe07 	bl	8016a7a <strcpy>
        marker = strtok(NULL, ",");
 8001e6c:	49ad      	ldr	r1, [pc, #692]	; (8002124 <nmea_GPGGA+0x328>)
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f014 fd0a 	bl	8016888 <strtok>
 8001e74:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001e78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1d3      	bne.n	8001e28 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8001e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8001e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	332c      	adds	r3, #44	; 0x2c
 8001e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f014 fdee 	bl	8016a7a <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8001e9e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001ea2:	2b53      	cmp	r3, #83	; 0x53
 8001ea4:	d004      	beq.n	8001eb0 <nmea_GPGGA+0xb4>
 8001ea6:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001eaa:	2b4e      	cmp	r3, #78	; 0x4e
 8001eac:	f040 8159 	bne.w	8002162 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001eb6:	e010      	b.n	8001eda <nmea_GPGGA+0xde>
 8001eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ebe:	4413      	add	r3, r2
 8001ec0:	7819      	ldrb	r1, [r3, #0]
 8001ec2:	f107 021c 	add.w	r2, r7, #28
 8001ec6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001eca:	4413      	add	r3, r2
 8001ecc:	460a      	mov	r2, r1
 8001ece:	701a      	strb	r2, [r3, #0]
 8001ed0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001eda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	ddea      	ble.n	8001eb8 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ee8:	e011      	b.n	8001f0e <nmea_GPGGA+0x112>
 8001eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	7819      	ldrb	r1, [r3, #0]
 8001ef6:	f107 0214 	add.w	r2, r7, #20
 8001efa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001efe:	4413      	add	r3, r2
 8001f00:	460a      	mov	r2, r1
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f12:	2b05      	cmp	r3, #5
 8001f14:	dde9      	ble.n	8001eea <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	220a      	movs	r2, #10
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f013 fcbe 	bl	80158a0 <strtol>
 8001f24:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f013 fbcc 	bl	80156cc <strtof>
 8001f34:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8001f38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f44:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001f48:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8002128 <nmea_GPGGA+0x32c>
 8001f4c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f54:	ee17 0a90 	vmov	r0, s15
 8001f58:	f7fe faf6 	bl	8000548 <__aeabi_f2d>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001f6a:	e010      	b.n	8001f8e <nmea_GPGGA+0x192>
 8001f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f72:	4413      	add	r3, r2
 8001f74:	7819      	ldrb	r1, [r3, #0]
 8001f76:	f107 0210 	add.w	r2, r7, #16
 8001f7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f7e:	4413      	add	r3, r2
 8001f80:	460a      	mov	r2, r1
 8001f82:	701a      	strb	r2, [r3, #0]
 8001f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001f8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	ddea      	ble.n	8001f6c <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8001f96:	2300      	movs	r3, #0
 8001f98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f9c:	e011      	b.n	8001fc2 <nmea_GPGGA+0x1c6>
 8001f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fa4:	3303      	adds	r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	7819      	ldrb	r1, [r3, #0]
 8001faa:	f107 0208 	add.w	r2, r7, #8
 8001fae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fb2:	4413      	add	r3, r2
 8001fb4:	460a      	mov	r2, r1
 8001fb6:	701a      	strb	r2, [r3, #0]
 8001fb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001fc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	dde9      	ble.n	8001f9e <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8001fca:	f107 0310 	add.w	r3, r7, #16
 8001fce:	220a      	movs	r2, #10
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f013 fc64 	bl	80158a0 <strtol>
 8001fd8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8001fdc:	f107 0308 	add.w	r3, r7, #8
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f013 fb72 	bl	80156cc <strtof>
 8001fe8:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8001fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ff0:	ee07 3a90 	vmov	s15, r3
 8001ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff8:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001ffc:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8002128 <nmea_GPGGA+0x32c>
 8002000:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002008:	ee17 0a90 	vmov	r0, s15
 800200c:	f7fe fa9c 	bl	8000548 <__aeabi_f2d>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002024:	f7fe fd50 	bl	8000ac8 <__aeabi_dcmpeq>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d176      	bne.n	800211c <nmea_GPGGA+0x320>
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800203a:	f7fe fd45 	bl	8000ac8 <__aeabi_dcmpeq>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d16b      	bne.n	800211c <nmea_GPGGA+0x320>
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	4b38      	ldr	r3, [pc, #224]	; (800212c <nmea_GPGGA+0x330>)
 800204a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800204e:	f7fe fd45 	bl	8000adc <__aeabi_dcmplt>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d061      	beq.n	800211c <nmea_GPGGA+0x320>
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	4b34      	ldr	r3, [pc, #208]	; (8002130 <nmea_GPGGA+0x334>)
 800205e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002062:	f7fe fd3b 	bl	8000adc <__aeabi_dcmplt>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d057      	beq.n	800211c <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002072:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 800207c:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002084:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 800208e:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8002090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f013 fb19 	bl	80156cc <strtof>
 800209a:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 800209e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80020a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020aa:	d102      	bne.n	80020b2 <nmea_GPGGA+0x2b6>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	e001      	b.n	80020b6 <nmea_GPGGA+0x2ba>
 80020b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 80020ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020bc:	220a      	movs	r2, #10
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f013 fbed 	bl	80158a0 <strtol>
 80020c6:	4602      	mov	r2, r0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 80020cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ce:	220a      	movs	r2, #10
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f013 fbe4 	bl	80158a0 <strtol>
 80020d8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 80020dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bfcc      	ite	gt
 80020e4:	2301      	movgt	r3, #1
 80020e6:	2300      	movle	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 80020f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f013 fae9 	bl	80156cc <strtof>
 80020fa:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 80020fe:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002102:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210a:	d102      	bne.n	8002112 <nmea_GPGGA+0x316>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	e001      	b.n	8002116 <nmea_GPGGA+0x31a>
 8002112:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800211a:	e022      	b.n	8002162 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002122:	e016      	b.n	8002152 <nmea_GPGGA+0x356>
 8002124:	0801ba24 	.word	0x0801ba24
 8002128:	42700000 	.word	0x42700000
 800212c:	40568000 	.word	0x40568000
 8002130:	40668000 	.word	0x40668000
 8002134:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	33d8      	adds	r3, #216	; 0xd8
 800213c:	443b      	add	r3, r7
 800213e:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002142:	4618      	mov	r0, r3
 8002144:	f012 fbfa 	bl	801493c <free>
 8002148:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800214c:	3301      	adds	r3, #1
 800214e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002152:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800215a:	429a      	cmp	r2, r3
 800215c:	dbea      	blt.n	8002134 <nmea_GPGGA+0x338>
            return 0;
 800215e:	2300      	movs	r3, #0
 8002160:	e019      	b.n	8002196 <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002168:	e00e      	b.n	8002188 <nmea_GPGGA+0x38c>
 800216a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	33d8      	adds	r3, #216	; 0xd8
 8002172:	443b      	add	r3, r7
 8002174:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002178:	4618      	mov	r0, r3
 800217a:	f012 fbdf 	bl	801493c <free>
 800217e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002182:	3301      	adds	r3, #1
 8002184:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002188:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800218c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002190:	429a      	cmp	r2, r3
 8002192:	dbea      	blt.n	800216a <nmea_GPGGA+0x36e>
    return 1;
 8002194:	2301      	movs	r3, #1
}
 8002196:	4618      	mov	r0, r3
 8002198:	37dc      	adds	r7, #220	; 0xdc
 800219a:	46bd      	mov	sp, r7
 800219c:	bd90      	pop	{r4, r7, pc}
 800219e:	bf00      	nop

080021a0 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b0a3      	sub	sp, #140	; 0x8c
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 80021b0:	f107 030c 	add.w	r3, r7, #12
 80021b4:	2264      	movs	r2, #100	; 0x64
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f014 fb4a 	bl	8016852 <memset>
    char *marker = strtok(inputString, ",");
 80021be:	493b      	ldr	r1, [pc, #236]	; (80022ac <nmea_GPGSA+0x10c>)
 80021c0:	6838      	ldr	r0, [r7, #0]
 80021c2:	f014 fb61 	bl	8016888 <strtok>
 80021c6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 80021ca:	e027      	b.n	800221c <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80021cc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80021d0:	f7fe f84e 	bl	8000270 <strlen>
 80021d4:	4603      	mov	r3, r0
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 80021dc:	1c63      	adds	r3, r4, #1
 80021de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021e2:	4610      	mov	r0, r2
 80021e4:	f012 fba2 	bl	801492c <malloc>
 80021e8:	4603      	mov	r3, r0
 80021ea:	461a      	mov	r2, r3
 80021ec:	00a3      	lsls	r3, r4, #2
 80021ee:	3388      	adds	r3, #136	; 0x88
 80021f0:	443b      	add	r3, r7
 80021f2:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 80021f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021fa:	3b01      	subs	r3, #1
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	3388      	adds	r3, #136	; 0x88
 8002200:	443b      	add	r3, r7
 8002202:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002206:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800220a:	4618      	mov	r0, r3
 800220c:	f014 fc35 	bl	8016a7a <strcpy>
        marker = strtok(NULL, ",");
 8002210:	4926      	ldr	r1, [pc, #152]	; (80022ac <nmea_GPGSA+0x10c>)
 8002212:	2000      	movs	r0, #0
 8002214:	f014 fb38 	bl	8016888 <strtok>
 8002218:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 800221c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1d3      	bne.n	80021cc <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	220a      	movs	r2, #10
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f013 fb38 	bl	80158a0 <strtol>
 8002230:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8002232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002234:	2b01      	cmp	r3, #1
 8002236:	bfcc      	ite	gt
 8002238:	2301      	movgt	r3, #1
 800223a:	2300      	movle	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8002248:	2303      	movs	r3, #3
 800224a:	67bb      	str	r3, [r7, #120]	; 0x78
 800224c:	e00e      	b.n	800226c <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 800224e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	3388      	adds	r3, #136	; 0x88
 8002254:	443b      	add	r3, r7
 8002256:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <nmea_GPGSA+0xc6>
            satelliteCount++;
 8002260:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002262:	3301      	adds	r3, #1
 8002264:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8002266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002268:	3301      	adds	r3, #1
 800226a:	67bb      	str	r3, [r7, #120]	; 0x78
 800226c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800226e:	2b0e      	cmp	r3, #14
 8002270:	dded      	ble.n	800224e <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002276:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8002278:	2300      	movs	r3, #0
 800227a:	677b      	str	r3, [r7, #116]	; 0x74
 800227c:	e00b      	b.n	8002296 <nmea_GPGSA+0xf6>
 800227e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	3388      	adds	r3, #136	; 0x88
 8002284:	443b      	add	r3, r7
 8002286:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800228a:	4618      	mov	r0, r3
 800228c:	f012 fb56 	bl	801493c <free>
 8002290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002292:	3301      	adds	r3, #1
 8002294:	677b      	str	r3, [r7, #116]	; 0x74
 8002296:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002298:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800229c:	429a      	cmp	r2, r3
 800229e:	dbee      	blt.n	800227e <nmea_GPGSA+0xde>
    return 1;
 80022a0:	2301      	movs	r3, #1
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	378c      	adds	r7, #140	; 0x8c
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd90      	pop	{r4, r7, pc}
 80022aa:	bf00      	nop
 80022ac:	0801ba24 	.word	0x0801ba24

080022b0 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b0a1      	sub	sp, #132	; 0x84
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 80022be:	f107 030c 	add.w	r3, r7, #12
 80022c2:	2264      	movs	r2, #100	; 0x64
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f014 fac3 	bl	8016852 <memset>
    char *marker = strtok(inputString, ",");
 80022cc:	4930      	ldr	r1, [pc, #192]	; (8002390 <nmea_GNRMC+0xe0>)
 80022ce:	6838      	ldr	r0, [r7, #0]
 80022d0:	f014 fada 	bl	8016888 <strtok>
 80022d4:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 80022d6:	e021      	b.n	800231c <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80022d8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80022da:	f7fd ffc9 	bl	8000270 <strlen>
 80022de:	4603      	mov	r3, r0
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80022e4:	1c63      	adds	r3, r4, #1
 80022e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022e8:	4610      	mov	r0, r2
 80022ea:	f012 fb1f 	bl	801492c <malloc>
 80022ee:	4603      	mov	r3, r0
 80022f0:	461a      	mov	r2, r3
 80022f2:	00a3      	lsls	r3, r4, #2
 80022f4:	3380      	adds	r3, #128	; 0x80
 80022f6:	443b      	add	r3, r7
 80022f8:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 80022fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022fe:	3b01      	subs	r3, #1
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	3380      	adds	r3, #128	; 0x80
 8002304:	443b      	add	r3, r7
 8002306:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800230a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800230c:	4618      	mov	r0, r3
 800230e:	f014 fbb4 	bl	8016a7a <strcpy>
        marker = strtok(NULL, ",");
 8002312:	491f      	ldr	r1, [pc, #124]	; (8002390 <nmea_GNRMC+0xe0>)
 8002314:	2000      	movs	r0, #0
 8002316:	f014 fab7 	bl	8016888 <strtok>
 800231a:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 800231c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1da      	bne.n	80022d8 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8002322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002324:	2100      	movs	r1, #0
 8002326:	4618      	mov	r0, r3
 8002328:	f013 f9d0 	bl	80156cc <strtof>
 800232c:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 8002330:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002332:	f7fe f909 	bl	8000548 <__aeabi_f2d>
 8002336:	a314      	add	r3, pc, #80	; (adr r3, 8002388 <nmea_GNRMC+0xd8>)
 8002338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233c:	f7fe fa86 	bl	800084c <__aeabi_ddiv>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f7fe fc4e 	bl	8000be8 <__aeabi_d2f>
 800234c:	4602      	mov	r2, r0
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8002352:	2300      	movs	r3, #0
 8002354:	677b      	str	r3, [r7, #116]	; 0x74
 8002356:	e00b      	b.n	8002370 <nmea_GNRMC+0xc0>
 8002358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	3380      	adds	r3, #128	; 0x80
 800235e:	443b      	add	r3, r7
 8002360:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002364:	4618      	mov	r0, r3
 8002366:	f012 fae9 	bl	801493c <free>
 800236a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800236c:	3301      	adds	r3, #1
 800236e:	677b      	str	r3, [r7, #116]	; 0x74
 8002370:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002372:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002374:	429a      	cmp	r2, r3
 8002376:	dbef      	blt.n	8002358 <nmea_GNRMC+0xa8>
    return 1;
 8002378:	2301      	movs	r3, #1
}
 800237a:	4618      	mov	r0, r3
 800237c:	3784      	adds	r7, #132	; 0x84
 800237e:	46bd      	mov	sp, r7
 8002380:	bd90      	pop	{r4, r7, pc}
 8002382:	bf00      	nop
 8002384:	f3af 8000 	nop.w
 8002388:	be76c8b4 	.word	0xbe76c8b4
 800238c:	3fff1a9f 	.word	0x3fff1a9f
 8002390:	0801ba24 	.word	0x0801ba24

08002394 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8002394:	b590      	push	{r4, r7, lr}
 8002396:	b087      	sub	sp, #28
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 800239e:	223c      	movs	r2, #60	; 0x3c
 80023a0:	2100      	movs	r1, #0
 80023a2:	484e      	ldr	r0, [pc, #312]	; (80024dc <nmea_parse+0x148>)
 80023a4:	f014 fa55 	bl	8016852 <memset>
    char * token = strtok(buffer, "$");
 80023a8:	494d      	ldr	r1, [pc, #308]	; (80024e0 <nmea_parse+0x14c>)
 80023aa:	6838      	ldr	r0, [r7, #0]
 80023ac:	f014 fa6c 	bl	8016888 <strtok>
 80023b0:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 80023b6:	e01d      	b.n	80023f4 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 80023b8:	6978      	ldr	r0, [r7, #20]
 80023ba:	f7fd ff59 	bl	8000270 <strlen>
 80023be:	4603      	mov	r3, r0
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	693c      	ldr	r4, [r7, #16]
 80023c4:	1c63      	adds	r3, r4, #1
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	4610      	mov	r0, r2
 80023ca:	f012 faaf 	bl	801492c <malloc>
 80023ce:	4603      	mov	r3, r0
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b42      	ldr	r3, [pc, #264]	; (80024dc <nmea_parse+0x148>)
 80023d4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	3b01      	subs	r3, #1
 80023dc:	4a3f      	ldr	r2, [pc, #252]	; (80024dc <nmea_parse+0x148>)
 80023de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e2:	6979      	ldr	r1, [r7, #20]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f014 fb48 	bl	8016a7a <strcpy>
        token = strtok(NULL, "$");
 80023ea:	493d      	ldr	r1, [pc, #244]	; (80024e0 <nmea_parse+0x14c>)
 80023ec:	2000      	movs	r0, #0
 80023ee:	f014 fa4b 	bl	8016888 <strtok>
 80023f2:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1de      	bne.n	80023b8 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	e052      	b.n	80024a6 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8002400:	4a36      	ldr	r2, [pc, #216]	; (80024dc <nmea_parse+0x148>)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002408:	4936      	ldr	r1, [pc, #216]	; (80024e4 <nmea_parse+0x150>)
 800240a:	4618      	mov	r0, r3
 800240c:	f014 fa98 	bl	8016940 <strstr>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d044      	beq.n	80024a0 <nmea_parse+0x10c>
 8002416:	4a31      	ldr	r2, [pc, #196]	; (80024dc <nmea_parse+0x148>)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fca2 	bl	8001d68 <gps_checksum>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d03a      	beq.n	80024a0 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 800242a:	4a2c      	ldr	r2, [pc, #176]	; (80024dc <nmea_parse+0x148>)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002432:	492d      	ldr	r1, [pc, #180]	; (80024e8 <nmea_parse+0x154>)
 8002434:	4618      	mov	r0, r3
 8002436:	f014 fa83 	bl	8016940 <strstr>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8002440:	4a26      	ldr	r2, [pc, #152]	; (80024dc <nmea_parse+0x148>)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002448:	4619      	mov	r1, r3
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ff30 	bl	80022b0 <nmea_GNRMC>
 8002450:	e026      	b.n	80024a0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 8002452:	4a22      	ldr	r2, [pc, #136]	; (80024dc <nmea_parse+0x148>)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245a:	4924      	ldr	r1, [pc, #144]	; (80024ec <nmea_parse+0x158>)
 800245c:	4618      	mov	r0, r3
 800245e:	f014 fa6f 	bl	8016940 <strstr>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8002468:	4a1c      	ldr	r2, [pc, #112]	; (80024dc <nmea_parse+0x148>)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002470:	4619      	mov	r1, r3
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff fe94 	bl	80021a0 <nmea_GPGSA>
 8002478:	e012      	b.n	80024a0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 800247a:	4a18      	ldr	r2, [pc, #96]	; (80024dc <nmea_parse+0x148>)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002482:	491b      	ldr	r1, [pc, #108]	; (80024f0 <nmea_parse+0x15c>)
 8002484:	4618      	mov	r0, r3
 8002486:	f014 fa5b 	bl	8016940 <strstr>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d007      	beq.n	80024a0 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8002490:	4a12      	ldr	r2, [pc, #72]	; (80024dc <nmea_parse+0x148>)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002498:	4619      	mov	r1, r3
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff fcae 	bl	8001dfc <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	3301      	adds	r3, #1
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	dba8      	blt.n	8002400 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	e009      	b.n	80024c8 <nmea_parse+0x134>
 80024b4:	4a09      	ldr	r2, [pc, #36]	; (80024dc <nmea_parse+0x148>)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024bc:	4618      	mov	r0, r3
 80024be:	f012 fa3d 	bl	801493c <free>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	3301      	adds	r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	dbf1      	blt.n	80024b4 <nmea_parse+0x120>


}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd90      	pop	{r4, r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000a78 	.word	0x20000a78
 80024e0:	0801ba28 	.word	0x0801ba28
 80024e4:	0801ba2c 	.word	0x0801ba2c
 80024e8:	0801ba30 	.word	0x0801ba30
 80024ec:	0801ba38 	.word	0x0801ba38
 80024f0:	0801ba40 	.word	0x0801ba40
 80024f4:	00000000 	.word	0x00000000

080024f8 <distancecalc>:

}



double distancecalc(double lat1, double lat2, double long1, double long2){
 80024f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024fc:	b08a      	sub	sp, #40	; 0x28
 80024fe:	af00      	add	r7, sp, #0
 8002500:	ed87 0b06 	vstr	d0, [r7, #24]
 8002504:	ed87 1b04 	vstr	d1, [r7, #16]
 8002508:	ed87 2b02 	vstr	d2, [r7, #8]
 800250c:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 800251c:	a358      	add	r3, pc, #352	; (adr r3, 8002680 <distancecalc+0x188>)
 800251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002522:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002526:	f7fe f867 	bl	80005f8 <__aeabi_dmul>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	ec43 2b17 	vmov	d7, r2, r3
 8002532:	eeb0 0a47 	vmov.f32	s0, s14
 8002536:	eef0 0a67 	vmov.f32	s1, s15
 800253a:	f017 f8b2 	bl	80196a2 <sinl>
 800253e:	ec55 4b10 	vmov	r4, r5, d0
 8002542:	a34f      	add	r3, pc, #316	; (adr r3, 8002680 <distancecalc+0x188>)
 8002544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002548:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800254c:	f7fe f854 	bl	80005f8 <__aeabi_dmul>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	ec43 2b17 	vmov	d7, r2, r3
 8002558:	eeb0 0a47 	vmov.f32	s0, s14
 800255c:	eef0 0a67 	vmov.f32	s1, s15
 8002560:	f017 f89f 	bl	80196a2 <sinl>
 8002564:	ec53 2b10 	vmov	r2, r3, d0
 8002568:	4620      	mov	r0, r4
 800256a:	4629      	mov	r1, r5
 800256c:	f7fe f844 	bl	80005f8 <__aeabi_dmul>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4614      	mov	r4, r2
 8002576:	461d      	mov	r5, r3
 8002578:	a341      	add	r3, pc, #260	; (adr r3, 8002680 <distancecalc+0x188>)
 800257a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002582:	f7fe f839 	bl	80005f8 <__aeabi_dmul>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	ec43 2b17 	vmov	d7, r2, r3
 800258e:	eeb0 0a47 	vmov.f32	s0, s14
 8002592:	eef0 0a67 	vmov.f32	s1, s15
 8002596:	f017 f882 	bl	801969e <cosl>
 800259a:	ec59 8b10 	vmov	r8, r9, d0
 800259e:	a338      	add	r3, pc, #224	; (adr r3, 8002680 <distancecalc+0x188>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025a8:	f7fe f826 	bl	80005f8 <__aeabi_dmul>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	ec43 2b17 	vmov	d7, r2, r3
 80025b4:	eeb0 0a47 	vmov.f32	s0, s14
 80025b8:	eef0 0a67 	vmov.f32	s1, s15
 80025bc:	f017 f86f 	bl	801969e <cosl>
 80025c0:	ec53 2b10 	vmov	r2, r3, d0
 80025c4:	4640      	mov	r0, r8
 80025c6:	4649      	mov	r1, r9
 80025c8:	f7fe f816 	bl	80005f8 <__aeabi_dmul>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4690      	mov	r8, r2
 80025d2:	4699      	mov	r9, r3
 80025d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025dc:	f7fd fe54 	bl	8000288 <__aeabi_dsub>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4610      	mov	r0, r2
 80025e6:	4619      	mov	r1, r3
 80025e8:	a325      	add	r3, pc, #148	; (adr r3, 8002680 <distancecalc+0x188>)
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	f7fe f803 	bl	80005f8 <__aeabi_dmul>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	ec43 2b17 	vmov	d7, r2, r3
 80025fa:	eeb0 0a47 	vmov.f32	s0, s14
 80025fe:	eef0 0a67 	vmov.f32	s1, s15
 8002602:	f017 f84c 	bl	801969e <cosl>
 8002606:	ec53 2b10 	vmov	r2, r3, d0
 800260a:	4640      	mov	r0, r8
 800260c:	4649      	mov	r1, r9
 800260e:	f7fd fff3 	bl	80005f8 <__aeabi_dmul>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4620      	mov	r0, r4
 8002618:	4629      	mov	r1, r5
 800261a:	f7fd fe37 	bl	800028c <__adddf3>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	ec43 2b17 	vmov	d7, r2, r3
 8002626:	eeb0 1a47 	vmov.f32	s2, s14
 800262a:	eef0 1a67 	vmov.f32	s3, s15
 800262e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002678 <distancecalc+0x180>
 8002632:	f016 ffd6 	bl	80195e2 <fmin>
 8002636:	eeb0 7a40 	vmov.f32	s14, s0
 800263a:	eef0 7a60 	vmov.f32	s15, s1
 800263e:	eeb0 0a47 	vmov.f32	s0, s14
 8002642:	eef0 0a67 	vmov.f32	s1, s15
 8002646:	f017 f82e 	bl	80196a6 <acosl>
 800264a:	ec51 0b10 	vmov	r0, r1, d0
 800264e:	a30e      	add	r3, pc, #56	; (adr r3, 8002688 <distancecalc+0x190>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f7fd ffd0 	bl	80005f8 <__aeabi_dmul>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 8002660:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002664:	ec43 2b17 	vmov	d7, r2, r3
}
 8002668:	eeb0 0a47 	vmov.f32	s0, s14
 800266c:	eef0 0a67 	vmov.f32	s1, s15
 8002670:	3728      	adds	r7, #40	; 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002678:	00000000 	.word	0x00000000
 800267c:	3ff00000 	.word	0x3ff00000
 8002680:	a2529d39 	.word	0xa2529d39
 8002684:	3f91df46 	.word	0x3f91df46
 8002688:	00000000 	.word	0x00000000
 800268c:	41584dae 	.word	0x41584dae

08002690 <WE_ReadReg>:
 */
inline int8_t WE_ReadReg(WE_sensorInterface_t *interface,
                         uint8_t regAdr,
                         uint16_t numBytesToRead,
                         uint8_t *data)
{
 8002690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002692:	b08b      	sub	sp, #44	; 0x2c
 8002694:	af04      	add	r7, sp, #16
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	607b      	str	r3, [r7, #4]
 800269a:	460b      	mov	r3, r1
 800269c:	72fb      	strb	r3, [r7, #11]
 800269e:	4613      	mov	r3, r2
 80026a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]

  switch (interface->interfaceType)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	785b      	ldrb	r3, [r3, #1]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d008      	beq.n	80026c0 <WE_ReadReg+0x30>
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	f300 80e7 	bgt.w	8002882 <WE_ReadReg+0x1f2>
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d038      	beq.n	800272a <WE_ReadReg+0x9a>
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	f000 8099 	beq.w	80027f0 <WE_ReadReg+0x160>
 80026be:	e0e0      	b.n	8002882 <WE_ReadReg+0x1f2>
  {
  case WE_i2c_fifo:
#ifdef HAL_I2C_MODULE_ENABLED
	if (interface->options.i2c.burstMode != 0 || numBytesToRead == 1)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	795b      	ldrb	r3, [r3, #5]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d103      	bne.n	80026d6 <WE_ReadReg+0x46>
 80026ce:	893b      	ldrh	r3, [r7, #8]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	f040 80d9 	bne.w	8002888 <WE_ReadReg+0x1f8>
	{
	  if (numBytesToRead > 1 && interface->options.i2c.useRegAddrMsbForMultiBytesRead)
 80026d6:	893b      	ldrh	r3, [r7, #8]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d90a      	bls.n	80026f2 <WE_ReadReg+0x62>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	795b      	ldrb	r3, [r3, #5]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <WE_ReadReg+0x62>
	  {
		/* Register address most significant bit is used to enable multi bytes read */
		regAdr |= 1 << 7;
 80026ea:	7afb      	ldrb	r3, [r7, #11]
 80026ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026f0:	72fb      	strb	r3, [r7, #11]
	  }
	  status = I2Cx_ReadBytes((I2C_HandleTypeDef*) interface->handle,
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6958      	ldr	r0, [r3, #20]
							  interface->options.i2c.address << 1, /* stm32 needs shifted value */
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	791b      	ldrb	r3, [r3, #4]
	  status = I2Cx_ReadBytes((I2C_HandleTypeDef*) interface->handle,
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	b2d9      	uxtb	r1, r3
 80026fe:	7afb      	ldrb	r3, [r7, #11]
 8002700:	b29c      	uxth	r4, r3
							  (uint16_t) regAdr,
							  numBytesToRead,
							  interface->options.i2c.slaveTransmitterMode,
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	795b      	ldrb	r3, [r3, #5]
 8002706:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800270a:	b2db      	uxtb	r3, r3
	  status = I2Cx_ReadBytes((I2C_HandleTypeDef*) interface->handle,
 800270c:	461e      	mov	r6, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8a1b      	ldrh	r3, [r3, #16]
 8002712:	893d      	ldrh	r5, [r7, #8]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	9202      	str	r2, [sp, #8]
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	9600      	str	r6, [sp, #0]
 800271c:	462b      	mov	r3, r5
 800271e:	4622      	mov	r2, r4
 8002720:	f000 f9b3 	bl	8002a8a <I2Cx_ReadBytes>
 8002724:	4603      	mov	r3, r0
 8002726:	75fb      	strb	r3, [r7, #23]
							  data);
	}
#else
    status = HAL_ERROR;
#endif /* HAL_I2C_MODULE_ENABLED */
    break;
 8002728:	e0ae      	b.n	8002888 <WE_ReadReg+0x1f8>

  case WE_i2c:
#ifdef HAL_I2C_MODULE_ENABLED
    if (interface->options.i2c.burstMode != 0 || numBytesToRead == 1)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	795b      	ldrb	r3, [r3, #5]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d102      	bne.n	800273e <WE_ReadReg+0xae>
 8002738:	893b      	ldrh	r3, [r7, #8]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d12a      	bne.n	8002794 <WE_ReadReg+0x104>
    {
      if (numBytesToRead > 1 && interface->options.i2c.useRegAddrMsbForMultiBytesRead)
 800273e:	893b      	ldrh	r3, [r7, #8]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d90a      	bls.n	800275a <WE_ReadReg+0xca>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	795b      	ldrb	r3, [r3, #5]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <WE_ReadReg+0xca>
      {
        /* Register address most significant bit is used to enable multi bytes read */
        regAdr |= 1 << 7;
 8002752:	7afb      	ldrb	r3, [r7, #11]
 8002754:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002758:	72fb      	strb	r3, [r7, #11]
      }
      status = I2Cx_ReadBytes((I2C_HandleTypeDef*) interface->handle,
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6958      	ldr	r0, [r3, #20]
                              interface->options.i2c.address << 1, /* stm32 needs shifted value */
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	791b      	ldrb	r3, [r3, #4]
      status = I2Cx_ReadBytes((I2C_HandleTypeDef*) interface->handle,
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	b2d9      	uxtb	r1, r3
 8002766:	7afb      	ldrb	r3, [r7, #11]
 8002768:	b29c      	uxth	r4, r3
                              (uint16_t) regAdr,
                              numBytesToRead,
                              interface->options.i2c.slaveTransmitterMode,
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	795b      	ldrb	r3, [r3, #5]
 800276e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002772:	b2db      	uxtb	r3, r3
      status = I2Cx_ReadBytes((I2C_HandleTypeDef*) interface->handle,
 8002774:	461e      	mov	r6, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8a1b      	ldrh	r3, [r3, #16]
 800277a:	893d      	ldrh	r5, [r7, #8]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	9202      	str	r2, [sp, #8]
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	9600      	str	r6, [sp, #0]
 8002784:	462b      	mov	r3, r5
 8002786:	4622      	mov	r2, r4
 8002788:	f000 f97f 	bl	8002a8a <I2Cx_ReadBytes>
 800278c:	4603      	mov	r3, r0
 800278e:	75fb      	strb	r3, [r7, #23]
 8002790:	bf00      	nop
      }
    }
#else
    status = HAL_ERROR;
#endif /* HAL_I2C_MODULE_ENABLED */
    break;
 8002792:	e07b      	b.n	800288c <WE_ReadReg+0x1fc>
      for (uint16_t i = 0; (i < numBytesToRead) && (status == HAL_OK); i++)
 8002794:	2300      	movs	r3, #0
 8002796:	82bb      	strh	r3, [r7, #20]
 8002798:	e022      	b.n	80027e0 <WE_ReadReg+0x150>
        status = I2Cx_ReadBytes((I2C_HandleTypeDef*) interface->handle,
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6958      	ldr	r0, [r3, #20]
                                interface->options.i2c.address << 1, /* stm32 needs shifted value */
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	791b      	ldrb	r3, [r3, #4]
        status = I2Cx_ReadBytes((I2C_HandleTypeDef*) interface->handle,
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	b2dc      	uxtb	r4, r3
 80027a6:	7afb      	ldrb	r3, [r7, #11]
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	8abb      	ldrh	r3, [r7, #20]
 80027ac:	4413      	add	r3, r2
 80027ae:	b29d      	uxth	r5, r3
                                interface->options.i2c.slaveTransmitterMode,
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	795b      	ldrb	r3, [r3, #5]
 80027b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80027b8:	b2db      	uxtb	r3, r3
        status = I2Cx_ReadBytes((I2C_HandleTypeDef*) interface->handle,
 80027ba:	461e      	mov	r6, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8a1b      	ldrh	r3, [r3, #16]
 80027c0:	8aba      	ldrh	r2, [r7, #20]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	440a      	add	r2, r1
 80027c6:	9202      	str	r2, [sp, #8]
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	9600      	str	r6, [sp, #0]
 80027cc:	2301      	movs	r3, #1
 80027ce:	462a      	mov	r2, r5
 80027d0:	4621      	mov	r1, r4
 80027d2:	f000 f95a 	bl	8002a8a <I2Cx_ReadBytes>
 80027d6:	4603      	mov	r3, r0
 80027d8:	75fb      	strb	r3, [r7, #23]
      for (uint16_t i = 0; (i < numBytesToRead) && (status == HAL_OK); i++)
 80027da:	8abb      	ldrh	r3, [r7, #20]
 80027dc:	3301      	adds	r3, #1
 80027de:	82bb      	strh	r3, [r7, #20]
 80027e0:	8aba      	ldrh	r2, [r7, #20]
 80027e2:	893b      	ldrh	r3, [r7, #8]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d251      	bcs.n	800288c <WE_ReadReg+0x1fc>
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0d5      	beq.n	800279a <WE_ReadReg+0x10a>
    break;
 80027ee:	e04d      	b.n	800288c <WE_ReadReg+0x1fc>

  case WE_spi:
#ifdef HAL_SPI_MODULE_ENABLED
    if (interface->options.spi.burstMode != 0 || numBytesToRead == 1)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	7b9b      	ldrb	r3, [r3, #14]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d102      	bne.n	8002804 <WE_ReadReg+0x174>
 80027fe:	893b      	ldrh	r3, [r7, #8]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d115      	bne.n	8002830 <WE_ReadReg+0x1a0>
    {
      status = SPIx_ReadBytes((SPI_HandleTypeDef*) interface->handle,
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6958      	ldr	r0, [r3, #20]
                              (GPIO_TypeDef*) interface->options.spi.chipSelectPort,
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6899      	ldr	r1, [r3, #8]
      status = SPIx_ReadBytes((SPI_HandleTypeDef*) interface->handle,
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	899c      	ldrh	r4, [r3, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8a1b      	ldrh	r3, [r3, #16]
 8002814:	7afd      	ldrb	r5, [r7, #11]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	9202      	str	r2, [sp, #8]
 800281a:	9301      	str	r3, [sp, #4]
 800281c:	893b      	ldrh	r3, [r7, #8]
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	462b      	mov	r3, r5
 8002822:	4622      	mov	r2, r4
 8002824:	f000 f97e 	bl	8002b24 <SPIx_ReadBytes>
 8002828:	4603      	mov	r3, r0
 800282a:	75fb      	strb	r3, [r7, #23]
 800282c:	bf00      	nop
      }
    }
#else
    status = HAL_ERROR;
#endif /* HAL_SPI_MODULE_ENABLED */
    break;
 800282e:	e02f      	b.n	8002890 <WE_ReadReg+0x200>
      for (uint16_t i = 0; (i < numBytesToRead) && (status == HAL_OK); i++)
 8002830:	2300      	movs	r3, #0
 8002832:	827b      	strh	r3, [r7, #18]
 8002834:	e01d      	b.n	8002872 <WE_ReadReg+0x1e2>
        status = SPIx_ReadBytes((SPI_HandleTypeDef*) interface->handle,
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6958      	ldr	r0, [r3, #20]
                                (GPIO_TypeDef*) interface->options.spi.chipSelectPort,
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	689c      	ldr	r4, [r3, #8]
        status = SPIx_ReadBytes((SPI_HandleTypeDef*) interface->handle,
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	899d      	ldrh	r5, [r3, #12]
 8002842:	8a7b      	ldrh	r3, [r7, #18]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	7afb      	ldrb	r3, [r7, #11]
 8002848:	4413      	add	r3, r2
 800284a:	b2de      	uxtb	r6, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8a1b      	ldrh	r3, [r3, #16]
 8002850:	8a7a      	ldrh	r2, [r7, #18]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	440a      	add	r2, r1
 8002856:	9202      	str	r2, [sp, #8]
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	2301      	movs	r3, #1
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	4633      	mov	r3, r6
 8002860:	462a      	mov	r2, r5
 8002862:	4621      	mov	r1, r4
 8002864:	f000 f95e 	bl	8002b24 <SPIx_ReadBytes>
 8002868:	4603      	mov	r3, r0
 800286a:	75fb      	strb	r3, [r7, #23]
      for (uint16_t i = 0; (i < numBytesToRead) && (status == HAL_OK); i++)
 800286c:	8a7b      	ldrh	r3, [r7, #18]
 800286e:	3301      	adds	r3, #1
 8002870:	827b      	strh	r3, [r7, #18]
 8002872:	8a7a      	ldrh	r2, [r7, #18]
 8002874:	893b      	ldrh	r3, [r7, #8]
 8002876:	429a      	cmp	r2, r3
 8002878:	d20a      	bcs.n	8002890 <WE_ReadReg+0x200>
 800287a:	7dfb      	ldrb	r3, [r7, #23]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0da      	beq.n	8002836 <WE_ReadReg+0x1a6>
    break;
 8002880:	e006      	b.n	8002890 <WE_ReadReg+0x200>


  default:
	  status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	75fb      	strb	r3, [r7, #23]
	  break;
 8002886:	e004      	b.n	8002892 <WE_ReadReg+0x202>
    break;
 8002888:	bf00      	nop
 800288a:	e002      	b.n	8002892 <WE_ReadReg+0x202>
    break;
 800288c:	bf00      	nop
 800288e:	e000      	b.n	8002892 <WE_ReadReg+0x202>
    break;
 8002890:	bf00      	nop
  }

  return status == HAL_OK ? WE_SUCCESS : WE_FAIL;
 8002892:	7dfb      	ldrb	r3, [r7, #23]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <WE_ReadReg+0x20c>
 8002898:	2300      	movs	r3, #0
 800289a:	e001      	b.n	80028a0 <WE_ReadReg+0x210>
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028a8 <WE_WriteReg>:
 */
inline int8_t WE_WriteReg(WE_sensorInterface_t *interface,
                          uint8_t regAdr,
                          uint16_t numBytesToWrite,
                          uint8_t *data)
{
 80028a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028aa:	b08b      	sub	sp, #44	; 0x2c
 80028ac:	af04      	add	r7, sp, #16
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	607b      	str	r3, [r7, #4]
 80028b2:	460b      	mov	r3, r1
 80028b4:	72fb      	strb	r3, [r7, #11]
 80028b6:	4613      	mov	r3, r2
 80028b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	75fb      	strb	r3, [r7, #23]

  switch (interface->interfaceType)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	785b      	ldrb	r3, [r3, #1]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d007      	beq.n	80028d6 <WE_WriteReg+0x2e>
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	f300 80a7 	bgt.w	8002a1a <WE_WriteReg+0x172>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d014      	beq.n	80028fa <WE_WriteReg+0x52>
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d059      	beq.n	8002988 <WE_WriteReg+0xe0>
 80028d4:	e0a1      	b.n	8002a1a <WE_WriteReg+0x172>
  {


  case WE_i2c_fifo:
#ifdef HAL_I2C_MODULE_ENABLED
	  status = HAL_I2C_Master_Transmit(interface->handle,
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6958      	ldr	r0, [r3, #20]
			                          interface->options.i2c.address << 1,
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	791b      	ldrb	r3, [r3, #4]
 80028de:	b29b      	uxth	r3, r3
	  status = HAL_I2C_Master_Transmit(interface->handle,
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	b299      	uxth	r1, r3
									  data,
									  numBytesToWrite,
									  interface->options.writeTimeout);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8a5b      	ldrh	r3, [r3, #18]
	  status = HAL_I2C_Master_Transmit(interface->handle,
 80028e8:	461a      	mov	r2, r3
 80028ea:	893b      	ldrh	r3, [r7, #8]
 80028ec:	9200      	str	r2, [sp, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	f005 fce4 	bl	80082bc <HAL_I2C_Master_Transmit>
 80028f4:	4603      	mov	r3, r0
 80028f6:	75fb      	strb	r3, [r7, #23]
#else
    status = HAL_ERROR;
#endif /* HAL_I2C_MODULE_ENABLED */
	  break;
 80028f8:	e095      	b.n	8002a26 <WE_WriteReg+0x17e>

  case WE_i2c:
#ifdef HAL_I2C_MODULE_ENABLED
    if (interface->options.i2c.burstMode != 0 || numBytesToWrite == 1)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	795b      	ldrb	r3, [r3, #5]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d102      	bne.n	800290e <WE_WriteReg+0x66>
 8002908:	893b      	ldrh	r3, [r7, #8]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d115      	bne.n	800293a <WE_WriteReg+0x92>
    {
      status = I2Cx_WriteBytes((I2C_HandleTypeDef*) interface->handle,
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6958      	ldr	r0, [r3, #20]
                               interface->options.i2c.address << 1, /* stm32 needs shifted value */
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	791b      	ldrb	r3, [r3, #4]
      status = I2Cx_WriteBytes((I2C_HandleTypeDef*) interface->handle,
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	b2d9      	uxtb	r1, r3
 800291a:	7afb      	ldrb	r3, [r7, #11]
 800291c:	b29c      	uxth	r4, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8a5b      	ldrh	r3, [r3, #18]
 8002922:	893d      	ldrh	r5, [r7, #8]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	9201      	str	r2, [sp, #4]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	462b      	mov	r3, r5
 800292c:	4622      	mov	r2, r4
 800292e:	f000 f8da 	bl	8002ae6 <I2Cx_WriteBytes>
 8002932:	4603      	mov	r3, r0
 8002934:	75fb      	strb	r3, [r7, #23]
 8002936:	bf00      	nop
      }
    }
#else
    status = HAL_ERROR;
#endif /* HAL_I2C_MODULE_ENABLED */
    break;
 8002938:	e072      	b.n	8002a20 <WE_WriteReg+0x178>
      for (uint16_t i = 0; (i < numBytesToWrite) && (status == HAL_OK); i++)
 800293a:	2300      	movs	r3, #0
 800293c:	82bb      	strh	r3, [r7, #20]
 800293e:	e01b      	b.n	8002978 <WE_WriteReg+0xd0>
        status = I2Cx_WriteBytes((I2C_HandleTypeDef*) interface->handle,
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6958      	ldr	r0, [r3, #20]
                                 interface->options.i2c.address << 1, /* stm32 needs shifted value */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	791b      	ldrb	r3, [r3, #4]
        status = I2Cx_WriteBytes((I2C_HandleTypeDef*) interface->handle,
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	b2dc      	uxtb	r4, r3
 800294c:	7afb      	ldrb	r3, [r7, #11]
 800294e:	b29a      	uxth	r2, r3
 8002950:	8abb      	ldrh	r3, [r7, #20]
 8002952:	4413      	add	r3, r2
 8002954:	b29d      	uxth	r5, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8a5b      	ldrh	r3, [r3, #18]
 800295a:	8aba      	ldrh	r2, [r7, #20]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	440a      	add	r2, r1
 8002960:	9201      	str	r2, [sp, #4]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	2301      	movs	r3, #1
 8002966:	462a      	mov	r2, r5
 8002968:	4621      	mov	r1, r4
 800296a:	f000 f8bc 	bl	8002ae6 <I2Cx_WriteBytes>
 800296e:	4603      	mov	r3, r0
 8002970:	75fb      	strb	r3, [r7, #23]
      for (uint16_t i = 0; (i < numBytesToWrite) && (status == HAL_OK); i++)
 8002972:	8abb      	ldrh	r3, [r7, #20]
 8002974:	3301      	adds	r3, #1
 8002976:	82bb      	strh	r3, [r7, #20]
 8002978:	8aba      	ldrh	r2, [r7, #20]
 800297a:	893b      	ldrh	r3, [r7, #8]
 800297c:	429a      	cmp	r2, r3
 800297e:	d24f      	bcs.n	8002a20 <WE_WriteReg+0x178>
 8002980:	7dfb      	ldrb	r3, [r7, #23]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0dc      	beq.n	8002940 <WE_WriteReg+0x98>
    break;
 8002986:	e04b      	b.n	8002a20 <WE_WriteReg+0x178>

  case WE_spi:
#ifdef HAL_SPI_MODULE_ENABLED
    if (interface->options.spi.burstMode != 0 || numBytesToWrite == 1)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	7b9b      	ldrb	r3, [r3, #14]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d102      	bne.n	800299c <WE_WriteReg+0xf4>
 8002996:	893b      	ldrh	r3, [r7, #8]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d115      	bne.n	80029c8 <WE_WriteReg+0x120>
    {
      status = SPIx_WriteBytes((SPI_HandleTypeDef*) interface->handle,
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6958      	ldr	r0, [r3, #20]
                               (GPIO_TypeDef*) interface->options.spi.chipSelectPort,
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6899      	ldr	r1, [r3, #8]
      status = SPIx_WriteBytes((SPI_HandleTypeDef*) interface->handle,
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	899c      	ldrh	r4, [r3, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8a5b      	ldrh	r3, [r3, #18]
 80029ac:	7afd      	ldrb	r5, [r7, #11]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	9202      	str	r2, [sp, #8]
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	893b      	ldrh	r3, [r7, #8]
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	462b      	mov	r3, r5
 80029ba:	4622      	mov	r2, r4
 80029bc:	f000 f8eb 	bl	8002b96 <SPIx_WriteBytes>
 80029c0:	4603      	mov	r3, r0
 80029c2:	75fb      	strb	r3, [r7, #23]
 80029c4:	bf00      	nop
      }
    }
#else
    status = HAL_ERROR;
#endif /* HAL_SPI_MODULE_ENABLED */
    break;
 80029c6:	e02d      	b.n	8002a24 <WE_WriteReg+0x17c>
      for (uint16_t i = 0; (i < numBytesToWrite) && (status == HAL_OK); i++)
 80029c8:	2300      	movs	r3, #0
 80029ca:	827b      	strh	r3, [r7, #18]
 80029cc:	e01d      	b.n	8002a0a <WE_WriteReg+0x162>
        status = SPIx_WriteBytes((SPI_HandleTypeDef*) interface->handle,
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6958      	ldr	r0, [r3, #20]
                                 (GPIO_TypeDef*) interface->options.spi.chipSelectPort,
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	689c      	ldr	r4, [r3, #8]
        status = SPIx_WriteBytes((SPI_HandleTypeDef*) interface->handle,
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	899d      	ldrh	r5, [r3, #12]
 80029da:	8a7b      	ldrh	r3, [r7, #18]
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	7afb      	ldrb	r3, [r7, #11]
 80029e0:	4413      	add	r3, r2
 80029e2:	b2de      	uxtb	r6, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8a5b      	ldrh	r3, [r3, #18]
 80029e8:	8a7a      	ldrh	r2, [r7, #18]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	440a      	add	r2, r1
 80029ee:	9202      	str	r2, [sp, #8]
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	2301      	movs	r3, #1
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	4633      	mov	r3, r6
 80029f8:	462a      	mov	r2, r5
 80029fa:	4621      	mov	r1, r4
 80029fc:	f000 f8cb 	bl	8002b96 <SPIx_WriteBytes>
 8002a00:	4603      	mov	r3, r0
 8002a02:	75fb      	strb	r3, [r7, #23]
      for (uint16_t i = 0; (i < numBytesToWrite) && (status == HAL_OK); i++)
 8002a04:	8a7b      	ldrh	r3, [r7, #18]
 8002a06:	3301      	adds	r3, #1
 8002a08:	827b      	strh	r3, [r7, #18]
 8002a0a:	8a7a      	ldrh	r2, [r7, #18]
 8002a0c:	893b      	ldrh	r3, [r7, #8]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d208      	bcs.n	8002a24 <WE_WriteReg+0x17c>
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0da      	beq.n	80029ce <WE_WriteReg+0x126>
    break;
 8002a18:	e004      	b.n	8002a24 <WE_WriteReg+0x17c>

  default:
	  status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	75fb      	strb	r3, [r7, #23]
	  break;
 8002a1e:	e002      	b.n	8002a26 <WE_WriteReg+0x17e>
    break;
 8002a20:	bf00      	nop
 8002a22:	e000      	b.n	8002a26 <WE_WriteReg+0x17e>
    break;
 8002a24:	bf00      	nop
  }

  return status == HAL_OK ? WE_SUCCESS : WE_FAIL;
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <WE_WriteReg+0x188>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e001      	b.n	8002a34 <WE_WriteReg+0x18c>
 8002a30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a3c <WE_isSensorInterfaceReady>:
 * @brief Checks if the sensor interface is ready.
 * @param[in] interface Sensor interface
 * @return WE_SUCCESS if interface is ready, WE_FAIL if not.
 */
int8_t WE_isSensorInterfaceReady(WE_sensorInterface_t* interface)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  switch (interface->interfaceType)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	785b      	ldrb	r3, [r3, #1]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <WE_isSensorInterfaceReady+0x16>
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d014      	beq.n	8002a7a <WE_isSensorInterfaceReady+0x3e>
 8002a50:	e015      	b.n	8002a7e <WE_isSensorInterfaceReady+0x42>
  {
  case WE_i2c:
#ifdef HAL_I2C_MODULE_ENABLED
    return (HAL_OK == HAL_I2C_IsDeviceReady((I2C_HandleTypeDef*) interface->handle,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6958      	ldr	r0, [r3, #20]
                                            interface->options.i2c.address << 1,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	791b      	ldrb	r3, [r3, #4]
 8002a5a:	b29b      	uxth	r3, r3
    return (HAL_OK == HAL_I2C_IsDeviceReady((I2C_HandleTypeDef*) interface->handle,
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	b299      	uxth	r1, r3
 8002a60:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a64:	2240      	movs	r2, #64	; 0x40
 8002a66:	f006 f865 	bl	8008b34 <HAL_I2C_IsDeviceReady>
 8002a6a:	4603      	mov	r3, r0
                                            64,
                                            5000)) ? WE_SUCCESS : WE_FAIL;
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <WE_isSensorInterfaceReady+0x38>
 8002a70:	2300      	movs	r3, #0
 8002a72:	e006      	b.n	8002a82 <WE_isSensorInterfaceReady+0x46>
 8002a74:	f04f 33ff 	mov.w	r3, #4294967295
 8002a78:	e003      	b.n	8002a82 <WE_isSensorInterfaceReady+0x46>
    return WE_FAIL;
#endif

  case WE_spi:
#ifdef HAL_SPI_MODULE_ENABLED
    return WE_SUCCESS;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e001      	b.n	8002a82 <WE_isSensorInterfaceReady+0x46>
#else
    return WE_FAIL;
#endif

  default:
    return WE_FAIL;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <I2Cx_ReadBytes>:
                                        uint16_t reg,
                                        uint16_t numBytesToRead,
                                        uint8_t slaveTransmitterMode,
                                        uint16_t timeout,
                                        uint8_t *value)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b088      	sub	sp, #32
 8002a8e:	af04      	add	r7, sp, #16
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	4608      	mov	r0, r1
 8002a94:	4611      	mov	r1, r2
 8002a96:	461a      	mov	r2, r3
 8002a98:	4603      	mov	r3, r0
 8002a9a:	72fb      	strb	r3, [r7, #11]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	813b      	strh	r3, [r7, #8]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	80fb      	strh	r3, [r7, #6]
  if (slaveTransmitterMode == 0)
 8002aa4:	7e3b      	ldrb	r3, [r7, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10e      	bne.n	8002ac8 <I2Cx_ReadBytes+0x3e>
  {
    return HAL_I2C_Mem_Read(handle,
 8002aaa:	7afb      	ldrb	r3, [r7, #11]
 8002aac:	b299      	uxth	r1, r3
 8002aae:	8bbb      	ldrh	r3, [r7, #28]
 8002ab0:	893a      	ldrh	r2, [r7, #8]
 8002ab2:	9302      	str	r3, [sp, #8]
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	2301      	movs	r3, #1
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f005 ff1e 	bl	8008900 <HAL_I2C_Mem_Read>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	e00a      	b.n	8002ade <I2Cx_ReadBytes+0x54>
                            numBytesToRead,
                            timeout);
  }
  else
  {
    return HAL_I2C_Master_Receive(handle,
 8002ac8:	7afb      	ldrb	r3, [r7, #11]
 8002aca:	b299      	uxth	r1, r3
 8002acc:	8bbb      	ldrh	r3, [r7, #28]
 8002ace:	88fa      	ldrh	r2, [r7, #6]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	6a3a      	ldr	r2, [r7, #32]
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f005 fd08 	bl	80084ec <HAL_I2C_Master_Receive>
 8002adc:	4603      	mov	r3, r0
                                  addr,
                                  value,
                                  numBytesToRead,
                                  timeout);
  }
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <I2Cx_WriteBytes>:
                                         uint8_t addr,
                                         uint16_t reg,
                                         uint16_t numBytesToWrite,
                                         uint16_t timeout,
                                         uint8_t *value)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b088      	sub	sp, #32
 8002aea:	af04      	add	r7, sp, #16
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	4608      	mov	r0, r1
 8002af0:	4611      	mov	r1, r2
 8002af2:	461a      	mov	r2, r3
 8002af4:	4603      	mov	r3, r0
 8002af6:	72fb      	strb	r3, [r7, #11]
 8002af8:	460b      	mov	r3, r1
 8002afa:	813b      	strh	r3, [r7, #8]
 8002afc:	4613      	mov	r3, r2
 8002afe:	80fb      	strh	r3, [r7, #6]
  return HAL_I2C_Mem_Write(handle,
 8002b00:	7afb      	ldrb	r3, [r7, #11]
 8002b02:	b299      	uxth	r1, r3
 8002b04:	8b3b      	ldrh	r3, [r7, #24]
 8002b06:	893a      	ldrh	r2, [r7, #8]
 8002b08:	9302      	str	r3, [sp, #8]
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	9301      	str	r3, [sp, #4]
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	2301      	movs	r3, #1
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f005 fddf 	bl	80086d8 <HAL_I2C_Mem_Write>
 8002b1a:	4603      	mov	r3, r0
                           reg,
                           I2C_MEMADD_SIZE_8BIT,
                           value,
                           numBytesToWrite,
                           timeout);
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <SPIx_ReadBytes>:
                                        uint16_t chipSelectPin,
                                        uint8_t reg,
                                        uint16_t numBytesToRead,
                                        uint16_t timeout,
                                        uint8_t *value)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	461a      	mov	r2, r3
 8002b32:	460b      	mov	r3, r1
 8002b34:	80fb      	strh	r3, [r7, #6]
 8002b36:	4613      	mov	r3, r2
 8002b38:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	75fb      	strb	r3, [r7, #23]
  HAL_GPIO_WritePin(chipSelectPort, chipSelectPin, GPIO_PIN_RESET);
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	2200      	movs	r2, #0
 8002b42:	4619      	mov	r1, r3
 8002b44:	68b8      	ldr	r0, [r7, #8]
 8002b46:	f005 faed 	bl	8008124 <HAL_GPIO_WritePin>
  /* Bit 7 has to be 0 for write and 1 for read operations */
  uint8_t header = reg | (1 << 7);
 8002b4a:	797b      	ldrb	r3, [r7, #5]
 8002b4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	75bb      	strb	r3, [r7, #22]
  /* For some sensors (e.g. HIDS) Bit 6 is used for auto-increment (MS) in multiple reads/writes (1: enabled, 0: disabled) */
//  if (numBytesToRead > 1)
//  {
//    header |= 1 << 6;
//  }
  status = HAL_SPI_Transmit(handle, &header, 1, timeout);
 8002b54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b56:	f107 0116 	add.w	r1, r7, #22
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f009 fc9a 	bl	800c496 <HAL_SPI_Transmit>
 8002b62:	4603      	mov	r3, r0
 8002b64:	75fb      	strb	r3, [r7, #23]
  if (status != HAL_OK)
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <SPIx_ReadBytes+0x4c>
  {
    return status;
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
 8002b6e:	e00e      	b.n	8002b8e <SPIx_ReadBytes+0x6a>
  }
  status = HAL_SPI_Receive(handle, value, numBytesToRead, timeout);
 8002b70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b72:	8c3a      	ldrh	r2, [r7, #32]
 8002b74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f009 fe02 	bl	800c780 <HAL_SPI_Receive>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	75fb      	strb	r3, [r7, #23]
  HAL_GPIO_WritePin(chipSelectPort, chipSelectPin, GPIO_PIN_SET);
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	2201      	movs	r2, #1
 8002b84:	4619      	mov	r1, r3
 8002b86:	68b8      	ldr	r0, [r7, #8]
 8002b88:	f005 facc 	bl	8008124 <HAL_GPIO_WritePin>
  return status;
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <SPIx_WriteBytes>:
                                         uint16_t chipSelectPin,
                                         uint8_t reg,
                                         uint16_t numBytesToWrite,
                                         uint16_t timeout,
                                         uint8_t *value)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	80fb      	strh	r3, [r7, #6]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	75fb      	strb	r3, [r7, #23]
  HAL_GPIO_WritePin(chipSelectPort, chipSelectPin, GPIO_PIN_RESET);
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	68b8      	ldr	r0, [r7, #8]
 8002bb8:	f005 fab4 	bl	8008124 <HAL_GPIO_WritePin>
  /* Bit 7 has to be 0 for write and 1 for read operations */
  uint8_t header = reg & ~(1 << 7);
 8002bbc:	797b      	ldrb	r3, [r7, #5]
 8002bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	75bb      	strb	r3, [r7, #22]
  /* For some sensors (e.g. HIDS) Bit 6 is used for auto-increment (MS) in multiple reads/writes (1: enabled, 0: disabled) */
//  if (numBytesToWrite > 1)
//  {
//    header |= 1 << 6;
//  }
  status = HAL_SPI_Transmit(handle, &header, 1, timeout);
 8002bc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002bc8:	f107 0116 	add.w	r1, r7, #22
 8002bcc:	2201      	movs	r2, #1
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f009 fc61 	bl	800c496 <HAL_SPI_Transmit>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	75fb      	strb	r3, [r7, #23]
  if (status != HAL_OK)
 8002bd8:	7dfb      	ldrb	r3, [r7, #23]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <SPIx_WriteBytes+0x4c>
  {
    return status;
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
 8002be0:	e00e      	b.n	8002c00 <SPIx_WriteBytes+0x6a>
  }
  status = HAL_SPI_Transmit(handle, value, numBytesToWrite, timeout);
 8002be2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002be4:	8c3a      	ldrh	r2, [r7, #32]
 8002be6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f009 fc54 	bl	800c496 <HAL_SPI_Transmit>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	75fb      	strb	r3, [r7, #23]
  HAL_GPIO_WritePin(chipSelectPort, chipSelectPin, GPIO_PIN_SET);
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	68b8      	ldr	r0, [r7, #8]
 8002bfa:	f005 fa93 	bl	8008124 <HAL_GPIO_WritePin>
  return status;
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <MX_SPI1_Init+0x74>)
 8002c0e:	4a1c      	ldr	r2, [pc, #112]	; (8002c80 <MX_SPI1_Init+0x78>)
 8002c10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c12:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <MX_SPI1_Init+0x74>)
 8002c14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c1a:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <MX_SPI1_Init+0x74>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c20:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <MX_SPI1_Init+0x74>)
 8002c22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c28:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <MX_SPI1_Init+0x74>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c2e:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <MX_SPI1_Init+0x74>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <MX_SPI1_Init+0x74>)
 8002c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <MX_SPI1_Init+0x74>)
 8002c3e:	2210      	movs	r2, #16
 8002c40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c42:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <MX_SPI1_Init+0x74>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c48:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <MX_SPI1_Init+0x74>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <MX_SPI1_Init+0x74>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c54:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <MX_SPI1_Init+0x74>)
 8002c56:	2207      	movs	r2, #7
 8002c58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c5a:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <MX_SPI1_Init+0x74>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <MX_SPI1_Init+0x74>)
 8002c62:	2208      	movs	r2, #8
 8002c64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c66:	4805      	ldr	r0, [pc, #20]	; (8002c7c <MX_SPI1_Init+0x74>)
 8002c68:	f009 fb72 	bl	800c350 <HAL_SPI_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002c72:	f7ff f874 	bl	8001d5e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000ae8 	.word	0x20000ae8
 8002c80:	40013000 	.word	0x40013000

08002c84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	; 0x28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a25      	ldr	r2, [pc, #148]	; (8002d38 <HAL_SPI_MspInit+0xb4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d144      	bne.n	8002d30 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ca6:	4b25      	ldr	r3, [pc, #148]	; (8002d3c <HAL_SPI_MspInit+0xb8>)
 8002ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002caa:	4a24      	ldr	r2, [pc, #144]	; (8002d3c <HAL_SPI_MspInit+0xb8>)
 8002cac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cb0:	6613      	str	r3, [r2, #96]	; 0x60
 8002cb2:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <HAL_SPI_MspInit+0xb8>)
 8002cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cbe:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <HAL_SPI_MspInit+0xb8>)
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc2:	4a1e      	ldr	r2, [pc, #120]	; (8002d3c <HAL_SPI_MspInit+0xb8>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cca:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <HAL_SPI_MspInit+0xb8>)
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd6:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_SPI_MspInit+0xb8>)
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cda:	4a18      	ldr	r2, [pc, #96]	; (8002d3c <HAL_SPI_MspInit+0xb8>)
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ce2:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <HAL_SPI_MspInit+0xb8>)
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002cee:	2360      	movs	r3, #96	; 0x60
 8002cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cfe:	2305      	movs	r3, #5
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d02:	f107 0314 	add.w	r3, r7, #20
 8002d06:	4619      	mov	r1, r3
 8002d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d0c:	f005 f8a0 	bl	8007e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d10:	2320      	movs	r3, #32
 8002d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	2302      	movs	r3, #2
 8002d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d20:	2305      	movs	r3, #5
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d24:	f107 0314 	add.w	r3, r7, #20
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4805      	ldr	r0, [pc, #20]	; (8002d40 <HAL_SPI_MspInit+0xbc>)
 8002d2c:	f005 f890 	bl	8007e50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002d30:	bf00      	nop
 8002d32:	3728      	adds	r7, #40	; 0x28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40013000 	.word	0x40013000
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	48000400 	.word	0x48000400
 8002d44:	00000000 	.word	0x00000000

08002d48 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 8002d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d4c:	ed2d 8b02 	vpush	{d8}
 8002d50:	b09c      	sub	sp, #112	; 0x70
 8002d52:	af10      	add	r7, sp, #64	; 0x40
 8002d54:	6278      	str	r0, [r7, #36]	; 0x24
 8002d56:	ed87 0a08 	vstr	s0, [r7, #32]
 8002d5a:	edc7 0a07 	vstr	s1, [r7, #28]
 8002d5e:	61b9      	str	r1, [r7, #24]
 8002d60:	617a      	str	r2, [r7, #20]
 8002d62:	ed87 1a04 	vstr	s2, [r7, #16]
	int framesize=0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
	framesize=snprintf((uint8_t*)buffer,256, "%0.2f,%0.2f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2);
 8002d6a:	6a38      	ldr	r0, [r7, #32]
 8002d6c:	f7fd fbec 	bl	8000548 <__aeabi_f2d>
 8002d70:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002d74:	69f8      	ldr	r0, [r7, #28]
 8002d76:	f7fd fbe7 	bl	8000548 <__aeabi_f2d>
 8002d7a:	e9c7 0100 	strd	r0, r1, [r7]
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd fbe0 	bl	8000548 <__aeabi_f2d>
 8002d88:	a320      	add	r3, pc, #128	; (adr r3, 8002e0c <csvframe+0xc4>)
 8002d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8e:	f7fd fc33 	bl	80005f8 <__aeabi_dmul>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	ec43 2b18 	vmov	d8, r2, r3
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fbcc 	bl	8000548 <__aeabi_f2d>
 8002db0:	4604      	mov	r4, r0
 8002db2:	460d      	mov	r5, r1
 8002db4:	6938      	ldr	r0, [r7, #16]
 8002db6:	f7fd fbc7 	bl	8000548 <__aeabi_f2d>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	930c      	str	r3, [sp, #48]	; 0x30
 8002dc6:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002dca:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8002dce:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002dd2:	ed8d 8b04 	vstr	d8, [sp, #16]
 8002dd6:	ed97 7b00 	vldr	d7, [r7]
 8002dda:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002dde:	ed97 7b02 	vldr	d7, [r7, #8]
 8002de2:	ed8d 7b00 	vstr	d7, [sp]
 8002de6:	4a08      	ldr	r2, [pc, #32]	; (8002e08 <csvframe+0xc0>)
 8002de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dee:	f013 fc99 	bl	8016724 <sniprintf>
 8002df2:	62f8      	str	r0, [r7, #44]	; 0x2c
	return framesize;
 8002df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3730      	adds	r7, #48	; 0x30
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	ecbd 8b02 	vpop	{d8}
 8002e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e04:	f3af 8000 	nop.w
 8002e08:	0801ba48 	.word	0x0801ba48
 8002e0c:	cccccccd 	.word	0xcccccccd
 8002e10:	400ccccc 	.word	0x400ccccc

08002e14 <storeindex>:


void storeindex(void){
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b09c      	sub	sp, #112	; 0x70
 8002e18:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 8002e1a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002e1e:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 8002e20:	463b      	mov	r3, r7
 8002e22:	2264      	movs	r2, #100	; 0x64
 8002e24:	2100      	movs	r1, #0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f013 fd13 	bl	8016852 <memset>
	snprintf((uint8_t*)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 8002e2c:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <storeindex+0x6c>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <storeindex+0x70>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4638      	mov	r0, r7
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	4a13      	ldr	r2, [pc, #76]	; (8002e88 <storeindex+0x74>)
 8002e3c:	2164      	movs	r1, #100	; 0x64
 8002e3e:	f013 fc71 	bl	8016724 <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8002e42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	da00      	bge.n	8002e4a <storeindex+0x36>
 8002e48:	330f      	adds	r3, #15
 8002e4a:	111b      	asrs	r3, r3, #4
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fd fb69 	bl	8000524 <__aeabi_i2d>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f7fd fe7d 	bl	8000b58 <__aeabi_d2iz>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4619      	mov	r1, r3
 8002e62:	480a      	ldr	r0, [pc, #40]	; (8002e8c <storeindex+0x78>)
 8002e64:	f010 fef9 	bl	8013c5a <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8002e68:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002e6a:	463a      	mov	r2, r7
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	2364      	movs	r3, #100	; 0x64
 8002e72:	4806      	ldr	r0, [pc, #24]	; (8002e8c <storeindex+0x78>)
 8002e74:	f010 ff74 	bl	8013d60 <SPIF_WritePage>

}
 8002e78:	bf00      	nop
 8002e7a:	3768      	adds	r7, #104	; 0x68
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000988 	.word	0x20000988
 8002e84:	2000098c 	.word	0x2000098c
 8002e88:	0801ba78 	.word	0x0801ba78
 8002e8c:	20000740 	.word	0x20000740

08002e90 <getindex>:

void getindex(void){
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 8002e96:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002e9a:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	2332      	movs	r3, #50	; 0x32
 8002ea4:	4a2b      	ldr	r2, [pc, #172]	; (8002f54 <getindex+0xc4>)
 8002ea6:	482c      	ldr	r0, [pc, #176]	; (8002f58 <getindex+0xc8>)
 8002ea8:	f010 ff78 	bl	8013d9c <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 8002eac:	220a      	movs	r2, #10
 8002eae:	2124      	movs	r1, #36	; 0x24
 8002eb0:	482a      	ldr	r0, [pc, #168]	; (8002f5c <getindex+0xcc>)
 8002eb2:	f013 fcce 	bl	8016852 <memset>
	memset(numbuf2,'$',10);
 8002eb6:	220a      	movs	r2, #10
 8002eb8:	2124      	movs	r1, #36	; 0x24
 8002eba:	4829      	ldr	r0, [pc, #164]	; (8002f60 <getindex+0xd0>)
 8002ebc:	f013 fcc9 	bl	8016852 <memset>
	int cnt=0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 8002ec4:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <getindex+0xc4>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	2b09      	cmp	r3, #9
 8002ece:	dc3a      	bgt.n	8002f46 <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 8002ed0:	e00b      	b.n	8002eea <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 8002ed2:	4a20      	ldr	r2, [pc, #128]	; (8002f54 <getindex+0xc4>)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	7819      	ldrb	r1, [r3, #0]
 8002eda:	4a20      	ldr	r2, [pc, #128]	; (8002f5c <getindex+0xcc>)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4413      	add	r3, r2
 8002ee0:	460a      	mov	r2, r1
 8002ee2:	701a      	strb	r2, [r3, #0]
			  cnt++;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 8002eea:	4a1a      	ldr	r2, [pc, #104]	; (8002f54 <getindex+0xc4>)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4413      	add	r3, r2
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b24      	cmp	r3, #36	; 0x24
 8002ef4:	d1ed      	bne.n	8002ed2 <getindex+0x42>
		  }
		  cnt++;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8002f00:	e00e      	b.n	8002f20 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8002f02:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <getindex+0xc4>)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	7819      	ldrb	r1, [r3, #0]
 8002f0a:	4a15      	ldr	r2, [pc, #84]	; (8002f60 <getindex+0xd0>)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4413      	add	r3, r2
 8002f10:	460a      	mov	r2, r1
 8002f12:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	3301      	adds	r3, #1
 8002f18:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 8002f20:	4a0c      	ldr	r2, [pc, #48]	; (8002f54 <getindex+0xc4>)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4413      	add	r3, r2
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b24      	cmp	r3, #36	; 0x24
 8002f2a:	d1ea      	bne.n	8002f02 <getindex+0x72>
		  	  }

		 pageoffset=atoi((uint8_t*)numbuf1);
 8002f2c:	480b      	ldr	r0, [pc, #44]	; (8002f5c <getindex+0xcc>)
 8002f2e:	f011 fcf9 	bl	8014924 <atoi>
 8002f32:	4603      	mov	r3, r0
 8002f34:	4a0b      	ldr	r2, [pc, #44]	; (8002f64 <getindex+0xd4>)
 8002f36:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((uint8_t*)numbuf2);
 8002f38:	4809      	ldr	r0, [pc, #36]	; (8002f60 <getindex+0xd0>)
 8002f3a:	f011 fcf3 	bl	8014924 <atoi>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4a09      	ldr	r2, [pc, #36]	; (8002f68 <getindex+0xd8>)
 8002f42:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 8002f44:	e001      	b.n	8002f4a <getindex+0xba>
		storeindex();
 8002f46:	f7ff ff65 	bl	8002e14 <storeindex>
}
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000ab4 	.word	0x20000ab4
 8002f58:	20000740 	.word	0x20000740
 8002f5c:	20000994 	.word	0x20000994
 8002f60:	200009a0 	.word	0x200009a0
 8002f64:	20000988 	.word	0x20000988
 8002f68:	2000098c 	.word	0x2000098c

08002f6c <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 8002f76:	4b3f      	ldr	r3, [pc, #252]	; (8003074 <writebuffertoflash+0x108>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d11b      	bne.n	8002fbc <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8002f84:	4b3c      	ldr	r3, [pc, #240]	; (8003078 <writebuffertoflash+0x10c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d117      	bne.n	8002fbc <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8002f8c:	4b39      	ldr	r3, [pc, #228]	; (8003074 <writebuffertoflash+0x108>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3301      	adds	r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	da00      	bge.n	8002f98 <writebuffertoflash+0x2c>
 8002f96:	330f      	adds	r3, #15
 8002f98:	111b      	asrs	r3, r3, #4
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd fac2 	bl	8000524 <__aeabi_i2d>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	f7fd fdd6 	bl	8000b58 <__aeabi_d2iz>
 8002fac:	4603      	mov	r3, r0
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4832      	ldr	r0, [pc, #200]	; (800307c <writebuffertoflash+0x110>)
 8002fb2:	f010 fe52 	bl	8013c5a <SPIF_EraseSector>
		sectoreraseen=1;
 8002fb6:	4b30      	ldr	r3, [pc, #192]	; (8003078 <writebuffertoflash+0x10c>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 8002fbc:	4b30      	ldr	r3, [pc, #192]	; (8003080 <writebuffertoflash+0x114>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	2bff      	cmp	r3, #255	; 0xff
 8002fc6:	dc11      	bgt.n	8002fec <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8002fc8:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <writebuffertoflash+0x108>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	4a2b      	ldr	r2, [pc, #172]	; (8003080 <writebuffertoflash+0x114>)
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	9200      	str	r2, [sp, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	4828      	ldr	r0, [pc, #160]	; (800307c <writebuffertoflash+0x110>)
 8002fda:	f010 fec1 	bl	8013d60 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 8002fde:	4b28      	ldr	r3, [pc, #160]	; (8003080 <writebuffertoflash+0x114>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	4a26      	ldr	r2, [pc, #152]	; (8003080 <writebuffertoflash+0x114>)
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	e03c      	b.n	8003066 <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 8002fec:	4b21      	ldr	r3, [pc, #132]	; (8003074 <writebuffertoflash+0x108>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4b23      	ldr	r3, [pc, #140]	; (8003080 <writebuffertoflash+0x114>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b20      	ldr	r3, [pc, #128]	; (8003080 <writebuffertoflash+0x114>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	4613      	mov	r3, r2
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	481d      	ldr	r0, [pc, #116]	; (800307c <writebuffertoflash+0x110>)
 8003008:	f010 feaa 	bl	8013d60 <SPIF_WritePage>
		HAL_Delay(100);
 800300c:	2064      	movs	r0, #100	; 0x64
 800300e:	f003 f8c7 	bl	80061a0 <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 8003012:	4b18      	ldr	r3, [pc, #96]	; (8003074 <writebuffertoflash+0x108>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3301      	adds	r3, #1
 8003018:	4618      	mov	r0, r3
 800301a:	4b19      	ldr	r3, [pc, #100]	; (8003080 <writebuffertoflash+0x114>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003022:	461a      	mov	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	1899      	adds	r1, r3, r2
 8003028:	4b15      	ldr	r3, [pc, #84]	; (8003080 <writebuffertoflash+0x114>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	461a      	mov	r2, r3
 8003036:	2300      	movs	r3, #0
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	4613      	mov	r3, r2
 800303c:	460a      	mov	r2, r1
 800303e:	4601      	mov	r1, r0
 8003040:	480e      	ldr	r0, [pc, #56]	; (800307c <writebuffertoflash+0x110>)
 8003042:	f010 fe8d 	bl	8013d60 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <writebuffertoflash+0x108>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3301      	adds	r3, #1
 800304c:	4a09      	ldr	r2, [pc, #36]	; (8003074 <writebuffertoflash+0x108>)
 800304e:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <writebuffertoflash+0x10c>)
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 8003056:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <writebuffertoflash+0x114>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	4a07      	ldr	r2, [pc, #28]	; (8003080 <writebuffertoflash+0x114>)
 8003064:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 8003066:	f7ff fed5 	bl	8002e14 <storeindex>

}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	2000098c 	.word	0x2000098c
 8003078:	20000990 	.word	0x20000990
 800307c:	20000740 	.word	0x20000740
 8003080:	20000988 	.word	0x20000988

08003084 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern char str[20];

void ssd1306_Reset(void) {
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003088:	bf00      	nop
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af04      	add	r7, sp, #16
 800309a:	4603      	mov	r3, r0
 800309c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800309e:	f04f 33ff 	mov.w	r3, #4294967295
 80030a2:	9302      	str	r3, [sp, #8]
 80030a4:	2301      	movs	r3, #1
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	1dfb      	adds	r3, r7, #7
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	2301      	movs	r3, #1
 80030ae:	2200      	movs	r2, #0
 80030b0:	2178      	movs	r1, #120	; 0x78
 80030b2:	4803      	ldr	r0, [pc, #12]	; (80030c0 <ssd1306_WriteCommand+0x2c>)
 80030b4:	f005 fb10 	bl	80086d8 <HAL_I2C_Mem_Write>
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20000454 	.word	0x20000454

080030c4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af04      	add	r7, sp, #16
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	f04f 32ff 	mov.w	r2, #4294967295
 80030d6:	9202      	str	r2, [sp, #8]
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	2301      	movs	r3, #1
 80030e0:	2240      	movs	r2, #64	; 0x40
 80030e2:	2178      	movs	r1, #120	; 0x78
 80030e4:	4803      	ldr	r0, [pc, #12]	; (80030f4 <ssd1306_WriteData+0x30>)
 80030e6:	f005 faf7 	bl	80086d8 <HAL_I2C_Mem_Write>
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000454 	.word	0x20000454

080030f8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80030fc:	f7ff ffc2 	bl	8003084 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003100:	2064      	movs	r0, #100	; 0x64
 8003102:	f003 f84d 	bl	80061a0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003106:	2000      	movs	r0, #0
 8003108:	f000 fba0 	bl	800384c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800310c:	2020      	movs	r0, #32
 800310e:	f7ff ffc1 	bl	8003094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003112:	2000      	movs	r0, #0
 8003114:	f7ff ffbe 	bl	8003094 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003118:	20b0      	movs	r0, #176	; 0xb0
 800311a:	f7ff ffbb 	bl	8003094 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800311e:	20c8      	movs	r0, #200	; 0xc8
 8003120:	f7ff ffb8 	bl	8003094 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003124:	2000      	movs	r0, #0
 8003126:	f7ff ffb5 	bl	8003094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800312a:	2010      	movs	r0, #16
 800312c:	f7ff ffb2 	bl	8003094 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003130:	2040      	movs	r0, #64	; 0x40
 8003132:	f7ff ffaf 	bl	8003094 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003136:	20ff      	movs	r0, #255	; 0xff
 8003138:	f000 fb75 	bl	8003826 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800313c:	20a1      	movs	r0, #161	; 0xa1
 800313e:	f7ff ffa9 	bl	8003094 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003142:	20a6      	movs	r0, #166	; 0xa6
 8003144:	f7ff ffa6 	bl	8003094 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003148:	20a8      	movs	r0, #168	; 0xa8
 800314a:	f7ff ffa3 	bl	8003094 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800314e:	203f      	movs	r0, #63	; 0x3f
 8003150:	f7ff ffa0 	bl	8003094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003154:	20a4      	movs	r0, #164	; 0xa4
 8003156:	f7ff ff9d 	bl	8003094 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800315a:	20d3      	movs	r0, #211	; 0xd3
 800315c:	f7ff ff9a 	bl	8003094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003160:	2000      	movs	r0, #0
 8003162:	f7ff ff97 	bl	8003094 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003166:	20d5      	movs	r0, #213	; 0xd5
 8003168:	f7ff ff94 	bl	8003094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800316c:	20f0      	movs	r0, #240	; 0xf0
 800316e:	f7ff ff91 	bl	8003094 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003172:	20d9      	movs	r0, #217	; 0xd9
 8003174:	f7ff ff8e 	bl	8003094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003178:	2022      	movs	r0, #34	; 0x22
 800317a:	f7ff ff8b 	bl	8003094 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800317e:	20da      	movs	r0, #218	; 0xda
 8003180:	f7ff ff88 	bl	8003094 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003184:	2012      	movs	r0, #18
 8003186:	f7ff ff85 	bl	8003094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800318a:	20db      	movs	r0, #219	; 0xdb
 800318c:	f7ff ff82 	bl	8003094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003190:	2020      	movs	r0, #32
 8003192:	f7ff ff7f 	bl	8003094 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003196:	208d      	movs	r0, #141	; 0x8d
 8003198:	f7ff ff7c 	bl	8003094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800319c:	2014      	movs	r0, #20
 800319e:	f7ff ff79 	bl	8003094 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80031a2:	2001      	movs	r0, #1
 80031a4:	f000 fb52 	bl	800384c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80031a8:	2000      	movs	r0, #0
 80031aa:	f000 f80f 	bl	80031cc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80031ae:	f000 f825 	bl	80031fc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80031b2:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <ssd1306_Init+0xd0>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <ssd1306_Init+0xd0>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80031be:	4b02      	ldr	r3, [pc, #8]	; (80031c8 <ssd1306_Init+0xd0>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	711a      	strb	r2, [r3, #4]
}
 80031c4:	bf00      	nop
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20000f4c 	.word	0x20000f4c

080031cc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <ssd1306_Fill+0x14>
 80031dc:	2300      	movs	r3, #0
 80031de:	e000      	b.n	80031e2 <ssd1306_Fill+0x16>
 80031e0:	23ff      	movs	r3, #255	; 0xff
 80031e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031e6:	4619      	mov	r1, r3
 80031e8:	4803      	ldr	r0, [pc, #12]	; (80031f8 <ssd1306_Fill+0x2c>)
 80031ea:	f013 fb32 	bl	8016852 <memset>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000b4c 	.word	0x20000b4c

080031fc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003202:	2300      	movs	r3, #0
 8003204:	71fb      	strb	r3, [r7, #7]
 8003206:	e016      	b.n	8003236 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	3b50      	subs	r3, #80	; 0x50
 800320c:	b2db      	uxtb	r3, r3
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff ff40 	bl	8003094 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003214:	2000      	movs	r0, #0
 8003216:	f7ff ff3d 	bl	8003094 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800321a:	2010      	movs	r0, #16
 800321c:	f7ff ff3a 	bl	8003094 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003220:	79fb      	ldrb	r3, [r7, #7]
 8003222:	01db      	lsls	r3, r3, #7
 8003224:	4a08      	ldr	r2, [pc, #32]	; (8003248 <ssd1306_UpdateScreen+0x4c>)
 8003226:	4413      	add	r3, r2
 8003228:	2180      	movs	r1, #128	; 0x80
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff ff4a 	bl	80030c4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	3301      	adds	r3, #1
 8003234:	71fb      	strb	r3, [r7, #7]
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	2b07      	cmp	r3, #7
 800323a:	d9e5      	bls.n	8003208 <ssd1306_UpdateScreen+0xc>
    }
}
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000b4c 	.word	0x20000b4c

0800324c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	71fb      	strb	r3, [r7, #7]
 8003256:	460b      	mov	r3, r1
 8003258:	71bb      	strb	r3, [r7, #6]
 800325a:	4613      	mov	r3, r2
 800325c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	2b00      	cmp	r3, #0
 8003264:	db3d      	blt.n	80032e2 <ssd1306_DrawPixel+0x96>
 8003266:	79bb      	ldrb	r3, [r7, #6]
 8003268:	2b3f      	cmp	r3, #63	; 0x3f
 800326a:	d83a      	bhi.n	80032e2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800326c:	797b      	ldrb	r3, [r7, #5]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d11a      	bne.n	80032a8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003272:	79fa      	ldrb	r2, [r7, #7]
 8003274:	79bb      	ldrb	r3, [r7, #6]
 8003276:	08db      	lsrs	r3, r3, #3
 8003278:	b2d8      	uxtb	r0, r3
 800327a:	4603      	mov	r3, r0
 800327c:	01db      	lsls	r3, r3, #7
 800327e:	4413      	add	r3, r2
 8003280:	4a1b      	ldr	r2, [pc, #108]	; (80032f0 <ssd1306_DrawPixel+0xa4>)
 8003282:	5cd3      	ldrb	r3, [r2, r3]
 8003284:	b25a      	sxtb	r2, r3
 8003286:	79bb      	ldrb	r3, [r7, #6]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	2101      	movs	r1, #1
 800328e:	fa01 f303 	lsl.w	r3, r1, r3
 8003292:	b25b      	sxtb	r3, r3
 8003294:	4313      	orrs	r3, r2
 8003296:	b259      	sxtb	r1, r3
 8003298:	79fa      	ldrb	r2, [r7, #7]
 800329a:	4603      	mov	r3, r0
 800329c:	01db      	lsls	r3, r3, #7
 800329e:	4413      	add	r3, r2
 80032a0:	b2c9      	uxtb	r1, r1
 80032a2:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <ssd1306_DrawPixel+0xa4>)
 80032a4:	54d1      	strb	r1, [r2, r3]
 80032a6:	e01d      	b.n	80032e4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80032a8:	79fa      	ldrb	r2, [r7, #7]
 80032aa:	79bb      	ldrb	r3, [r7, #6]
 80032ac:	08db      	lsrs	r3, r3, #3
 80032ae:	b2d8      	uxtb	r0, r3
 80032b0:	4603      	mov	r3, r0
 80032b2:	01db      	lsls	r3, r3, #7
 80032b4:	4413      	add	r3, r2
 80032b6:	4a0e      	ldr	r2, [pc, #56]	; (80032f0 <ssd1306_DrawPixel+0xa4>)
 80032b8:	5cd3      	ldrb	r3, [r2, r3]
 80032ba:	b25a      	sxtb	r2, r3
 80032bc:	79bb      	ldrb	r3, [r7, #6]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	2101      	movs	r1, #1
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	b25b      	sxtb	r3, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	b25b      	sxtb	r3, r3
 80032ce:	4013      	ands	r3, r2
 80032d0:	b259      	sxtb	r1, r3
 80032d2:	79fa      	ldrb	r2, [r7, #7]
 80032d4:	4603      	mov	r3, r0
 80032d6:	01db      	lsls	r3, r3, #7
 80032d8:	4413      	add	r3, r2
 80032da:	b2c9      	uxtb	r1, r1
 80032dc:	4a04      	ldr	r2, [pc, #16]	; (80032f0 <ssd1306_DrawPixel+0xa4>)
 80032de:	54d1      	strb	r1, [r2, r3]
 80032e0:	e000      	b.n	80032e4 <ssd1306_DrawPixel+0x98>
        return;
 80032e2:	bf00      	nop
    }
}
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000b4c 	.word	0x20000b4c

080032f4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b089      	sub	sp, #36	; 0x24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4604      	mov	r4, r0
 80032fc:	1d38      	adds	r0, r7, #4
 80032fe:	e880 0006 	stmia.w	r0, {r1, r2}
 8003302:	461a      	mov	r2, r3
 8003304:	4623      	mov	r3, r4
 8003306:	73fb      	strb	r3, [r7, #15]
 8003308:	4613      	mov	r3, r2
 800330a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	2b1f      	cmp	r3, #31
 8003310:	d902      	bls.n	8003318 <ssd1306_WriteChar+0x24>
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	2b7e      	cmp	r3, #126	; 0x7e
 8003316:	d901      	bls.n	800331c <ssd1306_WriteChar+0x28>
        return 0;
 8003318:	2300      	movs	r3, #0
 800331a:	e06d      	b.n	80033f8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800331c:	4b38      	ldr	r3, [pc, #224]	; (8003400 <ssd1306_WriteChar+0x10c>)
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	793b      	ldrb	r3, [r7, #4]
 8003324:	4413      	add	r3, r2
 8003326:	2b80      	cmp	r3, #128	; 0x80
 8003328:	dc06      	bgt.n	8003338 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800332a:	4b35      	ldr	r3, [pc, #212]	; (8003400 <ssd1306_WriteChar+0x10c>)
 800332c:	885b      	ldrh	r3, [r3, #2]
 800332e:	461a      	mov	r2, r3
 8003330:	797b      	ldrb	r3, [r7, #5]
 8003332:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	dd01      	ble.n	800333c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003338:	2300      	movs	r3, #0
 800333a:	e05d      	b.n	80033f8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800333c:	2300      	movs	r3, #0
 800333e:	61fb      	str	r3, [r7, #28]
 8003340:	e04c      	b.n	80033dc <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	3b20      	subs	r3, #32
 8003348:	7979      	ldrb	r1, [r7, #5]
 800334a:	fb01 f303 	mul.w	r3, r1, r3
 800334e:	4619      	mov	r1, r3
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	440b      	add	r3, r1
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800335c:	2300      	movs	r3, #0
 800335e:	61bb      	str	r3, [r7, #24]
 8003360:	e034      	b.n	80033cc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d012      	beq.n	8003398 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003372:	4b23      	ldr	r3, [pc, #140]	; (8003400 <ssd1306_WriteChar+0x10c>)
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	b2da      	uxtb	r2, r3
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	4413      	add	r3, r2
 800337e:	b2d8      	uxtb	r0, r3
 8003380:	4b1f      	ldr	r3, [pc, #124]	; (8003400 <ssd1306_WriteChar+0x10c>)
 8003382:	885b      	ldrh	r3, [r3, #2]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	4413      	add	r3, r2
 800338c:	b2db      	uxtb	r3, r3
 800338e:	7bba      	ldrb	r2, [r7, #14]
 8003390:	4619      	mov	r1, r3
 8003392:	f7ff ff5b 	bl	800324c <ssd1306_DrawPixel>
 8003396:	e016      	b.n	80033c6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003398:	4b19      	ldr	r3, [pc, #100]	; (8003400 <ssd1306_WriteChar+0x10c>)
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	b2d8      	uxtb	r0, r3
 80033a6:	4b16      	ldr	r3, [pc, #88]	; (8003400 <ssd1306_WriteChar+0x10c>)
 80033a8:	885b      	ldrh	r3, [r3, #2]
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	4413      	add	r3, r2
 80033b2:	b2d9      	uxtb	r1, r3
 80033b4:	7bbb      	ldrb	r3, [r7, #14]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	bf0c      	ite	eq
 80033ba:	2301      	moveq	r3, #1
 80033bc:	2300      	movne	r3, #0
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	f7ff ff43 	bl	800324c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	3301      	adds	r3, #1
 80033ca:	61bb      	str	r3, [r7, #24]
 80033cc:	793b      	ldrb	r3, [r7, #4]
 80033ce:	461a      	mov	r2, r3
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d3c5      	bcc.n	8003362 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3301      	adds	r3, #1
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	797b      	ldrb	r3, [r7, #5]
 80033de:	461a      	mov	r2, r3
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d3ad      	bcc.n	8003342 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80033e6:	4b06      	ldr	r3, [pc, #24]	; (8003400 <ssd1306_WriteChar+0x10c>)
 80033e8:	881a      	ldrh	r2, [r3, #0]
 80033ea:	793b      	ldrb	r3, [r7, #4]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	4b03      	ldr	r3, [pc, #12]	; (8003400 <ssd1306_WriteChar+0x10c>)
 80033f4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3724      	adds	r7, #36	; 0x24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd90      	pop	{r4, r7, pc}
 8003400:	20000f4c 	.word	0x20000f4c

08003404 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	1d38      	adds	r0, r7, #4
 800340e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003412:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8003414:	e012      	b.n	800343c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	7818      	ldrb	r0, [r3, #0]
 800341a:	78fb      	ldrb	r3, [r7, #3]
 800341c:	1d3a      	adds	r2, r7, #4
 800341e:	ca06      	ldmia	r2, {r1, r2}
 8003420:	f7ff ff68 	bl	80032f4 <ssd1306_WriteChar>
 8003424:	4603      	mov	r3, r0
 8003426:	461a      	mov	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d002      	beq.n	8003436 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	e008      	b.n	8003448 <ssd1306_WriteString+0x44>
        }
        str++;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3301      	adds	r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e8      	bne.n	8003416 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	781b      	ldrb	r3, [r3, #0]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	460a      	mov	r2, r1
 800345a:	71fb      	strb	r3, [r7, #7]
 800345c:	4613      	mov	r3, r2
 800345e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	b29a      	uxth	r2, r3
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <ssd1306_SetCursor+0x2c>)
 8003466:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003468:	79bb      	ldrb	r3, [r7, #6]
 800346a:	b29a      	uxth	r2, r3
 800346c:	4b03      	ldr	r3, [pc, #12]	; (800347c <ssd1306_SetCursor+0x2c>)
 800346e:	805a      	strh	r2, [r3, #2]
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	20000f4c 	.word	0x20000f4c

08003480 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b089      	sub	sp, #36	; 0x24
 8003484:	af00      	add	r7, sp, #0
 8003486:	4604      	mov	r4, r0
 8003488:	4608      	mov	r0, r1
 800348a:	4611      	mov	r1, r2
 800348c:	461a      	mov	r2, r3
 800348e:	4623      	mov	r3, r4
 8003490:	71fb      	strb	r3, [r7, #7]
 8003492:	4603      	mov	r3, r0
 8003494:	71bb      	strb	r3, [r7, #6]
 8003496:	460b      	mov	r3, r1
 8003498:	717b      	strb	r3, [r7, #5]
 800349a:	4613      	mov	r3, r2
 800349c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800349e:	797a      	ldrb	r2, [r7, #5]
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bfb8      	it	lt
 80034a8:	425b      	neglt	r3, r3
 80034aa:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80034ac:	793a      	ldrb	r2, [r7, #4]
 80034ae:	79bb      	ldrb	r3, [r7, #6]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	bfb8      	it	lt
 80034b6:	425b      	neglt	r3, r3
 80034b8:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80034ba:	79fa      	ldrb	r2, [r7, #7]
 80034bc:	797b      	ldrb	r3, [r7, #5]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d201      	bcs.n	80034c6 <ssd1306_Line+0x46>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e001      	b.n	80034ca <ssd1306_Line+0x4a>
 80034c6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ca:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80034cc:	79ba      	ldrb	r2, [r7, #6]
 80034ce:	793b      	ldrb	r3, [r7, #4]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d201      	bcs.n	80034d8 <ssd1306_Line+0x58>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e001      	b.n	80034dc <ssd1306_Line+0x5c>
 80034d8:	f04f 33ff 	mov.w	r3, #4294967295
 80034dc:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80034e6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80034ea:	7939      	ldrb	r1, [r7, #4]
 80034ec:	797b      	ldrb	r3, [r7, #5]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff feac 	bl	800324c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80034f4:	e024      	b.n	8003540 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80034f6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80034fa:	79b9      	ldrb	r1, [r7, #6]
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff fea4 	bl	800324c <ssd1306_DrawPixel>
        error2 = error * 2;
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	425b      	negs	r3, r3
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	429a      	cmp	r2, r3
 8003512:	dd08      	ble.n	8003526 <ssd1306_Line+0xa6>
            error -= deltaY;
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	b2da      	uxtb	r2, r3
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	4413      	add	r3, r2
 8003524:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	429a      	cmp	r2, r3
 800352c:	da08      	bge.n	8003540 <ssd1306_Line+0xc0>
            error += deltaX;
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	4413      	add	r3, r2
 8003534:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	b2da      	uxtb	r2, r3
 800353a:	79bb      	ldrb	r3, [r7, #6]
 800353c:	4413      	add	r3, r2
 800353e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8003540:	79fa      	ldrb	r2, [r7, #7]
 8003542:	797b      	ldrb	r3, [r7, #5]
 8003544:	429a      	cmp	r2, r3
 8003546:	d1d6      	bne.n	80034f6 <ssd1306_Line+0x76>
 8003548:	79ba      	ldrb	r2, [r7, #6]
 800354a:	793b      	ldrb	r3, [r7, #4]
 800354c:	429a      	cmp	r2, r3
 800354e:	d1d2      	bne.n	80034f6 <ssd1306_Line+0x76>
        }
    }
    return;
 8003550:	bf00      	nop
}
 8003552:	3724      	adds	r7, #36	; 0x24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd90      	pop	{r4, r7, pc}

08003558 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	4604      	mov	r4, r0
 8003560:	4608      	mov	r0, r1
 8003562:	4611      	mov	r1, r2
 8003564:	461a      	mov	r2, r3
 8003566:	4623      	mov	r3, r4
 8003568:	71fb      	strb	r3, [r7, #7]
 800356a:	4603      	mov	r3, r0
 800356c:	71bb      	strb	r3, [r7, #6]
 800356e:	460b      	mov	r3, r1
 8003570:	717b      	strb	r3, [r7, #5]
 8003572:	4613      	mov	r3, r2
 8003574:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8003576:	797b      	ldrb	r3, [r7, #5]
 8003578:	425b      	negs	r3, r3
 800357a:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8003580:	797b      	ldrb	r3, [r7, #5]
 8003582:	f1c3 0301 	rsb	r3, r3, #1
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	2b00      	cmp	r3, #0
 8003590:	db65      	blt.n	800365e <ssd1306_DrawCircle+0x106>
 8003592:	79bb      	ldrb	r3, [r7, #6]
 8003594:	2b3f      	cmp	r3, #63	; 0x3f
 8003596:	d862      	bhi.n	800365e <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	79fa      	ldrb	r2, [r7, #7]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	b2d8      	uxtb	r0, r3
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	79bb      	ldrb	r3, [r7, #6]
 80035a8:	4413      	add	r3, r2
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	793a      	ldrb	r2, [r7, #4]
 80035ae:	4619      	mov	r1, r3
 80035b0:	f7ff fe4c 	bl	800324c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	4413      	add	r3, r2
 80035bc:	b2d8      	uxtb	r0, r3
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	79bb      	ldrb	r3, [r7, #6]
 80035c4:	4413      	add	r3, r2
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	793a      	ldrb	r2, [r7, #4]
 80035ca:	4619      	mov	r1, r3
 80035cc:	f7ff fe3e 	bl	800324c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	4413      	add	r3, r2
 80035d8:	b2d8      	uxtb	r0, r3
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	79ba      	ldrb	r2, [r7, #6]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	793a      	ldrb	r2, [r7, #4]
 80035e6:	4619      	mov	r1, r3
 80035e8:	f7ff fe30 	bl	800324c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	79fa      	ldrb	r2, [r7, #7]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	b2d8      	uxtb	r0, r3
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	79ba      	ldrb	r2, [r7, #6]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	793a      	ldrb	r2, [r7, #4]
 8003602:	4619      	mov	r1, r3
 8003604:	f7ff fe22 	bl	800324c <ssd1306_DrawPixel>
        e2 = err;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	429a      	cmp	r2, r3
 8003612:	dc13      	bgt.n	800363c <ssd1306_DrawCircle+0xe4>
            y++;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	3301      	adds	r3, #1
 8003618:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	3301      	adds	r3, #1
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4413      	add	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	425b      	negs	r3, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	429a      	cmp	r2, r3
 800362e:	d105      	bne.n	800363c <ssd1306_DrawCircle+0xe4>
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	429a      	cmp	r2, r3
 8003636:	dc01      	bgt.n	800363c <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	429a      	cmp	r2, r3
 8003642:	dd08      	ble.n	8003656 <ssd1306_DrawCircle+0xfe>
            x++;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	3301      	adds	r3, #1
 8003648:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	3301      	adds	r3, #1
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4413      	add	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	dd9d      	ble.n	8003598 <ssd1306_DrawCircle+0x40>

    return;
 800365c:	e000      	b.n	8003660 <ssd1306_DrawCircle+0x108>
        return;
 800365e:	bf00      	nop
}
 8003660:	371c      	adds	r7, #28
 8003662:	46bd      	mov	sp, r7
 8003664:	bd90      	pop	{r4, r7, pc}

08003666 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003666:	b590      	push	{r4, r7, lr}
 8003668:	b085      	sub	sp, #20
 800366a:	af02      	add	r7, sp, #8
 800366c:	4604      	mov	r4, r0
 800366e:	4608      	mov	r0, r1
 8003670:	4611      	mov	r1, r2
 8003672:	461a      	mov	r2, r3
 8003674:	4623      	mov	r3, r4
 8003676:	71fb      	strb	r3, [r7, #7]
 8003678:	4603      	mov	r3, r0
 800367a:	71bb      	strb	r3, [r7, #6]
 800367c:	460b      	mov	r3, r1
 800367e:	717b      	strb	r3, [r7, #5]
 8003680:	4613      	mov	r3, r2
 8003682:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8003684:	79bc      	ldrb	r4, [r7, #6]
 8003686:	797a      	ldrb	r2, [r7, #5]
 8003688:	79b9      	ldrb	r1, [r7, #6]
 800368a:	79f8      	ldrb	r0, [r7, #7]
 800368c:	7e3b      	ldrb	r3, [r7, #24]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	4623      	mov	r3, r4
 8003692:	f7ff fef5 	bl	8003480 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8003696:	793c      	ldrb	r4, [r7, #4]
 8003698:	797a      	ldrb	r2, [r7, #5]
 800369a:	79b9      	ldrb	r1, [r7, #6]
 800369c:	7978      	ldrb	r0, [r7, #5]
 800369e:	7e3b      	ldrb	r3, [r7, #24]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	4623      	mov	r3, r4
 80036a4:	f7ff feec 	bl	8003480 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80036a8:	793c      	ldrb	r4, [r7, #4]
 80036aa:	79fa      	ldrb	r2, [r7, #7]
 80036ac:	7939      	ldrb	r1, [r7, #4]
 80036ae:	7978      	ldrb	r0, [r7, #5]
 80036b0:	7e3b      	ldrb	r3, [r7, #24]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	4623      	mov	r3, r4
 80036b6:	f7ff fee3 	bl	8003480 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80036ba:	79bc      	ldrb	r4, [r7, #6]
 80036bc:	79fa      	ldrb	r2, [r7, #7]
 80036be:	7939      	ldrb	r1, [r7, #4]
 80036c0:	79f8      	ldrb	r0, [r7, #7]
 80036c2:	7e3b      	ldrb	r3, [r7, #24]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	4623      	mov	r3, r4
 80036c8:	f7ff feda 	bl	8003480 <ssd1306_Line>

    return;
 80036cc:	bf00      	nop
}
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd90      	pop	{r4, r7, pc}

080036d4 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4604      	mov	r4, r0
 80036dc:	4608      	mov	r0, r1
 80036de:	4611      	mov	r1, r2
 80036e0:	461a      	mov	r2, r3
 80036e2:	4623      	mov	r3, r4
 80036e4:	71fb      	strb	r3, [r7, #7]
 80036e6:	4603      	mov	r3, r0
 80036e8:	71bb      	strb	r3, [r7, #6]
 80036ea:	460b      	mov	r3, r1
 80036ec:	717b      	strb	r3, [r7, #5]
 80036ee:	4613      	mov	r3, r2
 80036f0:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80036f2:	79fa      	ldrb	r2, [r7, #7]
 80036f4:	797b      	ldrb	r3, [r7, #5]
 80036f6:	4293      	cmp	r3, r2
 80036f8:	bf28      	it	cs
 80036fa:	4613      	movcs	r3, r2
 80036fc:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80036fe:	797a      	ldrb	r2, [r7, #5]
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	4293      	cmp	r3, r2
 8003704:	bf38      	it	cc
 8003706:	4613      	movcc	r3, r2
 8003708:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 800370a:	79ba      	ldrb	r2, [r7, #6]
 800370c:	793b      	ldrb	r3, [r7, #4]
 800370e:	4293      	cmp	r3, r2
 8003710:	bf28      	it	cs
 8003712:	4613      	movcs	r3, r2
 8003714:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8003716:	793a      	ldrb	r2, [r7, #4]
 8003718:	79bb      	ldrb	r3, [r7, #6]
 800371a:	4293      	cmp	r3, r2
 800371c:	bf38      	it	cc
 800371e:	4613      	movcc	r3, r2
 8003720:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8003722:	7afb      	ldrb	r3, [r7, #11]
 8003724:	73fb      	strb	r3, [r7, #15]
 8003726:	e017      	b.n	8003758 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8003728:	7b7b      	ldrb	r3, [r7, #13]
 800372a:	73bb      	strb	r3, [r7, #14]
 800372c:	e009      	b.n	8003742 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 800372e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003732:	7bf9      	ldrb	r1, [r7, #15]
 8003734:	7bbb      	ldrb	r3, [r7, #14]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff fd88 	bl	800324c <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800373c:	7bbb      	ldrb	r3, [r7, #14]
 800373e:	3301      	adds	r3, #1
 8003740:	73bb      	strb	r3, [r7, #14]
 8003742:	7bba      	ldrb	r2, [r7, #14]
 8003744:	7b3b      	ldrb	r3, [r7, #12]
 8003746:	429a      	cmp	r2, r3
 8003748:	d803      	bhi.n	8003752 <ssd1306_FillRectangle+0x7e>
 800374a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800374e:	2b00      	cmp	r3, #0
 8003750:	daed      	bge.n	800372e <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	3301      	adds	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	7abb      	ldrb	r3, [r7, #10]
 800375c:	429a      	cmp	r2, r3
 800375e:	d803      	bhi.n	8003768 <ssd1306_FillRectangle+0x94>
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b3f      	cmp	r3, #63	; 0x3f
 8003764:	d9e0      	bls.n	8003728 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8003766:	bf00      	nop
 8003768:	bf00      	nop
}
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	bd90      	pop	{r4, r7, pc}

08003770 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	603a      	str	r2, [r7, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	4603      	mov	r3, r0
 800377c:	71fb      	strb	r3, [r7, #7]
 800377e:	460b      	mov	r3, r1
 8003780:	71bb      	strb	r3, [r7, #6]
 8003782:	4613      	mov	r3, r2
 8003784:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8003786:	797b      	ldrb	r3, [r7, #5]
 8003788:	3307      	adds	r3, #7
 800378a:	2b00      	cmp	r3, #0
 800378c:	da00      	bge.n	8003790 <ssd1306_DrawBitmap+0x20>
 800378e:	3307      	adds	r3, #7
 8003790:	10db      	asrs	r3, r3, #3
 8003792:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379c:	2b00      	cmp	r3, #0
 800379e:	db3e      	blt.n	800381e <ssd1306_DrawBitmap+0xae>
 80037a0:	79bb      	ldrb	r3, [r7, #6]
 80037a2:	2b3f      	cmp	r3, #63	; 0x3f
 80037a4:	d83b      	bhi.n	800381e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80037a6:	2300      	movs	r3, #0
 80037a8:	73bb      	strb	r3, [r7, #14]
 80037aa:	e033      	b.n	8003814 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80037ac:	2300      	movs	r3, #0
 80037ae:	737b      	strb	r3, [r7, #13]
 80037b0:	e026      	b.n	8003800 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80037b2:	7b7b      	ldrb	r3, [r7, #13]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
 80037c2:	e00d      	b.n	80037e0 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80037c4:	7bbb      	ldrb	r3, [r7, #14]
 80037c6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80037ca:	fb02 f303 	mul.w	r3, r2, r3
 80037ce:	7b7a      	ldrb	r2, [r7, #13]
 80037d0:	08d2      	lsrs	r2, r2, #3
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	4413      	add	r3, r2
 80037d6:	461a      	mov	r2, r3
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	4413      	add	r3, r2
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80037e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	da08      	bge.n	80037fa <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80037e8:	79fa      	ldrb	r2, [r7, #7]
 80037ea:	7b7b      	ldrb	r3, [r7, #13]
 80037ec:	4413      	add	r3, r2
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	7f3a      	ldrb	r2, [r7, #28]
 80037f2:	79b9      	ldrb	r1, [r7, #6]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff fd29 	bl	800324c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80037fa:	7b7b      	ldrb	r3, [r7, #13]
 80037fc:	3301      	adds	r3, #1
 80037fe:	737b      	strb	r3, [r7, #13]
 8003800:	7b7a      	ldrb	r2, [r7, #13]
 8003802:	797b      	ldrb	r3, [r7, #5]
 8003804:	429a      	cmp	r2, r3
 8003806:	d3d4      	bcc.n	80037b2 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8003808:	7bbb      	ldrb	r3, [r7, #14]
 800380a:	3301      	adds	r3, #1
 800380c:	73bb      	strb	r3, [r7, #14]
 800380e:	79bb      	ldrb	r3, [r7, #6]
 8003810:	3301      	adds	r3, #1
 8003812:	71bb      	strb	r3, [r7, #6]
 8003814:	7bba      	ldrb	r2, [r7, #14]
 8003816:	7e3b      	ldrb	r3, [r7, #24]
 8003818:	429a      	cmp	r2, r3
 800381a:	d3c7      	bcc.n	80037ac <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800381c:	e000      	b.n	8003820 <ssd1306_DrawBitmap+0xb0>
        return;
 800381e:	bf00      	nop
}
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	4603      	mov	r3, r0
 800382e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003830:	2381      	movs	r3, #129	; 0x81
 8003832:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fc2c 	bl	8003094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff fc28 	bl	8003094 <ssd1306_WriteCommand>
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800385c:	23af      	movs	r3, #175	; 0xaf
 800385e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003860:	4b08      	ldr	r3, [pc, #32]	; (8003884 <ssd1306_SetDisplayOn+0x38>)
 8003862:	2201      	movs	r2, #1
 8003864:	715a      	strb	r2, [r3, #5]
 8003866:	e004      	b.n	8003872 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003868:	23ae      	movs	r3, #174	; 0xae
 800386a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <ssd1306_SetDisplayOn+0x38>)
 800386e:	2200      	movs	r2, #0
 8003870:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fc0d 	bl	8003094 <ssd1306_WriteCommand>
}
 800387a:	bf00      	nop
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000f4c 	.word	0x20000f4c

08003888 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	b087      	sub	sp, #28
 800388c:	af02      	add	r7, sp, #8
 800388e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003892:	60b8      	str	r0, [r7, #8]
 8003894:	6079      	str	r1, [r7, #4]
 8003896:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	330f      	adds	r3, #15
 800389e:	b2d8      	uxtb	r0, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	3301      	adds	r3, #1
 80038a6:	b2d9      	uxtb	r1, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	330f      	adds	r3, #15
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	3305      	adds	r3, #5
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2401      	movs	r4, #1
 80038ba:	9400      	str	r4, [sp, #0]
 80038bc:	f7ff fde0 	bl	8003480 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	3310      	adds	r3, #16
 80038c6:	b2d8      	uxtb	r0, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	3301      	adds	r3, #1
 80038ce:	b2d9      	uxtb	r1, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	3310      	adds	r3, #16
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	3305      	adds	r3, #5
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2401      	movs	r4, #1
 80038e2:	9400      	str	r4, [sp, #0]
 80038e4:	f7ff fdcc 	bl	8003480 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	b2d8      	uxtb	r0, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	b2d9      	uxtb	r1, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	330e      	adds	r3, #14
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	3306      	adds	r3, #6
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2401      	movs	r4, #1
 8003902:	9400      	str	r4, [sp, #0]
 8003904:	f7ff feaf 	bl	8003666 <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f7fc fe1d 	bl	8000548 <__aeabi_f2d>
 800390e:	a396      	add	r3, pc, #600	; (adr r3, 8003b68 <batterygauge+0x2e0>)
 8003910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003914:	f7fd f8ec 	bl	8000af0 <__aeabi_dcmple>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d02a      	beq.n	8003974 <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	3302      	adds	r3, #2
 8003924:	b2d8      	uxtb	r0, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	3302      	adds	r3, #2
 800392c:	b2d9      	uxtb	r1, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	b2db      	uxtb	r3, r3
 8003932:	3303      	adds	r3, #3
 8003934:	b2da      	uxtb	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	3304      	adds	r3, #4
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2401      	movs	r4, #1
 8003940:	9400      	str	r4, [sp, #0]
 8003942:	f7ff fe90 	bl	8003666 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d113      	bne.n	8003974 <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	3302      	adds	r3, #2
 8003952:	b2d8      	uxtb	r0, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	3302      	adds	r3, #2
 800395a:	b2d9      	uxtb	r1, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	b2db      	uxtb	r3, r3
 8003960:	3303      	adds	r3, #3
 8003962:	b2da      	uxtb	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	3304      	adds	r3, #4
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2401      	movs	r4, #1
 800396e:	9400      	str	r4, [sp, #0]
 8003970:	f7ff fe79 	bl	8003666 <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f7fc fde7 	bl	8000548 <__aeabi_f2d>
 800397a:	a37b      	add	r3, pc, #492	; (adr r3, 8003b68 <batterygauge+0x2e0>)
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	f7fd f8ca 	bl	8000b18 <__aeabi_dcmpgt>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d035      	beq.n	80039f6 <batterygauge+0x16e>
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f7fc fddc 	bl	8000548 <__aeabi_f2d>
 8003990:	a377      	add	r3, pc, #476	; (adr r3, 8003b70 <batterygauge+0x2e8>)
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	f7fd f8ab 	bl	8000af0 <__aeabi_dcmple>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d02a      	beq.n	80039f6 <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	3302      	adds	r3, #2
 80039a6:	b2d8      	uxtb	r0, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	3302      	adds	r3, #2
 80039ae:	b2d9      	uxtb	r1, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	3303      	adds	r3, #3
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	3304      	adds	r3, #4
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2401      	movs	r4, #1
 80039c2:	9400      	str	r4, [sp, #0]
 80039c4:	f7ff fe4f 	bl	8003666 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d113      	bne.n	80039f6 <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	3305      	adds	r3, #5
 80039d4:	b2d8      	uxtb	r0, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	3302      	adds	r3, #2
 80039dc:	b2d9      	uxtb	r1, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	3306      	adds	r3, #6
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	3304      	adds	r3, #4
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2401      	movs	r4, #1
 80039f0:	9400      	str	r4, [sp, #0]
 80039f2:	f7ff fe38 	bl	8003666 <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f7fc fda6 	bl	8000548 <__aeabi_f2d>
 80039fc:	a35c      	add	r3, pc, #368	; (adr r3, 8003b70 <batterygauge+0x2e8>)
 80039fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a02:	f7fd f889 	bl	8000b18 <__aeabi_dcmpgt>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d049      	beq.n	8003aa0 <batterygauge+0x218>
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f7fc fd9b 	bl	8000548 <__aeabi_f2d>
 8003a12:	a359      	add	r3, pc, #356	; (adr r3, 8003b78 <batterygauge+0x2f0>)
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f7fd f86a 	bl	8000af0 <__aeabi_dcmple>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d03e      	beq.n	8003aa0 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	3302      	adds	r3, #2
 8003a28:	b2d8      	uxtb	r0, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	3302      	adds	r3, #2
 8003a30:	b2d9      	uxtb	r1, r3
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	3303      	adds	r3, #3
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	3304      	adds	r3, #4
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2401      	movs	r4, #1
 8003a44:	9400      	str	r4, [sp, #0]
 8003a46:	f7ff fe0e 	bl	8003666 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	3305      	adds	r3, #5
 8003a50:	b2d8      	uxtb	r0, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	3302      	adds	r3, #2
 8003a58:	b2d9      	uxtb	r1, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	3306      	adds	r3, #6
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	3304      	adds	r3, #4
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2401      	movs	r4, #1
 8003a6c:	9400      	str	r4, [sp, #0]
 8003a6e:	f7ff fdfa 	bl	8003666 <ssd1306_DrawRectangle>

		if(currentsquare==1){
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d113      	bne.n	8003aa0 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	b2d8      	uxtb	r0, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	3302      	adds	r3, #2
 8003a86:	b2d9      	uxtb	r1, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	3309      	adds	r3, #9
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	3304      	adds	r3, #4
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2401      	movs	r4, #1
 8003a9a:	9400      	str	r4, [sp, #0]
 8003a9c:	f7ff fde3 	bl	8003666 <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f7fc fd51 	bl	8000548 <__aeabi_f2d>
 8003aa6:	a334      	add	r3, pc, #208	; (adr r3, 8003b78 <batterygauge+0x2f0>)
 8003aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aac:	f7fd f834 	bl	8000b18 <__aeabi_dcmpgt>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d100      	bne.n	8003ab8 <batterygauge+0x230>
	}




}
 8003ab6:	e052      	b.n	8003b5e <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	3302      	adds	r3, #2
 8003abe:	b2d8      	uxtb	r0, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	b2d9      	uxtb	r1, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	3303      	adds	r3, #3
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2401      	movs	r4, #1
 8003ada:	9400      	str	r4, [sp, #0]
 8003adc:	f7ff fdc3 	bl	8003666 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	3305      	adds	r3, #5
 8003ae6:	b2d8      	uxtb	r0, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	3302      	adds	r3, #2
 8003aee:	b2d9      	uxtb	r1, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	3306      	adds	r3, #6
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	3304      	adds	r3, #4
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2401      	movs	r4, #1
 8003b02:	9400      	str	r4, [sp, #0]
 8003b04:	f7ff fdaf 	bl	8003666 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	3308      	adds	r3, #8
 8003b0e:	b2d8      	uxtb	r0, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	3302      	adds	r3, #2
 8003b16:	b2d9      	uxtb	r1, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	3309      	adds	r3, #9
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	3304      	adds	r3, #4
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2401      	movs	r4, #1
 8003b2a:	9400      	str	r4, [sp, #0]
 8003b2c:	f7ff fd9b 	bl	8003666 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d113      	bne.n	8003b5e <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	330b      	adds	r3, #11
 8003b3c:	b2d8      	uxtb	r0, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	3302      	adds	r3, #2
 8003b44:	b2d9      	uxtb	r1, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	330c      	adds	r3, #12
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	3304      	adds	r3, #4
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2401      	movs	r4, #1
 8003b58:	9400      	str	r4, [sp, #0]
 8003b5a:	f7ff fd84 	bl	8003666 <ssd1306_DrawRectangle>
}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd90      	pop	{r4, r7, pc}
 8003b66:	bf00      	nop
 8003b68:	9999999a 	.word	0x9999999a
 8003b6c:	400d9999 	.word	0x400d9999
 8003b70:	33333333 	.word	0x33333333
 8003b74:	400f3333 	.word	0x400f3333
 8003b78:	66666666 	.word	0x66666666
 8003b7c:	40106666 	.word	0x40106666

08003b80 <percentage>:

void percentage(float percent){
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 40, floor(0.64*percent+32), 56, White);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fc fcdc 	bl	8000548 <__aeabi_f2d>
 8003b90:	a329      	add	r3, pc, #164	; (adr r3, 8003c38 <percentage+0xb8>)
 8003b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b96:	f7fc fd2f 	bl	80005f8 <__aeabi_dmul>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <percentage+0xa8>)
 8003ba8:	f7fc fb70 	bl	800028c <__adddf3>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	ec43 2b17 	vmov	d7, r2, r3
 8003bb4:	eeb0 0a47 	vmov.f32	s0, s14
 8003bb8:	eef0 0a67 	vmov.f32	s1, s15
 8003bbc:	f015 fd78 	bl	80196b0 <floor>
 8003bc0:	ec53 2b10 	vmov	r2, r3, d0
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	f7fc ffee 	bl	8000ba8 <__aeabi_d2uiz>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2338      	movs	r3, #56	; 0x38
 8003bd6:	2128      	movs	r1, #40	; 0x28
 8003bd8:	2020      	movs	r0, #32
 8003bda:	f7ff fd7b 	bl	80036d4 <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 40, 95, 56, White);
 8003bde:	2301      	movs	r3, #1
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	2338      	movs	r3, #56	; 0x38
 8003be4:	225f      	movs	r2, #95	; 0x5f
 8003be6:	2128      	movs	r1, #40	; 0x28
 8003be8:	2020      	movs	r0, #32
 8003bea:	f7ff fd3c 	bl	8003666 <ssd1306_DrawRectangle>
	snprintf((uint8_t *)str,20,"%0.2f %%",(float) percent);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7fc fcaa 	bl	8000548 <__aeabi_f2d>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	e9cd 2300 	strd	r2, r3, [sp]
 8003bfc:	4a0b      	ldr	r2, [pc, #44]	; (8003c2c <percentage+0xac>)
 8003bfe:	2114      	movs	r1, #20
 8003c00:	480b      	ldr	r0, [pc, #44]	; (8003c30 <percentage+0xb0>)
 8003c02:	f012 fd8f 	bl	8016724 <sniprintf>
	ssd1306_SetCursor(45,44);
 8003c06:	212c      	movs	r1, #44	; 0x2c
 8003c08:	202d      	movs	r0, #45	; 0x2d
 8003c0a:	f7ff fc21 	bl	8003450 <ssd1306_SetCursor>
	ssd1306_WriteString((uint8_t*)str,Font_6x8,White);
 8003c0e:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <percentage+0xb4>)
 8003c10:	2301      	movs	r3, #1
 8003c12:	ca06      	ldmia	r2, {r1, r2}
 8003c14:	4806      	ldr	r0, [pc, #24]	; (8003c30 <percentage+0xb0>)
 8003c16:	f7ff fbf5 	bl	8003404 <ssd1306_WriteString>


}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	f3af 8000 	nop.w
 8003c28:	40400000 	.word	0x40400000
 8003c2c:	0801ba80 	.word	0x0801ba80
 8003c30:	20000774 	.word	0x20000774
 8003c34:	20000020 	.word	0x20000020
 8003c38:	47ae147b 	.word	0x47ae147b
 8003c3c:	3fe47ae1 	.word	0x3fe47ae1

08003c40 <statemachine>:
extern WE_sensorInterface_t pads;
extern int baroenableinit;
extern float altibaro;


void statemachine(void){
 8003c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c42:	ed2d 8b02 	vpush	{d8}
 8003c46:	b09f      	sub	sp, #124	; 0x7c
 8003c48:	af04      	add	r7, sp, #16
	switch(state){
 8003c4a:	4b99      	ldr	r3, [pc, #612]	; (8003eb0 <statemachine+0x270>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	2b07      	cmp	r3, #7
 8003c50:	f201 8686 	bhi.w	8005960 <statemachine+0x1d20>
 8003c54:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <statemachine+0x1c>)
 8003c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5a:	bf00      	nop
 8003c5c:	08003c7d 	.word	0x08003c7d
 8003c60:	08004111 	.word	0x08004111
 8003c64:	08004659 	.word	0x08004659
 8003c68:	08004cc3 	.word	0x08004cc3
 8003c6c:	08004e7b 	.word	0x08004e7b
 8003c70:	08005091 	.word	0x08005091
 8003c74:	08005189 	.word	0x08005189
 8003c78:	080054dd 	.word	0x080054dd
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	f7ff faa5 	bl	80031cc <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 8003c82:	2120      	movs	r1, #32
 8003c84:	2020      	movs	r0, #32
 8003c86:	f7ff fbe3 	bl	8003450 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 8003c8a:	498a      	ldr	r1, [pc, #552]	; (8003eb4 <statemachine+0x274>)
 8003c8c:	488a      	ldr	r0, [pc, #552]	; (8003eb8 <statemachine+0x278>)
 8003c8e:	f7fe fb81 	bl	8002394 <nmea_parse>
				 if(myData.speed>=vitmax){
 8003c92:	4b89      	ldr	r3, [pc, #548]	; (8003eb8 <statemachine+0x278>)
 8003c94:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003c98:	4b88      	ldr	r3, [pc, #544]	; (8003ebc <statemachine+0x27c>)
 8003c9a:	edd3 7a00 	vldr	s15, [r3]
 8003c9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca6:	db03      	blt.n	8003cb0 <statemachine+0x70>
									 vitmax=myData.speed;
 8003ca8:	4b83      	ldr	r3, [pc, #524]	; (8003eb8 <statemachine+0x278>)
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	4a83      	ldr	r2, [pc, #524]	; (8003ebc <statemachine+0x27c>)
 8003cae:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	667b      	str	r3, [r7, #100]	; 0x64
								 float sec=0;
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	663b      	str	r3, [r7, #96]	; 0x60
								 if (myData.speed!=0){
 8003cbc:	4b7e      	ldr	r3, [pc, #504]	; (8003eb8 <statemachine+0x278>)
 8003cbe:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003cc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cca:	d032      	beq.n	8003d32 <statemachine+0xf2>
									 pace=1000/(60*myData.speed);
 8003ccc:	4b7a      	ldr	r3, [pc, #488]	; (8003eb8 <statemachine+0x278>)
 8003cce:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003cd2:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8003ec0 <statemachine+0x280>
 8003cd6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003cda:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8003ec4 <statemachine+0x284>
 8003cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ce2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
									 sec=(pace-floor(pace))*60;
 8003ce6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003ce8:	f7fc fc2e 	bl	8000548 <__aeabi_f2d>
 8003cec:	4604      	mov	r4, r0
 8003cee:	460d      	mov	r5, r1
 8003cf0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003cf2:	f7fc fc29 	bl	8000548 <__aeabi_f2d>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	ec43 2b10 	vmov	d0, r2, r3
 8003cfe:	f015 fcd7 	bl	80196b0 <floor>
 8003d02:	ec53 2b10 	vmov	r2, r3, d0
 8003d06:	4620      	mov	r0, r4
 8003d08:	4629      	mov	r1, r5
 8003d0a:	f7fc fabd 	bl	8000288 <__aeabi_dsub>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4610      	mov	r0, r2
 8003d14:	4619      	mov	r1, r3
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	4b6b      	ldr	r3, [pc, #428]	; (8003ec8 <statemachine+0x288>)
 8003d1c:	f7fc fc6c 	bl	80005f8 <__aeabi_dmul>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4610      	mov	r0, r2
 8003d26:	4619      	mov	r1, r3
 8003d28:	f7fc ff5e 	bl	8000be8 <__aeabi_d2f>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d30:	e001      	b.n	8003d36 <statemachine+0xf6>
								 }
								 else {
									 pace=9999;
 8003d32:	4b66      	ldr	r3, [pc, #408]	; (8003ecc <statemachine+0x28c>)
 8003d34:	667b      	str	r3, [r7, #100]	; 0x64
								 }


				  switch(spdstate){
 8003d36:	4b66      	ldr	r3, [pc, #408]	; (8003ed0 <statemachine+0x290>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	f000 8162 	beq.w	8004004 <statemachine+0x3c4>
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	f300 81d2 	bgt.w	80040ea <statemachine+0x4aa>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <statemachine+0x112>
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	f000 80d2 	beq.w	8003ef4 <statemachine+0x2b4>
 8003d50:	e1cb      	b.n	80040ea <statemachine+0x4aa>


				 case STATE_SUMMARY:
					 if(myData.fix == 1){
 8003d52:	4b59      	ldr	r3, [pc, #356]	; (8003eb8 <statemachine+0x278>)
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d16f      	bne.n	8003e3a <statemachine+0x1fa>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 8003d5a:	2014      	movs	r0, #20
 8003d5c:	f010 fde6 	bl	801492c <malloc>
 8003d60:	4603      	mov	r3, r0
 8003d62:	603b      	str	r3, [r7, #0]
					 				 						snprintf(str,15, "MaxV=%.1f",vitmax*3.6);
 8003d64:	4b55      	ldr	r3, [pc, #340]	; (8003ebc <statemachine+0x27c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fc fbed 	bl	8000548 <__aeabi_f2d>
 8003d6e:	a34e      	add	r3, pc, #312	; (adr r3, 8003ea8 <statemachine+0x268>)
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	f7fc fc40 	bl	80005f8 <__aeabi_dmul>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	e9cd 2300 	strd	r2, r3, [sp]
 8003d80:	4a54      	ldr	r2, [pc, #336]	; (8003ed4 <statemachine+0x294>)
 8003d82:	210f      	movs	r1, #15
 8003d84:	6838      	ldr	r0, [r7, #0]
 8003d86:	f012 fccd 	bl	8016724 <sniprintf>
					 				 						ssd1306_SetCursor(32, 32);
 8003d8a:	2120      	movs	r1, #32
 8003d8c:	2020      	movs	r0, #32
 8003d8e:	f7ff fb5f 	bl	8003450 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8003d92:	4a51      	ldr	r2, [pc, #324]	; (8003ed8 <statemachine+0x298>)
 8003d94:	2301      	movs	r3, #1
 8003d96:	ca06      	ldmia	r2, {r1, r2}
 8003d98:	6838      	ldr	r0, [r7, #0]
 8003d9a:	f7ff fb33 	bl	8003404 <ssd1306_WriteString>
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 8003d9e:	4b46      	ldr	r3, [pc, #280]	; (8003eb8 <statemachine+0x278>)
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fc fbd0 	bl	8000548 <__aeabi_f2d>
 8003da8:	a33f      	add	r3, pc, #252	; (adr r3, 8003ea8 <statemachine+0x268>)
 8003daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dae:	f7fc fc23 	bl	80005f8 <__aeabi_dmul>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	e9cd 2300 	strd	r2, r3, [sp]
 8003dba:	4a48      	ldr	r2, [pc, #288]	; (8003edc <statemachine+0x29c>)
 8003dbc:	210f      	movs	r1, #15
 8003dbe:	6838      	ldr	r0, [r7, #0]
 8003dc0:	f012 fcb0 	bl	8016724 <sniprintf>
					 				 						ssd1306_SetCursor(32, 42);
 8003dc4:	212a      	movs	r1, #42	; 0x2a
 8003dc6:	2020      	movs	r0, #32
 8003dc8:	f7ff fb42 	bl	8003450 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8003dcc:	4a42      	ldr	r2, [pc, #264]	; (8003ed8 <statemachine+0x298>)
 8003dce:	2301      	movs	r3, #1
 8003dd0:	ca06      	ldmia	r2, {r1, r2}
 8003dd2:	6838      	ldr	r0, [r7, #0]
 8003dd4:	f7ff fb16 	bl	8003404 <ssd1306_WriteString>
					 				 						snprintf(str,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));
 8003dd8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003dda:	f7fc fbb5 	bl	8000548 <__aeabi_f2d>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	ec43 2b10 	vmov	d0, r2, r3
 8003de6:	f015 fc63 	bl	80196b0 <floor>
 8003dea:	eeb0 8a40 	vmov.f32	s16, s0
 8003dee:	eef0 8a60 	vmov.f32	s17, s1
 8003df2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003df4:	f7fc fba8 	bl	8000548 <__aeabi_f2d>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	ec43 2b10 	vmov	d0, r2, r3
 8003e00:	f015 fc56 	bl	80196b0 <floor>
 8003e04:	eeb0 7a40 	vmov.f32	s14, s0
 8003e08:	eef0 7a60 	vmov.f32	s15, s1
 8003e0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003e10:	ed8d 8b00 	vstr	d8, [sp]
 8003e14:	4a32      	ldr	r2, [pc, #200]	; (8003ee0 <statemachine+0x2a0>)
 8003e16:	210f      	movs	r1, #15
 8003e18:	6838      	ldr	r0, [r7, #0]
 8003e1a:	f012 fc83 	bl	8016724 <sniprintf>
					 				 						ssd1306_SetCursor(32, 52);
 8003e1e:	2134      	movs	r1, #52	; 0x34
 8003e20:	2020      	movs	r0, #32
 8003e22:	f7ff fb15 	bl	8003450 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8003e26:	4a2c      	ldr	r2, [pc, #176]	; (8003ed8 <statemachine+0x298>)
 8003e28:	2301      	movs	r3, #1
 8003e2a:	ca06      	ldmia	r2, {r1, r2}
 8003e2c:	6838      	ldr	r0, [r7, #0]
 8003e2e:	f7ff fae9 	bl	8003404 <ssd1306_WriteString>
					 				 						free(str);
 8003e32:	6838      	ldr	r0, [r7, #0]
 8003e34:	f010 fd82 	bl	801493c <free>
 8003e38:	e025      	b.n	8003e86 <statemachine+0x246>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);
 8003e3a:	2014      	movs	r0, #20
 8003e3c:	f010 fd76 	bl	801492c <malloc>
 8003e40:	4603      	mov	r3, r0
 8003e42:	607b      	str	r3, [r7, #4]
					 				 						ssd1306_SetCursor(32, 32);
 8003e44:	2120      	movs	r1, #32
 8003e46:	2020      	movs	r0, #32
 8003e48:	f7ff fb02 	bl	8003450 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 1", Font_6x8, White);
 8003e4c:	4a22      	ldr	r2, [pc, #136]	; (8003ed8 <statemachine+0x298>)
 8003e4e:	2301      	movs	r3, #1
 8003e50:	ca06      	ldmia	r2, {r1, r2}
 8003e52:	4824      	ldr	r0, [pc, #144]	; (8003ee4 <statemachine+0x2a4>)
 8003e54:	f7ff fad6 	bl	8003404 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8003e58:	212c      	movs	r1, #44	; 0x2c
 8003e5a:	2020      	movs	r0, #32
 8003e5c:	f7ff faf8 	bl	8003450 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003e60:	4a1d      	ldr	r2, [pc, #116]	; (8003ed8 <statemachine+0x298>)
 8003e62:	2301      	movs	r3, #1
 8003e64:	ca06      	ldmia	r2, {r1, r2}
 8003e66:	4820      	ldr	r0, [pc, #128]	; (8003ee8 <statemachine+0x2a8>)
 8003e68:	f7ff facc 	bl	8003404 <ssd1306_WriteString>
					 				 						batterygauge(vbat,35, 54,1);
 8003e6c:	4b1f      	ldr	r3, [pc, #124]	; (8003eec <statemachine+0x2ac>)
 8003e6e:	edd3 7a00 	vldr	s15, [r3]
 8003e72:	2201      	movs	r2, #1
 8003e74:	2136      	movs	r1, #54	; 0x36
 8003e76:	2023      	movs	r0, #35	; 0x23
 8003e78:	eeb0 0a67 	vmov.f32	s0, s15
 8003e7c:	f7ff fd04 	bl	8003888 <batterygauge>
					 				 						free(str);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f010 fd5b 	bl	801493c <free>
					 				 					}
					 if(BTN_B>=1){
 8003e86:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <statemachine+0x2b0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f340 8128 	ble.w	80040e0 <statemachine+0x4a0>
					 					 				 					spdstate++;
 8003e90:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <statemachine+0x290>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	3301      	adds	r3, #1
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <statemachine+0x290>)
 8003e9a:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8003e9c:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <statemachine+0x2b0>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]
					 					 				  	}



					 break;
 8003ea2:	e11d      	b.n	80040e0 <statemachine+0x4a0>
 8003ea4:	f3af 8000 	nop.w
 8003ea8:	cccccccd 	.word	0xcccccccd
 8003eac:	400ccccc 	.word	0x400ccccc
 8003eb0:	200004a8 	.word	0x200004a8
 8003eb4:	200004f4 	.word	0x200004f4
 8003eb8:	200006f8 	.word	0x200006f8
 8003ebc:	20000a20 	.word	0x20000a20
 8003ec0:	42700000 	.word	0x42700000
 8003ec4:	447a0000 	.word	0x447a0000
 8003ec8:	404e0000 	.word	0x404e0000
 8003ecc:	461c3c00 	.word	0x461c3c00
 8003ed0:	200004aa 	.word	0x200004aa
 8003ed4:	0801ba8c 	.word	0x0801ba8c
 8003ed8:	20000020 	.word	0x20000020
 8003edc:	0801ba98 	.word	0x0801ba98
 8003ee0:	0801baa0 	.word	0x0801baa0
 8003ee4:	0801bab4 	.word	0x0801bab4
 8003ee8:	0801babc 	.word	0x0801babc
 8003eec:	20000770 	.word	0x20000770
 8003ef0:	2000073c 	.word	0x2000073c
				 case STATE_COMPTEUR:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 8003ef4:	4b96      	ldr	r3, [pc, #600]	; (8004150 <statemachine+0x510>)
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d159      	bne.n	8003fb0 <statemachine+0x370>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 8003efc:	2014      	movs	r0, #20
 8003efe:	f010 fd15 	bl	801492c <malloc>
 8003f02:	4603      	mov	r3, r0
 8003f04:	60bb      	str	r3, [r7, #8]
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 8003f06:	4b92      	ldr	r3, [pc, #584]	; (8004150 <statemachine+0x510>)
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fc fb1c 	bl	8000548 <__aeabi_f2d>
 8003f10:	a38b      	add	r3, pc, #556	; (adr r3, 8004140 <statemachine+0x500>)
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	f7fc fb6f 	bl	80005f8 <__aeabi_dmul>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	e9cd 2300 	strd	r2, r3, [sp]
 8003f22:	4a8c      	ldr	r2, [pc, #560]	; (8004154 <statemachine+0x514>)
 8003f24:	210f      	movs	r1, #15
 8003f26:	68b8      	ldr	r0, [r7, #8]
 8003f28:	f012 fbfc 	bl	8016724 <sniprintf>
					 				 						ssd1306_SetCursor(32, 54);
 8003f2c:	2136      	movs	r1, #54	; 0x36
 8003f2e:	2020      	movs	r0, #32
 8003f30:	f7ff fa8e 	bl	8003450 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8003f34:	4a88      	ldr	r2, [pc, #544]	; (8004158 <statemachine+0x518>)
 8003f36:	2301      	movs	r3, #1
 8003f38:	ca06      	ldmia	r2, {r1, r2}
 8003f3a:	68b8      	ldr	r0, [r7, #8]
 8003f3c:	f7ff fa62 	bl	8003404 <ssd1306_WriteString>
					 				 						ssd1306_DrawRectangle(32, 38, 95, 53, White);
 8003f40:	2301      	movs	r3, #1
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	2335      	movs	r3, #53	; 0x35
 8003f46:	225f      	movs	r2, #95	; 0x5f
 8003f48:	2126      	movs	r1, #38	; 0x26
 8003f4a:	2020      	movs	r0, #32
 8003f4c:	f7ff fb8b 	bl	8003666 <ssd1306_DrawRectangle>
					 				 						ssd1306_FillRectangle(32, 38,(int) floor(32+(myData.speed*0.63)), 53, White);
 8003f50:	4b7f      	ldr	r3, [pc, #508]	; (8004150 <statemachine+0x510>)
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fc faf7 	bl	8000548 <__aeabi_f2d>
 8003f5a:	a37b      	add	r3, pc, #492	; (adr r3, 8004148 <statemachine+0x508>)
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f7fc fb4a 	bl	80005f8 <__aeabi_dmul>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4610      	mov	r0, r2
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	4b7a      	ldr	r3, [pc, #488]	; (800415c <statemachine+0x51c>)
 8003f72:	f7fc f98b 	bl	800028c <__adddf3>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	ec43 2b17 	vmov	d7, r2, r3
 8003f7e:	eeb0 0a47 	vmov.f32	s0, s14
 8003f82:	eef0 0a67 	vmov.f32	s1, s15
 8003f86:	f015 fb93 	bl	80196b0 <floor>
 8003f8a:	ec53 2b10 	vmov	r2, r3, d0
 8003f8e:	4610      	mov	r0, r2
 8003f90:	4619      	mov	r1, r3
 8003f92:	f7fc fde1 	bl	8000b58 <__aeabi_d2iz>
 8003f96:	4603      	mov	r3, r0
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	2335      	movs	r3, #53	; 0x35
 8003fa0:	2126      	movs	r1, #38	; 0x26
 8003fa2:	2020      	movs	r0, #32
 8003fa4:	f7ff fb96 	bl	80036d4 <ssd1306_FillRectangle>

					 				 						free(str);
 8003fa8:	68b8      	ldr	r0, [r7, #8]
 8003faa:	f010 fcc7 	bl	801493c <free>
 8003fae:	e01b      	b.n	8003fe8 <statemachine+0x3a8>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8003fb0:	2014      	movs	r0, #20
 8003fb2:	f010 fcbb 	bl	801492c <malloc>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	60fb      	str	r3, [r7, #12]
					 				 						ssd1306_SetCursor(32, 32);
 8003fba:	2120      	movs	r1, #32
 8003fbc:	2020      	movs	r0, #32
 8003fbe:	f7ff fa47 	bl	8003450 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 2", Font_6x8, White);
 8003fc2:	4a65      	ldr	r2, [pc, #404]	; (8004158 <statemachine+0x518>)
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	ca06      	ldmia	r2, {r1, r2}
 8003fc8:	4865      	ldr	r0, [pc, #404]	; (8004160 <statemachine+0x520>)
 8003fca:	f7ff fa1b 	bl	8003404 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8003fce:	212c      	movs	r1, #44	; 0x2c
 8003fd0:	2020      	movs	r0, #32
 8003fd2:	f7ff fa3d 	bl	8003450 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003fd6:	4a60      	ldr	r2, [pc, #384]	; (8004158 <statemachine+0x518>)
 8003fd8:	2301      	movs	r3, #1
 8003fda:	ca06      	ldmia	r2, {r1, r2}
 8003fdc:	4861      	ldr	r0, [pc, #388]	; (8004164 <statemachine+0x524>)
 8003fde:	f7ff fa11 	bl	8003404 <ssd1306_WriteString>
					 				 						free(str);
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f010 fcaa 	bl	801493c <free>
					 				 					}
					 if(BTN_B>=1){
 8003fe8:	4b5f      	ldr	r3, [pc, #380]	; (8004168 <statemachine+0x528>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	dd79      	ble.n	80040e4 <statemachine+0x4a4>
					 				 					spdstate++;
 8003ff0:	4b5e      	ldr	r3, [pc, #376]	; (800416c <statemachine+0x52c>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	4b5c      	ldr	r3, [pc, #368]	; (800416c <statemachine+0x52c>)
 8003ffa:	701a      	strb	r2, [r3, #0]
					 				 					BTN_B=0;
 8003ffc:	4b5a      	ldr	r3, [pc, #360]	; (8004168 <statemachine+0x528>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
					 				  	}
					 break;
 8004002:	e06f      	b.n	80040e4 <statemachine+0x4a4>
				 case STATE_GRAPH:
					 if(myData.fix == 1){
 8004004:	4b52      	ldr	r3, [pc, #328]	; (8004150 <statemachine+0x510>)
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	2b01      	cmp	r3, #1
 800400a:	d12f      	bne.n	800406c <statemachine+0x42c>
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 800400c:	2014      	movs	r0, #20
 800400e:	f010 fc8d 	bl	801492c <malloc>
 8004012:	4603      	mov	r3, r0
 8004014:	613b      	str	r3, [r7, #16]

					 				 						ssd1306_SetCursor(32, 32);
 8004016:	2120      	movs	r1, #32
 8004018:	2020      	movs	r0, #32
 800401a:	f7ff fa19 	bl	8003450 <ssd1306_SetCursor>
					 				 						snprintf(str,15, "%0.1f",(myData.speed)*3.6);
 800401e:	4b4c      	ldr	r3, [pc, #304]	; (8004150 <statemachine+0x510>)
 8004020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004022:	4618      	mov	r0, r3
 8004024:	f7fc fa90 	bl	8000548 <__aeabi_f2d>
 8004028:	a345      	add	r3, pc, #276	; (adr r3, 8004140 <statemachine+0x500>)
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	f7fc fae3 	bl	80005f8 <__aeabi_dmul>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	e9cd 2300 	strd	r2, r3, [sp]
 800403a:	4a4d      	ldr	r2, [pc, #308]	; (8004170 <statemachine+0x530>)
 800403c:	210f      	movs	r1, #15
 800403e:	6938      	ldr	r0, [r7, #16]
 8004040:	f012 fb70 	bl	8016724 <sniprintf>
					 				 						ssd1306_WriteString(str, Font_11x18, White);
 8004044:	4a4b      	ldr	r2, [pc, #300]	; (8004174 <statemachine+0x534>)
 8004046:	2301      	movs	r3, #1
 8004048:	ca06      	ldmia	r2, {r1, r2}
 800404a:	6938      	ldr	r0, [r7, #16]
 800404c:	f7ff f9da 	bl	8003404 <ssd1306_WriteString>
					 				 						batterygauge(vbat,35, 54,1);
 8004050:	4b49      	ldr	r3, [pc, #292]	; (8004178 <statemachine+0x538>)
 8004052:	edd3 7a00 	vldr	s15, [r3]
 8004056:	2201      	movs	r2, #1
 8004058:	2136      	movs	r1, #54	; 0x36
 800405a:	2023      	movs	r0, #35	; 0x23
 800405c:	eeb0 0a67 	vmov.f32	s0, s15
 8004060:	f7ff fc12 	bl	8003888 <batterygauge>

					 				 						free(str);
 8004064:	6938      	ldr	r0, [r7, #16]
 8004066:	f010 fc69 	bl	801493c <free>
 800406a:	e025      	b.n	80040b8 <statemachine+0x478>
					 }
					 else{
						 char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 800406c:	2014      	movs	r0, #20
 800406e:	f010 fc5d 	bl	801492c <malloc>
 8004072:	4603      	mov	r3, r0
 8004074:	617b      	str	r3, [r7, #20]
						 ssd1306_SetCursor(32, 32);
 8004076:	2120      	movs	r1, #32
 8004078:	2020      	movs	r0, #32
 800407a:	f7ff f9e9 	bl	8003450 <ssd1306_SetCursor>
						 ssd1306_WriteString("Speed 3", Font_6x8, White);
 800407e:	4a36      	ldr	r2, [pc, #216]	; (8004158 <statemachine+0x518>)
 8004080:	2301      	movs	r3, #1
 8004082:	ca06      	ldmia	r2, {r1, r2}
 8004084:	483d      	ldr	r0, [pc, #244]	; (800417c <statemachine+0x53c>)
 8004086:	f7ff f9bd 	bl	8003404 <ssd1306_WriteString>
						 ssd1306_SetCursor(32, 44);
 800408a:	212c      	movs	r1, #44	; 0x2c
 800408c:	2020      	movs	r0, #32
 800408e:	f7ff f9df 	bl	8003450 <ssd1306_SetCursor>
						 ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8004092:	4a31      	ldr	r2, [pc, #196]	; (8004158 <statemachine+0x518>)
 8004094:	2301      	movs	r3, #1
 8004096:	ca06      	ldmia	r2, {r1, r2}
 8004098:	4832      	ldr	r0, [pc, #200]	; (8004164 <statemachine+0x524>)
 800409a:	f7ff f9b3 	bl	8003404 <ssd1306_WriteString>
						 batterygauge(vbat,35, 54,1);
 800409e:	4b36      	ldr	r3, [pc, #216]	; (8004178 <statemachine+0x538>)
 80040a0:	edd3 7a00 	vldr	s15, [r3]
 80040a4:	2201      	movs	r2, #1
 80040a6:	2136      	movs	r1, #54	; 0x36
 80040a8:	2023      	movs	r0, #35	; 0x23
 80040aa:	eeb0 0a67 	vmov.f32	s0, s15
 80040ae:	f7ff fbeb 	bl	8003888 <batterygauge>
						 free(str);
 80040b2:	6978      	ldr	r0, [r7, #20]
 80040b4:	f010 fc42 	bl	801493c <free>
					 }

					 if(BTN_B>=1){
 80040b8:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <statemachine+0x528>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	dd13      	ble.n	80040e8 <statemachine+0x4a8>
					 					 				 					spdstate--;
 80040c0:	4b2a      	ldr	r3, [pc, #168]	; (800416c <statemachine+0x52c>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	4b28      	ldr	r3, [pc, #160]	; (800416c <statemachine+0x52c>)
 80040ca:	701a      	strb	r2, [r3, #0]
					 					 				 					spdstate--;
 80040cc:	4b27      	ldr	r3, [pc, #156]	; (800416c <statemachine+0x52c>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	4b25      	ldr	r3, [pc, #148]	; (800416c <statemachine+0x52c>)
 80040d6:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 80040d8:	4b23      	ldr	r3, [pc, #140]	; (8004168 <statemachine+0x528>)
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 80040de:	e003      	b.n	80040e8 <statemachine+0x4a8>
					 break;
 80040e0:	bf00      	nop
 80040e2:	e002      	b.n	80040ea <statemachine+0x4aa>
					 break;
 80040e4:	bf00      	nop
 80040e6:	e000      	b.n	80040ea <statemachine+0x4aa>
					 break;
 80040e8:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 80040ea:	4b25      	ldr	r3, [pc, #148]	; (8004180 <statemachine+0x540>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f341 8426 	ble.w	8005940 <statemachine+0x1d00>
				 					state++;
 80040f4:	4b23      	ldr	r3, [pc, #140]	; (8004184 <statemachine+0x544>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	3301      	adds	r3, #1
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	4b21      	ldr	r3, [pc, #132]	; (8004184 <statemachine+0x544>)
 80040fe:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 8004100:	4b1f      	ldr	r3, [pc, #124]	; (8004180 <statemachine+0x540>)
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
				 					BTN_B=0;
 8004106:	4b18      	ldr	r3, [pc, #96]	; (8004168 <statemachine+0x528>)
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
				  	}
				  break;
 800410c:	f001 bc18 	b.w	8005940 <statemachine+0x1d00>


	case STATE_POS:
			  ssd1306_Fill(Black);
 8004110:	2000      	movs	r0, #0
 8004112:	f7ff f85b 	bl	80031cc <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8004116:	491c      	ldr	r1, [pc, #112]	; (8004188 <statemachine+0x548>)
 8004118:	480d      	ldr	r0, [pc, #52]	; (8004150 <statemachine+0x510>)
 800411a:	f7fe f93b 	bl	8002394 <nmea_parse>
			  switch(posstate){
 800411e:	4b1b      	ldr	r3, [pc, #108]	; (800418c <statemachine+0x54c>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b03      	cmp	r3, #3
 8004124:	f200 8285 	bhi.w	8004632 <statemachine+0x9f2>
 8004128:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <statemachine+0x4f0>)
 800412a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412e:	bf00      	nop
 8004130:	08004191 	.word	0x08004191
 8004134:	080042a9 	.word	0x080042a9
 8004138:	0800439f 	.word	0x0800439f
 800413c:	080044cf 	.word	0x080044cf
 8004140:	cccccccd 	.word	0xcccccccd
 8004144:	400ccccc 	.word	0x400ccccc
 8004148:	c28f5c29 	.word	0xc28f5c29
 800414c:	3fe428f5 	.word	0x3fe428f5
 8004150:	200006f8 	.word	0x200006f8
 8004154:	0801ba98 	.word	0x0801ba98
 8004158:	20000020 	.word	0x20000020
 800415c:	40400000 	.word	0x40400000
 8004160:	0801bac8 	.word	0x0801bac8
 8004164:	0801babc 	.word	0x0801babc
 8004168:	2000073c 	.word	0x2000073c
 800416c:	200004aa 	.word	0x200004aa
 8004170:	0801bad0 	.word	0x0801bad0
 8004174:	20000030 	.word	0x20000030
 8004178:	20000770 	.word	0x20000770
 800417c:	0801bad8 	.word	0x0801bad8
 8004180:	20000738 	.word	0x20000738
 8004184:	200004a8 	.word	0x200004a8
 8004188:	200004f4 	.word	0x200004f4
 800418c:	200004ab 	.word	0x200004ab

			  case STATE_SUMMARY1:
				  if(myData.fix == 1){
 8004190:	4bab      	ldr	r3, [pc, #684]	; (8004440 <statemachine+0x800>)
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	2b01      	cmp	r3, #1
 8004196:	d14e      	bne.n	8004236 <statemachine+0x5f6>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8004198:	2014      	movs	r0, #20
 800419a:	f010 fbc7 	bl	801492c <malloc>
 800419e:	4603      	mov	r3, r0
 80041a0:	61bb      	str	r3, [r7, #24]
				  						ssd1306_SetCursor(32, 32);
 80041a2:	2120      	movs	r1, #32
 80041a4:	2020      	movs	r0, #32
 80041a6:	f7ff f953 	bl	8003450 <ssd1306_SetCursor>
				  						snprintf(str,15, "Latitude:");
 80041aa:	4aa6      	ldr	r2, [pc, #664]	; (8004444 <statemachine+0x804>)
 80041ac:	210f      	movs	r1, #15
 80041ae:	69b8      	ldr	r0, [r7, #24]
 80041b0:	f012 fab8 	bl	8016724 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80041b4:	4aa4      	ldr	r2, [pc, #656]	; (8004448 <statemachine+0x808>)
 80041b6:	2301      	movs	r3, #1
 80041b8:	ca06      	ldmia	r2, {r1, r2}
 80041ba:	69b8      	ldr	r0, [r7, #24]
 80041bc:	f7ff f922 	bl	8003404 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80041c0:	4b9f      	ldr	r3, [pc, #636]	; (8004440 <statemachine+0x800>)
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	e9cd 2300 	strd	r2, r3, [sp]
 80041ca:	4aa0      	ldr	r2, [pc, #640]	; (800444c <statemachine+0x80c>)
 80041cc:	210f      	movs	r1, #15
 80041ce:	69b8      	ldr	r0, [r7, #24]
 80041d0:	f012 faa8 	bl	8016724 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 80041d4:	2128      	movs	r1, #40	; 0x28
 80041d6:	2020      	movs	r0, #32
 80041d8:	f7ff f93a 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80041dc:	4a9a      	ldr	r2, [pc, #616]	; (8004448 <statemachine+0x808>)
 80041de:	2301      	movs	r3, #1
 80041e0:	ca06      	ldmia	r2, {r1, r2}
 80041e2:	69b8      	ldr	r0, [r7, #24]
 80041e4:	f7ff f90e 	bl	8003404 <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 80041e8:	4a99      	ldr	r2, [pc, #612]	; (8004450 <statemachine+0x810>)
 80041ea:	210f      	movs	r1, #15
 80041ec:	69b8      	ldr	r0, [r7, #24]
 80041ee:	f012 fa99 	bl	8016724 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 80041f2:	2130      	movs	r1, #48	; 0x30
 80041f4:	2020      	movs	r0, #32
 80041f6:	f7ff f92b 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80041fa:	4a93      	ldr	r2, [pc, #588]	; (8004448 <statemachine+0x808>)
 80041fc:	2301      	movs	r3, #1
 80041fe:	ca06      	ldmia	r2, {r1, r2}
 8004200:	69b8      	ldr	r0, [r7, #24]
 8004202:	f7ff f8ff 	bl	8003404 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8004206:	4b8e      	ldr	r3, [pc, #568]	; (8004440 <statemachine+0x800>)
 8004208:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800420c:	e9cd 2300 	strd	r2, r3, [sp]
 8004210:	4a8e      	ldr	r2, [pc, #568]	; (800444c <statemachine+0x80c>)
 8004212:	210f      	movs	r1, #15
 8004214:	69b8      	ldr	r0, [r7, #24]
 8004216:	f012 fa85 	bl	8016724 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 800421a:	2138      	movs	r1, #56	; 0x38
 800421c:	2020      	movs	r0, #32
 800421e:	f7ff f917 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8004222:	4a89      	ldr	r2, [pc, #548]	; (8004448 <statemachine+0x808>)
 8004224:	2301      	movs	r3, #1
 8004226:	ca06      	ldmia	r2, {r1, r2}
 8004228:	69b8      	ldr	r0, [r7, #24]
 800422a:	f7ff f8eb 	bl	8003404 <ssd1306_WriteString>
				  						free(str);
 800422e:	69b8      	ldr	r0, [r7, #24]
 8004230:	f010 fb84 	bl	801493c <free>
 8004234:	e029      	b.n	800428a <statemachine+0x64a>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8004236:	2014      	movs	r0, #20
 8004238:	f010 fb78 	bl	801492c <malloc>
 800423c:	4603      	mov	r3, r0
 800423e:	61fb      	str	r3, [r7, #28]
				  						ssd1306_SetCursor(32, 32);
 8004240:	2120      	movs	r1, #32
 8004242:	2020      	movs	r0, #32
 8004244:	f7ff f904 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos1", Font_6x8, White);
 8004248:	4a7f      	ldr	r2, [pc, #508]	; (8004448 <statemachine+0x808>)
 800424a:	2301      	movs	r3, #1
 800424c:	ca06      	ldmia	r2, {r1, r2}
 800424e:	4881      	ldr	r0, [pc, #516]	; (8004454 <statemachine+0x814>)
 8004250:	f7ff f8d8 	bl	8003404 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8004254:	212c      	movs	r1, #44	; 0x2c
 8004256:	2020      	movs	r0, #32
 8004258:	f7ff f8fa 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800425c:	4a7a      	ldr	r2, [pc, #488]	; (8004448 <statemachine+0x808>)
 800425e:	2301      	movs	r3, #1
 8004260:	ca06      	ldmia	r2, {r1, r2}
 8004262:	487d      	ldr	r0, [pc, #500]	; (8004458 <statemachine+0x818>)
 8004264:	f7ff f8ce 	bl	8003404 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 54);
 8004268:	2136      	movs	r1, #54	; 0x36
 800426a:	2020      	movs	r0, #32
 800426c:	f7ff f8f0 	bl	8003450 <ssd1306_SetCursor>
				  						batterygauge(vbat,35, 54,1);
 8004270:	4b7a      	ldr	r3, [pc, #488]	; (800445c <statemachine+0x81c>)
 8004272:	edd3 7a00 	vldr	s15, [r3]
 8004276:	2201      	movs	r2, #1
 8004278:	2136      	movs	r1, #54	; 0x36
 800427a:	2023      	movs	r0, #35	; 0x23
 800427c:	eeb0 0a67 	vmov.f32	s0, s15
 8004280:	f7ff fb02 	bl	8003888 <batterygauge>
				  						free(str);
 8004284:	69f8      	ldr	r0, [r7, #28]
 8004286:	f010 fb59 	bl	801493c <free>
				  					}
				  if(BTN_B>=1){
 800428a:	4b75      	ldr	r3, [pc, #468]	; (8004460 <statemachine+0x820>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	f340 81c8 	ble.w	8004624 <statemachine+0x9e4>
					  posstate++;
 8004294:	4b73      	ldr	r3, [pc, #460]	; (8004464 <statemachine+0x824>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	3301      	adds	r3, #1
 800429a:	b2da      	uxtb	r2, r3
 800429c:	4b71      	ldr	r3, [pc, #452]	; (8004464 <statemachine+0x824>)
 800429e:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 80042a0:	4b6f      	ldr	r3, [pc, #444]	; (8004460 <statemachine+0x820>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]





				  break;
 80042a6:	e1bd      	b.n	8004624 <statemachine+0x9e4>
			  case STATE_LAT:
				  if(myData.fix == 1){
 80042a8:	4b65      	ldr	r3, [pc, #404]	; (8004440 <statemachine+0x800>)
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d14b      	bne.n	8004348 <statemachine+0x708>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 80042b0:	2014      	movs	r0, #20
 80042b2:	f010 fb3b 	bl	801492c <malloc>
 80042b6:	4603      	mov	r3, r0
 80042b8:	623b      	str	r3, [r7, #32]
				  						ssd1306_SetCursor(32, 32);
 80042ba:	2120      	movs	r1, #32
 80042bc:	2020      	movs	r0, #32
 80042be:	f7ff f8c7 	bl	8003450 <ssd1306_SetCursor>
				  						snprintf(str,15, "LatSide:");
 80042c2:	4a69      	ldr	r2, [pc, #420]	; (8004468 <statemachine+0x828>)
 80042c4:	210f      	movs	r1, #15
 80042c6:	6a38      	ldr	r0, [r7, #32]
 80042c8:	f012 fa2c 	bl	8016724 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80042cc:	4a5e      	ldr	r2, [pc, #376]	; (8004448 <statemachine+0x808>)
 80042ce:	2301      	movs	r3, #1
 80042d0:	ca06      	ldmia	r2, {r1, r2}
 80042d2:	6a38      	ldr	r0, [r7, #32]
 80042d4:	f7ff f896 	bl	8003404 <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80042d8:	4b59      	ldr	r3, [pc, #356]	; (8004440 <statemachine+0x800>)
 80042da:	7a1b      	ldrb	r3, [r3, #8]
 80042dc:	4a63      	ldr	r2, [pc, #396]	; (800446c <statemachine+0x82c>)
 80042de:	210f      	movs	r1, #15
 80042e0:	6a38      	ldr	r0, [r7, #32]
 80042e2:	f012 fa1f 	bl	8016724 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 80042e6:	2128      	movs	r1, #40	; 0x28
 80042e8:	2020      	movs	r0, #32
 80042ea:	f7ff f8b1 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80042ee:	4a56      	ldr	r2, [pc, #344]	; (8004448 <statemachine+0x808>)
 80042f0:	2301      	movs	r3, #1
 80042f2:	ca06      	ldmia	r2, {r1, r2}
 80042f4:	6a38      	ldr	r0, [r7, #32]
 80042f6:	f7ff f885 	bl	8003404 <ssd1306_WriteString>
				  						snprintf(str,15, "Latitude:");
 80042fa:	4a52      	ldr	r2, [pc, #328]	; (8004444 <statemachine+0x804>)
 80042fc:	210f      	movs	r1, #15
 80042fe:	6a38      	ldr	r0, [r7, #32]
 8004300:	f012 fa10 	bl	8016724 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8004304:	2130      	movs	r1, #48	; 0x30
 8004306:	2020      	movs	r0, #32
 8004308:	f7ff f8a2 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800430c:	4a4e      	ldr	r2, [pc, #312]	; (8004448 <statemachine+0x808>)
 800430e:	2301      	movs	r3, #1
 8004310:	ca06      	ldmia	r2, {r1, r2}
 8004312:	6a38      	ldr	r0, [r7, #32]
 8004314:	f7ff f876 	bl	8003404 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);
 8004318:	4b49      	ldr	r3, [pc, #292]	; (8004440 <statemachine+0x800>)
 800431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431e:	e9cd 2300 	strd	r2, r3, [sp]
 8004322:	4a4a      	ldr	r2, [pc, #296]	; (800444c <statemachine+0x80c>)
 8004324:	210f      	movs	r1, #15
 8004326:	6a38      	ldr	r0, [r7, #32]
 8004328:	f012 f9fc 	bl	8016724 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 800432c:	2138      	movs	r1, #56	; 0x38
 800432e:	2020      	movs	r0, #32
 8004330:	f7ff f88e 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8004334:	4a44      	ldr	r2, [pc, #272]	; (8004448 <statemachine+0x808>)
 8004336:	2301      	movs	r3, #1
 8004338:	ca06      	ldmia	r2, {r1, r2}
 800433a:	6a38      	ldr	r0, [r7, #32]
 800433c:	f7ff f862 	bl	8003404 <ssd1306_WriteString>
				  						free(str);
 8004340:	6a38      	ldr	r0, [r7, #32]
 8004342:	f010 fafb 	bl	801493c <free>
 8004346:	e01b      	b.n	8004380 <statemachine+0x740>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8004348:	2014      	movs	r0, #20
 800434a:	f010 faef 	bl	801492c <malloc>
 800434e:	4603      	mov	r3, r0
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
				  						ssd1306_SetCursor(32, 32);
 8004352:	2120      	movs	r1, #32
 8004354:	2020      	movs	r0, #32
 8004356:	f7ff f87b 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos2", Font_6x8, White);
 800435a:	4a3b      	ldr	r2, [pc, #236]	; (8004448 <statemachine+0x808>)
 800435c:	2301      	movs	r3, #1
 800435e:	ca06      	ldmia	r2, {r1, r2}
 8004360:	4843      	ldr	r0, [pc, #268]	; (8004470 <statemachine+0x830>)
 8004362:	f7ff f84f 	bl	8003404 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8004366:	212c      	movs	r1, #44	; 0x2c
 8004368:	2020      	movs	r0, #32
 800436a:	f7ff f871 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800436e:	4a36      	ldr	r2, [pc, #216]	; (8004448 <statemachine+0x808>)
 8004370:	2301      	movs	r3, #1
 8004372:	ca06      	ldmia	r2, {r1, r2}
 8004374:	4838      	ldr	r0, [pc, #224]	; (8004458 <statemachine+0x818>)
 8004376:	f7ff f845 	bl	8003404 <ssd1306_WriteString>
				  						free(str);
 800437a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800437c:	f010 fade 	bl	801493c <free>
				  					}
				  if(BTN_B>=1){
 8004380:	4b37      	ldr	r3, [pc, #220]	; (8004460 <statemachine+0x820>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f340 814f 	ble.w	8004628 <statemachine+0x9e8>
				  					  posstate++;
 800438a:	4b36      	ldr	r3, [pc, #216]	; (8004464 <statemachine+0x824>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	3301      	adds	r3, #1
 8004390:	b2da      	uxtb	r2, r3
 8004392:	4b34      	ldr	r3, [pc, #208]	; (8004464 <statemachine+0x824>)
 8004394:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8004396:	4b32      	ldr	r3, [pc, #200]	; (8004460 <statemachine+0x820>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
				  				  }



				  break;
 800439c:	e144      	b.n	8004628 <statemachine+0x9e8>
			  case STATE_LONG:
				  if(myData.fix == 1){
 800439e:	4b28      	ldr	r3, [pc, #160]	; (8004440 <statemachine+0x800>)
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d168      	bne.n	8004478 <statemachine+0x838>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 80043a6:	2014      	movs	r0, #20
 80043a8:	f010 fac0 	bl	801492c <malloc>
 80043ac:	4603      	mov	r3, r0
 80043ae:	62bb      	str	r3, [r7, #40]	; 0x28
				  						ssd1306_SetCursor(32, 32);
 80043b0:	2120      	movs	r1, #32
 80043b2:	2020      	movs	r0, #32
 80043b4:	f7ff f84c 	bl	8003450 <ssd1306_SetCursor>
				  						snprintf(str,15, "LonSide:");
 80043b8:	4a2e      	ldr	r2, [pc, #184]	; (8004474 <statemachine+0x834>)
 80043ba:	210f      	movs	r1, #15
 80043bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043be:	f012 f9b1 	bl	8016724 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80043c2:	4a21      	ldr	r2, [pc, #132]	; (8004448 <statemachine+0x808>)
 80043c4:	2301      	movs	r3, #1
 80043c6:	ca06      	ldmia	r2, {r1, r2}
 80043c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ca:	f7ff f81b 	bl	8003404 <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80043ce:	4b1c      	ldr	r3, [pc, #112]	; (8004440 <statemachine+0x800>)
 80043d0:	7e1b      	ldrb	r3, [r3, #24]
 80043d2:	4a26      	ldr	r2, [pc, #152]	; (800446c <statemachine+0x82c>)
 80043d4:	210f      	movs	r1, #15
 80043d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043d8:	f012 f9a4 	bl	8016724 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 80043dc:	2128      	movs	r1, #40	; 0x28
 80043de:	2020      	movs	r0, #32
 80043e0:	f7ff f836 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80043e4:	4a18      	ldr	r2, [pc, #96]	; (8004448 <statemachine+0x808>)
 80043e6:	2301      	movs	r3, #1
 80043e8:	ca06      	ldmia	r2, {r1, r2}
 80043ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ec:	f7ff f80a 	bl	8003404 <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 80043f0:	4a17      	ldr	r2, [pc, #92]	; (8004450 <statemachine+0x810>)
 80043f2:	210f      	movs	r1, #15
 80043f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043f6:	f012 f995 	bl	8016724 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 80043fa:	2130      	movs	r1, #48	; 0x30
 80043fc:	2020      	movs	r0, #32
 80043fe:	f7ff f827 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8004402:	4a11      	ldr	r2, [pc, #68]	; (8004448 <statemachine+0x808>)
 8004404:	2301      	movs	r3, #1
 8004406:	ca06      	ldmia	r2, {r1, r2}
 8004408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800440a:	f7fe fffb 	bl	8003404 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 800440e:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <statemachine+0x800>)
 8004410:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004414:	e9cd 2300 	strd	r2, r3, [sp]
 8004418:	4a0c      	ldr	r2, [pc, #48]	; (800444c <statemachine+0x80c>)
 800441a:	210f      	movs	r1, #15
 800441c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800441e:	f012 f981 	bl	8016724 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8004422:	2138      	movs	r1, #56	; 0x38
 8004424:	2020      	movs	r0, #32
 8004426:	f7ff f813 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800442a:	4a07      	ldr	r2, [pc, #28]	; (8004448 <statemachine+0x808>)
 800442c:	2301      	movs	r3, #1
 800442e:	ca06      	ldmia	r2, {r1, r2}
 8004430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004432:	f7fe ffe7 	bl	8003404 <ssd1306_WriteString>
				  						free(str);
 8004436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004438:	f010 fa80 	bl	801493c <free>
 800443c:	e038      	b.n	80044b0 <statemachine+0x870>
 800443e:	bf00      	nop
 8004440:	200006f8 	.word	0x200006f8
 8004444:	0801bae0 	.word	0x0801bae0
 8004448:	20000020 	.word	0x20000020
 800444c:	0801baec 	.word	0x0801baec
 8004450:	0801baf4 	.word	0x0801baf4
 8004454:	0801bb00 	.word	0x0801bb00
 8004458:	0801babc 	.word	0x0801babc
 800445c:	20000770 	.word	0x20000770
 8004460:	2000073c 	.word	0x2000073c
 8004464:	200004ab 	.word	0x200004ab
 8004468:	0801bb08 	.word	0x0801bb08
 800446c:	0801bb14 	.word	0x0801bb14
 8004470:	0801bb18 	.word	0x0801bb18
 8004474:	0801bb20 	.word	0x0801bb20
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8004478:	2014      	movs	r0, #20
 800447a:	f010 fa57 	bl	801492c <malloc>
 800447e:	4603      	mov	r3, r0
 8004480:	62fb      	str	r3, [r7, #44]	; 0x2c
				  						ssd1306_SetCursor(32, 32);
 8004482:	2120      	movs	r1, #32
 8004484:	2020      	movs	r0, #32
 8004486:	f7fe ffe3 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos3", Font_6x8, White);
 800448a:	4aa1      	ldr	r2, [pc, #644]	; (8004710 <statemachine+0xad0>)
 800448c:	2301      	movs	r3, #1
 800448e:	ca06      	ldmia	r2, {r1, r2}
 8004490:	48a0      	ldr	r0, [pc, #640]	; (8004714 <statemachine+0xad4>)
 8004492:	f7fe ffb7 	bl	8003404 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8004496:	212c      	movs	r1, #44	; 0x2c
 8004498:	2020      	movs	r0, #32
 800449a:	f7fe ffd9 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800449e:	4a9c      	ldr	r2, [pc, #624]	; (8004710 <statemachine+0xad0>)
 80044a0:	2301      	movs	r3, #1
 80044a2:	ca06      	ldmia	r2, {r1, r2}
 80044a4:	489c      	ldr	r0, [pc, #624]	; (8004718 <statemachine+0xad8>)
 80044a6:	f7fe ffad 	bl	8003404 <ssd1306_WriteString>
				  						free(str);
 80044aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044ac:	f010 fa46 	bl	801493c <free>
				  					}
				  if(BTN_B>=1){
 80044b0:	4b9a      	ldr	r3, [pc, #616]	; (800471c <statemachine+0xadc>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f340 80b9 	ble.w	800462c <statemachine+0x9ec>
				  					  posstate++;
 80044ba:	4b99      	ldr	r3, [pc, #612]	; (8004720 <statemachine+0xae0>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	3301      	adds	r3, #1
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	4b97      	ldr	r3, [pc, #604]	; (8004720 <statemachine+0xae0>)
 80044c4:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 80044c6:	4b95      	ldr	r3, [pc, #596]	; (800471c <statemachine+0xadc>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
				  				  }


				  break;
 80044cc:	e0ae      	b.n	800462c <statemachine+0x9ec>
			  case STATE_ALT:
				  if(myData.fix == 1){
 80044ce:	4b95      	ldr	r3, [pc, #596]	; (8004724 <statemachine+0xae4>)
 80044d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d170      	bne.n	80045b8 <statemachine+0x978>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 80044d6:	2014      	movs	r0, #20
 80044d8:	f010 fa28 	bl	801492c <malloc>
 80044dc:	4603      	mov	r3, r0
 80044de:	633b      	str	r3, [r7, #48]	; 0x30
				  						ssd1306_SetCursor(32, 32);
 80044e0:	2120      	movs	r1, #32
 80044e2:	2020      	movs	r0, #32
 80044e4:	f7fe ffb4 	bl	8003450 <ssd1306_SetCursor>
				  						snprintf(str,15, "altitude:");
 80044e8:	4a8f      	ldr	r2, [pc, #572]	; (8004728 <statemachine+0xae8>)
 80044ea:	210f      	movs	r1, #15
 80044ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ee:	f012 f919 	bl	8016724 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80044f2:	4a87      	ldr	r2, [pc, #540]	; (8004710 <statemachine+0xad0>)
 80044f4:	2301      	movs	r3, #1
 80044f6:	ca06      	ldmia	r2, {r1, r2}
 80044f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044fa:	f7fe ff83 	bl	8003404 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80044fe:	4b89      	ldr	r3, [pc, #548]	; (8004724 <statemachine+0xae4>)
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	4618      	mov	r0, r3
 8004504:	f7fc f820 	bl	8000548 <__aeabi_f2d>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	e9cd 2300 	strd	r2, r3, [sp]
 8004510:	4a86      	ldr	r2, [pc, #536]	; (800472c <statemachine+0xaec>)
 8004512:	210f      	movs	r1, #15
 8004514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004516:	f012 f905 	bl	8016724 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 800451a:	2128      	movs	r1, #40	; 0x28
 800451c:	2020      	movs	r0, #32
 800451e:	f7fe ff97 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8004522:	4a7b      	ldr	r2, [pc, #492]	; (8004710 <statemachine+0xad0>)
 8004524:	2301      	movs	r3, #1
 8004526:	ca06      	ldmia	r2, {r1, r2}
 8004528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800452a:	f7fe ff6b 	bl	8003404 <ssd1306_WriteString>
				  						snprintf(str,15, "Pressure:");
 800452e:	4a80      	ldr	r2, [pc, #512]	; (8004730 <statemachine+0xaf0>)
 8004530:	210f      	movs	r1, #15
 8004532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004534:	f012 f8f6 	bl	8016724 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8004538:	2130      	movs	r1, #48	; 0x30
 800453a:	2020      	movs	r0, #32
 800453c:	f7fe ff88 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8004540:	4a73      	ldr	r2, [pc, #460]	; (8004710 <statemachine+0xad0>)
 8004542:	2301      	movs	r3, #1
 8004544:	ca06      	ldmia	r2, {r1, r2}
 8004546:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004548:	f7fe ff5c 	bl	8003404 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 800454c:	4b75      	ldr	r3, [pc, #468]	; (8004724 <statemachine+0xae4>)
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	4618      	mov	r0, r3
 8004552:	f7fb fff9 	bl	8000548 <__aeabi_f2d>
 8004556:	a36c      	add	r3, pc, #432	; (adr r3, 8004708 <statemachine+0xac8>)
 8004558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455c:	f7fc f84c 	bl	80005f8 <__aeabi_dmul>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4610      	mov	r0, r2
 8004566:	4619      	mov	r1, r3
 8004568:	f7fc fb3e 	bl	8000be8 <__aeabi_d2f>
 800456c:	4603      	mov	r3, r0
 800456e:	ee00 3a10 	vmov	s0, r3
 8004572:	f014 fff5 	bl	8019560 <expf>
 8004576:	eef0 7a40 	vmov.f32	s15, s0
 800457a:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8004734 <statemachine+0xaf4>
 800457e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004582:	ee17 0a90 	vmov	r0, s15
 8004586:	f7fb ffdf 	bl	8000548 <__aeabi_f2d>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	e9cd 2300 	strd	r2, r3, [sp]
 8004592:	4a69      	ldr	r2, [pc, #420]	; (8004738 <statemachine+0xaf8>)
 8004594:	210f      	movs	r1, #15
 8004596:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004598:	f012 f8c4 	bl	8016724 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 800459c:	2138      	movs	r1, #56	; 0x38
 800459e:	2020      	movs	r0, #32
 80045a0:	f7fe ff56 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80045a4:	4a5a      	ldr	r2, [pc, #360]	; (8004710 <statemachine+0xad0>)
 80045a6:	2301      	movs	r3, #1
 80045a8:	ca06      	ldmia	r2, {r1, r2}
 80045aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ac:	f7fe ff2a 	bl	8003404 <ssd1306_WriteString>
				  						free(str);
 80045b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045b2:	f010 f9c3 	bl	801493c <free>
 80045b6:	e01b      	b.n	80045f0 <statemachine+0x9b0>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 80045b8:	2014      	movs	r0, #20
 80045ba:	f010 f9b7 	bl	801492c <malloc>
 80045be:	4603      	mov	r3, r0
 80045c0:	637b      	str	r3, [r7, #52]	; 0x34
				  						ssd1306_SetCursor(32, 32);
 80045c2:	2120      	movs	r1, #32
 80045c4:	2020      	movs	r0, #32
 80045c6:	f7fe ff43 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos4", Font_6x8, White);
 80045ca:	4a51      	ldr	r2, [pc, #324]	; (8004710 <statemachine+0xad0>)
 80045cc:	2301      	movs	r3, #1
 80045ce:	ca06      	ldmia	r2, {r1, r2}
 80045d0:	485a      	ldr	r0, [pc, #360]	; (800473c <statemachine+0xafc>)
 80045d2:	f7fe ff17 	bl	8003404 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 80045d6:	212c      	movs	r1, #44	; 0x2c
 80045d8:	2020      	movs	r0, #32
 80045da:	f7fe ff39 	bl	8003450 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80045de:	4a4c      	ldr	r2, [pc, #304]	; (8004710 <statemachine+0xad0>)
 80045e0:	2301      	movs	r3, #1
 80045e2:	ca06      	ldmia	r2, {r1, r2}
 80045e4:	484c      	ldr	r0, [pc, #304]	; (8004718 <statemachine+0xad8>)
 80045e6:	f7fe ff0d 	bl	8003404 <ssd1306_WriteString>
				  						free(str);
 80045ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80045ec:	f010 f9a6 	bl	801493c <free>
				  					}
				  if(BTN_B>=1){
 80045f0:	4b4a      	ldr	r3, [pc, #296]	; (800471c <statemachine+0xadc>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	dd1b      	ble.n	8004630 <statemachine+0x9f0>
				  					posstate--;
 80045f8:	4b49      	ldr	r3, [pc, #292]	; (8004720 <statemachine+0xae0>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	4b47      	ldr	r3, [pc, #284]	; (8004720 <statemachine+0xae0>)
 8004602:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8004604:	4b46      	ldr	r3, [pc, #280]	; (8004720 <statemachine+0xae0>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	3b01      	subs	r3, #1
 800460a:	b2da      	uxtb	r2, r3
 800460c:	4b44      	ldr	r3, [pc, #272]	; (8004720 <statemachine+0xae0>)
 800460e:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8004610:	4b43      	ldr	r3, [pc, #268]	; (8004720 <statemachine+0xae0>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	3b01      	subs	r3, #1
 8004616:	b2da      	uxtb	r2, r3
 8004618:	4b41      	ldr	r3, [pc, #260]	; (8004720 <statemachine+0xae0>)
 800461a:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 800461c:	4b3f      	ldr	r3, [pc, #252]	; (800471c <statemachine+0xadc>)
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
				  				  }
				  break;
 8004622:	e005      	b.n	8004630 <statemachine+0x9f0>
				  break;
 8004624:	bf00      	nop
 8004626:	e004      	b.n	8004632 <statemachine+0x9f2>
				  break;
 8004628:	bf00      	nop
 800462a:	e002      	b.n	8004632 <statemachine+0x9f2>
				  break;
 800462c:	bf00      	nop
 800462e:	e000      	b.n	8004632 <statemachine+0x9f2>
				  break;
 8004630:	bf00      	nop
			  }

					if(BTN_A>=1){
 8004632:	4b43      	ldr	r3, [pc, #268]	; (8004740 <statemachine+0xb00>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	f341 8184 	ble.w	8005944 <statemachine+0x1d04>
							state++;
 800463c:	4b41      	ldr	r3, [pc, #260]	; (8004744 <statemachine+0xb04>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	3301      	adds	r3, #1
 8004642:	b2da      	uxtb	r2, r3
 8004644:	4b3f      	ldr	r3, [pc, #252]	; (8004744 <statemachine+0xb04>)
 8004646:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8004648:	4b3d      	ldr	r3, [pc, #244]	; (8004740 <statemachine+0xb00>)
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 800464e:	4b33      	ldr	r3, [pc, #204]	; (800471c <statemachine+0xadc>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]


						}
			  break;
 8004654:	f001 b976 	b.w	8005944 <statemachine+0x1d04>

		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 8004658:	2000      	movs	r0, #0
 800465a:	f7fe fdb7 	bl	80031cc <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 800465e:	493a      	ldr	r1, [pc, #232]	; (8004748 <statemachine+0xb08>)
 8004660:	4830      	ldr	r0, [pc, #192]	; (8004724 <statemachine+0xae4>)
 8004662:	f7fd fe97 	bl	8002394 <nmea_parse>
			  int heure=0;
 8004666:	2300      	movs	r3, #0
 8004668:	65fb      	str	r3, [r7, #92]	; 0x5c
			  heure=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 800466a:	4b2e      	ldr	r3, [pc, #184]	; (8004724 <statemachine+0xae4>)
 800466c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004670:	f003 020f 	and.w	r2, r3, #15
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	461a      	mov	r2, r3
 800467e:	4b29      	ldr	r3, [pc, #164]	; (8004724 <statemachine+0xae4>)
 8004680:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	4413      	add	r3, r2
 800468a:	65fb      	str	r3, [r7, #92]	; 0x5c
			  if((heure+2)>=24){
 800468c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800468e:	2b15      	cmp	r3, #21
 8004690:	dd03      	ble.n	800469a <statemachine+0xa5a>
				  heure=heure-22;
 8004692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004694:	3b16      	subs	r3, #22
 8004696:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004698:	e002      	b.n	80046a0 <statemachine+0xa60>
			  }
			  else{
				  heure=heure+2;
 800469a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800469c:	3302      	adds	r3, #2
 800469e:	65fb      	str	r3, [r7, #92]	; 0x5c
			  }

			  if(myData.fix == 1){
 80046a0:	4b20      	ldr	r3, [pc, #128]	; (8004724 <statemachine+0xae4>)
 80046a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	f040 82e3 	bne.w	8004c70 <statemachine+0x1030>

				  switch(hrstate){
 80046aa:	4b28      	ldr	r3, [pc, #160]	; (800474c <statemachine+0xb0c>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <statemachine+0xa7a>
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	f000 808f 	beq.w	80047d6 <statemachine+0xb96>
 80046b8:	e2f0      	b.n	8004c9c <statemachine+0x105c>
				  case STATE_DIGIT:
					  char * str = (char*)malloc(sizeof(char)*20);
 80046ba:	2014      	movs	r0, #20
 80046bc:	f010 f936 	bl	801492c <malloc>
 80046c0:	4603      	mov	r3, r0
 80046c2:	63bb      	str	r3, [r7, #56]	; 0x38
					  ssd1306_SetCursor(32, 32);
 80046c4:	2120      	movs	r1, #32
 80046c6:	2020      	movs	r0, #32
 80046c8:	f7fe fec2 	bl	8003450 <ssd1306_SetCursor>
					  ssd1306_WriteString("hr GMT+2:", Font_6x8, White);
 80046cc:	4a10      	ldr	r2, [pc, #64]	; (8004710 <statemachine+0xad0>)
 80046ce:	2301      	movs	r3, #1
 80046d0:	ca06      	ldmia	r2, {r1, r2}
 80046d2:	481f      	ldr	r0, [pc, #124]	; (8004750 <statemachine+0xb10>)
 80046d4:	f7fe fe96 	bl	8003404 <ssd1306_WriteString>
					 ssd1306_SetCursor(34, 42);
 80046d8:	212a      	movs	r1, #42	; 0x2a
 80046da:	2022      	movs	r0, #34	; 0x22
 80046dc:	f7fe feb8 	bl	8003450 <ssd1306_SetCursor>
					 if(heure>=10){
 80046e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046e2:	2b09      	cmp	r3, #9
 80046e4:	dd38      	ble.n	8004758 <statemachine+0xb18>
					snprintf(str,15, "%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 80046e6:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <statemachine+0xae4>)
 80046e8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80046ec:	461a      	mov	r2, r3
 80046ee:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <statemachine+0xae4>)
 80046f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80046f4:	9301      	str	r3, [sp, #4]
 80046f6:	9200      	str	r2, [sp, #0]
 80046f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046fa:	4a16      	ldr	r2, [pc, #88]	; (8004754 <statemachine+0xb14>)
 80046fc:	210f      	movs	r1, #15
 80046fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004700:	f012 f810 	bl	8016724 <sniprintf>
 8004704:	e037      	b.n	8004776 <statemachine+0xb36>
 8004706:	bf00      	nop
 8004708:	fb798882 	.word	0xfb798882
 800470c:	bf1e1818 	.word	0xbf1e1818
 8004710:	20000020 	.word	0x20000020
 8004714:	0801bb2c 	.word	0x0801bb2c
 8004718:	0801babc 	.word	0x0801babc
 800471c:	2000073c 	.word	0x2000073c
 8004720:	200004ab 	.word	0x200004ab
 8004724:	200006f8 	.word	0x200006f8
 8004728:	0801bb34 	.word	0x0801bb34
 800472c:	0801bb40 	.word	0x0801bb40
 8004730:	0801bb48 	.word	0x0801bb48
 8004734:	447a0000 	.word	0x447a0000
 8004738:	0801bb54 	.word	0x0801bb54
 800473c:	0801bb60 	.word	0x0801bb60
 8004740:	20000738 	.word	0x20000738
 8004744:	200004a8 	.word	0x200004a8
 8004748:	200004f4 	.word	0x200004f4
 800474c:	200004a9 	.word	0x200004a9
 8004750:	0801bb68 	.word	0x0801bb68
 8004754:	0801bb74 	.word	0x0801bb74
					}
					else{
					 	snprintf(str,15, "0%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 8004758:	4bb5      	ldr	r3, [pc, #724]	; (8004a30 <statemachine+0xdf0>)
 800475a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800475e:	461a      	mov	r2, r3
 8004760:	4bb3      	ldr	r3, [pc, #716]	; (8004a30 <statemachine+0xdf0>)
 8004762:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004766:	9301      	str	r3, [sp, #4]
 8004768:	9200      	str	r2, [sp, #0]
 800476a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800476c:	4ab1      	ldr	r2, [pc, #708]	; (8004a34 <statemachine+0xdf4>)
 800476e:	210f      	movs	r1, #15
 8004770:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004772:	f011 ffd7 	bl	8016724 <sniprintf>
					}
					ssd1306_WriteString(str, Font_7x10, White);
 8004776:	4ab0      	ldr	r2, [pc, #704]	; (8004a38 <statemachine+0xdf8>)
 8004778:	2301      	movs	r3, #1
 800477a:	ca06      	ldmia	r2, {r1, r2}
 800477c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800477e:	f7fe fe41 	bl	8003404 <ssd1306_WriteString>
					ssd1306_SetCursor(34, 52);
 8004782:	2134      	movs	r1, #52	; 0x34
 8004784:	2022      	movs	r0, #34	; 0x22
 8004786:	f7fe fe63 	bl	8003450 <ssd1306_SetCursor>
					snprintf(str,15, "%c%c sec",myData.lastMeasure[4],myData.lastMeasure[5]);
 800478a:	4ba9      	ldr	r3, [pc, #676]	; (8004a30 <statemachine+0xdf0>)
 800478c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004790:	461a      	mov	r2, r3
 8004792:	4ba7      	ldr	r3, [pc, #668]	; (8004a30 <statemachine+0xdf0>)
 8004794:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	4613      	mov	r3, r2
 800479c:	4aa7      	ldr	r2, [pc, #668]	; (8004a3c <statemachine+0xdfc>)
 800479e:	210f      	movs	r1, #15
 80047a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047a2:	f011 ffbf 	bl	8016724 <sniprintf>
					ssd1306_WriteString(str, Font_6x8, White);
 80047a6:	4aa6      	ldr	r2, [pc, #664]	; (8004a40 <statemachine+0xe00>)
 80047a8:	2301      	movs	r3, #1
 80047aa:	ca06      	ldmia	r2, {r1, r2}
 80047ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047ae:	f7fe fe29 	bl	8003404 <ssd1306_WriteString>
					free(str);
 80047b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047b4:	f010 f8c2 	bl	801493c <free>
					if(BTN_B>=1){
 80047b8:	4ba2      	ldr	r3, [pc, #648]	; (8004a44 <statemachine+0xe04>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f340 826a 	ble.w	8004c96 <statemachine+0x1056>
												hrstate++;
 80047c2:	4ba1      	ldr	r3, [pc, #644]	; (8004a48 <statemachine+0xe08>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	3301      	adds	r3, #1
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	4b9f      	ldr	r3, [pc, #636]	; (8004a48 <statemachine+0xe08>)
 80047cc:	701a      	strb	r2, [r3, #0]
												BTN_B=0;
 80047ce:	4b9d      	ldr	r3, [pc, #628]	; (8004a44 <statemachine+0xe04>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
											}




					  break;
 80047d4:	e25f      	b.n	8004c96 <statemachine+0x1056>
				  case STATE_OLD:
					  if(heure>12){
 80047d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d8:	2b0c      	cmp	r3, #12
 80047da:	dd02      	ble.n	80047e2 <statemachine+0xba2>
						  heure=heure-12;
 80047dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047de:	3b0c      	subs	r3, #12
 80047e0:	65fb      	str	r3, [r7, #92]	; 0x5c
					  }
					  int minute=0;
 80047e2:	2300      	movs	r3, #0
 80047e4:	63fb      	str	r3, [r7, #60]	; 0x3c
					  minute=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 80047e6:	4b92      	ldr	r3, [pc, #584]	; (8004a30 <statemachine+0xdf0>)
 80047e8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80047ec:	f003 020f 	and.w	r2, r3, #15
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	461a      	mov	r2, r3
 80047fa:	4b8d      	ldr	r3, [pc, #564]	; (8004a30 <statemachine+0xdf0>)
 80047fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	4413      	add	r3, r2
 8004806:	63fb      	str	r3, [r7, #60]	; 0x3c
					  ssd1306_DrawCircle(64, 48, 12, White);
 8004808:	2301      	movs	r3, #1
 800480a:	220c      	movs	r2, #12
 800480c:	2130      	movs	r1, #48	; 0x30
 800480e:	2040      	movs	r0, #64	; 0x40
 8004810:	f7fe fea2 	bl	8003558 <ssd1306_DrawCircle>
					  ssd1306_Line(64,48,64+floor(6*cos((3-heure)*M_PI/6)),48-floor(6*sin((3-heure)*M_PI/6)),White);
 8004814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004816:	f1c3 0303 	rsb	r3, r3, #3
 800481a:	4618      	mov	r0, r3
 800481c:	f7fb fe82 	bl	8000524 <__aeabi_i2d>
 8004820:	a381      	add	r3, pc, #516	; (adr r3, 8004a28 <statemachine+0xde8>)
 8004822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004826:	f7fb fee7 	bl	80005f8 <__aeabi_dmul>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4610      	mov	r0, r2
 8004830:	4619      	mov	r1, r3
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	4b85      	ldr	r3, [pc, #532]	; (8004a4c <statemachine+0xe0c>)
 8004838:	f7fc f808 	bl	800084c <__aeabi_ddiv>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	ec43 2b17 	vmov	d7, r2, r3
 8004844:	eeb0 0a47 	vmov.f32	s0, s14
 8004848:	eef0 0a67 	vmov.f32	s1, s15
 800484c:	f014 fddc 	bl	8019408 <cos>
 8004850:	ec51 0b10 	vmov	r0, r1, d0
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	4b7c      	ldr	r3, [pc, #496]	; (8004a4c <statemachine+0xe0c>)
 800485a:	f7fb fecd 	bl	80005f8 <__aeabi_dmul>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	ec43 2b17 	vmov	d7, r2, r3
 8004866:	eeb0 0a47 	vmov.f32	s0, s14
 800486a:	eef0 0a67 	vmov.f32	s1, s15
 800486e:	f014 ff1f 	bl	80196b0 <floor>
 8004872:	ec51 0b10 	vmov	r0, r1, d0
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	4b75      	ldr	r3, [pc, #468]	; (8004a50 <statemachine+0xe10>)
 800487c:	f7fb fd06 	bl	800028c <__adddf3>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4610      	mov	r0, r2
 8004886:	4619      	mov	r1, r3
 8004888:	f7fc f98e 	bl	8000ba8 <__aeabi_d2uiz>
 800488c:	4603      	mov	r3, r0
 800488e:	b2dc      	uxtb	r4, r3
 8004890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004892:	f1c3 0303 	rsb	r3, r3, #3
 8004896:	4618      	mov	r0, r3
 8004898:	f7fb fe44 	bl	8000524 <__aeabi_i2d>
 800489c:	a362      	add	r3, pc, #392	; (adr r3, 8004a28 <statemachine+0xde8>)
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	f7fb fea9 	bl	80005f8 <__aeabi_dmul>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4610      	mov	r0, r2
 80048ac:	4619      	mov	r1, r3
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	4b66      	ldr	r3, [pc, #408]	; (8004a4c <statemachine+0xe0c>)
 80048b4:	f7fb ffca 	bl	800084c <__aeabi_ddiv>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	ec43 2b17 	vmov	d7, r2, r3
 80048c0:	eeb0 0a47 	vmov.f32	s0, s14
 80048c4:	eef0 0a67 	vmov.f32	s1, s15
 80048c8:	f014 fdf2 	bl	80194b0 <sin>
 80048cc:	ec51 0b10 	vmov	r0, r1, d0
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	4b5d      	ldr	r3, [pc, #372]	; (8004a4c <statemachine+0xe0c>)
 80048d6:	f7fb fe8f 	bl	80005f8 <__aeabi_dmul>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	ec43 2b17 	vmov	d7, r2, r3
 80048e2:	eeb0 0a47 	vmov.f32	s0, s14
 80048e6:	eef0 0a67 	vmov.f32	s1, s15
 80048ea:	f014 fee1 	bl	80196b0 <floor>
 80048ee:	ec53 2b10 	vmov	r2, r3, d0
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	4957      	ldr	r1, [pc, #348]	; (8004a54 <statemachine+0xe14>)
 80048f8:	f7fb fcc6 	bl	8000288 <__aeabi_dsub>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4610      	mov	r0, r2
 8004902:	4619      	mov	r1, r3
 8004904:	f7fc f950 	bl	8000ba8 <__aeabi_d2uiz>
 8004908:	4603      	mov	r3, r0
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2201      	movs	r2, #1
 800490e:	9200      	str	r2, [sp, #0]
 8004910:	4622      	mov	r2, r4
 8004912:	2130      	movs	r1, #48	; 0x30
 8004914:	2040      	movs	r0, #64	; 0x40
 8004916:	f7fe fdb3 	bl	8003480 <ssd1306_Line>
					  ssd1306_Line(64,48,64+floor(12*cos((15-minute)*M_PI/30)),48-floor(12*sin((15-minute)*M_PI/30)),White);
 800491a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491c:	f1c3 030f 	rsb	r3, r3, #15
 8004920:	4618      	mov	r0, r3
 8004922:	f7fb fdff 	bl	8000524 <__aeabi_i2d>
 8004926:	a340      	add	r3, pc, #256	; (adr r3, 8004a28 <statemachine+0xde8>)
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	f7fb fe64 	bl	80005f8 <__aeabi_dmul>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4610      	mov	r0, r2
 8004936:	4619      	mov	r1, r3
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	4b46      	ldr	r3, [pc, #280]	; (8004a58 <statemachine+0xe18>)
 800493e:	f7fb ff85 	bl	800084c <__aeabi_ddiv>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	ec43 2b17 	vmov	d7, r2, r3
 800494a:	eeb0 0a47 	vmov.f32	s0, s14
 800494e:	eef0 0a67 	vmov.f32	s1, s15
 8004952:	f014 fd59 	bl	8019408 <cos>
 8004956:	ec51 0b10 	vmov	r0, r1, d0
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	4b3f      	ldr	r3, [pc, #252]	; (8004a5c <statemachine+0xe1c>)
 8004960:	f7fb fe4a 	bl	80005f8 <__aeabi_dmul>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	ec43 2b17 	vmov	d7, r2, r3
 800496c:	eeb0 0a47 	vmov.f32	s0, s14
 8004970:	eef0 0a67 	vmov.f32	s1, s15
 8004974:	f014 fe9c 	bl	80196b0 <floor>
 8004978:	ec51 0b10 	vmov	r0, r1, d0
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	4b33      	ldr	r3, [pc, #204]	; (8004a50 <statemachine+0xe10>)
 8004982:	f7fb fc83 	bl	800028c <__adddf3>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4610      	mov	r0, r2
 800498c:	4619      	mov	r1, r3
 800498e:	f7fc f90b 	bl	8000ba8 <__aeabi_d2uiz>
 8004992:	4603      	mov	r3, r0
 8004994:	b2dc      	uxtb	r4, r3
 8004996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004998:	f1c3 030f 	rsb	r3, r3, #15
 800499c:	4618      	mov	r0, r3
 800499e:	f7fb fdc1 	bl	8000524 <__aeabi_i2d>
 80049a2:	a321      	add	r3, pc, #132	; (adr r3, 8004a28 <statemachine+0xde8>)
 80049a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a8:	f7fb fe26 	bl	80005f8 <__aeabi_dmul>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4610      	mov	r0, r2
 80049b2:	4619      	mov	r1, r3
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	4b27      	ldr	r3, [pc, #156]	; (8004a58 <statemachine+0xe18>)
 80049ba:	f7fb ff47 	bl	800084c <__aeabi_ddiv>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	ec43 2b17 	vmov	d7, r2, r3
 80049c6:	eeb0 0a47 	vmov.f32	s0, s14
 80049ca:	eef0 0a67 	vmov.f32	s1, s15
 80049ce:	f014 fd6f 	bl	80194b0 <sin>
 80049d2:	ec51 0b10 	vmov	r0, r1, d0
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	4b20      	ldr	r3, [pc, #128]	; (8004a5c <statemachine+0xe1c>)
 80049dc:	f7fb fe0c 	bl	80005f8 <__aeabi_dmul>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	ec43 2b17 	vmov	d7, r2, r3
 80049e8:	eeb0 0a47 	vmov.f32	s0, s14
 80049ec:	eef0 0a67 	vmov.f32	s1, s15
 80049f0:	f014 fe5e 	bl	80196b0 <floor>
 80049f4:	ec53 2b10 	vmov	r2, r3, d0
 80049f8:	f04f 0000 	mov.w	r0, #0
 80049fc:	4915      	ldr	r1, [pc, #84]	; (8004a54 <statemachine+0xe14>)
 80049fe:	f7fb fc43 	bl	8000288 <__aeabi_dsub>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	f7fc f8cd 	bl	8000ba8 <__aeabi_d2uiz>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2201      	movs	r2, #1
 8004a14:	9200      	str	r2, [sp, #0]
 8004a16:	4622      	mov	r2, r4
 8004a18:	2130      	movs	r1, #48	; 0x30
 8004a1a:	2040      	movs	r0, #64	; 0x40
 8004a1c:	f7fe fd30 	bl	8003480 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 8004a20:	2300      	movs	r3, #0
 8004a22:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a24:	e112      	b.n	8004c4c <statemachine+0x100c>
 8004a26:	bf00      	nop
 8004a28:	54442d18 	.word	0x54442d18
 8004a2c:	400921fb 	.word	0x400921fb
 8004a30:	200006f8 	.word	0x200006f8
 8004a34:	0801bb7c 	.word	0x0801bb7c
 8004a38:	20000028 	.word	0x20000028
 8004a3c:	0801bb88 	.word	0x0801bb88
 8004a40:	20000020 	.word	0x20000020
 8004a44:	2000073c 	.word	0x2000073c
 8004a48:	200004a9 	.word	0x200004a9
 8004a4c:	40180000 	.word	0x40180000
 8004a50:	40500000 	.word	0x40500000
 8004a54:	40480000 	.word	0x40480000
 8004a58:	403e0000 	.word	0x403e0000
 8004a5c:	40280000 	.word	0x40280000
						  ssd1306_Line(64+floor(10*cos((i)*M_PI/6)),48+floor(10*sin((i)*M_PI/6)),64+floor(12*cos((i)*M_PI/6)),48+floor(12*sin((i)*M_PI/6)),White);
 8004a60:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004a62:	f7fb fd5f 	bl	8000524 <__aeabi_i2d>
 8004a66:	a3c6      	add	r3, pc, #792	; (adr r3, 8004d80 <statemachine+0x1140>)
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	f7fb fdc4 	bl	80005f8 <__aeabi_dmul>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4610      	mov	r0, r2
 8004a76:	4619      	mov	r1, r3
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	4bc2      	ldr	r3, [pc, #776]	; (8004d88 <statemachine+0x1148>)
 8004a7e:	f7fb fee5 	bl	800084c <__aeabi_ddiv>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	ec43 2b17 	vmov	d7, r2, r3
 8004a8a:	eeb0 0a47 	vmov.f32	s0, s14
 8004a8e:	eef0 0a67 	vmov.f32	s1, s15
 8004a92:	f014 fcb9 	bl	8019408 <cos>
 8004a96:	ec51 0b10 	vmov	r0, r1, d0
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	4bbb      	ldr	r3, [pc, #748]	; (8004d8c <statemachine+0x114c>)
 8004aa0:	f7fb fdaa 	bl	80005f8 <__aeabi_dmul>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	ec43 2b17 	vmov	d7, r2, r3
 8004aac:	eeb0 0a47 	vmov.f32	s0, s14
 8004ab0:	eef0 0a67 	vmov.f32	s1, s15
 8004ab4:	f014 fdfc 	bl	80196b0 <floor>
 8004ab8:	ec51 0b10 	vmov	r0, r1, d0
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	4bb3      	ldr	r3, [pc, #716]	; (8004d90 <statemachine+0x1150>)
 8004ac2:	f7fb fbe3 	bl	800028c <__adddf3>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4610      	mov	r0, r2
 8004acc:	4619      	mov	r1, r3
 8004ace:	f7fc f86b 	bl	8000ba8 <__aeabi_d2uiz>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	b2dc      	uxtb	r4, r3
 8004ad6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004ad8:	f7fb fd24 	bl	8000524 <__aeabi_i2d>
 8004adc:	a3a8      	add	r3, pc, #672	; (adr r3, 8004d80 <statemachine+0x1140>)
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	f7fb fd89 	bl	80005f8 <__aeabi_dmul>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4610      	mov	r0, r2
 8004aec:	4619      	mov	r1, r3
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	4ba5      	ldr	r3, [pc, #660]	; (8004d88 <statemachine+0x1148>)
 8004af4:	f7fb feaa 	bl	800084c <__aeabi_ddiv>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	ec43 2b17 	vmov	d7, r2, r3
 8004b00:	eeb0 0a47 	vmov.f32	s0, s14
 8004b04:	eef0 0a67 	vmov.f32	s1, s15
 8004b08:	f014 fcd2 	bl	80194b0 <sin>
 8004b0c:	ec51 0b10 	vmov	r0, r1, d0
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	4b9d      	ldr	r3, [pc, #628]	; (8004d8c <statemachine+0x114c>)
 8004b16:	f7fb fd6f 	bl	80005f8 <__aeabi_dmul>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	ec43 2b17 	vmov	d7, r2, r3
 8004b22:	eeb0 0a47 	vmov.f32	s0, s14
 8004b26:	eef0 0a67 	vmov.f32	s1, s15
 8004b2a:	f014 fdc1 	bl	80196b0 <floor>
 8004b2e:	ec51 0b10 	vmov	r0, r1, d0
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	4b97      	ldr	r3, [pc, #604]	; (8004d94 <statemachine+0x1154>)
 8004b38:	f7fb fba8 	bl	800028c <__adddf3>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4610      	mov	r0, r2
 8004b42:	4619      	mov	r1, r3
 8004b44:	f7fc f830 	bl	8000ba8 <__aeabi_d2uiz>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	b2dd      	uxtb	r5, r3
 8004b4c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004b4e:	f7fb fce9 	bl	8000524 <__aeabi_i2d>
 8004b52:	a38b      	add	r3, pc, #556	; (adr r3, 8004d80 <statemachine+0x1140>)
 8004b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b58:	f7fb fd4e 	bl	80005f8 <__aeabi_dmul>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4610      	mov	r0, r2
 8004b62:	4619      	mov	r1, r3
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	4b87      	ldr	r3, [pc, #540]	; (8004d88 <statemachine+0x1148>)
 8004b6a:	f7fb fe6f 	bl	800084c <__aeabi_ddiv>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	ec43 2b17 	vmov	d7, r2, r3
 8004b76:	eeb0 0a47 	vmov.f32	s0, s14
 8004b7a:	eef0 0a67 	vmov.f32	s1, s15
 8004b7e:	f014 fc43 	bl	8019408 <cos>
 8004b82:	ec51 0b10 	vmov	r0, r1, d0
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	4b83      	ldr	r3, [pc, #524]	; (8004d98 <statemachine+0x1158>)
 8004b8c:	f7fb fd34 	bl	80005f8 <__aeabi_dmul>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	ec43 2b17 	vmov	d7, r2, r3
 8004b98:	eeb0 0a47 	vmov.f32	s0, s14
 8004b9c:	eef0 0a67 	vmov.f32	s1, s15
 8004ba0:	f014 fd86 	bl	80196b0 <floor>
 8004ba4:	ec51 0b10 	vmov	r0, r1, d0
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	4b78      	ldr	r3, [pc, #480]	; (8004d90 <statemachine+0x1150>)
 8004bae:	f7fb fb6d 	bl	800028c <__adddf3>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f7fb fff5 	bl	8000ba8 <__aeabi_d2uiz>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	b2de      	uxtb	r6, r3
 8004bc2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004bc4:	f7fb fcae 	bl	8000524 <__aeabi_i2d>
 8004bc8:	a36d      	add	r3, pc, #436	; (adr r3, 8004d80 <statemachine+0x1140>)
 8004bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bce:	f7fb fd13 	bl	80005f8 <__aeabi_dmul>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	4619      	mov	r1, r3
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	4b6a      	ldr	r3, [pc, #424]	; (8004d88 <statemachine+0x1148>)
 8004be0:	f7fb fe34 	bl	800084c <__aeabi_ddiv>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	ec43 2b17 	vmov	d7, r2, r3
 8004bec:	eeb0 0a47 	vmov.f32	s0, s14
 8004bf0:	eef0 0a67 	vmov.f32	s1, s15
 8004bf4:	f014 fc5c 	bl	80194b0 <sin>
 8004bf8:	ec51 0b10 	vmov	r0, r1, d0
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	4b65      	ldr	r3, [pc, #404]	; (8004d98 <statemachine+0x1158>)
 8004c02:	f7fb fcf9 	bl	80005f8 <__aeabi_dmul>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	ec43 2b17 	vmov	d7, r2, r3
 8004c0e:	eeb0 0a47 	vmov.f32	s0, s14
 8004c12:	eef0 0a67 	vmov.f32	s1, s15
 8004c16:	f014 fd4b 	bl	80196b0 <floor>
 8004c1a:	ec51 0b10 	vmov	r0, r1, d0
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	4b5c      	ldr	r3, [pc, #368]	; (8004d94 <statemachine+0x1154>)
 8004c24:	f7fb fb32 	bl	800028c <__adddf3>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	4619      	mov	r1, r3
 8004c30:	f7fb ffba 	bl	8000ba8 <__aeabi_d2uiz>
 8004c34:	4603      	mov	r3, r0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2201      	movs	r2, #1
 8004c3a:	9200      	str	r2, [sp, #0]
 8004c3c:	4632      	mov	r2, r6
 8004c3e:	4629      	mov	r1, r5
 8004c40:	4620      	mov	r0, r4
 8004c42:	f7fe fc1d 	bl	8003480 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 8004c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c48:	3301      	adds	r3, #1
 8004c4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c4e:	2b0c      	cmp	r3, #12
 8004c50:	f77f af06 	ble.w	8004a60 <statemachine+0xe20>
					  }
					  if(BTN_B>=1){
 8004c54:	4b51      	ldr	r3, [pc, #324]	; (8004d9c <statemachine+0x115c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	dd1e      	ble.n	8004c9a <statemachine+0x105a>
					  	hrstate--;
 8004c5c:	4b50      	ldr	r3, [pc, #320]	; (8004da0 <statemachine+0x1160>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	4b4e      	ldr	r3, [pc, #312]	; (8004da0 <statemachine+0x1160>)
 8004c66:	701a      	strb	r2, [r3, #0]
					  	BTN_B=0;
 8004c68:	4b4c      	ldr	r3, [pc, #304]	; (8004d9c <statemachine+0x115c>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
					  }


					  break;
 8004c6e:	e014      	b.n	8004c9a <statemachine+0x105a>

				  }

			  			 					}
			  			 	else{ //if the GPS doesn't have a fix, print a message
			  			 						char *str = (char*)malloc(sizeof(char)*20);
 8004c70:	2014      	movs	r0, #20
 8004c72:	f00f fe5b 	bl	801492c <malloc>
 8004c76:	4603      	mov	r3, r0
 8004c78:	643b      	str	r3, [r7, #64]	; 0x40
			  			 						ssd1306_SetCursor(32, 44);
 8004c7a:	212c      	movs	r1, #44	; 0x2c
 8004c7c:	2020      	movs	r0, #32
 8004c7e:	f7fe fbe7 	bl	8003450 <ssd1306_SetCursor>
			  			 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8004c82:	4a48      	ldr	r2, [pc, #288]	; (8004da4 <statemachine+0x1164>)
 8004c84:	2301      	movs	r3, #1
 8004c86:	ca06      	ldmia	r2, {r1, r2}
 8004c88:	4847      	ldr	r0, [pc, #284]	; (8004da8 <statemachine+0x1168>)
 8004c8a:	f7fe fbbb 	bl	8003404 <ssd1306_WriteString>
			  			 						free(str);
 8004c8e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004c90:	f00f fe54 	bl	801493c <free>
 8004c94:	e002      	b.n	8004c9c <statemachine+0x105c>
					  break;
 8004c96:	bf00      	nop
 8004c98:	e000      	b.n	8004c9c <statemachine+0x105c>
					  break;
 8004c9a:	bf00      	nop
			  			 	}
				  if(BTN_A>=1){
 8004c9c:	4b43      	ldr	r3, [pc, #268]	; (8004dac <statemachine+0x116c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f340 8651 	ble.w	8005948 <statemachine+0x1d08>
			  		state++;
 8004ca6:	4b42      	ldr	r3, [pc, #264]	; (8004db0 <statemachine+0x1170>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	3301      	adds	r3, #1
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	4b40      	ldr	r3, [pc, #256]	; (8004db0 <statemachine+0x1170>)
 8004cb0:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8004cb2:	4b3e      	ldr	r3, [pc, #248]	; (8004dac <statemachine+0x116c>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8004cb8:	4b38      	ldr	r3, [pc, #224]	; (8004d9c <statemachine+0x115c>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 8004cbe:	f000 be43 	b.w	8005948 <statemachine+0x1d08>
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f7fe fa82 	bl	80031cc <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8004cc8:	493a      	ldr	r1, [pc, #232]	; (8004db4 <statemachine+0x1174>)
 8004cca:	483b      	ldr	r0, [pc, #236]	; (8004db8 <statemachine+0x1178>)
 8004ccc:	f7fd fb62 	bl	8002394 <nmea_parse>
			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 8004cd0:	4b39      	ldr	r3, [pc, #228]	; (8004db8 <statemachine+0x1178>)
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d17b      	bne.n	8004dd0 <statemachine+0x1190>
			 			 						char * str = (char*)malloc(sizeof(char)*20);
 8004cd8:	2014      	movs	r0, #20
 8004cda:	f00f fe27 	bl	801492c <malloc>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	647b      	str	r3, [r7, #68]	; 0x44
			 			 						snprintf(str,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8004ce2:	4b35      	ldr	r3, [pc, #212]	; (8004db8 <statemachine+0x1178>)
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fb fc2e 	bl	8000548 <__aeabi_f2d>
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	e9cd 2300 	strd	r2, r3, [sp]
 8004cf4:	4a31      	ldr	r2, [pc, #196]	; (8004dbc <statemachine+0x117c>)
 8004cf6:	210f      	movs	r1, #15
 8004cf8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004cfa:	f011 fd13 	bl	8016724 <sniprintf>
			 			 						ssd1306_SetCursor(32, 32);
 8004cfe:	2120      	movs	r1, #32
 8004d00:	2020      	movs	r0, #32
 8004d02:	f7fe fba5 	bl	8003450 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004d06:	4a27      	ldr	r2, [pc, #156]	; (8004da4 <statemachine+0x1164>)
 8004d08:	2301      	movs	r3, #1
 8004d0a:	ca06      	ldmia	r2, {r1, r2}
 8004d0c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004d0e:	f7fe fb79 	bl	8003404 <ssd1306_WriteString>
			 			 						snprintf(str,20, "v=%0.2fV",vbat);
 8004d12:	4b2b      	ldr	r3, [pc, #172]	; (8004dc0 <statemachine+0x1180>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fb fc16 	bl	8000548 <__aeabi_f2d>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	e9cd 2300 	strd	r2, r3, [sp]
 8004d24:	4a27      	ldr	r2, [pc, #156]	; (8004dc4 <statemachine+0x1184>)
 8004d26:	2114      	movs	r1, #20
 8004d28:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004d2a:	f011 fcfb 	bl	8016724 <sniprintf>
			 			 						ssd1306_SetCursor(32, 42);
 8004d2e:	212a      	movs	r1, #42	; 0x2a
 8004d30:	2020      	movs	r0, #32
 8004d32:	f7fe fb8d 	bl	8003450 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004d36:	4a1b      	ldr	r2, [pc, #108]	; (8004da4 <statemachine+0x1164>)
 8004d38:	2301      	movs	r3, #1
 8004d3a:	ca06      	ldmia	r2, {r1, r2}
 8004d3c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004d3e:	f7fe fb61 	bl	8003404 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 8004d42:	2132      	movs	r1, #50	; 0x32
 8004d44:	2020      	movs	r0, #32
 8004d46:	f7fe fb83 	bl	8003450 <ssd1306_SetCursor>
			 			 						snprintf(str,15,  "T=%0.2fC",temp);
 8004d4a:	4b1f      	ldr	r3, [pc, #124]	; (8004dc8 <statemachine+0x1188>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fb fbfa 	bl	8000548 <__aeabi_f2d>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	e9cd 2300 	strd	r2, r3, [sp]
 8004d5c:	4a1b      	ldr	r2, [pc, #108]	; (8004dcc <statemachine+0x118c>)
 8004d5e:	210f      	movs	r1, #15
 8004d60:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004d62:	f011 fcdf 	bl	8016724 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004d66:	4a0f      	ldr	r2, [pc, #60]	; (8004da4 <statemachine+0x1164>)
 8004d68:	2301      	movs	r3, #1
 8004d6a:	ca06      	ldmia	r2, {r1, r2}
 8004d6c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004d6e:	f7fe fb49 	bl	8003404 <ssd1306_WriteString>
			 			 						free(str);
 8004d72:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004d74:	f00f fde2 	bl	801493c <free>
 8004d78:	e06c      	b.n	8004e54 <statemachine+0x1214>
 8004d7a:	bf00      	nop
 8004d7c:	f3af 8000 	nop.w
 8004d80:	54442d18 	.word	0x54442d18
 8004d84:	400921fb 	.word	0x400921fb
 8004d88:	40180000 	.word	0x40180000
 8004d8c:	40240000 	.word	0x40240000
 8004d90:	40500000 	.word	0x40500000
 8004d94:	40480000 	.word	0x40480000
 8004d98:	40280000 	.word	0x40280000
 8004d9c:	2000073c 	.word	0x2000073c
 8004da0:	200004a9 	.word	0x200004a9
 8004da4:	20000020 	.word	0x20000020
 8004da8:	0801babc 	.word	0x0801babc
 8004dac:	20000738 	.word	0x20000738
 8004db0:	200004a8 	.word	0x200004a8
 8004db4:	200004f4 	.word	0x200004f4
 8004db8:	200006f8 	.word	0x200006f8
 8004dbc:	0801bb94 	.word	0x0801bb94
 8004dc0:	20000770 	.word	0x20000770
 8004dc4:	0801bba0 	.word	0x0801bba0
 8004dc8:	20000768 	.word	0x20000768
 8004dcc:	0801bbac 	.word	0x0801bbac
			 			 					}
			 			 	else{ //if the GPS doesn't have a fix, print a message
			 			 						char *str = (char*)malloc(sizeof(char)*20);
 8004dd0:	2014      	movs	r0, #20
 8004dd2:	f00f fdab 	bl	801492c <malloc>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	64bb      	str	r3, [r7, #72]	; 0x48
			 			 						ssd1306_SetCursor(32, 32);
 8004dda:	2120      	movs	r1, #32
 8004ddc:	2020      	movs	r0, #32
 8004dde:	f7fe fb37 	bl	8003450 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("INFO", Font_6x8, White);
 8004de2:	4a96      	ldr	r2, [pc, #600]	; (800503c <statemachine+0x13fc>)
 8004de4:	2301      	movs	r3, #1
 8004de6:	ca06      	ldmia	r2, {r1, r2}
 8004de8:	4895      	ldr	r0, [pc, #596]	; (8005040 <statemachine+0x1400>)
 8004dea:	f7fe fb0b 	bl	8003404 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 41);
 8004dee:	2129      	movs	r1, #41	; 0x29
 8004df0:	2020      	movs	r0, #32
 8004df2:	f7fe fb2d 	bl	8003450 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "vbat=%0.2fV",vbat);
 8004df6:	4b93      	ldr	r3, [pc, #588]	; (8005044 <statemachine+0x1404>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fb fba4 	bl	8000548 <__aeabi_f2d>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	e9cd 2300 	strd	r2, r3, [sp]
 8004e08:	4a8f      	ldr	r2, [pc, #572]	; (8005048 <statemachine+0x1408>)
 8004e0a:	210f      	movs	r1, #15
 8004e0c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004e0e:	f011 fc89 	bl	8016724 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004e12:	4a8a      	ldr	r2, [pc, #552]	; (800503c <statemachine+0x13fc>)
 8004e14:	2301      	movs	r3, #1
 8004e16:	ca06      	ldmia	r2, {r1, r2}
 8004e18:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004e1a:	f7fe faf3 	bl	8003404 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 8004e1e:	2132      	movs	r1, #50	; 0x32
 8004e20:	2020      	movs	r0, #32
 8004e22:	f7fe fb15 	bl	8003450 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "T=%0.2fC",temp);
 8004e26:	4b89      	ldr	r3, [pc, #548]	; (800504c <statemachine+0x140c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fb fb8c 	bl	8000548 <__aeabi_f2d>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	e9cd 2300 	strd	r2, r3, [sp]
 8004e38:	4a85      	ldr	r2, [pc, #532]	; (8005050 <statemachine+0x1410>)
 8004e3a:	210f      	movs	r1, #15
 8004e3c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004e3e:	f011 fc71 	bl	8016724 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004e42:	4a7e      	ldr	r2, [pc, #504]	; (800503c <statemachine+0x13fc>)
 8004e44:	2301      	movs	r3, #1
 8004e46:	ca06      	ldmia	r2, {r1, r2}
 8004e48:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004e4a:	f7fe fadb 	bl	8003404 <ssd1306_WriteString>
			 			 						free(str);
 8004e4e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004e50:	f00f fd74 	bl	801493c <free>
			 			 					}
			  if(BTN_A>=1){
 8004e54:	4b7f      	ldr	r3, [pc, #508]	; (8005054 <statemachine+0x1414>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f340 8577 	ble.w	800594c <statemachine+0x1d0c>
			  		state++;
 8004e5e:	4b7e      	ldr	r3, [pc, #504]	; (8005058 <statemachine+0x1418>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	3301      	adds	r3, #1
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	4b7c      	ldr	r3, [pc, #496]	; (8005058 <statemachine+0x1418>)
 8004e68:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8004e6a:	4b7a      	ldr	r3, [pc, #488]	; (8005054 <statemachine+0x1414>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8004e70:	4b7a      	ldr	r3, [pc, #488]	; (800505c <statemachine+0x141c>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 8004e76:	f000 bd69 	b.w	800594c <statemachine+0x1d0c>

		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	f7fe f9a6 	bl	80031cc <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 8004e80:	2120      	movs	r1, #32
 8004e82:	2020      	movs	r0, #32
 8004e84:	f7fe fae4 	bl	8003450 <ssd1306_SetCursor>
			  char *str = (char*)malloc(sizeof(char)*20);
 8004e88:	2014      	movs	r0, #20
 8004e8a:	f00f fd4f 	bl	801492c <malloc>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	64fb      	str	r3, [r7, #76]	; 0x4c
			  ssd1306_WriteString("chrono", Font_6x8, White);
 8004e92:	4a6a      	ldr	r2, [pc, #424]	; (800503c <statemachine+0x13fc>)
 8004e94:	2301      	movs	r3, #1
 8004e96:	ca06      	ldmia	r2, {r1, r2}
 8004e98:	4871      	ldr	r0, [pc, #452]	; (8005060 <statemachine+0x1420>)
 8004e9a:	f7fe fab3 	bl	8003404 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 40);
 8004e9e:	2128      	movs	r1, #40	; 0x28
 8004ea0:	2020      	movs	r0, #32
 8004ea2:	f7fe fad5 	bl	8003450 <ssd1306_SetCursor>

			  switch(chronostate){
 8004ea6:	4b6f      	ldr	r3, [pc, #444]	; (8005064 <statemachine+0x1424>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d038      	beq.n	8004f20 <statemachine+0x12e0>
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	dc4f      	bgt.n	8004f52 <statemachine+0x1312>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <statemachine+0x127c>
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d01d      	beq.n	8004ef6 <statemachine+0x12b6>
 8004eba:	e04a      	b.n	8004f52 <statemachine+0x1312>
			  case STATE_RESET:
				  min=0;
 8004ebc:	4b6a      	ldr	r3, [pc, #424]	; (8005068 <statemachine+0x1428>)
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8004ec4:	4b69      	ldr	r3, [pc, #420]	; (800506c <statemachine+0x142c>)
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8004ecc:	4b68      	ldr	r3, [pc, #416]	; (8005070 <statemachine+0x1430>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]
				  	 if(BTN_B>=1){
 8004ed2:	4b62      	ldr	r3, [pc, #392]	; (800505c <statemachine+0x141c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	dd36      	ble.n	8004f48 <statemachine+0x1308>
				  		chronostate++;
 8004eda:	4b62      	ldr	r3, [pc, #392]	; (8005064 <statemachine+0x1424>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	4b60      	ldr	r3, [pc, #384]	; (8005064 <statemachine+0x1424>)
 8004ee4:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8004ee6:	4b5d      	ldr	r3, [pc, #372]	; (800505c <statemachine+0x141c>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8004eec:	4b61      	ldr	r3, [pc, #388]	; (8005074 <statemachine+0x1434>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a61      	ldr	r2, [pc, #388]	; (8005078 <statemachine+0x1438>)
 8004ef2:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8004ef4:	e028      	b.n	8004f48 <statemachine+0x1308>
			  case STATE_RUN:
				  calctime=uwTick-starttime;
 8004ef6:	4b5f      	ldr	r3, [pc, #380]	; (8005074 <statemachine+0x1434>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4b5f      	ldr	r3, [pc, #380]	; (8005078 <statemachine+0x1438>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	4a5b      	ldr	r2, [pc, #364]	; (8005070 <statemachine+0x1430>)
 8004f02:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8004f04:	4b55      	ldr	r3, [pc, #340]	; (800505c <statemachine+0x141c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	dd1f      	ble.n	8004f4c <statemachine+0x130c>
				  		chronostate++;
 8004f0c:	4b55      	ldr	r3, [pc, #340]	; (8005064 <statemachine+0x1424>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	3301      	adds	r3, #1
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	4b53      	ldr	r3, [pc, #332]	; (8005064 <statemachine+0x1424>)
 8004f16:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8004f18:	4b50      	ldr	r3, [pc, #320]	; (800505c <statemachine+0x141c>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8004f1e:	e015      	b.n	8004f4c <statemachine+0x130c>
			  case STATE_PAUSE:
				  if(BTN_B>=1){
 8004f20:	4b4e      	ldr	r3, [pc, #312]	; (800505c <statemachine+0x141c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	dd13      	ble.n	8004f50 <statemachine+0x1310>
				  			chronostate--;
 8004f28:	4b4e      	ldr	r3, [pc, #312]	; (8005064 <statemachine+0x1424>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	4b4c      	ldr	r3, [pc, #304]	; (8005064 <statemachine+0x1424>)
 8004f32:	701a      	strb	r2, [r3, #0]
				  			chronostate--;
 8004f34:	4b4b      	ldr	r3, [pc, #300]	; (8005064 <statemachine+0x1424>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	4b49      	ldr	r3, [pc, #292]	; (8005064 <statemachine+0x1424>)
 8004f3e:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8004f40:	4b46      	ldr	r3, [pc, #280]	; (800505c <statemachine+0x141c>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
			 }

				  break;
 8004f46:	e003      	b.n	8004f50 <statemachine+0x1310>
				  break;
 8004f48:	bf00      	nop
 8004f4a:	e002      	b.n	8004f52 <statemachine+0x1312>
				  break;
 8004f4c:	bf00      	nop
 8004f4e:	e000      	b.n	8004f52 <statemachine+0x1312>
				  break;
 8004f50:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8004f52:	4b47      	ldr	r3, [pc, #284]	; (8005070 <statemachine+0x1430>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800507c <statemachine+0x143c>
 8004f62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004f66:	ee16 0a90 	vmov	r0, s13
 8004f6a:	f7fb faed 	bl	8000548 <__aeabi_f2d>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	ec43 2b10 	vmov	d0, r2, r3
 8004f76:	f014 fb9b 	bl	80196b0 <floor>
 8004f7a:	ec53 2b10 	vmov	r2, r3, d0
 8004f7e:	4610      	mov	r0, r2
 8004f80:	4619      	mov	r1, r3
 8004f82:	f7fb fe31 	bl	8000be8 <__aeabi_d2f>
 8004f86:	4603      	mov	r3, r0
 8004f88:	4a37      	ldr	r2, [pc, #220]	; (8005068 <statemachine+0x1428>)
 8004f8a:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8004f8c:	4b38      	ldr	r3, [pc, #224]	; (8005070 <statemachine+0x1430>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	ee07 3a90 	vmov	s15, r3
 8004f94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f98:	4b33      	ldr	r3, [pc, #204]	; (8005068 <statemachine+0x1428>)
 8004f9a:	edd3 7a00 	vldr	s15, [r3]
 8004f9e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800507c <statemachine+0x143c>
 8004fa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004fa6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004faa:	eddf 6a35 	vldr	s13, [pc, #212]	; 8005080 <statemachine+0x1440>
 8004fae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fb2:	4b2e      	ldr	r3, [pc, #184]	; (800506c <statemachine+0x142c>)
 8004fb4:	edc3 7a00 	vstr	s15, [r3]
			  snprintf(str,15, "%0.0fmin",min);
 8004fb8:	4b2b      	ldr	r3, [pc, #172]	; (8005068 <statemachine+0x1428>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fb fac3 	bl	8000548 <__aeabi_f2d>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	e9cd 2300 	strd	r2, r3, [sp]
 8004fca:	4a2e      	ldr	r2, [pc, #184]	; (8005084 <statemachine+0x1444>)
 8004fcc:	210f      	movs	r1, #15
 8004fce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004fd0:	f011 fba8 	bl	8016724 <sniprintf>
			  ssd1306_WriteString(str, Font_7x10, White);
 8004fd4:	4a2c      	ldr	r2, [pc, #176]	; (8005088 <statemachine+0x1448>)
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	ca06      	ldmia	r2, {r1, r2}
 8004fda:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004fdc:	f7fe fa12 	bl	8003404 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8004fe0:	2132      	movs	r1, #50	; 0x32
 8004fe2:	2020      	movs	r0, #32
 8004fe4:	f7fe fa34 	bl	8003450 <ssd1306_SetCursor>
			  snprintf(str,15, "%0.3fsec",seconde);
 8004fe8:	4b20      	ldr	r3, [pc, #128]	; (800506c <statemachine+0x142c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fb faab 	bl	8000548 <__aeabi_f2d>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	e9cd 2300 	strd	r2, r3, [sp]
 8004ffa:	4a24      	ldr	r2, [pc, #144]	; (800508c <statemachine+0x144c>)
 8004ffc:	210f      	movs	r1, #15
 8004ffe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005000:	f011 fb90 	bl	8016724 <sniprintf>
			  ssd1306_WriteString(str, Font_6x8, White);
 8005004:	4a0d      	ldr	r2, [pc, #52]	; (800503c <statemachine+0x13fc>)
 8005006:	2301      	movs	r3, #1
 8005008:	ca06      	ldmia	r2, {r1, r2}
 800500a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800500c:	f7fe f9fa 	bl	8003404 <ssd1306_WriteString>
			  free(str);
 8005010:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005012:	f00f fc93 	bl	801493c <free>


			  if(BTN_A>=1){
 8005016:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <statemachine+0x1414>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	f340 8498 	ble.w	8005950 <statemachine+0x1d10>
			 	state++;
 8005020:	4b0d      	ldr	r3, [pc, #52]	; (8005058 <statemachine+0x1418>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	3301      	adds	r3, #1
 8005026:	b2da      	uxtb	r2, r3
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <statemachine+0x1418>)
 800502a:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 800502c:	4b09      	ldr	r3, [pc, #36]	; (8005054 <statemachine+0x1414>)
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8005032:	4b0a      	ldr	r3, [pc, #40]	; (800505c <statemachine+0x141c>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]


	}
			  break;
 8005038:	f000 bc8a 	b.w	8005950 <statemachine+0x1d10>
 800503c:	20000020 	.word	0x20000020
 8005040:	0801bbb8 	.word	0x0801bbb8
 8005044:	20000770 	.word	0x20000770
 8005048:	0801bbc0 	.word	0x0801bbc0
 800504c:	20000768 	.word	0x20000768
 8005050:	0801bbac 	.word	0x0801bbac
 8005054:	20000738 	.word	0x20000738
 8005058:	200004a8 	.word	0x200004a8
 800505c:	2000073c 	.word	0x2000073c
 8005060:	0801bbcc 	.word	0x0801bbcc
 8005064:	200004ac 	.word	0x200004ac
 8005068:	20000a28 	.word	0x20000a28
 800506c:	20000a24 	.word	0x20000a24
 8005070:	20000a30 	.word	0x20000a30
 8005074:	200010fc 	.word	0x200010fc
 8005078:	20000a2c 	.word	0x20000a2c
 800507c:	476a6000 	.word	0x476a6000
 8005080:	447a0000 	.word	0x447a0000
 8005084:	0801bbd4 	.word	0x0801bbd4
 8005088:	20000028 	.word	0x20000028
 800508c:	0801bbe0 	.word	0x0801bbe0

			  case STATE_BARO:

				  if(BTN_B>=1){
 8005090:	4b9b      	ldr	r3, [pc, #620]	; (8005300 <statemachine+0x16c0>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	dd0b      	ble.n	80050b0 <statemachine+0x1470>
				  if(baroenableinit==0){
 8005098:	4b9a      	ldr	r3, [pc, #616]	; (8005304 <statemachine+0x16c4>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d104      	bne.n	80050aa <statemachine+0x146a>
					  PADS_init();
 80050a0:	f7fc f8de 	bl	8001260 <PADS_init>
					  baroenableinit=1;
 80050a4:	4b97      	ldr	r3, [pc, #604]	; (8005304 <statemachine+0x16c4>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	601a      	str	r2, [r3, #0]
				  }
				  BTN_B=0;
 80050aa:	4b95      	ldr	r3, [pc, #596]	; (8005300 <statemachine+0x16c0>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]
				  }
				  ssd1306_Fill(Black);
 80050b0:	2000      	movs	r0, #0
 80050b2:	f7fe f88b 	bl	80031cc <ssd1306_Fill>
				  ssd1306_SetCursor(32,32);
 80050b6:	2120      	movs	r1, #32
 80050b8:	2020      	movs	r0, #32
 80050ba:	f7fe f9c9 	bl	8003450 <ssd1306_SetCursor>
				  ssd1306_WriteString("baro",Font_6x8,White);
 80050be:	4a92      	ldr	r2, [pc, #584]	; (8005308 <statemachine+0x16c8>)
 80050c0:	2301      	movs	r3, #1
 80050c2:	ca06      	ldmia	r2, {r1, r2}
 80050c4:	4891      	ldr	r0, [pc, #580]	; (800530c <statemachine+0x16cc>)
 80050c6:	f7fe f99d 	bl	8003404 <ssd1306_WriteString>
				  PADS_getPressure_int(&pads, &baropress);
 80050ca:	4991      	ldr	r1, [pc, #580]	; (8005310 <statemachine+0x16d0>)
 80050cc:	4891      	ldr	r0, [pc, #580]	; (8005314 <statemachine+0x16d4>)
 80050ce:	f7fc f887 	bl	80011e0 <PADS_getPressure_int>
				  PADS_getTemperature_int(&pads,&barotemp);
 80050d2:	4991      	ldr	r1, [pc, #580]	; (8005318 <statemachine+0x16d8>)
 80050d4:	488f      	ldr	r0, [pc, #572]	; (8005314 <statemachine+0x16d4>)
 80050d6:	f7fc f8a2 	bl	800121e <PADS_getTemperature_int>
				  ssd1306_SetCursor(32,40);
 80050da:	2128      	movs	r1, #40	; 0x28
 80050dc:	2020      	movs	r0, #32
 80050de:	f7fe f9b7 	bl	8003450 <ssd1306_SetCursor>
				  snprintf((uint8_t *)bufferscreen,50,"P=%d",baropress);
 80050e2:	4b8b      	ldr	r3, [pc, #556]	; (8005310 <statemachine+0x16d0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a8d      	ldr	r2, [pc, #564]	; (800531c <statemachine+0x16dc>)
 80050e8:	2132      	movs	r1, #50	; 0x32
 80050ea:	488d      	ldr	r0, [pc, #564]	; (8005320 <statemachine+0x16e0>)
 80050ec:	f011 fb1a 	bl	8016724 <sniprintf>
				  ssd1306_WriteString((uint8_t *)bufferscreen,Font_6x8,White);
 80050f0:	4a85      	ldr	r2, [pc, #532]	; (8005308 <statemachine+0x16c8>)
 80050f2:	2301      	movs	r3, #1
 80050f4:	ca06      	ldmia	r2, {r1, r2}
 80050f6:	488a      	ldr	r0, [pc, #552]	; (8005320 <statemachine+0x16e0>)
 80050f8:	f7fe f984 	bl	8003404 <ssd1306_WriteString>
				  ssd1306_SetCursor(32,48);
 80050fc:	2130      	movs	r1, #48	; 0x30
 80050fe:	2020      	movs	r0, #32
 8005100:	f7fe f9a6 	bl	8003450 <ssd1306_SetCursor>
				  snprintf((uint8_t *)bufferscreen,50,"T=%d",barotemp);
 8005104:	4b84      	ldr	r3, [pc, #528]	; (8005318 <statemachine+0x16d8>)
 8005106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800510a:	4a86      	ldr	r2, [pc, #536]	; (8005324 <statemachine+0x16e4>)
 800510c:	2132      	movs	r1, #50	; 0x32
 800510e:	4884      	ldr	r0, [pc, #528]	; (8005320 <statemachine+0x16e0>)
 8005110:	f011 fb08 	bl	8016724 <sniprintf>
				  ssd1306_WriteString((uint8_t *)bufferscreen,Font_6x8,White);
 8005114:	4a7c      	ldr	r2, [pc, #496]	; (8005308 <statemachine+0x16c8>)
 8005116:	2301      	movs	r3, #1
 8005118:	ca06      	ldmia	r2, {r1, r2}
 800511a:	4881      	ldr	r0, [pc, #516]	; (8005320 <statemachine+0x16e0>)
 800511c:	f7fe f972 	bl	8003404 <ssd1306_WriteString>
				  altibaro=altitudecalc(0);
 8005120:	2000      	movs	r0, #0
 8005122:	f7fc f8d5 	bl	80012d0 <altitudecalc>
 8005126:	ee07 0a90 	vmov	s15, r0
 800512a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800512e:	4b7e      	ldr	r3, [pc, #504]	; (8005328 <statemachine+0x16e8>)
 8005130:	edc3 7a00 	vstr	s15, [r3]
				  ssd1306_SetCursor(32,56);
 8005134:	2138      	movs	r1, #56	; 0x38
 8005136:	2020      	movs	r0, #32
 8005138:	f7fe f98a 	bl	8003450 <ssd1306_SetCursor>
				  snprintf((uint8_t *)bufferscreen,50,"h=%0.1fm",(float) altibaro);
 800513c:	4b7a      	ldr	r3, [pc, #488]	; (8005328 <statemachine+0x16e8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f7fb fa01 	bl	8000548 <__aeabi_f2d>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	e9cd 2300 	strd	r2, r3, [sp]
 800514e:	4a77      	ldr	r2, [pc, #476]	; (800532c <statemachine+0x16ec>)
 8005150:	2132      	movs	r1, #50	; 0x32
 8005152:	4873      	ldr	r0, [pc, #460]	; (8005320 <statemachine+0x16e0>)
 8005154:	f011 fae6 	bl	8016724 <sniprintf>
				  ssd1306_WriteString((uint8_t *)bufferscreen,Font_6x8,White);
 8005158:	4a6b      	ldr	r2, [pc, #428]	; (8005308 <statemachine+0x16c8>)
 800515a:	2301      	movs	r3, #1
 800515c:	ca06      	ldmia	r2, {r1, r2}
 800515e:	4870      	ldr	r0, [pc, #448]	; (8005320 <statemachine+0x16e0>)
 8005160:	f7fe f950 	bl	8003404 <ssd1306_WriteString>


				  if(BTN_A>=1){
 8005164:	4b72      	ldr	r3, [pc, #456]	; (8005330 <statemachine+0x16f0>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	f340 83f3 	ble.w	8005954 <statemachine+0x1d14>
				  			 	state++;
 800516e:	4b71      	ldr	r3, [pc, #452]	; (8005334 <statemachine+0x16f4>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	3301      	adds	r3, #1
 8005174:	b2da      	uxtb	r2, r3
 8005176:	4b6f      	ldr	r3, [pc, #444]	; (8005334 <statemachine+0x16f4>)
 8005178:	701a      	strb	r2, [r3, #0]
				  			 	BTN_A=0;
 800517a:	4b6d      	ldr	r3, [pc, #436]	; (8005330 <statemachine+0x16f0>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]
				  			 	BTN_B=0;
 8005180:	4b5f      	ldr	r3, [pc, #380]	; (8005300 <statemachine+0x16c0>)
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]


				  	}
				  break;
 8005186:	e3e5      	b.n	8005954 <statemachine+0x1d14>

			  case STATE_BALISE:
				  ssd1306_Fill(Black);
 8005188:	2000      	movs	r0, #0
 800518a:	f7fe f81f 	bl	80031cc <ssd1306_Fill>
				  switch(balisestate){
 800518e:	4b6a      	ldr	r3, [pc, #424]	; (8005338 <statemachine+0x16f8>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b02      	cmp	r3, #2
 8005194:	f000 8162 	beq.w	800545c <statemachine+0x181c>
 8005198:	2b02      	cmp	r3, #2
 800519a:	f300 83dd 	bgt.w	8005958 <statemachine+0x1d18>
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <statemachine+0x1568>
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d036      	beq.n	8005214 <statemachine+0x15d4>


				  }


				  break;
 80051a6:	e3d7      	b.n	8005958 <statemachine+0x1d18>
					  ssd1306_SetCursor(32,32);
 80051a8:	2120      	movs	r1, #32
 80051aa:	2020      	movs	r0, #32
 80051ac:	f7fe f950 	bl	8003450 <ssd1306_SetCursor>
					  ssd1306_WriteString("balise",Font_6x8,White);
 80051b0:	4a55      	ldr	r2, [pc, #340]	; (8005308 <statemachine+0x16c8>)
 80051b2:	2301      	movs	r3, #1
 80051b4:	ca06      	ldmia	r2, {r1, r2}
 80051b6:	4861      	ldr	r0, [pc, #388]	; (800533c <statemachine+0x16fc>)
 80051b8:	f7fe f924 	bl	8003404 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,40);
 80051bc:	2128      	movs	r1, #40	; 0x28
 80051be:	2020      	movs	r0, #32
 80051c0:	f7fe f946 	bl	8003450 <ssd1306_SetCursor>
					  ssd1306_WriteString("do nothing",Font_6x8,White);
 80051c4:	4a50      	ldr	r2, [pc, #320]	; (8005308 <statemachine+0x16c8>)
 80051c6:	2301      	movs	r3, #1
 80051c8:	ca06      	ldmia	r2, {r1, r2}
 80051ca:	485d      	ldr	r0, [pc, #372]	; (8005340 <statemachine+0x1700>)
 80051cc:	f7fe f91a 	bl	8003404 <ssd1306_WriteString>
					  if(BTN_B>=1){
 80051d0:	4b4b      	ldr	r3, [pc, #300]	; (8005300 <statemachine+0x16c0>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	dd0b      	ble.n	80051f0 <statemachine+0x15b0>
						  balisestate++;
 80051d8:	4b57      	ldr	r3, [pc, #348]	; (8005338 <statemachine+0x16f8>)
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	3301      	adds	r3, #1
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	4b55      	ldr	r3, [pc, #340]	; (8005338 <statemachine+0x16f8>)
 80051e2:	701a      	strb	r2, [r3, #0]
						  BTN_B=0;
 80051e4:	4b46      	ldr	r3, [pc, #280]	; (8005300 <statemachine+0x16c0>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]
						  BTN_A=0;
 80051ea:	4b51      	ldr	r3, [pc, #324]	; (8005330 <statemachine+0x16f0>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
					  if(BTN_A>=1){
 80051f0:	4b4f      	ldr	r3, [pc, #316]	; (8005330 <statemachine+0x16f0>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f340 816b 	ble.w	80054d0 <statemachine+0x1890>
					  				  			 	state++;
 80051fa:	4b4e      	ldr	r3, [pc, #312]	; (8005334 <statemachine+0x16f4>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	3301      	adds	r3, #1
 8005200:	b2da      	uxtb	r2, r3
 8005202:	4b4c      	ldr	r3, [pc, #304]	; (8005334 <statemachine+0x16f4>)
 8005204:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 8005206:	4b4a      	ldr	r3, [pc, #296]	; (8005330 <statemachine+0x16f0>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 800520c:	4b3c      	ldr	r3, [pc, #240]	; (8005300 <statemachine+0x16c0>)
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]
					  break;
 8005212:	e15d      	b.n	80054d0 <statemachine+0x1890>
					  oldlat=myData.latitude;
 8005214:	4b4b      	ldr	r3, [pc, #300]	; (8005344 <statemachine+0x1704>)
 8005216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521a:	494b      	ldr	r1, [pc, #300]	; (8005348 <statemachine+0x1708>)
 800521c:	e9c1 2300 	strd	r2, r3, [r1]
					  oldlong=myData.longitude;
 8005220:	4b48      	ldr	r3, [pc, #288]	; (8005344 <statemachine+0x1704>)
 8005222:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005226:	4949      	ldr	r1, [pc, #292]	; (800534c <statemachine+0x170c>)
 8005228:	e9c1 2300 	strd	r2, r3, [r1]
					  nmea_parse(&myData, DataBuffer);
 800522c:	4948      	ldr	r1, [pc, #288]	; (8005350 <statemachine+0x1710>)
 800522e:	4845      	ldr	r0, [pc, #276]	; (8005344 <statemachine+0x1704>)
 8005230:	f7fd f8b0 	bl	8002394 <nmea_parse>
					  distanceparcouru=distanceparcouru+distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 8005234:	4b44      	ldr	r3, [pc, #272]	; (8005348 <statemachine+0x1708>)
 8005236:	ed93 7b00 	vldr	d7, [r3]
 800523a:	4b42      	ldr	r3, [pc, #264]	; (8005344 <statemachine+0x1704>)
 800523c:	ed93 6b00 	vldr	d6, [r3]
 8005240:	4b42      	ldr	r3, [pc, #264]	; (800534c <statemachine+0x170c>)
 8005242:	ed93 5b00 	vldr	d5, [r3]
 8005246:	4b3f      	ldr	r3, [pc, #252]	; (8005344 <statemachine+0x1704>)
 8005248:	ed93 4b04 	vldr	d4, [r3, #16]
 800524c:	eeb0 3a44 	vmov.f32	s6, s8
 8005250:	eef0 3a64 	vmov.f32	s7, s9
 8005254:	eeb0 2a45 	vmov.f32	s4, s10
 8005258:	eef0 2a65 	vmov.f32	s5, s11
 800525c:	eeb0 1a46 	vmov.f32	s2, s12
 8005260:	eef0 1a66 	vmov.f32	s3, s13
 8005264:	eeb0 0a47 	vmov.f32	s0, s14
 8005268:	eef0 0a67 	vmov.f32	s1, s15
 800526c:	f7fd f944 	bl	80024f8 <distancecalc>
 8005270:	ec51 0b10 	vmov	r0, r1, d0
 8005274:	4b37      	ldr	r3, [pc, #220]	; (8005354 <statemachine+0x1714>)
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	f7fb f807 	bl	800028c <__adddf3>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4934      	ldr	r1, [pc, #208]	; (8005354 <statemachine+0x1714>)
 8005284:	e9c1 2300 	strd	r2, r3, [r1]
					  if(pagenumber+1<MAX_WRITE_PAGE){
 8005288:	4b33      	ldr	r3, [pc, #204]	; (8005358 <statemachine+0x1718>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f246 32fd 	movw	r2, #25597	; 0x63fd
 8005290:	4293      	cmp	r3, r2
 8005292:	f300 80df 	bgt.w	8005454 <statemachine+0x1814>
					  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8005296:	4b31      	ldr	r3, [pc, #196]	; (800535c <statemachine+0x171c>)
 8005298:	edd3 7a00 	vldr	s15, [r3]
 800529c:	4b30      	ldr	r3, [pc, #192]	; (8005360 <statemachine+0x1720>)
 800529e:	ed93 7a00 	vldr	s14, [r3]
 80052a2:	4b28      	ldr	r3, [pc, #160]	; (8005344 <statemachine+0x1704>)
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	4a27      	ldr	r2, [pc, #156]	; (8005344 <statemachine+0x1704>)
 80052a8:	edd2 6a08 	vldr	s13, [r2, #32]
 80052ac:	eeb0 1a66 	vmov.f32	s2, s13
 80052b0:	461a      	mov	r2, r3
 80052b2:	4924      	ldr	r1, [pc, #144]	; (8005344 <statemachine+0x1704>)
 80052b4:	eef0 0a47 	vmov.f32	s1, s14
 80052b8:	eeb0 0a67 	vmov.f32	s0, s15
 80052bc:	4829      	ldr	r0, [pc, #164]	; (8005364 <statemachine+0x1724>)
 80052be:	f7fd fd43 	bl	8002d48 <csvframe>
 80052c2:	4603      	mov	r3, r0
 80052c4:	4a28      	ldr	r2, [pc, #160]	; (8005368 <statemachine+0x1728>)
 80052c6:	6013      	str	r3, [r2, #0]
					  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 80052c8:	4b27      	ldr	r3, [pc, #156]	; (8005368 <statemachine+0x1728>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4619      	mov	r1, r3
 80052ce:	4825      	ldr	r0, [pc, #148]	; (8005364 <statemachine+0x1724>)
 80052d0:	f7fd fe4c 	bl	8002f6c <writebuffertoflash>
					  if(doubledonnee==0){
 80052d4:	4b25      	ldr	r3, [pc, #148]	; (800536c <statemachine+0x172c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d14d      	bne.n	8005378 <statemachine+0x1738>
						  ssd1306_SetCursor(32,32);
 80052dc:	2120      	movs	r1, #32
 80052de:	2020      	movs	r0, #32
 80052e0:	f7fe f8b6 	bl	8003450 <ssd1306_SetCursor>
						  snprintf((uint8_t *)bufferscreen,50,"p=%d",pagenumber);
 80052e4:	4b1c      	ldr	r3, [pc, #112]	; (8005358 <statemachine+0x1718>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a21      	ldr	r2, [pc, #132]	; (8005370 <statemachine+0x1730>)
 80052ea:	2132      	movs	r1, #50	; 0x32
 80052ec:	480c      	ldr	r0, [pc, #48]	; (8005320 <statemachine+0x16e0>)
 80052ee:	f011 fa19 	bl	8016724 <sniprintf>
						  ssd1306_WriteString((uint8_t*)bufferscreen,Font_7x10,White);
 80052f2:	4a20      	ldr	r2, [pc, #128]	; (8005374 <statemachine+0x1734>)
 80052f4:	2301      	movs	r3, #1
 80052f6:	ca06      	ldmia	r2, {r1, r2}
 80052f8:	4809      	ldr	r0, [pc, #36]	; (8005320 <statemachine+0x16e0>)
 80052fa:	f7fe f883 	bl	8003404 <ssd1306_WriteString>
 80052fe:	e04f      	b.n	80053a0 <statemachine+0x1760>
 8005300:	2000073c 	.word	0x2000073c
 8005304:	20000a70 	.word	0x20000a70
 8005308:	20000020 	.word	0x20000020
 800530c:	0801bbec 	.word	0x0801bbec
 8005310:	20000a68 	.word	0x20000a68
 8005314:	2000033c 	.word	0x2000033c
 8005318:	20000a6c 	.word	0x20000a6c
 800531c:	0801bbf4 	.word	0x0801bbf4
 8005320:	200009ac 	.word	0x200009ac
 8005324:	0801bbfc 	.word	0x0801bbfc
 8005328:	20000a74 	.word	0x20000a74
 800532c:	0801bc04 	.word	0x0801bc04
 8005330:	20000738 	.word	0x20000738
 8005334:	200004a8 	.word	0x200004a8
 8005338:	200004ae 	.word	0x200004ae
 800533c:	0801bc10 	.word	0x0801bc10
 8005340:	0801bc18 	.word	0x0801bc18
 8005344:	200006f8 	.word	0x200006f8
 8005348:	20000a58 	.word	0x20000a58
 800534c:	20000a60 	.word	0x20000a60
 8005350:	200004f4 	.word	0x200004f4
 8005354:	20000a50 	.word	0x20000a50
 8005358:	2000098c 	.word	0x2000098c
 800535c:	20000768 	.word	0x20000768
 8005360:	20000770 	.word	0x20000770
 8005364:	20000788 	.word	0x20000788
 8005368:	20000a34 	.word	0x20000a34
 800536c:	20000a48 	.word	0x20000a48
 8005370:	0801bc24 	.word	0x0801bc24
 8005374:	20000028 	.word	0x20000028
						  ssd1306_SetCursor(32,32);
 8005378:	2120      	movs	r1, #32
 800537a:	2020      	movs	r0, #32
 800537c:	f7fe f868 	bl	8003450 <ssd1306_SetCursor>
						  snprintf((uint8_t *)bufferscreen,50,"d=%0.1lfm",distanceparcouru);
 8005380:	4b8d      	ldr	r3, [pc, #564]	; (80055b8 <statemachine+0x1978>)
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	e9cd 2300 	strd	r2, r3, [sp]
 800538a:	4a8c      	ldr	r2, [pc, #560]	; (80055bc <statemachine+0x197c>)
 800538c:	2132      	movs	r1, #50	; 0x32
 800538e:	488c      	ldr	r0, [pc, #560]	; (80055c0 <statemachine+0x1980>)
 8005390:	f011 f9c8 	bl	8016724 <sniprintf>
						  ssd1306_WriteString((uint8_t*)bufferscreen,Font_7x10,White);
 8005394:	4a8b      	ldr	r2, [pc, #556]	; (80055c4 <statemachine+0x1984>)
 8005396:	2301      	movs	r3, #1
 8005398:	ca06      	ldmia	r2, {r1, r2}
 800539a:	4889      	ldr	r0, [pc, #548]	; (80055c0 <statemachine+0x1980>)
 800539c:	f7fe f832 	bl	8003404 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,42);
 80053a0:	212a      	movs	r1, #42	; 0x2a
 80053a2:	2020      	movs	r0, #32
 80053a4:	f7fe f854 	bl	8003450 <ssd1306_SetCursor>
					  snprintf((uint8_t *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 80053a8:	4b87      	ldr	r3, [pc, #540]	; (80055c8 <statemachine+0x1988>)
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	4a87      	ldr	r2, [pc, #540]	; (80055cc <statemachine+0x198c>)
 80053ae:	2132      	movs	r1, #50	; 0x32
 80053b0:	4883      	ldr	r0, [pc, #524]	; (80055c0 <statemachine+0x1980>)
 80053b2:	f011 f9b7 	bl	8016724 <sniprintf>
					  ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 80053b6:	4a86      	ldr	r2, [pc, #536]	; (80055d0 <statemachine+0x1990>)
 80053b8:	2301      	movs	r3, #1
 80053ba:	ca06      	ldmia	r2, {r1, r2}
 80053bc:	4880      	ldr	r0, [pc, #512]	; (80055c0 <statemachine+0x1980>)
 80053be:	f7fe f821 	bl	8003404 <ssd1306_WriteString>
					  batterygauge(vbat,34, 50,1);
 80053c2:	4b84      	ldr	r3, [pc, #528]	; (80055d4 <statemachine+0x1994>)
 80053c4:	edd3 7a00 	vldr	s15, [r3]
 80053c8:	2201      	movs	r2, #1
 80053ca:	2132      	movs	r1, #50	; 0x32
 80053cc:	2022      	movs	r0, #34	; 0x22
 80053ce:	eeb0 0a67 	vmov.f32	s0, s15
 80053d2:	f7fe fa59 	bl	8003888 <batterygauge>
					  ssd1306_SetCursor(60,50);
 80053d6:	2132      	movs	r1, #50	; 0x32
 80053d8:	203c      	movs	r0, #60	; 0x3c
 80053da:	f7fe f839 	bl	8003450 <ssd1306_SetCursor>
					  snprintf((uint8_t *)bufferscreen,50, "%0.2fV",vbat);
 80053de:	4b7d      	ldr	r3, [pc, #500]	; (80055d4 <statemachine+0x1994>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fb f8b0 	bl	8000548 <__aeabi_f2d>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	e9cd 2300 	strd	r2, r3, [sp]
 80053f0:	4a79      	ldr	r2, [pc, #484]	; (80055d8 <statemachine+0x1998>)
 80053f2:	2132      	movs	r1, #50	; 0x32
 80053f4:	4872      	ldr	r0, [pc, #456]	; (80055c0 <statemachine+0x1980>)
 80053f6:	f011 f995 	bl	8016724 <sniprintf>
					  ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 80053fa:	4a75      	ldr	r2, [pc, #468]	; (80055d0 <statemachine+0x1990>)
 80053fc:	2301      	movs	r3, #1
 80053fe:	ca06      	ldmia	r2, {r1, r2}
 8005400:	486f      	ldr	r0, [pc, #444]	; (80055c0 <statemachine+0x1980>)
 8005402:	f7fd ffff 	bl	8003404 <ssd1306_WriteString>
					  if(cptdoubledonnee==3){
 8005406:	4b75      	ldr	r3, [pc, #468]	; (80055dc <statemachine+0x199c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b03      	cmp	r3, #3
 800540c:	d108      	bne.n	8005420 <statemachine+0x17e0>
						  doubledonnee=1-doubledonnee;
 800540e:	4b74      	ldr	r3, [pc, #464]	; (80055e0 <statemachine+0x19a0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f1c3 0301 	rsb	r3, r3, #1
 8005416:	4a72      	ldr	r2, [pc, #456]	; (80055e0 <statemachine+0x19a0>)
 8005418:	6013      	str	r3, [r2, #0]
						  cptdoubledonnee=0;
 800541a:	4b70      	ldr	r3, [pc, #448]	; (80055dc <statemachine+0x199c>)
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
					  cptdoubledonnee+=1;
 8005420:	4b6e      	ldr	r3, [pc, #440]	; (80055dc <statemachine+0x199c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3301      	adds	r3, #1
 8005426:	4a6d      	ldr	r2, [pc, #436]	; (80055dc <statemachine+0x199c>)
 8005428:	6013      	str	r3, [r2, #0]
					  HAL_Delay(1000);
 800542a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800542e:	f000 feb7 	bl	80061a0 <HAL_Delay>
					  if(BTN_B>=1){
 8005432:	4b6c      	ldr	r3, [pc, #432]	; (80055e4 <statemachine+0x19a4>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	dd4c      	ble.n	80054d4 <statemachine+0x1894>
					  						  balisestate--;
 800543a:	4b6b      	ldr	r3, [pc, #428]	; (80055e8 <statemachine+0x19a8>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	3b01      	subs	r3, #1
 8005440:	b2da      	uxtb	r2, r3
 8005442:	4b69      	ldr	r3, [pc, #420]	; (80055e8 <statemachine+0x19a8>)
 8005444:	701a      	strb	r2, [r3, #0]
					  						  BTN_B=0;
 8005446:	4b67      	ldr	r3, [pc, #412]	; (80055e4 <statemachine+0x19a4>)
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]
					  						  BTN_A=0;
 800544c:	4b67      	ldr	r3, [pc, #412]	; (80055ec <statemachine+0x19ac>)
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
					  break;
 8005452:	e03f      	b.n	80054d4 <statemachine+0x1894>
					 						  balisestate=2;
 8005454:	4b64      	ldr	r3, [pc, #400]	; (80055e8 <statemachine+0x19a8>)
 8005456:	2202      	movs	r2, #2
 8005458:	701a      	strb	r2, [r3, #0]
					  break;
 800545a:	e03b      	b.n	80054d4 <statemachine+0x1894>
					  ssd1306_SetCursor(32,32);
 800545c:	2120      	movs	r1, #32
 800545e:	2020      	movs	r0, #32
 8005460:	f7fd fff6 	bl	8003450 <ssd1306_SetCursor>
					  ssd1306_WriteString("fin de",Font_6x8,White);
 8005464:	4a5a      	ldr	r2, [pc, #360]	; (80055d0 <statemachine+0x1990>)
 8005466:	2301      	movs	r3, #1
 8005468:	ca06      	ldmia	r2, {r1, r2}
 800546a:	4861      	ldr	r0, [pc, #388]	; (80055f0 <statemachine+0x19b0>)
 800546c:	f7fd ffca 	bl	8003404 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,40);
 8005470:	2128      	movs	r1, #40	; 0x28
 8005472:	2020      	movs	r0, #32
 8005474:	f7fd ffec 	bl	8003450 <ssd1306_SetCursor>
					  ssd1306_WriteString("memoire",Font_6x8,White);
 8005478:	4a55      	ldr	r2, [pc, #340]	; (80055d0 <statemachine+0x1990>)
 800547a:	2301      	movs	r3, #1
 800547c:	ca06      	ldmia	r2, {r1, r2}
 800547e:	485d      	ldr	r0, [pc, #372]	; (80055f4 <statemachine+0x19b4>)
 8005480:	f7fd ffc0 	bl	8003404 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,48);
 8005484:	2130      	movs	r1, #48	; 0x30
 8005486:	2020      	movs	r0, #32
 8005488:	f7fd ffe2 	bl	8003450 <ssd1306_SetCursor>
					  snprintf((uint8_t *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 800548c:	4b5a      	ldr	r3, [pc, #360]	; (80055f8 <statemachine+0x19b8>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	4b5a      	ldr	r3, [pc, #360]	; (80055fc <statemachine+0x19bc>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	4613      	mov	r3, r2
 8005498:	4a59      	ldr	r2, [pc, #356]	; (8005600 <statemachine+0x19c0>)
 800549a:	2132      	movs	r1, #50	; 0x32
 800549c:	4848      	ldr	r0, [pc, #288]	; (80055c0 <statemachine+0x1980>)
 800549e:	f011 f941 	bl	8016724 <sniprintf>
					  ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 80054a2:	4a4b      	ldr	r2, [pc, #300]	; (80055d0 <statemachine+0x1990>)
 80054a4:	2301      	movs	r3, #1
 80054a6:	ca06      	ldmia	r2, {r1, r2}
 80054a8:	4845      	ldr	r0, [pc, #276]	; (80055c0 <statemachine+0x1980>)
 80054aa:	f7fd ffab 	bl	8003404 <ssd1306_WriteString>
					  if(BTN_A>=1){
 80054ae:	4b4f      	ldr	r3, [pc, #316]	; (80055ec <statemachine+0x19ac>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	dd10      	ble.n	80054d8 <statemachine+0x1898>
					  				  			 	state++;
 80054b6:	4b53      	ldr	r3, [pc, #332]	; (8005604 <statemachine+0x19c4>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	3301      	adds	r3, #1
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	4b51      	ldr	r3, [pc, #324]	; (8005604 <statemachine+0x19c4>)
 80054c0:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 80054c2:	4b4a      	ldr	r3, [pc, #296]	; (80055ec <statemachine+0x19ac>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 80054c8:	4b46      	ldr	r3, [pc, #280]	; (80055e4 <statemachine+0x19a4>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
					  break;
 80054ce:	e003      	b.n	80054d8 <statemachine+0x1898>
					  break;
 80054d0:	bf00      	nop
 80054d2:	e241      	b.n	8005958 <statemachine+0x1d18>
					  break;
 80054d4:	bf00      	nop
 80054d6:	e23f      	b.n	8005958 <statemachine+0x1d18>
					  break;
 80054d8:	bf00      	nop
				  break;
 80054da:	e23d      	b.n	8005958 <statemachine+0x1d18>


			  case STATE_USB:
				  ssd1306_Fill(Black);
 80054dc:	2000      	movs	r0, #0
 80054de:	f7fd fe75 	bl	80031cc <ssd1306_Fill>
				  ssd1306_SetCursor(32,32);
 80054e2:	2120      	movs	r1, #32
 80054e4:	2020      	movs	r0, #32
 80054e6:	f7fd ffb3 	bl	8003450 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 80054ea:	4a39      	ldr	r2, [pc, #228]	; (80055d0 <statemachine+0x1990>)
 80054ec:	2301      	movs	r3, #1
 80054ee:	ca06      	ldmia	r2, {r1, r2}
 80054f0:	4845      	ldr	r0, [pc, #276]	; (8005608 <statemachine+0x19c8>)
 80054f2:	f7fd ff87 	bl	8003404 <ssd1306_WriteString>
				  switch(usbstate){
 80054f6:	4b45      	ldr	r3, [pc, #276]	; (800560c <statemachine+0x19cc>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	f000 80fe 	beq.w	80056fc <statemachine+0x1abc>
 8005500:	2b02      	cmp	r3, #2
 8005502:	f300 822b 	bgt.w	800595c <statemachine+0x1d1c>
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <statemachine+0x18d2>
 800550a:	2b01      	cmp	r3, #1
 800550c:	f000 8084 	beq.w	8005618 <statemachine+0x19d8>
				 									  			 	BTN_A=0;
				 									  			 	BTN_B=0;
				 									  	}
				 					 break;
				 				  }
				  break;
 8005510:	e224      	b.n	800595c <statemachine+0x1d1c>
				 					  ssd1306_SetCursor(32,40);
 8005512:	2128      	movs	r1, #40	; 0x28
 8005514:	2020      	movs	r0, #32
 8005516:	f7fd ff9b 	bl	8003450 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 800551a:	4a2d      	ldr	r2, [pc, #180]	; (80055d0 <statemachine+0x1990>)
 800551c:	2301      	movs	r3, #1
 800551e:	ca06      	ldmia	r2, {r1, r2}
 8005520:	483b      	ldr	r0, [pc, #236]	; (8005610 <statemachine+0x19d0>)
 8005522:	f7fd ff6f 	bl	8003404 <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8005526:	4b3b      	ldr	r3, [pc, #236]	; (8005614 <statemachine+0x19d4>)
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 800552c:	4b2d      	ldr	r3, [pc, #180]	; (80055e4 <statemachine+0x19a4>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	dd0b      	ble.n	800554c <statemachine+0x190c>
				 						  usbstate++;
 8005534:	4b35      	ldr	r3, [pc, #212]	; (800560c <statemachine+0x19cc>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	b2da      	uxtb	r2, r3
 800553c:	4b33      	ldr	r3, [pc, #204]	; (800560c <statemachine+0x19cc>)
 800553e:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 8005540:	4b28      	ldr	r3, [pc, #160]	; (80055e4 <statemachine+0x19a4>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 8005546:	4b29      	ldr	r3, [pc, #164]	; (80055ec <statemachine+0x19ac>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 800554c:	4b27      	ldr	r3, [pc, #156]	; (80055ec <statemachine+0x19ac>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	f340 81ef 	ble.w	8005934 <statemachine+0x1cf4>
				 									  			 	state--;
 8005556:	4b2b      	ldr	r3, [pc, #172]	; (8005604 <statemachine+0x19c4>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	3b01      	subs	r3, #1
 800555c:	b2da      	uxtb	r2, r3
 800555e:	4b29      	ldr	r3, [pc, #164]	; (8005604 <statemachine+0x19c4>)
 8005560:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8005562:	4b28      	ldr	r3, [pc, #160]	; (8005604 <statemachine+0x19c4>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	3b01      	subs	r3, #1
 8005568:	b2da      	uxtb	r2, r3
 800556a:	4b26      	ldr	r3, [pc, #152]	; (8005604 <statemachine+0x19c4>)
 800556c:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 800556e:	4b25      	ldr	r3, [pc, #148]	; (8005604 <statemachine+0x19c4>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	3b01      	subs	r3, #1
 8005574:	b2da      	uxtb	r2, r3
 8005576:	4b23      	ldr	r3, [pc, #140]	; (8005604 <statemachine+0x19c4>)
 8005578:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 800557a:	4b22      	ldr	r3, [pc, #136]	; (8005604 <statemachine+0x19c4>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	3b01      	subs	r3, #1
 8005580:	b2da      	uxtb	r2, r3
 8005582:	4b20      	ldr	r3, [pc, #128]	; (8005604 <statemachine+0x19c4>)
 8005584:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8005586:	4b1f      	ldr	r3, [pc, #124]	; (8005604 <statemachine+0x19c4>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	3b01      	subs	r3, #1
 800558c:	b2da      	uxtb	r2, r3
 800558e:	4b1d      	ldr	r3, [pc, #116]	; (8005604 <statemachine+0x19c4>)
 8005590:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8005592:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <statemachine+0x19c4>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	3b01      	subs	r3, #1
 8005598:	b2da      	uxtb	r2, r3
 800559a:	4b1a      	ldr	r3, [pc, #104]	; (8005604 <statemachine+0x19c4>)
 800559c:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 800559e:	4b19      	ldr	r3, [pc, #100]	; (8005604 <statemachine+0x19c4>)
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	4b17      	ldr	r3, [pc, #92]	; (8005604 <statemachine+0x19c4>)
 80055a8:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 80055aa:	4b10      	ldr	r3, [pc, #64]	; (80055ec <statemachine+0x19ac>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 80055b0:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <statemachine+0x19a4>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
				 					  break;
 80055b6:	e1bd      	b.n	8005934 <statemachine+0x1cf4>
 80055b8:	20000a50 	.word	0x20000a50
 80055bc:	0801bc2c 	.word	0x0801bc2c
 80055c0:	200009ac 	.word	0x200009ac
 80055c4:	20000028 	.word	0x20000028
 80055c8:	200006f8 	.word	0x200006f8
 80055cc:	0801bc38 	.word	0x0801bc38
 80055d0:	20000020 	.word	0x20000020
 80055d4:	20000770 	.word	0x20000770
 80055d8:	0801bc40 	.word	0x0801bc40
 80055dc:	20000a4c 	.word	0x20000a4c
 80055e0:	20000a48 	.word	0x20000a48
 80055e4:	2000073c 	.word	0x2000073c
 80055e8:	200004ae 	.word	0x200004ae
 80055ec:	20000738 	.word	0x20000738
 80055f0:	0801bc48 	.word	0x0801bc48
 80055f4:	0801bc50 	.word	0x0801bc50
 80055f8:	20000988 	.word	0x20000988
 80055fc:	2000098c 	.word	0x2000098c
 8005600:	0801bc58 	.word	0x0801bc58
 8005604:	200004a8 	.word	0x200004a8
 8005608:	0801bc60 	.word	0x0801bc60
 800560c:	200004ad 	.word	0x200004ad
 8005610:	0801bc18 	.word	0x0801bc18
 8005614:	20000a40 	.word	0x20000a40
				 					 ssd1306_SetCursor(32,40);
 8005618:	2128      	movs	r1, #40	; 0x28
 800561a:	2020      	movs	r0, #32
 800561c:	f7fd ff18 	bl	8003450 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8005620:	4a7d      	ldr	r2, [pc, #500]	; (8005818 <statemachine+0x1bd8>)
 8005622:	2301      	movs	r3, #1
 8005624:	ca06      	ldmia	r2, {r1, r2}
 8005626:	487d      	ldr	r0, [pc, #500]	; (800581c <statemachine+0x1bdc>)
 8005628:	f7fd feec 	bl	8003404 <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,48);
 800562c:	2130      	movs	r1, #48	; 0x30
 800562e:	2020      	movs	r0, #32
 8005630:	f7fd ff0e 	bl	8003450 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 8005634:	4a78      	ldr	r2, [pc, #480]	; (8005818 <statemachine+0x1bd8>)
 8005636:	2301      	movs	r3, #1
 8005638:	ca06      	ldmia	r2, {r1, r2}
 800563a:	4879      	ldr	r0, [pc, #484]	; (8005820 <statemachine+0x1be0>)
 800563c:	f7fd fee2 	bl	8003404 <ssd1306_WriteString>
				 					if(erasedisplay==1){
 8005640:	4b78      	ldr	r3, [pc, #480]	; (8005824 <statemachine+0x1be4>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d120      	bne.n	800568a <statemachine+0x1a4a>
				 						snprintf((uint8_t *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 8005648:	4b77      	ldr	r3, [pc, #476]	; (8005828 <statemachine+0x1be8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	ee07 3a90 	vmov	s15, r3
 8005650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005654:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800582c <statemachine+0x1bec>
 8005658:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800565c:	ee16 0a90 	vmov	r0, s13
 8005660:	f7fa ff72 	bl	8000548 <__aeabi_f2d>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	e9cd 2300 	strd	r2, r3, [sp]
 800566c:	4a70      	ldr	r2, [pc, #448]	; (8005830 <statemachine+0x1bf0>)
 800566e:	2132      	movs	r1, #50	; 0x32
 8005670:	4870      	ldr	r0, [pc, #448]	; (8005834 <statemachine+0x1bf4>)
 8005672:	f011 f857 	bl	8016724 <sniprintf>
				 						ssd1306_SetCursor(32,56);
 8005676:	2138      	movs	r1, #56	; 0x38
 8005678:	2020      	movs	r0, #32
 800567a:	f7fd fee9 	bl	8003450 <ssd1306_SetCursor>
				 						ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 800567e:	4a66      	ldr	r2, [pc, #408]	; (8005818 <statemachine+0x1bd8>)
 8005680:	2301      	movs	r3, #1
 8005682:	ca06      	ldmia	r2, {r1, r2}
 8005684:	486b      	ldr	r0, [pc, #428]	; (8005834 <statemachine+0x1bf4>)
 8005686:	f7fd febd 	bl	8003404 <ssd1306_WriteString>
				 					if(BTN_A>=1){
 800568a:	4b6b      	ldr	r3, [pc, #428]	; (8005838 <statemachine+0x1bf8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	dd22      	ble.n	80056d8 <statemachine+0x1a98>
				 						erasetime=HAL_GetTick();
 8005692:	f000 fd79 	bl	8006188 <HAL_GetTick>
 8005696:	4603      	mov	r3, r0
 8005698:	461a      	mov	r2, r3
 800569a:	4b63      	ldr	r3, [pc, #396]	; (8005828 <statemachine+0x1be8>)
 800569c:	601a      	str	r2, [r3, #0]
				 						SPIF_EraseChip(&hspif1);
 800569e:	4867      	ldr	r0, [pc, #412]	; (800583c <statemachine+0x1bfc>)
 80056a0:	f00e fa91 	bl	8013bc6 <SPIF_EraseChip>
				 						erasetime=HAL_GetTick()-erasetime;
 80056a4:	f000 fd70 	bl	8006188 <HAL_GetTick>
 80056a8:	4603      	mov	r3, r0
 80056aa:	4a5f      	ldr	r2, [pc, #380]	; (8005828 <statemachine+0x1be8>)
 80056ac:	6812      	ldr	r2, [r2, #0]
 80056ae:	1a9b      	subs	r3, r3, r2
 80056b0:	461a      	mov	r2, r3
 80056b2:	4b5d      	ldr	r3, [pc, #372]	; (8005828 <statemachine+0x1be8>)
 80056b4:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 80056b6:	4b5b      	ldr	r3, [pc, #364]	; (8005824 <statemachine+0x1be4>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 80056bc:	4b60      	ldr	r3, [pc, #384]	; (8005840 <statemachine+0x1c00>)
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 80056c2:	4b60      	ldr	r3, [pc, #384]	; (8005844 <statemachine+0x1c04>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
				 						storeindex();
 80056c8:	f7fd fba4 	bl	8002e14 <storeindex>
				 						BTN_A=0;
 80056cc:	4b5a      	ldr	r3, [pc, #360]	; (8005838 <statemachine+0x1bf8>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 80056d2:	4b5d      	ldr	r3, [pc, #372]	; (8005848 <statemachine+0x1c08>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 80056d8:	4b5b      	ldr	r3, [pc, #364]	; (8005848 <statemachine+0x1c08>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f340 812b 	ble.w	8005938 <statemachine+0x1cf8>
					 						usbstate++;
 80056e2:	4b5a      	ldr	r3, [pc, #360]	; (800584c <statemachine+0x1c0c>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	3301      	adds	r3, #1
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	4b58      	ldr	r3, [pc, #352]	; (800584c <statemachine+0x1c0c>)
 80056ec:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 80056ee:	4b56      	ldr	r3, [pc, #344]	; (8005848 <statemachine+0x1c08>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 80056f4:	4b50      	ldr	r3, [pc, #320]	; (8005838 <statemachine+0x1bf8>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
				 			  break;
 80056fa:	e11d      	b.n	8005938 <statemachine+0x1cf8>
				 					ssd1306_Fill(Black);
 80056fc:	2000      	movs	r0, #0
 80056fe:	f7fd fd65 	bl	80031cc <ssd1306_Fill>
				 					ssd1306_SetCursor(32,40);
 8005702:	2128      	movs	r1, #40	; 0x28
 8005704:	2020      	movs	r0, #32
 8005706:	f7fd fea3 	bl	8003450 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 800570a:	4a43      	ldr	r2, [pc, #268]	; (8005818 <statemachine+0x1bd8>)
 800570c:	2301      	movs	r3, #1
 800570e:	ca06      	ldmia	r2, {r1, r2}
 8005710:	484f      	ldr	r0, [pc, #316]	; (8005850 <statemachine+0x1c10>)
 8005712:	f7fd fe77 	bl	8003404 <ssd1306_WriteString>
				 					if(pagenumber>0){
 8005716:	4b4b      	ldr	r3, [pc, #300]	; (8005844 <statemachine+0x1c04>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	f340 80a8 	ble.w	8005870 <statemachine+0x1c30>
				 					int i=0;
 8005720:	2300      	movs	r3, #0
 8005722:	657b      	str	r3, [r7, #84]	; 0x54
				 					if(usbtransmiten==0){
 8005724:	4b4b      	ldr	r3, [pc, #300]	; (8005854 <statemachine+0x1c14>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d162      	bne.n	80057f2 <statemachine+0x1bb2>
				 						while(i<pagenumber){
 800572c:	e036      	b.n	800579c <statemachine+0x1b5c>
				 							ssd1306_Fill(Black);
 800572e:	2000      	movs	r0, #0
 8005730:	f7fd fd4c 	bl	80031cc <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8005734:	2120      	movs	r1, #32
 8005736:	2020      	movs	r0, #32
 8005738:	f7fd fe8a 	bl	8003450 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 800573c:	4a36      	ldr	r2, [pc, #216]	; (8005818 <statemachine+0x1bd8>)
 800573e:	2301      	movs	r3, #1
 8005740:	ca06      	ldmia	r2, {r1, r2}
 8005742:	4843      	ldr	r0, [pc, #268]	; (8005850 <statemachine+0x1c10>)
 8005744:	f7fd fe5e 	bl	8003404 <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t *)flashread, 256, 0);
 8005748:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800574a:	2300      	movs	r3, #0
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005752:	4a41      	ldr	r2, [pc, #260]	; (8005858 <statemachine+0x1c18>)
 8005754:	4839      	ldr	r0, [pc, #228]	; (800583c <statemachine+0x1bfc>)
 8005756:	f00e fb21 	bl	8013d9c <SPIF_ReadPage>
				 							CDC_Transmit_FS((uint8_t * )flashread,256);
 800575a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800575e:	483e      	ldr	r0, [pc, #248]	; (8005858 <statemachine+0x1c18>)
 8005760:	f00e fc06 	bl	8013f70 <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 8005764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005766:	2264      	movs	r2, #100	; 0x64
 8005768:	fb02 f303 	mul.w	r3, r2, r3
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005774:	4b33      	ldr	r3, [pc, #204]	; (8005844 <statemachine+0x1c04>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	ee07 3a90 	vmov	s15, r3
 800577c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005780:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005784:	eeb0 0a66 	vmov.f32	s0, s13
 8005788:	f7fe f9fa 	bl	8003b80 <percentage>
				 							ssd1306_UpdateScreen();
 800578c:	f7fd fd36 	bl	80031fc <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 8005790:	207d      	movs	r0, #125	; 0x7d
 8005792:	f000 fd05 	bl	80061a0 <HAL_Delay>
				 							i++;
 8005796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005798:	3301      	adds	r3, #1
 800579a:	657b      	str	r3, [r7, #84]	; 0x54
				 						while(i<pagenumber){
 800579c:	4b29      	ldr	r3, [pc, #164]	; (8005844 <statemachine+0x1c04>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057a2:	429a      	cmp	r2, r3
 80057a4:	dbc3      	blt.n	800572e <statemachine+0x1aee>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t *)flashread, pageoffset, 0);
 80057a6:	4b27      	ldr	r3, [pc, #156]	; (8005844 <statemachine+0x1c04>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4619      	mov	r1, r3
 80057ac:	4b24      	ldr	r3, [pc, #144]	; (8005840 <statemachine+0x1c00>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	461a      	mov	r2, r3
 80057b2:	2300      	movs	r3, #0
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	4613      	mov	r3, r2
 80057b8:	4a27      	ldr	r2, [pc, #156]	; (8005858 <statemachine+0x1c18>)
 80057ba:	4820      	ldr	r0, [pc, #128]	; (800583c <statemachine+0x1bfc>)
 80057bc:	f00e faee 	bl	8013d9c <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t * )flashread,pageoffset);
 80057c0:	4b1f      	ldr	r3, [pc, #124]	; (8005840 <statemachine+0x1c00>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4619      	mov	r1, r3
 80057c6:	4824      	ldr	r0, [pc, #144]	; (8005858 <statemachine+0x1c18>)
 80057c8:	f00e fbd2 	bl	8013f70 <CDC_Transmit_FS>
				 						HAL_Delay(125);
 80057cc:	207d      	movs	r0, #125	; 0x7d
 80057ce:	f000 fce7 	bl	80061a0 <HAL_Delay>
				 						int taillefin=0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	653b      	str	r3, [r7, #80]	; 0x50
										taillefin = snprintf((uint8_t *)usbbuffer,64,"kawakobeme\n\r");
 80057d6:	4a21      	ldr	r2, [pc, #132]	; (800585c <statemachine+0x1c1c>)
 80057d8:	2140      	movs	r1, #64	; 0x40
 80057da:	4821      	ldr	r0, [pc, #132]	; (8005860 <statemachine+0x1c20>)
 80057dc:	f010 ffa2 	bl	8016724 <sniprintf>
 80057e0:	6538      	str	r0, [r7, #80]	; 0x50
				 						CDC_Transmit_FS((uint8_t *)usbbuffer,taillefin);
 80057e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057e4:	481e      	ldr	r0, [pc, #120]	; (8005860 <statemachine+0x1c20>)
 80057e6:	f00e fbc3 	bl	8013f70 <CDC_Transmit_FS>
				 						usbtransmiten=1;
 80057ea:	4b1a      	ldr	r3, [pc, #104]	; (8005854 <statemachine+0x1c14>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	e003      	b.n	80057fa <statemachine+0x1bba>
				 						usbpercent=1;
 80057f2:	4b1c      	ldr	r3, [pc, #112]	; (8005864 <statemachine+0x1c24>)
 80057f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80057f8:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 80057fa:	2000      	movs	r0, #0
 80057fc:	f7fd fce6 	bl	80031cc <ssd1306_Fill>
				 					ssd1306_SetCursor(32,45);
 8005800:	212d      	movs	r1, #45	; 0x2d
 8005802:	2020      	movs	r0, #32
 8005804:	f7fd fe24 	bl	8003450 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 8005808:	4a17      	ldr	r2, [pc, #92]	; (8005868 <statemachine+0x1c28>)
 800580a:	2301      	movs	r3, #1
 800580c:	ca06      	ldmia	r2, {r1, r2}
 800580e:	4817      	ldr	r0, [pc, #92]	; (800586c <statemachine+0x1c2c>)
 8005810:	f7fd fdf8 	bl	8003404 <ssd1306_WriteString>
 8005814:	e043      	b.n	800589e <statemachine+0x1c5e>
 8005816:	bf00      	nop
 8005818:	20000020 	.word	0x20000020
 800581c:	0801bc64 	.word	0x0801bc64
 8005820:	0801bc6c 	.word	0x0801bc6c
 8005824:	20000a3c 	.word	0x20000a3c
 8005828:	20000a38 	.word	0x20000a38
 800582c:	447a0000 	.word	0x447a0000
 8005830:	0801bc78 	.word	0x0801bc78
 8005834:	200009ac 	.word	0x200009ac
 8005838:	20000738 	.word	0x20000738
 800583c:	20000740 	.word	0x20000740
 8005840:	20000988 	.word	0x20000988
 8005844:	2000098c 	.word	0x2000098c
 8005848:	2000073c 	.word	0x2000073c
 800584c:	200004ad 	.word	0x200004ad
 8005850:	0801bc80 	.word	0x0801bc80
 8005854:	20000a40 	.word	0x20000a40
 8005858:	20000888 	.word	0x20000888
 800585c:	0801bc88 	.word	0x0801bc88
 8005860:	200009e0 	.word	0x200009e0
 8005864:	20000a44 	.word	0x20000a44
 8005868:	20000028 	.word	0x20000028
 800586c:	0801bc98 	.word	0x0801bc98
				 							ssd1306_Fill(Black);
 8005870:	2000      	movs	r0, #0
 8005872:	f7fd fcab 	bl	80031cc <ssd1306_Fill>
				 							ssd1306_SetCursor(32,40);
 8005876:	2128      	movs	r1, #40	; 0x28
 8005878:	2020      	movs	r0, #32
 800587a:	f7fd fde9 	bl	8003450 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 800587e:	4a3b      	ldr	r2, [pc, #236]	; (800596c <statemachine+0x1d2c>)
 8005880:	2301      	movs	r3, #1
 8005882:	ca06      	ldmia	r2, {r1, r2}
 8005884:	483a      	ldr	r0, [pc, #232]	; (8005970 <statemachine+0x1d30>)
 8005886:	f7fd fdbd 	bl	8003404 <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,48);
 800588a:	2130      	movs	r1, #48	; 0x30
 800588c:	2020      	movs	r0, #32
 800588e:	f7fd fddf 	bl	8003450 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_6x8,White);
 8005892:	4a36      	ldr	r2, [pc, #216]	; (800596c <statemachine+0x1d2c>)
 8005894:	2301      	movs	r3, #1
 8005896:	ca06      	ldmia	r2, {r1, r2}
 8005898:	4836      	ldr	r0, [pc, #216]	; (8005974 <statemachine+0x1d34>)
 800589a:	f7fd fdb3 	bl	8003404 <ssd1306_WriteString>
				 					if(BTN_B>=1){
 800589e:	4b36      	ldr	r3, [pc, #216]	; (8005978 <statemachine+0x1d38>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	dd11      	ble.n	80058ca <statemachine+0x1c8a>
				 									 						usbstate--;
 80058a6:	4b35      	ldr	r3, [pc, #212]	; (800597c <statemachine+0x1d3c>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	4b33      	ldr	r3, [pc, #204]	; (800597c <statemachine+0x1d3c>)
 80058b0:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 80058b2:	4b32      	ldr	r3, [pc, #200]	; (800597c <statemachine+0x1d3c>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	4b30      	ldr	r3, [pc, #192]	; (800597c <statemachine+0x1d3c>)
 80058bc:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 80058be:	4b2e      	ldr	r3, [pc, #184]	; (8005978 <statemachine+0x1d38>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 80058c4:	4b2e      	ldr	r3, [pc, #184]	; (8005980 <statemachine+0x1d40>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 80058ca:	4b2d      	ldr	r3, [pc, #180]	; (8005980 <statemachine+0x1d40>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	dd34      	ble.n	800593c <statemachine+0x1cfc>
				 									  			 	state--;
 80058d2:	4b2c      	ldr	r3, [pc, #176]	; (8005984 <statemachine+0x1d44>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	4b2a      	ldr	r3, [pc, #168]	; (8005984 <statemachine+0x1d44>)
 80058dc:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 80058de:	4b29      	ldr	r3, [pc, #164]	; (8005984 <statemachine+0x1d44>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	4b27      	ldr	r3, [pc, #156]	; (8005984 <statemachine+0x1d44>)
 80058e8:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 80058ea:	4b26      	ldr	r3, [pc, #152]	; (8005984 <statemachine+0x1d44>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	4b24      	ldr	r3, [pc, #144]	; (8005984 <statemachine+0x1d44>)
 80058f4:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 80058f6:	4b23      	ldr	r3, [pc, #140]	; (8005984 <statemachine+0x1d44>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	4b21      	ldr	r3, [pc, #132]	; (8005984 <statemachine+0x1d44>)
 8005900:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8005902:	4b20      	ldr	r3, [pc, #128]	; (8005984 <statemachine+0x1d44>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	3b01      	subs	r3, #1
 8005908:	b2da      	uxtb	r2, r3
 800590a:	4b1e      	ldr	r3, [pc, #120]	; (8005984 <statemachine+0x1d44>)
 800590c:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 800590e:	4b1d      	ldr	r3, [pc, #116]	; (8005984 <statemachine+0x1d44>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	3b01      	subs	r3, #1
 8005914:	b2da      	uxtb	r2, r3
 8005916:	4b1b      	ldr	r3, [pc, #108]	; (8005984 <statemachine+0x1d44>)
 8005918:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 800591a:	4b1a      	ldr	r3, [pc, #104]	; (8005984 <statemachine+0x1d44>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	3b01      	subs	r3, #1
 8005920:	b2da      	uxtb	r2, r3
 8005922:	4b18      	ldr	r3, [pc, #96]	; (8005984 <statemachine+0x1d44>)
 8005924:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8005926:	4b16      	ldr	r3, [pc, #88]	; (8005980 <statemachine+0x1d40>)
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 800592c:	4b12      	ldr	r3, [pc, #72]	; (8005978 <statemachine+0x1d38>)
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
				 					 break;
 8005932:	e003      	b.n	800593c <statemachine+0x1cfc>
				 					  break;
 8005934:	bf00      	nop
 8005936:	e011      	b.n	800595c <statemachine+0x1d1c>
				 			  break;
 8005938:	bf00      	nop
 800593a:	e00f      	b.n	800595c <statemachine+0x1d1c>
				 					 break;
 800593c:	bf00      	nop
				  break;
 800593e:	e00d      	b.n	800595c <statemachine+0x1d1c>
				  break;
 8005940:	bf00      	nop
 8005942:	e00c      	b.n	800595e <statemachine+0x1d1e>
			  break;
 8005944:	bf00      	nop
 8005946:	e00a      	b.n	800595e <statemachine+0x1d1e>
			  break;
 8005948:	bf00      	nop
 800594a:	e008      	b.n	800595e <statemachine+0x1d1e>
			  break;
 800594c:	bf00      	nop
 800594e:	e006      	b.n	800595e <statemachine+0x1d1e>
			  break;
 8005950:	bf00      	nop
 8005952:	e004      	b.n	800595e <statemachine+0x1d1e>
				  break;
 8005954:	bf00      	nop
 8005956:	e002      	b.n	800595e <statemachine+0x1d1e>
				  break;
 8005958:	bf00      	nop
 800595a:	e000      	b.n	800595e <statemachine+0x1d1e>
				  break;
 800595c:	bf00      	nop
	}
return ;
 800595e:	bf00      	nop
 8005960:	bf00      	nop
}
 8005962:	376c      	adds	r7, #108	; 0x6c
 8005964:	46bd      	mov	sp, r7
 8005966:	ecbd 8b02 	vpop	{d8}
 800596a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800596c:	20000020 	.word	0x20000020
 8005970:	0801bc80 	.word	0x0801bc80
 8005974:	0801bca0 	.word	0x0801bca0
 8005978:	2000073c 	.word	0x2000073c
 800597c:	200004ad 	.word	0x200004ad
 8005980:	20000738 	.word	0x20000738
 8005984:	200004a8 	.word	0x200004a8

08005988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800598e:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <HAL_MspInit+0x44>)
 8005990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005992:	4a0e      	ldr	r2, [pc, #56]	; (80059cc <HAL_MspInit+0x44>)
 8005994:	f043 0301 	orr.w	r3, r3, #1
 8005998:	6613      	str	r3, [r2, #96]	; 0x60
 800599a:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <HAL_MspInit+0x44>)
 800599c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	607b      	str	r3, [r7, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059a6:	4b09      	ldr	r3, [pc, #36]	; (80059cc <HAL_MspInit+0x44>)
 80059a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059aa:	4a08      	ldr	r2, [pc, #32]	; (80059cc <HAL_MspInit+0x44>)
 80059ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b0:	6593      	str	r3, [r2, #88]	; 0x58
 80059b2:	4b06      	ldr	r3, [pc, #24]	; (80059cc <HAL_MspInit+0x44>)
 80059b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40021000 	.word	0x40021000

080059d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80059d4:	e7fe      	b.n	80059d4 <NMI_Handler+0x4>

080059d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059d6:	b480      	push	{r7}
 80059d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059da:	e7fe      	b.n	80059da <HardFault_Handler+0x4>

080059dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059e0:	e7fe      	b.n	80059e0 <MemManage_Handler+0x4>

080059e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059e2:	b480      	push	{r7}
 80059e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059e6:	e7fe      	b.n	80059e6 <BusFault_Handler+0x4>

080059e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059ec:	e7fe      	b.n	80059ec <UsageFault_Handler+0x4>

080059ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059ee:	b480      	push	{r7}
 80059f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80059f2:	bf00      	nop
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a00:	bf00      	nop
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a0e:	bf00      	nop
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a1c:	f000 fba0 	bl	8006160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a20:	bf00      	nop
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005a28:	2002      	movs	r0, #2
 8005a2a:	f002 fb93 	bl	8008154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005a2e:	bf00      	nop
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005a38:	4802      	ldr	r0, [pc, #8]	; (8005a44 <DMA1_Channel1_IRQHandler+0x10>)
 8005a3a:	f002 f91e 	bl	8007c7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005a3e:	bf00      	nop
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	200003b8 	.word	0x200003b8

08005a48 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005a4c:	4802      	ldr	r0, [pc, #8]	; (8005a58 <ADC1_IRQHandler+0x10>)
 8005a4e:	f000 ff6b 	bl	8006928 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8005a52:	bf00      	nop
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20000354 	.word	0x20000354

08005a5c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005a60:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005a64:	f002 fb76 	bl	8008154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005a68:	bf00      	nop
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005a70:	4802      	ldr	r0, [pc, #8]	; (8005a7c <USB_IRQHandler+0x10>)
 8005a72:	f003 fe83 	bl	800977c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8005a76:	bf00      	nop
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20001de0 	.word	0x20001de0

08005a80 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 8005a84:	4802      	ldr	r0, [pc, #8]	; (8005a90 <DMA2_Channel7_IRQHandler+0x10>)
 8005a86:	f002 f8f8 	bl	8007c7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8005a8a:	bf00      	nop
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	200010b4 	.word	0x200010b4

08005a94 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8005a98:	4802      	ldr	r0, [pc, #8]	; (8005aa4 <LPUART1_IRQHandler+0x10>)
 8005a9a:	f007 ffef 	bl	800da7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8005a9e:	bf00      	nop
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000fa4 	.word	0x20000fa4

08005aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  return 1;
 8005aac:	2301      	movs	r3, #1
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <_kill>:

int _kill(int pid, int sig)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005ac2:	f010 ffad 	bl	8016a20 <__errno>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2216      	movs	r2, #22
 8005aca:	601a      	str	r2, [r3, #0]
  return -1;
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <_exit>:

void _exit (int status)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff ffe7 	bl	8005ab8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005aea:	e7fe      	b.n	8005aea <_exit+0x12>

08005aec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005af8:	2300      	movs	r3, #0
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	e00a      	b.n	8005b14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005afe:	f3af 8000 	nop.w
 8005b02:	4601      	mov	r1, r0
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	60ba      	str	r2, [r7, #8]
 8005b0a:	b2ca      	uxtb	r2, r1
 8005b0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	3301      	adds	r3, #1
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	dbf0      	blt.n	8005afe <_read+0x12>
  }

  return len;
 8005b1c:	687b      	ldr	r3, [r7, #4]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b086      	sub	sp, #24
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b32:	2300      	movs	r3, #0
 8005b34:	617b      	str	r3, [r7, #20]
 8005b36:	e009      	b.n	8005b4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	60ba      	str	r2, [r7, #8]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	dbf1      	blt.n	8005b38 <_write+0x12>
  }
  return len;
 8005b54:	687b      	ldr	r3, [r7, #4]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <_close>:

int _close(int file)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b86:	605a      	str	r2, [r3, #4]
  return 0;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <_isatty>:

int _isatty(int file)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005b9e:	2301      	movs	r3, #1
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
	...

08005bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005bd0:	4a14      	ldr	r2, [pc, #80]	; (8005c24 <_sbrk+0x5c>)
 8005bd2:	4b15      	ldr	r3, [pc, #84]	; (8005c28 <_sbrk+0x60>)
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005bdc:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <_sbrk+0x64>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d102      	bne.n	8005bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005be4:	4b11      	ldr	r3, [pc, #68]	; (8005c2c <_sbrk+0x64>)
 8005be6:	4a12      	ldr	r2, [pc, #72]	; (8005c30 <_sbrk+0x68>)
 8005be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005bea:	4b10      	ldr	r3, [pc, #64]	; (8005c2c <_sbrk+0x64>)
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d207      	bcs.n	8005c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005bf8:	f010 ff12 	bl	8016a20 <__errno>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	220c      	movs	r2, #12
 8005c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c02:	f04f 33ff 	mov.w	r3, #4294967295
 8005c06:	e009      	b.n	8005c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c08:	4b08      	ldr	r3, [pc, #32]	; (8005c2c <_sbrk+0x64>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c0e:	4b07      	ldr	r3, [pc, #28]	; (8005c2c <_sbrk+0x64>)
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4413      	add	r3, r2
 8005c16:	4a05      	ldr	r2, [pc, #20]	; (8005c2c <_sbrk+0x64>)
 8005c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20010000 	.word	0x20010000
 8005c28:	00000400 	.word	0x00000400
 8005c2c:	20000f54 	.word	0x20000f54
 8005c30:	20002448 	.word	0x20002448

08005c34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005c38:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <SystemInit+0x20>)
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3e:	4a05      	ldr	r2, [pc, #20]	; (8005c54 <SystemInit+0x20>)
 8005c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005c48:	bf00      	nop
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	e000ed00 	.word	0xe000ed00

08005c58 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b088      	sub	sp, #32
 8005c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c5e:	f107 0310 	add.w	r3, r7, #16
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	605a      	str	r2, [r3, #4]
 8005c68:	609a      	str	r2, [r3, #8]
 8005c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c6c:	1d3b      	adds	r3, r7, #4
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	605a      	str	r2, [r3, #4]
 8005c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005c76:	4b1e      	ldr	r3, [pc, #120]	; (8005cf0 <MX_TIM2_Init+0x98>)
 8005c78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 8005c7e:	4b1c      	ldr	r3, [pc, #112]	; (8005cf0 <MX_TIM2_Init+0x98>)
 8005c80:	f240 128f 	movw	r2, #399	; 0x18f
 8005c84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c86:	4b1a      	ldr	r3, [pc, #104]	; (8005cf0 <MX_TIM2_Init+0x98>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8005c8c:	4b18      	ldr	r3, [pc, #96]	; (8005cf0 <MX_TIM2_Init+0x98>)
 8005c8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8005c92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c94:	4b16      	ldr	r3, [pc, #88]	; (8005cf0 <MX_TIM2_Init+0x98>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c9a:	4b15      	ldr	r3, [pc, #84]	; (8005cf0 <MX_TIM2_Init+0x98>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005ca0:	4813      	ldr	r0, [pc, #76]	; (8005cf0 <MX_TIM2_Init+0x98>)
 8005ca2:	f007 fa83 	bl	800d1ac <HAL_TIM_Base_Init>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8005cac:	f7fc f857 	bl	8001d5e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005cb6:	f107 0310 	add.w	r3, r7, #16
 8005cba:	4619      	mov	r1, r3
 8005cbc:	480c      	ldr	r0, [pc, #48]	; (8005cf0 <MX_TIM2_Init+0x98>)
 8005cbe:	f007 fb19 	bl	800d2f4 <HAL_TIM_ConfigClockSource>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8005cc8:	f7fc f849 	bl	8001d5e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005ccc:	2320      	movs	r3, #32
 8005cce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005cd4:	1d3b      	adds	r3, r7, #4
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4805      	ldr	r0, [pc, #20]	; (8005cf0 <MX_TIM2_Init+0x98>)
 8005cda:	f007 fcd3 	bl	800d684 <HAL_TIMEx_MasterConfigSynchronization>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8005ce4:	f7fc f83b 	bl	8001d5e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005ce8:	bf00      	nop
 8005cea:	3720      	adds	r7, #32
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	20000f58 	.word	0x20000f58

08005cf4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d04:	d10b      	bne.n	8005d1e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d06:	4b09      	ldr	r3, [pc, #36]	; (8005d2c <HAL_TIM_Base_MspInit+0x38>)
 8005d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0a:	4a08      	ldr	r2, [pc, #32]	; (8005d2c <HAL_TIM_Base_MspInit+0x38>)
 8005d0c:	f043 0301 	orr.w	r3, r3, #1
 8005d10:	6593      	str	r3, [r2, #88]	; 0x58
 8005d12:	4b06      	ldr	r3, [pc, #24]	; (8005d2c <HAL_TIM_Base_MspInit+0x38>)
 8005d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005d1e:	bf00      	nop
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40021000 	.word	0x40021000

08005d30 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005d34:	4b12      	ldr	r3, [pc, #72]	; (8005d80 <MX_LPUART1_UART_Init+0x50>)
 8005d36:	4a13      	ldr	r2, [pc, #76]	; (8005d84 <MX_LPUART1_UART_Init+0x54>)
 8005d38:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8005d3a:	4b11      	ldr	r3, [pc, #68]	; (8005d80 <MX_LPUART1_UART_Init+0x50>)
 8005d3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005d40:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d42:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <MX_LPUART1_UART_Init+0x50>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005d48:	4b0d      	ldr	r3, [pc, #52]	; (8005d80 <MX_LPUART1_UART_Init+0x50>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005d4e:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <MX_LPUART1_UART_Init+0x50>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005d54:	4b0a      	ldr	r3, [pc, #40]	; (8005d80 <MX_LPUART1_UART_Init+0x50>)
 8005d56:	220c      	movs	r2, #12
 8005d58:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d5a:	4b09      	ldr	r3, [pc, #36]	; (8005d80 <MX_LPUART1_UART_Init+0x50>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d60:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <MX_LPUART1_UART_Init+0x50>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d66:	4b06      	ldr	r3, [pc, #24]	; (8005d80 <MX_LPUART1_UART_Init+0x50>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005d6c:	4804      	ldr	r0, [pc, #16]	; (8005d80 <MX_LPUART1_UART_Init+0x50>)
 8005d6e:	f007 fcef 	bl	800d750 <HAL_UART_Init>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8005d78:	f7fb fff1 	bl	8001d5e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005d7c:	bf00      	nop
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20000fa4 	.word	0x20000fa4
 8005d84:	40008000 	.word	0x40008000

08005d88 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005d8c:	4b14      	ldr	r3, [pc, #80]	; (8005de0 <MX_USART1_UART_Init+0x58>)
 8005d8e:	4a15      	ldr	r2, [pc, #84]	; (8005de4 <MX_USART1_UART_Init+0x5c>)
 8005d90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005d92:	4b13      	ldr	r3, [pc, #76]	; (8005de0 <MX_USART1_UART_Init+0x58>)
 8005d94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d9a:	4b11      	ldr	r3, [pc, #68]	; (8005de0 <MX_USART1_UART_Init+0x58>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005da0:	4b0f      	ldr	r3, [pc, #60]	; (8005de0 <MX_USART1_UART_Init+0x58>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005da6:	4b0e      	ldr	r3, [pc, #56]	; (8005de0 <MX_USART1_UART_Init+0x58>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005dac:	4b0c      	ldr	r3, [pc, #48]	; (8005de0 <MX_USART1_UART_Init+0x58>)
 8005dae:	220c      	movs	r2, #12
 8005db0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005db2:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <MX_USART1_UART_Init+0x58>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005db8:	4b09      	ldr	r3, [pc, #36]	; (8005de0 <MX_USART1_UART_Init+0x58>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005dbe:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <MX_USART1_UART_Init+0x58>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005dc4:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <MX_USART1_UART_Init+0x58>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005dca:	4805      	ldr	r0, [pc, #20]	; (8005de0 <MX_USART1_UART_Init+0x58>)
 8005dcc:	f007 fcc0 	bl	800d750 <HAL_UART_Init>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005dd6:	f7fb ffc2 	bl	8001d5e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005dda:	bf00      	nop
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	2000102c 	.word	0x2000102c
 8005de4:	40013800 	.word	0x40013800

08005de8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b0a0      	sub	sp, #128	; 0x80
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005df0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	605a      	str	r2, [r3, #4]
 8005dfa:	609a      	str	r2, [r3, #8]
 8005dfc:	60da      	str	r2, [r3, #12]
 8005dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e00:	f107 0318 	add.w	r3, r7, #24
 8005e04:	2254      	movs	r2, #84	; 0x54
 8005e06:	2100      	movs	r1, #0
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f010 fd22 	bl	8016852 <memset>
  if(uartHandle->Instance==LPUART1)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a55      	ldr	r2, [pc, #340]	; (8005f68 <HAL_UART_MspInit+0x180>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d168      	bne.n	8005eea <HAL_UART_MspInit+0x102>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005e18:	2320      	movs	r3, #32
 8005e1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e20:	f107 0318 	add.w	r3, r7, #24
 8005e24:	4618      	mov	r0, r3
 8005e26:	f005 ffab 	bl	800bd80 <HAL_RCCEx_PeriphCLKConfig>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005e30:	f7fb ff95 	bl	8001d5e <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005e34:	4b4d      	ldr	r3, [pc, #308]	; (8005f6c <HAL_UART_MspInit+0x184>)
 8005e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e38:	4a4c      	ldr	r2, [pc, #304]	; (8005f6c <HAL_UART_MspInit+0x184>)
 8005e3a:	f043 0301 	orr.w	r3, r3, #1
 8005e3e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8005e40:	4b4a      	ldr	r3, [pc, #296]	; (8005f6c <HAL_UART_MspInit+0x184>)
 8005e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e4c:	4b47      	ldr	r3, [pc, #284]	; (8005f6c <HAL_UART_MspInit+0x184>)
 8005e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e50:	4a46      	ldr	r2, [pc, #280]	; (8005f6c <HAL_UART_MspInit+0x184>)
 8005e52:	f043 0301 	orr.w	r3, r3, #1
 8005e56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e58:	4b44      	ldr	r3, [pc, #272]	; (8005f6c <HAL_UART_MspInit+0x184>)
 8005e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005e64:	230c      	movs	r3, #12
 8005e66:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e70:	2303      	movs	r3, #3
 8005e72:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005e74:	2308      	movs	r3, #8
 8005e76:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e82:	f001 ffe5 	bl	8007e50 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 8005e86:	4b3a      	ldr	r3, [pc, #232]	; (8005f70 <HAL_UART_MspInit+0x188>)
 8005e88:	4a3a      	ldr	r2, [pc, #232]	; (8005f74 <HAL_UART_MspInit+0x18c>)
 8005e8a:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 8005e8c:	4b38      	ldr	r3, [pc, #224]	; (8005f70 <HAL_UART_MspInit+0x188>)
 8005e8e:	2204      	movs	r2, #4
 8005e90:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e92:	4b37      	ldr	r3, [pc, #220]	; (8005f70 <HAL_UART_MspInit+0x188>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e98:	4b35      	ldr	r3, [pc, #212]	; (8005f70 <HAL_UART_MspInit+0x188>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e9e:	4b34      	ldr	r3, [pc, #208]	; (8005f70 <HAL_UART_MspInit+0x188>)
 8005ea0:	2280      	movs	r2, #128	; 0x80
 8005ea2:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ea4:	4b32      	ldr	r3, [pc, #200]	; (8005f70 <HAL_UART_MspInit+0x188>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005eaa:	4b31      	ldr	r3, [pc, #196]	; (8005f70 <HAL_UART_MspInit+0x188>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_NORMAL;
 8005eb0:	4b2f      	ldr	r3, [pc, #188]	; (8005f70 <HAL_UART_MspInit+0x188>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005eb6:	4b2e      	ldr	r3, [pc, #184]	; (8005f70 <HAL_UART_MspInit+0x188>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 8005ebc:	482c      	ldr	r0, [pc, #176]	; (8005f70 <HAL_UART_MspInit+0x188>)
 8005ebe:	f001 fd45 	bl	800794c <HAL_DMA_Init>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8005ec8:	f7fb ff49 	bl	8001d5e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart_rx);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a28      	ldr	r2, [pc, #160]	; (8005f70 <HAL_UART_MspInit+0x188>)
 8005ed0:	675a      	str	r2, [r3, #116]	; 0x74
 8005ed2:	4a27      	ldr	r2, [pc, #156]	; (8005f70 <HAL_UART_MspInit+0x188>)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2100      	movs	r1, #0
 8005edc:	2046      	movs	r0, #70	; 0x46
 8005ede:	f001 fcfe 	bl	80078de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8005ee2:	2046      	movs	r0, #70	; 0x46
 8005ee4:	f001 fd17 	bl	8007916 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005ee8:	e03a      	b.n	8005f60 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART1)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a22      	ldr	r2, [pc, #136]	; (8005f78 <HAL_UART_MspInit+0x190>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d135      	bne.n	8005f60 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005efc:	f107 0318 	add.w	r3, r7, #24
 8005f00:	4618      	mov	r0, r3
 8005f02:	f005 ff3d 	bl	800bd80 <HAL_RCCEx_PeriphCLKConfig>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <HAL_UART_MspInit+0x128>
      Error_Handler();
 8005f0c:	f7fb ff27 	bl	8001d5e <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f10:	4b16      	ldr	r3, [pc, #88]	; (8005f6c <HAL_UART_MspInit+0x184>)
 8005f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f14:	4a15      	ldr	r2, [pc, #84]	; (8005f6c <HAL_UART_MspInit+0x184>)
 8005f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f1a:	6613      	str	r3, [r2, #96]	; 0x60
 8005f1c:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <HAL_UART_MspInit+0x184>)
 8005f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f28:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <HAL_UART_MspInit+0x184>)
 8005f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2c:	4a0f      	ldr	r2, [pc, #60]	; (8005f6c <HAL_UART_MspInit+0x184>)
 8005f2e:	f043 0302 	orr.w	r3, r3, #2
 8005f32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f34:	4b0d      	ldr	r3, [pc, #52]	; (8005f6c <HAL_UART_MspInit+0x184>)
 8005f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	60bb      	str	r3, [r7, #8]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005f40:	23c0      	movs	r3, #192	; 0xc0
 8005f42:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f44:	2302      	movs	r3, #2
 8005f46:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005f50:	2307      	movs	r3, #7
 8005f52:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f54:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4808      	ldr	r0, [pc, #32]	; (8005f7c <HAL_UART_MspInit+0x194>)
 8005f5c:	f001 ff78 	bl	8007e50 <HAL_GPIO_Init>
}
 8005f60:	bf00      	nop
 8005f62:	3780      	adds	r7, #128	; 0x80
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40008000 	.word	0x40008000
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	200010b4 	.word	0x200010b4
 8005f74:	40020480 	.word	0x40020480
 8005f78:	40013800 	.word	0x40013800
 8005f7c:	48000400 	.word	0x48000400

08005f80 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8005f88:	4b30      	ldr	r3, [pc, #192]	; (800604c <HAL_UART_RxCpltCallback+0xcc>)
 8005f8a:	881a      	ldrh	r2, [r3, #0]
 8005f8c:	4b30      	ldr	r3, [pc, #192]	; (8006050 <HAL_UART_RxCpltCallback+0xd0>)
 8005f8e:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8005f90:	4b2f      	ldr	r3, [pc, #188]	; (8006050 <HAL_UART_RxCpltCallback+0xd0>)
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8005f98:	d922      	bls.n	8005fe0 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 8005f9a:	4b2d      	ldr	r3, [pc, #180]	; (8006050 <HAL_UART_RxCpltCallback+0xd0>)
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005fa2:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8005fa4:	4b2a      	ldr	r3, [pc, #168]	; (8006050 <HAL_UART_RxCpltCallback+0xd0>)
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	4b2a      	ldr	r3, [pc, #168]	; (8006054 <HAL_UART_RxCpltCallback+0xd4>)
 8005fac:	4413      	add	r3, r2
 8005fae:	89fa      	ldrh	r2, [r7, #14]
 8005fb0:	4929      	ldr	r1, [pc, #164]	; (8006058 <HAL_UART_RxCpltCallback+0xd8>)
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f010 fd69 	bl	8016a8a <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8005fb8:	4b25      	ldr	r3, [pc, #148]	; (8006050 <HAL_UART_RxCpltCallback+0xd0>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8005fbe:	89fb      	ldrh	r3, [r7, #14]
 8005fc0:	4a25      	ldr	r2, [pc, #148]	; (8006058 <HAL_UART_RxCpltCallback+0xd8>)
 8005fc2:	1899      	adds	r1, r3, r2
 8005fc4:	89fb      	ldrh	r3, [r7, #14]
 8005fc6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005fca:	461a      	mov	r2, r3
 8005fcc:	4821      	ldr	r0, [pc, #132]	; (8006054 <HAL_UART_RxCpltCallback+0xd4>)
 8005fce:	f010 fd5c 	bl	8016a8a <memcpy>
				newPos = (64-datatocopy);  // update the position
 8005fd2:	89fb      	ldrh	r3, [r7, #14]
 8005fd4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	4b1c      	ldr	r3, [pc, #112]	; (800604c <HAL_UART_RxCpltCallback+0xcc>)
 8005fdc:	801a      	strh	r2, [r3, #0]
 8005fde:	e01e      	b.n	800601e <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8005fe0:	4b1b      	ldr	r3, [pc, #108]	; (8006050 <HAL_UART_RxCpltCallback+0xd0>)
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	4b1b      	ldr	r3, [pc, #108]	; (8006054 <HAL_UART_RxCpltCallback+0xd4>)
 8005fe8:	441a      	add	r2, r3
 8005fea:	4b1b      	ldr	r3, [pc, #108]	; (8006058 <HAL_UART_RxCpltCallback+0xd8>)
 8005fec:	4610      	mov	r0, r2
 8005fee:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	f8d1 c000 	ldr.w	ip, [r1]
 8005ffa:	684e      	ldr	r6, [r1, #4]
 8005ffc:	688d      	ldr	r5, [r1, #8]
 8005ffe:	68c9      	ldr	r1, [r1, #12]
 8006000:	f8c2 c000 	str.w	ip, [r2]
 8006004:	6056      	str	r6, [r2, #4]
 8006006:	6095      	str	r5, [r2, #8]
 8006008:	60d1      	str	r1, [r2, #12]
 800600a:	3310      	adds	r3, #16
 800600c:	3010      	adds	r0, #16
 800600e:	42a3      	cmp	r3, r4
 8006010:	d1ef      	bne.n	8005ff2 <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 8006012:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <HAL_UART_RxCpltCallback+0xd0>)
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	3340      	adds	r3, #64	; 0x40
 8006018:	b29a      	uxth	r2, r3
 800601a:	4b0c      	ldr	r3, [pc, #48]	; (800604c <HAL_UART_RxCpltCallback+0xcc>)
 800601c:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 800601e:	2240      	movs	r2, #64	; 0x40
 8006020:	490d      	ldr	r1, [pc, #52]	; (8006058 <HAL_UART_RxCpltCallback+0xd8>)
 8006022:	480e      	ldr	r0, [pc, #56]	; (800605c <HAL_UART_RxCpltCallback+0xdc>)
 8006024:	f007 fbe2 	bl	800d7ec <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8006028:	4b0d      	ldr	r3, [pc, #52]	; (8006060 <HAL_UART_RxCpltCallback+0xe0>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	4b0c      	ldr	r3, [pc, #48]	; (8006060 <HAL_UART_RxCpltCallback+0xe0>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0204 	bic.w	r2, r2, #4
 8006036:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 8006038:	2240      	movs	r2, #64	; 0x40
 800603a:	4907      	ldr	r1, [pc, #28]	; (8006058 <HAL_UART_RxCpltCallback+0xd8>)
 800603c:	4807      	ldr	r0, [pc, #28]	; (800605c <HAL_UART_RxCpltCallback+0xdc>)
 800603e:	f007 fbd5 	bl	800d7ec <HAL_UART_Receive_DMA>
}
 8006042:	bf00      	nop
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800604a:	bf00      	nop
 800604c:	200004b2 	.word	0x200004b2
 8006050:	200004b0 	.word	0x200004b0
 8006054:	200004f4 	.word	0x200004f4
 8006058:	200004b4 	.word	0x200004b4
 800605c:	20000fa4 	.word	0x20000fa4
 8006060:	200010b4 	.word	0x200010b4

08006064 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800609c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006068:	f7ff fde4 	bl	8005c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800606c:	480c      	ldr	r0, [pc, #48]	; (80060a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800606e:	490d      	ldr	r1, [pc, #52]	; (80060a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006070:	4a0d      	ldr	r2, [pc, #52]	; (80060a8 <LoopForever+0xe>)
  movs r3, #0
 8006072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006074:	e002      	b.n	800607c <LoopCopyDataInit>

08006076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800607a:	3304      	adds	r3, #4

0800607c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800607c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800607e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006080:	d3f9      	bcc.n	8006076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006082:	4a0a      	ldr	r2, [pc, #40]	; (80060ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8006084:	4c0a      	ldr	r4, [pc, #40]	; (80060b0 <LoopForever+0x16>)
  movs r3, #0
 8006086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006088:	e001      	b.n	800608e <LoopFillZerobss>

0800608a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800608a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800608c:	3204      	adds	r2, #4

0800608e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800608e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006090:	d3fb      	bcc.n	800608a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006092:	f010 fccb 	bl	8016a2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006096:	f7fb fd2f 	bl	8001af8 <main>

0800609a <LoopForever>:

LoopForever:
    b LoopForever
 800609a:	e7fe      	b.n	800609a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800609c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80060a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80060a4:	20000320 	.word	0x20000320
  ldr r2, =_sidata
 80060a8:	0801df98 	.word	0x0801df98
  ldr r2, =_sbss
 80060ac:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 80060b0:	20002444 	.word	0x20002444

080060b4 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80060b4:	e7fe      	b.n	80060b4 <CAN1_RX0_IRQHandler>

080060b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060c0:	2003      	movs	r0, #3
 80060c2:	f001 fc01 	bl	80078c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80060c6:	200f      	movs	r0, #15
 80060c8:	f000 f80e 	bl	80060e8 <HAL_InitTick>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	71fb      	strb	r3, [r7, #7]
 80060d6:	e001      	b.n	80060dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80060d8:	f7ff fc56 	bl	8005988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80060dc:	79fb      	ldrb	r3, [r7, #7]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
	...

080060e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80060f0:	2300      	movs	r3, #0
 80060f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80060f4:	4b17      	ldr	r3, [pc, #92]	; (8006154 <HAL_InitTick+0x6c>)
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d023      	beq.n	8006144 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80060fc:	4b16      	ldr	r3, [pc, #88]	; (8006158 <HAL_InitTick+0x70>)
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	4b14      	ldr	r3, [pc, #80]	; (8006154 <HAL_InitTick+0x6c>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	4619      	mov	r1, r3
 8006106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800610a:	fbb3 f3f1 	udiv	r3, r3, r1
 800610e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006112:	4618      	mov	r0, r3
 8006114:	f001 fc0d 	bl	8007932 <HAL_SYSTICK_Config>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10f      	bne.n	800613e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b0f      	cmp	r3, #15
 8006122:	d809      	bhi.n	8006138 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006124:	2200      	movs	r2, #0
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	f04f 30ff 	mov.w	r0, #4294967295
 800612c:	f001 fbd7 	bl	80078de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006130:	4a0a      	ldr	r2, [pc, #40]	; (800615c <HAL_InitTick+0x74>)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	e007      	b.n	8006148 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	73fb      	strb	r3, [r7, #15]
 800613c:	e004      	b.n	8006148 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	73fb      	strb	r3, [r7, #15]
 8006142:	e001      	b.n	8006148 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006148:	7bfb      	ldrb	r3, [r7, #15]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20000040 	.word	0x20000040
 8006158:	20000038 	.word	0x20000038
 800615c:	2000003c 	.word	0x2000003c

08006160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006164:	4b06      	ldr	r3, [pc, #24]	; (8006180 <HAL_IncTick+0x20>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	4b06      	ldr	r3, [pc, #24]	; (8006184 <HAL_IncTick+0x24>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4413      	add	r3, r2
 8006170:	4a04      	ldr	r2, [pc, #16]	; (8006184 <HAL_IncTick+0x24>)
 8006172:	6013      	str	r3, [r2, #0]
}
 8006174:	bf00      	nop
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	20000040 	.word	0x20000040
 8006184:	200010fc 	.word	0x200010fc

08006188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
  return uwTick;
 800618c:	4b03      	ldr	r3, [pc, #12]	; (800619c <HAL_GetTick+0x14>)
 800618e:	681b      	ldr	r3, [r3, #0]
}
 8006190:	4618      	mov	r0, r3
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	200010fc 	.word	0x200010fc

080061a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80061a8:	f7ff ffee 	bl	8006188 <HAL_GetTick>
 80061ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b8:	d005      	beq.n	80061c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80061ba:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <HAL_Delay+0x44>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4413      	add	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80061c6:	bf00      	nop
 80061c8:	f7ff ffde 	bl	8006188 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d8f7      	bhi.n	80061c8 <HAL_Delay+0x28>
  {
  }
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000040 	.word	0x20000040

080061e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	431a      	orrs	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	609a      	str	r2, [r3, #8]
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	609a      	str	r2, [r3, #8]
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3360      	adds	r3, #96	; 0x60
 8006262:	461a      	mov	r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	4b08      	ldr	r3, [pc, #32]	; (8006294 <LL_ADC_SetOffset+0x44>)
 8006272:	4013      	ands	r3, r2
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	4313      	orrs	r3, r2
 8006280:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006288:	bf00      	nop
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	03fff000 	.word	0x03fff000

08006298 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3360      	adds	r3, #96	; 0x60
 80062a6:	461a      	mov	r2, r3
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3360      	adds	r3, #96	; 0x60
 80062d4:	461a      	mov	r2, r3
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	431a      	orrs	r2, r3
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800630e:	2301      	movs	r3, #1
 8006310:	e000      	b.n	8006314 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3330      	adds	r3, #48	; 0x30
 8006330:	461a      	mov	r2, r3
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	0a1b      	lsrs	r3, r3, #8
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	f003 030c 	and.w	r3, r3, #12
 800633c:	4413      	add	r3, r2
 800633e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f003 031f 	and.w	r3, r3, #31
 800634a:	211f      	movs	r1, #31
 800634c:	fa01 f303 	lsl.w	r3, r1, r3
 8006350:	43db      	mvns	r3, r3
 8006352:	401a      	ands	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	0e9b      	lsrs	r3, r3, #26
 8006358:	f003 011f 	and.w	r1, r3, #31
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f003 031f 	and.w	r3, r3, #31
 8006362:	fa01 f303 	lsl.w	r3, r1, r3
 8006366:	431a      	orrs	r2, r3
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800636c:	bf00      	nop
 800636e:	371c      	adds	r7, #28
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006384:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800638c:	2301      	movs	r3, #1
 800638e:	e000      	b.n	8006392 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800639e:	b480      	push	{r7}
 80063a0:	b087      	sub	sp, #28
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3314      	adds	r3, #20
 80063ae:	461a      	mov	r2, r3
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	0e5b      	lsrs	r3, r3, #25
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	4413      	add	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	0d1b      	lsrs	r3, r3, #20
 80063c6:	f003 031f 	and.w	r3, r3, #31
 80063ca:	2107      	movs	r1, #7
 80063cc:	fa01 f303 	lsl.w	r3, r1, r3
 80063d0:	43db      	mvns	r3, r3
 80063d2:	401a      	ands	r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	0d1b      	lsrs	r3, r3, #20
 80063d8:	f003 031f 	and.w	r3, r3, #31
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	fa01 f303 	lsl.w	r3, r1, r3
 80063e2:	431a      	orrs	r2, r3
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80063e8:	bf00      	nop
 80063ea:	371c      	adds	r7, #28
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800640c:	43db      	mvns	r3, r3
 800640e:	401a      	ands	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f003 0318 	and.w	r3, r3, #24
 8006416:	4908      	ldr	r1, [pc, #32]	; (8006438 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006418:	40d9      	lsrs	r1, r3
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	400b      	ands	r3, r1
 800641e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006422:	431a      	orrs	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800642a:	bf00      	nop
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	0007ffff 	.word	0x0007ffff

0800643c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800644c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6093      	str	r3, [r2, #8]
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006474:	d101      	bne.n	800647a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006476:	2301      	movs	r3, #1
 8006478:	e000      	b.n	800647c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006498:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800649c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064c4:	d101      	bne.n	80064ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80064ec:	f043 0201 	orr.w	r2, r3, #1
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b01      	cmp	r3, #1
 8006512:	d101      	bne.n	8006518 <LL_ADC_IsEnabled+0x18>
 8006514:	2301      	movs	r3, #1
 8006516:	e000      	b.n	800651a <LL_ADC_IsEnabled+0x1a>
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006536:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800653a:	f043 0204 	orr.w	r2, r3, #4
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006542:	bf00      	nop
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 0304 	and.w	r3, r3, #4
 800655e:	2b04      	cmp	r3, #4
 8006560:	d101      	bne.n	8006566 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006562:	2301      	movs	r3, #1
 8006564:	e000      	b.n	8006568 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f003 0308 	and.w	r3, r3, #8
 8006584:	2b08      	cmp	r3, #8
 8006586:	d101      	bne.n	800658c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006588:	2301      	movs	r3, #1
 800658a:	e000      	b.n	800658e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
	...

0800659c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b088      	sub	sp, #32
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e126      	b.n	8006804 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d109      	bne.n	80065d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7fa ff49 	bl	800145c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4618      	mov	r0, r3
 80065de:	f7ff ff3f 	bl	8006460 <LL_ADC_IsDeepPowerDownEnabled>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d004      	beq.n	80065f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7ff ff25 	bl	800643c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7ff ff5a 	bl	80064b0 <LL_ADC_IsInternalRegulatorEnabled>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d115      	bne.n	800662e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff ff3e 	bl	8006488 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800660c:	4b7f      	ldr	r3, [pc, #508]	; (800680c <HAL_ADC_Init+0x270>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	099b      	lsrs	r3, r3, #6
 8006612:	4a7f      	ldr	r2, [pc, #508]	; (8006810 <HAL_ADC_Init+0x274>)
 8006614:	fba2 2303 	umull	r2, r3, r2, r3
 8006618:	099b      	lsrs	r3, r3, #6
 800661a:	3301      	adds	r3, #1
 800661c:	005b      	lsls	r3, r3, #1
 800661e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006620:	e002      	b.n	8006628 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3b01      	subs	r3, #1
 8006626:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1f9      	bne.n	8006622 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4618      	mov	r0, r3
 8006634:	f7ff ff3c 	bl	80064b0 <LL_ADC_IsInternalRegulatorEnabled>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10d      	bne.n	800665a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006642:	f043 0210 	orr.w	r2, r3, #16
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800664e:	f043 0201 	orr.w	r2, r3, #1
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4618      	mov	r0, r3
 8006660:	f7ff ff75 	bl	800654e <LL_ADC_REG_IsConversionOngoing>
 8006664:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666a:	f003 0310 	and.w	r3, r3, #16
 800666e:	2b00      	cmp	r3, #0
 8006670:	f040 80bf 	bne.w	80067f2 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2b00      	cmp	r3, #0
 8006678:	f040 80bb 	bne.w	80067f2 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006680:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006684:	f043 0202 	orr.w	r2, r3, #2
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4618      	mov	r0, r3
 8006692:	f7ff ff35 	bl	8006500 <LL_ADC_IsEnabled>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10b      	bne.n	80066b4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800669c:	485d      	ldr	r0, [pc, #372]	; (8006814 <HAL_ADC_Init+0x278>)
 800669e:	f7ff ff2f 	bl	8006500 <LL_ADC_IsEnabled>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d105      	bne.n	80066b4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	4619      	mov	r1, r3
 80066ae:	485a      	ldr	r0, [pc, #360]	; (8006818 <HAL_ADC_Init+0x27c>)
 80066b0:	f7ff fd9a 	bl	80061e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	7e5b      	ldrb	r3, [r3, #25]
 80066b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80066be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80066c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80066ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80066d4:	4313      	orrs	r3, r2
 80066d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d106      	bne.n	80066f0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	3b01      	subs	r3, #1
 80066e8:	045b      	lsls	r3, r3, #17
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d009      	beq.n	800670c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	4313      	orrs	r3, r2
 800670a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	4b42      	ldr	r3, [pc, #264]	; (800681c <HAL_ADC_Init+0x280>)
 8006714:	4013      	ands	r3, r2
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	69b9      	ldr	r1, [r7, #24]
 800671c:	430b      	orrs	r3, r1
 800671e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff ff25 	bl	8006574 <LL_ADC_INJ_IsConversionOngoing>
 800672a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d13d      	bne.n	80067ae <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d13a      	bne.n	80067ae <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800673c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006744:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006746:	4313      	orrs	r3, r2
 8006748:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006754:	f023 0302 	bic.w	r3, r3, #2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6812      	ldr	r2, [r2, #0]
 800675c:	69b9      	ldr	r1, [r7, #24]
 800675e:	430b      	orrs	r3, r1
 8006760:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006768:	2b01      	cmp	r3, #1
 800676a:	d118      	bne.n	800679e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006776:	f023 0304 	bic.w	r3, r3, #4
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006782:	4311      	orrs	r1, r2
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006788:	4311      	orrs	r1, r2
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800678e:	430a      	orrs	r2, r1
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0201 	orr.w	r2, r2, #1
 800679a:	611a      	str	r2, [r3, #16]
 800679c:	e007      	b.n	80067ae <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 0201 	bic.w	r2, r2, #1
 80067ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d10c      	bne.n	80067d0 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067bc:	f023 010f 	bic.w	r1, r3, #15
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	1e5a      	subs	r2, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	631a      	str	r2, [r3, #48]	; 0x30
 80067ce:	e007      	b.n	80067e0 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 020f 	bic.w	r2, r2, #15
 80067de:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e4:	f023 0303 	bic.w	r3, r3, #3
 80067e8:	f043 0201 	orr.w	r2, r3, #1
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	655a      	str	r2, [r3, #84]	; 0x54
 80067f0:	e007      	b.n	8006802 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f6:	f043 0210 	orr.w	r2, r3, #16
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006802:	7ffb      	ldrb	r3, [r7, #31]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3720      	adds	r7, #32
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20000038 	.word	0x20000038
 8006810:	053e2d63 	.word	0x053e2d63
 8006814:	50040000 	.word	0x50040000
 8006818:	50040300 	.word	0x50040300
 800681c:	fff0c007 	.word	0xfff0c007

08006820 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4618      	mov	r0, r3
 8006832:	f7ff fe8c 	bl	800654e <LL_ADC_REG_IsConversionOngoing>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d167      	bne.n	800690c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_ADC_Start_DMA+0x2a>
 8006846:	2302      	movs	r3, #2
 8006848:	e063      	b.n	8006912 <HAL_ADC_Start_DMA+0xf2>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 fe1c 	bl	8007490 <ADC_Enable>
 8006858:	4603      	mov	r3, r0
 800685a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d14f      	bne.n	8006902 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006866:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d006      	beq.n	8006890 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006886:	f023 0206 	bic.w	r2, r3, #6
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	659a      	str	r2, [r3, #88]	; 0x58
 800688e:	e002      	b.n	8006896 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800689a:	4a20      	ldr	r2, [pc, #128]	; (800691c <HAL_ADC_Start_DMA+0xfc>)
 800689c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a2:	4a1f      	ldr	r2, [pc, #124]	; (8006920 <HAL_ADC_Start_DMA+0x100>)
 80068a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068aa:	4a1e      	ldr	r2, [pc, #120]	; (8006924 <HAL_ADC_Start_DMA+0x104>)
 80068ac:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	221c      	movs	r2, #28
 80068b4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f042 0210 	orr.w	r2, r2, #16
 80068cc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f042 0201 	orr.w	r2, r2, #1
 80068dc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3340      	adds	r3, #64	; 0x40
 80068e8:	4619      	mov	r1, r3
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f001 f8e5 	bl	8007abc <HAL_DMA_Start_IT>
 80068f2:	4603      	mov	r3, r0
 80068f4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7ff fe13 	bl	8006526 <LL_ADC_REG_StartConversion>
 8006900:	e006      	b.n	8006910 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800690a:	e001      	b.n	8006910 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800690c:	2302      	movs	r3, #2
 800690e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006910:	7dfb      	ldrb	r3, [r7, #23]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	0800759d 	.word	0x0800759d
 8006920:	08007675 	.word	0x08007675
 8006924:	08007691 	.word	0x08007691

08006928 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006930:	2300      	movs	r3, #0
 8006932:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d017      	beq.n	800697e <HAL_ADC_IRQHandler+0x56>
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d012      	beq.n	800697e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b00      	cmp	r3, #0
 8006962:	d105      	bne.n	8006970 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006968:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fecf 	bl	8007714 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2202      	movs	r2, #2
 800697c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d004      	beq.n	8006992 <HAL_ADC_IRQHandler+0x6a>
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	2b00      	cmp	r3, #0
 8006990:	d109      	bne.n	80069a6 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006998:	2b00      	cmp	r3, #0
 800699a:	d05e      	beq.n	8006a5a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f003 0308 	and.w	r3, r3, #8
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d059      	beq.n	8006a5a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069aa:	f003 0310 	and.w	r3, r3, #16
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d105      	bne.n	80069be <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7ff fc99 	bl	80062fa <LL_ADC_REG_IsTriggerSourceSWStart>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d03e      	beq.n	8006a4c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d135      	bne.n	8006a4c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b08      	cmp	r3, #8
 80069ec:	d12e      	bne.n	8006a4c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff fdab 	bl	800654e <LL_ADC_REG_IsConversionOngoing>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d11a      	bne.n	8006a34 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f022 020c 	bic.w	r2, r2, #12
 8006a0c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d112      	bne.n	8006a4c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2a:	f043 0201 	orr.w	r2, r3, #1
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	655a      	str	r2, [r3, #84]	; 0x54
 8006a32:	e00b      	b.n	8006a4c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a38:	f043 0210 	orr.w	r2, r3, #16
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a44:	f043 0201 	orr.w	r2, r3, #1
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7fa fd7b 	bl	8001548 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	220c      	movs	r2, #12
 8006a58:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d004      	beq.n	8006a6e <HAL_ADC_IRQHandler+0x146>
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f003 0320 	and.w	r3, r3, #32
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d109      	bne.n	8006a82 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d072      	beq.n	8006b5e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d06d      	beq.n	8006b5e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d105      	bne.n	8006a9a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a92:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff fc6a 	bl	8006378 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006aa4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff fc25 	bl	80062fa <LL_ADC_REG_IsTriggerSourceSWStart>
 8006ab0:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d047      	beq.n	8006b50 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d007      	beq.n	8006ada <HAL_ADC_IRQHandler+0x1b2>
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d03f      	beq.n	8006b50 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d13a      	bne.n	8006b50 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae4:	2b40      	cmp	r3, #64	; 0x40
 8006ae6:	d133      	bne.n	8006b50 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d12e      	bne.n	8006b50 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7ff fd3c 	bl	8006574 <LL_ADC_INJ_IsConversionOngoing>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d11a      	bne.n	8006b38 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b10:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d112      	bne.n	8006b50 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2e:	f043 0201 	orr.w	r2, r3, #1
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	655a      	str	r2, [r3, #84]	; 0x54
 8006b36:	e00b      	b.n	8006b50 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b3c:	f043 0210 	orr.w	r2, r3, #16
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b48:	f043 0201 	orr.w	r2, r3, #1
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fdb7 	bl	80076c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2260      	movs	r2, #96	; 0x60
 8006b5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d011      	beq.n	8006b8c <HAL_ADC_IRQHandler+0x264>
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00c      	beq.n	8006b8c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f890 	bl	8006ca4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2280      	movs	r2, #128	; 0x80
 8006b8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d012      	beq.n	8006bbc <HAL_ADC_IRQHandler+0x294>
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00d      	beq.n	8006bbc <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fd9d 	bl	80076ec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d012      	beq.n	8006bec <HAL_ADC_IRQHandler+0x2c4>
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00d      	beq.n	8006bec <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fd8f 	bl	8007700 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	f003 0310 	and.w	r3, r3, #16
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d02a      	beq.n	8006c4c <HAL_ADC_IRQHandler+0x324>
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f003 0310 	and.w	r3, r3, #16
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d025      	beq.n	8006c4c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d102      	bne.n	8006c0e <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	61fb      	str	r3, [r7, #28]
 8006c0c:	e008      	b.n	8006c20 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d10e      	bne.n	8006c44 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c36:	f043 0202 	orr.w	r2, r3, #2
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f83a 	bl	8006cb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2210      	movs	r2, #16
 8006c4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d018      	beq.n	8006c88 <HAL_ADC_IRQHandler+0x360>
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d013      	beq.n	8006c88 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c64:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c70:	f043 0208 	orr.w	r2, r3, #8
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c80:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fd28 	bl	80076d8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006c88:	bf00      	nop
 8006c8a:	3720      	adds	r7, #32
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b0b6      	sub	sp, #216	; 0xd8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d101      	bne.n	8006cee <HAL_ADC_ConfigChannel+0x22>
 8006cea:	2302      	movs	r3, #2
 8006cec:	e3bb      	b.n	8007466 <HAL_ADC_ConfigChannel+0x79a>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff fc27 	bl	800654e <LL_ADC_REG_IsConversionOngoing>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f040 83a0 	bne.w	8007448 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	2b05      	cmp	r3, #5
 8006d16:	d824      	bhi.n	8006d62 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	3b02      	subs	r3, #2
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d81b      	bhi.n	8006d5a <HAL_ADC_ConfigChannel+0x8e>
 8006d22:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <HAL_ADC_ConfigChannel+0x5c>)
 8006d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d28:	08006d39 	.word	0x08006d39
 8006d2c:	08006d41 	.word	0x08006d41
 8006d30:	08006d49 	.word	0x08006d49
 8006d34:	08006d51 	.word	0x08006d51
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8006d38:	230c      	movs	r3, #12
 8006d3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006d3e:	e010      	b.n	8006d62 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8006d40:	2312      	movs	r3, #18
 8006d42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006d46:	e00c      	b.n	8006d62 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8006d48:	2318      	movs	r3, #24
 8006d4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006d4e:	e008      	b.n	8006d62 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8006d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006d58:	e003      	b.n	8006d62 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8006d5a:	2306      	movs	r3, #6
 8006d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006d60:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6818      	ldr	r0, [r3, #0]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006d70:	f7ff fad6 	bl	8006320 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7ff fbe8 	bl	800654e <LL_ADC_REG_IsConversionOngoing>
 8006d7e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7ff fbf4 	bl	8006574 <LL_ADC_INJ_IsConversionOngoing>
 8006d8c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006d90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f040 81a4 	bne.w	80070e2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006d9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f040 819f 	bne.w	80070e2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6818      	ldr	r0, [r3, #0]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	6819      	ldr	r1, [r3, #0]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	461a      	mov	r2, r3
 8006db2:	f7ff faf4 	bl	800639e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	695a      	ldr	r2, [r3, #20]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	08db      	lsrs	r3, r3, #3
 8006dc2:	f003 0303 	and.w	r3, r3, #3
 8006dc6:	005b      	lsls	r3, r3, #1
 8006dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	d00a      	beq.n	8006dee <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6818      	ldr	r0, [r3, #0]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	6919      	ldr	r1, [r3, #16]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006de8:	f7ff fa32 	bl	8006250 <LL_ADC_SetOffset>
 8006dec:	e179      	b.n	80070e2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2100      	movs	r1, #0
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7ff fa4f 	bl	8006298 <LL_ADC_GetOffsetChannel>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10a      	bne.n	8006e1a <HAL_ADC_ConfigChannel+0x14e>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2100      	movs	r1, #0
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7ff fa44 	bl	8006298 <LL_ADC_GetOffsetChannel>
 8006e10:	4603      	mov	r3, r0
 8006e12:	0e9b      	lsrs	r3, r3, #26
 8006e14:	f003 021f 	and.w	r2, r3, #31
 8006e18:	e01e      	b.n	8006e58 <HAL_ADC_ConfigChannel+0x18c>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2100      	movs	r1, #0
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff fa39 	bl	8006298 <LL_ADC_GetOffsetChannel>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e30:	fa93 f3a3 	rbit	r3, r3
 8006e34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006e38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006e40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8006e48:	2320      	movs	r3, #32
 8006e4a:	e004      	b.n	8006e56 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8006e4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e50:	fab3 f383 	clz	r3, r3
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d105      	bne.n	8006e70 <HAL_ADC_ConfigChannel+0x1a4>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	0e9b      	lsrs	r3, r3, #26
 8006e6a:	f003 031f 	and.w	r3, r3, #31
 8006e6e:	e018      	b.n	8006ea2 <HAL_ADC_ConfigChannel+0x1d6>
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e7c:	fa93 f3a3 	rbit	r3, r3
 8006e80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8006e84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8006e8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8006e94:	2320      	movs	r3, #32
 8006e96:	e004      	b.n	8006ea2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8006e98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e9c:	fab3 f383 	clz	r3, r3
 8006ea0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d106      	bne.n	8006eb4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	2100      	movs	r1, #0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7ff fa08 	bl	80062c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2101      	movs	r1, #1
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff f9ec 	bl	8006298 <LL_ADC_GetOffsetChannel>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10a      	bne.n	8006ee0 <HAL_ADC_ConfigChannel+0x214>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2101      	movs	r1, #1
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff f9e1 	bl	8006298 <LL_ADC_GetOffsetChannel>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	0e9b      	lsrs	r3, r3, #26
 8006eda:	f003 021f 	and.w	r2, r3, #31
 8006ede:	e01e      	b.n	8006f1e <HAL_ADC_ConfigChannel+0x252>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff f9d6 	bl	8006298 <LL_ADC_GetOffsetChannel>
 8006eec:	4603      	mov	r3, r0
 8006eee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ef2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ef6:	fa93 f3a3 	rbit	r3, r3
 8006efa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8006efe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8006f06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8006f0e:	2320      	movs	r3, #32
 8006f10:	e004      	b.n	8006f1c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8006f12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f16:	fab3 f383 	clz	r3, r3
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d105      	bne.n	8006f36 <HAL_ADC_ConfigChannel+0x26a>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	0e9b      	lsrs	r3, r3, #26
 8006f30:	f003 031f 	and.w	r3, r3, #31
 8006f34:	e018      	b.n	8006f68 <HAL_ADC_ConfigChannel+0x29c>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f42:	fa93 f3a3 	rbit	r3, r3
 8006f46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8006f4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8006f52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8006f5a:	2320      	movs	r3, #32
 8006f5c:	e004      	b.n	8006f68 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8006f5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f62:	fab3 f383 	clz	r3, r3
 8006f66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d106      	bne.n	8006f7a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2200      	movs	r2, #0
 8006f72:	2101      	movs	r1, #1
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7ff f9a5 	bl	80062c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2102      	movs	r1, #2
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff f989 	bl	8006298 <LL_ADC_GetOffsetChannel>
 8006f86:	4603      	mov	r3, r0
 8006f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10a      	bne.n	8006fa6 <HAL_ADC_ConfigChannel+0x2da>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2102      	movs	r1, #2
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7ff f97e 	bl	8006298 <LL_ADC_GetOffsetChannel>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	0e9b      	lsrs	r3, r3, #26
 8006fa0:	f003 021f 	and.w	r2, r3, #31
 8006fa4:	e01e      	b.n	8006fe4 <HAL_ADC_ConfigChannel+0x318>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2102      	movs	r1, #2
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7ff f973 	bl	8006298 <LL_ADC_GetOffsetChannel>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fbc:	fa93 f3a3 	rbit	r3, r3
 8006fc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8006fc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8006fcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8006fd4:	2320      	movs	r3, #32
 8006fd6:	e004      	b.n	8006fe2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8006fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fdc:	fab3 f383 	clz	r3, r3
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d105      	bne.n	8006ffc <HAL_ADC_ConfigChannel+0x330>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	0e9b      	lsrs	r3, r3, #26
 8006ff6:	f003 031f 	and.w	r3, r3, #31
 8006ffa:	e014      	b.n	8007026 <HAL_ADC_ConfigChannel+0x35a>
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007002:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007004:	fa93 f3a3 	rbit	r3, r3
 8007008:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800700a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800700c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8007010:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8007018:	2320      	movs	r3, #32
 800701a:	e004      	b.n	8007026 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800701c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007020:	fab3 f383 	clz	r3, r3
 8007024:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007026:	429a      	cmp	r2, r3
 8007028:	d106      	bne.n	8007038 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2200      	movs	r2, #0
 8007030:	2102      	movs	r1, #2
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff f946 	bl	80062c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2103      	movs	r1, #3
 800703e:	4618      	mov	r0, r3
 8007040:	f7ff f92a 	bl	8006298 <LL_ADC_GetOffsetChannel>
 8007044:	4603      	mov	r3, r0
 8007046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10a      	bne.n	8007064 <HAL_ADC_ConfigChannel+0x398>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2103      	movs	r1, #3
 8007054:	4618      	mov	r0, r3
 8007056:	f7ff f91f 	bl	8006298 <LL_ADC_GetOffsetChannel>
 800705a:	4603      	mov	r3, r0
 800705c:	0e9b      	lsrs	r3, r3, #26
 800705e:	f003 021f 	and.w	r2, r3, #31
 8007062:	e017      	b.n	8007094 <HAL_ADC_ConfigChannel+0x3c8>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2103      	movs	r1, #3
 800706a:	4618      	mov	r0, r3
 800706c:	f7ff f914 	bl	8006298 <LL_ADC_GetOffsetChannel>
 8007070:	4603      	mov	r3, r0
 8007072:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007076:	fa93 f3a3 	rbit	r3, r3
 800707a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800707c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800707e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8007080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8007086:	2320      	movs	r3, #32
 8007088:	e003      	b.n	8007092 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800708a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800708c:	fab3 f383 	clz	r3, r3
 8007090:	b2db      	uxtb	r3, r3
 8007092:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800709c:	2b00      	cmp	r3, #0
 800709e:	d105      	bne.n	80070ac <HAL_ADC_ConfigChannel+0x3e0>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	0e9b      	lsrs	r3, r3, #26
 80070a6:	f003 031f 	and.w	r3, r3, #31
 80070aa:	e011      	b.n	80070d0 <HAL_ADC_ConfigChannel+0x404>
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070b4:	fa93 f3a3 	rbit	r3, r3
 80070b8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80070ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070bc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80070be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80070c4:	2320      	movs	r3, #32
 80070c6:	e003      	b.n	80070d0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80070c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070ca:	fab3 f383 	clz	r3, r3
 80070ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d106      	bne.n	80070e2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2200      	movs	r2, #0
 80070da:	2103      	movs	r1, #3
 80070dc:	4618      	mov	r0, r3
 80070de:	f7ff f8f1 	bl	80062c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7ff fa0a 	bl	8006500 <LL_ADC_IsEnabled>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f040 8140 	bne.w	8007374 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6818      	ldr	r0, [r3, #0]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	6819      	ldr	r1, [r3, #0]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	461a      	mov	r2, r3
 8007102:	f7ff f977 	bl	80063f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	4a8f      	ldr	r2, [pc, #572]	; (8007348 <HAL_ADC_ConfigChannel+0x67c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	f040 8131 	bne.w	8007374 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10b      	bne.n	800713a <HAL_ADC_ConfigChannel+0x46e>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	0e9b      	lsrs	r3, r3, #26
 8007128:	3301      	adds	r3, #1
 800712a:	f003 031f 	and.w	r3, r3, #31
 800712e:	2b09      	cmp	r3, #9
 8007130:	bf94      	ite	ls
 8007132:	2301      	movls	r3, #1
 8007134:	2300      	movhi	r3, #0
 8007136:	b2db      	uxtb	r3, r3
 8007138:	e019      	b.n	800716e <HAL_ADC_ConfigChannel+0x4a2>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007142:	fa93 f3a3 	rbit	r3, r3
 8007146:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8007148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800714a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800714c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8007152:	2320      	movs	r3, #32
 8007154:	e003      	b.n	800715e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8007156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007158:	fab3 f383 	clz	r3, r3
 800715c:	b2db      	uxtb	r3, r3
 800715e:	3301      	adds	r3, #1
 8007160:	f003 031f 	and.w	r3, r3, #31
 8007164:	2b09      	cmp	r3, #9
 8007166:	bf94      	ite	ls
 8007168:	2301      	movls	r3, #1
 800716a:	2300      	movhi	r3, #0
 800716c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800716e:	2b00      	cmp	r3, #0
 8007170:	d079      	beq.n	8007266 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800717a:	2b00      	cmp	r3, #0
 800717c:	d107      	bne.n	800718e <HAL_ADC_ConfigChannel+0x4c2>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	0e9b      	lsrs	r3, r3, #26
 8007184:	3301      	adds	r3, #1
 8007186:	069b      	lsls	r3, r3, #26
 8007188:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800718c:	e015      	b.n	80071ba <HAL_ADC_ConfigChannel+0x4ee>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007196:	fa93 f3a3 	rbit	r3, r3
 800719a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800719c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800719e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80071a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80071a6:	2320      	movs	r3, #32
 80071a8:	e003      	b.n	80071b2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80071aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ac:	fab3 f383 	clz	r3, r3
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	3301      	adds	r3, #1
 80071b4:	069b      	lsls	r3, r3, #26
 80071b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d109      	bne.n	80071da <HAL_ADC_ConfigChannel+0x50e>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	0e9b      	lsrs	r3, r3, #26
 80071cc:	3301      	adds	r3, #1
 80071ce:	f003 031f 	and.w	r3, r3, #31
 80071d2:	2101      	movs	r1, #1
 80071d4:	fa01 f303 	lsl.w	r3, r1, r3
 80071d8:	e017      	b.n	800720a <HAL_ADC_ConfigChannel+0x53e>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071e2:	fa93 f3a3 	rbit	r3, r3
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80071e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ea:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80071ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80071f2:	2320      	movs	r3, #32
 80071f4:	e003      	b.n	80071fe <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80071f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071f8:	fab3 f383 	clz	r3, r3
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	3301      	adds	r3, #1
 8007200:	f003 031f 	and.w	r3, r3, #31
 8007204:	2101      	movs	r1, #1
 8007206:	fa01 f303 	lsl.w	r3, r1, r3
 800720a:	ea42 0103 	orr.w	r1, r2, r3
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10a      	bne.n	8007230 <HAL_ADC_ConfigChannel+0x564>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	0e9b      	lsrs	r3, r3, #26
 8007220:	3301      	adds	r3, #1
 8007222:	f003 021f 	and.w	r2, r3, #31
 8007226:	4613      	mov	r3, r2
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	4413      	add	r3, r2
 800722c:	051b      	lsls	r3, r3, #20
 800722e:	e018      	b.n	8007262 <HAL_ADC_ConfigChannel+0x596>
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007238:	fa93 f3a3 	rbit	r3, r3
 800723c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8007248:	2320      	movs	r3, #32
 800724a:	e003      	b.n	8007254 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800724c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724e:	fab3 f383 	clz	r3, r3
 8007252:	b2db      	uxtb	r3, r3
 8007254:	3301      	adds	r3, #1
 8007256:	f003 021f 	and.w	r2, r3, #31
 800725a:	4613      	mov	r3, r2
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	4413      	add	r3, r2
 8007260:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007262:	430b      	orrs	r3, r1
 8007264:	e081      	b.n	800736a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800726e:	2b00      	cmp	r3, #0
 8007270:	d107      	bne.n	8007282 <HAL_ADC_ConfigChannel+0x5b6>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	0e9b      	lsrs	r3, r3, #26
 8007278:	3301      	adds	r3, #1
 800727a:	069b      	lsls	r3, r3, #26
 800727c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007280:	e015      	b.n	80072ae <HAL_ADC_ConfigChannel+0x5e2>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728a:	fa93 f3a3 	rbit	r3, r3
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800729a:	2320      	movs	r3, #32
 800729c:	e003      	b.n	80072a6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	fab3 f383 	clz	r3, r3
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	3301      	adds	r3, #1
 80072a8:	069b      	lsls	r3, r3, #26
 80072aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d109      	bne.n	80072ce <HAL_ADC_ConfigChannel+0x602>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	0e9b      	lsrs	r3, r3, #26
 80072c0:	3301      	adds	r3, #1
 80072c2:	f003 031f 	and.w	r3, r3, #31
 80072c6:	2101      	movs	r1, #1
 80072c8:	fa01 f303 	lsl.w	r3, r1, r3
 80072cc:	e017      	b.n	80072fe <HAL_ADC_ConfigChannel+0x632>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	fa93 f3a3 	rbit	r3, r3
 80072da:	61bb      	str	r3, [r7, #24]
  return result;
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80072e6:	2320      	movs	r3, #32
 80072e8:	e003      	b.n	80072f2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	fab3 f383 	clz	r3, r3
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	3301      	adds	r3, #1
 80072f4:	f003 031f 	and.w	r3, r3, #31
 80072f8:	2101      	movs	r1, #1
 80072fa:	fa01 f303 	lsl.w	r3, r1, r3
 80072fe:	ea42 0103 	orr.w	r1, r2, r3
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10d      	bne.n	800732a <HAL_ADC_ConfigChannel+0x65e>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	0e9b      	lsrs	r3, r3, #26
 8007314:	3301      	adds	r3, #1
 8007316:	f003 021f 	and.w	r2, r3, #31
 800731a:	4613      	mov	r3, r2
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	4413      	add	r3, r2
 8007320:	3b1e      	subs	r3, #30
 8007322:	051b      	lsls	r3, r3, #20
 8007324:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007328:	e01e      	b.n	8007368 <HAL_ADC_ConfigChannel+0x69c>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	fa93 f3a3 	rbit	r3, r3
 8007336:	60fb      	str	r3, [r7, #12]
  return result;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d104      	bne.n	800734c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8007342:	2320      	movs	r3, #32
 8007344:	e006      	b.n	8007354 <HAL_ADC_ConfigChannel+0x688>
 8007346:	bf00      	nop
 8007348:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	fab3 f383 	clz	r3, r3
 8007352:	b2db      	uxtb	r3, r3
 8007354:	3301      	adds	r3, #1
 8007356:	f003 021f 	and.w	r2, r3, #31
 800735a:	4613      	mov	r3, r2
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	4413      	add	r3, r2
 8007360:	3b1e      	subs	r3, #30
 8007362:	051b      	lsls	r3, r3, #20
 8007364:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007368:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800736e:	4619      	mov	r1, r3
 8007370:	f7ff f815 	bl	800639e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	4b3d      	ldr	r3, [pc, #244]	; (8007470 <HAL_ADC_ConfigChannel+0x7a4>)
 800737a:	4013      	ands	r3, r2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d06c      	beq.n	800745a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007380:	483c      	ldr	r0, [pc, #240]	; (8007474 <HAL_ADC_ConfigChannel+0x7a8>)
 8007382:	f7fe ff57 	bl	8006234 <LL_ADC_GetCommonPathInternalCh>
 8007386:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a3a      	ldr	r2, [pc, #232]	; (8007478 <HAL_ADC_ConfigChannel+0x7ac>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d127      	bne.n	80073e4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007394:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007398:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d121      	bne.n	80073e4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a35      	ldr	r2, [pc, #212]	; (800747c <HAL_ADC_ConfigChannel+0x7b0>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d157      	bne.n	800745a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80073aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80073b2:	4619      	mov	r1, r3
 80073b4:	482f      	ldr	r0, [pc, #188]	; (8007474 <HAL_ADC_ConfigChannel+0x7a8>)
 80073b6:	f7fe ff2a 	bl	800620e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80073ba:	4b31      	ldr	r3, [pc, #196]	; (8007480 <HAL_ADC_ConfigChannel+0x7b4>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	099b      	lsrs	r3, r3, #6
 80073c0:	4a30      	ldr	r2, [pc, #192]	; (8007484 <HAL_ADC_ConfigChannel+0x7b8>)
 80073c2:	fba2 2303 	umull	r2, r3, r2, r3
 80073c6:	099b      	lsrs	r3, r3, #6
 80073c8:	1c5a      	adds	r2, r3, #1
 80073ca:	4613      	mov	r3, r2
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	4413      	add	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80073d4:	e002      	b.n	80073dc <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	3b01      	subs	r3, #1
 80073da:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1f9      	bne.n	80073d6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80073e2:	e03a      	b.n	800745a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a27      	ldr	r2, [pc, #156]	; (8007488 <HAL_ADC_ConfigChannel+0x7bc>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d113      	bne.n	8007416 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80073ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10d      	bne.n	8007416 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a1f      	ldr	r2, [pc, #124]	; (800747c <HAL_ADC_ConfigChannel+0x7b0>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d12a      	bne.n	800745a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007404:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007408:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800740c:	4619      	mov	r1, r3
 800740e:	4819      	ldr	r0, [pc, #100]	; (8007474 <HAL_ADC_ConfigChannel+0x7a8>)
 8007410:	f7fe fefd 	bl	800620e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007414:	e021      	b.n	800745a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a1c      	ldr	r2, [pc, #112]	; (800748c <HAL_ADC_ConfigChannel+0x7c0>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d11c      	bne.n	800745a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007420:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d116      	bne.n	800745a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a12      	ldr	r2, [pc, #72]	; (800747c <HAL_ADC_ConfigChannel+0x7b0>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d111      	bne.n	800745a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007436:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800743a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800743e:	4619      	mov	r1, r3
 8007440:	480c      	ldr	r0, [pc, #48]	; (8007474 <HAL_ADC_ConfigChannel+0x7a8>)
 8007442:	f7fe fee4 	bl	800620e <LL_ADC_SetCommonPathInternalCh>
 8007446:	e008      	b.n	800745a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744c:	f043 0220 	orr.w	r2, r3, #32
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007462:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007466:	4618      	mov	r0, r3
 8007468:	37d8      	adds	r7, #216	; 0xd8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	80080000 	.word	0x80080000
 8007474:	50040300 	.word	0x50040300
 8007478:	c7520000 	.word	0xc7520000
 800747c:	50040000 	.word	0x50040000
 8007480:	20000038 	.word	0x20000038
 8007484:	053e2d63 	.word	0x053e2d63
 8007488:	cb840000 	.word	0xcb840000
 800748c:	80000001 	.word	0x80000001

08007490 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007498:	2300      	movs	r3, #0
 800749a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7ff f82d 	bl	8006500 <LL_ADC_IsEnabled>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d169      	bne.n	8007580 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689a      	ldr	r2, [r3, #8]
 80074b2:	4b36      	ldr	r3, [pc, #216]	; (800758c <ADC_Enable+0xfc>)
 80074b4:	4013      	ands	r3, r2
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00d      	beq.n	80074d6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074be:	f043 0210 	orr.w	r2, r3, #16
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ca:	f043 0201 	orr.w	r2, r3, #1
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e055      	b.n	8007582 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe fffc 	bl	80064d8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80074e0:	482b      	ldr	r0, [pc, #172]	; (8007590 <ADC_Enable+0x100>)
 80074e2:	f7fe fea7 	bl	8006234 <LL_ADC_GetCommonPathInternalCh>
 80074e6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80074e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d013      	beq.n	8007518 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80074f0:	4b28      	ldr	r3, [pc, #160]	; (8007594 <ADC_Enable+0x104>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	099b      	lsrs	r3, r3, #6
 80074f6:	4a28      	ldr	r2, [pc, #160]	; (8007598 <ADC_Enable+0x108>)
 80074f8:	fba2 2303 	umull	r2, r3, r2, r3
 80074fc:	099b      	lsrs	r3, r3, #6
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	4613      	mov	r3, r2
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800750a:	e002      	b.n	8007512 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	3b01      	subs	r3, #1
 8007510:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1f9      	bne.n	800750c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007518:	f7fe fe36 	bl	8006188 <HAL_GetTick>
 800751c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800751e:	e028      	b.n	8007572 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4618      	mov	r0, r3
 8007526:	f7fe ffeb 	bl	8006500 <LL_ADC_IsEnabled>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d104      	bne.n	800753a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4618      	mov	r0, r3
 8007536:	f7fe ffcf 	bl	80064d8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800753a:	f7fe fe25 	bl	8006188 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d914      	bls.n	8007572 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b01      	cmp	r3, #1
 8007554:	d00d      	beq.n	8007572 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755a:	f043 0210 	orr.w	r2, r3, #16
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007566:	f043 0201 	orr.w	r2, r3, #1
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e007      	b.n	8007582 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b01      	cmp	r3, #1
 800757e:	d1cf      	bne.n	8007520 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	8000003f 	.word	0x8000003f
 8007590:	50040300 	.word	0x50040300
 8007594:	20000038 	.word	0x20000038
 8007598:	053e2d63 	.word	0x053e2d63

0800759c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d14b      	bne.n	800764e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0308 	and.w	r3, r3, #8
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d021      	beq.n	8007614 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe fe90 	bl	80062fa <LL_ADC_REG_IsTriggerSourceSWStart>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d032      	beq.n	8007646 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d12b      	bne.n	8007646 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d11f      	bne.n	8007646 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800760a:	f043 0201 	orr.w	r2, r3, #1
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	655a      	str	r2, [r3, #84]	; 0x54
 8007612:	e018      	b.n	8007646 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	2b00      	cmp	r3, #0
 8007620:	d111      	bne.n	8007646 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007632:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d105      	bne.n	8007646 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763e:	f043 0201 	orr.w	r2, r3, #1
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f7f9 ff7e 	bl	8001548 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800764c:	e00e      	b.n	800766c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007652:	f003 0310 	and.w	r3, r3, #16
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f7ff fb2c 	bl	8006cb8 <HAL_ADC_ErrorCallback>
}
 8007660:	e004      	b.n	800766c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	4798      	blx	r3
}
 800766c:	bf00      	nop
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007680:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f7ff fb04 	bl	8006c90 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007688:	bf00      	nop
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ae:	f043 0204 	orr.w	r2, r3, #4
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f7ff fafe 	bl	8006cb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80076bc:	bf00      	nop
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f003 0307 	and.w	r3, r3, #7
 8007736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007738:	4b0c      	ldr	r3, [pc, #48]	; (800776c <__NVIC_SetPriorityGrouping+0x44>)
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007744:	4013      	ands	r3, r2
 8007746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800775a:	4a04      	ldr	r2, [pc, #16]	; (800776c <__NVIC_SetPriorityGrouping+0x44>)
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	60d3      	str	r3, [r2, #12]
}
 8007760:	bf00      	nop
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	e000ed00 	.word	0xe000ed00

08007770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007770:	b480      	push	{r7}
 8007772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007774:	4b04      	ldr	r3, [pc, #16]	; (8007788 <__NVIC_GetPriorityGrouping+0x18>)
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	0a1b      	lsrs	r3, r3, #8
 800777a:	f003 0307 	and.w	r3, r3, #7
}
 800777e:	4618      	mov	r0, r3
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	e000ed00 	.word	0xe000ed00

0800778c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	4603      	mov	r3, r0
 8007794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800779a:	2b00      	cmp	r3, #0
 800779c:	db0b      	blt.n	80077b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800779e:	79fb      	ldrb	r3, [r7, #7]
 80077a0:	f003 021f 	and.w	r2, r3, #31
 80077a4:	4907      	ldr	r1, [pc, #28]	; (80077c4 <__NVIC_EnableIRQ+0x38>)
 80077a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077aa:	095b      	lsrs	r3, r3, #5
 80077ac:	2001      	movs	r0, #1
 80077ae:	fa00 f202 	lsl.w	r2, r0, r2
 80077b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80077b6:	bf00      	nop
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	e000e100 	.word	0xe000e100

080077c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	4603      	mov	r3, r0
 80077d0:	6039      	str	r1, [r7, #0]
 80077d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	db0a      	blt.n	80077f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	490c      	ldr	r1, [pc, #48]	; (8007814 <__NVIC_SetPriority+0x4c>)
 80077e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077e6:	0112      	lsls	r2, r2, #4
 80077e8:	b2d2      	uxtb	r2, r2
 80077ea:	440b      	add	r3, r1
 80077ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80077f0:	e00a      	b.n	8007808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	4908      	ldr	r1, [pc, #32]	; (8007818 <__NVIC_SetPriority+0x50>)
 80077f8:	79fb      	ldrb	r3, [r7, #7]
 80077fa:	f003 030f 	and.w	r3, r3, #15
 80077fe:	3b04      	subs	r3, #4
 8007800:	0112      	lsls	r2, r2, #4
 8007802:	b2d2      	uxtb	r2, r2
 8007804:	440b      	add	r3, r1
 8007806:	761a      	strb	r2, [r3, #24]
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	e000e100 	.word	0xe000e100
 8007818:	e000ed00 	.word	0xe000ed00

0800781c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800781c:	b480      	push	{r7}
 800781e:	b089      	sub	sp, #36	; 0x24
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f003 0307 	and.w	r3, r3, #7
 800782e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	f1c3 0307 	rsb	r3, r3, #7
 8007836:	2b04      	cmp	r3, #4
 8007838:	bf28      	it	cs
 800783a:	2304      	movcs	r3, #4
 800783c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	3304      	adds	r3, #4
 8007842:	2b06      	cmp	r3, #6
 8007844:	d902      	bls.n	800784c <NVIC_EncodePriority+0x30>
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	3b03      	subs	r3, #3
 800784a:	e000      	b.n	800784e <NVIC_EncodePriority+0x32>
 800784c:	2300      	movs	r3, #0
 800784e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007850:	f04f 32ff 	mov.w	r2, #4294967295
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	fa02 f303 	lsl.w	r3, r2, r3
 800785a:	43da      	mvns	r2, r3
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	401a      	ands	r2, r3
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007864:	f04f 31ff 	mov.w	r1, #4294967295
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	fa01 f303 	lsl.w	r3, r1, r3
 800786e:	43d9      	mvns	r1, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007874:	4313      	orrs	r3, r2
         );
}
 8007876:	4618      	mov	r0, r3
 8007878:	3724      	adds	r7, #36	; 0x24
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
	...

08007884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3b01      	subs	r3, #1
 8007890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007894:	d301      	bcc.n	800789a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007896:	2301      	movs	r3, #1
 8007898:	e00f      	b.n	80078ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800789a:	4a0a      	ldr	r2, [pc, #40]	; (80078c4 <SysTick_Config+0x40>)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3b01      	subs	r3, #1
 80078a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80078a2:	210f      	movs	r1, #15
 80078a4:	f04f 30ff 	mov.w	r0, #4294967295
 80078a8:	f7ff ff8e 	bl	80077c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80078ac:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <SysTick_Config+0x40>)
 80078ae:	2200      	movs	r2, #0
 80078b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80078b2:	4b04      	ldr	r3, [pc, #16]	; (80078c4 <SysTick_Config+0x40>)
 80078b4:	2207      	movs	r2, #7
 80078b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	e000e010 	.word	0xe000e010

080078c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff ff29 	bl	8007728 <__NVIC_SetPriorityGrouping>
}
 80078d6:	bf00      	nop
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b086      	sub	sp, #24
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	4603      	mov	r3, r0
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	607a      	str	r2, [r7, #4]
 80078ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80078ec:	2300      	movs	r3, #0
 80078ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80078f0:	f7ff ff3e 	bl	8007770 <__NVIC_GetPriorityGrouping>
 80078f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	68b9      	ldr	r1, [r7, #8]
 80078fa:	6978      	ldr	r0, [r7, #20]
 80078fc:	f7ff ff8e 	bl	800781c <NVIC_EncodePriority>
 8007900:	4602      	mov	r2, r0
 8007902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007906:	4611      	mov	r1, r2
 8007908:	4618      	mov	r0, r3
 800790a:	f7ff ff5d 	bl	80077c8 <__NVIC_SetPriority>
}
 800790e:	bf00      	nop
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b082      	sub	sp, #8
 800791a:	af00      	add	r7, sp, #0
 800791c:	4603      	mov	r3, r0
 800791e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007924:	4618      	mov	r0, r3
 8007926:	f7ff ff31 	bl	800778c <__NVIC_EnableIRQ>
}
 800792a:	bf00      	nop
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7ff ffa2 	bl	8007884 <SysTick_Config>
 8007940:	4603      	mov	r3, r0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
	...

0800794c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e098      	b.n	8007a90 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	461a      	mov	r2, r3
 8007964:	4b4d      	ldr	r3, [pc, #308]	; (8007a9c <HAL_DMA_Init+0x150>)
 8007966:	429a      	cmp	r2, r3
 8007968:	d80f      	bhi.n	800798a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	4b4b      	ldr	r3, [pc, #300]	; (8007aa0 <HAL_DMA_Init+0x154>)
 8007972:	4413      	add	r3, r2
 8007974:	4a4b      	ldr	r2, [pc, #300]	; (8007aa4 <HAL_DMA_Init+0x158>)
 8007976:	fba2 2303 	umull	r2, r3, r2, r3
 800797a:	091b      	lsrs	r3, r3, #4
 800797c:	009a      	lsls	r2, r3, #2
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a48      	ldr	r2, [pc, #288]	; (8007aa8 <HAL_DMA_Init+0x15c>)
 8007986:	641a      	str	r2, [r3, #64]	; 0x40
 8007988:	e00e      	b.n	80079a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	4b46      	ldr	r3, [pc, #280]	; (8007aac <HAL_DMA_Init+0x160>)
 8007992:	4413      	add	r3, r2
 8007994:	4a43      	ldr	r2, [pc, #268]	; (8007aa4 <HAL_DMA_Init+0x158>)
 8007996:	fba2 2303 	umull	r2, r3, r2, r3
 800799a:	091b      	lsrs	r3, r3, #4
 800799c:	009a      	lsls	r2, r3, #2
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a42      	ldr	r2, [pc, #264]	; (8007ab0 <HAL_DMA_Init+0x164>)
 80079a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80079be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80079cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a02:	d039      	beq.n	8007a78 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a08:	4a27      	ldr	r2, [pc, #156]	; (8007aa8 <HAL_DMA_Init+0x15c>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d11a      	bne.n	8007a44 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007a0e:	4b29      	ldr	r3, [pc, #164]	; (8007ab4 <HAL_DMA_Init+0x168>)
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a16:	f003 031c 	and.w	r3, r3, #28
 8007a1a:	210f      	movs	r1, #15
 8007a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a20:	43db      	mvns	r3, r3
 8007a22:	4924      	ldr	r1, [pc, #144]	; (8007ab4 <HAL_DMA_Init+0x168>)
 8007a24:	4013      	ands	r3, r2
 8007a26:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007a28:	4b22      	ldr	r3, [pc, #136]	; (8007ab4 <HAL_DMA_Init+0x168>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6859      	ldr	r1, [r3, #4]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a34:	f003 031c 	and.w	r3, r3, #28
 8007a38:	fa01 f303 	lsl.w	r3, r1, r3
 8007a3c:	491d      	ldr	r1, [pc, #116]	; (8007ab4 <HAL_DMA_Init+0x168>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	600b      	str	r3, [r1, #0]
 8007a42:	e019      	b.n	8007a78 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007a44:	4b1c      	ldr	r3, [pc, #112]	; (8007ab8 <HAL_DMA_Init+0x16c>)
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a4c:	f003 031c 	and.w	r3, r3, #28
 8007a50:	210f      	movs	r1, #15
 8007a52:	fa01 f303 	lsl.w	r3, r1, r3
 8007a56:	43db      	mvns	r3, r3
 8007a58:	4917      	ldr	r1, [pc, #92]	; (8007ab8 <HAL_DMA_Init+0x16c>)
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007a5e:	4b16      	ldr	r3, [pc, #88]	; (8007ab8 <HAL_DMA_Init+0x16c>)
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6859      	ldr	r1, [r3, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6a:	f003 031c 	and.w	r3, r3, #28
 8007a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a72:	4911      	ldr	r1, [pc, #68]	; (8007ab8 <HAL_DMA_Init+0x16c>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr
 8007a9c:	40020407 	.word	0x40020407
 8007aa0:	bffdfff8 	.word	0xbffdfff8
 8007aa4:	cccccccd 	.word	0xcccccccd
 8007aa8:	40020000 	.word	0x40020000
 8007aac:	bffdfbf8 	.word	0xbffdfbf8
 8007ab0:	40020400 	.word	0x40020400
 8007ab4:	400200a8 	.word	0x400200a8
 8007ab8:	400204a8 	.word	0x400204a8

08007abc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
 8007ac8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d101      	bne.n	8007adc <HAL_DMA_Start_IT+0x20>
 8007ad8:	2302      	movs	r3, #2
 8007ada:	e04b      	b.n	8007b74 <HAL_DMA_Start_IT+0xb8>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d13a      	bne.n	8007b66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0201 	bic.w	r2, r2, #1
 8007b0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	68b9      	ldr	r1, [r7, #8]
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 f96b 	bl	8007df0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d008      	beq.n	8007b34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f042 020e 	orr.w	r2, r2, #14
 8007b30:	601a      	str	r2, [r3, #0]
 8007b32:	e00f      	b.n	8007b54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 0204 	bic.w	r2, r2, #4
 8007b42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f042 020a 	orr.w	r2, r2, #10
 8007b52:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f042 0201 	orr.w	r2, r2, #1
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	e005      	b.n	8007b72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007b6e:	2302      	movs	r3, #2
 8007b70:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d008      	beq.n	8007ba6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2204      	movs	r2, #4
 8007b98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e022      	b.n	8007bec <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f022 020e 	bic.w	r2, r2, #14
 8007bb4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 0201 	bic.w	r2, r2, #1
 8007bc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bca:	f003 021c 	and.w	r2, r3, #28
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8007bd8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d005      	beq.n	8007c1c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2204      	movs	r2, #4
 8007c14:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	73fb      	strb	r3, [r7, #15]
 8007c1a:	e029      	b.n	8007c70 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 020e 	bic.w	r2, r2, #14
 8007c2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f022 0201 	bic.w	r2, r2, #1
 8007c3a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c40:	f003 021c 	and.w	r2, r3, #28
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c48:	2101      	movs	r1, #1
 8007c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8007c4e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d003      	beq.n	8007c70 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	4798      	blx	r3
    }
  }
  return status;
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c96:	f003 031c 	and.w	r3, r3, #28
 8007c9a:	2204      	movs	r2, #4
 8007c9c:	409a      	lsls	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d026      	beq.n	8007cf4 <HAL_DMA_IRQHandler+0x7a>
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	f003 0304 	and.w	r3, r3, #4
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d021      	beq.n	8007cf4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d107      	bne.n	8007cce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0204 	bic.w	r2, r2, #4
 8007ccc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd2:	f003 021c 	and.w	r2, r3, #28
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cda:	2104      	movs	r1, #4
 8007cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8007ce0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d071      	beq.n	8007dce <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007cf2:	e06c      	b.n	8007dce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf8:	f003 031c 	and.w	r3, r3, #28
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	409a      	lsls	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	4013      	ands	r3, r2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d02e      	beq.n	8007d66 <HAL_DMA_IRQHandler+0xec>
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d029      	beq.n	8007d66 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0320 	and.w	r3, r3, #32
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10b      	bne.n	8007d38 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f022 020a 	bic.w	r2, r2, #10
 8007d2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d3c:	f003 021c 	and.w	r2, r3, #28
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d44:	2102      	movs	r1, #2
 8007d46:	fa01 f202 	lsl.w	r2, r1, r2
 8007d4a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d038      	beq.n	8007dce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007d64:	e033      	b.n	8007dce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6a:	f003 031c 	and.w	r3, r3, #28
 8007d6e:	2208      	movs	r2, #8
 8007d70:	409a      	lsls	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4013      	ands	r3, r2
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d02a      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x156>
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	f003 0308 	and.w	r3, r3, #8
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d025      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 020e 	bic.w	r2, r2, #14
 8007d92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d98:	f003 021c 	and.w	r2, r3, #28
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da0:	2101      	movs	r1, #1
 8007da2:	fa01 f202 	lsl.w	r2, r1, r2
 8007da6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d004      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007dce:	bf00      	nop
 8007dd0:	bf00      	nop
}
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e02:	f003 021c 	and.w	r2, r3, #28
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8007e10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	2b10      	cmp	r3, #16
 8007e20:	d108      	bne.n	8007e34 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007e32:	e007      	b.n	8007e44 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	60da      	str	r2, [r3, #12]
}
 8007e44:	bf00      	nop
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b087      	sub	sp, #28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007e5e:	e148      	b.n	80080f2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	2101      	movs	r1, #1
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	fa01 f303 	lsl.w	r3, r1, r3
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 813a 	beq.w	80080ec <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f003 0303 	and.w	r3, r3, #3
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d005      	beq.n	8007e90 <HAL_GPIO_Init+0x40>
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d130      	bne.n	8007ef2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	2203      	movs	r2, #3
 8007e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea0:	43db      	mvns	r3, r3
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	68da      	ldr	r2, [r3, #12]
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ece:	43db      	mvns	r3, r3
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	091b      	lsrs	r3, r3, #4
 8007edc:	f003 0201 	and.w	r2, r3, #1
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f003 0303 	and.w	r3, r3, #3
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d017      	beq.n	8007f2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	2203      	movs	r2, #3
 8007f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0e:	43db      	mvns	r3, r3
 8007f10:	693a      	ldr	r2, [r7, #16]
 8007f12:	4013      	ands	r3, r2
 8007f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	689a      	ldr	r2, [r3, #8]
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f003 0303 	and.w	r3, r3, #3
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d123      	bne.n	8007f82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	08da      	lsrs	r2, r3, #3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	3208      	adds	r2, #8
 8007f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f003 0307 	and.w	r3, r3, #7
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	220f      	movs	r2, #15
 8007f52:	fa02 f303 	lsl.w	r3, r2, r3
 8007f56:	43db      	mvns	r3, r3
 8007f58:	693a      	ldr	r2, [r7, #16]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	691a      	ldr	r2, [r3, #16]
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f003 0307 	and.w	r3, r3, #7
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	08da      	lsrs	r2, r3, #3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3208      	adds	r2, #8
 8007f7c:	6939      	ldr	r1, [r7, #16]
 8007f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	005b      	lsls	r3, r3, #1
 8007f8c:	2203      	movs	r2, #3
 8007f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f92:	43db      	mvns	r3, r3
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	4013      	ands	r3, r2
 8007f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f003 0203 	and.w	r2, r3, #3
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	005b      	lsls	r3, r3, #1
 8007fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f000 8094 	beq.w	80080ec <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fc4:	4b52      	ldr	r3, [pc, #328]	; (8008110 <HAL_GPIO_Init+0x2c0>)
 8007fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc8:	4a51      	ldr	r2, [pc, #324]	; (8008110 <HAL_GPIO_Init+0x2c0>)
 8007fca:	f043 0301 	orr.w	r3, r3, #1
 8007fce:	6613      	str	r3, [r2, #96]	; 0x60
 8007fd0:	4b4f      	ldr	r3, [pc, #316]	; (8008110 <HAL_GPIO_Init+0x2c0>)
 8007fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	60bb      	str	r3, [r7, #8]
 8007fda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007fdc:	4a4d      	ldr	r2, [pc, #308]	; (8008114 <HAL_GPIO_Init+0x2c4>)
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	089b      	lsrs	r3, r3, #2
 8007fe2:	3302      	adds	r3, #2
 8007fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f003 0303 	and.w	r3, r3, #3
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	220f      	movs	r2, #15
 8007ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff8:	43db      	mvns	r3, r3
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008006:	d00d      	beq.n	8008024 <HAL_GPIO_Init+0x1d4>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a43      	ldr	r2, [pc, #268]	; (8008118 <HAL_GPIO_Init+0x2c8>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d007      	beq.n	8008020 <HAL_GPIO_Init+0x1d0>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a42      	ldr	r2, [pc, #264]	; (800811c <HAL_GPIO_Init+0x2cc>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d101      	bne.n	800801c <HAL_GPIO_Init+0x1cc>
 8008018:	2302      	movs	r3, #2
 800801a:	e004      	b.n	8008026 <HAL_GPIO_Init+0x1d6>
 800801c:	2307      	movs	r3, #7
 800801e:	e002      	b.n	8008026 <HAL_GPIO_Init+0x1d6>
 8008020:	2301      	movs	r3, #1
 8008022:	e000      	b.n	8008026 <HAL_GPIO_Init+0x1d6>
 8008024:	2300      	movs	r3, #0
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	f002 0203 	and.w	r2, r2, #3
 800802c:	0092      	lsls	r2, r2, #2
 800802e:	4093      	lsls	r3, r2
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	4313      	orrs	r3, r2
 8008034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008036:	4937      	ldr	r1, [pc, #220]	; (8008114 <HAL_GPIO_Init+0x2c4>)
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	089b      	lsrs	r3, r3, #2
 800803c:	3302      	adds	r3, #2
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008044:	4b36      	ldr	r3, [pc, #216]	; (8008120 <HAL_GPIO_Init+0x2d0>)
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	43db      	mvns	r3, r3
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	4013      	ands	r3, r2
 8008052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	4313      	orrs	r3, r2
 8008066:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008068:	4a2d      	ldr	r2, [pc, #180]	; (8008120 <HAL_GPIO_Init+0x2d0>)
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800806e:	4b2c      	ldr	r3, [pc, #176]	; (8008120 <HAL_GPIO_Init+0x2d0>)
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	43db      	mvns	r3, r3
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	4013      	ands	r3, r2
 800807c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4313      	orrs	r3, r2
 8008090:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008092:	4a23      	ldr	r2, [pc, #140]	; (8008120 <HAL_GPIO_Init+0x2d0>)
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008098:	4b21      	ldr	r3, [pc, #132]	; (8008120 <HAL_GPIO_Init+0x2d0>)
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	43db      	mvns	r3, r3
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	4013      	ands	r3, r2
 80080a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80080bc:	4a18      	ldr	r2, [pc, #96]	; (8008120 <HAL_GPIO_Init+0x2d0>)
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80080c2:	4b17      	ldr	r3, [pc, #92]	; (8008120 <HAL_GPIO_Init+0x2d0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	43db      	mvns	r3, r3
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	4013      	ands	r3, r2
 80080d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80080e6:	4a0e      	ldr	r2, [pc, #56]	; (8008120 <HAL_GPIO_Init+0x2d0>)
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	3301      	adds	r3, #1
 80080f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	fa22 f303 	lsr.w	r3, r2, r3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f47f aeaf 	bne.w	8007e60 <HAL_GPIO_Init+0x10>
  }
}
 8008102:	bf00      	nop
 8008104:	bf00      	nop
 8008106:	371c      	adds	r7, #28
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	40021000 	.word	0x40021000
 8008114:	40010000 	.word	0x40010000
 8008118:	48000400 	.word	0x48000400
 800811c:	48000800 	.word	0x48000800
 8008120:	40010400 	.word	0x40010400

08008124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	807b      	strh	r3, [r7, #2]
 8008130:	4613      	mov	r3, r2
 8008132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008134:	787b      	ldrb	r3, [r7, #1]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800813a:	887a      	ldrh	r2, [r7, #2]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008140:	e002      	b.n	8008148 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008142:	887a      	ldrh	r2, [r7, #2]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	4603      	mov	r3, r0
 800815c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800815e:	4b08      	ldr	r3, [pc, #32]	; (8008180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008160:	695a      	ldr	r2, [r3, #20]
 8008162:	88fb      	ldrh	r3, [r7, #6]
 8008164:	4013      	ands	r3, r2
 8008166:	2b00      	cmp	r3, #0
 8008168:	d006      	beq.n	8008178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800816a:	4a05      	ldr	r2, [pc, #20]	; (8008180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800816c:	88fb      	ldrh	r3, [r7, #6]
 800816e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008170:	88fb      	ldrh	r3, [r7, #6]
 8008172:	4618      	mov	r0, r3
 8008174:	f7f9 fca0 	bl	8001ab8 <HAL_GPIO_EXTI_Callback>
  }
}
 8008178:	bf00      	nop
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	40010400 	.word	0x40010400

08008184 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e08d      	b.n	80082b2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d106      	bne.n	80081b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7f9 fbc6 	bl	800193c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2224      	movs	r2, #36	; 0x24
 80081b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 0201 	bic.w	r2, r2, #1
 80081c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80081d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d107      	bne.n	80081fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	689a      	ldr	r2, [r3, #8]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081fa:	609a      	str	r2, [r3, #8]
 80081fc:	e006      	b.n	800820c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	689a      	ldr	r2, [r3, #8]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800820a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	2b02      	cmp	r3, #2
 8008212:	d108      	bne.n	8008226 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008222:	605a      	str	r2, [r3, #4]
 8008224:	e007      	b.n	8008236 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008234:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	6812      	ldr	r2, [r2, #0]
 8008240:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008248:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68da      	ldr	r2, [r3, #12]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008258:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	691a      	ldr	r2, [r3, #16]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	430a      	orrs	r2, r1
 8008272:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	69d9      	ldr	r1, [r3, #28]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a1a      	ldr	r2, [r3, #32]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	430a      	orrs	r2, r1
 8008282:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0201 	orr.w	r2, r2, #1
 8008292:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2220      	movs	r2, #32
 800829e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b088      	sub	sp, #32
 80082c0:	af02      	add	r7, sp, #8
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	607a      	str	r2, [r7, #4]
 80082c6:	461a      	mov	r2, r3
 80082c8:	460b      	mov	r3, r1
 80082ca:	817b      	strh	r3, [r7, #10]
 80082cc:	4613      	mov	r3, r2
 80082ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b20      	cmp	r3, #32
 80082da:	f040 80fd 	bne.w	80084d8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d101      	bne.n	80082ec <HAL_I2C_Master_Transmit+0x30>
 80082e8:	2302      	movs	r3, #2
 80082ea:	e0f6      	b.n	80084da <HAL_I2C_Master_Transmit+0x21e>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80082f4:	f7fd ff48 	bl	8006188 <HAL_GetTick>
 80082f8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	2319      	movs	r3, #25
 8008300:	2201      	movs	r2, #1
 8008302:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 fdea 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e0e1      	b.n	80084da <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2221      	movs	r2, #33	; 0x21
 800831a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2210      	movs	r2, #16
 8008322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	893a      	ldrh	r2, [r7, #8]
 8008336:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008342:	b29b      	uxth	r3, r3
 8008344:	2bff      	cmp	r3, #255	; 0xff
 8008346:	d906      	bls.n	8008356 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	22ff      	movs	r2, #255	; 0xff
 800834c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800834e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008352:	617b      	str	r3, [r7, #20]
 8008354:	e007      	b.n	8008366 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800835a:	b29a      	uxth	r2, r3
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008360:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008364:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800836a:	2b00      	cmp	r3, #0
 800836c:	d024      	beq.n	80083b8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008372:	781a      	ldrb	r2, [r3, #0]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008388:	b29b      	uxth	r3, r3
 800838a:	3b01      	subs	r3, #1
 800838c:	b29a      	uxth	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008396:	3b01      	subs	r3, #1
 8008398:	b29a      	uxth	r2, r3
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	3301      	adds	r3, #1
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	8979      	ldrh	r1, [r7, #10]
 80083aa:	4b4e      	ldr	r3, [pc, #312]	; (80084e4 <HAL_I2C_Master_Transmit+0x228>)
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f000 ffd1 	bl	8009358 <I2C_TransferConfig>
 80083b6:	e066      	b.n	8008486 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	8979      	ldrh	r1, [r7, #10]
 80083c0:	4b48      	ldr	r3, [pc, #288]	; (80084e4 <HAL_I2C_Master_Transmit+0x228>)
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f000 ffc6 	bl	8009358 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80083cc:	e05b      	b.n	8008486 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	6a39      	ldr	r1, [r7, #32]
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f000 fdd3 	bl	8008f7e <I2C_WaitOnTXISFlagUntilTimeout>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e07b      	b.n	80084da <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e6:	781a      	ldrb	r2, [r3, #0]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	1c5a      	adds	r2, r3, #1
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	3b01      	subs	r3, #1
 8008400:	b29a      	uxth	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800840a:	3b01      	subs	r3, #1
 800840c:	b29a      	uxth	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008416:	b29b      	uxth	r3, r3
 8008418:	2b00      	cmp	r3, #0
 800841a:	d034      	beq.n	8008486 <HAL_I2C_Master_Transmit+0x1ca>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008420:	2b00      	cmp	r3, #0
 8008422:	d130      	bne.n	8008486 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	2200      	movs	r2, #0
 800842c:	2180      	movs	r1, #128	; 0x80
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f000 fd56 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e04d      	b.n	80084da <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008442:	b29b      	uxth	r3, r3
 8008444:	2bff      	cmp	r3, #255	; 0xff
 8008446:	d90e      	bls.n	8008466 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	22ff      	movs	r2, #255	; 0xff
 800844c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008452:	b2da      	uxtb	r2, r3
 8008454:	8979      	ldrh	r1, [r7, #10]
 8008456:	2300      	movs	r3, #0
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 ff7a 	bl	8009358 <I2C_TransferConfig>
 8008464:	e00f      	b.n	8008486 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800846a:	b29a      	uxth	r2, r3
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008474:	b2da      	uxtb	r2, r3
 8008476:	8979      	ldrh	r1, [r7, #10]
 8008478:	2300      	movs	r3, #0
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 ff69 	bl	8009358 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800848a:	b29b      	uxth	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	d19e      	bne.n	80083ce <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	6a39      	ldr	r1, [r7, #32]
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 fdb9 	bl	800900c <I2C_WaitOnSTOPFlagUntilTimeout>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e01a      	b.n	80084da <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2220      	movs	r2, #32
 80084aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6859      	ldr	r1, [r3, #4]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	4b0c      	ldr	r3, [pc, #48]	; (80084e8 <HAL_I2C_Master_Transmit+0x22c>)
 80084b8:	400b      	ands	r3, r1
 80084ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2220      	movs	r2, #32
 80084c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	e000      	b.n	80084da <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80084d8:	2302      	movs	r3, #2
  }
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3718      	adds	r7, #24
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	80002000 	.word	0x80002000
 80084e8:	fe00e800 	.word	0xfe00e800

080084ec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b088      	sub	sp, #32
 80084f0:	af02      	add	r7, sp, #8
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	607a      	str	r2, [r7, #4]
 80084f6:	461a      	mov	r2, r3
 80084f8:	460b      	mov	r3, r1
 80084fa:	817b      	strh	r3, [r7, #10]
 80084fc:	4613      	mov	r3, r2
 80084fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b20      	cmp	r3, #32
 800850a:	f040 80db 	bne.w	80086c4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008514:	2b01      	cmp	r3, #1
 8008516:	d101      	bne.n	800851c <HAL_I2C_Master_Receive+0x30>
 8008518:	2302      	movs	r3, #2
 800851a:	e0d4      	b.n	80086c6 <HAL_I2C_Master_Receive+0x1da>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008524:	f7fd fe30 	bl	8006188 <HAL_GetTick>
 8008528:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	2319      	movs	r3, #25
 8008530:	2201      	movs	r2, #1
 8008532:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 fcd2 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e0bf      	b.n	80086c6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2222      	movs	r2, #34	; 0x22
 800854a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2210      	movs	r2, #16
 8008552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	893a      	ldrh	r2, [r7, #8]
 8008566:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008572:	b29b      	uxth	r3, r3
 8008574:	2bff      	cmp	r3, #255	; 0xff
 8008576:	d90e      	bls.n	8008596 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	22ff      	movs	r2, #255	; 0xff
 800857c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008582:	b2da      	uxtb	r2, r3
 8008584:	8979      	ldrh	r1, [r7, #10]
 8008586:	4b52      	ldr	r3, [pc, #328]	; (80086d0 <HAL_I2C_Master_Receive+0x1e4>)
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f000 fee2 	bl	8009358 <I2C_TransferConfig>
 8008594:	e06d      	b.n	8008672 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800859a:	b29a      	uxth	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085a4:	b2da      	uxtb	r2, r3
 80085a6:	8979      	ldrh	r1, [r7, #10]
 80085a8:	4b49      	ldr	r3, [pc, #292]	; (80086d0 <HAL_I2C_Master_Receive+0x1e4>)
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f000 fed1 	bl	8009358 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80085b6:	e05c      	b.n	8008672 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	6a39      	ldr	r1, [r7, #32]
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f000 fd69 	bl	8009094 <I2C_WaitOnRXNEFlagUntilTimeout>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e07c      	b.n	80086c6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	b2d2      	uxtb	r2, r2
 80085d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085e8:	3b01      	subs	r3, #1
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	3b01      	subs	r3, #1
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008602:	b29b      	uxth	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	d034      	beq.n	8008672 <HAL_I2C_Master_Receive+0x186>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800860c:	2b00      	cmp	r3, #0
 800860e:	d130      	bne.n	8008672 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	6a3b      	ldr	r3, [r7, #32]
 8008616:	2200      	movs	r2, #0
 8008618:	2180      	movs	r1, #128	; 0x80
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 fc60 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e04d      	b.n	80086c6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800862e:	b29b      	uxth	r3, r3
 8008630:	2bff      	cmp	r3, #255	; 0xff
 8008632:	d90e      	bls.n	8008652 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	22ff      	movs	r2, #255	; 0xff
 8008638:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800863e:	b2da      	uxtb	r2, r3
 8008640:	8979      	ldrh	r1, [r7, #10]
 8008642:	2300      	movs	r3, #0
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 fe84 	bl	8009358 <I2C_TransferConfig>
 8008650:	e00f      	b.n	8008672 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008656:	b29a      	uxth	r2, r3
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008660:	b2da      	uxtb	r2, r3
 8008662:	8979      	ldrh	r1, [r7, #10]
 8008664:	2300      	movs	r3, #0
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f000 fe73 	bl	8009358 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008676:	b29b      	uxth	r3, r3
 8008678:	2b00      	cmp	r3, #0
 800867a:	d19d      	bne.n	80085b8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	6a39      	ldr	r1, [r7, #32]
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 fcc3 	bl	800900c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d001      	beq.n	8008690 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	e01a      	b.n	80086c6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2220      	movs	r2, #32
 8008696:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6859      	ldr	r1, [r3, #4]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	4b0c      	ldr	r3, [pc, #48]	; (80086d4 <HAL_I2C_Master_Receive+0x1e8>)
 80086a4:	400b      	ands	r3, r1
 80086a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2220      	movs	r2, #32
 80086ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	e000      	b.n	80086c6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80086c4:	2302      	movs	r3, #2
  }
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	80002400 	.word	0x80002400
 80086d4:	fe00e800 	.word	0xfe00e800

080086d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af02      	add	r7, sp, #8
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	4608      	mov	r0, r1
 80086e2:	4611      	mov	r1, r2
 80086e4:	461a      	mov	r2, r3
 80086e6:	4603      	mov	r3, r0
 80086e8:	817b      	strh	r3, [r7, #10]
 80086ea:	460b      	mov	r3, r1
 80086ec:	813b      	strh	r3, [r7, #8]
 80086ee:	4613      	mov	r3, r2
 80086f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b20      	cmp	r3, #32
 80086fc:	f040 80f9 	bne.w	80088f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d002      	beq.n	800870c <HAL_I2C_Mem_Write+0x34>
 8008706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008708:	2b00      	cmp	r3, #0
 800870a:	d105      	bne.n	8008718 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008712:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e0ed      	b.n	80088f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800871e:	2b01      	cmp	r3, #1
 8008720:	d101      	bne.n	8008726 <HAL_I2C_Mem_Write+0x4e>
 8008722:	2302      	movs	r3, #2
 8008724:	e0e6      	b.n	80088f4 <HAL_I2C_Mem_Write+0x21c>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800872e:	f7fd fd2b 	bl	8006188 <HAL_GetTick>
 8008732:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	2319      	movs	r3, #25
 800873a:	2201      	movs	r2, #1
 800873c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 fbcd 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e0d1      	b.n	80088f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2221      	movs	r2, #33	; 0x21
 8008754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2240      	movs	r2, #64	; 0x40
 800875c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6a3a      	ldr	r2, [r7, #32]
 800876a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008770:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008778:	88f8      	ldrh	r0, [r7, #6]
 800877a:	893a      	ldrh	r2, [r7, #8]
 800877c:	8979      	ldrh	r1, [r7, #10]
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	9301      	str	r3, [sp, #4]
 8008782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	4603      	mov	r3, r0
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f000 fadd 	bl	8008d48 <I2C_RequestMemoryWrite>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d005      	beq.n	80087a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e0a9      	b.n	80088f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	2bff      	cmp	r3, #255	; 0xff
 80087a8:	d90e      	bls.n	80087c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	22ff      	movs	r2, #255	; 0xff
 80087ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	8979      	ldrh	r1, [r7, #10]
 80087b8:	2300      	movs	r3, #0
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 fdc9 	bl	8009358 <I2C_TransferConfig>
 80087c6:	e00f      	b.n	80087e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	8979      	ldrh	r1, [r7, #10]
 80087da:	2300      	movs	r3, #0
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f000 fdb8 	bl	8009358 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 fbc6 	bl	8008f7e <I2C_WaitOnTXISFlagUntilTimeout>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e07b      	b.n	80088f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	781a      	ldrb	r2, [r3, #0]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880c:	1c5a      	adds	r2, r3, #1
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008816:	b29b      	uxth	r3, r3
 8008818:	3b01      	subs	r3, #1
 800881a:	b29a      	uxth	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008824:	3b01      	subs	r3, #1
 8008826:	b29a      	uxth	r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008830:	b29b      	uxth	r3, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	d034      	beq.n	80088a0 <HAL_I2C_Mem_Write+0x1c8>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800883a:	2b00      	cmp	r3, #0
 800883c:	d130      	bne.n	80088a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008844:	2200      	movs	r2, #0
 8008846:	2180      	movs	r1, #128	; 0x80
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 fb49 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e04d      	b.n	80088f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800885c:	b29b      	uxth	r3, r3
 800885e:	2bff      	cmp	r3, #255	; 0xff
 8008860:	d90e      	bls.n	8008880 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	22ff      	movs	r2, #255	; 0xff
 8008866:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800886c:	b2da      	uxtb	r2, r3
 800886e:	8979      	ldrh	r1, [r7, #10]
 8008870:	2300      	movs	r3, #0
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 fd6d 	bl	8009358 <I2C_TransferConfig>
 800887e:	e00f      	b.n	80088a0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008884:	b29a      	uxth	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800888e:	b2da      	uxtb	r2, r3
 8008890:	8979      	ldrh	r1, [r7, #10]
 8008892:	2300      	movs	r3, #0
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f000 fd5c 	bl	8009358 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d19e      	bne.n	80087e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	f000 fbac 	bl	800900c <I2C_WaitOnSTOPFlagUntilTimeout>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e01a      	b.n	80088f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2220      	movs	r2, #32
 80088c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6859      	ldr	r1, [r3, #4]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <HAL_I2C_Mem_Write+0x224>)
 80088d2:	400b      	ands	r3, r1
 80088d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2220      	movs	r2, #32
 80088da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	e000      	b.n	80088f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80088f2:	2302      	movs	r3, #2
  }
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	fe00e800 	.word	0xfe00e800

08008900 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af02      	add	r7, sp, #8
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	4608      	mov	r0, r1
 800890a:	4611      	mov	r1, r2
 800890c:	461a      	mov	r2, r3
 800890e:	4603      	mov	r3, r0
 8008910:	817b      	strh	r3, [r7, #10]
 8008912:	460b      	mov	r3, r1
 8008914:	813b      	strh	r3, [r7, #8]
 8008916:	4613      	mov	r3, r2
 8008918:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b20      	cmp	r3, #32
 8008924:	f040 80fd 	bne.w	8008b22 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008928:	6a3b      	ldr	r3, [r7, #32]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d002      	beq.n	8008934 <HAL_I2C_Mem_Read+0x34>
 800892e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008930:	2b00      	cmp	r3, #0
 8008932:	d105      	bne.n	8008940 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800893a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e0f1      	b.n	8008b24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008946:	2b01      	cmp	r3, #1
 8008948:	d101      	bne.n	800894e <HAL_I2C_Mem_Read+0x4e>
 800894a:	2302      	movs	r3, #2
 800894c:	e0ea      	b.n	8008b24 <HAL_I2C_Mem_Read+0x224>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008956:	f7fd fc17 	bl	8006188 <HAL_GetTick>
 800895a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	2319      	movs	r3, #25
 8008962:	2201      	movs	r2, #1
 8008964:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f000 fab9 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e0d5      	b.n	8008b24 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2222      	movs	r2, #34	; 0x22
 800897c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2240      	movs	r2, #64	; 0x40
 8008984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6a3a      	ldr	r2, [r7, #32]
 8008992:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008998:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80089a0:	88f8      	ldrh	r0, [r7, #6]
 80089a2:	893a      	ldrh	r2, [r7, #8]
 80089a4:	8979      	ldrh	r1, [r7, #10]
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	9301      	str	r3, [sp, #4]
 80089aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	4603      	mov	r3, r0
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f000 fa1d 	bl	8008df0 <I2C_RequestMemoryRead>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d005      	beq.n	80089c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e0ad      	b.n	8008b24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	2bff      	cmp	r3, #255	; 0xff
 80089d0:	d90e      	bls.n	80089f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	22ff      	movs	r2, #255	; 0xff
 80089d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089dc:	b2da      	uxtb	r2, r3
 80089de:	8979      	ldrh	r1, [r7, #10]
 80089e0:	4b52      	ldr	r3, [pc, #328]	; (8008b2c <HAL_I2C_Mem_Read+0x22c>)
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f000 fcb5 	bl	8009358 <I2C_TransferConfig>
 80089ee:	e00f      	b.n	8008a10 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	8979      	ldrh	r1, [r7, #10]
 8008a02:	4b4a      	ldr	r3, [pc, #296]	; (8008b2c <HAL_I2C_Mem_Read+0x22c>)
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f000 fca4 	bl	8009358 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a16:	2200      	movs	r2, #0
 8008a18:	2104      	movs	r1, #4
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 fa60 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e07c      	b.n	8008b24 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a34:	b2d2      	uxtb	r2, r2
 8008a36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	1c5a      	adds	r2, r3, #1
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a46:	3b01      	subs	r3, #1
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	3b01      	subs	r3, #1
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d034      	beq.n	8008ad0 <HAL_I2C_Mem_Read+0x1d0>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d130      	bne.n	8008ad0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a74:	2200      	movs	r2, #0
 8008a76:	2180      	movs	r1, #128	; 0x80
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 fa31 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e04d      	b.n	8008b24 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	2bff      	cmp	r3, #255	; 0xff
 8008a90:	d90e      	bls.n	8008ab0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	22ff      	movs	r2, #255	; 0xff
 8008a96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	8979      	ldrh	r1, [r7, #10]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f000 fc55 	bl	8009358 <I2C_TransferConfig>
 8008aae:	e00f      	b.n	8008ad0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	8979      	ldrh	r1, [r7, #10]
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 fc44 	bl	8009358 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d19a      	bne.n	8008a10 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f000 fa94 	bl	800900c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e01a      	b.n	8008b24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2220      	movs	r2, #32
 8008af4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6859      	ldr	r1, [r3, #4]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	4b0b      	ldr	r3, [pc, #44]	; (8008b30 <HAL_I2C_Mem_Read+0x230>)
 8008b02:	400b      	ands	r3, r1
 8008b04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	e000      	b.n	8008b24 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008b22:	2302      	movs	r3, #2
  }
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	80002400 	.word	0x80002400
 8008b30:	fe00e800 	.word	0xfe00e800

08008b34 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b08a      	sub	sp, #40	; 0x28
 8008b38:	af02      	add	r7, sp, #8
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	607a      	str	r2, [r7, #4]
 8008b3e:	603b      	str	r3, [r7, #0]
 8008b40:	460b      	mov	r3, r1
 8008b42:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8008b44:	2300      	movs	r3, #0
 8008b46:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b20      	cmp	r3, #32
 8008b52:	f040 80f3 	bne.w	8008d3c <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b64:	d101      	bne.n	8008b6a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8008b66:	2302      	movs	r3, #2
 8008b68:	e0e9      	b.n	8008d3e <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d101      	bne.n	8008b78 <HAL_I2C_IsDeviceReady+0x44>
 8008b74:	2302      	movs	r3, #2
 8008b76:	e0e2      	b.n	8008d3e <HAL_I2C_IsDeviceReady+0x20a>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2224      	movs	r2, #36	; 0x24
 8008b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d107      	bne.n	8008ba6 <HAL_I2C_IsDeviceReady+0x72>
 8008b96:	897b      	ldrh	r3, [r7, #10]
 8008b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008ba0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008ba4:	e006      	b.n	8008bb4 <HAL_I2C_IsDeviceReady+0x80>
 8008ba6:	897b      	ldrh	r3, [r7, #10]
 8008ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008bb0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	6812      	ldr	r2, [r2, #0]
 8008bb8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8008bba:	f7fd fae5 	bl	8006188 <HAL_GetTick>
 8008bbe:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	f003 0320 	and.w	r3, r3, #32
 8008bca:	2b20      	cmp	r3, #32
 8008bcc:	bf0c      	ite	eq
 8008bce:	2301      	moveq	r3, #1
 8008bd0:	2300      	movne	r3, #0
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	f003 0310 	and.w	r3, r3, #16
 8008be0:	2b10      	cmp	r3, #16
 8008be2:	bf0c      	ite	eq
 8008be4:	2301      	moveq	r3, #1
 8008be6:	2300      	movne	r3, #0
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008bec:	e034      	b.n	8008c58 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf4:	d01a      	beq.n	8008c2c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008bf6:	f7fd fac7 	bl	8006188 <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d302      	bcc.n	8008c0c <HAL_I2C_IsDeviceReady+0xd8>
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10f      	bne.n	8008c2c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c18:	f043 0220 	orr.w	r2, r3, #32
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e088      	b.n	8008d3e <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	f003 0320 	and.w	r3, r3, #32
 8008c36:	2b20      	cmp	r3, #32
 8008c38:	bf0c      	ite	eq
 8008c3a:	2301      	moveq	r3, #1
 8008c3c:	2300      	movne	r3, #0
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	f003 0310 	and.w	r3, r3, #16
 8008c4c:	2b10      	cmp	r3, #16
 8008c4e:	bf0c      	ite	eq
 8008c50:	2301      	moveq	r3, #1
 8008c52:	2300      	movne	r3, #0
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008c58:	7ffb      	ldrb	r3, [r7, #31]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d102      	bne.n	8008c64 <HAL_I2C_IsDeviceReady+0x130>
 8008c5e:	7fbb      	ldrb	r3, [r7, #30]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d0c4      	beq.n	8008bee <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	f003 0310 	and.w	r3, r3, #16
 8008c6e:	2b10      	cmp	r3, #16
 8008c70:	d01a      	beq.n	8008ca8 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	2120      	movs	r1, #32
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 f92f 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d001      	beq.n	8008c8c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e058      	b.n	8008d3e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2220      	movs	r2, #32
 8008c92:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2220      	movs	r2, #32
 8008c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	e04a      	b.n	8008d3e <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	2120      	movs	r1, #32
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f000 f914 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e03d      	b.n	8008d3e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2210      	movs	r2, #16
 8008cc8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2220      	movs	r2, #32
 8008cd0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d118      	bne.n	8008d0c <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ce8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	2120      	movs	r1, #32
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f000 f8f3 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e01c      	b.n	8008d3e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2220      	movs	r2, #32
 8008d0a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	f63f af39 	bhi.w	8008b8e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d28:	f043 0220 	orr.w	r2, r3, #32
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e000      	b.n	8008d3e <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8008d3c:	2302      	movs	r3, #2
  }
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3720      	adds	r7, #32
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
	...

08008d48 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af02      	add	r7, sp, #8
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	4608      	mov	r0, r1
 8008d52:	4611      	mov	r1, r2
 8008d54:	461a      	mov	r2, r3
 8008d56:	4603      	mov	r3, r0
 8008d58:	817b      	strh	r3, [r7, #10]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	813b      	strh	r3, [r7, #8]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008d62:	88fb      	ldrh	r3, [r7, #6]
 8008d64:	b2da      	uxtb	r2, r3
 8008d66:	8979      	ldrh	r1, [r7, #10]
 8008d68:	4b20      	ldr	r3, [pc, #128]	; (8008dec <I2C_RequestMemoryWrite+0xa4>)
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f000 faf1 	bl	8009358 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d76:	69fa      	ldr	r2, [r7, #28]
 8008d78:	69b9      	ldr	r1, [r7, #24]
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 f8ff 	bl	8008f7e <I2C_WaitOnTXISFlagUntilTimeout>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e02c      	b.n	8008de4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d8a:	88fb      	ldrh	r3, [r7, #6]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d105      	bne.n	8008d9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d90:	893b      	ldrh	r3, [r7, #8]
 8008d92:	b2da      	uxtb	r2, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	629a      	str	r2, [r3, #40]	; 0x28
 8008d9a:	e015      	b.n	8008dc8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d9c:	893b      	ldrh	r3, [r7, #8]
 8008d9e:	0a1b      	lsrs	r3, r3, #8
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008daa:	69fa      	ldr	r2, [r7, #28]
 8008dac:	69b9      	ldr	r1, [r7, #24]
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f000 f8e5 	bl	8008f7e <I2C_WaitOnTXISFlagUntilTimeout>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e012      	b.n	8008de4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008dbe:	893b      	ldrh	r3, [r7, #8]
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	2180      	movs	r1, #128	; 0x80
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 f884 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e000      	b.n	8008de4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	80002000 	.word	0x80002000

08008df0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af02      	add	r7, sp, #8
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	4608      	mov	r0, r1
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	4603      	mov	r3, r0
 8008e00:	817b      	strh	r3, [r7, #10]
 8008e02:	460b      	mov	r3, r1
 8008e04:	813b      	strh	r3, [r7, #8]
 8008e06:	4613      	mov	r3, r2
 8008e08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008e0a:	88fb      	ldrh	r3, [r7, #6]
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	8979      	ldrh	r1, [r7, #10]
 8008e10:	4b20      	ldr	r3, [pc, #128]	; (8008e94 <I2C_RequestMemoryRead+0xa4>)
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	2300      	movs	r3, #0
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f000 fa9e 	bl	8009358 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e1c:	69fa      	ldr	r2, [r7, #28]
 8008e1e:	69b9      	ldr	r1, [r7, #24]
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f000 f8ac 	bl	8008f7e <I2C_WaitOnTXISFlagUntilTimeout>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d001      	beq.n	8008e30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e02c      	b.n	8008e8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e30:	88fb      	ldrh	r3, [r7, #6]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d105      	bne.n	8008e42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e36:	893b      	ldrh	r3, [r7, #8]
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	629a      	str	r2, [r3, #40]	; 0x28
 8008e40:	e015      	b.n	8008e6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008e42:	893b      	ldrh	r3, [r7, #8]
 8008e44:	0a1b      	lsrs	r3, r3, #8
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e50:	69fa      	ldr	r2, [r7, #28]
 8008e52:	69b9      	ldr	r1, [r7, #24]
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f000 f892 	bl	8008f7e <I2C_WaitOnTXISFlagUntilTimeout>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e012      	b.n	8008e8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e64:	893b      	ldrh	r3, [r7, #8]
 8008e66:	b2da      	uxtb	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	2200      	movs	r2, #0
 8008e76:	2140      	movs	r1, #64	; 0x40
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f000 f831 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e000      	b.n	8008e8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	80002000 	.word	0x80002000

08008e98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d103      	bne.n	8008eb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	f003 0301 	and.w	r3, r3, #1
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d007      	beq.n	8008ed4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	699a      	ldr	r2, [r3, #24]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f042 0201 	orr.w	r2, r2, #1
 8008ed2:	619a      	str	r2, [r3, #24]
  }
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	603b      	str	r3, [r7, #0]
 8008eec:	4613      	mov	r3, r2
 8008eee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ef0:	e031      	b.n	8008f56 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef8:	d02d      	beq.n	8008f56 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008efa:	f7fd f945 	bl	8006188 <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d302      	bcc.n	8008f10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d122      	bne.n	8008f56 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	699a      	ldr	r2, [r3, #24]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	4013      	ands	r3, r2
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	bf0c      	ite	eq
 8008f20:	2301      	moveq	r3, #1
 8008f22:	2300      	movne	r3, #0
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	461a      	mov	r2, r3
 8008f28:	79fb      	ldrb	r3, [r7, #7]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d113      	bne.n	8008f56 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f32:	f043 0220 	orr.w	r2, r3, #32
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e00f      	b.n	8008f76 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	699a      	ldr	r2, [r3, #24]
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	4013      	ands	r3, r2
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	bf0c      	ite	eq
 8008f66:	2301      	moveq	r3, #1
 8008f68:	2300      	movne	r3, #0
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	79fb      	ldrb	r3, [r7, #7]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d0be      	beq.n	8008ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b084      	sub	sp, #16
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	60f8      	str	r0, [r7, #12]
 8008f86:	60b9      	str	r1, [r7, #8]
 8008f88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f8a:	e033      	b.n	8008ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	68b9      	ldr	r1, [r7, #8]
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 f901 	bl	8009198 <I2C_IsErrorOccurred>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e031      	b.n	8009004 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa6:	d025      	beq.n	8008ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fa8:	f7fd f8ee 	bl	8006188 <HAL_GetTick>
 8008fac:	4602      	mov	r2, r0
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d302      	bcc.n	8008fbe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d11a      	bne.n	8008ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	f003 0302 	and.w	r3, r3, #2
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d013      	beq.n	8008ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd0:	f043 0220 	orr.w	r2, r3, #32
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2220      	movs	r2, #32
 8008fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e007      	b.n	8009004 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	f003 0302 	and.w	r3, r3, #2
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d1c4      	bne.n	8008f8c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009018:	e02f      	b.n	800907a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	68b9      	ldr	r1, [r7, #8]
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 f8ba 	bl	8009198 <I2C_IsErrorOccurred>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e02d      	b.n	800908a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800902e:	f7fd f8ab 	bl	8006188 <HAL_GetTick>
 8009032:	4602      	mov	r2, r0
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	1ad3      	subs	r3, r2, r3
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	429a      	cmp	r2, r3
 800903c:	d302      	bcc.n	8009044 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d11a      	bne.n	800907a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	f003 0320 	and.w	r3, r3, #32
 800904e:	2b20      	cmp	r3, #32
 8009050:	d013      	beq.n	800907a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009056:	f043 0220 	orr.w	r2, r3, #32
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2220      	movs	r2, #32
 8009062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	e007      	b.n	800908a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	f003 0320 	and.w	r3, r3, #32
 8009084:	2b20      	cmp	r3, #32
 8009086:	d1c8      	bne.n	800901a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
	...

08009094 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80090a0:	e06b      	b.n	800917a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	68b9      	ldr	r1, [r7, #8]
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f000 f876 	bl	8009198 <I2C_IsErrorOccurred>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e069      	b.n	800918a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	f003 0320 	and.w	r3, r3, #32
 80090c0:	2b20      	cmp	r3, #32
 80090c2:	d138      	bne.n	8009136 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	f003 0304 	and.w	r3, r3, #4
 80090ce:	2b04      	cmp	r3, #4
 80090d0:	d105      	bne.n	80090de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	e055      	b.n	800918a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	f003 0310 	and.w	r3, r3, #16
 80090e8:	2b10      	cmp	r3, #16
 80090ea:	d107      	bne.n	80090fc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2210      	movs	r2, #16
 80090f2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2204      	movs	r2, #4
 80090f8:	645a      	str	r2, [r3, #68]	; 0x44
 80090fa:	e002      	b.n	8009102 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2220      	movs	r2, #32
 8009108:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	6859      	ldr	r1, [r3, #4]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	4b1f      	ldr	r3, [pc, #124]	; (8009194 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8009116:	400b      	ands	r3, r1
 8009118:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2220      	movs	r2, #32
 800911e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e029      	b.n	800918a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009136:	f7fd f827 	bl	8006188 <HAL_GetTick>
 800913a:	4602      	mov	r2, r0
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	429a      	cmp	r2, r3
 8009144:	d302      	bcc.n	800914c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d116      	bne.n	800917a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	f003 0304 	and.w	r3, r3, #4
 8009156:	2b04      	cmp	r3, #4
 8009158:	d00f      	beq.n	800917a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800915e:	f043 0220 	orr.w	r2, r3, #32
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2220      	movs	r2, #32
 800916a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e007      	b.n	800918a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b04      	cmp	r3, #4
 8009186:	d18c      	bne.n	80090a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	fe00e800 	.word	0xfe00e800

08009198 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b08a      	sub	sp, #40	; 0x28
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80091b2:	2300      	movs	r3, #0
 80091b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	f003 0310 	and.w	r3, r3, #16
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d068      	beq.n	8009296 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2210      	movs	r2, #16
 80091ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80091cc:	e049      	b.n	8009262 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d4:	d045      	beq.n	8009262 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80091d6:	f7fc ffd7 	bl	8006188 <HAL_GetTick>
 80091da:	4602      	mov	r2, r0
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d302      	bcc.n	80091ec <I2C_IsErrorOccurred+0x54>
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d13a      	bne.n	8009262 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80091fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	699b      	ldr	r3, [r3, #24]
 8009206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800920a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800920e:	d121      	bne.n	8009254 <I2C_IsErrorOccurred+0xbc>
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009216:	d01d      	beq.n	8009254 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009218:	7cfb      	ldrb	r3, [r7, #19]
 800921a:	2b20      	cmp	r3, #32
 800921c:	d01a      	beq.n	8009254 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800922c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800922e:	f7fc ffab 	bl	8006188 <HAL_GetTick>
 8009232:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009234:	e00e      	b.n	8009254 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009236:	f7fc ffa7 	bl	8006188 <HAL_GetTick>
 800923a:	4602      	mov	r2, r0
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	2b19      	cmp	r3, #25
 8009242:	d907      	bls.n	8009254 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	f043 0320 	orr.w	r3, r3, #32
 800924a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009252:	e006      	b.n	8009262 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	f003 0320 	and.w	r3, r3, #32
 800925e:	2b20      	cmp	r3, #32
 8009260:	d1e9      	bne.n	8009236 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	f003 0320 	and.w	r3, r3, #32
 800926c:	2b20      	cmp	r3, #32
 800926e:	d003      	beq.n	8009278 <I2C_IsErrorOccurred+0xe0>
 8009270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009274:	2b00      	cmp	r3, #0
 8009276:	d0aa      	beq.n	80091ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800927c:	2b00      	cmp	r3, #0
 800927e:	d103      	bne.n	8009288 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2220      	movs	r2, #32
 8009286:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	f043 0304 	orr.w	r3, r3, #4
 800928e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00b      	beq.n	80092c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	f043 0301 	orr.w	r3, r3, #1
 80092ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00b      	beq.n	80092e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	f043 0308 	orr.w	r3, r3, #8
 80092d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80092da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00b      	beq.n	8009304 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	f043 0302 	orr.w	r3, r3, #2
 80092f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009308:	2b00      	cmp	r3, #0
 800930a:	d01c      	beq.n	8009346 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f7ff fdc3 	bl	8008e98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6859      	ldr	r1, [r3, #4]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	4b0d      	ldr	r3, [pc, #52]	; (8009354 <I2C_IsErrorOccurred+0x1bc>)
 800931e:	400b      	ands	r3, r1
 8009320:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	431a      	orrs	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2220      	movs	r2, #32
 8009332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800934a:	4618      	mov	r0, r3
 800934c:	3728      	adds	r7, #40	; 0x28
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	fe00e800 	.word	0xfe00e800

08009358 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009358:	b480      	push	{r7}
 800935a:	b087      	sub	sp, #28
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	607b      	str	r3, [r7, #4]
 8009362:	460b      	mov	r3, r1
 8009364:	817b      	strh	r3, [r7, #10]
 8009366:	4613      	mov	r3, r2
 8009368:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800936a:	897b      	ldrh	r3, [r7, #10]
 800936c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009370:	7a7b      	ldrb	r3, [r7, #9]
 8009372:	041b      	lsls	r3, r3, #16
 8009374:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009378:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	4313      	orrs	r3, r2
 8009382:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009386:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	0d5b      	lsrs	r3, r3, #21
 8009392:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009396:	4b08      	ldr	r3, [pc, #32]	; (80093b8 <I2C_TransferConfig+0x60>)
 8009398:	430b      	orrs	r3, r1
 800939a:	43db      	mvns	r3, r3
 800939c:	ea02 0103 	and.w	r1, r2, r3
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80093aa:	bf00      	nop
 80093ac:	371c      	adds	r7, #28
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	03ff63ff 	.word	0x03ff63ff

080093bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b20      	cmp	r3, #32
 80093d0:	d138      	bne.n	8009444 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d101      	bne.n	80093e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80093dc:	2302      	movs	r3, #2
 80093de:	e032      	b.n	8009446 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2224      	movs	r2, #36	; 0x24
 80093ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f022 0201 	bic.w	r2, r2, #1
 80093fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800940e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6819      	ldr	r1, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	430a      	orrs	r2, r1
 800941e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f042 0201 	orr.w	r2, r2, #1
 800942e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2220      	movs	r2, #32
 8009434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009440:	2300      	movs	r3, #0
 8009442:	e000      	b.n	8009446 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009444:	2302      	movs	r3, #2
  }
}
 8009446:	4618      	mov	r0, r3
 8009448:	370c      	adds	r7, #12
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr

08009452 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009452:	b480      	push	{r7}
 8009454:	b085      	sub	sp, #20
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009462:	b2db      	uxtb	r3, r3
 8009464:	2b20      	cmp	r3, #32
 8009466:	d139      	bne.n	80094dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800946e:	2b01      	cmp	r3, #1
 8009470:	d101      	bne.n	8009476 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009472:	2302      	movs	r3, #2
 8009474:	e033      	b.n	80094de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2224      	movs	r2, #36	; 0x24
 8009482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f022 0201 	bic.w	r2, r2, #1
 8009494:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80094a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	021b      	lsls	r3, r3, #8
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f042 0201 	orr.w	r2, r2, #1
 80094c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2220      	movs	r2, #32
 80094cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	e000      	b.n	80094de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80094dc:	2302      	movs	r3, #2
  }
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
	...

080094ec <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80094f4:	4b0b      	ldr	r3, [pc, #44]	; (8009524 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80094f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094f8:	4a0a      	ldr	r2, [pc, #40]	; (8009524 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80094fa:	f043 0301 	orr.w	r3, r3, #1
 80094fe:	6613      	str	r3, [r2, #96]	; 0x60
 8009500:	4b08      	ldr	r3, [pc, #32]	; (8009524 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009504:	f003 0301 	and.w	r3, r3, #1
 8009508:	60fb      	str	r3, [r7, #12]
 800950a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800950c:	4b06      	ldr	r3, [pc, #24]	; (8009528 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800950e:	685a      	ldr	r2, [r3, #4]
 8009510:	4905      	ldr	r1, [pc, #20]	; (8009528 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4313      	orrs	r3, r2
 8009516:	604b      	str	r3, [r1, #4]
}
 8009518:	bf00      	nop
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	40021000 	.word	0x40021000
 8009528:	40010000 	.word	0x40010000

0800952c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800952c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800952e:	b08b      	sub	sp, #44	; 0x2c
 8009530:	af06      	add	r7, sp, #24
 8009532:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e0f8      	b.n	8009730 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b00      	cmp	r3, #0
 8009548:	d106      	bne.n	8009558 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f00a fe66 	bl	8014224 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2203      	movs	r2, #3
 800955c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4618      	mov	r0, r3
 8009566:	f005 fc0b 	bl	800ed80 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	603b      	str	r3, [r7, #0]
 8009570:	687e      	ldr	r6, [r7, #4]
 8009572:	466d      	mov	r5, sp
 8009574:	f106 0410 	add.w	r4, r6, #16
 8009578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800957a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800957c:	6823      	ldr	r3, [r4, #0]
 800957e:	602b      	str	r3, [r5, #0]
 8009580:	1d33      	adds	r3, r6, #4
 8009582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009584:	6838      	ldr	r0, [r7, #0]
 8009586:	f005 fbd3 	bl	800ed30 <USB_CoreInit>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d005      	beq.n	800959c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2202      	movs	r2, #2
 8009594:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e0c9      	b.n	8009730 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2100      	movs	r1, #0
 80095a2:	4618      	mov	r0, r3
 80095a4:	f005 fc07 	bl	800edb6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095a8:	2300      	movs	r3, #0
 80095aa:	73fb      	strb	r3, [r7, #15]
 80095ac:	e040      	b.n	8009630 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80095ae:	7bfb      	ldrb	r3, [r7, #15]
 80095b0:	6879      	ldr	r1, [r7, #4]
 80095b2:	1c5a      	adds	r2, r3, #1
 80095b4:	4613      	mov	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	00db      	lsls	r3, r3, #3
 80095bc:	440b      	add	r3, r1
 80095be:	3301      	adds	r3, #1
 80095c0:	2201      	movs	r2, #1
 80095c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	6879      	ldr	r1, [r7, #4]
 80095c8:	1c5a      	adds	r2, r3, #1
 80095ca:	4613      	mov	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	00db      	lsls	r3, r3, #3
 80095d2:	440b      	add	r3, r1
 80095d4:	7bfa      	ldrb	r2, [r7, #15]
 80095d6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
 80095da:	6879      	ldr	r1, [r7, #4]
 80095dc:	1c5a      	adds	r2, r3, #1
 80095de:	4613      	mov	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4413      	add	r3, r2
 80095e4:	00db      	lsls	r3, r3, #3
 80095e6:	440b      	add	r3, r1
 80095e8:	3303      	adds	r3, #3
 80095ea:	2200      	movs	r2, #0
 80095ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80095ee:	7bfa      	ldrb	r2, [r7, #15]
 80095f0:	6879      	ldr	r1, [r7, #4]
 80095f2:	4613      	mov	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4413      	add	r3, r2
 80095f8:	00db      	lsls	r3, r3, #3
 80095fa:	440b      	add	r3, r1
 80095fc:	3338      	adds	r3, #56	; 0x38
 80095fe:	2200      	movs	r2, #0
 8009600:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009602:	7bfa      	ldrb	r2, [r7, #15]
 8009604:	6879      	ldr	r1, [r7, #4]
 8009606:	4613      	mov	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	00db      	lsls	r3, r3, #3
 800960e:	440b      	add	r3, r1
 8009610:	333c      	adds	r3, #60	; 0x3c
 8009612:	2200      	movs	r2, #0
 8009614:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009616:	7bfa      	ldrb	r2, [r7, #15]
 8009618:	6879      	ldr	r1, [r7, #4]
 800961a:	4613      	mov	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	4413      	add	r3, r2
 8009620:	00db      	lsls	r3, r3, #3
 8009622:	440b      	add	r3, r1
 8009624:	3340      	adds	r3, #64	; 0x40
 8009626:	2200      	movs	r2, #0
 8009628:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	3301      	adds	r3, #1
 800962e:	73fb      	strb	r3, [r7, #15]
 8009630:	7bfa      	ldrb	r2, [r7, #15]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	429a      	cmp	r2, r3
 8009638:	d3b9      	bcc.n	80095ae <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800963a:	2300      	movs	r3, #0
 800963c:	73fb      	strb	r3, [r7, #15]
 800963e:	e044      	b.n	80096ca <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009640:	7bfa      	ldrb	r2, [r7, #15]
 8009642:	6879      	ldr	r1, [r7, #4]
 8009644:	4613      	mov	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	4413      	add	r3, r2
 800964a:	00db      	lsls	r3, r3, #3
 800964c:	440b      	add	r3, r1
 800964e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8009652:	2200      	movs	r2, #0
 8009654:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009656:	7bfa      	ldrb	r2, [r7, #15]
 8009658:	6879      	ldr	r1, [r7, #4]
 800965a:	4613      	mov	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4413      	add	r3, r2
 8009660:	00db      	lsls	r3, r3, #3
 8009662:	440b      	add	r3, r1
 8009664:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009668:	7bfa      	ldrb	r2, [r7, #15]
 800966a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800966c:	7bfa      	ldrb	r2, [r7, #15]
 800966e:	6879      	ldr	r1, [r7, #4]
 8009670:	4613      	mov	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	00db      	lsls	r3, r3, #3
 8009678:	440b      	add	r3, r1
 800967a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800967e:	2200      	movs	r2, #0
 8009680:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009682:	7bfa      	ldrb	r2, [r7, #15]
 8009684:	6879      	ldr	r1, [r7, #4]
 8009686:	4613      	mov	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4413      	add	r3, r2
 800968c:	00db      	lsls	r3, r3, #3
 800968e:	440b      	add	r3, r1
 8009690:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8009694:	2200      	movs	r2, #0
 8009696:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009698:	7bfa      	ldrb	r2, [r7, #15]
 800969a:	6879      	ldr	r1, [r7, #4]
 800969c:	4613      	mov	r3, r2
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	4413      	add	r3, r2
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	440b      	add	r3, r1
 80096a6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80096aa:	2200      	movs	r2, #0
 80096ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80096ae:	7bfa      	ldrb	r2, [r7, #15]
 80096b0:	6879      	ldr	r1, [r7, #4]
 80096b2:	4613      	mov	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4413      	add	r3, r2
 80096b8:	00db      	lsls	r3, r3, #3
 80096ba:	440b      	add	r3, r1
 80096bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80096c0:	2200      	movs	r2, #0
 80096c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
 80096c6:	3301      	adds	r3, #1
 80096c8:	73fb      	strb	r3, [r7, #15]
 80096ca:	7bfa      	ldrb	r2, [r7, #15]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d3b5      	bcc.n	8009640 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	603b      	str	r3, [r7, #0]
 80096da:	687e      	ldr	r6, [r7, #4]
 80096dc:	466d      	mov	r5, sp
 80096de:	f106 0410 	add.w	r4, r6, #16
 80096e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	602b      	str	r3, [r5, #0]
 80096ea:	1d33      	adds	r3, r6, #4
 80096ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096ee:	6838      	ldr	r0, [r7, #0]
 80096f0:	f005 fb6e 	bl	800edd0 <USB_DevInit>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d005      	beq.n	8009706 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2202      	movs	r2, #2
 80096fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e014      	b.n	8009730 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d102      	bne.n	8009724 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f001 fc58 	bl	800afd4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4618      	mov	r0, r3
 800972a:	f007 fdff 	bl	801132c <USB_DevDisconnect>

  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3714      	adds	r7, #20
 8009734:	46bd      	mov	sp, r7
 8009736:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009738 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009746:	2b01      	cmp	r3, #1
 8009748:	d101      	bne.n	800974e <HAL_PCD_Start+0x16>
 800974a:	2302      	movs	r3, #2
 800974c:	e012      	b.n	8009774 <HAL_PCD_Start+0x3c>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4618      	mov	r0, r3
 800975c:	f005 faf9 	bl	800ed52 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4618      	mov	r0, r3
 8009766:	f007 fdca 	bl	80112fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4618      	mov	r0, r3
 800978a:	f007 fde4 	bl	8011356 <USB_ReadInterrupts>
 800978e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009796:	2b00      	cmp	r3, #0
 8009798:	d003      	beq.n	80097a2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fb13 	bl	8009dc6 <PCD_EP_ISR_Handler>

    return;
 80097a0:	e110      	b.n	80099c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d013      	beq.n	80097d4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097be:	b292      	uxth	r2, r2
 80097c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f00a fda8 	bl	801431a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80097ca:	2100      	movs	r1, #0
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 f8fc 	bl	80099ca <HAL_PCD_SetAddress>

    return;
 80097d2:	e0f7      	b.n	80099c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00c      	beq.n	80097f8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80097f0:	b292      	uxth	r2, r2
 80097f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80097f6:	e0e5      	b.n	80099c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00c      	beq.n	800981c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800980a:	b29a      	uxth	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009814:	b292      	uxth	r2, r2
 8009816:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800981a:	e0d3      	b.n	80099c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d034      	beq.n	8009890 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800982e:	b29a      	uxth	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 0204 	bic.w	r2, r2, #4
 8009838:	b292      	uxth	r2, r2
 800983a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009846:	b29a      	uxth	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 0208 	bic.w	r2, r2, #8
 8009850:	b292      	uxth	r2, r2
 8009852:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800985c:	2b01      	cmp	r3, #1
 800985e:	d107      	bne.n	8009870 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009868:	2100      	movs	r1, #0
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f00b f806 	bl	801487c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f00a fd8b 	bl	801438c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800987e:	b29a      	uxth	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009888:	b292      	uxth	r2, r2
 800988a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800988e:	e099      	b.n	80099c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009896:	2b00      	cmp	r3, #0
 8009898:	d027      	beq.n	80098ea <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f042 0208 	orr.w	r2, r2, #8
 80098ac:	b292      	uxth	r2, r2
 80098ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098c4:	b292      	uxth	r2, r2
 80098c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f042 0204 	orr.w	r2, r2, #4
 80098dc:	b292      	uxth	r2, r2
 80098de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f00a fd38 	bl	8014358 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80098e8:	e06c      	b.n	80099c4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d040      	beq.n	8009976 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009906:	b292      	uxth	r2, r2
 8009908:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d12b      	bne.n	800996e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800991e:	b29a      	uxth	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f042 0204 	orr.w	r2, r2, #4
 8009928:	b292      	uxth	r2, r2
 800992a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009936:	b29a      	uxth	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f042 0208 	orr.w	r2, r2, #8
 8009940:	b292      	uxth	r2, r2
 8009942:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009956:	b29b      	uxth	r3, r3
 8009958:	089b      	lsrs	r3, r3, #2
 800995a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009964:	2101      	movs	r1, #1
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f00a ff88 	bl	801487c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800996c:	e02a      	b.n	80099c4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f00a fcf2 	bl	8014358 <HAL_PCD_SuspendCallback>
    return;
 8009974:	e026      	b.n	80099c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00f      	beq.n	80099a0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009988:	b29a      	uxth	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009992:	b292      	uxth	r2, r2
 8009994:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f00a fcb0 	bl	80142fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800999e:	e011      	b.n	80099c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00c      	beq.n	80099c4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099bc:	b292      	uxth	r2, r2
 80099be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80099c2:	bf00      	nop
  }
}
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b082      	sub	sp, #8
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	460b      	mov	r3, r1
 80099d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d101      	bne.n	80099e4 <HAL_PCD_SetAddress+0x1a>
 80099e0:	2302      	movs	r3, #2
 80099e2:	e013      	b.n	8009a0c <HAL_PCD_SetAddress+0x42>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	78fa      	ldrb	r2, [r7, #3]
 80099f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	78fa      	ldrb	r2, [r7, #3]
 80099fa:	4611      	mov	r1, r2
 80099fc:	4618      	mov	r0, r3
 80099fe:	f007 fc6a 	bl	80112d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	4608      	mov	r0, r1
 8009a1e:	4611      	mov	r1, r2
 8009a20:	461a      	mov	r2, r3
 8009a22:	4603      	mov	r3, r0
 8009a24:	70fb      	strb	r3, [r7, #3]
 8009a26:	460b      	mov	r3, r1
 8009a28:	803b      	strh	r3, [r7, #0]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009a32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	da0e      	bge.n	8009a58 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a3a:	78fb      	ldrb	r3, [r7, #3]
 8009a3c:	f003 0307 	and.w	r3, r3, #7
 8009a40:	1c5a      	adds	r2, r3, #1
 8009a42:	4613      	mov	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4413      	add	r3, r2
 8009a48:	00db      	lsls	r3, r3, #3
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2201      	movs	r2, #1
 8009a54:	705a      	strb	r2, [r3, #1]
 8009a56:	e00e      	b.n	8009a76 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a58:	78fb      	ldrb	r3, [r7, #3]
 8009a5a:	f003 0207 	and.w	r2, r3, #7
 8009a5e:	4613      	mov	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4413      	add	r3, r2
 8009a64:	00db      	lsls	r3, r3, #3
 8009a66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009a76:	78fb      	ldrb	r3, [r7, #3]
 8009a78:	f003 0307 	and.w	r3, r3, #7
 8009a7c:	b2da      	uxtb	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009a82:	883a      	ldrh	r2, [r7, #0]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	78ba      	ldrb	r2, [r7, #2]
 8009a8c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009a8e:	78bb      	ldrb	r3, [r7, #2]
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d102      	bne.n	8009a9a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d101      	bne.n	8009aa8 <HAL_PCD_EP_Open+0x94>
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	e00e      	b.n	8009ac6 <HAL_PCD_EP_Open+0xb2>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68f9      	ldr	r1, [r7, #12]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f005 f9ac 	bl	800ee14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8009ac4:	7afb      	ldrb	r3, [r7, #11]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b084      	sub	sp, #16
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009ada:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	da0e      	bge.n	8009b00 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ae2:	78fb      	ldrb	r3, [r7, #3]
 8009ae4:	f003 0307 	and.w	r3, r3, #7
 8009ae8:	1c5a      	adds	r2, r3, #1
 8009aea:	4613      	mov	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	00db      	lsls	r3, r3, #3
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	4413      	add	r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2201      	movs	r2, #1
 8009afc:	705a      	strb	r2, [r3, #1]
 8009afe:	e00e      	b.n	8009b1e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b00:	78fb      	ldrb	r3, [r7, #3]
 8009b02:	f003 0207 	and.w	r2, r3, #7
 8009b06:	4613      	mov	r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	4413      	add	r3, r2
 8009b0c:	00db      	lsls	r3, r3, #3
 8009b0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	4413      	add	r3, r2
 8009b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b1e:	78fb      	ldrb	r3, [r7, #3]
 8009b20:	f003 0307 	and.w	r3, r3, #7
 8009b24:	b2da      	uxtb	r2, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d101      	bne.n	8009b38 <HAL_PCD_EP_Close+0x6a>
 8009b34:	2302      	movs	r3, #2
 8009b36:	e00e      	b.n	8009b56 <HAL_PCD_EP_Close+0x88>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68f9      	ldr	r1, [r7, #12]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f005 fd28 	bl	800f59c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b086      	sub	sp, #24
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	60f8      	str	r0, [r7, #12]
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	603b      	str	r3, [r7, #0]
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b6e:	7afb      	ldrb	r3, [r7, #11]
 8009b70:	f003 0207 	and.w	r2, r3, #7
 8009b74:	4613      	mov	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	00db      	lsls	r3, r3, #3
 8009b7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	4413      	add	r3, r2
 8009b84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2200      	movs	r2, #0
 8009b96:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b9e:	7afb      	ldrb	r3, [r7, #11]
 8009ba0:	f003 0307 	and.w	r3, r3, #7
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	6979      	ldr	r1, [r7, #20]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f005 fee0 	bl	800f976 <USB_EPStartXfer>

  return HAL_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009bcc:	78fb      	ldrb	r3, [r7, #3]
 8009bce:	f003 0207 	and.w	r2, r3, #7
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4413      	add	r3, r2
 8009bda:	00db      	lsls	r3, r3, #3
 8009bdc:	440b      	add	r3, r1
 8009bde:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8009be2:	681b      	ldr	r3, [r3, #0]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	607a      	str	r2, [r7, #4]
 8009bfa:	603b      	str	r3, [r7, #0]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c00:	7afb      	ldrb	r3, [r7, #11]
 8009c02:	f003 0307 	and.w	r3, r3, #7
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	4613      	mov	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	00db      	lsls	r3, r3, #3
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	4413      	add	r3, r2
 8009c14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	2200      	movs	r2, #0
 8009c34:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c3c:	7afb      	ldrb	r3, [r7, #11]
 8009c3e:	f003 0307 	and.w	r3, r3, #7
 8009c42:	b2da      	uxtb	r2, r3
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6979      	ldr	r1, [r7, #20]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f005 fe91 	bl	800f976 <USB_EPStartXfer>

  return HAL_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b084      	sub	sp, #16
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	460b      	mov	r3, r1
 8009c68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009c6a:	78fb      	ldrb	r3, [r7, #3]
 8009c6c:	f003 0207 	and.w	r2, r3, #7
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d901      	bls.n	8009c7c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e04c      	b.n	8009d16 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009c7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	da0e      	bge.n	8009ca2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c84:	78fb      	ldrb	r3, [r7, #3]
 8009c86:	f003 0307 	and.w	r3, r3, #7
 8009c8a:	1c5a      	adds	r2, r3, #1
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	4413      	add	r3, r2
 8009c92:	00db      	lsls	r3, r3, #3
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	4413      	add	r3, r2
 8009c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	705a      	strb	r2, [r3, #1]
 8009ca0:	e00c      	b.n	8009cbc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009ca2:	78fa      	ldrb	r2, [r7, #3]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	00db      	lsls	r3, r3, #3
 8009cac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009cc2:	78fb      	ldrb	r3, [r7, #3]
 8009cc4:	f003 0307 	and.w	r3, r3, #7
 8009cc8:	b2da      	uxtb	r2, r3
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d101      	bne.n	8009cdc <HAL_PCD_EP_SetStall+0x7e>
 8009cd8:	2302      	movs	r3, #2
 8009cda:	e01c      	b.n	8009d16 <HAL_PCD_EP_SetStall+0xb8>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68f9      	ldr	r1, [r7, #12]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f007 f9f4 	bl	80110d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009cf0:	78fb      	ldrb	r3, [r7, #3]
 8009cf2:	f003 0307 	and.w	r3, r3, #7
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d108      	bne.n	8009d0c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009d04:	4619      	mov	r1, r3
 8009d06:	4610      	mov	r0, r2
 8009d08:	f007 fb35 	bl	8011376 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b084      	sub	sp, #16
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	460b      	mov	r3, r1
 8009d28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009d2a:	78fb      	ldrb	r3, [r7, #3]
 8009d2c:	f003 020f 	and.w	r2, r3, #15
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d901      	bls.n	8009d3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e040      	b.n	8009dbe <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	da0e      	bge.n	8009d62 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d44:	78fb      	ldrb	r3, [r7, #3]
 8009d46:	f003 0307 	and.w	r3, r3, #7
 8009d4a:	1c5a      	adds	r2, r3, #1
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	4413      	add	r3, r2
 8009d52:	00db      	lsls	r3, r3, #3
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	4413      	add	r3, r2
 8009d58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	705a      	strb	r2, [r3, #1]
 8009d60:	e00e      	b.n	8009d80 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d62:	78fb      	ldrb	r3, [r7, #3]
 8009d64:	f003 0207 	and.w	r2, r3, #7
 8009d68:	4613      	mov	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	00db      	lsls	r3, r3, #3
 8009d70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	4413      	add	r3, r2
 8009d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d86:	78fb      	ldrb	r3, [r7, #3]
 8009d88:	f003 0307 	and.w	r3, r3, #7
 8009d8c:	b2da      	uxtb	r2, r3
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d101      	bne.n	8009da0 <HAL_PCD_EP_ClrStall+0x82>
 8009d9c:	2302      	movs	r3, #2
 8009d9e:	e00e      	b.n	8009dbe <HAL_PCD_EP_ClrStall+0xa0>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68f9      	ldr	r1, [r7, #12]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f007 f9e3 	bl	801117a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b096      	sub	sp, #88	; 0x58
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009dce:	e3b1      	b.n	800a534 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009dd8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009ddc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	f003 030f 	and.w	r3, r3, #15
 8009de6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8009dea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f040 8173 	bne.w	800a0da <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009df4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009df8:	f003 0310 	and.w	r3, r3, #16
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d150      	bne.n	8009ea2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	881b      	ldrh	r3, [r3, #0]
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e10:	81fb      	strh	r3, [r7, #14]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	89fb      	ldrh	r3, [r7, #14]
 8009e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	3328      	adds	r3, #40	; 0x28
 8009e28:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	461a      	mov	r2, r3
 8009e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	00db      	lsls	r3, r3, #3
 8009e3c:	4413      	add	r3, r2
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	6812      	ldr	r2, [r2, #0]
 8009e42:	4413      	add	r3, r2
 8009e44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8009e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e54:	695a      	ldr	r2, [r3, #20]
 8009e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e58:	69db      	ldr	r3, [r3, #28]
 8009e5a:	441a      	add	r2, r3
 8009e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e5e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009e60:	2100      	movs	r1, #0
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f00a fa31 	bl	80142ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f000 835f 	beq.w	800a534 <PCD_EP_ISR_Handler+0x76e>
 8009e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f040 835a 	bne.w	800a534 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e8c:	b2da      	uxtb	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	b292      	uxth	r2, r2
 8009e94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009ea0:	e348      	b.n	800a534 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009ea8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	881b      	ldrh	r3, [r3, #0]
 8009eb0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009eb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d032      	beq.n	8009f26 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	461a      	mov	r2, r3
 8009ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	00db      	lsls	r3, r3, #3
 8009ed2:	4413      	add	r3, r2
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	6812      	ldr	r2, [r2, #0]
 8009ed8:	4413      	add	r3, r2
 8009eda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ede:	881b      	ldrh	r3, [r3, #0]
 8009ee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ee6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6818      	ldr	r0, [r3, #0]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8009ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ef4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8009ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ef8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	f007 fa89 	bl	8011412 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	881b      	ldrh	r3, [r3, #0]
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	823b      	strh	r3, [r7, #16]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	8a3a      	ldrh	r2, [r7, #16]
 8009f16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f1a:	b292      	uxth	r2, r2
 8009f1c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f00a f9a6 	bl	8014270 <HAL_PCD_SetupStageCallback>
 8009f24:	e306      	b.n	800a534 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009f26:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f280 8302 	bge.w	800a534 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	881b      	ldrh	r3, [r3, #0]
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	83fb      	strh	r3, [r7, #30]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	8bfa      	ldrh	r2, [r7, #30]
 8009f46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f4a:	b292      	uxth	r2, r2
 8009f4c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	461a      	mov	r2, r3
 8009f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	00db      	lsls	r3, r3, #3
 8009f60:	4413      	add	r3, r2
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	6812      	ldr	r2, [r2, #0]
 8009f66:	4413      	add	r3, r2
 8009f68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f6c:	881b      	ldrh	r3, [r3, #0]
 8009f6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f74:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f78:	69db      	ldr	r3, [r3, #28]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d019      	beq.n	8009fb2 <PCD_EP_ISR_Handler+0x1ec>
 8009f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f80:	695b      	ldr	r3, [r3, #20]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d015      	beq.n	8009fb2 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6818      	ldr	r0, [r3, #0]
 8009f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f8c:	6959      	ldr	r1, [r3, #20]
 8009f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f90:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f94:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	f007 fa3b 	bl	8011412 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f9e:	695a      	ldr	r2, [r3, #20]
 8009fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fa2:	69db      	ldr	r3, [r3, #28]
 8009fa4:	441a      	add	r2, r3
 8009fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fa8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009faa:	2100      	movs	r1, #0
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f00a f971 	bl	8014294 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	881b      	ldrh	r3, [r3, #0]
 8009fb8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009fbc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f040 82b5 	bne.w	800a534 <PCD_EP_ISR_Handler+0x76e>
 8009fca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009fce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009fd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fd6:	f000 82ad 	beq.w	800a534 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	61bb      	str	r3, [r7, #24]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	461a      	mov	r2, r3
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	4413      	add	r3, r2
 8009ff0:	61bb      	str	r3, [r7, #24]
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ff8:	617b      	str	r3, [r7, #20]
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	881b      	ldrh	r3, [r3, #0]
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a004:	b29a      	uxth	r2, r3
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	801a      	strh	r2, [r3, #0]
 800a00a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	2b3e      	cmp	r3, #62	; 0x3e
 800a010:	d91d      	bls.n	800a04e <PCD_EP_ISR_Handler+0x288>
 800a012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	095b      	lsrs	r3, r3, #5
 800a018:	647b      	str	r3, [r7, #68]	; 0x44
 800a01a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	f003 031f 	and.w	r3, r3, #31
 800a022:	2b00      	cmp	r3, #0
 800a024:	d102      	bne.n	800a02c <PCD_EP_ISR_Handler+0x266>
 800a026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a028:	3b01      	subs	r3, #1
 800a02a:	647b      	str	r3, [r7, #68]	; 0x44
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	881b      	ldrh	r3, [r3, #0]
 800a030:	b29a      	uxth	r2, r3
 800a032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a034:	b29b      	uxth	r3, r3
 800a036:	029b      	lsls	r3, r3, #10
 800a038:	b29b      	uxth	r3, r3
 800a03a:	4313      	orrs	r3, r2
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a046:	b29a      	uxth	r2, r3
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	801a      	strh	r2, [r3, #0]
 800a04c:	e026      	b.n	800a09c <PCD_EP_ISR_Handler+0x2d6>
 800a04e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10a      	bne.n	800a06c <PCD_EP_ISR_Handler+0x2a6>
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a064:	b29a      	uxth	r2, r3
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	801a      	strh	r2, [r3, #0]
 800a06a:	e017      	b.n	800a09c <PCD_EP_ISR_Handler+0x2d6>
 800a06c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	085b      	lsrs	r3, r3, #1
 800a072:	647b      	str	r3, [r7, #68]	; 0x44
 800a074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d002      	beq.n	800a086 <PCD_EP_ISR_Handler+0x2c0>
 800a080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a082:	3301      	adds	r3, #1
 800a084:	647b      	str	r3, [r7, #68]	; 0x44
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	881b      	ldrh	r3, [r3, #0]
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a08e:	b29b      	uxth	r3, r3
 800a090:	029b      	lsls	r3, r3, #10
 800a092:	b29b      	uxth	r3, r3
 800a094:	4313      	orrs	r3, r2
 800a096:	b29a      	uxth	r2, r3
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	881b      	ldrh	r3, [r3, #0]
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ac:	827b      	strh	r3, [r7, #18]
 800a0ae:	8a7b      	ldrh	r3, [r7, #18]
 800a0b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a0b4:	827b      	strh	r3, [r7, #18]
 800a0b6:	8a7b      	ldrh	r3, [r7, #18]
 800a0b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a0bc:	827b      	strh	r3, [r7, #18]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	8a7b      	ldrh	r3, [r7, #18]
 800a0c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	8013      	strh	r3, [r2, #0]
 800a0d8:	e22c      	b.n	800a534 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	4413      	add	r3, r2
 800a0e8:	881b      	ldrh	r3, [r3, #0]
 800a0ea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a0ee:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f280 80f6 	bge.w	800a2e4 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4413      	add	r3, r2
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	b29a      	uxth	r2, r3
 800a10a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a10e:	4013      	ands	r3, r2
 800a110:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	461a      	mov	r2, r3
 800a11a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	4413      	add	r3, r2
 800a122:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800a126:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a12a:	b292      	uxth	r2, r2
 800a12c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a12e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800a132:	4613      	mov	r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	00db      	lsls	r3, r3, #3
 800a13a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	4413      	add	r3, r2
 800a142:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a146:	7b1b      	ldrb	r3, [r3, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d123      	bne.n	800a194 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a154:	b29b      	uxth	r3, r3
 800a156:	461a      	mov	r2, r3
 800a158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	00db      	lsls	r3, r3, #3
 800a15e:	4413      	add	r3, r2
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	6812      	ldr	r2, [r2, #0]
 800a164:	4413      	add	r3, r2
 800a166:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a16a:	881b      	ldrh	r3, [r3, #0]
 800a16c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a170:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800a174:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a178:	2b00      	cmp	r3, #0
 800a17a:	f000 808e 	beq.w	800a29a <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6818      	ldr	r0, [r3, #0]
 800a182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a184:	6959      	ldr	r1, [r3, #20]
 800a186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a188:	88da      	ldrh	r2, [r3, #6]
 800a18a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a18e:	f007 f940 	bl	8011412 <USB_ReadPMA>
 800a192:	e082      	b.n	800a29a <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a196:	78db      	ldrb	r3, [r3, #3]
 800a198:	2b02      	cmp	r3, #2
 800a19a:	d10a      	bne.n	800a1b2 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a19c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f9d3 	bl	800a550 <HAL_PCD_EP_DB_Receive>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800a1b0:	e073      	b.n	800a29a <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	881b      	ldrh	r3, [r3, #0]
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1cc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	441a      	add	r2, r3
 800a1de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a1e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4413      	add	r3, r2
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	b29b      	uxth	r3, r3
 800a208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d022      	beq.n	800a256 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a218:	b29b      	uxth	r3, r3
 800a21a:	461a      	mov	r2, r3
 800a21c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	00db      	lsls	r3, r3, #3
 800a222:	4413      	add	r3, r2
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	6812      	ldr	r2, [r2, #0]
 800a228:	4413      	add	r3, r2
 800a22a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a22e:	881b      	ldrh	r3, [r3, #0]
 800a230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a234:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a238:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d02c      	beq.n	800a29a <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6818      	ldr	r0, [r3, #0]
 800a244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a246:	6959      	ldr	r1, [r3, #20]
 800a248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a24a:	891a      	ldrh	r2, [r3, #8]
 800a24c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a250:	f007 f8df 	bl	8011412 <USB_ReadPMA>
 800a254:	e021      	b.n	800a29a <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a25e:	b29b      	uxth	r3, r3
 800a260:	461a      	mov	r2, r3
 800a262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	00db      	lsls	r3, r3, #3
 800a268:	4413      	add	r3, r2
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	6812      	ldr	r2, [r2, #0]
 800a26e:	4413      	add	r3, r2
 800a270:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a274:	881b      	ldrh	r3, [r3, #0]
 800a276:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a27a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a27e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a282:	2b00      	cmp	r3, #0
 800a284:	d009      	beq.n	800a29a <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6818      	ldr	r0, [r3, #0]
 800a28a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a28c:	6959      	ldr	r1, [r3, #20]
 800a28e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a290:	895a      	ldrh	r2, [r3, #10]
 800a292:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a296:	f007 f8bc 	bl	8011412 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a29a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a29c:	69da      	ldr	r2, [r3, #28]
 800a29e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a2a2:	441a      	add	r2, r3
 800a2a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a2a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2aa:	695a      	ldr	r2, [r3, #20]
 800a2ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a2b0:	441a      	add	r2, r3
 800a2b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2b4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a2b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d005      	beq.n	800a2ca <PCD_EP_ISR_Handler+0x504>
 800a2be:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800a2c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d206      	bcs.n	800a2d8 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a2ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f009 ffdf 	bl	8014294 <HAL_PCD_DataOutStageCallback>
 800a2d6:	e005      	b.n	800a2e4 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f005 fb49 	bl	800f976 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a2e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a2e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 8121 	beq.w	800a534 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 800a2f2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a2f6:	1c5a      	adds	r2, r3, #1
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	00db      	lsls	r3, r3, #3
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	4413      	add	r3, r2
 800a304:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	461a      	mov	r2, r3
 800a30c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	4413      	add	r3, r2
 800a314:	881b      	ldrh	r3, [r3, #0]
 800a316:	b29b      	uxth	r3, r3
 800a318:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a31c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a320:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	461a      	mov	r2, r3
 800a32a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	441a      	add	r2, r3
 800a332:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a33a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a33e:	b29b      	uxth	r3, r3
 800a340:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a344:	78db      	ldrb	r3, [r3, #3]
 800a346:	2b01      	cmp	r3, #1
 800a348:	f040 80a2 	bne.w	800a490 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 800a34c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a34e:	2200      	movs	r2, #0
 800a350:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a354:	7b1b      	ldrb	r3, [r3, #12]
 800a356:	2b00      	cmp	r3, #0
 800a358:	f000 8093 	beq.w	800a482 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a35c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a364:	2b00      	cmp	r3, #0
 800a366:	d046      	beq.n	800a3f6 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a36a:	785b      	ldrb	r3, [r3, #1]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d126      	bne.n	800a3be <PCD_EP_ISR_Handler+0x5f8>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	627b      	str	r3, [r7, #36]	; 0x24
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a37e:	b29b      	uxth	r3, r3
 800a380:	461a      	mov	r2, r3
 800a382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a384:	4413      	add	r3, r2
 800a386:	627b      	str	r3, [r7, #36]	; 0x24
 800a388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	00da      	lsls	r2, r3, #3
 800a38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a390:	4413      	add	r3, r2
 800a392:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a396:	623b      	str	r3, [r7, #32]
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	881b      	ldrh	r3, [r3, #0]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	6a3b      	ldr	r3, [r7, #32]
 800a3a6:	801a      	strh	r2, [r3, #0]
 800a3a8:	6a3b      	ldr	r3, [r7, #32]
 800a3aa:	881b      	ldrh	r3, [r3, #0]
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	6a3b      	ldr	r3, [r7, #32]
 800a3ba:	801a      	strh	r2, [r3, #0]
 800a3bc:	e061      	b.n	800a482 <PCD_EP_ISR_Handler+0x6bc>
 800a3be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3c0:	785b      	ldrb	r3, [r3, #1]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d15d      	bne.n	800a482 <PCD_EP_ISR_Handler+0x6bc>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3da:	4413      	add	r3, r2
 800a3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	00da      	lsls	r2, r3, #3
 800a3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e6:	4413      	add	r3, r2
 800a3e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a3ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	801a      	strh	r2, [r3, #0]
 800a3f4:	e045      	b.n	800a482 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3fe:	785b      	ldrb	r3, [r3, #1]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d126      	bne.n	800a452 <PCD_EP_ISR_Handler+0x68c>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	637b      	str	r3, [r7, #52]	; 0x34
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a412:	b29b      	uxth	r3, r3
 800a414:	461a      	mov	r2, r3
 800a416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a418:	4413      	add	r3, r2
 800a41a:	637b      	str	r3, [r7, #52]	; 0x34
 800a41c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	00da      	lsls	r2, r3, #3
 800a422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a424:	4413      	add	r3, r2
 800a426:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a42a:	633b      	str	r3, [r7, #48]	; 0x30
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	881b      	ldrh	r3, [r3, #0]
 800a430:	b29b      	uxth	r3, r3
 800a432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a436:	b29a      	uxth	r2, r3
 800a438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43a:	801a      	strh	r2, [r3, #0]
 800a43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43e:	881b      	ldrh	r3, [r3, #0]
 800a440:	b29b      	uxth	r3, r3
 800a442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44e:	801a      	strh	r2, [r3, #0]
 800a450:	e017      	b.n	800a482 <PCD_EP_ISR_Handler+0x6bc>
 800a452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a454:	785b      	ldrb	r3, [r3, #1]
 800a456:	2b01      	cmp	r3, #1
 800a458:	d113      	bne.n	800a482 <PCD_EP_ISR_Handler+0x6bc>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a462:	b29b      	uxth	r3, r3
 800a464:	461a      	mov	r2, r3
 800a466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a468:	4413      	add	r3, r2
 800a46a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a46c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	00da      	lsls	r2, r3, #3
 800a472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a474:	4413      	add	r3, r2
 800a476:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a47a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47e:	2200      	movs	r2, #0
 800a480:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	4619      	mov	r1, r3
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f009 ff1e 	bl	80142ca <HAL_PCD_DataInStageCallback>
 800a48e:	e051      	b.n	800a534 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800a490:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d144      	bne.n	800a526 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	00db      	lsls	r3, r3, #3
 800a4ae:	4413      	add	r3, r2
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	6812      	ldr	r2, [r2, #0]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4ba:	881b      	ldrh	r3, [r3, #0]
 800a4bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4c0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800a4c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4c6:	699a      	ldr	r2, [r3, #24]
 800a4c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d907      	bls.n	800a4e0 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 800a4d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4d2:	699a      	ldr	r2, [r3, #24]
 800a4d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a4d8:	1ad2      	subs	r2, r2, r3
 800a4da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4dc:	619a      	str	r2, [r3, #24]
 800a4de:	e002      	b.n	800a4e6 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 800a4e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800a4e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d106      	bne.n	800a4fc <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a4ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f009 fee8 	bl	80142ca <HAL_PCD_DataInStageCallback>
 800a4fa:	e01b      	b.n	800a534 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800a4fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4fe:	695a      	ldr	r2, [r3, #20]
 800a500:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a504:	441a      	add	r2, r3
 800a506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a508:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800a50a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a50c:	69da      	ldr	r2, [r3, #28]
 800a50e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a512:	441a      	add	r2, r3
 800a514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a516:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a51e:	4618      	mov	r0, r3
 800a520:	f005 fa29 	bl	800f976 <USB_EPStartXfer>
 800a524:	e006      	b.n	800a534 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a526:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a52a:	461a      	mov	r2, r3
 800a52c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 f917 	bl	800a762 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	b21b      	sxth	r3, r3
 800a540:	2b00      	cmp	r3, #0
 800a542:	f6ff ac45 	blt.w	8009dd0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a546:	2300      	movs	r3, #0
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3758      	adds	r7, #88	; 0x58
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b088      	sub	sp, #32
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	4613      	mov	r3, r2
 800a55c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a55e:	88fb      	ldrh	r3, [r7, #6]
 800a560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a564:	2b00      	cmp	r3, #0
 800a566:	d07c      	beq.n	800a662 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a570:	b29b      	uxth	r3, r3
 800a572:	461a      	mov	r2, r3
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	00db      	lsls	r3, r3, #3
 800a57a:	4413      	add	r3, r2
 800a57c:	68fa      	ldr	r2, [r7, #12]
 800a57e:	6812      	ldr	r2, [r2, #0]
 800a580:	4413      	add	r3, r2
 800a582:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a58c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	699a      	ldr	r2, [r3, #24]
 800a592:	8b7b      	ldrh	r3, [r7, #26]
 800a594:	429a      	cmp	r2, r3
 800a596:	d306      	bcc.n	800a5a6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	699a      	ldr	r2, [r3, #24]
 800a59c:	8b7b      	ldrh	r3, [r7, #26]
 800a59e:	1ad2      	subs	r2, r2, r3
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	619a      	str	r2, [r3, #24]
 800a5a4:	e002      	b.n	800a5ac <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	699b      	ldr	r3, [r3, #24]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d123      	bne.n	800a5fc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	4413      	add	r3, r2
 800a5c2:	881b      	ldrh	r3, [r3, #0]
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ce:	833b      	strh	r3, [r7, #24]
 800a5d0:	8b3b      	ldrh	r3, [r7, #24]
 800a5d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a5d6:	833b      	strh	r3, [r7, #24]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	461a      	mov	r2, r3
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	441a      	add	r2, r3
 800a5e6:	8b3b      	ldrh	r3, [r7, #24]
 800a5e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a5fc:	88fb      	ldrh	r3, [r7, #6]
 800a5fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a602:	2b00      	cmp	r3, #0
 800a604:	d01f      	beq.n	800a646 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	461a      	mov	r2, r3
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	4413      	add	r3, r2
 800a614:	881b      	ldrh	r3, [r3, #0]
 800a616:	b29b      	uxth	r3, r3
 800a618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a61c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a620:	82fb      	strh	r3, [r7, #22]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	461a      	mov	r2, r3
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	441a      	add	r2, r3
 800a630:	8afb      	ldrh	r3, [r7, #22]
 800a632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a63a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a63e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a642:	b29b      	uxth	r3, r3
 800a644:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a646:	8b7b      	ldrh	r3, [r7, #26]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f000 8085 	beq.w	800a758 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6818      	ldr	r0, [r3, #0]
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	6959      	ldr	r1, [r3, #20]
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	891a      	ldrh	r2, [r3, #8]
 800a65a:	8b7b      	ldrh	r3, [r7, #26]
 800a65c:	f006 fed9 	bl	8011412 <USB_ReadPMA>
 800a660:	e07a      	b.n	800a758 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	461a      	mov	r2, r3
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	00db      	lsls	r3, r3, #3
 800a674:	4413      	add	r3, r2
 800a676:	68fa      	ldr	r2, [r7, #12]
 800a678:	6812      	ldr	r2, [r2, #0]
 800a67a:	4413      	add	r3, r2
 800a67c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a680:	881b      	ldrh	r3, [r3, #0]
 800a682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a686:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	699a      	ldr	r2, [r3, #24]
 800a68c:	8b7b      	ldrh	r3, [r7, #26]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d306      	bcc.n	800a6a0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	699a      	ldr	r2, [r3, #24]
 800a696:	8b7b      	ldrh	r3, [r7, #26]
 800a698:	1ad2      	subs	r2, r2, r3
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	619a      	str	r2, [r3, #24]
 800a69e:	e002      	b.n	800a6a6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	699b      	ldr	r3, [r3, #24]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d123      	bne.n	800a6f6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	4413      	add	r3, r2
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6c8:	83fb      	strh	r3, [r7, #30]
 800a6ca:	8bfb      	ldrh	r3, [r7, #30]
 800a6cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a6d0:	83fb      	strh	r3, [r7, #30]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	441a      	add	r2, r3
 800a6e0:	8bfb      	ldrh	r3, [r7, #30]
 800a6e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a6f6:	88fb      	ldrh	r3, [r7, #6]
 800a6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d11f      	bne.n	800a740 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	461a      	mov	r2, r3
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	4413      	add	r3, r2
 800a70e:	881b      	ldrh	r3, [r3, #0]
 800a710:	b29b      	uxth	r3, r3
 800a712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a71a:	83bb      	strh	r3, [r7, #28]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	461a      	mov	r2, r3
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	441a      	add	r2, r3
 800a72a:	8bbb      	ldrh	r3, [r7, #28]
 800a72c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a738:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a740:	8b7b      	ldrh	r3, [r7, #26]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d008      	beq.n	800a758 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6818      	ldr	r0, [r3, #0]
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	6959      	ldr	r1, [r3, #20]
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	895a      	ldrh	r2, [r3, #10]
 800a752:	8b7b      	ldrh	r3, [r7, #26]
 800a754:	f006 fe5d 	bl	8011412 <USB_ReadPMA>
    }
  }

  return count;
 800a758:	8b7b      	ldrh	r3, [r7, #26]
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3720      	adds	r7, #32
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b0a4      	sub	sp, #144	; 0x90
 800a766:	af00      	add	r7, sp, #0
 800a768:	60f8      	str	r0, [r7, #12]
 800a76a:	60b9      	str	r1, [r7, #8]
 800a76c:	4613      	mov	r3, r2
 800a76e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a770:	88fb      	ldrh	r3, [r7, #6]
 800a772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a776:	2b00      	cmp	r3, #0
 800a778:	f000 81db 	beq.w	800ab32 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a784:	b29b      	uxth	r3, r3
 800a786:	461a      	mov	r2, r3
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	00db      	lsls	r3, r3, #3
 800a78e:	4413      	add	r3, r2
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	6812      	ldr	r2, [r2, #0]
 800a794:	4413      	add	r3, r2
 800a796:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a79a:	881b      	ldrh	r3, [r3, #0]
 800a79c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7a0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	699a      	ldr	r2, [r3, #24]
 800a7a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d907      	bls.n	800a7c0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	699a      	ldr	r2, [r3, #24]
 800a7b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a7b8:	1ad2      	subs	r2, r2, r3
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	619a      	str	r2, [r3, #24]
 800a7be:	e002      	b.n	800a7c6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f040 80b9 	bne.w	800a942 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	785b      	ldrb	r3, [r3, #1]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d126      	bne.n	800a826 <HAL_PCD_EP_DB_Transmit+0xc4>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ec:	4413      	add	r3, r2
 800a7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	00da      	lsls	r2, r3, #3
 800a7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	b29b      	uxth	r3, r3
 800a806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80e:	801a      	strh	r2, [r3, #0]
 800a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a812:	881b      	ldrh	r3, [r3, #0]
 800a814:	b29b      	uxth	r3, r3
 800a816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a81a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a81e:	b29a      	uxth	r2, r3
 800a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a822:	801a      	strh	r2, [r3, #0]
 800a824:	e01a      	b.n	800a85c <HAL_PCD_EP_DB_Transmit+0xfa>
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	785b      	ldrb	r3, [r3, #1]
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d116      	bne.n	800a85c <HAL_PCD_EP_DB_Transmit+0xfa>
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	637b      	str	r3, [r7, #52]	; 0x34
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	461a      	mov	r2, r3
 800a840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a842:	4413      	add	r3, r2
 800a844:	637b      	str	r3, [r7, #52]	; 0x34
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	00da      	lsls	r2, r3, #3
 800a84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84e:	4413      	add	r3, r2
 800a850:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a854:	633b      	str	r3, [r7, #48]	; 0x30
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	2200      	movs	r2, #0
 800a85a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	627b      	str	r3, [r7, #36]	; 0x24
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	785b      	ldrb	r3, [r3, #1]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d126      	bne.n	800a8b8 <HAL_PCD_EP_DB_Transmit+0x156>
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	61fb      	str	r3, [r7, #28]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a878:	b29b      	uxth	r3, r3
 800a87a:	461a      	mov	r2, r3
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	4413      	add	r3, r2
 800a880:	61fb      	str	r3, [r7, #28]
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	00da      	lsls	r2, r3, #3
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	4413      	add	r3, r2
 800a88c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a890:	61bb      	str	r3, [r7, #24]
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	881b      	ldrh	r3, [r3, #0]
 800a896:	b29b      	uxth	r3, r3
 800a898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	801a      	strh	r2, [r3, #0]
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	881b      	ldrh	r3, [r3, #0]
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	801a      	strh	r2, [r3, #0]
 800a8b6:	e017      	b.n	800a8e8 <HAL_PCD_EP_DB_Transmit+0x186>
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	785b      	ldrb	r3, [r3, #1]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d113      	bne.n	800a8e8 <HAL_PCD_EP_DB_Transmit+0x186>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	4413      	add	r3, r2
 800a8d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	00da      	lsls	r2, r3, #3
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8da:	4413      	add	r3, r2
 800a8dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a8e0:	623b      	str	r3, [r7, #32]
 800a8e2:	6a3b      	ldr	r3, [r7, #32]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f009 fceb 	bl	80142ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a8f4:	88fb      	ldrh	r3, [r7, #6]
 800a8f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	f000 82fa 	beq.w	800aef4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	461a      	mov	r2, r3
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	4413      	add	r3, r2
 800a90e:	881b      	ldrh	r3, [r3, #0]
 800a910:	b29b      	uxth	r3, r3
 800a912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a91a:	82fb      	strh	r3, [r7, #22]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	461a      	mov	r2, r3
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	441a      	add	r2, r3
 800a92a:	8afb      	ldrh	r3, [r7, #22]
 800a92c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	8013      	strh	r3, [r2, #0]
 800a940:	e2d8      	b.n	800aef4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a942:	88fb      	ldrh	r3, [r7, #6]
 800a944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d021      	beq.n	800a990 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	461a      	mov	r2, r3
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4413      	add	r3, r2
 800a95a:	881b      	ldrh	r3, [r3, #0]
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a966:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	461a      	mov	r2, r3
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	441a      	add	r2, r3
 800a978:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a97c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a996:	2b01      	cmp	r3, #1
 800a998:	f040 82ac 	bne.w	800aef4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	695a      	ldr	r2, [r3, #20]
 800a9a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a9a4:	441a      	add	r2, r3
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	69da      	ldr	r2, [r3, #28]
 800a9ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a9b2:	441a      	add	r2, r3
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	6a1a      	ldr	r2, [r3, #32]
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d30b      	bcc.n	800a9dc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	6a1a      	ldr	r2, [r3, #32]
 800a9d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9d4:	1ad2      	subs	r2, r2, r3
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	621a      	str	r2, [r3, #32]
 800a9da:	e017      	b.n	800aa0c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	6a1b      	ldr	r3, [r3, #32]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d108      	bne.n	800a9f6 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800a9e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a9e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a9f4:	e00a      	b.n	800aa0c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	6a1b      	ldr	r3, [r3, #32]
 800aa02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	785b      	ldrb	r3, [r3, #1]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d165      	bne.n	800aae0 <HAL_PCD_EP_DB_Transmit+0x37e>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	461a      	mov	r2, r3
 800aa26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa28:	4413      	add	r3, r2
 800aa2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	00da      	lsls	r2, r3, #3
 800aa32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa34:	4413      	add	r3, r2
 800aa36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3e:	881b      	ldrh	r3, [r3, #0]
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4a:	801a      	strh	r2, [r3, #0]
 800aa4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa50:	2b3e      	cmp	r3, #62	; 0x3e
 800aa52:	d91d      	bls.n	800aa90 <HAL_PCD_EP_DB_Transmit+0x32e>
 800aa54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa58:	095b      	lsrs	r3, r3, #5
 800aa5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa60:	f003 031f 	and.w	r3, r3, #31
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d102      	bne.n	800aa6e <HAL_PCD_EP_DB_Transmit+0x30c>
 800aa68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	029b      	lsls	r3, r3, #10
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8c:	801a      	strh	r2, [r3, #0]
 800aa8e:	e044      	b.n	800ab1a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800aa90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10a      	bne.n	800aaae <HAL_PCD_EP_DB_Transmit+0x34c>
 800aa98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9a:	881b      	ldrh	r3, [r3, #0]
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaa6:	b29a      	uxth	r2, r3
 800aaa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaaa:	801a      	strh	r2, [r3, #0]
 800aaac:	e035      	b.n	800ab1a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800aaae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aab2:	085b      	lsrs	r3, r3, #1
 800aab4:	64bb      	str	r3, [r7, #72]	; 0x48
 800aab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aaba:	f003 0301 	and.w	r3, r3, #1
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d002      	beq.n	800aac8 <HAL_PCD_EP_DB_Transmit+0x366>
 800aac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aac4:	3301      	adds	r3, #1
 800aac6:	64bb      	str	r3, [r7, #72]	; 0x48
 800aac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaca:	881b      	ldrh	r3, [r3, #0]
 800aacc:	b29a      	uxth	r2, r3
 800aace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	029b      	lsls	r3, r3, #10
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	4313      	orrs	r3, r2
 800aad8:	b29a      	uxth	r2, r3
 800aada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aadc:	801a      	strh	r2, [r3, #0]
 800aade:	e01c      	b.n	800ab1a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	785b      	ldrb	r3, [r3, #1]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d118      	bne.n	800ab1a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	647b      	str	r3, [r7, #68]	; 0x44
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	461a      	mov	r2, r3
 800aafa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aafc:	4413      	add	r3, r2
 800aafe:	647b      	str	r3, [r7, #68]	; 0x44
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	00da      	lsls	r2, r3, #3
 800ab06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab08:	4413      	add	r3, r2
 800ab0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab0e:	643b      	str	r3, [r7, #64]	; 0x40
 800ab10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab18:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6818      	ldr	r0, [r3, #0]
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	6959      	ldr	r1, [r3, #20]
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	891a      	ldrh	r2, [r3, #8]
 800ab26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	f006 fc2f 	bl	801138e <USB_WritePMA>
 800ab30:	e1e0      	b.n	800aef4 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	00db      	lsls	r3, r3, #3
 800ab44:	4413      	add	r3, r2
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	6812      	ldr	r2, [r2, #0]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab50:	881b      	ldrh	r3, [r3, #0]
 800ab52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab56:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	699a      	ldr	r2, [r3, #24]
 800ab5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d307      	bcc.n	800ab76 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	699a      	ldr	r2, [r3, #24]
 800ab6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ab6e:	1ad2      	subs	r2, r2, r3
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	619a      	str	r2, [r3, #24]
 800ab74:	e002      	b.n	800ab7c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	699b      	ldr	r3, [r3, #24]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f040 80c0 	bne.w	800ad06 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	785b      	ldrb	r3, [r3, #1]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d126      	bne.n	800abdc <HAL_PCD_EP_DB_Transmit+0x47a>
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	461a      	mov	r2, r3
 800aba0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aba2:	4413      	add	r3, r2
 800aba4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	00da      	lsls	r2, r3, #3
 800abac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800abae:	4413      	add	r3, r2
 800abb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800abb4:	67bb      	str	r3, [r7, #120]	; 0x78
 800abb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abb8:	881b      	ldrh	r3, [r3, #0]
 800abba:	b29b      	uxth	r3, r3
 800abbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abc4:	801a      	strh	r2, [r3, #0]
 800abc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abc8:	881b      	ldrh	r3, [r3, #0]
 800abca:	b29b      	uxth	r3, r3
 800abcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abd8:	801a      	strh	r2, [r3, #0]
 800abda:	e01a      	b.n	800ac12 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	785b      	ldrb	r3, [r3, #1]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d116      	bne.n	800ac12 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	667b      	str	r3, [r7, #100]	; 0x64
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	461a      	mov	r2, r3
 800abf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abf8:	4413      	add	r3, r2
 800abfa:	667b      	str	r3, [r7, #100]	; 0x64
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	00da      	lsls	r2, r3, #3
 800ac02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac04:	4413      	add	r3, r2
 800ac06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac0a:	663b      	str	r3, [r7, #96]	; 0x60
 800ac0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac0e:	2200      	movs	r2, #0
 800ac10:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	677b      	str	r3, [r7, #116]	; 0x74
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	785b      	ldrb	r3, [r3, #1]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d12b      	bne.n	800ac78 <HAL_PCD_EP_DB_Transmit+0x516>
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	461a      	mov	r2, r3
 800ac32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac34:	4413      	add	r3, r2
 800ac36:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	00da      	lsls	r2, r3, #3
 800ac3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac40:	4413      	add	r3, r2
 800ac42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac4e:	881b      	ldrh	r3, [r3, #0]
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac56:	b29a      	uxth	r2, r3
 800ac58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac5c:	801a      	strh	r2, [r3, #0]
 800ac5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac62:	881b      	ldrh	r3, [r3, #0]
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac74:	801a      	strh	r2, [r3, #0]
 800ac76:	e017      	b.n	800aca8 <HAL_PCD_EP_DB_Transmit+0x546>
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	785b      	ldrb	r3, [r3, #1]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d113      	bne.n	800aca8 <HAL_PCD_EP_DB_Transmit+0x546>
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac8e:	4413      	add	r3, r2
 800ac90:	677b      	str	r3, [r7, #116]	; 0x74
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	00da      	lsls	r2, r3, #3
 800ac98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac9a:	4413      	add	r3, r2
 800ac9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aca0:	673b      	str	r3, [r7, #112]	; 0x70
 800aca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aca4:	2200      	movs	r2, #0
 800aca6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	4619      	mov	r1, r3
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f009 fb0b 	bl	80142ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800acb4:	88fb      	ldrh	r3, [r7, #6]
 800acb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f040 811a 	bne.w	800aef4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	461a      	mov	r2, r3
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4413      	add	r3, r2
 800acce:	881b      	ldrh	r3, [r3, #0]
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acda:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	461a      	mov	r2, r3
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	441a      	add	r2, r3
 800acec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800acf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800acfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	8013      	strh	r3, [r2, #0]
 800ad04:	e0f6      	b.n	800aef4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ad06:	88fb      	ldrh	r3, [r7, #6]
 800ad08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d121      	bne.n	800ad54 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	461a      	mov	r2, r3
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	881b      	ldrh	r3, [r3, #0]
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	461a      	mov	r2, r3
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	441a      	add	r2, r3
 800ad3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ad40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	f040 80ca 	bne.w	800aef4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	695a      	ldr	r2, [r3, #20]
 800ad64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ad68:	441a      	add	r2, r3
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	69da      	ldr	r2, [r3, #28]
 800ad72:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ad76:	441a      	add	r2, r3
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	6a1a      	ldr	r2, [r3, #32]
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	691b      	ldr	r3, [r3, #16]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d30b      	bcc.n	800ada0 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	6a1a      	ldr	r2, [r3, #32]
 800ad94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad98:	1ad2      	subs	r2, r2, r3
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	621a      	str	r2, [r3, #32]
 800ad9e:	e017      	b.n	800add0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	6a1b      	ldr	r3, [r3, #32]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d108      	bne.n	800adba <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800ada8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800adac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800adb8:	e00a      	b.n	800add0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	2200      	movs	r2, #0
 800adc6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	2200      	movs	r2, #0
 800adcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	657b      	str	r3, [r7, #84]	; 0x54
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	785b      	ldrb	r3, [r3, #1]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d165      	bne.n	800aeaa <HAL_PCD_EP_DB_Transmit+0x748>
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adec:	b29b      	uxth	r3, r3
 800adee:	461a      	mov	r2, r3
 800adf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adf2:	4413      	add	r3, r2
 800adf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	00da      	lsls	r2, r3, #3
 800adfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adfe:	4413      	add	r3, r2
 800ae00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae04:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae14:	801a      	strh	r2, [r3, #0]
 800ae16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae1a:	2b3e      	cmp	r3, #62	; 0x3e
 800ae1c:	d91d      	bls.n	800ae5a <HAL_PCD_EP_DB_Transmit+0x6f8>
 800ae1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae22:	095b      	lsrs	r3, r3, #5
 800ae24:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae2a:	f003 031f 	and.w	r3, r3, #31
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d102      	bne.n	800ae38 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800ae32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae34:	3b01      	subs	r3, #1
 800ae36:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae3a:	881b      	ldrh	r3, [r3, #0]
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	029b      	lsls	r3, r3, #10
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	4313      	orrs	r3, r2
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae56:	801a      	strh	r2, [r3, #0]
 800ae58:	e041      	b.n	800aede <HAL_PCD_EP_DB_Transmit+0x77c>
 800ae5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10a      	bne.n	800ae78 <HAL_PCD_EP_DB_Transmit+0x716>
 800ae62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae64:	881b      	ldrh	r3, [r3, #0]
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae70:	b29a      	uxth	r2, r3
 800ae72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae74:	801a      	strh	r2, [r3, #0]
 800ae76:	e032      	b.n	800aede <HAL_PCD_EP_DB_Transmit+0x77c>
 800ae78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae7c:	085b      	lsrs	r3, r3, #1
 800ae7e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae84:	f003 0301 	and.w	r3, r3, #1
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d002      	beq.n	800ae92 <HAL_PCD_EP_DB_Transmit+0x730>
 800ae8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae8e:	3301      	adds	r3, #1
 800ae90:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae94:	881b      	ldrh	r3, [r3, #0]
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	029b      	lsls	r3, r3, #10
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	4313      	orrs	r3, r2
 800aea2:	b29a      	uxth	r2, r3
 800aea4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aea6:	801a      	strh	r2, [r3, #0]
 800aea8:	e019      	b.n	800aede <HAL_PCD_EP_DB_Transmit+0x77c>
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	785b      	ldrb	r3, [r3, #1]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d115      	bne.n	800aede <HAL_PCD_EP_DB_Transmit+0x77c>
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	461a      	mov	r2, r3
 800aebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aec0:	4413      	add	r3, r2
 800aec2:	657b      	str	r3, [r7, #84]	; 0x54
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	00da      	lsls	r2, r3, #3
 800aeca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aecc:	4413      	add	r3, r2
 800aece:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aed2:	653b      	str	r3, [r7, #80]	; 0x50
 800aed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aedc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	6818      	ldr	r0, [r3, #0]
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	6959      	ldr	r1, [r3, #20]
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	895a      	ldrh	r2, [r3, #10]
 800aeea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	f006 fa4d 	bl	801138e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	461a      	mov	r2, r3
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	881b      	ldrh	r3, [r3, #0]
 800af04:	b29b      	uxth	r3, r3
 800af06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af0e:	82bb      	strh	r3, [r7, #20]
 800af10:	8abb      	ldrh	r3, [r7, #20]
 800af12:	f083 0310 	eor.w	r3, r3, #16
 800af16:	82bb      	strh	r3, [r7, #20]
 800af18:	8abb      	ldrh	r3, [r7, #20]
 800af1a:	f083 0320 	eor.w	r3, r3, #32
 800af1e:	82bb      	strh	r3, [r7, #20]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	461a      	mov	r2, r3
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	441a      	add	r2, r3
 800af2e:	8abb      	ldrh	r3, [r7, #20]
 800af30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af40:	b29b      	uxth	r3, r3
 800af42:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3790      	adds	r7, #144	; 0x90
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800af4e:	b480      	push	{r7}
 800af50:	b087      	sub	sp, #28
 800af52:	af00      	add	r7, sp, #0
 800af54:	60f8      	str	r0, [r7, #12]
 800af56:	607b      	str	r3, [r7, #4]
 800af58:	460b      	mov	r3, r1
 800af5a:	817b      	strh	r3, [r7, #10]
 800af5c:	4613      	mov	r3, r2
 800af5e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800af60:	897b      	ldrh	r3, [r7, #10]
 800af62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af66:	b29b      	uxth	r3, r3
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00b      	beq.n	800af84 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800af6c:	897b      	ldrh	r3, [r7, #10]
 800af6e:	f003 0307 	and.w	r3, r3, #7
 800af72:	1c5a      	adds	r2, r3, #1
 800af74:	4613      	mov	r3, r2
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	4413      	add	r3, r2
 800af7a:	00db      	lsls	r3, r3, #3
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	4413      	add	r3, r2
 800af80:	617b      	str	r3, [r7, #20]
 800af82:	e009      	b.n	800af98 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800af84:	897a      	ldrh	r2, [r7, #10]
 800af86:	4613      	mov	r3, r2
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	4413      	add	r3, r2
 800af8c:	00db      	lsls	r3, r3, #3
 800af8e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	4413      	add	r3, r2
 800af96:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800af98:	893b      	ldrh	r3, [r7, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d107      	bne.n	800afae <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	2200      	movs	r2, #0
 800afa2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	80da      	strh	r2, [r3, #6]
 800afac:	e00b      	b.n	800afc6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	2201      	movs	r2, #1
 800afb2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	b29a      	uxth	r2, r3
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	0c1b      	lsrs	r3, r3, #16
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	371c      	adds	r7, #28
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2201      	movs	r2, #1
 800afe6:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800aff8:	b29b      	uxth	r3, r3
 800affa:	f043 0301 	orr.w	r3, r3, #1
 800affe:	b29a      	uxth	r2, r3
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	f043 0302 	orr.w	r3, r3, #2
 800b012:	b29a      	uxth	r2, r3
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3714      	adds	r7, #20
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b028:	b480      	push	{r7}
 800b02a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b02c:	4b04      	ldr	r3, [pc, #16]	; (800b040 <HAL_PWREx_GetVoltageRange+0x18>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800b034:	4618      	mov	r0, r3
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	40007000 	.word	0x40007000

0800b044 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b052:	d130      	bne.n	800b0b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b054:	4b23      	ldr	r3, [pc, #140]	; (800b0e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b05c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b060:	d038      	beq.n	800b0d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b062:	4b20      	ldr	r3, [pc, #128]	; (800b0e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b06a:	4a1e      	ldr	r2, [pc, #120]	; (800b0e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b06c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b070:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b072:	4b1d      	ldr	r3, [pc, #116]	; (800b0e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2232      	movs	r2, #50	; 0x32
 800b078:	fb02 f303 	mul.w	r3, r2, r3
 800b07c:	4a1b      	ldr	r2, [pc, #108]	; (800b0ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b07e:	fba2 2303 	umull	r2, r3, r2, r3
 800b082:	0c9b      	lsrs	r3, r3, #18
 800b084:	3301      	adds	r3, #1
 800b086:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b088:	e002      	b.n	800b090 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	3b01      	subs	r3, #1
 800b08e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b090:	4b14      	ldr	r3, [pc, #80]	; (800b0e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b092:	695b      	ldr	r3, [r3, #20]
 800b094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b09c:	d102      	bne.n	800b0a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1f2      	bne.n	800b08a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b0a4:	4b0f      	ldr	r3, [pc, #60]	; (800b0e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b0a6:	695b      	ldr	r3, [r3, #20]
 800b0a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0b0:	d110      	bne.n	800b0d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b0b2:	2303      	movs	r3, #3
 800b0b4:	e00f      	b.n	800b0d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b0b6:	4b0b      	ldr	r3, [pc, #44]	; (800b0e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b0be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0c2:	d007      	beq.n	800b0d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b0c4:	4b07      	ldr	r3, [pc, #28]	; (800b0e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b0cc:	4a05      	ldr	r2, [pc, #20]	; (800b0e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b0ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b0d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	40007000 	.word	0x40007000
 800b0e8:	20000038 	.word	0x20000038
 800b0ec:	431bde83 	.word	0x431bde83

0800b0f0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800b0f4:	4b05      	ldr	r3, [pc, #20]	; (800b10c <HAL_PWREx_EnableVddUSB+0x1c>)
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	4a04      	ldr	r2, [pc, #16]	; (800b10c <HAL_PWREx_EnableVddUSB+0x1c>)
 800b0fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b0fe:	6053      	str	r3, [r2, #4]
}
 800b100:	bf00      	nop
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	40007000 	.word	0x40007000

0800b110 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b088      	sub	sp, #32
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d102      	bne.n	800b124 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	f000 bc02 	b.w	800b928 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b124:	4b96      	ldr	r3, [pc, #600]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	f003 030c 	and.w	r3, r3, #12
 800b12c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b12e:	4b94      	ldr	r3, [pc, #592]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	f003 0303 	and.w	r3, r3, #3
 800b136:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 0310 	and.w	r3, r3, #16
 800b140:	2b00      	cmp	r3, #0
 800b142:	f000 80e4 	beq.w	800b30e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d007      	beq.n	800b15c <HAL_RCC_OscConfig+0x4c>
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	2b0c      	cmp	r3, #12
 800b150:	f040 808b 	bne.w	800b26a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	2b01      	cmp	r3, #1
 800b158:	f040 8087 	bne.w	800b26a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b15c:	4b88      	ldr	r3, [pc, #544]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f003 0302 	and.w	r3, r3, #2
 800b164:	2b00      	cmp	r3, #0
 800b166:	d005      	beq.n	800b174 <HAL_RCC_OscConfig+0x64>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	699b      	ldr	r3, [r3, #24]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d101      	bne.n	800b174 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	e3d9      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6a1a      	ldr	r2, [r3, #32]
 800b178:	4b81      	ldr	r3, [pc, #516]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 0308 	and.w	r3, r3, #8
 800b180:	2b00      	cmp	r3, #0
 800b182:	d004      	beq.n	800b18e <HAL_RCC_OscConfig+0x7e>
 800b184:	4b7e      	ldr	r3, [pc, #504]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b18c:	e005      	b.n	800b19a <HAL_RCC_OscConfig+0x8a>
 800b18e:	4b7c      	ldr	r3, [pc, #496]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b194:	091b      	lsrs	r3, r3, #4
 800b196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d223      	bcs.n	800b1e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6a1b      	ldr	r3, [r3, #32]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 fd8c 	bl	800bcc0 <RCC_SetFlashLatencyFromMSIRange>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d001      	beq.n	800b1b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e3ba      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b1b2:	4b73      	ldr	r3, [pc, #460]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a72      	ldr	r2, [pc, #456]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b1b8:	f043 0308 	orr.w	r3, r3, #8
 800b1bc:	6013      	str	r3, [r2, #0]
 800b1be:	4b70      	ldr	r3, [pc, #448]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a1b      	ldr	r3, [r3, #32]
 800b1ca:	496d      	ldr	r1, [pc, #436]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b1d0:	4b6b      	ldr	r3, [pc, #428]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	69db      	ldr	r3, [r3, #28]
 800b1dc:	021b      	lsls	r3, r3, #8
 800b1de:	4968      	ldr	r1, [pc, #416]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	604b      	str	r3, [r1, #4]
 800b1e4:	e025      	b.n	800b232 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b1e6:	4b66      	ldr	r3, [pc, #408]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a65      	ldr	r2, [pc, #404]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b1ec:	f043 0308 	orr.w	r3, r3, #8
 800b1f0:	6013      	str	r3, [r2, #0]
 800b1f2:	4b63      	ldr	r3, [pc, #396]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a1b      	ldr	r3, [r3, #32]
 800b1fe:	4960      	ldr	r1, [pc, #384]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b200:	4313      	orrs	r3, r2
 800b202:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b204:	4b5e      	ldr	r3, [pc, #376]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	69db      	ldr	r3, [r3, #28]
 800b210:	021b      	lsls	r3, r3, #8
 800b212:	495b      	ldr	r1, [pc, #364]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b214:	4313      	orrs	r3, r2
 800b216:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d109      	bne.n	800b232 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6a1b      	ldr	r3, [r3, #32]
 800b222:	4618      	mov	r0, r3
 800b224:	f000 fd4c 	bl	800bcc0 <RCC_SetFlashLatencyFromMSIRange>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	e37a      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b232:	f000 fc81 	bl	800bb38 <HAL_RCC_GetSysClockFreq>
 800b236:	4602      	mov	r2, r0
 800b238:	4b51      	ldr	r3, [pc, #324]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	091b      	lsrs	r3, r3, #4
 800b23e:	f003 030f 	and.w	r3, r3, #15
 800b242:	4950      	ldr	r1, [pc, #320]	; (800b384 <HAL_RCC_OscConfig+0x274>)
 800b244:	5ccb      	ldrb	r3, [r1, r3]
 800b246:	f003 031f 	and.w	r3, r3, #31
 800b24a:	fa22 f303 	lsr.w	r3, r2, r3
 800b24e:	4a4e      	ldr	r2, [pc, #312]	; (800b388 <HAL_RCC_OscConfig+0x278>)
 800b250:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b252:	4b4e      	ldr	r3, [pc, #312]	; (800b38c <HAL_RCC_OscConfig+0x27c>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4618      	mov	r0, r3
 800b258:	f7fa ff46 	bl	80060e8 <HAL_InitTick>
 800b25c:	4603      	mov	r3, r0
 800b25e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800b260:	7bfb      	ldrb	r3, [r7, #15]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d052      	beq.n	800b30c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800b266:	7bfb      	ldrb	r3, [r7, #15]
 800b268:	e35e      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	699b      	ldr	r3, [r3, #24]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d032      	beq.n	800b2d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b272:	4b43      	ldr	r3, [pc, #268]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a42      	ldr	r2, [pc, #264]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b278:	f043 0301 	orr.w	r3, r3, #1
 800b27c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b27e:	f7fa ff83 	bl	8006188 <HAL_GetTick>
 800b282:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b284:	e008      	b.n	800b298 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b286:	f7fa ff7f 	bl	8006188 <HAL_GetTick>
 800b28a:	4602      	mov	r2, r0
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	1ad3      	subs	r3, r2, r3
 800b290:	2b02      	cmp	r3, #2
 800b292:	d901      	bls.n	800b298 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800b294:	2303      	movs	r3, #3
 800b296:	e347      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b298:	4b39      	ldr	r3, [pc, #228]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f003 0302 	and.w	r3, r3, #2
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d0f0      	beq.n	800b286 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b2a4:	4b36      	ldr	r3, [pc, #216]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a35      	ldr	r2, [pc, #212]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b2aa:	f043 0308 	orr.w	r3, r3, #8
 800b2ae:	6013      	str	r3, [r2, #0]
 800b2b0:	4b33      	ldr	r3, [pc, #204]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a1b      	ldr	r3, [r3, #32]
 800b2bc:	4930      	ldr	r1, [pc, #192]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b2c2:	4b2f      	ldr	r3, [pc, #188]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	69db      	ldr	r3, [r3, #28]
 800b2ce:	021b      	lsls	r3, r3, #8
 800b2d0:	492b      	ldr	r1, [pc, #172]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	604b      	str	r3, [r1, #4]
 800b2d6:	e01a      	b.n	800b30e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b2d8:	4b29      	ldr	r3, [pc, #164]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a28      	ldr	r2, [pc, #160]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b2de:	f023 0301 	bic.w	r3, r3, #1
 800b2e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b2e4:	f7fa ff50 	bl	8006188 <HAL_GetTick>
 800b2e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b2ea:	e008      	b.n	800b2fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b2ec:	f7fa ff4c 	bl	8006188 <HAL_GetTick>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	1ad3      	subs	r3, r2, r3
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	d901      	bls.n	800b2fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800b2fa:	2303      	movs	r3, #3
 800b2fc:	e314      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b2fe:	4b20      	ldr	r3, [pc, #128]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f003 0302 	and.w	r3, r3, #2
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1f0      	bne.n	800b2ec <HAL_RCC_OscConfig+0x1dc>
 800b30a:	e000      	b.n	800b30e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b30c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	2b00      	cmp	r3, #0
 800b318:	d073      	beq.n	800b402 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	2b08      	cmp	r3, #8
 800b31e:	d005      	beq.n	800b32c <HAL_RCC_OscConfig+0x21c>
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	2b0c      	cmp	r3, #12
 800b324:	d10e      	bne.n	800b344 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	2b03      	cmp	r3, #3
 800b32a:	d10b      	bne.n	800b344 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b32c:	4b14      	ldr	r3, [pc, #80]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b334:	2b00      	cmp	r3, #0
 800b336:	d063      	beq.n	800b400 <HAL_RCC_OscConfig+0x2f0>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d15f      	bne.n	800b400 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	e2f1      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b34c:	d106      	bne.n	800b35c <HAL_RCC_OscConfig+0x24c>
 800b34e:	4b0c      	ldr	r3, [pc, #48]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a0b      	ldr	r2, [pc, #44]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b358:	6013      	str	r3, [r2, #0]
 800b35a:	e025      	b.n	800b3a8 <HAL_RCC_OscConfig+0x298>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b364:	d114      	bne.n	800b390 <HAL_RCC_OscConfig+0x280>
 800b366:	4b06      	ldr	r3, [pc, #24]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a05      	ldr	r2, [pc, #20]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b36c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b370:	6013      	str	r3, [r2, #0]
 800b372:	4b03      	ldr	r3, [pc, #12]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a02      	ldr	r2, [pc, #8]	; (800b380 <HAL_RCC_OscConfig+0x270>)
 800b378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b37c:	6013      	str	r3, [r2, #0]
 800b37e:	e013      	b.n	800b3a8 <HAL_RCC_OscConfig+0x298>
 800b380:	40021000 	.word	0x40021000
 800b384:	0801d89c 	.word	0x0801d89c
 800b388:	20000038 	.word	0x20000038
 800b38c:	2000003c 	.word	0x2000003c
 800b390:	4ba0      	ldr	r3, [pc, #640]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a9f      	ldr	r2, [pc, #636]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b39a:	6013      	str	r3, [r2, #0]
 800b39c:	4b9d      	ldr	r3, [pc, #628]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a9c      	ldr	r2, [pc, #624]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b3a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b3a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d013      	beq.n	800b3d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3b0:	f7fa feea 	bl	8006188 <HAL_GetTick>
 800b3b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b3b6:	e008      	b.n	800b3ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3b8:	f7fa fee6 	bl	8006188 <HAL_GetTick>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	1ad3      	subs	r3, r2, r3
 800b3c2:	2b64      	cmp	r3, #100	; 0x64
 800b3c4:	d901      	bls.n	800b3ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800b3c6:	2303      	movs	r3, #3
 800b3c8:	e2ae      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b3ca:	4b92      	ldr	r3, [pc, #584]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d0f0      	beq.n	800b3b8 <HAL_RCC_OscConfig+0x2a8>
 800b3d6:	e014      	b.n	800b402 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3d8:	f7fa fed6 	bl	8006188 <HAL_GetTick>
 800b3dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b3de:	e008      	b.n	800b3f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3e0:	f7fa fed2 	bl	8006188 <HAL_GetTick>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	2b64      	cmp	r3, #100	; 0x64
 800b3ec:	d901      	bls.n	800b3f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b3ee:	2303      	movs	r3, #3
 800b3f0:	e29a      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b3f2:	4b88      	ldr	r3, [pc, #544]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1f0      	bne.n	800b3e0 <HAL_RCC_OscConfig+0x2d0>
 800b3fe:	e000      	b.n	800b402 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f003 0302 	and.w	r3, r3, #2
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d060      	beq.n	800b4d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b40e:	69bb      	ldr	r3, [r7, #24]
 800b410:	2b04      	cmp	r3, #4
 800b412:	d005      	beq.n	800b420 <HAL_RCC_OscConfig+0x310>
 800b414:	69bb      	ldr	r3, [r7, #24]
 800b416:	2b0c      	cmp	r3, #12
 800b418:	d119      	bne.n	800b44e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	2b02      	cmp	r3, #2
 800b41e:	d116      	bne.n	800b44e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b420:	4b7c      	ldr	r3, [pc, #496]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d005      	beq.n	800b438 <HAL_RCC_OscConfig+0x328>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d101      	bne.n	800b438 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	e277      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b438:	4b76      	ldr	r3, [pc, #472]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	691b      	ldr	r3, [r3, #16]
 800b444:	061b      	lsls	r3, r3, #24
 800b446:	4973      	ldr	r1, [pc, #460]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b448:	4313      	orrs	r3, r2
 800b44a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b44c:	e040      	b.n	800b4d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d023      	beq.n	800b49e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b456:	4b6f      	ldr	r3, [pc, #444]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a6e      	ldr	r2, [pc, #440]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b45c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b462:	f7fa fe91 	bl	8006188 <HAL_GetTick>
 800b466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b468:	e008      	b.n	800b47c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b46a:	f7fa fe8d 	bl	8006188 <HAL_GetTick>
 800b46e:	4602      	mov	r2, r0
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	1ad3      	subs	r3, r2, r3
 800b474:	2b02      	cmp	r3, #2
 800b476:	d901      	bls.n	800b47c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b478:	2303      	movs	r3, #3
 800b47a:	e255      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b47c:	4b65      	ldr	r3, [pc, #404]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b484:	2b00      	cmp	r3, #0
 800b486:	d0f0      	beq.n	800b46a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b488:	4b62      	ldr	r3, [pc, #392]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	691b      	ldr	r3, [r3, #16]
 800b494:	061b      	lsls	r3, r3, #24
 800b496:	495f      	ldr	r1, [pc, #380]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b498:	4313      	orrs	r3, r2
 800b49a:	604b      	str	r3, [r1, #4]
 800b49c:	e018      	b.n	800b4d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b49e:	4b5d      	ldr	r3, [pc, #372]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a5c      	ldr	r2, [pc, #368]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b4a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4aa:	f7fa fe6d 	bl	8006188 <HAL_GetTick>
 800b4ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b4b0:	e008      	b.n	800b4c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4b2:	f7fa fe69 	bl	8006188 <HAL_GetTick>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	1ad3      	subs	r3, r2, r3
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	d901      	bls.n	800b4c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	e231      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b4c4:	4b53      	ldr	r3, [pc, #332]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1f0      	bne.n	800b4b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 0308 	and.w	r3, r3, #8
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d03c      	beq.n	800b556 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d01c      	beq.n	800b51e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b4e4:	4b4b      	ldr	r3, [pc, #300]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b4e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b4ea:	4a4a      	ldr	r2, [pc, #296]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b4ec:	f043 0301 	orr.w	r3, r3, #1
 800b4f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4f4:	f7fa fe48 	bl	8006188 <HAL_GetTick>
 800b4f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b4fa:	e008      	b.n	800b50e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b4fc:	f7fa fe44 	bl	8006188 <HAL_GetTick>
 800b500:	4602      	mov	r2, r0
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	1ad3      	subs	r3, r2, r3
 800b506:	2b02      	cmp	r3, #2
 800b508:	d901      	bls.n	800b50e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b50a:	2303      	movs	r3, #3
 800b50c:	e20c      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b50e:	4b41      	ldr	r3, [pc, #260]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b514:	f003 0302 	and.w	r3, r3, #2
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d0ef      	beq.n	800b4fc <HAL_RCC_OscConfig+0x3ec>
 800b51c:	e01b      	b.n	800b556 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b51e:	4b3d      	ldr	r3, [pc, #244]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b524:	4a3b      	ldr	r2, [pc, #236]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b526:	f023 0301 	bic.w	r3, r3, #1
 800b52a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b52e:	f7fa fe2b 	bl	8006188 <HAL_GetTick>
 800b532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b534:	e008      	b.n	800b548 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b536:	f7fa fe27 	bl	8006188 <HAL_GetTick>
 800b53a:	4602      	mov	r2, r0
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	1ad3      	subs	r3, r2, r3
 800b540:	2b02      	cmp	r3, #2
 800b542:	d901      	bls.n	800b548 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b544:	2303      	movs	r3, #3
 800b546:	e1ef      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b548:	4b32      	ldr	r3, [pc, #200]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b54a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b54e:	f003 0302 	and.w	r3, r3, #2
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1ef      	bne.n	800b536 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f003 0304 	and.w	r3, r3, #4
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f000 80a6 	beq.w	800b6b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b564:	2300      	movs	r3, #0
 800b566:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b568:	4b2a      	ldr	r3, [pc, #168]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b56a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b56c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b570:	2b00      	cmp	r3, #0
 800b572:	d10d      	bne.n	800b590 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b574:	4b27      	ldr	r3, [pc, #156]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b578:	4a26      	ldr	r2, [pc, #152]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b57a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b57e:	6593      	str	r3, [r2, #88]	; 0x58
 800b580:	4b24      	ldr	r3, [pc, #144]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b588:	60bb      	str	r3, [r7, #8]
 800b58a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b58c:	2301      	movs	r3, #1
 800b58e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b590:	4b21      	ldr	r3, [pc, #132]	; (800b618 <HAL_RCC_OscConfig+0x508>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d118      	bne.n	800b5ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b59c:	4b1e      	ldr	r3, [pc, #120]	; (800b618 <HAL_RCC_OscConfig+0x508>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a1d      	ldr	r2, [pc, #116]	; (800b618 <HAL_RCC_OscConfig+0x508>)
 800b5a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b5a8:	f7fa fdee 	bl	8006188 <HAL_GetTick>
 800b5ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5ae:	e008      	b.n	800b5c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5b0:	f7fa fdea 	bl	8006188 <HAL_GetTick>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	1ad3      	subs	r3, r2, r3
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d901      	bls.n	800b5c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e1b2      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5c2:	4b15      	ldr	r3, [pc, #84]	; (800b618 <HAL_RCC_OscConfig+0x508>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d0f0      	beq.n	800b5b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d108      	bne.n	800b5e8 <HAL_RCC_OscConfig+0x4d8>
 800b5d6:	4b0f      	ldr	r3, [pc, #60]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b5d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5dc:	4a0d      	ldr	r2, [pc, #52]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b5de:	f043 0301 	orr.w	r3, r3, #1
 800b5e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b5e6:	e029      	b.n	800b63c <HAL_RCC_OscConfig+0x52c>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	2b05      	cmp	r3, #5
 800b5ee:	d115      	bne.n	800b61c <HAL_RCC_OscConfig+0x50c>
 800b5f0:	4b08      	ldr	r3, [pc, #32]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b5f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5f6:	4a07      	ldr	r2, [pc, #28]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b5f8:	f043 0304 	orr.w	r3, r3, #4
 800b5fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b600:	4b04      	ldr	r3, [pc, #16]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b606:	4a03      	ldr	r2, [pc, #12]	; (800b614 <HAL_RCC_OscConfig+0x504>)
 800b608:	f043 0301 	orr.w	r3, r3, #1
 800b60c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b610:	e014      	b.n	800b63c <HAL_RCC_OscConfig+0x52c>
 800b612:	bf00      	nop
 800b614:	40021000 	.word	0x40021000
 800b618:	40007000 	.word	0x40007000
 800b61c:	4b9a      	ldr	r3, [pc, #616]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b61e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b622:	4a99      	ldr	r2, [pc, #612]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b624:	f023 0301 	bic.w	r3, r3, #1
 800b628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b62c:	4b96      	ldr	r3, [pc, #600]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b62e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b632:	4a95      	ldr	r2, [pc, #596]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b634:	f023 0304 	bic.w	r3, r3, #4
 800b638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d016      	beq.n	800b672 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b644:	f7fa fda0 	bl	8006188 <HAL_GetTick>
 800b648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b64a:	e00a      	b.n	800b662 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b64c:	f7fa fd9c 	bl	8006188 <HAL_GetTick>
 800b650:	4602      	mov	r2, r0
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	1ad3      	subs	r3, r2, r3
 800b656:	f241 3288 	movw	r2, #5000	; 0x1388
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d901      	bls.n	800b662 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800b65e:	2303      	movs	r3, #3
 800b660:	e162      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b662:	4b89      	ldr	r3, [pc, #548]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b668:	f003 0302 	and.w	r3, r3, #2
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d0ed      	beq.n	800b64c <HAL_RCC_OscConfig+0x53c>
 800b670:	e015      	b.n	800b69e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b672:	f7fa fd89 	bl	8006188 <HAL_GetTick>
 800b676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b678:	e00a      	b.n	800b690 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b67a:	f7fa fd85 	bl	8006188 <HAL_GetTick>
 800b67e:	4602      	mov	r2, r0
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	f241 3288 	movw	r2, #5000	; 0x1388
 800b688:	4293      	cmp	r3, r2
 800b68a:	d901      	bls.n	800b690 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b68c:	2303      	movs	r3, #3
 800b68e:	e14b      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b690:	4b7d      	ldr	r3, [pc, #500]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b696:	f003 0302 	and.w	r3, r3, #2
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d1ed      	bne.n	800b67a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b69e:	7ffb      	ldrb	r3, [r7, #31]
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d105      	bne.n	800b6b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b6a4:	4b78      	ldr	r3, [pc, #480]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b6a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6a8:	4a77      	ldr	r2, [pc, #476]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b6aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f003 0320 	and.w	r3, r3, #32
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d03c      	beq.n	800b736 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d01c      	beq.n	800b6fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b6c4:	4b70      	ldr	r3, [pc, #448]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b6c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b6ca:	4a6f      	ldr	r2, [pc, #444]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b6cc:	f043 0301 	orr.w	r3, r3, #1
 800b6d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6d4:	f7fa fd58 	bl	8006188 <HAL_GetTick>
 800b6d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b6da:	e008      	b.n	800b6ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b6dc:	f7fa fd54 	bl	8006188 <HAL_GetTick>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	d901      	bls.n	800b6ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800b6ea:	2303      	movs	r3, #3
 800b6ec:	e11c      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b6ee:	4b66      	ldr	r3, [pc, #408]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b6f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b6f4:	f003 0302 	and.w	r3, r3, #2
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d0ef      	beq.n	800b6dc <HAL_RCC_OscConfig+0x5cc>
 800b6fc:	e01b      	b.n	800b736 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b6fe:	4b62      	ldr	r3, [pc, #392]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b700:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b704:	4a60      	ldr	r2, [pc, #384]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b706:	f023 0301 	bic.w	r3, r3, #1
 800b70a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b70e:	f7fa fd3b 	bl	8006188 <HAL_GetTick>
 800b712:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b714:	e008      	b.n	800b728 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b716:	f7fa fd37 	bl	8006188 <HAL_GetTick>
 800b71a:	4602      	mov	r2, r0
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	1ad3      	subs	r3, r2, r3
 800b720:	2b02      	cmp	r3, #2
 800b722:	d901      	bls.n	800b728 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800b724:	2303      	movs	r3, #3
 800b726:	e0ff      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b728:	4b57      	ldr	r3, [pc, #348]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b72a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b72e:	f003 0302 	and.w	r3, r3, #2
 800b732:	2b00      	cmp	r3, #0
 800b734:	d1ef      	bne.n	800b716 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f000 80f3 	beq.w	800b926 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b744:	2b02      	cmp	r3, #2
 800b746:	f040 80c9 	bne.w	800b8dc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b74a:	4b4f      	ldr	r3, [pc, #316]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	f003 0203 	and.w	r2, r3, #3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d12c      	bne.n	800b7b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b768:	3b01      	subs	r3, #1
 800b76a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d123      	bne.n	800b7b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b77a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d11b      	bne.n	800b7b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b78a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d113      	bne.n	800b7b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b79a:	085b      	lsrs	r3, r3, #1
 800b79c:	3b01      	subs	r3, #1
 800b79e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d109      	bne.n	800b7b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ae:	085b      	lsrs	r3, r3, #1
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d06b      	beq.n	800b890 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	2b0c      	cmp	r3, #12
 800b7bc:	d062      	beq.n	800b884 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b7be:	4b32      	ldr	r3, [pc, #200]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d001      	beq.n	800b7ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e0ac      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b7ce:	4b2e      	ldr	r3, [pc, #184]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a2d      	ldr	r2, [pc, #180]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b7d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b7d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b7da:	f7fa fcd5 	bl	8006188 <HAL_GetTick>
 800b7de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b7e0:	e008      	b.n	800b7f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7e2:	f7fa fcd1 	bl	8006188 <HAL_GetTick>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	1ad3      	subs	r3, r2, r3
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d901      	bls.n	800b7f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	e099      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b7f4:	4b24      	ldr	r3, [pc, #144]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1f0      	bne.n	800b7e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b800:	4b21      	ldr	r3, [pc, #132]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b802:	68da      	ldr	r2, [r3, #12]
 800b804:	4b21      	ldr	r3, [pc, #132]	; (800b88c <HAL_RCC_OscConfig+0x77c>)
 800b806:	4013      	ands	r3, r2
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b810:	3a01      	subs	r2, #1
 800b812:	0112      	lsls	r2, r2, #4
 800b814:	4311      	orrs	r1, r2
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b81a:	0212      	lsls	r2, r2, #8
 800b81c:	4311      	orrs	r1, r2
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b822:	0852      	lsrs	r2, r2, #1
 800b824:	3a01      	subs	r2, #1
 800b826:	0552      	lsls	r2, r2, #21
 800b828:	4311      	orrs	r1, r2
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b82e:	0852      	lsrs	r2, r2, #1
 800b830:	3a01      	subs	r2, #1
 800b832:	0652      	lsls	r2, r2, #25
 800b834:	4311      	orrs	r1, r2
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b83a:	06d2      	lsls	r2, r2, #27
 800b83c:	430a      	orrs	r2, r1
 800b83e:	4912      	ldr	r1, [pc, #72]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b840:	4313      	orrs	r3, r2
 800b842:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b844:	4b10      	ldr	r3, [pc, #64]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a0f      	ldr	r2, [pc, #60]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b84a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b84e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b850:	4b0d      	ldr	r3, [pc, #52]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	4a0c      	ldr	r2, [pc, #48]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b85a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b85c:	f7fa fc94 	bl	8006188 <HAL_GetTick>
 800b860:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b862:	e008      	b.n	800b876 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b864:	f7fa fc90 	bl	8006188 <HAL_GetTick>
 800b868:	4602      	mov	r2, r0
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	2b02      	cmp	r3, #2
 800b870:	d901      	bls.n	800b876 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800b872:	2303      	movs	r3, #3
 800b874:	e058      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b876:	4b04      	ldr	r3, [pc, #16]	; (800b888 <HAL_RCC_OscConfig+0x778>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d0f0      	beq.n	800b864 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b882:	e050      	b.n	800b926 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	e04f      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
 800b888:	40021000 	.word	0x40021000
 800b88c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b890:	4b27      	ldr	r3, [pc, #156]	; (800b930 <HAL_RCC_OscConfig+0x820>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d144      	bne.n	800b926 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b89c:	4b24      	ldr	r3, [pc, #144]	; (800b930 <HAL_RCC_OscConfig+0x820>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a23      	ldr	r2, [pc, #140]	; (800b930 <HAL_RCC_OscConfig+0x820>)
 800b8a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b8a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b8a8:	4b21      	ldr	r3, [pc, #132]	; (800b930 <HAL_RCC_OscConfig+0x820>)
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	4a20      	ldr	r2, [pc, #128]	; (800b930 <HAL_RCC_OscConfig+0x820>)
 800b8ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b8b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b8b4:	f7fa fc68 	bl	8006188 <HAL_GetTick>
 800b8b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b8ba:	e008      	b.n	800b8ce <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8bc:	f7fa fc64 	bl	8006188 <HAL_GetTick>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	1ad3      	subs	r3, r2, r3
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	d901      	bls.n	800b8ce <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800b8ca:	2303      	movs	r3, #3
 800b8cc:	e02c      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b8ce:	4b18      	ldr	r3, [pc, #96]	; (800b930 <HAL_RCC_OscConfig+0x820>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d0f0      	beq.n	800b8bc <HAL_RCC_OscConfig+0x7ac>
 800b8da:	e024      	b.n	800b926 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	2b0c      	cmp	r3, #12
 800b8e0:	d01f      	beq.n	800b922 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8e2:	4b13      	ldr	r3, [pc, #76]	; (800b930 <HAL_RCC_OscConfig+0x820>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a12      	ldr	r2, [pc, #72]	; (800b930 <HAL_RCC_OscConfig+0x820>)
 800b8e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b8ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8ee:	f7fa fc4b 	bl	8006188 <HAL_GetTick>
 800b8f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8f4:	e008      	b.n	800b908 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8f6:	f7fa fc47 	bl	8006188 <HAL_GetTick>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	2b02      	cmp	r3, #2
 800b902:	d901      	bls.n	800b908 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800b904:	2303      	movs	r3, #3
 800b906:	e00f      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b908:	4b09      	ldr	r3, [pc, #36]	; (800b930 <HAL_RCC_OscConfig+0x820>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b910:	2b00      	cmp	r3, #0
 800b912:	d1f0      	bne.n	800b8f6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800b914:	4b06      	ldr	r3, [pc, #24]	; (800b930 <HAL_RCC_OscConfig+0x820>)
 800b916:	68da      	ldr	r2, [r3, #12]
 800b918:	4905      	ldr	r1, [pc, #20]	; (800b930 <HAL_RCC_OscConfig+0x820>)
 800b91a:	4b06      	ldr	r3, [pc, #24]	; (800b934 <HAL_RCC_OscConfig+0x824>)
 800b91c:	4013      	ands	r3, r2
 800b91e:	60cb      	str	r3, [r1, #12]
 800b920:	e001      	b.n	800b926 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b922:	2301      	movs	r3, #1
 800b924:	e000      	b.n	800b928 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3720      	adds	r7, #32
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	40021000 	.word	0x40021000
 800b934:	feeefffc 	.word	0xfeeefffc

0800b938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d101      	bne.n	800b94c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b948:	2301      	movs	r3, #1
 800b94a:	e0e7      	b.n	800bb1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b94c:	4b75      	ldr	r3, [pc, #468]	; (800bb24 <HAL_RCC_ClockConfig+0x1ec>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f003 0307 	and.w	r3, r3, #7
 800b954:	683a      	ldr	r2, [r7, #0]
 800b956:	429a      	cmp	r2, r3
 800b958:	d910      	bls.n	800b97c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b95a:	4b72      	ldr	r3, [pc, #456]	; (800bb24 <HAL_RCC_ClockConfig+0x1ec>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f023 0207 	bic.w	r2, r3, #7
 800b962:	4970      	ldr	r1, [pc, #448]	; (800bb24 <HAL_RCC_ClockConfig+0x1ec>)
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	4313      	orrs	r3, r2
 800b968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b96a:	4b6e      	ldr	r3, [pc, #440]	; (800bb24 <HAL_RCC_ClockConfig+0x1ec>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f003 0307 	and.w	r3, r3, #7
 800b972:	683a      	ldr	r2, [r7, #0]
 800b974:	429a      	cmp	r2, r3
 800b976:	d001      	beq.n	800b97c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b978:	2301      	movs	r3, #1
 800b97a:	e0cf      	b.n	800bb1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f003 0302 	and.w	r3, r3, #2
 800b984:	2b00      	cmp	r3, #0
 800b986:	d010      	beq.n	800b9aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	689a      	ldr	r2, [r3, #8]
 800b98c:	4b66      	ldr	r3, [pc, #408]	; (800bb28 <HAL_RCC_ClockConfig+0x1f0>)
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b994:	429a      	cmp	r2, r3
 800b996:	d908      	bls.n	800b9aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b998:	4b63      	ldr	r3, [pc, #396]	; (800bb28 <HAL_RCC_ClockConfig+0x1f0>)
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	4960      	ldr	r1, [pc, #384]	; (800bb28 <HAL_RCC_ClockConfig+0x1f0>)
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f003 0301 	and.w	r3, r3, #1
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d04c      	beq.n	800ba50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	2b03      	cmp	r3, #3
 800b9bc:	d107      	bne.n	800b9ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b9be:	4b5a      	ldr	r3, [pc, #360]	; (800bb28 <HAL_RCC_ClockConfig+0x1f0>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d121      	bne.n	800ba0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e0a6      	b.n	800bb1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d107      	bne.n	800b9e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b9d6:	4b54      	ldr	r3, [pc, #336]	; (800bb28 <HAL_RCC_ClockConfig+0x1f0>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d115      	bne.n	800ba0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e09a      	b.n	800bb1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d107      	bne.n	800b9fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b9ee:	4b4e      	ldr	r3, [pc, #312]	; (800bb28 <HAL_RCC_ClockConfig+0x1f0>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f003 0302 	and.w	r3, r3, #2
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d109      	bne.n	800ba0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e08e      	b.n	800bb1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b9fe:	4b4a      	ldr	r3, [pc, #296]	; (800bb28 <HAL_RCC_ClockConfig+0x1f0>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e086      	b.n	800bb1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ba0e:	4b46      	ldr	r3, [pc, #280]	; (800bb28 <HAL_RCC_ClockConfig+0x1f0>)
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	f023 0203 	bic.w	r2, r3, #3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	4943      	ldr	r1, [pc, #268]	; (800bb28 <HAL_RCC_ClockConfig+0x1f0>)
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba20:	f7fa fbb2 	bl	8006188 <HAL_GetTick>
 800ba24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba26:	e00a      	b.n	800ba3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba28:	f7fa fbae 	bl	8006188 <HAL_GetTick>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d901      	bls.n	800ba3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	e06e      	b.n	800bb1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba3e:	4b3a      	ldr	r3, [pc, #232]	; (800bb28 <HAL_RCC_ClockConfig+0x1f0>)
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	f003 020c 	and.w	r2, r3, #12
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d1eb      	bne.n	800ba28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 0302 	and.w	r3, r3, #2
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d010      	beq.n	800ba7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	689a      	ldr	r2, [r3, #8]
 800ba60:	4b31      	ldr	r3, [pc, #196]	; (800bb28 <HAL_RCC_ClockConfig+0x1f0>)
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d208      	bcs.n	800ba7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ba6c:	4b2e      	ldr	r3, [pc, #184]	; (800bb28 <HAL_RCC_ClockConfig+0x1f0>)
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	492b      	ldr	r1, [pc, #172]	; (800bb28 <HAL_RCC_ClockConfig+0x1f0>)
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ba7e:	4b29      	ldr	r3, [pc, #164]	; (800bb24 <HAL_RCC_ClockConfig+0x1ec>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f003 0307 	and.w	r3, r3, #7
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d210      	bcs.n	800baae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba8c:	4b25      	ldr	r3, [pc, #148]	; (800bb24 <HAL_RCC_ClockConfig+0x1ec>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f023 0207 	bic.w	r2, r3, #7
 800ba94:	4923      	ldr	r1, [pc, #140]	; (800bb24 <HAL_RCC_ClockConfig+0x1ec>)
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba9c:	4b21      	ldr	r3, [pc, #132]	; (800bb24 <HAL_RCC_ClockConfig+0x1ec>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f003 0307 	and.w	r3, r3, #7
 800baa4:	683a      	ldr	r2, [r7, #0]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d001      	beq.n	800baae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	e036      	b.n	800bb1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f003 0304 	and.w	r3, r3, #4
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d008      	beq.n	800bacc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800baba:	4b1b      	ldr	r3, [pc, #108]	; (800bb28 <HAL_RCC_ClockConfig+0x1f0>)
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	4918      	ldr	r1, [pc, #96]	; (800bb28 <HAL_RCC_ClockConfig+0x1f0>)
 800bac8:	4313      	orrs	r3, r2
 800baca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 0308 	and.w	r3, r3, #8
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d009      	beq.n	800baec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bad8:	4b13      	ldr	r3, [pc, #76]	; (800bb28 <HAL_RCC_ClockConfig+0x1f0>)
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	691b      	ldr	r3, [r3, #16]
 800bae4:	00db      	lsls	r3, r3, #3
 800bae6:	4910      	ldr	r1, [pc, #64]	; (800bb28 <HAL_RCC_ClockConfig+0x1f0>)
 800bae8:	4313      	orrs	r3, r2
 800baea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800baec:	f000 f824 	bl	800bb38 <HAL_RCC_GetSysClockFreq>
 800baf0:	4602      	mov	r2, r0
 800baf2:	4b0d      	ldr	r3, [pc, #52]	; (800bb28 <HAL_RCC_ClockConfig+0x1f0>)
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	091b      	lsrs	r3, r3, #4
 800baf8:	f003 030f 	and.w	r3, r3, #15
 800bafc:	490b      	ldr	r1, [pc, #44]	; (800bb2c <HAL_RCC_ClockConfig+0x1f4>)
 800bafe:	5ccb      	ldrb	r3, [r1, r3]
 800bb00:	f003 031f 	and.w	r3, r3, #31
 800bb04:	fa22 f303 	lsr.w	r3, r2, r3
 800bb08:	4a09      	ldr	r2, [pc, #36]	; (800bb30 <HAL_RCC_ClockConfig+0x1f8>)
 800bb0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800bb0c:	4b09      	ldr	r3, [pc, #36]	; (800bb34 <HAL_RCC_ClockConfig+0x1fc>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7fa fae9 	bl	80060e8 <HAL_InitTick>
 800bb16:	4603      	mov	r3, r0
 800bb18:	72fb      	strb	r3, [r7, #11]

  return status;
 800bb1a:	7afb      	ldrb	r3, [r7, #11]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3710      	adds	r7, #16
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	40022000 	.word	0x40022000
 800bb28:	40021000 	.word	0x40021000
 800bb2c:	0801d89c 	.word	0x0801d89c
 800bb30:	20000038 	.word	0x20000038
 800bb34:	2000003c 	.word	0x2000003c

0800bb38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b089      	sub	sp, #36	; 0x24
 800bb3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	61fb      	str	r3, [r7, #28]
 800bb42:	2300      	movs	r3, #0
 800bb44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb46:	4b3e      	ldr	r3, [pc, #248]	; (800bc40 <HAL_RCC_GetSysClockFreq+0x108>)
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	f003 030c 	and.w	r3, r3, #12
 800bb4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bb50:	4b3b      	ldr	r3, [pc, #236]	; (800bc40 <HAL_RCC_GetSysClockFreq+0x108>)
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	f003 0303 	and.w	r3, r3, #3
 800bb58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d005      	beq.n	800bb6c <HAL_RCC_GetSysClockFreq+0x34>
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	2b0c      	cmp	r3, #12
 800bb64:	d121      	bne.n	800bbaa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d11e      	bne.n	800bbaa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800bb6c:	4b34      	ldr	r3, [pc, #208]	; (800bc40 <HAL_RCC_GetSysClockFreq+0x108>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f003 0308 	and.w	r3, r3, #8
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d107      	bne.n	800bb88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800bb78:	4b31      	ldr	r3, [pc, #196]	; (800bc40 <HAL_RCC_GetSysClockFreq+0x108>)
 800bb7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb7e:	0a1b      	lsrs	r3, r3, #8
 800bb80:	f003 030f 	and.w	r3, r3, #15
 800bb84:	61fb      	str	r3, [r7, #28]
 800bb86:	e005      	b.n	800bb94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bb88:	4b2d      	ldr	r3, [pc, #180]	; (800bc40 <HAL_RCC_GetSysClockFreq+0x108>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	091b      	lsrs	r3, r3, #4
 800bb8e:	f003 030f 	and.w	r3, r3, #15
 800bb92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800bb94:	4a2b      	ldr	r2, [pc, #172]	; (800bc44 <HAL_RCC_GetSysClockFreq+0x10c>)
 800bb96:	69fb      	ldr	r3, [r7, #28]
 800bb98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10d      	bne.n	800bbc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bba8:	e00a      	b.n	800bbc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	2b04      	cmp	r3, #4
 800bbae:	d102      	bne.n	800bbb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bbb0:	4b25      	ldr	r3, [pc, #148]	; (800bc48 <HAL_RCC_GetSysClockFreq+0x110>)
 800bbb2:	61bb      	str	r3, [r7, #24]
 800bbb4:	e004      	b.n	800bbc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	2b08      	cmp	r3, #8
 800bbba:	d101      	bne.n	800bbc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bbbc:	4b23      	ldr	r3, [pc, #140]	; (800bc4c <HAL_RCC_GetSysClockFreq+0x114>)
 800bbbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	2b0c      	cmp	r3, #12
 800bbc4:	d134      	bne.n	800bc30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bbc6:	4b1e      	ldr	r3, [pc, #120]	; (800bc40 <HAL_RCC_GetSysClockFreq+0x108>)
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	f003 0303 	and.w	r3, r3, #3
 800bbce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	2b02      	cmp	r3, #2
 800bbd4:	d003      	beq.n	800bbde <HAL_RCC_GetSysClockFreq+0xa6>
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	2b03      	cmp	r3, #3
 800bbda:	d003      	beq.n	800bbe4 <HAL_RCC_GetSysClockFreq+0xac>
 800bbdc:	e005      	b.n	800bbea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800bbde:	4b1a      	ldr	r3, [pc, #104]	; (800bc48 <HAL_RCC_GetSysClockFreq+0x110>)
 800bbe0:	617b      	str	r3, [r7, #20]
      break;
 800bbe2:	e005      	b.n	800bbf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800bbe4:	4b19      	ldr	r3, [pc, #100]	; (800bc4c <HAL_RCC_GetSysClockFreq+0x114>)
 800bbe6:	617b      	str	r3, [r7, #20]
      break;
 800bbe8:	e002      	b.n	800bbf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	617b      	str	r3, [r7, #20]
      break;
 800bbee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bbf0:	4b13      	ldr	r3, [pc, #76]	; (800bc40 <HAL_RCC_GetSysClockFreq+0x108>)
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	091b      	lsrs	r3, r3, #4
 800bbf6:	f003 0307 	and.w	r3, r3, #7
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800bbfe:	4b10      	ldr	r3, [pc, #64]	; (800bc40 <HAL_RCC_GetSysClockFreq+0x108>)
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	0a1b      	lsrs	r3, r3, #8
 800bc04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc08:	697a      	ldr	r2, [r7, #20]
 800bc0a:	fb03 f202 	mul.w	r2, r3, r2
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bc16:	4b0a      	ldr	r3, [pc, #40]	; (800bc40 <HAL_RCC_GetSysClockFreq+0x108>)
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	0e5b      	lsrs	r3, r3, #25
 800bc1c:	f003 0303 	and.w	r3, r3, #3
 800bc20:	3301      	adds	r3, #1
 800bc22:	005b      	lsls	r3, r3, #1
 800bc24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800bc26:	697a      	ldr	r2, [r7, #20]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800bc30:	69bb      	ldr	r3, [r7, #24]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3724      	adds	r7, #36	; 0x24
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop
 800bc40:	40021000 	.word	0x40021000
 800bc44:	0801d8b4 	.word	0x0801d8b4
 800bc48:	00f42400 	.word	0x00f42400
 800bc4c:	007a1200 	.word	0x007a1200

0800bc50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bc50:	b480      	push	{r7}
 800bc52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bc54:	4b03      	ldr	r3, [pc, #12]	; (800bc64 <HAL_RCC_GetHCLKFreq+0x14>)
 800bc56:	681b      	ldr	r3, [r3, #0]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop
 800bc64:	20000038 	.word	0x20000038

0800bc68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800bc6c:	f7ff fff0 	bl	800bc50 <HAL_RCC_GetHCLKFreq>
 800bc70:	4602      	mov	r2, r0
 800bc72:	4b06      	ldr	r3, [pc, #24]	; (800bc8c <HAL_RCC_GetPCLK1Freq+0x24>)
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	0a1b      	lsrs	r3, r3, #8
 800bc78:	f003 0307 	and.w	r3, r3, #7
 800bc7c:	4904      	ldr	r1, [pc, #16]	; (800bc90 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bc7e:	5ccb      	ldrb	r3, [r1, r3]
 800bc80:	f003 031f 	and.w	r3, r3, #31
 800bc84:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	40021000 	.word	0x40021000
 800bc90:	0801d8ac 	.word	0x0801d8ac

0800bc94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800bc98:	f7ff ffda 	bl	800bc50 <HAL_RCC_GetHCLKFreq>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	4b06      	ldr	r3, [pc, #24]	; (800bcb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	0adb      	lsrs	r3, r3, #11
 800bca4:	f003 0307 	and.w	r3, r3, #7
 800bca8:	4904      	ldr	r1, [pc, #16]	; (800bcbc <HAL_RCC_GetPCLK2Freq+0x28>)
 800bcaa:	5ccb      	ldrb	r3, [r1, r3]
 800bcac:	f003 031f 	and.w	r3, r3, #31
 800bcb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	40021000 	.word	0x40021000
 800bcbc:	0801d8ac 	.word	0x0801d8ac

0800bcc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800bcc8:	2300      	movs	r3, #0
 800bcca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800bccc:	4b2a      	ldr	r3, [pc, #168]	; (800bd78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bcce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d003      	beq.n	800bce0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800bcd8:	f7ff f9a6 	bl	800b028 <HAL_PWREx_GetVoltageRange>
 800bcdc:	6178      	str	r0, [r7, #20]
 800bcde:	e014      	b.n	800bd0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800bce0:	4b25      	ldr	r3, [pc, #148]	; (800bd78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bce4:	4a24      	ldr	r2, [pc, #144]	; (800bd78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcea:	6593      	str	r3, [r2, #88]	; 0x58
 800bcec:	4b22      	ldr	r3, [pc, #136]	; (800bd78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bcee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcf4:	60fb      	str	r3, [r7, #12]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800bcf8:	f7ff f996 	bl	800b028 <HAL_PWREx_GetVoltageRange>
 800bcfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800bcfe:	4b1e      	ldr	r3, [pc, #120]	; (800bd78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bd00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd02:	4a1d      	ldr	r2, [pc, #116]	; (800bd78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bd04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd10:	d10b      	bne.n	800bd2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2b80      	cmp	r3, #128	; 0x80
 800bd16:	d919      	bls.n	800bd4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2ba0      	cmp	r3, #160	; 0xa0
 800bd1c:	d902      	bls.n	800bd24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800bd1e:	2302      	movs	r3, #2
 800bd20:	613b      	str	r3, [r7, #16]
 800bd22:	e013      	b.n	800bd4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800bd24:	2301      	movs	r3, #1
 800bd26:	613b      	str	r3, [r7, #16]
 800bd28:	e010      	b.n	800bd4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b80      	cmp	r3, #128	; 0x80
 800bd2e:	d902      	bls.n	800bd36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800bd30:	2303      	movs	r3, #3
 800bd32:	613b      	str	r3, [r7, #16]
 800bd34:	e00a      	b.n	800bd4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2b80      	cmp	r3, #128	; 0x80
 800bd3a:	d102      	bne.n	800bd42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800bd3c:	2302      	movs	r3, #2
 800bd3e:	613b      	str	r3, [r7, #16]
 800bd40:	e004      	b.n	800bd4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2b70      	cmp	r3, #112	; 0x70
 800bd46:	d101      	bne.n	800bd4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800bd48:	2301      	movs	r3, #1
 800bd4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800bd4c:	4b0b      	ldr	r3, [pc, #44]	; (800bd7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f023 0207 	bic.w	r2, r3, #7
 800bd54:	4909      	ldr	r1, [pc, #36]	; (800bd7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800bd5c:	4b07      	ldr	r3, [pc, #28]	; (800bd7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f003 0307 	and.w	r3, r3, #7
 800bd64:	693a      	ldr	r2, [r7, #16]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d001      	beq.n	800bd6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e000      	b.n	800bd70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3718      	adds	r7, #24
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	40021000 	.word	0x40021000
 800bd7c:	40022000 	.word	0x40022000

0800bd80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bd88:	2300      	movs	r3, #0
 800bd8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d031      	beq.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bda0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bda4:	d01a      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800bda6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bdaa:	d814      	bhi.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d009      	beq.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800bdb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bdb4:	d10f      	bne.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800bdb6:	4b5d      	ldr	r3, [pc, #372]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	4a5c      	ldr	r2, [pc, #368]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bdbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdc0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bdc2:	e00c      	b.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	2100      	movs	r1, #0
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f000 f9ce 	bl	800c16c <RCCEx_PLLSAI1_Config>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bdd4:	e003      	b.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	74fb      	strb	r3, [r7, #19]
      break;
 800bdda:	e000      	b.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800bddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bdde:	7cfb      	ldrb	r3, [r7, #19]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d10b      	bne.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bde4:	4b51      	ldr	r3, [pc, #324]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bde6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdf2:	494e      	ldr	r1, [pc, #312]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800bdfa:	e001      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdfc:	7cfb      	ldrb	r3, [r7, #19]
 800bdfe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be08:	2b00      	cmp	r3, #0
 800be0a:	f000 809e 	beq.w	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800be0e:	2300      	movs	r3, #0
 800be10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800be12:	4b46      	ldr	r3, [pc, #280]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800be14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d101      	bne.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800be1e:	2301      	movs	r3, #1
 800be20:	e000      	b.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800be22:	2300      	movs	r3, #0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00d      	beq.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800be28:	4b40      	ldr	r3, [pc, #256]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800be2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be2c:	4a3f      	ldr	r2, [pc, #252]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800be2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be32:	6593      	str	r3, [r2, #88]	; 0x58
 800be34:	4b3d      	ldr	r3, [pc, #244]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800be36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be3c:	60bb      	str	r3, [r7, #8]
 800be3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800be40:	2301      	movs	r3, #1
 800be42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800be44:	4b3a      	ldr	r3, [pc, #232]	; (800bf30 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a39      	ldr	r2, [pc, #228]	; (800bf30 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800be4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800be50:	f7fa f99a 	bl	8006188 <HAL_GetTick>
 800be54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800be56:	e009      	b.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be58:	f7fa f996 	bl	8006188 <HAL_GetTick>
 800be5c:	4602      	mov	r2, r0
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	2b02      	cmp	r3, #2
 800be64:	d902      	bls.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800be66:	2303      	movs	r3, #3
 800be68:	74fb      	strb	r3, [r7, #19]
        break;
 800be6a:	e005      	b.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800be6c:	4b30      	ldr	r3, [pc, #192]	; (800bf30 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be74:	2b00      	cmp	r3, #0
 800be76:	d0ef      	beq.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800be78:	7cfb      	ldrb	r3, [r7, #19]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d15a      	bne.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800be7e:	4b2b      	ldr	r3, [pc, #172]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800be80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d01e      	beq.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be94:	697a      	ldr	r2, [r7, #20]
 800be96:	429a      	cmp	r2, r3
 800be98:	d019      	beq.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800be9a:	4b24      	ldr	r3, [pc, #144]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800be9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bea4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bea6:	4b21      	ldr	r3, [pc, #132]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beac:	4a1f      	ldr	r2, [pc, #124]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800beae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800beb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800beb6:	4b1d      	ldr	r3, [pc, #116]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800beb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bebc:	4a1b      	ldr	r2, [pc, #108]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bec6:	4a19      	ldr	r2, [pc, #100]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	f003 0301 	and.w	r3, r3, #1
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d016      	beq.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bed8:	f7fa f956 	bl	8006188 <HAL_GetTick>
 800bedc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bede:	e00b      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bee0:	f7fa f952 	bl	8006188 <HAL_GetTick>
 800bee4:	4602      	mov	r2, r0
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	f241 3288 	movw	r2, #5000	; 0x1388
 800beee:	4293      	cmp	r3, r2
 800bef0:	d902      	bls.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800bef2:	2303      	movs	r3, #3
 800bef4:	74fb      	strb	r3, [r7, #19]
            break;
 800bef6:	e006      	b.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bef8:	4b0c      	ldr	r3, [pc, #48]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800befa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800befe:	f003 0302 	and.w	r3, r3, #2
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d0ec      	beq.n	800bee0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800bf06:	7cfb      	ldrb	r3, [r7, #19]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d10b      	bne.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bf0c:	4b07      	ldr	r3, [pc, #28]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bf0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf1a:	4904      	ldr	r1, [pc, #16]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bf22:	e009      	b.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bf24:	7cfb      	ldrb	r3, [r7, #19]
 800bf26:	74bb      	strb	r3, [r7, #18]
 800bf28:	e006      	b.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800bf2a:	bf00      	nop
 800bf2c:	40021000 	.word	0x40021000
 800bf30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf34:	7cfb      	ldrb	r3, [r7, #19]
 800bf36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bf38:	7c7b      	ldrb	r3, [r7, #17]
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d105      	bne.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bf3e:	4b8a      	ldr	r3, [pc, #552]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bf40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf42:	4a89      	ldr	r2, [pc, #548]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bf44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f003 0301 	and.w	r3, r3, #1
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00a      	beq.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bf56:	4b84      	ldr	r3, [pc, #528]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bf58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf5c:	f023 0203 	bic.w	r2, r3, #3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6a1b      	ldr	r3, [r3, #32]
 800bf64:	4980      	ldr	r1, [pc, #512]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bf66:	4313      	orrs	r3, r2
 800bf68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f003 0302 	and.w	r3, r3, #2
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d00a      	beq.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bf78:	4b7b      	ldr	r3, [pc, #492]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bf7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf7e:	f023 020c 	bic.w	r2, r3, #12
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf86:	4978      	ldr	r1, [pc, #480]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f003 0320 	and.w	r3, r3, #32
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00a      	beq.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bf9a:	4b73      	ldr	r3, [pc, #460]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bf9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfa0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfa8:	496f      	ldr	r1, [pc, #444]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00a      	beq.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bfbc:	4b6a      	ldr	r3, [pc, #424]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bfbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfc2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfca:	4967      	ldr	r1, [pc, #412]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d00a      	beq.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bfde:	4b62      	ldr	r3, [pc, #392]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bfe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfe4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfec:	495e      	ldr	r1, [pc, #376]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bfee:	4313      	orrs	r3, r2
 800bff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00a      	beq.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c000:	4b59      	ldr	r3, [pc, #356]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c006:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00e:	4956      	ldr	r1, [pc, #344]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c010:	4313      	orrs	r3, r2
 800c012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00a      	beq.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c022:	4b51      	ldr	r3, [pc, #324]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c028:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c030:	494d      	ldr	r1, [pc, #308]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c032:	4313      	orrs	r3, r2
 800c034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c040:	2b00      	cmp	r3, #0
 800c042:	d028      	beq.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c044:	4b48      	ldr	r3, [pc, #288]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c04a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c052:	4945      	ldr	r1, [pc, #276]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c054:	4313      	orrs	r3, r2
 800c056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c05e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c062:	d106      	bne.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c064:	4b40      	ldr	r3, [pc, #256]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	4a3f      	ldr	r2, [pc, #252]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c06a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c06e:	60d3      	str	r3, [r2, #12]
 800c070:	e011      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c076:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c07a:	d10c      	bne.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	3304      	adds	r3, #4
 800c080:	2101      	movs	r1, #1
 800c082:	4618      	mov	r0, r3
 800c084:	f000 f872 	bl	800c16c <RCCEx_PLLSAI1_Config>
 800c088:	4603      	mov	r3, r0
 800c08a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c08c:	7cfb      	ldrb	r3, [r7, #19]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d001      	beq.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800c092:	7cfb      	ldrb	r3, [r7, #19]
 800c094:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d028      	beq.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c0a2:	4b31      	ldr	r3, [pc, #196]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c0a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0b0:	492d      	ldr	r1, [pc, #180]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0c0:	d106      	bne.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c0c2:	4b29      	ldr	r3, [pc, #164]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	4a28      	ldr	r2, [pc, #160]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c0c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0cc:	60d3      	str	r3, [r2, #12]
 800c0ce:	e011      	b.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c0d8:	d10c      	bne.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	3304      	adds	r3, #4
 800c0de:	2101      	movs	r1, #1
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f000 f843 	bl	800c16c <RCCEx_PLLSAI1_Config>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c0ea:	7cfb      	ldrb	r3, [r7, #19]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d001      	beq.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800c0f0:	7cfb      	ldrb	r3, [r7, #19]
 800c0f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d01c      	beq.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c100:	4b19      	ldr	r3, [pc, #100]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c106:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c10e:	4916      	ldr	r1, [pc, #88]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c110:	4313      	orrs	r3, r2
 800c112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c11a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c11e:	d10c      	bne.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	3304      	adds	r3, #4
 800c124:	2102      	movs	r1, #2
 800c126:	4618      	mov	r0, r3
 800c128:	f000 f820 	bl	800c16c <RCCEx_PLLSAI1_Config>
 800c12c:	4603      	mov	r3, r0
 800c12e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c130:	7cfb      	ldrb	r3, [r7, #19]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d001      	beq.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800c136:	7cfb      	ldrb	r3, [r7, #19]
 800c138:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00a      	beq.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c146:	4b08      	ldr	r3, [pc, #32]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c14c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c154:	4904      	ldr	r1, [pc, #16]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c156:	4313      	orrs	r3, r2
 800c158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c15c:	7cbb      	ldrb	r3, [r7, #18]
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3718      	adds	r7, #24
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	40021000 	.word	0x40021000

0800c16c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c176:	2300      	movs	r3, #0
 800c178:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c17a:	4b74      	ldr	r3, [pc, #464]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	f003 0303 	and.w	r3, r3, #3
 800c182:	2b00      	cmp	r3, #0
 800c184:	d018      	beq.n	800c1b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c186:	4b71      	ldr	r3, [pc, #452]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	f003 0203 	and.w	r2, r3, #3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	429a      	cmp	r2, r3
 800c194:	d10d      	bne.n	800c1b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
       ||
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d009      	beq.n	800c1b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c19e:	4b6b      	ldr	r3, [pc, #428]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	091b      	lsrs	r3, r3, #4
 800c1a4:	f003 0307 	and.w	r3, r3, #7
 800c1a8:	1c5a      	adds	r2, r3, #1
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	685b      	ldr	r3, [r3, #4]
       ||
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d047      	beq.n	800c242 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	73fb      	strb	r3, [r7, #15]
 800c1b6:	e044      	b.n	800c242 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2b03      	cmp	r3, #3
 800c1be:	d018      	beq.n	800c1f2 <RCCEx_PLLSAI1_Config+0x86>
 800c1c0:	2b03      	cmp	r3, #3
 800c1c2:	d825      	bhi.n	800c210 <RCCEx_PLLSAI1_Config+0xa4>
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d002      	beq.n	800c1ce <RCCEx_PLLSAI1_Config+0x62>
 800c1c8:	2b02      	cmp	r3, #2
 800c1ca:	d009      	beq.n	800c1e0 <RCCEx_PLLSAI1_Config+0x74>
 800c1cc:	e020      	b.n	800c210 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c1ce:	4b5f      	ldr	r3, [pc, #380]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f003 0302 	and.w	r3, r3, #2
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d11d      	bne.n	800c216 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c1de:	e01a      	b.n	800c216 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c1e0:	4b5a      	ldr	r3, [pc, #360]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d116      	bne.n	800c21a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c1f0:	e013      	b.n	800c21a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c1f2:	4b56      	ldr	r3, [pc, #344]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d10f      	bne.n	800c21e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c1fe:	4b53      	ldr	r3, [pc, #332]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c206:	2b00      	cmp	r3, #0
 800c208:	d109      	bne.n	800c21e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c20e:	e006      	b.n	800c21e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c210:	2301      	movs	r3, #1
 800c212:	73fb      	strb	r3, [r7, #15]
      break;
 800c214:	e004      	b.n	800c220 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c216:	bf00      	nop
 800c218:	e002      	b.n	800c220 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c21a:	bf00      	nop
 800c21c:	e000      	b.n	800c220 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c21e:	bf00      	nop
    }

    if(status == HAL_OK)
 800c220:	7bfb      	ldrb	r3, [r7, #15]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d10d      	bne.n	800c242 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c226:	4b49      	ldr	r3, [pc, #292]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6819      	ldr	r1, [r3, #0]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	3b01      	subs	r3, #1
 800c238:	011b      	lsls	r3, r3, #4
 800c23a:	430b      	orrs	r3, r1
 800c23c:	4943      	ldr	r1, [pc, #268]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c23e:	4313      	orrs	r3, r2
 800c240:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c242:	7bfb      	ldrb	r3, [r7, #15]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d17c      	bne.n	800c342 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c248:	4b40      	ldr	r3, [pc, #256]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a3f      	ldr	r2, [pc, #252]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c24e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c254:	f7f9 ff98 	bl	8006188 <HAL_GetTick>
 800c258:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c25a:	e009      	b.n	800c270 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c25c:	f7f9 ff94 	bl	8006188 <HAL_GetTick>
 800c260:	4602      	mov	r2, r0
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	1ad3      	subs	r3, r2, r3
 800c266:	2b02      	cmp	r3, #2
 800c268:	d902      	bls.n	800c270 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c26a:	2303      	movs	r3, #3
 800c26c:	73fb      	strb	r3, [r7, #15]
        break;
 800c26e:	e005      	b.n	800c27c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c270:	4b36      	ldr	r3, [pc, #216]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d1ef      	bne.n	800c25c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c27c:	7bfb      	ldrb	r3, [r7, #15]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d15f      	bne.n	800c342 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d110      	bne.n	800c2aa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c288:	4b30      	ldr	r3, [pc, #192]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c28a:	691b      	ldr	r3, [r3, #16]
 800c28c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800c290:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	6892      	ldr	r2, [r2, #8]
 800c298:	0211      	lsls	r1, r2, #8
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	68d2      	ldr	r2, [r2, #12]
 800c29e:	06d2      	lsls	r2, r2, #27
 800c2a0:	430a      	orrs	r2, r1
 800c2a2:	492a      	ldr	r1, [pc, #168]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	610b      	str	r3, [r1, #16]
 800c2a8:	e027      	b.n	800c2fa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d112      	bne.n	800c2d6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c2b0:	4b26      	ldr	r3, [pc, #152]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c2b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	6892      	ldr	r2, [r2, #8]
 800c2c0:	0211      	lsls	r1, r2, #8
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	6912      	ldr	r2, [r2, #16]
 800c2c6:	0852      	lsrs	r2, r2, #1
 800c2c8:	3a01      	subs	r2, #1
 800c2ca:	0552      	lsls	r2, r2, #21
 800c2cc:	430a      	orrs	r2, r1
 800c2ce:	491f      	ldr	r1, [pc, #124]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	610b      	str	r3, [r1, #16]
 800c2d4:	e011      	b.n	800c2fa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c2d6:	4b1d      	ldr	r3, [pc, #116]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c2d8:	691b      	ldr	r3, [r3, #16]
 800c2da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800c2de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	6892      	ldr	r2, [r2, #8]
 800c2e6:	0211      	lsls	r1, r2, #8
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	6952      	ldr	r2, [r2, #20]
 800c2ec:	0852      	lsrs	r2, r2, #1
 800c2ee:	3a01      	subs	r2, #1
 800c2f0:	0652      	lsls	r2, r2, #25
 800c2f2:	430a      	orrs	r2, r1
 800c2f4:	4915      	ldr	r1, [pc, #84]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c2fa:	4b14      	ldr	r3, [pc, #80]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4a13      	ldr	r2, [pc, #76]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c300:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c304:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c306:	f7f9 ff3f 	bl	8006188 <HAL_GetTick>
 800c30a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c30c:	e009      	b.n	800c322 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c30e:	f7f9 ff3b 	bl	8006188 <HAL_GetTick>
 800c312:	4602      	mov	r2, r0
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	2b02      	cmp	r3, #2
 800c31a:	d902      	bls.n	800c322 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800c31c:	2303      	movs	r3, #3
 800c31e:	73fb      	strb	r3, [r7, #15]
          break;
 800c320:	e005      	b.n	800c32e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c322:	4b0a      	ldr	r3, [pc, #40]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d0ef      	beq.n	800c30e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800c32e:	7bfb      	ldrb	r3, [r7, #15]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d106      	bne.n	800c342 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c334:	4b05      	ldr	r3, [pc, #20]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c336:	691a      	ldr	r2, [r3, #16]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	699b      	ldr	r3, [r3, #24]
 800c33c:	4903      	ldr	r1, [pc, #12]	; (800c34c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c33e:	4313      	orrs	r3, r2
 800c340:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c342:	7bfb      	ldrb	r3, [r7, #15]
}
 800c344:	4618      	mov	r0, r3
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	40021000 	.word	0x40021000

0800c350 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d101      	bne.n	800c362 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c35e:	2301      	movs	r3, #1
 800c360:	e095      	b.n	800c48e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c366:	2b00      	cmp	r3, #0
 800c368:	d108      	bne.n	800c37c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c372:	d009      	beq.n	800c388 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	61da      	str	r2, [r3, #28]
 800c37a:	e005      	b.n	800c388 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c394:	b2db      	uxtb	r3, r3
 800c396:	2b00      	cmp	r3, #0
 800c398:	d106      	bne.n	800c3a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f7f6 fc6e 	bl	8002c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c3be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c3c8:	d902      	bls.n	800c3d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	60fb      	str	r3, [r7, #12]
 800c3ce:	e002      	b.n	800c3d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c3d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c3de:	d007      	beq.n	800c3f0 <HAL_SPI_Init+0xa0>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c3e8:	d002      	beq.n	800c3f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c400:	431a      	orrs	r2, r3
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	f003 0302 	and.w	r3, r3, #2
 800c40a:	431a      	orrs	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	695b      	ldr	r3, [r3, #20]
 800c410:	f003 0301 	and.w	r3, r3, #1
 800c414:	431a      	orrs	r2, r3
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	699b      	ldr	r3, [r3, #24]
 800c41a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c41e:	431a      	orrs	r2, r3
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	69db      	ldr	r3, [r3, #28]
 800c424:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c428:	431a      	orrs	r2, r3
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6a1b      	ldr	r3, [r3, #32]
 800c42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c432:	ea42 0103 	orr.w	r1, r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c43a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	430a      	orrs	r2, r1
 800c444:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	699b      	ldr	r3, [r3, #24]
 800c44a:	0c1b      	lsrs	r3, r3, #16
 800c44c:	f003 0204 	and.w	r2, r3, #4
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c454:	f003 0310 	and.w	r3, r3, #16
 800c458:	431a      	orrs	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c45e:	f003 0308 	and.w	r3, r3, #8
 800c462:	431a      	orrs	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c46c:	ea42 0103 	orr.w	r1, r2, r3
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	430a      	orrs	r2, r1
 800c47c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2200      	movs	r2, #0
 800c482:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c496:	b580      	push	{r7, lr}
 800c498:	b088      	sub	sp, #32
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	60f8      	str	r0, [r7, #12]
 800c49e:	60b9      	str	r1, [r7, #8]
 800c4a0:	603b      	str	r3, [r7, #0]
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d101      	bne.n	800c4b8 <HAL_SPI_Transmit+0x22>
 800c4b4:	2302      	movs	r3, #2
 800c4b6:	e15f      	b.n	800c778 <HAL_SPI_Transmit+0x2e2>
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c4c0:	f7f9 fe62 	bl	8006188 <HAL_GetTick>
 800c4c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c4c6:	88fb      	ldrh	r3, [r7, #6]
 800c4c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d002      	beq.n	800c4dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c4d6:	2302      	movs	r3, #2
 800c4d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c4da:	e148      	b.n	800c76e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d002      	beq.n	800c4e8 <HAL_SPI_Transmit+0x52>
 800c4e2:	88fb      	ldrh	r3, [r7, #6]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d102      	bne.n	800c4ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c4ec:	e13f      	b.n	800c76e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2203      	movs	r2, #3
 800c4f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	88fa      	ldrh	r2, [r7, #6]
 800c506:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	88fa      	ldrh	r2, [r7, #6]
 800c50c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2200      	movs	r2, #0
 800c512:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2200      	movs	r2, #0
 800c518:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2200      	movs	r2, #0
 800c520:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2200      	movs	r2, #0
 800c528:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2200      	movs	r2, #0
 800c52e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c538:	d10f      	bne.n	800c55a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c548:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c558:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c564:	2b40      	cmp	r3, #64	; 0x40
 800c566:	d007      	beq.n	800c578 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c576:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c580:	d94f      	bls.n	800c622 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d002      	beq.n	800c590 <HAL_SPI_Transmit+0xfa>
 800c58a:	8afb      	ldrh	r3, [r7, #22]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d142      	bne.n	800c616 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c594:	881a      	ldrh	r2, [r3, #0]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5a0:	1c9a      	adds	r2, r3, #2
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	3b01      	subs	r3, #1
 800c5ae:	b29a      	uxth	r2, r3
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c5b4:	e02f      	b.n	800c616 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	f003 0302 	and.w	r3, r3, #2
 800c5c0:	2b02      	cmp	r3, #2
 800c5c2:	d112      	bne.n	800c5ea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c8:	881a      	ldrh	r2, [r3, #0]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d4:	1c9a      	adds	r2, r3, #2
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	3b01      	subs	r3, #1
 800c5e2:	b29a      	uxth	r2, r3
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c5e8:	e015      	b.n	800c616 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5ea:	f7f9 fdcd 	bl	8006188 <HAL_GetTick>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	1ad3      	subs	r3, r2, r3
 800c5f4:	683a      	ldr	r2, [r7, #0]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d803      	bhi.n	800c602 <HAL_SPI_Transmit+0x16c>
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c600:	d102      	bne.n	800c608 <HAL_SPI_Transmit+0x172>
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d106      	bne.n	800c616 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800c608:	2303      	movs	r3, #3
 800c60a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2201      	movs	r2, #1
 800c610:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c614:	e0ab      	b.n	800c76e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1ca      	bne.n	800c5b6 <HAL_SPI_Transmit+0x120>
 800c620:	e080      	b.n	800c724 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d002      	beq.n	800c630 <HAL_SPI_Transmit+0x19a>
 800c62a:	8afb      	ldrh	r3, [r7, #22]
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d174      	bne.n	800c71a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c634:	b29b      	uxth	r3, r3
 800c636:	2b01      	cmp	r3, #1
 800c638:	d912      	bls.n	800c660 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c63e:	881a      	ldrh	r2, [r3, #0]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64a:	1c9a      	adds	r2, r3, #2
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c654:	b29b      	uxth	r3, r3
 800c656:	3b02      	subs	r3, #2
 800c658:	b29a      	uxth	r2, r3
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c65e:	e05c      	b.n	800c71a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	330c      	adds	r3, #12
 800c66a:	7812      	ldrb	r2, [r2, #0]
 800c66c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c672:	1c5a      	adds	r2, r3, #1
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	3b01      	subs	r3, #1
 800c680:	b29a      	uxth	r2, r3
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c686:	e048      	b.n	800c71a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	f003 0302 	and.w	r3, r3, #2
 800c692:	2b02      	cmp	r3, #2
 800c694:	d12b      	bne.n	800c6ee <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d912      	bls.n	800c6c6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a4:	881a      	ldrh	r2, [r3, #0]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b0:	1c9a      	adds	r2, r3, #2
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	3b02      	subs	r3, #2
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c6c4:	e029      	b.n	800c71a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	330c      	adds	r3, #12
 800c6d0:	7812      	ldrb	r2, [r2, #0]
 800c6d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d8:	1c5a      	adds	r2, r3, #1
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	3b01      	subs	r3, #1
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c6ec:	e015      	b.n	800c71a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c6ee:	f7f9 fd4b 	bl	8006188 <HAL_GetTick>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	1ad3      	subs	r3, r2, r3
 800c6f8:	683a      	ldr	r2, [r7, #0]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d803      	bhi.n	800c706 <HAL_SPI_Transmit+0x270>
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c704:	d102      	bne.n	800c70c <HAL_SPI_Transmit+0x276>
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d106      	bne.n	800c71a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800c70c:	2303      	movs	r3, #3
 800c70e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2201      	movs	r2, #1
 800c714:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c718:	e029      	b.n	800c76e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c71e:	b29b      	uxth	r3, r3
 800c720:	2b00      	cmp	r3, #0
 800c722:	d1b1      	bne.n	800c688 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c724:	69ba      	ldr	r2, [r7, #24]
 800c726:	6839      	ldr	r1, [r7, #0]
 800c728:	68f8      	ldr	r0, [r7, #12]
 800c72a:	f000 fcf9 	bl	800d120 <SPI_EndRxTxTransaction>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d002      	beq.n	800c73a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2220      	movs	r2, #32
 800c738:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d10a      	bne.n	800c758 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c742:	2300      	movs	r3, #0
 800c744:	613b      	str	r3, [r7, #16]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	613b      	str	r3, [r7, #16]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	613b      	str	r3, [r7, #16]
 800c756:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800c760:	2301      	movs	r3, #1
 800c762:	77fb      	strb	r3, [r7, #31]
 800c764:	e003      	b.n	800c76e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2201      	movs	r2, #1
 800c76a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2200      	movs	r2, #0
 800c772:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c776:	7ffb      	ldrb	r3, [r7, #31]
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3720      	adds	r7, #32
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b088      	sub	sp, #32
 800c784:	af02      	add	r7, sp, #8
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	603b      	str	r3, [r7, #0]
 800c78c:	4613      	mov	r3, r2
 800c78e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c790:	2300      	movs	r3, #0
 800c792:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d002      	beq.n	800c7a6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800c7a0:	2302      	movs	r3, #2
 800c7a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c7a4:	e11a      	b.n	800c9dc <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c7ae:	d112      	bne.n	800c7d6 <HAL_SPI_Receive+0x56>
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d10e      	bne.n	800c7d6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2204      	movs	r2, #4
 800c7bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c7c0:	88fa      	ldrh	r2, [r7, #6]
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	9300      	str	r3, [sp, #0]
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	68ba      	ldr	r2, [r7, #8]
 800c7ca:	68b9      	ldr	r1, [r7, #8]
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f000 f90e 	bl	800c9ee <HAL_SPI_TransmitReceive>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	e107      	b.n	800c9e6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d101      	bne.n	800c7e4 <HAL_SPI_Receive+0x64>
 800c7e0:	2302      	movs	r3, #2
 800c7e2:	e100      	b.n	800c9e6 <HAL_SPI_Receive+0x266>
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c7ec:	f7f9 fccc 	bl	8006188 <HAL_GetTick>
 800c7f0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d002      	beq.n	800c7fe <HAL_SPI_Receive+0x7e>
 800c7f8:	88fb      	ldrh	r3, [r7, #6]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d102      	bne.n	800c804 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c7fe:	2301      	movs	r3, #1
 800c800:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c802:	e0eb      	b.n	800c9dc <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2204      	movs	r2, #4
 800c808:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2200      	movs	r2, #0
 800c810:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	68ba      	ldr	r2, [r7, #8]
 800c816:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	88fa      	ldrh	r2, [r7, #6]
 800c81c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	88fa      	ldrh	r2, [r7, #6]
 800c824:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2200      	movs	r2, #0
 800c82c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2200      	movs	r2, #0
 800c832:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2200      	movs	r2, #0
 800c838:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2200      	movs	r2, #0
 800c83e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2200      	movs	r2, #0
 800c844:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	68db      	ldr	r3, [r3, #12]
 800c84a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c84e:	d908      	bls.n	800c862 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	685a      	ldr	r2, [r3, #4]
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c85e:	605a      	str	r2, [r3, #4]
 800c860:	e007      	b.n	800c872 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	685a      	ldr	r2, [r3, #4]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c870:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	689b      	ldr	r3, [r3, #8]
 800c876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c87a:	d10f      	bne.n	800c89c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c88a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c89a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8a6:	2b40      	cmp	r3, #64	; 0x40
 800c8a8:	d007      	beq.n	800c8ba <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c8b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c8c2:	d86f      	bhi.n	800c9a4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c8c4:	e034      	b.n	800c930 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	f003 0301 	and.w	r3, r3, #1
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d117      	bne.n	800c904 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f103 020c 	add.w	r2, r3, #12
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e0:	7812      	ldrb	r2, [r2, #0]
 800c8e2:	b2d2      	uxtb	r2, r2
 800c8e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ea:	1c5a      	adds	r2, r3, #1
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	b29a      	uxth	r2, r3
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c902:	e015      	b.n	800c930 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c904:	f7f9 fc40 	bl	8006188 <HAL_GetTick>
 800c908:	4602      	mov	r2, r0
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	1ad3      	subs	r3, r2, r3
 800c90e:	683a      	ldr	r2, [r7, #0]
 800c910:	429a      	cmp	r2, r3
 800c912:	d803      	bhi.n	800c91c <HAL_SPI_Receive+0x19c>
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c91a:	d102      	bne.n	800c922 <HAL_SPI_Receive+0x1a2>
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d106      	bne.n	800c930 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800c922:	2303      	movs	r3, #3
 800c924:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2201      	movs	r2, #1
 800c92a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c92e:	e055      	b.n	800c9dc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c936:	b29b      	uxth	r3, r3
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d1c4      	bne.n	800c8c6 <HAL_SPI_Receive+0x146>
 800c93c:	e038      	b.n	800c9b0 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	689b      	ldr	r3, [r3, #8]
 800c944:	f003 0301 	and.w	r3, r3, #1
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d115      	bne.n	800c978 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	68da      	ldr	r2, [r3, #12]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c956:	b292      	uxth	r2, r2
 800c958:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c95e:	1c9a      	adds	r2, r3, #2
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	3b01      	subs	r3, #1
 800c96e:	b29a      	uxth	r2, r3
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c976:	e015      	b.n	800c9a4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c978:	f7f9 fc06 	bl	8006188 <HAL_GetTick>
 800c97c:	4602      	mov	r2, r0
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	683a      	ldr	r2, [r7, #0]
 800c984:	429a      	cmp	r2, r3
 800c986:	d803      	bhi.n	800c990 <HAL_SPI_Receive+0x210>
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c98e:	d102      	bne.n	800c996 <HAL_SPI_Receive+0x216>
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d106      	bne.n	800c9a4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800c996:	2303      	movs	r3, #3
 800c998:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2201      	movs	r2, #1
 800c99e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c9a2:	e01b      	b.n	800c9dc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1c6      	bne.n	800c93e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c9b0:	693a      	ldr	r2, [r7, #16]
 800c9b2:	6839      	ldr	r1, [r7, #0]
 800c9b4:	68f8      	ldr	r0, [r7, #12]
 800c9b6:	f000 fb5b 	bl	800d070 <SPI_EndRxTransaction>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d002      	beq.n	800c9c6 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2220      	movs	r2, #32
 800c9c4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d002      	beq.n	800c9d4 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	75fb      	strb	r3, [r7, #23]
 800c9d2:	e003      	b.n	800c9dc <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c9e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3718      	adds	r7, #24
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b08a      	sub	sp, #40	; 0x28
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	60f8      	str	r0, [r7, #12]
 800c9f6:	60b9      	str	r1, [r7, #8]
 800c9f8:	607a      	str	r2, [r7, #4]
 800c9fa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ca00:	2300      	movs	r3, #0
 800ca02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d101      	bne.n	800ca14 <HAL_SPI_TransmitReceive+0x26>
 800ca10:	2302      	movs	r3, #2
 800ca12:	e20a      	b.n	800ce2a <HAL_SPI_TransmitReceive+0x43c>
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ca1c:	f7f9 fbb4 	bl	8006188 <HAL_GetTick>
 800ca20:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ca28:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800ca30:	887b      	ldrh	r3, [r7, #2]
 800ca32:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800ca34:	887b      	ldrh	r3, [r7, #2]
 800ca36:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ca38:	7efb      	ldrb	r3, [r7, #27]
 800ca3a:	2b01      	cmp	r3, #1
 800ca3c:	d00e      	beq.n	800ca5c <HAL_SPI_TransmitReceive+0x6e>
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ca44:	d106      	bne.n	800ca54 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d102      	bne.n	800ca54 <HAL_SPI_TransmitReceive+0x66>
 800ca4e:	7efb      	ldrb	r3, [r7, #27]
 800ca50:	2b04      	cmp	r3, #4
 800ca52:	d003      	beq.n	800ca5c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800ca54:	2302      	movs	r3, #2
 800ca56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800ca5a:	e1e0      	b.n	800ce1e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d005      	beq.n	800ca6e <HAL_SPI_TransmitReceive+0x80>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d002      	beq.n	800ca6e <HAL_SPI_TransmitReceive+0x80>
 800ca68:	887b      	ldrh	r3, [r7, #2]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d103      	bne.n	800ca76 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800ca74:	e1d3      	b.n	800ce1e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	2b04      	cmp	r3, #4
 800ca80:	d003      	beq.n	800ca8a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2205      	movs	r2, #5
 800ca86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	887a      	ldrh	r2, [r7, #2]
 800ca9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	887a      	ldrh	r2, [r7, #2]
 800caa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	68ba      	ldr	r2, [r7, #8]
 800caaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	887a      	ldrh	r2, [r7, #2]
 800cab0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	887a      	ldrh	r2, [r7, #2]
 800cab6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2200      	movs	r2, #0
 800cabc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2200      	movs	r2, #0
 800cac2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cacc:	d802      	bhi.n	800cad4 <HAL_SPI_TransmitReceive+0xe6>
 800cace:	8a3b      	ldrh	r3, [r7, #16]
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d908      	bls.n	800cae6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	685a      	ldr	r2, [r3, #4]
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cae2:	605a      	str	r2, [r3, #4]
 800cae4:	e007      	b.n	800caf6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800caf4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb00:	2b40      	cmp	r3, #64	; 0x40
 800cb02:	d007      	beq.n	800cb14 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cb1c:	f240 8081 	bls.w	800cc22 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d002      	beq.n	800cb2e <HAL_SPI_TransmitReceive+0x140>
 800cb28:	8a7b      	ldrh	r3, [r7, #18]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d16d      	bne.n	800cc0a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb32:	881a      	ldrh	r2, [r3, #0]
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb3e:	1c9a      	adds	r2, r3, #2
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cb52:	e05a      	b.n	800cc0a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	689b      	ldr	r3, [r3, #8]
 800cb5a:	f003 0302 	and.w	r3, r3, #2
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d11b      	bne.n	800cb9a <HAL_SPI_TransmitReceive+0x1ac>
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d016      	beq.n	800cb9a <HAL_SPI_TransmitReceive+0x1ac>
 800cb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d113      	bne.n	800cb9a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb76:	881a      	ldrh	r2, [r3, #0]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb82:	1c9a      	adds	r2, r3, #2
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	3b01      	subs	r3, #1
 800cb90:	b29a      	uxth	r2, r3
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cb96:	2300      	movs	r3, #0
 800cb98:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	f003 0301 	and.w	r3, r3, #1
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d11c      	bne.n	800cbe2 <HAL_SPI_TransmitReceive+0x1f4>
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d016      	beq.n	800cbe2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	68da      	ldr	r2, [r3, #12]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbbe:	b292      	uxth	r2, r2
 800cbc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbc6:	1c9a      	adds	r2, r3, #2
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800cbe2:	f7f9 fad1 	bl	8006188 <HAL_GetTick>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	69fb      	ldr	r3, [r7, #28]
 800cbea:	1ad3      	subs	r3, r2, r3
 800cbec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d80b      	bhi.n	800cc0a <HAL_SPI_TransmitReceive+0x21c>
 800cbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbf8:	d007      	beq.n	800cc0a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800cbfa:	2303      	movs	r3, #3
 800cbfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2201      	movs	r2, #1
 800cc04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800cc08:	e109      	b.n	800ce1e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d19f      	bne.n	800cb54 <HAL_SPI_TransmitReceive+0x166>
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d199      	bne.n	800cb54 <HAL_SPI_TransmitReceive+0x166>
 800cc20:	e0e3      	b.n	800cdea <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d003      	beq.n	800cc32 <HAL_SPI_TransmitReceive+0x244>
 800cc2a:	8a7b      	ldrh	r3, [r7, #18]
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	f040 80cf 	bne.w	800cdd0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc36:	b29b      	uxth	r3, r3
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d912      	bls.n	800cc62 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc40:	881a      	ldrh	r2, [r3, #0]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc4c:	1c9a      	adds	r2, r3, #2
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	3b02      	subs	r3, #2
 800cc5a:	b29a      	uxth	r2, r3
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cc60:	e0b6      	b.n	800cdd0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	330c      	adds	r3, #12
 800cc6c:	7812      	ldrb	r2, [r2, #0]
 800cc6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc74:	1c5a      	adds	r2, r3, #1
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	3b01      	subs	r3, #1
 800cc82:	b29a      	uxth	r2, r3
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cc88:	e0a2      	b.n	800cdd0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	f003 0302 	and.w	r3, r3, #2
 800cc94:	2b02      	cmp	r3, #2
 800cc96:	d134      	bne.n	800cd02 <HAL_SPI_TransmitReceive+0x314>
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d02f      	beq.n	800cd02 <HAL_SPI_TransmitReceive+0x314>
 800cca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d12c      	bne.n	800cd02 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d912      	bls.n	800ccd8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccb6:	881a      	ldrh	r2, [r3, #0]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccc2:	1c9a      	adds	r2, r3, #2
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	3b02      	subs	r3, #2
 800ccd0:	b29a      	uxth	r2, r3
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ccd6:	e012      	b.n	800ccfe <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	330c      	adds	r3, #12
 800cce2:	7812      	ldrb	r2, [r2, #0]
 800cce4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccea:	1c5a      	adds	r2, r3, #1
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	b29a      	uxth	r2, r3
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	f003 0301 	and.w	r3, r3, #1
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d148      	bne.n	800cda2 <HAL_SPI_TransmitReceive+0x3b4>
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d042      	beq.n	800cda2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d923      	bls.n	800cd70 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	68da      	ldr	r2, [r3, #12]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd32:	b292      	uxth	r2, r2
 800cd34:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd3a:	1c9a      	adds	r2, r3, #2
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	3b02      	subs	r3, #2
 800cd4a:	b29a      	uxth	r2, r3
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d81f      	bhi.n	800cd9e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	685a      	ldr	r2, [r3, #4]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cd6c:	605a      	str	r2, [r3, #4]
 800cd6e:	e016      	b.n	800cd9e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f103 020c 	add.w	r2, r3, #12
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd7c:	7812      	ldrb	r2, [r2, #0]
 800cd7e:	b2d2      	uxtb	r2, r2
 800cd80:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd86:	1c5a      	adds	r2, r3, #1
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	3b01      	subs	r3, #1
 800cd96:	b29a      	uxth	r2, r3
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800cda2:	f7f9 f9f1 	bl	8006188 <HAL_GetTick>
 800cda6:	4602      	mov	r2, r0
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	1ad3      	subs	r3, r2, r3
 800cdac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d803      	bhi.n	800cdba <HAL_SPI_TransmitReceive+0x3cc>
 800cdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdb8:	d102      	bne.n	800cdc0 <HAL_SPI_TransmitReceive+0x3d2>
 800cdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d107      	bne.n	800cdd0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800cdc0:	2303      	movs	r3, #3
 800cdc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2201      	movs	r2, #1
 800cdca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800cdce:	e026      	b.n	800ce1e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cdd4:	b29b      	uxth	r3, r3
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	f47f af57 	bne.w	800cc8a <HAL_SPI_TransmitReceive+0x29c>
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f47f af50 	bne.w	800cc8a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cdea:	69fa      	ldr	r2, [r7, #28]
 800cdec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cdee:	68f8      	ldr	r0, [r7, #12]
 800cdf0:	f000 f996 	bl	800d120 <SPI_EndRxTxTransaction>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d005      	beq.n	800ce06 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2220      	movs	r2, #32
 800ce04:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d003      	beq.n	800ce16 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ce14:	e003      	b.n	800ce1e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2201      	movs	r2, #1
 800ce1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2200      	movs	r2, #0
 800ce22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ce26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3728      	adds	r7, #40	; 0x28
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
	...

0800ce34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b088      	sub	sp, #32
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	603b      	str	r3, [r7, #0]
 800ce40:	4613      	mov	r3, r2
 800ce42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ce44:	f7f9 f9a0 	bl	8006188 <HAL_GetTick>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4c:	1a9b      	subs	r3, r3, r2
 800ce4e:	683a      	ldr	r2, [r7, #0]
 800ce50:	4413      	add	r3, r2
 800ce52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ce54:	f7f9 f998 	bl	8006188 <HAL_GetTick>
 800ce58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ce5a:	4b39      	ldr	r3, [pc, #228]	; (800cf40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	015b      	lsls	r3, r3, #5
 800ce60:	0d1b      	lsrs	r3, r3, #20
 800ce62:	69fa      	ldr	r2, [r7, #28]
 800ce64:	fb02 f303 	mul.w	r3, r2, r3
 800ce68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ce6a:	e054      	b.n	800cf16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce72:	d050      	beq.n	800cf16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ce74:	f7f9 f988 	bl	8006188 <HAL_GetTick>
 800ce78:	4602      	mov	r2, r0
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	1ad3      	subs	r3, r2, r3
 800ce7e:	69fa      	ldr	r2, [r7, #28]
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d902      	bls.n	800ce8a <SPI_WaitFlagStateUntilTimeout+0x56>
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d13d      	bne.n	800cf06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	685a      	ldr	r2, [r3, #4]
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ce98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cea2:	d111      	bne.n	800cec8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	689b      	ldr	r3, [r3, #8]
 800cea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ceac:	d004      	beq.n	800ceb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	689b      	ldr	r3, [r3, #8]
 800ceb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ceb6:	d107      	bne.n	800cec8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cec6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ced0:	d10f      	bne.n	800cef2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	681a      	ldr	r2, [r3, #0]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cee0:	601a      	str	r2, [r3, #0]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cef0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2201      	movs	r2, #1
 800cef6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2200      	movs	r2, #0
 800cefe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cf02:	2303      	movs	r3, #3
 800cf04:	e017      	b.n	800cf36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d101      	bne.n	800cf10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	3b01      	subs	r3, #1
 800cf14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	689a      	ldr	r2, [r3, #8]
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	4013      	ands	r3, r2
 800cf20:	68ba      	ldr	r2, [r7, #8]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	bf0c      	ite	eq
 800cf26:	2301      	moveq	r3, #1
 800cf28:	2300      	movne	r3, #0
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	79fb      	ldrb	r3, [r7, #7]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d19b      	bne.n	800ce6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cf34:	2300      	movs	r3, #0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3720      	adds	r7, #32
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	20000038 	.word	0x20000038

0800cf44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b08a      	sub	sp, #40	; 0x28
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
 800cf50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800cf52:	2300      	movs	r3, #0
 800cf54:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800cf56:	f7f9 f917 	bl	8006188 <HAL_GetTick>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5e:	1a9b      	subs	r3, r3, r2
 800cf60:	683a      	ldr	r2, [r7, #0]
 800cf62:	4413      	add	r3, r2
 800cf64:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800cf66:	f7f9 f90f 	bl	8006188 <HAL_GetTick>
 800cf6a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	330c      	adds	r3, #12
 800cf72:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800cf74:	4b3d      	ldr	r3, [pc, #244]	; (800d06c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	4613      	mov	r3, r2
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	4413      	add	r3, r2
 800cf7e:	00da      	lsls	r2, r3, #3
 800cf80:	1ad3      	subs	r3, r2, r3
 800cf82:	0d1b      	lsrs	r3, r3, #20
 800cf84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf86:	fb02 f303 	mul.w	r3, r2, r3
 800cf8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800cf8c:	e060      	b.n	800d050 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cf94:	d107      	bne.n	800cfa6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d104      	bne.n	800cfa6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800cfa4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfac:	d050      	beq.n	800d050 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cfae:	f7f9 f8eb 	bl	8006188 <HAL_GetTick>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	6a3b      	ldr	r3, [r7, #32]
 800cfb6:	1ad3      	subs	r3, r2, r3
 800cfb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d902      	bls.n	800cfc4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800cfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d13d      	bne.n	800d040 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	685a      	ldr	r2, [r3, #4]
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cfd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cfdc:	d111      	bne.n	800d002 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	689b      	ldr	r3, [r3, #8]
 800cfe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfe6:	d004      	beq.n	800cff2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cff0:	d107      	bne.n	800d002 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d000:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d00a:	d10f      	bne.n	800d02c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d01a:	601a      	str	r2, [r3, #0]
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d02a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2201      	movs	r2, #1
 800d030:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2200      	movs	r2, #0
 800d038:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d03c:	2303      	movs	r3, #3
 800d03e:	e010      	b.n	800d062 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d101      	bne.n	800d04a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d046:	2300      	movs	r3, #0
 800d048:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	3b01      	subs	r3, #1
 800d04e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	689a      	ldr	r2, [r3, #8]
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	4013      	ands	r3, r2
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d196      	bne.n	800cf8e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d060:	2300      	movs	r3, #0
}
 800d062:	4618      	mov	r0, r3
 800d064:	3728      	adds	r7, #40	; 0x28
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	20000038 	.word	0x20000038

0800d070 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b086      	sub	sp, #24
 800d074:	af02      	add	r7, sp, #8
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	60b9      	str	r1, [r7, #8]
 800d07a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d084:	d111      	bne.n	800d0aa <SPI_EndRxTransaction+0x3a>
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	689b      	ldr	r3, [r3, #8]
 800d08a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d08e:	d004      	beq.n	800d09a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d098:	d107      	bne.n	800d0aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0a8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	9300      	str	r3, [sp, #0]
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	2180      	movs	r1, #128	; 0x80
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f7ff febd 	bl	800ce34 <SPI_WaitFlagStateUntilTimeout>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d007      	beq.n	800d0d0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0c4:	f043 0220 	orr.w	r2, r3, #32
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d0cc:	2303      	movs	r3, #3
 800d0ce:	e023      	b.n	800d118 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d0d8:	d11d      	bne.n	800d116 <SPI_EndRxTransaction+0xa6>
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0e2:	d004      	beq.n	800d0ee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	689b      	ldr	r3, [r3, #8]
 800d0e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0ec:	d113      	bne.n	800d116 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	9300      	str	r3, [sp, #0]
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	f7ff ff22 	bl	800cf44 <SPI_WaitFifoStateUntilTimeout>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d007      	beq.n	800d116 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d10a:	f043 0220 	orr.w	r2, r3, #32
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800d112:	2303      	movs	r3, #3
 800d114:	e000      	b.n	800d118 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800d116:	2300      	movs	r3, #0
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b086      	sub	sp, #24
 800d124:	af02      	add	r7, sp, #8
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	2200      	movs	r2, #0
 800d134:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d138:	68f8      	ldr	r0, [r7, #12]
 800d13a:	f7ff ff03 	bl	800cf44 <SPI_WaitFifoStateUntilTimeout>
 800d13e:	4603      	mov	r3, r0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d007      	beq.n	800d154 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d148:	f043 0220 	orr.w	r2, r3, #32
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d150:	2303      	movs	r3, #3
 800d152:	e027      	b.n	800d1a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	9300      	str	r3, [sp, #0]
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	2200      	movs	r2, #0
 800d15c:	2180      	movs	r1, #128	; 0x80
 800d15e:	68f8      	ldr	r0, [r7, #12]
 800d160:	f7ff fe68 	bl	800ce34 <SPI_WaitFlagStateUntilTimeout>
 800d164:	4603      	mov	r3, r0
 800d166:	2b00      	cmp	r3, #0
 800d168:	d007      	beq.n	800d17a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d16e:	f043 0220 	orr.w	r2, r3, #32
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d176:	2303      	movs	r3, #3
 800d178:	e014      	b.n	800d1a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	9300      	str	r3, [sp, #0]
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	2200      	movs	r2, #0
 800d182:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d186:	68f8      	ldr	r0, [r7, #12]
 800d188:	f7ff fedc 	bl	800cf44 <SPI_WaitFifoStateUntilTimeout>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d007      	beq.n	800d1a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d196:	f043 0220 	orr.w	r2, r3, #32
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	e000      	b.n	800d1a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d1a2:	2300      	movs	r3, #0
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3710      	adds	r7, #16
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d101      	bne.n	800d1be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	e049      	b.n	800d252 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d106      	bne.n	800d1d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f7f8 fd8e 	bl	8005cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2202      	movs	r2, #2
 800d1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	3304      	adds	r3, #4
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	4610      	mov	r0, r2
 800d1ec:	f000 f94c 	bl	800d488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2201      	movs	r2, #1
 800d204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2201      	movs	r2, #1
 800d20c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2201      	movs	r2, #1
 800d21c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2201      	movs	r2, #1
 800d224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2201      	movs	r2, #1
 800d22c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2201      	movs	r2, #1
 800d234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2201      	movs	r2, #1
 800d23c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2201      	movs	r2, #1
 800d244:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2201      	movs	r2, #1
 800d24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d250:	2300      	movs	r3, #0
}
 800d252:	4618      	mov	r0, r3
 800d254:	3708      	adds	r7, #8
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
	...

0800d25c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b085      	sub	sp, #20
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d26a:	b2db      	uxtb	r3, r3
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d001      	beq.n	800d274 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d270:	2301      	movs	r3, #1
 800d272:	e033      	b.n	800d2dc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2202      	movs	r2, #2
 800d278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a19      	ldr	r2, [pc, #100]	; (800d2e8 <HAL_TIM_Base_Start+0x8c>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d009      	beq.n	800d29a <HAL_TIM_Base_Start+0x3e>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d28e:	d004      	beq.n	800d29a <HAL_TIM_Base_Start+0x3e>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a15      	ldr	r2, [pc, #84]	; (800d2ec <HAL_TIM_Base_Start+0x90>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d115      	bne.n	800d2c6 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	689a      	ldr	r2, [r3, #8]
 800d2a0:	4b13      	ldr	r3, [pc, #76]	; (800d2f0 <HAL_TIM_Base_Start+0x94>)
 800d2a2:	4013      	ands	r3, r2
 800d2a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2b06      	cmp	r3, #6
 800d2aa:	d015      	beq.n	800d2d8 <HAL_TIM_Base_Start+0x7c>
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2b2:	d011      	beq.n	800d2d8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f042 0201 	orr.w	r2, r2, #1
 800d2c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2c4:	e008      	b.n	800d2d8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f042 0201 	orr.w	r2, r2, #1
 800d2d4:	601a      	str	r2, [r3, #0]
 800d2d6:	e000      	b.n	800d2da <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d2da:	2300      	movs	r3, #0
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3714      	adds	r7, #20
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e6:	4770      	bx	lr
 800d2e8:	40012c00 	.word	0x40012c00
 800d2ec:	40014000 	.word	0x40014000
 800d2f0:	00010007 	.word	0x00010007

0800d2f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d2fe:	2300      	movs	r3, #0
 800d300:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d101      	bne.n	800d310 <HAL_TIM_ConfigClockSource+0x1c>
 800d30c:	2302      	movs	r3, #2
 800d30e:	e0b6      	b.n	800d47e <HAL_TIM_ConfigClockSource+0x18a>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2201      	movs	r2, #1
 800d314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2202      	movs	r2, #2
 800d31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	689b      	ldr	r3, [r3, #8]
 800d326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d32e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d33a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	68ba      	ldr	r2, [r7, #8]
 800d342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d34c:	d03e      	beq.n	800d3cc <HAL_TIM_ConfigClockSource+0xd8>
 800d34e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d352:	f200 8087 	bhi.w	800d464 <HAL_TIM_ConfigClockSource+0x170>
 800d356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d35a:	f000 8086 	beq.w	800d46a <HAL_TIM_ConfigClockSource+0x176>
 800d35e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d362:	d87f      	bhi.n	800d464 <HAL_TIM_ConfigClockSource+0x170>
 800d364:	2b70      	cmp	r3, #112	; 0x70
 800d366:	d01a      	beq.n	800d39e <HAL_TIM_ConfigClockSource+0xaa>
 800d368:	2b70      	cmp	r3, #112	; 0x70
 800d36a:	d87b      	bhi.n	800d464 <HAL_TIM_ConfigClockSource+0x170>
 800d36c:	2b60      	cmp	r3, #96	; 0x60
 800d36e:	d050      	beq.n	800d412 <HAL_TIM_ConfigClockSource+0x11e>
 800d370:	2b60      	cmp	r3, #96	; 0x60
 800d372:	d877      	bhi.n	800d464 <HAL_TIM_ConfigClockSource+0x170>
 800d374:	2b50      	cmp	r3, #80	; 0x50
 800d376:	d03c      	beq.n	800d3f2 <HAL_TIM_ConfigClockSource+0xfe>
 800d378:	2b50      	cmp	r3, #80	; 0x50
 800d37a:	d873      	bhi.n	800d464 <HAL_TIM_ConfigClockSource+0x170>
 800d37c:	2b40      	cmp	r3, #64	; 0x40
 800d37e:	d058      	beq.n	800d432 <HAL_TIM_ConfigClockSource+0x13e>
 800d380:	2b40      	cmp	r3, #64	; 0x40
 800d382:	d86f      	bhi.n	800d464 <HAL_TIM_ConfigClockSource+0x170>
 800d384:	2b30      	cmp	r3, #48	; 0x30
 800d386:	d064      	beq.n	800d452 <HAL_TIM_ConfigClockSource+0x15e>
 800d388:	2b30      	cmp	r3, #48	; 0x30
 800d38a:	d86b      	bhi.n	800d464 <HAL_TIM_ConfigClockSource+0x170>
 800d38c:	2b20      	cmp	r3, #32
 800d38e:	d060      	beq.n	800d452 <HAL_TIM_ConfigClockSource+0x15e>
 800d390:	2b20      	cmp	r3, #32
 800d392:	d867      	bhi.n	800d464 <HAL_TIM_ConfigClockSource+0x170>
 800d394:	2b00      	cmp	r3, #0
 800d396:	d05c      	beq.n	800d452 <HAL_TIM_ConfigClockSource+0x15e>
 800d398:	2b10      	cmp	r3, #16
 800d39a:	d05a      	beq.n	800d452 <HAL_TIM_ConfigClockSource+0x15e>
 800d39c:	e062      	b.n	800d464 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d3ae:	f000 f949 	bl	800d644 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d3c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	68ba      	ldr	r2, [r7, #8]
 800d3c8:	609a      	str	r2, [r3, #8]
      break;
 800d3ca:	e04f      	b.n	800d46c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d3dc:	f000 f932 	bl	800d644 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	689a      	ldr	r2, [r3, #8]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d3ee:	609a      	str	r2, [r3, #8]
      break;
 800d3f0:	e03c      	b.n	800d46c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3fe:	461a      	mov	r2, r3
 800d400:	f000 f8a6 	bl	800d550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	2150      	movs	r1, #80	; 0x50
 800d40a:	4618      	mov	r0, r3
 800d40c:	f000 f8ff 	bl	800d60e <TIM_ITRx_SetConfig>
      break;
 800d410:	e02c      	b.n	800d46c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d41e:	461a      	mov	r2, r3
 800d420:	f000 f8c5 	bl	800d5ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2160      	movs	r1, #96	; 0x60
 800d42a:	4618      	mov	r0, r3
 800d42c:	f000 f8ef 	bl	800d60e <TIM_ITRx_SetConfig>
      break;
 800d430:	e01c      	b.n	800d46c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d43e:	461a      	mov	r2, r3
 800d440:	f000 f886 	bl	800d550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2140      	movs	r1, #64	; 0x40
 800d44a:	4618      	mov	r0, r3
 800d44c:	f000 f8df 	bl	800d60e <TIM_ITRx_SetConfig>
      break;
 800d450:	e00c      	b.n	800d46c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	4619      	mov	r1, r3
 800d45c:	4610      	mov	r0, r2
 800d45e:	f000 f8d6 	bl	800d60e <TIM_ITRx_SetConfig>
      break;
 800d462:	e003      	b.n	800d46c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800d464:	2301      	movs	r3, #1
 800d466:	73fb      	strb	r3, [r7, #15]
      break;
 800d468:	e000      	b.n	800d46c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800d46a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2201      	movs	r2, #1
 800d470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3710      	adds	r7, #16
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
	...

0800d488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d488:	b480      	push	{r7}
 800d48a:	b085      	sub	sp, #20
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	4a2a      	ldr	r2, [pc, #168]	; (800d544 <TIM_Base_SetConfig+0xbc>)
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d003      	beq.n	800d4a8 <TIM_Base_SetConfig+0x20>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4a6:	d108      	bne.n	800d4ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	68fa      	ldr	r2, [r7, #12]
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	4a21      	ldr	r2, [pc, #132]	; (800d544 <TIM_Base_SetConfig+0xbc>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d00b      	beq.n	800d4da <TIM_Base_SetConfig+0x52>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4c8:	d007      	beq.n	800d4da <TIM_Base_SetConfig+0x52>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	4a1e      	ldr	r2, [pc, #120]	; (800d548 <TIM_Base_SetConfig+0xc0>)
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d003      	beq.n	800d4da <TIM_Base_SetConfig+0x52>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	4a1d      	ldr	r2, [pc, #116]	; (800d54c <TIM_Base_SetConfig+0xc4>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d108      	bne.n	800d4ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	68db      	ldr	r3, [r3, #12]
 800d4e6:	68fa      	ldr	r2, [r7, #12]
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	695b      	ldr	r3, [r3, #20]
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	68fa      	ldr	r2, [r7, #12]
 800d4fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	689a      	ldr	r2, [r3, #8]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	4a0c      	ldr	r2, [pc, #48]	; (800d544 <TIM_Base_SetConfig+0xbc>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d007      	beq.n	800d528 <TIM_Base_SetConfig+0xa0>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	4a0b      	ldr	r2, [pc, #44]	; (800d548 <TIM_Base_SetConfig+0xc0>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d003      	beq.n	800d528 <TIM_Base_SetConfig+0xa0>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	4a0a      	ldr	r2, [pc, #40]	; (800d54c <TIM_Base_SetConfig+0xc4>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d103      	bne.n	800d530 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	691a      	ldr	r2, [r3, #16]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2201      	movs	r2, #1
 800d534:	615a      	str	r2, [r3, #20]
}
 800d536:	bf00      	nop
 800d538:	3714      	adds	r7, #20
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop
 800d544:	40012c00 	.word	0x40012c00
 800d548:	40014000 	.word	0x40014000
 800d54c:	40014400 	.word	0x40014400

0800d550 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d550:	b480      	push	{r7}
 800d552:	b087      	sub	sp, #28
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	6a1b      	ldr	r3, [r3, #32]
 800d560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	6a1b      	ldr	r3, [r3, #32]
 800d566:	f023 0201 	bic.w	r2, r3, #1
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	699b      	ldr	r3, [r3, #24]
 800d572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d57a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	011b      	lsls	r3, r3, #4
 800d580:	693a      	ldr	r2, [r7, #16]
 800d582:	4313      	orrs	r3, r2
 800d584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	f023 030a 	bic.w	r3, r3, #10
 800d58c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d58e:	697a      	ldr	r2, [r7, #20]
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	4313      	orrs	r3, r2
 800d594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	693a      	ldr	r2, [r7, #16]
 800d59a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	697a      	ldr	r2, [r7, #20]
 800d5a0:	621a      	str	r2, [r3, #32]
}
 800d5a2:	bf00      	nop
 800d5a4:	371c      	adds	r7, #28
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr

0800d5ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d5ae:	b480      	push	{r7}
 800d5b0:	b087      	sub	sp, #28
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	60f8      	str	r0, [r7, #12]
 800d5b6:	60b9      	str	r1, [r7, #8]
 800d5b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	6a1b      	ldr	r3, [r3, #32]
 800d5be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	6a1b      	ldr	r3, [r3, #32]
 800d5c4:	f023 0210 	bic.w	r2, r3, #16
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	699b      	ldr	r3, [r3, #24]
 800d5d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d5d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	031b      	lsls	r3, r3, #12
 800d5de:	693a      	ldr	r2, [r7, #16]
 800d5e0:	4313      	orrs	r3, r2
 800d5e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d5ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	011b      	lsls	r3, r3, #4
 800d5f0:	697a      	ldr	r2, [r7, #20]
 800d5f2:	4313      	orrs	r3, r2
 800d5f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	693a      	ldr	r2, [r7, #16]
 800d5fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	697a      	ldr	r2, [r7, #20]
 800d600:	621a      	str	r2, [r3, #32]
}
 800d602:	bf00      	nop
 800d604:	371c      	adds	r7, #28
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr

0800d60e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d60e:	b480      	push	{r7}
 800d610:	b085      	sub	sp, #20
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
 800d616:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	689b      	ldr	r3, [r3, #8]
 800d61c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d624:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d626:	683a      	ldr	r2, [r7, #0]
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	4313      	orrs	r3, r2
 800d62c:	f043 0307 	orr.w	r3, r3, #7
 800d630:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	68fa      	ldr	r2, [r7, #12]
 800d636:	609a      	str	r2, [r3, #8]
}
 800d638:	bf00      	nop
 800d63a:	3714      	adds	r7, #20
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d644:	b480      	push	{r7}
 800d646:	b087      	sub	sp, #28
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
 800d650:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	689b      	ldr	r3, [r3, #8]
 800d656:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d65e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	021a      	lsls	r2, r3, #8
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	431a      	orrs	r2, r3
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	4313      	orrs	r3, r2
 800d66c:	697a      	ldr	r2, [r7, #20]
 800d66e:	4313      	orrs	r3, r2
 800d670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	697a      	ldr	r2, [r7, #20]
 800d676:	609a      	str	r2, [r3, #8]
}
 800d678:	bf00      	nop
 800d67a:	371c      	adds	r7, #28
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr

0800d684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d684:	b480      	push	{r7}
 800d686:	b085      	sub	sp, #20
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d694:	2b01      	cmp	r3, #1
 800d696:	d101      	bne.n	800d69c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d698:	2302      	movs	r3, #2
 800d69a:	e04f      	b.n	800d73c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2201      	movs	r2, #1
 800d6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2202      	movs	r2, #2
 800d6a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	689b      	ldr	r3, [r3, #8]
 800d6ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4a21      	ldr	r2, [pc, #132]	; (800d748 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d108      	bne.n	800d6d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d6cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	68fa      	ldr	r2, [r7, #12]
 800d6d4:	4313      	orrs	r3, r2
 800d6d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	68fa      	ldr	r2, [r7, #12]
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	68fa      	ldr	r2, [r7, #12]
 800d6f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a14      	ldr	r2, [pc, #80]	; (800d748 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d009      	beq.n	800d710 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d704:	d004      	beq.n	800d710 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4a10      	ldr	r2, [pc, #64]	; (800d74c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d10c      	bne.n	800d72a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d716:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	68ba      	ldr	r2, [r7, #8]
 800d71e:	4313      	orrs	r3, r2
 800d720:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	68ba      	ldr	r2, [r7, #8]
 800d728:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2201      	movs	r2, #1
 800d72e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2200      	movs	r2, #0
 800d736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3714      	adds	r7, #20
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr
 800d748:	40012c00 	.word	0x40012c00
 800d74c:	40014000 	.word	0x40014000

0800d750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d101      	bne.n	800d762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d75e:	2301      	movs	r3, #1
 800d760:	e040      	b.n	800d7e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d766:	2b00      	cmp	r3, #0
 800d768:	d106      	bne.n	800d778 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2200      	movs	r2, #0
 800d76e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f7f8 fb38 	bl	8005de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2224      	movs	r2, #36	; 0x24
 800d77c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f022 0201 	bic.w	r2, r2, #1
 800d78c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d792:	2b00      	cmp	r3, #0
 800d794:	d002      	beq.n	800d79c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f000 feb0 	bl	800e4fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f000 fc81 	bl	800e0a4 <UART_SetConfig>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d101      	bne.n	800d7ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	e01b      	b.n	800d7e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	685a      	ldr	r2, [r3, #4]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d7ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	689a      	ldr	r2, [r3, #8]
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d7ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f042 0201 	orr.w	r2, r2, #1
 800d7da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f000 ff2f 	bl	800e640 <UART_CheckIdleState>
 800d7e2:	4603      	mov	r3, r0
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b08a      	sub	sp, #40	; 0x28
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d800:	2b20      	cmp	r3, #32
 800d802:	d137      	bne.n	800d874 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d002      	beq.n	800d810 <HAL_UART_Receive_DMA+0x24>
 800d80a:	88fb      	ldrh	r3, [r7, #6]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d101      	bne.n	800d814 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d810:	2301      	movs	r3, #1
 800d812:	e030      	b.n	800d876 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2200      	movs	r2, #0
 800d818:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	4a18      	ldr	r2, [pc, #96]	; (800d880 <HAL_UART_Receive_DMA+0x94>)
 800d820:	4293      	cmp	r3, r2
 800d822:	d01f      	beq.n	800d864 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d018      	beq.n	800d864 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	e853 3f00 	ldrex	r3, [r3]
 800d83e:	613b      	str	r3, [r7, #16]
   return(result);
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d846:	627b      	str	r3, [r7, #36]	; 0x24
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	461a      	mov	r2, r3
 800d84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d850:	623b      	str	r3, [r7, #32]
 800d852:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d854:	69f9      	ldr	r1, [r7, #28]
 800d856:	6a3a      	ldr	r2, [r7, #32]
 800d858:	e841 2300 	strex	r3, r2, [r1]
 800d85c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d85e:	69bb      	ldr	r3, [r7, #24]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d1e6      	bne.n	800d832 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d864:	88fb      	ldrh	r3, [r7, #6]
 800d866:	461a      	mov	r2, r3
 800d868:	68b9      	ldr	r1, [r7, #8]
 800d86a:	68f8      	ldr	r0, [r7, #12]
 800d86c:	f000 fff8 	bl	800e860 <UART_Start_Receive_DMA>
 800d870:	4603      	mov	r3, r0
 800d872:	e000      	b.n	800d876 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d874:	2302      	movs	r3, #2
  }
}
 800d876:	4618      	mov	r0, r3
 800d878:	3728      	adds	r7, #40	; 0x28
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	40008000 	.word	0x40008000

0800d884 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b0a0      	sub	sp, #128	; 0x80
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d894:	e853 3f00 	ldrex	r3, [r3]
 800d898:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d89a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d89c:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800d8a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d8aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800d8ac:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ae:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d8b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d8b2:	e841 2300 	strex	r3, r2, [r1]
 800d8b6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d8b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d1e6      	bne.n	800d88c <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	3308      	adds	r3, #8
 800d8c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8c8:	e853 3f00 	ldrex	r3, [r3]
 800d8cc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d8ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8d0:	f023 0301 	bic.w	r3, r3, #1
 800d8d4:	67bb      	str	r3, [r7, #120]	; 0x78
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	3308      	adds	r3, #8
 800d8dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d8de:	657a      	str	r2, [r7, #84]	; 0x54
 800d8e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d8e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d8e6:	e841 2300 	strex	r3, r2, [r1]
 800d8ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d8ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d1e5      	bne.n	800d8be <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d118      	bne.n	800d92c <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d902:	e853 3f00 	ldrex	r3, [r3]
 800d906:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d90a:	f023 0310 	bic.w	r3, r3, #16
 800d90e:	677b      	str	r3, [r7, #116]	; 0x74
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	461a      	mov	r2, r3
 800d916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d918:	643b      	str	r3, [r7, #64]	; 0x40
 800d91a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d91e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d920:	e841 2300 	strex	r3, r2, [r1]
 800d924:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d1e6      	bne.n	800d8fa <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	689b      	ldr	r3, [r3, #8]
 800d932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d936:	2b80      	cmp	r3, #128	; 0x80
 800d938:	d137      	bne.n	800d9aa <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	3308      	adds	r3, #8
 800d940:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d942:	6a3b      	ldr	r3, [r7, #32]
 800d944:	e853 3f00 	ldrex	r3, [r3]
 800d948:	61fb      	str	r3, [r7, #28]
   return(result);
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d950:	673b      	str	r3, [r7, #112]	; 0x70
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	3308      	adds	r3, #8
 800d958:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d95a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d95c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d95e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d962:	e841 2300 	strex	r3, r2, [r1]
 800d966:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d1e5      	bne.n	800d93a <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d972:	2b00      	cmp	r3, #0
 800d974:	d019      	beq.n	800d9aa <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d97a:	2200      	movs	r2, #0
 800d97c:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d982:	4618      	mov	r0, r3
 800d984:	f7fa f8fa 	bl	8007b7c <HAL_DMA_Abort>
 800d988:	4603      	mov	r3, r0
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00d      	beq.n	800d9aa <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d992:	4618      	mov	r0, r3
 800d994:	f7fa fa20 	bl	8007dd8 <HAL_DMA_GetError>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b20      	cmp	r3, #32
 800d99c:	d105      	bne.n	800d9aa <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2210      	movs	r2, #16
 800d9a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d9a6:	2303      	movs	r3, #3
 800d9a8:	e063      	b.n	800da72 <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	689b      	ldr	r3, [r3, #8]
 800d9b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9b4:	2b40      	cmp	r3, #64	; 0x40
 800d9b6:	d137      	bne.n	800da28 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	3308      	adds	r3, #8
 800d9be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	e853 3f00 	ldrex	r3, [r3]
 800d9c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	3308      	adds	r3, #8
 800d9d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d9d8:	61ba      	str	r2, [r7, #24]
 800d9da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9dc:	6979      	ldr	r1, [r7, #20]
 800d9de:	69ba      	ldr	r2, [r7, #24]
 800d9e0:	e841 2300 	strex	r3, r2, [r1]
 800d9e4:	613b      	str	r3, [r7, #16]
   return(result);
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d1e5      	bne.n	800d9b8 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d019      	beq.n	800da28 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da00:	4618      	mov	r0, r3
 800da02:	f7fa f8bb 	bl	8007b7c <HAL_DMA_Abort>
 800da06:	4603      	mov	r3, r0
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d00d      	beq.n	800da28 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da10:	4618      	mov	r0, r3
 800da12:	f7fa f9e1 	bl	8007dd8 <HAL_DMA_GetError>
 800da16:	4603      	mov	r3, r0
 800da18:	2b20      	cmp	r3, #32
 800da1a:	d105      	bne.n	800da28 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2210      	movs	r2, #16
 800da20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800da24:	2303      	movs	r3, #3
 800da26:	e024      	b.n	800da72 <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2200      	movs	r2, #0
 800da2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2200      	movs	r2, #0
 800da34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	220f      	movs	r2, #15
 800da3e:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	8b1b      	ldrh	r3, [r3, #24]
 800da46:	b29a      	uxth	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f042 0208 	orr.w	r2, r2, #8
 800da50:	b292      	uxth	r2, r2
 800da52:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2220      	movs	r2, #32
 800da58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2220      	movs	r2, #32
 800da5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2200      	movs	r2, #0
 800da66:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2200      	movs	r2, #0
 800da6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800da70:	2300      	movs	r3, #0
}
 800da72:	4618      	mov	r0, r3
 800da74:	3780      	adds	r7, #128	; 0x80
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
	...

0800da7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b0ba      	sub	sp, #232	; 0xe8
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	69db      	ldr	r3, [r3, #28]
 800da8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	689b      	ldr	r3, [r3, #8]
 800da9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800daa2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800daa6:	f640 030f 	movw	r3, #2063	; 0x80f
 800daaa:	4013      	ands	r3, r2
 800daac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800dab0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d115      	bne.n	800dae4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800dab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dabc:	f003 0320 	and.w	r3, r3, #32
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00f      	beq.n	800dae4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800dac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dac8:	f003 0320 	and.w	r3, r3, #32
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d009      	beq.n	800dae4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f000 82ae 	beq.w	800e036 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	4798      	blx	r3
      }
      return;
 800dae2:	e2a8      	b.n	800e036 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800dae4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dae8:	2b00      	cmp	r3, #0
 800daea:	f000 8117 	beq.w	800dd1c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800daee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800daf2:	f003 0301 	and.w	r3, r3, #1
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d106      	bne.n	800db08 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800dafa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800dafe:	4b85      	ldr	r3, [pc, #532]	; (800dd14 <HAL_UART_IRQHandler+0x298>)
 800db00:	4013      	ands	r3, r2
 800db02:	2b00      	cmp	r3, #0
 800db04:	f000 810a 	beq.w	800dd1c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800db08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db0c:	f003 0301 	and.w	r3, r3, #1
 800db10:	2b00      	cmp	r3, #0
 800db12:	d011      	beq.n	800db38 <HAL_UART_IRQHandler+0xbc>
 800db14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00b      	beq.n	800db38 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	2201      	movs	r2, #1
 800db26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db2e:	f043 0201 	orr.w	r2, r3, #1
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db3c:	f003 0302 	and.w	r3, r3, #2
 800db40:	2b00      	cmp	r3, #0
 800db42:	d011      	beq.n	800db68 <HAL_UART_IRQHandler+0xec>
 800db44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db48:	f003 0301 	and.w	r3, r3, #1
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d00b      	beq.n	800db68 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	2202      	movs	r2, #2
 800db56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db5e:	f043 0204 	orr.w	r2, r3, #4
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db6c:	f003 0304 	and.w	r3, r3, #4
 800db70:	2b00      	cmp	r3, #0
 800db72:	d011      	beq.n	800db98 <HAL_UART_IRQHandler+0x11c>
 800db74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db78:	f003 0301 	and.w	r3, r3, #1
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d00b      	beq.n	800db98 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2204      	movs	r2, #4
 800db86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db8e:	f043 0202 	orr.w	r2, r3, #2
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800db98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db9c:	f003 0308 	and.w	r3, r3, #8
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d017      	beq.n	800dbd4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800dba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dba8:	f003 0320 	and.w	r3, r3, #32
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d105      	bne.n	800dbbc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800dbb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dbb4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00b      	beq.n	800dbd4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	2208      	movs	r2, #8
 800dbc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbca:	f043 0208 	orr.w	r2, r3, #8
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dbd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d012      	beq.n	800dc06 <HAL_UART_IRQHandler+0x18a>
 800dbe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbe4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d00c      	beq.n	800dc06 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dbf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbfc:	f043 0220 	orr.w	r2, r3, #32
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	f000 8214 	beq.w	800e03a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800dc12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc16:	f003 0320 	and.w	r3, r3, #32
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d00d      	beq.n	800dc3a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800dc1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc22:	f003 0320 	and.w	r3, r3, #32
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d007      	beq.n	800dc3a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d003      	beq.n	800dc3a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	689b      	ldr	r3, [r3, #8]
 800dc4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc4e:	2b40      	cmp	r3, #64	; 0x40
 800dc50:	d005      	beq.n	800dc5e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dc52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d04f      	beq.n	800dcfe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 fec4 	bl	800e9ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc6e:	2b40      	cmp	r3, #64	; 0x40
 800dc70:	d141      	bne.n	800dcf6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	3308      	adds	r3, #8
 800dc78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dc80:	e853 3f00 	ldrex	r3, [r3]
 800dc84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dc88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dc8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	3308      	adds	r3, #8
 800dc9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800dc9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800dca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dcaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dcae:	e841 2300 	strex	r3, r2, [r1]
 800dcb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800dcb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d1d9      	bne.n	800dc72 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d013      	beq.n	800dcee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcca:	4a13      	ldr	r2, [pc, #76]	; (800dd18 <HAL_UART_IRQHandler+0x29c>)
 800dccc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7f9 ff90 	bl	8007bf8 <HAL_DMA_Abort_IT>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d017      	beq.n	800dd0e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800dce8:	4610      	mov	r0, r2
 800dcea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcec:	e00f      	b.n	800dd0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f000 f9c2 	bl	800e078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcf4:	e00b      	b.n	800dd0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 f9be 	bl	800e078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcfc:	e007      	b.n	800dd0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 f9ba 	bl	800e078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2200      	movs	r2, #0
 800dd08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800dd0c:	e195      	b.n	800e03a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd0e:	bf00      	nop
    return;
 800dd10:	e193      	b.n	800e03a <HAL_UART_IRQHandler+0x5be>
 800dd12:	bf00      	nop
 800dd14:	04000120 	.word	0x04000120
 800dd18:	0800ec9d 	.word	0x0800ec9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	f040 814e 	bne.w	800dfc2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dd26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd2a:	f003 0310 	and.w	r3, r3, #16
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	f000 8147 	beq.w	800dfc2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dd34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd38:	f003 0310 	and.w	r3, r3, #16
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	f000 8140 	beq.w	800dfc2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	2210      	movs	r2, #16
 800dd48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd54:	2b40      	cmp	r3, #64	; 0x40
 800dd56:	f040 80b8 	bne.w	800deca <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dd66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	f000 8167 	beq.w	800e03e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dd76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	f080 815f 	bcs.w	800e03e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f003 0320 	and.w	r3, r3, #32
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	f040 8086 	bne.w	800dea8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dda4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dda8:	e853 3f00 	ldrex	r3, [r3]
 800ddac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ddb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ddb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ddb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ddc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ddca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ddd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ddd6:	e841 2300 	strex	r3, r2, [r1]
 800ddda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ddde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d1da      	bne.n	800dd9c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	3308      	adds	r3, #8
 800ddec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ddf0:	e853 3f00 	ldrex	r3, [r3]
 800ddf4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ddf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ddf8:	f023 0301 	bic.w	r3, r3, #1
 800ddfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	3308      	adds	r3, #8
 800de06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800de0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800de0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800de12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800de16:	e841 2300 	strex	r3, r2, [r1]
 800de1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800de1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d1e1      	bne.n	800dde6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	3308      	adds	r3, #8
 800de28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de2c:	e853 3f00 	ldrex	r3, [r3]
 800de30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800de32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	3308      	adds	r3, #8
 800de42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800de46:	66fa      	str	r2, [r7, #108]	; 0x6c
 800de48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800de4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800de4e:	e841 2300 	strex	r3, r2, [r1]
 800de52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800de54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800de56:	2b00      	cmp	r3, #0
 800de58:	d1e3      	bne.n	800de22 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2220      	movs	r2, #32
 800de5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de70:	e853 3f00 	ldrex	r3, [r3]
 800de74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800de76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de78:	f023 0310 	bic.w	r3, r3, #16
 800de7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	461a      	mov	r2, r3
 800de86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800de8a:	65bb      	str	r3, [r7, #88]	; 0x58
 800de8c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800de92:	e841 2300 	strex	r3, r2, [r1]
 800de96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800de98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d1e4      	bne.n	800de68 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7f9 fe6a 	bl	8007b7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2202      	movs	r2, #2
 800deac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800deba:	b29b      	uxth	r3, r3
 800debc:	1ad3      	subs	r3, r2, r3
 800debe:	b29b      	uxth	r3, r3
 800dec0:	4619      	mov	r1, r3
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f000 f8e2 	bl	800e08c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dec8:	e0b9      	b.n	800e03e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	1ad3      	subs	r3, r2, r3
 800deda:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	f000 80ab 	beq.w	800e042 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800deec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800def0:	2b00      	cmp	r3, #0
 800def2:	f000 80a6 	beq.w	800e042 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800defc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800defe:	e853 3f00 	ldrex	r3, [r3]
 800df02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800df04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800df0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	461a      	mov	r2, r3
 800df14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800df18:	647b      	str	r3, [r7, #68]	; 0x44
 800df1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800df1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df20:	e841 2300 	strex	r3, r2, [r1]
 800df24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800df26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d1e4      	bne.n	800def6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	3308      	adds	r3, #8
 800df32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df36:	e853 3f00 	ldrex	r3, [r3]
 800df3a:	623b      	str	r3, [r7, #32]
   return(result);
 800df3c:	6a3b      	ldr	r3, [r7, #32]
 800df3e:	f023 0301 	bic.w	r3, r3, #1
 800df42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	3308      	adds	r3, #8
 800df4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800df50:	633a      	str	r2, [r7, #48]	; 0x30
 800df52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df58:	e841 2300 	strex	r3, r2, [r1]
 800df5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800df5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df60:	2b00      	cmp	r3, #0
 800df62:	d1e3      	bne.n	800df2c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2220      	movs	r2, #32
 800df68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2200      	movs	r2, #0
 800df70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2200      	movs	r2, #0
 800df76:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	e853 3f00 	ldrex	r3, [r3]
 800df84:	60fb      	str	r3, [r7, #12]
   return(result);
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f023 0310 	bic.w	r3, r3, #16
 800df8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	461a      	mov	r2, r3
 800df96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800df9a:	61fb      	str	r3, [r7, #28]
 800df9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df9e:	69b9      	ldr	r1, [r7, #24]
 800dfa0:	69fa      	ldr	r2, [r7, #28]
 800dfa2:	e841 2300 	strex	r3, r2, [r1]
 800dfa6:	617b      	str	r3, [r7, #20]
   return(result);
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d1e4      	bne.n	800df78 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2202      	movs	r2, #2
 800dfb2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dfb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dfb8:	4619      	mov	r1, r3
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 f866 	bl	800e08c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dfc0:	e03f      	b.n	800e042 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dfc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d00e      	beq.n	800dfec <HAL_UART_IRQHandler+0x570>
 800dfce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d008      	beq.n	800dfec <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dfe2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f000 fe99 	bl	800ed1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dfea:	e02d      	b.n	800e048 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800dfec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d00e      	beq.n	800e016 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800dff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e000:	2b00      	cmp	r3, #0
 800e002:	d008      	beq.n	800e016 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d01c      	beq.n	800e046 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	4798      	blx	r3
    }
    return;
 800e014:	e017      	b.n	800e046 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d012      	beq.n	800e048 <HAL_UART_IRQHandler+0x5cc>
 800e022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d00c      	beq.n	800e048 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f000 fe4a 	bl	800ecc8 <UART_EndTransmit_IT>
    return;
 800e034:	e008      	b.n	800e048 <HAL_UART_IRQHandler+0x5cc>
      return;
 800e036:	bf00      	nop
 800e038:	e006      	b.n	800e048 <HAL_UART_IRQHandler+0x5cc>
    return;
 800e03a:	bf00      	nop
 800e03c:	e004      	b.n	800e048 <HAL_UART_IRQHandler+0x5cc>
      return;
 800e03e:	bf00      	nop
 800e040:	e002      	b.n	800e048 <HAL_UART_IRQHandler+0x5cc>
      return;
 800e042:	bf00      	nop
 800e044:	e000      	b.n	800e048 <HAL_UART_IRQHandler+0x5cc>
    return;
 800e046:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800e048:	37e8      	adds	r7, #232	; 0xe8
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop

0800e050 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e050:	b480      	push	{r7}
 800e052:	b083      	sub	sp, #12
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e058:	bf00      	nop
 800e05a:	370c      	adds	r7, #12
 800e05c:	46bd      	mov	sp, r7
 800e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e062:	4770      	bx	lr

0800e064 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e064:	b480      	push	{r7}
 800e066:	b083      	sub	sp, #12
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e06c:	bf00      	nop
 800e06e:	370c      	adds	r7, #12
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr

0800e078 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e078:	b480      	push	{r7}
 800e07a:	b083      	sub	sp, #12
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e080:	bf00      	nop
 800e082:	370c      	adds	r7, #12
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr

0800e08c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b083      	sub	sp, #12
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	460b      	mov	r3, r1
 800e096:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e098:	bf00      	nop
 800e09a:	370c      	adds	r7, #12
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr

0800e0a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e0a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e0a8:	b08a      	sub	sp, #40	; 0x28
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	689a      	ldr	r2, [r3, #8]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	691b      	ldr	r3, [r3, #16]
 800e0bc:	431a      	orrs	r2, r3
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	695b      	ldr	r3, [r3, #20]
 800e0c2:	431a      	orrs	r2, r3
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	69db      	ldr	r3, [r3, #28]
 800e0c8:	4313      	orrs	r3, r2
 800e0ca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	4bb4      	ldr	r3, [pc, #720]	; (800e3a4 <UART_SetConfig+0x300>)
 800e0d4:	4013      	ands	r3, r2
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	6812      	ldr	r2, [r2, #0]
 800e0da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0dc:	430b      	orrs	r3, r1
 800e0de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	68da      	ldr	r2, [r3, #12]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	430a      	orrs	r2, r1
 800e0f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	699b      	ldr	r3, [r3, #24]
 800e0fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4aa9      	ldr	r2, [pc, #676]	; (800e3a8 <UART_SetConfig+0x304>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d004      	beq.n	800e110 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	6a1b      	ldr	r3, [r3, #32]
 800e10a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e10c:	4313      	orrs	r3, r2
 800e10e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	689b      	ldr	r3, [r3, #8]
 800e116:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e120:	430a      	orrs	r2, r1
 800e122:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4aa0      	ldr	r2, [pc, #640]	; (800e3ac <UART_SetConfig+0x308>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d126      	bne.n	800e17c <UART_SetConfig+0xd8>
 800e12e:	4ba0      	ldr	r3, [pc, #640]	; (800e3b0 <UART_SetConfig+0x30c>)
 800e130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e134:	f003 0303 	and.w	r3, r3, #3
 800e138:	2b03      	cmp	r3, #3
 800e13a:	d81b      	bhi.n	800e174 <UART_SetConfig+0xd0>
 800e13c:	a201      	add	r2, pc, #4	; (adr r2, 800e144 <UART_SetConfig+0xa0>)
 800e13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e142:	bf00      	nop
 800e144:	0800e155 	.word	0x0800e155
 800e148:	0800e165 	.word	0x0800e165
 800e14c:	0800e15d 	.word	0x0800e15d
 800e150:	0800e16d 	.word	0x0800e16d
 800e154:	2301      	movs	r3, #1
 800e156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e15a:	e080      	b.n	800e25e <UART_SetConfig+0x1ba>
 800e15c:	2302      	movs	r3, #2
 800e15e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e162:	e07c      	b.n	800e25e <UART_SetConfig+0x1ba>
 800e164:	2304      	movs	r3, #4
 800e166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e16a:	e078      	b.n	800e25e <UART_SetConfig+0x1ba>
 800e16c:	2308      	movs	r3, #8
 800e16e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e172:	e074      	b.n	800e25e <UART_SetConfig+0x1ba>
 800e174:	2310      	movs	r3, #16
 800e176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e17a:	e070      	b.n	800e25e <UART_SetConfig+0x1ba>
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4a8c      	ldr	r2, [pc, #560]	; (800e3b4 <UART_SetConfig+0x310>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d138      	bne.n	800e1f8 <UART_SetConfig+0x154>
 800e186:	4b8a      	ldr	r3, [pc, #552]	; (800e3b0 <UART_SetConfig+0x30c>)
 800e188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e18c:	f003 030c 	and.w	r3, r3, #12
 800e190:	2b0c      	cmp	r3, #12
 800e192:	d82d      	bhi.n	800e1f0 <UART_SetConfig+0x14c>
 800e194:	a201      	add	r2, pc, #4	; (adr r2, 800e19c <UART_SetConfig+0xf8>)
 800e196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e19a:	bf00      	nop
 800e19c:	0800e1d1 	.word	0x0800e1d1
 800e1a0:	0800e1f1 	.word	0x0800e1f1
 800e1a4:	0800e1f1 	.word	0x0800e1f1
 800e1a8:	0800e1f1 	.word	0x0800e1f1
 800e1ac:	0800e1e1 	.word	0x0800e1e1
 800e1b0:	0800e1f1 	.word	0x0800e1f1
 800e1b4:	0800e1f1 	.word	0x0800e1f1
 800e1b8:	0800e1f1 	.word	0x0800e1f1
 800e1bc:	0800e1d9 	.word	0x0800e1d9
 800e1c0:	0800e1f1 	.word	0x0800e1f1
 800e1c4:	0800e1f1 	.word	0x0800e1f1
 800e1c8:	0800e1f1 	.word	0x0800e1f1
 800e1cc:	0800e1e9 	.word	0x0800e1e9
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e1d6:	e042      	b.n	800e25e <UART_SetConfig+0x1ba>
 800e1d8:	2302      	movs	r3, #2
 800e1da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e1de:	e03e      	b.n	800e25e <UART_SetConfig+0x1ba>
 800e1e0:	2304      	movs	r3, #4
 800e1e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e1e6:	e03a      	b.n	800e25e <UART_SetConfig+0x1ba>
 800e1e8:	2308      	movs	r3, #8
 800e1ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e1ee:	e036      	b.n	800e25e <UART_SetConfig+0x1ba>
 800e1f0:	2310      	movs	r3, #16
 800e1f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e1f6:	e032      	b.n	800e25e <UART_SetConfig+0x1ba>
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	4a6a      	ldr	r2, [pc, #424]	; (800e3a8 <UART_SetConfig+0x304>)
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d12a      	bne.n	800e258 <UART_SetConfig+0x1b4>
 800e202:	4b6b      	ldr	r3, [pc, #428]	; (800e3b0 <UART_SetConfig+0x30c>)
 800e204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e208:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e20c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e210:	d01a      	beq.n	800e248 <UART_SetConfig+0x1a4>
 800e212:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e216:	d81b      	bhi.n	800e250 <UART_SetConfig+0x1ac>
 800e218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e21c:	d00c      	beq.n	800e238 <UART_SetConfig+0x194>
 800e21e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e222:	d815      	bhi.n	800e250 <UART_SetConfig+0x1ac>
 800e224:	2b00      	cmp	r3, #0
 800e226:	d003      	beq.n	800e230 <UART_SetConfig+0x18c>
 800e228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e22c:	d008      	beq.n	800e240 <UART_SetConfig+0x19c>
 800e22e:	e00f      	b.n	800e250 <UART_SetConfig+0x1ac>
 800e230:	2300      	movs	r3, #0
 800e232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e236:	e012      	b.n	800e25e <UART_SetConfig+0x1ba>
 800e238:	2302      	movs	r3, #2
 800e23a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e23e:	e00e      	b.n	800e25e <UART_SetConfig+0x1ba>
 800e240:	2304      	movs	r3, #4
 800e242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e246:	e00a      	b.n	800e25e <UART_SetConfig+0x1ba>
 800e248:	2308      	movs	r3, #8
 800e24a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e24e:	e006      	b.n	800e25e <UART_SetConfig+0x1ba>
 800e250:	2310      	movs	r3, #16
 800e252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e256:	e002      	b.n	800e25e <UART_SetConfig+0x1ba>
 800e258:	2310      	movs	r3, #16
 800e25a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	4a51      	ldr	r2, [pc, #324]	; (800e3a8 <UART_SetConfig+0x304>)
 800e264:	4293      	cmp	r3, r2
 800e266:	d17a      	bne.n	800e35e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e268:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e26c:	2b08      	cmp	r3, #8
 800e26e:	d824      	bhi.n	800e2ba <UART_SetConfig+0x216>
 800e270:	a201      	add	r2, pc, #4	; (adr r2, 800e278 <UART_SetConfig+0x1d4>)
 800e272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e276:	bf00      	nop
 800e278:	0800e29d 	.word	0x0800e29d
 800e27c:	0800e2bb 	.word	0x0800e2bb
 800e280:	0800e2a5 	.word	0x0800e2a5
 800e284:	0800e2bb 	.word	0x0800e2bb
 800e288:	0800e2ab 	.word	0x0800e2ab
 800e28c:	0800e2bb 	.word	0x0800e2bb
 800e290:	0800e2bb 	.word	0x0800e2bb
 800e294:	0800e2bb 	.word	0x0800e2bb
 800e298:	0800e2b3 	.word	0x0800e2b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e29c:	f7fd fce4 	bl	800bc68 <HAL_RCC_GetPCLK1Freq>
 800e2a0:	61f8      	str	r0, [r7, #28]
        break;
 800e2a2:	e010      	b.n	800e2c6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e2a4:	4b44      	ldr	r3, [pc, #272]	; (800e3b8 <UART_SetConfig+0x314>)
 800e2a6:	61fb      	str	r3, [r7, #28]
        break;
 800e2a8:	e00d      	b.n	800e2c6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e2aa:	f7fd fc45 	bl	800bb38 <HAL_RCC_GetSysClockFreq>
 800e2ae:	61f8      	str	r0, [r7, #28]
        break;
 800e2b0:	e009      	b.n	800e2c6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2b6:	61fb      	str	r3, [r7, #28]
        break;
 800e2b8:	e005      	b.n	800e2c6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e2c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e2c6:	69fb      	ldr	r3, [r7, #28]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	f000 8107 	beq.w	800e4dc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	685a      	ldr	r2, [r3, #4]
 800e2d2:	4613      	mov	r3, r2
 800e2d4:	005b      	lsls	r3, r3, #1
 800e2d6:	4413      	add	r3, r2
 800e2d8:	69fa      	ldr	r2, [r7, #28]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d305      	bcc.n	800e2ea <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e2e4:	69fa      	ldr	r2, [r7, #28]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d903      	bls.n	800e2f2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e2f0:	e0f4      	b.n	800e4dc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	461c      	mov	r4, r3
 800e2f8:	4615      	mov	r5, r2
 800e2fa:	f04f 0200 	mov.w	r2, #0
 800e2fe:	f04f 0300 	mov.w	r3, #0
 800e302:	022b      	lsls	r3, r5, #8
 800e304:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e308:	0222      	lsls	r2, r4, #8
 800e30a:	68f9      	ldr	r1, [r7, #12]
 800e30c:	6849      	ldr	r1, [r1, #4]
 800e30e:	0849      	lsrs	r1, r1, #1
 800e310:	2000      	movs	r0, #0
 800e312:	4688      	mov	r8, r1
 800e314:	4681      	mov	r9, r0
 800e316:	eb12 0a08 	adds.w	sl, r2, r8
 800e31a:	eb43 0b09 	adc.w	fp, r3, r9
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	603b      	str	r3, [r7, #0]
 800e326:	607a      	str	r2, [r7, #4]
 800e328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e32c:	4650      	mov	r0, sl
 800e32e:	4659      	mov	r1, fp
 800e330:	f7f2 fcaa 	bl	8000c88 <__aeabi_uldivmod>
 800e334:	4602      	mov	r2, r0
 800e336:	460b      	mov	r3, r1
 800e338:	4613      	mov	r3, r2
 800e33a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e342:	d308      	bcc.n	800e356 <UART_SetConfig+0x2b2>
 800e344:	69bb      	ldr	r3, [r7, #24]
 800e346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e34a:	d204      	bcs.n	800e356 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	69ba      	ldr	r2, [r7, #24]
 800e352:	60da      	str	r2, [r3, #12]
 800e354:	e0c2      	b.n	800e4dc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800e356:	2301      	movs	r3, #1
 800e358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e35c:	e0be      	b.n	800e4dc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	69db      	ldr	r3, [r3, #28]
 800e362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e366:	d16a      	bne.n	800e43e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800e368:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e36c:	2b08      	cmp	r3, #8
 800e36e:	d834      	bhi.n	800e3da <UART_SetConfig+0x336>
 800e370:	a201      	add	r2, pc, #4	; (adr r2, 800e378 <UART_SetConfig+0x2d4>)
 800e372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e376:	bf00      	nop
 800e378:	0800e39d 	.word	0x0800e39d
 800e37c:	0800e3bd 	.word	0x0800e3bd
 800e380:	0800e3c5 	.word	0x0800e3c5
 800e384:	0800e3db 	.word	0x0800e3db
 800e388:	0800e3cb 	.word	0x0800e3cb
 800e38c:	0800e3db 	.word	0x0800e3db
 800e390:	0800e3db 	.word	0x0800e3db
 800e394:	0800e3db 	.word	0x0800e3db
 800e398:	0800e3d3 	.word	0x0800e3d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e39c:	f7fd fc64 	bl	800bc68 <HAL_RCC_GetPCLK1Freq>
 800e3a0:	61f8      	str	r0, [r7, #28]
        break;
 800e3a2:	e020      	b.n	800e3e6 <UART_SetConfig+0x342>
 800e3a4:	efff69f3 	.word	0xefff69f3
 800e3a8:	40008000 	.word	0x40008000
 800e3ac:	40013800 	.word	0x40013800
 800e3b0:	40021000 	.word	0x40021000
 800e3b4:	40004400 	.word	0x40004400
 800e3b8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3bc:	f7fd fc6a 	bl	800bc94 <HAL_RCC_GetPCLK2Freq>
 800e3c0:	61f8      	str	r0, [r7, #28]
        break;
 800e3c2:	e010      	b.n	800e3e6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e3c4:	4b4c      	ldr	r3, [pc, #304]	; (800e4f8 <UART_SetConfig+0x454>)
 800e3c6:	61fb      	str	r3, [r7, #28]
        break;
 800e3c8:	e00d      	b.n	800e3e6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e3ca:	f7fd fbb5 	bl	800bb38 <HAL_RCC_GetSysClockFreq>
 800e3ce:	61f8      	str	r0, [r7, #28]
        break;
 800e3d0:	e009      	b.n	800e3e6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3d6:	61fb      	str	r3, [r7, #28]
        break;
 800e3d8:	e005      	b.n	800e3e6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e3de:	2301      	movs	r3, #1
 800e3e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e3e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e3e6:	69fb      	ldr	r3, [r7, #28]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d077      	beq.n	800e4dc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	005a      	lsls	r2, r3, #1
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	085b      	lsrs	r3, r3, #1
 800e3f6:	441a      	add	r2, r3
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e400:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e402:	69bb      	ldr	r3, [r7, #24]
 800e404:	2b0f      	cmp	r3, #15
 800e406:	d916      	bls.n	800e436 <UART_SetConfig+0x392>
 800e408:	69bb      	ldr	r3, [r7, #24]
 800e40a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e40e:	d212      	bcs.n	800e436 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e410:	69bb      	ldr	r3, [r7, #24]
 800e412:	b29b      	uxth	r3, r3
 800e414:	f023 030f 	bic.w	r3, r3, #15
 800e418:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e41a:	69bb      	ldr	r3, [r7, #24]
 800e41c:	085b      	lsrs	r3, r3, #1
 800e41e:	b29b      	uxth	r3, r3
 800e420:	f003 0307 	and.w	r3, r3, #7
 800e424:	b29a      	uxth	r2, r3
 800e426:	8afb      	ldrh	r3, [r7, #22]
 800e428:	4313      	orrs	r3, r2
 800e42a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	8afa      	ldrh	r2, [r7, #22]
 800e432:	60da      	str	r2, [r3, #12]
 800e434:	e052      	b.n	800e4dc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800e436:	2301      	movs	r3, #1
 800e438:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e43c:	e04e      	b.n	800e4dc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e43e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e442:	2b08      	cmp	r3, #8
 800e444:	d827      	bhi.n	800e496 <UART_SetConfig+0x3f2>
 800e446:	a201      	add	r2, pc, #4	; (adr r2, 800e44c <UART_SetConfig+0x3a8>)
 800e448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e44c:	0800e471 	.word	0x0800e471
 800e450:	0800e479 	.word	0x0800e479
 800e454:	0800e481 	.word	0x0800e481
 800e458:	0800e497 	.word	0x0800e497
 800e45c:	0800e487 	.word	0x0800e487
 800e460:	0800e497 	.word	0x0800e497
 800e464:	0800e497 	.word	0x0800e497
 800e468:	0800e497 	.word	0x0800e497
 800e46c:	0800e48f 	.word	0x0800e48f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e470:	f7fd fbfa 	bl	800bc68 <HAL_RCC_GetPCLK1Freq>
 800e474:	61f8      	str	r0, [r7, #28]
        break;
 800e476:	e014      	b.n	800e4a2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e478:	f7fd fc0c 	bl	800bc94 <HAL_RCC_GetPCLK2Freq>
 800e47c:	61f8      	str	r0, [r7, #28]
        break;
 800e47e:	e010      	b.n	800e4a2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e480:	4b1d      	ldr	r3, [pc, #116]	; (800e4f8 <UART_SetConfig+0x454>)
 800e482:	61fb      	str	r3, [r7, #28]
        break;
 800e484:	e00d      	b.n	800e4a2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e486:	f7fd fb57 	bl	800bb38 <HAL_RCC_GetSysClockFreq>
 800e48a:	61f8      	str	r0, [r7, #28]
        break;
 800e48c:	e009      	b.n	800e4a2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e48e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e492:	61fb      	str	r3, [r7, #28]
        break;
 800e494:	e005      	b.n	800e4a2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800e496:	2300      	movs	r3, #0
 800e498:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e49a:	2301      	movs	r3, #1
 800e49c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e4a0:	bf00      	nop
    }

    if (pclk != 0U)
 800e4a2:	69fb      	ldr	r3, [r7, #28]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d019      	beq.n	800e4dc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	085a      	lsrs	r2, r3, #1
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	441a      	add	r2, r3
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e4bc:	69bb      	ldr	r3, [r7, #24]
 800e4be:	2b0f      	cmp	r3, #15
 800e4c0:	d909      	bls.n	800e4d6 <UART_SetConfig+0x432>
 800e4c2:	69bb      	ldr	r3, [r7, #24]
 800e4c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4c8:	d205      	bcs.n	800e4d6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e4ca:	69bb      	ldr	r3, [r7, #24]
 800e4cc:	b29a      	uxth	r2, r3
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	60da      	str	r2, [r3, #12]
 800e4d4:	e002      	b.n	800e4dc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800e4e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3728      	adds	r7, #40	; 0x28
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e4f6:	bf00      	nop
 800e4f8:	00f42400 	.word	0x00f42400

0800e4fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e508:	f003 0308 	and.w	r3, r3, #8
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d00a      	beq.n	800e526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	430a      	orrs	r2, r1
 800e524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e52a:	f003 0301 	and.w	r3, r3, #1
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d00a      	beq.n	800e548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	685b      	ldr	r3, [r3, #4]
 800e538:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	430a      	orrs	r2, r1
 800e546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e54c:	f003 0302 	and.w	r3, r3, #2
 800e550:	2b00      	cmp	r3, #0
 800e552:	d00a      	beq.n	800e56a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	430a      	orrs	r2, r1
 800e568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e56e:	f003 0304 	and.w	r3, r3, #4
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00a      	beq.n	800e58c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	430a      	orrs	r2, r1
 800e58a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e590:	f003 0310 	and.w	r3, r3, #16
 800e594:	2b00      	cmp	r3, #0
 800e596:	d00a      	beq.n	800e5ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	689b      	ldr	r3, [r3, #8]
 800e59e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	430a      	orrs	r2, r1
 800e5ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b2:	f003 0320 	and.w	r3, r3, #32
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d00a      	beq.n	800e5d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	689b      	ldr	r3, [r3, #8]
 800e5c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	430a      	orrs	r2, r1
 800e5ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d01a      	beq.n	800e612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	430a      	orrs	r2, r1
 800e5f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5fa:	d10a      	bne.n	800e612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	430a      	orrs	r2, r1
 800e610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d00a      	beq.n	800e634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	430a      	orrs	r2, r1
 800e632:	605a      	str	r2, [r3, #4]
  }
}
 800e634:	bf00      	nop
 800e636:	370c      	adds	r7, #12
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr

0800e640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b098      	sub	sp, #96	; 0x60
 800e644:	af02      	add	r7, sp, #8
 800e646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2200      	movs	r2, #0
 800e64c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e650:	f7f7 fd9a 	bl	8006188 <HAL_GetTick>
 800e654:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f003 0308 	and.w	r3, r3, #8
 800e660:	2b08      	cmp	r3, #8
 800e662:	d12e      	bne.n	800e6c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e668:	9300      	str	r3, [sp, #0]
 800e66a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e66c:	2200      	movs	r2, #0
 800e66e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f000 f88c 	bl	800e790 <UART_WaitOnFlagUntilTimeout>
 800e678:	4603      	mov	r3, r0
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d021      	beq.n	800e6c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e686:	e853 3f00 	ldrex	r3, [r3]
 800e68a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e68e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e692:	653b      	str	r3, [r7, #80]	; 0x50
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	461a      	mov	r2, r3
 800e69a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e69c:	647b      	str	r3, [r7, #68]	; 0x44
 800e69e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e6a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6a4:	e841 2300 	strex	r3, r2, [r1]
 800e6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d1e6      	bne.n	800e67e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2220      	movs	r2, #32
 800e6b4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e6be:	2303      	movs	r3, #3
 800e6c0:	e062      	b.n	800e788 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f003 0304 	and.w	r3, r3, #4
 800e6cc:	2b04      	cmp	r3, #4
 800e6ce:	d149      	bne.n	800e764 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e6d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e6d4:	9300      	str	r3, [sp, #0]
 800e6d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6d8:	2200      	movs	r2, #0
 800e6da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f000 f856 	bl	800e790 <UART_WaitOnFlagUntilTimeout>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d03c      	beq.n	800e764 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f2:	e853 3f00 	ldrex	r3, [r3]
 800e6f6:	623b      	str	r3, [r7, #32]
   return(result);
 800e6f8:	6a3b      	ldr	r3, [r7, #32]
 800e6fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e6fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	461a      	mov	r2, r3
 800e706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e708:	633b      	str	r3, [r7, #48]	; 0x30
 800e70a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e70c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e70e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e710:	e841 2300 	strex	r3, r2, [r1]
 800e714:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d1e6      	bne.n	800e6ea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	3308      	adds	r3, #8
 800e722:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	e853 3f00 	ldrex	r3, [r3]
 800e72a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f023 0301 	bic.w	r3, r3, #1
 800e732:	64bb      	str	r3, [r7, #72]	; 0x48
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	3308      	adds	r3, #8
 800e73a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e73c:	61fa      	str	r2, [r7, #28]
 800e73e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e740:	69b9      	ldr	r1, [r7, #24]
 800e742:	69fa      	ldr	r2, [r7, #28]
 800e744:	e841 2300 	strex	r3, r2, [r1]
 800e748:	617b      	str	r3, [r7, #20]
   return(result);
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d1e5      	bne.n	800e71c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2220      	movs	r2, #32
 800e754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2200      	movs	r2, #0
 800e75c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e760:	2303      	movs	r3, #3
 800e762:	e011      	b.n	800e788 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2220      	movs	r2, #32
 800e768:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2220      	movs	r2, #32
 800e76e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2200      	movs	r2, #0
 800e776:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2200      	movs	r2, #0
 800e77c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2200      	movs	r2, #0
 800e782:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3758      	adds	r7, #88	; 0x58
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	603b      	str	r3, [r7, #0]
 800e79c:	4613      	mov	r3, r2
 800e79e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7a0:	e049      	b.n	800e836 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7a8:	d045      	beq.n	800e836 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7aa:	f7f7 fced 	bl	8006188 <HAL_GetTick>
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	1ad3      	subs	r3, r2, r3
 800e7b4:	69ba      	ldr	r2, [r7, #24]
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d302      	bcc.n	800e7c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d101      	bne.n	800e7c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e7c0:	2303      	movs	r3, #3
 800e7c2:	e048      	b.n	800e856 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f003 0304 	and.w	r3, r3, #4
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d031      	beq.n	800e836 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	69db      	ldr	r3, [r3, #28]
 800e7d8:	f003 0308 	and.w	r3, r3, #8
 800e7dc:	2b08      	cmp	r3, #8
 800e7de:	d110      	bne.n	800e802 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	2208      	movs	r2, #8
 800e7e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e7e8:	68f8      	ldr	r0, [r7, #12]
 800e7ea:	f000 f8ff 	bl	800e9ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2208      	movs	r2, #8
 800e7f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800e7fe:	2301      	movs	r3, #1
 800e800:	e029      	b.n	800e856 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	69db      	ldr	r3, [r3, #28]
 800e808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e80c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e810:	d111      	bne.n	800e836 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e81a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e81c:	68f8      	ldr	r0, [r7, #12]
 800e81e:	f000 f8e5 	bl	800e9ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2220      	movs	r2, #32
 800e826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2200      	movs	r2, #0
 800e82e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800e832:	2303      	movs	r3, #3
 800e834:	e00f      	b.n	800e856 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	69da      	ldr	r2, [r3, #28]
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	4013      	ands	r3, r2
 800e840:	68ba      	ldr	r2, [r7, #8]
 800e842:	429a      	cmp	r2, r3
 800e844:	bf0c      	ite	eq
 800e846:	2301      	moveq	r3, #1
 800e848:	2300      	movne	r3, #0
 800e84a:	b2db      	uxtb	r3, r3
 800e84c:	461a      	mov	r2, r3
 800e84e:	79fb      	ldrb	r3, [r7, #7]
 800e850:	429a      	cmp	r2, r3
 800e852:	d0a6      	beq.n	800e7a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e854:	2300      	movs	r3, #0
}
 800e856:	4618      	mov	r0, r3
 800e858:	3710      	adds	r7, #16
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
	...

0800e860 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b096      	sub	sp, #88	; 0x58
 800e864:	af00      	add	r7, sp, #0
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	60b9      	str	r1, [r7, #8]
 800e86a:	4613      	mov	r3, r2
 800e86c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	68ba      	ldr	r2, [r7, #8]
 800e872:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	88fa      	ldrh	r2, [r7, #6]
 800e878:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	2200      	movs	r2, #0
 800e880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2222      	movs	r2, #34	; 0x22
 800e888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e890:	2b00      	cmp	r3, #0
 800e892:	d028      	beq.n	800e8e6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e898:	4a3e      	ldr	r2, [pc, #248]	; (800e994 <UART_Start_Receive_DMA+0x134>)
 800e89a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8a0:	4a3d      	ldr	r2, [pc, #244]	; (800e998 <UART_Start_Receive_DMA+0x138>)
 800e8a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8a8:	4a3c      	ldr	r2, [pc, #240]	; (800e99c <UART_Start_Receive_DMA+0x13c>)
 800e8aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	3324      	adds	r3, #36	; 0x24
 800e8be:	4619      	mov	r1, r3
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	88fb      	ldrh	r3, [r7, #6]
 800e8c8:	f7f9 f8f8 	bl	8007abc <HAL_DMA_Start_IT>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d009      	beq.n	800e8e6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	2210      	movs	r2, #16
 800e8d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2220      	movs	r2, #32
 800e8de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	e051      	b.n	800e98a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	691b      	ldr	r3, [r3, #16]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d018      	beq.n	800e920 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8f6:	e853 3f00 	ldrex	r3, [r3]
 800e8fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e902:	657b      	str	r3, [r7, #84]	; 0x54
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	461a      	mov	r2, r3
 800e90a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e90c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e90e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e910:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e914:	e841 2300 	strex	r3, r2, [r1]
 800e918:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e91a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d1e6      	bne.n	800e8ee <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	3308      	adds	r3, #8
 800e926:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92a:	e853 3f00 	ldrex	r3, [r3]
 800e92e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e932:	f043 0301 	orr.w	r3, r3, #1
 800e936:	653b      	str	r3, [r7, #80]	; 0x50
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	3308      	adds	r3, #8
 800e93e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e940:	637a      	str	r2, [r7, #52]	; 0x34
 800e942:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e944:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e948:	e841 2300 	strex	r3, r2, [r1]
 800e94c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e950:	2b00      	cmp	r3, #0
 800e952:	d1e5      	bne.n	800e920 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	3308      	adds	r3, #8
 800e95a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	e853 3f00 	ldrex	r3, [r3]
 800e962:	613b      	str	r3, [r7, #16]
   return(result);
 800e964:	693b      	ldr	r3, [r7, #16]
 800e966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e96a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	3308      	adds	r3, #8
 800e972:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e974:	623a      	str	r2, [r7, #32]
 800e976:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e978:	69f9      	ldr	r1, [r7, #28]
 800e97a:	6a3a      	ldr	r2, [r7, #32]
 800e97c:	e841 2300 	strex	r3, r2, [r1]
 800e980:	61bb      	str	r3, [r7, #24]
   return(result);
 800e982:	69bb      	ldr	r3, [r7, #24]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d1e5      	bne.n	800e954 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800e988:	2300      	movs	r3, #0
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3758      	adds	r7, #88	; 0x58
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	0800eab5 	.word	0x0800eab5
 800e998:	0800ebe1 	.word	0x0800ebe1
 800e99c:	0800ec1f 	.word	0x0800ec1f

0800e9a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b089      	sub	sp, #36	; 0x24
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	e853 3f00 	ldrex	r3, [r3]
 800e9b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e9bc:	61fb      	str	r3, [r7, #28]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	461a      	mov	r2, r3
 800e9c4:	69fb      	ldr	r3, [r7, #28]
 800e9c6:	61bb      	str	r3, [r7, #24]
 800e9c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ca:	6979      	ldr	r1, [r7, #20]
 800e9cc:	69ba      	ldr	r2, [r7, #24]
 800e9ce:	e841 2300 	strex	r3, r2, [r1]
 800e9d2:	613b      	str	r3, [r7, #16]
   return(result);
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d1e6      	bne.n	800e9a8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2220      	movs	r2, #32
 800e9de:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800e9e0:	bf00      	nop
 800e9e2:	3724      	adds	r7, #36	; 0x24
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ea:	4770      	bx	lr

0800e9ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b095      	sub	sp, #84	; 0x54
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9fc:	e853 3f00 	ldrex	r3, [r3]
 800ea00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ea02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ea08:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	461a      	mov	r2, r3
 800ea10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea12:	643b      	str	r3, [r7, #64]	; 0x40
 800ea14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ea18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea1a:	e841 2300 	strex	r3, r2, [r1]
 800ea1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d1e6      	bne.n	800e9f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	3308      	adds	r3, #8
 800ea2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea2e:	6a3b      	ldr	r3, [r7, #32]
 800ea30:	e853 3f00 	ldrex	r3, [r3]
 800ea34:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	f023 0301 	bic.w	r3, r3, #1
 800ea3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	3308      	adds	r3, #8
 800ea44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea46:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ea48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea4e:	e841 2300 	strex	r3, r2, [r1]
 800ea52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d1e5      	bne.n	800ea26 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea5e:	2b01      	cmp	r3, #1
 800ea60:	d118      	bne.n	800ea94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	e853 3f00 	ldrex	r3, [r3]
 800ea6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	f023 0310 	bic.w	r3, r3, #16
 800ea76:	647b      	str	r3, [r7, #68]	; 0x44
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea80:	61bb      	str	r3, [r7, #24]
 800ea82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea84:	6979      	ldr	r1, [r7, #20]
 800ea86:	69ba      	ldr	r2, [r7, #24]
 800ea88:	e841 2300 	strex	r3, r2, [r1]
 800ea8c:	613b      	str	r3, [r7, #16]
   return(result);
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d1e6      	bne.n	800ea62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2220      	movs	r2, #32
 800ea98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	669a      	str	r2, [r3, #104]	; 0x68
}
 800eaa8:	bf00      	nop
 800eaaa:	3754      	adds	r7, #84	; 0x54
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr

0800eab4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b09c      	sub	sp, #112	; 0x70
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eac0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f003 0320 	and.w	r3, r3, #32
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d171      	bne.n	800ebb4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ead0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ead2:	2200      	movs	r2, #0
 800ead4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ead8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eae0:	e853 3f00 	ldrex	r3, [r3]
 800eae4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eaec:	66bb      	str	r3, [r7, #104]	; 0x68
 800eaee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eaf6:	65bb      	str	r3, [r7, #88]	; 0x58
 800eaf8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eafa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eafc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eafe:	e841 2300 	strex	r3, r2, [r1]
 800eb02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eb04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d1e6      	bne.n	800ead8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	3308      	adds	r3, #8
 800eb10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb14:	e853 3f00 	ldrex	r3, [r3]
 800eb18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb1c:	f023 0301 	bic.w	r3, r3, #1
 800eb20:	667b      	str	r3, [r7, #100]	; 0x64
 800eb22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	3308      	adds	r3, #8
 800eb28:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800eb2a:	647a      	str	r2, [r7, #68]	; 0x44
 800eb2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eb30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb32:	e841 2300 	strex	r3, r2, [r1]
 800eb36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eb38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d1e5      	bne.n	800eb0a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eb3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	3308      	adds	r3, #8
 800eb44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb48:	e853 3f00 	ldrex	r3, [r3]
 800eb4c:	623b      	str	r3, [r7, #32]
   return(result);
 800eb4e:	6a3b      	ldr	r3, [r7, #32]
 800eb50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb54:	663b      	str	r3, [r7, #96]	; 0x60
 800eb56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	3308      	adds	r3, #8
 800eb5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eb5e:	633a      	str	r2, [r7, #48]	; 0x30
 800eb60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb66:	e841 2300 	strex	r3, r2, [r1]
 800eb6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d1e5      	bne.n	800eb3e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800eb72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb74:	2220      	movs	r2, #32
 800eb76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb7e:	2b01      	cmp	r3, #1
 800eb80:	d118      	bne.n	800ebb4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	e853 3f00 	ldrex	r3, [r3]
 800eb8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	f023 0310 	bic.w	r3, r3, #16
 800eb96:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eb98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	461a      	mov	r2, r3
 800eb9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eba0:	61fb      	str	r3, [r7, #28]
 800eba2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eba4:	69b9      	ldr	r1, [r7, #24]
 800eba6:	69fa      	ldr	r2, [r7, #28]
 800eba8:	e841 2300 	strex	r3, r2, [r1]
 800ebac:	617b      	str	r3, [r7, #20]
   return(result);
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d1e6      	bne.n	800eb82 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ebb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ebbe:	2b01      	cmp	r3, #1
 800ebc0:	d107      	bne.n	800ebd2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ebc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebc4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ebc8:	4619      	mov	r1, r3
 800ebca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ebcc:	f7ff fa5e 	bl	800e08c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ebd0:	e002      	b.n	800ebd8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ebd2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ebd4:	f7f7 f9d4 	bl	8005f80 <HAL_UART_RxCpltCallback>
}
 800ebd8:	bf00      	nop
 800ebda:	3770      	adds	r7, #112	; 0x70
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b084      	sub	sp, #16
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2201      	movs	r2, #1
 800ebf2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d109      	bne.n	800ec10 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ec02:	085b      	lsrs	r3, r3, #1
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	4619      	mov	r1, r3
 800ec08:	68f8      	ldr	r0, [r7, #12]
 800ec0a:	f7ff fa3f 	bl	800e08c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ec0e:	e002      	b.n	800ec16 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ec10:	68f8      	ldr	r0, [r7, #12]
 800ec12:	f7ff fa27 	bl	800e064 <HAL_UART_RxHalfCpltCallback>
}
 800ec16:	bf00      	nop
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	b086      	sub	sp, #24
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec2a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec30:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec38:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	689b      	ldr	r3, [r3, #8]
 800ec40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec44:	2b80      	cmp	r3, #128	; 0x80
 800ec46:	d109      	bne.n	800ec5c <UART_DMAError+0x3e>
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	2b21      	cmp	r3, #33	; 0x21
 800ec4c:	d106      	bne.n	800ec5c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	2200      	movs	r2, #0
 800ec52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800ec56:	6978      	ldr	r0, [r7, #20]
 800ec58:	f7ff fea2 	bl	800e9a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	689b      	ldr	r3, [r3, #8]
 800ec62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec66:	2b40      	cmp	r3, #64	; 0x40
 800ec68:	d109      	bne.n	800ec7e <UART_DMAError+0x60>
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	2b22      	cmp	r3, #34	; 0x22
 800ec6e:	d106      	bne.n	800ec7e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	2200      	movs	r2, #0
 800ec74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ec78:	6978      	ldr	r0, [r7, #20]
 800ec7a:	f7ff feb7 	bl	800e9ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec84:	f043 0210 	orr.w	r2, r3, #16
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ec8e:	6978      	ldr	r0, [r7, #20]
 800ec90:	f7ff f9f2 	bl	800e078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec94:	bf00      	nop
 800ec96:	3718      	adds	r7, #24
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b084      	sub	sp, #16
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eca8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2200      	movs	r2, #0
 800ecae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ecba:	68f8      	ldr	r0, [r7, #12]
 800ecbc:	f7ff f9dc 	bl	800e078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecc0:	bf00      	nop
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b088      	sub	sp, #32
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	e853 3f00 	ldrex	r3, [r3]
 800ecdc:	60bb      	str	r3, [r7, #8]
   return(result);
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ece4:	61fb      	str	r3, [r7, #28]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	461a      	mov	r2, r3
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	61bb      	str	r3, [r7, #24]
 800ecf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecf2:	6979      	ldr	r1, [r7, #20]
 800ecf4:	69ba      	ldr	r2, [r7, #24]
 800ecf6:	e841 2300 	strex	r3, r2, [r1]
 800ecfa:	613b      	str	r3, [r7, #16]
   return(result);
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1e6      	bne.n	800ecd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2220      	movs	r2, #32
 800ed06:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f7ff f99e 	bl	800e050 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed14:	bf00      	nop
 800ed16:	3720      	adds	r7, #32
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b083      	sub	sp, #12
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ed24:	bf00      	nop
 800ed26:	370c      	adds	r7, #12
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ed30:	b084      	sub	sp, #16
 800ed32:	b480      	push	{r7}
 800ed34:	b083      	sub	sp, #12
 800ed36:	af00      	add	r7, sp, #0
 800ed38:	6078      	str	r0, [r7, #4]
 800ed3a:	f107 0014 	add.w	r0, r7, #20
 800ed3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ed42:	2300      	movs	r3, #0
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	370c      	adds	r7, #12
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	b004      	add	sp, #16
 800ed50:	4770      	bx	lr

0800ed52 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800ed52:	b480      	push	{r7}
 800ed54:	b085      	sub	sp, #20
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ed62:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ed66:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	b29a      	uxth	r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ed72:	2300      	movs	r3, #0
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3714      	adds	r7, #20
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr

0800ed80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ed80:	b480      	push	{r7}
 800ed82:	b085      	sub	sp, #20
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ed88:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ed8c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ed94:	b29a      	uxth	r2, r3
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	b29b      	uxth	r3, r3
 800ed9a:	43db      	mvns	r3, r3
 800ed9c:	b29b      	uxth	r3, r3
 800ed9e:	4013      	ands	r3, r2
 800eda0:	b29a      	uxth	r2, r3
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800eda8:	2300      	movs	r3, #0
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3714      	adds	r7, #20
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr

0800edb6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800edb6:	b480      	push	{r7}
 800edb8:	b083      	sub	sp, #12
 800edba:	af00      	add	r7, sp, #0
 800edbc:	6078      	str	r0, [r7, #4]
 800edbe:	460b      	mov	r3, r1
 800edc0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800edc2:	2300      	movs	r3, #0
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	370c      	adds	r7, #12
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800edd0:	b084      	sub	sp, #16
 800edd2:	b480      	push	{r7}
 800edd4:	b083      	sub	sp, #12
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	6078      	str	r0, [r7, #4]
 800edda:	f107 0014 	add.w	r0, r7, #20
 800edde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2201      	movs	r2, #1
 800ede6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2200      	movs	r2, #0
 800edf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2200      	movs	r2, #0
 800edfe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800ee02:	2300      	movs	r3, #0
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	370c      	adds	r7, #12
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	b004      	add	sp, #16
 800ee10:	4770      	bx	lr
	...

0800ee14 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b09d      	sub	sp, #116	; 0x74
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ee24:	687a      	ldr	r2, [r7, #4]
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	009b      	lsls	r3, r3, #2
 800ee2c:	4413      	add	r3, r2
 800ee2e:	881b      	ldrh	r3, [r3, #0]
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800ee36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee3a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	78db      	ldrb	r3, [r3, #3]
 800ee42:	2b03      	cmp	r3, #3
 800ee44:	d81f      	bhi.n	800ee86 <USB_ActivateEndpoint+0x72>
 800ee46:	a201      	add	r2, pc, #4	; (adr r2, 800ee4c <USB_ActivateEndpoint+0x38>)
 800ee48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee4c:	0800ee5d 	.word	0x0800ee5d
 800ee50:	0800ee79 	.word	0x0800ee79
 800ee54:	0800ee8f 	.word	0x0800ee8f
 800ee58:	0800ee6b 	.word	0x0800ee6b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ee5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ee60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ee64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ee68:	e012      	b.n	800ee90 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ee6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ee6e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800ee72:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ee76:	e00b      	b.n	800ee90 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ee78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ee7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ee80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ee84:	e004      	b.n	800ee90 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800ee86:	2301      	movs	r3, #1
 800ee88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800ee8c:	e000      	b.n	800ee90 <USB_ActivateEndpoint+0x7c>
      break;
 800ee8e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ee90:	687a      	ldr	r2, [r7, #4]
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	009b      	lsls	r3, r3, #2
 800ee98:	441a      	add	r2, r3
 800ee9a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ee9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eeaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eeae:	b29b      	uxth	r3, r3
 800eeb0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	009b      	lsls	r3, r3, #2
 800eeba:	4413      	add	r3, r2
 800eebc:	881b      	ldrh	r3, [r3, #0]
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	b21b      	sxth	r3, r3
 800eec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eeca:	b21a      	sxth	r2, r3
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	b21b      	sxth	r3, r3
 800eed2:	4313      	orrs	r3, r2
 800eed4:	b21b      	sxth	r3, r3
 800eed6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800eeda:	687a      	ldr	r2, [r7, #4]
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	009b      	lsls	r3, r3, #2
 800eee2:	441a      	add	r2, r3
 800eee4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800eee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eeec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	7b1b      	ldrb	r3, [r3, #12]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	f040 8178 	bne.w	800f1f6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	785b      	ldrb	r3, [r3, #1]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	f000 8084 	beq.w	800f018 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	61bb      	str	r3, [r7, #24]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	69bb      	ldr	r3, [r7, #24]
 800ef20:	4413      	add	r3, r2
 800ef22:	61bb      	str	r3, [r7, #24]
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	00da      	lsls	r2, r3, #3
 800ef2a:	69bb      	ldr	r3, [r7, #24]
 800ef2c:	4413      	add	r3, r2
 800ef2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ef32:	617b      	str	r3, [r7, #20]
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	88db      	ldrh	r3, [r3, #6]
 800ef38:	085b      	lsrs	r3, r3, #1
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	005b      	lsls	r3, r3, #1
 800ef3e:	b29a      	uxth	r2, r3
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ef44:	687a      	ldr	r2, [r7, #4]
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	009b      	lsls	r3, r3, #2
 800ef4c:	4413      	add	r3, r2
 800ef4e:	881b      	ldrh	r3, [r3, #0]
 800ef50:	827b      	strh	r3, [r7, #18]
 800ef52:	8a7b      	ldrh	r3, [r7, #18]
 800ef54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d01b      	beq.n	800ef94 <USB_ActivateEndpoint+0x180>
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	4413      	add	r3, r2
 800ef66:	881b      	ldrh	r3, [r3, #0]
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef72:	823b      	strh	r3, [r7, #16]
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	441a      	add	r2, r3
 800ef7e:	8a3b      	ldrh	r3, [r7, #16]
 800ef80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	78db      	ldrb	r3, [r3, #3]
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	d020      	beq.n	800efde <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	009b      	lsls	r3, r3, #2
 800efa4:	4413      	add	r3, r2
 800efa6:	881b      	ldrh	r3, [r3, #0]
 800efa8:	b29b      	uxth	r3, r3
 800efaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800efae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800efb2:	81bb      	strh	r3, [r7, #12]
 800efb4:	89bb      	ldrh	r3, [r7, #12]
 800efb6:	f083 0320 	eor.w	r3, r3, #32
 800efba:	81bb      	strh	r3, [r7, #12]
 800efbc:	687a      	ldr	r2, [r7, #4]
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	781b      	ldrb	r3, [r3, #0]
 800efc2:	009b      	lsls	r3, r3, #2
 800efc4:	441a      	add	r2, r3
 800efc6:	89bb      	ldrh	r3, [r7, #12]
 800efc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800efcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800efd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800efd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efd8:	b29b      	uxth	r3, r3
 800efda:	8013      	strh	r3, [r2, #0]
 800efdc:	e2d5      	b.n	800f58a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800efde:	687a      	ldr	r2, [r7, #4]
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	009b      	lsls	r3, r3, #2
 800efe6:	4413      	add	r3, r2
 800efe8:	881b      	ldrh	r3, [r3, #0]
 800efea:	b29b      	uxth	r3, r3
 800efec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eff4:	81fb      	strh	r3, [r7, #14]
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	009b      	lsls	r3, r3, #2
 800effe:	441a      	add	r2, r3
 800f000:	89fb      	ldrh	r3, [r7, #14]
 800f002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f00a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f00e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f012:	b29b      	uxth	r3, r3
 800f014:	8013      	strh	r3, [r2, #0]
 800f016:	e2b8      	b.n	800f58a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	633b      	str	r3, [r7, #48]	; 0x30
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f022:	b29b      	uxth	r3, r3
 800f024:	461a      	mov	r2, r3
 800f026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f028:	4413      	add	r3, r2
 800f02a:	633b      	str	r3, [r7, #48]	; 0x30
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	00da      	lsls	r2, r3, #3
 800f032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f034:	4413      	add	r3, r2
 800f036:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f03a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	88db      	ldrh	r3, [r3, #6]
 800f040:	085b      	lsrs	r3, r3, #1
 800f042:	b29b      	uxth	r3, r3
 800f044:	005b      	lsls	r3, r3, #1
 800f046:	b29a      	uxth	r2, r3
 800f048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f056:	b29b      	uxth	r3, r3
 800f058:	461a      	mov	r2, r3
 800f05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f05c:	4413      	add	r3, r2
 800f05e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	00da      	lsls	r2, r3, #3
 800f066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f068:	4413      	add	r3, r2
 800f06a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f06e:	627b      	str	r3, [r7, #36]	; 0x24
 800f070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f072:	881b      	ldrh	r3, [r3, #0]
 800f074:	b29b      	uxth	r3, r3
 800f076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f07a:	b29a      	uxth	r2, r3
 800f07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07e:	801a      	strh	r2, [r3, #0]
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	691b      	ldr	r3, [r3, #16]
 800f084:	2b3e      	cmp	r3, #62	; 0x3e
 800f086:	d91d      	bls.n	800f0c4 <USB_ActivateEndpoint+0x2b0>
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	691b      	ldr	r3, [r3, #16]
 800f08c:	095b      	lsrs	r3, r3, #5
 800f08e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	691b      	ldr	r3, [r3, #16]
 800f094:	f003 031f 	and.w	r3, r3, #31
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d102      	bne.n	800f0a2 <USB_ActivateEndpoint+0x28e>
 800f09c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f09e:	3b01      	subs	r3, #1
 800f0a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800f0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a4:	881b      	ldrh	r3, [r3, #0]
 800f0a6:	b29a      	uxth	r2, r3
 800f0a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	029b      	lsls	r3, r3, #10
 800f0ae:	b29b      	uxth	r3, r3
 800f0b0:	4313      	orrs	r3, r2
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f0b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f0bc:	b29a      	uxth	r2, r3
 800f0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c0:	801a      	strh	r2, [r3, #0]
 800f0c2:	e026      	b.n	800f112 <USB_ActivateEndpoint+0x2fe>
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	691b      	ldr	r3, [r3, #16]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d10a      	bne.n	800f0e2 <USB_ActivateEndpoint+0x2ce>
 800f0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ce:	881b      	ldrh	r3, [r3, #0]
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f0d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f0da:	b29a      	uxth	r2, r3
 800f0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0de:	801a      	strh	r2, [r3, #0]
 800f0e0:	e017      	b.n	800f112 <USB_ActivateEndpoint+0x2fe>
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	691b      	ldr	r3, [r3, #16]
 800f0e6:	085b      	lsrs	r3, r3, #1
 800f0e8:	66bb      	str	r3, [r7, #104]	; 0x68
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	691b      	ldr	r3, [r3, #16]
 800f0ee:	f003 0301 	and.w	r3, r3, #1
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d002      	beq.n	800f0fc <USB_ActivateEndpoint+0x2e8>
 800f0f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f0f8:	3301      	adds	r3, #1
 800f0fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800f0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fe:	881b      	ldrh	r3, [r3, #0]
 800f100:	b29a      	uxth	r2, r3
 800f102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f104:	b29b      	uxth	r3, r3
 800f106:	029b      	lsls	r3, r3, #10
 800f108:	b29b      	uxth	r3, r3
 800f10a:	4313      	orrs	r3, r2
 800f10c:	b29a      	uxth	r2, r3
 800f10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f110:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	009b      	lsls	r3, r3, #2
 800f11a:	4413      	add	r3, r2
 800f11c:	881b      	ldrh	r3, [r3, #0]
 800f11e:	847b      	strh	r3, [r7, #34]	; 0x22
 800f120:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f126:	2b00      	cmp	r3, #0
 800f128:	d01b      	beq.n	800f162 <USB_ActivateEndpoint+0x34e>
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	009b      	lsls	r3, r3, #2
 800f132:	4413      	add	r3, r2
 800f134:	881b      	ldrh	r3, [r3, #0]
 800f136:	b29b      	uxth	r3, r3
 800f138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f13c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f140:	843b      	strh	r3, [r7, #32]
 800f142:	687a      	ldr	r2, [r7, #4]
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	009b      	lsls	r3, r3, #2
 800f14a:	441a      	add	r2, r3
 800f14c:	8c3b      	ldrh	r3, [r7, #32]
 800f14e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f156:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f15a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f15e:	b29b      	uxth	r3, r3
 800f160:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d124      	bne.n	800f1b4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f16a:	687a      	ldr	r2, [r7, #4]
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	781b      	ldrb	r3, [r3, #0]
 800f170:	009b      	lsls	r3, r3, #2
 800f172:	4413      	add	r3, r2
 800f174:	881b      	ldrh	r3, [r3, #0]
 800f176:	b29b      	uxth	r3, r3
 800f178:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f17c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f180:	83bb      	strh	r3, [r7, #28]
 800f182:	8bbb      	ldrh	r3, [r7, #28]
 800f184:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f188:	83bb      	strh	r3, [r7, #28]
 800f18a:	8bbb      	ldrh	r3, [r7, #28]
 800f18c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f190:	83bb      	strh	r3, [r7, #28]
 800f192:	687a      	ldr	r2, [r7, #4]
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	009b      	lsls	r3, r3, #2
 800f19a:	441a      	add	r2, r3
 800f19c:	8bbb      	ldrh	r3, [r7, #28]
 800f19e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	8013      	strh	r3, [r2, #0]
 800f1b2:	e1ea      	b.n	800f58a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800f1b4:	687a      	ldr	r2, [r7, #4]
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	009b      	lsls	r3, r3, #2
 800f1bc:	4413      	add	r3, r2
 800f1be:	881b      	ldrh	r3, [r3, #0]
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f1c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1ca:	83fb      	strh	r3, [r7, #30]
 800f1cc:	8bfb      	ldrh	r3, [r7, #30]
 800f1ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f1d2:	83fb      	strh	r3, [r7, #30]
 800f1d4:	687a      	ldr	r2, [r7, #4]
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	009b      	lsls	r3, r3, #2
 800f1dc:	441a      	add	r2, r3
 800f1de:	8bfb      	ldrh	r3, [r7, #30]
 800f1e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	8013      	strh	r3, [r2, #0]
 800f1f4:	e1c9      	b.n	800f58a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	78db      	ldrb	r3, [r3, #3]
 800f1fa:	2b02      	cmp	r3, #2
 800f1fc:	d11e      	bne.n	800f23c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	009b      	lsls	r3, r3, #2
 800f206:	4413      	add	r3, r2
 800f208:	881b      	ldrh	r3, [r3, #0]
 800f20a:	b29b      	uxth	r3, r3
 800f20c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f214:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800f218:	687a      	ldr	r2, [r7, #4]
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	009b      	lsls	r3, r3, #2
 800f220:	441a      	add	r2, r3
 800f222:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800f226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f22a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f22e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800f232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f236:	b29b      	uxth	r3, r3
 800f238:	8013      	strh	r3, [r2, #0]
 800f23a:	e01d      	b.n	800f278 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800f23c:	687a      	ldr	r2, [r7, #4]
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	009b      	lsls	r3, r3, #2
 800f244:	4413      	add	r3, r2
 800f246:	881b      	ldrh	r3, [r3, #0]
 800f248:	b29b      	uxth	r3, r3
 800f24a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800f24e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f252:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800f256:	687a      	ldr	r2, [r7, #4]
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	009b      	lsls	r3, r3, #2
 800f25e:	441a      	add	r2, r3
 800f260:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800f264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f26c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f274:	b29b      	uxth	r3, r3
 800f276:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f282:	b29b      	uxth	r3, r3
 800f284:	461a      	mov	r2, r3
 800f286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f288:	4413      	add	r3, r2
 800f28a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	00da      	lsls	r2, r3, #3
 800f292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f294:	4413      	add	r3, r2
 800f296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f29a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	891b      	ldrh	r3, [r3, #8]
 800f2a0:	085b      	lsrs	r3, r3, #1
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	005b      	lsls	r3, r3, #1
 800f2a6:	b29a      	uxth	r2, r3
 800f2a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f2aa:	801a      	strh	r2, [r3, #0]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	657b      	str	r3, [r7, #84]	; 0x54
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f2b6:	b29b      	uxth	r3, r3
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2bc:	4413      	add	r3, r2
 800f2be:	657b      	str	r3, [r7, #84]	; 0x54
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	00da      	lsls	r2, r3, #3
 800f2c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2c8:	4413      	add	r3, r2
 800f2ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f2ce:	653b      	str	r3, [r7, #80]	; 0x50
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	895b      	ldrh	r3, [r3, #10]
 800f2d4:	085b      	lsrs	r3, r3, #1
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	005b      	lsls	r3, r3, #1
 800f2da:	b29a      	uxth	r2, r3
 800f2dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2de:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	785b      	ldrb	r3, [r3, #1]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	f040 8093 	bne.w	800f410 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f2ea:	687a      	ldr	r2, [r7, #4]
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	009b      	lsls	r3, r3, #2
 800f2f2:	4413      	add	r3, r2
 800f2f4:	881b      	ldrh	r3, [r3, #0]
 800f2f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f2fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f2fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f302:	2b00      	cmp	r3, #0
 800f304:	d01b      	beq.n	800f33e <USB_ActivateEndpoint+0x52a>
 800f306:	687a      	ldr	r2, [r7, #4]
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	009b      	lsls	r3, r3, #2
 800f30e:	4413      	add	r3, r2
 800f310:	881b      	ldrh	r3, [r3, #0]
 800f312:	b29b      	uxth	r3, r3
 800f314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f31c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f31e:	687a      	ldr	r2, [r7, #4]
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	009b      	lsls	r3, r3, #2
 800f326:	441a      	add	r2, r3
 800f328:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f32a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f32e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f332:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f33a:	b29b      	uxth	r3, r3
 800f33c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f33e:	687a      	ldr	r2, [r7, #4]
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	009b      	lsls	r3, r3, #2
 800f346:	4413      	add	r3, r2
 800f348:	881b      	ldrh	r3, [r3, #0]
 800f34a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f34c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f34e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f352:	2b00      	cmp	r3, #0
 800f354:	d01b      	beq.n	800f38e <USB_ActivateEndpoint+0x57a>
 800f356:	687a      	ldr	r2, [r7, #4]
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	009b      	lsls	r3, r3, #2
 800f35e:	4413      	add	r3, r2
 800f360:	881b      	ldrh	r3, [r3, #0]
 800f362:	b29b      	uxth	r3, r3
 800f364:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f36c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800f36e:	687a      	ldr	r2, [r7, #4]
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	781b      	ldrb	r3, [r3, #0]
 800f374:	009b      	lsls	r3, r3, #2
 800f376:	441a      	add	r2, r3
 800f378:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f37a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f37e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f386:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f38a:	b29b      	uxth	r3, r3
 800f38c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f38e:	687a      	ldr	r2, [r7, #4]
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	009b      	lsls	r3, r3, #2
 800f396:	4413      	add	r3, r2
 800f398:	881b      	ldrh	r3, [r3, #0]
 800f39a:	b29b      	uxth	r3, r3
 800f39c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f3a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3a4:	873b      	strh	r3, [r7, #56]	; 0x38
 800f3a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f3a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f3ac:	873b      	strh	r3, [r7, #56]	; 0x38
 800f3ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f3b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f3b4:	873b      	strh	r3, [r7, #56]	; 0x38
 800f3b6:	687a      	ldr	r2, [r7, #4]
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	009b      	lsls	r3, r3, #2
 800f3be:	441a      	add	r2, r3
 800f3c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f3c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f3c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f3ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f3ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f3d6:	687a      	ldr	r2, [r7, #4]
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	009b      	lsls	r3, r3, #2
 800f3de:	4413      	add	r3, r2
 800f3e0:	881b      	ldrh	r3, [r3, #0]
 800f3e2:	b29b      	uxth	r3, r3
 800f3e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f3ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	009b      	lsls	r3, r3, #2
 800f3f6:	441a      	add	r2, r3
 800f3f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f3fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	8013      	strh	r3, [r2, #0]
 800f40e:	e0bc      	b.n	800f58a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f410:	687a      	ldr	r2, [r7, #4]
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	009b      	lsls	r3, r3, #2
 800f418:	4413      	add	r3, r2
 800f41a:	881b      	ldrh	r3, [r3, #0]
 800f41c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800f420:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d01d      	beq.n	800f468 <USB_ActivateEndpoint+0x654>
 800f42c:	687a      	ldr	r2, [r7, #4]
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	009b      	lsls	r3, r3, #2
 800f434:	4413      	add	r3, r2
 800f436:	881b      	ldrh	r3, [r3, #0]
 800f438:	b29b      	uxth	r3, r3
 800f43a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f43e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f442:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800f446:	687a      	ldr	r2, [r7, #4]
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	009b      	lsls	r3, r3, #2
 800f44e:	441a      	add	r2, r3
 800f450:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f45c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f464:	b29b      	uxth	r3, r3
 800f466:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f468:	687a      	ldr	r2, [r7, #4]
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	009b      	lsls	r3, r3, #2
 800f470:	4413      	add	r3, r2
 800f472:	881b      	ldrh	r3, [r3, #0]
 800f474:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800f478:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f480:	2b00      	cmp	r3, #0
 800f482:	d01d      	beq.n	800f4c0 <USB_ActivateEndpoint+0x6ac>
 800f484:	687a      	ldr	r2, [r7, #4]
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	781b      	ldrb	r3, [r3, #0]
 800f48a:	009b      	lsls	r3, r3, #2
 800f48c:	4413      	add	r3, r2
 800f48e:	881b      	ldrh	r3, [r3, #0]
 800f490:	b29b      	uxth	r3, r3
 800f492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f49a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800f49e:	687a      	ldr	r2, [r7, #4]
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	781b      	ldrb	r3, [r3, #0]
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	441a      	add	r2, r3
 800f4a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800f4ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f4bc:	b29b      	uxth	r3, r3
 800f4be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	78db      	ldrb	r3, [r3, #3]
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d024      	beq.n	800f512 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f4c8:	687a      	ldr	r2, [r7, #4]
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	4413      	add	r3, r2
 800f4d2:	881b      	ldrh	r3, [r3, #0]
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f4e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f4e6:	f083 0320 	eor.w	r3, r3, #32
 800f4ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f4ee:	687a      	ldr	r2, [r7, #4]
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	441a      	add	r2, r3
 800f4f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f4fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	8013      	strh	r3, [r2, #0]
 800f510:	e01d      	b.n	800f54e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	009b      	lsls	r3, r3, #2
 800f51a:	4413      	add	r3, r2
 800f51c:	881b      	ldrh	r3, [r3, #0]
 800f51e:	b29b      	uxth	r3, r3
 800f520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f528:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f52c:	687a      	ldr	r2, [r7, #4]
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	009b      	lsls	r3, r3, #2
 800f534:	441a      	add	r2, r3
 800f536:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f53a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f53e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f54a:	b29b      	uxth	r3, r3
 800f54c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f54e:	687a      	ldr	r2, [r7, #4]
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	009b      	lsls	r3, r3, #2
 800f556:	4413      	add	r3, r2
 800f558:	881b      	ldrh	r3, [r3, #0]
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f564:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f568:	687a      	ldr	r2, [r7, #4]
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	009b      	lsls	r3, r3, #2
 800f570:	441a      	add	r2, r3
 800f572:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f57a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f57e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f586:	b29b      	uxth	r3, r3
 800f588:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800f58a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3774      	adds	r7, #116	; 0x74
 800f592:	46bd      	mov	sp, r7
 800f594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f598:	4770      	bx	lr
 800f59a:	bf00      	nop

0800f59c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f59c:	b480      	push	{r7}
 800f59e:	b08d      	sub	sp, #52	; 0x34
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	7b1b      	ldrb	r3, [r3, #12]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	f040 808e 	bne.w	800f6cc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	785b      	ldrb	r3, [r3, #1]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d044      	beq.n	800f642 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f5b8:	687a      	ldr	r2, [r7, #4]
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	4413      	add	r3, r2
 800f5c2:	881b      	ldrh	r3, [r3, #0]
 800f5c4:	81bb      	strh	r3, [r7, #12]
 800f5c6:	89bb      	ldrh	r3, [r7, #12]
 800f5c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d01b      	beq.n	800f608 <USB_DeactivateEndpoint+0x6c>
 800f5d0:	687a      	ldr	r2, [r7, #4]
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	009b      	lsls	r3, r3, #2
 800f5d8:	4413      	add	r3, r2
 800f5da:	881b      	ldrh	r3, [r3, #0]
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5e6:	817b      	strh	r3, [r7, #10]
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	009b      	lsls	r3, r3, #2
 800f5f0:	441a      	add	r2, r3
 800f5f2:	897b      	ldrh	r3, [r7, #10]
 800f5f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f5f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f5fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f600:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f604:	b29b      	uxth	r3, r3
 800f606:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f608:	687a      	ldr	r2, [r7, #4]
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	009b      	lsls	r3, r3, #2
 800f610:	4413      	add	r3, r2
 800f612:	881b      	ldrh	r3, [r3, #0]
 800f614:	b29b      	uxth	r3, r3
 800f616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f61a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f61e:	813b      	strh	r3, [r7, #8]
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	009b      	lsls	r3, r3, #2
 800f628:	441a      	add	r2, r3
 800f62a:	893b      	ldrh	r3, [r7, #8]
 800f62c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	8013      	strh	r3, [r2, #0]
 800f640:	e192      	b.n	800f968 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f642:	687a      	ldr	r2, [r7, #4]
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	009b      	lsls	r3, r3, #2
 800f64a:	4413      	add	r3, r2
 800f64c:	881b      	ldrh	r3, [r3, #0]
 800f64e:	827b      	strh	r3, [r7, #18]
 800f650:	8a7b      	ldrh	r3, [r7, #18]
 800f652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f656:	2b00      	cmp	r3, #0
 800f658:	d01b      	beq.n	800f692 <USB_DeactivateEndpoint+0xf6>
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	009b      	lsls	r3, r3, #2
 800f662:	4413      	add	r3, r2
 800f664:	881b      	ldrh	r3, [r3, #0]
 800f666:	b29b      	uxth	r3, r3
 800f668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f66c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f670:	823b      	strh	r3, [r7, #16]
 800f672:	687a      	ldr	r2, [r7, #4]
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	009b      	lsls	r3, r3, #2
 800f67a:	441a      	add	r2, r3
 800f67c:	8a3b      	ldrh	r3, [r7, #16]
 800f67e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f68a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f68e:	b29b      	uxth	r3, r3
 800f690:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f692:	687a      	ldr	r2, [r7, #4]
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	009b      	lsls	r3, r3, #2
 800f69a:	4413      	add	r3, r2
 800f69c:	881b      	ldrh	r3, [r3, #0]
 800f69e:	b29b      	uxth	r3, r3
 800f6a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f6a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6a8:	81fb      	strh	r3, [r7, #14]
 800f6aa:	687a      	ldr	r2, [r7, #4]
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	009b      	lsls	r3, r3, #2
 800f6b2:	441a      	add	r2, r3
 800f6b4:	89fb      	ldrh	r3, [r7, #14]
 800f6b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f6ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f6be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f6c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	8013      	strh	r3, [r2, #0]
 800f6ca:	e14d      	b.n	800f968 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	785b      	ldrb	r3, [r3, #1]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	f040 80a5 	bne.w	800f820 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	009b      	lsls	r3, r3, #2
 800f6de:	4413      	add	r3, r2
 800f6e0:	881b      	ldrh	r3, [r3, #0]
 800f6e2:	843b      	strh	r3, [r7, #32]
 800f6e4:	8c3b      	ldrh	r3, [r7, #32]
 800f6e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d01b      	beq.n	800f726 <USB_DeactivateEndpoint+0x18a>
 800f6ee:	687a      	ldr	r2, [r7, #4]
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	009b      	lsls	r3, r3, #2
 800f6f6:	4413      	add	r3, r2
 800f6f8:	881b      	ldrh	r3, [r3, #0]
 800f6fa:	b29b      	uxth	r3, r3
 800f6fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f704:	83fb      	strh	r3, [r7, #30]
 800f706:	687a      	ldr	r2, [r7, #4]
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	781b      	ldrb	r3, [r3, #0]
 800f70c:	009b      	lsls	r3, r3, #2
 800f70e:	441a      	add	r2, r3
 800f710:	8bfb      	ldrh	r3, [r7, #30]
 800f712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f71a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f71e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f722:	b29b      	uxth	r3, r3
 800f724:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	009b      	lsls	r3, r3, #2
 800f72e:	4413      	add	r3, r2
 800f730:	881b      	ldrh	r3, [r3, #0]
 800f732:	83bb      	strh	r3, [r7, #28]
 800f734:	8bbb      	ldrh	r3, [r7, #28]
 800f736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d01b      	beq.n	800f776 <USB_DeactivateEndpoint+0x1da>
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	009b      	lsls	r3, r3, #2
 800f746:	4413      	add	r3, r2
 800f748:	881b      	ldrh	r3, [r3, #0]
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f754:	837b      	strh	r3, [r7, #26]
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	009b      	lsls	r3, r3, #2
 800f75e:	441a      	add	r2, r3
 800f760:	8b7b      	ldrh	r3, [r7, #26]
 800f762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f76a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f76e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f772:	b29b      	uxth	r3, r3
 800f774:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800f776:	687a      	ldr	r2, [r7, #4]
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	009b      	lsls	r3, r3, #2
 800f77e:	4413      	add	r3, r2
 800f780:	881b      	ldrh	r3, [r3, #0]
 800f782:	b29b      	uxth	r3, r3
 800f784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f78c:	833b      	strh	r3, [r7, #24]
 800f78e:	687a      	ldr	r2, [r7, #4]
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	009b      	lsls	r3, r3, #2
 800f796:	441a      	add	r2, r3
 800f798:	8b3b      	ldrh	r3, [r7, #24]
 800f79a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f79e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f7a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f7a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f7ae:	687a      	ldr	r2, [r7, #4]
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	009b      	lsls	r3, r3, #2
 800f7b6:	4413      	add	r3, r2
 800f7b8:	881b      	ldrh	r3, [r3, #0]
 800f7ba:	b29b      	uxth	r3, r3
 800f7bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f7c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7c4:	82fb      	strh	r3, [r7, #22]
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	009b      	lsls	r3, r3, #2
 800f7ce:	441a      	add	r2, r3
 800f7d0:	8afb      	ldrh	r3, [r7, #22]
 800f7d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f7d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f7da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f7de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7e2:	b29b      	uxth	r3, r3
 800f7e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f7e6:	687a      	ldr	r2, [r7, #4]
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	009b      	lsls	r3, r3, #2
 800f7ee:	4413      	add	r3, r2
 800f7f0:	881b      	ldrh	r3, [r3, #0]
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7fc:	82bb      	strh	r3, [r7, #20]
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	009b      	lsls	r3, r3, #2
 800f806:	441a      	add	r2, r3
 800f808:	8abb      	ldrh	r3, [r7, #20]
 800f80a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f80e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f81a:	b29b      	uxth	r3, r3
 800f81c:	8013      	strh	r3, [r2, #0]
 800f81e:	e0a3      	b.n	800f968 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f820:	687a      	ldr	r2, [r7, #4]
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	781b      	ldrb	r3, [r3, #0]
 800f826:	009b      	lsls	r3, r3, #2
 800f828:	4413      	add	r3, r2
 800f82a:	881b      	ldrh	r3, [r3, #0]
 800f82c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f82e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f834:	2b00      	cmp	r3, #0
 800f836:	d01b      	beq.n	800f870 <USB_DeactivateEndpoint+0x2d4>
 800f838:	687a      	ldr	r2, [r7, #4]
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	009b      	lsls	r3, r3, #2
 800f840:	4413      	add	r3, r2
 800f842:	881b      	ldrh	r3, [r3, #0]
 800f844:	b29b      	uxth	r3, r3
 800f846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f84a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f84e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f850:	687a      	ldr	r2, [r7, #4]
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	009b      	lsls	r3, r3, #2
 800f858:	441a      	add	r2, r3
 800f85a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f85c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f86c:	b29b      	uxth	r3, r3
 800f86e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f870:	687a      	ldr	r2, [r7, #4]
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	009b      	lsls	r3, r3, #2
 800f878:	4413      	add	r3, r2
 800f87a:	881b      	ldrh	r3, [r3, #0]
 800f87c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800f87e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f884:	2b00      	cmp	r3, #0
 800f886:	d01b      	beq.n	800f8c0 <USB_DeactivateEndpoint+0x324>
 800f888:	687a      	ldr	r2, [r7, #4]
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	009b      	lsls	r3, r3, #2
 800f890:	4413      	add	r3, r2
 800f892:	881b      	ldrh	r3, [r3, #0]
 800f894:	b29b      	uxth	r3, r3
 800f896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f89a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f89e:	853b      	strh	r3, [r7, #40]	; 0x28
 800f8a0:	687a      	ldr	r2, [r7, #4]
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	781b      	ldrb	r3, [r3, #0]
 800f8a6:	009b      	lsls	r3, r3, #2
 800f8a8:	441a      	add	r2, r3
 800f8aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f8ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f8b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f8c0:	687a      	ldr	r2, [r7, #4]
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	781b      	ldrb	r3, [r3, #0]
 800f8c6:	009b      	lsls	r3, r3, #2
 800f8c8:	4413      	add	r3, r2
 800f8ca:	881b      	ldrh	r3, [r3, #0]
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f8d8:	687a      	ldr	r2, [r7, #4]
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	009b      	lsls	r3, r3, #2
 800f8e0:	441a      	add	r2, r3
 800f8e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f8e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f8f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f8f8:	687a      	ldr	r2, [r7, #4]
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	781b      	ldrb	r3, [r3, #0]
 800f8fe:	009b      	lsls	r3, r3, #2
 800f900:	4413      	add	r3, r2
 800f902:	881b      	ldrh	r3, [r3, #0]
 800f904:	b29b      	uxth	r3, r3
 800f906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f90a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f90e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	781b      	ldrb	r3, [r3, #0]
 800f916:	009b      	lsls	r3, r3, #2
 800f918:	441a      	add	r2, r3
 800f91a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f91c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f930:	687a      	ldr	r2, [r7, #4]
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	009b      	lsls	r3, r3, #2
 800f938:	4413      	add	r3, r2
 800f93a:	881b      	ldrh	r3, [r3, #0]
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f946:	847b      	strh	r3, [r7, #34]	; 0x22
 800f948:	687a      	ldr	r2, [r7, #4]
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	009b      	lsls	r3, r3, #2
 800f950:	441a      	add	r2, r3
 800f952:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f95c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f964:	b29b      	uxth	r3, r3
 800f966:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800f968:	2300      	movs	r3, #0
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3734      	adds	r7, #52	; 0x34
 800f96e:	46bd      	mov	sp, r7
 800f970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f974:	4770      	bx	lr

0800f976 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f976:	b580      	push	{r7, lr}
 800f978:	b0c2      	sub	sp, #264	; 0x108
 800f97a:	af00      	add	r7, sp, #0
 800f97c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f980:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f984:	6018      	str	r0, [r3, #0]
 800f986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f98a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f98e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	785b      	ldrb	r3, [r3, #1]
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	f040 86b7 	bne.w	8010710 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800f9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	699a      	ldr	r2, [r3, #24]
 800f9ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	691b      	ldr	r3, [r3, #16]
 800f9ba:	429a      	cmp	r2, r3
 800f9bc:	d908      	bls.n	800f9d0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800f9be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	691b      	ldr	r3, [r3, #16]
 800f9ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f9ce:	e007      	b.n	800f9e0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800f9d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	699b      	ldr	r3, [r3, #24]
 800f9dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800f9e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	7b1b      	ldrb	r3, [r3, #12]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d13a      	bne.n	800fa66 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f9f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	6959      	ldr	r1, [r3, #20]
 800f9fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	88da      	ldrh	r2, [r3, #6]
 800fa08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa0c:	b29b      	uxth	r3, r3
 800fa0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fa12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fa16:	6800      	ldr	r0, [r0, #0]
 800fa18:	f001 fcb9 	bl	801138e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800fa1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	613b      	str	r3, [r7, #16]
 800fa28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	461a      	mov	r2, r3
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	4413      	add	r3, r2
 800fa3e:	613b      	str	r3, [r7, #16]
 800fa40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	00da      	lsls	r2, r3, #3
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	4413      	add	r3, r2
 800fa52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fa56:	60fb      	str	r3, [r7, #12]
 800fa58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa5c:	b29a      	uxth	r2, r3
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	801a      	strh	r2, [r3, #0]
 800fa62:	f000 be1f 	b.w	80106a4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800fa66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	78db      	ldrb	r3, [r3, #3]
 800fa72:	2b02      	cmp	r3, #2
 800fa74:	f040 8462 	bne.w	801033c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800fa78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	6a1a      	ldr	r2, [r3, #32]
 800fa84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	691b      	ldr	r3, [r3, #16]
 800fa90:	429a      	cmp	r2, r3
 800fa92:	f240 83df 	bls.w	8010254 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800fa96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa9e:	681a      	ldr	r2, [r3, #0]
 800faa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	009b      	lsls	r3, r3, #2
 800faae:	4413      	add	r3, r2
 800fab0:	881b      	ldrh	r3, [r3, #0]
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fabc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800fac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fac8:	681a      	ldr	r2, [r3, #0]
 800faca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800face:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	781b      	ldrb	r3, [r3, #0]
 800fad6:	009b      	lsls	r3, r3, #2
 800fad8:	441a      	add	r2, r3
 800fada:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800fade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fae6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800faea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800faee:	b29b      	uxth	r3, r3
 800faf0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800faf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	6a1a      	ldr	r2, [r3, #32]
 800fafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb02:	1ad2      	subs	r2, r2, r3
 800fb04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800fb10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb18:	681a      	ldr	r2, [r3, #0]
 800fb1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	009b      	lsls	r3, r3, #2
 800fb28:	4413      	add	r3, r2
 800fb2a:	881b      	ldrh	r3, [r3, #0]
 800fb2c:	b29b      	uxth	r3, r3
 800fb2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	f000 81c7 	beq.w	800fec6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fb38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	633b      	str	r3, [r7, #48]	; 0x30
 800fb44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	785b      	ldrb	r3, [r3, #1]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d177      	bne.n	800fc44 <USB_EPStartXfer+0x2ce>
 800fb54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb6e:	b29b      	uxth	r3, r3
 800fb70:	461a      	mov	r2, r3
 800fb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb74:	4413      	add	r3, r2
 800fb76:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	00da      	lsls	r2, r3, #3
 800fb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb88:	4413      	add	r3, r2
 800fb8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fb8e:	627b      	str	r3, [r7, #36]	; 0x24
 800fb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb92:	881b      	ldrh	r3, [r3, #0]
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fb9a:	b29a      	uxth	r2, r3
 800fb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb9e:	801a      	strh	r2, [r3, #0]
 800fba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fba4:	2b3e      	cmp	r3, #62	; 0x3e
 800fba6:	d921      	bls.n	800fbec <USB_EPStartXfer+0x276>
 800fba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbac:	095b      	lsrs	r3, r3, #5
 800fbae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fbb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbb6:	f003 031f 	and.w	r3, r3, #31
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d104      	bne.n	800fbc8 <USB_EPStartXfer+0x252>
 800fbbe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fbc2:	3b01      	subs	r3, #1
 800fbc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbca:	881b      	ldrh	r3, [r3, #0]
 800fbcc:	b29a      	uxth	r2, r3
 800fbce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fbd2:	b29b      	uxth	r3, r3
 800fbd4:	029b      	lsls	r3, r3, #10
 800fbd6:	b29b      	uxth	r3, r3
 800fbd8:	4313      	orrs	r3, r2
 800fbda:	b29b      	uxth	r3, r3
 800fbdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fbe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fbe4:	b29a      	uxth	r2, r3
 800fbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe8:	801a      	strh	r2, [r3, #0]
 800fbea:	e050      	b.n	800fc8e <USB_EPStartXfer+0x318>
 800fbec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d10a      	bne.n	800fc0a <USB_EPStartXfer+0x294>
 800fbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf6:	881b      	ldrh	r3, [r3, #0]
 800fbf8:	b29b      	uxth	r3, r3
 800fbfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fbfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fc02:	b29a      	uxth	r2, r3
 800fc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc06:	801a      	strh	r2, [r3, #0]
 800fc08:	e041      	b.n	800fc8e <USB_EPStartXfer+0x318>
 800fc0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc0e:	085b      	lsrs	r3, r3, #1
 800fc10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fc14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc18:	f003 0301 	and.w	r3, r3, #1
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d004      	beq.n	800fc2a <USB_EPStartXfer+0x2b4>
 800fc20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fc24:	3301      	adds	r3, #1
 800fc26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2c:	881b      	ldrh	r3, [r3, #0]
 800fc2e:	b29a      	uxth	r2, r3
 800fc30:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fc34:	b29b      	uxth	r3, r3
 800fc36:	029b      	lsls	r3, r3, #10
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	b29a      	uxth	r2, r3
 800fc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc40:	801a      	strh	r2, [r3, #0]
 800fc42:	e024      	b.n	800fc8e <USB_EPStartXfer+0x318>
 800fc44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	785b      	ldrb	r3, [r3, #1]
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	d11c      	bne.n	800fc8e <USB_EPStartXfer+0x318>
 800fc54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	461a      	mov	r2, r3
 800fc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc68:	4413      	add	r3, r2
 800fc6a:	633b      	str	r3, [r7, #48]	; 0x30
 800fc6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	00da      	lsls	r2, r3, #3
 800fc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7c:	4413      	add	r3, r2
 800fc7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fc82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc88:	b29a      	uxth	r2, r3
 800fc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800fc8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	895b      	ldrh	r3, [r3, #10]
 800fc9a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fc9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	6959      	ldr	r1, [r3, #20]
 800fcaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fcae:	b29b      	uxth	r3, r3
 800fcb0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fcb4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fcb8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fcbc:	6800      	ldr	r0, [r0, #0]
 800fcbe:	f001 fb66 	bl	801138e <USB_WritePMA>
            ep->xfer_buff += len;
 800fcc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	695a      	ldr	r2, [r3, #20]
 800fcce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fcd2:	441a      	add	r2, r3
 800fcd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800fce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	6a1a      	ldr	r2, [r3, #32]
 800fcec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	691b      	ldr	r3, [r3, #16]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d90f      	bls.n	800fd1c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800fcfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	6a1a      	ldr	r2, [r3, #32]
 800fd08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd0c:	1ad2      	subs	r2, r2, r3
 800fd0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	621a      	str	r2, [r3, #32]
 800fd1a:	e00e      	b.n	800fd3a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800fd1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	6a1b      	ldr	r3, [r3, #32]
 800fd28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800fd2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	2200      	movs	r2, #0
 800fd38:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fd3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	785b      	ldrb	r3, [r3, #1]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d177      	bne.n	800fe3a <USB_EPStartXfer+0x4c4>
 800fd4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	61bb      	str	r3, [r7, #24]
 800fd56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	461a      	mov	r2, r3
 800fd68:	69bb      	ldr	r3, [r7, #24]
 800fd6a:	4413      	add	r3, r2
 800fd6c:	61bb      	str	r3, [r7, #24]
 800fd6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	00da      	lsls	r2, r3, #3
 800fd7c:	69bb      	ldr	r3, [r7, #24]
 800fd7e:	4413      	add	r3, r2
 800fd80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fd84:	617b      	str	r3, [r7, #20]
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	881b      	ldrh	r3, [r3, #0]
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fd90:	b29a      	uxth	r2, r3
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	801a      	strh	r2, [r3, #0]
 800fd96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd9a:	2b3e      	cmp	r3, #62	; 0x3e
 800fd9c:	d921      	bls.n	800fde2 <USB_EPStartXfer+0x46c>
 800fd9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fda2:	095b      	lsrs	r3, r3, #5
 800fda4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdac:	f003 031f 	and.w	r3, r3, #31
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d104      	bne.n	800fdbe <USB_EPStartXfer+0x448>
 800fdb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fdb8:	3b01      	subs	r3, #1
 800fdba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	881b      	ldrh	r3, [r3, #0]
 800fdc2:	b29a      	uxth	r2, r3
 800fdc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fdc8:	b29b      	uxth	r3, r3
 800fdca:	029b      	lsls	r3, r3, #10
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	4313      	orrs	r3, r2
 800fdd0:	b29b      	uxth	r3, r3
 800fdd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fdd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fdda:	b29a      	uxth	r2, r3
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	801a      	strh	r2, [r3, #0]
 800fde0:	e056      	b.n	800fe90 <USB_EPStartXfer+0x51a>
 800fde2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d10a      	bne.n	800fe00 <USB_EPStartXfer+0x48a>
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	881b      	ldrh	r3, [r3, #0]
 800fdee:	b29b      	uxth	r3, r3
 800fdf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fdf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fdf8:	b29a      	uxth	r2, r3
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	801a      	strh	r2, [r3, #0]
 800fdfe:	e047      	b.n	800fe90 <USB_EPStartXfer+0x51a>
 800fe00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe04:	085b      	lsrs	r3, r3, #1
 800fe06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fe0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe0e:	f003 0301 	and.w	r3, r3, #1
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d004      	beq.n	800fe20 <USB_EPStartXfer+0x4aa>
 800fe16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	881b      	ldrh	r3, [r3, #0]
 800fe24:	b29a      	uxth	r2, r3
 800fe26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	029b      	lsls	r3, r3, #10
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	4313      	orrs	r3, r2
 800fe32:	b29a      	uxth	r2, r3
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	801a      	strh	r2, [r3, #0]
 800fe38:	e02a      	b.n	800fe90 <USB_EPStartXfer+0x51a>
 800fe3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	785b      	ldrb	r3, [r3, #1]
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d122      	bne.n	800fe90 <USB_EPStartXfer+0x51a>
 800fe4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	623b      	str	r3, [r7, #32]
 800fe56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	461a      	mov	r2, r3
 800fe68:	6a3b      	ldr	r3, [r7, #32]
 800fe6a:	4413      	add	r3, r2
 800fe6c:	623b      	str	r3, [r7, #32]
 800fe6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	781b      	ldrb	r3, [r3, #0]
 800fe7a:	00da      	lsls	r2, r3, #3
 800fe7c:	6a3b      	ldr	r3, [r7, #32]
 800fe7e:	4413      	add	r3, r2
 800fe80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fe84:	61fb      	str	r3, [r7, #28]
 800fe86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe8a:	b29a      	uxth	r2, r3
 800fe8c:	69fb      	ldr	r3, [r7, #28]
 800fe8e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800fe90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	891b      	ldrh	r3, [r3, #8]
 800fe9c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	6959      	ldr	r1, [r3, #20]
 800feac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800feb6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800feba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800febe:	6800      	ldr	r0, [r0, #0]
 800fec0:	f001 fa65 	bl	801138e <USB_WritePMA>
 800fec4:	e3ee      	b.n	80106a4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800feca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	785b      	ldrb	r3, [r3, #1]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d177      	bne.n	800ffc6 <USB_EPStartXfer+0x650>
 800fed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800feda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	64bb      	str	r3, [r7, #72]	; 0x48
 800fee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fee6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	461a      	mov	r2, r3
 800fef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fef6:	4413      	add	r3, r2
 800fef8:	64bb      	str	r3, [r7, #72]	; 0x48
 800fefa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fefe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	781b      	ldrb	r3, [r3, #0]
 800ff06:	00da      	lsls	r2, r3, #3
 800ff08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff0a:	4413      	add	r3, r2
 800ff0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ff10:	647b      	str	r3, [r7, #68]	; 0x44
 800ff12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff14:	881b      	ldrh	r3, [r3, #0]
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ff1c:	b29a      	uxth	r2, r3
 800ff1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff20:	801a      	strh	r2, [r3, #0]
 800ff22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff26:	2b3e      	cmp	r3, #62	; 0x3e
 800ff28:	d921      	bls.n	800ff6e <USB_EPStartXfer+0x5f8>
 800ff2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff2e:	095b      	lsrs	r3, r3, #5
 800ff30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ff34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff38:	f003 031f 	and.w	r3, r3, #31
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d104      	bne.n	800ff4a <USB_EPStartXfer+0x5d4>
 800ff40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ff44:	3b01      	subs	r3, #1
 800ff46:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ff4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff4c:	881b      	ldrh	r3, [r3, #0]
 800ff4e:	b29a      	uxth	r2, r3
 800ff50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ff54:	b29b      	uxth	r3, r3
 800ff56:	029b      	lsls	r3, r3, #10
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	4313      	orrs	r3, r2
 800ff5c:	b29b      	uxth	r3, r3
 800ff5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff66:	b29a      	uxth	r2, r3
 800ff68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff6a:	801a      	strh	r2, [r3, #0]
 800ff6c:	e056      	b.n	801001c <USB_EPStartXfer+0x6a6>
 800ff6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d10a      	bne.n	800ff8c <USB_EPStartXfer+0x616>
 800ff76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff78:	881b      	ldrh	r3, [r3, #0]
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff84:	b29a      	uxth	r2, r3
 800ff86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff88:	801a      	strh	r2, [r3, #0]
 800ff8a:	e047      	b.n	801001c <USB_EPStartXfer+0x6a6>
 800ff8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff90:	085b      	lsrs	r3, r3, #1
 800ff92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ff96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff9a:	f003 0301 	and.w	r3, r3, #1
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d004      	beq.n	800ffac <USB_EPStartXfer+0x636>
 800ffa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ffa6:	3301      	adds	r3, #1
 800ffa8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ffac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffae:	881b      	ldrh	r3, [r3, #0]
 800ffb0:	b29a      	uxth	r2, r3
 800ffb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	029b      	lsls	r3, r3, #10
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	4313      	orrs	r3, r2
 800ffbe:	b29a      	uxth	r2, r3
 800ffc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffc2:	801a      	strh	r2, [r3, #0]
 800ffc4:	e02a      	b.n	801001c <USB_EPStartXfer+0x6a6>
 800ffc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	785b      	ldrb	r3, [r3, #1]
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d122      	bne.n	801001c <USB_EPStartXfer+0x6a6>
 800ffd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	653b      	str	r3, [r7, #80]	; 0x50
 800ffe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fff0:	b29b      	uxth	r3, r3
 800fff2:	461a      	mov	r2, r3
 800fff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fff6:	4413      	add	r3, r2
 800fff8:	653b      	str	r3, [r7, #80]	; 0x50
 800fffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	781b      	ldrb	r3, [r3, #0]
 8010006:	00da      	lsls	r2, r3, #3
 8010008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801000a:	4413      	add	r3, r2
 801000c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010010:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010016:	b29a      	uxth	r2, r3
 8010018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801001a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801001c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	891b      	ldrh	r3, [r3, #8]
 8010028:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801002c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	6959      	ldr	r1, [r3, #20]
 8010038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801003c:	b29b      	uxth	r3, r3
 801003e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010042:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010046:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801004a:	6800      	ldr	r0, [r0, #0]
 801004c:	f001 f99f 	bl	801138e <USB_WritePMA>
            ep->xfer_buff += len;
 8010050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	695a      	ldr	r2, [r3, #20]
 801005c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010060:	441a      	add	r2, r3
 8010062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801006e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	6a1a      	ldr	r2, [r3, #32]
 801007a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801007e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	691b      	ldr	r3, [r3, #16]
 8010086:	429a      	cmp	r2, r3
 8010088:	d90f      	bls.n	80100aa <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 801008a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801008e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	6a1a      	ldr	r2, [r3, #32]
 8010096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801009a:	1ad2      	subs	r2, r2, r3
 801009c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	621a      	str	r2, [r3, #32]
 80100a8:	e00e      	b.n	80100c8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80100aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	6a1b      	ldr	r3, [r3, #32]
 80100b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80100ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	2200      	movs	r2, #0
 80100c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80100c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	643b      	str	r3, [r7, #64]	; 0x40
 80100d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	785b      	ldrb	r3, [r3, #1]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d177      	bne.n	80101d4 <USB_EPStartXfer+0x85e>
 80100e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80100f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80100fe:	b29b      	uxth	r3, r3
 8010100:	461a      	mov	r2, r3
 8010102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010104:	4413      	add	r3, r2
 8010106:	63bb      	str	r3, [r7, #56]	; 0x38
 8010108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801010c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	781b      	ldrb	r3, [r3, #0]
 8010114:	00da      	lsls	r2, r3, #3
 8010116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010118:	4413      	add	r3, r2
 801011a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801011e:	637b      	str	r3, [r7, #52]	; 0x34
 8010120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010122:	881b      	ldrh	r3, [r3, #0]
 8010124:	b29b      	uxth	r3, r3
 8010126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801012a:	b29a      	uxth	r2, r3
 801012c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801012e:	801a      	strh	r2, [r3, #0]
 8010130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010134:	2b3e      	cmp	r3, #62	; 0x3e
 8010136:	d921      	bls.n	801017c <USB_EPStartXfer+0x806>
 8010138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801013c:	095b      	lsrs	r3, r3, #5
 801013e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010146:	f003 031f 	and.w	r3, r3, #31
 801014a:	2b00      	cmp	r3, #0
 801014c:	d104      	bne.n	8010158 <USB_EPStartXfer+0x7e2>
 801014e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010152:	3b01      	subs	r3, #1
 8010154:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801015a:	881b      	ldrh	r3, [r3, #0]
 801015c:	b29a      	uxth	r2, r3
 801015e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010162:	b29b      	uxth	r3, r3
 8010164:	029b      	lsls	r3, r3, #10
 8010166:	b29b      	uxth	r3, r3
 8010168:	4313      	orrs	r3, r2
 801016a:	b29b      	uxth	r3, r3
 801016c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010174:	b29a      	uxth	r2, r3
 8010176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010178:	801a      	strh	r2, [r3, #0]
 801017a:	e050      	b.n	801021e <USB_EPStartXfer+0x8a8>
 801017c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010180:	2b00      	cmp	r3, #0
 8010182:	d10a      	bne.n	801019a <USB_EPStartXfer+0x824>
 8010184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010186:	881b      	ldrh	r3, [r3, #0]
 8010188:	b29b      	uxth	r3, r3
 801018a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801018e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010192:	b29a      	uxth	r2, r3
 8010194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010196:	801a      	strh	r2, [r3, #0]
 8010198:	e041      	b.n	801021e <USB_EPStartXfer+0x8a8>
 801019a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801019e:	085b      	lsrs	r3, r3, #1
 80101a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80101a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101a8:	f003 0301 	and.w	r3, r3, #1
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d004      	beq.n	80101ba <USB_EPStartXfer+0x844>
 80101b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80101b4:	3301      	adds	r3, #1
 80101b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80101ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101bc:	881b      	ldrh	r3, [r3, #0]
 80101be:	b29a      	uxth	r2, r3
 80101c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	029b      	lsls	r3, r3, #10
 80101c8:	b29b      	uxth	r3, r3
 80101ca:	4313      	orrs	r3, r2
 80101cc:	b29a      	uxth	r2, r3
 80101ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101d0:	801a      	strh	r2, [r3, #0]
 80101d2:	e024      	b.n	801021e <USB_EPStartXfer+0x8a8>
 80101d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	785b      	ldrb	r3, [r3, #1]
 80101e0:	2b01      	cmp	r3, #1
 80101e2:	d11c      	bne.n	801021e <USB_EPStartXfer+0x8a8>
 80101e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80101f2:	b29b      	uxth	r3, r3
 80101f4:	461a      	mov	r2, r3
 80101f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101f8:	4413      	add	r3, r2
 80101fa:	643b      	str	r3, [r7, #64]	; 0x40
 80101fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	781b      	ldrb	r3, [r3, #0]
 8010208:	00da      	lsls	r2, r3, #3
 801020a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801020c:	4413      	add	r3, r2
 801020e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010218:	b29a      	uxth	r2, r3
 801021a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801021c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801021e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	895b      	ldrh	r3, [r3, #10]
 801022a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801022e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	6959      	ldr	r1, [r3, #20]
 801023a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801023e:	b29b      	uxth	r3, r3
 8010240:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010244:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010248:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801024c:	6800      	ldr	r0, [r0, #0]
 801024e:	f001 f89e 	bl	801138e <USB_WritePMA>
 8010252:	e227      	b.n	80106a4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8010254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	6a1b      	ldr	r3, [r3, #32]
 8010260:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8010264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010268:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801026c:	681a      	ldr	r2, [r3, #0]
 801026e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	009b      	lsls	r3, r3, #2
 801027c:	4413      	add	r3, r2
 801027e:	881b      	ldrh	r3, [r3, #0]
 8010280:	b29b      	uxth	r3, r3
 8010282:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8010286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801028a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801028e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010296:	681a      	ldr	r2, [r3, #0]
 8010298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801029c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	009b      	lsls	r3, r3, #2
 80102a6:	441a      	add	r2, r3
 80102a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80102ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80102b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102bc:	b29b      	uxth	r3, r3
 80102be:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80102c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80102da:	b29b      	uxth	r3, r3
 80102dc:	461a      	mov	r2, r3
 80102de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102e0:	4413      	add	r3, r2
 80102e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	781b      	ldrb	r3, [r3, #0]
 80102f0:	00da      	lsls	r2, r3, #3
 80102f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102f4:	4413      	add	r3, r2
 80102f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80102fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80102fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010300:	b29a      	uxth	r2, r3
 8010302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010304:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801030a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	891b      	ldrh	r3, [r3, #8]
 8010312:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801031a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	6959      	ldr	r1, [r3, #20]
 8010322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010326:	b29b      	uxth	r3, r3
 8010328:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801032c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010330:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010334:	6800      	ldr	r0, [r0, #0]
 8010336:	f001 f82a 	bl	801138e <USB_WritePMA>
 801033a:	e1b3      	b.n	80106a4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801033c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	6a1a      	ldr	r2, [r3, #32]
 8010348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801034c:	1ad2      	subs	r2, r2, r3
 801034e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801035a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801035e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	009b      	lsls	r3, r3, #2
 8010372:	4413      	add	r3, r2
 8010374:	881b      	ldrh	r3, [r3, #0]
 8010376:	b29b      	uxth	r3, r3
 8010378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801037c:	2b00      	cmp	r3, #0
 801037e:	f000 80c6 	beq.w	801050e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010386:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	673b      	str	r3, [r7, #112]	; 0x70
 801038e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	785b      	ldrb	r3, [r3, #1]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d177      	bne.n	801048e <USB_EPStartXfer+0xb18>
 801039e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80103aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80103b8:	b29b      	uxth	r3, r3
 80103ba:	461a      	mov	r2, r3
 80103bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80103be:	4413      	add	r3, r2
 80103c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80103c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	00da      	lsls	r2, r3, #3
 80103d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80103d2:	4413      	add	r3, r2
 80103d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80103d8:	667b      	str	r3, [r7, #100]	; 0x64
 80103da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103dc:	881b      	ldrh	r3, [r3, #0]
 80103de:	b29b      	uxth	r3, r3
 80103e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80103e4:	b29a      	uxth	r2, r3
 80103e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103e8:	801a      	strh	r2, [r3, #0]
 80103ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103ee:	2b3e      	cmp	r3, #62	; 0x3e
 80103f0:	d921      	bls.n	8010436 <USB_EPStartXfer+0xac0>
 80103f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103f6:	095b      	lsrs	r3, r3, #5
 80103f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80103fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010400:	f003 031f 	and.w	r3, r3, #31
 8010404:	2b00      	cmp	r3, #0
 8010406:	d104      	bne.n	8010412 <USB_EPStartXfer+0xa9c>
 8010408:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801040c:	3b01      	subs	r3, #1
 801040e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010412:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010414:	881b      	ldrh	r3, [r3, #0]
 8010416:	b29a      	uxth	r2, r3
 8010418:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801041c:	b29b      	uxth	r3, r3
 801041e:	029b      	lsls	r3, r3, #10
 8010420:	b29b      	uxth	r3, r3
 8010422:	4313      	orrs	r3, r2
 8010424:	b29b      	uxth	r3, r3
 8010426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801042a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801042e:	b29a      	uxth	r2, r3
 8010430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010432:	801a      	strh	r2, [r3, #0]
 8010434:	e050      	b.n	80104d8 <USB_EPStartXfer+0xb62>
 8010436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801043a:	2b00      	cmp	r3, #0
 801043c:	d10a      	bne.n	8010454 <USB_EPStartXfer+0xade>
 801043e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010440:	881b      	ldrh	r3, [r3, #0]
 8010442:	b29b      	uxth	r3, r3
 8010444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801044c:	b29a      	uxth	r2, r3
 801044e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010450:	801a      	strh	r2, [r3, #0]
 8010452:	e041      	b.n	80104d8 <USB_EPStartXfer+0xb62>
 8010454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010458:	085b      	lsrs	r3, r3, #1
 801045a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801045e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010462:	f003 0301 	and.w	r3, r3, #1
 8010466:	2b00      	cmp	r3, #0
 8010468:	d004      	beq.n	8010474 <USB_EPStartXfer+0xafe>
 801046a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801046e:	3301      	adds	r3, #1
 8010470:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010476:	881b      	ldrh	r3, [r3, #0]
 8010478:	b29a      	uxth	r2, r3
 801047a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801047e:	b29b      	uxth	r3, r3
 8010480:	029b      	lsls	r3, r3, #10
 8010482:	b29b      	uxth	r3, r3
 8010484:	4313      	orrs	r3, r2
 8010486:	b29a      	uxth	r2, r3
 8010488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801048a:	801a      	strh	r2, [r3, #0]
 801048c:	e024      	b.n	80104d8 <USB_EPStartXfer+0xb62>
 801048e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	785b      	ldrb	r3, [r3, #1]
 801049a:	2b01      	cmp	r3, #1
 801049c:	d11c      	bne.n	80104d8 <USB_EPStartXfer+0xb62>
 801049e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80104ac:	b29b      	uxth	r3, r3
 80104ae:	461a      	mov	r2, r3
 80104b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80104b2:	4413      	add	r3, r2
 80104b4:	673b      	str	r3, [r7, #112]	; 0x70
 80104b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	781b      	ldrb	r3, [r3, #0]
 80104c2:	00da      	lsls	r2, r3, #3
 80104c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80104c6:	4413      	add	r3, r2
 80104c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80104cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80104ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104d2:	b29a      	uxth	r2, r3
 80104d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80104d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	895b      	ldrh	r3, [r3, #10]
 80104e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80104e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	6959      	ldr	r1, [r3, #20]
 80104f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104f8:	b29b      	uxth	r3, r3
 80104fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80104fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010502:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010506:	6800      	ldr	r0, [r0, #0]
 8010508:	f000 ff41 	bl	801138e <USB_WritePMA>
 801050c:	e0ca      	b.n	80106a4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801050e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	785b      	ldrb	r3, [r3, #1]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d177      	bne.n	801060e <USB_EPStartXfer+0xc98>
 801051e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010522:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	67fb      	str	r3, [r7, #124]	; 0x7c
 801052a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801052e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010538:	b29b      	uxth	r3, r3
 801053a:	461a      	mov	r2, r3
 801053c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801053e:	4413      	add	r3, r2
 8010540:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	00da      	lsls	r2, r3, #3
 8010550:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010552:	4413      	add	r3, r2
 8010554:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010558:	67bb      	str	r3, [r7, #120]	; 0x78
 801055a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801055c:	881b      	ldrh	r3, [r3, #0]
 801055e:	b29b      	uxth	r3, r3
 8010560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010564:	b29a      	uxth	r2, r3
 8010566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010568:	801a      	strh	r2, [r3, #0]
 801056a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801056e:	2b3e      	cmp	r3, #62	; 0x3e
 8010570:	d921      	bls.n	80105b6 <USB_EPStartXfer+0xc40>
 8010572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010576:	095b      	lsrs	r3, r3, #5
 8010578:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801057c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010580:	f003 031f 	and.w	r3, r3, #31
 8010584:	2b00      	cmp	r3, #0
 8010586:	d104      	bne.n	8010592 <USB_EPStartXfer+0xc1c>
 8010588:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801058c:	3b01      	subs	r3, #1
 801058e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010594:	881b      	ldrh	r3, [r3, #0]
 8010596:	b29a      	uxth	r2, r3
 8010598:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801059c:	b29b      	uxth	r3, r3
 801059e:	029b      	lsls	r3, r3, #10
 80105a0:	b29b      	uxth	r3, r3
 80105a2:	4313      	orrs	r3, r2
 80105a4:	b29b      	uxth	r3, r3
 80105a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80105aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80105ae:	b29a      	uxth	r2, r3
 80105b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105b2:	801a      	strh	r2, [r3, #0]
 80105b4:	e05c      	b.n	8010670 <USB_EPStartXfer+0xcfa>
 80105b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d10a      	bne.n	80105d4 <USB_EPStartXfer+0xc5e>
 80105be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105c0:	881b      	ldrh	r3, [r3, #0]
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80105c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105d0:	801a      	strh	r2, [r3, #0]
 80105d2:	e04d      	b.n	8010670 <USB_EPStartXfer+0xcfa>
 80105d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105d8:	085b      	lsrs	r3, r3, #1
 80105da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80105de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105e2:	f003 0301 	and.w	r3, r3, #1
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d004      	beq.n	80105f4 <USB_EPStartXfer+0xc7e>
 80105ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80105ee:	3301      	adds	r3, #1
 80105f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80105f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105f6:	881b      	ldrh	r3, [r3, #0]
 80105f8:	b29a      	uxth	r2, r3
 80105fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80105fe:	b29b      	uxth	r3, r3
 8010600:	029b      	lsls	r3, r3, #10
 8010602:	b29b      	uxth	r3, r3
 8010604:	4313      	orrs	r3, r2
 8010606:	b29a      	uxth	r2, r3
 8010608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801060a:	801a      	strh	r2, [r3, #0]
 801060c:	e030      	b.n	8010670 <USB_EPStartXfer+0xcfa>
 801060e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	785b      	ldrb	r3, [r3, #1]
 801061a:	2b01      	cmp	r3, #1
 801061c:	d128      	bne.n	8010670 <USB_EPStartXfer+0xcfa>
 801061e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010622:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801062c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801063a:	b29b      	uxth	r3, r3
 801063c:	461a      	mov	r2, r3
 801063e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010642:	4413      	add	r3, r2
 8010644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801064c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	781b      	ldrb	r3, [r3, #0]
 8010654:	00da      	lsls	r2, r3, #3
 8010656:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801065a:	4413      	add	r3, r2
 801065c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010668:	b29a      	uxth	r2, r3
 801066a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801066e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	891b      	ldrh	r3, [r3, #8]
 801067c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	6959      	ldr	r1, [r3, #20]
 801068c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010690:	b29b      	uxth	r3, r3
 8010692:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010696:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801069a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801069e:	6800      	ldr	r0, [r0, #0]
 80106a0:	f000 fe75 	bl	801138e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80106a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106ac:	681a      	ldr	r2, [r3, #0]
 80106ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	009b      	lsls	r3, r3, #2
 80106bc:	4413      	add	r3, r2
 80106be:	881b      	ldrh	r3, [r3, #0]
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80106c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106ca:	817b      	strh	r3, [r7, #10]
 80106cc:	897b      	ldrh	r3, [r7, #10]
 80106ce:	f083 0310 	eor.w	r3, r3, #16
 80106d2:	817b      	strh	r3, [r7, #10]
 80106d4:	897b      	ldrh	r3, [r7, #10]
 80106d6:	f083 0320 	eor.w	r3, r3, #32
 80106da:	817b      	strh	r3, [r7, #10]
 80106dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106e4:	681a      	ldr	r2, [r3, #0]
 80106e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	781b      	ldrb	r3, [r3, #0]
 80106f2:	009b      	lsls	r3, r3, #2
 80106f4:	441a      	add	r2, r3
 80106f6:	897b      	ldrh	r3, [r7, #10]
 80106f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80106fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010708:	b29b      	uxth	r3, r3
 801070a:	8013      	strh	r3, [r2, #0]
 801070c:	f000 bcde 	b.w	80110cc <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8010710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	7b1b      	ldrb	r3, [r3, #12]
 801071c:	2b00      	cmp	r3, #0
 801071e:	f040 80bb 	bne.w	8010898 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8010722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	699a      	ldr	r2, [r3, #24]
 801072e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	691b      	ldr	r3, [r3, #16]
 801073a:	429a      	cmp	r2, r3
 801073c:	d917      	bls.n	801076e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 801073e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	691b      	ldr	r3, [r3, #16]
 801074a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 801074e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	699a      	ldr	r2, [r3, #24]
 801075a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801075e:	1ad2      	subs	r2, r2, r3
 8010760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	619a      	str	r2, [r3, #24]
 801076c:	e00e      	b.n	801078c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 801076e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	699b      	ldr	r3, [r3, #24]
 801077a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 801077e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	2200      	movs	r2, #0
 801078a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801078c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801079a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801079e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80107a8:	b29b      	uxth	r3, r3
 80107aa:	461a      	mov	r2, r3
 80107ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107b0:	4413      	add	r3, r2
 80107b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80107b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	781b      	ldrb	r3, [r3, #0]
 80107c2:	00da      	lsls	r2, r3, #3
 80107c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107c8:	4413      	add	r3, r2
 80107ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80107ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80107d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107d6:	881b      	ldrh	r3, [r3, #0]
 80107d8:	b29b      	uxth	r3, r3
 80107da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80107de:	b29a      	uxth	r2, r3
 80107e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107e4:	801a      	strh	r2, [r3, #0]
 80107e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107ea:	2b3e      	cmp	r3, #62	; 0x3e
 80107ec:	d924      	bls.n	8010838 <USB_EPStartXfer+0xec2>
 80107ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107f2:	095b      	lsrs	r3, r3, #5
 80107f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80107f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107fc:	f003 031f 	and.w	r3, r3, #31
 8010800:	2b00      	cmp	r3, #0
 8010802:	d104      	bne.n	801080e <USB_EPStartXfer+0xe98>
 8010804:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010808:	3b01      	subs	r3, #1
 801080a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801080e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010812:	881b      	ldrh	r3, [r3, #0]
 8010814:	b29a      	uxth	r2, r3
 8010816:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801081a:	b29b      	uxth	r3, r3
 801081c:	029b      	lsls	r3, r3, #10
 801081e:	b29b      	uxth	r3, r3
 8010820:	4313      	orrs	r3, r2
 8010822:	b29b      	uxth	r3, r3
 8010824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801082c:	b29a      	uxth	r2, r3
 801082e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010832:	801a      	strh	r2, [r3, #0]
 8010834:	f000 bc10 	b.w	8011058 <USB_EPStartXfer+0x16e2>
 8010838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801083c:	2b00      	cmp	r3, #0
 801083e:	d10c      	bne.n	801085a <USB_EPStartXfer+0xee4>
 8010840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010844:	881b      	ldrh	r3, [r3, #0]
 8010846:	b29b      	uxth	r3, r3
 8010848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801084c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010850:	b29a      	uxth	r2, r3
 8010852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010856:	801a      	strh	r2, [r3, #0]
 8010858:	e3fe      	b.n	8011058 <USB_EPStartXfer+0x16e2>
 801085a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801085e:	085b      	lsrs	r3, r3, #1
 8010860:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010868:	f003 0301 	and.w	r3, r3, #1
 801086c:	2b00      	cmp	r3, #0
 801086e:	d004      	beq.n	801087a <USB_EPStartXfer+0xf04>
 8010870:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010874:	3301      	adds	r3, #1
 8010876:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801087a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801087e:	881b      	ldrh	r3, [r3, #0]
 8010880:	b29a      	uxth	r2, r3
 8010882:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010886:	b29b      	uxth	r3, r3
 8010888:	029b      	lsls	r3, r3, #10
 801088a:	b29b      	uxth	r3, r3
 801088c:	4313      	orrs	r3, r2
 801088e:	b29a      	uxth	r2, r3
 8010890:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010894:	801a      	strh	r2, [r3, #0]
 8010896:	e3df      	b.n	8011058 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8010898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801089c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	78db      	ldrb	r3, [r3, #3]
 80108a4:	2b02      	cmp	r3, #2
 80108a6:	f040 8218 	bne.w	8010cda <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80108aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	785b      	ldrb	r3, [r3, #1]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	f040 809d 	bne.w	80109f6 <USB_EPStartXfer+0x1080>
 80108bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80108ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80108d8:	b29b      	uxth	r3, r3
 80108da:	461a      	mov	r2, r3
 80108dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80108e0:	4413      	add	r3, r2
 80108e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80108e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	00da      	lsls	r2, r3, #3
 80108f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80108f8:	4413      	add	r3, r2
 80108fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80108fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010902:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010906:	881b      	ldrh	r3, [r3, #0]
 8010908:	b29b      	uxth	r3, r3
 801090a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801090e:	b29a      	uxth	r2, r3
 8010910:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010914:	801a      	strh	r2, [r3, #0]
 8010916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801091a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	691b      	ldr	r3, [r3, #16]
 8010922:	2b3e      	cmp	r3, #62	; 0x3e
 8010924:	d92b      	bls.n	801097e <USB_EPStartXfer+0x1008>
 8010926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801092a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	691b      	ldr	r3, [r3, #16]
 8010932:	095b      	lsrs	r3, r3, #5
 8010934:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801093c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	691b      	ldr	r3, [r3, #16]
 8010944:	f003 031f 	and.w	r3, r3, #31
 8010948:	2b00      	cmp	r3, #0
 801094a:	d104      	bne.n	8010956 <USB_EPStartXfer+0xfe0>
 801094c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010950:	3b01      	subs	r3, #1
 8010952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010956:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801095a:	881b      	ldrh	r3, [r3, #0]
 801095c:	b29a      	uxth	r2, r3
 801095e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010962:	b29b      	uxth	r3, r3
 8010964:	029b      	lsls	r3, r3, #10
 8010966:	b29b      	uxth	r3, r3
 8010968:	4313      	orrs	r3, r2
 801096a:	b29b      	uxth	r3, r3
 801096c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010974:	b29a      	uxth	r2, r3
 8010976:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801097a:	801a      	strh	r2, [r3, #0]
 801097c:	e070      	b.n	8010a60 <USB_EPStartXfer+0x10ea>
 801097e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	691b      	ldr	r3, [r3, #16]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d10c      	bne.n	80109a8 <USB_EPStartXfer+0x1032>
 801098e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010992:	881b      	ldrh	r3, [r3, #0]
 8010994:	b29b      	uxth	r3, r3
 8010996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801099a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801099e:	b29a      	uxth	r2, r3
 80109a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80109a4:	801a      	strh	r2, [r3, #0]
 80109a6:	e05b      	b.n	8010a60 <USB_EPStartXfer+0x10ea>
 80109a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	691b      	ldr	r3, [r3, #16]
 80109b4:	085b      	lsrs	r3, r3, #1
 80109b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80109ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	691b      	ldr	r3, [r3, #16]
 80109c6:	f003 0301 	and.w	r3, r3, #1
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d004      	beq.n	80109d8 <USB_EPStartXfer+0x1062>
 80109ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109d2:	3301      	adds	r3, #1
 80109d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80109d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80109dc:	881b      	ldrh	r3, [r3, #0]
 80109de:	b29a      	uxth	r2, r3
 80109e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109e4:	b29b      	uxth	r3, r3
 80109e6:	029b      	lsls	r3, r3, #10
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	4313      	orrs	r3, r2
 80109ec:	b29a      	uxth	r2, r3
 80109ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80109f2:	801a      	strh	r2, [r3, #0]
 80109f4:	e034      	b.n	8010a60 <USB_EPStartXfer+0x10ea>
 80109f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	785b      	ldrb	r3, [r3, #1]
 8010a02:	2b01      	cmp	r3, #1
 8010a04:	d12c      	bne.n	8010a60 <USB_EPStartXfer+0x10ea>
 8010a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010a22:	b29b      	uxth	r3, r3
 8010a24:	461a      	mov	r2, r3
 8010a26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010a2a:	4413      	add	r3, r2
 8010a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	781b      	ldrb	r3, [r3, #0]
 8010a3c:	00da      	lsls	r2, r3, #3
 8010a3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010a42:	4413      	add	r3, r2
 8010a44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010a48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	691b      	ldr	r3, [r3, #16]
 8010a58:	b29a      	uxth	r2, r3
 8010a5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010a5e:	801a      	strh	r2, [r3, #0]
 8010a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	785b      	ldrb	r3, [r3, #1]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	f040 809d 	bne.w	8010bba <USB_EPStartXfer+0x1244>
 8010a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010a9c:	b29b      	uxth	r3, r3
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010aa4:	4413      	add	r3, r2
 8010aa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	781b      	ldrb	r3, [r3, #0]
 8010ab6:	00da      	lsls	r2, r3, #3
 8010ab8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010abc:	4413      	add	r3, r2
 8010abe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010ac2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010ac6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010aca:	881b      	ldrh	r3, [r3, #0]
 8010acc:	b29b      	uxth	r3, r3
 8010ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010ad2:	b29a      	uxth	r2, r3
 8010ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ad8:	801a      	strh	r2, [r3, #0]
 8010ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	691b      	ldr	r3, [r3, #16]
 8010ae6:	2b3e      	cmp	r3, #62	; 0x3e
 8010ae8:	d92b      	bls.n	8010b42 <USB_EPStartXfer+0x11cc>
 8010aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	691b      	ldr	r3, [r3, #16]
 8010af6:	095b      	lsrs	r3, r3, #5
 8010af8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	691b      	ldr	r3, [r3, #16]
 8010b08:	f003 031f 	and.w	r3, r3, #31
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d104      	bne.n	8010b1a <USB_EPStartXfer+0x11a4>
 8010b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b14:	3b01      	subs	r3, #1
 8010b16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010b1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b1e:	881b      	ldrh	r3, [r3, #0]
 8010b20:	b29a      	uxth	r2, r3
 8010b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b26:	b29b      	uxth	r3, r3
 8010b28:	029b      	lsls	r3, r3, #10
 8010b2a:	b29b      	uxth	r3, r3
 8010b2c:	4313      	orrs	r3, r2
 8010b2e:	b29b      	uxth	r3, r3
 8010b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010b38:	b29a      	uxth	r2, r3
 8010b3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b3e:	801a      	strh	r2, [r3, #0]
 8010b40:	e069      	b.n	8010c16 <USB_EPStartXfer+0x12a0>
 8010b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	691b      	ldr	r3, [r3, #16]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d10c      	bne.n	8010b6c <USB_EPStartXfer+0x11f6>
 8010b52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b56:	881b      	ldrh	r3, [r3, #0]
 8010b58:	b29b      	uxth	r3, r3
 8010b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010b62:	b29a      	uxth	r2, r3
 8010b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b68:	801a      	strh	r2, [r3, #0]
 8010b6a:	e054      	b.n	8010c16 <USB_EPStartXfer+0x12a0>
 8010b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	691b      	ldr	r3, [r3, #16]
 8010b78:	085b      	lsrs	r3, r3, #1
 8010b7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	691b      	ldr	r3, [r3, #16]
 8010b8a:	f003 0301 	and.w	r3, r3, #1
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d004      	beq.n	8010b9c <USB_EPStartXfer+0x1226>
 8010b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b96:	3301      	adds	r3, #1
 8010b98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ba0:	881b      	ldrh	r3, [r3, #0]
 8010ba2:	b29a      	uxth	r2, r3
 8010ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	029b      	lsls	r3, r3, #10
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	4313      	orrs	r3, r2
 8010bb0:	b29a      	uxth	r2, r3
 8010bb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010bb6:	801a      	strh	r2, [r3, #0]
 8010bb8:	e02d      	b.n	8010c16 <USB_EPStartXfer+0x12a0>
 8010bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	785b      	ldrb	r3, [r3, #1]
 8010bc6:	2b01      	cmp	r3, #1
 8010bc8:	d125      	bne.n	8010c16 <USB_EPStartXfer+0x12a0>
 8010bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010bd8:	b29b      	uxth	r3, r3
 8010bda:	461a      	mov	r2, r3
 8010bdc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010be0:	4413      	add	r3, r2
 8010be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	00da      	lsls	r2, r3, #3
 8010bf4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010bf8:	4413      	add	r3, r2
 8010bfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	691b      	ldr	r3, [r3, #16]
 8010c0e:	b29a      	uxth	r2, r3
 8010c10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010c14:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8010c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	69db      	ldr	r3, [r3, #28]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	f000 8218 	beq.w	8011058 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8010c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c30:	681a      	ldr	r2, [r3, #0]
 8010c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	781b      	ldrb	r3, [r3, #0]
 8010c3e:	009b      	lsls	r3, r3, #2
 8010c40:	4413      	add	r3, r2
 8010c42:	881b      	ldrh	r3, [r3, #0]
 8010c44:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010c48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d005      	beq.n	8010c60 <USB_EPStartXfer+0x12ea>
 8010c54:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d10d      	bne.n	8010c7c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010c60:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	f040 81f5 	bne.w	8011058 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010c6e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	f040 81ee 	bne.w	8011058 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8010c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c84:	681a      	ldr	r2, [r3, #0]
 8010c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	781b      	ldrb	r3, [r3, #0]
 8010c92:	009b      	lsls	r3, r3, #2
 8010c94:	4413      	add	r3, r2
 8010c96:	881b      	ldrh	r3, [r3, #0]
 8010c98:	b29b      	uxth	r3, r3
 8010c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ca2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8010ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010caa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010cae:	681a      	ldr	r2, [r3, #0]
 8010cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	781b      	ldrb	r3, [r3, #0]
 8010cbc:	009b      	lsls	r3, r3, #2
 8010cbe:	441a      	add	r2, r3
 8010cc0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8010cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010cd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010cd4:	b29b      	uxth	r3, r3
 8010cd6:	8013      	strh	r3, [r2, #0]
 8010cd8:	e1be      	b.n	8011058 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8010cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	78db      	ldrb	r3, [r3, #3]
 8010ce6:	2b01      	cmp	r3, #1
 8010ce8:	f040 81b4 	bne.w	8011054 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8010cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	699a      	ldr	r2, [r3, #24]
 8010cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	691b      	ldr	r3, [r3, #16]
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d917      	bls.n	8010d38 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8010d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	691b      	ldr	r3, [r3, #16]
 8010d14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8010d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	699a      	ldr	r2, [r3, #24]
 8010d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d28:	1ad2      	subs	r2, r2, r3
 8010d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	619a      	str	r2, [r3, #24]
 8010d36:	e00e      	b.n	8010d56 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8010d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	699b      	ldr	r3, [r3, #24]
 8010d44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8010d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	2200      	movs	r2, #0
 8010d54:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8010d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	785b      	ldrb	r3, [r3, #1]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	f040 8085 	bne.w	8010e72 <USB_EPStartXfer+0x14fc>
 8010d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010d84:	b29b      	uxth	r3, r3
 8010d86:	461a      	mov	r2, r3
 8010d88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010d8c:	4413      	add	r3, r2
 8010d8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	781b      	ldrb	r3, [r3, #0]
 8010d9e:	00da      	lsls	r2, r3, #3
 8010da0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010da4:	4413      	add	r3, r2
 8010da6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010daa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010db2:	881b      	ldrh	r3, [r3, #0]
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010dba:	b29a      	uxth	r2, r3
 8010dbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010dc0:	801a      	strh	r2, [r3, #0]
 8010dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010dc6:	2b3e      	cmp	r3, #62	; 0x3e
 8010dc8:	d923      	bls.n	8010e12 <USB_EPStartXfer+0x149c>
 8010dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010dce:	095b      	lsrs	r3, r3, #5
 8010dd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010dd8:	f003 031f 	and.w	r3, r3, #31
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d104      	bne.n	8010dea <USB_EPStartXfer+0x1474>
 8010de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010de4:	3b01      	subs	r3, #1
 8010de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010dee:	881b      	ldrh	r3, [r3, #0]
 8010df0:	b29a      	uxth	r2, r3
 8010df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010df6:	b29b      	uxth	r3, r3
 8010df8:	029b      	lsls	r3, r3, #10
 8010dfa:	b29b      	uxth	r3, r3
 8010dfc:	4313      	orrs	r3, r2
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e08:	b29a      	uxth	r2, r3
 8010e0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010e0e:	801a      	strh	r2, [r3, #0]
 8010e10:	e060      	b.n	8010ed4 <USB_EPStartXfer+0x155e>
 8010e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d10c      	bne.n	8010e34 <USB_EPStartXfer+0x14be>
 8010e1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010e1e:	881b      	ldrh	r3, [r3, #0]
 8010e20:	b29b      	uxth	r3, r3
 8010e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e2a:	b29a      	uxth	r2, r3
 8010e2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010e30:	801a      	strh	r2, [r3, #0]
 8010e32:	e04f      	b.n	8010ed4 <USB_EPStartXfer+0x155e>
 8010e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e38:	085b      	lsrs	r3, r3, #1
 8010e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e42:	f003 0301 	and.w	r3, r3, #1
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d004      	beq.n	8010e54 <USB_EPStartXfer+0x14de>
 8010e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e4e:	3301      	adds	r3, #1
 8010e50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010e54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010e58:	881b      	ldrh	r3, [r3, #0]
 8010e5a:	b29a      	uxth	r2, r3
 8010e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e60:	b29b      	uxth	r3, r3
 8010e62:	029b      	lsls	r3, r3, #10
 8010e64:	b29b      	uxth	r3, r3
 8010e66:	4313      	orrs	r3, r2
 8010e68:	b29a      	uxth	r2, r3
 8010e6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010e6e:	801a      	strh	r2, [r3, #0]
 8010e70:	e030      	b.n	8010ed4 <USB_EPStartXfer+0x155e>
 8010e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	785b      	ldrb	r3, [r3, #1]
 8010e7e:	2b01      	cmp	r3, #1
 8010e80:	d128      	bne.n	8010ed4 <USB_EPStartXfer+0x155e>
 8010e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e9e:	b29b      	uxth	r3, r3
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010ea6:	4413      	add	r3, r2
 8010ea8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	00da      	lsls	r2, r3, #3
 8010eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010ebe:	4413      	add	r3, r2
 8010ec0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ecc:	b29a      	uxth	r2, r3
 8010ece:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010ed2:	801a      	strh	r2, [r3, #0]
 8010ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ed8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	785b      	ldrb	r3, [r3, #1]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	f040 8085 	bne.w	8010ffe <USB_EPStartXfer+0x1688>
 8010ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ef8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f10:	b29b      	uxth	r3, r3
 8010f12:	461a      	mov	r2, r3
 8010f14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010f18:	4413      	add	r3, r2
 8010f1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	781b      	ldrb	r3, [r3, #0]
 8010f2a:	00da      	lsls	r2, r3, #3
 8010f2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010f30:	4413      	add	r3, r2
 8010f32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010f36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010f3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010f3e:	881b      	ldrh	r3, [r3, #0]
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010f46:	b29a      	uxth	r2, r3
 8010f48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010f4c:	801a      	strh	r2, [r3, #0]
 8010f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f52:	2b3e      	cmp	r3, #62	; 0x3e
 8010f54:	d923      	bls.n	8010f9e <USB_EPStartXfer+0x1628>
 8010f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f5a:	095b      	lsrs	r3, r3, #5
 8010f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f64:	f003 031f 	and.w	r3, r3, #31
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d104      	bne.n	8010f76 <USB_EPStartXfer+0x1600>
 8010f6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010f70:	3b01      	subs	r3, #1
 8010f72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010f7a:	881b      	ldrh	r3, [r3, #0]
 8010f7c:	b29a      	uxth	r2, r3
 8010f7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010f82:	b29b      	uxth	r3, r3
 8010f84:	029b      	lsls	r3, r3, #10
 8010f86:	b29b      	uxth	r3, r3
 8010f88:	4313      	orrs	r3, r2
 8010f8a:	b29b      	uxth	r3, r3
 8010f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f94:	b29a      	uxth	r2, r3
 8010f96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010f9a:	801a      	strh	r2, [r3, #0]
 8010f9c:	e05c      	b.n	8011058 <USB_EPStartXfer+0x16e2>
 8010f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d10c      	bne.n	8010fc0 <USB_EPStartXfer+0x164a>
 8010fa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010faa:	881b      	ldrh	r3, [r3, #0]
 8010fac:	b29b      	uxth	r3, r3
 8010fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010fb6:	b29a      	uxth	r2, r3
 8010fb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010fbc:	801a      	strh	r2, [r3, #0]
 8010fbe:	e04b      	b.n	8011058 <USB_EPStartXfer+0x16e2>
 8010fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fc4:	085b      	lsrs	r3, r3, #1
 8010fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fce:	f003 0301 	and.w	r3, r3, #1
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d004      	beq.n	8010fe0 <USB_EPStartXfer+0x166a>
 8010fd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010fda:	3301      	adds	r3, #1
 8010fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010fe0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010fe4:	881b      	ldrh	r3, [r3, #0]
 8010fe6:	b29a      	uxth	r2, r3
 8010fe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	029b      	lsls	r3, r3, #10
 8010ff0:	b29b      	uxth	r3, r3
 8010ff2:	4313      	orrs	r3, r2
 8010ff4:	b29a      	uxth	r2, r3
 8010ff6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010ffa:	801a      	strh	r2, [r3, #0]
 8010ffc:	e02c      	b.n	8011058 <USB_EPStartXfer+0x16e2>
 8010ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	785b      	ldrb	r3, [r3, #1]
 801100a:	2b01      	cmp	r3, #1
 801100c:	d124      	bne.n	8011058 <USB_EPStartXfer+0x16e2>
 801100e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801101c:	b29b      	uxth	r3, r3
 801101e:	461a      	mov	r2, r3
 8011020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011024:	4413      	add	r3, r2
 8011026:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801102a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801102e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	781b      	ldrb	r3, [r3, #0]
 8011036:	00da      	lsls	r2, r3, #3
 8011038:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801103c:	4413      	add	r3, r2
 801103e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011042:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801104a:	b29a      	uxth	r2, r3
 801104c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011050:	801a      	strh	r2, [r3, #0]
 8011052:	e001      	b.n	8011058 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8011054:	2301      	movs	r3, #1
 8011056:	e03a      	b.n	80110ce <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801105c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011060:	681a      	ldr	r2, [r3, #0]
 8011062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	781b      	ldrb	r3, [r3, #0]
 801106e:	009b      	lsls	r3, r3, #2
 8011070:	4413      	add	r3, r2
 8011072:	881b      	ldrh	r3, [r3, #0]
 8011074:	b29b      	uxth	r3, r3
 8011076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801107a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801107e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011082:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011086:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801108a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801108e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011092:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011096:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801109a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801109e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110a2:	681a      	ldr	r2, [r3, #0]
 80110a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	009b      	lsls	r3, r3, #2
 80110b2:	441a      	add	r2, r3
 80110b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80110b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80110bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80110c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80110c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110c8:	b29b      	uxth	r3, r3
 80110ca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80110cc:	2300      	movs	r3, #0
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}

080110d8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80110d8:	b480      	push	{r7}
 80110da:	b085      	sub	sp, #20
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	785b      	ldrb	r3, [r3, #1]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d020      	beq.n	801112c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80110ea:	687a      	ldr	r2, [r7, #4]
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	781b      	ldrb	r3, [r3, #0]
 80110f0:	009b      	lsls	r3, r3, #2
 80110f2:	4413      	add	r3, r2
 80110f4:	881b      	ldrh	r3, [r3, #0]
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80110fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011100:	81bb      	strh	r3, [r7, #12]
 8011102:	89bb      	ldrh	r3, [r7, #12]
 8011104:	f083 0310 	eor.w	r3, r3, #16
 8011108:	81bb      	strh	r3, [r7, #12]
 801110a:	687a      	ldr	r2, [r7, #4]
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	781b      	ldrb	r3, [r3, #0]
 8011110:	009b      	lsls	r3, r3, #2
 8011112:	441a      	add	r2, r3
 8011114:	89bb      	ldrh	r3, [r7, #12]
 8011116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801111a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801111e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011126:	b29b      	uxth	r3, r3
 8011128:	8013      	strh	r3, [r2, #0]
 801112a:	e01f      	b.n	801116c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801112c:	687a      	ldr	r2, [r7, #4]
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	009b      	lsls	r3, r3, #2
 8011134:	4413      	add	r3, r2
 8011136:	881b      	ldrh	r3, [r3, #0]
 8011138:	b29b      	uxth	r3, r3
 801113a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801113e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011142:	81fb      	strh	r3, [r7, #14]
 8011144:	89fb      	ldrh	r3, [r7, #14]
 8011146:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801114a:	81fb      	strh	r3, [r7, #14]
 801114c:	687a      	ldr	r2, [r7, #4]
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	009b      	lsls	r3, r3, #2
 8011154:	441a      	add	r2, r3
 8011156:	89fb      	ldrh	r3, [r7, #14]
 8011158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801115c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011168:	b29b      	uxth	r3, r3
 801116a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801116c:	2300      	movs	r3, #0
}
 801116e:	4618      	mov	r0, r3
 8011170:	3714      	adds	r7, #20
 8011172:	46bd      	mov	sp, r7
 8011174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011178:	4770      	bx	lr

0801117a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801117a:	b480      	push	{r7}
 801117c:	b087      	sub	sp, #28
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
 8011182:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	7b1b      	ldrb	r3, [r3, #12]
 8011188:	2b00      	cmp	r3, #0
 801118a:	f040 809d 	bne.w	80112c8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	785b      	ldrb	r3, [r3, #1]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d04c      	beq.n	8011230 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	781b      	ldrb	r3, [r3, #0]
 801119c:	009b      	lsls	r3, r3, #2
 801119e:	4413      	add	r3, r2
 80111a0:	881b      	ldrh	r3, [r3, #0]
 80111a2:	823b      	strh	r3, [r7, #16]
 80111a4:	8a3b      	ldrh	r3, [r7, #16]
 80111a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d01b      	beq.n	80111e6 <USB_EPClearStall+0x6c>
 80111ae:	687a      	ldr	r2, [r7, #4]
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	009b      	lsls	r3, r3, #2
 80111b6:	4413      	add	r3, r2
 80111b8:	881b      	ldrh	r3, [r3, #0]
 80111ba:	b29b      	uxth	r3, r3
 80111bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80111c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80111c4:	81fb      	strh	r3, [r7, #14]
 80111c6:	687a      	ldr	r2, [r7, #4]
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	009b      	lsls	r3, r3, #2
 80111ce:	441a      	add	r2, r3
 80111d0:	89fb      	ldrh	r3, [r7, #14]
 80111d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80111d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80111da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80111de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80111e2:	b29b      	uxth	r3, r3
 80111e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	78db      	ldrb	r3, [r3, #3]
 80111ea:	2b01      	cmp	r3, #1
 80111ec:	d06c      	beq.n	80112c8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80111ee:	687a      	ldr	r2, [r7, #4]
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	781b      	ldrb	r3, [r3, #0]
 80111f4:	009b      	lsls	r3, r3, #2
 80111f6:	4413      	add	r3, r2
 80111f8:	881b      	ldrh	r3, [r3, #0]
 80111fa:	b29b      	uxth	r3, r3
 80111fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011204:	81bb      	strh	r3, [r7, #12]
 8011206:	89bb      	ldrh	r3, [r7, #12]
 8011208:	f083 0320 	eor.w	r3, r3, #32
 801120c:	81bb      	strh	r3, [r7, #12]
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	009b      	lsls	r3, r3, #2
 8011216:	441a      	add	r2, r3
 8011218:	89bb      	ldrh	r3, [r7, #12]
 801121a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801121e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801122a:	b29b      	uxth	r3, r3
 801122c:	8013      	strh	r3, [r2, #0]
 801122e:	e04b      	b.n	80112c8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011230:	687a      	ldr	r2, [r7, #4]
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	781b      	ldrb	r3, [r3, #0]
 8011236:	009b      	lsls	r3, r3, #2
 8011238:	4413      	add	r3, r2
 801123a:	881b      	ldrh	r3, [r3, #0]
 801123c:	82fb      	strh	r3, [r7, #22]
 801123e:	8afb      	ldrh	r3, [r7, #22]
 8011240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011244:	2b00      	cmp	r3, #0
 8011246:	d01b      	beq.n	8011280 <USB_EPClearStall+0x106>
 8011248:	687a      	ldr	r2, [r7, #4]
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	781b      	ldrb	r3, [r3, #0]
 801124e:	009b      	lsls	r3, r3, #2
 8011250:	4413      	add	r3, r2
 8011252:	881b      	ldrh	r3, [r3, #0]
 8011254:	b29b      	uxth	r3, r3
 8011256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801125a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801125e:	82bb      	strh	r3, [r7, #20]
 8011260:	687a      	ldr	r2, [r7, #4]
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	009b      	lsls	r3, r3, #2
 8011268:	441a      	add	r2, r3
 801126a:	8abb      	ldrh	r3, [r7, #20]
 801126c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011274:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801127c:	b29b      	uxth	r3, r3
 801127e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011280:	687a      	ldr	r2, [r7, #4]
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	781b      	ldrb	r3, [r3, #0]
 8011286:	009b      	lsls	r3, r3, #2
 8011288:	4413      	add	r3, r2
 801128a:	881b      	ldrh	r3, [r3, #0]
 801128c:	b29b      	uxth	r3, r3
 801128e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011296:	827b      	strh	r3, [r7, #18]
 8011298:	8a7b      	ldrh	r3, [r7, #18]
 801129a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801129e:	827b      	strh	r3, [r7, #18]
 80112a0:	8a7b      	ldrh	r3, [r7, #18]
 80112a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80112a6:	827b      	strh	r3, [r7, #18]
 80112a8:	687a      	ldr	r2, [r7, #4]
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	009b      	lsls	r3, r3, #2
 80112b0:	441a      	add	r2, r3
 80112b2:	8a7b      	ldrh	r3, [r7, #18]
 80112b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80112b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80112bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80112c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112c4:	b29b      	uxth	r3, r3
 80112c6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80112c8:	2300      	movs	r3, #0
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	371c      	adds	r7, #28
 80112ce:	46bd      	mov	sp, r7
 80112d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d4:	4770      	bx	lr

080112d6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80112d6:	b480      	push	{r7}
 80112d8:	b083      	sub	sp, #12
 80112da:	af00      	add	r7, sp, #0
 80112dc:	6078      	str	r0, [r7, #4]
 80112de:	460b      	mov	r3, r1
 80112e0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80112e2:	78fb      	ldrb	r3, [r7, #3]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d103      	bne.n	80112f0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2280      	movs	r2, #128	; 0x80
 80112ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80112f0:	2300      	movs	r3, #0
}
 80112f2:	4618      	mov	r0, r3
 80112f4:	370c      	adds	r7, #12
 80112f6:	46bd      	mov	sp, r7
 80112f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fc:	4770      	bx	lr

080112fe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80112fe:	b480      	push	{r7}
 8011300:	b083      	sub	sp, #12
 8011302:	af00      	add	r7, sp, #0
 8011304:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801130c:	b29b      	uxth	r3, r3
 801130e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011316:	b29a      	uxth	r2, r3
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 801131e:	2300      	movs	r3, #0
}
 8011320:	4618      	mov	r0, r3
 8011322:	370c      	adds	r7, #12
 8011324:	46bd      	mov	sp, r7
 8011326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132a:	4770      	bx	lr

0801132c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 801132c:	b480      	push	{r7}
 801132e:	b083      	sub	sp, #12
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801133a:	b29b      	uxth	r3, r3
 801133c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011340:	b29a      	uxth	r2, r3
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8011348:	2300      	movs	r3, #0
}
 801134a:	4618      	mov	r0, r3
 801134c:	370c      	adds	r7, #12
 801134e:	46bd      	mov	sp, r7
 8011350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011354:	4770      	bx	lr

08011356 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8011356:	b480      	push	{r7}
 8011358:	b085      	sub	sp, #20
 801135a:	af00      	add	r7, sp, #0
 801135c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011364:	b29b      	uxth	r3, r3
 8011366:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8011368:	68fb      	ldr	r3, [r7, #12]
}
 801136a:	4618      	mov	r0, r3
 801136c:	3714      	adds	r7, #20
 801136e:	46bd      	mov	sp, r7
 8011370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011374:	4770      	bx	lr

08011376 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8011376:	b480      	push	{r7}
 8011378:	b083      	sub	sp, #12
 801137a:	af00      	add	r7, sp, #0
 801137c:	6078      	str	r0, [r7, #4]
 801137e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8011380:	2300      	movs	r3, #0
}
 8011382:	4618      	mov	r0, r3
 8011384:	370c      	adds	r7, #12
 8011386:	46bd      	mov	sp, r7
 8011388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138c:	4770      	bx	lr

0801138e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801138e:	b480      	push	{r7}
 8011390:	b08b      	sub	sp, #44	; 0x2c
 8011392:	af00      	add	r7, sp, #0
 8011394:	60f8      	str	r0, [r7, #12]
 8011396:	60b9      	str	r1, [r7, #8]
 8011398:	4611      	mov	r1, r2
 801139a:	461a      	mov	r2, r3
 801139c:	460b      	mov	r3, r1
 801139e:	80fb      	strh	r3, [r7, #6]
 80113a0:	4613      	mov	r3, r2
 80113a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80113a4:	88bb      	ldrh	r3, [r7, #4]
 80113a6:	3301      	adds	r3, #1
 80113a8:	085b      	lsrs	r3, r3, #1
 80113aa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80113b4:	88fa      	ldrh	r2, [r7, #6]
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	4413      	add	r3, r2
 80113ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80113be:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80113c0:	69bb      	ldr	r3, [r7, #24]
 80113c2:	627b      	str	r3, [r7, #36]	; 0x24
 80113c4:	e01b      	b.n	80113fe <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80113c6:	69fb      	ldr	r3, [r7, #28]
 80113c8:	781b      	ldrb	r3, [r3, #0]
 80113ca:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80113cc:	69fb      	ldr	r3, [r7, #28]
 80113ce:	3301      	adds	r3, #1
 80113d0:	781b      	ldrb	r3, [r3, #0]
 80113d2:	021b      	lsls	r3, r3, #8
 80113d4:	b21a      	sxth	r2, r3
 80113d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80113da:	4313      	orrs	r3, r2
 80113dc:	b21b      	sxth	r3, r3
 80113de:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80113e0:	6a3b      	ldr	r3, [r7, #32]
 80113e2:	8a7a      	ldrh	r2, [r7, #18]
 80113e4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80113e6:	6a3b      	ldr	r3, [r7, #32]
 80113e8:	3302      	adds	r3, #2
 80113ea:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80113ec:	69fb      	ldr	r3, [r7, #28]
 80113ee:	3301      	adds	r3, #1
 80113f0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80113f2:	69fb      	ldr	r3, [r7, #28]
 80113f4:	3301      	adds	r3, #1
 80113f6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80113f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113fa:	3b01      	subs	r3, #1
 80113fc:	627b      	str	r3, [r7, #36]	; 0x24
 80113fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011400:	2b00      	cmp	r3, #0
 8011402:	d1e0      	bne.n	80113c6 <USB_WritePMA+0x38>
  }
}
 8011404:	bf00      	nop
 8011406:	bf00      	nop
 8011408:	372c      	adds	r7, #44	; 0x2c
 801140a:	46bd      	mov	sp, r7
 801140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011410:	4770      	bx	lr

08011412 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011412:	b480      	push	{r7}
 8011414:	b08b      	sub	sp, #44	; 0x2c
 8011416:	af00      	add	r7, sp, #0
 8011418:	60f8      	str	r0, [r7, #12]
 801141a:	60b9      	str	r1, [r7, #8]
 801141c:	4611      	mov	r1, r2
 801141e:	461a      	mov	r2, r3
 8011420:	460b      	mov	r3, r1
 8011422:	80fb      	strh	r3, [r7, #6]
 8011424:	4613      	mov	r3, r2
 8011426:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8011428:	88bb      	ldrh	r3, [r7, #4]
 801142a:	085b      	lsrs	r3, r3, #1
 801142c:	b29b      	uxth	r3, r3
 801142e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011438:	88fa      	ldrh	r2, [r7, #6]
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	4413      	add	r3, r2
 801143e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011442:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011444:	69bb      	ldr	r3, [r7, #24]
 8011446:	627b      	str	r3, [r7, #36]	; 0x24
 8011448:	e018      	b.n	801147c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801144a:	6a3b      	ldr	r3, [r7, #32]
 801144c:	881b      	ldrh	r3, [r3, #0]
 801144e:	b29b      	uxth	r3, r3
 8011450:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8011452:	6a3b      	ldr	r3, [r7, #32]
 8011454:	3302      	adds	r3, #2
 8011456:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	b2da      	uxtb	r2, r3
 801145c:	69fb      	ldr	r3, [r7, #28]
 801145e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011460:	69fb      	ldr	r3, [r7, #28]
 8011462:	3301      	adds	r3, #1
 8011464:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8011466:	693b      	ldr	r3, [r7, #16]
 8011468:	0a1b      	lsrs	r3, r3, #8
 801146a:	b2da      	uxtb	r2, r3
 801146c:	69fb      	ldr	r3, [r7, #28]
 801146e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011470:	69fb      	ldr	r3, [r7, #28]
 8011472:	3301      	adds	r3, #1
 8011474:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011478:	3b01      	subs	r3, #1
 801147a:	627b      	str	r3, [r7, #36]	; 0x24
 801147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801147e:	2b00      	cmp	r3, #0
 8011480:	d1e3      	bne.n	801144a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8011482:	88bb      	ldrh	r3, [r7, #4]
 8011484:	f003 0301 	and.w	r3, r3, #1
 8011488:	b29b      	uxth	r3, r3
 801148a:	2b00      	cmp	r3, #0
 801148c:	d007      	beq.n	801149e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 801148e:	6a3b      	ldr	r3, [r7, #32]
 8011490:	881b      	ldrh	r3, [r3, #0]
 8011492:	b29b      	uxth	r3, r3
 8011494:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	b2da      	uxtb	r2, r3
 801149a:	69fb      	ldr	r3, [r7, #28]
 801149c:	701a      	strb	r2, [r3, #0]
  }
}
 801149e:	bf00      	nop
 80114a0:	372c      	adds	r7, #44	; 0x2c
 80114a2:	46bd      	mov	sp, r7
 80114a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a8:	4770      	bx	lr
	...

080114ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	460b      	mov	r3, r1
 80114b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80114b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80114bc:	f003 fa14 	bl	80148e8 <USBD_static_malloc>
 80114c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d109      	bne.n	80114dc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	32b0      	adds	r2, #176	; 0xb0
 80114d2:	2100      	movs	r1, #0
 80114d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80114d8:	2302      	movs	r3, #2
 80114da:	e0d4      	b.n	8011686 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80114dc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80114e0:	2100      	movs	r1, #0
 80114e2:	68f8      	ldr	r0, [r7, #12]
 80114e4:	f005 f9b5 	bl	8016852 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	32b0      	adds	r2, #176	; 0xb0
 80114f2:	68f9      	ldr	r1, [r7, #12]
 80114f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	32b0      	adds	r2, #176	; 0xb0
 8011502:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	7c1b      	ldrb	r3, [r3, #16]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d138      	bne.n	8011586 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011514:	4b5e      	ldr	r3, [pc, #376]	; (8011690 <USBD_CDC_Init+0x1e4>)
 8011516:	7819      	ldrb	r1, [r3, #0]
 8011518:	f44f 7300 	mov.w	r3, #512	; 0x200
 801151c:	2202      	movs	r2, #2
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f002 ffe4 	bl	80144ec <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011524:	4b5a      	ldr	r3, [pc, #360]	; (8011690 <USBD_CDC_Init+0x1e4>)
 8011526:	781b      	ldrb	r3, [r3, #0]
 8011528:	f003 020f 	and.w	r2, r3, #15
 801152c:	6879      	ldr	r1, [r7, #4]
 801152e:	4613      	mov	r3, r2
 8011530:	009b      	lsls	r3, r3, #2
 8011532:	4413      	add	r3, r2
 8011534:	009b      	lsls	r3, r3, #2
 8011536:	440b      	add	r3, r1
 8011538:	3324      	adds	r3, #36	; 0x24
 801153a:	2201      	movs	r2, #1
 801153c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801153e:	4b55      	ldr	r3, [pc, #340]	; (8011694 <USBD_CDC_Init+0x1e8>)
 8011540:	7819      	ldrb	r1, [r3, #0]
 8011542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011546:	2202      	movs	r2, #2
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f002 ffcf 	bl	80144ec <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801154e:	4b51      	ldr	r3, [pc, #324]	; (8011694 <USBD_CDC_Init+0x1e8>)
 8011550:	781b      	ldrb	r3, [r3, #0]
 8011552:	f003 020f 	and.w	r2, r3, #15
 8011556:	6879      	ldr	r1, [r7, #4]
 8011558:	4613      	mov	r3, r2
 801155a:	009b      	lsls	r3, r3, #2
 801155c:	4413      	add	r3, r2
 801155e:	009b      	lsls	r3, r3, #2
 8011560:	440b      	add	r3, r1
 8011562:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011566:	2201      	movs	r2, #1
 8011568:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801156a:	4b4b      	ldr	r3, [pc, #300]	; (8011698 <USBD_CDC_Init+0x1ec>)
 801156c:	781b      	ldrb	r3, [r3, #0]
 801156e:	f003 020f 	and.w	r2, r3, #15
 8011572:	6879      	ldr	r1, [r7, #4]
 8011574:	4613      	mov	r3, r2
 8011576:	009b      	lsls	r3, r3, #2
 8011578:	4413      	add	r3, r2
 801157a:	009b      	lsls	r3, r3, #2
 801157c:	440b      	add	r3, r1
 801157e:	3326      	adds	r3, #38	; 0x26
 8011580:	2210      	movs	r2, #16
 8011582:	801a      	strh	r2, [r3, #0]
 8011584:	e035      	b.n	80115f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011586:	4b42      	ldr	r3, [pc, #264]	; (8011690 <USBD_CDC_Init+0x1e4>)
 8011588:	7819      	ldrb	r1, [r3, #0]
 801158a:	2340      	movs	r3, #64	; 0x40
 801158c:	2202      	movs	r2, #2
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	f002 ffac 	bl	80144ec <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011594:	4b3e      	ldr	r3, [pc, #248]	; (8011690 <USBD_CDC_Init+0x1e4>)
 8011596:	781b      	ldrb	r3, [r3, #0]
 8011598:	f003 020f 	and.w	r2, r3, #15
 801159c:	6879      	ldr	r1, [r7, #4]
 801159e:	4613      	mov	r3, r2
 80115a0:	009b      	lsls	r3, r3, #2
 80115a2:	4413      	add	r3, r2
 80115a4:	009b      	lsls	r3, r3, #2
 80115a6:	440b      	add	r3, r1
 80115a8:	3324      	adds	r3, #36	; 0x24
 80115aa:	2201      	movs	r2, #1
 80115ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80115ae:	4b39      	ldr	r3, [pc, #228]	; (8011694 <USBD_CDC_Init+0x1e8>)
 80115b0:	7819      	ldrb	r1, [r3, #0]
 80115b2:	2340      	movs	r3, #64	; 0x40
 80115b4:	2202      	movs	r2, #2
 80115b6:	6878      	ldr	r0, [r7, #4]
 80115b8:	f002 ff98 	bl	80144ec <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80115bc:	4b35      	ldr	r3, [pc, #212]	; (8011694 <USBD_CDC_Init+0x1e8>)
 80115be:	781b      	ldrb	r3, [r3, #0]
 80115c0:	f003 020f 	and.w	r2, r3, #15
 80115c4:	6879      	ldr	r1, [r7, #4]
 80115c6:	4613      	mov	r3, r2
 80115c8:	009b      	lsls	r3, r3, #2
 80115ca:	4413      	add	r3, r2
 80115cc:	009b      	lsls	r3, r3, #2
 80115ce:	440b      	add	r3, r1
 80115d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80115d4:	2201      	movs	r2, #1
 80115d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80115d8:	4b2f      	ldr	r3, [pc, #188]	; (8011698 <USBD_CDC_Init+0x1ec>)
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	f003 020f 	and.w	r2, r3, #15
 80115e0:	6879      	ldr	r1, [r7, #4]
 80115e2:	4613      	mov	r3, r2
 80115e4:	009b      	lsls	r3, r3, #2
 80115e6:	4413      	add	r3, r2
 80115e8:	009b      	lsls	r3, r3, #2
 80115ea:	440b      	add	r3, r1
 80115ec:	3326      	adds	r3, #38	; 0x26
 80115ee:	2210      	movs	r2, #16
 80115f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80115f2:	4b29      	ldr	r3, [pc, #164]	; (8011698 <USBD_CDC_Init+0x1ec>)
 80115f4:	7819      	ldrb	r1, [r3, #0]
 80115f6:	2308      	movs	r3, #8
 80115f8:	2203      	movs	r2, #3
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f002 ff76 	bl	80144ec <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8011600:	4b25      	ldr	r3, [pc, #148]	; (8011698 <USBD_CDC_Init+0x1ec>)
 8011602:	781b      	ldrb	r3, [r3, #0]
 8011604:	f003 020f 	and.w	r2, r3, #15
 8011608:	6879      	ldr	r1, [r7, #4]
 801160a:	4613      	mov	r3, r2
 801160c:	009b      	lsls	r3, r3, #2
 801160e:	4413      	add	r3, r2
 8011610:	009b      	lsls	r3, r3, #2
 8011612:	440b      	add	r3, r1
 8011614:	3324      	adds	r3, #36	; 0x24
 8011616:	2201      	movs	r2, #1
 8011618:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	2200      	movs	r2, #0
 801161e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011628:	687a      	ldr	r2, [r7, #4]
 801162a:	33b0      	adds	r3, #176	; 0xb0
 801162c:	009b      	lsls	r3, r3, #2
 801162e:	4413      	add	r3, r2
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	2200      	movs	r2, #0
 801163a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	2200      	movs	r2, #0
 8011642:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801164c:	2b00      	cmp	r3, #0
 801164e:	d101      	bne.n	8011654 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8011650:	2302      	movs	r3, #2
 8011652:	e018      	b.n	8011686 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	7c1b      	ldrb	r3, [r3, #16]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d10a      	bne.n	8011672 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801165c:	4b0d      	ldr	r3, [pc, #52]	; (8011694 <USBD_CDC_Init+0x1e8>)
 801165e:	7819      	ldrb	r1, [r3, #0]
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011666:	f44f 7300 	mov.w	r3, #512	; 0x200
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	f003 f8ba 	bl	80147e4 <USBD_LL_PrepareReceive>
 8011670:	e008      	b.n	8011684 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011672:	4b08      	ldr	r3, [pc, #32]	; (8011694 <USBD_CDC_Init+0x1e8>)
 8011674:	7819      	ldrb	r1, [r3, #0]
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801167c:	2340      	movs	r3, #64	; 0x40
 801167e:	6878      	ldr	r0, [r7, #4]
 8011680:	f003 f8b0 	bl	80147e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011684:	2300      	movs	r3, #0
}
 8011686:	4618      	mov	r0, r3
 8011688:	3710      	adds	r7, #16
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}
 801168e:	bf00      	nop
 8011690:	200000cb 	.word	0x200000cb
 8011694:	200000cc 	.word	0x200000cc
 8011698:	200000cd 	.word	0x200000cd

0801169c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b082      	sub	sp, #8
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
 80116a4:	460b      	mov	r3, r1
 80116a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80116a8:	4b3a      	ldr	r3, [pc, #232]	; (8011794 <USBD_CDC_DeInit+0xf8>)
 80116aa:	781b      	ldrb	r3, [r3, #0]
 80116ac:	4619      	mov	r1, r3
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f002 ff5a 	bl	8014568 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80116b4:	4b37      	ldr	r3, [pc, #220]	; (8011794 <USBD_CDC_DeInit+0xf8>)
 80116b6:	781b      	ldrb	r3, [r3, #0]
 80116b8:	f003 020f 	and.w	r2, r3, #15
 80116bc:	6879      	ldr	r1, [r7, #4]
 80116be:	4613      	mov	r3, r2
 80116c0:	009b      	lsls	r3, r3, #2
 80116c2:	4413      	add	r3, r2
 80116c4:	009b      	lsls	r3, r3, #2
 80116c6:	440b      	add	r3, r1
 80116c8:	3324      	adds	r3, #36	; 0x24
 80116ca:	2200      	movs	r2, #0
 80116cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80116ce:	4b32      	ldr	r3, [pc, #200]	; (8011798 <USBD_CDC_DeInit+0xfc>)
 80116d0:	781b      	ldrb	r3, [r3, #0]
 80116d2:	4619      	mov	r1, r3
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f002 ff47 	bl	8014568 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80116da:	4b2f      	ldr	r3, [pc, #188]	; (8011798 <USBD_CDC_DeInit+0xfc>)
 80116dc:	781b      	ldrb	r3, [r3, #0]
 80116de:	f003 020f 	and.w	r2, r3, #15
 80116e2:	6879      	ldr	r1, [r7, #4]
 80116e4:	4613      	mov	r3, r2
 80116e6:	009b      	lsls	r3, r3, #2
 80116e8:	4413      	add	r3, r2
 80116ea:	009b      	lsls	r3, r3, #2
 80116ec:	440b      	add	r3, r1
 80116ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80116f2:	2200      	movs	r2, #0
 80116f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80116f6:	4b29      	ldr	r3, [pc, #164]	; (801179c <USBD_CDC_DeInit+0x100>)
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	4619      	mov	r1, r3
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f002 ff33 	bl	8014568 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8011702:	4b26      	ldr	r3, [pc, #152]	; (801179c <USBD_CDC_DeInit+0x100>)
 8011704:	781b      	ldrb	r3, [r3, #0]
 8011706:	f003 020f 	and.w	r2, r3, #15
 801170a:	6879      	ldr	r1, [r7, #4]
 801170c:	4613      	mov	r3, r2
 801170e:	009b      	lsls	r3, r3, #2
 8011710:	4413      	add	r3, r2
 8011712:	009b      	lsls	r3, r3, #2
 8011714:	440b      	add	r3, r1
 8011716:	3324      	adds	r3, #36	; 0x24
 8011718:	2200      	movs	r2, #0
 801171a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801171c:	4b1f      	ldr	r3, [pc, #124]	; (801179c <USBD_CDC_DeInit+0x100>)
 801171e:	781b      	ldrb	r3, [r3, #0]
 8011720:	f003 020f 	and.w	r2, r3, #15
 8011724:	6879      	ldr	r1, [r7, #4]
 8011726:	4613      	mov	r3, r2
 8011728:	009b      	lsls	r3, r3, #2
 801172a:	4413      	add	r3, r2
 801172c:	009b      	lsls	r3, r3, #2
 801172e:	440b      	add	r3, r1
 8011730:	3326      	adds	r3, #38	; 0x26
 8011732:	2200      	movs	r2, #0
 8011734:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	32b0      	adds	r2, #176	; 0xb0
 8011740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d01f      	beq.n	8011788 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801174e:	687a      	ldr	r2, [r7, #4]
 8011750:	33b0      	adds	r3, #176	; 0xb0
 8011752:	009b      	lsls	r3, r3, #2
 8011754:	4413      	add	r3, r2
 8011756:	685b      	ldr	r3, [r3, #4]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	32b0      	adds	r2, #176	; 0xb0
 8011766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801176a:	4618      	mov	r0, r3
 801176c:	f003 f8ca 	bl	8014904 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	32b0      	adds	r2, #176	; 0xb0
 801177a:	2100      	movs	r1, #0
 801177c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2200      	movs	r2, #0
 8011784:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011788:	2300      	movs	r3, #0
}
 801178a:	4618      	mov	r0, r3
 801178c:	3708      	adds	r7, #8
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop
 8011794:	200000cb 	.word	0x200000cb
 8011798:	200000cc 	.word	0x200000cc
 801179c:	200000cd 	.word	0x200000cd

080117a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b086      	sub	sp, #24
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	32b0      	adds	r2, #176	; 0xb0
 80117b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80117ba:	2300      	movs	r3, #0
 80117bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80117be:	2300      	movs	r3, #0
 80117c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80117c2:	2300      	movs	r3, #0
 80117c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80117c6:	693b      	ldr	r3, [r7, #16]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d101      	bne.n	80117d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80117cc:	2303      	movs	r3, #3
 80117ce:	e0bf      	b.n	8011950 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	781b      	ldrb	r3, [r3, #0]
 80117d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d050      	beq.n	801187e <USBD_CDC_Setup+0xde>
 80117dc:	2b20      	cmp	r3, #32
 80117de:	f040 80af 	bne.w	8011940 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	88db      	ldrh	r3, [r3, #6]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d03a      	beq.n	8011860 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	b25b      	sxtb	r3, r3
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	da1b      	bge.n	801182c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80117fa:	687a      	ldr	r2, [r7, #4]
 80117fc:	33b0      	adds	r3, #176	; 0xb0
 80117fe:	009b      	lsls	r3, r3, #2
 8011800:	4413      	add	r3, r2
 8011802:	685b      	ldr	r3, [r3, #4]
 8011804:	689b      	ldr	r3, [r3, #8]
 8011806:	683a      	ldr	r2, [r7, #0]
 8011808:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801180a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801180c:	683a      	ldr	r2, [r7, #0]
 801180e:	88d2      	ldrh	r2, [r2, #6]
 8011810:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	88db      	ldrh	r3, [r3, #6]
 8011816:	2b07      	cmp	r3, #7
 8011818:	bf28      	it	cs
 801181a:	2307      	movcs	r3, #7
 801181c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	89fa      	ldrh	r2, [r7, #14]
 8011822:	4619      	mov	r1, r3
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	f001 fd21 	bl	801326c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801182a:	e090      	b.n	801194e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	785a      	ldrb	r2, [r3, #1]
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	88db      	ldrh	r3, [r3, #6]
 801183a:	2b3f      	cmp	r3, #63	; 0x3f
 801183c:	d803      	bhi.n	8011846 <USBD_CDC_Setup+0xa6>
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	88db      	ldrh	r3, [r3, #6]
 8011842:	b2da      	uxtb	r2, r3
 8011844:	e000      	b.n	8011848 <USBD_CDC_Setup+0xa8>
 8011846:	2240      	movs	r2, #64	; 0x40
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801184e:	6939      	ldr	r1, [r7, #16]
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8011856:	461a      	mov	r2, r3
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f001 fd33 	bl	80132c4 <USBD_CtlPrepareRx>
      break;
 801185e:	e076      	b.n	801194e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011866:	687a      	ldr	r2, [r7, #4]
 8011868:	33b0      	adds	r3, #176	; 0xb0
 801186a:	009b      	lsls	r3, r3, #2
 801186c:	4413      	add	r3, r2
 801186e:	685b      	ldr	r3, [r3, #4]
 8011870:	689b      	ldr	r3, [r3, #8]
 8011872:	683a      	ldr	r2, [r7, #0]
 8011874:	7850      	ldrb	r0, [r2, #1]
 8011876:	2200      	movs	r2, #0
 8011878:	6839      	ldr	r1, [r7, #0]
 801187a:	4798      	blx	r3
      break;
 801187c:	e067      	b.n	801194e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	785b      	ldrb	r3, [r3, #1]
 8011882:	2b0b      	cmp	r3, #11
 8011884:	d851      	bhi.n	801192a <USBD_CDC_Setup+0x18a>
 8011886:	a201      	add	r2, pc, #4	; (adr r2, 801188c <USBD_CDC_Setup+0xec>)
 8011888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801188c:	080118bd 	.word	0x080118bd
 8011890:	08011939 	.word	0x08011939
 8011894:	0801192b 	.word	0x0801192b
 8011898:	0801192b 	.word	0x0801192b
 801189c:	0801192b 	.word	0x0801192b
 80118a0:	0801192b 	.word	0x0801192b
 80118a4:	0801192b 	.word	0x0801192b
 80118a8:	0801192b 	.word	0x0801192b
 80118ac:	0801192b 	.word	0x0801192b
 80118b0:	0801192b 	.word	0x0801192b
 80118b4:	080118e7 	.word	0x080118e7
 80118b8:	08011911 	.word	0x08011911
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118c2:	b2db      	uxtb	r3, r3
 80118c4:	2b03      	cmp	r3, #3
 80118c6:	d107      	bne.n	80118d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80118c8:	f107 030a 	add.w	r3, r7, #10
 80118cc:	2202      	movs	r2, #2
 80118ce:	4619      	mov	r1, r3
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f001 fccb 	bl	801326c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80118d6:	e032      	b.n	801193e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80118d8:	6839      	ldr	r1, [r7, #0]
 80118da:	6878      	ldr	r0, [r7, #4]
 80118dc:	f001 fc55 	bl	801318a <USBD_CtlError>
            ret = USBD_FAIL;
 80118e0:	2303      	movs	r3, #3
 80118e2:	75fb      	strb	r3, [r7, #23]
          break;
 80118e4:	e02b      	b.n	801193e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118ec:	b2db      	uxtb	r3, r3
 80118ee:	2b03      	cmp	r3, #3
 80118f0:	d107      	bne.n	8011902 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80118f2:	f107 030d 	add.w	r3, r7, #13
 80118f6:	2201      	movs	r2, #1
 80118f8:	4619      	mov	r1, r3
 80118fa:	6878      	ldr	r0, [r7, #4]
 80118fc:	f001 fcb6 	bl	801326c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011900:	e01d      	b.n	801193e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011902:	6839      	ldr	r1, [r7, #0]
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f001 fc40 	bl	801318a <USBD_CtlError>
            ret = USBD_FAIL;
 801190a:	2303      	movs	r3, #3
 801190c:	75fb      	strb	r3, [r7, #23]
          break;
 801190e:	e016      	b.n	801193e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011916:	b2db      	uxtb	r3, r3
 8011918:	2b03      	cmp	r3, #3
 801191a:	d00f      	beq.n	801193c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801191c:	6839      	ldr	r1, [r7, #0]
 801191e:	6878      	ldr	r0, [r7, #4]
 8011920:	f001 fc33 	bl	801318a <USBD_CtlError>
            ret = USBD_FAIL;
 8011924:	2303      	movs	r3, #3
 8011926:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011928:	e008      	b.n	801193c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801192a:	6839      	ldr	r1, [r7, #0]
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f001 fc2c 	bl	801318a <USBD_CtlError>
          ret = USBD_FAIL;
 8011932:	2303      	movs	r3, #3
 8011934:	75fb      	strb	r3, [r7, #23]
          break;
 8011936:	e002      	b.n	801193e <USBD_CDC_Setup+0x19e>
          break;
 8011938:	bf00      	nop
 801193a:	e008      	b.n	801194e <USBD_CDC_Setup+0x1ae>
          break;
 801193c:	bf00      	nop
      }
      break;
 801193e:	e006      	b.n	801194e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8011940:	6839      	ldr	r1, [r7, #0]
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f001 fc21 	bl	801318a <USBD_CtlError>
      ret = USBD_FAIL;
 8011948:	2303      	movs	r3, #3
 801194a:	75fb      	strb	r3, [r7, #23]
      break;
 801194c:	bf00      	nop
  }

  return (uint8_t)ret;
 801194e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011950:	4618      	mov	r0, r3
 8011952:	3718      	adds	r7, #24
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}

08011958 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b084      	sub	sp, #16
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
 8011960:	460b      	mov	r3, r1
 8011962:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801196a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	32b0      	adds	r2, #176	; 0xb0
 8011976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d101      	bne.n	8011982 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801197e:	2303      	movs	r3, #3
 8011980:	e065      	b.n	8011a4e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	32b0      	adds	r2, #176	; 0xb0
 801198c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011990:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011992:	78fb      	ldrb	r3, [r7, #3]
 8011994:	f003 020f 	and.w	r2, r3, #15
 8011998:	6879      	ldr	r1, [r7, #4]
 801199a:	4613      	mov	r3, r2
 801199c:	009b      	lsls	r3, r3, #2
 801199e:	4413      	add	r3, r2
 80119a0:	009b      	lsls	r3, r3, #2
 80119a2:	440b      	add	r3, r1
 80119a4:	3318      	adds	r3, #24
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d02f      	beq.n	8011a0c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80119ac:	78fb      	ldrb	r3, [r7, #3]
 80119ae:	f003 020f 	and.w	r2, r3, #15
 80119b2:	6879      	ldr	r1, [r7, #4]
 80119b4:	4613      	mov	r3, r2
 80119b6:	009b      	lsls	r3, r3, #2
 80119b8:	4413      	add	r3, r2
 80119ba:	009b      	lsls	r3, r3, #2
 80119bc:	440b      	add	r3, r1
 80119be:	3318      	adds	r3, #24
 80119c0:	681a      	ldr	r2, [r3, #0]
 80119c2:	78fb      	ldrb	r3, [r7, #3]
 80119c4:	f003 010f 	and.w	r1, r3, #15
 80119c8:	68f8      	ldr	r0, [r7, #12]
 80119ca:	460b      	mov	r3, r1
 80119cc:	009b      	lsls	r3, r3, #2
 80119ce:	440b      	add	r3, r1
 80119d0:	00db      	lsls	r3, r3, #3
 80119d2:	4403      	add	r3, r0
 80119d4:	3338      	adds	r3, #56	; 0x38
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80119dc:	fb01 f303 	mul.w	r3, r1, r3
 80119e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d112      	bne.n	8011a0c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80119e6:	78fb      	ldrb	r3, [r7, #3]
 80119e8:	f003 020f 	and.w	r2, r3, #15
 80119ec:	6879      	ldr	r1, [r7, #4]
 80119ee:	4613      	mov	r3, r2
 80119f0:	009b      	lsls	r3, r3, #2
 80119f2:	4413      	add	r3, r2
 80119f4:	009b      	lsls	r3, r3, #2
 80119f6:	440b      	add	r3, r1
 80119f8:	3318      	adds	r3, #24
 80119fa:	2200      	movs	r2, #0
 80119fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80119fe:	78f9      	ldrb	r1, [r7, #3]
 8011a00:	2300      	movs	r3, #0
 8011a02:	2200      	movs	r2, #0
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f002 feb5 	bl	8014774 <USBD_LL_Transmit>
 8011a0a:	e01f      	b.n	8011a4c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011a1a:	687a      	ldr	r2, [r7, #4]
 8011a1c:	33b0      	adds	r3, #176	; 0xb0
 8011a1e:	009b      	lsls	r3, r3, #2
 8011a20:	4413      	add	r3, r2
 8011a22:	685b      	ldr	r3, [r3, #4]
 8011a24:	691b      	ldr	r3, [r3, #16]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d010      	beq.n	8011a4c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	33b0      	adds	r3, #176	; 0xb0
 8011a34:	009b      	lsls	r3, r3, #2
 8011a36:	4413      	add	r3, r2
 8011a38:	685b      	ldr	r3, [r3, #4]
 8011a3a:	691b      	ldr	r3, [r3, #16]
 8011a3c:	68ba      	ldr	r2, [r7, #8]
 8011a3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8011a42:	68ba      	ldr	r2, [r7, #8]
 8011a44:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011a48:	78fa      	ldrb	r2, [r7, #3]
 8011a4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011a4c:	2300      	movs	r3, #0
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3710      	adds	r7, #16
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}

08011a56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011a56:	b580      	push	{r7, lr}
 8011a58:	b084      	sub	sp, #16
 8011a5a:	af00      	add	r7, sp, #0
 8011a5c:	6078      	str	r0, [r7, #4]
 8011a5e:	460b      	mov	r3, r1
 8011a60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	32b0      	adds	r2, #176	; 0xb0
 8011a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a70:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	32b0      	adds	r2, #176	; 0xb0
 8011a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d101      	bne.n	8011a88 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8011a84:	2303      	movs	r3, #3
 8011a86:	e01a      	b.n	8011abe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011a88:	78fb      	ldrb	r3, [r7, #3]
 8011a8a:	4619      	mov	r1, r3
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f002 fee1 	bl	8014854 <USBD_LL_GetRxDataSize>
 8011a92:	4602      	mov	r2, r0
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011aa0:	687a      	ldr	r2, [r7, #4]
 8011aa2:	33b0      	adds	r3, #176	; 0xb0
 8011aa4:	009b      	lsls	r3, r3, #2
 8011aa6:	4413      	add	r3, r2
 8011aa8:	685b      	ldr	r3, [r3, #4]
 8011aaa:	68db      	ldr	r3, [r3, #12]
 8011aac:	68fa      	ldr	r2, [r7, #12]
 8011aae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011ab2:	68fa      	ldr	r2, [r7, #12]
 8011ab4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011ab8:	4611      	mov	r1, r2
 8011aba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011abc:	2300      	movs	r3, #0
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3710      	adds	r7, #16
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd80      	pop	{r7, pc}

08011ac6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011ac6:	b580      	push	{r7, lr}
 8011ac8:	b084      	sub	sp, #16
 8011aca:	af00      	add	r7, sp, #0
 8011acc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	32b0      	adds	r2, #176	; 0xb0
 8011ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011adc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d101      	bne.n	8011ae8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011ae4:	2303      	movs	r3, #3
 8011ae6:	e025      	b.n	8011b34 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011aee:	687a      	ldr	r2, [r7, #4]
 8011af0:	33b0      	adds	r3, #176	; 0xb0
 8011af2:	009b      	lsls	r3, r3, #2
 8011af4:	4413      	add	r3, r2
 8011af6:	685b      	ldr	r3, [r3, #4]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d01a      	beq.n	8011b32 <USBD_CDC_EP0_RxReady+0x6c>
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011b02:	2bff      	cmp	r3, #255	; 0xff
 8011b04:	d015      	beq.n	8011b32 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011b0c:	687a      	ldr	r2, [r7, #4]
 8011b0e:	33b0      	adds	r3, #176	; 0xb0
 8011b10:	009b      	lsls	r3, r3, #2
 8011b12:	4413      	add	r3, r2
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	689b      	ldr	r3, [r3, #8]
 8011b18:	68fa      	ldr	r2, [r7, #12]
 8011b1a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8011b1e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8011b20:	68fa      	ldr	r2, [r7, #12]
 8011b22:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011b26:	b292      	uxth	r2, r2
 8011b28:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	22ff      	movs	r2, #255	; 0xff
 8011b2e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011b32:	2300      	movs	r3, #0
}
 8011b34:	4618      	mov	r0, r3
 8011b36:	3710      	adds	r7, #16
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd80      	pop	{r7, pc}

08011b3c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b086      	sub	sp, #24
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011b44:	2182      	movs	r1, #130	; 0x82
 8011b46:	4818      	ldr	r0, [pc, #96]	; (8011ba8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011b48:	f000 fcbd 	bl	80124c6 <USBD_GetEpDesc>
 8011b4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011b4e:	2101      	movs	r1, #1
 8011b50:	4815      	ldr	r0, [pc, #84]	; (8011ba8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011b52:	f000 fcb8 	bl	80124c6 <USBD_GetEpDesc>
 8011b56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011b58:	2181      	movs	r1, #129	; 0x81
 8011b5a:	4813      	ldr	r0, [pc, #76]	; (8011ba8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011b5c:	f000 fcb3 	bl	80124c6 <USBD_GetEpDesc>
 8011b60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d002      	beq.n	8011b6e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011b68:	697b      	ldr	r3, [r7, #20]
 8011b6a:	2210      	movs	r2, #16
 8011b6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d006      	beq.n	8011b82 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011b74:	693b      	ldr	r3, [r7, #16]
 8011b76:	2200      	movs	r2, #0
 8011b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011b7c:	711a      	strb	r2, [r3, #4]
 8011b7e:	2200      	movs	r2, #0
 8011b80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d006      	beq.n	8011b96 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011b90:	711a      	strb	r2, [r3, #4]
 8011b92:	2200      	movs	r2, #0
 8011b94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2243      	movs	r2, #67	; 0x43
 8011b9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011b9c:	4b02      	ldr	r3, [pc, #8]	; (8011ba8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	3718      	adds	r7, #24
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
 8011ba6:	bf00      	nop
 8011ba8:	20000088 	.word	0x20000088

08011bac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b086      	sub	sp, #24
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011bb4:	2182      	movs	r1, #130	; 0x82
 8011bb6:	4818      	ldr	r0, [pc, #96]	; (8011c18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011bb8:	f000 fc85 	bl	80124c6 <USBD_GetEpDesc>
 8011bbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011bbe:	2101      	movs	r1, #1
 8011bc0:	4815      	ldr	r0, [pc, #84]	; (8011c18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011bc2:	f000 fc80 	bl	80124c6 <USBD_GetEpDesc>
 8011bc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011bc8:	2181      	movs	r1, #129	; 0x81
 8011bca:	4813      	ldr	r0, [pc, #76]	; (8011c18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011bcc:	f000 fc7b 	bl	80124c6 <USBD_GetEpDesc>
 8011bd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011bd2:	697b      	ldr	r3, [r7, #20]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d002      	beq.n	8011bde <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	2210      	movs	r2, #16
 8011bdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011bde:	693b      	ldr	r3, [r7, #16]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d006      	beq.n	8011bf2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011be4:	693b      	ldr	r3, [r7, #16]
 8011be6:	2200      	movs	r2, #0
 8011be8:	711a      	strb	r2, [r3, #4]
 8011bea:	2200      	movs	r2, #0
 8011bec:	f042 0202 	orr.w	r2, r2, #2
 8011bf0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d006      	beq.n	8011c06 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	711a      	strb	r2, [r3, #4]
 8011bfe:	2200      	movs	r2, #0
 8011c00:	f042 0202 	orr.w	r2, r2, #2
 8011c04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2243      	movs	r2, #67	; 0x43
 8011c0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011c0c:	4b02      	ldr	r3, [pc, #8]	; (8011c18 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8011c0e:	4618      	mov	r0, r3
 8011c10:	3718      	adds	r7, #24
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}
 8011c16:	bf00      	nop
 8011c18:	20000088 	.word	0x20000088

08011c1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b086      	sub	sp, #24
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011c24:	2182      	movs	r1, #130	; 0x82
 8011c26:	4818      	ldr	r0, [pc, #96]	; (8011c88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011c28:	f000 fc4d 	bl	80124c6 <USBD_GetEpDesc>
 8011c2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011c2e:	2101      	movs	r1, #1
 8011c30:	4815      	ldr	r0, [pc, #84]	; (8011c88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011c32:	f000 fc48 	bl	80124c6 <USBD_GetEpDesc>
 8011c36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011c38:	2181      	movs	r1, #129	; 0x81
 8011c3a:	4813      	ldr	r0, [pc, #76]	; (8011c88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011c3c:	f000 fc43 	bl	80124c6 <USBD_GetEpDesc>
 8011c40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d002      	beq.n	8011c4e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	2210      	movs	r2, #16
 8011c4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d006      	beq.n	8011c62 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	2200      	movs	r2, #0
 8011c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011c5c:	711a      	strb	r2, [r3, #4]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d006      	beq.n	8011c76 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011c70:	711a      	strb	r2, [r3, #4]
 8011c72:	2200      	movs	r2, #0
 8011c74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	2243      	movs	r2, #67	; 0x43
 8011c7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011c7c:	4b02      	ldr	r3, [pc, #8]	; (8011c88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8011c7e:	4618      	mov	r0, r3
 8011c80:	3718      	adds	r7, #24
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}
 8011c86:	bf00      	nop
 8011c88:	20000088 	.word	0x20000088

08011c8c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011c8c:	b480      	push	{r7}
 8011c8e:	b083      	sub	sp, #12
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	220a      	movs	r2, #10
 8011c98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011c9a:	4b03      	ldr	r3, [pc, #12]	; (8011ca8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	370c      	adds	r7, #12
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca6:	4770      	bx	lr
 8011ca8:	20000044 	.word	0x20000044

08011cac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011cac:	b480      	push	{r7}
 8011cae:	b083      	sub	sp, #12
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d101      	bne.n	8011cc0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011cbc:	2303      	movs	r3, #3
 8011cbe:	e009      	b.n	8011cd4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011cc6:	687a      	ldr	r2, [r7, #4]
 8011cc8:	33b0      	adds	r3, #176	; 0xb0
 8011cca:	009b      	lsls	r3, r3, #2
 8011ccc:	4413      	add	r3, r2
 8011cce:	683a      	ldr	r2, [r7, #0]
 8011cd0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011cd2:	2300      	movs	r3, #0
}
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	370c      	adds	r7, #12
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cde:	4770      	bx	lr

08011ce0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	b087      	sub	sp, #28
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	60f8      	str	r0, [r7, #12]
 8011ce8:	60b9      	str	r1, [r7, #8]
 8011cea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	32b0      	adds	r2, #176	; 0xb0
 8011cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cfa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d101      	bne.n	8011d06 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011d02:	2303      	movs	r3, #3
 8011d04:	e008      	b.n	8011d18 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8011d06:	697b      	ldr	r3, [r7, #20]
 8011d08:	68ba      	ldr	r2, [r7, #8]
 8011d0a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	687a      	ldr	r2, [r7, #4]
 8011d12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011d16:	2300      	movs	r3, #0
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	371c      	adds	r7, #28
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d22:	4770      	bx	lr

08011d24 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011d24:	b480      	push	{r7}
 8011d26:	b085      	sub	sp, #20
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
 8011d2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	32b0      	adds	r2, #176	; 0xb0
 8011d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d101      	bne.n	8011d48 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011d44:	2303      	movs	r3, #3
 8011d46:	e004      	b.n	8011d52 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	683a      	ldr	r2, [r7, #0]
 8011d4c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011d50:	2300      	movs	r3, #0
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	3714      	adds	r7, #20
 8011d56:	46bd      	mov	sp, r7
 8011d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5c:	4770      	bx	lr
	...

08011d60 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b084      	sub	sp, #16
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	32b0      	adds	r2, #176	; 0xb0
 8011d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d76:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8011d78:	2301      	movs	r3, #1
 8011d7a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d101      	bne.n	8011d86 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011d82:	2303      	movs	r3, #3
 8011d84:	e025      	b.n	8011dd2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d11f      	bne.n	8011dd0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	2201      	movs	r2, #1
 8011d94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8011d98:	4b10      	ldr	r3, [pc, #64]	; (8011ddc <USBD_CDC_TransmitPacket+0x7c>)
 8011d9a:	781b      	ldrb	r3, [r3, #0]
 8011d9c:	f003 020f 	and.w	r2, r3, #15
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	4613      	mov	r3, r2
 8011daa:	009b      	lsls	r3, r3, #2
 8011dac:	4413      	add	r3, r2
 8011dae:	009b      	lsls	r3, r3, #2
 8011db0:	4403      	add	r3, r0
 8011db2:	3318      	adds	r3, #24
 8011db4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8011db6:	4b09      	ldr	r3, [pc, #36]	; (8011ddc <USBD_CDC_TransmitPacket+0x7c>)
 8011db8:	7819      	ldrb	r1, [r3, #0]
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	f002 fcd4 	bl	8014774 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011dcc:	2300      	movs	r3, #0
 8011dce:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	3710      	adds	r7, #16
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}
 8011dda:	bf00      	nop
 8011ddc:	200000cb 	.word	0x200000cb

08011de0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b084      	sub	sp, #16
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	32b0      	adds	r2, #176	; 0xb0
 8011df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011df6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	32b0      	adds	r2, #176	; 0xb0
 8011e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d101      	bne.n	8011e0e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8011e0a:	2303      	movs	r3, #3
 8011e0c:	e018      	b.n	8011e40 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	7c1b      	ldrb	r3, [r3, #16]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d10a      	bne.n	8011e2c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011e16:	4b0c      	ldr	r3, [pc, #48]	; (8011e48 <USBD_CDC_ReceivePacket+0x68>)
 8011e18:	7819      	ldrb	r1, [r3, #0]
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	f002 fcdd 	bl	80147e4 <USBD_LL_PrepareReceive>
 8011e2a:	e008      	b.n	8011e3e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011e2c:	4b06      	ldr	r3, [pc, #24]	; (8011e48 <USBD_CDC_ReceivePacket+0x68>)
 8011e2e:	7819      	ldrb	r1, [r3, #0]
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011e36:	2340      	movs	r3, #64	; 0x40
 8011e38:	6878      	ldr	r0, [r7, #4]
 8011e3a:	f002 fcd3 	bl	80147e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011e3e:	2300      	movs	r3, #0
}
 8011e40:	4618      	mov	r0, r3
 8011e42:	3710      	adds	r7, #16
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}
 8011e48:	200000cc 	.word	0x200000cc

08011e4c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b086      	sub	sp, #24
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	60f8      	str	r0, [r7, #12]
 8011e54:	60b9      	str	r1, [r7, #8]
 8011e56:	4613      	mov	r3, r2
 8011e58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d101      	bne.n	8011e64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011e60:	2303      	movs	r3, #3
 8011e62:	e01f      	b.n	8011ea4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	2200      	movs	r2, #0
 8011e68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	2200      	movs	r2, #0
 8011e70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	2200      	movs	r2, #0
 8011e78:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011e7c:	68bb      	ldr	r3, [r7, #8]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d003      	beq.n	8011e8a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	68ba      	ldr	r2, [r7, #8]
 8011e86:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	2201      	movs	r2, #1
 8011e8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	79fa      	ldrb	r2, [r7, #7]
 8011e96:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011e98:	68f8      	ldr	r0, [r7, #12]
 8011e9a:	f002 fa93 	bl	80143c4 <USBD_LL_Init>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	3718      	adds	r7, #24
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}

08011eac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b084      	sub	sp, #16
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
 8011eb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d101      	bne.n	8011ec4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011ec0:	2303      	movs	r3, #3
 8011ec2:	e025      	b.n	8011f10 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	683a      	ldr	r2, [r7, #0]
 8011ec8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	32ae      	adds	r2, #174	; 0xae
 8011ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d00f      	beq.n	8011f00 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	32ae      	adds	r2, #174	; 0xae
 8011eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ef0:	f107 020e 	add.w	r2, r7, #14
 8011ef4:	4610      	mov	r0, r2
 8011ef6:	4798      	blx	r3
 8011ef8:	4602      	mov	r2, r0
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011f06:	1c5a      	adds	r2, r3, #1
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8011f0e:	2300      	movs	r3, #0
}
 8011f10:	4618      	mov	r0, r3
 8011f12:	3710      	adds	r7, #16
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}

08011f18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b082      	sub	sp, #8
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f002 fab1 	bl	8014488 <USBD_LL_Start>
 8011f26:	4603      	mov	r3, r0
}
 8011f28:	4618      	mov	r0, r3
 8011f2a:	3708      	adds	r7, #8
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bd80      	pop	{r7, pc}

08011f30 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011f30:	b480      	push	{r7}
 8011f32:	b083      	sub	sp, #12
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011f38:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	370c      	adds	r7, #12
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f44:	4770      	bx	lr

08011f46 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011f46:	b580      	push	{r7, lr}
 8011f48:	b084      	sub	sp, #16
 8011f4a:	af00      	add	r7, sp, #0
 8011f4c:	6078      	str	r0, [r7, #4]
 8011f4e:	460b      	mov	r3, r1
 8011f50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011f52:	2300      	movs	r3, #0
 8011f54:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d009      	beq.n	8011f74 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	78fa      	ldrb	r2, [r7, #3]
 8011f6a:	4611      	mov	r1, r2
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	4798      	blx	r3
 8011f70:	4603      	mov	r3, r0
 8011f72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	3710      	adds	r7, #16
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd80      	pop	{r7, pc}

08011f7e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011f7e:	b580      	push	{r7, lr}
 8011f80:	b084      	sub	sp, #16
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
 8011f86:	460b      	mov	r3, r1
 8011f88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	78fa      	ldrb	r2, [r7, #3]
 8011f98:	4611      	mov	r1, r2
 8011f9a:	6878      	ldr	r0, [r7, #4]
 8011f9c:	4798      	blx	r3
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d001      	beq.n	8011fa8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011fa4:	2303      	movs	r3, #3
 8011fa6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3710      	adds	r7, #16
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}

08011fb2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011fb2:	b580      	push	{r7, lr}
 8011fb4:	b084      	sub	sp, #16
 8011fb6:	af00      	add	r7, sp, #0
 8011fb8:	6078      	str	r0, [r7, #4]
 8011fba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011fc2:	6839      	ldr	r1, [r7, #0]
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f001 f8a6 	bl	8013116 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	2201      	movs	r2, #1
 8011fce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011fd8:	461a      	mov	r2, r3
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011fe6:	f003 031f 	and.w	r3, r3, #31
 8011fea:	2b02      	cmp	r3, #2
 8011fec:	d01a      	beq.n	8012024 <USBD_LL_SetupStage+0x72>
 8011fee:	2b02      	cmp	r3, #2
 8011ff0:	d822      	bhi.n	8012038 <USBD_LL_SetupStage+0x86>
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d002      	beq.n	8011ffc <USBD_LL_SetupStage+0x4a>
 8011ff6:	2b01      	cmp	r3, #1
 8011ff8:	d00a      	beq.n	8012010 <USBD_LL_SetupStage+0x5e>
 8011ffa:	e01d      	b.n	8012038 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012002:	4619      	mov	r1, r3
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f000 fad3 	bl	80125b0 <USBD_StdDevReq>
 801200a:	4603      	mov	r3, r0
 801200c:	73fb      	strb	r3, [r7, #15]
      break;
 801200e:	e020      	b.n	8012052 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012016:	4619      	mov	r1, r3
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f000 fb3b 	bl	8012694 <USBD_StdItfReq>
 801201e:	4603      	mov	r3, r0
 8012020:	73fb      	strb	r3, [r7, #15]
      break;
 8012022:	e016      	b.n	8012052 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801202a:	4619      	mov	r1, r3
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f000 fb9d 	bl	801276c <USBD_StdEPReq>
 8012032:	4603      	mov	r3, r0
 8012034:	73fb      	strb	r3, [r7, #15]
      break;
 8012036:	e00c      	b.n	8012052 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801203e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012042:	b2db      	uxtb	r3, r3
 8012044:	4619      	mov	r1, r3
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f002 fac4 	bl	80145d4 <USBD_LL_StallEP>
 801204c:	4603      	mov	r3, r0
 801204e:	73fb      	strb	r3, [r7, #15]
      break;
 8012050:	bf00      	nop
  }

  return ret;
 8012052:	7bfb      	ldrb	r3, [r7, #15]
}
 8012054:	4618      	mov	r0, r3
 8012056:	3710      	adds	r7, #16
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}

0801205c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b086      	sub	sp, #24
 8012060:	af00      	add	r7, sp, #0
 8012062:	60f8      	str	r0, [r7, #12]
 8012064:	460b      	mov	r3, r1
 8012066:	607a      	str	r2, [r7, #4]
 8012068:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801206a:	2300      	movs	r3, #0
 801206c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801206e:	7afb      	ldrb	r3, [r7, #11]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d16e      	bne.n	8012152 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801207a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012082:	2b03      	cmp	r3, #3
 8012084:	f040 8098 	bne.w	80121b8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	689a      	ldr	r2, [r3, #8]
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	68db      	ldr	r3, [r3, #12]
 8012090:	429a      	cmp	r2, r3
 8012092:	d913      	bls.n	80120bc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012094:	693b      	ldr	r3, [r7, #16]
 8012096:	689a      	ldr	r2, [r3, #8]
 8012098:	693b      	ldr	r3, [r7, #16]
 801209a:	68db      	ldr	r3, [r3, #12]
 801209c:	1ad2      	subs	r2, r2, r3
 801209e:	693b      	ldr	r3, [r7, #16]
 80120a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80120a2:	693b      	ldr	r3, [r7, #16]
 80120a4:	68da      	ldr	r2, [r3, #12]
 80120a6:	693b      	ldr	r3, [r7, #16]
 80120a8:	689b      	ldr	r3, [r3, #8]
 80120aa:	4293      	cmp	r3, r2
 80120ac:	bf28      	it	cs
 80120ae:	4613      	movcs	r3, r2
 80120b0:	461a      	mov	r2, r3
 80120b2:	6879      	ldr	r1, [r7, #4]
 80120b4:	68f8      	ldr	r0, [r7, #12]
 80120b6:	f001 f922 	bl	80132fe <USBD_CtlContinueRx>
 80120ba:	e07d      	b.n	80121b8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80120c2:	f003 031f 	and.w	r3, r3, #31
 80120c6:	2b02      	cmp	r3, #2
 80120c8:	d014      	beq.n	80120f4 <USBD_LL_DataOutStage+0x98>
 80120ca:	2b02      	cmp	r3, #2
 80120cc:	d81d      	bhi.n	801210a <USBD_LL_DataOutStage+0xae>
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d002      	beq.n	80120d8 <USBD_LL_DataOutStage+0x7c>
 80120d2:	2b01      	cmp	r3, #1
 80120d4:	d003      	beq.n	80120de <USBD_LL_DataOutStage+0x82>
 80120d6:	e018      	b.n	801210a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80120d8:	2300      	movs	r3, #0
 80120da:	75bb      	strb	r3, [r7, #22]
            break;
 80120dc:	e018      	b.n	8012110 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80120e4:	b2db      	uxtb	r3, r3
 80120e6:	4619      	mov	r1, r3
 80120e8:	68f8      	ldr	r0, [r7, #12]
 80120ea:	f000 f9d2 	bl	8012492 <USBD_CoreFindIF>
 80120ee:	4603      	mov	r3, r0
 80120f0:	75bb      	strb	r3, [r7, #22]
            break;
 80120f2:	e00d      	b.n	8012110 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80120fa:	b2db      	uxtb	r3, r3
 80120fc:	4619      	mov	r1, r3
 80120fe:	68f8      	ldr	r0, [r7, #12]
 8012100:	f000 f9d4 	bl	80124ac <USBD_CoreFindEP>
 8012104:	4603      	mov	r3, r0
 8012106:	75bb      	strb	r3, [r7, #22]
            break;
 8012108:	e002      	b.n	8012110 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801210a:	2300      	movs	r3, #0
 801210c:	75bb      	strb	r3, [r7, #22]
            break;
 801210e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8012110:	7dbb      	ldrb	r3, [r7, #22]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d119      	bne.n	801214a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801211c:	b2db      	uxtb	r3, r3
 801211e:	2b03      	cmp	r3, #3
 8012120:	d113      	bne.n	801214a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012122:	7dba      	ldrb	r2, [r7, #22]
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	32ae      	adds	r2, #174	; 0xae
 8012128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801212c:	691b      	ldr	r3, [r3, #16]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d00b      	beq.n	801214a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012132:	7dba      	ldrb	r2, [r7, #22]
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801213a:	7dba      	ldrb	r2, [r7, #22]
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	32ae      	adds	r2, #174	; 0xae
 8012140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012144:	691b      	ldr	r3, [r3, #16]
 8012146:	68f8      	ldr	r0, [r7, #12]
 8012148:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801214a:	68f8      	ldr	r0, [r7, #12]
 801214c:	f001 f8e8 	bl	8013320 <USBD_CtlSendStatus>
 8012150:	e032      	b.n	80121b8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012152:	7afb      	ldrb	r3, [r7, #11]
 8012154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012158:	b2db      	uxtb	r3, r3
 801215a:	4619      	mov	r1, r3
 801215c:	68f8      	ldr	r0, [r7, #12]
 801215e:	f000 f9a5 	bl	80124ac <USBD_CoreFindEP>
 8012162:	4603      	mov	r3, r0
 8012164:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012166:	7dbb      	ldrb	r3, [r7, #22]
 8012168:	2bff      	cmp	r3, #255	; 0xff
 801216a:	d025      	beq.n	80121b8 <USBD_LL_DataOutStage+0x15c>
 801216c:	7dbb      	ldrb	r3, [r7, #22]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d122      	bne.n	80121b8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012178:	b2db      	uxtb	r3, r3
 801217a:	2b03      	cmp	r3, #3
 801217c:	d117      	bne.n	80121ae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801217e:	7dba      	ldrb	r2, [r7, #22]
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	32ae      	adds	r2, #174	; 0xae
 8012184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012188:	699b      	ldr	r3, [r3, #24]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d00f      	beq.n	80121ae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801218e:	7dba      	ldrb	r2, [r7, #22]
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012196:	7dba      	ldrb	r2, [r7, #22]
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	32ae      	adds	r2, #174	; 0xae
 801219c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121a0:	699b      	ldr	r3, [r3, #24]
 80121a2:	7afa      	ldrb	r2, [r7, #11]
 80121a4:	4611      	mov	r1, r2
 80121a6:	68f8      	ldr	r0, [r7, #12]
 80121a8:	4798      	blx	r3
 80121aa:	4603      	mov	r3, r0
 80121ac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80121ae:	7dfb      	ldrb	r3, [r7, #23]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d001      	beq.n	80121b8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80121b4:	7dfb      	ldrb	r3, [r7, #23]
 80121b6:	e000      	b.n	80121ba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80121b8:	2300      	movs	r3, #0
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3718      	adds	r7, #24
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}

080121c2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80121c2:	b580      	push	{r7, lr}
 80121c4:	b086      	sub	sp, #24
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	60f8      	str	r0, [r7, #12]
 80121ca:	460b      	mov	r3, r1
 80121cc:	607a      	str	r2, [r7, #4]
 80121ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80121d0:	7afb      	ldrb	r3, [r7, #11]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d16f      	bne.n	80122b6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	3314      	adds	r3, #20
 80121da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80121e2:	2b02      	cmp	r3, #2
 80121e4:	d15a      	bne.n	801229c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	689a      	ldr	r2, [r3, #8]
 80121ea:	693b      	ldr	r3, [r7, #16]
 80121ec:	68db      	ldr	r3, [r3, #12]
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d914      	bls.n	801221c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80121f2:	693b      	ldr	r3, [r7, #16]
 80121f4:	689a      	ldr	r2, [r3, #8]
 80121f6:	693b      	ldr	r3, [r7, #16]
 80121f8:	68db      	ldr	r3, [r3, #12]
 80121fa:	1ad2      	subs	r2, r2, r3
 80121fc:	693b      	ldr	r3, [r7, #16]
 80121fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	689b      	ldr	r3, [r3, #8]
 8012204:	461a      	mov	r2, r3
 8012206:	6879      	ldr	r1, [r7, #4]
 8012208:	68f8      	ldr	r0, [r7, #12]
 801220a:	f001 f84a 	bl	80132a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801220e:	2300      	movs	r3, #0
 8012210:	2200      	movs	r2, #0
 8012212:	2100      	movs	r1, #0
 8012214:	68f8      	ldr	r0, [r7, #12]
 8012216:	f002 fae5 	bl	80147e4 <USBD_LL_PrepareReceive>
 801221a:	e03f      	b.n	801229c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801221c:	693b      	ldr	r3, [r7, #16]
 801221e:	68da      	ldr	r2, [r3, #12]
 8012220:	693b      	ldr	r3, [r7, #16]
 8012222:	689b      	ldr	r3, [r3, #8]
 8012224:	429a      	cmp	r2, r3
 8012226:	d11c      	bne.n	8012262 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	685a      	ldr	r2, [r3, #4]
 801222c:	693b      	ldr	r3, [r7, #16]
 801222e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012230:	429a      	cmp	r2, r3
 8012232:	d316      	bcc.n	8012262 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012234:	693b      	ldr	r3, [r7, #16]
 8012236:	685a      	ldr	r2, [r3, #4]
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801223e:	429a      	cmp	r2, r3
 8012240:	d20f      	bcs.n	8012262 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012242:	2200      	movs	r2, #0
 8012244:	2100      	movs	r1, #0
 8012246:	68f8      	ldr	r0, [r7, #12]
 8012248:	f001 f82b 	bl	80132a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	2200      	movs	r2, #0
 8012250:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012254:	2300      	movs	r3, #0
 8012256:	2200      	movs	r2, #0
 8012258:	2100      	movs	r1, #0
 801225a:	68f8      	ldr	r0, [r7, #12]
 801225c:	f002 fac2 	bl	80147e4 <USBD_LL_PrepareReceive>
 8012260:	e01c      	b.n	801229c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012268:	b2db      	uxtb	r3, r3
 801226a:	2b03      	cmp	r3, #3
 801226c:	d10f      	bne.n	801228e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012274:	68db      	ldr	r3, [r3, #12]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d009      	beq.n	801228e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	2200      	movs	r2, #0
 801227e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012288:	68db      	ldr	r3, [r3, #12]
 801228a:	68f8      	ldr	r0, [r7, #12]
 801228c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801228e:	2180      	movs	r1, #128	; 0x80
 8012290:	68f8      	ldr	r0, [r7, #12]
 8012292:	f002 f99f 	bl	80145d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012296:	68f8      	ldr	r0, [r7, #12]
 8012298:	f001 f855 	bl	8013346 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d03a      	beq.n	801231c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80122a6:	68f8      	ldr	r0, [r7, #12]
 80122a8:	f7ff fe42 	bl	8011f30 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	2200      	movs	r2, #0
 80122b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80122b4:	e032      	b.n	801231c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80122b6:	7afb      	ldrb	r3, [r7, #11]
 80122b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80122bc:	b2db      	uxtb	r3, r3
 80122be:	4619      	mov	r1, r3
 80122c0:	68f8      	ldr	r0, [r7, #12]
 80122c2:	f000 f8f3 	bl	80124ac <USBD_CoreFindEP>
 80122c6:	4603      	mov	r3, r0
 80122c8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80122ca:	7dfb      	ldrb	r3, [r7, #23]
 80122cc:	2bff      	cmp	r3, #255	; 0xff
 80122ce:	d025      	beq.n	801231c <USBD_LL_DataInStage+0x15a>
 80122d0:	7dfb      	ldrb	r3, [r7, #23]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d122      	bne.n	801231c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122dc:	b2db      	uxtb	r3, r3
 80122de:	2b03      	cmp	r3, #3
 80122e0:	d11c      	bne.n	801231c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80122e2:	7dfa      	ldrb	r2, [r7, #23]
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	32ae      	adds	r2, #174	; 0xae
 80122e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122ec:	695b      	ldr	r3, [r3, #20]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d014      	beq.n	801231c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80122f2:	7dfa      	ldrb	r2, [r7, #23]
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80122fa:	7dfa      	ldrb	r2, [r7, #23]
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	32ae      	adds	r2, #174	; 0xae
 8012300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012304:	695b      	ldr	r3, [r3, #20]
 8012306:	7afa      	ldrb	r2, [r7, #11]
 8012308:	4611      	mov	r1, r2
 801230a:	68f8      	ldr	r0, [r7, #12]
 801230c:	4798      	blx	r3
 801230e:	4603      	mov	r3, r0
 8012310:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8012312:	7dbb      	ldrb	r3, [r7, #22]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d001      	beq.n	801231c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8012318:	7dbb      	ldrb	r3, [r7, #22]
 801231a:	e000      	b.n	801231e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801231c:	2300      	movs	r3, #0
}
 801231e:	4618      	mov	r0, r3
 8012320:	3718      	adds	r7, #24
 8012322:	46bd      	mov	sp, r7
 8012324:	bd80      	pop	{r7, pc}

08012326 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012326:	b580      	push	{r7, lr}
 8012328:	b084      	sub	sp, #16
 801232a:	af00      	add	r7, sp, #0
 801232c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801232e:	2300      	movs	r3, #0
 8012330:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	2201      	movs	r2, #1
 8012336:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	2200      	movs	r2, #0
 801233e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2200      	movs	r2, #0
 8012346:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	2200      	movs	r2, #0
 801234c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	2200      	movs	r2, #0
 8012354:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801235e:	2b00      	cmp	r3, #0
 8012360:	d014      	beq.n	801238c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012368:	685b      	ldr	r3, [r3, #4]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d00e      	beq.n	801238c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012374:	685b      	ldr	r3, [r3, #4]
 8012376:	687a      	ldr	r2, [r7, #4]
 8012378:	6852      	ldr	r2, [r2, #4]
 801237a:	b2d2      	uxtb	r2, r2
 801237c:	4611      	mov	r1, r2
 801237e:	6878      	ldr	r0, [r7, #4]
 8012380:	4798      	blx	r3
 8012382:	4603      	mov	r3, r0
 8012384:	2b00      	cmp	r3, #0
 8012386:	d001      	beq.n	801238c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8012388:	2303      	movs	r3, #3
 801238a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801238c:	2340      	movs	r3, #64	; 0x40
 801238e:	2200      	movs	r2, #0
 8012390:	2100      	movs	r1, #0
 8012392:	6878      	ldr	r0, [r7, #4]
 8012394:	f002 f8aa 	bl	80144ec <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2201      	movs	r2, #1
 801239c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	2240      	movs	r2, #64	; 0x40
 80123a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80123a8:	2340      	movs	r3, #64	; 0x40
 80123aa:	2200      	movs	r2, #0
 80123ac:	2180      	movs	r1, #128	; 0x80
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f002 f89c 	bl	80144ec <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2201      	movs	r2, #1
 80123b8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	2240      	movs	r2, #64	; 0x40
 80123be:	621a      	str	r2, [r3, #32]

  return ret;
 80123c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80123c2:	4618      	mov	r0, r3
 80123c4:	3710      	adds	r7, #16
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd80      	pop	{r7, pc}

080123ca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80123ca:	b480      	push	{r7}
 80123cc:	b083      	sub	sp, #12
 80123ce:	af00      	add	r7, sp, #0
 80123d0:	6078      	str	r0, [r7, #4]
 80123d2:	460b      	mov	r3, r1
 80123d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	78fa      	ldrb	r2, [r7, #3]
 80123da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80123dc:	2300      	movs	r3, #0
}
 80123de:	4618      	mov	r0, r3
 80123e0:	370c      	adds	r7, #12
 80123e2:	46bd      	mov	sp, r7
 80123e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e8:	4770      	bx	lr

080123ea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80123ea:	b480      	push	{r7}
 80123ec:	b083      	sub	sp, #12
 80123ee:	af00      	add	r7, sp, #0
 80123f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123f8:	b2db      	uxtb	r3, r3
 80123fa:	2b04      	cmp	r3, #4
 80123fc:	d006      	beq.n	801240c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012404:	b2da      	uxtb	r2, r3
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2204      	movs	r2, #4
 8012410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012414:	2300      	movs	r3, #0
}
 8012416:	4618      	mov	r0, r3
 8012418:	370c      	adds	r7, #12
 801241a:	46bd      	mov	sp, r7
 801241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012420:	4770      	bx	lr

08012422 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012422:	b480      	push	{r7}
 8012424:	b083      	sub	sp, #12
 8012426:	af00      	add	r7, sp, #0
 8012428:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012430:	b2db      	uxtb	r3, r3
 8012432:	2b04      	cmp	r3, #4
 8012434:	d106      	bne.n	8012444 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801243c:	b2da      	uxtb	r2, r3
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012444:	2300      	movs	r3, #0
}
 8012446:	4618      	mov	r0, r3
 8012448:	370c      	adds	r7, #12
 801244a:	46bd      	mov	sp, r7
 801244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012450:	4770      	bx	lr

08012452 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012452:	b580      	push	{r7, lr}
 8012454:	b082      	sub	sp, #8
 8012456:	af00      	add	r7, sp, #0
 8012458:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012460:	b2db      	uxtb	r3, r3
 8012462:	2b03      	cmp	r3, #3
 8012464:	d110      	bne.n	8012488 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801246c:	2b00      	cmp	r3, #0
 801246e:	d00b      	beq.n	8012488 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012476:	69db      	ldr	r3, [r3, #28]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d005      	beq.n	8012488 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012482:	69db      	ldr	r3, [r3, #28]
 8012484:	6878      	ldr	r0, [r7, #4]
 8012486:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012488:	2300      	movs	r3, #0
}
 801248a:	4618      	mov	r0, r3
 801248c:	3708      	adds	r7, #8
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}

08012492 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012492:	b480      	push	{r7}
 8012494:	b083      	sub	sp, #12
 8012496:	af00      	add	r7, sp, #0
 8012498:	6078      	str	r0, [r7, #4]
 801249a:	460b      	mov	r3, r1
 801249c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801249e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	370c      	adds	r7, #12
 80124a4:	46bd      	mov	sp, r7
 80124a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124aa:	4770      	bx	lr

080124ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80124ac:	b480      	push	{r7}
 80124ae:	b083      	sub	sp, #12
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	460b      	mov	r3, r1
 80124b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80124b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	370c      	adds	r7, #12
 80124be:	46bd      	mov	sp, r7
 80124c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c4:	4770      	bx	lr

080124c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80124c6:	b580      	push	{r7, lr}
 80124c8:	b086      	sub	sp, #24
 80124ca:	af00      	add	r7, sp, #0
 80124cc:	6078      	str	r0, [r7, #4]
 80124ce:	460b      	mov	r3, r1
 80124d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80124da:	2300      	movs	r3, #0
 80124dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	885b      	ldrh	r3, [r3, #2]
 80124e2:	b29a      	uxth	r2, r3
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	781b      	ldrb	r3, [r3, #0]
 80124e8:	b29b      	uxth	r3, r3
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d920      	bls.n	8012530 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	781b      	ldrb	r3, [r3, #0]
 80124f2:	b29b      	uxth	r3, r3
 80124f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80124f6:	e013      	b.n	8012520 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80124f8:	f107 030a 	add.w	r3, r7, #10
 80124fc:	4619      	mov	r1, r3
 80124fe:	6978      	ldr	r0, [r7, #20]
 8012500:	f000 f81b 	bl	801253a <USBD_GetNextDesc>
 8012504:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	785b      	ldrb	r3, [r3, #1]
 801250a:	2b05      	cmp	r3, #5
 801250c:	d108      	bne.n	8012520 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801250e:	697b      	ldr	r3, [r7, #20]
 8012510:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8012512:	693b      	ldr	r3, [r7, #16]
 8012514:	789b      	ldrb	r3, [r3, #2]
 8012516:	78fa      	ldrb	r2, [r7, #3]
 8012518:	429a      	cmp	r2, r3
 801251a:	d008      	beq.n	801252e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801251c:	2300      	movs	r3, #0
 801251e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	885b      	ldrh	r3, [r3, #2]
 8012524:	b29a      	uxth	r2, r3
 8012526:	897b      	ldrh	r3, [r7, #10]
 8012528:	429a      	cmp	r2, r3
 801252a:	d8e5      	bhi.n	80124f8 <USBD_GetEpDesc+0x32>
 801252c:	e000      	b.n	8012530 <USBD_GetEpDesc+0x6a>
          break;
 801252e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8012530:	693b      	ldr	r3, [r7, #16]
}
 8012532:	4618      	mov	r0, r3
 8012534:	3718      	adds	r7, #24
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}

0801253a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801253a:	b480      	push	{r7}
 801253c:	b085      	sub	sp, #20
 801253e:	af00      	add	r7, sp, #0
 8012540:	6078      	str	r0, [r7, #4]
 8012542:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	881a      	ldrh	r2, [r3, #0]
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	781b      	ldrb	r3, [r3, #0]
 8012550:	b29b      	uxth	r3, r3
 8012552:	4413      	add	r3, r2
 8012554:	b29a      	uxth	r2, r3
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	781b      	ldrb	r3, [r3, #0]
 801255e:	461a      	mov	r2, r3
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	4413      	add	r3, r2
 8012564:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8012566:	68fb      	ldr	r3, [r7, #12]
}
 8012568:	4618      	mov	r0, r3
 801256a:	3714      	adds	r7, #20
 801256c:	46bd      	mov	sp, r7
 801256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012572:	4770      	bx	lr

08012574 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012574:	b480      	push	{r7}
 8012576:	b087      	sub	sp, #28
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012580:	697b      	ldr	r3, [r7, #20]
 8012582:	781b      	ldrb	r3, [r3, #0]
 8012584:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	3301      	adds	r3, #1
 801258a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801258c:	697b      	ldr	r3, [r7, #20]
 801258e:	781b      	ldrb	r3, [r3, #0]
 8012590:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012592:	8a3b      	ldrh	r3, [r7, #16]
 8012594:	021b      	lsls	r3, r3, #8
 8012596:	b21a      	sxth	r2, r3
 8012598:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801259c:	4313      	orrs	r3, r2
 801259e:	b21b      	sxth	r3, r3
 80125a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80125a2:	89fb      	ldrh	r3, [r7, #14]
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	371c      	adds	r7, #28
 80125a8:	46bd      	mov	sp, r7
 80125aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ae:	4770      	bx	lr

080125b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b084      	sub	sp, #16
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80125ba:	2300      	movs	r3, #0
 80125bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80125be:	683b      	ldr	r3, [r7, #0]
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80125c6:	2b40      	cmp	r3, #64	; 0x40
 80125c8:	d005      	beq.n	80125d6 <USBD_StdDevReq+0x26>
 80125ca:	2b40      	cmp	r3, #64	; 0x40
 80125cc:	d857      	bhi.n	801267e <USBD_StdDevReq+0xce>
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d00f      	beq.n	80125f2 <USBD_StdDevReq+0x42>
 80125d2:	2b20      	cmp	r3, #32
 80125d4:	d153      	bne.n	801267e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	32ae      	adds	r2, #174	; 0xae
 80125e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125e4:	689b      	ldr	r3, [r3, #8]
 80125e6:	6839      	ldr	r1, [r7, #0]
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	4798      	blx	r3
 80125ec:	4603      	mov	r3, r0
 80125ee:	73fb      	strb	r3, [r7, #15]
      break;
 80125f0:	e04a      	b.n	8012688 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	785b      	ldrb	r3, [r3, #1]
 80125f6:	2b09      	cmp	r3, #9
 80125f8:	d83b      	bhi.n	8012672 <USBD_StdDevReq+0xc2>
 80125fa:	a201      	add	r2, pc, #4	; (adr r2, 8012600 <USBD_StdDevReq+0x50>)
 80125fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012600:	08012655 	.word	0x08012655
 8012604:	08012669 	.word	0x08012669
 8012608:	08012673 	.word	0x08012673
 801260c:	0801265f 	.word	0x0801265f
 8012610:	08012673 	.word	0x08012673
 8012614:	08012633 	.word	0x08012633
 8012618:	08012629 	.word	0x08012629
 801261c:	08012673 	.word	0x08012673
 8012620:	0801264b 	.word	0x0801264b
 8012624:	0801263d 	.word	0x0801263d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012628:	6839      	ldr	r1, [r7, #0]
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f000 fa3c 	bl	8012aa8 <USBD_GetDescriptor>
          break;
 8012630:	e024      	b.n	801267c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012632:	6839      	ldr	r1, [r7, #0]
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f000 fbcb 	bl	8012dd0 <USBD_SetAddress>
          break;
 801263a:	e01f      	b.n	801267c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801263c:	6839      	ldr	r1, [r7, #0]
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f000 fc0a 	bl	8012e58 <USBD_SetConfig>
 8012644:	4603      	mov	r3, r0
 8012646:	73fb      	strb	r3, [r7, #15]
          break;
 8012648:	e018      	b.n	801267c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801264a:	6839      	ldr	r1, [r7, #0]
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f000 fcad 	bl	8012fac <USBD_GetConfig>
          break;
 8012652:	e013      	b.n	801267c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012654:	6839      	ldr	r1, [r7, #0]
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	f000 fcde 	bl	8013018 <USBD_GetStatus>
          break;
 801265c:	e00e      	b.n	801267c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801265e:	6839      	ldr	r1, [r7, #0]
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f000 fd0d 	bl	8013080 <USBD_SetFeature>
          break;
 8012666:	e009      	b.n	801267c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012668:	6839      	ldr	r1, [r7, #0]
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f000 fd31 	bl	80130d2 <USBD_ClrFeature>
          break;
 8012670:	e004      	b.n	801267c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8012672:	6839      	ldr	r1, [r7, #0]
 8012674:	6878      	ldr	r0, [r7, #4]
 8012676:	f000 fd88 	bl	801318a <USBD_CtlError>
          break;
 801267a:	bf00      	nop
      }
      break;
 801267c:	e004      	b.n	8012688 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801267e:	6839      	ldr	r1, [r7, #0]
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	f000 fd82 	bl	801318a <USBD_CtlError>
      break;
 8012686:	bf00      	nop
  }

  return ret;
 8012688:	7bfb      	ldrb	r3, [r7, #15]
}
 801268a:	4618      	mov	r0, r3
 801268c:	3710      	adds	r7, #16
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop

08012694 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b084      	sub	sp, #16
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
 801269c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801269e:	2300      	movs	r3, #0
 80126a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	781b      	ldrb	r3, [r3, #0]
 80126a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80126aa:	2b40      	cmp	r3, #64	; 0x40
 80126ac:	d005      	beq.n	80126ba <USBD_StdItfReq+0x26>
 80126ae:	2b40      	cmp	r3, #64	; 0x40
 80126b0:	d852      	bhi.n	8012758 <USBD_StdItfReq+0xc4>
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d001      	beq.n	80126ba <USBD_StdItfReq+0x26>
 80126b6:	2b20      	cmp	r3, #32
 80126b8:	d14e      	bne.n	8012758 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80126c0:	b2db      	uxtb	r3, r3
 80126c2:	3b01      	subs	r3, #1
 80126c4:	2b02      	cmp	r3, #2
 80126c6:	d840      	bhi.n	801274a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	889b      	ldrh	r3, [r3, #4]
 80126cc:	b2db      	uxtb	r3, r3
 80126ce:	2b01      	cmp	r3, #1
 80126d0:	d836      	bhi.n	8012740 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	889b      	ldrh	r3, [r3, #4]
 80126d6:	b2db      	uxtb	r3, r3
 80126d8:	4619      	mov	r1, r3
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f7ff fed9 	bl	8012492 <USBD_CoreFindIF>
 80126e0:	4603      	mov	r3, r0
 80126e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80126e4:	7bbb      	ldrb	r3, [r7, #14]
 80126e6:	2bff      	cmp	r3, #255	; 0xff
 80126e8:	d01d      	beq.n	8012726 <USBD_StdItfReq+0x92>
 80126ea:	7bbb      	ldrb	r3, [r7, #14]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d11a      	bne.n	8012726 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80126f0:	7bba      	ldrb	r2, [r7, #14]
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	32ae      	adds	r2, #174	; 0xae
 80126f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126fa:	689b      	ldr	r3, [r3, #8]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d00f      	beq.n	8012720 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8012700:	7bba      	ldrb	r2, [r7, #14]
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012708:	7bba      	ldrb	r2, [r7, #14]
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	32ae      	adds	r2, #174	; 0xae
 801270e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012712:	689b      	ldr	r3, [r3, #8]
 8012714:	6839      	ldr	r1, [r7, #0]
 8012716:	6878      	ldr	r0, [r7, #4]
 8012718:	4798      	blx	r3
 801271a:	4603      	mov	r3, r0
 801271c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801271e:	e004      	b.n	801272a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8012720:	2303      	movs	r3, #3
 8012722:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012724:	e001      	b.n	801272a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8012726:	2303      	movs	r3, #3
 8012728:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	88db      	ldrh	r3, [r3, #6]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d110      	bne.n	8012754 <USBD_StdItfReq+0xc0>
 8012732:	7bfb      	ldrb	r3, [r7, #15]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d10d      	bne.n	8012754 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012738:	6878      	ldr	r0, [r7, #4]
 801273a:	f000 fdf1 	bl	8013320 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801273e:	e009      	b.n	8012754 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8012740:	6839      	ldr	r1, [r7, #0]
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f000 fd21 	bl	801318a <USBD_CtlError>
          break;
 8012748:	e004      	b.n	8012754 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801274a:	6839      	ldr	r1, [r7, #0]
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f000 fd1c 	bl	801318a <USBD_CtlError>
          break;
 8012752:	e000      	b.n	8012756 <USBD_StdItfReq+0xc2>
          break;
 8012754:	bf00      	nop
      }
      break;
 8012756:	e004      	b.n	8012762 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8012758:	6839      	ldr	r1, [r7, #0]
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f000 fd15 	bl	801318a <USBD_CtlError>
      break;
 8012760:	bf00      	nop
  }

  return ret;
 8012762:	7bfb      	ldrb	r3, [r7, #15]
}
 8012764:	4618      	mov	r0, r3
 8012766:	3710      	adds	r7, #16
 8012768:	46bd      	mov	sp, r7
 801276a:	bd80      	pop	{r7, pc}

0801276c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b084      	sub	sp, #16
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8012776:	2300      	movs	r3, #0
 8012778:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	889b      	ldrh	r3, [r3, #4]
 801277e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	781b      	ldrb	r3, [r3, #0]
 8012784:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012788:	2b40      	cmp	r3, #64	; 0x40
 801278a:	d007      	beq.n	801279c <USBD_StdEPReq+0x30>
 801278c:	2b40      	cmp	r3, #64	; 0x40
 801278e:	f200 817f 	bhi.w	8012a90 <USBD_StdEPReq+0x324>
 8012792:	2b00      	cmp	r3, #0
 8012794:	d02a      	beq.n	80127ec <USBD_StdEPReq+0x80>
 8012796:	2b20      	cmp	r3, #32
 8012798:	f040 817a 	bne.w	8012a90 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801279c:	7bbb      	ldrb	r3, [r7, #14]
 801279e:	4619      	mov	r1, r3
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f7ff fe83 	bl	80124ac <USBD_CoreFindEP>
 80127a6:	4603      	mov	r3, r0
 80127a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80127aa:	7b7b      	ldrb	r3, [r7, #13]
 80127ac:	2bff      	cmp	r3, #255	; 0xff
 80127ae:	f000 8174 	beq.w	8012a9a <USBD_StdEPReq+0x32e>
 80127b2:	7b7b      	ldrb	r3, [r7, #13]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	f040 8170 	bne.w	8012a9a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80127ba:	7b7a      	ldrb	r2, [r7, #13]
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80127c2:	7b7a      	ldrb	r2, [r7, #13]
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	32ae      	adds	r2, #174	; 0xae
 80127c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127cc:	689b      	ldr	r3, [r3, #8]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	f000 8163 	beq.w	8012a9a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80127d4:	7b7a      	ldrb	r2, [r7, #13]
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	32ae      	adds	r2, #174	; 0xae
 80127da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127de:	689b      	ldr	r3, [r3, #8]
 80127e0:	6839      	ldr	r1, [r7, #0]
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	4798      	blx	r3
 80127e6:	4603      	mov	r3, r0
 80127e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80127ea:	e156      	b.n	8012a9a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	785b      	ldrb	r3, [r3, #1]
 80127f0:	2b03      	cmp	r3, #3
 80127f2:	d008      	beq.n	8012806 <USBD_StdEPReq+0x9a>
 80127f4:	2b03      	cmp	r3, #3
 80127f6:	f300 8145 	bgt.w	8012a84 <USBD_StdEPReq+0x318>
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	f000 809b 	beq.w	8012936 <USBD_StdEPReq+0x1ca>
 8012800:	2b01      	cmp	r3, #1
 8012802:	d03c      	beq.n	801287e <USBD_StdEPReq+0x112>
 8012804:	e13e      	b.n	8012a84 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801280c:	b2db      	uxtb	r3, r3
 801280e:	2b02      	cmp	r3, #2
 8012810:	d002      	beq.n	8012818 <USBD_StdEPReq+0xac>
 8012812:	2b03      	cmp	r3, #3
 8012814:	d016      	beq.n	8012844 <USBD_StdEPReq+0xd8>
 8012816:	e02c      	b.n	8012872 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012818:	7bbb      	ldrb	r3, [r7, #14]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d00d      	beq.n	801283a <USBD_StdEPReq+0xce>
 801281e:	7bbb      	ldrb	r3, [r7, #14]
 8012820:	2b80      	cmp	r3, #128	; 0x80
 8012822:	d00a      	beq.n	801283a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012824:	7bbb      	ldrb	r3, [r7, #14]
 8012826:	4619      	mov	r1, r3
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f001 fed3 	bl	80145d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801282e:	2180      	movs	r1, #128	; 0x80
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f001 fecf 	bl	80145d4 <USBD_LL_StallEP>
 8012836:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012838:	e020      	b.n	801287c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801283a:	6839      	ldr	r1, [r7, #0]
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f000 fca4 	bl	801318a <USBD_CtlError>
              break;
 8012842:	e01b      	b.n	801287c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	885b      	ldrh	r3, [r3, #2]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d10e      	bne.n	801286a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801284c:	7bbb      	ldrb	r3, [r7, #14]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d00b      	beq.n	801286a <USBD_StdEPReq+0xfe>
 8012852:	7bbb      	ldrb	r3, [r7, #14]
 8012854:	2b80      	cmp	r3, #128	; 0x80
 8012856:	d008      	beq.n	801286a <USBD_StdEPReq+0xfe>
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	88db      	ldrh	r3, [r3, #6]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d104      	bne.n	801286a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012860:	7bbb      	ldrb	r3, [r7, #14]
 8012862:	4619      	mov	r1, r3
 8012864:	6878      	ldr	r0, [r7, #4]
 8012866:	f001 feb5 	bl	80145d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801286a:	6878      	ldr	r0, [r7, #4]
 801286c:	f000 fd58 	bl	8013320 <USBD_CtlSendStatus>

              break;
 8012870:	e004      	b.n	801287c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8012872:	6839      	ldr	r1, [r7, #0]
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f000 fc88 	bl	801318a <USBD_CtlError>
              break;
 801287a:	bf00      	nop
          }
          break;
 801287c:	e107      	b.n	8012a8e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012884:	b2db      	uxtb	r3, r3
 8012886:	2b02      	cmp	r3, #2
 8012888:	d002      	beq.n	8012890 <USBD_StdEPReq+0x124>
 801288a:	2b03      	cmp	r3, #3
 801288c:	d016      	beq.n	80128bc <USBD_StdEPReq+0x150>
 801288e:	e04b      	b.n	8012928 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012890:	7bbb      	ldrb	r3, [r7, #14]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d00d      	beq.n	80128b2 <USBD_StdEPReq+0x146>
 8012896:	7bbb      	ldrb	r3, [r7, #14]
 8012898:	2b80      	cmp	r3, #128	; 0x80
 801289a:	d00a      	beq.n	80128b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801289c:	7bbb      	ldrb	r3, [r7, #14]
 801289e:	4619      	mov	r1, r3
 80128a0:	6878      	ldr	r0, [r7, #4]
 80128a2:	f001 fe97 	bl	80145d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80128a6:	2180      	movs	r1, #128	; 0x80
 80128a8:	6878      	ldr	r0, [r7, #4]
 80128aa:	f001 fe93 	bl	80145d4 <USBD_LL_StallEP>
 80128ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80128b0:	e040      	b.n	8012934 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80128b2:	6839      	ldr	r1, [r7, #0]
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f000 fc68 	bl	801318a <USBD_CtlError>
              break;
 80128ba:	e03b      	b.n	8012934 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	885b      	ldrh	r3, [r3, #2]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d136      	bne.n	8012932 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80128c4:	7bbb      	ldrb	r3, [r7, #14]
 80128c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d004      	beq.n	80128d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80128ce:	7bbb      	ldrb	r3, [r7, #14]
 80128d0:	4619      	mov	r1, r3
 80128d2:	6878      	ldr	r0, [r7, #4]
 80128d4:	f001 feb4 	bl	8014640 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f000 fd21 	bl	8013320 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80128de:	7bbb      	ldrb	r3, [r7, #14]
 80128e0:	4619      	mov	r1, r3
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f7ff fde2 	bl	80124ac <USBD_CoreFindEP>
 80128e8:	4603      	mov	r3, r0
 80128ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80128ec:	7b7b      	ldrb	r3, [r7, #13]
 80128ee:	2bff      	cmp	r3, #255	; 0xff
 80128f0:	d01f      	beq.n	8012932 <USBD_StdEPReq+0x1c6>
 80128f2:	7b7b      	ldrb	r3, [r7, #13]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d11c      	bne.n	8012932 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80128f8:	7b7a      	ldrb	r2, [r7, #13]
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012900:	7b7a      	ldrb	r2, [r7, #13]
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	32ae      	adds	r2, #174	; 0xae
 8012906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801290a:	689b      	ldr	r3, [r3, #8]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d010      	beq.n	8012932 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012910:	7b7a      	ldrb	r2, [r7, #13]
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	32ae      	adds	r2, #174	; 0xae
 8012916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801291a:	689b      	ldr	r3, [r3, #8]
 801291c:	6839      	ldr	r1, [r7, #0]
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	4798      	blx	r3
 8012922:	4603      	mov	r3, r0
 8012924:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8012926:	e004      	b.n	8012932 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012928:	6839      	ldr	r1, [r7, #0]
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f000 fc2d 	bl	801318a <USBD_CtlError>
              break;
 8012930:	e000      	b.n	8012934 <USBD_StdEPReq+0x1c8>
              break;
 8012932:	bf00      	nop
          }
          break;
 8012934:	e0ab      	b.n	8012a8e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801293c:	b2db      	uxtb	r3, r3
 801293e:	2b02      	cmp	r3, #2
 8012940:	d002      	beq.n	8012948 <USBD_StdEPReq+0x1dc>
 8012942:	2b03      	cmp	r3, #3
 8012944:	d032      	beq.n	80129ac <USBD_StdEPReq+0x240>
 8012946:	e097      	b.n	8012a78 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012948:	7bbb      	ldrb	r3, [r7, #14]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d007      	beq.n	801295e <USBD_StdEPReq+0x1f2>
 801294e:	7bbb      	ldrb	r3, [r7, #14]
 8012950:	2b80      	cmp	r3, #128	; 0x80
 8012952:	d004      	beq.n	801295e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8012954:	6839      	ldr	r1, [r7, #0]
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f000 fc17 	bl	801318a <USBD_CtlError>
                break;
 801295c:	e091      	b.n	8012a82 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801295e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012962:	2b00      	cmp	r3, #0
 8012964:	da0b      	bge.n	801297e <USBD_StdEPReq+0x212>
 8012966:	7bbb      	ldrb	r3, [r7, #14]
 8012968:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801296c:	4613      	mov	r3, r2
 801296e:	009b      	lsls	r3, r3, #2
 8012970:	4413      	add	r3, r2
 8012972:	009b      	lsls	r3, r3, #2
 8012974:	3310      	adds	r3, #16
 8012976:	687a      	ldr	r2, [r7, #4]
 8012978:	4413      	add	r3, r2
 801297a:	3304      	adds	r3, #4
 801297c:	e00b      	b.n	8012996 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801297e:	7bbb      	ldrb	r3, [r7, #14]
 8012980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012984:	4613      	mov	r3, r2
 8012986:	009b      	lsls	r3, r3, #2
 8012988:	4413      	add	r3, r2
 801298a:	009b      	lsls	r3, r3, #2
 801298c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012990:	687a      	ldr	r2, [r7, #4]
 8012992:	4413      	add	r3, r2
 8012994:	3304      	adds	r3, #4
 8012996:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012998:	68bb      	ldr	r3, [r7, #8]
 801299a:	2200      	movs	r2, #0
 801299c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	2202      	movs	r2, #2
 80129a2:	4619      	mov	r1, r3
 80129a4:	6878      	ldr	r0, [r7, #4]
 80129a6:	f000 fc61 	bl	801326c <USBD_CtlSendData>
              break;
 80129aa:	e06a      	b.n	8012a82 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80129ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	da11      	bge.n	80129d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80129b4:	7bbb      	ldrb	r3, [r7, #14]
 80129b6:	f003 020f 	and.w	r2, r3, #15
 80129ba:	6879      	ldr	r1, [r7, #4]
 80129bc:	4613      	mov	r3, r2
 80129be:	009b      	lsls	r3, r3, #2
 80129c0:	4413      	add	r3, r2
 80129c2:	009b      	lsls	r3, r3, #2
 80129c4:	440b      	add	r3, r1
 80129c6:	3324      	adds	r3, #36	; 0x24
 80129c8:	881b      	ldrh	r3, [r3, #0]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d117      	bne.n	80129fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80129ce:	6839      	ldr	r1, [r7, #0]
 80129d0:	6878      	ldr	r0, [r7, #4]
 80129d2:	f000 fbda 	bl	801318a <USBD_CtlError>
                  break;
 80129d6:	e054      	b.n	8012a82 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80129d8:	7bbb      	ldrb	r3, [r7, #14]
 80129da:	f003 020f 	and.w	r2, r3, #15
 80129de:	6879      	ldr	r1, [r7, #4]
 80129e0:	4613      	mov	r3, r2
 80129e2:	009b      	lsls	r3, r3, #2
 80129e4:	4413      	add	r3, r2
 80129e6:	009b      	lsls	r3, r3, #2
 80129e8:	440b      	add	r3, r1
 80129ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80129ee:	881b      	ldrh	r3, [r3, #0]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d104      	bne.n	80129fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80129f4:	6839      	ldr	r1, [r7, #0]
 80129f6:	6878      	ldr	r0, [r7, #4]
 80129f8:	f000 fbc7 	bl	801318a <USBD_CtlError>
                  break;
 80129fc:	e041      	b.n	8012a82 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80129fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	da0b      	bge.n	8012a1e <USBD_StdEPReq+0x2b2>
 8012a06:	7bbb      	ldrb	r3, [r7, #14]
 8012a08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012a0c:	4613      	mov	r3, r2
 8012a0e:	009b      	lsls	r3, r3, #2
 8012a10:	4413      	add	r3, r2
 8012a12:	009b      	lsls	r3, r3, #2
 8012a14:	3310      	adds	r3, #16
 8012a16:	687a      	ldr	r2, [r7, #4]
 8012a18:	4413      	add	r3, r2
 8012a1a:	3304      	adds	r3, #4
 8012a1c:	e00b      	b.n	8012a36 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012a1e:	7bbb      	ldrb	r3, [r7, #14]
 8012a20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012a24:	4613      	mov	r3, r2
 8012a26:	009b      	lsls	r3, r3, #2
 8012a28:	4413      	add	r3, r2
 8012a2a:	009b      	lsls	r3, r3, #2
 8012a2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012a30:	687a      	ldr	r2, [r7, #4]
 8012a32:	4413      	add	r3, r2
 8012a34:	3304      	adds	r3, #4
 8012a36:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012a38:	7bbb      	ldrb	r3, [r7, #14]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d002      	beq.n	8012a44 <USBD_StdEPReq+0x2d8>
 8012a3e:	7bbb      	ldrb	r3, [r7, #14]
 8012a40:	2b80      	cmp	r3, #128	; 0x80
 8012a42:	d103      	bne.n	8012a4c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	2200      	movs	r2, #0
 8012a48:	601a      	str	r2, [r3, #0]
 8012a4a:	e00e      	b.n	8012a6a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012a4c:	7bbb      	ldrb	r3, [r7, #14]
 8012a4e:	4619      	mov	r1, r3
 8012a50:	6878      	ldr	r0, [r7, #4]
 8012a52:	f001 fe2b 	bl	80146ac <USBD_LL_IsStallEP>
 8012a56:	4603      	mov	r3, r0
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d003      	beq.n	8012a64 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	2201      	movs	r2, #1
 8012a60:	601a      	str	r2, [r3, #0]
 8012a62:	e002      	b.n	8012a6a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	2200      	movs	r2, #0
 8012a68:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012a6a:	68bb      	ldr	r3, [r7, #8]
 8012a6c:	2202      	movs	r2, #2
 8012a6e:	4619      	mov	r1, r3
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f000 fbfb 	bl	801326c <USBD_CtlSendData>
              break;
 8012a76:	e004      	b.n	8012a82 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8012a78:	6839      	ldr	r1, [r7, #0]
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f000 fb85 	bl	801318a <USBD_CtlError>
              break;
 8012a80:	bf00      	nop
          }
          break;
 8012a82:	e004      	b.n	8012a8e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8012a84:	6839      	ldr	r1, [r7, #0]
 8012a86:	6878      	ldr	r0, [r7, #4]
 8012a88:	f000 fb7f 	bl	801318a <USBD_CtlError>
          break;
 8012a8c:	bf00      	nop
      }
      break;
 8012a8e:	e005      	b.n	8012a9c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8012a90:	6839      	ldr	r1, [r7, #0]
 8012a92:	6878      	ldr	r0, [r7, #4]
 8012a94:	f000 fb79 	bl	801318a <USBD_CtlError>
      break;
 8012a98:	e000      	b.n	8012a9c <USBD_StdEPReq+0x330>
      break;
 8012a9a:	bf00      	nop
  }

  return ret;
 8012a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	3710      	adds	r7, #16
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}
	...

08012aa8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b084      	sub	sp, #16
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012aba:	2300      	movs	r3, #0
 8012abc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	885b      	ldrh	r3, [r3, #2]
 8012ac2:	0a1b      	lsrs	r3, r3, #8
 8012ac4:	b29b      	uxth	r3, r3
 8012ac6:	3b01      	subs	r3, #1
 8012ac8:	2b0e      	cmp	r3, #14
 8012aca:	f200 8152 	bhi.w	8012d72 <USBD_GetDescriptor+0x2ca>
 8012ace:	a201      	add	r2, pc, #4	; (adr r2, 8012ad4 <USBD_GetDescriptor+0x2c>)
 8012ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ad4:	08012b45 	.word	0x08012b45
 8012ad8:	08012b5d 	.word	0x08012b5d
 8012adc:	08012b9d 	.word	0x08012b9d
 8012ae0:	08012d73 	.word	0x08012d73
 8012ae4:	08012d73 	.word	0x08012d73
 8012ae8:	08012d13 	.word	0x08012d13
 8012aec:	08012d3f 	.word	0x08012d3f
 8012af0:	08012d73 	.word	0x08012d73
 8012af4:	08012d73 	.word	0x08012d73
 8012af8:	08012d73 	.word	0x08012d73
 8012afc:	08012d73 	.word	0x08012d73
 8012b00:	08012d73 	.word	0x08012d73
 8012b04:	08012d73 	.word	0x08012d73
 8012b08:	08012d73 	.word	0x08012d73
 8012b0c:	08012b11 	.word	0x08012b11
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b16:	69db      	ldr	r3, [r3, #28]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d00b      	beq.n	8012b34 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b22:	69db      	ldr	r3, [r3, #28]
 8012b24:	687a      	ldr	r2, [r7, #4]
 8012b26:	7c12      	ldrb	r2, [r2, #16]
 8012b28:	f107 0108 	add.w	r1, r7, #8
 8012b2c:	4610      	mov	r0, r2
 8012b2e:	4798      	blx	r3
 8012b30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012b32:	e126      	b.n	8012d82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012b34:	6839      	ldr	r1, [r7, #0]
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	f000 fb27 	bl	801318a <USBD_CtlError>
        err++;
 8012b3c:	7afb      	ldrb	r3, [r7, #11]
 8012b3e:	3301      	adds	r3, #1
 8012b40:	72fb      	strb	r3, [r7, #11]
      break;
 8012b42:	e11e      	b.n	8012d82 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	687a      	ldr	r2, [r7, #4]
 8012b4e:	7c12      	ldrb	r2, [r2, #16]
 8012b50:	f107 0108 	add.w	r1, r7, #8
 8012b54:	4610      	mov	r0, r2
 8012b56:	4798      	blx	r3
 8012b58:	60f8      	str	r0, [r7, #12]
      break;
 8012b5a:	e112      	b.n	8012d82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	7c1b      	ldrb	r3, [r3, #16]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d10d      	bne.n	8012b80 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b6c:	f107 0208 	add.w	r2, r7, #8
 8012b70:	4610      	mov	r0, r2
 8012b72:	4798      	blx	r3
 8012b74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	3301      	adds	r3, #1
 8012b7a:	2202      	movs	r2, #2
 8012b7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012b7e:	e100      	b.n	8012d82 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b88:	f107 0208 	add.w	r2, r7, #8
 8012b8c:	4610      	mov	r0, r2
 8012b8e:	4798      	blx	r3
 8012b90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	3301      	adds	r3, #1
 8012b96:	2202      	movs	r2, #2
 8012b98:	701a      	strb	r2, [r3, #0]
      break;
 8012b9a:	e0f2      	b.n	8012d82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	885b      	ldrh	r3, [r3, #2]
 8012ba0:	b2db      	uxtb	r3, r3
 8012ba2:	2b05      	cmp	r3, #5
 8012ba4:	f200 80ac 	bhi.w	8012d00 <USBD_GetDescriptor+0x258>
 8012ba8:	a201      	add	r2, pc, #4	; (adr r2, 8012bb0 <USBD_GetDescriptor+0x108>)
 8012baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bae:	bf00      	nop
 8012bb0:	08012bc9 	.word	0x08012bc9
 8012bb4:	08012bfd 	.word	0x08012bfd
 8012bb8:	08012c31 	.word	0x08012c31
 8012bbc:	08012c65 	.word	0x08012c65
 8012bc0:	08012c99 	.word	0x08012c99
 8012bc4:	08012ccd 	.word	0x08012ccd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012bce:	685b      	ldr	r3, [r3, #4]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d00b      	beq.n	8012bec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012bda:	685b      	ldr	r3, [r3, #4]
 8012bdc:	687a      	ldr	r2, [r7, #4]
 8012bde:	7c12      	ldrb	r2, [r2, #16]
 8012be0:	f107 0108 	add.w	r1, r7, #8
 8012be4:	4610      	mov	r0, r2
 8012be6:	4798      	blx	r3
 8012be8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012bea:	e091      	b.n	8012d10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012bec:	6839      	ldr	r1, [r7, #0]
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f000 facb 	bl	801318a <USBD_CtlError>
            err++;
 8012bf4:	7afb      	ldrb	r3, [r7, #11]
 8012bf6:	3301      	adds	r3, #1
 8012bf8:	72fb      	strb	r3, [r7, #11]
          break;
 8012bfa:	e089      	b.n	8012d10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c02:	689b      	ldr	r3, [r3, #8]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d00b      	beq.n	8012c20 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c0e:	689b      	ldr	r3, [r3, #8]
 8012c10:	687a      	ldr	r2, [r7, #4]
 8012c12:	7c12      	ldrb	r2, [r2, #16]
 8012c14:	f107 0108 	add.w	r1, r7, #8
 8012c18:	4610      	mov	r0, r2
 8012c1a:	4798      	blx	r3
 8012c1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c1e:	e077      	b.n	8012d10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c20:	6839      	ldr	r1, [r7, #0]
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f000 fab1 	bl	801318a <USBD_CtlError>
            err++;
 8012c28:	7afb      	ldrb	r3, [r7, #11]
 8012c2a:	3301      	adds	r3, #1
 8012c2c:	72fb      	strb	r3, [r7, #11]
          break;
 8012c2e:	e06f      	b.n	8012d10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c36:	68db      	ldr	r3, [r3, #12]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d00b      	beq.n	8012c54 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c42:	68db      	ldr	r3, [r3, #12]
 8012c44:	687a      	ldr	r2, [r7, #4]
 8012c46:	7c12      	ldrb	r2, [r2, #16]
 8012c48:	f107 0108 	add.w	r1, r7, #8
 8012c4c:	4610      	mov	r0, r2
 8012c4e:	4798      	blx	r3
 8012c50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c52:	e05d      	b.n	8012d10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c54:	6839      	ldr	r1, [r7, #0]
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f000 fa97 	bl	801318a <USBD_CtlError>
            err++;
 8012c5c:	7afb      	ldrb	r3, [r7, #11]
 8012c5e:	3301      	adds	r3, #1
 8012c60:	72fb      	strb	r3, [r7, #11]
          break;
 8012c62:	e055      	b.n	8012d10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c6a:	691b      	ldr	r3, [r3, #16]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d00b      	beq.n	8012c88 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c76:	691b      	ldr	r3, [r3, #16]
 8012c78:	687a      	ldr	r2, [r7, #4]
 8012c7a:	7c12      	ldrb	r2, [r2, #16]
 8012c7c:	f107 0108 	add.w	r1, r7, #8
 8012c80:	4610      	mov	r0, r2
 8012c82:	4798      	blx	r3
 8012c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c86:	e043      	b.n	8012d10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c88:	6839      	ldr	r1, [r7, #0]
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	f000 fa7d 	bl	801318a <USBD_CtlError>
            err++;
 8012c90:	7afb      	ldrb	r3, [r7, #11]
 8012c92:	3301      	adds	r3, #1
 8012c94:	72fb      	strb	r3, [r7, #11]
          break;
 8012c96:	e03b      	b.n	8012d10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c9e:	695b      	ldr	r3, [r3, #20]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d00b      	beq.n	8012cbc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012caa:	695b      	ldr	r3, [r3, #20]
 8012cac:	687a      	ldr	r2, [r7, #4]
 8012cae:	7c12      	ldrb	r2, [r2, #16]
 8012cb0:	f107 0108 	add.w	r1, r7, #8
 8012cb4:	4610      	mov	r0, r2
 8012cb6:	4798      	blx	r3
 8012cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012cba:	e029      	b.n	8012d10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012cbc:	6839      	ldr	r1, [r7, #0]
 8012cbe:	6878      	ldr	r0, [r7, #4]
 8012cc0:	f000 fa63 	bl	801318a <USBD_CtlError>
            err++;
 8012cc4:	7afb      	ldrb	r3, [r7, #11]
 8012cc6:	3301      	adds	r3, #1
 8012cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8012cca:	e021      	b.n	8012d10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012cd2:	699b      	ldr	r3, [r3, #24]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d00b      	beq.n	8012cf0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012cde:	699b      	ldr	r3, [r3, #24]
 8012ce0:	687a      	ldr	r2, [r7, #4]
 8012ce2:	7c12      	ldrb	r2, [r2, #16]
 8012ce4:	f107 0108 	add.w	r1, r7, #8
 8012ce8:	4610      	mov	r0, r2
 8012cea:	4798      	blx	r3
 8012cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012cee:	e00f      	b.n	8012d10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012cf0:	6839      	ldr	r1, [r7, #0]
 8012cf2:	6878      	ldr	r0, [r7, #4]
 8012cf4:	f000 fa49 	bl	801318a <USBD_CtlError>
            err++;
 8012cf8:	7afb      	ldrb	r3, [r7, #11]
 8012cfa:	3301      	adds	r3, #1
 8012cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8012cfe:	e007      	b.n	8012d10 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012d00:	6839      	ldr	r1, [r7, #0]
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f000 fa41 	bl	801318a <USBD_CtlError>
          err++;
 8012d08:	7afb      	ldrb	r3, [r7, #11]
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012d0e:	bf00      	nop
      }
      break;
 8012d10:	e037      	b.n	8012d82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	7c1b      	ldrb	r3, [r3, #16]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d109      	bne.n	8012d2e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d22:	f107 0208 	add.w	r2, r7, #8
 8012d26:	4610      	mov	r0, r2
 8012d28:	4798      	blx	r3
 8012d2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012d2c:	e029      	b.n	8012d82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012d2e:	6839      	ldr	r1, [r7, #0]
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	f000 fa2a 	bl	801318a <USBD_CtlError>
        err++;
 8012d36:	7afb      	ldrb	r3, [r7, #11]
 8012d38:	3301      	adds	r3, #1
 8012d3a:	72fb      	strb	r3, [r7, #11]
      break;
 8012d3c:	e021      	b.n	8012d82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	7c1b      	ldrb	r3, [r3, #16]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d10d      	bne.n	8012d62 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d4e:	f107 0208 	add.w	r2, r7, #8
 8012d52:	4610      	mov	r0, r2
 8012d54:	4798      	blx	r3
 8012d56:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	3301      	adds	r3, #1
 8012d5c:	2207      	movs	r2, #7
 8012d5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012d60:	e00f      	b.n	8012d82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012d62:	6839      	ldr	r1, [r7, #0]
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f000 fa10 	bl	801318a <USBD_CtlError>
        err++;
 8012d6a:	7afb      	ldrb	r3, [r7, #11]
 8012d6c:	3301      	adds	r3, #1
 8012d6e:	72fb      	strb	r3, [r7, #11]
      break;
 8012d70:	e007      	b.n	8012d82 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012d72:	6839      	ldr	r1, [r7, #0]
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f000 fa08 	bl	801318a <USBD_CtlError>
      err++;
 8012d7a:	7afb      	ldrb	r3, [r7, #11]
 8012d7c:	3301      	adds	r3, #1
 8012d7e:	72fb      	strb	r3, [r7, #11]
      break;
 8012d80:	bf00      	nop
  }

  if (err != 0U)
 8012d82:	7afb      	ldrb	r3, [r7, #11]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d11e      	bne.n	8012dc6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	88db      	ldrh	r3, [r3, #6]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d016      	beq.n	8012dbe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012d90:	893b      	ldrh	r3, [r7, #8]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d00e      	beq.n	8012db4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	88da      	ldrh	r2, [r3, #6]
 8012d9a:	893b      	ldrh	r3, [r7, #8]
 8012d9c:	4293      	cmp	r3, r2
 8012d9e:	bf28      	it	cs
 8012da0:	4613      	movcs	r3, r2
 8012da2:	b29b      	uxth	r3, r3
 8012da4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012da6:	893b      	ldrh	r3, [r7, #8]
 8012da8:	461a      	mov	r2, r3
 8012daa:	68f9      	ldr	r1, [r7, #12]
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	f000 fa5d 	bl	801326c <USBD_CtlSendData>
 8012db2:	e009      	b.n	8012dc8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012db4:	6839      	ldr	r1, [r7, #0]
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f000 f9e7 	bl	801318a <USBD_CtlError>
 8012dbc:	e004      	b.n	8012dc8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012dbe:	6878      	ldr	r0, [r7, #4]
 8012dc0:	f000 faae 	bl	8013320 <USBD_CtlSendStatus>
 8012dc4:	e000      	b.n	8012dc8 <USBD_GetDescriptor+0x320>
    return;
 8012dc6:	bf00      	nop
  }
}
 8012dc8:	3710      	adds	r7, #16
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop

08012dd0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b084      	sub	sp, #16
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	889b      	ldrh	r3, [r3, #4]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d131      	bne.n	8012e46 <USBD_SetAddress+0x76>
 8012de2:	683b      	ldr	r3, [r7, #0]
 8012de4:	88db      	ldrh	r3, [r3, #6]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d12d      	bne.n	8012e46 <USBD_SetAddress+0x76>
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	885b      	ldrh	r3, [r3, #2]
 8012dee:	2b7f      	cmp	r3, #127	; 0x7f
 8012df0:	d829      	bhi.n	8012e46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012df2:	683b      	ldr	r3, [r7, #0]
 8012df4:	885b      	ldrh	r3, [r3, #2]
 8012df6:	b2db      	uxtb	r3, r3
 8012df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012dfc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e04:	b2db      	uxtb	r3, r3
 8012e06:	2b03      	cmp	r3, #3
 8012e08:	d104      	bne.n	8012e14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012e0a:	6839      	ldr	r1, [r7, #0]
 8012e0c:	6878      	ldr	r0, [r7, #4]
 8012e0e:	f000 f9bc 	bl	801318a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e12:	e01d      	b.n	8012e50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	7bfa      	ldrb	r2, [r7, #15]
 8012e18:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012e1c:	7bfb      	ldrb	r3, [r7, #15]
 8012e1e:	4619      	mov	r1, r3
 8012e20:	6878      	ldr	r0, [r7, #4]
 8012e22:	f001 fc71 	bl	8014708 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	f000 fa7a 	bl	8013320 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012e2c:	7bfb      	ldrb	r3, [r7, #15]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d004      	beq.n	8012e3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2202      	movs	r2, #2
 8012e36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e3a:	e009      	b.n	8012e50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2201      	movs	r2, #1
 8012e40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e44:	e004      	b.n	8012e50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012e46:	6839      	ldr	r1, [r7, #0]
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f000 f99e 	bl	801318a <USBD_CtlError>
  }
}
 8012e4e:	bf00      	nop
 8012e50:	bf00      	nop
 8012e52:	3710      	adds	r7, #16
 8012e54:	46bd      	mov	sp, r7
 8012e56:	bd80      	pop	{r7, pc}

08012e58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b084      	sub	sp, #16
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
 8012e60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e62:	2300      	movs	r3, #0
 8012e64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	885b      	ldrh	r3, [r3, #2]
 8012e6a:	b2da      	uxtb	r2, r3
 8012e6c:	4b4e      	ldr	r3, [pc, #312]	; (8012fa8 <USBD_SetConfig+0x150>)
 8012e6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012e70:	4b4d      	ldr	r3, [pc, #308]	; (8012fa8 <USBD_SetConfig+0x150>)
 8012e72:	781b      	ldrb	r3, [r3, #0]
 8012e74:	2b01      	cmp	r3, #1
 8012e76:	d905      	bls.n	8012e84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012e78:	6839      	ldr	r1, [r7, #0]
 8012e7a:	6878      	ldr	r0, [r7, #4]
 8012e7c:	f000 f985 	bl	801318a <USBD_CtlError>
    return USBD_FAIL;
 8012e80:	2303      	movs	r3, #3
 8012e82:	e08c      	b.n	8012f9e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e8a:	b2db      	uxtb	r3, r3
 8012e8c:	2b02      	cmp	r3, #2
 8012e8e:	d002      	beq.n	8012e96 <USBD_SetConfig+0x3e>
 8012e90:	2b03      	cmp	r3, #3
 8012e92:	d029      	beq.n	8012ee8 <USBD_SetConfig+0x90>
 8012e94:	e075      	b.n	8012f82 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012e96:	4b44      	ldr	r3, [pc, #272]	; (8012fa8 <USBD_SetConfig+0x150>)
 8012e98:	781b      	ldrb	r3, [r3, #0]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d020      	beq.n	8012ee0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012e9e:	4b42      	ldr	r3, [pc, #264]	; (8012fa8 <USBD_SetConfig+0x150>)
 8012ea0:	781b      	ldrb	r3, [r3, #0]
 8012ea2:	461a      	mov	r2, r3
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012ea8:	4b3f      	ldr	r3, [pc, #252]	; (8012fa8 <USBD_SetConfig+0x150>)
 8012eaa:	781b      	ldrb	r3, [r3, #0]
 8012eac:	4619      	mov	r1, r3
 8012eae:	6878      	ldr	r0, [r7, #4]
 8012eb0:	f7ff f849 	bl	8011f46 <USBD_SetClassConfig>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012eb8:	7bfb      	ldrb	r3, [r7, #15]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d008      	beq.n	8012ed0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012ebe:	6839      	ldr	r1, [r7, #0]
 8012ec0:	6878      	ldr	r0, [r7, #4]
 8012ec2:	f000 f962 	bl	801318a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	2202      	movs	r2, #2
 8012eca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012ece:	e065      	b.n	8012f9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012ed0:	6878      	ldr	r0, [r7, #4]
 8012ed2:	f000 fa25 	bl	8013320 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	2203      	movs	r2, #3
 8012eda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012ede:	e05d      	b.n	8012f9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f000 fa1d 	bl	8013320 <USBD_CtlSendStatus>
      break;
 8012ee6:	e059      	b.n	8012f9c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012ee8:	4b2f      	ldr	r3, [pc, #188]	; (8012fa8 <USBD_SetConfig+0x150>)
 8012eea:	781b      	ldrb	r3, [r3, #0]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d112      	bne.n	8012f16 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2202      	movs	r2, #2
 8012ef4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012ef8:	4b2b      	ldr	r3, [pc, #172]	; (8012fa8 <USBD_SetConfig+0x150>)
 8012efa:	781b      	ldrb	r3, [r3, #0]
 8012efc:	461a      	mov	r2, r3
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012f02:	4b29      	ldr	r3, [pc, #164]	; (8012fa8 <USBD_SetConfig+0x150>)
 8012f04:	781b      	ldrb	r3, [r3, #0]
 8012f06:	4619      	mov	r1, r3
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	f7ff f838 	bl	8011f7e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012f0e:	6878      	ldr	r0, [r7, #4]
 8012f10:	f000 fa06 	bl	8013320 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012f14:	e042      	b.n	8012f9c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012f16:	4b24      	ldr	r3, [pc, #144]	; (8012fa8 <USBD_SetConfig+0x150>)
 8012f18:	781b      	ldrb	r3, [r3, #0]
 8012f1a:	461a      	mov	r2, r3
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	685b      	ldr	r3, [r3, #4]
 8012f20:	429a      	cmp	r2, r3
 8012f22:	d02a      	beq.n	8012f7a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	685b      	ldr	r3, [r3, #4]
 8012f28:	b2db      	uxtb	r3, r3
 8012f2a:	4619      	mov	r1, r3
 8012f2c:	6878      	ldr	r0, [r7, #4]
 8012f2e:	f7ff f826 	bl	8011f7e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012f32:	4b1d      	ldr	r3, [pc, #116]	; (8012fa8 <USBD_SetConfig+0x150>)
 8012f34:	781b      	ldrb	r3, [r3, #0]
 8012f36:	461a      	mov	r2, r3
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012f3c:	4b1a      	ldr	r3, [pc, #104]	; (8012fa8 <USBD_SetConfig+0x150>)
 8012f3e:	781b      	ldrb	r3, [r3, #0]
 8012f40:	4619      	mov	r1, r3
 8012f42:	6878      	ldr	r0, [r7, #4]
 8012f44:	f7fe ffff 	bl	8011f46 <USBD_SetClassConfig>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012f4c:	7bfb      	ldrb	r3, [r7, #15]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d00f      	beq.n	8012f72 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012f52:	6839      	ldr	r1, [r7, #0]
 8012f54:	6878      	ldr	r0, [r7, #4]
 8012f56:	f000 f918 	bl	801318a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	685b      	ldr	r3, [r3, #4]
 8012f5e:	b2db      	uxtb	r3, r3
 8012f60:	4619      	mov	r1, r3
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f7ff f80b 	bl	8011f7e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2202      	movs	r2, #2
 8012f6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012f70:	e014      	b.n	8012f9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f000 f9d4 	bl	8013320 <USBD_CtlSendStatus>
      break;
 8012f78:	e010      	b.n	8012f9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	f000 f9d0 	bl	8013320 <USBD_CtlSendStatus>
      break;
 8012f80:	e00c      	b.n	8012f9c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012f82:	6839      	ldr	r1, [r7, #0]
 8012f84:	6878      	ldr	r0, [r7, #4]
 8012f86:	f000 f900 	bl	801318a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012f8a:	4b07      	ldr	r3, [pc, #28]	; (8012fa8 <USBD_SetConfig+0x150>)
 8012f8c:	781b      	ldrb	r3, [r3, #0]
 8012f8e:	4619      	mov	r1, r3
 8012f90:	6878      	ldr	r0, [r7, #4]
 8012f92:	f7fe fff4 	bl	8011f7e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012f96:	2303      	movs	r3, #3
 8012f98:	73fb      	strb	r3, [r7, #15]
      break;
 8012f9a:	bf00      	nop
  }

  return ret;
 8012f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	3710      	adds	r7, #16
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bd80      	pop	{r7, pc}
 8012fa6:	bf00      	nop
 8012fa8:	20001100 	.word	0x20001100

08012fac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b082      	sub	sp, #8
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
 8012fb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	88db      	ldrh	r3, [r3, #6]
 8012fba:	2b01      	cmp	r3, #1
 8012fbc:	d004      	beq.n	8012fc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012fbe:	6839      	ldr	r1, [r7, #0]
 8012fc0:	6878      	ldr	r0, [r7, #4]
 8012fc2:	f000 f8e2 	bl	801318a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012fc6:	e023      	b.n	8013010 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012fce:	b2db      	uxtb	r3, r3
 8012fd0:	2b02      	cmp	r3, #2
 8012fd2:	dc02      	bgt.n	8012fda <USBD_GetConfig+0x2e>
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	dc03      	bgt.n	8012fe0 <USBD_GetConfig+0x34>
 8012fd8:	e015      	b.n	8013006 <USBD_GetConfig+0x5a>
 8012fda:	2b03      	cmp	r3, #3
 8012fdc:	d00b      	beq.n	8012ff6 <USBD_GetConfig+0x4a>
 8012fde:	e012      	b.n	8013006 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	3308      	adds	r3, #8
 8012fea:	2201      	movs	r2, #1
 8012fec:	4619      	mov	r1, r3
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f000 f93c 	bl	801326c <USBD_CtlSendData>
        break;
 8012ff4:	e00c      	b.n	8013010 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	3304      	adds	r3, #4
 8012ffa:	2201      	movs	r2, #1
 8012ffc:	4619      	mov	r1, r3
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f000 f934 	bl	801326c <USBD_CtlSendData>
        break;
 8013004:	e004      	b.n	8013010 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013006:	6839      	ldr	r1, [r7, #0]
 8013008:	6878      	ldr	r0, [r7, #4]
 801300a:	f000 f8be 	bl	801318a <USBD_CtlError>
        break;
 801300e:	bf00      	nop
}
 8013010:	bf00      	nop
 8013012:	3708      	adds	r7, #8
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}

08013018 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b082      	sub	sp, #8
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
 8013020:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013028:	b2db      	uxtb	r3, r3
 801302a:	3b01      	subs	r3, #1
 801302c:	2b02      	cmp	r3, #2
 801302e:	d81e      	bhi.n	801306e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	88db      	ldrh	r3, [r3, #6]
 8013034:	2b02      	cmp	r3, #2
 8013036:	d004      	beq.n	8013042 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013038:	6839      	ldr	r1, [r7, #0]
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f000 f8a5 	bl	801318a <USBD_CtlError>
        break;
 8013040:	e01a      	b.n	8013078 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	2201      	movs	r2, #1
 8013046:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801304e:	2b00      	cmp	r3, #0
 8013050:	d005      	beq.n	801305e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	68db      	ldr	r3, [r3, #12]
 8013056:	f043 0202 	orr.w	r2, r3, #2
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	330c      	adds	r3, #12
 8013062:	2202      	movs	r2, #2
 8013064:	4619      	mov	r1, r3
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	f000 f900 	bl	801326c <USBD_CtlSendData>
      break;
 801306c:	e004      	b.n	8013078 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801306e:	6839      	ldr	r1, [r7, #0]
 8013070:	6878      	ldr	r0, [r7, #4]
 8013072:	f000 f88a 	bl	801318a <USBD_CtlError>
      break;
 8013076:	bf00      	nop
  }
}
 8013078:	bf00      	nop
 801307a:	3708      	adds	r7, #8
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}

08013080 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b082      	sub	sp, #8
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
 8013088:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	885b      	ldrh	r3, [r3, #2]
 801308e:	2b01      	cmp	r3, #1
 8013090:	d107      	bne.n	80130a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	2201      	movs	r2, #1
 8013096:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f000 f940 	bl	8013320 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80130a0:	e013      	b.n	80130ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80130a2:	683b      	ldr	r3, [r7, #0]
 80130a4:	885b      	ldrh	r3, [r3, #2]
 80130a6:	2b02      	cmp	r3, #2
 80130a8:	d10b      	bne.n	80130c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80130aa:	683b      	ldr	r3, [r7, #0]
 80130ac:	889b      	ldrh	r3, [r3, #4]
 80130ae:	0a1b      	lsrs	r3, r3, #8
 80130b0:	b29b      	uxth	r3, r3
 80130b2:	b2da      	uxtb	r2, r3
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80130ba:	6878      	ldr	r0, [r7, #4]
 80130bc:	f000 f930 	bl	8013320 <USBD_CtlSendStatus>
}
 80130c0:	e003      	b.n	80130ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80130c2:	6839      	ldr	r1, [r7, #0]
 80130c4:	6878      	ldr	r0, [r7, #4]
 80130c6:	f000 f860 	bl	801318a <USBD_CtlError>
}
 80130ca:	bf00      	nop
 80130cc:	3708      	adds	r7, #8
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}

080130d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80130d2:	b580      	push	{r7, lr}
 80130d4:	b082      	sub	sp, #8
 80130d6:	af00      	add	r7, sp, #0
 80130d8:	6078      	str	r0, [r7, #4]
 80130da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80130e2:	b2db      	uxtb	r3, r3
 80130e4:	3b01      	subs	r3, #1
 80130e6:	2b02      	cmp	r3, #2
 80130e8:	d80b      	bhi.n	8013102 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80130ea:	683b      	ldr	r3, [r7, #0]
 80130ec:	885b      	ldrh	r3, [r3, #2]
 80130ee:	2b01      	cmp	r3, #1
 80130f0:	d10c      	bne.n	801310c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	2200      	movs	r2, #0
 80130f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80130fa:	6878      	ldr	r0, [r7, #4]
 80130fc:	f000 f910 	bl	8013320 <USBD_CtlSendStatus>
      }
      break;
 8013100:	e004      	b.n	801310c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013102:	6839      	ldr	r1, [r7, #0]
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	f000 f840 	bl	801318a <USBD_CtlError>
      break;
 801310a:	e000      	b.n	801310e <USBD_ClrFeature+0x3c>
      break;
 801310c:	bf00      	nop
  }
}
 801310e:	bf00      	nop
 8013110:	3708      	adds	r7, #8
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}

08013116 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013116:	b580      	push	{r7, lr}
 8013118:	b084      	sub	sp, #16
 801311a:	af00      	add	r7, sp, #0
 801311c:	6078      	str	r0, [r7, #4]
 801311e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	781a      	ldrb	r2, [r3, #0]
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	3301      	adds	r3, #1
 8013130:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	781a      	ldrb	r2, [r3, #0]
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	3301      	adds	r3, #1
 801313e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013140:	68f8      	ldr	r0, [r7, #12]
 8013142:	f7ff fa17 	bl	8012574 <SWAPBYTE>
 8013146:	4603      	mov	r3, r0
 8013148:	461a      	mov	r2, r3
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	3301      	adds	r3, #1
 8013152:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	3301      	adds	r3, #1
 8013158:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801315a:	68f8      	ldr	r0, [r7, #12]
 801315c:	f7ff fa0a 	bl	8012574 <SWAPBYTE>
 8013160:	4603      	mov	r3, r0
 8013162:	461a      	mov	r2, r3
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	3301      	adds	r3, #1
 801316c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	3301      	adds	r3, #1
 8013172:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013174:	68f8      	ldr	r0, [r7, #12]
 8013176:	f7ff f9fd 	bl	8012574 <SWAPBYTE>
 801317a:	4603      	mov	r3, r0
 801317c:	461a      	mov	r2, r3
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	80da      	strh	r2, [r3, #6]
}
 8013182:	bf00      	nop
 8013184:	3710      	adds	r7, #16
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}

0801318a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801318a:	b580      	push	{r7, lr}
 801318c:	b082      	sub	sp, #8
 801318e:	af00      	add	r7, sp, #0
 8013190:	6078      	str	r0, [r7, #4]
 8013192:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013194:	2180      	movs	r1, #128	; 0x80
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	f001 fa1c 	bl	80145d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801319c:	2100      	movs	r1, #0
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f001 fa18 	bl	80145d4 <USBD_LL_StallEP>
}
 80131a4:	bf00      	nop
 80131a6:	3708      	adds	r7, #8
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd80      	pop	{r7, pc}

080131ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b086      	sub	sp, #24
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	60f8      	str	r0, [r7, #12]
 80131b4:	60b9      	str	r1, [r7, #8]
 80131b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80131b8:	2300      	movs	r3, #0
 80131ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d036      	beq.n	8013230 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80131c6:	6938      	ldr	r0, [r7, #16]
 80131c8:	f000 f836 	bl	8013238 <USBD_GetLen>
 80131cc:	4603      	mov	r3, r0
 80131ce:	3301      	adds	r3, #1
 80131d0:	b29b      	uxth	r3, r3
 80131d2:	005b      	lsls	r3, r3, #1
 80131d4:	b29a      	uxth	r2, r3
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80131da:	7dfb      	ldrb	r3, [r7, #23]
 80131dc:	68ba      	ldr	r2, [r7, #8]
 80131de:	4413      	add	r3, r2
 80131e0:	687a      	ldr	r2, [r7, #4]
 80131e2:	7812      	ldrb	r2, [r2, #0]
 80131e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80131e6:	7dfb      	ldrb	r3, [r7, #23]
 80131e8:	3301      	adds	r3, #1
 80131ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80131ec:	7dfb      	ldrb	r3, [r7, #23]
 80131ee:	68ba      	ldr	r2, [r7, #8]
 80131f0:	4413      	add	r3, r2
 80131f2:	2203      	movs	r2, #3
 80131f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80131f6:	7dfb      	ldrb	r3, [r7, #23]
 80131f8:	3301      	adds	r3, #1
 80131fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80131fc:	e013      	b.n	8013226 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80131fe:	7dfb      	ldrb	r3, [r7, #23]
 8013200:	68ba      	ldr	r2, [r7, #8]
 8013202:	4413      	add	r3, r2
 8013204:	693a      	ldr	r2, [r7, #16]
 8013206:	7812      	ldrb	r2, [r2, #0]
 8013208:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801320a:	693b      	ldr	r3, [r7, #16]
 801320c:	3301      	adds	r3, #1
 801320e:	613b      	str	r3, [r7, #16]
    idx++;
 8013210:	7dfb      	ldrb	r3, [r7, #23]
 8013212:	3301      	adds	r3, #1
 8013214:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013216:	7dfb      	ldrb	r3, [r7, #23]
 8013218:	68ba      	ldr	r2, [r7, #8]
 801321a:	4413      	add	r3, r2
 801321c:	2200      	movs	r2, #0
 801321e:	701a      	strb	r2, [r3, #0]
    idx++;
 8013220:	7dfb      	ldrb	r3, [r7, #23]
 8013222:	3301      	adds	r3, #1
 8013224:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	781b      	ldrb	r3, [r3, #0]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d1e7      	bne.n	80131fe <USBD_GetString+0x52>
 801322e:	e000      	b.n	8013232 <USBD_GetString+0x86>
    return;
 8013230:	bf00      	nop
  }
}
 8013232:	3718      	adds	r7, #24
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}

08013238 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013238:	b480      	push	{r7}
 801323a:	b085      	sub	sp, #20
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013240:	2300      	movs	r3, #0
 8013242:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013248:	e005      	b.n	8013256 <USBD_GetLen+0x1e>
  {
    len++;
 801324a:	7bfb      	ldrb	r3, [r7, #15]
 801324c:	3301      	adds	r3, #1
 801324e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013250:	68bb      	ldr	r3, [r7, #8]
 8013252:	3301      	adds	r3, #1
 8013254:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	781b      	ldrb	r3, [r3, #0]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d1f5      	bne.n	801324a <USBD_GetLen+0x12>
  }

  return len;
 801325e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013260:	4618      	mov	r0, r3
 8013262:	3714      	adds	r7, #20
 8013264:	46bd      	mov	sp, r7
 8013266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326a:	4770      	bx	lr

0801326c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b084      	sub	sp, #16
 8013270:	af00      	add	r7, sp, #0
 8013272:	60f8      	str	r0, [r7, #12]
 8013274:	60b9      	str	r1, [r7, #8]
 8013276:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	2202      	movs	r2, #2
 801327c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	687a      	ldr	r2, [r7, #4]
 8013284:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	687a      	ldr	r2, [r7, #4]
 801328a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	68ba      	ldr	r2, [r7, #8]
 8013290:	2100      	movs	r1, #0
 8013292:	68f8      	ldr	r0, [r7, #12]
 8013294:	f001 fa6e 	bl	8014774 <USBD_LL_Transmit>

  return USBD_OK;
 8013298:	2300      	movs	r3, #0
}
 801329a:	4618      	mov	r0, r3
 801329c:	3710      	adds	r7, #16
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}

080132a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80132a2:	b580      	push	{r7, lr}
 80132a4:	b084      	sub	sp, #16
 80132a6:	af00      	add	r7, sp, #0
 80132a8:	60f8      	str	r0, [r7, #12]
 80132aa:	60b9      	str	r1, [r7, #8]
 80132ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	68ba      	ldr	r2, [r7, #8]
 80132b2:	2100      	movs	r1, #0
 80132b4:	68f8      	ldr	r0, [r7, #12]
 80132b6:	f001 fa5d 	bl	8014774 <USBD_LL_Transmit>

  return USBD_OK;
 80132ba:	2300      	movs	r3, #0
}
 80132bc:	4618      	mov	r0, r3
 80132be:	3710      	adds	r7, #16
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}

080132c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b084      	sub	sp, #16
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	60f8      	str	r0, [r7, #12]
 80132cc:	60b9      	str	r1, [r7, #8]
 80132ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	2203      	movs	r2, #3
 80132d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	687a      	ldr	r2, [r7, #4]
 80132dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	687a      	ldr	r2, [r7, #4]
 80132e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	68ba      	ldr	r2, [r7, #8]
 80132ec:	2100      	movs	r1, #0
 80132ee:	68f8      	ldr	r0, [r7, #12]
 80132f0:	f001 fa78 	bl	80147e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80132f4:	2300      	movs	r3, #0
}
 80132f6:	4618      	mov	r0, r3
 80132f8:	3710      	adds	r7, #16
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bd80      	pop	{r7, pc}

080132fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80132fe:	b580      	push	{r7, lr}
 8013300:	b084      	sub	sp, #16
 8013302:	af00      	add	r7, sp, #0
 8013304:	60f8      	str	r0, [r7, #12]
 8013306:	60b9      	str	r1, [r7, #8]
 8013308:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	68ba      	ldr	r2, [r7, #8]
 801330e:	2100      	movs	r1, #0
 8013310:	68f8      	ldr	r0, [r7, #12]
 8013312:	f001 fa67 	bl	80147e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013316:	2300      	movs	r3, #0
}
 8013318:	4618      	mov	r0, r3
 801331a:	3710      	adds	r7, #16
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b082      	sub	sp, #8
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2204      	movs	r2, #4
 801332c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013330:	2300      	movs	r3, #0
 8013332:	2200      	movs	r2, #0
 8013334:	2100      	movs	r1, #0
 8013336:	6878      	ldr	r0, [r7, #4]
 8013338:	f001 fa1c 	bl	8014774 <USBD_LL_Transmit>

  return USBD_OK;
 801333c:	2300      	movs	r3, #0
}
 801333e:	4618      	mov	r0, r3
 8013340:	3708      	adds	r7, #8
 8013342:	46bd      	mov	sp, r7
 8013344:	bd80      	pop	{r7, pc}

08013346 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013346:	b580      	push	{r7, lr}
 8013348:	b082      	sub	sp, #8
 801334a:	af00      	add	r7, sp, #0
 801334c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	2205      	movs	r2, #5
 8013352:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013356:	2300      	movs	r3, #0
 8013358:	2200      	movs	r2, #0
 801335a:	2100      	movs	r1, #0
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f001 fa41 	bl	80147e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013362:	2300      	movs	r3, #0
}
 8013364:	4618      	mov	r0, r3
 8013366:	3708      	adds	r7, #8
 8013368:	46bd      	mov	sp, r7
 801336a:	bd80      	pop	{r7, pc}

0801336c <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b082      	sub	sp, #8
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8013374:	6878      	ldr	r0, [r7, #4]
 8013376:	f7f2 ff13 	bl	80061a0 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 801337a:	bf00      	nop
 801337c:	3708      	adds	r7, #8
 801337e:	46bd      	mov	sp, r7
 8013380:	bd80      	pop	{r7, pc}

08013382 <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8013382:	b580      	push	{r7, lr}
 8013384:	b082      	sub	sp, #8
 8013386:	af00      	add	r7, sp, #0
 8013388:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 801338a:	e002      	b.n	8013392 <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 801338c:	2001      	movs	r0, #1
 801338e:	f7ff ffed 	bl	801336c <SPIF_Delay>
  while (Handle->Lock)
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	7b1b      	ldrb	r3, [r3, #12]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d1f8      	bne.n	801338c <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2201      	movs	r2, #1
 801339e:	731a      	strb	r2, [r3, #12]
}
 80133a0:	bf00      	nop
 80133a2:	3708      	adds	r7, #8
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}

080133a8 <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 80133a8:	b480      	push	{r7}
 80133aa:	b083      	sub	sp, #12
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	2200      	movs	r2, #0
 80133b4:	731a      	strb	r2, [r3, #12]
}
 80133b6:	bf00      	nop
 80133b8:	370c      	adds	r7, #12
 80133ba:	46bd      	mov	sp, r7
 80133bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c0:	4770      	bx	lr

080133c2 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 80133c2:	b580      	push	{r7, lr}
 80133c4:	b084      	sub	sp, #16
 80133c6:	af00      	add	r7, sp, #0
 80133c8:	6078      	str	r0, [r7, #4]
 80133ca:	460b      	mov	r3, r1
 80133cc:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	6858      	ldr	r0, [r3, #4]
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	691b      	ldr	r3, [r3, #16]
 80133d6:	b29b      	uxth	r3, r3
 80133d8:	78fa      	ldrb	r2, [r7, #3]
 80133da:	4619      	mov	r1, r3
 80133dc:	f7f4 fea2 	bl	8008124 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 80133e0:	2300      	movs	r3, #0
 80133e2:	60fb      	str	r3, [r7, #12]
 80133e4:	e002      	b.n	80133ec <SPIF_CsPin+0x2a>
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	3301      	adds	r3, #1
 80133ea:	60fb      	str	r3, [r7, #12]
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	2b09      	cmp	r3, #9
 80133f0:	ddf9      	ble.n	80133e6 <SPIF_CsPin+0x24>
}
 80133f2:	bf00      	nop
 80133f4:	bf00      	nop
 80133f6:	3710      	adds	r7, #16
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd80      	pop	{r7, pc}

080133fc <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b088      	sub	sp, #32
 8013400:	af02      	add	r7, sp, #8
 8013402:	60f8      	str	r0, [r7, #12]
 8013404:	60b9      	str	r1, [r7, #8]
 8013406:	607a      	str	r2, [r7, #4]
 8013408:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801340a:	2300      	movs	r3, #0
 801340c:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	6818      	ldr	r0, [r3, #0]
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	b29a      	uxth	r2, r3
 8013416:	6a3b      	ldr	r3, [r7, #32]
 8013418:	9300      	str	r3, [sp, #0]
 801341a:	4613      	mov	r3, r2
 801341c:	687a      	ldr	r2, [r7, #4]
 801341e:	68b9      	ldr	r1, [r7, #8]
 8013420:	f7f9 fae5 	bl	800c9ee <HAL_SPI_TransmitReceive>
 8013424:	4603      	mov	r3, r0
 8013426:	2b00      	cmp	r3, #0
 8013428:	d101      	bne.n	801342e <SPIF_TransmitReceive+0x32>
  {
    retVal = true;
 801342a:	2301      	movs	r3, #1
 801342c:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 801342e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013430:	4618      	mov	r0, r3
 8013432:	3718      	adds	r7, #24
 8013434:	46bd      	mov	sp, r7
 8013436:	bd80      	pop	{r7, pc}

08013438 <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b086      	sub	sp, #24
 801343c:	af00      	add	r7, sp, #0
 801343e:	60f8      	str	r0, [r7, #12]
 8013440:	60b9      	str	r1, [r7, #8]
 8013442:	607a      	str	r2, [r7, #4]
 8013444:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8013446:	2300      	movs	r3, #0
 8013448:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	6818      	ldr	r0, [r3, #0]
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	b29a      	uxth	r2, r3
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	68b9      	ldr	r1, [r7, #8]
 8013456:	f7f9 f81e 	bl	800c496 <HAL_SPI_Transmit>
 801345a:	4603      	mov	r3, r0
 801345c:	2b00      	cmp	r3, #0
 801345e:	d101      	bne.n	8013464 <SPIF_Transmit+0x2c>
  {
    retVal = true;
 8013460:	2301      	movs	r3, #1
 8013462:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8013464:	7dfb      	ldrb	r3, [r7, #23]
}
 8013466:	4618      	mov	r0, r3
 8013468:	3718      	adds	r7, #24
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}

0801346e <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 801346e:	b580      	push	{r7, lr}
 8013470:	b086      	sub	sp, #24
 8013472:	af00      	add	r7, sp, #0
 8013474:	60f8      	str	r0, [r7, #12]
 8013476:	60b9      	str	r1, [r7, #8]
 8013478:	607a      	str	r2, [r7, #4]
 801347a:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801347c:	2300      	movs	r3, #0
 801347e:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Receive(Handle->HSpi, Rx, Size, Timeout) == HAL_OK)
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	6818      	ldr	r0, [r3, #0]
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	b29a      	uxth	r2, r3
 8013488:	683b      	ldr	r3, [r7, #0]
 801348a:	68b9      	ldr	r1, [r7, #8]
 801348c:	f7f9 f978 	bl	800c780 <HAL_SPI_Receive>
 8013490:	4603      	mov	r3, r0
 8013492:	2b00      	cmp	r3, #0
 8013494:	d101      	bne.n	801349a <SPIF_Receive+0x2c>
  {
    retVal = true;
 8013496:	2301      	movs	r3, #1
 8013498:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 801349a:	7dfb      	ldrb	r3, [r7, #23]
}
 801349c:	4618      	mov	r0, r3
 801349e:	3718      	adds	r7, #24
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd80      	pop	{r7, pc}

080134a4 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b084      	sub	sp, #16
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 80134ac:	2301      	movs	r3, #1
 80134ae:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 80134b0:	2306      	movs	r3, #6
 80134b2:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 80134b4:	2100      	movs	r1, #0
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f7ff ff83 	bl	80133c2 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 80134bc:	f107 010c 	add.w	r1, r7, #12
 80134c0:	2364      	movs	r3, #100	; 0x64
 80134c2:	2201      	movs	r2, #1
 80134c4:	6878      	ldr	r0, [r7, #4]
 80134c6:	f7ff ffb7 	bl	8013438 <SPIF_Transmit>
 80134ca:	4603      	mov	r3, r0
 80134cc:	f083 0301 	eor.w	r3, r3, #1
 80134d0:	b2db      	uxtb	r3, r3
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d001      	beq.n	80134da <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 80134d6:	2300      	movs	r3, #0
 80134d8:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 80134da:	2101      	movs	r1, #1
 80134dc:	6878      	ldr	r0, [r7, #4]
 80134de:	f7ff ff70 	bl	80133c2 <SPIF_CsPin>
  return retVal;
 80134e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	3710      	adds	r7, #16
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bd80      	pop	{r7, pc}

080134ec <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b084      	sub	sp, #16
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 80134f4:	2301      	movs	r3, #1
 80134f6:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 80134f8:	2304      	movs	r3, #4
 80134fa:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 80134fc:	2100      	movs	r1, #0
 80134fe:	6878      	ldr	r0, [r7, #4]
 8013500:	f7ff ff5f 	bl	80133c2 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8013504:	f107 010c 	add.w	r1, r7, #12
 8013508:	2364      	movs	r3, #100	; 0x64
 801350a:	2201      	movs	r2, #1
 801350c:	6878      	ldr	r0, [r7, #4]
 801350e:	f7ff ff93 	bl	8013438 <SPIF_Transmit>
 8013512:	4603      	mov	r3, r0
 8013514:	f083 0301 	eor.w	r3, r3, #1
 8013518:	b2db      	uxtb	r3, r3
 801351a:	2b00      	cmp	r3, #0
 801351c:	d001      	beq.n	8013522 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 801351e:	2300      	movs	r3, #0
 8013520:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8013522:	2101      	movs	r1, #1
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f7ff ff4c 	bl	80133c2 <SPIF_CsPin>
  return retVal;
 801352a:	7bfb      	ldrb	r3, [r7, #15]
}
 801352c:	4618      	mov	r0, r3
 801352e:	3710      	adds	r7, #16
 8013530:	46bd      	mov	sp, r7
 8013532:	bd80      	pop	{r7, pc}

08013534 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8013534:	b580      	push	{r7, lr}
 8013536:	b086      	sub	sp, #24
 8013538:	af02      	add	r7, sp, #8
 801353a:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 801353c:	2300      	movs	r3, #0
 801353e:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 8013540:	f24a 5305 	movw	r3, #42245	; 0xa505
 8013544:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 8013546:	2100      	movs	r1, #0
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f7ff ff3a 	bl	80133c2 <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 801354e:	f107 0208 	add.w	r2, r7, #8
 8013552:	f107 010c 	add.w	r1, r7, #12
 8013556:	2364      	movs	r3, #100	; 0x64
 8013558:	9300      	str	r3, [sp, #0]
 801355a:	2302      	movs	r3, #2
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f7ff ff4d 	bl	80133fc <SPIF_TransmitReceive>
 8013562:	4603      	mov	r3, r0
 8013564:	2b00      	cmp	r3, #0
 8013566:	d001      	beq.n	801356c <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 8013568:	7a7b      	ldrb	r3, [r7, #9]
 801356a:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 801356c:	2101      	movs	r1, #1
 801356e:	6878      	ldr	r0, [r7, #4]
 8013570:	f7ff ff27 	bl	80133c2 <SPIF_CsPin>
  return retVal;
 8013574:	7bfb      	ldrb	r3, [r7, #15]
}
 8013576:	4618      	mov	r0, r3
 8013578:	3710      	adds	r7, #16
 801357a:	46bd      	mov	sp, r7
 801357c:	bd80      	pop	{r7, pc}

0801357e <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 801357e:	b580      	push	{r7, lr}
 8013580:	b084      	sub	sp, #16
 8013582:	af00      	add	r7, sp, #0
 8013584:	6078      	str	r0, [r7, #4]
 8013586:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 8013588:	2300      	movs	r3, #0
 801358a:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 801358c:	f7f2 fdfc 	bl	8006188 <HAL_GetTick>
 8013590:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 8013592:	2001      	movs	r0, #1
 8013594:	f7ff feea 	bl	801336c <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 8013598:	f7f2 fdf6 	bl	8006188 <HAL_GetTick>
 801359c:	4602      	mov	r2, r0
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	1ad3      	subs	r3, r2, r3
 80135a2:	683a      	ldr	r2, [r7, #0]
 80135a4:	429a      	cmp	r2, r3
 80135a6:	d90a      	bls.n	80135be <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	f7ff ffc3 	bl	8013534 <SPIF_ReadReg1>
 80135ae:	4603      	mov	r3, r0
 80135b0:	f003 0301 	and.w	r3, r3, #1
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d1ec      	bne.n	8013592 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 80135b8:	2301      	movs	r3, #1
 80135ba:	73fb      	strb	r3, [r7, #15]
      break;
 80135bc:	e000      	b.n	80135c0 <SPIF_WaitForWriting+0x42>
      break;
 80135be:	bf00      	nop
    }
  }
  return retVal;
 80135c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3710      	adds	r7, #16
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}
	...

080135cc <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b088      	sub	sp, #32
 80135d0:	af02      	add	r7, sp, #8
 80135d2:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 80135d4:	f06f 0360 	mvn.w	r3, #96	; 0x60
 80135d8:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 80135da:	2300      	movs	r3, #0
 80135dc:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 80135de:	2100      	movs	r1, #0
 80135e0:	6878      	ldr	r0, [r7, #4]
 80135e2:	f7ff feee 	bl	80133c2 <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 80135e6:	f107 020c 	add.w	r2, r7, #12
 80135ea:	f107 0110 	add.w	r1, r7, #16
 80135ee:	2364      	movs	r3, #100	; 0x64
 80135f0:	9300      	str	r3, [sp, #0]
 80135f2:	2304      	movs	r3, #4
 80135f4:	6878      	ldr	r0, [r7, #4]
 80135f6:	f7ff ff01 	bl	80133fc <SPIF_TransmitReceive>
 80135fa:	4603      	mov	r3, r0
 80135fc:	f083 0301 	eor.w	r3, r3, #1
 8013600:	b2db      	uxtb	r3, r3
 8013602:	2b00      	cmp	r3, #0
 8013604:	d004      	beq.n	8013610 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 8013606:	2101      	movs	r1, #1
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f7ff feda 	bl	80133c2 <SPIF_CsPin>
      break;
 801360e:	e16f      	b.n	80138f0 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8013610:	2101      	movs	r1, #1
 8013612:	6878      	ldr	r0, [r7, #4]
 8013614:	f7ff fed5 	bl	80133c2 <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8013618:	7b7a      	ldrb	r2, [r7, #13]
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 801361e:	7bba      	ldrb	r2, [r7, #14]
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8013624:	7bfa      	ldrb	r2, [r7, #15]
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	7a1b      	ldrb	r3, [r3, #8]
 801362e:	2bef      	cmp	r3, #239	; 0xef
 8013630:	f000 80f0 	beq.w	8013814 <SPIF_FindChip+0x248>
 8013634:	2bef      	cmp	r3, #239	; 0xef
 8013636:	f300 80e9 	bgt.w	801380c <SPIF_FindChip+0x240>
 801363a:	2bc8      	cmp	r3, #200	; 0xc8
 801363c:	f300 80e6 	bgt.w	801380c <SPIF_FindChip+0x240>
 8013640:	2b85      	cmp	r3, #133	; 0x85
 8013642:	da0c      	bge.n	801365e <SPIF_FindChip+0x92>
 8013644:	2b62      	cmp	r3, #98	; 0x62
 8013646:	f000 80e7 	beq.w	8013818 <SPIF_FindChip+0x24c>
 801364a:	2b62      	cmp	r3, #98	; 0x62
 801364c:	f300 80de 	bgt.w	801380c <SPIF_FindChip+0x240>
 8013650:	2b20      	cmp	r3, #32
 8013652:	f300 80d9 	bgt.w	8013808 <SPIF_FindChip+0x23c>
 8013656:	2b00      	cmp	r3, #0
 8013658:	f300 8090 	bgt.w	801377c <SPIF_FindChip+0x1b0>
 801365c:	e0d6      	b.n	801380c <SPIF_FindChip+0x240>
 801365e:	3b85      	subs	r3, #133	; 0x85
 8013660:	2b43      	cmp	r3, #67	; 0x43
 8013662:	f200 80d3 	bhi.w	801380c <SPIF_FindChip+0x240>
 8013666:	a201      	add	r2, pc, #4	; (adr r2, 801366c <SPIF_FindChip+0xa0>)
 8013668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801366c:	0801381d 	.word	0x0801381d
 8013670:	0801380d 	.word	0x0801380d
 8013674:	0801380d 	.word	0x0801380d
 8013678:	0801380d 	.word	0x0801380d
 801367c:	0801381d 	.word	0x0801381d
 8013680:	0801380d 	.word	0x0801380d
 8013684:	0801380d 	.word	0x0801380d
 8013688:	0801381d 	.word	0x0801381d
 801368c:	0801380d 	.word	0x0801380d
 8013690:	0801380d 	.word	0x0801380d
 8013694:	0801380d 	.word	0x0801380d
 8013698:	0801380d 	.word	0x0801380d
 801369c:	0801380d 	.word	0x0801380d
 80136a0:	0801380d 	.word	0x0801380d
 80136a4:	0801380d 	.word	0x0801380d
 80136a8:	0801380d 	.word	0x0801380d
 80136ac:	0801380d 	.word	0x0801380d
 80136b0:	0801380d 	.word	0x0801380d
 80136b4:	0801380d 	.word	0x0801380d
 80136b8:	0801380d 	.word	0x0801380d
 80136bc:	0801380d 	.word	0x0801380d
 80136c0:	0801380d 	.word	0x0801380d
 80136c4:	0801380d 	.word	0x0801380d
 80136c8:	0801380d 	.word	0x0801380d
 80136cc:	0801381d 	.word	0x0801381d
 80136d0:	0801380d 	.word	0x0801380d
 80136d4:	0801380d 	.word	0x0801380d
 80136d8:	0801380d 	.word	0x0801380d
 80136dc:	0801381d 	.word	0x0801381d
 80136e0:	0801380d 	.word	0x0801380d
 80136e4:	0801380d 	.word	0x0801380d
 80136e8:	0801380d 	.word	0x0801380d
 80136ec:	0801380d 	.word	0x0801380d
 80136f0:	0801380d 	.word	0x0801380d
 80136f4:	0801380d 	.word	0x0801380d
 80136f8:	0801380d 	.word	0x0801380d
 80136fc:	0801380d 	.word	0x0801380d
 8013700:	0801380d 	.word	0x0801380d
 8013704:	0801380d 	.word	0x0801380d
 8013708:	0801380d 	.word	0x0801380d
 801370c:	0801381d 	.word	0x0801381d
 8013710:	0801380d 	.word	0x0801380d
 8013714:	0801380d 	.word	0x0801380d
 8013718:	0801380d 	.word	0x0801380d
 801371c:	0801380d 	.word	0x0801380d
 8013720:	0801380d 	.word	0x0801380d
 8013724:	0801380d 	.word	0x0801380d
 8013728:	0801380d 	.word	0x0801380d
 801372c:	0801380d 	.word	0x0801380d
 8013730:	0801380d 	.word	0x0801380d
 8013734:	0801380d 	.word	0x0801380d
 8013738:	0801380d 	.word	0x0801380d
 801373c:	0801380d 	.word	0x0801380d
 8013740:	0801380d 	.word	0x0801380d
 8013744:	0801380d 	.word	0x0801380d
 8013748:	0801380d 	.word	0x0801380d
 801374c:	0801380d 	.word	0x0801380d
 8013750:	0801380d 	.word	0x0801380d
 8013754:	0801381d 	.word	0x0801381d
 8013758:	0801380d 	.word	0x0801380d
 801375c:	0801380d 	.word	0x0801380d
 8013760:	0801381d 	.word	0x0801381d
 8013764:	0801380d 	.word	0x0801380d
 8013768:	0801380d 	.word	0x0801380d
 801376c:	0801380d 	.word	0x0801380d
 8013770:	0801380d 	.word	0x0801380d
 8013774:	0801380d 	.word	0x0801380d
 8013778:	0801381d 	.word	0x0801381d
 801377c:	3b01      	subs	r3, #1
 801377e:	2b1f      	cmp	r3, #31
 8013780:	d844      	bhi.n	801380c <SPIF_FindChip+0x240>
 8013782:	a201      	add	r2, pc, #4	; (adr r2, 8013788 <SPIF_FindChip+0x1bc>)
 8013784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013788:	08013821 	.word	0x08013821
 801378c:	0801380d 	.word	0x0801380d
 8013790:	0801380d 	.word	0x0801380d
 8013794:	08013821 	.word	0x08013821
 8013798:	0801380d 	.word	0x0801380d
 801379c:	0801380d 	.word	0x0801380d
 80137a0:	0801380d 	.word	0x0801380d
 80137a4:	0801380d 	.word	0x0801380d
 80137a8:	0801380d 	.word	0x0801380d
 80137ac:	0801380d 	.word	0x0801380d
 80137b0:	0801380d 	.word	0x0801380d
 80137b4:	0801380d 	.word	0x0801380d
 80137b8:	0801380d 	.word	0x0801380d
 80137bc:	0801380d 	.word	0x0801380d
 80137c0:	0801380d 	.word	0x0801380d
 80137c4:	0801380d 	.word	0x0801380d
 80137c8:	0801380d 	.word	0x0801380d
 80137cc:	0801380d 	.word	0x0801380d
 80137d0:	0801380d 	.word	0x0801380d
 80137d4:	0801380d 	.word	0x0801380d
 80137d8:	0801380d 	.word	0x0801380d
 80137dc:	0801380d 	.word	0x0801380d
 80137e0:	0801380d 	.word	0x0801380d
 80137e4:	0801380d 	.word	0x0801380d
 80137e8:	0801380d 	.word	0x0801380d
 80137ec:	0801380d 	.word	0x0801380d
 80137f0:	0801380d 	.word	0x0801380d
 80137f4:	08013821 	.word	0x08013821
 80137f8:	0801380d 	.word	0x0801380d
 80137fc:	0801380d 	.word	0x0801380d
 8013800:	0801380d 	.word	0x0801380d
 8013804:	08013821 	.word	0x08013821
 8013808:	2b37      	cmp	r3, #55	; 0x37
 801380a:	d00b      	beq.n	8013824 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	2200      	movs	r2, #0
 8013810:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 8013812:	e008      	b.n	8013826 <SPIF_FindChip+0x25a>
      break;
 8013814:	bf00      	nop
 8013816:	e006      	b.n	8013826 <SPIF_FindChip+0x25a>
      break;
 8013818:	bf00      	nop
 801381a:	e004      	b.n	8013826 <SPIF_FindChip+0x25a>
      break;
 801381c:	bf00      	nop
 801381e:	e002      	b.n	8013826 <SPIF_FindChip+0x25a>
      break;
 8013820:	bf00      	nop
 8013822:	e000      	b.n	8013826 <SPIF_FindChip+0x25a>
      break;
 8013824:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	7a5b      	ldrb	r3, [r3, #9]
 801382a:	3b11      	subs	r3, #17
 801382c:	2b0f      	cmp	r3, #15
 801382e:	d84e      	bhi.n	80138ce <SPIF_FindChip+0x302>
 8013830:	a201      	add	r2, pc, #4	; (adr r2, 8013838 <SPIF_FindChip+0x26c>)
 8013832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013836:	bf00      	nop
 8013838:	08013879 	.word	0x08013879
 801383c:	08013881 	.word	0x08013881
 8013840:	08013889 	.word	0x08013889
 8013844:	08013891 	.word	0x08013891
 8013848:	08013899 	.word	0x08013899
 801384c:	080138a1 	.word	0x080138a1
 8013850:	080138a9 	.word	0x080138a9
 8013854:	080138b1 	.word	0x080138b1
 8013858:	080138bb 	.word	0x080138bb
 801385c:	080138cf 	.word	0x080138cf
 8013860:	080138cf 	.word	0x080138cf
 8013864:	080138cf 	.word	0x080138cf
 8013868:	080138cf 	.word	0x080138cf
 801386c:	080138cf 	.word	0x080138cf
 8013870:	080138cf 	.word	0x080138cf
 8013874:	080138c5 	.word	0x080138c5
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	2202      	movs	r2, #2
 801387c:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 801387e:	e02a      	b.n	80138d6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	2204      	movs	r2, #4
 8013884:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 8013886:	e026      	b.n	80138d6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	2208      	movs	r2, #8
 801388c:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 801388e:	e022      	b.n	80138d6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	2210      	movs	r2, #16
 8013894:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 8013896:	e01e      	b.n	80138d6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2220      	movs	r2, #32
 801389c:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 801389e:	e01a      	b.n	80138d6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2240      	movs	r2, #64	; 0x40
 80138a4:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 80138a6:	e016      	b.n	80138d6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	2280      	movs	r2, #128	; 0x80
 80138ac:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 80138ae:	e012      	b.n	80138d6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80138b6:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 80138b8:	e00d      	b.n	80138d6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80138c0:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 80138c2:	e008      	b.n	80138d6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80138ca:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 80138cc:	e003      	b.n	80138d6 <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	2200      	movs	r2, #0
 80138d2:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 80138d4:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	69db      	ldr	r3, [r3, #28]
 80138da:	011a      	lsls	r2, r3, #4
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	699b      	ldr	r3, [r3, #24]
 80138e4:	031b      	lsls	r3, r3, #12
 80138e6:	0a1a      	lsrs	r2, r3, #8
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 80138ec:	2301      	movs	r3, #1
 80138ee:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 80138f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80138f2:	4618      	mov	r0, r3
 80138f4:	3718      	adds	r7, #24
 80138f6:	46bd      	mov	sp, r7
 80138f8:	bd80      	pop	{r7, pc}
 80138fa:	bf00      	nop

080138fc <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b08a      	sub	sp, #40	; 0x28
 8013900:	af00      	add	r7, sp, #0
 8013902:	60f8      	str	r0, [r7, #12]
 8013904:	60b9      	str	r1, [r7, #8]
 8013906:	607a      	str	r2, [r7, #4]
 8013908:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801390a:	2300      	movs	r3, #0
 801390c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8013910:	2300      	movs	r3, #0
 8013912:	623b      	str	r3, [r7, #32]
 8013914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013916:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801391a:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	695b      	ldr	r3, [r3, #20]
 8013920:	68ba      	ldr	r2, [r7, #8]
 8013922:	429a      	cmp	r2, r3
 8013924:	f080 8084 	bcs.w	8013a30 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 8013928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801392a:	2bff      	cmp	r3, #255	; 0xff
 801392c:	f200 8082 	bhi.w	8013a34 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 8013930:	683a      	ldr	r2, [r7, #0]
 8013932:	69fb      	ldr	r3, [r7, #28]
 8013934:	429a      	cmp	r2, r3
 8013936:	d901      	bls.n	801393c <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 8013938:	69fb      	ldr	r3, [r7, #28]
 801393a:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 801393c:	68bb      	ldr	r3, [r7, #8]
 801393e:	021b      	lsls	r3, r3, #8
 8013940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013942:	4413      	add	r3, r2
 8013944:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 8013946:	68f8      	ldr	r0, [r7, #12]
 8013948:	f7ff fdac 	bl	80134a4 <SPIF_WriteEnable>
 801394c:	4603      	mov	r3, r0
 801394e:	f083 0301 	eor.w	r3, r3, #1
 8013952:	b2db      	uxtb	r3, r3
 8013954:	2b00      	cmp	r3, #0
 8013956:	d16f      	bne.n	8013a38 <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8013958:	2100      	movs	r1, #0
 801395a:	68f8      	ldr	r0, [r7, #12]
 801395c:	f7ff fd31 	bl	80133c2 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	69db      	ldr	r3, [r3, #28]
 8013964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013968:	d322      	bcc.n	80139b0 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 801396a:	2312      	movs	r3, #18
 801396c:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 801396e:	6a3b      	ldr	r3, [r7, #32]
 8013970:	0e1b      	lsrs	r3, r3, #24
 8013972:	b2db      	uxtb	r3, r3
 8013974:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 8013976:	6a3b      	ldr	r3, [r7, #32]
 8013978:	0c1b      	lsrs	r3, r3, #16
 801397a:	b2db      	uxtb	r3, r3
 801397c:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 801397e:	6a3b      	ldr	r3, [r7, #32]
 8013980:	0a1b      	lsrs	r3, r3, #8
 8013982:	b2db      	uxtb	r3, r3
 8013984:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 8013986:	6a3b      	ldr	r3, [r7, #32]
 8013988:	b2db      	uxtb	r3, r3
 801398a:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 801398c:	f107 0114 	add.w	r1, r7, #20
 8013990:	2364      	movs	r3, #100	; 0x64
 8013992:	2205      	movs	r2, #5
 8013994:	68f8      	ldr	r0, [r7, #12]
 8013996:	f7ff fd4f 	bl	8013438 <SPIF_Transmit>
 801399a:	4603      	mov	r3, r0
 801399c:	f083 0301 	eor.w	r3, r3, #1
 80139a0:	b2db      	uxtb	r3, r3
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d023      	beq.n	80139ee <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 80139a6:	2101      	movs	r1, #1
 80139a8:	68f8      	ldr	r0, [r7, #12]
 80139aa:	f7ff fd0a 	bl	80133c2 <SPIF_CsPin>
        break;
 80139ae:	e044      	b.n	8013a3a <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 80139b0:	2302      	movs	r3, #2
 80139b2:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 80139b4:	6a3b      	ldr	r3, [r7, #32]
 80139b6:	0c1b      	lsrs	r3, r3, #16
 80139b8:	b2db      	uxtb	r3, r3
 80139ba:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 80139bc:	6a3b      	ldr	r3, [r7, #32]
 80139be:	0a1b      	lsrs	r3, r3, #8
 80139c0:	b2db      	uxtb	r3, r3
 80139c2:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 80139c4:	6a3b      	ldr	r3, [r7, #32]
 80139c6:	b2db      	uxtb	r3, r3
 80139c8:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80139ca:	f107 0114 	add.w	r1, r7, #20
 80139ce:	2364      	movs	r3, #100	; 0x64
 80139d0:	2204      	movs	r2, #4
 80139d2:	68f8      	ldr	r0, [r7, #12]
 80139d4:	f7ff fd30 	bl	8013438 <SPIF_Transmit>
 80139d8:	4603      	mov	r3, r0
 80139da:	f083 0301 	eor.w	r3, r3, #1
 80139de:	b2db      	uxtb	r3, r3
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d004      	beq.n	80139ee <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 80139e4:	2101      	movs	r1, #1
 80139e6:	68f8      	ldr	r0, [r7, #12]
 80139e8:	f7ff fceb 	bl	80133c2 <SPIF_CsPin>
        break;
 80139ec:	e025      	b.n	8013a3a <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 80139ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80139f2:	683a      	ldr	r2, [r7, #0]
 80139f4:	6879      	ldr	r1, [r7, #4]
 80139f6:	68f8      	ldr	r0, [r7, #12]
 80139f8:	f7ff fd1e 	bl	8013438 <SPIF_Transmit>
 80139fc:	4603      	mov	r3, r0
 80139fe:	f083 0301 	eor.w	r3, r3, #1
 8013a02:	b2db      	uxtb	r3, r3
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d004      	beq.n	8013a12 <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 8013a08:	2101      	movs	r1, #1
 8013a0a:	68f8      	ldr	r0, [r7, #12]
 8013a0c:	f7ff fcd9 	bl	80133c2 <SPIF_CsPin>
      break;
 8013a10:	e013      	b.n	8013a3a <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 8013a12:	2101      	movs	r1, #1
 8013a14:	68f8      	ldr	r0, [r7, #12]
 8013a16:	f7ff fcd4 	bl	80133c2 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 8013a1a:	2164      	movs	r1, #100	; 0x64
 8013a1c:	68f8      	ldr	r0, [r7, #12]
 8013a1e:	f7ff fdae 	bl	801357e <SPIF_WaitForWriting>
 8013a22:	4603      	mov	r3, r0
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d008      	beq.n	8013a3a <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 8013a28:	2301      	movs	r3, #1
 8013a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013a2e:	e004      	b.n	8013a3a <SPIF_WriteFn+0x13e>
      break;
 8013a30:	bf00      	nop
 8013a32:	e002      	b.n	8013a3a <SPIF_WriteFn+0x13e>
      break;
 8013a34:	bf00      	nop
 8013a36:	e000      	b.n	8013a3a <SPIF_WriteFn+0x13e>
      break;
 8013a38:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8013a3a:	68f8      	ldr	r0, [r7, #12]
 8013a3c:	f7ff fd56 	bl	80134ec <SPIF_WriteDisable>
  return retVal;
 8013a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8013a44:	4618      	mov	r0, r3
 8013a46:	3728      	adds	r7, #40	; 0x28
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	bd80      	pop	{r7, pc}

08013a4c <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b086      	sub	sp, #24
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	60f8      	str	r0, [r7, #12]
 8013a54:	60b9      	str	r1, [r7, #8]
 8013a56:	607a      	str	r2, [r7, #4]
 8013a58:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 8013a5e:	2100      	movs	r1, #0
 8013a60:	68f8      	ldr	r0, [r7, #12]
 8013a62:	f7ff fcae 	bl	80133c2 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	69db      	ldr	r3, [r3, #28]
 8013a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013a6e:	d322      	bcc.n	8013ab6 <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 8013a70:	2313      	movs	r3, #19
 8013a72:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 8013a74:	68bb      	ldr	r3, [r7, #8]
 8013a76:	0e1b      	lsrs	r3, r3, #24
 8013a78:	b2db      	uxtb	r3, r3
 8013a7a:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	0c1b      	lsrs	r3, r3, #16
 8013a80:	b2db      	uxtb	r3, r3
 8013a82:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	0a1b      	lsrs	r3, r3, #8
 8013a88:	b2db      	uxtb	r3, r3
 8013a8a:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 8013a8c:	68bb      	ldr	r3, [r7, #8]
 8013a8e:	b2db      	uxtb	r3, r3
 8013a90:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8013a92:	f107 0110 	add.w	r1, r7, #16
 8013a96:	2364      	movs	r3, #100	; 0x64
 8013a98:	2205      	movs	r2, #5
 8013a9a:	68f8      	ldr	r0, [r7, #12]
 8013a9c:	f7ff fccc 	bl	8013438 <SPIF_Transmit>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	f083 0301 	eor.w	r3, r3, #1
 8013aa6:	b2db      	uxtb	r3, r3
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d023      	beq.n	8013af4 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8013aac:	2101      	movs	r1, #1
 8013aae:	68f8      	ldr	r0, [r7, #12]
 8013ab0:	f7ff fc87 	bl	80133c2 <SPIF_CsPin>
        break;
 8013ab4:	e036      	b.n	8013b24 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 8013ab6:	2303      	movs	r3, #3
 8013ab8:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 8013aba:	68bb      	ldr	r3, [r7, #8]
 8013abc:	0c1b      	lsrs	r3, r3, #16
 8013abe:	b2db      	uxtb	r3, r3
 8013ac0:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 8013ac2:	68bb      	ldr	r3, [r7, #8]
 8013ac4:	0a1b      	lsrs	r3, r3, #8
 8013ac6:	b2db      	uxtb	r3, r3
 8013ac8:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 8013aca:	68bb      	ldr	r3, [r7, #8]
 8013acc:	b2db      	uxtb	r3, r3
 8013ace:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8013ad0:	f107 0110 	add.w	r1, r7, #16
 8013ad4:	2364      	movs	r3, #100	; 0x64
 8013ad6:	2204      	movs	r2, #4
 8013ad8:	68f8      	ldr	r0, [r7, #12]
 8013ada:	f7ff fcad 	bl	8013438 <SPIF_Transmit>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	f083 0301 	eor.w	r3, r3, #1
 8013ae4:	b2db      	uxtb	r3, r3
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d004      	beq.n	8013af4 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8013aea:	2101      	movs	r1, #1
 8013aec:	68f8      	ldr	r0, [r7, #12]
 8013aee:	f7ff fc68 	bl	80133c2 <SPIF_CsPin>
        break;
 8013af2:	e017      	b.n	8013b24 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8013af4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8013af8:	683a      	ldr	r2, [r7, #0]
 8013afa:	6879      	ldr	r1, [r7, #4]
 8013afc:	68f8      	ldr	r0, [r7, #12]
 8013afe:	f7ff fcb6 	bl	801346e <SPIF_Receive>
 8013b02:	4603      	mov	r3, r0
 8013b04:	f083 0301 	eor.w	r3, r3, #1
 8013b08:	b2db      	uxtb	r3, r3
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d004      	beq.n	8013b18 <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 8013b0e:	2101      	movs	r1, #1
 8013b10:	68f8      	ldr	r0, [r7, #12]
 8013b12:	f7ff fc56 	bl	80133c2 <SPIF_CsPin>
      break;
 8013b16:	e005      	b.n	8013b24 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 8013b18:	2101      	movs	r1, #1
 8013b1a:	68f8      	ldr	r0, [r7, #12]
 8013b1c:	f7ff fc51 	bl	80133c2 <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8013b20:	2301      	movs	r3, #1
 8013b22:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8013b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b26:	4618      	mov	r0, r3
 8013b28:	3718      	adds	r7, #24
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}

08013b2e <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 8013b2e:	b580      	push	{r7, lr}
 8013b30:	b086      	sub	sp, #24
 8013b32:	af00      	add	r7, sp, #0
 8013b34:	60f8      	str	r0, [r7, #12]
 8013b36:	60b9      	str	r1, [r7, #8]
 8013b38:	607a      	str	r2, [r7, #4]
 8013b3a:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d03a      	beq.n	8013bbc <SPIF_Init+0x8e>
 8013b46:	68bb      	ldr	r3, [r7, #8]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d037      	beq.n	8013bbc <SPIF_Init+0x8e>
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d034      	beq.n	8013bbc <SPIF_Init+0x8e>
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	7a9b      	ldrb	r3, [r3, #10]
 8013b56:	2b01      	cmp	r3, #1
 8013b58:	d030      	beq.n	8013bbc <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 8013b5a:	2220      	movs	r2, #32
 8013b5c:	2100      	movs	r1, #0
 8013b5e:	68f8      	ldr	r0, [r7, #12]
 8013b60:	f002 fe77 	bl	8016852 <memset>
    Handle->HSpi = HSpi;
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	68ba      	ldr	r2, [r7, #8]
 8013b68:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	687a      	ldr	r2, [r7, #4]
 8013b6e:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 8013b70:	887a      	ldrh	r2, [r7, #2]
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 8013b76:	2101      	movs	r1, #1
 8013b78:	68f8      	ldr	r0, [r7, #12]
 8013b7a:	f7ff fc22 	bl	80133c2 <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 8013b7e:	e002      	b.n	8013b86 <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 8013b80:	2001      	movs	r0, #1
 8013b82:	f7ff fbf3 	bl	801336c <SPIF_Delay>
    while (HAL_GetTick() < 20)
 8013b86:	f7f2 faff 	bl	8006188 <HAL_GetTick>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	2b13      	cmp	r3, #19
 8013b8e:	d9f7      	bls.n	8013b80 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 8013b90:	68f8      	ldr	r0, [r7, #12]
 8013b92:	f7ff fcab 	bl	80134ec <SPIF_WriteDisable>
 8013b96:	4603      	mov	r3, r0
 8013b98:	f083 0301 	eor.w	r3, r3, #1
 8013b9c:	b2db      	uxtb	r3, r3
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d10b      	bne.n	8013bba <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 8013ba2:	68f8      	ldr	r0, [r7, #12]
 8013ba4:	f7ff fd12 	bl	80135cc <SPIF_FindChip>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 8013bac:	7dfb      	ldrb	r3, [r7, #23]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d004      	beq.n	8013bbc <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	2201      	movs	r2, #1
 8013bb6:	729a      	strb	r2, [r3, #10]
 8013bb8:	e000      	b.n	8013bbc <SPIF_Init+0x8e>
      break;
 8013bba:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8013bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	3718      	adds	r7, #24
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	bd80      	pop	{r7, pc}

08013bc6 <SPIF_EraseChip>:
  * @param  *Handle: Pointer to SPIF_HandleTypeDef structure
  *
  * @retval bool: true or false
  */
bool SPIF_EraseChip(SPIF_HandleTypeDef *Handle)
{
 8013bc6:	b580      	push	{r7, lr}
 8013bc8:	b084      	sub	sp, #16
 8013bca:	af00      	add	r7, sp, #0
 8013bcc:	6078      	str	r0, [r7, #4]
  SPIF_Lock(Handle);
 8013bce:	6878      	ldr	r0, [r7, #4]
 8013bd0:	f7ff fbd7 	bl	8013382 <SPIF_Lock>
  bool retVal = false;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_CHIPERASE1};
 8013bd8:	2360      	movs	r3, #96	; 0x60
 8013bda:	733b      	strb	r3, [r7, #12]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseChip() START\r\n");
    if (SPIF_WriteEnable(Handle) == false)
 8013bdc:	6878      	ldr	r0, [r7, #4]
 8013bde:	f7ff fc61 	bl	80134a4 <SPIF_WriteEnable>
 8013be2:	4603      	mov	r3, r0
 8013be4:	f083 0301 	eor.w	r3, r3, #1
 8013be8:	b2db      	uxtb	r3, r3
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d129      	bne.n	8013c42 <SPIF_EraseChip+0x7c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8013bee:	2100      	movs	r1, #0
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f7ff fbe6 	bl	80133c2 <SPIF_CsPin>
    if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8013bf6:	f107 010c 	add.w	r1, r7, #12
 8013bfa:	2364      	movs	r3, #100	; 0x64
 8013bfc:	2201      	movs	r2, #1
 8013bfe:	6878      	ldr	r0, [r7, #4]
 8013c00:	f7ff fc1a 	bl	8013438 <SPIF_Transmit>
 8013c04:	4603      	mov	r3, r0
 8013c06:	f083 0301 	eor.w	r3, r3, #1
 8013c0a:	b2db      	uxtb	r3, r3
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d004      	beq.n	8013c1a <SPIF_EraseChip+0x54>
    {
      SPIF_CsPin(Handle, 1);
 8013c10:	2101      	movs	r1, #1
 8013c12:	6878      	ldr	r0, [r7, #4]
 8013c14:	f7ff fbd5 	bl	80133c2 <SPIF_CsPin>
      break;
 8013c18:	e014      	b.n	8013c44 <SPIF_EraseChip+0x7e>
    }
    SPIF_CsPin(Handle, 1);
 8013c1a:	2101      	movs	r1, #1
 8013c1c:	6878      	ldr	r0, [r7, #4]
 8013c1e:	f7ff fbd0 	bl	80133c2 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, Handle->BlockCnt * 1000))
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	69db      	ldr	r3, [r3, #28]
 8013c26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013c2a:	fb02 f303 	mul.w	r3, r2, r3
 8013c2e:	4619      	mov	r1, r3
 8013c30:	6878      	ldr	r0, [r7, #4]
 8013c32:	f7ff fca4 	bl	801357e <SPIF_WaitForWriting>
 8013c36:	4603      	mov	r3, r0
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d003      	beq.n	8013c44 <SPIF_EraseChip+0x7e>
    {
      dprintf("SPIF_EraseChip() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	73fb      	strb	r3, [r7, #15]
 8013c40:	e000      	b.n	8013c44 <SPIF_EraseChip+0x7e>
      break;
 8013c42:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8013c44:	6878      	ldr	r0, [r7, #4]
 8013c46:	f7ff fc51 	bl	80134ec <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	f7ff fbac 	bl	80133a8 <SPIF_UnLock>
  return retVal;
 8013c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	3710      	adds	r7, #16
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}

08013c5a <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 8013c5a:	b580      	push	{r7, lr}
 8013c5c:	b086      	sub	sp, #24
 8013c5e:	af00      	add	r7, sp, #0
 8013c60:	6078      	str	r0, [r7, #4]
 8013c62:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f7ff fb8c 	bl	8013382 <SPIF_Lock>
  bool retVal = false;
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 8013c6e:	683b      	ldr	r3, [r7, #0]
 8013c70:	031b      	lsls	r3, r3, #12
 8013c72:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	699b      	ldr	r3, [r3, #24]
 8013c78:	683a      	ldr	r2, [r7, #0]
 8013c7a:	429a      	cmp	r2, r3
 8013c7c:	d262      	bcs.n	8013d44 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	f7ff fc10 	bl	80134a4 <SPIF_WriteEnable>
 8013c84:	4603      	mov	r3, r0
 8013c86:	f083 0301 	eor.w	r3, r3, #1
 8013c8a:	b2db      	uxtb	r3, r3
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d15b      	bne.n	8013d48 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8013c90:	2100      	movs	r1, #0
 8013c92:	6878      	ldr	r0, [r7, #4]
 8013c94:	f7ff fb95 	bl	80133c2 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	69db      	ldr	r3, [r3, #28]
 8013c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013ca0:	d322      	bcc.n	8013ce8 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 8013ca2:	2321      	movs	r3, #33	; 0x21
 8013ca4:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 8013ca6:	693b      	ldr	r3, [r7, #16]
 8013ca8:	0e1b      	lsrs	r3, r3, #24
 8013caa:	b2db      	uxtb	r3, r3
 8013cac:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 8013cae:	693b      	ldr	r3, [r7, #16]
 8013cb0:	0c1b      	lsrs	r3, r3, #16
 8013cb2:	b2db      	uxtb	r3, r3
 8013cb4:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 8013cb6:	693b      	ldr	r3, [r7, #16]
 8013cb8:	0a1b      	lsrs	r3, r3, #8
 8013cba:	b2db      	uxtb	r3, r3
 8013cbc:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 8013cbe:	693b      	ldr	r3, [r7, #16]
 8013cc0:	b2db      	uxtb	r3, r3
 8013cc2:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8013cc4:	f107 0108 	add.w	r1, r7, #8
 8013cc8:	2364      	movs	r3, #100	; 0x64
 8013cca:	2205      	movs	r2, #5
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	f7ff fbb3 	bl	8013438 <SPIF_Transmit>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	f083 0301 	eor.w	r3, r3, #1
 8013cd8:	b2db      	uxtb	r3, r3
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d023      	beq.n	8013d26 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8013cde:	2101      	movs	r1, #1
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f7ff fb6e 	bl	80133c2 <SPIF_CsPin>
        break;
 8013ce6:	e030      	b.n	8013d4a <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 8013ce8:	2320      	movs	r3, #32
 8013cea:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 8013cec:	693b      	ldr	r3, [r7, #16]
 8013cee:	0c1b      	lsrs	r3, r3, #16
 8013cf0:	b2db      	uxtb	r3, r3
 8013cf2:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 8013cf4:	693b      	ldr	r3, [r7, #16]
 8013cf6:	0a1b      	lsrs	r3, r3, #8
 8013cf8:	b2db      	uxtb	r3, r3
 8013cfa:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 8013cfc:	693b      	ldr	r3, [r7, #16]
 8013cfe:	b2db      	uxtb	r3, r3
 8013d00:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8013d02:	f107 0108 	add.w	r1, r7, #8
 8013d06:	2364      	movs	r3, #100	; 0x64
 8013d08:	2204      	movs	r2, #4
 8013d0a:	6878      	ldr	r0, [r7, #4]
 8013d0c:	f7ff fb94 	bl	8013438 <SPIF_Transmit>
 8013d10:	4603      	mov	r3, r0
 8013d12:	f083 0301 	eor.w	r3, r3, #1
 8013d16:	b2db      	uxtb	r3, r3
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d004      	beq.n	8013d26 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8013d1c:	2101      	movs	r1, #1
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	f7ff fb4f 	bl	80133c2 <SPIF_CsPin>
        break;
 8013d24:	e011      	b.n	8013d4a <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 8013d26:	2101      	movs	r1, #1
 8013d28:	6878      	ldr	r0, [r7, #4]
 8013d2a:	f7ff fb4a 	bl	80133c2 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 8013d2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013d32:	6878      	ldr	r0, [r7, #4]
 8013d34:	f7ff fc23 	bl	801357e <SPIF_WaitForWriting>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d005      	beq.n	8013d4a <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 8013d3e:	2301      	movs	r3, #1
 8013d40:	75fb      	strb	r3, [r7, #23]
 8013d42:	e002      	b.n	8013d4a <SPIF_EraseSector+0xf0>
      break;
 8013d44:	bf00      	nop
 8013d46:	e000      	b.n	8013d4a <SPIF_EraseSector+0xf0>
      break;
 8013d48:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8013d4a:	6878      	ldr	r0, [r7, #4]
 8013d4c:	f7ff fbce 	bl	80134ec <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8013d50:	6878      	ldr	r0, [r7, #4]
 8013d52:	f7ff fb29 	bl	80133a8 <SPIF_UnLock>
  return retVal;
 8013d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d58:	4618      	mov	r0, r3
 8013d5a:	3718      	adds	r7, #24
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}

08013d60 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b088      	sub	sp, #32
 8013d64:	af02      	add	r7, sp, #8
 8013d66:	60f8      	str	r0, [r7, #12]
 8013d68:	60b9      	str	r1, [r7, #8]
 8013d6a:	607a      	str	r2, [r7, #4]
 8013d6c:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8013d6e:	68f8      	ldr	r0, [r7, #12]
 8013d70:	f7ff fb07 	bl	8013382 <SPIF_Lock>
  bool retVal = false;
 8013d74:	2300      	movs	r3, #0
 8013d76:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 8013d78:	6a3b      	ldr	r3, [r7, #32]
 8013d7a:	9300      	str	r3, [sp, #0]
 8013d7c:	683b      	ldr	r3, [r7, #0]
 8013d7e:	687a      	ldr	r2, [r7, #4]
 8013d80:	68b9      	ldr	r1, [r7, #8]
 8013d82:	68f8      	ldr	r0, [r7, #12]
 8013d84:	f7ff fdba 	bl	80138fc <SPIF_WriteFn>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 8013d8c:	68f8      	ldr	r0, [r7, #12]
 8013d8e:	f7ff fb0b 	bl	80133a8 <SPIF_UnLock>
  return retVal;
 8013d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d94:	4618      	mov	r0, r3
 8013d96:	3718      	adds	r7, #24
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}

08013d9c <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b088      	sub	sp, #32
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	60f8      	str	r0, [r7, #12]
 8013da4:	60b9      	str	r1, [r7, #8]
 8013da6:	607a      	str	r2, [r7, #4]
 8013da8:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8013daa:	68f8      	ldr	r0, [r7, #12]
 8013dac:	f7ff fae9 	bl	8013382 <SPIF_Lock>
  bool retVal = false;
 8013db0:	2300      	movs	r3, #0
 8013db2:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	021b      	lsls	r3, r3, #8
 8013db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013dba:	4413      	add	r3, r2
 8013dbc:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 8013dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dc0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8013dc4:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 8013dc6:	683a      	ldr	r2, [r7, #0]
 8013dc8:	697b      	ldr	r3, [r7, #20]
 8013dca:	429a      	cmp	r2, r3
 8013dcc:	d901      	bls.n	8013dd2 <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 8013dce:	697b      	ldr	r3, [r7, #20]
 8013dd0:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 8013dd2:	683b      	ldr	r3, [r7, #0]
 8013dd4:	687a      	ldr	r2, [r7, #4]
 8013dd6:	69b9      	ldr	r1, [r7, #24]
 8013dd8:	68f8      	ldr	r0, [r7, #12]
 8013dda:	f7ff fe37 	bl	8013a4c <SPIF_ReadFn>
 8013dde:	4603      	mov	r3, r0
 8013de0:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 8013de2:	68f8      	ldr	r0, [r7, #12]
 8013de4:	f7ff fae0 	bl	80133a8 <SPIF_UnLock>
  return retVal;
 8013de8:	7ffb      	ldrb	r3, [r7, #31]
}
 8013dea:	4618      	mov	r0, r3
 8013dec:	3720      	adds	r7, #32
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bd80      	pop	{r7, pc}
	...

08013df4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013df8:	2200      	movs	r2, #0
 8013dfa:	4912      	ldr	r1, [pc, #72]	; (8013e44 <MX_USB_DEVICE_Init+0x50>)
 8013dfc:	4812      	ldr	r0, [pc, #72]	; (8013e48 <MX_USB_DEVICE_Init+0x54>)
 8013dfe:	f7fe f825 	bl	8011e4c <USBD_Init>
 8013e02:	4603      	mov	r3, r0
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d001      	beq.n	8013e0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013e08:	f7ed ffa9 	bl	8001d5e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013e0c:	490f      	ldr	r1, [pc, #60]	; (8013e4c <MX_USB_DEVICE_Init+0x58>)
 8013e0e:	480e      	ldr	r0, [pc, #56]	; (8013e48 <MX_USB_DEVICE_Init+0x54>)
 8013e10:	f7fe f84c 	bl	8011eac <USBD_RegisterClass>
 8013e14:	4603      	mov	r3, r0
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d001      	beq.n	8013e1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013e1a:	f7ed ffa0 	bl	8001d5e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013e1e:	490c      	ldr	r1, [pc, #48]	; (8013e50 <MX_USB_DEVICE_Init+0x5c>)
 8013e20:	4809      	ldr	r0, [pc, #36]	; (8013e48 <MX_USB_DEVICE_Init+0x54>)
 8013e22:	f7fd ff43 	bl	8011cac <USBD_CDC_RegisterInterface>
 8013e26:	4603      	mov	r3, r0
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d001      	beq.n	8013e30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013e2c:	f7ed ff97 	bl	8001d5e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013e30:	4805      	ldr	r0, [pc, #20]	; (8013e48 <MX_USB_DEVICE_Init+0x54>)
 8013e32:	f7fe f871 	bl	8011f18 <USBD_Start>
 8013e36:	4603      	mov	r3, r0
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d001      	beq.n	8013e40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013e3c:	f7ed ff8f 	bl	8001d5e <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013e40:	bf00      	nop
 8013e42:	bd80      	pop	{r7, pc}
 8013e44:	200000e4 	.word	0x200000e4
 8013e48:	20001104 	.word	0x20001104
 8013e4c:	20000050 	.word	0x20000050
 8013e50:	200000d0 	.word	0x200000d0

08013e54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013e58:	2200      	movs	r2, #0
 8013e5a:	4905      	ldr	r1, [pc, #20]	; (8013e70 <CDC_Init_FS+0x1c>)
 8013e5c:	4805      	ldr	r0, [pc, #20]	; (8013e74 <CDC_Init_FS+0x20>)
 8013e5e:	f7fd ff3f 	bl	8011ce0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013e62:	4905      	ldr	r1, [pc, #20]	; (8013e78 <CDC_Init_FS+0x24>)
 8013e64:	4803      	ldr	r0, [pc, #12]	; (8013e74 <CDC_Init_FS+0x20>)
 8013e66:	f7fd ff5d 	bl	8011d24 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013e6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	bd80      	pop	{r7, pc}
 8013e70:	200017e0 	.word	0x200017e0
 8013e74:	20001104 	.word	0x20001104
 8013e78:	200013e0 	.word	0x200013e0

08013e7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013e7c:	b480      	push	{r7}
 8013e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013e80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	46bd      	mov	sp, r7
 8013e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8a:	4770      	bx	lr

08013e8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013e8c:	b480      	push	{r7}
 8013e8e:	b083      	sub	sp, #12
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	4603      	mov	r3, r0
 8013e94:	6039      	str	r1, [r7, #0]
 8013e96:	71fb      	strb	r3, [r7, #7]
 8013e98:	4613      	mov	r3, r2
 8013e9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013e9c:	79fb      	ldrb	r3, [r7, #7]
 8013e9e:	2b23      	cmp	r3, #35	; 0x23
 8013ea0:	d84a      	bhi.n	8013f38 <CDC_Control_FS+0xac>
 8013ea2:	a201      	add	r2, pc, #4	; (adr r2, 8013ea8 <CDC_Control_FS+0x1c>)
 8013ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ea8:	08013f39 	.word	0x08013f39
 8013eac:	08013f39 	.word	0x08013f39
 8013eb0:	08013f39 	.word	0x08013f39
 8013eb4:	08013f39 	.word	0x08013f39
 8013eb8:	08013f39 	.word	0x08013f39
 8013ebc:	08013f39 	.word	0x08013f39
 8013ec0:	08013f39 	.word	0x08013f39
 8013ec4:	08013f39 	.word	0x08013f39
 8013ec8:	08013f39 	.word	0x08013f39
 8013ecc:	08013f39 	.word	0x08013f39
 8013ed0:	08013f39 	.word	0x08013f39
 8013ed4:	08013f39 	.word	0x08013f39
 8013ed8:	08013f39 	.word	0x08013f39
 8013edc:	08013f39 	.word	0x08013f39
 8013ee0:	08013f39 	.word	0x08013f39
 8013ee4:	08013f39 	.word	0x08013f39
 8013ee8:	08013f39 	.word	0x08013f39
 8013eec:	08013f39 	.word	0x08013f39
 8013ef0:	08013f39 	.word	0x08013f39
 8013ef4:	08013f39 	.word	0x08013f39
 8013ef8:	08013f39 	.word	0x08013f39
 8013efc:	08013f39 	.word	0x08013f39
 8013f00:	08013f39 	.word	0x08013f39
 8013f04:	08013f39 	.word	0x08013f39
 8013f08:	08013f39 	.word	0x08013f39
 8013f0c:	08013f39 	.word	0x08013f39
 8013f10:	08013f39 	.word	0x08013f39
 8013f14:	08013f39 	.word	0x08013f39
 8013f18:	08013f39 	.word	0x08013f39
 8013f1c:	08013f39 	.word	0x08013f39
 8013f20:	08013f39 	.word	0x08013f39
 8013f24:	08013f39 	.word	0x08013f39
 8013f28:	08013f39 	.word	0x08013f39
 8013f2c:	08013f39 	.word	0x08013f39
 8013f30:	08013f39 	.word	0x08013f39
 8013f34:	08013f39 	.word	0x08013f39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013f38:	bf00      	nop
  }

  return (USBD_OK);
 8013f3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	370c      	adds	r7, #12
 8013f40:	46bd      	mov	sp, r7
 8013f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f46:	4770      	bx	lr

08013f48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b082      	sub	sp, #8
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
 8013f50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013f52:	6879      	ldr	r1, [r7, #4]
 8013f54:	4805      	ldr	r0, [pc, #20]	; (8013f6c <CDC_Receive_FS+0x24>)
 8013f56:	f7fd fee5 	bl	8011d24 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013f5a:	4804      	ldr	r0, [pc, #16]	; (8013f6c <CDC_Receive_FS+0x24>)
 8013f5c:	f7fd ff40 	bl	8011de0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013f60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013f62:	4618      	mov	r0, r3
 8013f64:	3708      	adds	r7, #8
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}
 8013f6a:	bf00      	nop
 8013f6c:	20001104 	.word	0x20001104

08013f70 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b084      	sub	sp, #16
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
 8013f78:	460b      	mov	r3, r1
 8013f7a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013f80:	4b0d      	ldr	r3, [pc, #52]	; (8013fb8 <CDC_Transmit_FS+0x48>)
 8013f82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f86:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013f88:	68bb      	ldr	r3, [r7, #8]
 8013f8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d001      	beq.n	8013f96 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8013f92:	2301      	movs	r3, #1
 8013f94:	e00b      	b.n	8013fae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8013f96:	887b      	ldrh	r3, [r7, #2]
 8013f98:	461a      	mov	r2, r3
 8013f9a:	6879      	ldr	r1, [r7, #4]
 8013f9c:	4806      	ldr	r0, [pc, #24]	; (8013fb8 <CDC_Transmit_FS+0x48>)
 8013f9e:	f7fd fe9f 	bl	8011ce0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013fa2:	4805      	ldr	r0, [pc, #20]	; (8013fb8 <CDC_Transmit_FS+0x48>)
 8013fa4:	f7fd fedc 	bl	8011d60 <USBD_CDC_TransmitPacket>
 8013fa8:	4603      	mov	r3, r0
 8013faa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8013fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3710      	adds	r7, #16
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}
 8013fb6:	bf00      	nop
 8013fb8:	20001104 	.word	0x20001104

08013fbc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013fbc:	b480      	push	{r7}
 8013fbe:	b087      	sub	sp, #28
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	60f8      	str	r0, [r7, #12]
 8013fc4:	60b9      	str	r1, [r7, #8]
 8013fc6:	4613      	mov	r3, r2
 8013fc8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013fca:	2300      	movs	r3, #0
 8013fcc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8013fce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	371c      	adds	r7, #28
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fdc:	4770      	bx	lr
	...

08013fe0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013fe0:	b480      	push	{r7}
 8013fe2:	b083      	sub	sp, #12
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	6039      	str	r1, [r7, #0]
 8013fea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013fec:	683b      	ldr	r3, [r7, #0]
 8013fee:	2212      	movs	r2, #18
 8013ff0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013ff2:	4b03      	ldr	r3, [pc, #12]	; (8014000 <USBD_FS_DeviceDescriptor+0x20>)
}
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	370c      	adds	r7, #12
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ffe:	4770      	bx	lr
 8014000:	20000104 	.word	0x20000104

08014004 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014004:	b480      	push	{r7}
 8014006:	b083      	sub	sp, #12
 8014008:	af00      	add	r7, sp, #0
 801400a:	4603      	mov	r3, r0
 801400c:	6039      	str	r1, [r7, #0]
 801400e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	2204      	movs	r2, #4
 8014014:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014016:	4b03      	ldr	r3, [pc, #12]	; (8014024 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014018:	4618      	mov	r0, r3
 801401a:	370c      	adds	r7, #12
 801401c:	46bd      	mov	sp, r7
 801401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014022:	4770      	bx	lr
 8014024:	20000124 	.word	0x20000124

08014028 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b082      	sub	sp, #8
 801402c:	af00      	add	r7, sp, #0
 801402e:	4603      	mov	r3, r0
 8014030:	6039      	str	r1, [r7, #0]
 8014032:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014034:	79fb      	ldrb	r3, [r7, #7]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d105      	bne.n	8014046 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801403a:	683a      	ldr	r2, [r7, #0]
 801403c:	4907      	ldr	r1, [pc, #28]	; (801405c <USBD_FS_ProductStrDescriptor+0x34>)
 801403e:	4808      	ldr	r0, [pc, #32]	; (8014060 <USBD_FS_ProductStrDescriptor+0x38>)
 8014040:	f7ff f8b4 	bl	80131ac <USBD_GetString>
 8014044:	e004      	b.n	8014050 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014046:	683a      	ldr	r2, [r7, #0]
 8014048:	4904      	ldr	r1, [pc, #16]	; (801405c <USBD_FS_ProductStrDescriptor+0x34>)
 801404a:	4805      	ldr	r0, [pc, #20]	; (8014060 <USBD_FS_ProductStrDescriptor+0x38>)
 801404c:	f7ff f8ae 	bl	80131ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8014050:	4b02      	ldr	r3, [pc, #8]	; (801405c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014052:	4618      	mov	r0, r3
 8014054:	3708      	adds	r7, #8
 8014056:	46bd      	mov	sp, r7
 8014058:	bd80      	pop	{r7, pc}
 801405a:	bf00      	nop
 801405c:	20001be0 	.word	0x20001be0
 8014060:	0801bca8 	.word	0x0801bca8

08014064 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b082      	sub	sp, #8
 8014068:	af00      	add	r7, sp, #0
 801406a:	4603      	mov	r3, r0
 801406c:	6039      	str	r1, [r7, #0]
 801406e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014070:	683a      	ldr	r2, [r7, #0]
 8014072:	4904      	ldr	r1, [pc, #16]	; (8014084 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014074:	4804      	ldr	r0, [pc, #16]	; (8014088 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014076:	f7ff f899 	bl	80131ac <USBD_GetString>
  return USBD_StrDesc;
 801407a:	4b02      	ldr	r3, [pc, #8]	; (8014084 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801407c:	4618      	mov	r0, r3
 801407e:	3708      	adds	r7, #8
 8014080:	46bd      	mov	sp, r7
 8014082:	bd80      	pop	{r7, pc}
 8014084:	20001be0 	.word	0x20001be0
 8014088:	0801bcb4 	.word	0x0801bcb4

0801408c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b082      	sub	sp, #8
 8014090:	af00      	add	r7, sp, #0
 8014092:	4603      	mov	r3, r0
 8014094:	6039      	str	r1, [r7, #0]
 8014096:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014098:	683b      	ldr	r3, [r7, #0]
 801409a:	221a      	movs	r2, #26
 801409c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801409e:	f000 f855 	bl	801414c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80140a2:	4b02      	ldr	r3, [pc, #8]	; (80140ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80140a4:	4618      	mov	r0, r3
 80140a6:	3708      	adds	r7, #8
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bd80      	pop	{r7, pc}
 80140ac:	20000128 	.word	0x20000128

080140b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b082      	sub	sp, #8
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	4603      	mov	r3, r0
 80140b8:	6039      	str	r1, [r7, #0]
 80140ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80140bc:	79fb      	ldrb	r3, [r7, #7]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d105      	bne.n	80140ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80140c2:	683a      	ldr	r2, [r7, #0]
 80140c4:	4907      	ldr	r1, [pc, #28]	; (80140e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80140c6:	4808      	ldr	r0, [pc, #32]	; (80140e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80140c8:	f7ff f870 	bl	80131ac <USBD_GetString>
 80140cc:	e004      	b.n	80140d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80140ce:	683a      	ldr	r2, [r7, #0]
 80140d0:	4904      	ldr	r1, [pc, #16]	; (80140e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80140d2:	4805      	ldr	r0, [pc, #20]	; (80140e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80140d4:	f7ff f86a 	bl	80131ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80140d8:	4b02      	ldr	r3, [pc, #8]	; (80140e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80140da:	4618      	mov	r0, r3
 80140dc:	3708      	adds	r7, #8
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}
 80140e2:	bf00      	nop
 80140e4:	20001be0 	.word	0x20001be0
 80140e8:	0801bcc8 	.word	0x0801bcc8

080140ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b082      	sub	sp, #8
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	4603      	mov	r3, r0
 80140f4:	6039      	str	r1, [r7, #0]
 80140f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80140f8:	79fb      	ldrb	r3, [r7, #7]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d105      	bne.n	801410a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80140fe:	683a      	ldr	r2, [r7, #0]
 8014100:	4907      	ldr	r1, [pc, #28]	; (8014120 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014102:	4808      	ldr	r0, [pc, #32]	; (8014124 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014104:	f7ff f852 	bl	80131ac <USBD_GetString>
 8014108:	e004      	b.n	8014114 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801410a:	683a      	ldr	r2, [r7, #0]
 801410c:	4904      	ldr	r1, [pc, #16]	; (8014120 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801410e:	4805      	ldr	r0, [pc, #20]	; (8014124 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014110:	f7ff f84c 	bl	80131ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8014114:	4b02      	ldr	r3, [pc, #8]	; (8014120 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014116:	4618      	mov	r0, r3
 8014118:	3708      	adds	r7, #8
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}
 801411e:	bf00      	nop
 8014120:	20001be0 	.word	0x20001be0
 8014124:	0801bcd4 	.word	0x0801bcd4

08014128 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014128:	b480      	push	{r7}
 801412a:	b083      	sub	sp, #12
 801412c:	af00      	add	r7, sp, #0
 801412e:	4603      	mov	r3, r0
 8014130:	6039      	str	r1, [r7, #0]
 8014132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8014134:	683b      	ldr	r3, [r7, #0]
 8014136:	220c      	movs	r2, #12
 8014138:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801413a:	4b03      	ldr	r3, [pc, #12]	; (8014148 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801413c:	4618      	mov	r0, r3
 801413e:	370c      	adds	r7, #12
 8014140:	46bd      	mov	sp, r7
 8014142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014146:	4770      	bx	lr
 8014148:	20000118 	.word	0x20000118

0801414c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b084      	sub	sp, #16
 8014150:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014152:	4b0f      	ldr	r3, [pc, #60]	; (8014190 <Get_SerialNum+0x44>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014158:	4b0e      	ldr	r3, [pc, #56]	; (8014194 <Get_SerialNum+0x48>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801415e:	4b0e      	ldr	r3, [pc, #56]	; (8014198 <Get_SerialNum+0x4c>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014164:	68fa      	ldr	r2, [r7, #12]
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	4413      	add	r3, r2
 801416a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d009      	beq.n	8014186 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014172:	2208      	movs	r2, #8
 8014174:	4909      	ldr	r1, [pc, #36]	; (801419c <Get_SerialNum+0x50>)
 8014176:	68f8      	ldr	r0, [r7, #12]
 8014178:	f000 f814 	bl	80141a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801417c:	2204      	movs	r2, #4
 801417e:	4908      	ldr	r1, [pc, #32]	; (80141a0 <Get_SerialNum+0x54>)
 8014180:	68b8      	ldr	r0, [r7, #8]
 8014182:	f000 f80f 	bl	80141a4 <IntToUnicode>
  }
}
 8014186:	bf00      	nop
 8014188:	3710      	adds	r7, #16
 801418a:	46bd      	mov	sp, r7
 801418c:	bd80      	pop	{r7, pc}
 801418e:	bf00      	nop
 8014190:	1fff7590 	.word	0x1fff7590
 8014194:	1fff7594 	.word	0x1fff7594
 8014198:	1fff7598 	.word	0x1fff7598
 801419c:	2000012a 	.word	0x2000012a
 80141a0:	2000013a 	.word	0x2000013a

080141a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80141a4:	b480      	push	{r7}
 80141a6:	b087      	sub	sp, #28
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	60f8      	str	r0, [r7, #12]
 80141ac:	60b9      	str	r1, [r7, #8]
 80141ae:	4613      	mov	r3, r2
 80141b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80141b2:	2300      	movs	r3, #0
 80141b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80141b6:	2300      	movs	r3, #0
 80141b8:	75fb      	strb	r3, [r7, #23]
 80141ba:	e027      	b.n	801420c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	0f1b      	lsrs	r3, r3, #28
 80141c0:	2b09      	cmp	r3, #9
 80141c2:	d80b      	bhi.n	80141dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	0f1b      	lsrs	r3, r3, #28
 80141c8:	b2da      	uxtb	r2, r3
 80141ca:	7dfb      	ldrb	r3, [r7, #23]
 80141cc:	005b      	lsls	r3, r3, #1
 80141ce:	4619      	mov	r1, r3
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	440b      	add	r3, r1
 80141d4:	3230      	adds	r2, #48	; 0x30
 80141d6:	b2d2      	uxtb	r2, r2
 80141d8:	701a      	strb	r2, [r3, #0]
 80141da:	e00a      	b.n	80141f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	0f1b      	lsrs	r3, r3, #28
 80141e0:	b2da      	uxtb	r2, r3
 80141e2:	7dfb      	ldrb	r3, [r7, #23]
 80141e4:	005b      	lsls	r3, r3, #1
 80141e6:	4619      	mov	r1, r3
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	440b      	add	r3, r1
 80141ec:	3237      	adds	r2, #55	; 0x37
 80141ee:	b2d2      	uxtb	r2, r2
 80141f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	011b      	lsls	r3, r3, #4
 80141f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80141f8:	7dfb      	ldrb	r3, [r7, #23]
 80141fa:	005b      	lsls	r3, r3, #1
 80141fc:	3301      	adds	r3, #1
 80141fe:	68ba      	ldr	r2, [r7, #8]
 8014200:	4413      	add	r3, r2
 8014202:	2200      	movs	r2, #0
 8014204:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014206:	7dfb      	ldrb	r3, [r7, #23]
 8014208:	3301      	adds	r3, #1
 801420a:	75fb      	strb	r3, [r7, #23]
 801420c:	7dfa      	ldrb	r2, [r7, #23]
 801420e:	79fb      	ldrb	r3, [r7, #7]
 8014210:	429a      	cmp	r2, r3
 8014212:	d3d3      	bcc.n	80141bc <IntToUnicode+0x18>
  }
}
 8014214:	bf00      	nop
 8014216:	bf00      	nop
 8014218:	371c      	adds	r7, #28
 801421a:	46bd      	mov	sp, r7
 801421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014220:	4770      	bx	lr
	...

08014224 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b084      	sub	sp, #16
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	4a0d      	ldr	r2, [pc, #52]	; (8014268 <HAL_PCD_MspInit+0x44>)
 8014232:	4293      	cmp	r3, r2
 8014234:	d113      	bne.n	801425e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8014236:	4b0d      	ldr	r3, [pc, #52]	; (801426c <HAL_PCD_MspInit+0x48>)
 8014238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801423a:	4a0c      	ldr	r2, [pc, #48]	; (801426c <HAL_PCD_MspInit+0x48>)
 801423c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014240:	6593      	str	r3, [r2, #88]	; 0x58
 8014242:	4b0a      	ldr	r3, [pc, #40]	; (801426c <HAL_PCD_MspInit+0x48>)
 8014244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014246:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801424a:	60fb      	str	r3, [r7, #12]
 801424c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801424e:	2200      	movs	r2, #0
 8014250:	2100      	movs	r1, #0
 8014252:	2043      	movs	r0, #67	; 0x43
 8014254:	f7f3 fb43 	bl	80078de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8014258:	2043      	movs	r0, #67	; 0x43
 801425a:	f7f3 fb5c 	bl	8007916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801425e:	bf00      	nop
 8014260:	3710      	adds	r7, #16
 8014262:	46bd      	mov	sp, r7
 8014264:	bd80      	pop	{r7, pc}
 8014266:	bf00      	nop
 8014268:	40006800 	.word	0x40006800
 801426c:	40021000 	.word	0x40021000

08014270 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014270:	b580      	push	{r7, lr}
 8014272:	b082      	sub	sp, #8
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8014284:	4619      	mov	r1, r3
 8014286:	4610      	mov	r0, r2
 8014288:	f7fd fe93 	bl	8011fb2 <USBD_LL_SetupStage>
}
 801428c:	bf00      	nop
 801428e:	3708      	adds	r7, #8
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}

08014294 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b082      	sub	sp, #8
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	460b      	mov	r3, r1
 801429e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 80142a6:	78fa      	ldrb	r2, [r7, #3]
 80142a8:	6879      	ldr	r1, [r7, #4]
 80142aa:	4613      	mov	r3, r2
 80142ac:	009b      	lsls	r3, r3, #2
 80142ae:	4413      	add	r3, r2
 80142b0:	00db      	lsls	r3, r3, #3
 80142b2:	440b      	add	r3, r1
 80142b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80142b8:	681a      	ldr	r2, [r3, #0]
 80142ba:	78fb      	ldrb	r3, [r7, #3]
 80142bc:	4619      	mov	r1, r3
 80142be:	f7fd fecd 	bl	801205c <USBD_LL_DataOutStage>
}
 80142c2:	bf00      	nop
 80142c4:	3708      	adds	r7, #8
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}

080142ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80142ca:	b580      	push	{r7, lr}
 80142cc:	b082      	sub	sp, #8
 80142ce:	af00      	add	r7, sp, #0
 80142d0:	6078      	str	r0, [r7, #4]
 80142d2:	460b      	mov	r3, r1
 80142d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 80142dc:	78fa      	ldrb	r2, [r7, #3]
 80142de:	6879      	ldr	r1, [r7, #4]
 80142e0:	4613      	mov	r3, r2
 80142e2:	009b      	lsls	r3, r3, #2
 80142e4:	4413      	add	r3, r2
 80142e6:	00db      	lsls	r3, r3, #3
 80142e8:	440b      	add	r3, r1
 80142ea:	333c      	adds	r3, #60	; 0x3c
 80142ec:	681a      	ldr	r2, [r3, #0]
 80142ee:	78fb      	ldrb	r3, [r7, #3]
 80142f0:	4619      	mov	r1, r3
 80142f2:	f7fd ff66 	bl	80121c2 <USBD_LL_DataInStage>
}
 80142f6:	bf00      	nop
 80142f8:	3708      	adds	r7, #8
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd80      	pop	{r7, pc}

080142fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80142fe:	b580      	push	{r7, lr}
 8014300:	b082      	sub	sp, #8
 8014302:	af00      	add	r7, sp, #0
 8014304:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801430c:	4618      	mov	r0, r3
 801430e:	f7fe f8a0 	bl	8012452 <USBD_LL_SOF>
}
 8014312:	bf00      	nop
 8014314:	3708      	adds	r7, #8
 8014316:	46bd      	mov	sp, r7
 8014318:	bd80      	pop	{r7, pc}

0801431a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801431a:	b580      	push	{r7, lr}
 801431c:	b084      	sub	sp, #16
 801431e:	af00      	add	r7, sp, #0
 8014320:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014322:	2301      	movs	r3, #1
 8014324:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	689b      	ldr	r3, [r3, #8]
 801432a:	2b02      	cmp	r3, #2
 801432c:	d001      	beq.n	8014332 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801432e:	f7ed fd16 	bl	8001d5e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8014338:	7bfa      	ldrb	r2, [r7, #15]
 801433a:	4611      	mov	r1, r2
 801433c:	4618      	mov	r0, r3
 801433e:	f7fe f844 	bl	80123ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8014348:	4618      	mov	r0, r3
 801434a:	f7fd ffec 	bl	8012326 <USBD_LL_Reset>
}
 801434e:	bf00      	nop
 8014350:	3710      	adds	r7, #16
 8014352:	46bd      	mov	sp, r7
 8014354:	bd80      	pop	{r7, pc}
	...

08014358 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b082      	sub	sp, #8
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8014366:	4618      	mov	r0, r3
 8014368:	f7fe f83f 	bl	80123ea <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	699b      	ldr	r3, [r3, #24]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d005      	beq.n	8014380 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014374:	4b04      	ldr	r3, [pc, #16]	; (8014388 <HAL_PCD_SuspendCallback+0x30>)
 8014376:	691b      	ldr	r3, [r3, #16]
 8014378:	4a03      	ldr	r2, [pc, #12]	; (8014388 <HAL_PCD_SuspendCallback+0x30>)
 801437a:	f043 0306 	orr.w	r3, r3, #6
 801437e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014380:	bf00      	nop
 8014382:	3708      	adds	r7, #8
 8014384:	46bd      	mov	sp, r7
 8014386:	bd80      	pop	{r7, pc}
 8014388:	e000ed00 	.word	0xe000ed00

0801438c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801438c:	b580      	push	{r7, lr}
 801438e:	b082      	sub	sp, #8
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	699b      	ldr	r3, [r3, #24]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d007      	beq.n	80143ac <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801439c:	4b08      	ldr	r3, [pc, #32]	; (80143c0 <HAL_PCD_ResumeCallback+0x34>)
 801439e:	691b      	ldr	r3, [r3, #16]
 80143a0:	4a07      	ldr	r2, [pc, #28]	; (80143c0 <HAL_PCD_ResumeCallback+0x34>)
 80143a2:	f023 0306 	bic.w	r3, r3, #6
 80143a6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80143a8:	f000 fab6 	bl	8014918 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80143b2:	4618      	mov	r0, r3
 80143b4:	f7fe f835 	bl	8012422 <USBD_LL_Resume>
}
 80143b8:	bf00      	nop
 80143ba:	3708      	adds	r7, #8
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}
 80143c0:	e000ed00 	.word	0xe000ed00

080143c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b082      	sub	sp, #8
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80143cc:	f7f6 fe90 	bl	800b0f0 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80143d0:	4a2b      	ldr	r2, [pc, #172]	; (8014480 <USBD_LL_Init+0xbc>)
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	4a29      	ldr	r2, [pc, #164]	; (8014480 <USBD_LL_Init+0xbc>)
 80143dc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 80143e0:	4b27      	ldr	r3, [pc, #156]	; (8014480 <USBD_LL_Init+0xbc>)
 80143e2:	4a28      	ldr	r2, [pc, #160]	; (8014484 <USBD_LL_Init+0xc0>)
 80143e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80143e6:	4b26      	ldr	r3, [pc, #152]	; (8014480 <USBD_LL_Init+0xbc>)
 80143e8:	2208      	movs	r2, #8
 80143ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80143ec:	4b24      	ldr	r3, [pc, #144]	; (8014480 <USBD_LL_Init+0xbc>)
 80143ee:	2202      	movs	r2, #2
 80143f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80143f2:	4b23      	ldr	r3, [pc, #140]	; (8014480 <USBD_LL_Init+0xbc>)
 80143f4:	2202      	movs	r2, #2
 80143f6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80143f8:	4b21      	ldr	r3, [pc, #132]	; (8014480 <USBD_LL_Init+0xbc>)
 80143fa:	2200      	movs	r2, #0
 80143fc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80143fe:	4b20      	ldr	r3, [pc, #128]	; (8014480 <USBD_LL_Init+0xbc>)
 8014400:	2200      	movs	r2, #0
 8014402:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8014404:	4b1e      	ldr	r3, [pc, #120]	; (8014480 <USBD_LL_Init+0xbc>)
 8014406:	2200      	movs	r2, #0
 8014408:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801440a:	4b1d      	ldr	r3, [pc, #116]	; (8014480 <USBD_LL_Init+0xbc>)
 801440c:	2200      	movs	r2, #0
 801440e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8014410:	481b      	ldr	r0, [pc, #108]	; (8014480 <USBD_LL_Init+0xbc>)
 8014412:	f7f5 f88b 	bl	800952c <HAL_PCD_Init>
 8014416:	4603      	mov	r3, r0
 8014418:	2b00      	cmp	r3, #0
 801441a:	d001      	beq.n	8014420 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 801441c:	f7ed fc9f 	bl	8001d5e <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014426:	2318      	movs	r3, #24
 8014428:	2200      	movs	r2, #0
 801442a:	2100      	movs	r1, #0
 801442c:	f7f6 fd8f 	bl	800af4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014436:	2358      	movs	r3, #88	; 0x58
 8014438:	2200      	movs	r2, #0
 801443a:	2180      	movs	r1, #128	; 0x80
 801443c:	f7f6 fd87 	bl	800af4e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014446:	23c0      	movs	r3, #192	; 0xc0
 8014448:	2200      	movs	r2, #0
 801444a:	2181      	movs	r1, #129	; 0x81
 801444c:	f7f6 fd7f 	bl	800af4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014456:	f44f 7388 	mov.w	r3, #272	; 0x110
 801445a:	2200      	movs	r2, #0
 801445c:	2101      	movs	r1, #1
 801445e:	f7f6 fd76 	bl	800af4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014468:	f44f 7380 	mov.w	r3, #256	; 0x100
 801446c:	2200      	movs	r2, #0
 801446e:	2182      	movs	r1, #130	; 0x82
 8014470:	f7f6 fd6d 	bl	800af4e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8014474:	2300      	movs	r3, #0
}
 8014476:	4618      	mov	r0, r3
 8014478:	3708      	adds	r7, #8
 801447a:	46bd      	mov	sp, r7
 801447c:	bd80      	pop	{r7, pc}
 801447e:	bf00      	nop
 8014480:	20001de0 	.word	0x20001de0
 8014484:	40006800 	.word	0x40006800

08014488 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b084      	sub	sp, #16
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014490:	2300      	movs	r3, #0
 8014492:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014494:	2300      	movs	r3, #0
 8014496:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801449e:	4618      	mov	r0, r3
 80144a0:	f7f5 f94a 	bl	8009738 <HAL_PCD_Start>
 80144a4:	4603      	mov	r3, r0
 80144a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80144a8:	7bbb      	ldrb	r3, [r7, #14]
 80144aa:	2b03      	cmp	r3, #3
 80144ac:	d816      	bhi.n	80144dc <USBD_LL_Start+0x54>
 80144ae:	a201      	add	r2, pc, #4	; (adr r2, 80144b4 <USBD_LL_Start+0x2c>)
 80144b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144b4:	080144c5 	.word	0x080144c5
 80144b8:	080144cb 	.word	0x080144cb
 80144bc:	080144d1 	.word	0x080144d1
 80144c0:	080144d7 	.word	0x080144d7
    case HAL_OK :
      usb_status = USBD_OK;
 80144c4:	2300      	movs	r3, #0
 80144c6:	73fb      	strb	r3, [r7, #15]
    break;
 80144c8:	e00b      	b.n	80144e2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80144ca:	2303      	movs	r3, #3
 80144cc:	73fb      	strb	r3, [r7, #15]
    break;
 80144ce:	e008      	b.n	80144e2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80144d0:	2301      	movs	r3, #1
 80144d2:	73fb      	strb	r3, [r7, #15]
    break;
 80144d4:	e005      	b.n	80144e2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80144d6:	2303      	movs	r3, #3
 80144d8:	73fb      	strb	r3, [r7, #15]
    break;
 80144da:	e002      	b.n	80144e2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80144dc:	2303      	movs	r3, #3
 80144de:	73fb      	strb	r3, [r7, #15]
    break;
 80144e0:	bf00      	nop
  }
  return usb_status;
 80144e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80144e4:	4618      	mov	r0, r3
 80144e6:	3710      	adds	r7, #16
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bd80      	pop	{r7, pc}

080144ec <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b084      	sub	sp, #16
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
 80144f4:	4608      	mov	r0, r1
 80144f6:	4611      	mov	r1, r2
 80144f8:	461a      	mov	r2, r3
 80144fa:	4603      	mov	r3, r0
 80144fc:	70fb      	strb	r3, [r7, #3]
 80144fe:	460b      	mov	r3, r1
 8014500:	70bb      	strb	r3, [r7, #2]
 8014502:	4613      	mov	r3, r2
 8014504:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014506:	2300      	movs	r3, #0
 8014508:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801450a:	2300      	movs	r3, #0
 801450c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014514:	78bb      	ldrb	r3, [r7, #2]
 8014516:	883a      	ldrh	r2, [r7, #0]
 8014518:	78f9      	ldrb	r1, [r7, #3]
 801451a:	f7f5 fa7b 	bl	8009a14 <HAL_PCD_EP_Open>
 801451e:	4603      	mov	r3, r0
 8014520:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014522:	7bbb      	ldrb	r3, [r7, #14]
 8014524:	2b03      	cmp	r3, #3
 8014526:	d817      	bhi.n	8014558 <USBD_LL_OpenEP+0x6c>
 8014528:	a201      	add	r2, pc, #4	; (adr r2, 8014530 <USBD_LL_OpenEP+0x44>)
 801452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801452e:	bf00      	nop
 8014530:	08014541 	.word	0x08014541
 8014534:	08014547 	.word	0x08014547
 8014538:	0801454d 	.word	0x0801454d
 801453c:	08014553 	.word	0x08014553
    case HAL_OK :
      usb_status = USBD_OK;
 8014540:	2300      	movs	r3, #0
 8014542:	73fb      	strb	r3, [r7, #15]
    break;
 8014544:	e00b      	b.n	801455e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014546:	2303      	movs	r3, #3
 8014548:	73fb      	strb	r3, [r7, #15]
    break;
 801454a:	e008      	b.n	801455e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801454c:	2301      	movs	r3, #1
 801454e:	73fb      	strb	r3, [r7, #15]
    break;
 8014550:	e005      	b.n	801455e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014552:	2303      	movs	r3, #3
 8014554:	73fb      	strb	r3, [r7, #15]
    break;
 8014556:	e002      	b.n	801455e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8014558:	2303      	movs	r3, #3
 801455a:	73fb      	strb	r3, [r7, #15]
    break;
 801455c:	bf00      	nop
  }
  return usb_status;
 801455e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014560:	4618      	mov	r0, r3
 8014562:	3710      	adds	r7, #16
 8014564:	46bd      	mov	sp, r7
 8014566:	bd80      	pop	{r7, pc}

08014568 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b084      	sub	sp, #16
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
 8014570:	460b      	mov	r3, r1
 8014572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014574:	2300      	movs	r3, #0
 8014576:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014578:	2300      	movs	r3, #0
 801457a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014582:	78fa      	ldrb	r2, [r7, #3]
 8014584:	4611      	mov	r1, r2
 8014586:	4618      	mov	r0, r3
 8014588:	f7f5 faa1 	bl	8009ace <HAL_PCD_EP_Close>
 801458c:	4603      	mov	r3, r0
 801458e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014590:	7bbb      	ldrb	r3, [r7, #14]
 8014592:	2b03      	cmp	r3, #3
 8014594:	d816      	bhi.n	80145c4 <USBD_LL_CloseEP+0x5c>
 8014596:	a201      	add	r2, pc, #4	; (adr r2, 801459c <USBD_LL_CloseEP+0x34>)
 8014598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801459c:	080145ad 	.word	0x080145ad
 80145a0:	080145b3 	.word	0x080145b3
 80145a4:	080145b9 	.word	0x080145b9
 80145a8:	080145bf 	.word	0x080145bf
    case HAL_OK :
      usb_status = USBD_OK;
 80145ac:	2300      	movs	r3, #0
 80145ae:	73fb      	strb	r3, [r7, #15]
    break;
 80145b0:	e00b      	b.n	80145ca <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80145b2:	2303      	movs	r3, #3
 80145b4:	73fb      	strb	r3, [r7, #15]
    break;
 80145b6:	e008      	b.n	80145ca <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80145b8:	2301      	movs	r3, #1
 80145ba:	73fb      	strb	r3, [r7, #15]
    break;
 80145bc:	e005      	b.n	80145ca <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80145be:	2303      	movs	r3, #3
 80145c0:	73fb      	strb	r3, [r7, #15]
    break;
 80145c2:	e002      	b.n	80145ca <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80145c4:	2303      	movs	r3, #3
 80145c6:	73fb      	strb	r3, [r7, #15]
    break;
 80145c8:	bf00      	nop
  }
  return usb_status;
 80145ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80145cc:	4618      	mov	r0, r3
 80145ce:	3710      	adds	r7, #16
 80145d0:	46bd      	mov	sp, r7
 80145d2:	bd80      	pop	{r7, pc}

080145d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b084      	sub	sp, #16
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
 80145dc:	460b      	mov	r3, r1
 80145de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80145e0:	2300      	movs	r3, #0
 80145e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80145e4:	2300      	movs	r3, #0
 80145e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80145ee:	78fa      	ldrb	r2, [r7, #3]
 80145f0:	4611      	mov	r1, r2
 80145f2:	4618      	mov	r0, r3
 80145f4:	f7f5 fb33 	bl	8009c5e <HAL_PCD_EP_SetStall>
 80145f8:	4603      	mov	r3, r0
 80145fa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80145fc:	7bbb      	ldrb	r3, [r7, #14]
 80145fe:	2b03      	cmp	r3, #3
 8014600:	d816      	bhi.n	8014630 <USBD_LL_StallEP+0x5c>
 8014602:	a201      	add	r2, pc, #4	; (adr r2, 8014608 <USBD_LL_StallEP+0x34>)
 8014604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014608:	08014619 	.word	0x08014619
 801460c:	0801461f 	.word	0x0801461f
 8014610:	08014625 	.word	0x08014625
 8014614:	0801462b 	.word	0x0801462b
    case HAL_OK :
      usb_status = USBD_OK;
 8014618:	2300      	movs	r3, #0
 801461a:	73fb      	strb	r3, [r7, #15]
    break;
 801461c:	e00b      	b.n	8014636 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801461e:	2303      	movs	r3, #3
 8014620:	73fb      	strb	r3, [r7, #15]
    break;
 8014622:	e008      	b.n	8014636 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014624:	2301      	movs	r3, #1
 8014626:	73fb      	strb	r3, [r7, #15]
    break;
 8014628:	e005      	b.n	8014636 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801462a:	2303      	movs	r3, #3
 801462c:	73fb      	strb	r3, [r7, #15]
    break;
 801462e:	e002      	b.n	8014636 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014630:	2303      	movs	r3, #3
 8014632:	73fb      	strb	r3, [r7, #15]
    break;
 8014634:	bf00      	nop
  }
  return usb_status;
 8014636:	7bfb      	ldrb	r3, [r7, #15]
}
 8014638:	4618      	mov	r0, r3
 801463a:	3710      	adds	r7, #16
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}

08014640 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b084      	sub	sp, #16
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
 8014648:	460b      	mov	r3, r1
 801464a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801464c:	2300      	movs	r3, #0
 801464e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014650:	2300      	movs	r3, #0
 8014652:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801465a:	78fa      	ldrb	r2, [r7, #3]
 801465c:	4611      	mov	r1, r2
 801465e:	4618      	mov	r0, r3
 8014660:	f7f5 fb5d 	bl	8009d1e <HAL_PCD_EP_ClrStall>
 8014664:	4603      	mov	r3, r0
 8014666:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014668:	7bbb      	ldrb	r3, [r7, #14]
 801466a:	2b03      	cmp	r3, #3
 801466c:	d816      	bhi.n	801469c <USBD_LL_ClearStallEP+0x5c>
 801466e:	a201      	add	r2, pc, #4	; (adr r2, 8014674 <USBD_LL_ClearStallEP+0x34>)
 8014670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014674:	08014685 	.word	0x08014685
 8014678:	0801468b 	.word	0x0801468b
 801467c:	08014691 	.word	0x08014691
 8014680:	08014697 	.word	0x08014697
    case HAL_OK :
      usb_status = USBD_OK;
 8014684:	2300      	movs	r3, #0
 8014686:	73fb      	strb	r3, [r7, #15]
    break;
 8014688:	e00b      	b.n	80146a2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801468a:	2303      	movs	r3, #3
 801468c:	73fb      	strb	r3, [r7, #15]
    break;
 801468e:	e008      	b.n	80146a2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014690:	2301      	movs	r3, #1
 8014692:	73fb      	strb	r3, [r7, #15]
    break;
 8014694:	e005      	b.n	80146a2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014696:	2303      	movs	r3, #3
 8014698:	73fb      	strb	r3, [r7, #15]
    break;
 801469a:	e002      	b.n	80146a2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801469c:	2303      	movs	r3, #3
 801469e:	73fb      	strb	r3, [r7, #15]
    break;
 80146a0:	bf00      	nop
  }
  return usb_status;
 80146a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80146a4:	4618      	mov	r0, r3
 80146a6:	3710      	adds	r7, #16
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}

080146ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80146ac:	b480      	push	{r7}
 80146ae:	b085      	sub	sp, #20
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
 80146b4:	460b      	mov	r3, r1
 80146b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80146be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80146c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	da0c      	bge.n	80146e2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80146c8:	78fb      	ldrb	r3, [r7, #3]
 80146ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80146ce:	68f9      	ldr	r1, [r7, #12]
 80146d0:	1c5a      	adds	r2, r3, #1
 80146d2:	4613      	mov	r3, r2
 80146d4:	009b      	lsls	r3, r3, #2
 80146d6:	4413      	add	r3, r2
 80146d8:	00db      	lsls	r3, r3, #3
 80146da:	440b      	add	r3, r1
 80146dc:	3302      	adds	r3, #2
 80146de:	781b      	ldrb	r3, [r3, #0]
 80146e0:	e00b      	b.n	80146fa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80146e2:	78fb      	ldrb	r3, [r7, #3]
 80146e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80146e8:	68f9      	ldr	r1, [r7, #12]
 80146ea:	4613      	mov	r3, r2
 80146ec:	009b      	lsls	r3, r3, #2
 80146ee:	4413      	add	r3, r2
 80146f0:	00db      	lsls	r3, r3, #3
 80146f2:	440b      	add	r3, r1
 80146f4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80146f8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80146fa:	4618      	mov	r0, r3
 80146fc:	3714      	adds	r7, #20
 80146fe:	46bd      	mov	sp, r7
 8014700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014704:	4770      	bx	lr
	...

08014708 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b084      	sub	sp, #16
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
 8014710:	460b      	mov	r3, r1
 8014712:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014714:	2300      	movs	r3, #0
 8014716:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014718:	2300      	movs	r3, #0
 801471a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014722:	78fa      	ldrb	r2, [r7, #3]
 8014724:	4611      	mov	r1, r2
 8014726:	4618      	mov	r0, r3
 8014728:	f7f5 f94f 	bl	80099ca <HAL_PCD_SetAddress>
 801472c:	4603      	mov	r3, r0
 801472e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014730:	7bbb      	ldrb	r3, [r7, #14]
 8014732:	2b03      	cmp	r3, #3
 8014734:	d816      	bhi.n	8014764 <USBD_LL_SetUSBAddress+0x5c>
 8014736:	a201      	add	r2, pc, #4	; (adr r2, 801473c <USBD_LL_SetUSBAddress+0x34>)
 8014738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801473c:	0801474d 	.word	0x0801474d
 8014740:	08014753 	.word	0x08014753
 8014744:	08014759 	.word	0x08014759
 8014748:	0801475f 	.word	0x0801475f
    case HAL_OK :
      usb_status = USBD_OK;
 801474c:	2300      	movs	r3, #0
 801474e:	73fb      	strb	r3, [r7, #15]
    break;
 8014750:	e00b      	b.n	801476a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014752:	2303      	movs	r3, #3
 8014754:	73fb      	strb	r3, [r7, #15]
    break;
 8014756:	e008      	b.n	801476a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014758:	2301      	movs	r3, #1
 801475a:	73fb      	strb	r3, [r7, #15]
    break;
 801475c:	e005      	b.n	801476a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801475e:	2303      	movs	r3, #3
 8014760:	73fb      	strb	r3, [r7, #15]
    break;
 8014762:	e002      	b.n	801476a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8014764:	2303      	movs	r3, #3
 8014766:	73fb      	strb	r3, [r7, #15]
    break;
 8014768:	bf00      	nop
  }
  return usb_status;
 801476a:	7bfb      	ldrb	r3, [r7, #15]
}
 801476c:	4618      	mov	r0, r3
 801476e:	3710      	adds	r7, #16
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}

08014774 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b086      	sub	sp, #24
 8014778:	af00      	add	r7, sp, #0
 801477a:	60f8      	str	r0, [r7, #12]
 801477c:	607a      	str	r2, [r7, #4]
 801477e:	603b      	str	r3, [r7, #0]
 8014780:	460b      	mov	r3, r1
 8014782:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014784:	2300      	movs	r3, #0
 8014786:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014788:	2300      	movs	r3, #0
 801478a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014792:	7af9      	ldrb	r1, [r7, #11]
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	687a      	ldr	r2, [r7, #4]
 8014798:	f7f5 fa2a 	bl	8009bf0 <HAL_PCD_EP_Transmit>
 801479c:	4603      	mov	r3, r0
 801479e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80147a0:	7dbb      	ldrb	r3, [r7, #22]
 80147a2:	2b03      	cmp	r3, #3
 80147a4:	d816      	bhi.n	80147d4 <USBD_LL_Transmit+0x60>
 80147a6:	a201      	add	r2, pc, #4	; (adr r2, 80147ac <USBD_LL_Transmit+0x38>)
 80147a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147ac:	080147bd 	.word	0x080147bd
 80147b0:	080147c3 	.word	0x080147c3
 80147b4:	080147c9 	.word	0x080147c9
 80147b8:	080147cf 	.word	0x080147cf
    case HAL_OK :
      usb_status = USBD_OK;
 80147bc:	2300      	movs	r3, #0
 80147be:	75fb      	strb	r3, [r7, #23]
    break;
 80147c0:	e00b      	b.n	80147da <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80147c2:	2303      	movs	r3, #3
 80147c4:	75fb      	strb	r3, [r7, #23]
    break;
 80147c6:	e008      	b.n	80147da <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80147c8:	2301      	movs	r3, #1
 80147ca:	75fb      	strb	r3, [r7, #23]
    break;
 80147cc:	e005      	b.n	80147da <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80147ce:	2303      	movs	r3, #3
 80147d0:	75fb      	strb	r3, [r7, #23]
    break;
 80147d2:	e002      	b.n	80147da <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80147d4:	2303      	movs	r3, #3
 80147d6:	75fb      	strb	r3, [r7, #23]
    break;
 80147d8:	bf00      	nop
  }
  return usb_status;
 80147da:	7dfb      	ldrb	r3, [r7, #23]
}
 80147dc:	4618      	mov	r0, r3
 80147de:	3718      	adds	r7, #24
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bd80      	pop	{r7, pc}

080147e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b086      	sub	sp, #24
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	60f8      	str	r0, [r7, #12]
 80147ec:	607a      	str	r2, [r7, #4]
 80147ee:	603b      	str	r3, [r7, #0]
 80147f0:	460b      	mov	r3, r1
 80147f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80147f4:	2300      	movs	r3, #0
 80147f6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80147f8:	2300      	movs	r3, #0
 80147fa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014802:	7af9      	ldrb	r1, [r7, #11]
 8014804:	683b      	ldr	r3, [r7, #0]
 8014806:	687a      	ldr	r2, [r7, #4]
 8014808:	f7f5 f9a9 	bl	8009b5e <HAL_PCD_EP_Receive>
 801480c:	4603      	mov	r3, r0
 801480e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8014810:	7dbb      	ldrb	r3, [r7, #22]
 8014812:	2b03      	cmp	r3, #3
 8014814:	d816      	bhi.n	8014844 <USBD_LL_PrepareReceive+0x60>
 8014816:	a201      	add	r2, pc, #4	; (adr r2, 801481c <USBD_LL_PrepareReceive+0x38>)
 8014818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801481c:	0801482d 	.word	0x0801482d
 8014820:	08014833 	.word	0x08014833
 8014824:	08014839 	.word	0x08014839
 8014828:	0801483f 	.word	0x0801483f
    case HAL_OK :
      usb_status = USBD_OK;
 801482c:	2300      	movs	r3, #0
 801482e:	75fb      	strb	r3, [r7, #23]
    break;
 8014830:	e00b      	b.n	801484a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014832:	2303      	movs	r3, #3
 8014834:	75fb      	strb	r3, [r7, #23]
    break;
 8014836:	e008      	b.n	801484a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014838:	2301      	movs	r3, #1
 801483a:	75fb      	strb	r3, [r7, #23]
    break;
 801483c:	e005      	b.n	801484a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801483e:	2303      	movs	r3, #3
 8014840:	75fb      	strb	r3, [r7, #23]
    break;
 8014842:	e002      	b.n	801484a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8014844:	2303      	movs	r3, #3
 8014846:	75fb      	strb	r3, [r7, #23]
    break;
 8014848:	bf00      	nop
  }
  return usb_status;
 801484a:	7dfb      	ldrb	r3, [r7, #23]
}
 801484c:	4618      	mov	r0, r3
 801484e:	3718      	adds	r7, #24
 8014850:	46bd      	mov	sp, r7
 8014852:	bd80      	pop	{r7, pc}

08014854 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b082      	sub	sp, #8
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
 801485c:	460b      	mov	r3, r1
 801485e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014866:	78fa      	ldrb	r2, [r7, #3]
 8014868:	4611      	mov	r1, r2
 801486a:	4618      	mov	r0, r3
 801486c:	f7f5 f9a8 	bl	8009bc0 <HAL_PCD_EP_GetRxCount>
 8014870:	4603      	mov	r3, r0
}
 8014872:	4618      	mov	r0, r3
 8014874:	3708      	adds	r7, #8
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}
	...

0801487c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b082      	sub	sp, #8
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	460b      	mov	r3, r1
 8014886:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8014888:	78fb      	ldrb	r3, [r7, #3]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d002      	beq.n	8014894 <HAL_PCDEx_LPM_Callback+0x18>
 801488e:	2b01      	cmp	r3, #1
 8014890:	d013      	beq.n	80148ba <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8014892:	e023      	b.n	80148dc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	699b      	ldr	r3, [r3, #24]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d007      	beq.n	80148ac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801489c:	f000 f83c 	bl	8014918 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80148a0:	4b10      	ldr	r3, [pc, #64]	; (80148e4 <HAL_PCDEx_LPM_Callback+0x68>)
 80148a2:	691b      	ldr	r3, [r3, #16]
 80148a4:	4a0f      	ldr	r2, [pc, #60]	; (80148e4 <HAL_PCDEx_LPM_Callback+0x68>)
 80148a6:	f023 0306 	bic.w	r3, r3, #6
 80148aa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7fd fdb5 	bl	8012422 <USBD_LL_Resume>
    break;
 80148b8:	e010      	b.n	80148dc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80148c0:	4618      	mov	r0, r3
 80148c2:	f7fd fd92 	bl	80123ea <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	699b      	ldr	r3, [r3, #24]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d005      	beq.n	80148da <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80148ce:	4b05      	ldr	r3, [pc, #20]	; (80148e4 <HAL_PCDEx_LPM_Callback+0x68>)
 80148d0:	691b      	ldr	r3, [r3, #16]
 80148d2:	4a04      	ldr	r2, [pc, #16]	; (80148e4 <HAL_PCDEx_LPM_Callback+0x68>)
 80148d4:	f043 0306 	orr.w	r3, r3, #6
 80148d8:	6113      	str	r3, [r2, #16]
    break;
 80148da:	bf00      	nop
}
 80148dc:	bf00      	nop
 80148de:	3708      	adds	r7, #8
 80148e0:	46bd      	mov	sp, r7
 80148e2:	bd80      	pop	{r7, pc}
 80148e4:	e000ed00 	.word	0xe000ed00

080148e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80148e8:	b480      	push	{r7}
 80148ea:	b083      	sub	sp, #12
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80148f0:	4b03      	ldr	r3, [pc, #12]	; (8014900 <USBD_static_malloc+0x18>)
}
 80148f2:	4618      	mov	r0, r3
 80148f4:	370c      	adds	r7, #12
 80148f6:	46bd      	mov	sp, r7
 80148f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fc:	4770      	bx	lr
 80148fe:	bf00      	nop
 8014900:	200020d8 	.word	0x200020d8

08014904 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014904:	b480      	push	{r7}
 8014906:	b083      	sub	sp, #12
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]

}
 801490c:	bf00      	nop
 801490e:	370c      	adds	r7, #12
 8014910:	46bd      	mov	sp, r7
 8014912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014916:	4770      	bx	lr

08014918 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8014918:	b580      	push	{r7, lr}
 801491a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801491c:	f7ed f99e 	bl	8001c5c <SystemClock_Config>
}
 8014920:	bf00      	nop
 8014922:	bd80      	pop	{r7, pc}

08014924 <atoi>:
 8014924:	220a      	movs	r2, #10
 8014926:	2100      	movs	r1, #0
 8014928:	f000 bfba 	b.w	80158a0 <strtol>

0801492c <malloc>:
 801492c:	4b02      	ldr	r3, [pc, #8]	; (8014938 <malloc+0xc>)
 801492e:	4601      	mov	r1, r0
 8014930:	6818      	ldr	r0, [r3, #0]
 8014932:	f000 b82b 	b.w	801498c <_malloc_r>
 8014936:	bf00      	nop
 8014938:	20000308 	.word	0x20000308

0801493c <free>:
 801493c:	4b02      	ldr	r3, [pc, #8]	; (8014948 <free+0xc>)
 801493e:	4601      	mov	r1, r0
 8014940:	6818      	ldr	r0, [r3, #0]
 8014942:	f002 bf57 	b.w	80177f4 <_free_r>
 8014946:	bf00      	nop
 8014948:	20000308 	.word	0x20000308

0801494c <sbrk_aligned>:
 801494c:	b570      	push	{r4, r5, r6, lr}
 801494e:	4e0e      	ldr	r6, [pc, #56]	; (8014988 <sbrk_aligned+0x3c>)
 8014950:	460c      	mov	r4, r1
 8014952:	6831      	ldr	r1, [r6, #0]
 8014954:	4605      	mov	r5, r0
 8014956:	b911      	cbnz	r1, 801495e <sbrk_aligned+0x12>
 8014958:	f002 f840 	bl	80169dc <_sbrk_r>
 801495c:	6030      	str	r0, [r6, #0]
 801495e:	4621      	mov	r1, r4
 8014960:	4628      	mov	r0, r5
 8014962:	f002 f83b 	bl	80169dc <_sbrk_r>
 8014966:	1c43      	adds	r3, r0, #1
 8014968:	d00a      	beq.n	8014980 <sbrk_aligned+0x34>
 801496a:	1cc4      	adds	r4, r0, #3
 801496c:	f024 0403 	bic.w	r4, r4, #3
 8014970:	42a0      	cmp	r0, r4
 8014972:	d007      	beq.n	8014984 <sbrk_aligned+0x38>
 8014974:	1a21      	subs	r1, r4, r0
 8014976:	4628      	mov	r0, r5
 8014978:	f002 f830 	bl	80169dc <_sbrk_r>
 801497c:	3001      	adds	r0, #1
 801497e:	d101      	bne.n	8014984 <sbrk_aligned+0x38>
 8014980:	f04f 34ff 	mov.w	r4, #4294967295
 8014984:	4620      	mov	r0, r4
 8014986:	bd70      	pop	{r4, r5, r6, pc}
 8014988:	200022fc 	.word	0x200022fc

0801498c <_malloc_r>:
 801498c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014990:	1ccd      	adds	r5, r1, #3
 8014992:	f025 0503 	bic.w	r5, r5, #3
 8014996:	3508      	adds	r5, #8
 8014998:	2d0c      	cmp	r5, #12
 801499a:	bf38      	it	cc
 801499c:	250c      	movcc	r5, #12
 801499e:	2d00      	cmp	r5, #0
 80149a0:	4607      	mov	r7, r0
 80149a2:	db01      	blt.n	80149a8 <_malloc_r+0x1c>
 80149a4:	42a9      	cmp	r1, r5
 80149a6:	d905      	bls.n	80149b4 <_malloc_r+0x28>
 80149a8:	230c      	movs	r3, #12
 80149aa:	603b      	str	r3, [r7, #0]
 80149ac:	2600      	movs	r6, #0
 80149ae:	4630      	mov	r0, r6
 80149b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014a88 <_malloc_r+0xfc>
 80149b8:	f000 f868 	bl	8014a8c <__malloc_lock>
 80149bc:	f8d8 3000 	ldr.w	r3, [r8]
 80149c0:	461c      	mov	r4, r3
 80149c2:	bb5c      	cbnz	r4, 8014a1c <_malloc_r+0x90>
 80149c4:	4629      	mov	r1, r5
 80149c6:	4638      	mov	r0, r7
 80149c8:	f7ff ffc0 	bl	801494c <sbrk_aligned>
 80149cc:	1c43      	adds	r3, r0, #1
 80149ce:	4604      	mov	r4, r0
 80149d0:	d155      	bne.n	8014a7e <_malloc_r+0xf2>
 80149d2:	f8d8 4000 	ldr.w	r4, [r8]
 80149d6:	4626      	mov	r6, r4
 80149d8:	2e00      	cmp	r6, #0
 80149da:	d145      	bne.n	8014a68 <_malloc_r+0xdc>
 80149dc:	2c00      	cmp	r4, #0
 80149de:	d048      	beq.n	8014a72 <_malloc_r+0xe6>
 80149e0:	6823      	ldr	r3, [r4, #0]
 80149e2:	4631      	mov	r1, r6
 80149e4:	4638      	mov	r0, r7
 80149e6:	eb04 0903 	add.w	r9, r4, r3
 80149ea:	f001 fff7 	bl	80169dc <_sbrk_r>
 80149ee:	4581      	cmp	r9, r0
 80149f0:	d13f      	bne.n	8014a72 <_malloc_r+0xe6>
 80149f2:	6821      	ldr	r1, [r4, #0]
 80149f4:	1a6d      	subs	r5, r5, r1
 80149f6:	4629      	mov	r1, r5
 80149f8:	4638      	mov	r0, r7
 80149fa:	f7ff ffa7 	bl	801494c <sbrk_aligned>
 80149fe:	3001      	adds	r0, #1
 8014a00:	d037      	beq.n	8014a72 <_malloc_r+0xe6>
 8014a02:	6823      	ldr	r3, [r4, #0]
 8014a04:	442b      	add	r3, r5
 8014a06:	6023      	str	r3, [r4, #0]
 8014a08:	f8d8 3000 	ldr.w	r3, [r8]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d038      	beq.n	8014a82 <_malloc_r+0xf6>
 8014a10:	685a      	ldr	r2, [r3, #4]
 8014a12:	42a2      	cmp	r2, r4
 8014a14:	d12b      	bne.n	8014a6e <_malloc_r+0xe2>
 8014a16:	2200      	movs	r2, #0
 8014a18:	605a      	str	r2, [r3, #4]
 8014a1a:	e00f      	b.n	8014a3c <_malloc_r+0xb0>
 8014a1c:	6822      	ldr	r2, [r4, #0]
 8014a1e:	1b52      	subs	r2, r2, r5
 8014a20:	d41f      	bmi.n	8014a62 <_malloc_r+0xd6>
 8014a22:	2a0b      	cmp	r2, #11
 8014a24:	d917      	bls.n	8014a56 <_malloc_r+0xca>
 8014a26:	1961      	adds	r1, r4, r5
 8014a28:	42a3      	cmp	r3, r4
 8014a2a:	6025      	str	r5, [r4, #0]
 8014a2c:	bf18      	it	ne
 8014a2e:	6059      	strne	r1, [r3, #4]
 8014a30:	6863      	ldr	r3, [r4, #4]
 8014a32:	bf08      	it	eq
 8014a34:	f8c8 1000 	streq.w	r1, [r8]
 8014a38:	5162      	str	r2, [r4, r5]
 8014a3a:	604b      	str	r3, [r1, #4]
 8014a3c:	4638      	mov	r0, r7
 8014a3e:	f104 060b 	add.w	r6, r4, #11
 8014a42:	f000 f829 	bl	8014a98 <__malloc_unlock>
 8014a46:	f026 0607 	bic.w	r6, r6, #7
 8014a4a:	1d23      	adds	r3, r4, #4
 8014a4c:	1af2      	subs	r2, r6, r3
 8014a4e:	d0ae      	beq.n	80149ae <_malloc_r+0x22>
 8014a50:	1b9b      	subs	r3, r3, r6
 8014a52:	50a3      	str	r3, [r4, r2]
 8014a54:	e7ab      	b.n	80149ae <_malloc_r+0x22>
 8014a56:	42a3      	cmp	r3, r4
 8014a58:	6862      	ldr	r2, [r4, #4]
 8014a5a:	d1dd      	bne.n	8014a18 <_malloc_r+0x8c>
 8014a5c:	f8c8 2000 	str.w	r2, [r8]
 8014a60:	e7ec      	b.n	8014a3c <_malloc_r+0xb0>
 8014a62:	4623      	mov	r3, r4
 8014a64:	6864      	ldr	r4, [r4, #4]
 8014a66:	e7ac      	b.n	80149c2 <_malloc_r+0x36>
 8014a68:	4634      	mov	r4, r6
 8014a6a:	6876      	ldr	r6, [r6, #4]
 8014a6c:	e7b4      	b.n	80149d8 <_malloc_r+0x4c>
 8014a6e:	4613      	mov	r3, r2
 8014a70:	e7cc      	b.n	8014a0c <_malloc_r+0x80>
 8014a72:	230c      	movs	r3, #12
 8014a74:	603b      	str	r3, [r7, #0]
 8014a76:	4638      	mov	r0, r7
 8014a78:	f000 f80e 	bl	8014a98 <__malloc_unlock>
 8014a7c:	e797      	b.n	80149ae <_malloc_r+0x22>
 8014a7e:	6025      	str	r5, [r4, #0]
 8014a80:	e7dc      	b.n	8014a3c <_malloc_r+0xb0>
 8014a82:	605b      	str	r3, [r3, #4]
 8014a84:	deff      	udf	#255	; 0xff
 8014a86:	bf00      	nop
 8014a88:	200022f8 	.word	0x200022f8

08014a8c <__malloc_lock>:
 8014a8c:	4801      	ldr	r0, [pc, #4]	; (8014a94 <__malloc_lock+0x8>)
 8014a8e:	f001 bff2 	b.w	8016a76 <__retarget_lock_acquire_recursive>
 8014a92:	bf00      	nop
 8014a94:	20002440 	.word	0x20002440

08014a98 <__malloc_unlock>:
 8014a98:	4801      	ldr	r0, [pc, #4]	; (8014aa0 <__malloc_unlock+0x8>)
 8014a9a:	f001 bfed 	b.w	8016a78 <__retarget_lock_release_recursive>
 8014a9e:	bf00      	nop
 8014aa0:	20002440 	.word	0x20002440

08014aa4 <sulp>:
 8014aa4:	b570      	push	{r4, r5, r6, lr}
 8014aa6:	4604      	mov	r4, r0
 8014aa8:	460d      	mov	r5, r1
 8014aaa:	ec45 4b10 	vmov	d0, r4, r5
 8014aae:	4616      	mov	r6, r2
 8014ab0:	f003 fdc2 	bl	8018638 <__ulp>
 8014ab4:	ec51 0b10 	vmov	r0, r1, d0
 8014ab8:	b17e      	cbz	r6, 8014ada <sulp+0x36>
 8014aba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014abe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	dd09      	ble.n	8014ada <sulp+0x36>
 8014ac6:	051b      	lsls	r3, r3, #20
 8014ac8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014acc:	2400      	movs	r4, #0
 8014ace:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014ad2:	4622      	mov	r2, r4
 8014ad4:	462b      	mov	r3, r5
 8014ad6:	f7eb fd8f 	bl	80005f8 <__aeabi_dmul>
 8014ada:	bd70      	pop	{r4, r5, r6, pc}
 8014adc:	0000      	movs	r0, r0
	...

08014ae0 <_strtod_l>:
 8014ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ae4:	ed2d 8b02 	vpush	{d8}
 8014ae8:	b09b      	sub	sp, #108	; 0x6c
 8014aea:	4604      	mov	r4, r0
 8014aec:	9213      	str	r2, [sp, #76]	; 0x4c
 8014aee:	2200      	movs	r2, #0
 8014af0:	9216      	str	r2, [sp, #88]	; 0x58
 8014af2:	460d      	mov	r5, r1
 8014af4:	f04f 0800 	mov.w	r8, #0
 8014af8:	f04f 0900 	mov.w	r9, #0
 8014afc:	460a      	mov	r2, r1
 8014afe:	9215      	str	r2, [sp, #84]	; 0x54
 8014b00:	7811      	ldrb	r1, [r2, #0]
 8014b02:	292b      	cmp	r1, #43	; 0x2b
 8014b04:	d04c      	beq.n	8014ba0 <_strtod_l+0xc0>
 8014b06:	d83a      	bhi.n	8014b7e <_strtod_l+0x9e>
 8014b08:	290d      	cmp	r1, #13
 8014b0a:	d834      	bhi.n	8014b76 <_strtod_l+0x96>
 8014b0c:	2908      	cmp	r1, #8
 8014b0e:	d834      	bhi.n	8014b7a <_strtod_l+0x9a>
 8014b10:	2900      	cmp	r1, #0
 8014b12:	d03d      	beq.n	8014b90 <_strtod_l+0xb0>
 8014b14:	2200      	movs	r2, #0
 8014b16:	920a      	str	r2, [sp, #40]	; 0x28
 8014b18:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8014b1a:	7832      	ldrb	r2, [r6, #0]
 8014b1c:	2a30      	cmp	r2, #48	; 0x30
 8014b1e:	f040 80b4 	bne.w	8014c8a <_strtod_l+0x1aa>
 8014b22:	7872      	ldrb	r2, [r6, #1]
 8014b24:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8014b28:	2a58      	cmp	r2, #88	; 0x58
 8014b2a:	d170      	bne.n	8014c0e <_strtod_l+0x12e>
 8014b2c:	9302      	str	r3, [sp, #8]
 8014b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b30:	9301      	str	r3, [sp, #4]
 8014b32:	ab16      	add	r3, sp, #88	; 0x58
 8014b34:	9300      	str	r3, [sp, #0]
 8014b36:	4a8e      	ldr	r2, [pc, #568]	; (8014d70 <_strtod_l+0x290>)
 8014b38:	ab17      	add	r3, sp, #92	; 0x5c
 8014b3a:	a915      	add	r1, sp, #84	; 0x54
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	f002 ff0d 	bl	801795c <__gethex>
 8014b42:	f010 070f 	ands.w	r7, r0, #15
 8014b46:	4605      	mov	r5, r0
 8014b48:	d005      	beq.n	8014b56 <_strtod_l+0x76>
 8014b4a:	2f06      	cmp	r7, #6
 8014b4c:	d12a      	bne.n	8014ba4 <_strtod_l+0xc4>
 8014b4e:	3601      	adds	r6, #1
 8014b50:	2300      	movs	r3, #0
 8014b52:	9615      	str	r6, [sp, #84]	; 0x54
 8014b54:	930a      	str	r3, [sp, #40]	; 0x28
 8014b56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	f040 857f 	bne.w	801565c <_strtod_l+0xb7c>
 8014b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b60:	b1db      	cbz	r3, 8014b9a <_strtod_l+0xba>
 8014b62:	4642      	mov	r2, r8
 8014b64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014b68:	ec43 2b10 	vmov	d0, r2, r3
 8014b6c:	b01b      	add	sp, #108	; 0x6c
 8014b6e:	ecbd 8b02 	vpop	{d8}
 8014b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b76:	2920      	cmp	r1, #32
 8014b78:	d1cc      	bne.n	8014b14 <_strtod_l+0x34>
 8014b7a:	3201      	adds	r2, #1
 8014b7c:	e7bf      	b.n	8014afe <_strtod_l+0x1e>
 8014b7e:	292d      	cmp	r1, #45	; 0x2d
 8014b80:	d1c8      	bne.n	8014b14 <_strtod_l+0x34>
 8014b82:	2101      	movs	r1, #1
 8014b84:	910a      	str	r1, [sp, #40]	; 0x28
 8014b86:	1c51      	adds	r1, r2, #1
 8014b88:	9115      	str	r1, [sp, #84]	; 0x54
 8014b8a:	7852      	ldrb	r2, [r2, #1]
 8014b8c:	2a00      	cmp	r2, #0
 8014b8e:	d1c3      	bne.n	8014b18 <_strtod_l+0x38>
 8014b90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b92:	9515      	str	r5, [sp, #84]	; 0x54
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	f040 855f 	bne.w	8015658 <_strtod_l+0xb78>
 8014b9a:	4642      	mov	r2, r8
 8014b9c:	464b      	mov	r3, r9
 8014b9e:	e7e3      	b.n	8014b68 <_strtod_l+0x88>
 8014ba0:	2100      	movs	r1, #0
 8014ba2:	e7ef      	b.n	8014b84 <_strtod_l+0xa4>
 8014ba4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014ba6:	b13a      	cbz	r2, 8014bb8 <_strtod_l+0xd8>
 8014ba8:	2135      	movs	r1, #53	; 0x35
 8014baa:	a818      	add	r0, sp, #96	; 0x60
 8014bac:	f003 fe41 	bl	8018832 <__copybits>
 8014bb0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014bb2:	4620      	mov	r0, r4
 8014bb4:	f003 fa14 	bl	8017fe0 <_Bfree>
 8014bb8:	3f01      	subs	r7, #1
 8014bba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014bbc:	2f04      	cmp	r7, #4
 8014bbe:	d806      	bhi.n	8014bce <_strtod_l+0xee>
 8014bc0:	e8df f007 	tbb	[pc, r7]
 8014bc4:	201d0314 	.word	0x201d0314
 8014bc8:	14          	.byte	0x14
 8014bc9:	00          	.byte	0x00
 8014bca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8014bce:	05e9      	lsls	r1, r5, #23
 8014bd0:	bf48      	it	mi
 8014bd2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8014bd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014bda:	0d1b      	lsrs	r3, r3, #20
 8014bdc:	051b      	lsls	r3, r3, #20
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d1b9      	bne.n	8014b56 <_strtod_l+0x76>
 8014be2:	f001 ff1d 	bl	8016a20 <__errno>
 8014be6:	2322      	movs	r3, #34	; 0x22
 8014be8:	6003      	str	r3, [r0, #0]
 8014bea:	e7b4      	b.n	8014b56 <_strtod_l+0x76>
 8014bec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8014bf0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014bf4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014bf8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8014bfc:	e7e7      	b.n	8014bce <_strtod_l+0xee>
 8014bfe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014d78 <_strtod_l+0x298>
 8014c02:	e7e4      	b.n	8014bce <_strtod_l+0xee>
 8014c04:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014c08:	f04f 38ff 	mov.w	r8, #4294967295
 8014c0c:	e7df      	b.n	8014bce <_strtod_l+0xee>
 8014c0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c10:	1c5a      	adds	r2, r3, #1
 8014c12:	9215      	str	r2, [sp, #84]	; 0x54
 8014c14:	785b      	ldrb	r3, [r3, #1]
 8014c16:	2b30      	cmp	r3, #48	; 0x30
 8014c18:	d0f9      	beq.n	8014c0e <_strtod_l+0x12e>
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d09b      	beq.n	8014b56 <_strtod_l+0x76>
 8014c1e:	2301      	movs	r3, #1
 8014c20:	f04f 0a00 	mov.w	sl, #0
 8014c24:	9304      	str	r3, [sp, #16]
 8014c26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c28:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c2a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014c2e:	46d3      	mov	fp, sl
 8014c30:	220a      	movs	r2, #10
 8014c32:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014c34:	7806      	ldrb	r6, [r0, #0]
 8014c36:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014c3a:	b2d9      	uxtb	r1, r3
 8014c3c:	2909      	cmp	r1, #9
 8014c3e:	d926      	bls.n	8014c8e <_strtod_l+0x1ae>
 8014c40:	494c      	ldr	r1, [pc, #304]	; (8014d74 <_strtod_l+0x294>)
 8014c42:	2201      	movs	r2, #1
 8014c44:	f001 fe0d 	bl	8016862 <strncmp>
 8014c48:	2800      	cmp	r0, #0
 8014c4a:	d030      	beq.n	8014cae <_strtod_l+0x1ce>
 8014c4c:	2000      	movs	r0, #0
 8014c4e:	4632      	mov	r2, r6
 8014c50:	9005      	str	r0, [sp, #20]
 8014c52:	465e      	mov	r6, fp
 8014c54:	4603      	mov	r3, r0
 8014c56:	2a65      	cmp	r2, #101	; 0x65
 8014c58:	d001      	beq.n	8014c5e <_strtod_l+0x17e>
 8014c5a:	2a45      	cmp	r2, #69	; 0x45
 8014c5c:	d113      	bne.n	8014c86 <_strtod_l+0x1a6>
 8014c5e:	b91e      	cbnz	r6, 8014c68 <_strtod_l+0x188>
 8014c60:	9a04      	ldr	r2, [sp, #16]
 8014c62:	4302      	orrs	r2, r0
 8014c64:	d094      	beq.n	8014b90 <_strtod_l+0xb0>
 8014c66:	2600      	movs	r6, #0
 8014c68:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014c6a:	1c6a      	adds	r2, r5, #1
 8014c6c:	9215      	str	r2, [sp, #84]	; 0x54
 8014c6e:	786a      	ldrb	r2, [r5, #1]
 8014c70:	2a2b      	cmp	r2, #43	; 0x2b
 8014c72:	d074      	beq.n	8014d5e <_strtod_l+0x27e>
 8014c74:	2a2d      	cmp	r2, #45	; 0x2d
 8014c76:	d078      	beq.n	8014d6a <_strtod_l+0x28a>
 8014c78:	f04f 0c00 	mov.w	ip, #0
 8014c7c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014c80:	2909      	cmp	r1, #9
 8014c82:	d97f      	bls.n	8014d84 <_strtod_l+0x2a4>
 8014c84:	9515      	str	r5, [sp, #84]	; 0x54
 8014c86:	2700      	movs	r7, #0
 8014c88:	e09e      	b.n	8014dc8 <_strtod_l+0x2e8>
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	e7c8      	b.n	8014c20 <_strtod_l+0x140>
 8014c8e:	f1bb 0f08 	cmp.w	fp, #8
 8014c92:	bfd8      	it	le
 8014c94:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014c96:	f100 0001 	add.w	r0, r0, #1
 8014c9a:	bfda      	itte	le
 8014c9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8014ca0:	9309      	strle	r3, [sp, #36]	; 0x24
 8014ca2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014ca6:	f10b 0b01 	add.w	fp, fp, #1
 8014caa:	9015      	str	r0, [sp, #84]	; 0x54
 8014cac:	e7c1      	b.n	8014c32 <_strtod_l+0x152>
 8014cae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014cb0:	1c5a      	adds	r2, r3, #1
 8014cb2:	9215      	str	r2, [sp, #84]	; 0x54
 8014cb4:	785a      	ldrb	r2, [r3, #1]
 8014cb6:	f1bb 0f00 	cmp.w	fp, #0
 8014cba:	d037      	beq.n	8014d2c <_strtod_l+0x24c>
 8014cbc:	9005      	str	r0, [sp, #20]
 8014cbe:	465e      	mov	r6, fp
 8014cc0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014cc4:	2b09      	cmp	r3, #9
 8014cc6:	d912      	bls.n	8014cee <_strtod_l+0x20e>
 8014cc8:	2301      	movs	r3, #1
 8014cca:	e7c4      	b.n	8014c56 <_strtod_l+0x176>
 8014ccc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014cce:	1c5a      	adds	r2, r3, #1
 8014cd0:	9215      	str	r2, [sp, #84]	; 0x54
 8014cd2:	785a      	ldrb	r2, [r3, #1]
 8014cd4:	3001      	adds	r0, #1
 8014cd6:	2a30      	cmp	r2, #48	; 0x30
 8014cd8:	d0f8      	beq.n	8014ccc <_strtod_l+0x1ec>
 8014cda:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014cde:	2b08      	cmp	r3, #8
 8014ce0:	f200 84c1 	bhi.w	8015666 <_strtod_l+0xb86>
 8014ce4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014ce6:	9005      	str	r0, [sp, #20]
 8014ce8:	2000      	movs	r0, #0
 8014cea:	930b      	str	r3, [sp, #44]	; 0x2c
 8014cec:	4606      	mov	r6, r0
 8014cee:	3a30      	subs	r2, #48	; 0x30
 8014cf0:	f100 0301 	add.w	r3, r0, #1
 8014cf4:	d014      	beq.n	8014d20 <_strtod_l+0x240>
 8014cf6:	9905      	ldr	r1, [sp, #20]
 8014cf8:	4419      	add	r1, r3
 8014cfa:	9105      	str	r1, [sp, #20]
 8014cfc:	4633      	mov	r3, r6
 8014cfe:	eb00 0c06 	add.w	ip, r0, r6
 8014d02:	210a      	movs	r1, #10
 8014d04:	4563      	cmp	r3, ip
 8014d06:	d113      	bne.n	8014d30 <_strtod_l+0x250>
 8014d08:	1833      	adds	r3, r6, r0
 8014d0a:	2b08      	cmp	r3, #8
 8014d0c:	f106 0601 	add.w	r6, r6, #1
 8014d10:	4406      	add	r6, r0
 8014d12:	dc1a      	bgt.n	8014d4a <_strtod_l+0x26a>
 8014d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d16:	230a      	movs	r3, #10
 8014d18:	fb03 2301 	mla	r3, r3, r1, r2
 8014d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8014d1e:	2300      	movs	r3, #0
 8014d20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d22:	1c51      	adds	r1, r2, #1
 8014d24:	9115      	str	r1, [sp, #84]	; 0x54
 8014d26:	7852      	ldrb	r2, [r2, #1]
 8014d28:	4618      	mov	r0, r3
 8014d2a:	e7c9      	b.n	8014cc0 <_strtod_l+0x1e0>
 8014d2c:	4658      	mov	r0, fp
 8014d2e:	e7d2      	b.n	8014cd6 <_strtod_l+0x1f6>
 8014d30:	2b08      	cmp	r3, #8
 8014d32:	f103 0301 	add.w	r3, r3, #1
 8014d36:	dc03      	bgt.n	8014d40 <_strtod_l+0x260>
 8014d38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014d3a:	434f      	muls	r7, r1
 8014d3c:	9709      	str	r7, [sp, #36]	; 0x24
 8014d3e:	e7e1      	b.n	8014d04 <_strtod_l+0x224>
 8014d40:	2b10      	cmp	r3, #16
 8014d42:	bfd8      	it	le
 8014d44:	fb01 fa0a 	mulle.w	sl, r1, sl
 8014d48:	e7dc      	b.n	8014d04 <_strtod_l+0x224>
 8014d4a:	2e10      	cmp	r6, #16
 8014d4c:	bfdc      	itt	le
 8014d4e:	230a      	movle	r3, #10
 8014d50:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8014d54:	e7e3      	b.n	8014d1e <_strtod_l+0x23e>
 8014d56:	2300      	movs	r3, #0
 8014d58:	9305      	str	r3, [sp, #20]
 8014d5a:	2301      	movs	r3, #1
 8014d5c:	e780      	b.n	8014c60 <_strtod_l+0x180>
 8014d5e:	f04f 0c00 	mov.w	ip, #0
 8014d62:	1caa      	adds	r2, r5, #2
 8014d64:	9215      	str	r2, [sp, #84]	; 0x54
 8014d66:	78aa      	ldrb	r2, [r5, #2]
 8014d68:	e788      	b.n	8014c7c <_strtod_l+0x19c>
 8014d6a:	f04f 0c01 	mov.w	ip, #1
 8014d6e:	e7f8      	b.n	8014d62 <_strtod_l+0x282>
 8014d70:	0801d8e8 	.word	0x0801d8e8
 8014d74:	0801d8e4 	.word	0x0801d8e4
 8014d78:	7ff00000 	.word	0x7ff00000
 8014d7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d7e:	1c51      	adds	r1, r2, #1
 8014d80:	9115      	str	r1, [sp, #84]	; 0x54
 8014d82:	7852      	ldrb	r2, [r2, #1]
 8014d84:	2a30      	cmp	r2, #48	; 0x30
 8014d86:	d0f9      	beq.n	8014d7c <_strtod_l+0x29c>
 8014d88:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014d8c:	2908      	cmp	r1, #8
 8014d8e:	f63f af7a 	bhi.w	8014c86 <_strtod_l+0x1a6>
 8014d92:	3a30      	subs	r2, #48	; 0x30
 8014d94:	9208      	str	r2, [sp, #32]
 8014d96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d98:	920c      	str	r2, [sp, #48]	; 0x30
 8014d9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d9c:	1c57      	adds	r7, r2, #1
 8014d9e:	9715      	str	r7, [sp, #84]	; 0x54
 8014da0:	7852      	ldrb	r2, [r2, #1]
 8014da2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014da6:	f1be 0f09 	cmp.w	lr, #9
 8014daa:	d938      	bls.n	8014e1e <_strtod_l+0x33e>
 8014dac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014dae:	1a7f      	subs	r7, r7, r1
 8014db0:	2f08      	cmp	r7, #8
 8014db2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014db6:	dc03      	bgt.n	8014dc0 <_strtod_l+0x2e0>
 8014db8:	9908      	ldr	r1, [sp, #32]
 8014dba:	428f      	cmp	r7, r1
 8014dbc:	bfa8      	it	ge
 8014dbe:	460f      	movge	r7, r1
 8014dc0:	f1bc 0f00 	cmp.w	ip, #0
 8014dc4:	d000      	beq.n	8014dc8 <_strtod_l+0x2e8>
 8014dc6:	427f      	negs	r7, r7
 8014dc8:	2e00      	cmp	r6, #0
 8014dca:	d14f      	bne.n	8014e6c <_strtod_l+0x38c>
 8014dcc:	9904      	ldr	r1, [sp, #16]
 8014dce:	4301      	orrs	r1, r0
 8014dd0:	f47f aec1 	bne.w	8014b56 <_strtod_l+0x76>
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	f47f aedb 	bne.w	8014b90 <_strtod_l+0xb0>
 8014dda:	2a69      	cmp	r2, #105	; 0x69
 8014ddc:	d029      	beq.n	8014e32 <_strtod_l+0x352>
 8014dde:	dc26      	bgt.n	8014e2e <_strtod_l+0x34e>
 8014de0:	2a49      	cmp	r2, #73	; 0x49
 8014de2:	d026      	beq.n	8014e32 <_strtod_l+0x352>
 8014de4:	2a4e      	cmp	r2, #78	; 0x4e
 8014de6:	f47f aed3 	bne.w	8014b90 <_strtod_l+0xb0>
 8014dea:	499b      	ldr	r1, [pc, #620]	; (8015058 <_strtod_l+0x578>)
 8014dec:	a815      	add	r0, sp, #84	; 0x54
 8014dee:	f002 fff5 	bl	8017ddc <__match>
 8014df2:	2800      	cmp	r0, #0
 8014df4:	f43f aecc 	beq.w	8014b90 <_strtod_l+0xb0>
 8014df8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014dfa:	781b      	ldrb	r3, [r3, #0]
 8014dfc:	2b28      	cmp	r3, #40	; 0x28
 8014dfe:	d12f      	bne.n	8014e60 <_strtod_l+0x380>
 8014e00:	4996      	ldr	r1, [pc, #600]	; (801505c <_strtod_l+0x57c>)
 8014e02:	aa18      	add	r2, sp, #96	; 0x60
 8014e04:	a815      	add	r0, sp, #84	; 0x54
 8014e06:	f002 fffd 	bl	8017e04 <__hexnan>
 8014e0a:	2805      	cmp	r0, #5
 8014e0c:	d128      	bne.n	8014e60 <_strtod_l+0x380>
 8014e0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014e10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014e14:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014e18:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014e1c:	e69b      	b.n	8014b56 <_strtod_l+0x76>
 8014e1e:	9f08      	ldr	r7, [sp, #32]
 8014e20:	210a      	movs	r1, #10
 8014e22:	fb01 2107 	mla	r1, r1, r7, r2
 8014e26:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014e2a:	9208      	str	r2, [sp, #32]
 8014e2c:	e7b5      	b.n	8014d9a <_strtod_l+0x2ba>
 8014e2e:	2a6e      	cmp	r2, #110	; 0x6e
 8014e30:	e7d9      	b.n	8014de6 <_strtod_l+0x306>
 8014e32:	498b      	ldr	r1, [pc, #556]	; (8015060 <_strtod_l+0x580>)
 8014e34:	a815      	add	r0, sp, #84	; 0x54
 8014e36:	f002 ffd1 	bl	8017ddc <__match>
 8014e3a:	2800      	cmp	r0, #0
 8014e3c:	f43f aea8 	beq.w	8014b90 <_strtod_l+0xb0>
 8014e40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014e42:	4988      	ldr	r1, [pc, #544]	; (8015064 <_strtod_l+0x584>)
 8014e44:	3b01      	subs	r3, #1
 8014e46:	a815      	add	r0, sp, #84	; 0x54
 8014e48:	9315      	str	r3, [sp, #84]	; 0x54
 8014e4a:	f002 ffc7 	bl	8017ddc <__match>
 8014e4e:	b910      	cbnz	r0, 8014e56 <_strtod_l+0x376>
 8014e50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014e52:	3301      	adds	r3, #1
 8014e54:	9315      	str	r3, [sp, #84]	; 0x54
 8014e56:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8015074 <_strtod_l+0x594>
 8014e5a:	f04f 0800 	mov.w	r8, #0
 8014e5e:	e67a      	b.n	8014b56 <_strtod_l+0x76>
 8014e60:	4881      	ldr	r0, [pc, #516]	; (8015068 <_strtod_l+0x588>)
 8014e62:	f001 fe21 	bl	8016aa8 <nan>
 8014e66:	ec59 8b10 	vmov	r8, r9, d0
 8014e6a:	e674      	b.n	8014b56 <_strtod_l+0x76>
 8014e6c:	9b05      	ldr	r3, [sp, #20]
 8014e6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e70:	1afb      	subs	r3, r7, r3
 8014e72:	f1bb 0f00 	cmp.w	fp, #0
 8014e76:	bf08      	it	eq
 8014e78:	46b3      	moveq	fp, r6
 8014e7a:	2e10      	cmp	r6, #16
 8014e7c:	9308      	str	r3, [sp, #32]
 8014e7e:	4635      	mov	r5, r6
 8014e80:	bfa8      	it	ge
 8014e82:	2510      	movge	r5, #16
 8014e84:	f7eb fb3e 	bl	8000504 <__aeabi_ui2d>
 8014e88:	2e09      	cmp	r6, #9
 8014e8a:	4680      	mov	r8, r0
 8014e8c:	4689      	mov	r9, r1
 8014e8e:	dd13      	ble.n	8014eb8 <_strtod_l+0x3d8>
 8014e90:	4b76      	ldr	r3, [pc, #472]	; (801506c <_strtod_l+0x58c>)
 8014e92:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014e96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014e9a:	f7eb fbad 	bl	80005f8 <__aeabi_dmul>
 8014e9e:	4680      	mov	r8, r0
 8014ea0:	4650      	mov	r0, sl
 8014ea2:	4689      	mov	r9, r1
 8014ea4:	f7eb fb2e 	bl	8000504 <__aeabi_ui2d>
 8014ea8:	4602      	mov	r2, r0
 8014eaa:	460b      	mov	r3, r1
 8014eac:	4640      	mov	r0, r8
 8014eae:	4649      	mov	r1, r9
 8014eb0:	f7eb f9ec 	bl	800028c <__adddf3>
 8014eb4:	4680      	mov	r8, r0
 8014eb6:	4689      	mov	r9, r1
 8014eb8:	2e0f      	cmp	r6, #15
 8014eba:	dc38      	bgt.n	8014f2e <_strtod_l+0x44e>
 8014ebc:	9b08      	ldr	r3, [sp, #32]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	f43f ae49 	beq.w	8014b56 <_strtod_l+0x76>
 8014ec4:	dd24      	ble.n	8014f10 <_strtod_l+0x430>
 8014ec6:	2b16      	cmp	r3, #22
 8014ec8:	dc0b      	bgt.n	8014ee2 <_strtod_l+0x402>
 8014eca:	4968      	ldr	r1, [pc, #416]	; (801506c <_strtod_l+0x58c>)
 8014ecc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ed4:	4642      	mov	r2, r8
 8014ed6:	464b      	mov	r3, r9
 8014ed8:	f7eb fb8e 	bl	80005f8 <__aeabi_dmul>
 8014edc:	4680      	mov	r8, r0
 8014ede:	4689      	mov	r9, r1
 8014ee0:	e639      	b.n	8014b56 <_strtod_l+0x76>
 8014ee2:	9a08      	ldr	r2, [sp, #32]
 8014ee4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8014ee8:	4293      	cmp	r3, r2
 8014eea:	db20      	blt.n	8014f2e <_strtod_l+0x44e>
 8014eec:	4c5f      	ldr	r4, [pc, #380]	; (801506c <_strtod_l+0x58c>)
 8014eee:	f1c6 060f 	rsb	r6, r6, #15
 8014ef2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8014ef6:	4642      	mov	r2, r8
 8014ef8:	464b      	mov	r3, r9
 8014efa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014efe:	f7eb fb7b 	bl	80005f8 <__aeabi_dmul>
 8014f02:	9b08      	ldr	r3, [sp, #32]
 8014f04:	1b9e      	subs	r6, r3, r6
 8014f06:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8014f0a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014f0e:	e7e3      	b.n	8014ed8 <_strtod_l+0x3f8>
 8014f10:	9b08      	ldr	r3, [sp, #32]
 8014f12:	3316      	adds	r3, #22
 8014f14:	db0b      	blt.n	8014f2e <_strtod_l+0x44e>
 8014f16:	9b05      	ldr	r3, [sp, #20]
 8014f18:	1bdf      	subs	r7, r3, r7
 8014f1a:	4b54      	ldr	r3, [pc, #336]	; (801506c <_strtod_l+0x58c>)
 8014f1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8014f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014f24:	4640      	mov	r0, r8
 8014f26:	4649      	mov	r1, r9
 8014f28:	f7eb fc90 	bl	800084c <__aeabi_ddiv>
 8014f2c:	e7d6      	b.n	8014edc <_strtod_l+0x3fc>
 8014f2e:	9b08      	ldr	r3, [sp, #32]
 8014f30:	1b75      	subs	r5, r6, r5
 8014f32:	441d      	add	r5, r3
 8014f34:	2d00      	cmp	r5, #0
 8014f36:	dd70      	ble.n	801501a <_strtod_l+0x53a>
 8014f38:	f015 030f 	ands.w	r3, r5, #15
 8014f3c:	d00a      	beq.n	8014f54 <_strtod_l+0x474>
 8014f3e:	494b      	ldr	r1, [pc, #300]	; (801506c <_strtod_l+0x58c>)
 8014f40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014f44:	4642      	mov	r2, r8
 8014f46:	464b      	mov	r3, r9
 8014f48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f4c:	f7eb fb54 	bl	80005f8 <__aeabi_dmul>
 8014f50:	4680      	mov	r8, r0
 8014f52:	4689      	mov	r9, r1
 8014f54:	f035 050f 	bics.w	r5, r5, #15
 8014f58:	d04d      	beq.n	8014ff6 <_strtod_l+0x516>
 8014f5a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8014f5e:	dd22      	ble.n	8014fa6 <_strtod_l+0x4c6>
 8014f60:	2500      	movs	r5, #0
 8014f62:	46ab      	mov	fp, r5
 8014f64:	9509      	str	r5, [sp, #36]	; 0x24
 8014f66:	9505      	str	r5, [sp, #20]
 8014f68:	2322      	movs	r3, #34	; 0x22
 8014f6a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8015074 <_strtod_l+0x594>
 8014f6e:	6023      	str	r3, [r4, #0]
 8014f70:	f04f 0800 	mov.w	r8, #0
 8014f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	f43f aded 	beq.w	8014b56 <_strtod_l+0x76>
 8014f7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014f7e:	4620      	mov	r0, r4
 8014f80:	f003 f82e 	bl	8017fe0 <_Bfree>
 8014f84:	9905      	ldr	r1, [sp, #20]
 8014f86:	4620      	mov	r0, r4
 8014f88:	f003 f82a 	bl	8017fe0 <_Bfree>
 8014f8c:	4659      	mov	r1, fp
 8014f8e:	4620      	mov	r0, r4
 8014f90:	f003 f826 	bl	8017fe0 <_Bfree>
 8014f94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014f96:	4620      	mov	r0, r4
 8014f98:	f003 f822 	bl	8017fe0 <_Bfree>
 8014f9c:	4629      	mov	r1, r5
 8014f9e:	4620      	mov	r0, r4
 8014fa0:	f003 f81e 	bl	8017fe0 <_Bfree>
 8014fa4:	e5d7      	b.n	8014b56 <_strtod_l+0x76>
 8014fa6:	4b32      	ldr	r3, [pc, #200]	; (8015070 <_strtod_l+0x590>)
 8014fa8:	9304      	str	r3, [sp, #16]
 8014faa:	2300      	movs	r3, #0
 8014fac:	112d      	asrs	r5, r5, #4
 8014fae:	4640      	mov	r0, r8
 8014fb0:	4649      	mov	r1, r9
 8014fb2:	469a      	mov	sl, r3
 8014fb4:	2d01      	cmp	r5, #1
 8014fb6:	dc21      	bgt.n	8014ffc <_strtod_l+0x51c>
 8014fb8:	b10b      	cbz	r3, 8014fbe <_strtod_l+0x4de>
 8014fba:	4680      	mov	r8, r0
 8014fbc:	4689      	mov	r9, r1
 8014fbe:	492c      	ldr	r1, [pc, #176]	; (8015070 <_strtod_l+0x590>)
 8014fc0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014fc4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014fc8:	4642      	mov	r2, r8
 8014fca:	464b      	mov	r3, r9
 8014fcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014fd0:	f7eb fb12 	bl	80005f8 <__aeabi_dmul>
 8014fd4:	4b27      	ldr	r3, [pc, #156]	; (8015074 <_strtod_l+0x594>)
 8014fd6:	460a      	mov	r2, r1
 8014fd8:	400b      	ands	r3, r1
 8014fda:	4927      	ldr	r1, [pc, #156]	; (8015078 <_strtod_l+0x598>)
 8014fdc:	428b      	cmp	r3, r1
 8014fde:	4680      	mov	r8, r0
 8014fe0:	d8be      	bhi.n	8014f60 <_strtod_l+0x480>
 8014fe2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014fe6:	428b      	cmp	r3, r1
 8014fe8:	bf86      	itte	hi
 8014fea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801507c <_strtod_l+0x59c>
 8014fee:	f04f 38ff 	movhi.w	r8, #4294967295
 8014ff2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	9304      	str	r3, [sp, #16]
 8014ffa:	e07b      	b.n	80150f4 <_strtod_l+0x614>
 8014ffc:	07ea      	lsls	r2, r5, #31
 8014ffe:	d505      	bpl.n	801500c <_strtod_l+0x52c>
 8015000:	9b04      	ldr	r3, [sp, #16]
 8015002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015006:	f7eb faf7 	bl	80005f8 <__aeabi_dmul>
 801500a:	2301      	movs	r3, #1
 801500c:	9a04      	ldr	r2, [sp, #16]
 801500e:	3208      	adds	r2, #8
 8015010:	f10a 0a01 	add.w	sl, sl, #1
 8015014:	106d      	asrs	r5, r5, #1
 8015016:	9204      	str	r2, [sp, #16]
 8015018:	e7cc      	b.n	8014fb4 <_strtod_l+0x4d4>
 801501a:	d0ec      	beq.n	8014ff6 <_strtod_l+0x516>
 801501c:	426d      	negs	r5, r5
 801501e:	f015 020f 	ands.w	r2, r5, #15
 8015022:	d00a      	beq.n	801503a <_strtod_l+0x55a>
 8015024:	4b11      	ldr	r3, [pc, #68]	; (801506c <_strtod_l+0x58c>)
 8015026:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801502a:	4640      	mov	r0, r8
 801502c:	4649      	mov	r1, r9
 801502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015032:	f7eb fc0b 	bl	800084c <__aeabi_ddiv>
 8015036:	4680      	mov	r8, r0
 8015038:	4689      	mov	r9, r1
 801503a:	112d      	asrs	r5, r5, #4
 801503c:	d0db      	beq.n	8014ff6 <_strtod_l+0x516>
 801503e:	2d1f      	cmp	r5, #31
 8015040:	dd1e      	ble.n	8015080 <_strtod_l+0x5a0>
 8015042:	2500      	movs	r5, #0
 8015044:	46ab      	mov	fp, r5
 8015046:	9509      	str	r5, [sp, #36]	; 0x24
 8015048:	9505      	str	r5, [sp, #20]
 801504a:	2322      	movs	r3, #34	; 0x22
 801504c:	f04f 0800 	mov.w	r8, #0
 8015050:	f04f 0900 	mov.w	r9, #0
 8015054:	6023      	str	r3, [r4, #0]
 8015056:	e78d      	b.n	8014f74 <_strtod_l+0x494>
 8015058:	0801da46 	.word	0x0801da46
 801505c:	0801d8fc 	.word	0x0801d8fc
 8015060:	0801da3e 	.word	0x0801da3e
 8015064:	0801db2a 	.word	0x0801db2a
 8015068:	0801db26 	.word	0x0801db26
 801506c:	0801dc80 	.word	0x0801dc80
 8015070:	0801dc58 	.word	0x0801dc58
 8015074:	7ff00000 	.word	0x7ff00000
 8015078:	7ca00000 	.word	0x7ca00000
 801507c:	7fefffff 	.word	0x7fefffff
 8015080:	f015 0310 	ands.w	r3, r5, #16
 8015084:	bf18      	it	ne
 8015086:	236a      	movne	r3, #106	; 0x6a
 8015088:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801542c <_strtod_l+0x94c>
 801508c:	9304      	str	r3, [sp, #16]
 801508e:	4640      	mov	r0, r8
 8015090:	4649      	mov	r1, r9
 8015092:	2300      	movs	r3, #0
 8015094:	07ea      	lsls	r2, r5, #31
 8015096:	d504      	bpl.n	80150a2 <_strtod_l+0x5c2>
 8015098:	e9da 2300 	ldrd	r2, r3, [sl]
 801509c:	f7eb faac 	bl	80005f8 <__aeabi_dmul>
 80150a0:	2301      	movs	r3, #1
 80150a2:	106d      	asrs	r5, r5, #1
 80150a4:	f10a 0a08 	add.w	sl, sl, #8
 80150a8:	d1f4      	bne.n	8015094 <_strtod_l+0x5b4>
 80150aa:	b10b      	cbz	r3, 80150b0 <_strtod_l+0x5d0>
 80150ac:	4680      	mov	r8, r0
 80150ae:	4689      	mov	r9, r1
 80150b0:	9b04      	ldr	r3, [sp, #16]
 80150b2:	b1bb      	cbz	r3, 80150e4 <_strtod_l+0x604>
 80150b4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80150b8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80150bc:	2b00      	cmp	r3, #0
 80150be:	4649      	mov	r1, r9
 80150c0:	dd10      	ble.n	80150e4 <_strtod_l+0x604>
 80150c2:	2b1f      	cmp	r3, #31
 80150c4:	f340 811e 	ble.w	8015304 <_strtod_l+0x824>
 80150c8:	2b34      	cmp	r3, #52	; 0x34
 80150ca:	bfde      	ittt	le
 80150cc:	f04f 33ff 	movle.w	r3, #4294967295
 80150d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80150d4:	4093      	lslle	r3, r2
 80150d6:	f04f 0800 	mov.w	r8, #0
 80150da:	bfcc      	ite	gt
 80150dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80150e0:	ea03 0901 	andle.w	r9, r3, r1
 80150e4:	2200      	movs	r2, #0
 80150e6:	2300      	movs	r3, #0
 80150e8:	4640      	mov	r0, r8
 80150ea:	4649      	mov	r1, r9
 80150ec:	f7eb fcec 	bl	8000ac8 <__aeabi_dcmpeq>
 80150f0:	2800      	cmp	r0, #0
 80150f2:	d1a6      	bne.n	8015042 <_strtod_l+0x562>
 80150f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150f6:	9300      	str	r3, [sp, #0]
 80150f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150fa:	4633      	mov	r3, r6
 80150fc:	465a      	mov	r2, fp
 80150fe:	4620      	mov	r0, r4
 8015100:	f002 ffd6 	bl	80180b0 <__s2b>
 8015104:	9009      	str	r0, [sp, #36]	; 0x24
 8015106:	2800      	cmp	r0, #0
 8015108:	f43f af2a 	beq.w	8014f60 <_strtod_l+0x480>
 801510c:	9a08      	ldr	r2, [sp, #32]
 801510e:	9b05      	ldr	r3, [sp, #20]
 8015110:	2a00      	cmp	r2, #0
 8015112:	eba3 0307 	sub.w	r3, r3, r7
 8015116:	bfa8      	it	ge
 8015118:	2300      	movge	r3, #0
 801511a:	930c      	str	r3, [sp, #48]	; 0x30
 801511c:	2500      	movs	r5, #0
 801511e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015122:	9312      	str	r3, [sp, #72]	; 0x48
 8015124:	46ab      	mov	fp, r5
 8015126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015128:	4620      	mov	r0, r4
 801512a:	6859      	ldr	r1, [r3, #4]
 801512c:	f002 ff18 	bl	8017f60 <_Balloc>
 8015130:	9005      	str	r0, [sp, #20]
 8015132:	2800      	cmp	r0, #0
 8015134:	f43f af18 	beq.w	8014f68 <_strtod_l+0x488>
 8015138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801513a:	691a      	ldr	r2, [r3, #16]
 801513c:	3202      	adds	r2, #2
 801513e:	f103 010c 	add.w	r1, r3, #12
 8015142:	0092      	lsls	r2, r2, #2
 8015144:	300c      	adds	r0, #12
 8015146:	f001 fca0 	bl	8016a8a <memcpy>
 801514a:	ec49 8b10 	vmov	d0, r8, r9
 801514e:	aa18      	add	r2, sp, #96	; 0x60
 8015150:	a917      	add	r1, sp, #92	; 0x5c
 8015152:	4620      	mov	r0, r4
 8015154:	f003 fae0 	bl	8018718 <__d2b>
 8015158:	ec49 8b18 	vmov	d8, r8, r9
 801515c:	9016      	str	r0, [sp, #88]	; 0x58
 801515e:	2800      	cmp	r0, #0
 8015160:	f43f af02 	beq.w	8014f68 <_strtod_l+0x488>
 8015164:	2101      	movs	r1, #1
 8015166:	4620      	mov	r0, r4
 8015168:	f003 f83a 	bl	80181e0 <__i2b>
 801516c:	4683      	mov	fp, r0
 801516e:	2800      	cmp	r0, #0
 8015170:	f43f aefa 	beq.w	8014f68 <_strtod_l+0x488>
 8015174:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8015176:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015178:	2e00      	cmp	r6, #0
 801517a:	bfab      	itete	ge
 801517c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801517e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8015180:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8015182:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8015186:	bfac      	ite	ge
 8015188:	eb06 0a03 	addge.w	sl, r6, r3
 801518c:	1b9f      	sublt	r7, r3, r6
 801518e:	9b04      	ldr	r3, [sp, #16]
 8015190:	1af6      	subs	r6, r6, r3
 8015192:	4416      	add	r6, r2
 8015194:	4ba0      	ldr	r3, [pc, #640]	; (8015418 <_strtod_l+0x938>)
 8015196:	3e01      	subs	r6, #1
 8015198:	429e      	cmp	r6, r3
 801519a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801519e:	f280 80c4 	bge.w	801532a <_strtod_l+0x84a>
 80151a2:	1b9b      	subs	r3, r3, r6
 80151a4:	2b1f      	cmp	r3, #31
 80151a6:	eba2 0203 	sub.w	r2, r2, r3
 80151aa:	f04f 0101 	mov.w	r1, #1
 80151ae:	f300 80b0 	bgt.w	8015312 <_strtod_l+0x832>
 80151b2:	fa01 f303 	lsl.w	r3, r1, r3
 80151b6:	930e      	str	r3, [sp, #56]	; 0x38
 80151b8:	2300      	movs	r3, #0
 80151ba:	930d      	str	r3, [sp, #52]	; 0x34
 80151bc:	eb0a 0602 	add.w	r6, sl, r2
 80151c0:	9b04      	ldr	r3, [sp, #16]
 80151c2:	45b2      	cmp	sl, r6
 80151c4:	4417      	add	r7, r2
 80151c6:	441f      	add	r7, r3
 80151c8:	4653      	mov	r3, sl
 80151ca:	bfa8      	it	ge
 80151cc:	4633      	movge	r3, r6
 80151ce:	42bb      	cmp	r3, r7
 80151d0:	bfa8      	it	ge
 80151d2:	463b      	movge	r3, r7
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	bfc2      	ittt	gt
 80151d8:	1af6      	subgt	r6, r6, r3
 80151da:	1aff      	subgt	r7, r7, r3
 80151dc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80151e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	dd17      	ble.n	8015216 <_strtod_l+0x736>
 80151e6:	4659      	mov	r1, fp
 80151e8:	461a      	mov	r2, r3
 80151ea:	4620      	mov	r0, r4
 80151ec:	f003 f8b8 	bl	8018360 <__pow5mult>
 80151f0:	4683      	mov	fp, r0
 80151f2:	2800      	cmp	r0, #0
 80151f4:	f43f aeb8 	beq.w	8014f68 <_strtod_l+0x488>
 80151f8:	4601      	mov	r1, r0
 80151fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80151fc:	4620      	mov	r0, r4
 80151fe:	f003 f805 	bl	801820c <__multiply>
 8015202:	900b      	str	r0, [sp, #44]	; 0x2c
 8015204:	2800      	cmp	r0, #0
 8015206:	f43f aeaf 	beq.w	8014f68 <_strtod_l+0x488>
 801520a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801520c:	4620      	mov	r0, r4
 801520e:	f002 fee7 	bl	8017fe0 <_Bfree>
 8015212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015214:	9316      	str	r3, [sp, #88]	; 0x58
 8015216:	2e00      	cmp	r6, #0
 8015218:	f300 808c 	bgt.w	8015334 <_strtod_l+0x854>
 801521c:	9b08      	ldr	r3, [sp, #32]
 801521e:	2b00      	cmp	r3, #0
 8015220:	dd08      	ble.n	8015234 <_strtod_l+0x754>
 8015222:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015224:	9905      	ldr	r1, [sp, #20]
 8015226:	4620      	mov	r0, r4
 8015228:	f003 f89a 	bl	8018360 <__pow5mult>
 801522c:	9005      	str	r0, [sp, #20]
 801522e:	2800      	cmp	r0, #0
 8015230:	f43f ae9a 	beq.w	8014f68 <_strtod_l+0x488>
 8015234:	2f00      	cmp	r7, #0
 8015236:	dd08      	ble.n	801524a <_strtod_l+0x76a>
 8015238:	9905      	ldr	r1, [sp, #20]
 801523a:	463a      	mov	r2, r7
 801523c:	4620      	mov	r0, r4
 801523e:	f003 f8e9 	bl	8018414 <__lshift>
 8015242:	9005      	str	r0, [sp, #20]
 8015244:	2800      	cmp	r0, #0
 8015246:	f43f ae8f 	beq.w	8014f68 <_strtod_l+0x488>
 801524a:	f1ba 0f00 	cmp.w	sl, #0
 801524e:	dd08      	ble.n	8015262 <_strtod_l+0x782>
 8015250:	4659      	mov	r1, fp
 8015252:	4652      	mov	r2, sl
 8015254:	4620      	mov	r0, r4
 8015256:	f003 f8dd 	bl	8018414 <__lshift>
 801525a:	4683      	mov	fp, r0
 801525c:	2800      	cmp	r0, #0
 801525e:	f43f ae83 	beq.w	8014f68 <_strtod_l+0x488>
 8015262:	9a05      	ldr	r2, [sp, #20]
 8015264:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015266:	4620      	mov	r0, r4
 8015268:	f003 f95c 	bl	8018524 <__mdiff>
 801526c:	4605      	mov	r5, r0
 801526e:	2800      	cmp	r0, #0
 8015270:	f43f ae7a 	beq.w	8014f68 <_strtod_l+0x488>
 8015274:	68c3      	ldr	r3, [r0, #12]
 8015276:	930b      	str	r3, [sp, #44]	; 0x2c
 8015278:	2300      	movs	r3, #0
 801527a:	60c3      	str	r3, [r0, #12]
 801527c:	4659      	mov	r1, fp
 801527e:	f003 f935 	bl	80184ec <__mcmp>
 8015282:	2800      	cmp	r0, #0
 8015284:	da60      	bge.n	8015348 <_strtod_l+0x868>
 8015286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015288:	ea53 0308 	orrs.w	r3, r3, r8
 801528c:	f040 8084 	bne.w	8015398 <_strtod_l+0x8b8>
 8015290:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015294:	2b00      	cmp	r3, #0
 8015296:	d17f      	bne.n	8015398 <_strtod_l+0x8b8>
 8015298:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801529c:	0d1b      	lsrs	r3, r3, #20
 801529e:	051b      	lsls	r3, r3, #20
 80152a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80152a4:	d978      	bls.n	8015398 <_strtod_l+0x8b8>
 80152a6:	696b      	ldr	r3, [r5, #20]
 80152a8:	b913      	cbnz	r3, 80152b0 <_strtod_l+0x7d0>
 80152aa:	692b      	ldr	r3, [r5, #16]
 80152ac:	2b01      	cmp	r3, #1
 80152ae:	dd73      	ble.n	8015398 <_strtod_l+0x8b8>
 80152b0:	4629      	mov	r1, r5
 80152b2:	2201      	movs	r2, #1
 80152b4:	4620      	mov	r0, r4
 80152b6:	f003 f8ad 	bl	8018414 <__lshift>
 80152ba:	4659      	mov	r1, fp
 80152bc:	4605      	mov	r5, r0
 80152be:	f003 f915 	bl	80184ec <__mcmp>
 80152c2:	2800      	cmp	r0, #0
 80152c4:	dd68      	ble.n	8015398 <_strtod_l+0x8b8>
 80152c6:	9904      	ldr	r1, [sp, #16]
 80152c8:	4a54      	ldr	r2, [pc, #336]	; (801541c <_strtod_l+0x93c>)
 80152ca:	464b      	mov	r3, r9
 80152cc:	2900      	cmp	r1, #0
 80152ce:	f000 8084 	beq.w	80153da <_strtod_l+0x8fa>
 80152d2:	ea02 0109 	and.w	r1, r2, r9
 80152d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80152da:	dc7e      	bgt.n	80153da <_strtod_l+0x8fa>
 80152dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80152e0:	f77f aeb3 	ble.w	801504a <_strtod_l+0x56a>
 80152e4:	4b4e      	ldr	r3, [pc, #312]	; (8015420 <_strtod_l+0x940>)
 80152e6:	4640      	mov	r0, r8
 80152e8:	4649      	mov	r1, r9
 80152ea:	2200      	movs	r2, #0
 80152ec:	f7eb f984 	bl	80005f8 <__aeabi_dmul>
 80152f0:	4b4a      	ldr	r3, [pc, #296]	; (801541c <_strtod_l+0x93c>)
 80152f2:	400b      	ands	r3, r1
 80152f4:	4680      	mov	r8, r0
 80152f6:	4689      	mov	r9, r1
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	f47f ae3f 	bne.w	8014f7c <_strtod_l+0x49c>
 80152fe:	2322      	movs	r3, #34	; 0x22
 8015300:	6023      	str	r3, [r4, #0]
 8015302:	e63b      	b.n	8014f7c <_strtod_l+0x49c>
 8015304:	f04f 32ff 	mov.w	r2, #4294967295
 8015308:	fa02 f303 	lsl.w	r3, r2, r3
 801530c:	ea03 0808 	and.w	r8, r3, r8
 8015310:	e6e8      	b.n	80150e4 <_strtod_l+0x604>
 8015312:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015316:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801531a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801531e:	36e2      	adds	r6, #226	; 0xe2
 8015320:	fa01 f306 	lsl.w	r3, r1, r6
 8015324:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8015328:	e748      	b.n	80151bc <_strtod_l+0x6dc>
 801532a:	2100      	movs	r1, #0
 801532c:	2301      	movs	r3, #1
 801532e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8015332:	e743      	b.n	80151bc <_strtod_l+0x6dc>
 8015334:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015336:	4632      	mov	r2, r6
 8015338:	4620      	mov	r0, r4
 801533a:	f003 f86b 	bl	8018414 <__lshift>
 801533e:	9016      	str	r0, [sp, #88]	; 0x58
 8015340:	2800      	cmp	r0, #0
 8015342:	f47f af6b 	bne.w	801521c <_strtod_l+0x73c>
 8015346:	e60f      	b.n	8014f68 <_strtod_l+0x488>
 8015348:	46ca      	mov	sl, r9
 801534a:	d171      	bne.n	8015430 <_strtod_l+0x950>
 801534c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801534e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015352:	b352      	cbz	r2, 80153aa <_strtod_l+0x8ca>
 8015354:	4a33      	ldr	r2, [pc, #204]	; (8015424 <_strtod_l+0x944>)
 8015356:	4293      	cmp	r3, r2
 8015358:	d12a      	bne.n	80153b0 <_strtod_l+0x8d0>
 801535a:	9b04      	ldr	r3, [sp, #16]
 801535c:	4641      	mov	r1, r8
 801535e:	b1fb      	cbz	r3, 80153a0 <_strtod_l+0x8c0>
 8015360:	4b2e      	ldr	r3, [pc, #184]	; (801541c <_strtod_l+0x93c>)
 8015362:	ea09 0303 	and.w	r3, r9, r3
 8015366:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801536a:	f04f 32ff 	mov.w	r2, #4294967295
 801536e:	d81a      	bhi.n	80153a6 <_strtod_l+0x8c6>
 8015370:	0d1b      	lsrs	r3, r3, #20
 8015372:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015376:	fa02 f303 	lsl.w	r3, r2, r3
 801537a:	4299      	cmp	r1, r3
 801537c:	d118      	bne.n	80153b0 <_strtod_l+0x8d0>
 801537e:	4b2a      	ldr	r3, [pc, #168]	; (8015428 <_strtod_l+0x948>)
 8015380:	459a      	cmp	sl, r3
 8015382:	d102      	bne.n	801538a <_strtod_l+0x8aa>
 8015384:	3101      	adds	r1, #1
 8015386:	f43f adef 	beq.w	8014f68 <_strtod_l+0x488>
 801538a:	4b24      	ldr	r3, [pc, #144]	; (801541c <_strtod_l+0x93c>)
 801538c:	ea0a 0303 	and.w	r3, sl, r3
 8015390:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8015394:	f04f 0800 	mov.w	r8, #0
 8015398:	9b04      	ldr	r3, [sp, #16]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d1a2      	bne.n	80152e4 <_strtod_l+0x804>
 801539e:	e5ed      	b.n	8014f7c <_strtod_l+0x49c>
 80153a0:	f04f 33ff 	mov.w	r3, #4294967295
 80153a4:	e7e9      	b.n	801537a <_strtod_l+0x89a>
 80153a6:	4613      	mov	r3, r2
 80153a8:	e7e7      	b.n	801537a <_strtod_l+0x89a>
 80153aa:	ea53 0308 	orrs.w	r3, r3, r8
 80153ae:	d08a      	beq.n	80152c6 <_strtod_l+0x7e6>
 80153b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153b2:	b1e3      	cbz	r3, 80153ee <_strtod_l+0x90e>
 80153b4:	ea13 0f0a 	tst.w	r3, sl
 80153b8:	d0ee      	beq.n	8015398 <_strtod_l+0x8b8>
 80153ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153bc:	9a04      	ldr	r2, [sp, #16]
 80153be:	4640      	mov	r0, r8
 80153c0:	4649      	mov	r1, r9
 80153c2:	b1c3      	cbz	r3, 80153f6 <_strtod_l+0x916>
 80153c4:	f7ff fb6e 	bl	8014aa4 <sulp>
 80153c8:	4602      	mov	r2, r0
 80153ca:	460b      	mov	r3, r1
 80153cc:	ec51 0b18 	vmov	r0, r1, d8
 80153d0:	f7ea ff5c 	bl	800028c <__adddf3>
 80153d4:	4680      	mov	r8, r0
 80153d6:	4689      	mov	r9, r1
 80153d8:	e7de      	b.n	8015398 <_strtod_l+0x8b8>
 80153da:	4013      	ands	r3, r2
 80153dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80153e0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80153e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80153e8:	f04f 38ff 	mov.w	r8, #4294967295
 80153ec:	e7d4      	b.n	8015398 <_strtod_l+0x8b8>
 80153ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153f0:	ea13 0f08 	tst.w	r3, r8
 80153f4:	e7e0      	b.n	80153b8 <_strtod_l+0x8d8>
 80153f6:	f7ff fb55 	bl	8014aa4 <sulp>
 80153fa:	4602      	mov	r2, r0
 80153fc:	460b      	mov	r3, r1
 80153fe:	ec51 0b18 	vmov	r0, r1, d8
 8015402:	f7ea ff41 	bl	8000288 <__aeabi_dsub>
 8015406:	2200      	movs	r2, #0
 8015408:	2300      	movs	r3, #0
 801540a:	4680      	mov	r8, r0
 801540c:	4689      	mov	r9, r1
 801540e:	f7eb fb5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8015412:	2800      	cmp	r0, #0
 8015414:	d0c0      	beq.n	8015398 <_strtod_l+0x8b8>
 8015416:	e618      	b.n	801504a <_strtod_l+0x56a>
 8015418:	fffffc02 	.word	0xfffffc02
 801541c:	7ff00000 	.word	0x7ff00000
 8015420:	39500000 	.word	0x39500000
 8015424:	000fffff 	.word	0x000fffff
 8015428:	7fefffff 	.word	0x7fefffff
 801542c:	0801d910 	.word	0x0801d910
 8015430:	4659      	mov	r1, fp
 8015432:	4628      	mov	r0, r5
 8015434:	f003 f9ca 	bl	80187cc <__ratio>
 8015438:	ec57 6b10 	vmov	r6, r7, d0
 801543c:	ee10 0a10 	vmov	r0, s0
 8015440:	2200      	movs	r2, #0
 8015442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015446:	4639      	mov	r1, r7
 8015448:	f7eb fb52 	bl	8000af0 <__aeabi_dcmple>
 801544c:	2800      	cmp	r0, #0
 801544e:	d071      	beq.n	8015534 <_strtod_l+0xa54>
 8015450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015452:	2b00      	cmp	r3, #0
 8015454:	d17c      	bne.n	8015550 <_strtod_l+0xa70>
 8015456:	f1b8 0f00 	cmp.w	r8, #0
 801545a:	d15a      	bne.n	8015512 <_strtod_l+0xa32>
 801545c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015460:	2b00      	cmp	r3, #0
 8015462:	d15d      	bne.n	8015520 <_strtod_l+0xa40>
 8015464:	4b90      	ldr	r3, [pc, #576]	; (80156a8 <_strtod_l+0xbc8>)
 8015466:	2200      	movs	r2, #0
 8015468:	4630      	mov	r0, r6
 801546a:	4639      	mov	r1, r7
 801546c:	f7eb fb36 	bl	8000adc <__aeabi_dcmplt>
 8015470:	2800      	cmp	r0, #0
 8015472:	d15c      	bne.n	801552e <_strtod_l+0xa4e>
 8015474:	4630      	mov	r0, r6
 8015476:	4639      	mov	r1, r7
 8015478:	4b8c      	ldr	r3, [pc, #560]	; (80156ac <_strtod_l+0xbcc>)
 801547a:	2200      	movs	r2, #0
 801547c:	f7eb f8bc 	bl	80005f8 <__aeabi_dmul>
 8015480:	4606      	mov	r6, r0
 8015482:	460f      	mov	r7, r1
 8015484:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015488:	9606      	str	r6, [sp, #24]
 801548a:	9307      	str	r3, [sp, #28]
 801548c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015490:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8015494:	4b86      	ldr	r3, [pc, #536]	; (80156b0 <_strtod_l+0xbd0>)
 8015496:	ea0a 0303 	and.w	r3, sl, r3
 801549a:	930d      	str	r3, [sp, #52]	; 0x34
 801549c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801549e:	4b85      	ldr	r3, [pc, #532]	; (80156b4 <_strtod_l+0xbd4>)
 80154a0:	429a      	cmp	r2, r3
 80154a2:	f040 8090 	bne.w	80155c6 <_strtod_l+0xae6>
 80154a6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80154aa:	ec49 8b10 	vmov	d0, r8, r9
 80154ae:	f003 f8c3 	bl	8018638 <__ulp>
 80154b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80154b6:	ec51 0b10 	vmov	r0, r1, d0
 80154ba:	f7eb f89d 	bl	80005f8 <__aeabi_dmul>
 80154be:	4642      	mov	r2, r8
 80154c0:	464b      	mov	r3, r9
 80154c2:	f7ea fee3 	bl	800028c <__adddf3>
 80154c6:	460b      	mov	r3, r1
 80154c8:	4979      	ldr	r1, [pc, #484]	; (80156b0 <_strtod_l+0xbd0>)
 80154ca:	4a7b      	ldr	r2, [pc, #492]	; (80156b8 <_strtod_l+0xbd8>)
 80154cc:	4019      	ands	r1, r3
 80154ce:	4291      	cmp	r1, r2
 80154d0:	4680      	mov	r8, r0
 80154d2:	d944      	bls.n	801555e <_strtod_l+0xa7e>
 80154d4:	ee18 2a90 	vmov	r2, s17
 80154d8:	4b78      	ldr	r3, [pc, #480]	; (80156bc <_strtod_l+0xbdc>)
 80154da:	429a      	cmp	r2, r3
 80154dc:	d104      	bne.n	80154e8 <_strtod_l+0xa08>
 80154de:	ee18 3a10 	vmov	r3, s16
 80154e2:	3301      	adds	r3, #1
 80154e4:	f43f ad40 	beq.w	8014f68 <_strtod_l+0x488>
 80154e8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80156bc <_strtod_l+0xbdc>
 80154ec:	f04f 38ff 	mov.w	r8, #4294967295
 80154f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80154f2:	4620      	mov	r0, r4
 80154f4:	f002 fd74 	bl	8017fe0 <_Bfree>
 80154f8:	9905      	ldr	r1, [sp, #20]
 80154fa:	4620      	mov	r0, r4
 80154fc:	f002 fd70 	bl	8017fe0 <_Bfree>
 8015500:	4659      	mov	r1, fp
 8015502:	4620      	mov	r0, r4
 8015504:	f002 fd6c 	bl	8017fe0 <_Bfree>
 8015508:	4629      	mov	r1, r5
 801550a:	4620      	mov	r0, r4
 801550c:	f002 fd68 	bl	8017fe0 <_Bfree>
 8015510:	e609      	b.n	8015126 <_strtod_l+0x646>
 8015512:	f1b8 0f01 	cmp.w	r8, #1
 8015516:	d103      	bne.n	8015520 <_strtod_l+0xa40>
 8015518:	f1b9 0f00 	cmp.w	r9, #0
 801551c:	f43f ad95 	beq.w	801504a <_strtod_l+0x56a>
 8015520:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8015678 <_strtod_l+0xb98>
 8015524:	4f60      	ldr	r7, [pc, #384]	; (80156a8 <_strtod_l+0xbc8>)
 8015526:	ed8d 7b06 	vstr	d7, [sp, #24]
 801552a:	2600      	movs	r6, #0
 801552c:	e7ae      	b.n	801548c <_strtod_l+0x9ac>
 801552e:	4f5f      	ldr	r7, [pc, #380]	; (80156ac <_strtod_l+0xbcc>)
 8015530:	2600      	movs	r6, #0
 8015532:	e7a7      	b.n	8015484 <_strtod_l+0x9a4>
 8015534:	4b5d      	ldr	r3, [pc, #372]	; (80156ac <_strtod_l+0xbcc>)
 8015536:	4630      	mov	r0, r6
 8015538:	4639      	mov	r1, r7
 801553a:	2200      	movs	r2, #0
 801553c:	f7eb f85c 	bl	80005f8 <__aeabi_dmul>
 8015540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015542:	4606      	mov	r6, r0
 8015544:	460f      	mov	r7, r1
 8015546:	2b00      	cmp	r3, #0
 8015548:	d09c      	beq.n	8015484 <_strtod_l+0x9a4>
 801554a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801554e:	e79d      	b.n	801548c <_strtod_l+0x9ac>
 8015550:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8015680 <_strtod_l+0xba0>
 8015554:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015558:	ec57 6b17 	vmov	r6, r7, d7
 801555c:	e796      	b.n	801548c <_strtod_l+0x9ac>
 801555e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8015562:	9b04      	ldr	r3, [sp, #16]
 8015564:	46ca      	mov	sl, r9
 8015566:	2b00      	cmp	r3, #0
 8015568:	d1c2      	bne.n	80154f0 <_strtod_l+0xa10>
 801556a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801556e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015570:	0d1b      	lsrs	r3, r3, #20
 8015572:	051b      	lsls	r3, r3, #20
 8015574:	429a      	cmp	r2, r3
 8015576:	d1bb      	bne.n	80154f0 <_strtod_l+0xa10>
 8015578:	4630      	mov	r0, r6
 801557a:	4639      	mov	r1, r7
 801557c:	f7eb fb9c 	bl	8000cb8 <__aeabi_d2lz>
 8015580:	f7eb f80c 	bl	800059c <__aeabi_l2d>
 8015584:	4602      	mov	r2, r0
 8015586:	460b      	mov	r3, r1
 8015588:	4630      	mov	r0, r6
 801558a:	4639      	mov	r1, r7
 801558c:	f7ea fe7c 	bl	8000288 <__aeabi_dsub>
 8015590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015592:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015596:	ea43 0308 	orr.w	r3, r3, r8
 801559a:	4313      	orrs	r3, r2
 801559c:	4606      	mov	r6, r0
 801559e:	460f      	mov	r7, r1
 80155a0:	d054      	beq.n	801564c <_strtod_l+0xb6c>
 80155a2:	a339      	add	r3, pc, #228	; (adr r3, 8015688 <_strtod_l+0xba8>)
 80155a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a8:	f7eb fa98 	bl	8000adc <__aeabi_dcmplt>
 80155ac:	2800      	cmp	r0, #0
 80155ae:	f47f ace5 	bne.w	8014f7c <_strtod_l+0x49c>
 80155b2:	a337      	add	r3, pc, #220	; (adr r3, 8015690 <_strtod_l+0xbb0>)
 80155b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155b8:	4630      	mov	r0, r6
 80155ba:	4639      	mov	r1, r7
 80155bc:	f7eb faac 	bl	8000b18 <__aeabi_dcmpgt>
 80155c0:	2800      	cmp	r0, #0
 80155c2:	d095      	beq.n	80154f0 <_strtod_l+0xa10>
 80155c4:	e4da      	b.n	8014f7c <_strtod_l+0x49c>
 80155c6:	9b04      	ldr	r3, [sp, #16]
 80155c8:	b333      	cbz	r3, 8015618 <_strtod_l+0xb38>
 80155ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80155d0:	d822      	bhi.n	8015618 <_strtod_l+0xb38>
 80155d2:	a331      	add	r3, pc, #196	; (adr r3, 8015698 <_strtod_l+0xbb8>)
 80155d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155d8:	4630      	mov	r0, r6
 80155da:	4639      	mov	r1, r7
 80155dc:	f7eb fa88 	bl	8000af0 <__aeabi_dcmple>
 80155e0:	b1a0      	cbz	r0, 801560c <_strtod_l+0xb2c>
 80155e2:	4639      	mov	r1, r7
 80155e4:	4630      	mov	r0, r6
 80155e6:	f7eb fadf 	bl	8000ba8 <__aeabi_d2uiz>
 80155ea:	2801      	cmp	r0, #1
 80155ec:	bf38      	it	cc
 80155ee:	2001      	movcc	r0, #1
 80155f0:	f7ea ff88 	bl	8000504 <__aeabi_ui2d>
 80155f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155f6:	4606      	mov	r6, r0
 80155f8:	460f      	mov	r7, r1
 80155fa:	bb23      	cbnz	r3, 8015646 <_strtod_l+0xb66>
 80155fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015600:	9010      	str	r0, [sp, #64]	; 0x40
 8015602:	9311      	str	r3, [sp, #68]	; 0x44
 8015604:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015608:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801560c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801560e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015610:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015614:	1a9b      	subs	r3, r3, r2
 8015616:	930f      	str	r3, [sp, #60]	; 0x3c
 8015618:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801561c:	eeb0 0a48 	vmov.f32	s0, s16
 8015620:	eef0 0a68 	vmov.f32	s1, s17
 8015624:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015628:	f003 f806 	bl	8018638 <__ulp>
 801562c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015630:	ec53 2b10 	vmov	r2, r3, d0
 8015634:	f7ea ffe0 	bl	80005f8 <__aeabi_dmul>
 8015638:	ec53 2b18 	vmov	r2, r3, d8
 801563c:	f7ea fe26 	bl	800028c <__adddf3>
 8015640:	4680      	mov	r8, r0
 8015642:	4689      	mov	r9, r1
 8015644:	e78d      	b.n	8015562 <_strtod_l+0xa82>
 8015646:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801564a:	e7db      	b.n	8015604 <_strtod_l+0xb24>
 801564c:	a314      	add	r3, pc, #80	; (adr r3, 80156a0 <_strtod_l+0xbc0>)
 801564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015652:	f7eb fa43 	bl	8000adc <__aeabi_dcmplt>
 8015656:	e7b3      	b.n	80155c0 <_strtod_l+0xae0>
 8015658:	2300      	movs	r3, #0
 801565a:	930a      	str	r3, [sp, #40]	; 0x28
 801565c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801565e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015660:	6013      	str	r3, [r2, #0]
 8015662:	f7ff ba7c 	b.w	8014b5e <_strtod_l+0x7e>
 8015666:	2a65      	cmp	r2, #101	; 0x65
 8015668:	f43f ab75 	beq.w	8014d56 <_strtod_l+0x276>
 801566c:	2a45      	cmp	r2, #69	; 0x45
 801566e:	f43f ab72 	beq.w	8014d56 <_strtod_l+0x276>
 8015672:	2301      	movs	r3, #1
 8015674:	f7ff bbaa 	b.w	8014dcc <_strtod_l+0x2ec>
 8015678:	00000000 	.word	0x00000000
 801567c:	bff00000 	.word	0xbff00000
 8015680:	00000000 	.word	0x00000000
 8015684:	3ff00000 	.word	0x3ff00000
 8015688:	94a03595 	.word	0x94a03595
 801568c:	3fdfffff 	.word	0x3fdfffff
 8015690:	35afe535 	.word	0x35afe535
 8015694:	3fe00000 	.word	0x3fe00000
 8015698:	ffc00000 	.word	0xffc00000
 801569c:	41dfffff 	.word	0x41dfffff
 80156a0:	94a03595 	.word	0x94a03595
 80156a4:	3fcfffff 	.word	0x3fcfffff
 80156a8:	3ff00000 	.word	0x3ff00000
 80156ac:	3fe00000 	.word	0x3fe00000
 80156b0:	7ff00000 	.word	0x7ff00000
 80156b4:	7fe00000 	.word	0x7fe00000
 80156b8:	7c9fffff 	.word	0x7c9fffff
 80156bc:	7fefffff 	.word	0x7fefffff

080156c0 <_strtod_r>:
 80156c0:	4b01      	ldr	r3, [pc, #4]	; (80156c8 <_strtod_r+0x8>)
 80156c2:	f7ff ba0d 	b.w	8014ae0 <_strtod_l>
 80156c6:	bf00      	nop
 80156c8:	20000150 	.word	0x20000150

080156cc <strtof>:
 80156cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156d0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8015794 <strtof+0xc8>
 80156d4:	4b2a      	ldr	r3, [pc, #168]	; (8015780 <strtof+0xb4>)
 80156d6:	460a      	mov	r2, r1
 80156d8:	ed2d 8b02 	vpush	{d8}
 80156dc:	4601      	mov	r1, r0
 80156de:	f8d8 0000 	ldr.w	r0, [r8]
 80156e2:	f7ff f9fd 	bl	8014ae0 <_strtod_l>
 80156e6:	ec55 4b10 	vmov	r4, r5, d0
 80156ea:	ee10 2a10 	vmov	r2, s0
 80156ee:	ee10 0a10 	vmov	r0, s0
 80156f2:	462b      	mov	r3, r5
 80156f4:	4629      	mov	r1, r5
 80156f6:	f7eb fa19 	bl	8000b2c <__aeabi_dcmpun>
 80156fa:	b190      	cbz	r0, 8015722 <strtof+0x56>
 80156fc:	2d00      	cmp	r5, #0
 80156fe:	4821      	ldr	r0, [pc, #132]	; (8015784 <strtof+0xb8>)
 8015700:	da09      	bge.n	8015716 <strtof+0x4a>
 8015702:	f001 f9d9 	bl	8016ab8 <nanf>
 8015706:	eeb1 8a40 	vneg.f32	s16, s0
 801570a:	eeb0 0a48 	vmov.f32	s0, s16
 801570e:	ecbd 8b02 	vpop	{d8}
 8015712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015716:	ecbd 8b02 	vpop	{d8}
 801571a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801571e:	f001 b9cb 	b.w	8016ab8 <nanf>
 8015722:	4620      	mov	r0, r4
 8015724:	4629      	mov	r1, r5
 8015726:	f7eb fa5f 	bl	8000be8 <__aeabi_d2f>
 801572a:	ee08 0a10 	vmov	s16, r0
 801572e:	eddf 7a16 	vldr	s15, [pc, #88]	; 8015788 <strtof+0xbc>
 8015732:	eeb0 7ac8 	vabs.f32	s14, s16
 8015736:	eeb4 7a67 	vcmp.f32	s14, s15
 801573a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801573e:	dd11      	ble.n	8015764 <strtof+0x98>
 8015740:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8015744:	4b11      	ldr	r3, [pc, #68]	; (801578c <strtof+0xc0>)
 8015746:	f04f 32ff 	mov.w	r2, #4294967295
 801574a:	4620      	mov	r0, r4
 801574c:	4639      	mov	r1, r7
 801574e:	f7eb f9ed 	bl	8000b2c <__aeabi_dcmpun>
 8015752:	b980      	cbnz	r0, 8015776 <strtof+0xaa>
 8015754:	4b0d      	ldr	r3, [pc, #52]	; (801578c <strtof+0xc0>)
 8015756:	f04f 32ff 	mov.w	r2, #4294967295
 801575a:	4620      	mov	r0, r4
 801575c:	4639      	mov	r1, r7
 801575e:	f7eb f9c7 	bl	8000af0 <__aeabi_dcmple>
 8015762:	b940      	cbnz	r0, 8015776 <strtof+0xaa>
 8015764:	ee18 3a10 	vmov	r3, s16
 8015768:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801576c:	d1cd      	bne.n	801570a <strtof+0x3e>
 801576e:	4b08      	ldr	r3, [pc, #32]	; (8015790 <strtof+0xc4>)
 8015770:	402b      	ands	r3, r5
 8015772:	2b00      	cmp	r3, #0
 8015774:	d0c9      	beq.n	801570a <strtof+0x3e>
 8015776:	f8d8 3000 	ldr.w	r3, [r8]
 801577a:	2222      	movs	r2, #34	; 0x22
 801577c:	601a      	str	r2, [r3, #0]
 801577e:	e7c4      	b.n	801570a <strtof+0x3e>
 8015780:	20000150 	.word	0x20000150
 8015784:	0801db26 	.word	0x0801db26
 8015788:	7f7fffff 	.word	0x7f7fffff
 801578c:	7fefffff 	.word	0x7fefffff
 8015790:	7ff00000 	.word	0x7ff00000
 8015794:	20000308 	.word	0x20000308

08015798 <_strtol_l.constprop.0>:
 8015798:	2b01      	cmp	r3, #1
 801579a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801579e:	d001      	beq.n	80157a4 <_strtol_l.constprop.0+0xc>
 80157a0:	2b24      	cmp	r3, #36	; 0x24
 80157a2:	d906      	bls.n	80157b2 <_strtol_l.constprop.0+0x1a>
 80157a4:	f001 f93c 	bl	8016a20 <__errno>
 80157a8:	2316      	movs	r3, #22
 80157aa:	6003      	str	r3, [r0, #0]
 80157ac:	2000      	movs	r0, #0
 80157ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015898 <_strtol_l.constprop.0+0x100>
 80157b6:	460d      	mov	r5, r1
 80157b8:	462e      	mov	r6, r5
 80157ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80157be:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80157c2:	f017 0708 	ands.w	r7, r7, #8
 80157c6:	d1f7      	bne.n	80157b8 <_strtol_l.constprop.0+0x20>
 80157c8:	2c2d      	cmp	r4, #45	; 0x2d
 80157ca:	d132      	bne.n	8015832 <_strtol_l.constprop.0+0x9a>
 80157cc:	782c      	ldrb	r4, [r5, #0]
 80157ce:	2701      	movs	r7, #1
 80157d0:	1cb5      	adds	r5, r6, #2
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d05b      	beq.n	801588e <_strtol_l.constprop.0+0xf6>
 80157d6:	2b10      	cmp	r3, #16
 80157d8:	d109      	bne.n	80157ee <_strtol_l.constprop.0+0x56>
 80157da:	2c30      	cmp	r4, #48	; 0x30
 80157dc:	d107      	bne.n	80157ee <_strtol_l.constprop.0+0x56>
 80157de:	782c      	ldrb	r4, [r5, #0]
 80157e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80157e4:	2c58      	cmp	r4, #88	; 0x58
 80157e6:	d14d      	bne.n	8015884 <_strtol_l.constprop.0+0xec>
 80157e8:	786c      	ldrb	r4, [r5, #1]
 80157ea:	2310      	movs	r3, #16
 80157ec:	3502      	adds	r5, #2
 80157ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80157f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80157f6:	f04f 0e00 	mov.w	lr, #0
 80157fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80157fe:	4676      	mov	r6, lr
 8015800:	fb03 8a19 	mls	sl, r3, r9, r8
 8015804:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015808:	f1bc 0f09 	cmp.w	ip, #9
 801580c:	d816      	bhi.n	801583c <_strtol_l.constprop.0+0xa4>
 801580e:	4664      	mov	r4, ip
 8015810:	42a3      	cmp	r3, r4
 8015812:	dd24      	ble.n	801585e <_strtol_l.constprop.0+0xc6>
 8015814:	f1be 3fff 	cmp.w	lr, #4294967295
 8015818:	d008      	beq.n	801582c <_strtol_l.constprop.0+0x94>
 801581a:	45b1      	cmp	r9, r6
 801581c:	d31c      	bcc.n	8015858 <_strtol_l.constprop.0+0xc0>
 801581e:	d101      	bne.n	8015824 <_strtol_l.constprop.0+0x8c>
 8015820:	45a2      	cmp	sl, r4
 8015822:	db19      	blt.n	8015858 <_strtol_l.constprop.0+0xc0>
 8015824:	fb06 4603 	mla	r6, r6, r3, r4
 8015828:	f04f 0e01 	mov.w	lr, #1
 801582c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015830:	e7e8      	b.n	8015804 <_strtol_l.constprop.0+0x6c>
 8015832:	2c2b      	cmp	r4, #43	; 0x2b
 8015834:	bf04      	itt	eq
 8015836:	782c      	ldrbeq	r4, [r5, #0]
 8015838:	1cb5      	addeq	r5, r6, #2
 801583a:	e7ca      	b.n	80157d2 <_strtol_l.constprop.0+0x3a>
 801583c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015840:	f1bc 0f19 	cmp.w	ip, #25
 8015844:	d801      	bhi.n	801584a <_strtol_l.constprop.0+0xb2>
 8015846:	3c37      	subs	r4, #55	; 0x37
 8015848:	e7e2      	b.n	8015810 <_strtol_l.constprop.0+0x78>
 801584a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801584e:	f1bc 0f19 	cmp.w	ip, #25
 8015852:	d804      	bhi.n	801585e <_strtol_l.constprop.0+0xc6>
 8015854:	3c57      	subs	r4, #87	; 0x57
 8015856:	e7db      	b.n	8015810 <_strtol_l.constprop.0+0x78>
 8015858:	f04f 3eff 	mov.w	lr, #4294967295
 801585c:	e7e6      	b.n	801582c <_strtol_l.constprop.0+0x94>
 801585e:	f1be 3fff 	cmp.w	lr, #4294967295
 8015862:	d105      	bne.n	8015870 <_strtol_l.constprop.0+0xd8>
 8015864:	2322      	movs	r3, #34	; 0x22
 8015866:	6003      	str	r3, [r0, #0]
 8015868:	4646      	mov	r6, r8
 801586a:	b942      	cbnz	r2, 801587e <_strtol_l.constprop.0+0xe6>
 801586c:	4630      	mov	r0, r6
 801586e:	e79e      	b.n	80157ae <_strtol_l.constprop.0+0x16>
 8015870:	b107      	cbz	r7, 8015874 <_strtol_l.constprop.0+0xdc>
 8015872:	4276      	negs	r6, r6
 8015874:	2a00      	cmp	r2, #0
 8015876:	d0f9      	beq.n	801586c <_strtol_l.constprop.0+0xd4>
 8015878:	f1be 0f00 	cmp.w	lr, #0
 801587c:	d000      	beq.n	8015880 <_strtol_l.constprop.0+0xe8>
 801587e:	1e69      	subs	r1, r5, #1
 8015880:	6011      	str	r1, [r2, #0]
 8015882:	e7f3      	b.n	801586c <_strtol_l.constprop.0+0xd4>
 8015884:	2430      	movs	r4, #48	; 0x30
 8015886:	2b00      	cmp	r3, #0
 8015888:	d1b1      	bne.n	80157ee <_strtol_l.constprop.0+0x56>
 801588a:	2308      	movs	r3, #8
 801588c:	e7af      	b.n	80157ee <_strtol_l.constprop.0+0x56>
 801588e:	2c30      	cmp	r4, #48	; 0x30
 8015890:	d0a5      	beq.n	80157de <_strtol_l.constprop.0+0x46>
 8015892:	230a      	movs	r3, #10
 8015894:	e7ab      	b.n	80157ee <_strtol_l.constprop.0+0x56>
 8015896:	bf00      	nop
 8015898:	0801d939 	.word	0x0801d939

0801589c <_strtol_r>:
 801589c:	f7ff bf7c 	b.w	8015798 <_strtol_l.constprop.0>

080158a0 <strtol>:
 80158a0:	4613      	mov	r3, r2
 80158a2:	460a      	mov	r2, r1
 80158a4:	4601      	mov	r1, r0
 80158a6:	4802      	ldr	r0, [pc, #8]	; (80158b0 <strtol+0x10>)
 80158a8:	6800      	ldr	r0, [r0, #0]
 80158aa:	f7ff bf75 	b.w	8015798 <_strtol_l.constprop.0>
 80158ae:	bf00      	nop
 80158b0:	20000308 	.word	0x20000308

080158b4 <__cvt>:
 80158b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80158b8:	ec55 4b10 	vmov	r4, r5, d0
 80158bc:	2d00      	cmp	r5, #0
 80158be:	460e      	mov	r6, r1
 80158c0:	4619      	mov	r1, r3
 80158c2:	462b      	mov	r3, r5
 80158c4:	bfbb      	ittet	lt
 80158c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80158ca:	461d      	movlt	r5, r3
 80158cc:	2300      	movge	r3, #0
 80158ce:	232d      	movlt	r3, #45	; 0x2d
 80158d0:	700b      	strb	r3, [r1, #0]
 80158d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80158d8:	4691      	mov	r9, r2
 80158da:	f023 0820 	bic.w	r8, r3, #32
 80158de:	bfbc      	itt	lt
 80158e0:	4622      	movlt	r2, r4
 80158e2:	4614      	movlt	r4, r2
 80158e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80158e8:	d005      	beq.n	80158f6 <__cvt+0x42>
 80158ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80158ee:	d100      	bne.n	80158f2 <__cvt+0x3e>
 80158f0:	3601      	adds	r6, #1
 80158f2:	2102      	movs	r1, #2
 80158f4:	e000      	b.n	80158f8 <__cvt+0x44>
 80158f6:	2103      	movs	r1, #3
 80158f8:	ab03      	add	r3, sp, #12
 80158fa:	9301      	str	r3, [sp, #4]
 80158fc:	ab02      	add	r3, sp, #8
 80158fe:	9300      	str	r3, [sp, #0]
 8015900:	ec45 4b10 	vmov	d0, r4, r5
 8015904:	4653      	mov	r3, sl
 8015906:	4632      	mov	r2, r6
 8015908:	f001 f982 	bl	8016c10 <_dtoa_r>
 801590c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015910:	4607      	mov	r7, r0
 8015912:	d102      	bne.n	801591a <__cvt+0x66>
 8015914:	f019 0f01 	tst.w	r9, #1
 8015918:	d022      	beq.n	8015960 <__cvt+0xac>
 801591a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801591e:	eb07 0906 	add.w	r9, r7, r6
 8015922:	d110      	bne.n	8015946 <__cvt+0x92>
 8015924:	783b      	ldrb	r3, [r7, #0]
 8015926:	2b30      	cmp	r3, #48	; 0x30
 8015928:	d10a      	bne.n	8015940 <__cvt+0x8c>
 801592a:	2200      	movs	r2, #0
 801592c:	2300      	movs	r3, #0
 801592e:	4620      	mov	r0, r4
 8015930:	4629      	mov	r1, r5
 8015932:	f7eb f8c9 	bl	8000ac8 <__aeabi_dcmpeq>
 8015936:	b918      	cbnz	r0, 8015940 <__cvt+0x8c>
 8015938:	f1c6 0601 	rsb	r6, r6, #1
 801593c:	f8ca 6000 	str.w	r6, [sl]
 8015940:	f8da 3000 	ldr.w	r3, [sl]
 8015944:	4499      	add	r9, r3
 8015946:	2200      	movs	r2, #0
 8015948:	2300      	movs	r3, #0
 801594a:	4620      	mov	r0, r4
 801594c:	4629      	mov	r1, r5
 801594e:	f7eb f8bb 	bl	8000ac8 <__aeabi_dcmpeq>
 8015952:	b108      	cbz	r0, 8015958 <__cvt+0xa4>
 8015954:	f8cd 900c 	str.w	r9, [sp, #12]
 8015958:	2230      	movs	r2, #48	; 0x30
 801595a:	9b03      	ldr	r3, [sp, #12]
 801595c:	454b      	cmp	r3, r9
 801595e:	d307      	bcc.n	8015970 <__cvt+0xbc>
 8015960:	9b03      	ldr	r3, [sp, #12]
 8015962:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015964:	1bdb      	subs	r3, r3, r7
 8015966:	4638      	mov	r0, r7
 8015968:	6013      	str	r3, [r2, #0]
 801596a:	b004      	add	sp, #16
 801596c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015970:	1c59      	adds	r1, r3, #1
 8015972:	9103      	str	r1, [sp, #12]
 8015974:	701a      	strb	r2, [r3, #0]
 8015976:	e7f0      	b.n	801595a <__cvt+0xa6>

08015978 <__exponent>:
 8015978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801597a:	4603      	mov	r3, r0
 801597c:	2900      	cmp	r1, #0
 801597e:	bfb8      	it	lt
 8015980:	4249      	neglt	r1, r1
 8015982:	f803 2b02 	strb.w	r2, [r3], #2
 8015986:	bfb4      	ite	lt
 8015988:	222d      	movlt	r2, #45	; 0x2d
 801598a:	222b      	movge	r2, #43	; 0x2b
 801598c:	2909      	cmp	r1, #9
 801598e:	7042      	strb	r2, [r0, #1]
 8015990:	dd2a      	ble.n	80159e8 <__exponent+0x70>
 8015992:	f10d 0207 	add.w	r2, sp, #7
 8015996:	4617      	mov	r7, r2
 8015998:	260a      	movs	r6, #10
 801599a:	4694      	mov	ip, r2
 801599c:	fb91 f5f6 	sdiv	r5, r1, r6
 80159a0:	fb06 1415 	mls	r4, r6, r5, r1
 80159a4:	3430      	adds	r4, #48	; 0x30
 80159a6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80159aa:	460c      	mov	r4, r1
 80159ac:	2c63      	cmp	r4, #99	; 0x63
 80159ae:	f102 32ff 	add.w	r2, r2, #4294967295
 80159b2:	4629      	mov	r1, r5
 80159b4:	dcf1      	bgt.n	801599a <__exponent+0x22>
 80159b6:	3130      	adds	r1, #48	; 0x30
 80159b8:	f1ac 0402 	sub.w	r4, ip, #2
 80159bc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80159c0:	1c41      	adds	r1, r0, #1
 80159c2:	4622      	mov	r2, r4
 80159c4:	42ba      	cmp	r2, r7
 80159c6:	d30a      	bcc.n	80159de <__exponent+0x66>
 80159c8:	f10d 0209 	add.w	r2, sp, #9
 80159cc:	eba2 020c 	sub.w	r2, r2, ip
 80159d0:	42bc      	cmp	r4, r7
 80159d2:	bf88      	it	hi
 80159d4:	2200      	movhi	r2, #0
 80159d6:	4413      	add	r3, r2
 80159d8:	1a18      	subs	r0, r3, r0
 80159da:	b003      	add	sp, #12
 80159dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159de:	f812 5b01 	ldrb.w	r5, [r2], #1
 80159e2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80159e6:	e7ed      	b.n	80159c4 <__exponent+0x4c>
 80159e8:	2330      	movs	r3, #48	; 0x30
 80159ea:	3130      	adds	r1, #48	; 0x30
 80159ec:	7083      	strb	r3, [r0, #2]
 80159ee:	70c1      	strb	r1, [r0, #3]
 80159f0:	1d03      	adds	r3, r0, #4
 80159f2:	e7f1      	b.n	80159d8 <__exponent+0x60>

080159f4 <_printf_float>:
 80159f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159f8:	ed2d 8b02 	vpush	{d8}
 80159fc:	b08d      	sub	sp, #52	; 0x34
 80159fe:	460c      	mov	r4, r1
 8015a00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015a04:	4616      	mov	r6, r2
 8015a06:	461f      	mov	r7, r3
 8015a08:	4605      	mov	r5, r0
 8015a0a:	f000 ffaf 	bl	801696c <_localeconv_r>
 8015a0e:	f8d0 a000 	ldr.w	sl, [r0]
 8015a12:	4650      	mov	r0, sl
 8015a14:	f7ea fc2c 	bl	8000270 <strlen>
 8015a18:	2300      	movs	r3, #0
 8015a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8015a1c:	6823      	ldr	r3, [r4, #0]
 8015a1e:	9305      	str	r3, [sp, #20]
 8015a20:	f8d8 3000 	ldr.w	r3, [r8]
 8015a24:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015a28:	3307      	adds	r3, #7
 8015a2a:	f023 0307 	bic.w	r3, r3, #7
 8015a2e:	f103 0208 	add.w	r2, r3, #8
 8015a32:	f8c8 2000 	str.w	r2, [r8]
 8015a36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015a3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015a3e:	9307      	str	r3, [sp, #28]
 8015a40:	f8cd 8018 	str.w	r8, [sp, #24]
 8015a44:	ee08 0a10 	vmov	s16, r0
 8015a48:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8015a4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015a50:	4b9e      	ldr	r3, [pc, #632]	; (8015ccc <_printf_float+0x2d8>)
 8015a52:	f04f 32ff 	mov.w	r2, #4294967295
 8015a56:	f7eb f869 	bl	8000b2c <__aeabi_dcmpun>
 8015a5a:	bb88      	cbnz	r0, 8015ac0 <_printf_float+0xcc>
 8015a5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015a60:	4b9a      	ldr	r3, [pc, #616]	; (8015ccc <_printf_float+0x2d8>)
 8015a62:	f04f 32ff 	mov.w	r2, #4294967295
 8015a66:	f7eb f843 	bl	8000af0 <__aeabi_dcmple>
 8015a6a:	bb48      	cbnz	r0, 8015ac0 <_printf_float+0xcc>
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	2300      	movs	r3, #0
 8015a70:	4640      	mov	r0, r8
 8015a72:	4649      	mov	r1, r9
 8015a74:	f7eb f832 	bl	8000adc <__aeabi_dcmplt>
 8015a78:	b110      	cbz	r0, 8015a80 <_printf_float+0x8c>
 8015a7a:	232d      	movs	r3, #45	; 0x2d
 8015a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a80:	4a93      	ldr	r2, [pc, #588]	; (8015cd0 <_printf_float+0x2dc>)
 8015a82:	4b94      	ldr	r3, [pc, #592]	; (8015cd4 <_printf_float+0x2e0>)
 8015a84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015a88:	bf94      	ite	ls
 8015a8a:	4690      	movls	r8, r2
 8015a8c:	4698      	movhi	r8, r3
 8015a8e:	2303      	movs	r3, #3
 8015a90:	6123      	str	r3, [r4, #16]
 8015a92:	9b05      	ldr	r3, [sp, #20]
 8015a94:	f023 0304 	bic.w	r3, r3, #4
 8015a98:	6023      	str	r3, [r4, #0]
 8015a9a:	f04f 0900 	mov.w	r9, #0
 8015a9e:	9700      	str	r7, [sp, #0]
 8015aa0:	4633      	mov	r3, r6
 8015aa2:	aa0b      	add	r2, sp, #44	; 0x2c
 8015aa4:	4621      	mov	r1, r4
 8015aa6:	4628      	mov	r0, r5
 8015aa8:	f000 f9da 	bl	8015e60 <_printf_common>
 8015aac:	3001      	adds	r0, #1
 8015aae:	f040 8090 	bne.w	8015bd2 <_printf_float+0x1de>
 8015ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8015ab6:	b00d      	add	sp, #52	; 0x34
 8015ab8:	ecbd 8b02 	vpop	{d8}
 8015abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ac0:	4642      	mov	r2, r8
 8015ac2:	464b      	mov	r3, r9
 8015ac4:	4640      	mov	r0, r8
 8015ac6:	4649      	mov	r1, r9
 8015ac8:	f7eb f830 	bl	8000b2c <__aeabi_dcmpun>
 8015acc:	b140      	cbz	r0, 8015ae0 <_printf_float+0xec>
 8015ace:	464b      	mov	r3, r9
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	bfbc      	itt	lt
 8015ad4:	232d      	movlt	r3, #45	; 0x2d
 8015ad6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015ada:	4a7f      	ldr	r2, [pc, #508]	; (8015cd8 <_printf_float+0x2e4>)
 8015adc:	4b7f      	ldr	r3, [pc, #508]	; (8015cdc <_printf_float+0x2e8>)
 8015ade:	e7d1      	b.n	8015a84 <_printf_float+0x90>
 8015ae0:	6863      	ldr	r3, [r4, #4]
 8015ae2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8015ae6:	9206      	str	r2, [sp, #24]
 8015ae8:	1c5a      	adds	r2, r3, #1
 8015aea:	d13f      	bne.n	8015b6c <_printf_float+0x178>
 8015aec:	2306      	movs	r3, #6
 8015aee:	6063      	str	r3, [r4, #4]
 8015af0:	9b05      	ldr	r3, [sp, #20]
 8015af2:	6861      	ldr	r1, [r4, #4]
 8015af4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015af8:	2300      	movs	r3, #0
 8015afa:	9303      	str	r3, [sp, #12]
 8015afc:	ab0a      	add	r3, sp, #40	; 0x28
 8015afe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8015b02:	ab09      	add	r3, sp, #36	; 0x24
 8015b04:	ec49 8b10 	vmov	d0, r8, r9
 8015b08:	9300      	str	r3, [sp, #0]
 8015b0a:	6022      	str	r2, [r4, #0]
 8015b0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015b10:	4628      	mov	r0, r5
 8015b12:	f7ff fecf 	bl	80158b4 <__cvt>
 8015b16:	9b06      	ldr	r3, [sp, #24]
 8015b18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015b1a:	2b47      	cmp	r3, #71	; 0x47
 8015b1c:	4680      	mov	r8, r0
 8015b1e:	d108      	bne.n	8015b32 <_printf_float+0x13e>
 8015b20:	1cc8      	adds	r0, r1, #3
 8015b22:	db02      	blt.n	8015b2a <_printf_float+0x136>
 8015b24:	6863      	ldr	r3, [r4, #4]
 8015b26:	4299      	cmp	r1, r3
 8015b28:	dd41      	ble.n	8015bae <_printf_float+0x1ba>
 8015b2a:	f1ab 0302 	sub.w	r3, fp, #2
 8015b2e:	fa5f fb83 	uxtb.w	fp, r3
 8015b32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015b36:	d820      	bhi.n	8015b7a <_printf_float+0x186>
 8015b38:	3901      	subs	r1, #1
 8015b3a:	465a      	mov	r2, fp
 8015b3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015b40:	9109      	str	r1, [sp, #36]	; 0x24
 8015b42:	f7ff ff19 	bl	8015978 <__exponent>
 8015b46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b48:	1813      	adds	r3, r2, r0
 8015b4a:	2a01      	cmp	r2, #1
 8015b4c:	4681      	mov	r9, r0
 8015b4e:	6123      	str	r3, [r4, #16]
 8015b50:	dc02      	bgt.n	8015b58 <_printf_float+0x164>
 8015b52:	6822      	ldr	r2, [r4, #0]
 8015b54:	07d2      	lsls	r2, r2, #31
 8015b56:	d501      	bpl.n	8015b5c <_printf_float+0x168>
 8015b58:	3301      	adds	r3, #1
 8015b5a:	6123      	str	r3, [r4, #16]
 8015b5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d09c      	beq.n	8015a9e <_printf_float+0xaa>
 8015b64:	232d      	movs	r3, #45	; 0x2d
 8015b66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b6a:	e798      	b.n	8015a9e <_printf_float+0xaa>
 8015b6c:	9a06      	ldr	r2, [sp, #24]
 8015b6e:	2a47      	cmp	r2, #71	; 0x47
 8015b70:	d1be      	bne.n	8015af0 <_printf_float+0xfc>
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d1bc      	bne.n	8015af0 <_printf_float+0xfc>
 8015b76:	2301      	movs	r3, #1
 8015b78:	e7b9      	b.n	8015aee <_printf_float+0xfa>
 8015b7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015b7e:	d118      	bne.n	8015bb2 <_printf_float+0x1be>
 8015b80:	2900      	cmp	r1, #0
 8015b82:	6863      	ldr	r3, [r4, #4]
 8015b84:	dd0b      	ble.n	8015b9e <_printf_float+0x1aa>
 8015b86:	6121      	str	r1, [r4, #16]
 8015b88:	b913      	cbnz	r3, 8015b90 <_printf_float+0x19c>
 8015b8a:	6822      	ldr	r2, [r4, #0]
 8015b8c:	07d0      	lsls	r0, r2, #31
 8015b8e:	d502      	bpl.n	8015b96 <_printf_float+0x1a2>
 8015b90:	3301      	adds	r3, #1
 8015b92:	440b      	add	r3, r1
 8015b94:	6123      	str	r3, [r4, #16]
 8015b96:	65a1      	str	r1, [r4, #88]	; 0x58
 8015b98:	f04f 0900 	mov.w	r9, #0
 8015b9c:	e7de      	b.n	8015b5c <_printf_float+0x168>
 8015b9e:	b913      	cbnz	r3, 8015ba6 <_printf_float+0x1b2>
 8015ba0:	6822      	ldr	r2, [r4, #0]
 8015ba2:	07d2      	lsls	r2, r2, #31
 8015ba4:	d501      	bpl.n	8015baa <_printf_float+0x1b6>
 8015ba6:	3302      	adds	r3, #2
 8015ba8:	e7f4      	b.n	8015b94 <_printf_float+0x1a0>
 8015baa:	2301      	movs	r3, #1
 8015bac:	e7f2      	b.n	8015b94 <_printf_float+0x1a0>
 8015bae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bb4:	4299      	cmp	r1, r3
 8015bb6:	db05      	blt.n	8015bc4 <_printf_float+0x1d0>
 8015bb8:	6823      	ldr	r3, [r4, #0]
 8015bba:	6121      	str	r1, [r4, #16]
 8015bbc:	07d8      	lsls	r0, r3, #31
 8015bbe:	d5ea      	bpl.n	8015b96 <_printf_float+0x1a2>
 8015bc0:	1c4b      	adds	r3, r1, #1
 8015bc2:	e7e7      	b.n	8015b94 <_printf_float+0x1a0>
 8015bc4:	2900      	cmp	r1, #0
 8015bc6:	bfd4      	ite	le
 8015bc8:	f1c1 0202 	rsble	r2, r1, #2
 8015bcc:	2201      	movgt	r2, #1
 8015bce:	4413      	add	r3, r2
 8015bd0:	e7e0      	b.n	8015b94 <_printf_float+0x1a0>
 8015bd2:	6823      	ldr	r3, [r4, #0]
 8015bd4:	055a      	lsls	r2, r3, #21
 8015bd6:	d407      	bmi.n	8015be8 <_printf_float+0x1f4>
 8015bd8:	6923      	ldr	r3, [r4, #16]
 8015bda:	4642      	mov	r2, r8
 8015bdc:	4631      	mov	r1, r6
 8015bde:	4628      	mov	r0, r5
 8015be0:	47b8      	blx	r7
 8015be2:	3001      	adds	r0, #1
 8015be4:	d12c      	bne.n	8015c40 <_printf_float+0x24c>
 8015be6:	e764      	b.n	8015ab2 <_printf_float+0xbe>
 8015be8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015bec:	f240 80e0 	bls.w	8015db0 <_printf_float+0x3bc>
 8015bf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	f7ea ff66 	bl	8000ac8 <__aeabi_dcmpeq>
 8015bfc:	2800      	cmp	r0, #0
 8015bfe:	d034      	beq.n	8015c6a <_printf_float+0x276>
 8015c00:	4a37      	ldr	r2, [pc, #220]	; (8015ce0 <_printf_float+0x2ec>)
 8015c02:	2301      	movs	r3, #1
 8015c04:	4631      	mov	r1, r6
 8015c06:	4628      	mov	r0, r5
 8015c08:	47b8      	blx	r7
 8015c0a:	3001      	adds	r0, #1
 8015c0c:	f43f af51 	beq.w	8015ab2 <_printf_float+0xbe>
 8015c10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015c14:	429a      	cmp	r2, r3
 8015c16:	db02      	blt.n	8015c1e <_printf_float+0x22a>
 8015c18:	6823      	ldr	r3, [r4, #0]
 8015c1a:	07d8      	lsls	r0, r3, #31
 8015c1c:	d510      	bpl.n	8015c40 <_printf_float+0x24c>
 8015c1e:	ee18 3a10 	vmov	r3, s16
 8015c22:	4652      	mov	r2, sl
 8015c24:	4631      	mov	r1, r6
 8015c26:	4628      	mov	r0, r5
 8015c28:	47b8      	blx	r7
 8015c2a:	3001      	adds	r0, #1
 8015c2c:	f43f af41 	beq.w	8015ab2 <_printf_float+0xbe>
 8015c30:	f04f 0800 	mov.w	r8, #0
 8015c34:	f104 091a 	add.w	r9, r4, #26
 8015c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c3a:	3b01      	subs	r3, #1
 8015c3c:	4543      	cmp	r3, r8
 8015c3e:	dc09      	bgt.n	8015c54 <_printf_float+0x260>
 8015c40:	6823      	ldr	r3, [r4, #0]
 8015c42:	079b      	lsls	r3, r3, #30
 8015c44:	f100 8107 	bmi.w	8015e56 <_printf_float+0x462>
 8015c48:	68e0      	ldr	r0, [r4, #12]
 8015c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c4c:	4298      	cmp	r0, r3
 8015c4e:	bfb8      	it	lt
 8015c50:	4618      	movlt	r0, r3
 8015c52:	e730      	b.n	8015ab6 <_printf_float+0xc2>
 8015c54:	2301      	movs	r3, #1
 8015c56:	464a      	mov	r2, r9
 8015c58:	4631      	mov	r1, r6
 8015c5a:	4628      	mov	r0, r5
 8015c5c:	47b8      	blx	r7
 8015c5e:	3001      	adds	r0, #1
 8015c60:	f43f af27 	beq.w	8015ab2 <_printf_float+0xbe>
 8015c64:	f108 0801 	add.w	r8, r8, #1
 8015c68:	e7e6      	b.n	8015c38 <_printf_float+0x244>
 8015c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	dc39      	bgt.n	8015ce4 <_printf_float+0x2f0>
 8015c70:	4a1b      	ldr	r2, [pc, #108]	; (8015ce0 <_printf_float+0x2ec>)
 8015c72:	2301      	movs	r3, #1
 8015c74:	4631      	mov	r1, r6
 8015c76:	4628      	mov	r0, r5
 8015c78:	47b8      	blx	r7
 8015c7a:	3001      	adds	r0, #1
 8015c7c:	f43f af19 	beq.w	8015ab2 <_printf_float+0xbe>
 8015c80:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015c84:	4313      	orrs	r3, r2
 8015c86:	d102      	bne.n	8015c8e <_printf_float+0x29a>
 8015c88:	6823      	ldr	r3, [r4, #0]
 8015c8a:	07d9      	lsls	r1, r3, #31
 8015c8c:	d5d8      	bpl.n	8015c40 <_printf_float+0x24c>
 8015c8e:	ee18 3a10 	vmov	r3, s16
 8015c92:	4652      	mov	r2, sl
 8015c94:	4631      	mov	r1, r6
 8015c96:	4628      	mov	r0, r5
 8015c98:	47b8      	blx	r7
 8015c9a:	3001      	adds	r0, #1
 8015c9c:	f43f af09 	beq.w	8015ab2 <_printf_float+0xbe>
 8015ca0:	f04f 0900 	mov.w	r9, #0
 8015ca4:	f104 0a1a 	add.w	sl, r4, #26
 8015ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015caa:	425b      	negs	r3, r3
 8015cac:	454b      	cmp	r3, r9
 8015cae:	dc01      	bgt.n	8015cb4 <_printf_float+0x2c0>
 8015cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cb2:	e792      	b.n	8015bda <_printf_float+0x1e6>
 8015cb4:	2301      	movs	r3, #1
 8015cb6:	4652      	mov	r2, sl
 8015cb8:	4631      	mov	r1, r6
 8015cba:	4628      	mov	r0, r5
 8015cbc:	47b8      	blx	r7
 8015cbe:	3001      	adds	r0, #1
 8015cc0:	f43f aef7 	beq.w	8015ab2 <_printf_float+0xbe>
 8015cc4:	f109 0901 	add.w	r9, r9, #1
 8015cc8:	e7ee      	b.n	8015ca8 <_printf_float+0x2b4>
 8015cca:	bf00      	nop
 8015ccc:	7fefffff 	.word	0x7fefffff
 8015cd0:	0801da39 	.word	0x0801da39
 8015cd4:	0801da3d 	.word	0x0801da3d
 8015cd8:	0801da41 	.word	0x0801da41
 8015cdc:	0801da45 	.word	0x0801da45
 8015ce0:	0801da49 	.word	0x0801da49
 8015ce4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ce6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015ce8:	429a      	cmp	r2, r3
 8015cea:	bfa8      	it	ge
 8015cec:	461a      	movge	r2, r3
 8015cee:	2a00      	cmp	r2, #0
 8015cf0:	4691      	mov	r9, r2
 8015cf2:	dc37      	bgt.n	8015d64 <_printf_float+0x370>
 8015cf4:	f04f 0b00 	mov.w	fp, #0
 8015cf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015cfc:	f104 021a 	add.w	r2, r4, #26
 8015d00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015d02:	9305      	str	r3, [sp, #20]
 8015d04:	eba3 0309 	sub.w	r3, r3, r9
 8015d08:	455b      	cmp	r3, fp
 8015d0a:	dc33      	bgt.n	8015d74 <_printf_float+0x380>
 8015d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d10:	429a      	cmp	r2, r3
 8015d12:	db3b      	blt.n	8015d8c <_printf_float+0x398>
 8015d14:	6823      	ldr	r3, [r4, #0]
 8015d16:	07da      	lsls	r2, r3, #31
 8015d18:	d438      	bmi.n	8015d8c <_printf_float+0x398>
 8015d1a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015d1e:	eba2 0903 	sub.w	r9, r2, r3
 8015d22:	9b05      	ldr	r3, [sp, #20]
 8015d24:	1ad2      	subs	r2, r2, r3
 8015d26:	4591      	cmp	r9, r2
 8015d28:	bfa8      	it	ge
 8015d2a:	4691      	movge	r9, r2
 8015d2c:	f1b9 0f00 	cmp.w	r9, #0
 8015d30:	dc35      	bgt.n	8015d9e <_printf_float+0x3aa>
 8015d32:	f04f 0800 	mov.w	r8, #0
 8015d36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015d3a:	f104 0a1a 	add.w	sl, r4, #26
 8015d3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d42:	1a9b      	subs	r3, r3, r2
 8015d44:	eba3 0309 	sub.w	r3, r3, r9
 8015d48:	4543      	cmp	r3, r8
 8015d4a:	f77f af79 	ble.w	8015c40 <_printf_float+0x24c>
 8015d4e:	2301      	movs	r3, #1
 8015d50:	4652      	mov	r2, sl
 8015d52:	4631      	mov	r1, r6
 8015d54:	4628      	mov	r0, r5
 8015d56:	47b8      	blx	r7
 8015d58:	3001      	adds	r0, #1
 8015d5a:	f43f aeaa 	beq.w	8015ab2 <_printf_float+0xbe>
 8015d5e:	f108 0801 	add.w	r8, r8, #1
 8015d62:	e7ec      	b.n	8015d3e <_printf_float+0x34a>
 8015d64:	4613      	mov	r3, r2
 8015d66:	4631      	mov	r1, r6
 8015d68:	4642      	mov	r2, r8
 8015d6a:	4628      	mov	r0, r5
 8015d6c:	47b8      	blx	r7
 8015d6e:	3001      	adds	r0, #1
 8015d70:	d1c0      	bne.n	8015cf4 <_printf_float+0x300>
 8015d72:	e69e      	b.n	8015ab2 <_printf_float+0xbe>
 8015d74:	2301      	movs	r3, #1
 8015d76:	4631      	mov	r1, r6
 8015d78:	4628      	mov	r0, r5
 8015d7a:	9205      	str	r2, [sp, #20]
 8015d7c:	47b8      	blx	r7
 8015d7e:	3001      	adds	r0, #1
 8015d80:	f43f ae97 	beq.w	8015ab2 <_printf_float+0xbe>
 8015d84:	9a05      	ldr	r2, [sp, #20]
 8015d86:	f10b 0b01 	add.w	fp, fp, #1
 8015d8a:	e7b9      	b.n	8015d00 <_printf_float+0x30c>
 8015d8c:	ee18 3a10 	vmov	r3, s16
 8015d90:	4652      	mov	r2, sl
 8015d92:	4631      	mov	r1, r6
 8015d94:	4628      	mov	r0, r5
 8015d96:	47b8      	blx	r7
 8015d98:	3001      	adds	r0, #1
 8015d9a:	d1be      	bne.n	8015d1a <_printf_float+0x326>
 8015d9c:	e689      	b.n	8015ab2 <_printf_float+0xbe>
 8015d9e:	9a05      	ldr	r2, [sp, #20]
 8015da0:	464b      	mov	r3, r9
 8015da2:	4442      	add	r2, r8
 8015da4:	4631      	mov	r1, r6
 8015da6:	4628      	mov	r0, r5
 8015da8:	47b8      	blx	r7
 8015daa:	3001      	adds	r0, #1
 8015dac:	d1c1      	bne.n	8015d32 <_printf_float+0x33e>
 8015dae:	e680      	b.n	8015ab2 <_printf_float+0xbe>
 8015db0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015db2:	2a01      	cmp	r2, #1
 8015db4:	dc01      	bgt.n	8015dba <_printf_float+0x3c6>
 8015db6:	07db      	lsls	r3, r3, #31
 8015db8:	d53a      	bpl.n	8015e30 <_printf_float+0x43c>
 8015dba:	2301      	movs	r3, #1
 8015dbc:	4642      	mov	r2, r8
 8015dbe:	4631      	mov	r1, r6
 8015dc0:	4628      	mov	r0, r5
 8015dc2:	47b8      	blx	r7
 8015dc4:	3001      	adds	r0, #1
 8015dc6:	f43f ae74 	beq.w	8015ab2 <_printf_float+0xbe>
 8015dca:	ee18 3a10 	vmov	r3, s16
 8015dce:	4652      	mov	r2, sl
 8015dd0:	4631      	mov	r1, r6
 8015dd2:	4628      	mov	r0, r5
 8015dd4:	47b8      	blx	r7
 8015dd6:	3001      	adds	r0, #1
 8015dd8:	f43f ae6b 	beq.w	8015ab2 <_printf_float+0xbe>
 8015ddc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015de0:	2200      	movs	r2, #0
 8015de2:	2300      	movs	r3, #0
 8015de4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8015de8:	f7ea fe6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8015dec:	b9d8      	cbnz	r0, 8015e26 <_printf_float+0x432>
 8015dee:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015df2:	f108 0201 	add.w	r2, r8, #1
 8015df6:	4631      	mov	r1, r6
 8015df8:	4628      	mov	r0, r5
 8015dfa:	47b8      	blx	r7
 8015dfc:	3001      	adds	r0, #1
 8015dfe:	d10e      	bne.n	8015e1e <_printf_float+0x42a>
 8015e00:	e657      	b.n	8015ab2 <_printf_float+0xbe>
 8015e02:	2301      	movs	r3, #1
 8015e04:	4652      	mov	r2, sl
 8015e06:	4631      	mov	r1, r6
 8015e08:	4628      	mov	r0, r5
 8015e0a:	47b8      	blx	r7
 8015e0c:	3001      	adds	r0, #1
 8015e0e:	f43f ae50 	beq.w	8015ab2 <_printf_float+0xbe>
 8015e12:	f108 0801 	add.w	r8, r8, #1
 8015e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e18:	3b01      	subs	r3, #1
 8015e1a:	4543      	cmp	r3, r8
 8015e1c:	dcf1      	bgt.n	8015e02 <_printf_float+0x40e>
 8015e1e:	464b      	mov	r3, r9
 8015e20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015e24:	e6da      	b.n	8015bdc <_printf_float+0x1e8>
 8015e26:	f04f 0800 	mov.w	r8, #0
 8015e2a:	f104 0a1a 	add.w	sl, r4, #26
 8015e2e:	e7f2      	b.n	8015e16 <_printf_float+0x422>
 8015e30:	2301      	movs	r3, #1
 8015e32:	4642      	mov	r2, r8
 8015e34:	e7df      	b.n	8015df6 <_printf_float+0x402>
 8015e36:	2301      	movs	r3, #1
 8015e38:	464a      	mov	r2, r9
 8015e3a:	4631      	mov	r1, r6
 8015e3c:	4628      	mov	r0, r5
 8015e3e:	47b8      	blx	r7
 8015e40:	3001      	adds	r0, #1
 8015e42:	f43f ae36 	beq.w	8015ab2 <_printf_float+0xbe>
 8015e46:	f108 0801 	add.w	r8, r8, #1
 8015e4a:	68e3      	ldr	r3, [r4, #12]
 8015e4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e4e:	1a5b      	subs	r3, r3, r1
 8015e50:	4543      	cmp	r3, r8
 8015e52:	dcf0      	bgt.n	8015e36 <_printf_float+0x442>
 8015e54:	e6f8      	b.n	8015c48 <_printf_float+0x254>
 8015e56:	f04f 0800 	mov.w	r8, #0
 8015e5a:	f104 0919 	add.w	r9, r4, #25
 8015e5e:	e7f4      	b.n	8015e4a <_printf_float+0x456>

08015e60 <_printf_common>:
 8015e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e64:	4616      	mov	r6, r2
 8015e66:	4699      	mov	r9, r3
 8015e68:	688a      	ldr	r2, [r1, #8]
 8015e6a:	690b      	ldr	r3, [r1, #16]
 8015e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015e70:	4293      	cmp	r3, r2
 8015e72:	bfb8      	it	lt
 8015e74:	4613      	movlt	r3, r2
 8015e76:	6033      	str	r3, [r6, #0]
 8015e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015e7c:	4607      	mov	r7, r0
 8015e7e:	460c      	mov	r4, r1
 8015e80:	b10a      	cbz	r2, 8015e86 <_printf_common+0x26>
 8015e82:	3301      	adds	r3, #1
 8015e84:	6033      	str	r3, [r6, #0]
 8015e86:	6823      	ldr	r3, [r4, #0]
 8015e88:	0699      	lsls	r1, r3, #26
 8015e8a:	bf42      	ittt	mi
 8015e8c:	6833      	ldrmi	r3, [r6, #0]
 8015e8e:	3302      	addmi	r3, #2
 8015e90:	6033      	strmi	r3, [r6, #0]
 8015e92:	6825      	ldr	r5, [r4, #0]
 8015e94:	f015 0506 	ands.w	r5, r5, #6
 8015e98:	d106      	bne.n	8015ea8 <_printf_common+0x48>
 8015e9a:	f104 0a19 	add.w	sl, r4, #25
 8015e9e:	68e3      	ldr	r3, [r4, #12]
 8015ea0:	6832      	ldr	r2, [r6, #0]
 8015ea2:	1a9b      	subs	r3, r3, r2
 8015ea4:	42ab      	cmp	r3, r5
 8015ea6:	dc26      	bgt.n	8015ef6 <_printf_common+0x96>
 8015ea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015eac:	1e13      	subs	r3, r2, #0
 8015eae:	6822      	ldr	r2, [r4, #0]
 8015eb0:	bf18      	it	ne
 8015eb2:	2301      	movne	r3, #1
 8015eb4:	0692      	lsls	r2, r2, #26
 8015eb6:	d42b      	bmi.n	8015f10 <_printf_common+0xb0>
 8015eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015ebc:	4649      	mov	r1, r9
 8015ebe:	4638      	mov	r0, r7
 8015ec0:	47c0      	blx	r8
 8015ec2:	3001      	adds	r0, #1
 8015ec4:	d01e      	beq.n	8015f04 <_printf_common+0xa4>
 8015ec6:	6823      	ldr	r3, [r4, #0]
 8015ec8:	6922      	ldr	r2, [r4, #16]
 8015eca:	f003 0306 	and.w	r3, r3, #6
 8015ece:	2b04      	cmp	r3, #4
 8015ed0:	bf02      	ittt	eq
 8015ed2:	68e5      	ldreq	r5, [r4, #12]
 8015ed4:	6833      	ldreq	r3, [r6, #0]
 8015ed6:	1aed      	subeq	r5, r5, r3
 8015ed8:	68a3      	ldr	r3, [r4, #8]
 8015eda:	bf0c      	ite	eq
 8015edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015ee0:	2500      	movne	r5, #0
 8015ee2:	4293      	cmp	r3, r2
 8015ee4:	bfc4      	itt	gt
 8015ee6:	1a9b      	subgt	r3, r3, r2
 8015ee8:	18ed      	addgt	r5, r5, r3
 8015eea:	2600      	movs	r6, #0
 8015eec:	341a      	adds	r4, #26
 8015eee:	42b5      	cmp	r5, r6
 8015ef0:	d11a      	bne.n	8015f28 <_printf_common+0xc8>
 8015ef2:	2000      	movs	r0, #0
 8015ef4:	e008      	b.n	8015f08 <_printf_common+0xa8>
 8015ef6:	2301      	movs	r3, #1
 8015ef8:	4652      	mov	r2, sl
 8015efa:	4649      	mov	r1, r9
 8015efc:	4638      	mov	r0, r7
 8015efe:	47c0      	blx	r8
 8015f00:	3001      	adds	r0, #1
 8015f02:	d103      	bne.n	8015f0c <_printf_common+0xac>
 8015f04:	f04f 30ff 	mov.w	r0, #4294967295
 8015f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f0c:	3501      	adds	r5, #1
 8015f0e:	e7c6      	b.n	8015e9e <_printf_common+0x3e>
 8015f10:	18e1      	adds	r1, r4, r3
 8015f12:	1c5a      	adds	r2, r3, #1
 8015f14:	2030      	movs	r0, #48	; 0x30
 8015f16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015f1a:	4422      	add	r2, r4
 8015f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015f24:	3302      	adds	r3, #2
 8015f26:	e7c7      	b.n	8015eb8 <_printf_common+0x58>
 8015f28:	2301      	movs	r3, #1
 8015f2a:	4622      	mov	r2, r4
 8015f2c:	4649      	mov	r1, r9
 8015f2e:	4638      	mov	r0, r7
 8015f30:	47c0      	blx	r8
 8015f32:	3001      	adds	r0, #1
 8015f34:	d0e6      	beq.n	8015f04 <_printf_common+0xa4>
 8015f36:	3601      	adds	r6, #1
 8015f38:	e7d9      	b.n	8015eee <_printf_common+0x8e>
	...

08015f3c <_printf_i>:
 8015f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015f40:	7e0f      	ldrb	r7, [r1, #24]
 8015f42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015f44:	2f78      	cmp	r7, #120	; 0x78
 8015f46:	4691      	mov	r9, r2
 8015f48:	4680      	mov	r8, r0
 8015f4a:	460c      	mov	r4, r1
 8015f4c:	469a      	mov	sl, r3
 8015f4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015f52:	d807      	bhi.n	8015f64 <_printf_i+0x28>
 8015f54:	2f62      	cmp	r7, #98	; 0x62
 8015f56:	d80a      	bhi.n	8015f6e <_printf_i+0x32>
 8015f58:	2f00      	cmp	r7, #0
 8015f5a:	f000 80d4 	beq.w	8016106 <_printf_i+0x1ca>
 8015f5e:	2f58      	cmp	r7, #88	; 0x58
 8015f60:	f000 80c0 	beq.w	80160e4 <_printf_i+0x1a8>
 8015f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015f6c:	e03a      	b.n	8015fe4 <_printf_i+0xa8>
 8015f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015f72:	2b15      	cmp	r3, #21
 8015f74:	d8f6      	bhi.n	8015f64 <_printf_i+0x28>
 8015f76:	a101      	add	r1, pc, #4	; (adr r1, 8015f7c <_printf_i+0x40>)
 8015f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015f7c:	08015fd5 	.word	0x08015fd5
 8015f80:	08015fe9 	.word	0x08015fe9
 8015f84:	08015f65 	.word	0x08015f65
 8015f88:	08015f65 	.word	0x08015f65
 8015f8c:	08015f65 	.word	0x08015f65
 8015f90:	08015f65 	.word	0x08015f65
 8015f94:	08015fe9 	.word	0x08015fe9
 8015f98:	08015f65 	.word	0x08015f65
 8015f9c:	08015f65 	.word	0x08015f65
 8015fa0:	08015f65 	.word	0x08015f65
 8015fa4:	08015f65 	.word	0x08015f65
 8015fa8:	080160ed 	.word	0x080160ed
 8015fac:	08016015 	.word	0x08016015
 8015fb0:	080160a7 	.word	0x080160a7
 8015fb4:	08015f65 	.word	0x08015f65
 8015fb8:	08015f65 	.word	0x08015f65
 8015fbc:	0801610f 	.word	0x0801610f
 8015fc0:	08015f65 	.word	0x08015f65
 8015fc4:	08016015 	.word	0x08016015
 8015fc8:	08015f65 	.word	0x08015f65
 8015fcc:	08015f65 	.word	0x08015f65
 8015fd0:	080160af 	.word	0x080160af
 8015fd4:	682b      	ldr	r3, [r5, #0]
 8015fd6:	1d1a      	adds	r2, r3, #4
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	602a      	str	r2, [r5, #0]
 8015fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015fe4:	2301      	movs	r3, #1
 8015fe6:	e09f      	b.n	8016128 <_printf_i+0x1ec>
 8015fe8:	6820      	ldr	r0, [r4, #0]
 8015fea:	682b      	ldr	r3, [r5, #0]
 8015fec:	0607      	lsls	r7, r0, #24
 8015fee:	f103 0104 	add.w	r1, r3, #4
 8015ff2:	6029      	str	r1, [r5, #0]
 8015ff4:	d501      	bpl.n	8015ffa <_printf_i+0xbe>
 8015ff6:	681e      	ldr	r6, [r3, #0]
 8015ff8:	e003      	b.n	8016002 <_printf_i+0xc6>
 8015ffa:	0646      	lsls	r6, r0, #25
 8015ffc:	d5fb      	bpl.n	8015ff6 <_printf_i+0xba>
 8015ffe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016002:	2e00      	cmp	r6, #0
 8016004:	da03      	bge.n	801600e <_printf_i+0xd2>
 8016006:	232d      	movs	r3, #45	; 0x2d
 8016008:	4276      	negs	r6, r6
 801600a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801600e:	485a      	ldr	r0, [pc, #360]	; (8016178 <_printf_i+0x23c>)
 8016010:	230a      	movs	r3, #10
 8016012:	e012      	b.n	801603a <_printf_i+0xfe>
 8016014:	682b      	ldr	r3, [r5, #0]
 8016016:	6820      	ldr	r0, [r4, #0]
 8016018:	1d19      	adds	r1, r3, #4
 801601a:	6029      	str	r1, [r5, #0]
 801601c:	0605      	lsls	r5, r0, #24
 801601e:	d501      	bpl.n	8016024 <_printf_i+0xe8>
 8016020:	681e      	ldr	r6, [r3, #0]
 8016022:	e002      	b.n	801602a <_printf_i+0xee>
 8016024:	0641      	lsls	r1, r0, #25
 8016026:	d5fb      	bpl.n	8016020 <_printf_i+0xe4>
 8016028:	881e      	ldrh	r6, [r3, #0]
 801602a:	4853      	ldr	r0, [pc, #332]	; (8016178 <_printf_i+0x23c>)
 801602c:	2f6f      	cmp	r7, #111	; 0x6f
 801602e:	bf0c      	ite	eq
 8016030:	2308      	moveq	r3, #8
 8016032:	230a      	movne	r3, #10
 8016034:	2100      	movs	r1, #0
 8016036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801603a:	6865      	ldr	r5, [r4, #4]
 801603c:	60a5      	str	r5, [r4, #8]
 801603e:	2d00      	cmp	r5, #0
 8016040:	bfa2      	ittt	ge
 8016042:	6821      	ldrge	r1, [r4, #0]
 8016044:	f021 0104 	bicge.w	r1, r1, #4
 8016048:	6021      	strge	r1, [r4, #0]
 801604a:	b90e      	cbnz	r6, 8016050 <_printf_i+0x114>
 801604c:	2d00      	cmp	r5, #0
 801604e:	d04b      	beq.n	80160e8 <_printf_i+0x1ac>
 8016050:	4615      	mov	r5, r2
 8016052:	fbb6 f1f3 	udiv	r1, r6, r3
 8016056:	fb03 6711 	mls	r7, r3, r1, r6
 801605a:	5dc7      	ldrb	r7, [r0, r7]
 801605c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016060:	4637      	mov	r7, r6
 8016062:	42bb      	cmp	r3, r7
 8016064:	460e      	mov	r6, r1
 8016066:	d9f4      	bls.n	8016052 <_printf_i+0x116>
 8016068:	2b08      	cmp	r3, #8
 801606a:	d10b      	bne.n	8016084 <_printf_i+0x148>
 801606c:	6823      	ldr	r3, [r4, #0]
 801606e:	07de      	lsls	r6, r3, #31
 8016070:	d508      	bpl.n	8016084 <_printf_i+0x148>
 8016072:	6923      	ldr	r3, [r4, #16]
 8016074:	6861      	ldr	r1, [r4, #4]
 8016076:	4299      	cmp	r1, r3
 8016078:	bfde      	ittt	le
 801607a:	2330      	movle	r3, #48	; 0x30
 801607c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016080:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016084:	1b52      	subs	r2, r2, r5
 8016086:	6122      	str	r2, [r4, #16]
 8016088:	f8cd a000 	str.w	sl, [sp]
 801608c:	464b      	mov	r3, r9
 801608e:	aa03      	add	r2, sp, #12
 8016090:	4621      	mov	r1, r4
 8016092:	4640      	mov	r0, r8
 8016094:	f7ff fee4 	bl	8015e60 <_printf_common>
 8016098:	3001      	adds	r0, #1
 801609a:	d14a      	bne.n	8016132 <_printf_i+0x1f6>
 801609c:	f04f 30ff 	mov.w	r0, #4294967295
 80160a0:	b004      	add	sp, #16
 80160a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160a6:	6823      	ldr	r3, [r4, #0]
 80160a8:	f043 0320 	orr.w	r3, r3, #32
 80160ac:	6023      	str	r3, [r4, #0]
 80160ae:	4833      	ldr	r0, [pc, #204]	; (801617c <_printf_i+0x240>)
 80160b0:	2778      	movs	r7, #120	; 0x78
 80160b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80160b6:	6823      	ldr	r3, [r4, #0]
 80160b8:	6829      	ldr	r1, [r5, #0]
 80160ba:	061f      	lsls	r7, r3, #24
 80160bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80160c0:	d402      	bmi.n	80160c8 <_printf_i+0x18c>
 80160c2:	065f      	lsls	r7, r3, #25
 80160c4:	bf48      	it	mi
 80160c6:	b2b6      	uxthmi	r6, r6
 80160c8:	07df      	lsls	r7, r3, #31
 80160ca:	bf48      	it	mi
 80160cc:	f043 0320 	orrmi.w	r3, r3, #32
 80160d0:	6029      	str	r1, [r5, #0]
 80160d2:	bf48      	it	mi
 80160d4:	6023      	strmi	r3, [r4, #0]
 80160d6:	b91e      	cbnz	r6, 80160e0 <_printf_i+0x1a4>
 80160d8:	6823      	ldr	r3, [r4, #0]
 80160da:	f023 0320 	bic.w	r3, r3, #32
 80160de:	6023      	str	r3, [r4, #0]
 80160e0:	2310      	movs	r3, #16
 80160e2:	e7a7      	b.n	8016034 <_printf_i+0xf8>
 80160e4:	4824      	ldr	r0, [pc, #144]	; (8016178 <_printf_i+0x23c>)
 80160e6:	e7e4      	b.n	80160b2 <_printf_i+0x176>
 80160e8:	4615      	mov	r5, r2
 80160ea:	e7bd      	b.n	8016068 <_printf_i+0x12c>
 80160ec:	682b      	ldr	r3, [r5, #0]
 80160ee:	6826      	ldr	r6, [r4, #0]
 80160f0:	6961      	ldr	r1, [r4, #20]
 80160f2:	1d18      	adds	r0, r3, #4
 80160f4:	6028      	str	r0, [r5, #0]
 80160f6:	0635      	lsls	r5, r6, #24
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	d501      	bpl.n	8016100 <_printf_i+0x1c4>
 80160fc:	6019      	str	r1, [r3, #0]
 80160fe:	e002      	b.n	8016106 <_printf_i+0x1ca>
 8016100:	0670      	lsls	r0, r6, #25
 8016102:	d5fb      	bpl.n	80160fc <_printf_i+0x1c0>
 8016104:	8019      	strh	r1, [r3, #0]
 8016106:	2300      	movs	r3, #0
 8016108:	6123      	str	r3, [r4, #16]
 801610a:	4615      	mov	r5, r2
 801610c:	e7bc      	b.n	8016088 <_printf_i+0x14c>
 801610e:	682b      	ldr	r3, [r5, #0]
 8016110:	1d1a      	adds	r2, r3, #4
 8016112:	602a      	str	r2, [r5, #0]
 8016114:	681d      	ldr	r5, [r3, #0]
 8016116:	6862      	ldr	r2, [r4, #4]
 8016118:	2100      	movs	r1, #0
 801611a:	4628      	mov	r0, r5
 801611c:	f7ea f858 	bl	80001d0 <memchr>
 8016120:	b108      	cbz	r0, 8016126 <_printf_i+0x1ea>
 8016122:	1b40      	subs	r0, r0, r5
 8016124:	6060      	str	r0, [r4, #4]
 8016126:	6863      	ldr	r3, [r4, #4]
 8016128:	6123      	str	r3, [r4, #16]
 801612a:	2300      	movs	r3, #0
 801612c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016130:	e7aa      	b.n	8016088 <_printf_i+0x14c>
 8016132:	6923      	ldr	r3, [r4, #16]
 8016134:	462a      	mov	r2, r5
 8016136:	4649      	mov	r1, r9
 8016138:	4640      	mov	r0, r8
 801613a:	47d0      	blx	sl
 801613c:	3001      	adds	r0, #1
 801613e:	d0ad      	beq.n	801609c <_printf_i+0x160>
 8016140:	6823      	ldr	r3, [r4, #0]
 8016142:	079b      	lsls	r3, r3, #30
 8016144:	d413      	bmi.n	801616e <_printf_i+0x232>
 8016146:	68e0      	ldr	r0, [r4, #12]
 8016148:	9b03      	ldr	r3, [sp, #12]
 801614a:	4298      	cmp	r0, r3
 801614c:	bfb8      	it	lt
 801614e:	4618      	movlt	r0, r3
 8016150:	e7a6      	b.n	80160a0 <_printf_i+0x164>
 8016152:	2301      	movs	r3, #1
 8016154:	4632      	mov	r2, r6
 8016156:	4649      	mov	r1, r9
 8016158:	4640      	mov	r0, r8
 801615a:	47d0      	blx	sl
 801615c:	3001      	adds	r0, #1
 801615e:	d09d      	beq.n	801609c <_printf_i+0x160>
 8016160:	3501      	adds	r5, #1
 8016162:	68e3      	ldr	r3, [r4, #12]
 8016164:	9903      	ldr	r1, [sp, #12]
 8016166:	1a5b      	subs	r3, r3, r1
 8016168:	42ab      	cmp	r3, r5
 801616a:	dcf2      	bgt.n	8016152 <_printf_i+0x216>
 801616c:	e7eb      	b.n	8016146 <_printf_i+0x20a>
 801616e:	2500      	movs	r5, #0
 8016170:	f104 0619 	add.w	r6, r4, #25
 8016174:	e7f5      	b.n	8016162 <_printf_i+0x226>
 8016176:	bf00      	nop
 8016178:	0801da4b 	.word	0x0801da4b
 801617c:	0801da5c 	.word	0x0801da5c

08016180 <_scanf_float>:
 8016180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016184:	b087      	sub	sp, #28
 8016186:	4617      	mov	r7, r2
 8016188:	9303      	str	r3, [sp, #12]
 801618a:	688b      	ldr	r3, [r1, #8]
 801618c:	1e5a      	subs	r2, r3, #1
 801618e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016192:	bf83      	ittte	hi
 8016194:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016198:	195b      	addhi	r3, r3, r5
 801619a:	9302      	strhi	r3, [sp, #8]
 801619c:	2300      	movls	r3, #0
 801619e:	bf86      	itte	hi
 80161a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80161a4:	608b      	strhi	r3, [r1, #8]
 80161a6:	9302      	strls	r3, [sp, #8]
 80161a8:	680b      	ldr	r3, [r1, #0]
 80161aa:	468b      	mov	fp, r1
 80161ac:	2500      	movs	r5, #0
 80161ae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80161b2:	f84b 3b1c 	str.w	r3, [fp], #28
 80161b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80161ba:	4680      	mov	r8, r0
 80161bc:	460c      	mov	r4, r1
 80161be:	465e      	mov	r6, fp
 80161c0:	46aa      	mov	sl, r5
 80161c2:	46a9      	mov	r9, r5
 80161c4:	9501      	str	r5, [sp, #4]
 80161c6:	68a2      	ldr	r2, [r4, #8]
 80161c8:	b152      	cbz	r2, 80161e0 <_scanf_float+0x60>
 80161ca:	683b      	ldr	r3, [r7, #0]
 80161cc:	781b      	ldrb	r3, [r3, #0]
 80161ce:	2b4e      	cmp	r3, #78	; 0x4e
 80161d0:	d864      	bhi.n	801629c <_scanf_float+0x11c>
 80161d2:	2b40      	cmp	r3, #64	; 0x40
 80161d4:	d83c      	bhi.n	8016250 <_scanf_float+0xd0>
 80161d6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80161da:	b2c8      	uxtb	r0, r1
 80161dc:	280e      	cmp	r0, #14
 80161de:	d93a      	bls.n	8016256 <_scanf_float+0xd6>
 80161e0:	f1b9 0f00 	cmp.w	r9, #0
 80161e4:	d003      	beq.n	80161ee <_scanf_float+0x6e>
 80161e6:	6823      	ldr	r3, [r4, #0]
 80161e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80161ec:	6023      	str	r3, [r4, #0]
 80161ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80161f2:	f1ba 0f01 	cmp.w	sl, #1
 80161f6:	f200 8113 	bhi.w	8016420 <_scanf_float+0x2a0>
 80161fa:	455e      	cmp	r6, fp
 80161fc:	f200 8105 	bhi.w	801640a <_scanf_float+0x28a>
 8016200:	2501      	movs	r5, #1
 8016202:	4628      	mov	r0, r5
 8016204:	b007      	add	sp, #28
 8016206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801620a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801620e:	2a0d      	cmp	r2, #13
 8016210:	d8e6      	bhi.n	80161e0 <_scanf_float+0x60>
 8016212:	a101      	add	r1, pc, #4	; (adr r1, 8016218 <_scanf_float+0x98>)
 8016214:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016218:	08016357 	.word	0x08016357
 801621c:	080161e1 	.word	0x080161e1
 8016220:	080161e1 	.word	0x080161e1
 8016224:	080161e1 	.word	0x080161e1
 8016228:	080163b7 	.word	0x080163b7
 801622c:	0801638f 	.word	0x0801638f
 8016230:	080161e1 	.word	0x080161e1
 8016234:	080161e1 	.word	0x080161e1
 8016238:	08016365 	.word	0x08016365
 801623c:	080161e1 	.word	0x080161e1
 8016240:	080161e1 	.word	0x080161e1
 8016244:	080161e1 	.word	0x080161e1
 8016248:	080161e1 	.word	0x080161e1
 801624c:	0801631d 	.word	0x0801631d
 8016250:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016254:	e7db      	b.n	801620e <_scanf_float+0x8e>
 8016256:	290e      	cmp	r1, #14
 8016258:	d8c2      	bhi.n	80161e0 <_scanf_float+0x60>
 801625a:	a001      	add	r0, pc, #4	; (adr r0, 8016260 <_scanf_float+0xe0>)
 801625c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016260:	0801630f 	.word	0x0801630f
 8016264:	080161e1 	.word	0x080161e1
 8016268:	0801630f 	.word	0x0801630f
 801626c:	080163a3 	.word	0x080163a3
 8016270:	080161e1 	.word	0x080161e1
 8016274:	080162bd 	.word	0x080162bd
 8016278:	080162f9 	.word	0x080162f9
 801627c:	080162f9 	.word	0x080162f9
 8016280:	080162f9 	.word	0x080162f9
 8016284:	080162f9 	.word	0x080162f9
 8016288:	080162f9 	.word	0x080162f9
 801628c:	080162f9 	.word	0x080162f9
 8016290:	080162f9 	.word	0x080162f9
 8016294:	080162f9 	.word	0x080162f9
 8016298:	080162f9 	.word	0x080162f9
 801629c:	2b6e      	cmp	r3, #110	; 0x6e
 801629e:	d809      	bhi.n	80162b4 <_scanf_float+0x134>
 80162a0:	2b60      	cmp	r3, #96	; 0x60
 80162a2:	d8b2      	bhi.n	801620a <_scanf_float+0x8a>
 80162a4:	2b54      	cmp	r3, #84	; 0x54
 80162a6:	d077      	beq.n	8016398 <_scanf_float+0x218>
 80162a8:	2b59      	cmp	r3, #89	; 0x59
 80162aa:	d199      	bne.n	80161e0 <_scanf_float+0x60>
 80162ac:	2d07      	cmp	r5, #7
 80162ae:	d197      	bne.n	80161e0 <_scanf_float+0x60>
 80162b0:	2508      	movs	r5, #8
 80162b2:	e029      	b.n	8016308 <_scanf_float+0x188>
 80162b4:	2b74      	cmp	r3, #116	; 0x74
 80162b6:	d06f      	beq.n	8016398 <_scanf_float+0x218>
 80162b8:	2b79      	cmp	r3, #121	; 0x79
 80162ba:	e7f6      	b.n	80162aa <_scanf_float+0x12a>
 80162bc:	6821      	ldr	r1, [r4, #0]
 80162be:	05c8      	lsls	r0, r1, #23
 80162c0:	d51a      	bpl.n	80162f8 <_scanf_float+0x178>
 80162c2:	9b02      	ldr	r3, [sp, #8]
 80162c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80162c8:	6021      	str	r1, [r4, #0]
 80162ca:	f109 0901 	add.w	r9, r9, #1
 80162ce:	b11b      	cbz	r3, 80162d8 <_scanf_float+0x158>
 80162d0:	3b01      	subs	r3, #1
 80162d2:	3201      	adds	r2, #1
 80162d4:	9302      	str	r3, [sp, #8]
 80162d6:	60a2      	str	r2, [r4, #8]
 80162d8:	68a3      	ldr	r3, [r4, #8]
 80162da:	3b01      	subs	r3, #1
 80162dc:	60a3      	str	r3, [r4, #8]
 80162de:	6923      	ldr	r3, [r4, #16]
 80162e0:	3301      	adds	r3, #1
 80162e2:	6123      	str	r3, [r4, #16]
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	3b01      	subs	r3, #1
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	607b      	str	r3, [r7, #4]
 80162ec:	f340 8084 	ble.w	80163f8 <_scanf_float+0x278>
 80162f0:	683b      	ldr	r3, [r7, #0]
 80162f2:	3301      	adds	r3, #1
 80162f4:	603b      	str	r3, [r7, #0]
 80162f6:	e766      	b.n	80161c6 <_scanf_float+0x46>
 80162f8:	eb1a 0f05 	cmn.w	sl, r5
 80162fc:	f47f af70 	bne.w	80161e0 <_scanf_float+0x60>
 8016300:	6822      	ldr	r2, [r4, #0]
 8016302:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016306:	6022      	str	r2, [r4, #0]
 8016308:	f806 3b01 	strb.w	r3, [r6], #1
 801630c:	e7e4      	b.n	80162d8 <_scanf_float+0x158>
 801630e:	6822      	ldr	r2, [r4, #0]
 8016310:	0610      	lsls	r0, r2, #24
 8016312:	f57f af65 	bpl.w	80161e0 <_scanf_float+0x60>
 8016316:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801631a:	e7f4      	b.n	8016306 <_scanf_float+0x186>
 801631c:	f1ba 0f00 	cmp.w	sl, #0
 8016320:	d10e      	bne.n	8016340 <_scanf_float+0x1c0>
 8016322:	f1b9 0f00 	cmp.w	r9, #0
 8016326:	d10e      	bne.n	8016346 <_scanf_float+0x1c6>
 8016328:	6822      	ldr	r2, [r4, #0]
 801632a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801632e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016332:	d108      	bne.n	8016346 <_scanf_float+0x1c6>
 8016334:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016338:	6022      	str	r2, [r4, #0]
 801633a:	f04f 0a01 	mov.w	sl, #1
 801633e:	e7e3      	b.n	8016308 <_scanf_float+0x188>
 8016340:	f1ba 0f02 	cmp.w	sl, #2
 8016344:	d055      	beq.n	80163f2 <_scanf_float+0x272>
 8016346:	2d01      	cmp	r5, #1
 8016348:	d002      	beq.n	8016350 <_scanf_float+0x1d0>
 801634a:	2d04      	cmp	r5, #4
 801634c:	f47f af48 	bne.w	80161e0 <_scanf_float+0x60>
 8016350:	3501      	adds	r5, #1
 8016352:	b2ed      	uxtb	r5, r5
 8016354:	e7d8      	b.n	8016308 <_scanf_float+0x188>
 8016356:	f1ba 0f01 	cmp.w	sl, #1
 801635a:	f47f af41 	bne.w	80161e0 <_scanf_float+0x60>
 801635e:	f04f 0a02 	mov.w	sl, #2
 8016362:	e7d1      	b.n	8016308 <_scanf_float+0x188>
 8016364:	b97d      	cbnz	r5, 8016386 <_scanf_float+0x206>
 8016366:	f1b9 0f00 	cmp.w	r9, #0
 801636a:	f47f af3c 	bne.w	80161e6 <_scanf_float+0x66>
 801636e:	6822      	ldr	r2, [r4, #0]
 8016370:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016374:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016378:	f47f af39 	bne.w	80161ee <_scanf_float+0x6e>
 801637c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016380:	6022      	str	r2, [r4, #0]
 8016382:	2501      	movs	r5, #1
 8016384:	e7c0      	b.n	8016308 <_scanf_float+0x188>
 8016386:	2d03      	cmp	r5, #3
 8016388:	d0e2      	beq.n	8016350 <_scanf_float+0x1d0>
 801638a:	2d05      	cmp	r5, #5
 801638c:	e7de      	b.n	801634c <_scanf_float+0x1cc>
 801638e:	2d02      	cmp	r5, #2
 8016390:	f47f af26 	bne.w	80161e0 <_scanf_float+0x60>
 8016394:	2503      	movs	r5, #3
 8016396:	e7b7      	b.n	8016308 <_scanf_float+0x188>
 8016398:	2d06      	cmp	r5, #6
 801639a:	f47f af21 	bne.w	80161e0 <_scanf_float+0x60>
 801639e:	2507      	movs	r5, #7
 80163a0:	e7b2      	b.n	8016308 <_scanf_float+0x188>
 80163a2:	6822      	ldr	r2, [r4, #0]
 80163a4:	0591      	lsls	r1, r2, #22
 80163a6:	f57f af1b 	bpl.w	80161e0 <_scanf_float+0x60>
 80163aa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80163ae:	6022      	str	r2, [r4, #0]
 80163b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80163b4:	e7a8      	b.n	8016308 <_scanf_float+0x188>
 80163b6:	6822      	ldr	r2, [r4, #0]
 80163b8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80163bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80163c0:	d006      	beq.n	80163d0 <_scanf_float+0x250>
 80163c2:	0550      	lsls	r0, r2, #21
 80163c4:	f57f af0c 	bpl.w	80161e0 <_scanf_float+0x60>
 80163c8:	f1b9 0f00 	cmp.w	r9, #0
 80163cc:	f43f af0f 	beq.w	80161ee <_scanf_float+0x6e>
 80163d0:	0591      	lsls	r1, r2, #22
 80163d2:	bf58      	it	pl
 80163d4:	9901      	ldrpl	r1, [sp, #4]
 80163d6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80163da:	bf58      	it	pl
 80163dc:	eba9 0101 	subpl.w	r1, r9, r1
 80163e0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80163e4:	bf58      	it	pl
 80163e6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80163ea:	6022      	str	r2, [r4, #0]
 80163ec:	f04f 0900 	mov.w	r9, #0
 80163f0:	e78a      	b.n	8016308 <_scanf_float+0x188>
 80163f2:	f04f 0a03 	mov.w	sl, #3
 80163f6:	e787      	b.n	8016308 <_scanf_float+0x188>
 80163f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80163fc:	4639      	mov	r1, r7
 80163fe:	4640      	mov	r0, r8
 8016400:	4798      	blx	r3
 8016402:	2800      	cmp	r0, #0
 8016404:	f43f aedf 	beq.w	80161c6 <_scanf_float+0x46>
 8016408:	e6ea      	b.n	80161e0 <_scanf_float+0x60>
 801640a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801640e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016412:	463a      	mov	r2, r7
 8016414:	4640      	mov	r0, r8
 8016416:	4798      	blx	r3
 8016418:	6923      	ldr	r3, [r4, #16]
 801641a:	3b01      	subs	r3, #1
 801641c:	6123      	str	r3, [r4, #16]
 801641e:	e6ec      	b.n	80161fa <_scanf_float+0x7a>
 8016420:	1e6b      	subs	r3, r5, #1
 8016422:	2b06      	cmp	r3, #6
 8016424:	d825      	bhi.n	8016472 <_scanf_float+0x2f2>
 8016426:	2d02      	cmp	r5, #2
 8016428:	d836      	bhi.n	8016498 <_scanf_float+0x318>
 801642a:	455e      	cmp	r6, fp
 801642c:	f67f aee8 	bls.w	8016200 <_scanf_float+0x80>
 8016430:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016434:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016438:	463a      	mov	r2, r7
 801643a:	4640      	mov	r0, r8
 801643c:	4798      	blx	r3
 801643e:	6923      	ldr	r3, [r4, #16]
 8016440:	3b01      	subs	r3, #1
 8016442:	6123      	str	r3, [r4, #16]
 8016444:	e7f1      	b.n	801642a <_scanf_float+0x2aa>
 8016446:	9802      	ldr	r0, [sp, #8]
 8016448:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801644c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016450:	9002      	str	r0, [sp, #8]
 8016452:	463a      	mov	r2, r7
 8016454:	4640      	mov	r0, r8
 8016456:	4798      	blx	r3
 8016458:	6923      	ldr	r3, [r4, #16]
 801645a:	3b01      	subs	r3, #1
 801645c:	6123      	str	r3, [r4, #16]
 801645e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016462:	fa5f fa8a 	uxtb.w	sl, sl
 8016466:	f1ba 0f02 	cmp.w	sl, #2
 801646a:	d1ec      	bne.n	8016446 <_scanf_float+0x2c6>
 801646c:	3d03      	subs	r5, #3
 801646e:	b2ed      	uxtb	r5, r5
 8016470:	1b76      	subs	r6, r6, r5
 8016472:	6823      	ldr	r3, [r4, #0]
 8016474:	05da      	lsls	r2, r3, #23
 8016476:	d52f      	bpl.n	80164d8 <_scanf_float+0x358>
 8016478:	055b      	lsls	r3, r3, #21
 801647a:	d510      	bpl.n	801649e <_scanf_float+0x31e>
 801647c:	455e      	cmp	r6, fp
 801647e:	f67f aebf 	bls.w	8016200 <_scanf_float+0x80>
 8016482:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016486:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801648a:	463a      	mov	r2, r7
 801648c:	4640      	mov	r0, r8
 801648e:	4798      	blx	r3
 8016490:	6923      	ldr	r3, [r4, #16]
 8016492:	3b01      	subs	r3, #1
 8016494:	6123      	str	r3, [r4, #16]
 8016496:	e7f1      	b.n	801647c <_scanf_float+0x2fc>
 8016498:	46aa      	mov	sl, r5
 801649a:	9602      	str	r6, [sp, #8]
 801649c:	e7df      	b.n	801645e <_scanf_float+0x2de>
 801649e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80164a2:	6923      	ldr	r3, [r4, #16]
 80164a4:	2965      	cmp	r1, #101	; 0x65
 80164a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80164aa:	f106 35ff 	add.w	r5, r6, #4294967295
 80164ae:	6123      	str	r3, [r4, #16]
 80164b0:	d00c      	beq.n	80164cc <_scanf_float+0x34c>
 80164b2:	2945      	cmp	r1, #69	; 0x45
 80164b4:	d00a      	beq.n	80164cc <_scanf_float+0x34c>
 80164b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80164ba:	463a      	mov	r2, r7
 80164bc:	4640      	mov	r0, r8
 80164be:	4798      	blx	r3
 80164c0:	6923      	ldr	r3, [r4, #16]
 80164c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80164c6:	3b01      	subs	r3, #1
 80164c8:	1eb5      	subs	r5, r6, #2
 80164ca:	6123      	str	r3, [r4, #16]
 80164cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80164d0:	463a      	mov	r2, r7
 80164d2:	4640      	mov	r0, r8
 80164d4:	4798      	blx	r3
 80164d6:	462e      	mov	r6, r5
 80164d8:	6825      	ldr	r5, [r4, #0]
 80164da:	f015 0510 	ands.w	r5, r5, #16
 80164de:	d158      	bne.n	8016592 <_scanf_float+0x412>
 80164e0:	7035      	strb	r5, [r6, #0]
 80164e2:	6823      	ldr	r3, [r4, #0]
 80164e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80164e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80164ec:	d11c      	bne.n	8016528 <_scanf_float+0x3a8>
 80164ee:	9b01      	ldr	r3, [sp, #4]
 80164f0:	454b      	cmp	r3, r9
 80164f2:	eba3 0209 	sub.w	r2, r3, r9
 80164f6:	d124      	bne.n	8016542 <_scanf_float+0x3c2>
 80164f8:	2200      	movs	r2, #0
 80164fa:	4659      	mov	r1, fp
 80164fc:	4640      	mov	r0, r8
 80164fe:	f7ff f8df 	bl	80156c0 <_strtod_r>
 8016502:	9b03      	ldr	r3, [sp, #12]
 8016504:	6821      	ldr	r1, [r4, #0]
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	f011 0f02 	tst.w	r1, #2
 801650c:	ec57 6b10 	vmov	r6, r7, d0
 8016510:	f103 0204 	add.w	r2, r3, #4
 8016514:	d020      	beq.n	8016558 <_scanf_float+0x3d8>
 8016516:	9903      	ldr	r1, [sp, #12]
 8016518:	600a      	str	r2, [r1, #0]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	e9c3 6700 	strd	r6, r7, [r3]
 8016520:	68e3      	ldr	r3, [r4, #12]
 8016522:	3301      	adds	r3, #1
 8016524:	60e3      	str	r3, [r4, #12]
 8016526:	e66c      	b.n	8016202 <_scanf_float+0x82>
 8016528:	9b04      	ldr	r3, [sp, #16]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d0e4      	beq.n	80164f8 <_scanf_float+0x378>
 801652e:	9905      	ldr	r1, [sp, #20]
 8016530:	230a      	movs	r3, #10
 8016532:	462a      	mov	r2, r5
 8016534:	3101      	adds	r1, #1
 8016536:	4640      	mov	r0, r8
 8016538:	f7ff f9b0 	bl	801589c <_strtol_r>
 801653c:	9b04      	ldr	r3, [sp, #16]
 801653e:	9e05      	ldr	r6, [sp, #20]
 8016540:	1ac2      	subs	r2, r0, r3
 8016542:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016546:	429e      	cmp	r6, r3
 8016548:	bf28      	it	cs
 801654a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801654e:	4912      	ldr	r1, [pc, #72]	; (8016598 <_scanf_float+0x418>)
 8016550:	4630      	mov	r0, r6
 8016552:	f000 f91b 	bl	801678c <siprintf>
 8016556:	e7cf      	b.n	80164f8 <_scanf_float+0x378>
 8016558:	f011 0f04 	tst.w	r1, #4
 801655c:	9903      	ldr	r1, [sp, #12]
 801655e:	600a      	str	r2, [r1, #0]
 8016560:	d1db      	bne.n	801651a <_scanf_float+0x39a>
 8016562:	f8d3 8000 	ldr.w	r8, [r3]
 8016566:	ee10 2a10 	vmov	r2, s0
 801656a:	ee10 0a10 	vmov	r0, s0
 801656e:	463b      	mov	r3, r7
 8016570:	4639      	mov	r1, r7
 8016572:	f7ea fadb 	bl	8000b2c <__aeabi_dcmpun>
 8016576:	b128      	cbz	r0, 8016584 <_scanf_float+0x404>
 8016578:	4808      	ldr	r0, [pc, #32]	; (801659c <_scanf_float+0x41c>)
 801657a:	f000 fa9d 	bl	8016ab8 <nanf>
 801657e:	ed88 0a00 	vstr	s0, [r8]
 8016582:	e7cd      	b.n	8016520 <_scanf_float+0x3a0>
 8016584:	4630      	mov	r0, r6
 8016586:	4639      	mov	r1, r7
 8016588:	f7ea fb2e 	bl	8000be8 <__aeabi_d2f>
 801658c:	f8c8 0000 	str.w	r0, [r8]
 8016590:	e7c6      	b.n	8016520 <_scanf_float+0x3a0>
 8016592:	2500      	movs	r5, #0
 8016594:	e635      	b.n	8016202 <_scanf_float+0x82>
 8016596:	bf00      	nop
 8016598:	0801da6d 	.word	0x0801da6d
 801659c:	0801db26 	.word	0x0801db26

080165a0 <std>:
 80165a0:	2300      	movs	r3, #0
 80165a2:	b510      	push	{r4, lr}
 80165a4:	4604      	mov	r4, r0
 80165a6:	e9c0 3300 	strd	r3, r3, [r0]
 80165aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80165ae:	6083      	str	r3, [r0, #8]
 80165b0:	8181      	strh	r1, [r0, #12]
 80165b2:	6643      	str	r3, [r0, #100]	; 0x64
 80165b4:	81c2      	strh	r2, [r0, #14]
 80165b6:	6183      	str	r3, [r0, #24]
 80165b8:	4619      	mov	r1, r3
 80165ba:	2208      	movs	r2, #8
 80165bc:	305c      	adds	r0, #92	; 0x5c
 80165be:	f000 f948 	bl	8016852 <memset>
 80165c2:	4b0d      	ldr	r3, [pc, #52]	; (80165f8 <std+0x58>)
 80165c4:	6263      	str	r3, [r4, #36]	; 0x24
 80165c6:	4b0d      	ldr	r3, [pc, #52]	; (80165fc <std+0x5c>)
 80165c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80165ca:	4b0d      	ldr	r3, [pc, #52]	; (8016600 <std+0x60>)
 80165cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80165ce:	4b0d      	ldr	r3, [pc, #52]	; (8016604 <std+0x64>)
 80165d0:	6323      	str	r3, [r4, #48]	; 0x30
 80165d2:	4b0d      	ldr	r3, [pc, #52]	; (8016608 <std+0x68>)
 80165d4:	6224      	str	r4, [r4, #32]
 80165d6:	429c      	cmp	r4, r3
 80165d8:	d006      	beq.n	80165e8 <std+0x48>
 80165da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80165de:	4294      	cmp	r4, r2
 80165e0:	d002      	beq.n	80165e8 <std+0x48>
 80165e2:	33d0      	adds	r3, #208	; 0xd0
 80165e4:	429c      	cmp	r4, r3
 80165e6:	d105      	bne.n	80165f4 <std+0x54>
 80165e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80165ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165f0:	f000 ba40 	b.w	8016a74 <__retarget_lock_init_recursive>
 80165f4:	bd10      	pop	{r4, pc}
 80165f6:	bf00      	nop
 80165f8:	080167cd 	.word	0x080167cd
 80165fc:	080167ef 	.word	0x080167ef
 8016600:	08016827 	.word	0x08016827
 8016604:	0801684b 	.word	0x0801684b
 8016608:	20002300 	.word	0x20002300

0801660c <stdio_exit_handler>:
 801660c:	4a02      	ldr	r2, [pc, #8]	; (8016618 <stdio_exit_handler+0xc>)
 801660e:	4903      	ldr	r1, [pc, #12]	; (801661c <stdio_exit_handler+0x10>)
 8016610:	4803      	ldr	r0, [pc, #12]	; (8016620 <stdio_exit_handler+0x14>)
 8016612:	f000 b869 	b.w	80166e8 <_fwalk_sglue>
 8016616:	bf00      	nop
 8016618:	20000144 	.word	0x20000144
 801661c:	08018c91 	.word	0x08018c91
 8016620:	200002bc 	.word	0x200002bc

08016624 <cleanup_stdio>:
 8016624:	6841      	ldr	r1, [r0, #4]
 8016626:	4b0c      	ldr	r3, [pc, #48]	; (8016658 <cleanup_stdio+0x34>)
 8016628:	4299      	cmp	r1, r3
 801662a:	b510      	push	{r4, lr}
 801662c:	4604      	mov	r4, r0
 801662e:	d001      	beq.n	8016634 <cleanup_stdio+0x10>
 8016630:	f002 fb2e 	bl	8018c90 <_fflush_r>
 8016634:	68a1      	ldr	r1, [r4, #8]
 8016636:	4b09      	ldr	r3, [pc, #36]	; (801665c <cleanup_stdio+0x38>)
 8016638:	4299      	cmp	r1, r3
 801663a:	d002      	beq.n	8016642 <cleanup_stdio+0x1e>
 801663c:	4620      	mov	r0, r4
 801663e:	f002 fb27 	bl	8018c90 <_fflush_r>
 8016642:	68e1      	ldr	r1, [r4, #12]
 8016644:	4b06      	ldr	r3, [pc, #24]	; (8016660 <cleanup_stdio+0x3c>)
 8016646:	4299      	cmp	r1, r3
 8016648:	d004      	beq.n	8016654 <cleanup_stdio+0x30>
 801664a:	4620      	mov	r0, r4
 801664c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016650:	f002 bb1e 	b.w	8018c90 <_fflush_r>
 8016654:	bd10      	pop	{r4, pc}
 8016656:	bf00      	nop
 8016658:	20002300 	.word	0x20002300
 801665c:	20002368 	.word	0x20002368
 8016660:	200023d0 	.word	0x200023d0

08016664 <global_stdio_init.part.0>:
 8016664:	b510      	push	{r4, lr}
 8016666:	4b0b      	ldr	r3, [pc, #44]	; (8016694 <global_stdio_init.part.0+0x30>)
 8016668:	4c0b      	ldr	r4, [pc, #44]	; (8016698 <global_stdio_init.part.0+0x34>)
 801666a:	4a0c      	ldr	r2, [pc, #48]	; (801669c <global_stdio_init.part.0+0x38>)
 801666c:	601a      	str	r2, [r3, #0]
 801666e:	4620      	mov	r0, r4
 8016670:	2200      	movs	r2, #0
 8016672:	2104      	movs	r1, #4
 8016674:	f7ff ff94 	bl	80165a0 <std>
 8016678:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801667c:	2201      	movs	r2, #1
 801667e:	2109      	movs	r1, #9
 8016680:	f7ff ff8e 	bl	80165a0 <std>
 8016684:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016688:	2202      	movs	r2, #2
 801668a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801668e:	2112      	movs	r1, #18
 8016690:	f7ff bf86 	b.w	80165a0 <std>
 8016694:	20002438 	.word	0x20002438
 8016698:	20002300 	.word	0x20002300
 801669c:	0801660d 	.word	0x0801660d

080166a0 <__sfp_lock_acquire>:
 80166a0:	4801      	ldr	r0, [pc, #4]	; (80166a8 <__sfp_lock_acquire+0x8>)
 80166a2:	f000 b9e8 	b.w	8016a76 <__retarget_lock_acquire_recursive>
 80166a6:	bf00      	nop
 80166a8:	20002441 	.word	0x20002441

080166ac <__sfp_lock_release>:
 80166ac:	4801      	ldr	r0, [pc, #4]	; (80166b4 <__sfp_lock_release+0x8>)
 80166ae:	f000 b9e3 	b.w	8016a78 <__retarget_lock_release_recursive>
 80166b2:	bf00      	nop
 80166b4:	20002441 	.word	0x20002441

080166b8 <__sinit>:
 80166b8:	b510      	push	{r4, lr}
 80166ba:	4604      	mov	r4, r0
 80166bc:	f7ff fff0 	bl	80166a0 <__sfp_lock_acquire>
 80166c0:	6a23      	ldr	r3, [r4, #32]
 80166c2:	b11b      	cbz	r3, 80166cc <__sinit+0x14>
 80166c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166c8:	f7ff bff0 	b.w	80166ac <__sfp_lock_release>
 80166cc:	4b04      	ldr	r3, [pc, #16]	; (80166e0 <__sinit+0x28>)
 80166ce:	6223      	str	r3, [r4, #32]
 80166d0:	4b04      	ldr	r3, [pc, #16]	; (80166e4 <__sinit+0x2c>)
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d1f5      	bne.n	80166c4 <__sinit+0xc>
 80166d8:	f7ff ffc4 	bl	8016664 <global_stdio_init.part.0>
 80166dc:	e7f2      	b.n	80166c4 <__sinit+0xc>
 80166de:	bf00      	nop
 80166e0:	08016625 	.word	0x08016625
 80166e4:	20002438 	.word	0x20002438

080166e8 <_fwalk_sglue>:
 80166e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166ec:	4607      	mov	r7, r0
 80166ee:	4688      	mov	r8, r1
 80166f0:	4614      	mov	r4, r2
 80166f2:	2600      	movs	r6, #0
 80166f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80166f8:	f1b9 0901 	subs.w	r9, r9, #1
 80166fc:	d505      	bpl.n	801670a <_fwalk_sglue+0x22>
 80166fe:	6824      	ldr	r4, [r4, #0]
 8016700:	2c00      	cmp	r4, #0
 8016702:	d1f7      	bne.n	80166f4 <_fwalk_sglue+0xc>
 8016704:	4630      	mov	r0, r6
 8016706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801670a:	89ab      	ldrh	r3, [r5, #12]
 801670c:	2b01      	cmp	r3, #1
 801670e:	d907      	bls.n	8016720 <_fwalk_sglue+0x38>
 8016710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016714:	3301      	adds	r3, #1
 8016716:	d003      	beq.n	8016720 <_fwalk_sglue+0x38>
 8016718:	4629      	mov	r1, r5
 801671a:	4638      	mov	r0, r7
 801671c:	47c0      	blx	r8
 801671e:	4306      	orrs	r6, r0
 8016720:	3568      	adds	r5, #104	; 0x68
 8016722:	e7e9      	b.n	80166f8 <_fwalk_sglue+0x10>

08016724 <sniprintf>:
 8016724:	b40c      	push	{r2, r3}
 8016726:	b530      	push	{r4, r5, lr}
 8016728:	4b17      	ldr	r3, [pc, #92]	; (8016788 <sniprintf+0x64>)
 801672a:	1e0c      	subs	r4, r1, #0
 801672c:	681d      	ldr	r5, [r3, #0]
 801672e:	b09d      	sub	sp, #116	; 0x74
 8016730:	da08      	bge.n	8016744 <sniprintf+0x20>
 8016732:	238b      	movs	r3, #139	; 0x8b
 8016734:	602b      	str	r3, [r5, #0]
 8016736:	f04f 30ff 	mov.w	r0, #4294967295
 801673a:	b01d      	add	sp, #116	; 0x74
 801673c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016740:	b002      	add	sp, #8
 8016742:	4770      	bx	lr
 8016744:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016748:	f8ad 3014 	strh.w	r3, [sp, #20]
 801674c:	bf14      	ite	ne
 801674e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016752:	4623      	moveq	r3, r4
 8016754:	9304      	str	r3, [sp, #16]
 8016756:	9307      	str	r3, [sp, #28]
 8016758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801675c:	9002      	str	r0, [sp, #8]
 801675e:	9006      	str	r0, [sp, #24]
 8016760:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016764:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016766:	ab21      	add	r3, sp, #132	; 0x84
 8016768:	a902      	add	r1, sp, #8
 801676a:	4628      	mov	r0, r5
 801676c:	9301      	str	r3, [sp, #4]
 801676e:	f002 f90b 	bl	8018988 <_svfiprintf_r>
 8016772:	1c43      	adds	r3, r0, #1
 8016774:	bfbc      	itt	lt
 8016776:	238b      	movlt	r3, #139	; 0x8b
 8016778:	602b      	strlt	r3, [r5, #0]
 801677a:	2c00      	cmp	r4, #0
 801677c:	d0dd      	beq.n	801673a <sniprintf+0x16>
 801677e:	9b02      	ldr	r3, [sp, #8]
 8016780:	2200      	movs	r2, #0
 8016782:	701a      	strb	r2, [r3, #0]
 8016784:	e7d9      	b.n	801673a <sniprintf+0x16>
 8016786:	bf00      	nop
 8016788:	20000308 	.word	0x20000308

0801678c <siprintf>:
 801678c:	b40e      	push	{r1, r2, r3}
 801678e:	b500      	push	{lr}
 8016790:	b09c      	sub	sp, #112	; 0x70
 8016792:	ab1d      	add	r3, sp, #116	; 0x74
 8016794:	9002      	str	r0, [sp, #8]
 8016796:	9006      	str	r0, [sp, #24]
 8016798:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801679c:	4809      	ldr	r0, [pc, #36]	; (80167c4 <siprintf+0x38>)
 801679e:	9107      	str	r1, [sp, #28]
 80167a0:	9104      	str	r1, [sp, #16]
 80167a2:	4909      	ldr	r1, [pc, #36]	; (80167c8 <siprintf+0x3c>)
 80167a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80167a8:	9105      	str	r1, [sp, #20]
 80167aa:	6800      	ldr	r0, [r0, #0]
 80167ac:	9301      	str	r3, [sp, #4]
 80167ae:	a902      	add	r1, sp, #8
 80167b0:	f002 f8ea 	bl	8018988 <_svfiprintf_r>
 80167b4:	9b02      	ldr	r3, [sp, #8]
 80167b6:	2200      	movs	r2, #0
 80167b8:	701a      	strb	r2, [r3, #0]
 80167ba:	b01c      	add	sp, #112	; 0x70
 80167bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80167c0:	b003      	add	sp, #12
 80167c2:	4770      	bx	lr
 80167c4:	20000308 	.word	0x20000308
 80167c8:	ffff0208 	.word	0xffff0208

080167cc <__sread>:
 80167cc:	b510      	push	{r4, lr}
 80167ce:	460c      	mov	r4, r1
 80167d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167d4:	f000 f8f0 	bl	80169b8 <_read_r>
 80167d8:	2800      	cmp	r0, #0
 80167da:	bfab      	itete	ge
 80167dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80167de:	89a3      	ldrhlt	r3, [r4, #12]
 80167e0:	181b      	addge	r3, r3, r0
 80167e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80167e6:	bfac      	ite	ge
 80167e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80167ea:	81a3      	strhlt	r3, [r4, #12]
 80167ec:	bd10      	pop	{r4, pc}

080167ee <__swrite>:
 80167ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167f2:	461f      	mov	r7, r3
 80167f4:	898b      	ldrh	r3, [r1, #12]
 80167f6:	05db      	lsls	r3, r3, #23
 80167f8:	4605      	mov	r5, r0
 80167fa:	460c      	mov	r4, r1
 80167fc:	4616      	mov	r6, r2
 80167fe:	d505      	bpl.n	801680c <__swrite+0x1e>
 8016800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016804:	2302      	movs	r3, #2
 8016806:	2200      	movs	r2, #0
 8016808:	f000 f8c4 	bl	8016994 <_lseek_r>
 801680c:	89a3      	ldrh	r3, [r4, #12]
 801680e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016816:	81a3      	strh	r3, [r4, #12]
 8016818:	4632      	mov	r2, r6
 801681a:	463b      	mov	r3, r7
 801681c:	4628      	mov	r0, r5
 801681e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016822:	f000 b8eb 	b.w	80169fc <_write_r>

08016826 <__sseek>:
 8016826:	b510      	push	{r4, lr}
 8016828:	460c      	mov	r4, r1
 801682a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801682e:	f000 f8b1 	bl	8016994 <_lseek_r>
 8016832:	1c43      	adds	r3, r0, #1
 8016834:	89a3      	ldrh	r3, [r4, #12]
 8016836:	bf15      	itete	ne
 8016838:	6560      	strne	r0, [r4, #84]	; 0x54
 801683a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801683e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016842:	81a3      	strheq	r3, [r4, #12]
 8016844:	bf18      	it	ne
 8016846:	81a3      	strhne	r3, [r4, #12]
 8016848:	bd10      	pop	{r4, pc}

0801684a <__sclose>:
 801684a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801684e:	f000 b891 	b.w	8016974 <_close_r>

08016852 <memset>:
 8016852:	4402      	add	r2, r0
 8016854:	4603      	mov	r3, r0
 8016856:	4293      	cmp	r3, r2
 8016858:	d100      	bne.n	801685c <memset+0xa>
 801685a:	4770      	bx	lr
 801685c:	f803 1b01 	strb.w	r1, [r3], #1
 8016860:	e7f9      	b.n	8016856 <memset+0x4>

08016862 <strncmp>:
 8016862:	b510      	push	{r4, lr}
 8016864:	b16a      	cbz	r2, 8016882 <strncmp+0x20>
 8016866:	3901      	subs	r1, #1
 8016868:	1884      	adds	r4, r0, r2
 801686a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801686e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016872:	429a      	cmp	r2, r3
 8016874:	d103      	bne.n	801687e <strncmp+0x1c>
 8016876:	42a0      	cmp	r0, r4
 8016878:	d001      	beq.n	801687e <strncmp+0x1c>
 801687a:	2a00      	cmp	r2, #0
 801687c:	d1f5      	bne.n	801686a <strncmp+0x8>
 801687e:	1ad0      	subs	r0, r2, r3
 8016880:	bd10      	pop	{r4, pc}
 8016882:	4610      	mov	r0, r2
 8016884:	e7fc      	b.n	8016880 <strncmp+0x1e>
	...

08016888 <strtok>:
 8016888:	4b16      	ldr	r3, [pc, #88]	; (80168e4 <strtok+0x5c>)
 801688a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801688c:	681e      	ldr	r6, [r3, #0]
 801688e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8016890:	4605      	mov	r5, r0
 8016892:	b9fc      	cbnz	r4, 80168d4 <strtok+0x4c>
 8016894:	2050      	movs	r0, #80	; 0x50
 8016896:	9101      	str	r1, [sp, #4]
 8016898:	f7fe f848 	bl	801492c <malloc>
 801689c:	9901      	ldr	r1, [sp, #4]
 801689e:	6470      	str	r0, [r6, #68]	; 0x44
 80168a0:	4602      	mov	r2, r0
 80168a2:	b920      	cbnz	r0, 80168ae <strtok+0x26>
 80168a4:	4b10      	ldr	r3, [pc, #64]	; (80168e8 <strtok+0x60>)
 80168a6:	4811      	ldr	r0, [pc, #68]	; (80168ec <strtok+0x64>)
 80168a8:	215b      	movs	r1, #91	; 0x5b
 80168aa:	f000 f90b 	bl	8016ac4 <__assert_func>
 80168ae:	e9c0 4400 	strd	r4, r4, [r0]
 80168b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80168b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80168ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80168be:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80168c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80168c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80168ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80168ce:	6184      	str	r4, [r0, #24]
 80168d0:	7704      	strb	r4, [r0, #28]
 80168d2:	6244      	str	r4, [r0, #36]	; 0x24
 80168d4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80168d6:	2301      	movs	r3, #1
 80168d8:	4628      	mov	r0, r5
 80168da:	b002      	add	sp, #8
 80168dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80168e0:	f000 b806 	b.w	80168f0 <__strtok_r>
 80168e4:	20000308 	.word	0x20000308
 80168e8:	0801da72 	.word	0x0801da72
 80168ec:	0801da89 	.word	0x0801da89

080168f0 <__strtok_r>:
 80168f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168f2:	b908      	cbnz	r0, 80168f8 <__strtok_r+0x8>
 80168f4:	6810      	ldr	r0, [r2, #0]
 80168f6:	b188      	cbz	r0, 801691c <__strtok_r+0x2c>
 80168f8:	4604      	mov	r4, r0
 80168fa:	4620      	mov	r0, r4
 80168fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016900:	460f      	mov	r7, r1
 8016902:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016906:	b91e      	cbnz	r6, 8016910 <__strtok_r+0x20>
 8016908:	b965      	cbnz	r5, 8016924 <__strtok_r+0x34>
 801690a:	6015      	str	r5, [r2, #0]
 801690c:	4628      	mov	r0, r5
 801690e:	e005      	b.n	801691c <__strtok_r+0x2c>
 8016910:	42b5      	cmp	r5, r6
 8016912:	d1f6      	bne.n	8016902 <__strtok_r+0x12>
 8016914:	2b00      	cmp	r3, #0
 8016916:	d1f0      	bne.n	80168fa <__strtok_r+0xa>
 8016918:	6014      	str	r4, [r2, #0]
 801691a:	7003      	strb	r3, [r0, #0]
 801691c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801691e:	461c      	mov	r4, r3
 8016920:	e00c      	b.n	801693c <__strtok_r+0x4c>
 8016922:	b915      	cbnz	r5, 801692a <__strtok_r+0x3a>
 8016924:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016928:	460e      	mov	r6, r1
 801692a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801692e:	42ab      	cmp	r3, r5
 8016930:	d1f7      	bne.n	8016922 <__strtok_r+0x32>
 8016932:	2b00      	cmp	r3, #0
 8016934:	d0f3      	beq.n	801691e <__strtok_r+0x2e>
 8016936:	2300      	movs	r3, #0
 8016938:	f804 3c01 	strb.w	r3, [r4, #-1]
 801693c:	6014      	str	r4, [r2, #0]
 801693e:	e7ed      	b.n	801691c <__strtok_r+0x2c>

08016940 <strstr>:
 8016940:	780a      	ldrb	r2, [r1, #0]
 8016942:	b570      	push	{r4, r5, r6, lr}
 8016944:	b96a      	cbnz	r2, 8016962 <strstr+0x22>
 8016946:	bd70      	pop	{r4, r5, r6, pc}
 8016948:	429a      	cmp	r2, r3
 801694a:	d109      	bne.n	8016960 <strstr+0x20>
 801694c:	460c      	mov	r4, r1
 801694e:	4605      	mov	r5, r0
 8016950:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016954:	2b00      	cmp	r3, #0
 8016956:	d0f6      	beq.n	8016946 <strstr+0x6>
 8016958:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801695c:	429e      	cmp	r6, r3
 801695e:	d0f7      	beq.n	8016950 <strstr+0x10>
 8016960:	3001      	adds	r0, #1
 8016962:	7803      	ldrb	r3, [r0, #0]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d1ef      	bne.n	8016948 <strstr+0x8>
 8016968:	4618      	mov	r0, r3
 801696a:	e7ec      	b.n	8016946 <strstr+0x6>

0801696c <_localeconv_r>:
 801696c:	4800      	ldr	r0, [pc, #0]	; (8016970 <_localeconv_r+0x4>)
 801696e:	4770      	bx	lr
 8016970:	20000240 	.word	0x20000240

08016974 <_close_r>:
 8016974:	b538      	push	{r3, r4, r5, lr}
 8016976:	4d06      	ldr	r5, [pc, #24]	; (8016990 <_close_r+0x1c>)
 8016978:	2300      	movs	r3, #0
 801697a:	4604      	mov	r4, r0
 801697c:	4608      	mov	r0, r1
 801697e:	602b      	str	r3, [r5, #0]
 8016980:	f7ef f8ed 	bl	8005b5e <_close>
 8016984:	1c43      	adds	r3, r0, #1
 8016986:	d102      	bne.n	801698e <_close_r+0x1a>
 8016988:	682b      	ldr	r3, [r5, #0]
 801698a:	b103      	cbz	r3, 801698e <_close_r+0x1a>
 801698c:	6023      	str	r3, [r4, #0]
 801698e:	bd38      	pop	{r3, r4, r5, pc}
 8016990:	2000243c 	.word	0x2000243c

08016994 <_lseek_r>:
 8016994:	b538      	push	{r3, r4, r5, lr}
 8016996:	4d07      	ldr	r5, [pc, #28]	; (80169b4 <_lseek_r+0x20>)
 8016998:	4604      	mov	r4, r0
 801699a:	4608      	mov	r0, r1
 801699c:	4611      	mov	r1, r2
 801699e:	2200      	movs	r2, #0
 80169a0:	602a      	str	r2, [r5, #0]
 80169a2:	461a      	mov	r2, r3
 80169a4:	f7ef f902 	bl	8005bac <_lseek>
 80169a8:	1c43      	adds	r3, r0, #1
 80169aa:	d102      	bne.n	80169b2 <_lseek_r+0x1e>
 80169ac:	682b      	ldr	r3, [r5, #0]
 80169ae:	b103      	cbz	r3, 80169b2 <_lseek_r+0x1e>
 80169b0:	6023      	str	r3, [r4, #0]
 80169b2:	bd38      	pop	{r3, r4, r5, pc}
 80169b4:	2000243c 	.word	0x2000243c

080169b8 <_read_r>:
 80169b8:	b538      	push	{r3, r4, r5, lr}
 80169ba:	4d07      	ldr	r5, [pc, #28]	; (80169d8 <_read_r+0x20>)
 80169bc:	4604      	mov	r4, r0
 80169be:	4608      	mov	r0, r1
 80169c0:	4611      	mov	r1, r2
 80169c2:	2200      	movs	r2, #0
 80169c4:	602a      	str	r2, [r5, #0]
 80169c6:	461a      	mov	r2, r3
 80169c8:	f7ef f890 	bl	8005aec <_read>
 80169cc:	1c43      	adds	r3, r0, #1
 80169ce:	d102      	bne.n	80169d6 <_read_r+0x1e>
 80169d0:	682b      	ldr	r3, [r5, #0]
 80169d2:	b103      	cbz	r3, 80169d6 <_read_r+0x1e>
 80169d4:	6023      	str	r3, [r4, #0]
 80169d6:	bd38      	pop	{r3, r4, r5, pc}
 80169d8:	2000243c 	.word	0x2000243c

080169dc <_sbrk_r>:
 80169dc:	b538      	push	{r3, r4, r5, lr}
 80169de:	4d06      	ldr	r5, [pc, #24]	; (80169f8 <_sbrk_r+0x1c>)
 80169e0:	2300      	movs	r3, #0
 80169e2:	4604      	mov	r4, r0
 80169e4:	4608      	mov	r0, r1
 80169e6:	602b      	str	r3, [r5, #0]
 80169e8:	f7ef f8ee 	bl	8005bc8 <_sbrk>
 80169ec:	1c43      	adds	r3, r0, #1
 80169ee:	d102      	bne.n	80169f6 <_sbrk_r+0x1a>
 80169f0:	682b      	ldr	r3, [r5, #0]
 80169f2:	b103      	cbz	r3, 80169f6 <_sbrk_r+0x1a>
 80169f4:	6023      	str	r3, [r4, #0]
 80169f6:	bd38      	pop	{r3, r4, r5, pc}
 80169f8:	2000243c 	.word	0x2000243c

080169fc <_write_r>:
 80169fc:	b538      	push	{r3, r4, r5, lr}
 80169fe:	4d07      	ldr	r5, [pc, #28]	; (8016a1c <_write_r+0x20>)
 8016a00:	4604      	mov	r4, r0
 8016a02:	4608      	mov	r0, r1
 8016a04:	4611      	mov	r1, r2
 8016a06:	2200      	movs	r2, #0
 8016a08:	602a      	str	r2, [r5, #0]
 8016a0a:	461a      	mov	r2, r3
 8016a0c:	f7ef f88b 	bl	8005b26 <_write>
 8016a10:	1c43      	adds	r3, r0, #1
 8016a12:	d102      	bne.n	8016a1a <_write_r+0x1e>
 8016a14:	682b      	ldr	r3, [r5, #0]
 8016a16:	b103      	cbz	r3, 8016a1a <_write_r+0x1e>
 8016a18:	6023      	str	r3, [r4, #0]
 8016a1a:	bd38      	pop	{r3, r4, r5, pc}
 8016a1c:	2000243c 	.word	0x2000243c

08016a20 <__errno>:
 8016a20:	4b01      	ldr	r3, [pc, #4]	; (8016a28 <__errno+0x8>)
 8016a22:	6818      	ldr	r0, [r3, #0]
 8016a24:	4770      	bx	lr
 8016a26:	bf00      	nop
 8016a28:	20000308 	.word	0x20000308

08016a2c <__libc_init_array>:
 8016a2c:	b570      	push	{r4, r5, r6, lr}
 8016a2e:	4d0d      	ldr	r5, [pc, #52]	; (8016a64 <__libc_init_array+0x38>)
 8016a30:	4c0d      	ldr	r4, [pc, #52]	; (8016a68 <__libc_init_array+0x3c>)
 8016a32:	1b64      	subs	r4, r4, r5
 8016a34:	10a4      	asrs	r4, r4, #2
 8016a36:	2600      	movs	r6, #0
 8016a38:	42a6      	cmp	r6, r4
 8016a3a:	d109      	bne.n	8016a50 <__libc_init_array+0x24>
 8016a3c:	4d0b      	ldr	r5, [pc, #44]	; (8016a6c <__libc_init_array+0x40>)
 8016a3e:	4c0c      	ldr	r4, [pc, #48]	; (8016a70 <__libc_init_array+0x44>)
 8016a40:	f004 ffda 	bl	801b9f8 <_init>
 8016a44:	1b64      	subs	r4, r4, r5
 8016a46:	10a4      	asrs	r4, r4, #2
 8016a48:	2600      	movs	r6, #0
 8016a4a:	42a6      	cmp	r6, r4
 8016a4c:	d105      	bne.n	8016a5a <__libc_init_array+0x2e>
 8016a4e:	bd70      	pop	{r4, r5, r6, pc}
 8016a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a54:	4798      	blx	r3
 8016a56:	3601      	adds	r6, #1
 8016a58:	e7ee      	b.n	8016a38 <__libc_init_array+0xc>
 8016a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a5e:	4798      	blx	r3
 8016a60:	3601      	adds	r6, #1
 8016a62:	e7f2      	b.n	8016a4a <__libc_init_array+0x1e>
 8016a64:	0801df90 	.word	0x0801df90
 8016a68:	0801df90 	.word	0x0801df90
 8016a6c:	0801df90 	.word	0x0801df90
 8016a70:	0801df94 	.word	0x0801df94

08016a74 <__retarget_lock_init_recursive>:
 8016a74:	4770      	bx	lr

08016a76 <__retarget_lock_acquire_recursive>:
 8016a76:	4770      	bx	lr

08016a78 <__retarget_lock_release_recursive>:
 8016a78:	4770      	bx	lr

08016a7a <strcpy>:
 8016a7a:	4603      	mov	r3, r0
 8016a7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016a80:	f803 2b01 	strb.w	r2, [r3], #1
 8016a84:	2a00      	cmp	r2, #0
 8016a86:	d1f9      	bne.n	8016a7c <strcpy+0x2>
 8016a88:	4770      	bx	lr

08016a8a <memcpy>:
 8016a8a:	440a      	add	r2, r1
 8016a8c:	4291      	cmp	r1, r2
 8016a8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8016a92:	d100      	bne.n	8016a96 <memcpy+0xc>
 8016a94:	4770      	bx	lr
 8016a96:	b510      	push	{r4, lr}
 8016a98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016a9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016aa0:	4291      	cmp	r1, r2
 8016aa2:	d1f9      	bne.n	8016a98 <memcpy+0xe>
 8016aa4:	bd10      	pop	{r4, pc}
	...

08016aa8 <nan>:
 8016aa8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016ab0 <nan+0x8>
 8016aac:	4770      	bx	lr
 8016aae:	bf00      	nop
 8016ab0:	00000000 	.word	0x00000000
 8016ab4:	7ff80000 	.word	0x7ff80000

08016ab8 <nanf>:
 8016ab8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016ac0 <nanf+0x8>
 8016abc:	4770      	bx	lr
 8016abe:	bf00      	nop
 8016ac0:	7fc00000 	.word	0x7fc00000

08016ac4 <__assert_func>:
 8016ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016ac6:	4614      	mov	r4, r2
 8016ac8:	461a      	mov	r2, r3
 8016aca:	4b09      	ldr	r3, [pc, #36]	; (8016af0 <__assert_func+0x2c>)
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	4605      	mov	r5, r0
 8016ad0:	68d8      	ldr	r0, [r3, #12]
 8016ad2:	b14c      	cbz	r4, 8016ae8 <__assert_func+0x24>
 8016ad4:	4b07      	ldr	r3, [pc, #28]	; (8016af4 <__assert_func+0x30>)
 8016ad6:	9100      	str	r1, [sp, #0]
 8016ad8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016adc:	4906      	ldr	r1, [pc, #24]	; (8016af8 <__assert_func+0x34>)
 8016ade:	462b      	mov	r3, r5
 8016ae0:	f002 f8fe 	bl	8018ce0 <fiprintf>
 8016ae4:	f002 f928 	bl	8018d38 <abort>
 8016ae8:	4b04      	ldr	r3, [pc, #16]	; (8016afc <__assert_func+0x38>)
 8016aea:	461c      	mov	r4, r3
 8016aec:	e7f3      	b.n	8016ad6 <__assert_func+0x12>
 8016aee:	bf00      	nop
 8016af0:	20000308 	.word	0x20000308
 8016af4:	0801daeb 	.word	0x0801daeb
 8016af8:	0801daf8 	.word	0x0801daf8
 8016afc:	0801db26 	.word	0x0801db26

08016b00 <quorem>:
 8016b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b04:	6903      	ldr	r3, [r0, #16]
 8016b06:	690c      	ldr	r4, [r1, #16]
 8016b08:	42a3      	cmp	r3, r4
 8016b0a:	4607      	mov	r7, r0
 8016b0c:	db7e      	blt.n	8016c0c <quorem+0x10c>
 8016b0e:	3c01      	subs	r4, #1
 8016b10:	f101 0814 	add.w	r8, r1, #20
 8016b14:	f100 0514 	add.w	r5, r0, #20
 8016b18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016b1c:	9301      	str	r3, [sp, #4]
 8016b1e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016b22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016b26:	3301      	adds	r3, #1
 8016b28:	429a      	cmp	r2, r3
 8016b2a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016b2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016b32:	fbb2 f6f3 	udiv	r6, r2, r3
 8016b36:	d331      	bcc.n	8016b9c <quorem+0x9c>
 8016b38:	f04f 0e00 	mov.w	lr, #0
 8016b3c:	4640      	mov	r0, r8
 8016b3e:	46ac      	mov	ip, r5
 8016b40:	46f2      	mov	sl, lr
 8016b42:	f850 2b04 	ldr.w	r2, [r0], #4
 8016b46:	b293      	uxth	r3, r2
 8016b48:	fb06 e303 	mla	r3, r6, r3, lr
 8016b4c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016b50:	0c1a      	lsrs	r2, r3, #16
 8016b52:	b29b      	uxth	r3, r3
 8016b54:	ebaa 0303 	sub.w	r3, sl, r3
 8016b58:	f8dc a000 	ldr.w	sl, [ip]
 8016b5c:	fa13 f38a 	uxtah	r3, r3, sl
 8016b60:	fb06 220e 	mla	r2, r6, lr, r2
 8016b64:	9300      	str	r3, [sp, #0]
 8016b66:	9b00      	ldr	r3, [sp, #0]
 8016b68:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016b6c:	b292      	uxth	r2, r2
 8016b6e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016b72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016b76:	f8bd 3000 	ldrh.w	r3, [sp]
 8016b7a:	4581      	cmp	r9, r0
 8016b7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016b80:	f84c 3b04 	str.w	r3, [ip], #4
 8016b84:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016b88:	d2db      	bcs.n	8016b42 <quorem+0x42>
 8016b8a:	f855 300b 	ldr.w	r3, [r5, fp]
 8016b8e:	b92b      	cbnz	r3, 8016b9c <quorem+0x9c>
 8016b90:	9b01      	ldr	r3, [sp, #4]
 8016b92:	3b04      	subs	r3, #4
 8016b94:	429d      	cmp	r5, r3
 8016b96:	461a      	mov	r2, r3
 8016b98:	d32c      	bcc.n	8016bf4 <quorem+0xf4>
 8016b9a:	613c      	str	r4, [r7, #16]
 8016b9c:	4638      	mov	r0, r7
 8016b9e:	f001 fca5 	bl	80184ec <__mcmp>
 8016ba2:	2800      	cmp	r0, #0
 8016ba4:	db22      	blt.n	8016bec <quorem+0xec>
 8016ba6:	3601      	adds	r6, #1
 8016ba8:	4629      	mov	r1, r5
 8016baa:	2000      	movs	r0, #0
 8016bac:	f858 2b04 	ldr.w	r2, [r8], #4
 8016bb0:	f8d1 c000 	ldr.w	ip, [r1]
 8016bb4:	b293      	uxth	r3, r2
 8016bb6:	1ac3      	subs	r3, r0, r3
 8016bb8:	0c12      	lsrs	r2, r2, #16
 8016bba:	fa13 f38c 	uxtah	r3, r3, ip
 8016bbe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8016bc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016bc6:	b29b      	uxth	r3, r3
 8016bc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016bcc:	45c1      	cmp	r9, r8
 8016bce:	f841 3b04 	str.w	r3, [r1], #4
 8016bd2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016bd6:	d2e9      	bcs.n	8016bac <quorem+0xac>
 8016bd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016bdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016be0:	b922      	cbnz	r2, 8016bec <quorem+0xec>
 8016be2:	3b04      	subs	r3, #4
 8016be4:	429d      	cmp	r5, r3
 8016be6:	461a      	mov	r2, r3
 8016be8:	d30a      	bcc.n	8016c00 <quorem+0x100>
 8016bea:	613c      	str	r4, [r7, #16]
 8016bec:	4630      	mov	r0, r6
 8016bee:	b003      	add	sp, #12
 8016bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bf4:	6812      	ldr	r2, [r2, #0]
 8016bf6:	3b04      	subs	r3, #4
 8016bf8:	2a00      	cmp	r2, #0
 8016bfa:	d1ce      	bne.n	8016b9a <quorem+0x9a>
 8016bfc:	3c01      	subs	r4, #1
 8016bfe:	e7c9      	b.n	8016b94 <quorem+0x94>
 8016c00:	6812      	ldr	r2, [r2, #0]
 8016c02:	3b04      	subs	r3, #4
 8016c04:	2a00      	cmp	r2, #0
 8016c06:	d1f0      	bne.n	8016bea <quorem+0xea>
 8016c08:	3c01      	subs	r4, #1
 8016c0a:	e7eb      	b.n	8016be4 <quorem+0xe4>
 8016c0c:	2000      	movs	r0, #0
 8016c0e:	e7ee      	b.n	8016bee <quorem+0xee>

08016c10 <_dtoa_r>:
 8016c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c14:	ed2d 8b04 	vpush	{d8-d9}
 8016c18:	69c5      	ldr	r5, [r0, #28]
 8016c1a:	b093      	sub	sp, #76	; 0x4c
 8016c1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016c20:	ec57 6b10 	vmov	r6, r7, d0
 8016c24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016c28:	9107      	str	r1, [sp, #28]
 8016c2a:	4604      	mov	r4, r0
 8016c2c:	920a      	str	r2, [sp, #40]	; 0x28
 8016c2e:	930d      	str	r3, [sp, #52]	; 0x34
 8016c30:	b975      	cbnz	r5, 8016c50 <_dtoa_r+0x40>
 8016c32:	2010      	movs	r0, #16
 8016c34:	f7fd fe7a 	bl	801492c <malloc>
 8016c38:	4602      	mov	r2, r0
 8016c3a:	61e0      	str	r0, [r4, #28]
 8016c3c:	b920      	cbnz	r0, 8016c48 <_dtoa_r+0x38>
 8016c3e:	4bae      	ldr	r3, [pc, #696]	; (8016ef8 <_dtoa_r+0x2e8>)
 8016c40:	21ef      	movs	r1, #239	; 0xef
 8016c42:	48ae      	ldr	r0, [pc, #696]	; (8016efc <_dtoa_r+0x2ec>)
 8016c44:	f7ff ff3e 	bl	8016ac4 <__assert_func>
 8016c48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016c4c:	6005      	str	r5, [r0, #0]
 8016c4e:	60c5      	str	r5, [r0, #12]
 8016c50:	69e3      	ldr	r3, [r4, #28]
 8016c52:	6819      	ldr	r1, [r3, #0]
 8016c54:	b151      	cbz	r1, 8016c6c <_dtoa_r+0x5c>
 8016c56:	685a      	ldr	r2, [r3, #4]
 8016c58:	604a      	str	r2, [r1, #4]
 8016c5a:	2301      	movs	r3, #1
 8016c5c:	4093      	lsls	r3, r2
 8016c5e:	608b      	str	r3, [r1, #8]
 8016c60:	4620      	mov	r0, r4
 8016c62:	f001 f9bd 	bl	8017fe0 <_Bfree>
 8016c66:	69e3      	ldr	r3, [r4, #28]
 8016c68:	2200      	movs	r2, #0
 8016c6a:	601a      	str	r2, [r3, #0]
 8016c6c:	1e3b      	subs	r3, r7, #0
 8016c6e:	bfbb      	ittet	lt
 8016c70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016c74:	9303      	strlt	r3, [sp, #12]
 8016c76:	2300      	movge	r3, #0
 8016c78:	2201      	movlt	r2, #1
 8016c7a:	bfac      	ite	ge
 8016c7c:	f8c8 3000 	strge.w	r3, [r8]
 8016c80:	f8c8 2000 	strlt.w	r2, [r8]
 8016c84:	4b9e      	ldr	r3, [pc, #632]	; (8016f00 <_dtoa_r+0x2f0>)
 8016c86:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8016c8a:	ea33 0308 	bics.w	r3, r3, r8
 8016c8e:	d11b      	bne.n	8016cc8 <_dtoa_r+0xb8>
 8016c90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016c92:	f242 730f 	movw	r3, #9999	; 0x270f
 8016c96:	6013      	str	r3, [r2, #0]
 8016c98:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8016c9c:	4333      	orrs	r3, r6
 8016c9e:	f000 8593 	beq.w	80177c8 <_dtoa_r+0xbb8>
 8016ca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016ca4:	b963      	cbnz	r3, 8016cc0 <_dtoa_r+0xb0>
 8016ca6:	4b97      	ldr	r3, [pc, #604]	; (8016f04 <_dtoa_r+0x2f4>)
 8016ca8:	e027      	b.n	8016cfa <_dtoa_r+0xea>
 8016caa:	4b97      	ldr	r3, [pc, #604]	; (8016f08 <_dtoa_r+0x2f8>)
 8016cac:	9300      	str	r3, [sp, #0]
 8016cae:	3308      	adds	r3, #8
 8016cb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016cb2:	6013      	str	r3, [r2, #0]
 8016cb4:	9800      	ldr	r0, [sp, #0]
 8016cb6:	b013      	add	sp, #76	; 0x4c
 8016cb8:	ecbd 8b04 	vpop	{d8-d9}
 8016cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cc0:	4b90      	ldr	r3, [pc, #576]	; (8016f04 <_dtoa_r+0x2f4>)
 8016cc2:	9300      	str	r3, [sp, #0]
 8016cc4:	3303      	adds	r3, #3
 8016cc6:	e7f3      	b.n	8016cb0 <_dtoa_r+0xa0>
 8016cc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016ccc:	2200      	movs	r2, #0
 8016cce:	ec51 0b17 	vmov	r0, r1, d7
 8016cd2:	eeb0 8a47 	vmov.f32	s16, s14
 8016cd6:	eef0 8a67 	vmov.f32	s17, s15
 8016cda:	2300      	movs	r3, #0
 8016cdc:	f7e9 fef4 	bl	8000ac8 <__aeabi_dcmpeq>
 8016ce0:	4681      	mov	r9, r0
 8016ce2:	b160      	cbz	r0, 8016cfe <_dtoa_r+0xee>
 8016ce4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ce6:	2301      	movs	r3, #1
 8016ce8:	6013      	str	r3, [r2, #0]
 8016cea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	f000 8568 	beq.w	80177c2 <_dtoa_r+0xbb2>
 8016cf2:	4b86      	ldr	r3, [pc, #536]	; (8016f0c <_dtoa_r+0x2fc>)
 8016cf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016cf6:	6013      	str	r3, [r2, #0]
 8016cf8:	3b01      	subs	r3, #1
 8016cfa:	9300      	str	r3, [sp, #0]
 8016cfc:	e7da      	b.n	8016cb4 <_dtoa_r+0xa4>
 8016cfe:	aa10      	add	r2, sp, #64	; 0x40
 8016d00:	a911      	add	r1, sp, #68	; 0x44
 8016d02:	4620      	mov	r0, r4
 8016d04:	eeb0 0a48 	vmov.f32	s0, s16
 8016d08:	eef0 0a68 	vmov.f32	s1, s17
 8016d0c:	f001 fd04 	bl	8018718 <__d2b>
 8016d10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016d14:	4682      	mov	sl, r0
 8016d16:	2d00      	cmp	r5, #0
 8016d18:	d07f      	beq.n	8016e1a <_dtoa_r+0x20a>
 8016d1a:	ee18 3a90 	vmov	r3, s17
 8016d1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016d22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016d26:	ec51 0b18 	vmov	r0, r1, d8
 8016d2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016d2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016d32:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8016d36:	4619      	mov	r1, r3
 8016d38:	2200      	movs	r2, #0
 8016d3a:	4b75      	ldr	r3, [pc, #468]	; (8016f10 <_dtoa_r+0x300>)
 8016d3c:	f7e9 faa4 	bl	8000288 <__aeabi_dsub>
 8016d40:	a367      	add	r3, pc, #412	; (adr r3, 8016ee0 <_dtoa_r+0x2d0>)
 8016d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d46:	f7e9 fc57 	bl	80005f8 <__aeabi_dmul>
 8016d4a:	a367      	add	r3, pc, #412	; (adr r3, 8016ee8 <_dtoa_r+0x2d8>)
 8016d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d50:	f7e9 fa9c 	bl	800028c <__adddf3>
 8016d54:	4606      	mov	r6, r0
 8016d56:	4628      	mov	r0, r5
 8016d58:	460f      	mov	r7, r1
 8016d5a:	f7e9 fbe3 	bl	8000524 <__aeabi_i2d>
 8016d5e:	a364      	add	r3, pc, #400	; (adr r3, 8016ef0 <_dtoa_r+0x2e0>)
 8016d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d64:	f7e9 fc48 	bl	80005f8 <__aeabi_dmul>
 8016d68:	4602      	mov	r2, r0
 8016d6a:	460b      	mov	r3, r1
 8016d6c:	4630      	mov	r0, r6
 8016d6e:	4639      	mov	r1, r7
 8016d70:	f7e9 fa8c 	bl	800028c <__adddf3>
 8016d74:	4606      	mov	r6, r0
 8016d76:	460f      	mov	r7, r1
 8016d78:	f7e9 feee 	bl	8000b58 <__aeabi_d2iz>
 8016d7c:	2200      	movs	r2, #0
 8016d7e:	4683      	mov	fp, r0
 8016d80:	2300      	movs	r3, #0
 8016d82:	4630      	mov	r0, r6
 8016d84:	4639      	mov	r1, r7
 8016d86:	f7e9 fea9 	bl	8000adc <__aeabi_dcmplt>
 8016d8a:	b148      	cbz	r0, 8016da0 <_dtoa_r+0x190>
 8016d8c:	4658      	mov	r0, fp
 8016d8e:	f7e9 fbc9 	bl	8000524 <__aeabi_i2d>
 8016d92:	4632      	mov	r2, r6
 8016d94:	463b      	mov	r3, r7
 8016d96:	f7e9 fe97 	bl	8000ac8 <__aeabi_dcmpeq>
 8016d9a:	b908      	cbnz	r0, 8016da0 <_dtoa_r+0x190>
 8016d9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016da0:	f1bb 0f16 	cmp.w	fp, #22
 8016da4:	d857      	bhi.n	8016e56 <_dtoa_r+0x246>
 8016da6:	4b5b      	ldr	r3, [pc, #364]	; (8016f14 <_dtoa_r+0x304>)
 8016da8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016db0:	ec51 0b18 	vmov	r0, r1, d8
 8016db4:	f7e9 fe92 	bl	8000adc <__aeabi_dcmplt>
 8016db8:	2800      	cmp	r0, #0
 8016dba:	d04e      	beq.n	8016e5a <_dtoa_r+0x24a>
 8016dbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	930c      	str	r3, [sp, #48]	; 0x30
 8016dc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016dc6:	1b5b      	subs	r3, r3, r5
 8016dc8:	1e5a      	subs	r2, r3, #1
 8016dca:	bf45      	ittet	mi
 8016dcc:	f1c3 0301 	rsbmi	r3, r3, #1
 8016dd0:	9305      	strmi	r3, [sp, #20]
 8016dd2:	2300      	movpl	r3, #0
 8016dd4:	2300      	movmi	r3, #0
 8016dd6:	9206      	str	r2, [sp, #24]
 8016dd8:	bf54      	ite	pl
 8016dda:	9305      	strpl	r3, [sp, #20]
 8016ddc:	9306      	strmi	r3, [sp, #24]
 8016dde:	f1bb 0f00 	cmp.w	fp, #0
 8016de2:	db3c      	blt.n	8016e5e <_dtoa_r+0x24e>
 8016de4:	9b06      	ldr	r3, [sp, #24]
 8016de6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8016dea:	445b      	add	r3, fp
 8016dec:	9306      	str	r3, [sp, #24]
 8016dee:	2300      	movs	r3, #0
 8016df0:	9308      	str	r3, [sp, #32]
 8016df2:	9b07      	ldr	r3, [sp, #28]
 8016df4:	2b09      	cmp	r3, #9
 8016df6:	d868      	bhi.n	8016eca <_dtoa_r+0x2ba>
 8016df8:	2b05      	cmp	r3, #5
 8016dfa:	bfc4      	itt	gt
 8016dfc:	3b04      	subgt	r3, #4
 8016dfe:	9307      	strgt	r3, [sp, #28]
 8016e00:	9b07      	ldr	r3, [sp, #28]
 8016e02:	f1a3 0302 	sub.w	r3, r3, #2
 8016e06:	bfcc      	ite	gt
 8016e08:	2500      	movgt	r5, #0
 8016e0a:	2501      	movle	r5, #1
 8016e0c:	2b03      	cmp	r3, #3
 8016e0e:	f200 8085 	bhi.w	8016f1c <_dtoa_r+0x30c>
 8016e12:	e8df f003 	tbb	[pc, r3]
 8016e16:	3b2e      	.short	0x3b2e
 8016e18:	5839      	.short	0x5839
 8016e1a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016e1e:	441d      	add	r5, r3
 8016e20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016e24:	2b20      	cmp	r3, #32
 8016e26:	bfc1      	itttt	gt
 8016e28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016e2c:	fa08 f803 	lslgt.w	r8, r8, r3
 8016e30:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8016e34:	fa26 f303 	lsrgt.w	r3, r6, r3
 8016e38:	bfd6      	itet	le
 8016e3a:	f1c3 0320 	rsble	r3, r3, #32
 8016e3e:	ea48 0003 	orrgt.w	r0, r8, r3
 8016e42:	fa06 f003 	lslle.w	r0, r6, r3
 8016e46:	f7e9 fb5d 	bl	8000504 <__aeabi_ui2d>
 8016e4a:	2201      	movs	r2, #1
 8016e4c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8016e50:	3d01      	subs	r5, #1
 8016e52:	920e      	str	r2, [sp, #56]	; 0x38
 8016e54:	e76f      	b.n	8016d36 <_dtoa_r+0x126>
 8016e56:	2301      	movs	r3, #1
 8016e58:	e7b3      	b.n	8016dc2 <_dtoa_r+0x1b2>
 8016e5a:	900c      	str	r0, [sp, #48]	; 0x30
 8016e5c:	e7b2      	b.n	8016dc4 <_dtoa_r+0x1b4>
 8016e5e:	9b05      	ldr	r3, [sp, #20]
 8016e60:	eba3 030b 	sub.w	r3, r3, fp
 8016e64:	9305      	str	r3, [sp, #20]
 8016e66:	f1cb 0300 	rsb	r3, fp, #0
 8016e6a:	9308      	str	r3, [sp, #32]
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e70:	e7bf      	b.n	8016df2 <_dtoa_r+0x1e2>
 8016e72:	2300      	movs	r3, #0
 8016e74:	9309      	str	r3, [sp, #36]	; 0x24
 8016e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	dc52      	bgt.n	8016f22 <_dtoa_r+0x312>
 8016e7c:	2301      	movs	r3, #1
 8016e7e:	9301      	str	r3, [sp, #4]
 8016e80:	9304      	str	r3, [sp, #16]
 8016e82:	461a      	mov	r2, r3
 8016e84:	920a      	str	r2, [sp, #40]	; 0x28
 8016e86:	e00b      	b.n	8016ea0 <_dtoa_r+0x290>
 8016e88:	2301      	movs	r3, #1
 8016e8a:	e7f3      	b.n	8016e74 <_dtoa_r+0x264>
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8016e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e92:	445b      	add	r3, fp
 8016e94:	9301      	str	r3, [sp, #4]
 8016e96:	3301      	adds	r3, #1
 8016e98:	2b01      	cmp	r3, #1
 8016e9a:	9304      	str	r3, [sp, #16]
 8016e9c:	bfb8      	it	lt
 8016e9e:	2301      	movlt	r3, #1
 8016ea0:	69e0      	ldr	r0, [r4, #28]
 8016ea2:	2100      	movs	r1, #0
 8016ea4:	2204      	movs	r2, #4
 8016ea6:	f102 0614 	add.w	r6, r2, #20
 8016eaa:	429e      	cmp	r6, r3
 8016eac:	d93d      	bls.n	8016f2a <_dtoa_r+0x31a>
 8016eae:	6041      	str	r1, [r0, #4]
 8016eb0:	4620      	mov	r0, r4
 8016eb2:	f001 f855 	bl	8017f60 <_Balloc>
 8016eb6:	9000      	str	r0, [sp, #0]
 8016eb8:	2800      	cmp	r0, #0
 8016eba:	d139      	bne.n	8016f30 <_dtoa_r+0x320>
 8016ebc:	4b16      	ldr	r3, [pc, #88]	; (8016f18 <_dtoa_r+0x308>)
 8016ebe:	4602      	mov	r2, r0
 8016ec0:	f240 11af 	movw	r1, #431	; 0x1af
 8016ec4:	e6bd      	b.n	8016c42 <_dtoa_r+0x32>
 8016ec6:	2301      	movs	r3, #1
 8016ec8:	e7e1      	b.n	8016e8e <_dtoa_r+0x27e>
 8016eca:	2501      	movs	r5, #1
 8016ecc:	2300      	movs	r3, #0
 8016ece:	9307      	str	r3, [sp, #28]
 8016ed0:	9509      	str	r5, [sp, #36]	; 0x24
 8016ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8016ed6:	9301      	str	r3, [sp, #4]
 8016ed8:	9304      	str	r3, [sp, #16]
 8016eda:	2200      	movs	r2, #0
 8016edc:	2312      	movs	r3, #18
 8016ede:	e7d1      	b.n	8016e84 <_dtoa_r+0x274>
 8016ee0:	636f4361 	.word	0x636f4361
 8016ee4:	3fd287a7 	.word	0x3fd287a7
 8016ee8:	8b60c8b3 	.word	0x8b60c8b3
 8016eec:	3fc68a28 	.word	0x3fc68a28
 8016ef0:	509f79fb 	.word	0x509f79fb
 8016ef4:	3fd34413 	.word	0x3fd34413
 8016ef8:	0801da72 	.word	0x0801da72
 8016efc:	0801db34 	.word	0x0801db34
 8016f00:	7ff00000 	.word	0x7ff00000
 8016f04:	0801db30 	.word	0x0801db30
 8016f08:	0801db27 	.word	0x0801db27
 8016f0c:	0801da4a 	.word	0x0801da4a
 8016f10:	3ff80000 	.word	0x3ff80000
 8016f14:	0801dc80 	.word	0x0801dc80
 8016f18:	0801db8c 	.word	0x0801db8c
 8016f1c:	2301      	movs	r3, #1
 8016f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8016f20:	e7d7      	b.n	8016ed2 <_dtoa_r+0x2c2>
 8016f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f24:	9301      	str	r3, [sp, #4]
 8016f26:	9304      	str	r3, [sp, #16]
 8016f28:	e7ba      	b.n	8016ea0 <_dtoa_r+0x290>
 8016f2a:	3101      	adds	r1, #1
 8016f2c:	0052      	lsls	r2, r2, #1
 8016f2e:	e7ba      	b.n	8016ea6 <_dtoa_r+0x296>
 8016f30:	69e3      	ldr	r3, [r4, #28]
 8016f32:	9a00      	ldr	r2, [sp, #0]
 8016f34:	601a      	str	r2, [r3, #0]
 8016f36:	9b04      	ldr	r3, [sp, #16]
 8016f38:	2b0e      	cmp	r3, #14
 8016f3a:	f200 80a8 	bhi.w	801708e <_dtoa_r+0x47e>
 8016f3e:	2d00      	cmp	r5, #0
 8016f40:	f000 80a5 	beq.w	801708e <_dtoa_r+0x47e>
 8016f44:	f1bb 0f00 	cmp.w	fp, #0
 8016f48:	dd38      	ble.n	8016fbc <_dtoa_r+0x3ac>
 8016f4a:	4bc0      	ldr	r3, [pc, #768]	; (801724c <_dtoa_r+0x63c>)
 8016f4c:	f00b 020f 	and.w	r2, fp, #15
 8016f50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016f54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8016f58:	e9d3 6700 	ldrd	r6, r7, [r3]
 8016f5c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8016f60:	d019      	beq.n	8016f96 <_dtoa_r+0x386>
 8016f62:	4bbb      	ldr	r3, [pc, #748]	; (8017250 <_dtoa_r+0x640>)
 8016f64:	ec51 0b18 	vmov	r0, r1, d8
 8016f68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016f6c:	f7e9 fc6e 	bl	800084c <__aeabi_ddiv>
 8016f70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016f74:	f008 080f 	and.w	r8, r8, #15
 8016f78:	2503      	movs	r5, #3
 8016f7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8017250 <_dtoa_r+0x640>
 8016f7e:	f1b8 0f00 	cmp.w	r8, #0
 8016f82:	d10a      	bne.n	8016f9a <_dtoa_r+0x38a>
 8016f84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016f88:	4632      	mov	r2, r6
 8016f8a:	463b      	mov	r3, r7
 8016f8c:	f7e9 fc5e 	bl	800084c <__aeabi_ddiv>
 8016f90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016f94:	e02b      	b.n	8016fee <_dtoa_r+0x3de>
 8016f96:	2502      	movs	r5, #2
 8016f98:	e7ef      	b.n	8016f7a <_dtoa_r+0x36a>
 8016f9a:	f018 0f01 	tst.w	r8, #1
 8016f9e:	d008      	beq.n	8016fb2 <_dtoa_r+0x3a2>
 8016fa0:	4630      	mov	r0, r6
 8016fa2:	4639      	mov	r1, r7
 8016fa4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016fa8:	f7e9 fb26 	bl	80005f8 <__aeabi_dmul>
 8016fac:	3501      	adds	r5, #1
 8016fae:	4606      	mov	r6, r0
 8016fb0:	460f      	mov	r7, r1
 8016fb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016fb6:	f109 0908 	add.w	r9, r9, #8
 8016fba:	e7e0      	b.n	8016f7e <_dtoa_r+0x36e>
 8016fbc:	f000 809f 	beq.w	80170fe <_dtoa_r+0x4ee>
 8016fc0:	f1cb 0600 	rsb	r6, fp, #0
 8016fc4:	4ba1      	ldr	r3, [pc, #644]	; (801724c <_dtoa_r+0x63c>)
 8016fc6:	4fa2      	ldr	r7, [pc, #648]	; (8017250 <_dtoa_r+0x640>)
 8016fc8:	f006 020f 	and.w	r2, r6, #15
 8016fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fd4:	ec51 0b18 	vmov	r0, r1, d8
 8016fd8:	f7e9 fb0e 	bl	80005f8 <__aeabi_dmul>
 8016fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016fe0:	1136      	asrs	r6, r6, #4
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	2502      	movs	r5, #2
 8016fe6:	2e00      	cmp	r6, #0
 8016fe8:	d17e      	bne.n	80170e8 <_dtoa_r+0x4d8>
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d1d0      	bne.n	8016f90 <_dtoa_r+0x380>
 8016fee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ff0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	f000 8084 	beq.w	8017102 <_dtoa_r+0x4f2>
 8016ffa:	4b96      	ldr	r3, [pc, #600]	; (8017254 <_dtoa_r+0x644>)
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	4640      	mov	r0, r8
 8017000:	4649      	mov	r1, r9
 8017002:	f7e9 fd6b 	bl	8000adc <__aeabi_dcmplt>
 8017006:	2800      	cmp	r0, #0
 8017008:	d07b      	beq.n	8017102 <_dtoa_r+0x4f2>
 801700a:	9b04      	ldr	r3, [sp, #16]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d078      	beq.n	8017102 <_dtoa_r+0x4f2>
 8017010:	9b01      	ldr	r3, [sp, #4]
 8017012:	2b00      	cmp	r3, #0
 8017014:	dd39      	ble.n	801708a <_dtoa_r+0x47a>
 8017016:	4b90      	ldr	r3, [pc, #576]	; (8017258 <_dtoa_r+0x648>)
 8017018:	2200      	movs	r2, #0
 801701a:	4640      	mov	r0, r8
 801701c:	4649      	mov	r1, r9
 801701e:	f7e9 faeb 	bl	80005f8 <__aeabi_dmul>
 8017022:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017026:	9e01      	ldr	r6, [sp, #4]
 8017028:	f10b 37ff 	add.w	r7, fp, #4294967295
 801702c:	3501      	adds	r5, #1
 801702e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017032:	4628      	mov	r0, r5
 8017034:	f7e9 fa76 	bl	8000524 <__aeabi_i2d>
 8017038:	4642      	mov	r2, r8
 801703a:	464b      	mov	r3, r9
 801703c:	f7e9 fadc 	bl	80005f8 <__aeabi_dmul>
 8017040:	4b86      	ldr	r3, [pc, #536]	; (801725c <_dtoa_r+0x64c>)
 8017042:	2200      	movs	r2, #0
 8017044:	f7e9 f922 	bl	800028c <__adddf3>
 8017048:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801704c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017050:	9303      	str	r3, [sp, #12]
 8017052:	2e00      	cmp	r6, #0
 8017054:	d158      	bne.n	8017108 <_dtoa_r+0x4f8>
 8017056:	4b82      	ldr	r3, [pc, #520]	; (8017260 <_dtoa_r+0x650>)
 8017058:	2200      	movs	r2, #0
 801705a:	4640      	mov	r0, r8
 801705c:	4649      	mov	r1, r9
 801705e:	f7e9 f913 	bl	8000288 <__aeabi_dsub>
 8017062:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017066:	4680      	mov	r8, r0
 8017068:	4689      	mov	r9, r1
 801706a:	f7e9 fd55 	bl	8000b18 <__aeabi_dcmpgt>
 801706e:	2800      	cmp	r0, #0
 8017070:	f040 8296 	bne.w	80175a0 <_dtoa_r+0x990>
 8017074:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017078:	4640      	mov	r0, r8
 801707a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801707e:	4649      	mov	r1, r9
 8017080:	f7e9 fd2c 	bl	8000adc <__aeabi_dcmplt>
 8017084:	2800      	cmp	r0, #0
 8017086:	f040 8289 	bne.w	801759c <_dtoa_r+0x98c>
 801708a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801708e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017090:	2b00      	cmp	r3, #0
 8017092:	f2c0 814e 	blt.w	8017332 <_dtoa_r+0x722>
 8017096:	f1bb 0f0e 	cmp.w	fp, #14
 801709a:	f300 814a 	bgt.w	8017332 <_dtoa_r+0x722>
 801709e:	4b6b      	ldr	r3, [pc, #428]	; (801724c <_dtoa_r+0x63c>)
 80170a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80170a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80170a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	f280 80dc 	bge.w	8017268 <_dtoa_r+0x658>
 80170b0:	9b04      	ldr	r3, [sp, #16]
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	f300 80d8 	bgt.w	8017268 <_dtoa_r+0x658>
 80170b8:	f040 826f 	bne.w	801759a <_dtoa_r+0x98a>
 80170bc:	4b68      	ldr	r3, [pc, #416]	; (8017260 <_dtoa_r+0x650>)
 80170be:	2200      	movs	r2, #0
 80170c0:	4640      	mov	r0, r8
 80170c2:	4649      	mov	r1, r9
 80170c4:	f7e9 fa98 	bl	80005f8 <__aeabi_dmul>
 80170c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80170cc:	f7e9 fd1a 	bl	8000b04 <__aeabi_dcmpge>
 80170d0:	9e04      	ldr	r6, [sp, #16]
 80170d2:	4637      	mov	r7, r6
 80170d4:	2800      	cmp	r0, #0
 80170d6:	f040 8245 	bne.w	8017564 <_dtoa_r+0x954>
 80170da:	9d00      	ldr	r5, [sp, #0]
 80170dc:	2331      	movs	r3, #49	; 0x31
 80170de:	f805 3b01 	strb.w	r3, [r5], #1
 80170e2:	f10b 0b01 	add.w	fp, fp, #1
 80170e6:	e241      	b.n	801756c <_dtoa_r+0x95c>
 80170e8:	07f2      	lsls	r2, r6, #31
 80170ea:	d505      	bpl.n	80170f8 <_dtoa_r+0x4e8>
 80170ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80170f0:	f7e9 fa82 	bl	80005f8 <__aeabi_dmul>
 80170f4:	3501      	adds	r5, #1
 80170f6:	2301      	movs	r3, #1
 80170f8:	1076      	asrs	r6, r6, #1
 80170fa:	3708      	adds	r7, #8
 80170fc:	e773      	b.n	8016fe6 <_dtoa_r+0x3d6>
 80170fe:	2502      	movs	r5, #2
 8017100:	e775      	b.n	8016fee <_dtoa_r+0x3de>
 8017102:	9e04      	ldr	r6, [sp, #16]
 8017104:	465f      	mov	r7, fp
 8017106:	e792      	b.n	801702e <_dtoa_r+0x41e>
 8017108:	9900      	ldr	r1, [sp, #0]
 801710a:	4b50      	ldr	r3, [pc, #320]	; (801724c <_dtoa_r+0x63c>)
 801710c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017110:	4431      	add	r1, r6
 8017112:	9102      	str	r1, [sp, #8]
 8017114:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017116:	eeb0 9a47 	vmov.f32	s18, s14
 801711a:	eef0 9a67 	vmov.f32	s19, s15
 801711e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017122:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017126:	2900      	cmp	r1, #0
 8017128:	d044      	beq.n	80171b4 <_dtoa_r+0x5a4>
 801712a:	494e      	ldr	r1, [pc, #312]	; (8017264 <_dtoa_r+0x654>)
 801712c:	2000      	movs	r0, #0
 801712e:	f7e9 fb8d 	bl	800084c <__aeabi_ddiv>
 8017132:	ec53 2b19 	vmov	r2, r3, d9
 8017136:	f7e9 f8a7 	bl	8000288 <__aeabi_dsub>
 801713a:	9d00      	ldr	r5, [sp, #0]
 801713c:	ec41 0b19 	vmov	d9, r0, r1
 8017140:	4649      	mov	r1, r9
 8017142:	4640      	mov	r0, r8
 8017144:	f7e9 fd08 	bl	8000b58 <__aeabi_d2iz>
 8017148:	4606      	mov	r6, r0
 801714a:	f7e9 f9eb 	bl	8000524 <__aeabi_i2d>
 801714e:	4602      	mov	r2, r0
 8017150:	460b      	mov	r3, r1
 8017152:	4640      	mov	r0, r8
 8017154:	4649      	mov	r1, r9
 8017156:	f7e9 f897 	bl	8000288 <__aeabi_dsub>
 801715a:	3630      	adds	r6, #48	; 0x30
 801715c:	f805 6b01 	strb.w	r6, [r5], #1
 8017160:	ec53 2b19 	vmov	r2, r3, d9
 8017164:	4680      	mov	r8, r0
 8017166:	4689      	mov	r9, r1
 8017168:	f7e9 fcb8 	bl	8000adc <__aeabi_dcmplt>
 801716c:	2800      	cmp	r0, #0
 801716e:	d164      	bne.n	801723a <_dtoa_r+0x62a>
 8017170:	4642      	mov	r2, r8
 8017172:	464b      	mov	r3, r9
 8017174:	4937      	ldr	r1, [pc, #220]	; (8017254 <_dtoa_r+0x644>)
 8017176:	2000      	movs	r0, #0
 8017178:	f7e9 f886 	bl	8000288 <__aeabi_dsub>
 801717c:	ec53 2b19 	vmov	r2, r3, d9
 8017180:	f7e9 fcac 	bl	8000adc <__aeabi_dcmplt>
 8017184:	2800      	cmp	r0, #0
 8017186:	f040 80b6 	bne.w	80172f6 <_dtoa_r+0x6e6>
 801718a:	9b02      	ldr	r3, [sp, #8]
 801718c:	429d      	cmp	r5, r3
 801718e:	f43f af7c 	beq.w	801708a <_dtoa_r+0x47a>
 8017192:	4b31      	ldr	r3, [pc, #196]	; (8017258 <_dtoa_r+0x648>)
 8017194:	ec51 0b19 	vmov	r0, r1, d9
 8017198:	2200      	movs	r2, #0
 801719a:	f7e9 fa2d 	bl	80005f8 <__aeabi_dmul>
 801719e:	4b2e      	ldr	r3, [pc, #184]	; (8017258 <_dtoa_r+0x648>)
 80171a0:	ec41 0b19 	vmov	d9, r0, r1
 80171a4:	2200      	movs	r2, #0
 80171a6:	4640      	mov	r0, r8
 80171a8:	4649      	mov	r1, r9
 80171aa:	f7e9 fa25 	bl	80005f8 <__aeabi_dmul>
 80171ae:	4680      	mov	r8, r0
 80171b0:	4689      	mov	r9, r1
 80171b2:	e7c5      	b.n	8017140 <_dtoa_r+0x530>
 80171b4:	ec51 0b17 	vmov	r0, r1, d7
 80171b8:	f7e9 fa1e 	bl	80005f8 <__aeabi_dmul>
 80171bc:	9b02      	ldr	r3, [sp, #8]
 80171be:	9d00      	ldr	r5, [sp, #0]
 80171c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80171c2:	ec41 0b19 	vmov	d9, r0, r1
 80171c6:	4649      	mov	r1, r9
 80171c8:	4640      	mov	r0, r8
 80171ca:	f7e9 fcc5 	bl	8000b58 <__aeabi_d2iz>
 80171ce:	4606      	mov	r6, r0
 80171d0:	f7e9 f9a8 	bl	8000524 <__aeabi_i2d>
 80171d4:	3630      	adds	r6, #48	; 0x30
 80171d6:	4602      	mov	r2, r0
 80171d8:	460b      	mov	r3, r1
 80171da:	4640      	mov	r0, r8
 80171dc:	4649      	mov	r1, r9
 80171de:	f7e9 f853 	bl	8000288 <__aeabi_dsub>
 80171e2:	f805 6b01 	strb.w	r6, [r5], #1
 80171e6:	9b02      	ldr	r3, [sp, #8]
 80171e8:	429d      	cmp	r5, r3
 80171ea:	4680      	mov	r8, r0
 80171ec:	4689      	mov	r9, r1
 80171ee:	f04f 0200 	mov.w	r2, #0
 80171f2:	d124      	bne.n	801723e <_dtoa_r+0x62e>
 80171f4:	4b1b      	ldr	r3, [pc, #108]	; (8017264 <_dtoa_r+0x654>)
 80171f6:	ec51 0b19 	vmov	r0, r1, d9
 80171fa:	f7e9 f847 	bl	800028c <__adddf3>
 80171fe:	4602      	mov	r2, r0
 8017200:	460b      	mov	r3, r1
 8017202:	4640      	mov	r0, r8
 8017204:	4649      	mov	r1, r9
 8017206:	f7e9 fc87 	bl	8000b18 <__aeabi_dcmpgt>
 801720a:	2800      	cmp	r0, #0
 801720c:	d173      	bne.n	80172f6 <_dtoa_r+0x6e6>
 801720e:	ec53 2b19 	vmov	r2, r3, d9
 8017212:	4914      	ldr	r1, [pc, #80]	; (8017264 <_dtoa_r+0x654>)
 8017214:	2000      	movs	r0, #0
 8017216:	f7e9 f837 	bl	8000288 <__aeabi_dsub>
 801721a:	4602      	mov	r2, r0
 801721c:	460b      	mov	r3, r1
 801721e:	4640      	mov	r0, r8
 8017220:	4649      	mov	r1, r9
 8017222:	f7e9 fc5b 	bl	8000adc <__aeabi_dcmplt>
 8017226:	2800      	cmp	r0, #0
 8017228:	f43f af2f 	beq.w	801708a <_dtoa_r+0x47a>
 801722c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801722e:	1e6b      	subs	r3, r5, #1
 8017230:	930f      	str	r3, [sp, #60]	; 0x3c
 8017232:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017236:	2b30      	cmp	r3, #48	; 0x30
 8017238:	d0f8      	beq.n	801722c <_dtoa_r+0x61c>
 801723a:	46bb      	mov	fp, r7
 801723c:	e04a      	b.n	80172d4 <_dtoa_r+0x6c4>
 801723e:	4b06      	ldr	r3, [pc, #24]	; (8017258 <_dtoa_r+0x648>)
 8017240:	f7e9 f9da 	bl	80005f8 <__aeabi_dmul>
 8017244:	4680      	mov	r8, r0
 8017246:	4689      	mov	r9, r1
 8017248:	e7bd      	b.n	80171c6 <_dtoa_r+0x5b6>
 801724a:	bf00      	nop
 801724c:	0801dc80 	.word	0x0801dc80
 8017250:	0801dc58 	.word	0x0801dc58
 8017254:	3ff00000 	.word	0x3ff00000
 8017258:	40240000 	.word	0x40240000
 801725c:	401c0000 	.word	0x401c0000
 8017260:	40140000 	.word	0x40140000
 8017264:	3fe00000 	.word	0x3fe00000
 8017268:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801726c:	9d00      	ldr	r5, [sp, #0]
 801726e:	4642      	mov	r2, r8
 8017270:	464b      	mov	r3, r9
 8017272:	4630      	mov	r0, r6
 8017274:	4639      	mov	r1, r7
 8017276:	f7e9 fae9 	bl	800084c <__aeabi_ddiv>
 801727a:	f7e9 fc6d 	bl	8000b58 <__aeabi_d2iz>
 801727e:	9001      	str	r0, [sp, #4]
 8017280:	f7e9 f950 	bl	8000524 <__aeabi_i2d>
 8017284:	4642      	mov	r2, r8
 8017286:	464b      	mov	r3, r9
 8017288:	f7e9 f9b6 	bl	80005f8 <__aeabi_dmul>
 801728c:	4602      	mov	r2, r0
 801728e:	460b      	mov	r3, r1
 8017290:	4630      	mov	r0, r6
 8017292:	4639      	mov	r1, r7
 8017294:	f7e8 fff8 	bl	8000288 <__aeabi_dsub>
 8017298:	9e01      	ldr	r6, [sp, #4]
 801729a:	9f04      	ldr	r7, [sp, #16]
 801729c:	3630      	adds	r6, #48	; 0x30
 801729e:	f805 6b01 	strb.w	r6, [r5], #1
 80172a2:	9e00      	ldr	r6, [sp, #0]
 80172a4:	1bae      	subs	r6, r5, r6
 80172a6:	42b7      	cmp	r7, r6
 80172a8:	4602      	mov	r2, r0
 80172aa:	460b      	mov	r3, r1
 80172ac:	d134      	bne.n	8017318 <_dtoa_r+0x708>
 80172ae:	f7e8 ffed 	bl	800028c <__adddf3>
 80172b2:	4642      	mov	r2, r8
 80172b4:	464b      	mov	r3, r9
 80172b6:	4606      	mov	r6, r0
 80172b8:	460f      	mov	r7, r1
 80172ba:	f7e9 fc2d 	bl	8000b18 <__aeabi_dcmpgt>
 80172be:	b9c8      	cbnz	r0, 80172f4 <_dtoa_r+0x6e4>
 80172c0:	4642      	mov	r2, r8
 80172c2:	464b      	mov	r3, r9
 80172c4:	4630      	mov	r0, r6
 80172c6:	4639      	mov	r1, r7
 80172c8:	f7e9 fbfe 	bl	8000ac8 <__aeabi_dcmpeq>
 80172cc:	b110      	cbz	r0, 80172d4 <_dtoa_r+0x6c4>
 80172ce:	9b01      	ldr	r3, [sp, #4]
 80172d0:	07db      	lsls	r3, r3, #31
 80172d2:	d40f      	bmi.n	80172f4 <_dtoa_r+0x6e4>
 80172d4:	4651      	mov	r1, sl
 80172d6:	4620      	mov	r0, r4
 80172d8:	f000 fe82 	bl	8017fe0 <_Bfree>
 80172dc:	2300      	movs	r3, #0
 80172de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80172e0:	702b      	strb	r3, [r5, #0]
 80172e2:	f10b 0301 	add.w	r3, fp, #1
 80172e6:	6013      	str	r3, [r2, #0]
 80172e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	f43f ace2 	beq.w	8016cb4 <_dtoa_r+0xa4>
 80172f0:	601d      	str	r5, [r3, #0]
 80172f2:	e4df      	b.n	8016cb4 <_dtoa_r+0xa4>
 80172f4:	465f      	mov	r7, fp
 80172f6:	462b      	mov	r3, r5
 80172f8:	461d      	mov	r5, r3
 80172fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80172fe:	2a39      	cmp	r2, #57	; 0x39
 8017300:	d106      	bne.n	8017310 <_dtoa_r+0x700>
 8017302:	9a00      	ldr	r2, [sp, #0]
 8017304:	429a      	cmp	r2, r3
 8017306:	d1f7      	bne.n	80172f8 <_dtoa_r+0x6e8>
 8017308:	9900      	ldr	r1, [sp, #0]
 801730a:	2230      	movs	r2, #48	; 0x30
 801730c:	3701      	adds	r7, #1
 801730e:	700a      	strb	r2, [r1, #0]
 8017310:	781a      	ldrb	r2, [r3, #0]
 8017312:	3201      	adds	r2, #1
 8017314:	701a      	strb	r2, [r3, #0]
 8017316:	e790      	b.n	801723a <_dtoa_r+0x62a>
 8017318:	4ba3      	ldr	r3, [pc, #652]	; (80175a8 <_dtoa_r+0x998>)
 801731a:	2200      	movs	r2, #0
 801731c:	f7e9 f96c 	bl	80005f8 <__aeabi_dmul>
 8017320:	2200      	movs	r2, #0
 8017322:	2300      	movs	r3, #0
 8017324:	4606      	mov	r6, r0
 8017326:	460f      	mov	r7, r1
 8017328:	f7e9 fbce 	bl	8000ac8 <__aeabi_dcmpeq>
 801732c:	2800      	cmp	r0, #0
 801732e:	d09e      	beq.n	801726e <_dtoa_r+0x65e>
 8017330:	e7d0      	b.n	80172d4 <_dtoa_r+0x6c4>
 8017332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017334:	2a00      	cmp	r2, #0
 8017336:	f000 80ca 	beq.w	80174ce <_dtoa_r+0x8be>
 801733a:	9a07      	ldr	r2, [sp, #28]
 801733c:	2a01      	cmp	r2, #1
 801733e:	f300 80ad 	bgt.w	801749c <_dtoa_r+0x88c>
 8017342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017344:	2a00      	cmp	r2, #0
 8017346:	f000 80a5 	beq.w	8017494 <_dtoa_r+0x884>
 801734a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801734e:	9e08      	ldr	r6, [sp, #32]
 8017350:	9d05      	ldr	r5, [sp, #20]
 8017352:	9a05      	ldr	r2, [sp, #20]
 8017354:	441a      	add	r2, r3
 8017356:	9205      	str	r2, [sp, #20]
 8017358:	9a06      	ldr	r2, [sp, #24]
 801735a:	2101      	movs	r1, #1
 801735c:	441a      	add	r2, r3
 801735e:	4620      	mov	r0, r4
 8017360:	9206      	str	r2, [sp, #24]
 8017362:	f000 ff3d 	bl	80181e0 <__i2b>
 8017366:	4607      	mov	r7, r0
 8017368:	b165      	cbz	r5, 8017384 <_dtoa_r+0x774>
 801736a:	9b06      	ldr	r3, [sp, #24]
 801736c:	2b00      	cmp	r3, #0
 801736e:	dd09      	ble.n	8017384 <_dtoa_r+0x774>
 8017370:	42ab      	cmp	r3, r5
 8017372:	9a05      	ldr	r2, [sp, #20]
 8017374:	bfa8      	it	ge
 8017376:	462b      	movge	r3, r5
 8017378:	1ad2      	subs	r2, r2, r3
 801737a:	9205      	str	r2, [sp, #20]
 801737c:	9a06      	ldr	r2, [sp, #24]
 801737e:	1aed      	subs	r5, r5, r3
 8017380:	1ad3      	subs	r3, r2, r3
 8017382:	9306      	str	r3, [sp, #24]
 8017384:	9b08      	ldr	r3, [sp, #32]
 8017386:	b1f3      	cbz	r3, 80173c6 <_dtoa_r+0x7b6>
 8017388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801738a:	2b00      	cmp	r3, #0
 801738c:	f000 80a3 	beq.w	80174d6 <_dtoa_r+0x8c6>
 8017390:	2e00      	cmp	r6, #0
 8017392:	dd10      	ble.n	80173b6 <_dtoa_r+0x7a6>
 8017394:	4639      	mov	r1, r7
 8017396:	4632      	mov	r2, r6
 8017398:	4620      	mov	r0, r4
 801739a:	f000 ffe1 	bl	8018360 <__pow5mult>
 801739e:	4652      	mov	r2, sl
 80173a0:	4601      	mov	r1, r0
 80173a2:	4607      	mov	r7, r0
 80173a4:	4620      	mov	r0, r4
 80173a6:	f000 ff31 	bl	801820c <__multiply>
 80173aa:	4651      	mov	r1, sl
 80173ac:	4680      	mov	r8, r0
 80173ae:	4620      	mov	r0, r4
 80173b0:	f000 fe16 	bl	8017fe0 <_Bfree>
 80173b4:	46c2      	mov	sl, r8
 80173b6:	9b08      	ldr	r3, [sp, #32]
 80173b8:	1b9a      	subs	r2, r3, r6
 80173ba:	d004      	beq.n	80173c6 <_dtoa_r+0x7b6>
 80173bc:	4651      	mov	r1, sl
 80173be:	4620      	mov	r0, r4
 80173c0:	f000 ffce 	bl	8018360 <__pow5mult>
 80173c4:	4682      	mov	sl, r0
 80173c6:	2101      	movs	r1, #1
 80173c8:	4620      	mov	r0, r4
 80173ca:	f000 ff09 	bl	80181e0 <__i2b>
 80173ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	4606      	mov	r6, r0
 80173d4:	f340 8081 	ble.w	80174da <_dtoa_r+0x8ca>
 80173d8:	461a      	mov	r2, r3
 80173da:	4601      	mov	r1, r0
 80173dc:	4620      	mov	r0, r4
 80173de:	f000 ffbf 	bl	8018360 <__pow5mult>
 80173e2:	9b07      	ldr	r3, [sp, #28]
 80173e4:	2b01      	cmp	r3, #1
 80173e6:	4606      	mov	r6, r0
 80173e8:	dd7a      	ble.n	80174e0 <_dtoa_r+0x8d0>
 80173ea:	f04f 0800 	mov.w	r8, #0
 80173ee:	6933      	ldr	r3, [r6, #16]
 80173f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80173f4:	6918      	ldr	r0, [r3, #16]
 80173f6:	f000 fea5 	bl	8018144 <__hi0bits>
 80173fa:	f1c0 0020 	rsb	r0, r0, #32
 80173fe:	9b06      	ldr	r3, [sp, #24]
 8017400:	4418      	add	r0, r3
 8017402:	f010 001f 	ands.w	r0, r0, #31
 8017406:	f000 8094 	beq.w	8017532 <_dtoa_r+0x922>
 801740a:	f1c0 0320 	rsb	r3, r0, #32
 801740e:	2b04      	cmp	r3, #4
 8017410:	f340 8085 	ble.w	801751e <_dtoa_r+0x90e>
 8017414:	9b05      	ldr	r3, [sp, #20]
 8017416:	f1c0 001c 	rsb	r0, r0, #28
 801741a:	4403      	add	r3, r0
 801741c:	9305      	str	r3, [sp, #20]
 801741e:	9b06      	ldr	r3, [sp, #24]
 8017420:	4403      	add	r3, r0
 8017422:	4405      	add	r5, r0
 8017424:	9306      	str	r3, [sp, #24]
 8017426:	9b05      	ldr	r3, [sp, #20]
 8017428:	2b00      	cmp	r3, #0
 801742a:	dd05      	ble.n	8017438 <_dtoa_r+0x828>
 801742c:	4651      	mov	r1, sl
 801742e:	461a      	mov	r2, r3
 8017430:	4620      	mov	r0, r4
 8017432:	f000 ffef 	bl	8018414 <__lshift>
 8017436:	4682      	mov	sl, r0
 8017438:	9b06      	ldr	r3, [sp, #24]
 801743a:	2b00      	cmp	r3, #0
 801743c:	dd05      	ble.n	801744a <_dtoa_r+0x83a>
 801743e:	4631      	mov	r1, r6
 8017440:	461a      	mov	r2, r3
 8017442:	4620      	mov	r0, r4
 8017444:	f000 ffe6 	bl	8018414 <__lshift>
 8017448:	4606      	mov	r6, r0
 801744a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801744c:	2b00      	cmp	r3, #0
 801744e:	d072      	beq.n	8017536 <_dtoa_r+0x926>
 8017450:	4631      	mov	r1, r6
 8017452:	4650      	mov	r0, sl
 8017454:	f001 f84a 	bl	80184ec <__mcmp>
 8017458:	2800      	cmp	r0, #0
 801745a:	da6c      	bge.n	8017536 <_dtoa_r+0x926>
 801745c:	2300      	movs	r3, #0
 801745e:	4651      	mov	r1, sl
 8017460:	220a      	movs	r2, #10
 8017462:	4620      	mov	r0, r4
 8017464:	f000 fdde 	bl	8018024 <__multadd>
 8017468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801746a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801746e:	4682      	mov	sl, r0
 8017470:	2b00      	cmp	r3, #0
 8017472:	f000 81b0 	beq.w	80177d6 <_dtoa_r+0xbc6>
 8017476:	2300      	movs	r3, #0
 8017478:	4639      	mov	r1, r7
 801747a:	220a      	movs	r2, #10
 801747c:	4620      	mov	r0, r4
 801747e:	f000 fdd1 	bl	8018024 <__multadd>
 8017482:	9b01      	ldr	r3, [sp, #4]
 8017484:	2b00      	cmp	r3, #0
 8017486:	4607      	mov	r7, r0
 8017488:	f300 8096 	bgt.w	80175b8 <_dtoa_r+0x9a8>
 801748c:	9b07      	ldr	r3, [sp, #28]
 801748e:	2b02      	cmp	r3, #2
 8017490:	dc59      	bgt.n	8017546 <_dtoa_r+0x936>
 8017492:	e091      	b.n	80175b8 <_dtoa_r+0x9a8>
 8017494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017496:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801749a:	e758      	b.n	801734e <_dtoa_r+0x73e>
 801749c:	9b04      	ldr	r3, [sp, #16]
 801749e:	1e5e      	subs	r6, r3, #1
 80174a0:	9b08      	ldr	r3, [sp, #32]
 80174a2:	42b3      	cmp	r3, r6
 80174a4:	bfbf      	itttt	lt
 80174a6:	9b08      	ldrlt	r3, [sp, #32]
 80174a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80174aa:	9608      	strlt	r6, [sp, #32]
 80174ac:	1af3      	sublt	r3, r6, r3
 80174ae:	bfb4      	ite	lt
 80174b0:	18d2      	addlt	r2, r2, r3
 80174b2:	1b9e      	subge	r6, r3, r6
 80174b4:	9b04      	ldr	r3, [sp, #16]
 80174b6:	bfbc      	itt	lt
 80174b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80174ba:	2600      	movlt	r6, #0
 80174bc:	2b00      	cmp	r3, #0
 80174be:	bfb7      	itett	lt
 80174c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80174c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80174c8:	1a9d      	sublt	r5, r3, r2
 80174ca:	2300      	movlt	r3, #0
 80174cc:	e741      	b.n	8017352 <_dtoa_r+0x742>
 80174ce:	9e08      	ldr	r6, [sp, #32]
 80174d0:	9d05      	ldr	r5, [sp, #20]
 80174d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80174d4:	e748      	b.n	8017368 <_dtoa_r+0x758>
 80174d6:	9a08      	ldr	r2, [sp, #32]
 80174d8:	e770      	b.n	80173bc <_dtoa_r+0x7ac>
 80174da:	9b07      	ldr	r3, [sp, #28]
 80174dc:	2b01      	cmp	r3, #1
 80174de:	dc19      	bgt.n	8017514 <_dtoa_r+0x904>
 80174e0:	9b02      	ldr	r3, [sp, #8]
 80174e2:	b9bb      	cbnz	r3, 8017514 <_dtoa_r+0x904>
 80174e4:	9b03      	ldr	r3, [sp, #12]
 80174e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80174ea:	b99b      	cbnz	r3, 8017514 <_dtoa_r+0x904>
 80174ec:	9b03      	ldr	r3, [sp, #12]
 80174ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80174f2:	0d1b      	lsrs	r3, r3, #20
 80174f4:	051b      	lsls	r3, r3, #20
 80174f6:	b183      	cbz	r3, 801751a <_dtoa_r+0x90a>
 80174f8:	9b05      	ldr	r3, [sp, #20]
 80174fa:	3301      	adds	r3, #1
 80174fc:	9305      	str	r3, [sp, #20]
 80174fe:	9b06      	ldr	r3, [sp, #24]
 8017500:	3301      	adds	r3, #1
 8017502:	9306      	str	r3, [sp, #24]
 8017504:	f04f 0801 	mov.w	r8, #1
 8017508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801750a:	2b00      	cmp	r3, #0
 801750c:	f47f af6f 	bne.w	80173ee <_dtoa_r+0x7de>
 8017510:	2001      	movs	r0, #1
 8017512:	e774      	b.n	80173fe <_dtoa_r+0x7ee>
 8017514:	f04f 0800 	mov.w	r8, #0
 8017518:	e7f6      	b.n	8017508 <_dtoa_r+0x8f8>
 801751a:	4698      	mov	r8, r3
 801751c:	e7f4      	b.n	8017508 <_dtoa_r+0x8f8>
 801751e:	d082      	beq.n	8017426 <_dtoa_r+0x816>
 8017520:	9a05      	ldr	r2, [sp, #20]
 8017522:	331c      	adds	r3, #28
 8017524:	441a      	add	r2, r3
 8017526:	9205      	str	r2, [sp, #20]
 8017528:	9a06      	ldr	r2, [sp, #24]
 801752a:	441a      	add	r2, r3
 801752c:	441d      	add	r5, r3
 801752e:	9206      	str	r2, [sp, #24]
 8017530:	e779      	b.n	8017426 <_dtoa_r+0x816>
 8017532:	4603      	mov	r3, r0
 8017534:	e7f4      	b.n	8017520 <_dtoa_r+0x910>
 8017536:	9b04      	ldr	r3, [sp, #16]
 8017538:	2b00      	cmp	r3, #0
 801753a:	dc37      	bgt.n	80175ac <_dtoa_r+0x99c>
 801753c:	9b07      	ldr	r3, [sp, #28]
 801753e:	2b02      	cmp	r3, #2
 8017540:	dd34      	ble.n	80175ac <_dtoa_r+0x99c>
 8017542:	9b04      	ldr	r3, [sp, #16]
 8017544:	9301      	str	r3, [sp, #4]
 8017546:	9b01      	ldr	r3, [sp, #4]
 8017548:	b963      	cbnz	r3, 8017564 <_dtoa_r+0x954>
 801754a:	4631      	mov	r1, r6
 801754c:	2205      	movs	r2, #5
 801754e:	4620      	mov	r0, r4
 8017550:	f000 fd68 	bl	8018024 <__multadd>
 8017554:	4601      	mov	r1, r0
 8017556:	4606      	mov	r6, r0
 8017558:	4650      	mov	r0, sl
 801755a:	f000 ffc7 	bl	80184ec <__mcmp>
 801755e:	2800      	cmp	r0, #0
 8017560:	f73f adbb 	bgt.w	80170da <_dtoa_r+0x4ca>
 8017564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017566:	9d00      	ldr	r5, [sp, #0]
 8017568:	ea6f 0b03 	mvn.w	fp, r3
 801756c:	f04f 0800 	mov.w	r8, #0
 8017570:	4631      	mov	r1, r6
 8017572:	4620      	mov	r0, r4
 8017574:	f000 fd34 	bl	8017fe0 <_Bfree>
 8017578:	2f00      	cmp	r7, #0
 801757a:	f43f aeab 	beq.w	80172d4 <_dtoa_r+0x6c4>
 801757e:	f1b8 0f00 	cmp.w	r8, #0
 8017582:	d005      	beq.n	8017590 <_dtoa_r+0x980>
 8017584:	45b8      	cmp	r8, r7
 8017586:	d003      	beq.n	8017590 <_dtoa_r+0x980>
 8017588:	4641      	mov	r1, r8
 801758a:	4620      	mov	r0, r4
 801758c:	f000 fd28 	bl	8017fe0 <_Bfree>
 8017590:	4639      	mov	r1, r7
 8017592:	4620      	mov	r0, r4
 8017594:	f000 fd24 	bl	8017fe0 <_Bfree>
 8017598:	e69c      	b.n	80172d4 <_dtoa_r+0x6c4>
 801759a:	2600      	movs	r6, #0
 801759c:	4637      	mov	r7, r6
 801759e:	e7e1      	b.n	8017564 <_dtoa_r+0x954>
 80175a0:	46bb      	mov	fp, r7
 80175a2:	4637      	mov	r7, r6
 80175a4:	e599      	b.n	80170da <_dtoa_r+0x4ca>
 80175a6:	bf00      	nop
 80175a8:	40240000 	.word	0x40240000
 80175ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	f000 80c8 	beq.w	8017744 <_dtoa_r+0xb34>
 80175b4:	9b04      	ldr	r3, [sp, #16]
 80175b6:	9301      	str	r3, [sp, #4]
 80175b8:	2d00      	cmp	r5, #0
 80175ba:	dd05      	ble.n	80175c8 <_dtoa_r+0x9b8>
 80175bc:	4639      	mov	r1, r7
 80175be:	462a      	mov	r2, r5
 80175c0:	4620      	mov	r0, r4
 80175c2:	f000 ff27 	bl	8018414 <__lshift>
 80175c6:	4607      	mov	r7, r0
 80175c8:	f1b8 0f00 	cmp.w	r8, #0
 80175cc:	d05b      	beq.n	8017686 <_dtoa_r+0xa76>
 80175ce:	6879      	ldr	r1, [r7, #4]
 80175d0:	4620      	mov	r0, r4
 80175d2:	f000 fcc5 	bl	8017f60 <_Balloc>
 80175d6:	4605      	mov	r5, r0
 80175d8:	b928      	cbnz	r0, 80175e6 <_dtoa_r+0x9d6>
 80175da:	4b83      	ldr	r3, [pc, #524]	; (80177e8 <_dtoa_r+0xbd8>)
 80175dc:	4602      	mov	r2, r0
 80175de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80175e2:	f7ff bb2e 	b.w	8016c42 <_dtoa_r+0x32>
 80175e6:	693a      	ldr	r2, [r7, #16]
 80175e8:	3202      	adds	r2, #2
 80175ea:	0092      	lsls	r2, r2, #2
 80175ec:	f107 010c 	add.w	r1, r7, #12
 80175f0:	300c      	adds	r0, #12
 80175f2:	f7ff fa4a 	bl	8016a8a <memcpy>
 80175f6:	2201      	movs	r2, #1
 80175f8:	4629      	mov	r1, r5
 80175fa:	4620      	mov	r0, r4
 80175fc:	f000 ff0a 	bl	8018414 <__lshift>
 8017600:	9b00      	ldr	r3, [sp, #0]
 8017602:	3301      	adds	r3, #1
 8017604:	9304      	str	r3, [sp, #16]
 8017606:	e9dd 2300 	ldrd	r2, r3, [sp]
 801760a:	4413      	add	r3, r2
 801760c:	9308      	str	r3, [sp, #32]
 801760e:	9b02      	ldr	r3, [sp, #8]
 8017610:	f003 0301 	and.w	r3, r3, #1
 8017614:	46b8      	mov	r8, r7
 8017616:	9306      	str	r3, [sp, #24]
 8017618:	4607      	mov	r7, r0
 801761a:	9b04      	ldr	r3, [sp, #16]
 801761c:	4631      	mov	r1, r6
 801761e:	3b01      	subs	r3, #1
 8017620:	4650      	mov	r0, sl
 8017622:	9301      	str	r3, [sp, #4]
 8017624:	f7ff fa6c 	bl	8016b00 <quorem>
 8017628:	4641      	mov	r1, r8
 801762a:	9002      	str	r0, [sp, #8]
 801762c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017630:	4650      	mov	r0, sl
 8017632:	f000 ff5b 	bl	80184ec <__mcmp>
 8017636:	463a      	mov	r2, r7
 8017638:	9005      	str	r0, [sp, #20]
 801763a:	4631      	mov	r1, r6
 801763c:	4620      	mov	r0, r4
 801763e:	f000 ff71 	bl	8018524 <__mdiff>
 8017642:	68c2      	ldr	r2, [r0, #12]
 8017644:	4605      	mov	r5, r0
 8017646:	bb02      	cbnz	r2, 801768a <_dtoa_r+0xa7a>
 8017648:	4601      	mov	r1, r0
 801764a:	4650      	mov	r0, sl
 801764c:	f000 ff4e 	bl	80184ec <__mcmp>
 8017650:	4602      	mov	r2, r0
 8017652:	4629      	mov	r1, r5
 8017654:	4620      	mov	r0, r4
 8017656:	9209      	str	r2, [sp, #36]	; 0x24
 8017658:	f000 fcc2 	bl	8017fe0 <_Bfree>
 801765c:	9b07      	ldr	r3, [sp, #28]
 801765e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017660:	9d04      	ldr	r5, [sp, #16]
 8017662:	ea43 0102 	orr.w	r1, r3, r2
 8017666:	9b06      	ldr	r3, [sp, #24]
 8017668:	4319      	orrs	r1, r3
 801766a:	d110      	bne.n	801768e <_dtoa_r+0xa7e>
 801766c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017670:	d029      	beq.n	80176c6 <_dtoa_r+0xab6>
 8017672:	9b05      	ldr	r3, [sp, #20]
 8017674:	2b00      	cmp	r3, #0
 8017676:	dd02      	ble.n	801767e <_dtoa_r+0xa6e>
 8017678:	9b02      	ldr	r3, [sp, #8]
 801767a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801767e:	9b01      	ldr	r3, [sp, #4]
 8017680:	f883 9000 	strb.w	r9, [r3]
 8017684:	e774      	b.n	8017570 <_dtoa_r+0x960>
 8017686:	4638      	mov	r0, r7
 8017688:	e7ba      	b.n	8017600 <_dtoa_r+0x9f0>
 801768a:	2201      	movs	r2, #1
 801768c:	e7e1      	b.n	8017652 <_dtoa_r+0xa42>
 801768e:	9b05      	ldr	r3, [sp, #20]
 8017690:	2b00      	cmp	r3, #0
 8017692:	db04      	blt.n	801769e <_dtoa_r+0xa8e>
 8017694:	9907      	ldr	r1, [sp, #28]
 8017696:	430b      	orrs	r3, r1
 8017698:	9906      	ldr	r1, [sp, #24]
 801769a:	430b      	orrs	r3, r1
 801769c:	d120      	bne.n	80176e0 <_dtoa_r+0xad0>
 801769e:	2a00      	cmp	r2, #0
 80176a0:	dded      	ble.n	801767e <_dtoa_r+0xa6e>
 80176a2:	4651      	mov	r1, sl
 80176a4:	2201      	movs	r2, #1
 80176a6:	4620      	mov	r0, r4
 80176a8:	f000 feb4 	bl	8018414 <__lshift>
 80176ac:	4631      	mov	r1, r6
 80176ae:	4682      	mov	sl, r0
 80176b0:	f000 ff1c 	bl	80184ec <__mcmp>
 80176b4:	2800      	cmp	r0, #0
 80176b6:	dc03      	bgt.n	80176c0 <_dtoa_r+0xab0>
 80176b8:	d1e1      	bne.n	801767e <_dtoa_r+0xa6e>
 80176ba:	f019 0f01 	tst.w	r9, #1
 80176be:	d0de      	beq.n	801767e <_dtoa_r+0xa6e>
 80176c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80176c4:	d1d8      	bne.n	8017678 <_dtoa_r+0xa68>
 80176c6:	9a01      	ldr	r2, [sp, #4]
 80176c8:	2339      	movs	r3, #57	; 0x39
 80176ca:	7013      	strb	r3, [r2, #0]
 80176cc:	462b      	mov	r3, r5
 80176ce:	461d      	mov	r5, r3
 80176d0:	3b01      	subs	r3, #1
 80176d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80176d6:	2a39      	cmp	r2, #57	; 0x39
 80176d8:	d06c      	beq.n	80177b4 <_dtoa_r+0xba4>
 80176da:	3201      	adds	r2, #1
 80176dc:	701a      	strb	r2, [r3, #0]
 80176de:	e747      	b.n	8017570 <_dtoa_r+0x960>
 80176e0:	2a00      	cmp	r2, #0
 80176e2:	dd07      	ble.n	80176f4 <_dtoa_r+0xae4>
 80176e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80176e8:	d0ed      	beq.n	80176c6 <_dtoa_r+0xab6>
 80176ea:	9a01      	ldr	r2, [sp, #4]
 80176ec:	f109 0301 	add.w	r3, r9, #1
 80176f0:	7013      	strb	r3, [r2, #0]
 80176f2:	e73d      	b.n	8017570 <_dtoa_r+0x960>
 80176f4:	9b04      	ldr	r3, [sp, #16]
 80176f6:	9a08      	ldr	r2, [sp, #32]
 80176f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80176fc:	4293      	cmp	r3, r2
 80176fe:	d043      	beq.n	8017788 <_dtoa_r+0xb78>
 8017700:	4651      	mov	r1, sl
 8017702:	2300      	movs	r3, #0
 8017704:	220a      	movs	r2, #10
 8017706:	4620      	mov	r0, r4
 8017708:	f000 fc8c 	bl	8018024 <__multadd>
 801770c:	45b8      	cmp	r8, r7
 801770e:	4682      	mov	sl, r0
 8017710:	f04f 0300 	mov.w	r3, #0
 8017714:	f04f 020a 	mov.w	r2, #10
 8017718:	4641      	mov	r1, r8
 801771a:	4620      	mov	r0, r4
 801771c:	d107      	bne.n	801772e <_dtoa_r+0xb1e>
 801771e:	f000 fc81 	bl	8018024 <__multadd>
 8017722:	4680      	mov	r8, r0
 8017724:	4607      	mov	r7, r0
 8017726:	9b04      	ldr	r3, [sp, #16]
 8017728:	3301      	adds	r3, #1
 801772a:	9304      	str	r3, [sp, #16]
 801772c:	e775      	b.n	801761a <_dtoa_r+0xa0a>
 801772e:	f000 fc79 	bl	8018024 <__multadd>
 8017732:	4639      	mov	r1, r7
 8017734:	4680      	mov	r8, r0
 8017736:	2300      	movs	r3, #0
 8017738:	220a      	movs	r2, #10
 801773a:	4620      	mov	r0, r4
 801773c:	f000 fc72 	bl	8018024 <__multadd>
 8017740:	4607      	mov	r7, r0
 8017742:	e7f0      	b.n	8017726 <_dtoa_r+0xb16>
 8017744:	9b04      	ldr	r3, [sp, #16]
 8017746:	9301      	str	r3, [sp, #4]
 8017748:	9d00      	ldr	r5, [sp, #0]
 801774a:	4631      	mov	r1, r6
 801774c:	4650      	mov	r0, sl
 801774e:	f7ff f9d7 	bl	8016b00 <quorem>
 8017752:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017756:	9b00      	ldr	r3, [sp, #0]
 8017758:	f805 9b01 	strb.w	r9, [r5], #1
 801775c:	1aea      	subs	r2, r5, r3
 801775e:	9b01      	ldr	r3, [sp, #4]
 8017760:	4293      	cmp	r3, r2
 8017762:	dd07      	ble.n	8017774 <_dtoa_r+0xb64>
 8017764:	4651      	mov	r1, sl
 8017766:	2300      	movs	r3, #0
 8017768:	220a      	movs	r2, #10
 801776a:	4620      	mov	r0, r4
 801776c:	f000 fc5a 	bl	8018024 <__multadd>
 8017770:	4682      	mov	sl, r0
 8017772:	e7ea      	b.n	801774a <_dtoa_r+0xb3a>
 8017774:	9b01      	ldr	r3, [sp, #4]
 8017776:	2b00      	cmp	r3, #0
 8017778:	bfc8      	it	gt
 801777a:	461d      	movgt	r5, r3
 801777c:	9b00      	ldr	r3, [sp, #0]
 801777e:	bfd8      	it	le
 8017780:	2501      	movle	r5, #1
 8017782:	441d      	add	r5, r3
 8017784:	f04f 0800 	mov.w	r8, #0
 8017788:	4651      	mov	r1, sl
 801778a:	2201      	movs	r2, #1
 801778c:	4620      	mov	r0, r4
 801778e:	f000 fe41 	bl	8018414 <__lshift>
 8017792:	4631      	mov	r1, r6
 8017794:	4682      	mov	sl, r0
 8017796:	f000 fea9 	bl	80184ec <__mcmp>
 801779a:	2800      	cmp	r0, #0
 801779c:	dc96      	bgt.n	80176cc <_dtoa_r+0xabc>
 801779e:	d102      	bne.n	80177a6 <_dtoa_r+0xb96>
 80177a0:	f019 0f01 	tst.w	r9, #1
 80177a4:	d192      	bne.n	80176cc <_dtoa_r+0xabc>
 80177a6:	462b      	mov	r3, r5
 80177a8:	461d      	mov	r5, r3
 80177aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80177ae:	2a30      	cmp	r2, #48	; 0x30
 80177b0:	d0fa      	beq.n	80177a8 <_dtoa_r+0xb98>
 80177b2:	e6dd      	b.n	8017570 <_dtoa_r+0x960>
 80177b4:	9a00      	ldr	r2, [sp, #0]
 80177b6:	429a      	cmp	r2, r3
 80177b8:	d189      	bne.n	80176ce <_dtoa_r+0xabe>
 80177ba:	f10b 0b01 	add.w	fp, fp, #1
 80177be:	2331      	movs	r3, #49	; 0x31
 80177c0:	e796      	b.n	80176f0 <_dtoa_r+0xae0>
 80177c2:	4b0a      	ldr	r3, [pc, #40]	; (80177ec <_dtoa_r+0xbdc>)
 80177c4:	f7ff ba99 	b.w	8016cfa <_dtoa_r+0xea>
 80177c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	f47f aa6d 	bne.w	8016caa <_dtoa_r+0x9a>
 80177d0:	4b07      	ldr	r3, [pc, #28]	; (80177f0 <_dtoa_r+0xbe0>)
 80177d2:	f7ff ba92 	b.w	8016cfa <_dtoa_r+0xea>
 80177d6:	9b01      	ldr	r3, [sp, #4]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	dcb5      	bgt.n	8017748 <_dtoa_r+0xb38>
 80177dc:	9b07      	ldr	r3, [sp, #28]
 80177de:	2b02      	cmp	r3, #2
 80177e0:	f73f aeb1 	bgt.w	8017546 <_dtoa_r+0x936>
 80177e4:	e7b0      	b.n	8017748 <_dtoa_r+0xb38>
 80177e6:	bf00      	nop
 80177e8:	0801db8c 	.word	0x0801db8c
 80177ec:	0801da49 	.word	0x0801da49
 80177f0:	0801db27 	.word	0x0801db27

080177f4 <_free_r>:
 80177f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80177f6:	2900      	cmp	r1, #0
 80177f8:	d044      	beq.n	8017884 <_free_r+0x90>
 80177fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80177fe:	9001      	str	r0, [sp, #4]
 8017800:	2b00      	cmp	r3, #0
 8017802:	f1a1 0404 	sub.w	r4, r1, #4
 8017806:	bfb8      	it	lt
 8017808:	18e4      	addlt	r4, r4, r3
 801780a:	f7fd f93f 	bl	8014a8c <__malloc_lock>
 801780e:	4a1e      	ldr	r2, [pc, #120]	; (8017888 <_free_r+0x94>)
 8017810:	9801      	ldr	r0, [sp, #4]
 8017812:	6813      	ldr	r3, [r2, #0]
 8017814:	b933      	cbnz	r3, 8017824 <_free_r+0x30>
 8017816:	6063      	str	r3, [r4, #4]
 8017818:	6014      	str	r4, [r2, #0]
 801781a:	b003      	add	sp, #12
 801781c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017820:	f7fd b93a 	b.w	8014a98 <__malloc_unlock>
 8017824:	42a3      	cmp	r3, r4
 8017826:	d908      	bls.n	801783a <_free_r+0x46>
 8017828:	6825      	ldr	r5, [r4, #0]
 801782a:	1961      	adds	r1, r4, r5
 801782c:	428b      	cmp	r3, r1
 801782e:	bf01      	itttt	eq
 8017830:	6819      	ldreq	r1, [r3, #0]
 8017832:	685b      	ldreq	r3, [r3, #4]
 8017834:	1949      	addeq	r1, r1, r5
 8017836:	6021      	streq	r1, [r4, #0]
 8017838:	e7ed      	b.n	8017816 <_free_r+0x22>
 801783a:	461a      	mov	r2, r3
 801783c:	685b      	ldr	r3, [r3, #4]
 801783e:	b10b      	cbz	r3, 8017844 <_free_r+0x50>
 8017840:	42a3      	cmp	r3, r4
 8017842:	d9fa      	bls.n	801783a <_free_r+0x46>
 8017844:	6811      	ldr	r1, [r2, #0]
 8017846:	1855      	adds	r5, r2, r1
 8017848:	42a5      	cmp	r5, r4
 801784a:	d10b      	bne.n	8017864 <_free_r+0x70>
 801784c:	6824      	ldr	r4, [r4, #0]
 801784e:	4421      	add	r1, r4
 8017850:	1854      	adds	r4, r2, r1
 8017852:	42a3      	cmp	r3, r4
 8017854:	6011      	str	r1, [r2, #0]
 8017856:	d1e0      	bne.n	801781a <_free_r+0x26>
 8017858:	681c      	ldr	r4, [r3, #0]
 801785a:	685b      	ldr	r3, [r3, #4]
 801785c:	6053      	str	r3, [r2, #4]
 801785e:	440c      	add	r4, r1
 8017860:	6014      	str	r4, [r2, #0]
 8017862:	e7da      	b.n	801781a <_free_r+0x26>
 8017864:	d902      	bls.n	801786c <_free_r+0x78>
 8017866:	230c      	movs	r3, #12
 8017868:	6003      	str	r3, [r0, #0]
 801786a:	e7d6      	b.n	801781a <_free_r+0x26>
 801786c:	6825      	ldr	r5, [r4, #0]
 801786e:	1961      	adds	r1, r4, r5
 8017870:	428b      	cmp	r3, r1
 8017872:	bf04      	itt	eq
 8017874:	6819      	ldreq	r1, [r3, #0]
 8017876:	685b      	ldreq	r3, [r3, #4]
 8017878:	6063      	str	r3, [r4, #4]
 801787a:	bf04      	itt	eq
 801787c:	1949      	addeq	r1, r1, r5
 801787e:	6021      	streq	r1, [r4, #0]
 8017880:	6054      	str	r4, [r2, #4]
 8017882:	e7ca      	b.n	801781a <_free_r+0x26>
 8017884:	b003      	add	sp, #12
 8017886:	bd30      	pop	{r4, r5, pc}
 8017888:	200022f8 	.word	0x200022f8

0801788c <rshift>:
 801788c:	6903      	ldr	r3, [r0, #16]
 801788e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017892:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017896:	ea4f 1261 	mov.w	r2, r1, asr #5
 801789a:	f100 0414 	add.w	r4, r0, #20
 801789e:	dd45      	ble.n	801792c <rshift+0xa0>
 80178a0:	f011 011f 	ands.w	r1, r1, #31
 80178a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80178a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80178ac:	d10c      	bne.n	80178c8 <rshift+0x3c>
 80178ae:	f100 0710 	add.w	r7, r0, #16
 80178b2:	4629      	mov	r1, r5
 80178b4:	42b1      	cmp	r1, r6
 80178b6:	d334      	bcc.n	8017922 <rshift+0x96>
 80178b8:	1a9b      	subs	r3, r3, r2
 80178ba:	009b      	lsls	r3, r3, #2
 80178bc:	1eea      	subs	r2, r5, #3
 80178be:	4296      	cmp	r6, r2
 80178c0:	bf38      	it	cc
 80178c2:	2300      	movcc	r3, #0
 80178c4:	4423      	add	r3, r4
 80178c6:	e015      	b.n	80178f4 <rshift+0x68>
 80178c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80178cc:	f1c1 0820 	rsb	r8, r1, #32
 80178d0:	40cf      	lsrs	r7, r1
 80178d2:	f105 0e04 	add.w	lr, r5, #4
 80178d6:	46a1      	mov	r9, r4
 80178d8:	4576      	cmp	r6, lr
 80178da:	46f4      	mov	ip, lr
 80178dc:	d815      	bhi.n	801790a <rshift+0x7e>
 80178de:	1a9a      	subs	r2, r3, r2
 80178e0:	0092      	lsls	r2, r2, #2
 80178e2:	3a04      	subs	r2, #4
 80178e4:	3501      	adds	r5, #1
 80178e6:	42ae      	cmp	r6, r5
 80178e8:	bf38      	it	cc
 80178ea:	2200      	movcc	r2, #0
 80178ec:	18a3      	adds	r3, r4, r2
 80178ee:	50a7      	str	r7, [r4, r2]
 80178f0:	b107      	cbz	r7, 80178f4 <rshift+0x68>
 80178f2:	3304      	adds	r3, #4
 80178f4:	1b1a      	subs	r2, r3, r4
 80178f6:	42a3      	cmp	r3, r4
 80178f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80178fc:	bf08      	it	eq
 80178fe:	2300      	moveq	r3, #0
 8017900:	6102      	str	r2, [r0, #16]
 8017902:	bf08      	it	eq
 8017904:	6143      	streq	r3, [r0, #20]
 8017906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801790a:	f8dc c000 	ldr.w	ip, [ip]
 801790e:	fa0c fc08 	lsl.w	ip, ip, r8
 8017912:	ea4c 0707 	orr.w	r7, ip, r7
 8017916:	f849 7b04 	str.w	r7, [r9], #4
 801791a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801791e:	40cf      	lsrs	r7, r1
 8017920:	e7da      	b.n	80178d8 <rshift+0x4c>
 8017922:	f851 cb04 	ldr.w	ip, [r1], #4
 8017926:	f847 cf04 	str.w	ip, [r7, #4]!
 801792a:	e7c3      	b.n	80178b4 <rshift+0x28>
 801792c:	4623      	mov	r3, r4
 801792e:	e7e1      	b.n	80178f4 <rshift+0x68>

08017930 <__hexdig_fun>:
 8017930:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017934:	2b09      	cmp	r3, #9
 8017936:	d802      	bhi.n	801793e <__hexdig_fun+0xe>
 8017938:	3820      	subs	r0, #32
 801793a:	b2c0      	uxtb	r0, r0
 801793c:	4770      	bx	lr
 801793e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017942:	2b05      	cmp	r3, #5
 8017944:	d801      	bhi.n	801794a <__hexdig_fun+0x1a>
 8017946:	3847      	subs	r0, #71	; 0x47
 8017948:	e7f7      	b.n	801793a <__hexdig_fun+0xa>
 801794a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801794e:	2b05      	cmp	r3, #5
 8017950:	d801      	bhi.n	8017956 <__hexdig_fun+0x26>
 8017952:	3827      	subs	r0, #39	; 0x27
 8017954:	e7f1      	b.n	801793a <__hexdig_fun+0xa>
 8017956:	2000      	movs	r0, #0
 8017958:	4770      	bx	lr
	...

0801795c <__gethex>:
 801795c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017960:	4617      	mov	r7, r2
 8017962:	680a      	ldr	r2, [r1, #0]
 8017964:	b085      	sub	sp, #20
 8017966:	f102 0b02 	add.w	fp, r2, #2
 801796a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801796e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017972:	4681      	mov	r9, r0
 8017974:	468a      	mov	sl, r1
 8017976:	9302      	str	r3, [sp, #8]
 8017978:	32fe      	adds	r2, #254	; 0xfe
 801797a:	eb02 030b 	add.w	r3, r2, fp
 801797e:	46d8      	mov	r8, fp
 8017980:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8017984:	9301      	str	r3, [sp, #4]
 8017986:	2830      	cmp	r0, #48	; 0x30
 8017988:	d0f7      	beq.n	801797a <__gethex+0x1e>
 801798a:	f7ff ffd1 	bl	8017930 <__hexdig_fun>
 801798e:	4604      	mov	r4, r0
 8017990:	2800      	cmp	r0, #0
 8017992:	d138      	bne.n	8017a06 <__gethex+0xaa>
 8017994:	49a7      	ldr	r1, [pc, #668]	; (8017c34 <__gethex+0x2d8>)
 8017996:	2201      	movs	r2, #1
 8017998:	4640      	mov	r0, r8
 801799a:	f7fe ff62 	bl	8016862 <strncmp>
 801799e:	4606      	mov	r6, r0
 80179a0:	2800      	cmp	r0, #0
 80179a2:	d169      	bne.n	8017a78 <__gethex+0x11c>
 80179a4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80179a8:	465d      	mov	r5, fp
 80179aa:	f7ff ffc1 	bl	8017930 <__hexdig_fun>
 80179ae:	2800      	cmp	r0, #0
 80179b0:	d064      	beq.n	8017a7c <__gethex+0x120>
 80179b2:	465a      	mov	r2, fp
 80179b4:	7810      	ldrb	r0, [r2, #0]
 80179b6:	2830      	cmp	r0, #48	; 0x30
 80179b8:	4690      	mov	r8, r2
 80179ba:	f102 0201 	add.w	r2, r2, #1
 80179be:	d0f9      	beq.n	80179b4 <__gethex+0x58>
 80179c0:	f7ff ffb6 	bl	8017930 <__hexdig_fun>
 80179c4:	2301      	movs	r3, #1
 80179c6:	fab0 f480 	clz	r4, r0
 80179ca:	0964      	lsrs	r4, r4, #5
 80179cc:	465e      	mov	r6, fp
 80179ce:	9301      	str	r3, [sp, #4]
 80179d0:	4642      	mov	r2, r8
 80179d2:	4615      	mov	r5, r2
 80179d4:	3201      	adds	r2, #1
 80179d6:	7828      	ldrb	r0, [r5, #0]
 80179d8:	f7ff ffaa 	bl	8017930 <__hexdig_fun>
 80179dc:	2800      	cmp	r0, #0
 80179de:	d1f8      	bne.n	80179d2 <__gethex+0x76>
 80179e0:	4994      	ldr	r1, [pc, #592]	; (8017c34 <__gethex+0x2d8>)
 80179e2:	2201      	movs	r2, #1
 80179e4:	4628      	mov	r0, r5
 80179e6:	f7fe ff3c 	bl	8016862 <strncmp>
 80179ea:	b978      	cbnz	r0, 8017a0c <__gethex+0xb0>
 80179ec:	b946      	cbnz	r6, 8017a00 <__gethex+0xa4>
 80179ee:	1c6e      	adds	r6, r5, #1
 80179f0:	4632      	mov	r2, r6
 80179f2:	4615      	mov	r5, r2
 80179f4:	3201      	adds	r2, #1
 80179f6:	7828      	ldrb	r0, [r5, #0]
 80179f8:	f7ff ff9a 	bl	8017930 <__hexdig_fun>
 80179fc:	2800      	cmp	r0, #0
 80179fe:	d1f8      	bne.n	80179f2 <__gethex+0x96>
 8017a00:	1b73      	subs	r3, r6, r5
 8017a02:	009e      	lsls	r6, r3, #2
 8017a04:	e004      	b.n	8017a10 <__gethex+0xb4>
 8017a06:	2400      	movs	r4, #0
 8017a08:	4626      	mov	r6, r4
 8017a0a:	e7e1      	b.n	80179d0 <__gethex+0x74>
 8017a0c:	2e00      	cmp	r6, #0
 8017a0e:	d1f7      	bne.n	8017a00 <__gethex+0xa4>
 8017a10:	782b      	ldrb	r3, [r5, #0]
 8017a12:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017a16:	2b50      	cmp	r3, #80	; 0x50
 8017a18:	d13d      	bne.n	8017a96 <__gethex+0x13a>
 8017a1a:	786b      	ldrb	r3, [r5, #1]
 8017a1c:	2b2b      	cmp	r3, #43	; 0x2b
 8017a1e:	d02f      	beq.n	8017a80 <__gethex+0x124>
 8017a20:	2b2d      	cmp	r3, #45	; 0x2d
 8017a22:	d031      	beq.n	8017a88 <__gethex+0x12c>
 8017a24:	1c69      	adds	r1, r5, #1
 8017a26:	f04f 0b00 	mov.w	fp, #0
 8017a2a:	7808      	ldrb	r0, [r1, #0]
 8017a2c:	f7ff ff80 	bl	8017930 <__hexdig_fun>
 8017a30:	1e42      	subs	r2, r0, #1
 8017a32:	b2d2      	uxtb	r2, r2
 8017a34:	2a18      	cmp	r2, #24
 8017a36:	d82e      	bhi.n	8017a96 <__gethex+0x13a>
 8017a38:	f1a0 0210 	sub.w	r2, r0, #16
 8017a3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017a40:	f7ff ff76 	bl	8017930 <__hexdig_fun>
 8017a44:	f100 3cff 	add.w	ip, r0, #4294967295
 8017a48:	fa5f fc8c 	uxtb.w	ip, ip
 8017a4c:	f1bc 0f18 	cmp.w	ip, #24
 8017a50:	d91d      	bls.n	8017a8e <__gethex+0x132>
 8017a52:	f1bb 0f00 	cmp.w	fp, #0
 8017a56:	d000      	beq.n	8017a5a <__gethex+0xfe>
 8017a58:	4252      	negs	r2, r2
 8017a5a:	4416      	add	r6, r2
 8017a5c:	f8ca 1000 	str.w	r1, [sl]
 8017a60:	b1dc      	cbz	r4, 8017a9a <__gethex+0x13e>
 8017a62:	9b01      	ldr	r3, [sp, #4]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	bf14      	ite	ne
 8017a68:	f04f 0800 	movne.w	r8, #0
 8017a6c:	f04f 0806 	moveq.w	r8, #6
 8017a70:	4640      	mov	r0, r8
 8017a72:	b005      	add	sp, #20
 8017a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a78:	4645      	mov	r5, r8
 8017a7a:	4626      	mov	r6, r4
 8017a7c:	2401      	movs	r4, #1
 8017a7e:	e7c7      	b.n	8017a10 <__gethex+0xb4>
 8017a80:	f04f 0b00 	mov.w	fp, #0
 8017a84:	1ca9      	adds	r1, r5, #2
 8017a86:	e7d0      	b.n	8017a2a <__gethex+0xce>
 8017a88:	f04f 0b01 	mov.w	fp, #1
 8017a8c:	e7fa      	b.n	8017a84 <__gethex+0x128>
 8017a8e:	230a      	movs	r3, #10
 8017a90:	fb03 0002 	mla	r0, r3, r2, r0
 8017a94:	e7d0      	b.n	8017a38 <__gethex+0xdc>
 8017a96:	4629      	mov	r1, r5
 8017a98:	e7e0      	b.n	8017a5c <__gethex+0x100>
 8017a9a:	eba5 0308 	sub.w	r3, r5, r8
 8017a9e:	3b01      	subs	r3, #1
 8017aa0:	4621      	mov	r1, r4
 8017aa2:	2b07      	cmp	r3, #7
 8017aa4:	dc0a      	bgt.n	8017abc <__gethex+0x160>
 8017aa6:	4648      	mov	r0, r9
 8017aa8:	f000 fa5a 	bl	8017f60 <_Balloc>
 8017aac:	4604      	mov	r4, r0
 8017aae:	b940      	cbnz	r0, 8017ac2 <__gethex+0x166>
 8017ab0:	4b61      	ldr	r3, [pc, #388]	; (8017c38 <__gethex+0x2dc>)
 8017ab2:	4602      	mov	r2, r0
 8017ab4:	21e4      	movs	r1, #228	; 0xe4
 8017ab6:	4861      	ldr	r0, [pc, #388]	; (8017c3c <__gethex+0x2e0>)
 8017ab8:	f7ff f804 	bl	8016ac4 <__assert_func>
 8017abc:	3101      	adds	r1, #1
 8017abe:	105b      	asrs	r3, r3, #1
 8017ac0:	e7ef      	b.n	8017aa2 <__gethex+0x146>
 8017ac2:	f100 0a14 	add.w	sl, r0, #20
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	495a      	ldr	r1, [pc, #360]	; (8017c34 <__gethex+0x2d8>)
 8017aca:	f8cd a004 	str.w	sl, [sp, #4]
 8017ace:	469b      	mov	fp, r3
 8017ad0:	45a8      	cmp	r8, r5
 8017ad2:	d342      	bcc.n	8017b5a <__gethex+0x1fe>
 8017ad4:	9801      	ldr	r0, [sp, #4]
 8017ad6:	f840 bb04 	str.w	fp, [r0], #4
 8017ada:	eba0 000a 	sub.w	r0, r0, sl
 8017ade:	1080      	asrs	r0, r0, #2
 8017ae0:	6120      	str	r0, [r4, #16]
 8017ae2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8017ae6:	4658      	mov	r0, fp
 8017ae8:	f000 fb2c 	bl	8018144 <__hi0bits>
 8017aec:	683d      	ldr	r5, [r7, #0]
 8017aee:	eba8 0000 	sub.w	r0, r8, r0
 8017af2:	42a8      	cmp	r0, r5
 8017af4:	dd59      	ble.n	8017baa <__gethex+0x24e>
 8017af6:	eba0 0805 	sub.w	r8, r0, r5
 8017afa:	4641      	mov	r1, r8
 8017afc:	4620      	mov	r0, r4
 8017afe:	f000 febb 	bl	8018878 <__any_on>
 8017b02:	4683      	mov	fp, r0
 8017b04:	b1b8      	cbz	r0, 8017b36 <__gethex+0x1da>
 8017b06:	f108 33ff 	add.w	r3, r8, #4294967295
 8017b0a:	1159      	asrs	r1, r3, #5
 8017b0c:	f003 021f 	and.w	r2, r3, #31
 8017b10:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017b14:	f04f 0b01 	mov.w	fp, #1
 8017b18:	fa0b f202 	lsl.w	r2, fp, r2
 8017b1c:	420a      	tst	r2, r1
 8017b1e:	d00a      	beq.n	8017b36 <__gethex+0x1da>
 8017b20:	455b      	cmp	r3, fp
 8017b22:	dd06      	ble.n	8017b32 <__gethex+0x1d6>
 8017b24:	f1a8 0102 	sub.w	r1, r8, #2
 8017b28:	4620      	mov	r0, r4
 8017b2a:	f000 fea5 	bl	8018878 <__any_on>
 8017b2e:	2800      	cmp	r0, #0
 8017b30:	d138      	bne.n	8017ba4 <__gethex+0x248>
 8017b32:	f04f 0b02 	mov.w	fp, #2
 8017b36:	4641      	mov	r1, r8
 8017b38:	4620      	mov	r0, r4
 8017b3a:	f7ff fea7 	bl	801788c <rshift>
 8017b3e:	4446      	add	r6, r8
 8017b40:	68bb      	ldr	r3, [r7, #8]
 8017b42:	42b3      	cmp	r3, r6
 8017b44:	da41      	bge.n	8017bca <__gethex+0x26e>
 8017b46:	4621      	mov	r1, r4
 8017b48:	4648      	mov	r0, r9
 8017b4a:	f000 fa49 	bl	8017fe0 <_Bfree>
 8017b4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017b50:	2300      	movs	r3, #0
 8017b52:	6013      	str	r3, [r2, #0]
 8017b54:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8017b58:	e78a      	b.n	8017a70 <__gethex+0x114>
 8017b5a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8017b5e:	2a2e      	cmp	r2, #46	; 0x2e
 8017b60:	d014      	beq.n	8017b8c <__gethex+0x230>
 8017b62:	2b20      	cmp	r3, #32
 8017b64:	d106      	bne.n	8017b74 <__gethex+0x218>
 8017b66:	9b01      	ldr	r3, [sp, #4]
 8017b68:	f843 bb04 	str.w	fp, [r3], #4
 8017b6c:	f04f 0b00 	mov.w	fp, #0
 8017b70:	9301      	str	r3, [sp, #4]
 8017b72:	465b      	mov	r3, fp
 8017b74:	7828      	ldrb	r0, [r5, #0]
 8017b76:	9303      	str	r3, [sp, #12]
 8017b78:	f7ff feda 	bl	8017930 <__hexdig_fun>
 8017b7c:	9b03      	ldr	r3, [sp, #12]
 8017b7e:	f000 000f 	and.w	r0, r0, #15
 8017b82:	4098      	lsls	r0, r3
 8017b84:	ea4b 0b00 	orr.w	fp, fp, r0
 8017b88:	3304      	adds	r3, #4
 8017b8a:	e7a1      	b.n	8017ad0 <__gethex+0x174>
 8017b8c:	45a8      	cmp	r8, r5
 8017b8e:	d8e8      	bhi.n	8017b62 <__gethex+0x206>
 8017b90:	2201      	movs	r2, #1
 8017b92:	4628      	mov	r0, r5
 8017b94:	9303      	str	r3, [sp, #12]
 8017b96:	f7fe fe64 	bl	8016862 <strncmp>
 8017b9a:	4926      	ldr	r1, [pc, #152]	; (8017c34 <__gethex+0x2d8>)
 8017b9c:	9b03      	ldr	r3, [sp, #12]
 8017b9e:	2800      	cmp	r0, #0
 8017ba0:	d1df      	bne.n	8017b62 <__gethex+0x206>
 8017ba2:	e795      	b.n	8017ad0 <__gethex+0x174>
 8017ba4:	f04f 0b03 	mov.w	fp, #3
 8017ba8:	e7c5      	b.n	8017b36 <__gethex+0x1da>
 8017baa:	da0b      	bge.n	8017bc4 <__gethex+0x268>
 8017bac:	eba5 0800 	sub.w	r8, r5, r0
 8017bb0:	4621      	mov	r1, r4
 8017bb2:	4642      	mov	r2, r8
 8017bb4:	4648      	mov	r0, r9
 8017bb6:	f000 fc2d 	bl	8018414 <__lshift>
 8017bba:	eba6 0608 	sub.w	r6, r6, r8
 8017bbe:	4604      	mov	r4, r0
 8017bc0:	f100 0a14 	add.w	sl, r0, #20
 8017bc4:	f04f 0b00 	mov.w	fp, #0
 8017bc8:	e7ba      	b.n	8017b40 <__gethex+0x1e4>
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	42b3      	cmp	r3, r6
 8017bce:	dd73      	ble.n	8017cb8 <__gethex+0x35c>
 8017bd0:	1b9e      	subs	r6, r3, r6
 8017bd2:	42b5      	cmp	r5, r6
 8017bd4:	dc34      	bgt.n	8017c40 <__gethex+0x2e4>
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	2b02      	cmp	r3, #2
 8017bda:	d023      	beq.n	8017c24 <__gethex+0x2c8>
 8017bdc:	2b03      	cmp	r3, #3
 8017bde:	d025      	beq.n	8017c2c <__gethex+0x2d0>
 8017be0:	2b01      	cmp	r3, #1
 8017be2:	d115      	bne.n	8017c10 <__gethex+0x2b4>
 8017be4:	42b5      	cmp	r5, r6
 8017be6:	d113      	bne.n	8017c10 <__gethex+0x2b4>
 8017be8:	2d01      	cmp	r5, #1
 8017bea:	d10b      	bne.n	8017c04 <__gethex+0x2a8>
 8017bec:	9a02      	ldr	r2, [sp, #8]
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	6013      	str	r3, [r2, #0]
 8017bf2:	2301      	movs	r3, #1
 8017bf4:	6123      	str	r3, [r4, #16]
 8017bf6:	f8ca 3000 	str.w	r3, [sl]
 8017bfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017bfc:	f04f 0862 	mov.w	r8, #98	; 0x62
 8017c00:	601c      	str	r4, [r3, #0]
 8017c02:	e735      	b.n	8017a70 <__gethex+0x114>
 8017c04:	1e69      	subs	r1, r5, #1
 8017c06:	4620      	mov	r0, r4
 8017c08:	f000 fe36 	bl	8018878 <__any_on>
 8017c0c:	2800      	cmp	r0, #0
 8017c0e:	d1ed      	bne.n	8017bec <__gethex+0x290>
 8017c10:	4621      	mov	r1, r4
 8017c12:	4648      	mov	r0, r9
 8017c14:	f000 f9e4 	bl	8017fe0 <_Bfree>
 8017c18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	6013      	str	r3, [r2, #0]
 8017c1e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8017c22:	e725      	b.n	8017a70 <__gethex+0x114>
 8017c24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d1f2      	bne.n	8017c10 <__gethex+0x2b4>
 8017c2a:	e7df      	b.n	8017bec <__gethex+0x290>
 8017c2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d1dc      	bne.n	8017bec <__gethex+0x290>
 8017c32:	e7ed      	b.n	8017c10 <__gethex+0x2b4>
 8017c34:	0801d8e4 	.word	0x0801d8e4
 8017c38:	0801db8c 	.word	0x0801db8c
 8017c3c:	0801db9d 	.word	0x0801db9d
 8017c40:	f106 38ff 	add.w	r8, r6, #4294967295
 8017c44:	f1bb 0f00 	cmp.w	fp, #0
 8017c48:	d133      	bne.n	8017cb2 <__gethex+0x356>
 8017c4a:	f1b8 0f00 	cmp.w	r8, #0
 8017c4e:	d004      	beq.n	8017c5a <__gethex+0x2fe>
 8017c50:	4641      	mov	r1, r8
 8017c52:	4620      	mov	r0, r4
 8017c54:	f000 fe10 	bl	8018878 <__any_on>
 8017c58:	4683      	mov	fp, r0
 8017c5a:	ea4f 1268 	mov.w	r2, r8, asr #5
 8017c5e:	2301      	movs	r3, #1
 8017c60:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017c64:	f008 081f 	and.w	r8, r8, #31
 8017c68:	fa03 f308 	lsl.w	r3, r3, r8
 8017c6c:	4213      	tst	r3, r2
 8017c6e:	4631      	mov	r1, r6
 8017c70:	4620      	mov	r0, r4
 8017c72:	bf18      	it	ne
 8017c74:	f04b 0b02 	orrne.w	fp, fp, #2
 8017c78:	1bad      	subs	r5, r5, r6
 8017c7a:	f7ff fe07 	bl	801788c <rshift>
 8017c7e:	687e      	ldr	r6, [r7, #4]
 8017c80:	f04f 0802 	mov.w	r8, #2
 8017c84:	f1bb 0f00 	cmp.w	fp, #0
 8017c88:	d04a      	beq.n	8017d20 <__gethex+0x3c4>
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	2b02      	cmp	r3, #2
 8017c8e:	d016      	beq.n	8017cbe <__gethex+0x362>
 8017c90:	2b03      	cmp	r3, #3
 8017c92:	d018      	beq.n	8017cc6 <__gethex+0x36a>
 8017c94:	2b01      	cmp	r3, #1
 8017c96:	d109      	bne.n	8017cac <__gethex+0x350>
 8017c98:	f01b 0f02 	tst.w	fp, #2
 8017c9c:	d006      	beq.n	8017cac <__gethex+0x350>
 8017c9e:	f8da 3000 	ldr.w	r3, [sl]
 8017ca2:	ea4b 0b03 	orr.w	fp, fp, r3
 8017ca6:	f01b 0f01 	tst.w	fp, #1
 8017caa:	d10f      	bne.n	8017ccc <__gethex+0x370>
 8017cac:	f048 0810 	orr.w	r8, r8, #16
 8017cb0:	e036      	b.n	8017d20 <__gethex+0x3c4>
 8017cb2:	f04f 0b01 	mov.w	fp, #1
 8017cb6:	e7d0      	b.n	8017c5a <__gethex+0x2fe>
 8017cb8:	f04f 0801 	mov.w	r8, #1
 8017cbc:	e7e2      	b.n	8017c84 <__gethex+0x328>
 8017cbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017cc0:	f1c3 0301 	rsb	r3, r3, #1
 8017cc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8017cc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d0ef      	beq.n	8017cac <__gethex+0x350>
 8017ccc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017cd0:	f104 0214 	add.w	r2, r4, #20
 8017cd4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8017cd8:	9301      	str	r3, [sp, #4]
 8017cda:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8017cde:	2300      	movs	r3, #0
 8017ce0:	4694      	mov	ip, r2
 8017ce2:	f852 1b04 	ldr.w	r1, [r2], #4
 8017ce6:	f1b1 3fff 	cmp.w	r1, #4294967295
 8017cea:	d01e      	beq.n	8017d2a <__gethex+0x3ce>
 8017cec:	3101      	adds	r1, #1
 8017cee:	f8cc 1000 	str.w	r1, [ip]
 8017cf2:	f1b8 0f02 	cmp.w	r8, #2
 8017cf6:	f104 0214 	add.w	r2, r4, #20
 8017cfa:	d13d      	bne.n	8017d78 <__gethex+0x41c>
 8017cfc:	683b      	ldr	r3, [r7, #0]
 8017cfe:	3b01      	subs	r3, #1
 8017d00:	42ab      	cmp	r3, r5
 8017d02:	d10b      	bne.n	8017d1c <__gethex+0x3c0>
 8017d04:	1169      	asrs	r1, r5, #5
 8017d06:	2301      	movs	r3, #1
 8017d08:	f005 051f 	and.w	r5, r5, #31
 8017d0c:	fa03 f505 	lsl.w	r5, r3, r5
 8017d10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017d14:	421d      	tst	r5, r3
 8017d16:	bf18      	it	ne
 8017d18:	f04f 0801 	movne.w	r8, #1
 8017d1c:	f048 0820 	orr.w	r8, r8, #32
 8017d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017d22:	601c      	str	r4, [r3, #0]
 8017d24:	9b02      	ldr	r3, [sp, #8]
 8017d26:	601e      	str	r6, [r3, #0]
 8017d28:	e6a2      	b.n	8017a70 <__gethex+0x114>
 8017d2a:	4290      	cmp	r0, r2
 8017d2c:	f842 3c04 	str.w	r3, [r2, #-4]
 8017d30:	d8d6      	bhi.n	8017ce0 <__gethex+0x384>
 8017d32:	68a2      	ldr	r2, [r4, #8]
 8017d34:	4593      	cmp	fp, r2
 8017d36:	db17      	blt.n	8017d68 <__gethex+0x40c>
 8017d38:	6861      	ldr	r1, [r4, #4]
 8017d3a:	4648      	mov	r0, r9
 8017d3c:	3101      	adds	r1, #1
 8017d3e:	f000 f90f 	bl	8017f60 <_Balloc>
 8017d42:	4682      	mov	sl, r0
 8017d44:	b918      	cbnz	r0, 8017d4e <__gethex+0x3f2>
 8017d46:	4b1b      	ldr	r3, [pc, #108]	; (8017db4 <__gethex+0x458>)
 8017d48:	4602      	mov	r2, r0
 8017d4a:	2184      	movs	r1, #132	; 0x84
 8017d4c:	e6b3      	b.n	8017ab6 <__gethex+0x15a>
 8017d4e:	6922      	ldr	r2, [r4, #16]
 8017d50:	3202      	adds	r2, #2
 8017d52:	f104 010c 	add.w	r1, r4, #12
 8017d56:	0092      	lsls	r2, r2, #2
 8017d58:	300c      	adds	r0, #12
 8017d5a:	f7fe fe96 	bl	8016a8a <memcpy>
 8017d5e:	4621      	mov	r1, r4
 8017d60:	4648      	mov	r0, r9
 8017d62:	f000 f93d 	bl	8017fe0 <_Bfree>
 8017d66:	4654      	mov	r4, sl
 8017d68:	6922      	ldr	r2, [r4, #16]
 8017d6a:	1c51      	adds	r1, r2, #1
 8017d6c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017d70:	6121      	str	r1, [r4, #16]
 8017d72:	2101      	movs	r1, #1
 8017d74:	6151      	str	r1, [r2, #20]
 8017d76:	e7bc      	b.n	8017cf2 <__gethex+0x396>
 8017d78:	6921      	ldr	r1, [r4, #16]
 8017d7a:	4559      	cmp	r1, fp
 8017d7c:	dd0b      	ble.n	8017d96 <__gethex+0x43a>
 8017d7e:	2101      	movs	r1, #1
 8017d80:	4620      	mov	r0, r4
 8017d82:	f7ff fd83 	bl	801788c <rshift>
 8017d86:	68bb      	ldr	r3, [r7, #8]
 8017d88:	3601      	adds	r6, #1
 8017d8a:	42b3      	cmp	r3, r6
 8017d8c:	f6ff aedb 	blt.w	8017b46 <__gethex+0x1ea>
 8017d90:	f04f 0801 	mov.w	r8, #1
 8017d94:	e7c2      	b.n	8017d1c <__gethex+0x3c0>
 8017d96:	f015 051f 	ands.w	r5, r5, #31
 8017d9a:	d0f9      	beq.n	8017d90 <__gethex+0x434>
 8017d9c:	9b01      	ldr	r3, [sp, #4]
 8017d9e:	441a      	add	r2, r3
 8017da0:	f1c5 0520 	rsb	r5, r5, #32
 8017da4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8017da8:	f000 f9cc 	bl	8018144 <__hi0bits>
 8017dac:	42a8      	cmp	r0, r5
 8017dae:	dbe6      	blt.n	8017d7e <__gethex+0x422>
 8017db0:	e7ee      	b.n	8017d90 <__gethex+0x434>
 8017db2:	bf00      	nop
 8017db4:	0801db8c 	.word	0x0801db8c

08017db8 <L_shift>:
 8017db8:	f1c2 0208 	rsb	r2, r2, #8
 8017dbc:	0092      	lsls	r2, r2, #2
 8017dbe:	b570      	push	{r4, r5, r6, lr}
 8017dc0:	f1c2 0620 	rsb	r6, r2, #32
 8017dc4:	6843      	ldr	r3, [r0, #4]
 8017dc6:	6804      	ldr	r4, [r0, #0]
 8017dc8:	fa03 f506 	lsl.w	r5, r3, r6
 8017dcc:	432c      	orrs	r4, r5
 8017dce:	40d3      	lsrs	r3, r2
 8017dd0:	6004      	str	r4, [r0, #0]
 8017dd2:	f840 3f04 	str.w	r3, [r0, #4]!
 8017dd6:	4288      	cmp	r0, r1
 8017dd8:	d3f4      	bcc.n	8017dc4 <L_shift+0xc>
 8017dda:	bd70      	pop	{r4, r5, r6, pc}

08017ddc <__match>:
 8017ddc:	b530      	push	{r4, r5, lr}
 8017dde:	6803      	ldr	r3, [r0, #0]
 8017de0:	3301      	adds	r3, #1
 8017de2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017de6:	b914      	cbnz	r4, 8017dee <__match+0x12>
 8017de8:	6003      	str	r3, [r0, #0]
 8017dea:	2001      	movs	r0, #1
 8017dec:	bd30      	pop	{r4, r5, pc}
 8017dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017df2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017df6:	2d19      	cmp	r5, #25
 8017df8:	bf98      	it	ls
 8017dfa:	3220      	addls	r2, #32
 8017dfc:	42a2      	cmp	r2, r4
 8017dfe:	d0f0      	beq.n	8017de2 <__match+0x6>
 8017e00:	2000      	movs	r0, #0
 8017e02:	e7f3      	b.n	8017dec <__match+0x10>

08017e04 <__hexnan>:
 8017e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e08:	680b      	ldr	r3, [r1, #0]
 8017e0a:	6801      	ldr	r1, [r0, #0]
 8017e0c:	115e      	asrs	r6, r3, #5
 8017e0e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017e12:	f013 031f 	ands.w	r3, r3, #31
 8017e16:	b087      	sub	sp, #28
 8017e18:	bf18      	it	ne
 8017e1a:	3604      	addne	r6, #4
 8017e1c:	2500      	movs	r5, #0
 8017e1e:	1f37      	subs	r7, r6, #4
 8017e20:	4682      	mov	sl, r0
 8017e22:	4690      	mov	r8, r2
 8017e24:	9301      	str	r3, [sp, #4]
 8017e26:	f846 5c04 	str.w	r5, [r6, #-4]
 8017e2a:	46b9      	mov	r9, r7
 8017e2c:	463c      	mov	r4, r7
 8017e2e:	9502      	str	r5, [sp, #8]
 8017e30:	46ab      	mov	fp, r5
 8017e32:	784a      	ldrb	r2, [r1, #1]
 8017e34:	1c4b      	adds	r3, r1, #1
 8017e36:	9303      	str	r3, [sp, #12]
 8017e38:	b342      	cbz	r2, 8017e8c <__hexnan+0x88>
 8017e3a:	4610      	mov	r0, r2
 8017e3c:	9105      	str	r1, [sp, #20]
 8017e3e:	9204      	str	r2, [sp, #16]
 8017e40:	f7ff fd76 	bl	8017930 <__hexdig_fun>
 8017e44:	2800      	cmp	r0, #0
 8017e46:	d14f      	bne.n	8017ee8 <__hexnan+0xe4>
 8017e48:	9a04      	ldr	r2, [sp, #16]
 8017e4a:	9905      	ldr	r1, [sp, #20]
 8017e4c:	2a20      	cmp	r2, #32
 8017e4e:	d818      	bhi.n	8017e82 <__hexnan+0x7e>
 8017e50:	9b02      	ldr	r3, [sp, #8]
 8017e52:	459b      	cmp	fp, r3
 8017e54:	dd13      	ble.n	8017e7e <__hexnan+0x7a>
 8017e56:	454c      	cmp	r4, r9
 8017e58:	d206      	bcs.n	8017e68 <__hexnan+0x64>
 8017e5a:	2d07      	cmp	r5, #7
 8017e5c:	dc04      	bgt.n	8017e68 <__hexnan+0x64>
 8017e5e:	462a      	mov	r2, r5
 8017e60:	4649      	mov	r1, r9
 8017e62:	4620      	mov	r0, r4
 8017e64:	f7ff ffa8 	bl	8017db8 <L_shift>
 8017e68:	4544      	cmp	r4, r8
 8017e6a:	d950      	bls.n	8017f0e <__hexnan+0x10a>
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	f1a4 0904 	sub.w	r9, r4, #4
 8017e72:	f844 3c04 	str.w	r3, [r4, #-4]
 8017e76:	f8cd b008 	str.w	fp, [sp, #8]
 8017e7a:	464c      	mov	r4, r9
 8017e7c:	461d      	mov	r5, r3
 8017e7e:	9903      	ldr	r1, [sp, #12]
 8017e80:	e7d7      	b.n	8017e32 <__hexnan+0x2e>
 8017e82:	2a29      	cmp	r2, #41	; 0x29
 8017e84:	d155      	bne.n	8017f32 <__hexnan+0x12e>
 8017e86:	3102      	adds	r1, #2
 8017e88:	f8ca 1000 	str.w	r1, [sl]
 8017e8c:	f1bb 0f00 	cmp.w	fp, #0
 8017e90:	d04f      	beq.n	8017f32 <__hexnan+0x12e>
 8017e92:	454c      	cmp	r4, r9
 8017e94:	d206      	bcs.n	8017ea4 <__hexnan+0xa0>
 8017e96:	2d07      	cmp	r5, #7
 8017e98:	dc04      	bgt.n	8017ea4 <__hexnan+0xa0>
 8017e9a:	462a      	mov	r2, r5
 8017e9c:	4649      	mov	r1, r9
 8017e9e:	4620      	mov	r0, r4
 8017ea0:	f7ff ff8a 	bl	8017db8 <L_shift>
 8017ea4:	4544      	cmp	r4, r8
 8017ea6:	d934      	bls.n	8017f12 <__hexnan+0x10e>
 8017ea8:	f1a8 0204 	sub.w	r2, r8, #4
 8017eac:	4623      	mov	r3, r4
 8017eae:	f853 1b04 	ldr.w	r1, [r3], #4
 8017eb2:	f842 1f04 	str.w	r1, [r2, #4]!
 8017eb6:	429f      	cmp	r7, r3
 8017eb8:	d2f9      	bcs.n	8017eae <__hexnan+0xaa>
 8017eba:	1b3b      	subs	r3, r7, r4
 8017ebc:	f023 0303 	bic.w	r3, r3, #3
 8017ec0:	3304      	adds	r3, #4
 8017ec2:	3e03      	subs	r6, #3
 8017ec4:	3401      	adds	r4, #1
 8017ec6:	42a6      	cmp	r6, r4
 8017ec8:	bf38      	it	cc
 8017eca:	2304      	movcc	r3, #4
 8017ecc:	4443      	add	r3, r8
 8017ece:	2200      	movs	r2, #0
 8017ed0:	f843 2b04 	str.w	r2, [r3], #4
 8017ed4:	429f      	cmp	r7, r3
 8017ed6:	d2fb      	bcs.n	8017ed0 <__hexnan+0xcc>
 8017ed8:	683b      	ldr	r3, [r7, #0]
 8017eda:	b91b      	cbnz	r3, 8017ee4 <__hexnan+0xe0>
 8017edc:	4547      	cmp	r7, r8
 8017ede:	d126      	bne.n	8017f2e <__hexnan+0x12a>
 8017ee0:	2301      	movs	r3, #1
 8017ee2:	603b      	str	r3, [r7, #0]
 8017ee4:	2005      	movs	r0, #5
 8017ee6:	e025      	b.n	8017f34 <__hexnan+0x130>
 8017ee8:	3501      	adds	r5, #1
 8017eea:	2d08      	cmp	r5, #8
 8017eec:	f10b 0b01 	add.w	fp, fp, #1
 8017ef0:	dd06      	ble.n	8017f00 <__hexnan+0xfc>
 8017ef2:	4544      	cmp	r4, r8
 8017ef4:	d9c3      	bls.n	8017e7e <__hexnan+0x7a>
 8017ef6:	2300      	movs	r3, #0
 8017ef8:	f844 3c04 	str.w	r3, [r4, #-4]
 8017efc:	2501      	movs	r5, #1
 8017efe:	3c04      	subs	r4, #4
 8017f00:	6822      	ldr	r2, [r4, #0]
 8017f02:	f000 000f 	and.w	r0, r0, #15
 8017f06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017f0a:	6020      	str	r0, [r4, #0]
 8017f0c:	e7b7      	b.n	8017e7e <__hexnan+0x7a>
 8017f0e:	2508      	movs	r5, #8
 8017f10:	e7b5      	b.n	8017e7e <__hexnan+0x7a>
 8017f12:	9b01      	ldr	r3, [sp, #4]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d0df      	beq.n	8017ed8 <__hexnan+0xd4>
 8017f18:	f1c3 0320 	rsb	r3, r3, #32
 8017f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8017f20:	40da      	lsrs	r2, r3
 8017f22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017f26:	4013      	ands	r3, r2
 8017f28:	f846 3c04 	str.w	r3, [r6, #-4]
 8017f2c:	e7d4      	b.n	8017ed8 <__hexnan+0xd4>
 8017f2e:	3f04      	subs	r7, #4
 8017f30:	e7d2      	b.n	8017ed8 <__hexnan+0xd4>
 8017f32:	2004      	movs	r0, #4
 8017f34:	b007      	add	sp, #28
 8017f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017f3a <__ascii_mbtowc>:
 8017f3a:	b082      	sub	sp, #8
 8017f3c:	b901      	cbnz	r1, 8017f40 <__ascii_mbtowc+0x6>
 8017f3e:	a901      	add	r1, sp, #4
 8017f40:	b142      	cbz	r2, 8017f54 <__ascii_mbtowc+0x1a>
 8017f42:	b14b      	cbz	r3, 8017f58 <__ascii_mbtowc+0x1e>
 8017f44:	7813      	ldrb	r3, [r2, #0]
 8017f46:	600b      	str	r3, [r1, #0]
 8017f48:	7812      	ldrb	r2, [r2, #0]
 8017f4a:	1e10      	subs	r0, r2, #0
 8017f4c:	bf18      	it	ne
 8017f4e:	2001      	movne	r0, #1
 8017f50:	b002      	add	sp, #8
 8017f52:	4770      	bx	lr
 8017f54:	4610      	mov	r0, r2
 8017f56:	e7fb      	b.n	8017f50 <__ascii_mbtowc+0x16>
 8017f58:	f06f 0001 	mvn.w	r0, #1
 8017f5c:	e7f8      	b.n	8017f50 <__ascii_mbtowc+0x16>
	...

08017f60 <_Balloc>:
 8017f60:	b570      	push	{r4, r5, r6, lr}
 8017f62:	69c6      	ldr	r6, [r0, #28]
 8017f64:	4604      	mov	r4, r0
 8017f66:	460d      	mov	r5, r1
 8017f68:	b976      	cbnz	r6, 8017f88 <_Balloc+0x28>
 8017f6a:	2010      	movs	r0, #16
 8017f6c:	f7fc fcde 	bl	801492c <malloc>
 8017f70:	4602      	mov	r2, r0
 8017f72:	61e0      	str	r0, [r4, #28]
 8017f74:	b920      	cbnz	r0, 8017f80 <_Balloc+0x20>
 8017f76:	4b18      	ldr	r3, [pc, #96]	; (8017fd8 <_Balloc+0x78>)
 8017f78:	4818      	ldr	r0, [pc, #96]	; (8017fdc <_Balloc+0x7c>)
 8017f7a:	216b      	movs	r1, #107	; 0x6b
 8017f7c:	f7fe fda2 	bl	8016ac4 <__assert_func>
 8017f80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017f84:	6006      	str	r6, [r0, #0]
 8017f86:	60c6      	str	r6, [r0, #12]
 8017f88:	69e6      	ldr	r6, [r4, #28]
 8017f8a:	68f3      	ldr	r3, [r6, #12]
 8017f8c:	b183      	cbz	r3, 8017fb0 <_Balloc+0x50>
 8017f8e:	69e3      	ldr	r3, [r4, #28]
 8017f90:	68db      	ldr	r3, [r3, #12]
 8017f92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017f96:	b9b8      	cbnz	r0, 8017fc8 <_Balloc+0x68>
 8017f98:	2101      	movs	r1, #1
 8017f9a:	fa01 f605 	lsl.w	r6, r1, r5
 8017f9e:	1d72      	adds	r2, r6, #5
 8017fa0:	0092      	lsls	r2, r2, #2
 8017fa2:	4620      	mov	r0, r4
 8017fa4:	f000 fecf 	bl	8018d46 <_calloc_r>
 8017fa8:	b160      	cbz	r0, 8017fc4 <_Balloc+0x64>
 8017faa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017fae:	e00e      	b.n	8017fce <_Balloc+0x6e>
 8017fb0:	2221      	movs	r2, #33	; 0x21
 8017fb2:	2104      	movs	r1, #4
 8017fb4:	4620      	mov	r0, r4
 8017fb6:	f000 fec6 	bl	8018d46 <_calloc_r>
 8017fba:	69e3      	ldr	r3, [r4, #28]
 8017fbc:	60f0      	str	r0, [r6, #12]
 8017fbe:	68db      	ldr	r3, [r3, #12]
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d1e4      	bne.n	8017f8e <_Balloc+0x2e>
 8017fc4:	2000      	movs	r0, #0
 8017fc6:	bd70      	pop	{r4, r5, r6, pc}
 8017fc8:	6802      	ldr	r2, [r0, #0]
 8017fca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017fce:	2300      	movs	r3, #0
 8017fd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017fd4:	e7f7      	b.n	8017fc6 <_Balloc+0x66>
 8017fd6:	bf00      	nop
 8017fd8:	0801da72 	.word	0x0801da72
 8017fdc:	0801dbfd 	.word	0x0801dbfd

08017fe0 <_Bfree>:
 8017fe0:	b570      	push	{r4, r5, r6, lr}
 8017fe2:	69c6      	ldr	r6, [r0, #28]
 8017fe4:	4605      	mov	r5, r0
 8017fe6:	460c      	mov	r4, r1
 8017fe8:	b976      	cbnz	r6, 8018008 <_Bfree+0x28>
 8017fea:	2010      	movs	r0, #16
 8017fec:	f7fc fc9e 	bl	801492c <malloc>
 8017ff0:	4602      	mov	r2, r0
 8017ff2:	61e8      	str	r0, [r5, #28]
 8017ff4:	b920      	cbnz	r0, 8018000 <_Bfree+0x20>
 8017ff6:	4b09      	ldr	r3, [pc, #36]	; (801801c <_Bfree+0x3c>)
 8017ff8:	4809      	ldr	r0, [pc, #36]	; (8018020 <_Bfree+0x40>)
 8017ffa:	218f      	movs	r1, #143	; 0x8f
 8017ffc:	f7fe fd62 	bl	8016ac4 <__assert_func>
 8018000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018004:	6006      	str	r6, [r0, #0]
 8018006:	60c6      	str	r6, [r0, #12]
 8018008:	b13c      	cbz	r4, 801801a <_Bfree+0x3a>
 801800a:	69eb      	ldr	r3, [r5, #28]
 801800c:	6862      	ldr	r2, [r4, #4]
 801800e:	68db      	ldr	r3, [r3, #12]
 8018010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018014:	6021      	str	r1, [r4, #0]
 8018016:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801801a:	bd70      	pop	{r4, r5, r6, pc}
 801801c:	0801da72 	.word	0x0801da72
 8018020:	0801dbfd 	.word	0x0801dbfd

08018024 <__multadd>:
 8018024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018028:	690d      	ldr	r5, [r1, #16]
 801802a:	4607      	mov	r7, r0
 801802c:	460c      	mov	r4, r1
 801802e:	461e      	mov	r6, r3
 8018030:	f101 0c14 	add.w	ip, r1, #20
 8018034:	2000      	movs	r0, #0
 8018036:	f8dc 3000 	ldr.w	r3, [ip]
 801803a:	b299      	uxth	r1, r3
 801803c:	fb02 6101 	mla	r1, r2, r1, r6
 8018040:	0c1e      	lsrs	r6, r3, #16
 8018042:	0c0b      	lsrs	r3, r1, #16
 8018044:	fb02 3306 	mla	r3, r2, r6, r3
 8018048:	b289      	uxth	r1, r1
 801804a:	3001      	adds	r0, #1
 801804c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018050:	4285      	cmp	r5, r0
 8018052:	f84c 1b04 	str.w	r1, [ip], #4
 8018056:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801805a:	dcec      	bgt.n	8018036 <__multadd+0x12>
 801805c:	b30e      	cbz	r6, 80180a2 <__multadd+0x7e>
 801805e:	68a3      	ldr	r3, [r4, #8]
 8018060:	42ab      	cmp	r3, r5
 8018062:	dc19      	bgt.n	8018098 <__multadd+0x74>
 8018064:	6861      	ldr	r1, [r4, #4]
 8018066:	4638      	mov	r0, r7
 8018068:	3101      	adds	r1, #1
 801806a:	f7ff ff79 	bl	8017f60 <_Balloc>
 801806e:	4680      	mov	r8, r0
 8018070:	b928      	cbnz	r0, 801807e <__multadd+0x5a>
 8018072:	4602      	mov	r2, r0
 8018074:	4b0c      	ldr	r3, [pc, #48]	; (80180a8 <__multadd+0x84>)
 8018076:	480d      	ldr	r0, [pc, #52]	; (80180ac <__multadd+0x88>)
 8018078:	21ba      	movs	r1, #186	; 0xba
 801807a:	f7fe fd23 	bl	8016ac4 <__assert_func>
 801807e:	6922      	ldr	r2, [r4, #16]
 8018080:	3202      	adds	r2, #2
 8018082:	f104 010c 	add.w	r1, r4, #12
 8018086:	0092      	lsls	r2, r2, #2
 8018088:	300c      	adds	r0, #12
 801808a:	f7fe fcfe 	bl	8016a8a <memcpy>
 801808e:	4621      	mov	r1, r4
 8018090:	4638      	mov	r0, r7
 8018092:	f7ff ffa5 	bl	8017fe0 <_Bfree>
 8018096:	4644      	mov	r4, r8
 8018098:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801809c:	3501      	adds	r5, #1
 801809e:	615e      	str	r6, [r3, #20]
 80180a0:	6125      	str	r5, [r4, #16]
 80180a2:	4620      	mov	r0, r4
 80180a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180a8:	0801db8c 	.word	0x0801db8c
 80180ac:	0801dbfd 	.word	0x0801dbfd

080180b0 <__s2b>:
 80180b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80180b4:	460c      	mov	r4, r1
 80180b6:	4615      	mov	r5, r2
 80180b8:	461f      	mov	r7, r3
 80180ba:	2209      	movs	r2, #9
 80180bc:	3308      	adds	r3, #8
 80180be:	4606      	mov	r6, r0
 80180c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80180c4:	2100      	movs	r1, #0
 80180c6:	2201      	movs	r2, #1
 80180c8:	429a      	cmp	r2, r3
 80180ca:	db09      	blt.n	80180e0 <__s2b+0x30>
 80180cc:	4630      	mov	r0, r6
 80180ce:	f7ff ff47 	bl	8017f60 <_Balloc>
 80180d2:	b940      	cbnz	r0, 80180e6 <__s2b+0x36>
 80180d4:	4602      	mov	r2, r0
 80180d6:	4b19      	ldr	r3, [pc, #100]	; (801813c <__s2b+0x8c>)
 80180d8:	4819      	ldr	r0, [pc, #100]	; (8018140 <__s2b+0x90>)
 80180da:	21d3      	movs	r1, #211	; 0xd3
 80180dc:	f7fe fcf2 	bl	8016ac4 <__assert_func>
 80180e0:	0052      	lsls	r2, r2, #1
 80180e2:	3101      	adds	r1, #1
 80180e4:	e7f0      	b.n	80180c8 <__s2b+0x18>
 80180e6:	9b08      	ldr	r3, [sp, #32]
 80180e8:	6143      	str	r3, [r0, #20]
 80180ea:	2d09      	cmp	r5, #9
 80180ec:	f04f 0301 	mov.w	r3, #1
 80180f0:	6103      	str	r3, [r0, #16]
 80180f2:	dd16      	ble.n	8018122 <__s2b+0x72>
 80180f4:	f104 0909 	add.w	r9, r4, #9
 80180f8:	46c8      	mov	r8, r9
 80180fa:	442c      	add	r4, r5
 80180fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018100:	4601      	mov	r1, r0
 8018102:	3b30      	subs	r3, #48	; 0x30
 8018104:	220a      	movs	r2, #10
 8018106:	4630      	mov	r0, r6
 8018108:	f7ff ff8c 	bl	8018024 <__multadd>
 801810c:	45a0      	cmp	r8, r4
 801810e:	d1f5      	bne.n	80180fc <__s2b+0x4c>
 8018110:	f1a5 0408 	sub.w	r4, r5, #8
 8018114:	444c      	add	r4, r9
 8018116:	1b2d      	subs	r5, r5, r4
 8018118:	1963      	adds	r3, r4, r5
 801811a:	42bb      	cmp	r3, r7
 801811c:	db04      	blt.n	8018128 <__s2b+0x78>
 801811e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018122:	340a      	adds	r4, #10
 8018124:	2509      	movs	r5, #9
 8018126:	e7f6      	b.n	8018116 <__s2b+0x66>
 8018128:	f814 3b01 	ldrb.w	r3, [r4], #1
 801812c:	4601      	mov	r1, r0
 801812e:	3b30      	subs	r3, #48	; 0x30
 8018130:	220a      	movs	r2, #10
 8018132:	4630      	mov	r0, r6
 8018134:	f7ff ff76 	bl	8018024 <__multadd>
 8018138:	e7ee      	b.n	8018118 <__s2b+0x68>
 801813a:	bf00      	nop
 801813c:	0801db8c 	.word	0x0801db8c
 8018140:	0801dbfd 	.word	0x0801dbfd

08018144 <__hi0bits>:
 8018144:	0c03      	lsrs	r3, r0, #16
 8018146:	041b      	lsls	r3, r3, #16
 8018148:	b9d3      	cbnz	r3, 8018180 <__hi0bits+0x3c>
 801814a:	0400      	lsls	r0, r0, #16
 801814c:	2310      	movs	r3, #16
 801814e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018152:	bf04      	itt	eq
 8018154:	0200      	lsleq	r0, r0, #8
 8018156:	3308      	addeq	r3, #8
 8018158:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801815c:	bf04      	itt	eq
 801815e:	0100      	lsleq	r0, r0, #4
 8018160:	3304      	addeq	r3, #4
 8018162:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018166:	bf04      	itt	eq
 8018168:	0080      	lsleq	r0, r0, #2
 801816a:	3302      	addeq	r3, #2
 801816c:	2800      	cmp	r0, #0
 801816e:	db05      	blt.n	801817c <__hi0bits+0x38>
 8018170:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018174:	f103 0301 	add.w	r3, r3, #1
 8018178:	bf08      	it	eq
 801817a:	2320      	moveq	r3, #32
 801817c:	4618      	mov	r0, r3
 801817e:	4770      	bx	lr
 8018180:	2300      	movs	r3, #0
 8018182:	e7e4      	b.n	801814e <__hi0bits+0xa>

08018184 <__lo0bits>:
 8018184:	6803      	ldr	r3, [r0, #0]
 8018186:	f013 0207 	ands.w	r2, r3, #7
 801818a:	d00c      	beq.n	80181a6 <__lo0bits+0x22>
 801818c:	07d9      	lsls	r1, r3, #31
 801818e:	d422      	bmi.n	80181d6 <__lo0bits+0x52>
 8018190:	079a      	lsls	r2, r3, #30
 8018192:	bf49      	itett	mi
 8018194:	085b      	lsrmi	r3, r3, #1
 8018196:	089b      	lsrpl	r3, r3, #2
 8018198:	6003      	strmi	r3, [r0, #0]
 801819a:	2201      	movmi	r2, #1
 801819c:	bf5c      	itt	pl
 801819e:	6003      	strpl	r3, [r0, #0]
 80181a0:	2202      	movpl	r2, #2
 80181a2:	4610      	mov	r0, r2
 80181a4:	4770      	bx	lr
 80181a6:	b299      	uxth	r1, r3
 80181a8:	b909      	cbnz	r1, 80181ae <__lo0bits+0x2a>
 80181aa:	0c1b      	lsrs	r3, r3, #16
 80181ac:	2210      	movs	r2, #16
 80181ae:	b2d9      	uxtb	r1, r3
 80181b0:	b909      	cbnz	r1, 80181b6 <__lo0bits+0x32>
 80181b2:	3208      	adds	r2, #8
 80181b4:	0a1b      	lsrs	r3, r3, #8
 80181b6:	0719      	lsls	r1, r3, #28
 80181b8:	bf04      	itt	eq
 80181ba:	091b      	lsreq	r3, r3, #4
 80181bc:	3204      	addeq	r2, #4
 80181be:	0799      	lsls	r1, r3, #30
 80181c0:	bf04      	itt	eq
 80181c2:	089b      	lsreq	r3, r3, #2
 80181c4:	3202      	addeq	r2, #2
 80181c6:	07d9      	lsls	r1, r3, #31
 80181c8:	d403      	bmi.n	80181d2 <__lo0bits+0x4e>
 80181ca:	085b      	lsrs	r3, r3, #1
 80181cc:	f102 0201 	add.w	r2, r2, #1
 80181d0:	d003      	beq.n	80181da <__lo0bits+0x56>
 80181d2:	6003      	str	r3, [r0, #0]
 80181d4:	e7e5      	b.n	80181a2 <__lo0bits+0x1e>
 80181d6:	2200      	movs	r2, #0
 80181d8:	e7e3      	b.n	80181a2 <__lo0bits+0x1e>
 80181da:	2220      	movs	r2, #32
 80181dc:	e7e1      	b.n	80181a2 <__lo0bits+0x1e>
	...

080181e0 <__i2b>:
 80181e0:	b510      	push	{r4, lr}
 80181e2:	460c      	mov	r4, r1
 80181e4:	2101      	movs	r1, #1
 80181e6:	f7ff febb 	bl	8017f60 <_Balloc>
 80181ea:	4602      	mov	r2, r0
 80181ec:	b928      	cbnz	r0, 80181fa <__i2b+0x1a>
 80181ee:	4b05      	ldr	r3, [pc, #20]	; (8018204 <__i2b+0x24>)
 80181f0:	4805      	ldr	r0, [pc, #20]	; (8018208 <__i2b+0x28>)
 80181f2:	f240 1145 	movw	r1, #325	; 0x145
 80181f6:	f7fe fc65 	bl	8016ac4 <__assert_func>
 80181fa:	2301      	movs	r3, #1
 80181fc:	6144      	str	r4, [r0, #20]
 80181fe:	6103      	str	r3, [r0, #16]
 8018200:	bd10      	pop	{r4, pc}
 8018202:	bf00      	nop
 8018204:	0801db8c 	.word	0x0801db8c
 8018208:	0801dbfd 	.word	0x0801dbfd

0801820c <__multiply>:
 801820c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018210:	4691      	mov	r9, r2
 8018212:	690a      	ldr	r2, [r1, #16]
 8018214:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018218:	429a      	cmp	r2, r3
 801821a:	bfb8      	it	lt
 801821c:	460b      	movlt	r3, r1
 801821e:	460c      	mov	r4, r1
 8018220:	bfbc      	itt	lt
 8018222:	464c      	movlt	r4, r9
 8018224:	4699      	movlt	r9, r3
 8018226:	6927      	ldr	r7, [r4, #16]
 8018228:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801822c:	68a3      	ldr	r3, [r4, #8]
 801822e:	6861      	ldr	r1, [r4, #4]
 8018230:	eb07 060a 	add.w	r6, r7, sl
 8018234:	42b3      	cmp	r3, r6
 8018236:	b085      	sub	sp, #20
 8018238:	bfb8      	it	lt
 801823a:	3101      	addlt	r1, #1
 801823c:	f7ff fe90 	bl	8017f60 <_Balloc>
 8018240:	b930      	cbnz	r0, 8018250 <__multiply+0x44>
 8018242:	4602      	mov	r2, r0
 8018244:	4b44      	ldr	r3, [pc, #272]	; (8018358 <__multiply+0x14c>)
 8018246:	4845      	ldr	r0, [pc, #276]	; (801835c <__multiply+0x150>)
 8018248:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801824c:	f7fe fc3a 	bl	8016ac4 <__assert_func>
 8018250:	f100 0514 	add.w	r5, r0, #20
 8018254:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018258:	462b      	mov	r3, r5
 801825a:	2200      	movs	r2, #0
 801825c:	4543      	cmp	r3, r8
 801825e:	d321      	bcc.n	80182a4 <__multiply+0x98>
 8018260:	f104 0314 	add.w	r3, r4, #20
 8018264:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018268:	f109 0314 	add.w	r3, r9, #20
 801826c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018270:	9202      	str	r2, [sp, #8]
 8018272:	1b3a      	subs	r2, r7, r4
 8018274:	3a15      	subs	r2, #21
 8018276:	f022 0203 	bic.w	r2, r2, #3
 801827a:	3204      	adds	r2, #4
 801827c:	f104 0115 	add.w	r1, r4, #21
 8018280:	428f      	cmp	r7, r1
 8018282:	bf38      	it	cc
 8018284:	2204      	movcc	r2, #4
 8018286:	9201      	str	r2, [sp, #4]
 8018288:	9a02      	ldr	r2, [sp, #8]
 801828a:	9303      	str	r3, [sp, #12]
 801828c:	429a      	cmp	r2, r3
 801828e:	d80c      	bhi.n	80182aa <__multiply+0x9e>
 8018290:	2e00      	cmp	r6, #0
 8018292:	dd03      	ble.n	801829c <__multiply+0x90>
 8018294:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018298:	2b00      	cmp	r3, #0
 801829a:	d05b      	beq.n	8018354 <__multiply+0x148>
 801829c:	6106      	str	r6, [r0, #16]
 801829e:	b005      	add	sp, #20
 80182a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182a4:	f843 2b04 	str.w	r2, [r3], #4
 80182a8:	e7d8      	b.n	801825c <__multiply+0x50>
 80182aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80182ae:	f1ba 0f00 	cmp.w	sl, #0
 80182b2:	d024      	beq.n	80182fe <__multiply+0xf2>
 80182b4:	f104 0e14 	add.w	lr, r4, #20
 80182b8:	46a9      	mov	r9, r5
 80182ba:	f04f 0c00 	mov.w	ip, #0
 80182be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80182c2:	f8d9 1000 	ldr.w	r1, [r9]
 80182c6:	fa1f fb82 	uxth.w	fp, r2
 80182ca:	b289      	uxth	r1, r1
 80182cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80182d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80182d4:	f8d9 2000 	ldr.w	r2, [r9]
 80182d8:	4461      	add	r1, ip
 80182da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80182de:	fb0a c20b 	mla	r2, sl, fp, ip
 80182e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80182e6:	b289      	uxth	r1, r1
 80182e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80182ec:	4577      	cmp	r7, lr
 80182ee:	f849 1b04 	str.w	r1, [r9], #4
 80182f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80182f6:	d8e2      	bhi.n	80182be <__multiply+0xb2>
 80182f8:	9a01      	ldr	r2, [sp, #4]
 80182fa:	f845 c002 	str.w	ip, [r5, r2]
 80182fe:	9a03      	ldr	r2, [sp, #12]
 8018300:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018304:	3304      	adds	r3, #4
 8018306:	f1b9 0f00 	cmp.w	r9, #0
 801830a:	d021      	beq.n	8018350 <__multiply+0x144>
 801830c:	6829      	ldr	r1, [r5, #0]
 801830e:	f104 0c14 	add.w	ip, r4, #20
 8018312:	46ae      	mov	lr, r5
 8018314:	f04f 0a00 	mov.w	sl, #0
 8018318:	f8bc b000 	ldrh.w	fp, [ip]
 801831c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018320:	fb09 220b 	mla	r2, r9, fp, r2
 8018324:	4452      	add	r2, sl
 8018326:	b289      	uxth	r1, r1
 8018328:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801832c:	f84e 1b04 	str.w	r1, [lr], #4
 8018330:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018334:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018338:	f8be 1000 	ldrh.w	r1, [lr]
 801833c:	fb09 110a 	mla	r1, r9, sl, r1
 8018340:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8018344:	4567      	cmp	r7, ip
 8018346:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801834a:	d8e5      	bhi.n	8018318 <__multiply+0x10c>
 801834c:	9a01      	ldr	r2, [sp, #4]
 801834e:	50a9      	str	r1, [r5, r2]
 8018350:	3504      	adds	r5, #4
 8018352:	e799      	b.n	8018288 <__multiply+0x7c>
 8018354:	3e01      	subs	r6, #1
 8018356:	e79b      	b.n	8018290 <__multiply+0x84>
 8018358:	0801db8c 	.word	0x0801db8c
 801835c:	0801dbfd 	.word	0x0801dbfd

08018360 <__pow5mult>:
 8018360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018364:	4615      	mov	r5, r2
 8018366:	f012 0203 	ands.w	r2, r2, #3
 801836a:	4606      	mov	r6, r0
 801836c:	460f      	mov	r7, r1
 801836e:	d007      	beq.n	8018380 <__pow5mult+0x20>
 8018370:	4c25      	ldr	r4, [pc, #148]	; (8018408 <__pow5mult+0xa8>)
 8018372:	3a01      	subs	r2, #1
 8018374:	2300      	movs	r3, #0
 8018376:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801837a:	f7ff fe53 	bl	8018024 <__multadd>
 801837e:	4607      	mov	r7, r0
 8018380:	10ad      	asrs	r5, r5, #2
 8018382:	d03d      	beq.n	8018400 <__pow5mult+0xa0>
 8018384:	69f4      	ldr	r4, [r6, #28]
 8018386:	b97c      	cbnz	r4, 80183a8 <__pow5mult+0x48>
 8018388:	2010      	movs	r0, #16
 801838a:	f7fc facf 	bl	801492c <malloc>
 801838e:	4602      	mov	r2, r0
 8018390:	61f0      	str	r0, [r6, #28]
 8018392:	b928      	cbnz	r0, 80183a0 <__pow5mult+0x40>
 8018394:	4b1d      	ldr	r3, [pc, #116]	; (801840c <__pow5mult+0xac>)
 8018396:	481e      	ldr	r0, [pc, #120]	; (8018410 <__pow5mult+0xb0>)
 8018398:	f240 11b3 	movw	r1, #435	; 0x1b3
 801839c:	f7fe fb92 	bl	8016ac4 <__assert_func>
 80183a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80183a4:	6004      	str	r4, [r0, #0]
 80183a6:	60c4      	str	r4, [r0, #12]
 80183a8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80183ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80183b0:	b94c      	cbnz	r4, 80183c6 <__pow5mult+0x66>
 80183b2:	f240 2171 	movw	r1, #625	; 0x271
 80183b6:	4630      	mov	r0, r6
 80183b8:	f7ff ff12 	bl	80181e0 <__i2b>
 80183bc:	2300      	movs	r3, #0
 80183be:	f8c8 0008 	str.w	r0, [r8, #8]
 80183c2:	4604      	mov	r4, r0
 80183c4:	6003      	str	r3, [r0, #0]
 80183c6:	f04f 0900 	mov.w	r9, #0
 80183ca:	07eb      	lsls	r3, r5, #31
 80183cc:	d50a      	bpl.n	80183e4 <__pow5mult+0x84>
 80183ce:	4639      	mov	r1, r7
 80183d0:	4622      	mov	r2, r4
 80183d2:	4630      	mov	r0, r6
 80183d4:	f7ff ff1a 	bl	801820c <__multiply>
 80183d8:	4639      	mov	r1, r7
 80183da:	4680      	mov	r8, r0
 80183dc:	4630      	mov	r0, r6
 80183de:	f7ff fdff 	bl	8017fe0 <_Bfree>
 80183e2:	4647      	mov	r7, r8
 80183e4:	106d      	asrs	r5, r5, #1
 80183e6:	d00b      	beq.n	8018400 <__pow5mult+0xa0>
 80183e8:	6820      	ldr	r0, [r4, #0]
 80183ea:	b938      	cbnz	r0, 80183fc <__pow5mult+0x9c>
 80183ec:	4622      	mov	r2, r4
 80183ee:	4621      	mov	r1, r4
 80183f0:	4630      	mov	r0, r6
 80183f2:	f7ff ff0b 	bl	801820c <__multiply>
 80183f6:	6020      	str	r0, [r4, #0]
 80183f8:	f8c0 9000 	str.w	r9, [r0]
 80183fc:	4604      	mov	r4, r0
 80183fe:	e7e4      	b.n	80183ca <__pow5mult+0x6a>
 8018400:	4638      	mov	r0, r7
 8018402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018406:	bf00      	nop
 8018408:	0801dd48 	.word	0x0801dd48
 801840c:	0801da72 	.word	0x0801da72
 8018410:	0801dbfd 	.word	0x0801dbfd

08018414 <__lshift>:
 8018414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018418:	460c      	mov	r4, r1
 801841a:	6849      	ldr	r1, [r1, #4]
 801841c:	6923      	ldr	r3, [r4, #16]
 801841e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018422:	68a3      	ldr	r3, [r4, #8]
 8018424:	4607      	mov	r7, r0
 8018426:	4691      	mov	r9, r2
 8018428:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801842c:	f108 0601 	add.w	r6, r8, #1
 8018430:	42b3      	cmp	r3, r6
 8018432:	db0b      	blt.n	801844c <__lshift+0x38>
 8018434:	4638      	mov	r0, r7
 8018436:	f7ff fd93 	bl	8017f60 <_Balloc>
 801843a:	4605      	mov	r5, r0
 801843c:	b948      	cbnz	r0, 8018452 <__lshift+0x3e>
 801843e:	4602      	mov	r2, r0
 8018440:	4b28      	ldr	r3, [pc, #160]	; (80184e4 <__lshift+0xd0>)
 8018442:	4829      	ldr	r0, [pc, #164]	; (80184e8 <__lshift+0xd4>)
 8018444:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8018448:	f7fe fb3c 	bl	8016ac4 <__assert_func>
 801844c:	3101      	adds	r1, #1
 801844e:	005b      	lsls	r3, r3, #1
 8018450:	e7ee      	b.n	8018430 <__lshift+0x1c>
 8018452:	2300      	movs	r3, #0
 8018454:	f100 0114 	add.w	r1, r0, #20
 8018458:	f100 0210 	add.w	r2, r0, #16
 801845c:	4618      	mov	r0, r3
 801845e:	4553      	cmp	r3, sl
 8018460:	db33      	blt.n	80184ca <__lshift+0xb6>
 8018462:	6920      	ldr	r0, [r4, #16]
 8018464:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018468:	f104 0314 	add.w	r3, r4, #20
 801846c:	f019 091f 	ands.w	r9, r9, #31
 8018470:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018474:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018478:	d02b      	beq.n	80184d2 <__lshift+0xbe>
 801847a:	f1c9 0e20 	rsb	lr, r9, #32
 801847e:	468a      	mov	sl, r1
 8018480:	2200      	movs	r2, #0
 8018482:	6818      	ldr	r0, [r3, #0]
 8018484:	fa00 f009 	lsl.w	r0, r0, r9
 8018488:	4310      	orrs	r0, r2
 801848a:	f84a 0b04 	str.w	r0, [sl], #4
 801848e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018492:	459c      	cmp	ip, r3
 8018494:	fa22 f20e 	lsr.w	r2, r2, lr
 8018498:	d8f3      	bhi.n	8018482 <__lshift+0x6e>
 801849a:	ebac 0304 	sub.w	r3, ip, r4
 801849e:	3b15      	subs	r3, #21
 80184a0:	f023 0303 	bic.w	r3, r3, #3
 80184a4:	3304      	adds	r3, #4
 80184a6:	f104 0015 	add.w	r0, r4, #21
 80184aa:	4584      	cmp	ip, r0
 80184ac:	bf38      	it	cc
 80184ae:	2304      	movcc	r3, #4
 80184b0:	50ca      	str	r2, [r1, r3]
 80184b2:	b10a      	cbz	r2, 80184b8 <__lshift+0xa4>
 80184b4:	f108 0602 	add.w	r6, r8, #2
 80184b8:	3e01      	subs	r6, #1
 80184ba:	4638      	mov	r0, r7
 80184bc:	612e      	str	r6, [r5, #16]
 80184be:	4621      	mov	r1, r4
 80184c0:	f7ff fd8e 	bl	8017fe0 <_Bfree>
 80184c4:	4628      	mov	r0, r5
 80184c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80184ce:	3301      	adds	r3, #1
 80184d0:	e7c5      	b.n	801845e <__lshift+0x4a>
 80184d2:	3904      	subs	r1, #4
 80184d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80184d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80184dc:	459c      	cmp	ip, r3
 80184de:	d8f9      	bhi.n	80184d4 <__lshift+0xc0>
 80184e0:	e7ea      	b.n	80184b8 <__lshift+0xa4>
 80184e2:	bf00      	nop
 80184e4:	0801db8c 	.word	0x0801db8c
 80184e8:	0801dbfd 	.word	0x0801dbfd

080184ec <__mcmp>:
 80184ec:	b530      	push	{r4, r5, lr}
 80184ee:	6902      	ldr	r2, [r0, #16]
 80184f0:	690c      	ldr	r4, [r1, #16]
 80184f2:	1b12      	subs	r2, r2, r4
 80184f4:	d10e      	bne.n	8018514 <__mcmp+0x28>
 80184f6:	f100 0314 	add.w	r3, r0, #20
 80184fa:	3114      	adds	r1, #20
 80184fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018500:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018504:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018508:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801850c:	42a5      	cmp	r5, r4
 801850e:	d003      	beq.n	8018518 <__mcmp+0x2c>
 8018510:	d305      	bcc.n	801851e <__mcmp+0x32>
 8018512:	2201      	movs	r2, #1
 8018514:	4610      	mov	r0, r2
 8018516:	bd30      	pop	{r4, r5, pc}
 8018518:	4283      	cmp	r3, r0
 801851a:	d3f3      	bcc.n	8018504 <__mcmp+0x18>
 801851c:	e7fa      	b.n	8018514 <__mcmp+0x28>
 801851e:	f04f 32ff 	mov.w	r2, #4294967295
 8018522:	e7f7      	b.n	8018514 <__mcmp+0x28>

08018524 <__mdiff>:
 8018524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018528:	460c      	mov	r4, r1
 801852a:	4606      	mov	r6, r0
 801852c:	4611      	mov	r1, r2
 801852e:	4620      	mov	r0, r4
 8018530:	4690      	mov	r8, r2
 8018532:	f7ff ffdb 	bl	80184ec <__mcmp>
 8018536:	1e05      	subs	r5, r0, #0
 8018538:	d110      	bne.n	801855c <__mdiff+0x38>
 801853a:	4629      	mov	r1, r5
 801853c:	4630      	mov	r0, r6
 801853e:	f7ff fd0f 	bl	8017f60 <_Balloc>
 8018542:	b930      	cbnz	r0, 8018552 <__mdiff+0x2e>
 8018544:	4b3a      	ldr	r3, [pc, #232]	; (8018630 <__mdiff+0x10c>)
 8018546:	4602      	mov	r2, r0
 8018548:	f240 2137 	movw	r1, #567	; 0x237
 801854c:	4839      	ldr	r0, [pc, #228]	; (8018634 <__mdiff+0x110>)
 801854e:	f7fe fab9 	bl	8016ac4 <__assert_func>
 8018552:	2301      	movs	r3, #1
 8018554:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018558:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801855c:	bfa4      	itt	ge
 801855e:	4643      	movge	r3, r8
 8018560:	46a0      	movge	r8, r4
 8018562:	4630      	mov	r0, r6
 8018564:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018568:	bfa6      	itte	ge
 801856a:	461c      	movge	r4, r3
 801856c:	2500      	movge	r5, #0
 801856e:	2501      	movlt	r5, #1
 8018570:	f7ff fcf6 	bl	8017f60 <_Balloc>
 8018574:	b920      	cbnz	r0, 8018580 <__mdiff+0x5c>
 8018576:	4b2e      	ldr	r3, [pc, #184]	; (8018630 <__mdiff+0x10c>)
 8018578:	4602      	mov	r2, r0
 801857a:	f240 2145 	movw	r1, #581	; 0x245
 801857e:	e7e5      	b.n	801854c <__mdiff+0x28>
 8018580:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018584:	6926      	ldr	r6, [r4, #16]
 8018586:	60c5      	str	r5, [r0, #12]
 8018588:	f104 0914 	add.w	r9, r4, #20
 801858c:	f108 0514 	add.w	r5, r8, #20
 8018590:	f100 0e14 	add.w	lr, r0, #20
 8018594:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018598:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801859c:	f108 0210 	add.w	r2, r8, #16
 80185a0:	46f2      	mov	sl, lr
 80185a2:	2100      	movs	r1, #0
 80185a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80185a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80185ac:	fa11 f88b 	uxtah	r8, r1, fp
 80185b0:	b299      	uxth	r1, r3
 80185b2:	0c1b      	lsrs	r3, r3, #16
 80185b4:	eba8 0801 	sub.w	r8, r8, r1
 80185b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80185bc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80185c0:	fa1f f888 	uxth.w	r8, r8
 80185c4:	1419      	asrs	r1, r3, #16
 80185c6:	454e      	cmp	r6, r9
 80185c8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80185cc:	f84a 3b04 	str.w	r3, [sl], #4
 80185d0:	d8e8      	bhi.n	80185a4 <__mdiff+0x80>
 80185d2:	1b33      	subs	r3, r6, r4
 80185d4:	3b15      	subs	r3, #21
 80185d6:	f023 0303 	bic.w	r3, r3, #3
 80185da:	3304      	adds	r3, #4
 80185dc:	3415      	adds	r4, #21
 80185de:	42a6      	cmp	r6, r4
 80185e0:	bf38      	it	cc
 80185e2:	2304      	movcc	r3, #4
 80185e4:	441d      	add	r5, r3
 80185e6:	4473      	add	r3, lr
 80185e8:	469e      	mov	lr, r3
 80185ea:	462e      	mov	r6, r5
 80185ec:	4566      	cmp	r6, ip
 80185ee:	d30e      	bcc.n	801860e <__mdiff+0xea>
 80185f0:	f10c 0203 	add.w	r2, ip, #3
 80185f4:	1b52      	subs	r2, r2, r5
 80185f6:	f022 0203 	bic.w	r2, r2, #3
 80185fa:	3d03      	subs	r5, #3
 80185fc:	45ac      	cmp	ip, r5
 80185fe:	bf38      	it	cc
 8018600:	2200      	movcc	r2, #0
 8018602:	4413      	add	r3, r2
 8018604:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8018608:	b17a      	cbz	r2, 801862a <__mdiff+0x106>
 801860a:	6107      	str	r7, [r0, #16]
 801860c:	e7a4      	b.n	8018558 <__mdiff+0x34>
 801860e:	f856 8b04 	ldr.w	r8, [r6], #4
 8018612:	fa11 f288 	uxtah	r2, r1, r8
 8018616:	1414      	asrs	r4, r2, #16
 8018618:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801861c:	b292      	uxth	r2, r2
 801861e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018622:	f84e 2b04 	str.w	r2, [lr], #4
 8018626:	1421      	asrs	r1, r4, #16
 8018628:	e7e0      	b.n	80185ec <__mdiff+0xc8>
 801862a:	3f01      	subs	r7, #1
 801862c:	e7ea      	b.n	8018604 <__mdiff+0xe0>
 801862e:	bf00      	nop
 8018630:	0801db8c 	.word	0x0801db8c
 8018634:	0801dbfd 	.word	0x0801dbfd

08018638 <__ulp>:
 8018638:	b082      	sub	sp, #8
 801863a:	ed8d 0b00 	vstr	d0, [sp]
 801863e:	9a01      	ldr	r2, [sp, #4]
 8018640:	4b0f      	ldr	r3, [pc, #60]	; (8018680 <__ulp+0x48>)
 8018642:	4013      	ands	r3, r2
 8018644:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8018648:	2b00      	cmp	r3, #0
 801864a:	dc08      	bgt.n	801865e <__ulp+0x26>
 801864c:	425b      	negs	r3, r3
 801864e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8018652:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018656:	da04      	bge.n	8018662 <__ulp+0x2a>
 8018658:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801865c:	4113      	asrs	r3, r2
 801865e:	2200      	movs	r2, #0
 8018660:	e008      	b.n	8018674 <__ulp+0x3c>
 8018662:	f1a2 0314 	sub.w	r3, r2, #20
 8018666:	2b1e      	cmp	r3, #30
 8018668:	bfda      	itte	le
 801866a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801866e:	40da      	lsrle	r2, r3
 8018670:	2201      	movgt	r2, #1
 8018672:	2300      	movs	r3, #0
 8018674:	4619      	mov	r1, r3
 8018676:	4610      	mov	r0, r2
 8018678:	ec41 0b10 	vmov	d0, r0, r1
 801867c:	b002      	add	sp, #8
 801867e:	4770      	bx	lr
 8018680:	7ff00000 	.word	0x7ff00000

08018684 <__b2d>:
 8018684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018688:	6906      	ldr	r6, [r0, #16]
 801868a:	f100 0814 	add.w	r8, r0, #20
 801868e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8018692:	1f37      	subs	r7, r6, #4
 8018694:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018698:	4610      	mov	r0, r2
 801869a:	f7ff fd53 	bl	8018144 <__hi0bits>
 801869e:	f1c0 0320 	rsb	r3, r0, #32
 80186a2:	280a      	cmp	r0, #10
 80186a4:	600b      	str	r3, [r1, #0]
 80186a6:	491b      	ldr	r1, [pc, #108]	; (8018714 <__b2d+0x90>)
 80186a8:	dc15      	bgt.n	80186d6 <__b2d+0x52>
 80186aa:	f1c0 0c0b 	rsb	ip, r0, #11
 80186ae:	fa22 f30c 	lsr.w	r3, r2, ip
 80186b2:	45b8      	cmp	r8, r7
 80186b4:	ea43 0501 	orr.w	r5, r3, r1
 80186b8:	bf34      	ite	cc
 80186ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80186be:	2300      	movcs	r3, #0
 80186c0:	3015      	adds	r0, #21
 80186c2:	fa02 f000 	lsl.w	r0, r2, r0
 80186c6:	fa23 f30c 	lsr.w	r3, r3, ip
 80186ca:	4303      	orrs	r3, r0
 80186cc:	461c      	mov	r4, r3
 80186ce:	ec45 4b10 	vmov	d0, r4, r5
 80186d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186d6:	45b8      	cmp	r8, r7
 80186d8:	bf3a      	itte	cc
 80186da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80186de:	f1a6 0708 	subcc.w	r7, r6, #8
 80186e2:	2300      	movcs	r3, #0
 80186e4:	380b      	subs	r0, #11
 80186e6:	d012      	beq.n	801870e <__b2d+0x8a>
 80186e8:	f1c0 0120 	rsb	r1, r0, #32
 80186ec:	fa23 f401 	lsr.w	r4, r3, r1
 80186f0:	4082      	lsls	r2, r0
 80186f2:	4322      	orrs	r2, r4
 80186f4:	4547      	cmp	r7, r8
 80186f6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80186fa:	bf8c      	ite	hi
 80186fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018700:	2200      	movls	r2, #0
 8018702:	4083      	lsls	r3, r0
 8018704:	40ca      	lsrs	r2, r1
 8018706:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801870a:	4313      	orrs	r3, r2
 801870c:	e7de      	b.n	80186cc <__b2d+0x48>
 801870e:	ea42 0501 	orr.w	r5, r2, r1
 8018712:	e7db      	b.n	80186cc <__b2d+0x48>
 8018714:	3ff00000 	.word	0x3ff00000

08018718 <__d2b>:
 8018718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801871c:	460f      	mov	r7, r1
 801871e:	2101      	movs	r1, #1
 8018720:	ec59 8b10 	vmov	r8, r9, d0
 8018724:	4616      	mov	r6, r2
 8018726:	f7ff fc1b 	bl	8017f60 <_Balloc>
 801872a:	4604      	mov	r4, r0
 801872c:	b930      	cbnz	r0, 801873c <__d2b+0x24>
 801872e:	4602      	mov	r2, r0
 8018730:	4b24      	ldr	r3, [pc, #144]	; (80187c4 <__d2b+0xac>)
 8018732:	4825      	ldr	r0, [pc, #148]	; (80187c8 <__d2b+0xb0>)
 8018734:	f240 310f 	movw	r1, #783	; 0x30f
 8018738:	f7fe f9c4 	bl	8016ac4 <__assert_func>
 801873c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018740:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018744:	bb2d      	cbnz	r5, 8018792 <__d2b+0x7a>
 8018746:	9301      	str	r3, [sp, #4]
 8018748:	f1b8 0300 	subs.w	r3, r8, #0
 801874c:	d026      	beq.n	801879c <__d2b+0x84>
 801874e:	4668      	mov	r0, sp
 8018750:	9300      	str	r3, [sp, #0]
 8018752:	f7ff fd17 	bl	8018184 <__lo0bits>
 8018756:	e9dd 1200 	ldrd	r1, r2, [sp]
 801875a:	b1e8      	cbz	r0, 8018798 <__d2b+0x80>
 801875c:	f1c0 0320 	rsb	r3, r0, #32
 8018760:	fa02 f303 	lsl.w	r3, r2, r3
 8018764:	430b      	orrs	r3, r1
 8018766:	40c2      	lsrs	r2, r0
 8018768:	6163      	str	r3, [r4, #20]
 801876a:	9201      	str	r2, [sp, #4]
 801876c:	9b01      	ldr	r3, [sp, #4]
 801876e:	61a3      	str	r3, [r4, #24]
 8018770:	2b00      	cmp	r3, #0
 8018772:	bf14      	ite	ne
 8018774:	2202      	movne	r2, #2
 8018776:	2201      	moveq	r2, #1
 8018778:	6122      	str	r2, [r4, #16]
 801877a:	b1bd      	cbz	r5, 80187ac <__d2b+0x94>
 801877c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018780:	4405      	add	r5, r0
 8018782:	603d      	str	r5, [r7, #0]
 8018784:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018788:	6030      	str	r0, [r6, #0]
 801878a:	4620      	mov	r0, r4
 801878c:	b003      	add	sp, #12
 801878e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018796:	e7d6      	b.n	8018746 <__d2b+0x2e>
 8018798:	6161      	str	r1, [r4, #20]
 801879a:	e7e7      	b.n	801876c <__d2b+0x54>
 801879c:	a801      	add	r0, sp, #4
 801879e:	f7ff fcf1 	bl	8018184 <__lo0bits>
 80187a2:	9b01      	ldr	r3, [sp, #4]
 80187a4:	6163      	str	r3, [r4, #20]
 80187a6:	3020      	adds	r0, #32
 80187a8:	2201      	movs	r2, #1
 80187aa:	e7e5      	b.n	8018778 <__d2b+0x60>
 80187ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80187b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80187b4:	6038      	str	r0, [r7, #0]
 80187b6:	6918      	ldr	r0, [r3, #16]
 80187b8:	f7ff fcc4 	bl	8018144 <__hi0bits>
 80187bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80187c0:	e7e2      	b.n	8018788 <__d2b+0x70>
 80187c2:	bf00      	nop
 80187c4:	0801db8c 	.word	0x0801db8c
 80187c8:	0801dbfd 	.word	0x0801dbfd

080187cc <__ratio>:
 80187cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187d0:	4688      	mov	r8, r1
 80187d2:	4669      	mov	r1, sp
 80187d4:	4681      	mov	r9, r0
 80187d6:	f7ff ff55 	bl	8018684 <__b2d>
 80187da:	a901      	add	r1, sp, #4
 80187dc:	4640      	mov	r0, r8
 80187de:	ec55 4b10 	vmov	r4, r5, d0
 80187e2:	f7ff ff4f 	bl	8018684 <__b2d>
 80187e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80187ea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80187ee:	eba3 0c02 	sub.w	ip, r3, r2
 80187f2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80187f6:	1a9b      	subs	r3, r3, r2
 80187f8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80187fc:	ec51 0b10 	vmov	r0, r1, d0
 8018800:	2b00      	cmp	r3, #0
 8018802:	bfd6      	itet	le
 8018804:	460a      	movle	r2, r1
 8018806:	462a      	movgt	r2, r5
 8018808:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801880c:	468b      	mov	fp, r1
 801880e:	462f      	mov	r7, r5
 8018810:	bfd4      	ite	le
 8018812:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018816:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801881a:	4620      	mov	r0, r4
 801881c:	ee10 2a10 	vmov	r2, s0
 8018820:	465b      	mov	r3, fp
 8018822:	4639      	mov	r1, r7
 8018824:	f7e8 f812 	bl	800084c <__aeabi_ddiv>
 8018828:	ec41 0b10 	vmov	d0, r0, r1
 801882c:	b003      	add	sp, #12
 801882e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018832 <__copybits>:
 8018832:	3901      	subs	r1, #1
 8018834:	b570      	push	{r4, r5, r6, lr}
 8018836:	1149      	asrs	r1, r1, #5
 8018838:	6914      	ldr	r4, [r2, #16]
 801883a:	3101      	adds	r1, #1
 801883c:	f102 0314 	add.w	r3, r2, #20
 8018840:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018844:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018848:	1f05      	subs	r5, r0, #4
 801884a:	42a3      	cmp	r3, r4
 801884c:	d30c      	bcc.n	8018868 <__copybits+0x36>
 801884e:	1aa3      	subs	r3, r4, r2
 8018850:	3b11      	subs	r3, #17
 8018852:	f023 0303 	bic.w	r3, r3, #3
 8018856:	3211      	adds	r2, #17
 8018858:	42a2      	cmp	r2, r4
 801885a:	bf88      	it	hi
 801885c:	2300      	movhi	r3, #0
 801885e:	4418      	add	r0, r3
 8018860:	2300      	movs	r3, #0
 8018862:	4288      	cmp	r0, r1
 8018864:	d305      	bcc.n	8018872 <__copybits+0x40>
 8018866:	bd70      	pop	{r4, r5, r6, pc}
 8018868:	f853 6b04 	ldr.w	r6, [r3], #4
 801886c:	f845 6f04 	str.w	r6, [r5, #4]!
 8018870:	e7eb      	b.n	801884a <__copybits+0x18>
 8018872:	f840 3b04 	str.w	r3, [r0], #4
 8018876:	e7f4      	b.n	8018862 <__copybits+0x30>

08018878 <__any_on>:
 8018878:	f100 0214 	add.w	r2, r0, #20
 801887c:	6900      	ldr	r0, [r0, #16]
 801887e:	114b      	asrs	r3, r1, #5
 8018880:	4298      	cmp	r0, r3
 8018882:	b510      	push	{r4, lr}
 8018884:	db11      	blt.n	80188aa <__any_on+0x32>
 8018886:	dd0a      	ble.n	801889e <__any_on+0x26>
 8018888:	f011 011f 	ands.w	r1, r1, #31
 801888c:	d007      	beq.n	801889e <__any_on+0x26>
 801888e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018892:	fa24 f001 	lsr.w	r0, r4, r1
 8018896:	fa00 f101 	lsl.w	r1, r0, r1
 801889a:	428c      	cmp	r4, r1
 801889c:	d10b      	bne.n	80188b6 <__any_on+0x3e>
 801889e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80188a2:	4293      	cmp	r3, r2
 80188a4:	d803      	bhi.n	80188ae <__any_on+0x36>
 80188a6:	2000      	movs	r0, #0
 80188a8:	bd10      	pop	{r4, pc}
 80188aa:	4603      	mov	r3, r0
 80188ac:	e7f7      	b.n	801889e <__any_on+0x26>
 80188ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80188b2:	2900      	cmp	r1, #0
 80188b4:	d0f5      	beq.n	80188a2 <__any_on+0x2a>
 80188b6:	2001      	movs	r0, #1
 80188b8:	e7f6      	b.n	80188a8 <__any_on+0x30>

080188ba <__ascii_wctomb>:
 80188ba:	b149      	cbz	r1, 80188d0 <__ascii_wctomb+0x16>
 80188bc:	2aff      	cmp	r2, #255	; 0xff
 80188be:	bf85      	ittet	hi
 80188c0:	238a      	movhi	r3, #138	; 0x8a
 80188c2:	6003      	strhi	r3, [r0, #0]
 80188c4:	700a      	strbls	r2, [r1, #0]
 80188c6:	f04f 30ff 	movhi.w	r0, #4294967295
 80188ca:	bf98      	it	ls
 80188cc:	2001      	movls	r0, #1
 80188ce:	4770      	bx	lr
 80188d0:	4608      	mov	r0, r1
 80188d2:	4770      	bx	lr

080188d4 <__ssputs_r>:
 80188d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80188d8:	688e      	ldr	r6, [r1, #8]
 80188da:	461f      	mov	r7, r3
 80188dc:	42be      	cmp	r6, r7
 80188de:	680b      	ldr	r3, [r1, #0]
 80188e0:	4682      	mov	sl, r0
 80188e2:	460c      	mov	r4, r1
 80188e4:	4690      	mov	r8, r2
 80188e6:	d82c      	bhi.n	8018942 <__ssputs_r+0x6e>
 80188e8:	898a      	ldrh	r2, [r1, #12]
 80188ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80188ee:	d026      	beq.n	801893e <__ssputs_r+0x6a>
 80188f0:	6965      	ldr	r5, [r4, #20]
 80188f2:	6909      	ldr	r1, [r1, #16]
 80188f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80188f8:	eba3 0901 	sub.w	r9, r3, r1
 80188fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018900:	1c7b      	adds	r3, r7, #1
 8018902:	444b      	add	r3, r9
 8018904:	106d      	asrs	r5, r5, #1
 8018906:	429d      	cmp	r5, r3
 8018908:	bf38      	it	cc
 801890a:	461d      	movcc	r5, r3
 801890c:	0553      	lsls	r3, r2, #21
 801890e:	d527      	bpl.n	8018960 <__ssputs_r+0x8c>
 8018910:	4629      	mov	r1, r5
 8018912:	f7fc f83b 	bl	801498c <_malloc_r>
 8018916:	4606      	mov	r6, r0
 8018918:	b360      	cbz	r0, 8018974 <__ssputs_r+0xa0>
 801891a:	6921      	ldr	r1, [r4, #16]
 801891c:	464a      	mov	r2, r9
 801891e:	f7fe f8b4 	bl	8016a8a <memcpy>
 8018922:	89a3      	ldrh	r3, [r4, #12]
 8018924:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801892c:	81a3      	strh	r3, [r4, #12]
 801892e:	6126      	str	r6, [r4, #16]
 8018930:	6165      	str	r5, [r4, #20]
 8018932:	444e      	add	r6, r9
 8018934:	eba5 0509 	sub.w	r5, r5, r9
 8018938:	6026      	str	r6, [r4, #0]
 801893a:	60a5      	str	r5, [r4, #8]
 801893c:	463e      	mov	r6, r7
 801893e:	42be      	cmp	r6, r7
 8018940:	d900      	bls.n	8018944 <__ssputs_r+0x70>
 8018942:	463e      	mov	r6, r7
 8018944:	6820      	ldr	r0, [r4, #0]
 8018946:	4632      	mov	r2, r6
 8018948:	4641      	mov	r1, r8
 801894a:	f000 f9db 	bl	8018d04 <memmove>
 801894e:	68a3      	ldr	r3, [r4, #8]
 8018950:	1b9b      	subs	r3, r3, r6
 8018952:	60a3      	str	r3, [r4, #8]
 8018954:	6823      	ldr	r3, [r4, #0]
 8018956:	4433      	add	r3, r6
 8018958:	6023      	str	r3, [r4, #0]
 801895a:	2000      	movs	r0, #0
 801895c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018960:	462a      	mov	r2, r5
 8018962:	f000 fa06 	bl	8018d72 <_realloc_r>
 8018966:	4606      	mov	r6, r0
 8018968:	2800      	cmp	r0, #0
 801896a:	d1e0      	bne.n	801892e <__ssputs_r+0x5a>
 801896c:	6921      	ldr	r1, [r4, #16]
 801896e:	4650      	mov	r0, sl
 8018970:	f7fe ff40 	bl	80177f4 <_free_r>
 8018974:	230c      	movs	r3, #12
 8018976:	f8ca 3000 	str.w	r3, [sl]
 801897a:	89a3      	ldrh	r3, [r4, #12]
 801897c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018980:	81a3      	strh	r3, [r4, #12]
 8018982:	f04f 30ff 	mov.w	r0, #4294967295
 8018986:	e7e9      	b.n	801895c <__ssputs_r+0x88>

08018988 <_svfiprintf_r>:
 8018988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801898c:	4698      	mov	r8, r3
 801898e:	898b      	ldrh	r3, [r1, #12]
 8018990:	061b      	lsls	r3, r3, #24
 8018992:	b09d      	sub	sp, #116	; 0x74
 8018994:	4607      	mov	r7, r0
 8018996:	460d      	mov	r5, r1
 8018998:	4614      	mov	r4, r2
 801899a:	d50e      	bpl.n	80189ba <_svfiprintf_r+0x32>
 801899c:	690b      	ldr	r3, [r1, #16]
 801899e:	b963      	cbnz	r3, 80189ba <_svfiprintf_r+0x32>
 80189a0:	2140      	movs	r1, #64	; 0x40
 80189a2:	f7fb fff3 	bl	801498c <_malloc_r>
 80189a6:	6028      	str	r0, [r5, #0]
 80189a8:	6128      	str	r0, [r5, #16]
 80189aa:	b920      	cbnz	r0, 80189b6 <_svfiprintf_r+0x2e>
 80189ac:	230c      	movs	r3, #12
 80189ae:	603b      	str	r3, [r7, #0]
 80189b0:	f04f 30ff 	mov.w	r0, #4294967295
 80189b4:	e0d0      	b.n	8018b58 <_svfiprintf_r+0x1d0>
 80189b6:	2340      	movs	r3, #64	; 0x40
 80189b8:	616b      	str	r3, [r5, #20]
 80189ba:	2300      	movs	r3, #0
 80189bc:	9309      	str	r3, [sp, #36]	; 0x24
 80189be:	2320      	movs	r3, #32
 80189c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80189c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80189c8:	2330      	movs	r3, #48	; 0x30
 80189ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8018b70 <_svfiprintf_r+0x1e8>
 80189ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80189d2:	f04f 0901 	mov.w	r9, #1
 80189d6:	4623      	mov	r3, r4
 80189d8:	469a      	mov	sl, r3
 80189da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80189de:	b10a      	cbz	r2, 80189e4 <_svfiprintf_r+0x5c>
 80189e0:	2a25      	cmp	r2, #37	; 0x25
 80189e2:	d1f9      	bne.n	80189d8 <_svfiprintf_r+0x50>
 80189e4:	ebba 0b04 	subs.w	fp, sl, r4
 80189e8:	d00b      	beq.n	8018a02 <_svfiprintf_r+0x7a>
 80189ea:	465b      	mov	r3, fp
 80189ec:	4622      	mov	r2, r4
 80189ee:	4629      	mov	r1, r5
 80189f0:	4638      	mov	r0, r7
 80189f2:	f7ff ff6f 	bl	80188d4 <__ssputs_r>
 80189f6:	3001      	adds	r0, #1
 80189f8:	f000 80a9 	beq.w	8018b4e <_svfiprintf_r+0x1c6>
 80189fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80189fe:	445a      	add	r2, fp
 8018a00:	9209      	str	r2, [sp, #36]	; 0x24
 8018a02:	f89a 3000 	ldrb.w	r3, [sl]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	f000 80a1 	beq.w	8018b4e <_svfiprintf_r+0x1c6>
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8018a12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018a16:	f10a 0a01 	add.w	sl, sl, #1
 8018a1a:	9304      	str	r3, [sp, #16]
 8018a1c:	9307      	str	r3, [sp, #28]
 8018a1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018a22:	931a      	str	r3, [sp, #104]	; 0x68
 8018a24:	4654      	mov	r4, sl
 8018a26:	2205      	movs	r2, #5
 8018a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a2c:	4850      	ldr	r0, [pc, #320]	; (8018b70 <_svfiprintf_r+0x1e8>)
 8018a2e:	f7e7 fbcf 	bl	80001d0 <memchr>
 8018a32:	9a04      	ldr	r2, [sp, #16]
 8018a34:	b9d8      	cbnz	r0, 8018a6e <_svfiprintf_r+0xe6>
 8018a36:	06d0      	lsls	r0, r2, #27
 8018a38:	bf44      	itt	mi
 8018a3a:	2320      	movmi	r3, #32
 8018a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018a40:	0711      	lsls	r1, r2, #28
 8018a42:	bf44      	itt	mi
 8018a44:	232b      	movmi	r3, #43	; 0x2b
 8018a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8018a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8018a50:	d015      	beq.n	8018a7e <_svfiprintf_r+0xf6>
 8018a52:	9a07      	ldr	r2, [sp, #28]
 8018a54:	4654      	mov	r4, sl
 8018a56:	2000      	movs	r0, #0
 8018a58:	f04f 0c0a 	mov.w	ip, #10
 8018a5c:	4621      	mov	r1, r4
 8018a5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018a62:	3b30      	subs	r3, #48	; 0x30
 8018a64:	2b09      	cmp	r3, #9
 8018a66:	d94d      	bls.n	8018b04 <_svfiprintf_r+0x17c>
 8018a68:	b1b0      	cbz	r0, 8018a98 <_svfiprintf_r+0x110>
 8018a6a:	9207      	str	r2, [sp, #28]
 8018a6c:	e014      	b.n	8018a98 <_svfiprintf_r+0x110>
 8018a6e:	eba0 0308 	sub.w	r3, r0, r8
 8018a72:	fa09 f303 	lsl.w	r3, r9, r3
 8018a76:	4313      	orrs	r3, r2
 8018a78:	9304      	str	r3, [sp, #16]
 8018a7a:	46a2      	mov	sl, r4
 8018a7c:	e7d2      	b.n	8018a24 <_svfiprintf_r+0x9c>
 8018a7e:	9b03      	ldr	r3, [sp, #12]
 8018a80:	1d19      	adds	r1, r3, #4
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	9103      	str	r1, [sp, #12]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	bfbb      	ittet	lt
 8018a8a:	425b      	neglt	r3, r3
 8018a8c:	f042 0202 	orrlt.w	r2, r2, #2
 8018a90:	9307      	strge	r3, [sp, #28]
 8018a92:	9307      	strlt	r3, [sp, #28]
 8018a94:	bfb8      	it	lt
 8018a96:	9204      	strlt	r2, [sp, #16]
 8018a98:	7823      	ldrb	r3, [r4, #0]
 8018a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8018a9c:	d10c      	bne.n	8018ab8 <_svfiprintf_r+0x130>
 8018a9e:	7863      	ldrb	r3, [r4, #1]
 8018aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8018aa2:	d134      	bne.n	8018b0e <_svfiprintf_r+0x186>
 8018aa4:	9b03      	ldr	r3, [sp, #12]
 8018aa6:	1d1a      	adds	r2, r3, #4
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	9203      	str	r2, [sp, #12]
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	bfb8      	it	lt
 8018ab0:	f04f 33ff 	movlt.w	r3, #4294967295
 8018ab4:	3402      	adds	r4, #2
 8018ab6:	9305      	str	r3, [sp, #20]
 8018ab8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8018b80 <_svfiprintf_r+0x1f8>
 8018abc:	7821      	ldrb	r1, [r4, #0]
 8018abe:	2203      	movs	r2, #3
 8018ac0:	4650      	mov	r0, sl
 8018ac2:	f7e7 fb85 	bl	80001d0 <memchr>
 8018ac6:	b138      	cbz	r0, 8018ad8 <_svfiprintf_r+0x150>
 8018ac8:	9b04      	ldr	r3, [sp, #16]
 8018aca:	eba0 000a 	sub.w	r0, r0, sl
 8018ace:	2240      	movs	r2, #64	; 0x40
 8018ad0:	4082      	lsls	r2, r0
 8018ad2:	4313      	orrs	r3, r2
 8018ad4:	3401      	adds	r4, #1
 8018ad6:	9304      	str	r3, [sp, #16]
 8018ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018adc:	4825      	ldr	r0, [pc, #148]	; (8018b74 <_svfiprintf_r+0x1ec>)
 8018ade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018ae2:	2206      	movs	r2, #6
 8018ae4:	f7e7 fb74 	bl	80001d0 <memchr>
 8018ae8:	2800      	cmp	r0, #0
 8018aea:	d038      	beq.n	8018b5e <_svfiprintf_r+0x1d6>
 8018aec:	4b22      	ldr	r3, [pc, #136]	; (8018b78 <_svfiprintf_r+0x1f0>)
 8018aee:	bb1b      	cbnz	r3, 8018b38 <_svfiprintf_r+0x1b0>
 8018af0:	9b03      	ldr	r3, [sp, #12]
 8018af2:	3307      	adds	r3, #7
 8018af4:	f023 0307 	bic.w	r3, r3, #7
 8018af8:	3308      	adds	r3, #8
 8018afa:	9303      	str	r3, [sp, #12]
 8018afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018afe:	4433      	add	r3, r6
 8018b00:	9309      	str	r3, [sp, #36]	; 0x24
 8018b02:	e768      	b.n	80189d6 <_svfiprintf_r+0x4e>
 8018b04:	fb0c 3202 	mla	r2, ip, r2, r3
 8018b08:	460c      	mov	r4, r1
 8018b0a:	2001      	movs	r0, #1
 8018b0c:	e7a6      	b.n	8018a5c <_svfiprintf_r+0xd4>
 8018b0e:	2300      	movs	r3, #0
 8018b10:	3401      	adds	r4, #1
 8018b12:	9305      	str	r3, [sp, #20]
 8018b14:	4619      	mov	r1, r3
 8018b16:	f04f 0c0a 	mov.w	ip, #10
 8018b1a:	4620      	mov	r0, r4
 8018b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018b20:	3a30      	subs	r2, #48	; 0x30
 8018b22:	2a09      	cmp	r2, #9
 8018b24:	d903      	bls.n	8018b2e <_svfiprintf_r+0x1a6>
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d0c6      	beq.n	8018ab8 <_svfiprintf_r+0x130>
 8018b2a:	9105      	str	r1, [sp, #20]
 8018b2c:	e7c4      	b.n	8018ab8 <_svfiprintf_r+0x130>
 8018b2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018b32:	4604      	mov	r4, r0
 8018b34:	2301      	movs	r3, #1
 8018b36:	e7f0      	b.n	8018b1a <_svfiprintf_r+0x192>
 8018b38:	ab03      	add	r3, sp, #12
 8018b3a:	9300      	str	r3, [sp, #0]
 8018b3c:	462a      	mov	r2, r5
 8018b3e:	4b0f      	ldr	r3, [pc, #60]	; (8018b7c <_svfiprintf_r+0x1f4>)
 8018b40:	a904      	add	r1, sp, #16
 8018b42:	4638      	mov	r0, r7
 8018b44:	f7fc ff56 	bl	80159f4 <_printf_float>
 8018b48:	1c42      	adds	r2, r0, #1
 8018b4a:	4606      	mov	r6, r0
 8018b4c:	d1d6      	bne.n	8018afc <_svfiprintf_r+0x174>
 8018b4e:	89ab      	ldrh	r3, [r5, #12]
 8018b50:	065b      	lsls	r3, r3, #25
 8018b52:	f53f af2d 	bmi.w	80189b0 <_svfiprintf_r+0x28>
 8018b56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018b58:	b01d      	add	sp, #116	; 0x74
 8018b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b5e:	ab03      	add	r3, sp, #12
 8018b60:	9300      	str	r3, [sp, #0]
 8018b62:	462a      	mov	r2, r5
 8018b64:	4b05      	ldr	r3, [pc, #20]	; (8018b7c <_svfiprintf_r+0x1f4>)
 8018b66:	a904      	add	r1, sp, #16
 8018b68:	4638      	mov	r0, r7
 8018b6a:	f7fd f9e7 	bl	8015f3c <_printf_i>
 8018b6e:	e7eb      	b.n	8018b48 <_svfiprintf_r+0x1c0>
 8018b70:	0801dd54 	.word	0x0801dd54
 8018b74:	0801dd5e 	.word	0x0801dd5e
 8018b78:	080159f5 	.word	0x080159f5
 8018b7c:	080188d5 	.word	0x080188d5
 8018b80:	0801dd5a 	.word	0x0801dd5a

08018b84 <__sflush_r>:
 8018b84:	898a      	ldrh	r2, [r1, #12]
 8018b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b8a:	4605      	mov	r5, r0
 8018b8c:	0710      	lsls	r0, r2, #28
 8018b8e:	460c      	mov	r4, r1
 8018b90:	d458      	bmi.n	8018c44 <__sflush_r+0xc0>
 8018b92:	684b      	ldr	r3, [r1, #4]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	dc05      	bgt.n	8018ba4 <__sflush_r+0x20>
 8018b98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	dc02      	bgt.n	8018ba4 <__sflush_r+0x20>
 8018b9e:	2000      	movs	r0, #0
 8018ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018ba6:	2e00      	cmp	r6, #0
 8018ba8:	d0f9      	beq.n	8018b9e <__sflush_r+0x1a>
 8018baa:	2300      	movs	r3, #0
 8018bac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018bb0:	682f      	ldr	r7, [r5, #0]
 8018bb2:	6a21      	ldr	r1, [r4, #32]
 8018bb4:	602b      	str	r3, [r5, #0]
 8018bb6:	d032      	beq.n	8018c1e <__sflush_r+0x9a>
 8018bb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018bba:	89a3      	ldrh	r3, [r4, #12]
 8018bbc:	075a      	lsls	r2, r3, #29
 8018bbe:	d505      	bpl.n	8018bcc <__sflush_r+0x48>
 8018bc0:	6863      	ldr	r3, [r4, #4]
 8018bc2:	1ac0      	subs	r0, r0, r3
 8018bc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018bc6:	b10b      	cbz	r3, 8018bcc <__sflush_r+0x48>
 8018bc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018bca:	1ac0      	subs	r0, r0, r3
 8018bcc:	2300      	movs	r3, #0
 8018bce:	4602      	mov	r2, r0
 8018bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018bd2:	6a21      	ldr	r1, [r4, #32]
 8018bd4:	4628      	mov	r0, r5
 8018bd6:	47b0      	blx	r6
 8018bd8:	1c43      	adds	r3, r0, #1
 8018bda:	89a3      	ldrh	r3, [r4, #12]
 8018bdc:	d106      	bne.n	8018bec <__sflush_r+0x68>
 8018bde:	6829      	ldr	r1, [r5, #0]
 8018be0:	291d      	cmp	r1, #29
 8018be2:	d82b      	bhi.n	8018c3c <__sflush_r+0xb8>
 8018be4:	4a29      	ldr	r2, [pc, #164]	; (8018c8c <__sflush_r+0x108>)
 8018be6:	410a      	asrs	r2, r1
 8018be8:	07d6      	lsls	r6, r2, #31
 8018bea:	d427      	bmi.n	8018c3c <__sflush_r+0xb8>
 8018bec:	2200      	movs	r2, #0
 8018bee:	6062      	str	r2, [r4, #4]
 8018bf0:	04d9      	lsls	r1, r3, #19
 8018bf2:	6922      	ldr	r2, [r4, #16]
 8018bf4:	6022      	str	r2, [r4, #0]
 8018bf6:	d504      	bpl.n	8018c02 <__sflush_r+0x7e>
 8018bf8:	1c42      	adds	r2, r0, #1
 8018bfa:	d101      	bne.n	8018c00 <__sflush_r+0x7c>
 8018bfc:	682b      	ldr	r3, [r5, #0]
 8018bfe:	b903      	cbnz	r3, 8018c02 <__sflush_r+0x7e>
 8018c00:	6560      	str	r0, [r4, #84]	; 0x54
 8018c02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018c04:	602f      	str	r7, [r5, #0]
 8018c06:	2900      	cmp	r1, #0
 8018c08:	d0c9      	beq.n	8018b9e <__sflush_r+0x1a>
 8018c0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c0e:	4299      	cmp	r1, r3
 8018c10:	d002      	beq.n	8018c18 <__sflush_r+0x94>
 8018c12:	4628      	mov	r0, r5
 8018c14:	f7fe fdee 	bl	80177f4 <_free_r>
 8018c18:	2000      	movs	r0, #0
 8018c1a:	6360      	str	r0, [r4, #52]	; 0x34
 8018c1c:	e7c0      	b.n	8018ba0 <__sflush_r+0x1c>
 8018c1e:	2301      	movs	r3, #1
 8018c20:	4628      	mov	r0, r5
 8018c22:	47b0      	blx	r6
 8018c24:	1c41      	adds	r1, r0, #1
 8018c26:	d1c8      	bne.n	8018bba <__sflush_r+0x36>
 8018c28:	682b      	ldr	r3, [r5, #0]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d0c5      	beq.n	8018bba <__sflush_r+0x36>
 8018c2e:	2b1d      	cmp	r3, #29
 8018c30:	d001      	beq.n	8018c36 <__sflush_r+0xb2>
 8018c32:	2b16      	cmp	r3, #22
 8018c34:	d101      	bne.n	8018c3a <__sflush_r+0xb6>
 8018c36:	602f      	str	r7, [r5, #0]
 8018c38:	e7b1      	b.n	8018b9e <__sflush_r+0x1a>
 8018c3a:	89a3      	ldrh	r3, [r4, #12]
 8018c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c40:	81a3      	strh	r3, [r4, #12]
 8018c42:	e7ad      	b.n	8018ba0 <__sflush_r+0x1c>
 8018c44:	690f      	ldr	r7, [r1, #16]
 8018c46:	2f00      	cmp	r7, #0
 8018c48:	d0a9      	beq.n	8018b9e <__sflush_r+0x1a>
 8018c4a:	0793      	lsls	r3, r2, #30
 8018c4c:	680e      	ldr	r6, [r1, #0]
 8018c4e:	bf08      	it	eq
 8018c50:	694b      	ldreq	r3, [r1, #20]
 8018c52:	600f      	str	r7, [r1, #0]
 8018c54:	bf18      	it	ne
 8018c56:	2300      	movne	r3, #0
 8018c58:	eba6 0807 	sub.w	r8, r6, r7
 8018c5c:	608b      	str	r3, [r1, #8]
 8018c5e:	f1b8 0f00 	cmp.w	r8, #0
 8018c62:	dd9c      	ble.n	8018b9e <__sflush_r+0x1a>
 8018c64:	6a21      	ldr	r1, [r4, #32]
 8018c66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018c68:	4643      	mov	r3, r8
 8018c6a:	463a      	mov	r2, r7
 8018c6c:	4628      	mov	r0, r5
 8018c6e:	47b0      	blx	r6
 8018c70:	2800      	cmp	r0, #0
 8018c72:	dc06      	bgt.n	8018c82 <__sflush_r+0xfe>
 8018c74:	89a3      	ldrh	r3, [r4, #12]
 8018c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c7a:	81a3      	strh	r3, [r4, #12]
 8018c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8018c80:	e78e      	b.n	8018ba0 <__sflush_r+0x1c>
 8018c82:	4407      	add	r7, r0
 8018c84:	eba8 0800 	sub.w	r8, r8, r0
 8018c88:	e7e9      	b.n	8018c5e <__sflush_r+0xda>
 8018c8a:	bf00      	nop
 8018c8c:	dfbffffe 	.word	0xdfbffffe

08018c90 <_fflush_r>:
 8018c90:	b538      	push	{r3, r4, r5, lr}
 8018c92:	690b      	ldr	r3, [r1, #16]
 8018c94:	4605      	mov	r5, r0
 8018c96:	460c      	mov	r4, r1
 8018c98:	b913      	cbnz	r3, 8018ca0 <_fflush_r+0x10>
 8018c9a:	2500      	movs	r5, #0
 8018c9c:	4628      	mov	r0, r5
 8018c9e:	bd38      	pop	{r3, r4, r5, pc}
 8018ca0:	b118      	cbz	r0, 8018caa <_fflush_r+0x1a>
 8018ca2:	6a03      	ldr	r3, [r0, #32]
 8018ca4:	b90b      	cbnz	r3, 8018caa <_fflush_r+0x1a>
 8018ca6:	f7fd fd07 	bl	80166b8 <__sinit>
 8018caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d0f3      	beq.n	8018c9a <_fflush_r+0xa>
 8018cb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018cb4:	07d0      	lsls	r0, r2, #31
 8018cb6:	d404      	bmi.n	8018cc2 <_fflush_r+0x32>
 8018cb8:	0599      	lsls	r1, r3, #22
 8018cba:	d402      	bmi.n	8018cc2 <_fflush_r+0x32>
 8018cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018cbe:	f7fd feda 	bl	8016a76 <__retarget_lock_acquire_recursive>
 8018cc2:	4628      	mov	r0, r5
 8018cc4:	4621      	mov	r1, r4
 8018cc6:	f7ff ff5d 	bl	8018b84 <__sflush_r>
 8018cca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018ccc:	07da      	lsls	r2, r3, #31
 8018cce:	4605      	mov	r5, r0
 8018cd0:	d4e4      	bmi.n	8018c9c <_fflush_r+0xc>
 8018cd2:	89a3      	ldrh	r3, [r4, #12]
 8018cd4:	059b      	lsls	r3, r3, #22
 8018cd6:	d4e1      	bmi.n	8018c9c <_fflush_r+0xc>
 8018cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018cda:	f7fd fecd 	bl	8016a78 <__retarget_lock_release_recursive>
 8018cde:	e7dd      	b.n	8018c9c <_fflush_r+0xc>

08018ce0 <fiprintf>:
 8018ce0:	b40e      	push	{r1, r2, r3}
 8018ce2:	b503      	push	{r0, r1, lr}
 8018ce4:	4601      	mov	r1, r0
 8018ce6:	ab03      	add	r3, sp, #12
 8018ce8:	4805      	ldr	r0, [pc, #20]	; (8018d00 <fiprintf+0x20>)
 8018cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8018cee:	6800      	ldr	r0, [r0, #0]
 8018cf0:	9301      	str	r3, [sp, #4]
 8018cf2:	f000 f897 	bl	8018e24 <_vfiprintf_r>
 8018cf6:	b002      	add	sp, #8
 8018cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8018cfc:	b003      	add	sp, #12
 8018cfe:	4770      	bx	lr
 8018d00:	20000308 	.word	0x20000308

08018d04 <memmove>:
 8018d04:	4288      	cmp	r0, r1
 8018d06:	b510      	push	{r4, lr}
 8018d08:	eb01 0402 	add.w	r4, r1, r2
 8018d0c:	d902      	bls.n	8018d14 <memmove+0x10>
 8018d0e:	4284      	cmp	r4, r0
 8018d10:	4623      	mov	r3, r4
 8018d12:	d807      	bhi.n	8018d24 <memmove+0x20>
 8018d14:	1e43      	subs	r3, r0, #1
 8018d16:	42a1      	cmp	r1, r4
 8018d18:	d008      	beq.n	8018d2c <memmove+0x28>
 8018d1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018d1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018d22:	e7f8      	b.n	8018d16 <memmove+0x12>
 8018d24:	4402      	add	r2, r0
 8018d26:	4601      	mov	r1, r0
 8018d28:	428a      	cmp	r2, r1
 8018d2a:	d100      	bne.n	8018d2e <memmove+0x2a>
 8018d2c:	bd10      	pop	{r4, pc}
 8018d2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018d32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018d36:	e7f7      	b.n	8018d28 <memmove+0x24>

08018d38 <abort>:
 8018d38:	b508      	push	{r3, lr}
 8018d3a:	2006      	movs	r0, #6
 8018d3c:	f000 fa4a 	bl	80191d4 <raise>
 8018d40:	2001      	movs	r0, #1
 8018d42:	f7ec fec9 	bl	8005ad8 <_exit>

08018d46 <_calloc_r>:
 8018d46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018d48:	fba1 2402 	umull	r2, r4, r1, r2
 8018d4c:	b94c      	cbnz	r4, 8018d62 <_calloc_r+0x1c>
 8018d4e:	4611      	mov	r1, r2
 8018d50:	9201      	str	r2, [sp, #4]
 8018d52:	f7fb fe1b 	bl	801498c <_malloc_r>
 8018d56:	9a01      	ldr	r2, [sp, #4]
 8018d58:	4605      	mov	r5, r0
 8018d5a:	b930      	cbnz	r0, 8018d6a <_calloc_r+0x24>
 8018d5c:	4628      	mov	r0, r5
 8018d5e:	b003      	add	sp, #12
 8018d60:	bd30      	pop	{r4, r5, pc}
 8018d62:	220c      	movs	r2, #12
 8018d64:	6002      	str	r2, [r0, #0]
 8018d66:	2500      	movs	r5, #0
 8018d68:	e7f8      	b.n	8018d5c <_calloc_r+0x16>
 8018d6a:	4621      	mov	r1, r4
 8018d6c:	f7fd fd71 	bl	8016852 <memset>
 8018d70:	e7f4      	b.n	8018d5c <_calloc_r+0x16>

08018d72 <_realloc_r>:
 8018d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d76:	4680      	mov	r8, r0
 8018d78:	4614      	mov	r4, r2
 8018d7a:	460e      	mov	r6, r1
 8018d7c:	b921      	cbnz	r1, 8018d88 <_realloc_r+0x16>
 8018d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d82:	4611      	mov	r1, r2
 8018d84:	f7fb be02 	b.w	801498c <_malloc_r>
 8018d88:	b92a      	cbnz	r2, 8018d96 <_realloc_r+0x24>
 8018d8a:	f7fe fd33 	bl	80177f4 <_free_r>
 8018d8e:	4625      	mov	r5, r4
 8018d90:	4628      	mov	r0, r5
 8018d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d96:	f000 fa39 	bl	801920c <_malloc_usable_size_r>
 8018d9a:	4284      	cmp	r4, r0
 8018d9c:	4607      	mov	r7, r0
 8018d9e:	d802      	bhi.n	8018da6 <_realloc_r+0x34>
 8018da0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018da4:	d812      	bhi.n	8018dcc <_realloc_r+0x5a>
 8018da6:	4621      	mov	r1, r4
 8018da8:	4640      	mov	r0, r8
 8018daa:	f7fb fdef 	bl	801498c <_malloc_r>
 8018dae:	4605      	mov	r5, r0
 8018db0:	2800      	cmp	r0, #0
 8018db2:	d0ed      	beq.n	8018d90 <_realloc_r+0x1e>
 8018db4:	42bc      	cmp	r4, r7
 8018db6:	4622      	mov	r2, r4
 8018db8:	4631      	mov	r1, r6
 8018dba:	bf28      	it	cs
 8018dbc:	463a      	movcs	r2, r7
 8018dbe:	f7fd fe64 	bl	8016a8a <memcpy>
 8018dc2:	4631      	mov	r1, r6
 8018dc4:	4640      	mov	r0, r8
 8018dc6:	f7fe fd15 	bl	80177f4 <_free_r>
 8018dca:	e7e1      	b.n	8018d90 <_realloc_r+0x1e>
 8018dcc:	4635      	mov	r5, r6
 8018dce:	e7df      	b.n	8018d90 <_realloc_r+0x1e>

08018dd0 <__sfputc_r>:
 8018dd0:	6893      	ldr	r3, [r2, #8]
 8018dd2:	3b01      	subs	r3, #1
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	b410      	push	{r4}
 8018dd8:	6093      	str	r3, [r2, #8]
 8018dda:	da08      	bge.n	8018dee <__sfputc_r+0x1e>
 8018ddc:	6994      	ldr	r4, [r2, #24]
 8018dde:	42a3      	cmp	r3, r4
 8018de0:	db01      	blt.n	8018de6 <__sfputc_r+0x16>
 8018de2:	290a      	cmp	r1, #10
 8018de4:	d103      	bne.n	8018dee <__sfputc_r+0x1e>
 8018de6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018dea:	f000 b935 	b.w	8019058 <__swbuf_r>
 8018dee:	6813      	ldr	r3, [r2, #0]
 8018df0:	1c58      	adds	r0, r3, #1
 8018df2:	6010      	str	r0, [r2, #0]
 8018df4:	7019      	strb	r1, [r3, #0]
 8018df6:	4608      	mov	r0, r1
 8018df8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018dfc:	4770      	bx	lr

08018dfe <__sfputs_r>:
 8018dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e00:	4606      	mov	r6, r0
 8018e02:	460f      	mov	r7, r1
 8018e04:	4614      	mov	r4, r2
 8018e06:	18d5      	adds	r5, r2, r3
 8018e08:	42ac      	cmp	r4, r5
 8018e0a:	d101      	bne.n	8018e10 <__sfputs_r+0x12>
 8018e0c:	2000      	movs	r0, #0
 8018e0e:	e007      	b.n	8018e20 <__sfputs_r+0x22>
 8018e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e14:	463a      	mov	r2, r7
 8018e16:	4630      	mov	r0, r6
 8018e18:	f7ff ffda 	bl	8018dd0 <__sfputc_r>
 8018e1c:	1c43      	adds	r3, r0, #1
 8018e1e:	d1f3      	bne.n	8018e08 <__sfputs_r+0xa>
 8018e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018e24 <_vfiprintf_r>:
 8018e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e28:	460d      	mov	r5, r1
 8018e2a:	b09d      	sub	sp, #116	; 0x74
 8018e2c:	4614      	mov	r4, r2
 8018e2e:	4698      	mov	r8, r3
 8018e30:	4606      	mov	r6, r0
 8018e32:	b118      	cbz	r0, 8018e3c <_vfiprintf_r+0x18>
 8018e34:	6a03      	ldr	r3, [r0, #32]
 8018e36:	b90b      	cbnz	r3, 8018e3c <_vfiprintf_r+0x18>
 8018e38:	f7fd fc3e 	bl	80166b8 <__sinit>
 8018e3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018e3e:	07d9      	lsls	r1, r3, #31
 8018e40:	d405      	bmi.n	8018e4e <_vfiprintf_r+0x2a>
 8018e42:	89ab      	ldrh	r3, [r5, #12]
 8018e44:	059a      	lsls	r2, r3, #22
 8018e46:	d402      	bmi.n	8018e4e <_vfiprintf_r+0x2a>
 8018e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018e4a:	f7fd fe14 	bl	8016a76 <__retarget_lock_acquire_recursive>
 8018e4e:	89ab      	ldrh	r3, [r5, #12]
 8018e50:	071b      	lsls	r3, r3, #28
 8018e52:	d501      	bpl.n	8018e58 <_vfiprintf_r+0x34>
 8018e54:	692b      	ldr	r3, [r5, #16]
 8018e56:	b99b      	cbnz	r3, 8018e80 <_vfiprintf_r+0x5c>
 8018e58:	4629      	mov	r1, r5
 8018e5a:	4630      	mov	r0, r6
 8018e5c:	f000 f93a 	bl	80190d4 <__swsetup_r>
 8018e60:	b170      	cbz	r0, 8018e80 <_vfiprintf_r+0x5c>
 8018e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018e64:	07dc      	lsls	r4, r3, #31
 8018e66:	d504      	bpl.n	8018e72 <_vfiprintf_r+0x4e>
 8018e68:	f04f 30ff 	mov.w	r0, #4294967295
 8018e6c:	b01d      	add	sp, #116	; 0x74
 8018e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e72:	89ab      	ldrh	r3, [r5, #12]
 8018e74:	0598      	lsls	r0, r3, #22
 8018e76:	d4f7      	bmi.n	8018e68 <_vfiprintf_r+0x44>
 8018e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018e7a:	f7fd fdfd 	bl	8016a78 <__retarget_lock_release_recursive>
 8018e7e:	e7f3      	b.n	8018e68 <_vfiprintf_r+0x44>
 8018e80:	2300      	movs	r3, #0
 8018e82:	9309      	str	r3, [sp, #36]	; 0x24
 8018e84:	2320      	movs	r3, #32
 8018e86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8018e8e:	2330      	movs	r3, #48	; 0x30
 8018e90:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019044 <_vfiprintf_r+0x220>
 8018e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018e98:	f04f 0901 	mov.w	r9, #1
 8018e9c:	4623      	mov	r3, r4
 8018e9e:	469a      	mov	sl, r3
 8018ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ea4:	b10a      	cbz	r2, 8018eaa <_vfiprintf_r+0x86>
 8018ea6:	2a25      	cmp	r2, #37	; 0x25
 8018ea8:	d1f9      	bne.n	8018e9e <_vfiprintf_r+0x7a>
 8018eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8018eae:	d00b      	beq.n	8018ec8 <_vfiprintf_r+0xa4>
 8018eb0:	465b      	mov	r3, fp
 8018eb2:	4622      	mov	r2, r4
 8018eb4:	4629      	mov	r1, r5
 8018eb6:	4630      	mov	r0, r6
 8018eb8:	f7ff ffa1 	bl	8018dfe <__sfputs_r>
 8018ebc:	3001      	adds	r0, #1
 8018ebe:	f000 80a9 	beq.w	8019014 <_vfiprintf_r+0x1f0>
 8018ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ec4:	445a      	add	r2, fp
 8018ec6:	9209      	str	r2, [sp, #36]	; 0x24
 8018ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	f000 80a1 	beq.w	8019014 <_vfiprintf_r+0x1f0>
 8018ed2:	2300      	movs	r3, #0
 8018ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8018ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018edc:	f10a 0a01 	add.w	sl, sl, #1
 8018ee0:	9304      	str	r3, [sp, #16]
 8018ee2:	9307      	str	r3, [sp, #28]
 8018ee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018ee8:	931a      	str	r3, [sp, #104]	; 0x68
 8018eea:	4654      	mov	r4, sl
 8018eec:	2205      	movs	r2, #5
 8018eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ef2:	4854      	ldr	r0, [pc, #336]	; (8019044 <_vfiprintf_r+0x220>)
 8018ef4:	f7e7 f96c 	bl	80001d0 <memchr>
 8018ef8:	9a04      	ldr	r2, [sp, #16]
 8018efa:	b9d8      	cbnz	r0, 8018f34 <_vfiprintf_r+0x110>
 8018efc:	06d1      	lsls	r1, r2, #27
 8018efe:	bf44      	itt	mi
 8018f00:	2320      	movmi	r3, #32
 8018f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018f06:	0713      	lsls	r3, r2, #28
 8018f08:	bf44      	itt	mi
 8018f0a:	232b      	movmi	r3, #43	; 0x2b
 8018f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018f10:	f89a 3000 	ldrb.w	r3, [sl]
 8018f14:	2b2a      	cmp	r3, #42	; 0x2a
 8018f16:	d015      	beq.n	8018f44 <_vfiprintf_r+0x120>
 8018f18:	9a07      	ldr	r2, [sp, #28]
 8018f1a:	4654      	mov	r4, sl
 8018f1c:	2000      	movs	r0, #0
 8018f1e:	f04f 0c0a 	mov.w	ip, #10
 8018f22:	4621      	mov	r1, r4
 8018f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018f28:	3b30      	subs	r3, #48	; 0x30
 8018f2a:	2b09      	cmp	r3, #9
 8018f2c:	d94d      	bls.n	8018fca <_vfiprintf_r+0x1a6>
 8018f2e:	b1b0      	cbz	r0, 8018f5e <_vfiprintf_r+0x13a>
 8018f30:	9207      	str	r2, [sp, #28]
 8018f32:	e014      	b.n	8018f5e <_vfiprintf_r+0x13a>
 8018f34:	eba0 0308 	sub.w	r3, r0, r8
 8018f38:	fa09 f303 	lsl.w	r3, r9, r3
 8018f3c:	4313      	orrs	r3, r2
 8018f3e:	9304      	str	r3, [sp, #16]
 8018f40:	46a2      	mov	sl, r4
 8018f42:	e7d2      	b.n	8018eea <_vfiprintf_r+0xc6>
 8018f44:	9b03      	ldr	r3, [sp, #12]
 8018f46:	1d19      	adds	r1, r3, #4
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	9103      	str	r1, [sp, #12]
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	bfbb      	ittet	lt
 8018f50:	425b      	neglt	r3, r3
 8018f52:	f042 0202 	orrlt.w	r2, r2, #2
 8018f56:	9307      	strge	r3, [sp, #28]
 8018f58:	9307      	strlt	r3, [sp, #28]
 8018f5a:	bfb8      	it	lt
 8018f5c:	9204      	strlt	r2, [sp, #16]
 8018f5e:	7823      	ldrb	r3, [r4, #0]
 8018f60:	2b2e      	cmp	r3, #46	; 0x2e
 8018f62:	d10c      	bne.n	8018f7e <_vfiprintf_r+0x15a>
 8018f64:	7863      	ldrb	r3, [r4, #1]
 8018f66:	2b2a      	cmp	r3, #42	; 0x2a
 8018f68:	d134      	bne.n	8018fd4 <_vfiprintf_r+0x1b0>
 8018f6a:	9b03      	ldr	r3, [sp, #12]
 8018f6c:	1d1a      	adds	r2, r3, #4
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	9203      	str	r2, [sp, #12]
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	bfb8      	it	lt
 8018f76:	f04f 33ff 	movlt.w	r3, #4294967295
 8018f7a:	3402      	adds	r4, #2
 8018f7c:	9305      	str	r3, [sp, #20]
 8018f7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019054 <_vfiprintf_r+0x230>
 8018f82:	7821      	ldrb	r1, [r4, #0]
 8018f84:	2203      	movs	r2, #3
 8018f86:	4650      	mov	r0, sl
 8018f88:	f7e7 f922 	bl	80001d0 <memchr>
 8018f8c:	b138      	cbz	r0, 8018f9e <_vfiprintf_r+0x17a>
 8018f8e:	9b04      	ldr	r3, [sp, #16]
 8018f90:	eba0 000a 	sub.w	r0, r0, sl
 8018f94:	2240      	movs	r2, #64	; 0x40
 8018f96:	4082      	lsls	r2, r0
 8018f98:	4313      	orrs	r3, r2
 8018f9a:	3401      	adds	r4, #1
 8018f9c:	9304      	str	r3, [sp, #16]
 8018f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018fa2:	4829      	ldr	r0, [pc, #164]	; (8019048 <_vfiprintf_r+0x224>)
 8018fa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018fa8:	2206      	movs	r2, #6
 8018faa:	f7e7 f911 	bl	80001d0 <memchr>
 8018fae:	2800      	cmp	r0, #0
 8018fb0:	d03f      	beq.n	8019032 <_vfiprintf_r+0x20e>
 8018fb2:	4b26      	ldr	r3, [pc, #152]	; (801904c <_vfiprintf_r+0x228>)
 8018fb4:	bb1b      	cbnz	r3, 8018ffe <_vfiprintf_r+0x1da>
 8018fb6:	9b03      	ldr	r3, [sp, #12]
 8018fb8:	3307      	adds	r3, #7
 8018fba:	f023 0307 	bic.w	r3, r3, #7
 8018fbe:	3308      	adds	r3, #8
 8018fc0:	9303      	str	r3, [sp, #12]
 8018fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018fc4:	443b      	add	r3, r7
 8018fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8018fc8:	e768      	b.n	8018e9c <_vfiprintf_r+0x78>
 8018fca:	fb0c 3202 	mla	r2, ip, r2, r3
 8018fce:	460c      	mov	r4, r1
 8018fd0:	2001      	movs	r0, #1
 8018fd2:	e7a6      	b.n	8018f22 <_vfiprintf_r+0xfe>
 8018fd4:	2300      	movs	r3, #0
 8018fd6:	3401      	adds	r4, #1
 8018fd8:	9305      	str	r3, [sp, #20]
 8018fda:	4619      	mov	r1, r3
 8018fdc:	f04f 0c0a 	mov.w	ip, #10
 8018fe0:	4620      	mov	r0, r4
 8018fe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018fe6:	3a30      	subs	r2, #48	; 0x30
 8018fe8:	2a09      	cmp	r2, #9
 8018fea:	d903      	bls.n	8018ff4 <_vfiprintf_r+0x1d0>
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d0c6      	beq.n	8018f7e <_vfiprintf_r+0x15a>
 8018ff0:	9105      	str	r1, [sp, #20]
 8018ff2:	e7c4      	b.n	8018f7e <_vfiprintf_r+0x15a>
 8018ff4:	fb0c 2101 	mla	r1, ip, r1, r2
 8018ff8:	4604      	mov	r4, r0
 8018ffa:	2301      	movs	r3, #1
 8018ffc:	e7f0      	b.n	8018fe0 <_vfiprintf_r+0x1bc>
 8018ffe:	ab03      	add	r3, sp, #12
 8019000:	9300      	str	r3, [sp, #0]
 8019002:	462a      	mov	r2, r5
 8019004:	4b12      	ldr	r3, [pc, #72]	; (8019050 <_vfiprintf_r+0x22c>)
 8019006:	a904      	add	r1, sp, #16
 8019008:	4630      	mov	r0, r6
 801900a:	f7fc fcf3 	bl	80159f4 <_printf_float>
 801900e:	4607      	mov	r7, r0
 8019010:	1c78      	adds	r0, r7, #1
 8019012:	d1d6      	bne.n	8018fc2 <_vfiprintf_r+0x19e>
 8019014:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019016:	07d9      	lsls	r1, r3, #31
 8019018:	d405      	bmi.n	8019026 <_vfiprintf_r+0x202>
 801901a:	89ab      	ldrh	r3, [r5, #12]
 801901c:	059a      	lsls	r2, r3, #22
 801901e:	d402      	bmi.n	8019026 <_vfiprintf_r+0x202>
 8019020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019022:	f7fd fd29 	bl	8016a78 <__retarget_lock_release_recursive>
 8019026:	89ab      	ldrh	r3, [r5, #12]
 8019028:	065b      	lsls	r3, r3, #25
 801902a:	f53f af1d 	bmi.w	8018e68 <_vfiprintf_r+0x44>
 801902e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019030:	e71c      	b.n	8018e6c <_vfiprintf_r+0x48>
 8019032:	ab03      	add	r3, sp, #12
 8019034:	9300      	str	r3, [sp, #0]
 8019036:	462a      	mov	r2, r5
 8019038:	4b05      	ldr	r3, [pc, #20]	; (8019050 <_vfiprintf_r+0x22c>)
 801903a:	a904      	add	r1, sp, #16
 801903c:	4630      	mov	r0, r6
 801903e:	f7fc ff7d 	bl	8015f3c <_printf_i>
 8019042:	e7e4      	b.n	801900e <_vfiprintf_r+0x1ea>
 8019044:	0801dd54 	.word	0x0801dd54
 8019048:	0801dd5e 	.word	0x0801dd5e
 801904c:	080159f5 	.word	0x080159f5
 8019050:	08018dff 	.word	0x08018dff
 8019054:	0801dd5a 	.word	0x0801dd5a

08019058 <__swbuf_r>:
 8019058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801905a:	460e      	mov	r6, r1
 801905c:	4614      	mov	r4, r2
 801905e:	4605      	mov	r5, r0
 8019060:	b118      	cbz	r0, 801906a <__swbuf_r+0x12>
 8019062:	6a03      	ldr	r3, [r0, #32]
 8019064:	b90b      	cbnz	r3, 801906a <__swbuf_r+0x12>
 8019066:	f7fd fb27 	bl	80166b8 <__sinit>
 801906a:	69a3      	ldr	r3, [r4, #24]
 801906c:	60a3      	str	r3, [r4, #8]
 801906e:	89a3      	ldrh	r3, [r4, #12]
 8019070:	071a      	lsls	r2, r3, #28
 8019072:	d525      	bpl.n	80190c0 <__swbuf_r+0x68>
 8019074:	6923      	ldr	r3, [r4, #16]
 8019076:	b31b      	cbz	r3, 80190c0 <__swbuf_r+0x68>
 8019078:	6823      	ldr	r3, [r4, #0]
 801907a:	6922      	ldr	r2, [r4, #16]
 801907c:	1a98      	subs	r0, r3, r2
 801907e:	6963      	ldr	r3, [r4, #20]
 8019080:	b2f6      	uxtb	r6, r6
 8019082:	4283      	cmp	r3, r0
 8019084:	4637      	mov	r7, r6
 8019086:	dc04      	bgt.n	8019092 <__swbuf_r+0x3a>
 8019088:	4621      	mov	r1, r4
 801908a:	4628      	mov	r0, r5
 801908c:	f7ff fe00 	bl	8018c90 <_fflush_r>
 8019090:	b9e0      	cbnz	r0, 80190cc <__swbuf_r+0x74>
 8019092:	68a3      	ldr	r3, [r4, #8]
 8019094:	3b01      	subs	r3, #1
 8019096:	60a3      	str	r3, [r4, #8]
 8019098:	6823      	ldr	r3, [r4, #0]
 801909a:	1c5a      	adds	r2, r3, #1
 801909c:	6022      	str	r2, [r4, #0]
 801909e:	701e      	strb	r6, [r3, #0]
 80190a0:	6962      	ldr	r2, [r4, #20]
 80190a2:	1c43      	adds	r3, r0, #1
 80190a4:	429a      	cmp	r2, r3
 80190a6:	d004      	beq.n	80190b2 <__swbuf_r+0x5a>
 80190a8:	89a3      	ldrh	r3, [r4, #12]
 80190aa:	07db      	lsls	r3, r3, #31
 80190ac:	d506      	bpl.n	80190bc <__swbuf_r+0x64>
 80190ae:	2e0a      	cmp	r6, #10
 80190b0:	d104      	bne.n	80190bc <__swbuf_r+0x64>
 80190b2:	4621      	mov	r1, r4
 80190b4:	4628      	mov	r0, r5
 80190b6:	f7ff fdeb 	bl	8018c90 <_fflush_r>
 80190ba:	b938      	cbnz	r0, 80190cc <__swbuf_r+0x74>
 80190bc:	4638      	mov	r0, r7
 80190be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190c0:	4621      	mov	r1, r4
 80190c2:	4628      	mov	r0, r5
 80190c4:	f000 f806 	bl	80190d4 <__swsetup_r>
 80190c8:	2800      	cmp	r0, #0
 80190ca:	d0d5      	beq.n	8019078 <__swbuf_r+0x20>
 80190cc:	f04f 37ff 	mov.w	r7, #4294967295
 80190d0:	e7f4      	b.n	80190bc <__swbuf_r+0x64>
	...

080190d4 <__swsetup_r>:
 80190d4:	b538      	push	{r3, r4, r5, lr}
 80190d6:	4b2a      	ldr	r3, [pc, #168]	; (8019180 <__swsetup_r+0xac>)
 80190d8:	4605      	mov	r5, r0
 80190da:	6818      	ldr	r0, [r3, #0]
 80190dc:	460c      	mov	r4, r1
 80190de:	b118      	cbz	r0, 80190e8 <__swsetup_r+0x14>
 80190e0:	6a03      	ldr	r3, [r0, #32]
 80190e2:	b90b      	cbnz	r3, 80190e8 <__swsetup_r+0x14>
 80190e4:	f7fd fae8 	bl	80166b8 <__sinit>
 80190e8:	89a3      	ldrh	r3, [r4, #12]
 80190ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80190ee:	0718      	lsls	r0, r3, #28
 80190f0:	d422      	bmi.n	8019138 <__swsetup_r+0x64>
 80190f2:	06d9      	lsls	r1, r3, #27
 80190f4:	d407      	bmi.n	8019106 <__swsetup_r+0x32>
 80190f6:	2309      	movs	r3, #9
 80190f8:	602b      	str	r3, [r5, #0]
 80190fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80190fe:	81a3      	strh	r3, [r4, #12]
 8019100:	f04f 30ff 	mov.w	r0, #4294967295
 8019104:	e034      	b.n	8019170 <__swsetup_r+0x9c>
 8019106:	0758      	lsls	r0, r3, #29
 8019108:	d512      	bpl.n	8019130 <__swsetup_r+0x5c>
 801910a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801910c:	b141      	cbz	r1, 8019120 <__swsetup_r+0x4c>
 801910e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019112:	4299      	cmp	r1, r3
 8019114:	d002      	beq.n	801911c <__swsetup_r+0x48>
 8019116:	4628      	mov	r0, r5
 8019118:	f7fe fb6c 	bl	80177f4 <_free_r>
 801911c:	2300      	movs	r3, #0
 801911e:	6363      	str	r3, [r4, #52]	; 0x34
 8019120:	89a3      	ldrh	r3, [r4, #12]
 8019122:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019126:	81a3      	strh	r3, [r4, #12]
 8019128:	2300      	movs	r3, #0
 801912a:	6063      	str	r3, [r4, #4]
 801912c:	6923      	ldr	r3, [r4, #16]
 801912e:	6023      	str	r3, [r4, #0]
 8019130:	89a3      	ldrh	r3, [r4, #12]
 8019132:	f043 0308 	orr.w	r3, r3, #8
 8019136:	81a3      	strh	r3, [r4, #12]
 8019138:	6923      	ldr	r3, [r4, #16]
 801913a:	b94b      	cbnz	r3, 8019150 <__swsetup_r+0x7c>
 801913c:	89a3      	ldrh	r3, [r4, #12]
 801913e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019146:	d003      	beq.n	8019150 <__swsetup_r+0x7c>
 8019148:	4621      	mov	r1, r4
 801914a:	4628      	mov	r0, r5
 801914c:	f000 f88c 	bl	8019268 <__smakebuf_r>
 8019150:	89a0      	ldrh	r0, [r4, #12]
 8019152:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019156:	f010 0301 	ands.w	r3, r0, #1
 801915a:	d00a      	beq.n	8019172 <__swsetup_r+0x9e>
 801915c:	2300      	movs	r3, #0
 801915e:	60a3      	str	r3, [r4, #8]
 8019160:	6963      	ldr	r3, [r4, #20]
 8019162:	425b      	negs	r3, r3
 8019164:	61a3      	str	r3, [r4, #24]
 8019166:	6923      	ldr	r3, [r4, #16]
 8019168:	b943      	cbnz	r3, 801917c <__swsetup_r+0xa8>
 801916a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801916e:	d1c4      	bne.n	80190fa <__swsetup_r+0x26>
 8019170:	bd38      	pop	{r3, r4, r5, pc}
 8019172:	0781      	lsls	r1, r0, #30
 8019174:	bf58      	it	pl
 8019176:	6963      	ldrpl	r3, [r4, #20]
 8019178:	60a3      	str	r3, [r4, #8]
 801917a:	e7f4      	b.n	8019166 <__swsetup_r+0x92>
 801917c:	2000      	movs	r0, #0
 801917e:	e7f7      	b.n	8019170 <__swsetup_r+0x9c>
 8019180:	20000308 	.word	0x20000308

08019184 <_raise_r>:
 8019184:	291f      	cmp	r1, #31
 8019186:	b538      	push	{r3, r4, r5, lr}
 8019188:	4604      	mov	r4, r0
 801918a:	460d      	mov	r5, r1
 801918c:	d904      	bls.n	8019198 <_raise_r+0x14>
 801918e:	2316      	movs	r3, #22
 8019190:	6003      	str	r3, [r0, #0]
 8019192:	f04f 30ff 	mov.w	r0, #4294967295
 8019196:	bd38      	pop	{r3, r4, r5, pc}
 8019198:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801919a:	b112      	cbz	r2, 80191a2 <_raise_r+0x1e>
 801919c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80191a0:	b94b      	cbnz	r3, 80191b6 <_raise_r+0x32>
 80191a2:	4620      	mov	r0, r4
 80191a4:	f000 f830 	bl	8019208 <_getpid_r>
 80191a8:	462a      	mov	r2, r5
 80191aa:	4601      	mov	r1, r0
 80191ac:	4620      	mov	r0, r4
 80191ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80191b2:	f000 b817 	b.w	80191e4 <_kill_r>
 80191b6:	2b01      	cmp	r3, #1
 80191b8:	d00a      	beq.n	80191d0 <_raise_r+0x4c>
 80191ba:	1c59      	adds	r1, r3, #1
 80191bc:	d103      	bne.n	80191c6 <_raise_r+0x42>
 80191be:	2316      	movs	r3, #22
 80191c0:	6003      	str	r3, [r0, #0]
 80191c2:	2001      	movs	r0, #1
 80191c4:	e7e7      	b.n	8019196 <_raise_r+0x12>
 80191c6:	2400      	movs	r4, #0
 80191c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80191cc:	4628      	mov	r0, r5
 80191ce:	4798      	blx	r3
 80191d0:	2000      	movs	r0, #0
 80191d2:	e7e0      	b.n	8019196 <_raise_r+0x12>

080191d4 <raise>:
 80191d4:	4b02      	ldr	r3, [pc, #8]	; (80191e0 <raise+0xc>)
 80191d6:	4601      	mov	r1, r0
 80191d8:	6818      	ldr	r0, [r3, #0]
 80191da:	f7ff bfd3 	b.w	8019184 <_raise_r>
 80191de:	bf00      	nop
 80191e0:	20000308 	.word	0x20000308

080191e4 <_kill_r>:
 80191e4:	b538      	push	{r3, r4, r5, lr}
 80191e6:	4d07      	ldr	r5, [pc, #28]	; (8019204 <_kill_r+0x20>)
 80191e8:	2300      	movs	r3, #0
 80191ea:	4604      	mov	r4, r0
 80191ec:	4608      	mov	r0, r1
 80191ee:	4611      	mov	r1, r2
 80191f0:	602b      	str	r3, [r5, #0]
 80191f2:	f7ec fc61 	bl	8005ab8 <_kill>
 80191f6:	1c43      	adds	r3, r0, #1
 80191f8:	d102      	bne.n	8019200 <_kill_r+0x1c>
 80191fa:	682b      	ldr	r3, [r5, #0]
 80191fc:	b103      	cbz	r3, 8019200 <_kill_r+0x1c>
 80191fe:	6023      	str	r3, [r4, #0]
 8019200:	bd38      	pop	{r3, r4, r5, pc}
 8019202:	bf00      	nop
 8019204:	2000243c 	.word	0x2000243c

08019208 <_getpid_r>:
 8019208:	f7ec bc4e 	b.w	8005aa8 <_getpid>

0801920c <_malloc_usable_size_r>:
 801920c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019210:	1f18      	subs	r0, r3, #4
 8019212:	2b00      	cmp	r3, #0
 8019214:	bfbc      	itt	lt
 8019216:	580b      	ldrlt	r3, [r1, r0]
 8019218:	18c0      	addlt	r0, r0, r3
 801921a:	4770      	bx	lr

0801921c <__swhatbuf_r>:
 801921c:	b570      	push	{r4, r5, r6, lr}
 801921e:	460c      	mov	r4, r1
 8019220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019224:	2900      	cmp	r1, #0
 8019226:	b096      	sub	sp, #88	; 0x58
 8019228:	4615      	mov	r5, r2
 801922a:	461e      	mov	r6, r3
 801922c:	da0d      	bge.n	801924a <__swhatbuf_r+0x2e>
 801922e:	89a3      	ldrh	r3, [r4, #12]
 8019230:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019234:	f04f 0100 	mov.w	r1, #0
 8019238:	bf0c      	ite	eq
 801923a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801923e:	2340      	movne	r3, #64	; 0x40
 8019240:	2000      	movs	r0, #0
 8019242:	6031      	str	r1, [r6, #0]
 8019244:	602b      	str	r3, [r5, #0]
 8019246:	b016      	add	sp, #88	; 0x58
 8019248:	bd70      	pop	{r4, r5, r6, pc}
 801924a:	466a      	mov	r2, sp
 801924c:	f000 f848 	bl	80192e0 <_fstat_r>
 8019250:	2800      	cmp	r0, #0
 8019252:	dbec      	blt.n	801922e <__swhatbuf_r+0x12>
 8019254:	9901      	ldr	r1, [sp, #4]
 8019256:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801925a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801925e:	4259      	negs	r1, r3
 8019260:	4159      	adcs	r1, r3
 8019262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019266:	e7eb      	b.n	8019240 <__swhatbuf_r+0x24>

08019268 <__smakebuf_r>:
 8019268:	898b      	ldrh	r3, [r1, #12]
 801926a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801926c:	079d      	lsls	r5, r3, #30
 801926e:	4606      	mov	r6, r0
 8019270:	460c      	mov	r4, r1
 8019272:	d507      	bpl.n	8019284 <__smakebuf_r+0x1c>
 8019274:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019278:	6023      	str	r3, [r4, #0]
 801927a:	6123      	str	r3, [r4, #16]
 801927c:	2301      	movs	r3, #1
 801927e:	6163      	str	r3, [r4, #20]
 8019280:	b002      	add	sp, #8
 8019282:	bd70      	pop	{r4, r5, r6, pc}
 8019284:	ab01      	add	r3, sp, #4
 8019286:	466a      	mov	r2, sp
 8019288:	f7ff ffc8 	bl	801921c <__swhatbuf_r>
 801928c:	9900      	ldr	r1, [sp, #0]
 801928e:	4605      	mov	r5, r0
 8019290:	4630      	mov	r0, r6
 8019292:	f7fb fb7b 	bl	801498c <_malloc_r>
 8019296:	b948      	cbnz	r0, 80192ac <__smakebuf_r+0x44>
 8019298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801929c:	059a      	lsls	r2, r3, #22
 801929e:	d4ef      	bmi.n	8019280 <__smakebuf_r+0x18>
 80192a0:	f023 0303 	bic.w	r3, r3, #3
 80192a4:	f043 0302 	orr.w	r3, r3, #2
 80192a8:	81a3      	strh	r3, [r4, #12]
 80192aa:	e7e3      	b.n	8019274 <__smakebuf_r+0xc>
 80192ac:	89a3      	ldrh	r3, [r4, #12]
 80192ae:	6020      	str	r0, [r4, #0]
 80192b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80192b4:	81a3      	strh	r3, [r4, #12]
 80192b6:	9b00      	ldr	r3, [sp, #0]
 80192b8:	6163      	str	r3, [r4, #20]
 80192ba:	9b01      	ldr	r3, [sp, #4]
 80192bc:	6120      	str	r0, [r4, #16]
 80192be:	b15b      	cbz	r3, 80192d8 <__smakebuf_r+0x70>
 80192c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80192c4:	4630      	mov	r0, r6
 80192c6:	f000 f81d 	bl	8019304 <_isatty_r>
 80192ca:	b128      	cbz	r0, 80192d8 <__smakebuf_r+0x70>
 80192cc:	89a3      	ldrh	r3, [r4, #12]
 80192ce:	f023 0303 	bic.w	r3, r3, #3
 80192d2:	f043 0301 	orr.w	r3, r3, #1
 80192d6:	81a3      	strh	r3, [r4, #12]
 80192d8:	89a3      	ldrh	r3, [r4, #12]
 80192da:	431d      	orrs	r5, r3
 80192dc:	81a5      	strh	r5, [r4, #12]
 80192de:	e7cf      	b.n	8019280 <__smakebuf_r+0x18>

080192e0 <_fstat_r>:
 80192e0:	b538      	push	{r3, r4, r5, lr}
 80192e2:	4d07      	ldr	r5, [pc, #28]	; (8019300 <_fstat_r+0x20>)
 80192e4:	2300      	movs	r3, #0
 80192e6:	4604      	mov	r4, r0
 80192e8:	4608      	mov	r0, r1
 80192ea:	4611      	mov	r1, r2
 80192ec:	602b      	str	r3, [r5, #0]
 80192ee:	f7ec fc42 	bl	8005b76 <_fstat>
 80192f2:	1c43      	adds	r3, r0, #1
 80192f4:	d102      	bne.n	80192fc <_fstat_r+0x1c>
 80192f6:	682b      	ldr	r3, [r5, #0]
 80192f8:	b103      	cbz	r3, 80192fc <_fstat_r+0x1c>
 80192fa:	6023      	str	r3, [r4, #0]
 80192fc:	bd38      	pop	{r3, r4, r5, pc}
 80192fe:	bf00      	nop
 8019300:	2000243c 	.word	0x2000243c

08019304 <_isatty_r>:
 8019304:	b538      	push	{r3, r4, r5, lr}
 8019306:	4d06      	ldr	r5, [pc, #24]	; (8019320 <_isatty_r+0x1c>)
 8019308:	2300      	movs	r3, #0
 801930a:	4604      	mov	r4, r0
 801930c:	4608      	mov	r0, r1
 801930e:	602b      	str	r3, [r5, #0]
 8019310:	f7ec fc41 	bl	8005b96 <_isatty>
 8019314:	1c43      	adds	r3, r0, #1
 8019316:	d102      	bne.n	801931e <_isatty_r+0x1a>
 8019318:	682b      	ldr	r3, [r5, #0]
 801931a:	b103      	cbz	r3, 801931e <_isatty_r+0x1a>
 801931c:	6023      	str	r3, [r4, #0]
 801931e:	bd38      	pop	{r3, r4, r5, pc}
 8019320:	2000243c 	.word	0x2000243c

08019324 <pow>:
 8019324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019326:	ed2d 8b02 	vpush	{d8}
 801932a:	eeb0 8a40 	vmov.f32	s16, s0
 801932e:	eef0 8a60 	vmov.f32	s17, s1
 8019332:	ec55 4b11 	vmov	r4, r5, d1
 8019336:	f000 fbc3 	bl	8019ac0 <__ieee754_pow>
 801933a:	4622      	mov	r2, r4
 801933c:	462b      	mov	r3, r5
 801933e:	4620      	mov	r0, r4
 8019340:	4629      	mov	r1, r5
 8019342:	ec57 6b10 	vmov	r6, r7, d0
 8019346:	f7e7 fbf1 	bl	8000b2c <__aeabi_dcmpun>
 801934a:	2800      	cmp	r0, #0
 801934c:	d13b      	bne.n	80193c6 <pow+0xa2>
 801934e:	ec51 0b18 	vmov	r0, r1, d8
 8019352:	2200      	movs	r2, #0
 8019354:	2300      	movs	r3, #0
 8019356:	f7e7 fbb7 	bl	8000ac8 <__aeabi_dcmpeq>
 801935a:	b1b8      	cbz	r0, 801938c <pow+0x68>
 801935c:	2200      	movs	r2, #0
 801935e:	2300      	movs	r3, #0
 8019360:	4620      	mov	r0, r4
 8019362:	4629      	mov	r1, r5
 8019364:	f7e7 fbb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8019368:	2800      	cmp	r0, #0
 801936a:	d146      	bne.n	80193fa <pow+0xd6>
 801936c:	ec45 4b10 	vmov	d0, r4, r5
 8019370:	f000 f92c 	bl	80195cc <finite>
 8019374:	b338      	cbz	r0, 80193c6 <pow+0xa2>
 8019376:	2200      	movs	r2, #0
 8019378:	2300      	movs	r3, #0
 801937a:	4620      	mov	r0, r4
 801937c:	4629      	mov	r1, r5
 801937e:	f7e7 fbad 	bl	8000adc <__aeabi_dcmplt>
 8019382:	b300      	cbz	r0, 80193c6 <pow+0xa2>
 8019384:	f7fd fb4c 	bl	8016a20 <__errno>
 8019388:	2322      	movs	r3, #34	; 0x22
 801938a:	e01b      	b.n	80193c4 <pow+0xa0>
 801938c:	ec47 6b10 	vmov	d0, r6, r7
 8019390:	f000 f91c 	bl	80195cc <finite>
 8019394:	b9e0      	cbnz	r0, 80193d0 <pow+0xac>
 8019396:	eeb0 0a48 	vmov.f32	s0, s16
 801939a:	eef0 0a68 	vmov.f32	s1, s17
 801939e:	f000 f915 	bl	80195cc <finite>
 80193a2:	b1a8      	cbz	r0, 80193d0 <pow+0xac>
 80193a4:	ec45 4b10 	vmov	d0, r4, r5
 80193a8:	f000 f910 	bl	80195cc <finite>
 80193ac:	b180      	cbz	r0, 80193d0 <pow+0xac>
 80193ae:	4632      	mov	r2, r6
 80193b0:	463b      	mov	r3, r7
 80193b2:	4630      	mov	r0, r6
 80193b4:	4639      	mov	r1, r7
 80193b6:	f7e7 fbb9 	bl	8000b2c <__aeabi_dcmpun>
 80193ba:	2800      	cmp	r0, #0
 80193bc:	d0e2      	beq.n	8019384 <pow+0x60>
 80193be:	f7fd fb2f 	bl	8016a20 <__errno>
 80193c2:	2321      	movs	r3, #33	; 0x21
 80193c4:	6003      	str	r3, [r0, #0]
 80193c6:	ecbd 8b02 	vpop	{d8}
 80193ca:	ec47 6b10 	vmov	d0, r6, r7
 80193ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193d0:	2200      	movs	r2, #0
 80193d2:	2300      	movs	r3, #0
 80193d4:	4630      	mov	r0, r6
 80193d6:	4639      	mov	r1, r7
 80193d8:	f7e7 fb76 	bl	8000ac8 <__aeabi_dcmpeq>
 80193dc:	2800      	cmp	r0, #0
 80193de:	d0f2      	beq.n	80193c6 <pow+0xa2>
 80193e0:	eeb0 0a48 	vmov.f32	s0, s16
 80193e4:	eef0 0a68 	vmov.f32	s1, s17
 80193e8:	f000 f8f0 	bl	80195cc <finite>
 80193ec:	2800      	cmp	r0, #0
 80193ee:	d0ea      	beq.n	80193c6 <pow+0xa2>
 80193f0:	ec45 4b10 	vmov	d0, r4, r5
 80193f4:	f000 f8ea 	bl	80195cc <finite>
 80193f8:	e7c3      	b.n	8019382 <pow+0x5e>
 80193fa:	4f01      	ldr	r7, [pc, #4]	; (8019400 <pow+0xdc>)
 80193fc:	2600      	movs	r6, #0
 80193fe:	e7e2      	b.n	80193c6 <pow+0xa2>
 8019400:	3ff00000 	.word	0x3ff00000
 8019404:	00000000 	.word	0x00000000

08019408 <cos>:
 8019408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801940a:	ec53 2b10 	vmov	r2, r3, d0
 801940e:	4826      	ldr	r0, [pc, #152]	; (80194a8 <cos+0xa0>)
 8019410:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019414:	4281      	cmp	r1, r0
 8019416:	dc06      	bgt.n	8019426 <cos+0x1e>
 8019418:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80194a0 <cos+0x98>
 801941c:	b005      	add	sp, #20
 801941e:	f85d eb04 	ldr.w	lr, [sp], #4
 8019422:	f000 b9c5 	b.w	80197b0 <__kernel_cos>
 8019426:	4821      	ldr	r0, [pc, #132]	; (80194ac <cos+0xa4>)
 8019428:	4281      	cmp	r1, r0
 801942a:	dd09      	ble.n	8019440 <cos+0x38>
 801942c:	ee10 0a10 	vmov	r0, s0
 8019430:	4619      	mov	r1, r3
 8019432:	f7e6 ff29 	bl	8000288 <__aeabi_dsub>
 8019436:	ec41 0b10 	vmov	d0, r0, r1
 801943a:	b005      	add	sp, #20
 801943c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019440:	4668      	mov	r0, sp
 8019442:	f001 f869 	bl	801a518 <__ieee754_rem_pio2>
 8019446:	f000 0003 	and.w	r0, r0, #3
 801944a:	2801      	cmp	r0, #1
 801944c:	d00b      	beq.n	8019466 <cos+0x5e>
 801944e:	2802      	cmp	r0, #2
 8019450:	d016      	beq.n	8019480 <cos+0x78>
 8019452:	b9e0      	cbnz	r0, 801948e <cos+0x86>
 8019454:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019458:	ed9d 0b00 	vldr	d0, [sp]
 801945c:	f000 f9a8 	bl	80197b0 <__kernel_cos>
 8019460:	ec51 0b10 	vmov	r0, r1, d0
 8019464:	e7e7      	b.n	8019436 <cos+0x2e>
 8019466:	ed9d 1b02 	vldr	d1, [sp, #8]
 801946a:	ed9d 0b00 	vldr	d0, [sp]
 801946e:	f000 fa67 	bl	8019940 <__kernel_sin>
 8019472:	ec53 2b10 	vmov	r2, r3, d0
 8019476:	ee10 0a10 	vmov	r0, s0
 801947a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801947e:	e7da      	b.n	8019436 <cos+0x2e>
 8019480:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019484:	ed9d 0b00 	vldr	d0, [sp]
 8019488:	f000 f992 	bl	80197b0 <__kernel_cos>
 801948c:	e7f1      	b.n	8019472 <cos+0x6a>
 801948e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019492:	ed9d 0b00 	vldr	d0, [sp]
 8019496:	2001      	movs	r0, #1
 8019498:	f000 fa52 	bl	8019940 <__kernel_sin>
 801949c:	e7e0      	b.n	8019460 <cos+0x58>
 801949e:	bf00      	nop
	...
 80194a8:	3fe921fb 	.word	0x3fe921fb
 80194ac:	7fefffff 	.word	0x7fefffff

080194b0 <sin>:
 80194b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80194b2:	ec53 2b10 	vmov	r2, r3, d0
 80194b6:	4828      	ldr	r0, [pc, #160]	; (8019558 <sin+0xa8>)
 80194b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80194bc:	4281      	cmp	r1, r0
 80194be:	dc07      	bgt.n	80194d0 <sin+0x20>
 80194c0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8019550 <sin+0xa0>
 80194c4:	2000      	movs	r0, #0
 80194c6:	b005      	add	sp, #20
 80194c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80194cc:	f000 ba38 	b.w	8019940 <__kernel_sin>
 80194d0:	4822      	ldr	r0, [pc, #136]	; (801955c <sin+0xac>)
 80194d2:	4281      	cmp	r1, r0
 80194d4:	dd09      	ble.n	80194ea <sin+0x3a>
 80194d6:	ee10 0a10 	vmov	r0, s0
 80194da:	4619      	mov	r1, r3
 80194dc:	f7e6 fed4 	bl	8000288 <__aeabi_dsub>
 80194e0:	ec41 0b10 	vmov	d0, r0, r1
 80194e4:	b005      	add	sp, #20
 80194e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80194ea:	4668      	mov	r0, sp
 80194ec:	f001 f814 	bl	801a518 <__ieee754_rem_pio2>
 80194f0:	f000 0003 	and.w	r0, r0, #3
 80194f4:	2801      	cmp	r0, #1
 80194f6:	d00c      	beq.n	8019512 <sin+0x62>
 80194f8:	2802      	cmp	r0, #2
 80194fa:	d011      	beq.n	8019520 <sin+0x70>
 80194fc:	b9f0      	cbnz	r0, 801953c <sin+0x8c>
 80194fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019502:	ed9d 0b00 	vldr	d0, [sp]
 8019506:	2001      	movs	r0, #1
 8019508:	f000 fa1a 	bl	8019940 <__kernel_sin>
 801950c:	ec51 0b10 	vmov	r0, r1, d0
 8019510:	e7e6      	b.n	80194e0 <sin+0x30>
 8019512:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019516:	ed9d 0b00 	vldr	d0, [sp]
 801951a:	f000 f949 	bl	80197b0 <__kernel_cos>
 801951e:	e7f5      	b.n	801950c <sin+0x5c>
 8019520:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019524:	ed9d 0b00 	vldr	d0, [sp]
 8019528:	2001      	movs	r0, #1
 801952a:	f000 fa09 	bl	8019940 <__kernel_sin>
 801952e:	ec53 2b10 	vmov	r2, r3, d0
 8019532:	ee10 0a10 	vmov	r0, s0
 8019536:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801953a:	e7d1      	b.n	80194e0 <sin+0x30>
 801953c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019540:	ed9d 0b00 	vldr	d0, [sp]
 8019544:	f000 f934 	bl	80197b0 <__kernel_cos>
 8019548:	e7f1      	b.n	801952e <sin+0x7e>
 801954a:	bf00      	nop
 801954c:	f3af 8000 	nop.w
	...
 8019558:	3fe921fb 	.word	0x3fe921fb
 801955c:	7fefffff 	.word	0x7fefffff

08019560 <expf>:
 8019560:	b508      	push	{r3, lr}
 8019562:	ed2d 8b02 	vpush	{d8}
 8019566:	eef0 8a40 	vmov.f32	s17, s0
 801956a:	f001 fa19 	bl	801a9a0 <__ieee754_expf>
 801956e:	eeb0 8a40 	vmov.f32	s16, s0
 8019572:	eeb0 0a68 	vmov.f32	s0, s17
 8019576:	f000 f885 	bl	8019684 <finitef>
 801957a:	b160      	cbz	r0, 8019596 <expf+0x36>
 801957c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80195bc <expf+0x5c>
 8019580:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019588:	dd0a      	ble.n	80195a0 <expf+0x40>
 801958a:	f7fd fa49 	bl	8016a20 <__errno>
 801958e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80195c0 <expf+0x60>
 8019592:	2322      	movs	r3, #34	; 0x22
 8019594:	6003      	str	r3, [r0, #0]
 8019596:	eeb0 0a48 	vmov.f32	s0, s16
 801959a:	ecbd 8b02 	vpop	{d8}
 801959e:	bd08      	pop	{r3, pc}
 80195a0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80195c4 <expf+0x64>
 80195a4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80195a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195ac:	d5f3      	bpl.n	8019596 <expf+0x36>
 80195ae:	f7fd fa37 	bl	8016a20 <__errno>
 80195b2:	2322      	movs	r3, #34	; 0x22
 80195b4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80195c8 <expf+0x68>
 80195b8:	6003      	str	r3, [r0, #0]
 80195ba:	e7ec      	b.n	8019596 <expf+0x36>
 80195bc:	42b17217 	.word	0x42b17217
 80195c0:	7f800000 	.word	0x7f800000
 80195c4:	c2cff1b5 	.word	0xc2cff1b5
 80195c8:	00000000 	.word	0x00000000

080195cc <finite>:
 80195cc:	b082      	sub	sp, #8
 80195ce:	ed8d 0b00 	vstr	d0, [sp]
 80195d2:	9801      	ldr	r0, [sp, #4]
 80195d4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80195d8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80195dc:	0fc0      	lsrs	r0, r0, #31
 80195de:	b002      	add	sp, #8
 80195e0:	4770      	bx	lr

080195e2 <fmin>:
 80195e2:	b508      	push	{r3, lr}
 80195e4:	ed2d 8b04 	vpush	{d8-d9}
 80195e8:	eeb0 8a40 	vmov.f32	s16, s0
 80195ec:	eef0 8a60 	vmov.f32	s17, s1
 80195f0:	eeb0 9a41 	vmov.f32	s18, s2
 80195f4:	eef0 9a61 	vmov.f32	s19, s3
 80195f8:	f000 f81a 	bl	8019630 <__fpclassifyd>
 80195fc:	b168      	cbz	r0, 801961a <fmin+0x38>
 80195fe:	eeb0 0a49 	vmov.f32	s0, s18
 8019602:	eef0 0a69 	vmov.f32	s1, s19
 8019606:	f000 f813 	bl	8019630 <__fpclassifyd>
 801960a:	b150      	cbz	r0, 8019622 <fmin+0x40>
 801960c:	ec53 2b19 	vmov	r2, r3, d9
 8019610:	ec51 0b18 	vmov	r0, r1, d8
 8019614:	f7e7 fa62 	bl	8000adc <__aeabi_dcmplt>
 8019618:	b918      	cbnz	r0, 8019622 <fmin+0x40>
 801961a:	eeb0 8a49 	vmov.f32	s16, s18
 801961e:	eef0 8a69 	vmov.f32	s17, s19
 8019622:	eeb0 0a48 	vmov.f32	s0, s16
 8019626:	eef0 0a68 	vmov.f32	s1, s17
 801962a:	ecbd 8b04 	vpop	{d8-d9}
 801962e:	bd08      	pop	{r3, pc}

08019630 <__fpclassifyd>:
 8019630:	ec51 0b10 	vmov	r0, r1, d0
 8019634:	b510      	push	{r4, lr}
 8019636:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 801963a:	460b      	mov	r3, r1
 801963c:	d019      	beq.n	8019672 <__fpclassifyd+0x42>
 801963e:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8019642:	490e      	ldr	r1, [pc, #56]	; (801967c <__fpclassifyd+0x4c>)
 8019644:	428a      	cmp	r2, r1
 8019646:	d90e      	bls.n	8019666 <__fpclassifyd+0x36>
 8019648:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 801964c:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8019650:	428a      	cmp	r2, r1
 8019652:	d908      	bls.n	8019666 <__fpclassifyd+0x36>
 8019654:	4a0a      	ldr	r2, [pc, #40]	; (8019680 <__fpclassifyd+0x50>)
 8019656:	4213      	tst	r3, r2
 8019658:	d007      	beq.n	801966a <__fpclassifyd+0x3a>
 801965a:	4294      	cmp	r4, r2
 801965c:	d107      	bne.n	801966e <__fpclassifyd+0x3e>
 801965e:	fab0 f080 	clz	r0, r0
 8019662:	0940      	lsrs	r0, r0, #5
 8019664:	bd10      	pop	{r4, pc}
 8019666:	2004      	movs	r0, #4
 8019668:	e7fc      	b.n	8019664 <__fpclassifyd+0x34>
 801966a:	2003      	movs	r0, #3
 801966c:	e7fa      	b.n	8019664 <__fpclassifyd+0x34>
 801966e:	2000      	movs	r0, #0
 8019670:	e7f8      	b.n	8019664 <__fpclassifyd+0x34>
 8019672:	2800      	cmp	r0, #0
 8019674:	d1ee      	bne.n	8019654 <__fpclassifyd+0x24>
 8019676:	2002      	movs	r0, #2
 8019678:	e7f4      	b.n	8019664 <__fpclassifyd+0x34>
 801967a:	bf00      	nop
 801967c:	7fdfffff 	.word	0x7fdfffff
 8019680:	7ff00000 	.word	0x7ff00000

08019684 <finitef>:
 8019684:	b082      	sub	sp, #8
 8019686:	ed8d 0a01 	vstr	s0, [sp, #4]
 801968a:	9801      	ldr	r0, [sp, #4]
 801968c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019690:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8019694:	bfac      	ite	ge
 8019696:	2000      	movge	r0, #0
 8019698:	2001      	movlt	r0, #1
 801969a:	b002      	add	sp, #8
 801969c:	4770      	bx	lr

0801969e <cosl>:
 801969e:	f7ff beb3 	b.w	8019408 <cos>

080196a2 <sinl>:
 80196a2:	f7ff bf05 	b.w	80194b0 <sin>

080196a6 <acosl>:
 80196a6:	f001 b93d 	b.w	801a924 <acos>
 80196aa:	0000      	movs	r0, r0
 80196ac:	0000      	movs	r0, r0
	...

080196b0 <floor>:
 80196b0:	ec51 0b10 	vmov	r0, r1, d0
 80196b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80196b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196bc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80196c0:	2e13      	cmp	r6, #19
 80196c2:	ee10 5a10 	vmov	r5, s0
 80196c6:	ee10 8a10 	vmov	r8, s0
 80196ca:	460c      	mov	r4, r1
 80196cc:	dc31      	bgt.n	8019732 <floor+0x82>
 80196ce:	2e00      	cmp	r6, #0
 80196d0:	da14      	bge.n	80196fc <floor+0x4c>
 80196d2:	a333      	add	r3, pc, #204	; (adr r3, 80197a0 <floor+0xf0>)
 80196d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196d8:	f7e6 fdd8 	bl	800028c <__adddf3>
 80196dc:	2200      	movs	r2, #0
 80196de:	2300      	movs	r3, #0
 80196e0:	f7e7 fa1a 	bl	8000b18 <__aeabi_dcmpgt>
 80196e4:	b138      	cbz	r0, 80196f6 <floor+0x46>
 80196e6:	2c00      	cmp	r4, #0
 80196e8:	da53      	bge.n	8019792 <floor+0xe2>
 80196ea:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80196ee:	4325      	orrs	r5, r4
 80196f0:	d052      	beq.n	8019798 <floor+0xe8>
 80196f2:	4c2d      	ldr	r4, [pc, #180]	; (80197a8 <floor+0xf8>)
 80196f4:	2500      	movs	r5, #0
 80196f6:	4621      	mov	r1, r4
 80196f8:	4628      	mov	r0, r5
 80196fa:	e024      	b.n	8019746 <floor+0x96>
 80196fc:	4f2b      	ldr	r7, [pc, #172]	; (80197ac <floor+0xfc>)
 80196fe:	4137      	asrs	r7, r6
 8019700:	ea01 0307 	and.w	r3, r1, r7
 8019704:	4303      	orrs	r3, r0
 8019706:	d01e      	beq.n	8019746 <floor+0x96>
 8019708:	a325      	add	r3, pc, #148	; (adr r3, 80197a0 <floor+0xf0>)
 801970a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801970e:	f7e6 fdbd 	bl	800028c <__adddf3>
 8019712:	2200      	movs	r2, #0
 8019714:	2300      	movs	r3, #0
 8019716:	f7e7 f9ff 	bl	8000b18 <__aeabi_dcmpgt>
 801971a:	2800      	cmp	r0, #0
 801971c:	d0eb      	beq.n	80196f6 <floor+0x46>
 801971e:	2c00      	cmp	r4, #0
 8019720:	bfbe      	ittt	lt
 8019722:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8019726:	4133      	asrlt	r3, r6
 8019728:	18e4      	addlt	r4, r4, r3
 801972a:	ea24 0407 	bic.w	r4, r4, r7
 801972e:	2500      	movs	r5, #0
 8019730:	e7e1      	b.n	80196f6 <floor+0x46>
 8019732:	2e33      	cmp	r6, #51	; 0x33
 8019734:	dd0b      	ble.n	801974e <floor+0x9e>
 8019736:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801973a:	d104      	bne.n	8019746 <floor+0x96>
 801973c:	ee10 2a10 	vmov	r2, s0
 8019740:	460b      	mov	r3, r1
 8019742:	f7e6 fda3 	bl	800028c <__adddf3>
 8019746:	ec41 0b10 	vmov	d0, r0, r1
 801974a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801974e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8019752:	f04f 37ff 	mov.w	r7, #4294967295
 8019756:	40df      	lsrs	r7, r3
 8019758:	4238      	tst	r0, r7
 801975a:	d0f4      	beq.n	8019746 <floor+0x96>
 801975c:	a310      	add	r3, pc, #64	; (adr r3, 80197a0 <floor+0xf0>)
 801975e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019762:	f7e6 fd93 	bl	800028c <__adddf3>
 8019766:	2200      	movs	r2, #0
 8019768:	2300      	movs	r3, #0
 801976a:	f7e7 f9d5 	bl	8000b18 <__aeabi_dcmpgt>
 801976e:	2800      	cmp	r0, #0
 8019770:	d0c1      	beq.n	80196f6 <floor+0x46>
 8019772:	2c00      	cmp	r4, #0
 8019774:	da0a      	bge.n	801978c <floor+0xdc>
 8019776:	2e14      	cmp	r6, #20
 8019778:	d101      	bne.n	801977e <floor+0xce>
 801977a:	3401      	adds	r4, #1
 801977c:	e006      	b.n	801978c <floor+0xdc>
 801977e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019782:	2301      	movs	r3, #1
 8019784:	40b3      	lsls	r3, r6
 8019786:	441d      	add	r5, r3
 8019788:	45a8      	cmp	r8, r5
 801978a:	d8f6      	bhi.n	801977a <floor+0xca>
 801978c:	ea25 0507 	bic.w	r5, r5, r7
 8019790:	e7b1      	b.n	80196f6 <floor+0x46>
 8019792:	2500      	movs	r5, #0
 8019794:	462c      	mov	r4, r5
 8019796:	e7ae      	b.n	80196f6 <floor+0x46>
 8019798:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801979c:	e7ab      	b.n	80196f6 <floor+0x46>
 801979e:	bf00      	nop
 80197a0:	8800759c 	.word	0x8800759c
 80197a4:	7e37e43c 	.word	0x7e37e43c
 80197a8:	bff00000 	.word	0xbff00000
 80197ac:	000fffff 	.word	0x000fffff

080197b0 <__kernel_cos>:
 80197b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197b4:	ec57 6b10 	vmov	r6, r7, d0
 80197b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80197bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80197c0:	ed8d 1b00 	vstr	d1, [sp]
 80197c4:	da07      	bge.n	80197d6 <__kernel_cos+0x26>
 80197c6:	ee10 0a10 	vmov	r0, s0
 80197ca:	4639      	mov	r1, r7
 80197cc:	f7e7 f9c4 	bl	8000b58 <__aeabi_d2iz>
 80197d0:	2800      	cmp	r0, #0
 80197d2:	f000 8088 	beq.w	80198e6 <__kernel_cos+0x136>
 80197d6:	4632      	mov	r2, r6
 80197d8:	463b      	mov	r3, r7
 80197da:	4630      	mov	r0, r6
 80197dc:	4639      	mov	r1, r7
 80197de:	f7e6 ff0b 	bl	80005f8 <__aeabi_dmul>
 80197e2:	4b51      	ldr	r3, [pc, #324]	; (8019928 <__kernel_cos+0x178>)
 80197e4:	2200      	movs	r2, #0
 80197e6:	4604      	mov	r4, r0
 80197e8:	460d      	mov	r5, r1
 80197ea:	f7e6 ff05 	bl	80005f8 <__aeabi_dmul>
 80197ee:	a340      	add	r3, pc, #256	; (adr r3, 80198f0 <__kernel_cos+0x140>)
 80197f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197f4:	4682      	mov	sl, r0
 80197f6:	468b      	mov	fp, r1
 80197f8:	4620      	mov	r0, r4
 80197fa:	4629      	mov	r1, r5
 80197fc:	f7e6 fefc 	bl	80005f8 <__aeabi_dmul>
 8019800:	a33d      	add	r3, pc, #244	; (adr r3, 80198f8 <__kernel_cos+0x148>)
 8019802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019806:	f7e6 fd41 	bl	800028c <__adddf3>
 801980a:	4622      	mov	r2, r4
 801980c:	462b      	mov	r3, r5
 801980e:	f7e6 fef3 	bl	80005f8 <__aeabi_dmul>
 8019812:	a33b      	add	r3, pc, #236	; (adr r3, 8019900 <__kernel_cos+0x150>)
 8019814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019818:	f7e6 fd36 	bl	8000288 <__aeabi_dsub>
 801981c:	4622      	mov	r2, r4
 801981e:	462b      	mov	r3, r5
 8019820:	f7e6 feea 	bl	80005f8 <__aeabi_dmul>
 8019824:	a338      	add	r3, pc, #224	; (adr r3, 8019908 <__kernel_cos+0x158>)
 8019826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801982a:	f7e6 fd2f 	bl	800028c <__adddf3>
 801982e:	4622      	mov	r2, r4
 8019830:	462b      	mov	r3, r5
 8019832:	f7e6 fee1 	bl	80005f8 <__aeabi_dmul>
 8019836:	a336      	add	r3, pc, #216	; (adr r3, 8019910 <__kernel_cos+0x160>)
 8019838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801983c:	f7e6 fd24 	bl	8000288 <__aeabi_dsub>
 8019840:	4622      	mov	r2, r4
 8019842:	462b      	mov	r3, r5
 8019844:	f7e6 fed8 	bl	80005f8 <__aeabi_dmul>
 8019848:	a333      	add	r3, pc, #204	; (adr r3, 8019918 <__kernel_cos+0x168>)
 801984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801984e:	f7e6 fd1d 	bl	800028c <__adddf3>
 8019852:	4622      	mov	r2, r4
 8019854:	462b      	mov	r3, r5
 8019856:	f7e6 fecf 	bl	80005f8 <__aeabi_dmul>
 801985a:	4622      	mov	r2, r4
 801985c:	462b      	mov	r3, r5
 801985e:	f7e6 fecb 	bl	80005f8 <__aeabi_dmul>
 8019862:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019866:	4604      	mov	r4, r0
 8019868:	460d      	mov	r5, r1
 801986a:	4630      	mov	r0, r6
 801986c:	4639      	mov	r1, r7
 801986e:	f7e6 fec3 	bl	80005f8 <__aeabi_dmul>
 8019872:	460b      	mov	r3, r1
 8019874:	4602      	mov	r2, r0
 8019876:	4629      	mov	r1, r5
 8019878:	4620      	mov	r0, r4
 801987a:	f7e6 fd05 	bl	8000288 <__aeabi_dsub>
 801987e:	4b2b      	ldr	r3, [pc, #172]	; (801992c <__kernel_cos+0x17c>)
 8019880:	4598      	cmp	r8, r3
 8019882:	4606      	mov	r6, r0
 8019884:	460f      	mov	r7, r1
 8019886:	dc10      	bgt.n	80198aa <__kernel_cos+0xfa>
 8019888:	4602      	mov	r2, r0
 801988a:	460b      	mov	r3, r1
 801988c:	4650      	mov	r0, sl
 801988e:	4659      	mov	r1, fp
 8019890:	f7e6 fcfa 	bl	8000288 <__aeabi_dsub>
 8019894:	460b      	mov	r3, r1
 8019896:	4926      	ldr	r1, [pc, #152]	; (8019930 <__kernel_cos+0x180>)
 8019898:	4602      	mov	r2, r0
 801989a:	2000      	movs	r0, #0
 801989c:	f7e6 fcf4 	bl	8000288 <__aeabi_dsub>
 80198a0:	ec41 0b10 	vmov	d0, r0, r1
 80198a4:	b003      	add	sp, #12
 80198a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198aa:	4b22      	ldr	r3, [pc, #136]	; (8019934 <__kernel_cos+0x184>)
 80198ac:	4920      	ldr	r1, [pc, #128]	; (8019930 <__kernel_cos+0x180>)
 80198ae:	4598      	cmp	r8, r3
 80198b0:	bfcc      	ite	gt
 80198b2:	4d21      	ldrgt	r5, [pc, #132]	; (8019938 <__kernel_cos+0x188>)
 80198b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80198b8:	2400      	movs	r4, #0
 80198ba:	4622      	mov	r2, r4
 80198bc:	462b      	mov	r3, r5
 80198be:	2000      	movs	r0, #0
 80198c0:	f7e6 fce2 	bl	8000288 <__aeabi_dsub>
 80198c4:	4622      	mov	r2, r4
 80198c6:	4680      	mov	r8, r0
 80198c8:	4689      	mov	r9, r1
 80198ca:	462b      	mov	r3, r5
 80198cc:	4650      	mov	r0, sl
 80198ce:	4659      	mov	r1, fp
 80198d0:	f7e6 fcda 	bl	8000288 <__aeabi_dsub>
 80198d4:	4632      	mov	r2, r6
 80198d6:	463b      	mov	r3, r7
 80198d8:	f7e6 fcd6 	bl	8000288 <__aeabi_dsub>
 80198dc:	4602      	mov	r2, r0
 80198de:	460b      	mov	r3, r1
 80198e0:	4640      	mov	r0, r8
 80198e2:	4649      	mov	r1, r9
 80198e4:	e7da      	b.n	801989c <__kernel_cos+0xec>
 80198e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8019920 <__kernel_cos+0x170>
 80198ea:	e7db      	b.n	80198a4 <__kernel_cos+0xf4>
 80198ec:	f3af 8000 	nop.w
 80198f0:	be8838d4 	.word	0xbe8838d4
 80198f4:	bda8fae9 	.word	0xbda8fae9
 80198f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80198fc:	3e21ee9e 	.word	0x3e21ee9e
 8019900:	809c52ad 	.word	0x809c52ad
 8019904:	3e927e4f 	.word	0x3e927e4f
 8019908:	19cb1590 	.word	0x19cb1590
 801990c:	3efa01a0 	.word	0x3efa01a0
 8019910:	16c15177 	.word	0x16c15177
 8019914:	3f56c16c 	.word	0x3f56c16c
 8019918:	5555554c 	.word	0x5555554c
 801991c:	3fa55555 	.word	0x3fa55555
 8019920:	00000000 	.word	0x00000000
 8019924:	3ff00000 	.word	0x3ff00000
 8019928:	3fe00000 	.word	0x3fe00000
 801992c:	3fd33332 	.word	0x3fd33332
 8019930:	3ff00000 	.word	0x3ff00000
 8019934:	3fe90000 	.word	0x3fe90000
 8019938:	3fd20000 	.word	0x3fd20000
 801993c:	00000000 	.word	0x00000000

08019940 <__kernel_sin>:
 8019940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019944:	ed2d 8b04 	vpush	{d8-d9}
 8019948:	eeb0 8a41 	vmov.f32	s16, s2
 801994c:	eef0 8a61 	vmov.f32	s17, s3
 8019950:	ec55 4b10 	vmov	r4, r5, d0
 8019954:	b083      	sub	sp, #12
 8019956:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801995a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801995e:	9001      	str	r0, [sp, #4]
 8019960:	da06      	bge.n	8019970 <__kernel_sin+0x30>
 8019962:	ee10 0a10 	vmov	r0, s0
 8019966:	4629      	mov	r1, r5
 8019968:	f7e7 f8f6 	bl	8000b58 <__aeabi_d2iz>
 801996c:	2800      	cmp	r0, #0
 801996e:	d051      	beq.n	8019a14 <__kernel_sin+0xd4>
 8019970:	4622      	mov	r2, r4
 8019972:	462b      	mov	r3, r5
 8019974:	4620      	mov	r0, r4
 8019976:	4629      	mov	r1, r5
 8019978:	f7e6 fe3e 	bl	80005f8 <__aeabi_dmul>
 801997c:	4682      	mov	sl, r0
 801997e:	468b      	mov	fp, r1
 8019980:	4602      	mov	r2, r0
 8019982:	460b      	mov	r3, r1
 8019984:	4620      	mov	r0, r4
 8019986:	4629      	mov	r1, r5
 8019988:	f7e6 fe36 	bl	80005f8 <__aeabi_dmul>
 801998c:	a341      	add	r3, pc, #260	; (adr r3, 8019a94 <__kernel_sin+0x154>)
 801998e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019992:	4680      	mov	r8, r0
 8019994:	4689      	mov	r9, r1
 8019996:	4650      	mov	r0, sl
 8019998:	4659      	mov	r1, fp
 801999a:	f7e6 fe2d 	bl	80005f8 <__aeabi_dmul>
 801999e:	a33f      	add	r3, pc, #252	; (adr r3, 8019a9c <__kernel_sin+0x15c>)
 80199a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199a4:	f7e6 fc70 	bl	8000288 <__aeabi_dsub>
 80199a8:	4652      	mov	r2, sl
 80199aa:	465b      	mov	r3, fp
 80199ac:	f7e6 fe24 	bl	80005f8 <__aeabi_dmul>
 80199b0:	a33c      	add	r3, pc, #240	; (adr r3, 8019aa4 <__kernel_sin+0x164>)
 80199b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199b6:	f7e6 fc69 	bl	800028c <__adddf3>
 80199ba:	4652      	mov	r2, sl
 80199bc:	465b      	mov	r3, fp
 80199be:	f7e6 fe1b 	bl	80005f8 <__aeabi_dmul>
 80199c2:	a33a      	add	r3, pc, #232	; (adr r3, 8019aac <__kernel_sin+0x16c>)
 80199c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199c8:	f7e6 fc5e 	bl	8000288 <__aeabi_dsub>
 80199cc:	4652      	mov	r2, sl
 80199ce:	465b      	mov	r3, fp
 80199d0:	f7e6 fe12 	bl	80005f8 <__aeabi_dmul>
 80199d4:	a337      	add	r3, pc, #220	; (adr r3, 8019ab4 <__kernel_sin+0x174>)
 80199d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199da:	f7e6 fc57 	bl	800028c <__adddf3>
 80199de:	9b01      	ldr	r3, [sp, #4]
 80199e0:	4606      	mov	r6, r0
 80199e2:	460f      	mov	r7, r1
 80199e4:	b9eb      	cbnz	r3, 8019a22 <__kernel_sin+0xe2>
 80199e6:	4602      	mov	r2, r0
 80199e8:	460b      	mov	r3, r1
 80199ea:	4650      	mov	r0, sl
 80199ec:	4659      	mov	r1, fp
 80199ee:	f7e6 fe03 	bl	80005f8 <__aeabi_dmul>
 80199f2:	a325      	add	r3, pc, #148	; (adr r3, 8019a88 <__kernel_sin+0x148>)
 80199f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199f8:	f7e6 fc46 	bl	8000288 <__aeabi_dsub>
 80199fc:	4642      	mov	r2, r8
 80199fe:	464b      	mov	r3, r9
 8019a00:	f7e6 fdfa 	bl	80005f8 <__aeabi_dmul>
 8019a04:	4602      	mov	r2, r0
 8019a06:	460b      	mov	r3, r1
 8019a08:	4620      	mov	r0, r4
 8019a0a:	4629      	mov	r1, r5
 8019a0c:	f7e6 fc3e 	bl	800028c <__adddf3>
 8019a10:	4604      	mov	r4, r0
 8019a12:	460d      	mov	r5, r1
 8019a14:	ec45 4b10 	vmov	d0, r4, r5
 8019a18:	b003      	add	sp, #12
 8019a1a:	ecbd 8b04 	vpop	{d8-d9}
 8019a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a22:	4b1b      	ldr	r3, [pc, #108]	; (8019a90 <__kernel_sin+0x150>)
 8019a24:	ec51 0b18 	vmov	r0, r1, d8
 8019a28:	2200      	movs	r2, #0
 8019a2a:	f7e6 fde5 	bl	80005f8 <__aeabi_dmul>
 8019a2e:	4632      	mov	r2, r6
 8019a30:	ec41 0b19 	vmov	d9, r0, r1
 8019a34:	463b      	mov	r3, r7
 8019a36:	4640      	mov	r0, r8
 8019a38:	4649      	mov	r1, r9
 8019a3a:	f7e6 fddd 	bl	80005f8 <__aeabi_dmul>
 8019a3e:	4602      	mov	r2, r0
 8019a40:	460b      	mov	r3, r1
 8019a42:	ec51 0b19 	vmov	r0, r1, d9
 8019a46:	f7e6 fc1f 	bl	8000288 <__aeabi_dsub>
 8019a4a:	4652      	mov	r2, sl
 8019a4c:	465b      	mov	r3, fp
 8019a4e:	f7e6 fdd3 	bl	80005f8 <__aeabi_dmul>
 8019a52:	ec53 2b18 	vmov	r2, r3, d8
 8019a56:	f7e6 fc17 	bl	8000288 <__aeabi_dsub>
 8019a5a:	a30b      	add	r3, pc, #44	; (adr r3, 8019a88 <__kernel_sin+0x148>)
 8019a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a60:	4606      	mov	r6, r0
 8019a62:	460f      	mov	r7, r1
 8019a64:	4640      	mov	r0, r8
 8019a66:	4649      	mov	r1, r9
 8019a68:	f7e6 fdc6 	bl	80005f8 <__aeabi_dmul>
 8019a6c:	4602      	mov	r2, r0
 8019a6e:	460b      	mov	r3, r1
 8019a70:	4630      	mov	r0, r6
 8019a72:	4639      	mov	r1, r7
 8019a74:	f7e6 fc0a 	bl	800028c <__adddf3>
 8019a78:	4602      	mov	r2, r0
 8019a7a:	460b      	mov	r3, r1
 8019a7c:	4620      	mov	r0, r4
 8019a7e:	4629      	mov	r1, r5
 8019a80:	f7e6 fc02 	bl	8000288 <__aeabi_dsub>
 8019a84:	e7c4      	b.n	8019a10 <__kernel_sin+0xd0>
 8019a86:	bf00      	nop
 8019a88:	55555549 	.word	0x55555549
 8019a8c:	3fc55555 	.word	0x3fc55555
 8019a90:	3fe00000 	.word	0x3fe00000
 8019a94:	5acfd57c 	.word	0x5acfd57c
 8019a98:	3de5d93a 	.word	0x3de5d93a
 8019a9c:	8a2b9ceb 	.word	0x8a2b9ceb
 8019aa0:	3e5ae5e6 	.word	0x3e5ae5e6
 8019aa4:	57b1fe7d 	.word	0x57b1fe7d
 8019aa8:	3ec71de3 	.word	0x3ec71de3
 8019aac:	19c161d5 	.word	0x19c161d5
 8019ab0:	3f2a01a0 	.word	0x3f2a01a0
 8019ab4:	1110f8a6 	.word	0x1110f8a6
 8019ab8:	3f811111 	.word	0x3f811111
 8019abc:	00000000 	.word	0x00000000

08019ac0 <__ieee754_pow>:
 8019ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ac4:	ed2d 8b06 	vpush	{d8-d10}
 8019ac8:	b089      	sub	sp, #36	; 0x24
 8019aca:	ed8d 1b00 	vstr	d1, [sp]
 8019ace:	e9dd 2900 	ldrd	r2, r9, [sp]
 8019ad2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8019ad6:	ea58 0102 	orrs.w	r1, r8, r2
 8019ada:	ec57 6b10 	vmov	r6, r7, d0
 8019ade:	d115      	bne.n	8019b0c <__ieee754_pow+0x4c>
 8019ae0:	19b3      	adds	r3, r6, r6
 8019ae2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8019ae6:	4152      	adcs	r2, r2
 8019ae8:	4299      	cmp	r1, r3
 8019aea:	4b89      	ldr	r3, [pc, #548]	; (8019d10 <__ieee754_pow+0x250>)
 8019aec:	4193      	sbcs	r3, r2
 8019aee:	f080 84d1 	bcs.w	801a494 <__ieee754_pow+0x9d4>
 8019af2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019af6:	4630      	mov	r0, r6
 8019af8:	4639      	mov	r1, r7
 8019afa:	f7e6 fbc7 	bl	800028c <__adddf3>
 8019afe:	ec41 0b10 	vmov	d0, r0, r1
 8019b02:	b009      	add	sp, #36	; 0x24
 8019b04:	ecbd 8b06 	vpop	{d8-d10}
 8019b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b0c:	4b81      	ldr	r3, [pc, #516]	; (8019d14 <__ieee754_pow+0x254>)
 8019b0e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8019b12:	429c      	cmp	r4, r3
 8019b14:	ee10 aa10 	vmov	sl, s0
 8019b18:	463d      	mov	r5, r7
 8019b1a:	dc06      	bgt.n	8019b2a <__ieee754_pow+0x6a>
 8019b1c:	d101      	bne.n	8019b22 <__ieee754_pow+0x62>
 8019b1e:	2e00      	cmp	r6, #0
 8019b20:	d1e7      	bne.n	8019af2 <__ieee754_pow+0x32>
 8019b22:	4598      	cmp	r8, r3
 8019b24:	dc01      	bgt.n	8019b2a <__ieee754_pow+0x6a>
 8019b26:	d10f      	bne.n	8019b48 <__ieee754_pow+0x88>
 8019b28:	b172      	cbz	r2, 8019b48 <__ieee754_pow+0x88>
 8019b2a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8019b2e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8019b32:	ea55 050a 	orrs.w	r5, r5, sl
 8019b36:	d1dc      	bne.n	8019af2 <__ieee754_pow+0x32>
 8019b38:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019b3c:	18db      	adds	r3, r3, r3
 8019b3e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8019b42:	4152      	adcs	r2, r2
 8019b44:	429d      	cmp	r5, r3
 8019b46:	e7d0      	b.n	8019aea <__ieee754_pow+0x2a>
 8019b48:	2d00      	cmp	r5, #0
 8019b4a:	da3b      	bge.n	8019bc4 <__ieee754_pow+0x104>
 8019b4c:	4b72      	ldr	r3, [pc, #456]	; (8019d18 <__ieee754_pow+0x258>)
 8019b4e:	4598      	cmp	r8, r3
 8019b50:	dc51      	bgt.n	8019bf6 <__ieee754_pow+0x136>
 8019b52:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8019b56:	4598      	cmp	r8, r3
 8019b58:	f340 84ab 	ble.w	801a4b2 <__ieee754_pow+0x9f2>
 8019b5c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019b60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019b64:	2b14      	cmp	r3, #20
 8019b66:	dd0f      	ble.n	8019b88 <__ieee754_pow+0xc8>
 8019b68:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8019b6c:	fa22 f103 	lsr.w	r1, r2, r3
 8019b70:	fa01 f303 	lsl.w	r3, r1, r3
 8019b74:	4293      	cmp	r3, r2
 8019b76:	f040 849c 	bne.w	801a4b2 <__ieee754_pow+0x9f2>
 8019b7a:	f001 0101 	and.w	r1, r1, #1
 8019b7e:	f1c1 0302 	rsb	r3, r1, #2
 8019b82:	9304      	str	r3, [sp, #16]
 8019b84:	b182      	cbz	r2, 8019ba8 <__ieee754_pow+0xe8>
 8019b86:	e05f      	b.n	8019c48 <__ieee754_pow+0x188>
 8019b88:	2a00      	cmp	r2, #0
 8019b8a:	d15b      	bne.n	8019c44 <__ieee754_pow+0x184>
 8019b8c:	f1c3 0314 	rsb	r3, r3, #20
 8019b90:	fa48 f103 	asr.w	r1, r8, r3
 8019b94:	fa01 f303 	lsl.w	r3, r1, r3
 8019b98:	4543      	cmp	r3, r8
 8019b9a:	f040 8487 	bne.w	801a4ac <__ieee754_pow+0x9ec>
 8019b9e:	f001 0101 	and.w	r1, r1, #1
 8019ba2:	f1c1 0302 	rsb	r3, r1, #2
 8019ba6:	9304      	str	r3, [sp, #16]
 8019ba8:	4b5c      	ldr	r3, [pc, #368]	; (8019d1c <__ieee754_pow+0x25c>)
 8019baa:	4598      	cmp	r8, r3
 8019bac:	d132      	bne.n	8019c14 <__ieee754_pow+0x154>
 8019bae:	f1b9 0f00 	cmp.w	r9, #0
 8019bb2:	f280 8477 	bge.w	801a4a4 <__ieee754_pow+0x9e4>
 8019bb6:	4959      	ldr	r1, [pc, #356]	; (8019d1c <__ieee754_pow+0x25c>)
 8019bb8:	4632      	mov	r2, r6
 8019bba:	463b      	mov	r3, r7
 8019bbc:	2000      	movs	r0, #0
 8019bbe:	f7e6 fe45 	bl	800084c <__aeabi_ddiv>
 8019bc2:	e79c      	b.n	8019afe <__ieee754_pow+0x3e>
 8019bc4:	2300      	movs	r3, #0
 8019bc6:	9304      	str	r3, [sp, #16]
 8019bc8:	2a00      	cmp	r2, #0
 8019bca:	d13d      	bne.n	8019c48 <__ieee754_pow+0x188>
 8019bcc:	4b51      	ldr	r3, [pc, #324]	; (8019d14 <__ieee754_pow+0x254>)
 8019bce:	4598      	cmp	r8, r3
 8019bd0:	d1ea      	bne.n	8019ba8 <__ieee754_pow+0xe8>
 8019bd2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8019bd6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8019bda:	ea53 030a 	orrs.w	r3, r3, sl
 8019bde:	f000 8459 	beq.w	801a494 <__ieee754_pow+0x9d4>
 8019be2:	4b4f      	ldr	r3, [pc, #316]	; (8019d20 <__ieee754_pow+0x260>)
 8019be4:	429c      	cmp	r4, r3
 8019be6:	dd08      	ble.n	8019bfa <__ieee754_pow+0x13a>
 8019be8:	f1b9 0f00 	cmp.w	r9, #0
 8019bec:	f2c0 8456 	blt.w	801a49c <__ieee754_pow+0x9dc>
 8019bf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019bf4:	e783      	b.n	8019afe <__ieee754_pow+0x3e>
 8019bf6:	2302      	movs	r3, #2
 8019bf8:	e7e5      	b.n	8019bc6 <__ieee754_pow+0x106>
 8019bfa:	f1b9 0f00 	cmp.w	r9, #0
 8019bfe:	f04f 0000 	mov.w	r0, #0
 8019c02:	f04f 0100 	mov.w	r1, #0
 8019c06:	f6bf af7a 	bge.w	8019afe <__ieee754_pow+0x3e>
 8019c0a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8019c0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019c12:	e774      	b.n	8019afe <__ieee754_pow+0x3e>
 8019c14:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8019c18:	d106      	bne.n	8019c28 <__ieee754_pow+0x168>
 8019c1a:	4632      	mov	r2, r6
 8019c1c:	463b      	mov	r3, r7
 8019c1e:	4630      	mov	r0, r6
 8019c20:	4639      	mov	r1, r7
 8019c22:	f7e6 fce9 	bl	80005f8 <__aeabi_dmul>
 8019c26:	e76a      	b.n	8019afe <__ieee754_pow+0x3e>
 8019c28:	4b3e      	ldr	r3, [pc, #248]	; (8019d24 <__ieee754_pow+0x264>)
 8019c2a:	4599      	cmp	r9, r3
 8019c2c:	d10c      	bne.n	8019c48 <__ieee754_pow+0x188>
 8019c2e:	2d00      	cmp	r5, #0
 8019c30:	db0a      	blt.n	8019c48 <__ieee754_pow+0x188>
 8019c32:	ec47 6b10 	vmov	d0, r6, r7
 8019c36:	b009      	add	sp, #36	; 0x24
 8019c38:	ecbd 8b06 	vpop	{d8-d10}
 8019c3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c40:	f001 b84e 	b.w	801ace0 <__ieee754_sqrt>
 8019c44:	2300      	movs	r3, #0
 8019c46:	9304      	str	r3, [sp, #16]
 8019c48:	ec47 6b10 	vmov	d0, r6, r7
 8019c4c:	f000 fe9e 	bl	801a98c <fabs>
 8019c50:	ec51 0b10 	vmov	r0, r1, d0
 8019c54:	f1ba 0f00 	cmp.w	sl, #0
 8019c58:	d129      	bne.n	8019cae <__ieee754_pow+0x1ee>
 8019c5a:	b124      	cbz	r4, 8019c66 <__ieee754_pow+0x1a6>
 8019c5c:	4b2f      	ldr	r3, [pc, #188]	; (8019d1c <__ieee754_pow+0x25c>)
 8019c5e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8019c62:	429a      	cmp	r2, r3
 8019c64:	d123      	bne.n	8019cae <__ieee754_pow+0x1ee>
 8019c66:	f1b9 0f00 	cmp.w	r9, #0
 8019c6a:	da05      	bge.n	8019c78 <__ieee754_pow+0x1b8>
 8019c6c:	4602      	mov	r2, r0
 8019c6e:	460b      	mov	r3, r1
 8019c70:	2000      	movs	r0, #0
 8019c72:	492a      	ldr	r1, [pc, #168]	; (8019d1c <__ieee754_pow+0x25c>)
 8019c74:	f7e6 fdea 	bl	800084c <__aeabi_ddiv>
 8019c78:	2d00      	cmp	r5, #0
 8019c7a:	f6bf af40 	bge.w	8019afe <__ieee754_pow+0x3e>
 8019c7e:	9b04      	ldr	r3, [sp, #16]
 8019c80:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019c84:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019c88:	431c      	orrs	r4, r3
 8019c8a:	d108      	bne.n	8019c9e <__ieee754_pow+0x1de>
 8019c8c:	4602      	mov	r2, r0
 8019c8e:	460b      	mov	r3, r1
 8019c90:	4610      	mov	r0, r2
 8019c92:	4619      	mov	r1, r3
 8019c94:	f7e6 faf8 	bl	8000288 <__aeabi_dsub>
 8019c98:	4602      	mov	r2, r0
 8019c9a:	460b      	mov	r3, r1
 8019c9c:	e78f      	b.n	8019bbe <__ieee754_pow+0xfe>
 8019c9e:	9b04      	ldr	r3, [sp, #16]
 8019ca0:	2b01      	cmp	r3, #1
 8019ca2:	f47f af2c 	bne.w	8019afe <__ieee754_pow+0x3e>
 8019ca6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019caa:	4619      	mov	r1, r3
 8019cac:	e727      	b.n	8019afe <__ieee754_pow+0x3e>
 8019cae:	0feb      	lsrs	r3, r5, #31
 8019cb0:	3b01      	subs	r3, #1
 8019cb2:	9306      	str	r3, [sp, #24]
 8019cb4:	9a06      	ldr	r2, [sp, #24]
 8019cb6:	9b04      	ldr	r3, [sp, #16]
 8019cb8:	4313      	orrs	r3, r2
 8019cba:	d102      	bne.n	8019cc2 <__ieee754_pow+0x202>
 8019cbc:	4632      	mov	r2, r6
 8019cbe:	463b      	mov	r3, r7
 8019cc0:	e7e6      	b.n	8019c90 <__ieee754_pow+0x1d0>
 8019cc2:	4b19      	ldr	r3, [pc, #100]	; (8019d28 <__ieee754_pow+0x268>)
 8019cc4:	4598      	cmp	r8, r3
 8019cc6:	f340 80fb 	ble.w	8019ec0 <__ieee754_pow+0x400>
 8019cca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8019cce:	4598      	cmp	r8, r3
 8019cd0:	4b13      	ldr	r3, [pc, #76]	; (8019d20 <__ieee754_pow+0x260>)
 8019cd2:	dd0c      	ble.n	8019cee <__ieee754_pow+0x22e>
 8019cd4:	429c      	cmp	r4, r3
 8019cd6:	dc0f      	bgt.n	8019cf8 <__ieee754_pow+0x238>
 8019cd8:	f1b9 0f00 	cmp.w	r9, #0
 8019cdc:	da0f      	bge.n	8019cfe <__ieee754_pow+0x23e>
 8019cde:	2000      	movs	r0, #0
 8019ce0:	b009      	add	sp, #36	; 0x24
 8019ce2:	ecbd 8b06 	vpop	{d8-d10}
 8019ce6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cea:	f000 bfce 	b.w	801ac8a <__math_oflow>
 8019cee:	429c      	cmp	r4, r3
 8019cf0:	dbf2      	blt.n	8019cd8 <__ieee754_pow+0x218>
 8019cf2:	4b0a      	ldr	r3, [pc, #40]	; (8019d1c <__ieee754_pow+0x25c>)
 8019cf4:	429c      	cmp	r4, r3
 8019cf6:	dd19      	ble.n	8019d2c <__ieee754_pow+0x26c>
 8019cf8:	f1b9 0f00 	cmp.w	r9, #0
 8019cfc:	dcef      	bgt.n	8019cde <__ieee754_pow+0x21e>
 8019cfe:	2000      	movs	r0, #0
 8019d00:	b009      	add	sp, #36	; 0x24
 8019d02:	ecbd 8b06 	vpop	{d8-d10}
 8019d06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d0a:	f000 bfb5 	b.w	801ac78 <__math_uflow>
 8019d0e:	bf00      	nop
 8019d10:	fff00000 	.word	0xfff00000
 8019d14:	7ff00000 	.word	0x7ff00000
 8019d18:	433fffff 	.word	0x433fffff
 8019d1c:	3ff00000 	.word	0x3ff00000
 8019d20:	3fefffff 	.word	0x3fefffff
 8019d24:	3fe00000 	.word	0x3fe00000
 8019d28:	41e00000 	.word	0x41e00000
 8019d2c:	4b60      	ldr	r3, [pc, #384]	; (8019eb0 <__ieee754_pow+0x3f0>)
 8019d2e:	2200      	movs	r2, #0
 8019d30:	f7e6 faaa 	bl	8000288 <__aeabi_dsub>
 8019d34:	a354      	add	r3, pc, #336	; (adr r3, 8019e88 <__ieee754_pow+0x3c8>)
 8019d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d3a:	4604      	mov	r4, r0
 8019d3c:	460d      	mov	r5, r1
 8019d3e:	f7e6 fc5b 	bl	80005f8 <__aeabi_dmul>
 8019d42:	a353      	add	r3, pc, #332	; (adr r3, 8019e90 <__ieee754_pow+0x3d0>)
 8019d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d48:	4606      	mov	r6, r0
 8019d4a:	460f      	mov	r7, r1
 8019d4c:	4620      	mov	r0, r4
 8019d4e:	4629      	mov	r1, r5
 8019d50:	f7e6 fc52 	bl	80005f8 <__aeabi_dmul>
 8019d54:	4b57      	ldr	r3, [pc, #348]	; (8019eb4 <__ieee754_pow+0x3f4>)
 8019d56:	4682      	mov	sl, r0
 8019d58:	468b      	mov	fp, r1
 8019d5a:	2200      	movs	r2, #0
 8019d5c:	4620      	mov	r0, r4
 8019d5e:	4629      	mov	r1, r5
 8019d60:	f7e6 fc4a 	bl	80005f8 <__aeabi_dmul>
 8019d64:	4602      	mov	r2, r0
 8019d66:	460b      	mov	r3, r1
 8019d68:	a14b      	add	r1, pc, #300	; (adr r1, 8019e98 <__ieee754_pow+0x3d8>)
 8019d6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d6e:	f7e6 fa8b 	bl	8000288 <__aeabi_dsub>
 8019d72:	4622      	mov	r2, r4
 8019d74:	462b      	mov	r3, r5
 8019d76:	f7e6 fc3f 	bl	80005f8 <__aeabi_dmul>
 8019d7a:	4602      	mov	r2, r0
 8019d7c:	460b      	mov	r3, r1
 8019d7e:	2000      	movs	r0, #0
 8019d80:	494d      	ldr	r1, [pc, #308]	; (8019eb8 <__ieee754_pow+0x3f8>)
 8019d82:	f7e6 fa81 	bl	8000288 <__aeabi_dsub>
 8019d86:	4622      	mov	r2, r4
 8019d88:	4680      	mov	r8, r0
 8019d8a:	4689      	mov	r9, r1
 8019d8c:	462b      	mov	r3, r5
 8019d8e:	4620      	mov	r0, r4
 8019d90:	4629      	mov	r1, r5
 8019d92:	f7e6 fc31 	bl	80005f8 <__aeabi_dmul>
 8019d96:	4602      	mov	r2, r0
 8019d98:	460b      	mov	r3, r1
 8019d9a:	4640      	mov	r0, r8
 8019d9c:	4649      	mov	r1, r9
 8019d9e:	f7e6 fc2b 	bl	80005f8 <__aeabi_dmul>
 8019da2:	a33f      	add	r3, pc, #252	; (adr r3, 8019ea0 <__ieee754_pow+0x3e0>)
 8019da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019da8:	f7e6 fc26 	bl	80005f8 <__aeabi_dmul>
 8019dac:	4602      	mov	r2, r0
 8019dae:	460b      	mov	r3, r1
 8019db0:	4650      	mov	r0, sl
 8019db2:	4659      	mov	r1, fp
 8019db4:	f7e6 fa68 	bl	8000288 <__aeabi_dsub>
 8019db8:	4602      	mov	r2, r0
 8019dba:	460b      	mov	r3, r1
 8019dbc:	4680      	mov	r8, r0
 8019dbe:	4689      	mov	r9, r1
 8019dc0:	4630      	mov	r0, r6
 8019dc2:	4639      	mov	r1, r7
 8019dc4:	f7e6 fa62 	bl	800028c <__adddf3>
 8019dc8:	2000      	movs	r0, #0
 8019dca:	4632      	mov	r2, r6
 8019dcc:	463b      	mov	r3, r7
 8019dce:	4604      	mov	r4, r0
 8019dd0:	460d      	mov	r5, r1
 8019dd2:	f7e6 fa59 	bl	8000288 <__aeabi_dsub>
 8019dd6:	4602      	mov	r2, r0
 8019dd8:	460b      	mov	r3, r1
 8019dda:	4640      	mov	r0, r8
 8019ddc:	4649      	mov	r1, r9
 8019dde:	f7e6 fa53 	bl	8000288 <__aeabi_dsub>
 8019de2:	9b04      	ldr	r3, [sp, #16]
 8019de4:	9a06      	ldr	r2, [sp, #24]
 8019de6:	3b01      	subs	r3, #1
 8019de8:	4313      	orrs	r3, r2
 8019dea:	4682      	mov	sl, r0
 8019dec:	468b      	mov	fp, r1
 8019dee:	f040 81e7 	bne.w	801a1c0 <__ieee754_pow+0x700>
 8019df2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8019ea8 <__ieee754_pow+0x3e8>
 8019df6:	eeb0 8a47 	vmov.f32	s16, s14
 8019dfa:	eef0 8a67 	vmov.f32	s17, s15
 8019dfe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019e02:	2600      	movs	r6, #0
 8019e04:	4632      	mov	r2, r6
 8019e06:	463b      	mov	r3, r7
 8019e08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019e0c:	f7e6 fa3c 	bl	8000288 <__aeabi_dsub>
 8019e10:	4622      	mov	r2, r4
 8019e12:	462b      	mov	r3, r5
 8019e14:	f7e6 fbf0 	bl	80005f8 <__aeabi_dmul>
 8019e18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019e1c:	4680      	mov	r8, r0
 8019e1e:	4689      	mov	r9, r1
 8019e20:	4650      	mov	r0, sl
 8019e22:	4659      	mov	r1, fp
 8019e24:	f7e6 fbe8 	bl	80005f8 <__aeabi_dmul>
 8019e28:	4602      	mov	r2, r0
 8019e2a:	460b      	mov	r3, r1
 8019e2c:	4640      	mov	r0, r8
 8019e2e:	4649      	mov	r1, r9
 8019e30:	f7e6 fa2c 	bl	800028c <__adddf3>
 8019e34:	4632      	mov	r2, r6
 8019e36:	463b      	mov	r3, r7
 8019e38:	4680      	mov	r8, r0
 8019e3a:	4689      	mov	r9, r1
 8019e3c:	4620      	mov	r0, r4
 8019e3e:	4629      	mov	r1, r5
 8019e40:	f7e6 fbda 	bl	80005f8 <__aeabi_dmul>
 8019e44:	460b      	mov	r3, r1
 8019e46:	4604      	mov	r4, r0
 8019e48:	460d      	mov	r5, r1
 8019e4a:	4602      	mov	r2, r0
 8019e4c:	4649      	mov	r1, r9
 8019e4e:	4640      	mov	r0, r8
 8019e50:	f7e6 fa1c 	bl	800028c <__adddf3>
 8019e54:	4b19      	ldr	r3, [pc, #100]	; (8019ebc <__ieee754_pow+0x3fc>)
 8019e56:	4299      	cmp	r1, r3
 8019e58:	ec45 4b19 	vmov	d9, r4, r5
 8019e5c:	4606      	mov	r6, r0
 8019e5e:	460f      	mov	r7, r1
 8019e60:	468b      	mov	fp, r1
 8019e62:	f340 82f0 	ble.w	801a446 <__ieee754_pow+0x986>
 8019e66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8019e6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019e6e:	4303      	orrs	r3, r0
 8019e70:	f000 81e4 	beq.w	801a23c <__ieee754_pow+0x77c>
 8019e74:	ec51 0b18 	vmov	r0, r1, d8
 8019e78:	2200      	movs	r2, #0
 8019e7a:	2300      	movs	r3, #0
 8019e7c:	f7e6 fe2e 	bl	8000adc <__aeabi_dcmplt>
 8019e80:	3800      	subs	r0, #0
 8019e82:	bf18      	it	ne
 8019e84:	2001      	movne	r0, #1
 8019e86:	e72b      	b.n	8019ce0 <__ieee754_pow+0x220>
 8019e88:	60000000 	.word	0x60000000
 8019e8c:	3ff71547 	.word	0x3ff71547
 8019e90:	f85ddf44 	.word	0xf85ddf44
 8019e94:	3e54ae0b 	.word	0x3e54ae0b
 8019e98:	55555555 	.word	0x55555555
 8019e9c:	3fd55555 	.word	0x3fd55555
 8019ea0:	652b82fe 	.word	0x652b82fe
 8019ea4:	3ff71547 	.word	0x3ff71547
 8019ea8:	00000000 	.word	0x00000000
 8019eac:	bff00000 	.word	0xbff00000
 8019eb0:	3ff00000 	.word	0x3ff00000
 8019eb4:	3fd00000 	.word	0x3fd00000
 8019eb8:	3fe00000 	.word	0x3fe00000
 8019ebc:	408fffff 	.word	0x408fffff
 8019ec0:	4bd5      	ldr	r3, [pc, #852]	; (801a218 <__ieee754_pow+0x758>)
 8019ec2:	402b      	ands	r3, r5
 8019ec4:	2200      	movs	r2, #0
 8019ec6:	b92b      	cbnz	r3, 8019ed4 <__ieee754_pow+0x414>
 8019ec8:	4bd4      	ldr	r3, [pc, #848]	; (801a21c <__ieee754_pow+0x75c>)
 8019eca:	f7e6 fb95 	bl	80005f8 <__aeabi_dmul>
 8019ece:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8019ed2:	460c      	mov	r4, r1
 8019ed4:	1523      	asrs	r3, r4, #20
 8019ed6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019eda:	4413      	add	r3, r2
 8019edc:	9305      	str	r3, [sp, #20]
 8019ede:	4bd0      	ldr	r3, [pc, #832]	; (801a220 <__ieee754_pow+0x760>)
 8019ee0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019ee4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019ee8:	429c      	cmp	r4, r3
 8019eea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019eee:	dd08      	ble.n	8019f02 <__ieee754_pow+0x442>
 8019ef0:	4bcc      	ldr	r3, [pc, #816]	; (801a224 <__ieee754_pow+0x764>)
 8019ef2:	429c      	cmp	r4, r3
 8019ef4:	f340 8162 	ble.w	801a1bc <__ieee754_pow+0x6fc>
 8019ef8:	9b05      	ldr	r3, [sp, #20]
 8019efa:	3301      	adds	r3, #1
 8019efc:	9305      	str	r3, [sp, #20]
 8019efe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8019f02:	2400      	movs	r4, #0
 8019f04:	00e3      	lsls	r3, r4, #3
 8019f06:	9307      	str	r3, [sp, #28]
 8019f08:	4bc7      	ldr	r3, [pc, #796]	; (801a228 <__ieee754_pow+0x768>)
 8019f0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019f0e:	ed93 7b00 	vldr	d7, [r3]
 8019f12:	4629      	mov	r1, r5
 8019f14:	ec53 2b17 	vmov	r2, r3, d7
 8019f18:	eeb0 9a47 	vmov.f32	s18, s14
 8019f1c:	eef0 9a67 	vmov.f32	s19, s15
 8019f20:	4682      	mov	sl, r0
 8019f22:	f7e6 f9b1 	bl	8000288 <__aeabi_dsub>
 8019f26:	4652      	mov	r2, sl
 8019f28:	4606      	mov	r6, r0
 8019f2a:	460f      	mov	r7, r1
 8019f2c:	462b      	mov	r3, r5
 8019f2e:	ec51 0b19 	vmov	r0, r1, d9
 8019f32:	f7e6 f9ab 	bl	800028c <__adddf3>
 8019f36:	4602      	mov	r2, r0
 8019f38:	460b      	mov	r3, r1
 8019f3a:	2000      	movs	r0, #0
 8019f3c:	49bb      	ldr	r1, [pc, #748]	; (801a22c <__ieee754_pow+0x76c>)
 8019f3e:	f7e6 fc85 	bl	800084c <__aeabi_ddiv>
 8019f42:	ec41 0b1a 	vmov	d10, r0, r1
 8019f46:	4602      	mov	r2, r0
 8019f48:	460b      	mov	r3, r1
 8019f4a:	4630      	mov	r0, r6
 8019f4c:	4639      	mov	r1, r7
 8019f4e:	f7e6 fb53 	bl	80005f8 <__aeabi_dmul>
 8019f52:	2300      	movs	r3, #0
 8019f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019f58:	9302      	str	r3, [sp, #8]
 8019f5a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019f5e:	46ab      	mov	fp, r5
 8019f60:	106d      	asrs	r5, r5, #1
 8019f62:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019f66:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8019f6a:	ec41 0b18 	vmov	d8, r0, r1
 8019f6e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8019f72:	2200      	movs	r2, #0
 8019f74:	4640      	mov	r0, r8
 8019f76:	4649      	mov	r1, r9
 8019f78:	4614      	mov	r4, r2
 8019f7a:	461d      	mov	r5, r3
 8019f7c:	f7e6 fb3c 	bl	80005f8 <__aeabi_dmul>
 8019f80:	4602      	mov	r2, r0
 8019f82:	460b      	mov	r3, r1
 8019f84:	4630      	mov	r0, r6
 8019f86:	4639      	mov	r1, r7
 8019f88:	f7e6 f97e 	bl	8000288 <__aeabi_dsub>
 8019f8c:	ec53 2b19 	vmov	r2, r3, d9
 8019f90:	4606      	mov	r6, r0
 8019f92:	460f      	mov	r7, r1
 8019f94:	4620      	mov	r0, r4
 8019f96:	4629      	mov	r1, r5
 8019f98:	f7e6 f976 	bl	8000288 <__aeabi_dsub>
 8019f9c:	4602      	mov	r2, r0
 8019f9e:	460b      	mov	r3, r1
 8019fa0:	4650      	mov	r0, sl
 8019fa2:	4659      	mov	r1, fp
 8019fa4:	f7e6 f970 	bl	8000288 <__aeabi_dsub>
 8019fa8:	4642      	mov	r2, r8
 8019faa:	464b      	mov	r3, r9
 8019fac:	f7e6 fb24 	bl	80005f8 <__aeabi_dmul>
 8019fb0:	4602      	mov	r2, r0
 8019fb2:	460b      	mov	r3, r1
 8019fb4:	4630      	mov	r0, r6
 8019fb6:	4639      	mov	r1, r7
 8019fb8:	f7e6 f966 	bl	8000288 <__aeabi_dsub>
 8019fbc:	ec53 2b1a 	vmov	r2, r3, d10
 8019fc0:	f7e6 fb1a 	bl	80005f8 <__aeabi_dmul>
 8019fc4:	ec53 2b18 	vmov	r2, r3, d8
 8019fc8:	ec41 0b19 	vmov	d9, r0, r1
 8019fcc:	ec51 0b18 	vmov	r0, r1, d8
 8019fd0:	f7e6 fb12 	bl	80005f8 <__aeabi_dmul>
 8019fd4:	a37c      	add	r3, pc, #496	; (adr r3, 801a1c8 <__ieee754_pow+0x708>)
 8019fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fda:	4604      	mov	r4, r0
 8019fdc:	460d      	mov	r5, r1
 8019fde:	f7e6 fb0b 	bl	80005f8 <__aeabi_dmul>
 8019fe2:	a37b      	add	r3, pc, #492	; (adr r3, 801a1d0 <__ieee754_pow+0x710>)
 8019fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fe8:	f7e6 f950 	bl	800028c <__adddf3>
 8019fec:	4622      	mov	r2, r4
 8019fee:	462b      	mov	r3, r5
 8019ff0:	f7e6 fb02 	bl	80005f8 <__aeabi_dmul>
 8019ff4:	a378      	add	r3, pc, #480	; (adr r3, 801a1d8 <__ieee754_pow+0x718>)
 8019ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ffa:	f7e6 f947 	bl	800028c <__adddf3>
 8019ffe:	4622      	mov	r2, r4
 801a000:	462b      	mov	r3, r5
 801a002:	f7e6 faf9 	bl	80005f8 <__aeabi_dmul>
 801a006:	a376      	add	r3, pc, #472	; (adr r3, 801a1e0 <__ieee754_pow+0x720>)
 801a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a00c:	f7e6 f93e 	bl	800028c <__adddf3>
 801a010:	4622      	mov	r2, r4
 801a012:	462b      	mov	r3, r5
 801a014:	f7e6 faf0 	bl	80005f8 <__aeabi_dmul>
 801a018:	a373      	add	r3, pc, #460	; (adr r3, 801a1e8 <__ieee754_pow+0x728>)
 801a01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a01e:	f7e6 f935 	bl	800028c <__adddf3>
 801a022:	4622      	mov	r2, r4
 801a024:	462b      	mov	r3, r5
 801a026:	f7e6 fae7 	bl	80005f8 <__aeabi_dmul>
 801a02a:	a371      	add	r3, pc, #452	; (adr r3, 801a1f0 <__ieee754_pow+0x730>)
 801a02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a030:	f7e6 f92c 	bl	800028c <__adddf3>
 801a034:	4622      	mov	r2, r4
 801a036:	4606      	mov	r6, r0
 801a038:	460f      	mov	r7, r1
 801a03a:	462b      	mov	r3, r5
 801a03c:	4620      	mov	r0, r4
 801a03e:	4629      	mov	r1, r5
 801a040:	f7e6 fada 	bl	80005f8 <__aeabi_dmul>
 801a044:	4602      	mov	r2, r0
 801a046:	460b      	mov	r3, r1
 801a048:	4630      	mov	r0, r6
 801a04a:	4639      	mov	r1, r7
 801a04c:	f7e6 fad4 	bl	80005f8 <__aeabi_dmul>
 801a050:	4642      	mov	r2, r8
 801a052:	4604      	mov	r4, r0
 801a054:	460d      	mov	r5, r1
 801a056:	464b      	mov	r3, r9
 801a058:	ec51 0b18 	vmov	r0, r1, d8
 801a05c:	f7e6 f916 	bl	800028c <__adddf3>
 801a060:	ec53 2b19 	vmov	r2, r3, d9
 801a064:	f7e6 fac8 	bl	80005f8 <__aeabi_dmul>
 801a068:	4622      	mov	r2, r4
 801a06a:	462b      	mov	r3, r5
 801a06c:	f7e6 f90e 	bl	800028c <__adddf3>
 801a070:	4642      	mov	r2, r8
 801a072:	4682      	mov	sl, r0
 801a074:	468b      	mov	fp, r1
 801a076:	464b      	mov	r3, r9
 801a078:	4640      	mov	r0, r8
 801a07a:	4649      	mov	r1, r9
 801a07c:	f7e6 fabc 	bl	80005f8 <__aeabi_dmul>
 801a080:	4b6b      	ldr	r3, [pc, #428]	; (801a230 <__ieee754_pow+0x770>)
 801a082:	2200      	movs	r2, #0
 801a084:	4606      	mov	r6, r0
 801a086:	460f      	mov	r7, r1
 801a088:	f7e6 f900 	bl	800028c <__adddf3>
 801a08c:	4652      	mov	r2, sl
 801a08e:	465b      	mov	r3, fp
 801a090:	f7e6 f8fc 	bl	800028c <__adddf3>
 801a094:	2000      	movs	r0, #0
 801a096:	4604      	mov	r4, r0
 801a098:	460d      	mov	r5, r1
 801a09a:	4602      	mov	r2, r0
 801a09c:	460b      	mov	r3, r1
 801a09e:	4640      	mov	r0, r8
 801a0a0:	4649      	mov	r1, r9
 801a0a2:	f7e6 faa9 	bl	80005f8 <__aeabi_dmul>
 801a0a6:	4b62      	ldr	r3, [pc, #392]	; (801a230 <__ieee754_pow+0x770>)
 801a0a8:	4680      	mov	r8, r0
 801a0aa:	4689      	mov	r9, r1
 801a0ac:	2200      	movs	r2, #0
 801a0ae:	4620      	mov	r0, r4
 801a0b0:	4629      	mov	r1, r5
 801a0b2:	f7e6 f8e9 	bl	8000288 <__aeabi_dsub>
 801a0b6:	4632      	mov	r2, r6
 801a0b8:	463b      	mov	r3, r7
 801a0ba:	f7e6 f8e5 	bl	8000288 <__aeabi_dsub>
 801a0be:	4602      	mov	r2, r0
 801a0c0:	460b      	mov	r3, r1
 801a0c2:	4650      	mov	r0, sl
 801a0c4:	4659      	mov	r1, fp
 801a0c6:	f7e6 f8df 	bl	8000288 <__aeabi_dsub>
 801a0ca:	ec53 2b18 	vmov	r2, r3, d8
 801a0ce:	f7e6 fa93 	bl	80005f8 <__aeabi_dmul>
 801a0d2:	4622      	mov	r2, r4
 801a0d4:	4606      	mov	r6, r0
 801a0d6:	460f      	mov	r7, r1
 801a0d8:	462b      	mov	r3, r5
 801a0da:	ec51 0b19 	vmov	r0, r1, d9
 801a0de:	f7e6 fa8b 	bl	80005f8 <__aeabi_dmul>
 801a0e2:	4602      	mov	r2, r0
 801a0e4:	460b      	mov	r3, r1
 801a0e6:	4630      	mov	r0, r6
 801a0e8:	4639      	mov	r1, r7
 801a0ea:	f7e6 f8cf 	bl	800028c <__adddf3>
 801a0ee:	4606      	mov	r6, r0
 801a0f0:	460f      	mov	r7, r1
 801a0f2:	4602      	mov	r2, r0
 801a0f4:	460b      	mov	r3, r1
 801a0f6:	4640      	mov	r0, r8
 801a0f8:	4649      	mov	r1, r9
 801a0fa:	f7e6 f8c7 	bl	800028c <__adddf3>
 801a0fe:	a33e      	add	r3, pc, #248	; (adr r3, 801a1f8 <__ieee754_pow+0x738>)
 801a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a104:	2000      	movs	r0, #0
 801a106:	4604      	mov	r4, r0
 801a108:	460d      	mov	r5, r1
 801a10a:	f7e6 fa75 	bl	80005f8 <__aeabi_dmul>
 801a10e:	4642      	mov	r2, r8
 801a110:	ec41 0b18 	vmov	d8, r0, r1
 801a114:	464b      	mov	r3, r9
 801a116:	4620      	mov	r0, r4
 801a118:	4629      	mov	r1, r5
 801a11a:	f7e6 f8b5 	bl	8000288 <__aeabi_dsub>
 801a11e:	4602      	mov	r2, r0
 801a120:	460b      	mov	r3, r1
 801a122:	4630      	mov	r0, r6
 801a124:	4639      	mov	r1, r7
 801a126:	f7e6 f8af 	bl	8000288 <__aeabi_dsub>
 801a12a:	a335      	add	r3, pc, #212	; (adr r3, 801a200 <__ieee754_pow+0x740>)
 801a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a130:	f7e6 fa62 	bl	80005f8 <__aeabi_dmul>
 801a134:	a334      	add	r3, pc, #208	; (adr r3, 801a208 <__ieee754_pow+0x748>)
 801a136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a13a:	4606      	mov	r6, r0
 801a13c:	460f      	mov	r7, r1
 801a13e:	4620      	mov	r0, r4
 801a140:	4629      	mov	r1, r5
 801a142:	f7e6 fa59 	bl	80005f8 <__aeabi_dmul>
 801a146:	4602      	mov	r2, r0
 801a148:	460b      	mov	r3, r1
 801a14a:	4630      	mov	r0, r6
 801a14c:	4639      	mov	r1, r7
 801a14e:	f7e6 f89d 	bl	800028c <__adddf3>
 801a152:	9a07      	ldr	r2, [sp, #28]
 801a154:	4b37      	ldr	r3, [pc, #220]	; (801a234 <__ieee754_pow+0x774>)
 801a156:	4413      	add	r3, r2
 801a158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a15c:	f7e6 f896 	bl	800028c <__adddf3>
 801a160:	4682      	mov	sl, r0
 801a162:	9805      	ldr	r0, [sp, #20]
 801a164:	468b      	mov	fp, r1
 801a166:	f7e6 f9dd 	bl	8000524 <__aeabi_i2d>
 801a16a:	9a07      	ldr	r2, [sp, #28]
 801a16c:	4b32      	ldr	r3, [pc, #200]	; (801a238 <__ieee754_pow+0x778>)
 801a16e:	4413      	add	r3, r2
 801a170:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a174:	4606      	mov	r6, r0
 801a176:	460f      	mov	r7, r1
 801a178:	4652      	mov	r2, sl
 801a17a:	465b      	mov	r3, fp
 801a17c:	ec51 0b18 	vmov	r0, r1, d8
 801a180:	f7e6 f884 	bl	800028c <__adddf3>
 801a184:	4642      	mov	r2, r8
 801a186:	464b      	mov	r3, r9
 801a188:	f7e6 f880 	bl	800028c <__adddf3>
 801a18c:	4632      	mov	r2, r6
 801a18e:	463b      	mov	r3, r7
 801a190:	f7e6 f87c 	bl	800028c <__adddf3>
 801a194:	2000      	movs	r0, #0
 801a196:	4632      	mov	r2, r6
 801a198:	463b      	mov	r3, r7
 801a19a:	4604      	mov	r4, r0
 801a19c:	460d      	mov	r5, r1
 801a19e:	f7e6 f873 	bl	8000288 <__aeabi_dsub>
 801a1a2:	4642      	mov	r2, r8
 801a1a4:	464b      	mov	r3, r9
 801a1a6:	f7e6 f86f 	bl	8000288 <__aeabi_dsub>
 801a1aa:	ec53 2b18 	vmov	r2, r3, d8
 801a1ae:	f7e6 f86b 	bl	8000288 <__aeabi_dsub>
 801a1b2:	4602      	mov	r2, r0
 801a1b4:	460b      	mov	r3, r1
 801a1b6:	4650      	mov	r0, sl
 801a1b8:	4659      	mov	r1, fp
 801a1ba:	e610      	b.n	8019dde <__ieee754_pow+0x31e>
 801a1bc:	2401      	movs	r4, #1
 801a1be:	e6a1      	b.n	8019f04 <__ieee754_pow+0x444>
 801a1c0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801a210 <__ieee754_pow+0x750>
 801a1c4:	e617      	b.n	8019df6 <__ieee754_pow+0x336>
 801a1c6:	bf00      	nop
 801a1c8:	4a454eef 	.word	0x4a454eef
 801a1cc:	3fca7e28 	.word	0x3fca7e28
 801a1d0:	93c9db65 	.word	0x93c9db65
 801a1d4:	3fcd864a 	.word	0x3fcd864a
 801a1d8:	a91d4101 	.word	0xa91d4101
 801a1dc:	3fd17460 	.word	0x3fd17460
 801a1e0:	518f264d 	.word	0x518f264d
 801a1e4:	3fd55555 	.word	0x3fd55555
 801a1e8:	db6fabff 	.word	0xdb6fabff
 801a1ec:	3fdb6db6 	.word	0x3fdb6db6
 801a1f0:	33333303 	.word	0x33333303
 801a1f4:	3fe33333 	.word	0x3fe33333
 801a1f8:	e0000000 	.word	0xe0000000
 801a1fc:	3feec709 	.word	0x3feec709
 801a200:	dc3a03fd 	.word	0xdc3a03fd
 801a204:	3feec709 	.word	0x3feec709
 801a208:	145b01f5 	.word	0x145b01f5
 801a20c:	be3e2fe0 	.word	0xbe3e2fe0
 801a210:	00000000 	.word	0x00000000
 801a214:	3ff00000 	.word	0x3ff00000
 801a218:	7ff00000 	.word	0x7ff00000
 801a21c:	43400000 	.word	0x43400000
 801a220:	0003988e 	.word	0x0003988e
 801a224:	000bb679 	.word	0x000bb679
 801a228:	0801dd68 	.word	0x0801dd68
 801a22c:	3ff00000 	.word	0x3ff00000
 801a230:	40080000 	.word	0x40080000
 801a234:	0801dd88 	.word	0x0801dd88
 801a238:	0801dd78 	.word	0x0801dd78
 801a23c:	a3b3      	add	r3, pc, #716	; (adr r3, 801a50c <__ieee754_pow+0xa4c>)
 801a23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a242:	4640      	mov	r0, r8
 801a244:	4649      	mov	r1, r9
 801a246:	f7e6 f821 	bl	800028c <__adddf3>
 801a24a:	4622      	mov	r2, r4
 801a24c:	ec41 0b1a 	vmov	d10, r0, r1
 801a250:	462b      	mov	r3, r5
 801a252:	4630      	mov	r0, r6
 801a254:	4639      	mov	r1, r7
 801a256:	f7e6 f817 	bl	8000288 <__aeabi_dsub>
 801a25a:	4602      	mov	r2, r0
 801a25c:	460b      	mov	r3, r1
 801a25e:	ec51 0b1a 	vmov	r0, r1, d10
 801a262:	f7e6 fc59 	bl	8000b18 <__aeabi_dcmpgt>
 801a266:	2800      	cmp	r0, #0
 801a268:	f47f ae04 	bne.w	8019e74 <__ieee754_pow+0x3b4>
 801a26c:	4aa2      	ldr	r2, [pc, #648]	; (801a4f8 <__ieee754_pow+0xa38>)
 801a26e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a272:	4293      	cmp	r3, r2
 801a274:	f340 8107 	ble.w	801a486 <__ieee754_pow+0x9c6>
 801a278:	151b      	asrs	r3, r3, #20
 801a27a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801a27e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801a282:	fa4a fa03 	asr.w	sl, sl, r3
 801a286:	44da      	add	sl, fp
 801a288:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801a28c:	489b      	ldr	r0, [pc, #620]	; (801a4fc <__ieee754_pow+0xa3c>)
 801a28e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801a292:	4108      	asrs	r0, r1
 801a294:	ea00 030a 	and.w	r3, r0, sl
 801a298:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801a29c:	f1c1 0114 	rsb	r1, r1, #20
 801a2a0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801a2a4:	fa4a fa01 	asr.w	sl, sl, r1
 801a2a8:	f1bb 0f00 	cmp.w	fp, #0
 801a2ac:	f04f 0200 	mov.w	r2, #0
 801a2b0:	4620      	mov	r0, r4
 801a2b2:	4629      	mov	r1, r5
 801a2b4:	bfb8      	it	lt
 801a2b6:	f1ca 0a00 	rsblt	sl, sl, #0
 801a2ba:	f7e5 ffe5 	bl	8000288 <__aeabi_dsub>
 801a2be:	ec41 0b19 	vmov	d9, r0, r1
 801a2c2:	4642      	mov	r2, r8
 801a2c4:	464b      	mov	r3, r9
 801a2c6:	ec51 0b19 	vmov	r0, r1, d9
 801a2ca:	f7e5 ffdf 	bl	800028c <__adddf3>
 801a2ce:	a37a      	add	r3, pc, #488	; (adr r3, 801a4b8 <__ieee754_pow+0x9f8>)
 801a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2d4:	2000      	movs	r0, #0
 801a2d6:	4604      	mov	r4, r0
 801a2d8:	460d      	mov	r5, r1
 801a2da:	f7e6 f98d 	bl	80005f8 <__aeabi_dmul>
 801a2de:	ec53 2b19 	vmov	r2, r3, d9
 801a2e2:	4606      	mov	r6, r0
 801a2e4:	460f      	mov	r7, r1
 801a2e6:	4620      	mov	r0, r4
 801a2e8:	4629      	mov	r1, r5
 801a2ea:	f7e5 ffcd 	bl	8000288 <__aeabi_dsub>
 801a2ee:	4602      	mov	r2, r0
 801a2f0:	460b      	mov	r3, r1
 801a2f2:	4640      	mov	r0, r8
 801a2f4:	4649      	mov	r1, r9
 801a2f6:	f7e5 ffc7 	bl	8000288 <__aeabi_dsub>
 801a2fa:	a371      	add	r3, pc, #452	; (adr r3, 801a4c0 <__ieee754_pow+0xa00>)
 801a2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a300:	f7e6 f97a 	bl	80005f8 <__aeabi_dmul>
 801a304:	a370      	add	r3, pc, #448	; (adr r3, 801a4c8 <__ieee754_pow+0xa08>)
 801a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a30a:	4680      	mov	r8, r0
 801a30c:	4689      	mov	r9, r1
 801a30e:	4620      	mov	r0, r4
 801a310:	4629      	mov	r1, r5
 801a312:	f7e6 f971 	bl	80005f8 <__aeabi_dmul>
 801a316:	4602      	mov	r2, r0
 801a318:	460b      	mov	r3, r1
 801a31a:	4640      	mov	r0, r8
 801a31c:	4649      	mov	r1, r9
 801a31e:	f7e5 ffb5 	bl	800028c <__adddf3>
 801a322:	4604      	mov	r4, r0
 801a324:	460d      	mov	r5, r1
 801a326:	4602      	mov	r2, r0
 801a328:	460b      	mov	r3, r1
 801a32a:	4630      	mov	r0, r6
 801a32c:	4639      	mov	r1, r7
 801a32e:	f7e5 ffad 	bl	800028c <__adddf3>
 801a332:	4632      	mov	r2, r6
 801a334:	463b      	mov	r3, r7
 801a336:	4680      	mov	r8, r0
 801a338:	4689      	mov	r9, r1
 801a33a:	f7e5 ffa5 	bl	8000288 <__aeabi_dsub>
 801a33e:	4602      	mov	r2, r0
 801a340:	460b      	mov	r3, r1
 801a342:	4620      	mov	r0, r4
 801a344:	4629      	mov	r1, r5
 801a346:	f7e5 ff9f 	bl	8000288 <__aeabi_dsub>
 801a34a:	4642      	mov	r2, r8
 801a34c:	4606      	mov	r6, r0
 801a34e:	460f      	mov	r7, r1
 801a350:	464b      	mov	r3, r9
 801a352:	4640      	mov	r0, r8
 801a354:	4649      	mov	r1, r9
 801a356:	f7e6 f94f 	bl	80005f8 <__aeabi_dmul>
 801a35a:	a35d      	add	r3, pc, #372	; (adr r3, 801a4d0 <__ieee754_pow+0xa10>)
 801a35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a360:	4604      	mov	r4, r0
 801a362:	460d      	mov	r5, r1
 801a364:	f7e6 f948 	bl	80005f8 <__aeabi_dmul>
 801a368:	a35b      	add	r3, pc, #364	; (adr r3, 801a4d8 <__ieee754_pow+0xa18>)
 801a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a36e:	f7e5 ff8b 	bl	8000288 <__aeabi_dsub>
 801a372:	4622      	mov	r2, r4
 801a374:	462b      	mov	r3, r5
 801a376:	f7e6 f93f 	bl	80005f8 <__aeabi_dmul>
 801a37a:	a359      	add	r3, pc, #356	; (adr r3, 801a4e0 <__ieee754_pow+0xa20>)
 801a37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a380:	f7e5 ff84 	bl	800028c <__adddf3>
 801a384:	4622      	mov	r2, r4
 801a386:	462b      	mov	r3, r5
 801a388:	f7e6 f936 	bl	80005f8 <__aeabi_dmul>
 801a38c:	a356      	add	r3, pc, #344	; (adr r3, 801a4e8 <__ieee754_pow+0xa28>)
 801a38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a392:	f7e5 ff79 	bl	8000288 <__aeabi_dsub>
 801a396:	4622      	mov	r2, r4
 801a398:	462b      	mov	r3, r5
 801a39a:	f7e6 f92d 	bl	80005f8 <__aeabi_dmul>
 801a39e:	a354      	add	r3, pc, #336	; (adr r3, 801a4f0 <__ieee754_pow+0xa30>)
 801a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3a4:	f7e5 ff72 	bl	800028c <__adddf3>
 801a3a8:	4622      	mov	r2, r4
 801a3aa:	462b      	mov	r3, r5
 801a3ac:	f7e6 f924 	bl	80005f8 <__aeabi_dmul>
 801a3b0:	4602      	mov	r2, r0
 801a3b2:	460b      	mov	r3, r1
 801a3b4:	4640      	mov	r0, r8
 801a3b6:	4649      	mov	r1, r9
 801a3b8:	f7e5 ff66 	bl	8000288 <__aeabi_dsub>
 801a3bc:	4604      	mov	r4, r0
 801a3be:	460d      	mov	r5, r1
 801a3c0:	4602      	mov	r2, r0
 801a3c2:	460b      	mov	r3, r1
 801a3c4:	4640      	mov	r0, r8
 801a3c6:	4649      	mov	r1, r9
 801a3c8:	f7e6 f916 	bl	80005f8 <__aeabi_dmul>
 801a3cc:	2200      	movs	r2, #0
 801a3ce:	ec41 0b19 	vmov	d9, r0, r1
 801a3d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a3d6:	4620      	mov	r0, r4
 801a3d8:	4629      	mov	r1, r5
 801a3da:	f7e5 ff55 	bl	8000288 <__aeabi_dsub>
 801a3de:	4602      	mov	r2, r0
 801a3e0:	460b      	mov	r3, r1
 801a3e2:	ec51 0b19 	vmov	r0, r1, d9
 801a3e6:	f7e6 fa31 	bl	800084c <__aeabi_ddiv>
 801a3ea:	4632      	mov	r2, r6
 801a3ec:	4604      	mov	r4, r0
 801a3ee:	460d      	mov	r5, r1
 801a3f0:	463b      	mov	r3, r7
 801a3f2:	4640      	mov	r0, r8
 801a3f4:	4649      	mov	r1, r9
 801a3f6:	f7e6 f8ff 	bl	80005f8 <__aeabi_dmul>
 801a3fa:	4632      	mov	r2, r6
 801a3fc:	463b      	mov	r3, r7
 801a3fe:	f7e5 ff45 	bl	800028c <__adddf3>
 801a402:	4602      	mov	r2, r0
 801a404:	460b      	mov	r3, r1
 801a406:	4620      	mov	r0, r4
 801a408:	4629      	mov	r1, r5
 801a40a:	f7e5 ff3d 	bl	8000288 <__aeabi_dsub>
 801a40e:	4642      	mov	r2, r8
 801a410:	464b      	mov	r3, r9
 801a412:	f7e5 ff39 	bl	8000288 <__aeabi_dsub>
 801a416:	460b      	mov	r3, r1
 801a418:	4602      	mov	r2, r0
 801a41a:	4939      	ldr	r1, [pc, #228]	; (801a500 <__ieee754_pow+0xa40>)
 801a41c:	2000      	movs	r0, #0
 801a41e:	f7e5 ff33 	bl	8000288 <__aeabi_dsub>
 801a422:	ec41 0b10 	vmov	d0, r0, r1
 801a426:	ee10 3a90 	vmov	r3, s1
 801a42a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801a42e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a432:	da2b      	bge.n	801a48c <__ieee754_pow+0x9cc>
 801a434:	4650      	mov	r0, sl
 801a436:	f000 fb83 	bl	801ab40 <scalbn>
 801a43a:	ec51 0b10 	vmov	r0, r1, d0
 801a43e:	ec53 2b18 	vmov	r2, r3, d8
 801a442:	f7ff bbee 	b.w	8019c22 <__ieee754_pow+0x162>
 801a446:	4b2f      	ldr	r3, [pc, #188]	; (801a504 <__ieee754_pow+0xa44>)
 801a448:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801a44c:	429e      	cmp	r6, r3
 801a44e:	f77f af0d 	ble.w	801a26c <__ieee754_pow+0x7ac>
 801a452:	4b2d      	ldr	r3, [pc, #180]	; (801a508 <__ieee754_pow+0xa48>)
 801a454:	440b      	add	r3, r1
 801a456:	4303      	orrs	r3, r0
 801a458:	d009      	beq.n	801a46e <__ieee754_pow+0x9ae>
 801a45a:	ec51 0b18 	vmov	r0, r1, d8
 801a45e:	2200      	movs	r2, #0
 801a460:	2300      	movs	r3, #0
 801a462:	f7e6 fb3b 	bl	8000adc <__aeabi_dcmplt>
 801a466:	3800      	subs	r0, #0
 801a468:	bf18      	it	ne
 801a46a:	2001      	movne	r0, #1
 801a46c:	e448      	b.n	8019d00 <__ieee754_pow+0x240>
 801a46e:	4622      	mov	r2, r4
 801a470:	462b      	mov	r3, r5
 801a472:	f7e5 ff09 	bl	8000288 <__aeabi_dsub>
 801a476:	4642      	mov	r2, r8
 801a478:	464b      	mov	r3, r9
 801a47a:	f7e6 fb43 	bl	8000b04 <__aeabi_dcmpge>
 801a47e:	2800      	cmp	r0, #0
 801a480:	f43f aef4 	beq.w	801a26c <__ieee754_pow+0x7ac>
 801a484:	e7e9      	b.n	801a45a <__ieee754_pow+0x99a>
 801a486:	f04f 0a00 	mov.w	sl, #0
 801a48a:	e71a      	b.n	801a2c2 <__ieee754_pow+0x802>
 801a48c:	ec51 0b10 	vmov	r0, r1, d0
 801a490:	4619      	mov	r1, r3
 801a492:	e7d4      	b.n	801a43e <__ieee754_pow+0x97e>
 801a494:	491a      	ldr	r1, [pc, #104]	; (801a500 <__ieee754_pow+0xa40>)
 801a496:	2000      	movs	r0, #0
 801a498:	f7ff bb31 	b.w	8019afe <__ieee754_pow+0x3e>
 801a49c:	2000      	movs	r0, #0
 801a49e:	2100      	movs	r1, #0
 801a4a0:	f7ff bb2d 	b.w	8019afe <__ieee754_pow+0x3e>
 801a4a4:	4630      	mov	r0, r6
 801a4a6:	4639      	mov	r1, r7
 801a4a8:	f7ff bb29 	b.w	8019afe <__ieee754_pow+0x3e>
 801a4ac:	9204      	str	r2, [sp, #16]
 801a4ae:	f7ff bb7b 	b.w	8019ba8 <__ieee754_pow+0xe8>
 801a4b2:	2300      	movs	r3, #0
 801a4b4:	f7ff bb65 	b.w	8019b82 <__ieee754_pow+0xc2>
 801a4b8:	00000000 	.word	0x00000000
 801a4bc:	3fe62e43 	.word	0x3fe62e43
 801a4c0:	fefa39ef 	.word	0xfefa39ef
 801a4c4:	3fe62e42 	.word	0x3fe62e42
 801a4c8:	0ca86c39 	.word	0x0ca86c39
 801a4cc:	be205c61 	.word	0xbe205c61
 801a4d0:	72bea4d0 	.word	0x72bea4d0
 801a4d4:	3e663769 	.word	0x3e663769
 801a4d8:	c5d26bf1 	.word	0xc5d26bf1
 801a4dc:	3ebbbd41 	.word	0x3ebbbd41
 801a4e0:	af25de2c 	.word	0xaf25de2c
 801a4e4:	3f11566a 	.word	0x3f11566a
 801a4e8:	16bebd93 	.word	0x16bebd93
 801a4ec:	3f66c16c 	.word	0x3f66c16c
 801a4f0:	5555553e 	.word	0x5555553e
 801a4f4:	3fc55555 	.word	0x3fc55555
 801a4f8:	3fe00000 	.word	0x3fe00000
 801a4fc:	fff00000 	.word	0xfff00000
 801a500:	3ff00000 	.word	0x3ff00000
 801a504:	4090cbff 	.word	0x4090cbff
 801a508:	3f6f3400 	.word	0x3f6f3400
 801a50c:	652b82fe 	.word	0x652b82fe
 801a510:	3c971547 	.word	0x3c971547
 801a514:	00000000 	.word	0x00000000

0801a518 <__ieee754_rem_pio2>:
 801a518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a51c:	ed2d 8b02 	vpush	{d8}
 801a520:	ec55 4b10 	vmov	r4, r5, d0
 801a524:	4bca      	ldr	r3, [pc, #808]	; (801a850 <__ieee754_rem_pio2+0x338>)
 801a526:	b08b      	sub	sp, #44	; 0x2c
 801a528:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801a52c:	4598      	cmp	r8, r3
 801a52e:	4682      	mov	sl, r0
 801a530:	9502      	str	r5, [sp, #8]
 801a532:	dc08      	bgt.n	801a546 <__ieee754_rem_pio2+0x2e>
 801a534:	2200      	movs	r2, #0
 801a536:	2300      	movs	r3, #0
 801a538:	ed80 0b00 	vstr	d0, [r0]
 801a53c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a540:	f04f 0b00 	mov.w	fp, #0
 801a544:	e028      	b.n	801a598 <__ieee754_rem_pio2+0x80>
 801a546:	4bc3      	ldr	r3, [pc, #780]	; (801a854 <__ieee754_rem_pio2+0x33c>)
 801a548:	4598      	cmp	r8, r3
 801a54a:	dc78      	bgt.n	801a63e <__ieee754_rem_pio2+0x126>
 801a54c:	9b02      	ldr	r3, [sp, #8]
 801a54e:	4ec2      	ldr	r6, [pc, #776]	; (801a858 <__ieee754_rem_pio2+0x340>)
 801a550:	2b00      	cmp	r3, #0
 801a552:	ee10 0a10 	vmov	r0, s0
 801a556:	a3b0      	add	r3, pc, #704	; (adr r3, 801a818 <__ieee754_rem_pio2+0x300>)
 801a558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a55c:	4629      	mov	r1, r5
 801a55e:	dd39      	ble.n	801a5d4 <__ieee754_rem_pio2+0xbc>
 801a560:	f7e5 fe92 	bl	8000288 <__aeabi_dsub>
 801a564:	45b0      	cmp	r8, r6
 801a566:	4604      	mov	r4, r0
 801a568:	460d      	mov	r5, r1
 801a56a:	d01b      	beq.n	801a5a4 <__ieee754_rem_pio2+0x8c>
 801a56c:	a3ac      	add	r3, pc, #688	; (adr r3, 801a820 <__ieee754_rem_pio2+0x308>)
 801a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a572:	f7e5 fe89 	bl	8000288 <__aeabi_dsub>
 801a576:	4602      	mov	r2, r0
 801a578:	460b      	mov	r3, r1
 801a57a:	e9ca 2300 	strd	r2, r3, [sl]
 801a57e:	4620      	mov	r0, r4
 801a580:	4629      	mov	r1, r5
 801a582:	f7e5 fe81 	bl	8000288 <__aeabi_dsub>
 801a586:	a3a6      	add	r3, pc, #664	; (adr r3, 801a820 <__ieee754_rem_pio2+0x308>)
 801a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a58c:	f7e5 fe7c 	bl	8000288 <__aeabi_dsub>
 801a590:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a594:	f04f 0b01 	mov.w	fp, #1
 801a598:	4658      	mov	r0, fp
 801a59a:	b00b      	add	sp, #44	; 0x2c
 801a59c:	ecbd 8b02 	vpop	{d8}
 801a5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5a4:	a3a0      	add	r3, pc, #640	; (adr r3, 801a828 <__ieee754_rem_pio2+0x310>)
 801a5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5aa:	f7e5 fe6d 	bl	8000288 <__aeabi_dsub>
 801a5ae:	a3a0      	add	r3, pc, #640	; (adr r3, 801a830 <__ieee754_rem_pio2+0x318>)
 801a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5b4:	4604      	mov	r4, r0
 801a5b6:	460d      	mov	r5, r1
 801a5b8:	f7e5 fe66 	bl	8000288 <__aeabi_dsub>
 801a5bc:	4602      	mov	r2, r0
 801a5be:	460b      	mov	r3, r1
 801a5c0:	e9ca 2300 	strd	r2, r3, [sl]
 801a5c4:	4620      	mov	r0, r4
 801a5c6:	4629      	mov	r1, r5
 801a5c8:	f7e5 fe5e 	bl	8000288 <__aeabi_dsub>
 801a5cc:	a398      	add	r3, pc, #608	; (adr r3, 801a830 <__ieee754_rem_pio2+0x318>)
 801a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5d2:	e7db      	b.n	801a58c <__ieee754_rem_pio2+0x74>
 801a5d4:	f7e5 fe5a 	bl	800028c <__adddf3>
 801a5d8:	45b0      	cmp	r8, r6
 801a5da:	4604      	mov	r4, r0
 801a5dc:	460d      	mov	r5, r1
 801a5de:	d016      	beq.n	801a60e <__ieee754_rem_pio2+0xf6>
 801a5e0:	a38f      	add	r3, pc, #572	; (adr r3, 801a820 <__ieee754_rem_pio2+0x308>)
 801a5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5e6:	f7e5 fe51 	bl	800028c <__adddf3>
 801a5ea:	4602      	mov	r2, r0
 801a5ec:	460b      	mov	r3, r1
 801a5ee:	e9ca 2300 	strd	r2, r3, [sl]
 801a5f2:	4620      	mov	r0, r4
 801a5f4:	4629      	mov	r1, r5
 801a5f6:	f7e5 fe47 	bl	8000288 <__aeabi_dsub>
 801a5fa:	a389      	add	r3, pc, #548	; (adr r3, 801a820 <__ieee754_rem_pio2+0x308>)
 801a5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a600:	f7e5 fe44 	bl	800028c <__adddf3>
 801a604:	f04f 3bff 	mov.w	fp, #4294967295
 801a608:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a60c:	e7c4      	b.n	801a598 <__ieee754_rem_pio2+0x80>
 801a60e:	a386      	add	r3, pc, #536	; (adr r3, 801a828 <__ieee754_rem_pio2+0x310>)
 801a610:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a614:	f7e5 fe3a 	bl	800028c <__adddf3>
 801a618:	a385      	add	r3, pc, #532	; (adr r3, 801a830 <__ieee754_rem_pio2+0x318>)
 801a61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a61e:	4604      	mov	r4, r0
 801a620:	460d      	mov	r5, r1
 801a622:	f7e5 fe33 	bl	800028c <__adddf3>
 801a626:	4602      	mov	r2, r0
 801a628:	460b      	mov	r3, r1
 801a62a:	e9ca 2300 	strd	r2, r3, [sl]
 801a62e:	4620      	mov	r0, r4
 801a630:	4629      	mov	r1, r5
 801a632:	f7e5 fe29 	bl	8000288 <__aeabi_dsub>
 801a636:	a37e      	add	r3, pc, #504	; (adr r3, 801a830 <__ieee754_rem_pio2+0x318>)
 801a638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a63c:	e7e0      	b.n	801a600 <__ieee754_rem_pio2+0xe8>
 801a63e:	4b87      	ldr	r3, [pc, #540]	; (801a85c <__ieee754_rem_pio2+0x344>)
 801a640:	4598      	cmp	r8, r3
 801a642:	f300 80d8 	bgt.w	801a7f6 <__ieee754_rem_pio2+0x2de>
 801a646:	f000 f9a1 	bl	801a98c <fabs>
 801a64a:	ec55 4b10 	vmov	r4, r5, d0
 801a64e:	ee10 0a10 	vmov	r0, s0
 801a652:	a379      	add	r3, pc, #484	; (adr r3, 801a838 <__ieee754_rem_pio2+0x320>)
 801a654:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a658:	4629      	mov	r1, r5
 801a65a:	f7e5 ffcd 	bl	80005f8 <__aeabi_dmul>
 801a65e:	4b80      	ldr	r3, [pc, #512]	; (801a860 <__ieee754_rem_pio2+0x348>)
 801a660:	2200      	movs	r2, #0
 801a662:	f7e5 fe13 	bl	800028c <__adddf3>
 801a666:	f7e6 fa77 	bl	8000b58 <__aeabi_d2iz>
 801a66a:	4683      	mov	fp, r0
 801a66c:	f7e5 ff5a 	bl	8000524 <__aeabi_i2d>
 801a670:	4602      	mov	r2, r0
 801a672:	460b      	mov	r3, r1
 801a674:	ec43 2b18 	vmov	d8, r2, r3
 801a678:	a367      	add	r3, pc, #412	; (adr r3, 801a818 <__ieee754_rem_pio2+0x300>)
 801a67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a67e:	f7e5 ffbb 	bl	80005f8 <__aeabi_dmul>
 801a682:	4602      	mov	r2, r0
 801a684:	460b      	mov	r3, r1
 801a686:	4620      	mov	r0, r4
 801a688:	4629      	mov	r1, r5
 801a68a:	f7e5 fdfd 	bl	8000288 <__aeabi_dsub>
 801a68e:	a364      	add	r3, pc, #400	; (adr r3, 801a820 <__ieee754_rem_pio2+0x308>)
 801a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a694:	4606      	mov	r6, r0
 801a696:	460f      	mov	r7, r1
 801a698:	ec51 0b18 	vmov	r0, r1, d8
 801a69c:	f7e5 ffac 	bl	80005f8 <__aeabi_dmul>
 801a6a0:	f1bb 0f1f 	cmp.w	fp, #31
 801a6a4:	4604      	mov	r4, r0
 801a6a6:	460d      	mov	r5, r1
 801a6a8:	dc0d      	bgt.n	801a6c6 <__ieee754_rem_pio2+0x1ae>
 801a6aa:	4b6e      	ldr	r3, [pc, #440]	; (801a864 <__ieee754_rem_pio2+0x34c>)
 801a6ac:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a6b4:	4543      	cmp	r3, r8
 801a6b6:	d006      	beq.n	801a6c6 <__ieee754_rem_pio2+0x1ae>
 801a6b8:	4622      	mov	r2, r4
 801a6ba:	462b      	mov	r3, r5
 801a6bc:	4630      	mov	r0, r6
 801a6be:	4639      	mov	r1, r7
 801a6c0:	f7e5 fde2 	bl	8000288 <__aeabi_dsub>
 801a6c4:	e00e      	b.n	801a6e4 <__ieee754_rem_pio2+0x1cc>
 801a6c6:	462b      	mov	r3, r5
 801a6c8:	4622      	mov	r2, r4
 801a6ca:	4630      	mov	r0, r6
 801a6cc:	4639      	mov	r1, r7
 801a6ce:	f7e5 fddb 	bl	8000288 <__aeabi_dsub>
 801a6d2:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a6d6:	9303      	str	r3, [sp, #12]
 801a6d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a6dc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801a6e0:	2b10      	cmp	r3, #16
 801a6e2:	dc02      	bgt.n	801a6ea <__ieee754_rem_pio2+0x1d2>
 801a6e4:	e9ca 0100 	strd	r0, r1, [sl]
 801a6e8:	e039      	b.n	801a75e <__ieee754_rem_pio2+0x246>
 801a6ea:	a34f      	add	r3, pc, #316	; (adr r3, 801a828 <__ieee754_rem_pio2+0x310>)
 801a6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6f0:	ec51 0b18 	vmov	r0, r1, d8
 801a6f4:	f7e5 ff80 	bl	80005f8 <__aeabi_dmul>
 801a6f8:	4604      	mov	r4, r0
 801a6fa:	460d      	mov	r5, r1
 801a6fc:	4602      	mov	r2, r0
 801a6fe:	460b      	mov	r3, r1
 801a700:	4630      	mov	r0, r6
 801a702:	4639      	mov	r1, r7
 801a704:	f7e5 fdc0 	bl	8000288 <__aeabi_dsub>
 801a708:	4602      	mov	r2, r0
 801a70a:	460b      	mov	r3, r1
 801a70c:	4680      	mov	r8, r0
 801a70e:	4689      	mov	r9, r1
 801a710:	4630      	mov	r0, r6
 801a712:	4639      	mov	r1, r7
 801a714:	f7e5 fdb8 	bl	8000288 <__aeabi_dsub>
 801a718:	4622      	mov	r2, r4
 801a71a:	462b      	mov	r3, r5
 801a71c:	f7e5 fdb4 	bl	8000288 <__aeabi_dsub>
 801a720:	a343      	add	r3, pc, #268	; (adr r3, 801a830 <__ieee754_rem_pio2+0x318>)
 801a722:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a726:	4604      	mov	r4, r0
 801a728:	460d      	mov	r5, r1
 801a72a:	ec51 0b18 	vmov	r0, r1, d8
 801a72e:	f7e5 ff63 	bl	80005f8 <__aeabi_dmul>
 801a732:	4622      	mov	r2, r4
 801a734:	462b      	mov	r3, r5
 801a736:	f7e5 fda7 	bl	8000288 <__aeabi_dsub>
 801a73a:	4602      	mov	r2, r0
 801a73c:	460b      	mov	r3, r1
 801a73e:	4604      	mov	r4, r0
 801a740:	460d      	mov	r5, r1
 801a742:	4640      	mov	r0, r8
 801a744:	4649      	mov	r1, r9
 801a746:	f7e5 fd9f 	bl	8000288 <__aeabi_dsub>
 801a74a:	9a03      	ldr	r2, [sp, #12]
 801a74c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a750:	1ad3      	subs	r3, r2, r3
 801a752:	2b31      	cmp	r3, #49	; 0x31
 801a754:	dc24      	bgt.n	801a7a0 <__ieee754_rem_pio2+0x288>
 801a756:	e9ca 0100 	strd	r0, r1, [sl]
 801a75a:	4646      	mov	r6, r8
 801a75c:	464f      	mov	r7, r9
 801a75e:	e9da 8900 	ldrd	r8, r9, [sl]
 801a762:	4630      	mov	r0, r6
 801a764:	4642      	mov	r2, r8
 801a766:	464b      	mov	r3, r9
 801a768:	4639      	mov	r1, r7
 801a76a:	f7e5 fd8d 	bl	8000288 <__aeabi_dsub>
 801a76e:	462b      	mov	r3, r5
 801a770:	4622      	mov	r2, r4
 801a772:	f7e5 fd89 	bl	8000288 <__aeabi_dsub>
 801a776:	9b02      	ldr	r3, [sp, #8]
 801a778:	2b00      	cmp	r3, #0
 801a77a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a77e:	f6bf af0b 	bge.w	801a598 <__ieee754_rem_pio2+0x80>
 801a782:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a786:	f8ca 3004 	str.w	r3, [sl, #4]
 801a78a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a78e:	f8ca 8000 	str.w	r8, [sl]
 801a792:	f8ca 0008 	str.w	r0, [sl, #8]
 801a796:	f8ca 300c 	str.w	r3, [sl, #12]
 801a79a:	f1cb 0b00 	rsb	fp, fp, #0
 801a79e:	e6fb      	b.n	801a598 <__ieee754_rem_pio2+0x80>
 801a7a0:	a327      	add	r3, pc, #156	; (adr r3, 801a840 <__ieee754_rem_pio2+0x328>)
 801a7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7a6:	ec51 0b18 	vmov	r0, r1, d8
 801a7aa:	f7e5 ff25 	bl	80005f8 <__aeabi_dmul>
 801a7ae:	4604      	mov	r4, r0
 801a7b0:	460d      	mov	r5, r1
 801a7b2:	4602      	mov	r2, r0
 801a7b4:	460b      	mov	r3, r1
 801a7b6:	4640      	mov	r0, r8
 801a7b8:	4649      	mov	r1, r9
 801a7ba:	f7e5 fd65 	bl	8000288 <__aeabi_dsub>
 801a7be:	4602      	mov	r2, r0
 801a7c0:	460b      	mov	r3, r1
 801a7c2:	4606      	mov	r6, r0
 801a7c4:	460f      	mov	r7, r1
 801a7c6:	4640      	mov	r0, r8
 801a7c8:	4649      	mov	r1, r9
 801a7ca:	f7e5 fd5d 	bl	8000288 <__aeabi_dsub>
 801a7ce:	4622      	mov	r2, r4
 801a7d0:	462b      	mov	r3, r5
 801a7d2:	f7e5 fd59 	bl	8000288 <__aeabi_dsub>
 801a7d6:	a31c      	add	r3, pc, #112	; (adr r3, 801a848 <__ieee754_rem_pio2+0x330>)
 801a7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7dc:	4604      	mov	r4, r0
 801a7de:	460d      	mov	r5, r1
 801a7e0:	ec51 0b18 	vmov	r0, r1, d8
 801a7e4:	f7e5 ff08 	bl	80005f8 <__aeabi_dmul>
 801a7e8:	4622      	mov	r2, r4
 801a7ea:	462b      	mov	r3, r5
 801a7ec:	f7e5 fd4c 	bl	8000288 <__aeabi_dsub>
 801a7f0:	4604      	mov	r4, r0
 801a7f2:	460d      	mov	r5, r1
 801a7f4:	e760      	b.n	801a6b8 <__ieee754_rem_pio2+0x1a0>
 801a7f6:	4b1c      	ldr	r3, [pc, #112]	; (801a868 <__ieee754_rem_pio2+0x350>)
 801a7f8:	4598      	cmp	r8, r3
 801a7fa:	dd37      	ble.n	801a86c <__ieee754_rem_pio2+0x354>
 801a7fc:	ee10 2a10 	vmov	r2, s0
 801a800:	462b      	mov	r3, r5
 801a802:	4620      	mov	r0, r4
 801a804:	4629      	mov	r1, r5
 801a806:	f7e5 fd3f 	bl	8000288 <__aeabi_dsub>
 801a80a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a80e:	e9ca 0100 	strd	r0, r1, [sl]
 801a812:	e695      	b.n	801a540 <__ieee754_rem_pio2+0x28>
 801a814:	f3af 8000 	nop.w
 801a818:	54400000 	.word	0x54400000
 801a81c:	3ff921fb 	.word	0x3ff921fb
 801a820:	1a626331 	.word	0x1a626331
 801a824:	3dd0b461 	.word	0x3dd0b461
 801a828:	1a600000 	.word	0x1a600000
 801a82c:	3dd0b461 	.word	0x3dd0b461
 801a830:	2e037073 	.word	0x2e037073
 801a834:	3ba3198a 	.word	0x3ba3198a
 801a838:	6dc9c883 	.word	0x6dc9c883
 801a83c:	3fe45f30 	.word	0x3fe45f30
 801a840:	2e000000 	.word	0x2e000000
 801a844:	3ba3198a 	.word	0x3ba3198a
 801a848:	252049c1 	.word	0x252049c1
 801a84c:	397b839a 	.word	0x397b839a
 801a850:	3fe921fb 	.word	0x3fe921fb
 801a854:	4002d97b 	.word	0x4002d97b
 801a858:	3ff921fb 	.word	0x3ff921fb
 801a85c:	413921fb 	.word	0x413921fb
 801a860:	3fe00000 	.word	0x3fe00000
 801a864:	0801dd98 	.word	0x0801dd98
 801a868:	7fefffff 	.word	0x7fefffff
 801a86c:	ea4f 5628 	mov.w	r6, r8, asr #20
 801a870:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801a874:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 801a878:	4620      	mov	r0, r4
 801a87a:	460d      	mov	r5, r1
 801a87c:	f7e6 f96c 	bl	8000b58 <__aeabi_d2iz>
 801a880:	f7e5 fe50 	bl	8000524 <__aeabi_i2d>
 801a884:	4602      	mov	r2, r0
 801a886:	460b      	mov	r3, r1
 801a888:	4620      	mov	r0, r4
 801a88a:	4629      	mov	r1, r5
 801a88c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a890:	f7e5 fcfa 	bl	8000288 <__aeabi_dsub>
 801a894:	4b21      	ldr	r3, [pc, #132]	; (801a91c <__ieee754_rem_pio2+0x404>)
 801a896:	2200      	movs	r2, #0
 801a898:	f7e5 feae 	bl	80005f8 <__aeabi_dmul>
 801a89c:	460d      	mov	r5, r1
 801a89e:	4604      	mov	r4, r0
 801a8a0:	f7e6 f95a 	bl	8000b58 <__aeabi_d2iz>
 801a8a4:	f7e5 fe3e 	bl	8000524 <__aeabi_i2d>
 801a8a8:	4602      	mov	r2, r0
 801a8aa:	460b      	mov	r3, r1
 801a8ac:	4620      	mov	r0, r4
 801a8ae:	4629      	mov	r1, r5
 801a8b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a8b4:	f7e5 fce8 	bl	8000288 <__aeabi_dsub>
 801a8b8:	4b18      	ldr	r3, [pc, #96]	; (801a91c <__ieee754_rem_pio2+0x404>)
 801a8ba:	2200      	movs	r2, #0
 801a8bc:	f7e5 fe9c 	bl	80005f8 <__aeabi_dmul>
 801a8c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a8c4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801a8c8:	2703      	movs	r7, #3
 801a8ca:	2400      	movs	r4, #0
 801a8cc:	2500      	movs	r5, #0
 801a8ce:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801a8d2:	4622      	mov	r2, r4
 801a8d4:	462b      	mov	r3, r5
 801a8d6:	46b9      	mov	r9, r7
 801a8d8:	3f01      	subs	r7, #1
 801a8da:	f7e6 f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 801a8de:	2800      	cmp	r0, #0
 801a8e0:	d1f5      	bne.n	801a8ce <__ieee754_rem_pio2+0x3b6>
 801a8e2:	4b0f      	ldr	r3, [pc, #60]	; (801a920 <__ieee754_rem_pio2+0x408>)
 801a8e4:	9301      	str	r3, [sp, #4]
 801a8e6:	2302      	movs	r3, #2
 801a8e8:	9300      	str	r3, [sp, #0]
 801a8ea:	4632      	mov	r2, r6
 801a8ec:	464b      	mov	r3, r9
 801a8ee:	4651      	mov	r1, sl
 801a8f0:	a804      	add	r0, sp, #16
 801a8f2:	f000 fad1 	bl	801ae98 <__kernel_rem_pio2>
 801a8f6:	9b02      	ldr	r3, [sp, #8]
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	4683      	mov	fp, r0
 801a8fc:	f6bf ae4c 	bge.w	801a598 <__ieee754_rem_pio2+0x80>
 801a900:	e9da 2100 	ldrd	r2, r1, [sl]
 801a904:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a908:	e9ca 2300 	strd	r2, r3, [sl]
 801a90c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801a910:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a914:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801a918:	e73f      	b.n	801a79a <__ieee754_rem_pio2+0x282>
 801a91a:	bf00      	nop
 801a91c:	41700000 	.word	0x41700000
 801a920:	0801de18 	.word	0x0801de18

0801a924 <acos>:
 801a924:	b538      	push	{r3, r4, r5, lr}
 801a926:	ed2d 8b02 	vpush	{d8}
 801a92a:	ec55 4b10 	vmov	r4, r5, d0
 801a92e:	f000 fe03 	bl	801b538 <__ieee754_acos>
 801a932:	4622      	mov	r2, r4
 801a934:	462b      	mov	r3, r5
 801a936:	4620      	mov	r0, r4
 801a938:	4629      	mov	r1, r5
 801a93a:	eeb0 8a40 	vmov.f32	s16, s0
 801a93e:	eef0 8a60 	vmov.f32	s17, s1
 801a942:	f7e6 f8f3 	bl	8000b2c <__aeabi_dcmpun>
 801a946:	b9a8      	cbnz	r0, 801a974 <acos+0x50>
 801a948:	ec45 4b10 	vmov	d0, r4, r5
 801a94c:	f000 f81e 	bl	801a98c <fabs>
 801a950:	4b0c      	ldr	r3, [pc, #48]	; (801a984 <acos+0x60>)
 801a952:	ec51 0b10 	vmov	r0, r1, d0
 801a956:	2200      	movs	r2, #0
 801a958:	f7e6 f8de 	bl	8000b18 <__aeabi_dcmpgt>
 801a95c:	b150      	cbz	r0, 801a974 <acos+0x50>
 801a95e:	f7fc f85f 	bl	8016a20 <__errno>
 801a962:	ecbd 8b02 	vpop	{d8}
 801a966:	2321      	movs	r3, #33	; 0x21
 801a968:	6003      	str	r3, [r0, #0]
 801a96a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a96e:	4806      	ldr	r0, [pc, #24]	; (801a988 <acos+0x64>)
 801a970:	f7fc b89a 	b.w	8016aa8 <nan>
 801a974:	eeb0 0a48 	vmov.f32	s0, s16
 801a978:	eef0 0a68 	vmov.f32	s1, s17
 801a97c:	ecbd 8b02 	vpop	{d8}
 801a980:	bd38      	pop	{r3, r4, r5, pc}
 801a982:	bf00      	nop
 801a984:	3ff00000 	.word	0x3ff00000
 801a988:	0801db26 	.word	0x0801db26

0801a98c <fabs>:
 801a98c:	ec51 0b10 	vmov	r0, r1, d0
 801a990:	ee10 2a10 	vmov	r2, s0
 801a994:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a998:	ec43 2b10 	vmov	d0, r2, r3
 801a99c:	4770      	bx	lr
	...

0801a9a0 <__ieee754_expf>:
 801a9a0:	ee10 2a10 	vmov	r2, s0
 801a9a4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801a9a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a9ac:	d902      	bls.n	801a9b4 <__ieee754_expf+0x14>
 801a9ae:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a9b2:	4770      	bx	lr
 801a9b4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801a9b8:	d106      	bne.n	801a9c8 <__ieee754_expf+0x28>
 801a9ba:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801aaf4 <__ieee754_expf+0x154>
 801a9be:	2900      	cmp	r1, #0
 801a9c0:	bf18      	it	ne
 801a9c2:	eeb0 0a67 	vmovne.f32	s0, s15
 801a9c6:	4770      	bx	lr
 801a9c8:	484b      	ldr	r0, [pc, #300]	; (801aaf8 <__ieee754_expf+0x158>)
 801a9ca:	4282      	cmp	r2, r0
 801a9cc:	dd02      	ble.n	801a9d4 <__ieee754_expf+0x34>
 801a9ce:	2000      	movs	r0, #0
 801a9d0:	f000 b980 	b.w	801acd4 <__math_oflowf>
 801a9d4:	2a00      	cmp	r2, #0
 801a9d6:	da05      	bge.n	801a9e4 <__ieee754_expf+0x44>
 801a9d8:	4a48      	ldr	r2, [pc, #288]	; (801aafc <__ieee754_expf+0x15c>)
 801a9da:	4293      	cmp	r3, r2
 801a9dc:	d902      	bls.n	801a9e4 <__ieee754_expf+0x44>
 801a9de:	2000      	movs	r0, #0
 801a9e0:	f000 b972 	b.w	801acc8 <__math_uflowf>
 801a9e4:	4a46      	ldr	r2, [pc, #280]	; (801ab00 <__ieee754_expf+0x160>)
 801a9e6:	4293      	cmp	r3, r2
 801a9e8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801a9ec:	d952      	bls.n	801aa94 <__ieee754_expf+0xf4>
 801a9ee:	4a45      	ldr	r2, [pc, #276]	; (801ab04 <__ieee754_expf+0x164>)
 801a9f0:	4293      	cmp	r3, r2
 801a9f2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801a9f6:	d834      	bhi.n	801aa62 <__ieee754_expf+0xc2>
 801a9f8:	4b43      	ldr	r3, [pc, #268]	; (801ab08 <__ieee754_expf+0x168>)
 801a9fa:	4413      	add	r3, r2
 801a9fc:	ed93 7a00 	vldr	s14, [r3]
 801aa00:	4b42      	ldr	r3, [pc, #264]	; (801ab0c <__ieee754_expf+0x16c>)
 801aa02:	4413      	add	r3, r2
 801aa04:	ee30 7a47 	vsub.f32	s14, s0, s14
 801aa08:	f1c1 0201 	rsb	r2, r1, #1
 801aa0c:	edd3 7a00 	vldr	s15, [r3]
 801aa10:	1a52      	subs	r2, r2, r1
 801aa12:	ee37 0a67 	vsub.f32	s0, s14, s15
 801aa16:	ee20 6a00 	vmul.f32	s12, s0, s0
 801aa1a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801ab10 <__ieee754_expf+0x170>
 801aa1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801ab14 <__ieee754_expf+0x174>
 801aa22:	eee6 6a05 	vfma.f32	s13, s12, s10
 801aa26:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801ab18 <__ieee754_expf+0x178>
 801aa2a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801aa2e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801ab1c <__ieee754_expf+0x17c>
 801aa32:	eee5 6a06 	vfma.f32	s13, s10, s12
 801aa36:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801ab20 <__ieee754_expf+0x180>
 801aa3a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801aa3e:	eef0 6a40 	vmov.f32	s13, s0
 801aa42:	eee5 6a46 	vfms.f32	s13, s10, s12
 801aa46:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801aa4a:	ee20 5a26 	vmul.f32	s10, s0, s13
 801aa4e:	bb92      	cbnz	r2, 801aab6 <__ieee754_expf+0x116>
 801aa50:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801aa54:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801aa58:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801aa5c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801aa60:	4770      	bx	lr
 801aa62:	4b30      	ldr	r3, [pc, #192]	; (801ab24 <__ieee754_expf+0x184>)
 801aa64:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801ab28 <__ieee754_expf+0x188>
 801aa68:	eddf 6a30 	vldr	s13, [pc, #192]	; 801ab2c <__ieee754_expf+0x18c>
 801aa6c:	4413      	add	r3, r2
 801aa6e:	edd3 7a00 	vldr	s15, [r3]
 801aa72:	eee0 7a07 	vfma.f32	s15, s0, s14
 801aa76:	eeb0 7a40 	vmov.f32	s14, s0
 801aa7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aa7e:	ee17 2a90 	vmov	r2, s15
 801aa82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa86:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801aa8a:	eddf 6a29 	vldr	s13, [pc, #164]	; 801ab30 <__ieee754_expf+0x190>
 801aa8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801aa92:	e7be      	b.n	801aa12 <__ieee754_expf+0x72>
 801aa94:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 801aa98:	d20b      	bcs.n	801aab2 <__ieee754_expf+0x112>
 801aa9a:	eddf 6a26 	vldr	s13, [pc, #152]	; 801ab34 <__ieee754_expf+0x194>
 801aa9e:	ee70 6a26 	vadd.f32	s13, s0, s13
 801aaa2:	eef4 6ae5 	vcmpe.f32	s13, s11
 801aaa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aaaa:	dd02      	ble.n	801aab2 <__ieee754_expf+0x112>
 801aaac:	ee30 0a25 	vadd.f32	s0, s0, s11
 801aab0:	4770      	bx	lr
 801aab2:	2200      	movs	r2, #0
 801aab4:	e7af      	b.n	801aa16 <__ieee754_expf+0x76>
 801aab6:	ee36 6a66 	vsub.f32	s12, s12, s13
 801aaba:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801aabe:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801aac2:	bfb8      	it	lt
 801aac4:	3264      	addlt	r2, #100	; 0x64
 801aac6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801aaca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aace:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801aad2:	ee17 3a90 	vmov	r3, s15
 801aad6:	bfab      	itete	ge
 801aad8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801aadc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801aae0:	ee00 3a10 	vmovge	s0, r3
 801aae4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 801ab38 <__ieee754_expf+0x198>
 801aae8:	bfbc      	itt	lt
 801aaea:	ee00 3a10 	vmovlt	s0, r3
 801aaee:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801aaf2:	4770      	bx	lr
 801aaf4:	00000000 	.word	0x00000000
 801aaf8:	42b17217 	.word	0x42b17217
 801aafc:	42cff1b5 	.word	0x42cff1b5
 801ab00:	3eb17218 	.word	0x3eb17218
 801ab04:	3f851591 	.word	0x3f851591
 801ab08:	0801df28 	.word	0x0801df28
 801ab0c:	0801df30 	.word	0x0801df30
 801ab10:	3331bb4c 	.word	0x3331bb4c
 801ab14:	b5ddea0e 	.word	0xb5ddea0e
 801ab18:	388ab355 	.word	0x388ab355
 801ab1c:	bb360b61 	.word	0xbb360b61
 801ab20:	3e2aaaab 	.word	0x3e2aaaab
 801ab24:	0801df20 	.word	0x0801df20
 801ab28:	3fb8aa3b 	.word	0x3fb8aa3b
 801ab2c:	3f317180 	.word	0x3f317180
 801ab30:	3717f7d1 	.word	0x3717f7d1
 801ab34:	7149f2ca 	.word	0x7149f2ca
 801ab38:	0d800000 	.word	0x0d800000
 801ab3c:	00000000 	.word	0x00000000

0801ab40 <scalbn>:
 801ab40:	b570      	push	{r4, r5, r6, lr}
 801ab42:	ec55 4b10 	vmov	r4, r5, d0
 801ab46:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801ab4a:	4606      	mov	r6, r0
 801ab4c:	462b      	mov	r3, r5
 801ab4e:	b999      	cbnz	r1, 801ab78 <scalbn+0x38>
 801ab50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ab54:	4323      	orrs	r3, r4
 801ab56:	d03f      	beq.n	801abd8 <scalbn+0x98>
 801ab58:	4b35      	ldr	r3, [pc, #212]	; (801ac30 <scalbn+0xf0>)
 801ab5a:	4629      	mov	r1, r5
 801ab5c:	ee10 0a10 	vmov	r0, s0
 801ab60:	2200      	movs	r2, #0
 801ab62:	f7e5 fd49 	bl	80005f8 <__aeabi_dmul>
 801ab66:	4b33      	ldr	r3, [pc, #204]	; (801ac34 <scalbn+0xf4>)
 801ab68:	429e      	cmp	r6, r3
 801ab6a:	4604      	mov	r4, r0
 801ab6c:	460d      	mov	r5, r1
 801ab6e:	da10      	bge.n	801ab92 <scalbn+0x52>
 801ab70:	a327      	add	r3, pc, #156	; (adr r3, 801ac10 <scalbn+0xd0>)
 801ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab76:	e01f      	b.n	801abb8 <scalbn+0x78>
 801ab78:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801ab7c:	4291      	cmp	r1, r2
 801ab7e:	d10c      	bne.n	801ab9a <scalbn+0x5a>
 801ab80:	ee10 2a10 	vmov	r2, s0
 801ab84:	4620      	mov	r0, r4
 801ab86:	4629      	mov	r1, r5
 801ab88:	f7e5 fb80 	bl	800028c <__adddf3>
 801ab8c:	4604      	mov	r4, r0
 801ab8e:	460d      	mov	r5, r1
 801ab90:	e022      	b.n	801abd8 <scalbn+0x98>
 801ab92:	460b      	mov	r3, r1
 801ab94:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801ab98:	3936      	subs	r1, #54	; 0x36
 801ab9a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801ab9e:	4296      	cmp	r6, r2
 801aba0:	dd0d      	ble.n	801abbe <scalbn+0x7e>
 801aba2:	2d00      	cmp	r5, #0
 801aba4:	a11c      	add	r1, pc, #112	; (adr r1, 801ac18 <scalbn+0xd8>)
 801aba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abaa:	da02      	bge.n	801abb2 <scalbn+0x72>
 801abac:	a11c      	add	r1, pc, #112	; (adr r1, 801ac20 <scalbn+0xe0>)
 801abae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abb2:	a319      	add	r3, pc, #100	; (adr r3, 801ac18 <scalbn+0xd8>)
 801abb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abb8:	f7e5 fd1e 	bl	80005f8 <__aeabi_dmul>
 801abbc:	e7e6      	b.n	801ab8c <scalbn+0x4c>
 801abbe:	1872      	adds	r2, r6, r1
 801abc0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801abc4:	428a      	cmp	r2, r1
 801abc6:	dcec      	bgt.n	801aba2 <scalbn+0x62>
 801abc8:	2a00      	cmp	r2, #0
 801abca:	dd08      	ble.n	801abde <scalbn+0x9e>
 801abcc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801abd0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801abd4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801abd8:	ec45 4b10 	vmov	d0, r4, r5
 801abdc:	bd70      	pop	{r4, r5, r6, pc}
 801abde:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801abe2:	da08      	bge.n	801abf6 <scalbn+0xb6>
 801abe4:	2d00      	cmp	r5, #0
 801abe6:	a10a      	add	r1, pc, #40	; (adr r1, 801ac10 <scalbn+0xd0>)
 801abe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abec:	dac0      	bge.n	801ab70 <scalbn+0x30>
 801abee:	a10e      	add	r1, pc, #56	; (adr r1, 801ac28 <scalbn+0xe8>)
 801abf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abf4:	e7bc      	b.n	801ab70 <scalbn+0x30>
 801abf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801abfa:	3236      	adds	r2, #54	; 0x36
 801abfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ac00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801ac04:	4620      	mov	r0, r4
 801ac06:	4b0c      	ldr	r3, [pc, #48]	; (801ac38 <scalbn+0xf8>)
 801ac08:	2200      	movs	r2, #0
 801ac0a:	e7d5      	b.n	801abb8 <scalbn+0x78>
 801ac0c:	f3af 8000 	nop.w
 801ac10:	c2f8f359 	.word	0xc2f8f359
 801ac14:	01a56e1f 	.word	0x01a56e1f
 801ac18:	8800759c 	.word	0x8800759c
 801ac1c:	7e37e43c 	.word	0x7e37e43c
 801ac20:	8800759c 	.word	0x8800759c
 801ac24:	fe37e43c 	.word	0xfe37e43c
 801ac28:	c2f8f359 	.word	0xc2f8f359
 801ac2c:	81a56e1f 	.word	0x81a56e1f
 801ac30:	43500000 	.word	0x43500000
 801ac34:	ffff3cb0 	.word	0xffff3cb0
 801ac38:	3c900000 	.word	0x3c900000

0801ac3c <with_errno>:
 801ac3c:	b570      	push	{r4, r5, r6, lr}
 801ac3e:	4604      	mov	r4, r0
 801ac40:	460d      	mov	r5, r1
 801ac42:	4616      	mov	r6, r2
 801ac44:	f7fb feec 	bl	8016a20 <__errno>
 801ac48:	4629      	mov	r1, r5
 801ac4a:	6006      	str	r6, [r0, #0]
 801ac4c:	4620      	mov	r0, r4
 801ac4e:	bd70      	pop	{r4, r5, r6, pc}

0801ac50 <xflow>:
 801ac50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ac52:	4614      	mov	r4, r2
 801ac54:	461d      	mov	r5, r3
 801ac56:	b108      	cbz	r0, 801ac5c <xflow+0xc>
 801ac58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801ac5c:	e9cd 2300 	strd	r2, r3, [sp]
 801ac60:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ac64:	4620      	mov	r0, r4
 801ac66:	4629      	mov	r1, r5
 801ac68:	f7e5 fcc6 	bl	80005f8 <__aeabi_dmul>
 801ac6c:	2222      	movs	r2, #34	; 0x22
 801ac6e:	b003      	add	sp, #12
 801ac70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ac74:	f7ff bfe2 	b.w	801ac3c <with_errno>

0801ac78 <__math_uflow>:
 801ac78:	b508      	push	{r3, lr}
 801ac7a:	2200      	movs	r2, #0
 801ac7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801ac80:	f7ff ffe6 	bl	801ac50 <xflow>
 801ac84:	ec41 0b10 	vmov	d0, r0, r1
 801ac88:	bd08      	pop	{r3, pc}

0801ac8a <__math_oflow>:
 801ac8a:	b508      	push	{r3, lr}
 801ac8c:	2200      	movs	r2, #0
 801ac8e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801ac92:	f7ff ffdd 	bl	801ac50 <xflow>
 801ac96:	ec41 0b10 	vmov	d0, r0, r1
 801ac9a:	bd08      	pop	{r3, pc}

0801ac9c <with_errnof>:
 801ac9c:	b513      	push	{r0, r1, r4, lr}
 801ac9e:	4604      	mov	r4, r0
 801aca0:	ed8d 0a01 	vstr	s0, [sp, #4]
 801aca4:	f7fb febc 	bl	8016a20 <__errno>
 801aca8:	ed9d 0a01 	vldr	s0, [sp, #4]
 801acac:	6004      	str	r4, [r0, #0]
 801acae:	b002      	add	sp, #8
 801acb0:	bd10      	pop	{r4, pc}

0801acb2 <xflowf>:
 801acb2:	b130      	cbz	r0, 801acc2 <xflowf+0x10>
 801acb4:	eef1 7a40 	vneg.f32	s15, s0
 801acb8:	ee27 0a80 	vmul.f32	s0, s15, s0
 801acbc:	2022      	movs	r0, #34	; 0x22
 801acbe:	f7ff bfed 	b.w	801ac9c <with_errnof>
 801acc2:	eef0 7a40 	vmov.f32	s15, s0
 801acc6:	e7f7      	b.n	801acb8 <xflowf+0x6>

0801acc8 <__math_uflowf>:
 801acc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801acd0 <__math_uflowf+0x8>
 801accc:	f7ff bff1 	b.w	801acb2 <xflowf>
 801acd0:	10000000 	.word	0x10000000

0801acd4 <__math_oflowf>:
 801acd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801acdc <__math_oflowf+0x8>
 801acd8:	f7ff bfeb 	b.w	801acb2 <xflowf>
 801acdc:	70000000 	.word	0x70000000

0801ace0 <__ieee754_sqrt>:
 801ace0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ace4:	ec55 4b10 	vmov	r4, r5, d0
 801ace8:	4e67      	ldr	r6, [pc, #412]	; (801ae88 <__ieee754_sqrt+0x1a8>)
 801acea:	43ae      	bics	r6, r5
 801acec:	ee10 0a10 	vmov	r0, s0
 801acf0:	ee10 2a10 	vmov	r2, s0
 801acf4:	4629      	mov	r1, r5
 801acf6:	462b      	mov	r3, r5
 801acf8:	d10d      	bne.n	801ad16 <__ieee754_sqrt+0x36>
 801acfa:	f7e5 fc7d 	bl	80005f8 <__aeabi_dmul>
 801acfe:	4602      	mov	r2, r0
 801ad00:	460b      	mov	r3, r1
 801ad02:	4620      	mov	r0, r4
 801ad04:	4629      	mov	r1, r5
 801ad06:	f7e5 fac1 	bl	800028c <__adddf3>
 801ad0a:	4604      	mov	r4, r0
 801ad0c:	460d      	mov	r5, r1
 801ad0e:	ec45 4b10 	vmov	d0, r4, r5
 801ad12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad16:	2d00      	cmp	r5, #0
 801ad18:	dc0b      	bgt.n	801ad32 <__ieee754_sqrt+0x52>
 801ad1a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ad1e:	4326      	orrs	r6, r4
 801ad20:	d0f5      	beq.n	801ad0e <__ieee754_sqrt+0x2e>
 801ad22:	b135      	cbz	r5, 801ad32 <__ieee754_sqrt+0x52>
 801ad24:	f7e5 fab0 	bl	8000288 <__aeabi_dsub>
 801ad28:	4602      	mov	r2, r0
 801ad2a:	460b      	mov	r3, r1
 801ad2c:	f7e5 fd8e 	bl	800084c <__aeabi_ddiv>
 801ad30:	e7eb      	b.n	801ad0a <__ieee754_sqrt+0x2a>
 801ad32:	1509      	asrs	r1, r1, #20
 801ad34:	f000 808d 	beq.w	801ae52 <__ieee754_sqrt+0x172>
 801ad38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ad3c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801ad40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ad44:	07c9      	lsls	r1, r1, #31
 801ad46:	bf5c      	itt	pl
 801ad48:	005b      	lslpl	r3, r3, #1
 801ad4a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801ad4e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ad52:	bf58      	it	pl
 801ad54:	0052      	lslpl	r2, r2, #1
 801ad56:	2500      	movs	r5, #0
 801ad58:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801ad5c:	1076      	asrs	r6, r6, #1
 801ad5e:	0052      	lsls	r2, r2, #1
 801ad60:	f04f 0e16 	mov.w	lr, #22
 801ad64:	46ac      	mov	ip, r5
 801ad66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801ad6a:	eb0c 0001 	add.w	r0, ip, r1
 801ad6e:	4298      	cmp	r0, r3
 801ad70:	bfde      	ittt	le
 801ad72:	1a1b      	suble	r3, r3, r0
 801ad74:	eb00 0c01 	addle.w	ip, r0, r1
 801ad78:	186d      	addle	r5, r5, r1
 801ad7a:	005b      	lsls	r3, r3, #1
 801ad7c:	f1be 0e01 	subs.w	lr, lr, #1
 801ad80:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801ad84:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801ad88:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801ad8c:	d1ed      	bne.n	801ad6a <__ieee754_sqrt+0x8a>
 801ad8e:	4674      	mov	r4, lr
 801ad90:	2720      	movs	r7, #32
 801ad92:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801ad96:	4563      	cmp	r3, ip
 801ad98:	eb01 000e 	add.w	r0, r1, lr
 801ad9c:	dc02      	bgt.n	801ada4 <__ieee754_sqrt+0xc4>
 801ad9e:	d113      	bne.n	801adc8 <__ieee754_sqrt+0xe8>
 801ada0:	4290      	cmp	r0, r2
 801ada2:	d811      	bhi.n	801adc8 <__ieee754_sqrt+0xe8>
 801ada4:	2800      	cmp	r0, #0
 801ada6:	eb00 0e01 	add.w	lr, r0, r1
 801adaa:	da57      	bge.n	801ae5c <__ieee754_sqrt+0x17c>
 801adac:	f1be 0f00 	cmp.w	lr, #0
 801adb0:	db54      	blt.n	801ae5c <__ieee754_sqrt+0x17c>
 801adb2:	f10c 0801 	add.w	r8, ip, #1
 801adb6:	eba3 030c 	sub.w	r3, r3, ip
 801adba:	4290      	cmp	r0, r2
 801adbc:	bf88      	it	hi
 801adbe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801adc2:	1a12      	subs	r2, r2, r0
 801adc4:	440c      	add	r4, r1
 801adc6:	46c4      	mov	ip, r8
 801adc8:	005b      	lsls	r3, r3, #1
 801adca:	3f01      	subs	r7, #1
 801adcc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801add0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801add4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801add8:	d1dd      	bne.n	801ad96 <__ieee754_sqrt+0xb6>
 801adda:	4313      	orrs	r3, r2
 801addc:	d01b      	beq.n	801ae16 <__ieee754_sqrt+0x136>
 801adde:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801ae8c <__ieee754_sqrt+0x1ac>
 801ade2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801ae90 <__ieee754_sqrt+0x1b0>
 801ade6:	e9da 0100 	ldrd	r0, r1, [sl]
 801adea:	e9db 2300 	ldrd	r2, r3, [fp]
 801adee:	f7e5 fa4b 	bl	8000288 <__aeabi_dsub>
 801adf2:	e9da 8900 	ldrd	r8, r9, [sl]
 801adf6:	4602      	mov	r2, r0
 801adf8:	460b      	mov	r3, r1
 801adfa:	4640      	mov	r0, r8
 801adfc:	4649      	mov	r1, r9
 801adfe:	f7e5 fe77 	bl	8000af0 <__aeabi_dcmple>
 801ae02:	b140      	cbz	r0, 801ae16 <__ieee754_sqrt+0x136>
 801ae04:	f1b4 3fff 	cmp.w	r4, #4294967295
 801ae08:	e9da 0100 	ldrd	r0, r1, [sl]
 801ae0c:	e9db 2300 	ldrd	r2, r3, [fp]
 801ae10:	d126      	bne.n	801ae60 <__ieee754_sqrt+0x180>
 801ae12:	3501      	adds	r5, #1
 801ae14:	463c      	mov	r4, r7
 801ae16:	106a      	asrs	r2, r5, #1
 801ae18:	0863      	lsrs	r3, r4, #1
 801ae1a:	07e9      	lsls	r1, r5, #31
 801ae1c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801ae20:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801ae24:	bf48      	it	mi
 801ae26:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801ae2a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801ae2e:	461c      	mov	r4, r3
 801ae30:	e76d      	b.n	801ad0e <__ieee754_sqrt+0x2e>
 801ae32:	0ad3      	lsrs	r3, r2, #11
 801ae34:	3815      	subs	r0, #21
 801ae36:	0552      	lsls	r2, r2, #21
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d0fa      	beq.n	801ae32 <__ieee754_sqrt+0x152>
 801ae3c:	02dc      	lsls	r4, r3, #11
 801ae3e:	d50a      	bpl.n	801ae56 <__ieee754_sqrt+0x176>
 801ae40:	f1c1 0420 	rsb	r4, r1, #32
 801ae44:	fa22 f404 	lsr.w	r4, r2, r4
 801ae48:	1e4d      	subs	r5, r1, #1
 801ae4a:	408a      	lsls	r2, r1
 801ae4c:	4323      	orrs	r3, r4
 801ae4e:	1b41      	subs	r1, r0, r5
 801ae50:	e772      	b.n	801ad38 <__ieee754_sqrt+0x58>
 801ae52:	4608      	mov	r0, r1
 801ae54:	e7f0      	b.n	801ae38 <__ieee754_sqrt+0x158>
 801ae56:	005b      	lsls	r3, r3, #1
 801ae58:	3101      	adds	r1, #1
 801ae5a:	e7ef      	b.n	801ae3c <__ieee754_sqrt+0x15c>
 801ae5c:	46e0      	mov	r8, ip
 801ae5e:	e7aa      	b.n	801adb6 <__ieee754_sqrt+0xd6>
 801ae60:	f7e5 fa14 	bl	800028c <__adddf3>
 801ae64:	e9da 8900 	ldrd	r8, r9, [sl]
 801ae68:	4602      	mov	r2, r0
 801ae6a:	460b      	mov	r3, r1
 801ae6c:	4640      	mov	r0, r8
 801ae6e:	4649      	mov	r1, r9
 801ae70:	f7e5 fe34 	bl	8000adc <__aeabi_dcmplt>
 801ae74:	b120      	cbz	r0, 801ae80 <__ieee754_sqrt+0x1a0>
 801ae76:	1ca0      	adds	r0, r4, #2
 801ae78:	bf08      	it	eq
 801ae7a:	3501      	addeq	r5, #1
 801ae7c:	3402      	adds	r4, #2
 801ae7e:	e7ca      	b.n	801ae16 <__ieee754_sqrt+0x136>
 801ae80:	3401      	adds	r4, #1
 801ae82:	f024 0401 	bic.w	r4, r4, #1
 801ae86:	e7c6      	b.n	801ae16 <__ieee754_sqrt+0x136>
 801ae88:	7ff00000 	.word	0x7ff00000
 801ae8c:	20000310 	.word	0x20000310
 801ae90:	20000318 	.word	0x20000318
 801ae94:	00000000 	.word	0x00000000

0801ae98 <__kernel_rem_pio2>:
 801ae98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae9c:	ed2d 8b02 	vpush	{d8}
 801aea0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801aea4:	f112 0f14 	cmn.w	r2, #20
 801aea8:	9306      	str	r3, [sp, #24]
 801aeaa:	9104      	str	r1, [sp, #16]
 801aeac:	4bc2      	ldr	r3, [pc, #776]	; (801b1b8 <__kernel_rem_pio2+0x320>)
 801aeae:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801aeb0:	9009      	str	r0, [sp, #36]	; 0x24
 801aeb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801aeb6:	9300      	str	r3, [sp, #0]
 801aeb8:	9b06      	ldr	r3, [sp, #24]
 801aeba:	f103 33ff 	add.w	r3, r3, #4294967295
 801aebe:	bfa8      	it	ge
 801aec0:	1ed4      	subge	r4, r2, #3
 801aec2:	9305      	str	r3, [sp, #20]
 801aec4:	bfb2      	itee	lt
 801aec6:	2400      	movlt	r4, #0
 801aec8:	2318      	movge	r3, #24
 801aeca:	fb94 f4f3 	sdivge	r4, r4, r3
 801aece:	f06f 0317 	mvn.w	r3, #23
 801aed2:	fb04 3303 	mla	r3, r4, r3, r3
 801aed6:	eb03 0a02 	add.w	sl, r3, r2
 801aeda:	9b00      	ldr	r3, [sp, #0]
 801aedc:	9a05      	ldr	r2, [sp, #20]
 801aede:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 801b1a8 <__kernel_rem_pio2+0x310>
 801aee2:	eb03 0802 	add.w	r8, r3, r2
 801aee6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801aee8:	1aa7      	subs	r7, r4, r2
 801aeea:	ae20      	add	r6, sp, #128	; 0x80
 801aeec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801aef0:	2500      	movs	r5, #0
 801aef2:	4545      	cmp	r5, r8
 801aef4:	dd13      	ble.n	801af1e <__kernel_rem_pio2+0x86>
 801aef6:	9b06      	ldr	r3, [sp, #24]
 801aef8:	aa20      	add	r2, sp, #128	; 0x80
 801aefa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801aefe:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801af02:	f04f 0800 	mov.w	r8, #0
 801af06:	9b00      	ldr	r3, [sp, #0]
 801af08:	4598      	cmp	r8, r3
 801af0a:	dc31      	bgt.n	801af70 <__kernel_rem_pio2+0xd8>
 801af0c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 801b1a8 <__kernel_rem_pio2+0x310>
 801af10:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801af14:	ed8d 7b02 	vstr	d7, [sp, #8]
 801af18:	462f      	mov	r7, r5
 801af1a:	2600      	movs	r6, #0
 801af1c:	e01b      	b.n	801af56 <__kernel_rem_pio2+0xbe>
 801af1e:	42ef      	cmn	r7, r5
 801af20:	d407      	bmi.n	801af32 <__kernel_rem_pio2+0x9a>
 801af22:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801af26:	f7e5 fafd 	bl	8000524 <__aeabi_i2d>
 801af2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801af2e:	3501      	adds	r5, #1
 801af30:	e7df      	b.n	801aef2 <__kernel_rem_pio2+0x5a>
 801af32:	ec51 0b18 	vmov	r0, r1, d8
 801af36:	e7f8      	b.n	801af2a <__kernel_rem_pio2+0x92>
 801af38:	e9d7 2300 	ldrd	r2, r3, [r7]
 801af3c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801af40:	f7e5 fb5a 	bl	80005f8 <__aeabi_dmul>
 801af44:	4602      	mov	r2, r0
 801af46:	460b      	mov	r3, r1
 801af48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801af4c:	f7e5 f99e 	bl	800028c <__adddf3>
 801af50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801af54:	3601      	adds	r6, #1
 801af56:	9b05      	ldr	r3, [sp, #20]
 801af58:	429e      	cmp	r6, r3
 801af5a:	f1a7 0708 	sub.w	r7, r7, #8
 801af5e:	ddeb      	ble.n	801af38 <__kernel_rem_pio2+0xa0>
 801af60:	ed9d 7b02 	vldr	d7, [sp, #8]
 801af64:	f108 0801 	add.w	r8, r8, #1
 801af68:	ecab 7b02 	vstmia	fp!, {d7}
 801af6c:	3508      	adds	r5, #8
 801af6e:	e7ca      	b.n	801af06 <__kernel_rem_pio2+0x6e>
 801af70:	9b00      	ldr	r3, [sp, #0]
 801af72:	aa0c      	add	r2, sp, #48	; 0x30
 801af74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801af78:	930b      	str	r3, [sp, #44]	; 0x2c
 801af7a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801af7c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801af80:	9c00      	ldr	r4, [sp, #0]
 801af82:	930a      	str	r3, [sp, #40]	; 0x28
 801af84:	00e3      	lsls	r3, r4, #3
 801af86:	9308      	str	r3, [sp, #32]
 801af88:	ab98      	add	r3, sp, #608	; 0x260
 801af8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801af8e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801af92:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801af96:	ab70      	add	r3, sp, #448	; 0x1c0
 801af98:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801af9c:	46c3      	mov	fp, r8
 801af9e:	46a1      	mov	r9, r4
 801afa0:	f1b9 0f00 	cmp.w	r9, #0
 801afa4:	f1a5 0508 	sub.w	r5, r5, #8
 801afa8:	dc77      	bgt.n	801b09a <__kernel_rem_pio2+0x202>
 801afaa:	ec47 6b10 	vmov	d0, r6, r7
 801afae:	4650      	mov	r0, sl
 801afb0:	f7ff fdc6 	bl	801ab40 <scalbn>
 801afb4:	ec57 6b10 	vmov	r6, r7, d0
 801afb8:	2200      	movs	r2, #0
 801afba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801afbe:	ee10 0a10 	vmov	r0, s0
 801afc2:	4639      	mov	r1, r7
 801afc4:	f7e5 fb18 	bl	80005f8 <__aeabi_dmul>
 801afc8:	ec41 0b10 	vmov	d0, r0, r1
 801afcc:	f7fe fb70 	bl	80196b0 <floor>
 801afd0:	4b7a      	ldr	r3, [pc, #488]	; (801b1bc <__kernel_rem_pio2+0x324>)
 801afd2:	ec51 0b10 	vmov	r0, r1, d0
 801afd6:	2200      	movs	r2, #0
 801afd8:	f7e5 fb0e 	bl	80005f8 <__aeabi_dmul>
 801afdc:	4602      	mov	r2, r0
 801afde:	460b      	mov	r3, r1
 801afe0:	4630      	mov	r0, r6
 801afe2:	4639      	mov	r1, r7
 801afe4:	f7e5 f950 	bl	8000288 <__aeabi_dsub>
 801afe8:	460f      	mov	r7, r1
 801afea:	4606      	mov	r6, r0
 801afec:	f7e5 fdb4 	bl	8000b58 <__aeabi_d2iz>
 801aff0:	9002      	str	r0, [sp, #8]
 801aff2:	f7e5 fa97 	bl	8000524 <__aeabi_i2d>
 801aff6:	4602      	mov	r2, r0
 801aff8:	460b      	mov	r3, r1
 801affa:	4630      	mov	r0, r6
 801affc:	4639      	mov	r1, r7
 801affe:	f7e5 f943 	bl	8000288 <__aeabi_dsub>
 801b002:	f1ba 0f00 	cmp.w	sl, #0
 801b006:	4606      	mov	r6, r0
 801b008:	460f      	mov	r7, r1
 801b00a:	dd6d      	ble.n	801b0e8 <__kernel_rem_pio2+0x250>
 801b00c:	1e61      	subs	r1, r4, #1
 801b00e:	ab0c      	add	r3, sp, #48	; 0x30
 801b010:	9d02      	ldr	r5, [sp, #8]
 801b012:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b016:	f1ca 0018 	rsb	r0, sl, #24
 801b01a:	fa43 f200 	asr.w	r2, r3, r0
 801b01e:	4415      	add	r5, r2
 801b020:	4082      	lsls	r2, r0
 801b022:	1a9b      	subs	r3, r3, r2
 801b024:	aa0c      	add	r2, sp, #48	; 0x30
 801b026:	9502      	str	r5, [sp, #8]
 801b028:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801b02c:	f1ca 0217 	rsb	r2, sl, #23
 801b030:	fa43 fb02 	asr.w	fp, r3, r2
 801b034:	f1bb 0f00 	cmp.w	fp, #0
 801b038:	dd65      	ble.n	801b106 <__kernel_rem_pio2+0x26e>
 801b03a:	9b02      	ldr	r3, [sp, #8]
 801b03c:	2200      	movs	r2, #0
 801b03e:	3301      	adds	r3, #1
 801b040:	9302      	str	r3, [sp, #8]
 801b042:	4615      	mov	r5, r2
 801b044:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801b048:	4294      	cmp	r4, r2
 801b04a:	f300 809f 	bgt.w	801b18c <__kernel_rem_pio2+0x2f4>
 801b04e:	f1ba 0f00 	cmp.w	sl, #0
 801b052:	dd07      	ble.n	801b064 <__kernel_rem_pio2+0x1cc>
 801b054:	f1ba 0f01 	cmp.w	sl, #1
 801b058:	f000 80c1 	beq.w	801b1de <__kernel_rem_pio2+0x346>
 801b05c:	f1ba 0f02 	cmp.w	sl, #2
 801b060:	f000 80c7 	beq.w	801b1f2 <__kernel_rem_pio2+0x35a>
 801b064:	f1bb 0f02 	cmp.w	fp, #2
 801b068:	d14d      	bne.n	801b106 <__kernel_rem_pio2+0x26e>
 801b06a:	4632      	mov	r2, r6
 801b06c:	463b      	mov	r3, r7
 801b06e:	4954      	ldr	r1, [pc, #336]	; (801b1c0 <__kernel_rem_pio2+0x328>)
 801b070:	2000      	movs	r0, #0
 801b072:	f7e5 f909 	bl	8000288 <__aeabi_dsub>
 801b076:	4606      	mov	r6, r0
 801b078:	460f      	mov	r7, r1
 801b07a:	2d00      	cmp	r5, #0
 801b07c:	d043      	beq.n	801b106 <__kernel_rem_pio2+0x26e>
 801b07e:	4650      	mov	r0, sl
 801b080:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 801b1b0 <__kernel_rem_pio2+0x318>
 801b084:	f7ff fd5c 	bl	801ab40 <scalbn>
 801b088:	4630      	mov	r0, r6
 801b08a:	4639      	mov	r1, r7
 801b08c:	ec53 2b10 	vmov	r2, r3, d0
 801b090:	f7e5 f8fa 	bl	8000288 <__aeabi_dsub>
 801b094:	4606      	mov	r6, r0
 801b096:	460f      	mov	r7, r1
 801b098:	e035      	b.n	801b106 <__kernel_rem_pio2+0x26e>
 801b09a:	4b4a      	ldr	r3, [pc, #296]	; (801b1c4 <__kernel_rem_pio2+0x32c>)
 801b09c:	2200      	movs	r2, #0
 801b09e:	4630      	mov	r0, r6
 801b0a0:	4639      	mov	r1, r7
 801b0a2:	f7e5 faa9 	bl	80005f8 <__aeabi_dmul>
 801b0a6:	f7e5 fd57 	bl	8000b58 <__aeabi_d2iz>
 801b0aa:	f7e5 fa3b 	bl	8000524 <__aeabi_i2d>
 801b0ae:	4602      	mov	r2, r0
 801b0b0:	460b      	mov	r3, r1
 801b0b2:	ec43 2b18 	vmov	d8, r2, r3
 801b0b6:	4b44      	ldr	r3, [pc, #272]	; (801b1c8 <__kernel_rem_pio2+0x330>)
 801b0b8:	2200      	movs	r2, #0
 801b0ba:	f7e5 fa9d 	bl	80005f8 <__aeabi_dmul>
 801b0be:	4602      	mov	r2, r0
 801b0c0:	460b      	mov	r3, r1
 801b0c2:	4630      	mov	r0, r6
 801b0c4:	4639      	mov	r1, r7
 801b0c6:	f7e5 f8df 	bl	8000288 <__aeabi_dsub>
 801b0ca:	f7e5 fd45 	bl	8000b58 <__aeabi_d2iz>
 801b0ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b0d2:	f84b 0b04 	str.w	r0, [fp], #4
 801b0d6:	ec51 0b18 	vmov	r0, r1, d8
 801b0da:	f7e5 f8d7 	bl	800028c <__adddf3>
 801b0de:	f109 39ff 	add.w	r9, r9, #4294967295
 801b0e2:	4606      	mov	r6, r0
 801b0e4:	460f      	mov	r7, r1
 801b0e6:	e75b      	b.n	801afa0 <__kernel_rem_pio2+0x108>
 801b0e8:	d106      	bne.n	801b0f8 <__kernel_rem_pio2+0x260>
 801b0ea:	1e63      	subs	r3, r4, #1
 801b0ec:	aa0c      	add	r2, sp, #48	; 0x30
 801b0ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b0f2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801b0f6:	e79d      	b.n	801b034 <__kernel_rem_pio2+0x19c>
 801b0f8:	4b34      	ldr	r3, [pc, #208]	; (801b1cc <__kernel_rem_pio2+0x334>)
 801b0fa:	2200      	movs	r2, #0
 801b0fc:	f7e5 fd02 	bl	8000b04 <__aeabi_dcmpge>
 801b100:	2800      	cmp	r0, #0
 801b102:	d140      	bne.n	801b186 <__kernel_rem_pio2+0x2ee>
 801b104:	4683      	mov	fp, r0
 801b106:	2200      	movs	r2, #0
 801b108:	2300      	movs	r3, #0
 801b10a:	4630      	mov	r0, r6
 801b10c:	4639      	mov	r1, r7
 801b10e:	f7e5 fcdb 	bl	8000ac8 <__aeabi_dcmpeq>
 801b112:	2800      	cmp	r0, #0
 801b114:	f000 80c1 	beq.w	801b29a <__kernel_rem_pio2+0x402>
 801b118:	1e65      	subs	r5, r4, #1
 801b11a:	462b      	mov	r3, r5
 801b11c:	2200      	movs	r2, #0
 801b11e:	9900      	ldr	r1, [sp, #0]
 801b120:	428b      	cmp	r3, r1
 801b122:	da6d      	bge.n	801b200 <__kernel_rem_pio2+0x368>
 801b124:	2a00      	cmp	r2, #0
 801b126:	f000 808a 	beq.w	801b23e <__kernel_rem_pio2+0x3a6>
 801b12a:	ab0c      	add	r3, sp, #48	; 0x30
 801b12c:	f1aa 0a18 	sub.w	sl, sl, #24
 801b130:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801b134:	2b00      	cmp	r3, #0
 801b136:	f000 80ae 	beq.w	801b296 <__kernel_rem_pio2+0x3fe>
 801b13a:	4650      	mov	r0, sl
 801b13c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 801b1b0 <__kernel_rem_pio2+0x318>
 801b140:	f7ff fcfe 	bl	801ab40 <scalbn>
 801b144:	1c6b      	adds	r3, r5, #1
 801b146:	00da      	lsls	r2, r3, #3
 801b148:	9205      	str	r2, [sp, #20]
 801b14a:	ec57 6b10 	vmov	r6, r7, d0
 801b14e:	aa70      	add	r2, sp, #448	; 0x1c0
 801b150:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801b1c4 <__kernel_rem_pio2+0x32c>
 801b154:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 801b158:	462c      	mov	r4, r5
 801b15a:	f04f 0800 	mov.w	r8, #0
 801b15e:	2c00      	cmp	r4, #0
 801b160:	f280 80d4 	bge.w	801b30c <__kernel_rem_pio2+0x474>
 801b164:	462c      	mov	r4, r5
 801b166:	2c00      	cmp	r4, #0
 801b168:	f2c0 8102 	blt.w	801b370 <__kernel_rem_pio2+0x4d8>
 801b16c:	4b18      	ldr	r3, [pc, #96]	; (801b1d0 <__kernel_rem_pio2+0x338>)
 801b16e:	461e      	mov	r6, r3
 801b170:	ab70      	add	r3, sp, #448	; 0x1c0
 801b172:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801b176:	1b2b      	subs	r3, r5, r4
 801b178:	f04f 0900 	mov.w	r9, #0
 801b17c:	f04f 0a00 	mov.w	sl, #0
 801b180:	2700      	movs	r7, #0
 801b182:	9306      	str	r3, [sp, #24]
 801b184:	e0e6      	b.n	801b354 <__kernel_rem_pio2+0x4bc>
 801b186:	f04f 0b02 	mov.w	fp, #2
 801b18a:	e756      	b.n	801b03a <__kernel_rem_pio2+0x1a2>
 801b18c:	f8d8 3000 	ldr.w	r3, [r8]
 801b190:	bb05      	cbnz	r5, 801b1d4 <__kernel_rem_pio2+0x33c>
 801b192:	b123      	cbz	r3, 801b19e <__kernel_rem_pio2+0x306>
 801b194:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801b198:	f8c8 3000 	str.w	r3, [r8]
 801b19c:	2301      	movs	r3, #1
 801b19e:	3201      	adds	r2, #1
 801b1a0:	f108 0804 	add.w	r8, r8, #4
 801b1a4:	461d      	mov	r5, r3
 801b1a6:	e74f      	b.n	801b048 <__kernel_rem_pio2+0x1b0>
	...
 801b1b4:	3ff00000 	.word	0x3ff00000
 801b1b8:	0801df78 	.word	0x0801df78
 801b1bc:	40200000 	.word	0x40200000
 801b1c0:	3ff00000 	.word	0x3ff00000
 801b1c4:	3e700000 	.word	0x3e700000
 801b1c8:	41700000 	.word	0x41700000
 801b1cc:	3fe00000 	.word	0x3fe00000
 801b1d0:	0801df38 	.word	0x0801df38
 801b1d4:	1acb      	subs	r3, r1, r3
 801b1d6:	f8c8 3000 	str.w	r3, [r8]
 801b1da:	462b      	mov	r3, r5
 801b1dc:	e7df      	b.n	801b19e <__kernel_rem_pio2+0x306>
 801b1de:	1e62      	subs	r2, r4, #1
 801b1e0:	ab0c      	add	r3, sp, #48	; 0x30
 801b1e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b1e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b1ea:	a90c      	add	r1, sp, #48	; 0x30
 801b1ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801b1f0:	e738      	b.n	801b064 <__kernel_rem_pio2+0x1cc>
 801b1f2:	1e62      	subs	r2, r4, #1
 801b1f4:	ab0c      	add	r3, sp, #48	; 0x30
 801b1f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b1fa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801b1fe:	e7f4      	b.n	801b1ea <__kernel_rem_pio2+0x352>
 801b200:	a90c      	add	r1, sp, #48	; 0x30
 801b202:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801b206:	3b01      	subs	r3, #1
 801b208:	430a      	orrs	r2, r1
 801b20a:	e788      	b.n	801b11e <__kernel_rem_pio2+0x286>
 801b20c:	3301      	adds	r3, #1
 801b20e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801b212:	2900      	cmp	r1, #0
 801b214:	d0fa      	beq.n	801b20c <__kernel_rem_pio2+0x374>
 801b216:	9a08      	ldr	r2, [sp, #32]
 801b218:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801b21c:	446a      	add	r2, sp
 801b21e:	3a98      	subs	r2, #152	; 0x98
 801b220:	9208      	str	r2, [sp, #32]
 801b222:	9a06      	ldr	r2, [sp, #24]
 801b224:	a920      	add	r1, sp, #128	; 0x80
 801b226:	18a2      	adds	r2, r4, r2
 801b228:	18e3      	adds	r3, r4, r3
 801b22a:	f104 0801 	add.w	r8, r4, #1
 801b22e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801b232:	9302      	str	r3, [sp, #8]
 801b234:	9b02      	ldr	r3, [sp, #8]
 801b236:	4543      	cmp	r3, r8
 801b238:	da04      	bge.n	801b244 <__kernel_rem_pio2+0x3ac>
 801b23a:	461c      	mov	r4, r3
 801b23c:	e6a2      	b.n	801af84 <__kernel_rem_pio2+0xec>
 801b23e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b240:	2301      	movs	r3, #1
 801b242:	e7e4      	b.n	801b20e <__kernel_rem_pio2+0x376>
 801b244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b246:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801b24a:	f7e5 f96b 	bl	8000524 <__aeabi_i2d>
 801b24e:	e8e5 0102 	strd	r0, r1, [r5], #8
 801b252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b254:	46ab      	mov	fp, r5
 801b256:	461c      	mov	r4, r3
 801b258:	f04f 0900 	mov.w	r9, #0
 801b25c:	2600      	movs	r6, #0
 801b25e:	2700      	movs	r7, #0
 801b260:	9b05      	ldr	r3, [sp, #20]
 801b262:	4599      	cmp	r9, r3
 801b264:	dd06      	ble.n	801b274 <__kernel_rem_pio2+0x3dc>
 801b266:	9b08      	ldr	r3, [sp, #32]
 801b268:	e8e3 6702 	strd	r6, r7, [r3], #8
 801b26c:	f108 0801 	add.w	r8, r8, #1
 801b270:	9308      	str	r3, [sp, #32]
 801b272:	e7df      	b.n	801b234 <__kernel_rem_pio2+0x39c>
 801b274:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801b278:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801b27c:	f7e5 f9bc 	bl	80005f8 <__aeabi_dmul>
 801b280:	4602      	mov	r2, r0
 801b282:	460b      	mov	r3, r1
 801b284:	4630      	mov	r0, r6
 801b286:	4639      	mov	r1, r7
 801b288:	f7e5 f800 	bl	800028c <__adddf3>
 801b28c:	f109 0901 	add.w	r9, r9, #1
 801b290:	4606      	mov	r6, r0
 801b292:	460f      	mov	r7, r1
 801b294:	e7e4      	b.n	801b260 <__kernel_rem_pio2+0x3c8>
 801b296:	3d01      	subs	r5, #1
 801b298:	e747      	b.n	801b12a <__kernel_rem_pio2+0x292>
 801b29a:	ec47 6b10 	vmov	d0, r6, r7
 801b29e:	f1ca 0000 	rsb	r0, sl, #0
 801b2a2:	f7ff fc4d 	bl	801ab40 <scalbn>
 801b2a6:	ec57 6b10 	vmov	r6, r7, d0
 801b2aa:	4ba0      	ldr	r3, [pc, #640]	; (801b52c <__kernel_rem_pio2+0x694>)
 801b2ac:	ee10 0a10 	vmov	r0, s0
 801b2b0:	2200      	movs	r2, #0
 801b2b2:	4639      	mov	r1, r7
 801b2b4:	f7e5 fc26 	bl	8000b04 <__aeabi_dcmpge>
 801b2b8:	b1f8      	cbz	r0, 801b2fa <__kernel_rem_pio2+0x462>
 801b2ba:	4b9d      	ldr	r3, [pc, #628]	; (801b530 <__kernel_rem_pio2+0x698>)
 801b2bc:	2200      	movs	r2, #0
 801b2be:	4630      	mov	r0, r6
 801b2c0:	4639      	mov	r1, r7
 801b2c2:	f7e5 f999 	bl	80005f8 <__aeabi_dmul>
 801b2c6:	f7e5 fc47 	bl	8000b58 <__aeabi_d2iz>
 801b2ca:	4680      	mov	r8, r0
 801b2cc:	f7e5 f92a 	bl	8000524 <__aeabi_i2d>
 801b2d0:	4b96      	ldr	r3, [pc, #600]	; (801b52c <__kernel_rem_pio2+0x694>)
 801b2d2:	2200      	movs	r2, #0
 801b2d4:	f7e5 f990 	bl	80005f8 <__aeabi_dmul>
 801b2d8:	460b      	mov	r3, r1
 801b2da:	4602      	mov	r2, r0
 801b2dc:	4639      	mov	r1, r7
 801b2de:	4630      	mov	r0, r6
 801b2e0:	f7e4 ffd2 	bl	8000288 <__aeabi_dsub>
 801b2e4:	f7e5 fc38 	bl	8000b58 <__aeabi_d2iz>
 801b2e8:	1c65      	adds	r5, r4, #1
 801b2ea:	ab0c      	add	r3, sp, #48	; 0x30
 801b2ec:	f10a 0a18 	add.w	sl, sl, #24
 801b2f0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b2f4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801b2f8:	e71f      	b.n	801b13a <__kernel_rem_pio2+0x2a2>
 801b2fa:	4630      	mov	r0, r6
 801b2fc:	4639      	mov	r1, r7
 801b2fe:	f7e5 fc2b 	bl	8000b58 <__aeabi_d2iz>
 801b302:	ab0c      	add	r3, sp, #48	; 0x30
 801b304:	4625      	mov	r5, r4
 801b306:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b30a:	e716      	b.n	801b13a <__kernel_rem_pio2+0x2a2>
 801b30c:	ab0c      	add	r3, sp, #48	; 0x30
 801b30e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b312:	f7e5 f907 	bl	8000524 <__aeabi_i2d>
 801b316:	4632      	mov	r2, r6
 801b318:	463b      	mov	r3, r7
 801b31a:	f7e5 f96d 	bl	80005f8 <__aeabi_dmul>
 801b31e:	4642      	mov	r2, r8
 801b320:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801b324:	464b      	mov	r3, r9
 801b326:	4630      	mov	r0, r6
 801b328:	4639      	mov	r1, r7
 801b32a:	f7e5 f965 	bl	80005f8 <__aeabi_dmul>
 801b32e:	3c01      	subs	r4, #1
 801b330:	4606      	mov	r6, r0
 801b332:	460f      	mov	r7, r1
 801b334:	e713      	b.n	801b15e <__kernel_rem_pio2+0x2c6>
 801b336:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801b33a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801b33e:	f7e5 f95b 	bl	80005f8 <__aeabi_dmul>
 801b342:	4602      	mov	r2, r0
 801b344:	460b      	mov	r3, r1
 801b346:	4648      	mov	r0, r9
 801b348:	4651      	mov	r1, sl
 801b34a:	f7e4 ff9f 	bl	800028c <__adddf3>
 801b34e:	3701      	adds	r7, #1
 801b350:	4681      	mov	r9, r0
 801b352:	468a      	mov	sl, r1
 801b354:	9b00      	ldr	r3, [sp, #0]
 801b356:	429f      	cmp	r7, r3
 801b358:	dc02      	bgt.n	801b360 <__kernel_rem_pio2+0x4c8>
 801b35a:	9b06      	ldr	r3, [sp, #24]
 801b35c:	429f      	cmp	r7, r3
 801b35e:	ddea      	ble.n	801b336 <__kernel_rem_pio2+0x49e>
 801b360:	9a06      	ldr	r2, [sp, #24]
 801b362:	ab48      	add	r3, sp, #288	; 0x120
 801b364:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 801b368:	e9c6 9a00 	strd	r9, sl, [r6]
 801b36c:	3c01      	subs	r4, #1
 801b36e:	e6fa      	b.n	801b166 <__kernel_rem_pio2+0x2ce>
 801b370:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b372:	2b02      	cmp	r3, #2
 801b374:	dc0b      	bgt.n	801b38e <__kernel_rem_pio2+0x4f6>
 801b376:	2b00      	cmp	r3, #0
 801b378:	dc39      	bgt.n	801b3ee <__kernel_rem_pio2+0x556>
 801b37a:	d05d      	beq.n	801b438 <__kernel_rem_pio2+0x5a0>
 801b37c:	9b02      	ldr	r3, [sp, #8]
 801b37e:	f003 0007 	and.w	r0, r3, #7
 801b382:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801b386:	ecbd 8b02 	vpop	{d8}
 801b38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b38e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b390:	2b03      	cmp	r3, #3
 801b392:	d1f3      	bne.n	801b37c <__kernel_rem_pio2+0x4e4>
 801b394:	9b05      	ldr	r3, [sp, #20]
 801b396:	9500      	str	r5, [sp, #0]
 801b398:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801b39c:	eb0d 0403 	add.w	r4, sp, r3
 801b3a0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801b3a4:	46a2      	mov	sl, r4
 801b3a6:	9b00      	ldr	r3, [sp, #0]
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	f1aa 0a08 	sub.w	sl, sl, #8
 801b3ae:	dc69      	bgt.n	801b484 <__kernel_rem_pio2+0x5ec>
 801b3b0:	46aa      	mov	sl, r5
 801b3b2:	f1ba 0f01 	cmp.w	sl, #1
 801b3b6:	f1a4 0408 	sub.w	r4, r4, #8
 801b3ba:	f300 8083 	bgt.w	801b4c4 <__kernel_rem_pio2+0x62c>
 801b3be:	9c05      	ldr	r4, [sp, #20]
 801b3c0:	ab48      	add	r3, sp, #288	; 0x120
 801b3c2:	441c      	add	r4, r3
 801b3c4:	2000      	movs	r0, #0
 801b3c6:	2100      	movs	r1, #0
 801b3c8:	2d01      	cmp	r5, #1
 801b3ca:	f300 809a 	bgt.w	801b502 <__kernel_rem_pio2+0x66a>
 801b3ce:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801b3d2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801b3d6:	f1bb 0f00 	cmp.w	fp, #0
 801b3da:	f040 8098 	bne.w	801b50e <__kernel_rem_pio2+0x676>
 801b3de:	9b04      	ldr	r3, [sp, #16]
 801b3e0:	e9c3 7800 	strd	r7, r8, [r3]
 801b3e4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801b3e8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801b3ec:	e7c6      	b.n	801b37c <__kernel_rem_pio2+0x4e4>
 801b3ee:	9e05      	ldr	r6, [sp, #20]
 801b3f0:	ab48      	add	r3, sp, #288	; 0x120
 801b3f2:	441e      	add	r6, r3
 801b3f4:	462c      	mov	r4, r5
 801b3f6:	2000      	movs	r0, #0
 801b3f8:	2100      	movs	r1, #0
 801b3fa:	2c00      	cmp	r4, #0
 801b3fc:	da33      	bge.n	801b466 <__kernel_rem_pio2+0x5ce>
 801b3fe:	f1bb 0f00 	cmp.w	fp, #0
 801b402:	d036      	beq.n	801b472 <__kernel_rem_pio2+0x5da>
 801b404:	4602      	mov	r2, r0
 801b406:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b40a:	9c04      	ldr	r4, [sp, #16]
 801b40c:	e9c4 2300 	strd	r2, r3, [r4]
 801b410:	4602      	mov	r2, r0
 801b412:	460b      	mov	r3, r1
 801b414:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801b418:	f7e4 ff36 	bl	8000288 <__aeabi_dsub>
 801b41c:	ae4a      	add	r6, sp, #296	; 0x128
 801b41e:	2401      	movs	r4, #1
 801b420:	42a5      	cmp	r5, r4
 801b422:	da29      	bge.n	801b478 <__kernel_rem_pio2+0x5e0>
 801b424:	f1bb 0f00 	cmp.w	fp, #0
 801b428:	d002      	beq.n	801b430 <__kernel_rem_pio2+0x598>
 801b42a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b42e:	4619      	mov	r1, r3
 801b430:	9b04      	ldr	r3, [sp, #16]
 801b432:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801b436:	e7a1      	b.n	801b37c <__kernel_rem_pio2+0x4e4>
 801b438:	9c05      	ldr	r4, [sp, #20]
 801b43a:	ab48      	add	r3, sp, #288	; 0x120
 801b43c:	441c      	add	r4, r3
 801b43e:	2000      	movs	r0, #0
 801b440:	2100      	movs	r1, #0
 801b442:	2d00      	cmp	r5, #0
 801b444:	da09      	bge.n	801b45a <__kernel_rem_pio2+0x5c2>
 801b446:	f1bb 0f00 	cmp.w	fp, #0
 801b44a:	d002      	beq.n	801b452 <__kernel_rem_pio2+0x5ba>
 801b44c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b450:	4619      	mov	r1, r3
 801b452:	9b04      	ldr	r3, [sp, #16]
 801b454:	e9c3 0100 	strd	r0, r1, [r3]
 801b458:	e790      	b.n	801b37c <__kernel_rem_pio2+0x4e4>
 801b45a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b45e:	f7e4 ff15 	bl	800028c <__adddf3>
 801b462:	3d01      	subs	r5, #1
 801b464:	e7ed      	b.n	801b442 <__kernel_rem_pio2+0x5aa>
 801b466:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801b46a:	f7e4 ff0f 	bl	800028c <__adddf3>
 801b46e:	3c01      	subs	r4, #1
 801b470:	e7c3      	b.n	801b3fa <__kernel_rem_pio2+0x562>
 801b472:	4602      	mov	r2, r0
 801b474:	460b      	mov	r3, r1
 801b476:	e7c8      	b.n	801b40a <__kernel_rem_pio2+0x572>
 801b478:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801b47c:	f7e4 ff06 	bl	800028c <__adddf3>
 801b480:	3401      	adds	r4, #1
 801b482:	e7cd      	b.n	801b420 <__kernel_rem_pio2+0x588>
 801b484:	e9da 8900 	ldrd	r8, r9, [sl]
 801b488:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801b48c:	9b00      	ldr	r3, [sp, #0]
 801b48e:	3b01      	subs	r3, #1
 801b490:	9300      	str	r3, [sp, #0]
 801b492:	4632      	mov	r2, r6
 801b494:	463b      	mov	r3, r7
 801b496:	4640      	mov	r0, r8
 801b498:	4649      	mov	r1, r9
 801b49a:	f7e4 fef7 	bl	800028c <__adddf3>
 801b49e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b4a2:	4602      	mov	r2, r0
 801b4a4:	460b      	mov	r3, r1
 801b4a6:	4640      	mov	r0, r8
 801b4a8:	4649      	mov	r1, r9
 801b4aa:	f7e4 feed 	bl	8000288 <__aeabi_dsub>
 801b4ae:	4632      	mov	r2, r6
 801b4b0:	463b      	mov	r3, r7
 801b4b2:	f7e4 feeb 	bl	800028c <__adddf3>
 801b4b6:	ed9d 7b06 	vldr	d7, [sp, #24]
 801b4ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b4be:	ed8a 7b00 	vstr	d7, [sl]
 801b4c2:	e770      	b.n	801b3a6 <__kernel_rem_pio2+0x50e>
 801b4c4:	e9d4 8900 	ldrd	r8, r9, [r4]
 801b4c8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801b4cc:	4640      	mov	r0, r8
 801b4ce:	4632      	mov	r2, r6
 801b4d0:	463b      	mov	r3, r7
 801b4d2:	4649      	mov	r1, r9
 801b4d4:	f7e4 feda 	bl	800028c <__adddf3>
 801b4d8:	e9cd 0100 	strd	r0, r1, [sp]
 801b4dc:	4602      	mov	r2, r0
 801b4de:	460b      	mov	r3, r1
 801b4e0:	4640      	mov	r0, r8
 801b4e2:	4649      	mov	r1, r9
 801b4e4:	f7e4 fed0 	bl	8000288 <__aeabi_dsub>
 801b4e8:	4632      	mov	r2, r6
 801b4ea:	463b      	mov	r3, r7
 801b4ec:	f7e4 fece 	bl	800028c <__adddf3>
 801b4f0:	ed9d 7b00 	vldr	d7, [sp]
 801b4f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801b4f8:	ed84 7b00 	vstr	d7, [r4]
 801b4fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b500:	e757      	b.n	801b3b2 <__kernel_rem_pio2+0x51a>
 801b502:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b506:	f7e4 fec1 	bl	800028c <__adddf3>
 801b50a:	3d01      	subs	r5, #1
 801b50c:	e75c      	b.n	801b3c8 <__kernel_rem_pio2+0x530>
 801b50e:	9b04      	ldr	r3, [sp, #16]
 801b510:	9a04      	ldr	r2, [sp, #16]
 801b512:	601f      	str	r7, [r3, #0]
 801b514:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801b518:	605c      	str	r4, [r3, #4]
 801b51a:	609d      	str	r5, [r3, #8]
 801b51c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801b520:	60d3      	str	r3, [r2, #12]
 801b522:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b526:	6110      	str	r0, [r2, #16]
 801b528:	6153      	str	r3, [r2, #20]
 801b52a:	e727      	b.n	801b37c <__kernel_rem_pio2+0x4e4>
 801b52c:	41700000 	.word	0x41700000
 801b530:	3e700000 	.word	0x3e700000
 801b534:	00000000 	.word	0x00000000

0801b538 <__ieee754_acos>:
 801b538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b53c:	ec55 4b10 	vmov	r4, r5, d0
 801b540:	49b7      	ldr	r1, [pc, #732]	; (801b820 <__ieee754_acos+0x2e8>)
 801b542:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b546:	428b      	cmp	r3, r1
 801b548:	dd1b      	ble.n	801b582 <__ieee754_acos+0x4a>
 801b54a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801b54e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801b552:	4323      	orrs	r3, r4
 801b554:	d106      	bne.n	801b564 <__ieee754_acos+0x2c>
 801b556:	2d00      	cmp	r5, #0
 801b558:	f300 8211 	bgt.w	801b97e <__ieee754_acos+0x446>
 801b55c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 801b7b8 <__ieee754_acos+0x280>
 801b560:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b564:	ee10 2a10 	vmov	r2, s0
 801b568:	462b      	mov	r3, r5
 801b56a:	ee10 0a10 	vmov	r0, s0
 801b56e:	4629      	mov	r1, r5
 801b570:	f7e4 fe8a 	bl	8000288 <__aeabi_dsub>
 801b574:	4602      	mov	r2, r0
 801b576:	460b      	mov	r3, r1
 801b578:	f7e5 f968 	bl	800084c <__aeabi_ddiv>
 801b57c:	ec41 0b10 	vmov	d0, r0, r1
 801b580:	e7ee      	b.n	801b560 <__ieee754_acos+0x28>
 801b582:	49a8      	ldr	r1, [pc, #672]	; (801b824 <__ieee754_acos+0x2ec>)
 801b584:	428b      	cmp	r3, r1
 801b586:	f300 8087 	bgt.w	801b698 <__ieee754_acos+0x160>
 801b58a:	4aa7      	ldr	r2, [pc, #668]	; (801b828 <__ieee754_acos+0x2f0>)
 801b58c:	4293      	cmp	r3, r2
 801b58e:	f340 81f9 	ble.w	801b984 <__ieee754_acos+0x44c>
 801b592:	ee10 2a10 	vmov	r2, s0
 801b596:	ee10 0a10 	vmov	r0, s0
 801b59a:	462b      	mov	r3, r5
 801b59c:	4629      	mov	r1, r5
 801b59e:	f7e5 f82b 	bl	80005f8 <__aeabi_dmul>
 801b5a2:	a387      	add	r3, pc, #540	; (adr r3, 801b7c0 <__ieee754_acos+0x288>)
 801b5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5a8:	4606      	mov	r6, r0
 801b5aa:	460f      	mov	r7, r1
 801b5ac:	f7e5 f824 	bl	80005f8 <__aeabi_dmul>
 801b5b0:	a385      	add	r3, pc, #532	; (adr r3, 801b7c8 <__ieee754_acos+0x290>)
 801b5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5b6:	f7e4 fe69 	bl	800028c <__adddf3>
 801b5ba:	4632      	mov	r2, r6
 801b5bc:	463b      	mov	r3, r7
 801b5be:	f7e5 f81b 	bl	80005f8 <__aeabi_dmul>
 801b5c2:	a383      	add	r3, pc, #524	; (adr r3, 801b7d0 <__ieee754_acos+0x298>)
 801b5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5c8:	f7e4 fe5e 	bl	8000288 <__aeabi_dsub>
 801b5cc:	4632      	mov	r2, r6
 801b5ce:	463b      	mov	r3, r7
 801b5d0:	f7e5 f812 	bl	80005f8 <__aeabi_dmul>
 801b5d4:	a380      	add	r3, pc, #512	; (adr r3, 801b7d8 <__ieee754_acos+0x2a0>)
 801b5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5da:	f7e4 fe57 	bl	800028c <__adddf3>
 801b5de:	4632      	mov	r2, r6
 801b5e0:	463b      	mov	r3, r7
 801b5e2:	f7e5 f809 	bl	80005f8 <__aeabi_dmul>
 801b5e6:	a37e      	add	r3, pc, #504	; (adr r3, 801b7e0 <__ieee754_acos+0x2a8>)
 801b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5ec:	f7e4 fe4c 	bl	8000288 <__aeabi_dsub>
 801b5f0:	4632      	mov	r2, r6
 801b5f2:	463b      	mov	r3, r7
 801b5f4:	f7e5 f800 	bl	80005f8 <__aeabi_dmul>
 801b5f8:	a37b      	add	r3, pc, #492	; (adr r3, 801b7e8 <__ieee754_acos+0x2b0>)
 801b5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5fe:	f7e4 fe45 	bl	800028c <__adddf3>
 801b602:	4632      	mov	r2, r6
 801b604:	463b      	mov	r3, r7
 801b606:	f7e4 fff7 	bl	80005f8 <__aeabi_dmul>
 801b60a:	a379      	add	r3, pc, #484	; (adr r3, 801b7f0 <__ieee754_acos+0x2b8>)
 801b60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b610:	4680      	mov	r8, r0
 801b612:	4689      	mov	r9, r1
 801b614:	4630      	mov	r0, r6
 801b616:	4639      	mov	r1, r7
 801b618:	f7e4 ffee 	bl	80005f8 <__aeabi_dmul>
 801b61c:	a376      	add	r3, pc, #472	; (adr r3, 801b7f8 <__ieee754_acos+0x2c0>)
 801b61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b622:	f7e4 fe31 	bl	8000288 <__aeabi_dsub>
 801b626:	4632      	mov	r2, r6
 801b628:	463b      	mov	r3, r7
 801b62a:	f7e4 ffe5 	bl	80005f8 <__aeabi_dmul>
 801b62e:	a374      	add	r3, pc, #464	; (adr r3, 801b800 <__ieee754_acos+0x2c8>)
 801b630:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b634:	f7e4 fe2a 	bl	800028c <__adddf3>
 801b638:	4632      	mov	r2, r6
 801b63a:	463b      	mov	r3, r7
 801b63c:	f7e4 ffdc 	bl	80005f8 <__aeabi_dmul>
 801b640:	a371      	add	r3, pc, #452	; (adr r3, 801b808 <__ieee754_acos+0x2d0>)
 801b642:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b646:	f7e4 fe1f 	bl	8000288 <__aeabi_dsub>
 801b64a:	4632      	mov	r2, r6
 801b64c:	463b      	mov	r3, r7
 801b64e:	f7e4 ffd3 	bl	80005f8 <__aeabi_dmul>
 801b652:	4b76      	ldr	r3, [pc, #472]	; (801b82c <__ieee754_acos+0x2f4>)
 801b654:	2200      	movs	r2, #0
 801b656:	f7e4 fe19 	bl	800028c <__adddf3>
 801b65a:	4602      	mov	r2, r0
 801b65c:	460b      	mov	r3, r1
 801b65e:	4640      	mov	r0, r8
 801b660:	4649      	mov	r1, r9
 801b662:	f7e5 f8f3 	bl	800084c <__aeabi_ddiv>
 801b666:	4622      	mov	r2, r4
 801b668:	462b      	mov	r3, r5
 801b66a:	f7e4 ffc5 	bl	80005f8 <__aeabi_dmul>
 801b66e:	4602      	mov	r2, r0
 801b670:	460b      	mov	r3, r1
 801b672:	a167      	add	r1, pc, #412	; (adr r1, 801b810 <__ieee754_acos+0x2d8>)
 801b674:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b678:	f7e4 fe06 	bl	8000288 <__aeabi_dsub>
 801b67c:	4602      	mov	r2, r0
 801b67e:	460b      	mov	r3, r1
 801b680:	4620      	mov	r0, r4
 801b682:	4629      	mov	r1, r5
 801b684:	f7e4 fe00 	bl	8000288 <__aeabi_dsub>
 801b688:	4602      	mov	r2, r0
 801b68a:	460b      	mov	r3, r1
 801b68c:	a162      	add	r1, pc, #392	; (adr r1, 801b818 <__ieee754_acos+0x2e0>)
 801b68e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b692:	f7e4 fdf9 	bl	8000288 <__aeabi_dsub>
 801b696:	e771      	b.n	801b57c <__ieee754_acos+0x44>
 801b698:	2d00      	cmp	r5, #0
 801b69a:	f280 80cb 	bge.w	801b834 <__ieee754_acos+0x2fc>
 801b69e:	ee10 0a10 	vmov	r0, s0
 801b6a2:	4b62      	ldr	r3, [pc, #392]	; (801b82c <__ieee754_acos+0x2f4>)
 801b6a4:	2200      	movs	r2, #0
 801b6a6:	4629      	mov	r1, r5
 801b6a8:	f7e4 fdf0 	bl	800028c <__adddf3>
 801b6ac:	4b60      	ldr	r3, [pc, #384]	; (801b830 <__ieee754_acos+0x2f8>)
 801b6ae:	2200      	movs	r2, #0
 801b6b0:	f7e4 ffa2 	bl	80005f8 <__aeabi_dmul>
 801b6b4:	a342      	add	r3, pc, #264	; (adr r3, 801b7c0 <__ieee754_acos+0x288>)
 801b6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6ba:	4604      	mov	r4, r0
 801b6bc:	460d      	mov	r5, r1
 801b6be:	f7e4 ff9b 	bl	80005f8 <__aeabi_dmul>
 801b6c2:	a341      	add	r3, pc, #260	; (adr r3, 801b7c8 <__ieee754_acos+0x290>)
 801b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6c8:	f7e4 fde0 	bl	800028c <__adddf3>
 801b6cc:	4622      	mov	r2, r4
 801b6ce:	462b      	mov	r3, r5
 801b6d0:	f7e4 ff92 	bl	80005f8 <__aeabi_dmul>
 801b6d4:	a33e      	add	r3, pc, #248	; (adr r3, 801b7d0 <__ieee754_acos+0x298>)
 801b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6da:	f7e4 fdd5 	bl	8000288 <__aeabi_dsub>
 801b6de:	4622      	mov	r2, r4
 801b6e0:	462b      	mov	r3, r5
 801b6e2:	f7e4 ff89 	bl	80005f8 <__aeabi_dmul>
 801b6e6:	a33c      	add	r3, pc, #240	; (adr r3, 801b7d8 <__ieee754_acos+0x2a0>)
 801b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6ec:	f7e4 fdce 	bl	800028c <__adddf3>
 801b6f0:	4622      	mov	r2, r4
 801b6f2:	462b      	mov	r3, r5
 801b6f4:	f7e4 ff80 	bl	80005f8 <__aeabi_dmul>
 801b6f8:	a339      	add	r3, pc, #228	; (adr r3, 801b7e0 <__ieee754_acos+0x2a8>)
 801b6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6fe:	f7e4 fdc3 	bl	8000288 <__aeabi_dsub>
 801b702:	4622      	mov	r2, r4
 801b704:	462b      	mov	r3, r5
 801b706:	f7e4 ff77 	bl	80005f8 <__aeabi_dmul>
 801b70a:	a337      	add	r3, pc, #220	; (adr r3, 801b7e8 <__ieee754_acos+0x2b0>)
 801b70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b710:	f7e4 fdbc 	bl	800028c <__adddf3>
 801b714:	4622      	mov	r2, r4
 801b716:	462b      	mov	r3, r5
 801b718:	f7e4 ff6e 	bl	80005f8 <__aeabi_dmul>
 801b71c:	ec45 4b10 	vmov	d0, r4, r5
 801b720:	4680      	mov	r8, r0
 801b722:	4689      	mov	r9, r1
 801b724:	f7ff fadc 	bl	801ace0 <__ieee754_sqrt>
 801b728:	a331      	add	r3, pc, #196	; (adr r3, 801b7f0 <__ieee754_acos+0x2b8>)
 801b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b72e:	4620      	mov	r0, r4
 801b730:	4629      	mov	r1, r5
 801b732:	ec57 6b10 	vmov	r6, r7, d0
 801b736:	f7e4 ff5f 	bl	80005f8 <__aeabi_dmul>
 801b73a:	a32f      	add	r3, pc, #188	; (adr r3, 801b7f8 <__ieee754_acos+0x2c0>)
 801b73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b740:	f7e4 fda2 	bl	8000288 <__aeabi_dsub>
 801b744:	4622      	mov	r2, r4
 801b746:	462b      	mov	r3, r5
 801b748:	f7e4 ff56 	bl	80005f8 <__aeabi_dmul>
 801b74c:	a32c      	add	r3, pc, #176	; (adr r3, 801b800 <__ieee754_acos+0x2c8>)
 801b74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b752:	f7e4 fd9b 	bl	800028c <__adddf3>
 801b756:	4622      	mov	r2, r4
 801b758:	462b      	mov	r3, r5
 801b75a:	f7e4 ff4d 	bl	80005f8 <__aeabi_dmul>
 801b75e:	a32a      	add	r3, pc, #168	; (adr r3, 801b808 <__ieee754_acos+0x2d0>)
 801b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b764:	f7e4 fd90 	bl	8000288 <__aeabi_dsub>
 801b768:	4622      	mov	r2, r4
 801b76a:	462b      	mov	r3, r5
 801b76c:	f7e4 ff44 	bl	80005f8 <__aeabi_dmul>
 801b770:	4b2e      	ldr	r3, [pc, #184]	; (801b82c <__ieee754_acos+0x2f4>)
 801b772:	2200      	movs	r2, #0
 801b774:	f7e4 fd8a 	bl	800028c <__adddf3>
 801b778:	4602      	mov	r2, r0
 801b77a:	460b      	mov	r3, r1
 801b77c:	4640      	mov	r0, r8
 801b77e:	4649      	mov	r1, r9
 801b780:	f7e5 f864 	bl	800084c <__aeabi_ddiv>
 801b784:	4632      	mov	r2, r6
 801b786:	463b      	mov	r3, r7
 801b788:	f7e4 ff36 	bl	80005f8 <__aeabi_dmul>
 801b78c:	a320      	add	r3, pc, #128	; (adr r3, 801b810 <__ieee754_acos+0x2d8>)
 801b78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b792:	f7e4 fd79 	bl	8000288 <__aeabi_dsub>
 801b796:	4632      	mov	r2, r6
 801b798:	463b      	mov	r3, r7
 801b79a:	f7e4 fd77 	bl	800028c <__adddf3>
 801b79e:	4602      	mov	r2, r0
 801b7a0:	460b      	mov	r3, r1
 801b7a2:	f7e4 fd73 	bl	800028c <__adddf3>
 801b7a6:	4602      	mov	r2, r0
 801b7a8:	460b      	mov	r3, r1
 801b7aa:	a103      	add	r1, pc, #12	; (adr r1, 801b7b8 <__ieee754_acos+0x280>)
 801b7ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b7b0:	e76f      	b.n	801b692 <__ieee754_acos+0x15a>
 801b7b2:	bf00      	nop
 801b7b4:	f3af 8000 	nop.w
 801b7b8:	54442d18 	.word	0x54442d18
 801b7bc:	400921fb 	.word	0x400921fb
 801b7c0:	0dfdf709 	.word	0x0dfdf709
 801b7c4:	3f023de1 	.word	0x3f023de1
 801b7c8:	7501b288 	.word	0x7501b288
 801b7cc:	3f49efe0 	.word	0x3f49efe0
 801b7d0:	b5688f3b 	.word	0xb5688f3b
 801b7d4:	3fa48228 	.word	0x3fa48228
 801b7d8:	0e884455 	.word	0x0e884455
 801b7dc:	3fc9c155 	.word	0x3fc9c155
 801b7e0:	03eb6f7d 	.word	0x03eb6f7d
 801b7e4:	3fd4d612 	.word	0x3fd4d612
 801b7e8:	55555555 	.word	0x55555555
 801b7ec:	3fc55555 	.word	0x3fc55555
 801b7f0:	b12e9282 	.word	0xb12e9282
 801b7f4:	3fb3b8c5 	.word	0x3fb3b8c5
 801b7f8:	1b8d0159 	.word	0x1b8d0159
 801b7fc:	3fe6066c 	.word	0x3fe6066c
 801b800:	9c598ac8 	.word	0x9c598ac8
 801b804:	40002ae5 	.word	0x40002ae5
 801b808:	1c8a2d4b 	.word	0x1c8a2d4b
 801b80c:	40033a27 	.word	0x40033a27
 801b810:	33145c07 	.word	0x33145c07
 801b814:	3c91a626 	.word	0x3c91a626
 801b818:	54442d18 	.word	0x54442d18
 801b81c:	3ff921fb 	.word	0x3ff921fb
 801b820:	3fefffff 	.word	0x3fefffff
 801b824:	3fdfffff 	.word	0x3fdfffff
 801b828:	3c600000 	.word	0x3c600000
 801b82c:	3ff00000 	.word	0x3ff00000
 801b830:	3fe00000 	.word	0x3fe00000
 801b834:	ee10 2a10 	vmov	r2, s0
 801b838:	462b      	mov	r3, r5
 801b83a:	496d      	ldr	r1, [pc, #436]	; (801b9f0 <__ieee754_acos+0x4b8>)
 801b83c:	2000      	movs	r0, #0
 801b83e:	f7e4 fd23 	bl	8000288 <__aeabi_dsub>
 801b842:	4b6c      	ldr	r3, [pc, #432]	; (801b9f4 <__ieee754_acos+0x4bc>)
 801b844:	2200      	movs	r2, #0
 801b846:	f7e4 fed7 	bl	80005f8 <__aeabi_dmul>
 801b84a:	4604      	mov	r4, r0
 801b84c:	460d      	mov	r5, r1
 801b84e:	ec45 4b10 	vmov	d0, r4, r5
 801b852:	f7ff fa45 	bl	801ace0 <__ieee754_sqrt>
 801b856:	a34e      	add	r3, pc, #312	; (adr r3, 801b990 <__ieee754_acos+0x458>)
 801b858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b85c:	4620      	mov	r0, r4
 801b85e:	4629      	mov	r1, r5
 801b860:	ec59 8b10 	vmov	r8, r9, d0
 801b864:	f7e4 fec8 	bl	80005f8 <__aeabi_dmul>
 801b868:	a34b      	add	r3, pc, #300	; (adr r3, 801b998 <__ieee754_acos+0x460>)
 801b86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b86e:	f7e4 fd0d 	bl	800028c <__adddf3>
 801b872:	4622      	mov	r2, r4
 801b874:	462b      	mov	r3, r5
 801b876:	f7e4 febf 	bl	80005f8 <__aeabi_dmul>
 801b87a:	a349      	add	r3, pc, #292	; (adr r3, 801b9a0 <__ieee754_acos+0x468>)
 801b87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b880:	f7e4 fd02 	bl	8000288 <__aeabi_dsub>
 801b884:	4622      	mov	r2, r4
 801b886:	462b      	mov	r3, r5
 801b888:	f7e4 feb6 	bl	80005f8 <__aeabi_dmul>
 801b88c:	a346      	add	r3, pc, #280	; (adr r3, 801b9a8 <__ieee754_acos+0x470>)
 801b88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b892:	f7e4 fcfb 	bl	800028c <__adddf3>
 801b896:	4622      	mov	r2, r4
 801b898:	462b      	mov	r3, r5
 801b89a:	f7e4 fead 	bl	80005f8 <__aeabi_dmul>
 801b89e:	a344      	add	r3, pc, #272	; (adr r3, 801b9b0 <__ieee754_acos+0x478>)
 801b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8a4:	f7e4 fcf0 	bl	8000288 <__aeabi_dsub>
 801b8a8:	4622      	mov	r2, r4
 801b8aa:	462b      	mov	r3, r5
 801b8ac:	f7e4 fea4 	bl	80005f8 <__aeabi_dmul>
 801b8b0:	a341      	add	r3, pc, #260	; (adr r3, 801b9b8 <__ieee754_acos+0x480>)
 801b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8b6:	f7e4 fce9 	bl	800028c <__adddf3>
 801b8ba:	4622      	mov	r2, r4
 801b8bc:	462b      	mov	r3, r5
 801b8be:	f7e4 fe9b 	bl	80005f8 <__aeabi_dmul>
 801b8c2:	a33f      	add	r3, pc, #252	; (adr r3, 801b9c0 <__ieee754_acos+0x488>)
 801b8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8c8:	4682      	mov	sl, r0
 801b8ca:	468b      	mov	fp, r1
 801b8cc:	4620      	mov	r0, r4
 801b8ce:	4629      	mov	r1, r5
 801b8d0:	f7e4 fe92 	bl	80005f8 <__aeabi_dmul>
 801b8d4:	a33c      	add	r3, pc, #240	; (adr r3, 801b9c8 <__ieee754_acos+0x490>)
 801b8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8da:	f7e4 fcd5 	bl	8000288 <__aeabi_dsub>
 801b8de:	4622      	mov	r2, r4
 801b8e0:	462b      	mov	r3, r5
 801b8e2:	f7e4 fe89 	bl	80005f8 <__aeabi_dmul>
 801b8e6:	a33a      	add	r3, pc, #232	; (adr r3, 801b9d0 <__ieee754_acos+0x498>)
 801b8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8ec:	f7e4 fcce 	bl	800028c <__adddf3>
 801b8f0:	4622      	mov	r2, r4
 801b8f2:	462b      	mov	r3, r5
 801b8f4:	f7e4 fe80 	bl	80005f8 <__aeabi_dmul>
 801b8f8:	a337      	add	r3, pc, #220	; (adr r3, 801b9d8 <__ieee754_acos+0x4a0>)
 801b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8fe:	f7e4 fcc3 	bl	8000288 <__aeabi_dsub>
 801b902:	4622      	mov	r2, r4
 801b904:	462b      	mov	r3, r5
 801b906:	f7e4 fe77 	bl	80005f8 <__aeabi_dmul>
 801b90a:	4b39      	ldr	r3, [pc, #228]	; (801b9f0 <__ieee754_acos+0x4b8>)
 801b90c:	2200      	movs	r2, #0
 801b90e:	f7e4 fcbd 	bl	800028c <__adddf3>
 801b912:	4602      	mov	r2, r0
 801b914:	460b      	mov	r3, r1
 801b916:	4650      	mov	r0, sl
 801b918:	4659      	mov	r1, fp
 801b91a:	f7e4 ff97 	bl	800084c <__aeabi_ddiv>
 801b91e:	4642      	mov	r2, r8
 801b920:	464b      	mov	r3, r9
 801b922:	f7e4 fe69 	bl	80005f8 <__aeabi_dmul>
 801b926:	2600      	movs	r6, #0
 801b928:	4682      	mov	sl, r0
 801b92a:	468b      	mov	fp, r1
 801b92c:	4632      	mov	r2, r6
 801b92e:	464b      	mov	r3, r9
 801b930:	4630      	mov	r0, r6
 801b932:	4649      	mov	r1, r9
 801b934:	f7e4 fe60 	bl	80005f8 <__aeabi_dmul>
 801b938:	4602      	mov	r2, r0
 801b93a:	460b      	mov	r3, r1
 801b93c:	4620      	mov	r0, r4
 801b93e:	4629      	mov	r1, r5
 801b940:	f7e4 fca2 	bl	8000288 <__aeabi_dsub>
 801b944:	4632      	mov	r2, r6
 801b946:	4604      	mov	r4, r0
 801b948:	460d      	mov	r5, r1
 801b94a:	464b      	mov	r3, r9
 801b94c:	4640      	mov	r0, r8
 801b94e:	4649      	mov	r1, r9
 801b950:	f7e4 fc9c 	bl	800028c <__adddf3>
 801b954:	4602      	mov	r2, r0
 801b956:	460b      	mov	r3, r1
 801b958:	4620      	mov	r0, r4
 801b95a:	4629      	mov	r1, r5
 801b95c:	f7e4 ff76 	bl	800084c <__aeabi_ddiv>
 801b960:	4602      	mov	r2, r0
 801b962:	460b      	mov	r3, r1
 801b964:	4650      	mov	r0, sl
 801b966:	4659      	mov	r1, fp
 801b968:	f7e4 fc90 	bl	800028c <__adddf3>
 801b96c:	4632      	mov	r2, r6
 801b96e:	464b      	mov	r3, r9
 801b970:	f7e4 fc8c 	bl	800028c <__adddf3>
 801b974:	4602      	mov	r2, r0
 801b976:	460b      	mov	r3, r1
 801b978:	f7e4 fc88 	bl	800028c <__adddf3>
 801b97c:	e5fe      	b.n	801b57c <__ieee754_acos+0x44>
 801b97e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801b9e0 <__ieee754_acos+0x4a8>
 801b982:	e5ed      	b.n	801b560 <__ieee754_acos+0x28>
 801b984:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801b9e8 <__ieee754_acos+0x4b0>
 801b988:	e5ea      	b.n	801b560 <__ieee754_acos+0x28>
 801b98a:	bf00      	nop
 801b98c:	f3af 8000 	nop.w
 801b990:	0dfdf709 	.word	0x0dfdf709
 801b994:	3f023de1 	.word	0x3f023de1
 801b998:	7501b288 	.word	0x7501b288
 801b99c:	3f49efe0 	.word	0x3f49efe0
 801b9a0:	b5688f3b 	.word	0xb5688f3b
 801b9a4:	3fa48228 	.word	0x3fa48228
 801b9a8:	0e884455 	.word	0x0e884455
 801b9ac:	3fc9c155 	.word	0x3fc9c155
 801b9b0:	03eb6f7d 	.word	0x03eb6f7d
 801b9b4:	3fd4d612 	.word	0x3fd4d612
 801b9b8:	55555555 	.word	0x55555555
 801b9bc:	3fc55555 	.word	0x3fc55555
 801b9c0:	b12e9282 	.word	0xb12e9282
 801b9c4:	3fb3b8c5 	.word	0x3fb3b8c5
 801b9c8:	1b8d0159 	.word	0x1b8d0159
 801b9cc:	3fe6066c 	.word	0x3fe6066c
 801b9d0:	9c598ac8 	.word	0x9c598ac8
 801b9d4:	40002ae5 	.word	0x40002ae5
 801b9d8:	1c8a2d4b 	.word	0x1c8a2d4b
 801b9dc:	40033a27 	.word	0x40033a27
	...
 801b9e8:	54442d18 	.word	0x54442d18
 801b9ec:	3ff921fb 	.word	0x3ff921fb
 801b9f0:	3ff00000 	.word	0x3ff00000
 801b9f4:	3fe00000 	.word	0x3fe00000

0801b9f8 <_init>:
 801b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9fa:	bf00      	nop
 801b9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b9fe:	bc08      	pop	{r3}
 801ba00:	469e      	mov	lr, r3
 801ba02:	4770      	bx	lr

0801ba04 <_fini>:
 801ba04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba06:	bf00      	nop
 801ba08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ba0a:	bc08      	pop	{r3}
 801ba0c:	469e      	mov	lr, r3
 801ba0e:	4770      	bx	lr
